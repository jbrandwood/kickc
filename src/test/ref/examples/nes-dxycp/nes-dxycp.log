Resolved forward reference PALETTE to (const byte*) PALETTE
Resolved forward reference PALETTE to (const byte*) PALETTE
Resolved forward reference MESSAGE to (const byte*) MESSAGE
Resolved forward reference SPRITE_BUFFER to (const struct SpriteData*) SPRITE_BUFFER
Resolved forward reference SPRITE_BUFFER to (const struct SpriteData*) SPRITE_BUFFER
Resolved forward reference SINTABLE_240 to (const to_nomodify byte*) SINTABLE_240
Resolved forward reference SPRITE_BUFFER to (const struct SpriteData*) SPRITE_BUFFER
Resolved forward reference SINTABLE_184 to (const to_nomodify byte*) SINTABLE_184
Resolved forward reference SINTABLE_64 to (const to_nomodify byte*) SINTABLE_64
Resolved forward reference SPRITE_BUFFER to (const struct SpriteData*) SPRITE_BUFFER
Constantified RValue *((const struct SpriteData*) SPRITE_BUFFER + (byte~) main::$7) ← (struct SpriteData){ (byte) 0, *((const byte*) MESSAGE + (byte) main::s), (byte) 2, (byte) 0 }
Inlined call call disableVideoOutput 
Inlined call call disableAudioOutput 
Inlined call call clearVBlankFlag 
Inlined call call waitForVBlank 
Inlined call call waitForVBlank 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataFill::ppuData 
Inlined call call ppuDataPut (byte) ppuDataFill::val 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataTransfer::ppuData 
Inlined call call ppuDataPut *((byte*) ppuDataTransfer::cpuSrc) 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataFetch::ppuData 
Inlined call (byte~) ppuDataFetch::$2 ← call ppuDataRead 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataPutTile::ppuData 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 0) 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 1) 
Inlined call call ppuDataPrepare (void*)(byte*~) ppuDataPutTile::$3 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 2) 
Inlined call call ppuDataPut *((byte*) ppuDataPutTile::tile + (number) 3) 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataSet::ppuData 
Inlined call call ppuDataPut (byte) ppuDataSet::val 
Inlined call call ppuDataPrepare (nomodify void*) ppuDataGet::ppuData 
Inlined call (byte~) ppuDataGet::$1 ← call ppuDataRead 
Inlined call call initNES 
Inlined call call enableVideoOutput 
Inlined call call ppuSpriteBufferDmaTransfer (const struct SpriteData*) SPRITE_BUFFER 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

(byte()) readJoy1()
readJoy1: scope:[readJoy1]  from vblank::@16
  (byte*~) readJoy1::$7 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) readJoy1::$4 ← (byte*~) readJoy1::$7 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  *((byte*~) readJoy1::$4) ← (number) 1
  (byte*~) readJoy1::$8 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) readJoy1::$5 ← (byte*~) readJoy1::$8 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  *((byte*~) readJoy1::$5) ← (number) 0
  (byte) readJoy1::joy#0 ← (byte) 0
  (byte) readJoy1::i#0 ← (byte) 0
  to:readJoy1::@1
readJoy1::@1: scope:[readJoy1]  from readJoy1 readJoy1::@2
  (byte) readJoy1::joy#4 ← phi( readJoy1/(byte) readJoy1::joy#0 readJoy1::@2/(byte) readJoy1::joy#1 )
  (byte) readJoy1::i#2 ← phi( readJoy1/(byte) readJoy1::i#0 readJoy1::@2/(byte) readJoy1::i#1 )
  (bool~) readJoy1::$0 ← (byte) readJoy1::i#2 < (number) 8
  if((bool~) readJoy1::$0) goto readJoy1::@2
  to:readJoy1::@3
readJoy1::@2: scope:[readJoy1]  from readJoy1::@1
  (byte) readJoy1::i#3 ← phi( readJoy1::@1/(byte) readJoy1::i#2 )
  (byte) readJoy1::joy#2 ← phi( readJoy1::@1/(byte) readJoy1::joy#4 )
  (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (number) 1
  (byte*~) readJoy1::$9 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) readJoy1::$6 ← (byte*~) readJoy1::$9 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
  (number~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (number) 1
  (number~) readJoy1::$3 ← (byte~) readJoy1::$1 | (number~) readJoy1::$2
  (byte) readJoy1::joy#1 ← (number~) readJoy1::$3
  (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#3
  to:readJoy1::@1
readJoy1::@3: scope:[readJoy1]  from readJoy1::@1
  (byte) readJoy1::joy#3 ← phi( readJoy1::@1/(byte) readJoy1::joy#4 )
  (byte) readJoy1::return#0 ← (byte) readJoy1::joy#3
  to:readJoy1::@return
readJoy1::@return: scope:[readJoy1]  from readJoy1::@3
  (byte) readJoy1::return#3 ← phi( readJoy1::@3/(byte) readJoy1::return#0 )
  (byte) readJoy1::return#1 ← (byte) readJoy1::return#3
  return 
  to:@return

(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@5 main::@6
  (byte) ppuDataFill::val#8 ← phi( main::@5/(byte) ppuDataFill::val#0 main::@6/(byte) ppuDataFill::val#1 )
  (word) ppuDataFill::size#7 ← phi( main::@5/(word) ppuDataFill::size#0 main::@6/(word) ppuDataFill::size#1 )
  (nomodify void*) ppuDataFill::ppuData#2 ← phi( main::@5/(nomodify void*) ppuDataFill::ppuData#0 main::@6/(nomodify void*) ppuDataFill::ppuData#1 )
  (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ← (nomodify void*) ppuDataFill::ppuData#2
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  (byte) ppuDataFill::val#6 ← phi( ppuDataFill/(byte) ppuDataFill::val#8 )
  (word) ppuDataFill::size#5 ← phi( ppuDataFill/(word) ppuDataFill::size#7 )
  (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1 ← phi( ppuDataFill/(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 )
  (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataFill::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataFill::ppuDataPrepare1_$2 ← (byte*~) ppuDataFill::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataFill::ppuDataPrepare1_$2) ← (byte~) ppuDataFill::ppuDataPrepare1_$0
  (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataFill::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataFill::ppuDataPrepare1_$3 ← (byte*~) ppuDataFill::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataFill::ppuDataPrepare1_$3) ← (byte~) ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@3
ppuDataFill::@3: scope:[ppuDataFill]  from ppuDataFill::ppuDataPrepare1
  (byte) ppuDataFill::val#4 ← phi( ppuDataFill::ppuDataPrepare1/(byte) ppuDataFill::val#6 )
  (word) ppuDataFill::size#3 ← phi( ppuDataFill::ppuDataPrepare1/(word) ppuDataFill::size#5 )
  (word) ppuDataFill::i#0 ← (word) 0
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@3 ppuDataFill::@4
  (byte) ppuDataFill::val#3 ← phi( ppuDataFill::@3/(byte) ppuDataFill::val#4 ppuDataFill::@4/(byte) ppuDataFill::val#5 )
  (word) ppuDataFill::size#2 ← phi( ppuDataFill::@3/(word) ppuDataFill::size#3 ppuDataFill::@4/(word) ppuDataFill::size#4 )
  (word) ppuDataFill::i#2 ← phi( ppuDataFill::@3/(word) ppuDataFill::i#0 ppuDataFill::@4/(word) ppuDataFill::i#1 )
  (bool~) ppuDataFill::$1 ← (word) ppuDataFill::i#2 < (word) ppuDataFill::size#2
  if((bool~) ppuDataFill::$1) goto ppuDataFill::@2
  to:ppuDataFill::@return
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::@1
  (word) ppuDataFill::size#8 ← phi( ppuDataFill::@1/(word) ppuDataFill::size#2 )
  (word) ppuDataFill::i#5 ← phi( ppuDataFill::@1/(word) ppuDataFill::i#2 )
  (byte) ppuDataFill::val#2 ← phi( ppuDataFill::@1/(byte) ppuDataFill::val#3 )
  (byte) ppuDataFill::ppuDataPut1_val#0 ← (byte) ppuDataFill::val#2
  to:ppuDataFill::ppuDataPut1
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@2
  (byte) ppuDataFill::val#7 ← phi( ppuDataFill::@2/(byte) ppuDataFill::val#2 )
  (word) ppuDataFill::size#6 ← phi( ppuDataFill::@2/(word) ppuDataFill::size#8 )
  (word) ppuDataFill::i#4 ← phi( ppuDataFill::@2/(word) ppuDataFill::i#5 )
  (byte) ppuDataFill::ppuDataPut1_val#1 ← phi( ppuDataFill::@2/(byte) ppuDataFill::ppuDataPut1_val#0 )
  (byte*~) ppuDataFill::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataFill::ppuDataPut1_$0 ← (byte*~) ppuDataFill::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataFill::ppuDataPut1_$0) ← (byte) ppuDataFill::ppuDataPut1_val#1
  to:ppuDataFill::@4
ppuDataFill::@4: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  (byte) ppuDataFill::val#5 ← phi( ppuDataFill::ppuDataPut1/(byte) ppuDataFill::val#7 )
  (word) ppuDataFill::size#4 ← phi( ppuDataFill::ppuDataPut1/(word) ppuDataFill::size#6 )
  (word) ppuDataFill::i#3 ← phi( ppuDataFill::ppuDataPut1/(word) ppuDataFill::i#4 )
  (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#3
  to:ppuDataFill::@1
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  return 
  to:@return

(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@4
  (word) ppuDataTransfer::size#6 ← phi( main::@4/(word) ppuDataTransfer::size#0 )
  (nomodify void*) ppuDataTransfer::cpuData#3 ← phi( main::@4/(nomodify void*) ppuDataTransfer::cpuData#0 )
  (nomodify void*) ppuDataTransfer::ppuData#1 ← phi( main::@4/(nomodify void*) ppuDataTransfer::ppuData#0 )
  (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 ← (nomodify void*) ppuDataTransfer::ppuData#1
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  (word) ppuDataTransfer::size#4 ← phi( ppuDataTransfer/(word) ppuDataTransfer::size#6 )
  (nomodify void*) ppuDataTransfer::cpuData#2 ← phi( ppuDataTransfer/(nomodify void*) ppuDataTransfer::cpuData#3 )
  (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1 ← phi( ppuDataTransfer/(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 )
  (byte~) ppuDataTransfer::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$2 ← (byte*~) ppuDataTransfer::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataTransfer::ppuDataPrepare1_$2) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$0
  (byte~) ppuDataTransfer::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataTransfer::ppuDataPrepare1_$3 ← (byte*~) ppuDataTransfer::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
  *((byte*~) ppuDataTransfer::ppuDataPrepare1_$3) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$1
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPrepare1
  (word) ppuDataTransfer::size#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(word) ppuDataTransfer::size#4 )
  (nomodify void*) ppuDataTransfer::cpuData#1 ← phi( ppuDataTransfer::ppuDataPrepare1/(nomodify void*) ppuDataTransfer::cpuData#2 )
  (byte*) ppuDataTransfer::cpuSrc#0 ← (byte*)(nomodify void*) ppuDataTransfer::cpuData#1
  (word) ppuDataTransfer::i#0 ← (word) 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::@4
  (byte*) ppuDataTransfer::cpuSrc#4 ← phi( ppuDataTransfer::@3/(byte*) ppuDataTransfer::cpuSrc#0 ppuDataTransfer::@4/(byte*) ppuDataTransfer::cpuSrc#1 )
  (word) ppuDataTransfer::size#1 ← phi( ppuDataTransfer::@3/(word) ppuDataTransfer::size#2 ppuDataTransfer::@4/(word) ppuDataTransfer::size#3 )
  (word) ppuDataTransfer::i#2 ← phi( ppuDataTransfer::@3/(word) ppuDataTransfer::i#0 ppuDataTransfer::@4/(word) ppuDataTransfer::i#1 )
  (bool~) ppuDataTransfer::$1 ← (word) ppuDataTransfer::i#2 < (word) ppuDataTransfer::size#1
  if((bool~) ppuDataTransfer::$1) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  (word) ppuDataTransfer::size#7 ← phi( ppuDataTransfer::@1/(word) ppuDataTransfer::size#1 )
  (word) ppuDataTransfer::i#5 ← phi( ppuDataTransfer::@1/(word) ppuDataTransfer::i#2 )
  (byte*) ppuDataTransfer::cpuSrc#2 ← phi( ppuDataTransfer::@1/(byte*) ppuDataTransfer::cpuSrc#4 )
  (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2)
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  (word) ppuDataTransfer::size#5 ← phi( ppuDataTransfer::@2/(word) ppuDataTransfer::size#7 )
  (word) ppuDataTransfer::i#4 ← phi( ppuDataTransfer::@2/(word) ppuDataTransfer::i#5 )
  (byte*) ppuDataTransfer::cpuSrc#5 ← phi( ppuDataTransfer::@2/(byte*) ppuDataTransfer::cpuSrc#2 )
  (byte) ppuDataTransfer::ppuDataPut1_val#1 ← phi( ppuDataTransfer::@2/(byte) ppuDataTransfer::ppuDataPut1_val#0 )
  (byte*~) ppuDataTransfer::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) ppuDataTransfer::ppuDataPut1_$0 ← (byte*~) ppuDataTransfer::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
  *((byte*~) ppuDataTransfer::ppuDataPut1_$0) ← (byte) ppuDataTransfer::ppuDataPut1_val#1
  to:ppuDataTransfer::@4
ppuDataTransfer::@4: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  (word) ppuDataTransfer::size#3 ← phi( ppuDataTransfer::ppuDataPut1/(word) ppuDataTransfer::size#5 )
  (word) ppuDataTransfer::i#3 ← phi( ppuDataTransfer::ppuDataPut1/(word) ppuDataTransfer::i#4 )
  (byte*) ppuDataTransfer::cpuSrc#3 ← phi( ppuDataTransfer::ppuDataPut1/(byte*) ppuDataTransfer::cpuSrc#5 )
  (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#3
  (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#3
  to:ppuDataTransfer::@1
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  (byte*~) main::initNES1_disableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_disableVideoOutput1_$0 ← (byte*~) main::initNES1_disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (number) 0
  (byte*~) main::initNES1_disableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_disableVideoOutput1_$1 ← (byte*~) main::initNES1_disableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (number) 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  *((const nomodify byte*) FR_COUNTER) ← (number) $40
  (byte*~) main::initNES1_disableAudioOutput1_$1 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) main::initNES1_disableAudioOutput1_$0 ← (byte*~) main::initNES1_disableAudioOutput1_$1 + (const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
  *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (number) $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  (byte*~) main::initNES1_waitForVBlank1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_waitForVBlank1_$2 ← (byte*~) main::initNES1_waitForVBlank1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  (number~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (number) $80
  (bool~) main::initNES1_waitForVBlank1_$4 ← (number) 0 != (number~) main::initNES1_waitForVBlank1_$0
  (bool~) main::initNES1_waitForVBlank1_$1 ← ! (bool~) main::initNES1_waitForVBlank1_$4
  if((bool~) main::initNES1_waitForVBlank1_$1) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@6
main::initNES1_@6: scope:[main]  from main::initNES1_waitForVBlank1_@1
  (byte) main::initNES1_i#0 ← (byte) 0
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_@6
  (byte) main::initNES1_i#2 ← phi( main::initNES1_@1/(byte) main::initNES1_i#1 main::initNES1_@6/(byte) main::initNES1_i#0 )
  *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::initNES1_i#2) ← (number) 0
  *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::initNES1_i#2) ← (number) 0
  (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2
  (bool~) main::initNES1_$5 ← (number) 0 != (byte) main::initNES1_i#1
  if((bool~) main::initNES1_$5) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  (byte*~) main::initNES1_waitForVBlank2_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::initNES1_waitForVBlank2_$2 ← (byte*~) main::initNES1_waitForVBlank2_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
  (number~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (number) $80
  (bool~) main::initNES1_waitForVBlank2_$4 ← (number) 0 != (number~) main::initNES1_waitForVBlank2_$0
  (bool~) main::initNES1_waitForVBlank2_$1 ← ! (bool~) main::initNES1_waitForVBlank2_$4
  if((bool~) main::initNES1_waitForVBlank2_$1) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@4
main::@4: scope:[main]  from main::initNES1_@7
  (byte~) main::$1 ← sizeof  (const byte*) PALETTE
  (nomodify void*) ppuDataTransfer::ppuData#0 ← (void*)(const nomodify byte*) PPU_PALETTE
  (nomodify void*) ppuDataTransfer::cpuData#0 ← (void*)(const byte*) PALETTE
  (word) ppuDataTransfer::size#0 ← (byte~) main::$1
  call ppuDataTransfer 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (nomodify void*) ppuDataFill::ppuData#0 ← (void*)(const nomodify byte*) PPU_NAME_TABLE_0
  (byte) ppuDataFill::val#0 ← (byte) '*'
  (word) ppuDataFill::size#0 ← (number) $20*(number) $1e
  call ppuDataFill 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (nomodify void*) ppuDataFill::ppuData#1 ← (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0
  (byte) ppuDataFill::val#1 ← (number) 0
  (word) ppuDataFill::size#1 ← (number) $40
  call ppuDataFill 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::s#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@7
  (byte) main::s#2 ← phi( main::@2/(byte) main::s#1 main::@7/(byte) main::s#0 )
  (bool~) main::$6 ← (byte) main::s#2 < (number) $40
  if((bool~) main::$6) goto main::@2
  to:main::enableVideoOutput1
main::@2: scope:[main]  from main::@1
  (byte) main::s#3 ← phi( main::@1/(byte) main::s#2 )
  (byte~) main::$7 ← (byte) main::s#3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (byte~) main::$7) ← (byte) 0
  *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_TILE + (byte~) main::$7) ← *((const byte*) MESSAGE + (byte) main::s#3)
  *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES + (byte~) main::$7) ← (byte) 2
  *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) main::$7) ← (byte) 0
  (byte) main::s#1 ← ++ (byte) main::s#3
  to:main::@1
main::enableVideoOutput1: scope:[main]  from main::@1
  (byte*~) main::enableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::enableVideoOutput1_$0 ← (byte*~) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
  *((byte*~) main::enableVideoOutput1_$0) ← (number) $80
  (byte*~) main::enableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) main::enableVideoOutput1_$1 ← (byte*~) main::enableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
  *((byte*~) main::enableVideoOutput1_$1) ← (number) $1e
  to:main::@3
main::@3: scope:[main]  from main::@3 main::enableVideoOutput1
  (bool~) main::$8 ← (number) 0 != (number) 1
  if((bool~) main::$8) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  (byte*~) vblank::$31 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) vblank::$29 ← (byte*~) vblank::$31 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *((byte*~) vblank::$29) ← (number) 0
  (byte*~) vblank::$32 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) vblank::$30 ← (byte*~) vblank::$32 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
  *((byte*~) vblank::$30) ← (number) 0
  (struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 ← (const struct SpriteData*) SPRITE_BUFFER
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank
  (struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1 ← phi( vblank/(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 )
  (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
  (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1 ← (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR
  *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1) ← (number) 0
  (byte~) vblank::ppuSpriteBufferDmaTransfer1_$0 ← > (struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1
  (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$4 ← (byte*)(const struct RICOH_2A03*) APU
  (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2 ← (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$4 + (const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA
  *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2) ← (byte~) vblank::ppuSpriteBufferDmaTransfer1_$0
  to:vblank::@16
vblank::@16: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  call readJoy1 
  (byte) readJoy1::return#2 ← (byte) readJoy1::return#1
  to:vblank::@17
vblank::@17: scope:[vblank]  from vblank::@16
  (byte) readJoy1::return#4 ← phi( vblank::@16/(byte) readJoy1::return#2 )
  (byte~) vblank::$1 ← (byte) readJoy1::return#4
  (byte) vblank::joy#0 ← (byte~) vblank::$1
  (bool~) vblank::$33 ← (number) 0 != (byte) vblank::joy#0
  (bool~) vblank::$2 ← ! (bool~) vblank::$33
  if((bool~) vblank::$2) goto vblank::@1
  to:vblank::@return
vblank::@1: scope:[vblank]  from vblank::@17
  (byte) vblank::y_idx#0 ← (volatile byte) y_sin_idx
  (volatile byte) y_sin_idx ← ++ (volatile byte) y_sin_idx
  (bool~) vblank::$3 ← (volatile byte) x_sin_idx == (number) $ee
  if((bool~) vblank::$3) goto vblank::@2
  to:vblank::@3
vblank::@return: scope:[vblank]  from vblank::@17 vblank::@8
  return 
  to:@return
vblank::@2: scope:[vblank]  from vblank::@1
  (byte) vblank::y_idx#12 ← phi( vblank::@1/(byte) vblank::y_idx#0 )
  (number~) vblank::$6 ← (number) 0
  to:vblank::@4
vblank::@3: scope:[vblank]  from vblank::@1
  (byte) vblank::y_idx#13 ← phi( vblank::@1/(byte) vblank::y_idx#0 )
  (number~) vblank::$4 ← (volatile byte) x_sin_idx + (number) 1
  (number~) vblank::$5 ← (number~) vblank::$4
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::@2 vblank::@3
  (byte) vblank::y_idx#10 ← phi( vblank::@2/(byte) vblank::y_idx#12 vblank::@3/(byte) vblank::y_idx#13 )
  (number~) vblank::$7 ← phi( vblank::@2/(number~) vblank::$6 vblank::@3/(number~) vblank::$5 )
  (volatile byte) x_sin_idx ← (number~) vblank::$7
  (byte) vblank::x_idx#0 ← (volatile byte) x_sin_idx
  (bool~) vblank::$8 ← (volatile byte) x_sin_idx_2 == (number) $58
  if((bool~) vblank::$8) goto vblank::@5
  to:vblank::@6
vblank::@5: scope:[vblank]  from vblank::@4
  (byte) vblank::x_idx#8 ← phi( vblank::@4/(byte) vblank::x_idx#0 )
  (byte) vblank::y_idx#6 ← phi( vblank::@4/(byte) vblank::y_idx#10 )
  (number~) vblank::$11 ← (number) 0
  to:vblank::@7
vblank::@6: scope:[vblank]  from vblank::@4
  (byte) vblank::x_idx#9 ← phi( vblank::@4/(byte) vblank::x_idx#0 )
  (byte) vblank::y_idx#7 ← phi( vblank::@4/(byte) vblank::y_idx#10 )
  (number~) vblank::$9 ← (volatile byte) x_sin_idx_2 + (number) 1
  (number~) vblank::$10 ← (number~) vblank::$9
  to:vblank::@7
vblank::@7: scope:[vblank]  from vblank::@5 vblank::@6
  (byte) vblank::x_idx#7 ← phi( vblank::@5/(byte) vblank::x_idx#8 vblank::@6/(byte) vblank::x_idx#9 )
  (byte) vblank::y_idx#5 ← phi( vblank::@5/(byte) vblank::y_idx#6 vblank::@6/(byte) vblank::y_idx#7 )
  (number~) vblank::$12 ← phi( vblank::@5/(number~) vblank::$11 vblank::@6/(number~) vblank::$10 )
  (volatile byte) x_sin_idx_2 ← (number~) vblank::$12
  (byte) vblank::x_idx_2#0 ← (volatile byte) x_sin_idx_2
  (byte) vblank::s#0 ← (byte) 0
  to:vblank::@8
vblank::@8: scope:[vblank]  from vblank::@15 vblank::@7
  (byte) vblank::x_idx_2#6 ← phi( vblank::@15/(byte) vblank::x_idx_2#1 vblank::@7/(byte) vblank::x_idx_2#0 )
  (byte) vblank::x_idx#5 ← phi( vblank::@15/(byte) vblank::x_idx#6 vblank::@7/(byte) vblank::x_idx#7 )
  (byte) vblank::y_idx#3 ← phi( vblank::@15/(byte) vblank::y_idx#4 vblank::@7/(byte) vblank::y_idx#5 )
  (byte) vblank::s#2 ← phi( vblank::@15/(byte) vblank::s#1 vblank::@7/(byte) vblank::s#0 )
  (bool~) vblank::$13 ← (byte) vblank::s#2 < (number) $40
  if((bool~) vblank::$13) goto vblank::@9
  to:vblank::@return
vblank::@9: scope:[vblank]  from vblank::@8
  (byte) vblank::x_idx_2#2 ← phi( vblank::@8/(byte) vblank::x_idx_2#6 )
  (byte) vblank::x_idx#2 ← phi( vblank::@8/(byte) vblank::x_idx#5 )
  (byte) vblank::y_idx#2 ← phi( vblank::@8/(byte) vblank::y_idx#3 )
  (byte) vblank::s#3 ← phi( vblank::@8/(byte) vblank::s#2 )
  (byte~) vblank::$27 ← (byte) vblank::s#3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (byte~) vblank::$27) ← *((const to_nomodify byte*) SINTABLE_240 + (byte) vblank::y_idx#2)
  (byte) vblank::y_idx#1 ← (byte) vblank::y_idx#2 - (number) 4
  (byte~) vblank::$14 ← *((const to_nomodify byte*) SINTABLE_184 + (byte) vblank::x_idx#2) + *((const to_nomodify byte*) SINTABLE_64 + (byte) vblank::x_idx_2#2)
  (byte~) vblank::$28 ← (byte) vblank::s#3 * (const byte) SIZEOF_STRUCT_SPRITEDATA
  *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) vblank::$28) ← (byte~) vblank::$14
  (bool~) vblank::$15 ← (byte) vblank::x_idx#2 < (number) 3
  if((bool~) vblank::$15) goto vblank::@10
  to:vblank::@11
vblank::@10: scope:[vblank]  from vblank::@9
  (byte) vblank::y_idx#14 ← phi( vblank::@9/(byte) vblank::y_idx#1 )
  (byte) vblank::s#8 ← phi( vblank::@9/(byte) vblank::s#3 )
  (byte) vblank::x_idx_2#7 ← phi( vblank::@9/(byte) vblank::x_idx_2#2 )
  (byte) vblank::x_idx#3 ← phi( vblank::@9/(byte) vblank::x_idx#2 )
  (number~) vblank::$18 ← (byte) vblank::x_idx#3 + (number) $ec
  (number~) vblank::$19 ← (number~) vblank::$18
  to:vblank::@12
vblank::@11: scope:[vblank]  from vblank::@9
  (byte) vblank::y_idx#15 ← phi( vblank::@9/(byte) vblank::y_idx#1 )
  (byte) vblank::s#9 ← phi( vblank::@9/(byte) vblank::s#3 )
  (byte) vblank::x_idx_2#8 ← phi( vblank::@9/(byte) vblank::x_idx_2#2 )
  (byte) vblank::x_idx#4 ← phi( vblank::@9/(byte) vblank::x_idx#2 )
  (number~) vblank::$16 ← (byte) vblank::x_idx#4 - (number) 3
  (number~) vblank::$17 ← (number~) vblank::$16
  to:vblank::@12
vblank::@12: scope:[vblank]  from vblank::@10 vblank::@11
  (byte) vblank::y_idx#11 ← phi( vblank::@10/(byte) vblank::y_idx#14 vblank::@11/(byte) vblank::y_idx#15 )
  (byte) vblank::s#7 ← phi( vblank::@10/(byte) vblank::s#8 vblank::@11/(byte) vblank::s#9 )
  (byte) vblank::x_idx_2#3 ← phi( vblank::@10/(byte) vblank::x_idx_2#7 vblank::@11/(byte) vblank::x_idx_2#8 )
  (number~) vblank::$20 ← phi( vblank::@10/(number~) vblank::$19 vblank::@11/(number~) vblank::$17 )
  (byte) vblank::x_idx#1 ← (number~) vblank::$20
  (bool~) vblank::$21 ← (byte) vblank::x_idx_2#3 >= (number) $56
  if((bool~) vblank::$21) goto vblank::@13
  to:vblank::@14
vblank::@13: scope:[vblank]  from vblank::@12
  (byte) vblank::x_idx#10 ← phi( vblank::@12/(byte) vblank::x_idx#1 )
  (byte) vblank::y_idx#8 ← phi( vblank::@12/(byte) vblank::y_idx#11 )
  (byte) vblank::s#5 ← phi( vblank::@12/(byte) vblank::s#7 )
  (byte) vblank::x_idx_2#4 ← phi( vblank::@12/(byte) vblank::x_idx_2#3 )
  (number~) vblank::$24 ← (byte) vblank::x_idx_2#4 - (number) $56
  (number~) vblank::$25 ← (number~) vblank::$24
  to:vblank::@15
vblank::@14: scope:[vblank]  from vblank::@12
  (byte) vblank::x_idx#11 ← phi( vblank::@12/(byte) vblank::x_idx#1 )
  (byte) vblank::y_idx#9 ← phi( vblank::@12/(byte) vblank::y_idx#11 )
  (byte) vblank::s#6 ← phi( vblank::@12/(byte) vblank::s#7 )
  (byte) vblank::x_idx_2#5 ← phi( vblank::@12/(byte) vblank::x_idx_2#3 )
  (number~) vblank::$22 ← (byte) vblank::x_idx_2#5 + (number) 3
  (number~) vblank::$23 ← (number~) vblank::$22
  to:vblank::@15
vblank::@15: scope:[vblank]  from vblank::@13 vblank::@14
  (byte) vblank::x_idx#6 ← phi( vblank::@13/(byte) vblank::x_idx#10 vblank::@14/(byte) vblank::x_idx#11 )
  (byte) vblank::y_idx#4 ← phi( vblank::@13/(byte) vblank::y_idx#8 vblank::@14/(byte) vblank::y_idx#9 )
  (byte) vblank::s#4 ← phi( vblank::@13/(byte) vblank::s#5 vblank::@14/(byte) vblank::s#6 )
  (number~) vblank::$26 ← phi( vblank::@13/(number~) vblank::$25 vblank::@14/(number~) vblank::$23 )
  (byte) vblank::x_idx_2#1 ← (number~) vblank::$26
  (byte) vblank::s#1 ← ++ (byte) vblank::s#4
  to:vblank::@8

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (volatile byte) y_sin_idx ← (byte) 0
  (volatile byte) x_sin_idx ← (byte) $49
  (volatile byte) x_sin_idx_2 ← (byte) $52
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*)(number) $4000
(const nomodify byte*) FR_COUNTER = (byte*)(number) $4017
(const nomodify byte*) MEMORY = (byte*)(number) 0
(const byte*) MESSAGE[(number) $40]  = (byte*) "rex-of-camelot-presents-a-dxycp-on-nintendo-entertainment-system"z
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA = (byte) $14
(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR = (byte) 3
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL = (byte) 0
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = (byte) 5
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = (byte) 2
(const byte) OFFSET_STRUCT_SPRITEDATA_TILE = (byte) 1
(const byte) OFFSET_STRUCT_SPRITEDATA_X = (byte) 3
(const byte) OFFSET_STRUCT_SPRITEDATA_Y = (byte) 0
(const byte*) PALETTE[(number) $20]  = { (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $f, (byte) $30, (byte) 8, (byte) 1, (byte) $f, (byte) $18, (byte) 8, (byte) 1, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*)(number) $2000
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 = (byte*)(number) $23c0
(const nomodify byte*) PPU_NAME_TABLE_0 = (byte*)(number) $2000
(const nomodify byte*) PPU_PALETTE = (byte*)(number) $3f00
(const nomodify to_volatile byte*) PPU_PPUSTATUS = (byte*)(number) $2002
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(const to_nomodify byte*) SINTABLE_184[(number) $ef]  = kickasm {{ .fill 239, round(71.5+71.5*sin(2*PI*i/239))
 }}
(const to_nomodify byte*) SINTABLE_240[(number) $100]  = kickasm {{ .fill $100, round(115.5+107.5*sin(2*PI*i/256))
 }}
(const to_nomodify byte*) SINTABLE_64[(number) $59]  = kickasm {{ .fill 89, round(52.5+52.5*sin(2*PI*i/89))
 }}
(const byte) SIZEOF_STRUCT_SPRITEDATA = (byte) 4
(const struct SpriteData*) SPRITE_BUFFER[(number) $100]  = { fill( $100, 0) }
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(const byte*) TILES[]  = kickasm {{ .var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*)(number) 0 }
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(void()) main()
(byte~) main::$1
(bool~) main::$6
(byte~) main::$7
(bool~) main::$8
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(label) main::enableVideoOutput1
(byte*~) main::enableVideoOutput1_$0
(byte*~) main::enableVideoOutput1_$1
(byte*~) main::enableVideoOutput1_$2
(byte*~) main::enableVideoOutput1_$3
(label) main::initNES1
(bool~) main::initNES1_$5
(label) main::initNES1_@1
(label) main::initNES1_@6
(label) main::initNES1_@7
(label) main::initNES1_clearVBlankFlag1
(label) main::initNES1_disableAudioOutput1
(byte*~) main::initNES1_disableAudioOutput1_$0
(byte*~) main::initNES1_disableAudioOutput1_$1
(label) main::initNES1_disableVideoOutput1
(byte*~) main::initNES1_disableVideoOutput1_$0
(byte*~) main::initNES1_disableVideoOutput1_$1
(byte*~) main::initNES1_disableVideoOutput1_$2
(byte*~) main::initNES1_disableVideoOutput1_$3
(byte) main::initNES1_i
(byte) main::initNES1_i#0
(byte) main::initNES1_i#1
(byte) main::initNES1_i#2
(label) main::initNES1_waitForVBlank1
(number~) main::initNES1_waitForVBlank1_$0
(bool~) main::initNES1_waitForVBlank1_$1
(byte*~) main::initNES1_waitForVBlank1_$2
(byte*~) main::initNES1_waitForVBlank1_$3
(bool~) main::initNES1_waitForVBlank1_$4
(label) main::initNES1_waitForVBlank1_@1
(label) main::initNES1_waitForVBlank2
(number~) main::initNES1_waitForVBlank2_$0
(bool~) main::initNES1_waitForVBlank2_$1
(byte*~) main::initNES1_waitForVBlank2_$2
(byte*~) main::initNES1_waitForVBlank2_$3
(bool~) main::initNES1_waitForVBlank2_$4
(label) main::initNES1_waitForVBlank2_@1
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#2
(byte) main::s#3
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(bool~) ppuDataFill::$1
(label) ppuDataFill::@1
(label) ppuDataFill::@2
(label) ppuDataFill::@3
(label) ppuDataFill::@4
(label) ppuDataFill::@return
(word) ppuDataFill::i
(word) ppuDataFill::i#0
(word) ppuDataFill::i#1
(word) ppuDataFill::i#2
(word) ppuDataFill::i#3
(word) ppuDataFill::i#4
(word) ppuDataFill::i#5
(nomodify void*) ppuDataFill::ppuData
(nomodify void*) ppuDataFill::ppuData#0
(nomodify void*) ppuDataFill::ppuData#1
(nomodify void*) ppuDataFill::ppuData#2
(label) ppuDataFill::ppuDataPrepare1
(byte~) ppuDataFill::ppuDataPrepare1_$0
(byte~) ppuDataFill::ppuDataPrepare1_$1
(byte*~) ppuDataFill::ppuDataPrepare1_$2
(byte*~) ppuDataFill::ppuDataPrepare1_$3
(byte*~) ppuDataFill::ppuDataPrepare1_$4
(byte*~) ppuDataFill::ppuDataPrepare1_$5
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#1
(label) ppuDataFill::ppuDataPut1
(byte*~) ppuDataFill::ppuDataPut1_$0
(byte*~) ppuDataFill::ppuDataPut1_$1
(byte) ppuDataFill::ppuDataPut1_val
(byte) ppuDataFill::ppuDataPut1_val#0
(byte) ppuDataFill::ppuDataPut1_val#1
(word) ppuDataFill::size
(word) ppuDataFill::size#0
(word) ppuDataFill::size#1
(word) ppuDataFill::size#2
(word) ppuDataFill::size#3
(word) ppuDataFill::size#4
(word) ppuDataFill::size#5
(word) ppuDataFill::size#6
(word) ppuDataFill::size#7
(word) ppuDataFill::size#8
(byte) ppuDataFill::val
(byte) ppuDataFill::val#0
(byte) ppuDataFill::val#1
(byte) ppuDataFill::val#2
(byte) ppuDataFill::val#3
(byte) ppuDataFill::val#4
(byte) ppuDataFill::val#5
(byte) ppuDataFill::val#6
(byte) ppuDataFill::val#7
(byte) ppuDataFill::val#8
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(bool~) ppuDataTransfer::$1
(label) ppuDataTransfer::@1
(label) ppuDataTransfer::@2
(label) ppuDataTransfer::@3
(label) ppuDataTransfer::@4
(label) ppuDataTransfer::@return
(nomodify void*) ppuDataTransfer::cpuData
(nomodify void*) ppuDataTransfer::cpuData#0
(nomodify void*) ppuDataTransfer::cpuData#1
(nomodify void*) ppuDataTransfer::cpuData#2
(nomodify void*) ppuDataTransfer::cpuData#3
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#0
(byte*) ppuDataTransfer::cpuSrc#1
(byte*) ppuDataTransfer::cpuSrc#2
(byte*) ppuDataTransfer::cpuSrc#3
(byte*) ppuDataTransfer::cpuSrc#4
(byte*) ppuDataTransfer::cpuSrc#5
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#0
(word) ppuDataTransfer::i#1
(word) ppuDataTransfer::i#2
(word) ppuDataTransfer::i#3
(word) ppuDataTransfer::i#4
(word) ppuDataTransfer::i#5
(nomodify void*) ppuDataTransfer::ppuData
(nomodify void*) ppuDataTransfer::ppuData#0
(nomodify void*) ppuDataTransfer::ppuData#1
(label) ppuDataTransfer::ppuDataPrepare1
(byte~) ppuDataTransfer::ppuDataPrepare1_$0
(byte~) ppuDataTransfer::ppuDataPrepare1_$1
(byte*~) ppuDataTransfer::ppuDataPrepare1_$2
(byte*~) ppuDataTransfer::ppuDataPrepare1_$3
(byte*~) ppuDataTransfer::ppuDataPrepare1_$4
(byte*~) ppuDataTransfer::ppuDataPrepare1_$5
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#1
(label) ppuDataTransfer::ppuDataPut1
(byte*~) ppuDataTransfer::ppuDataPut1_$0
(byte*~) ppuDataTransfer::ppuDataPut1_$1
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0
(byte) ppuDataTransfer::ppuDataPut1_val#1
(word) ppuDataTransfer::size
(word) ppuDataTransfer::size#0
(word) ppuDataTransfer::size#1
(word) ppuDataTransfer::size#2
(word) ppuDataTransfer::size#3
(word) ppuDataTransfer::size#4
(word) ppuDataTransfer::size#5
(word) ppuDataTransfer::size#6
(word) ppuDataTransfer::size#7
(byte()) readJoy1()
(bool~) readJoy1::$0
(byte~) readJoy1::$1
(number~) readJoy1::$2
(number~) readJoy1::$3
(byte*~) readJoy1::$4
(byte*~) readJoy1::$5
(byte*~) readJoy1::$6
(byte*~) readJoy1::$7
(byte*~) readJoy1::$8
(byte*~) readJoy1::$9
(label) readJoy1::@1
(label) readJoy1::@2
(label) readJoy1::@3
(label) readJoy1::@return
(byte) readJoy1::i
(byte) readJoy1::i#0
(byte) readJoy1::i#1
(byte) readJoy1::i#2
(byte) readJoy1::i#3
(byte) readJoy1::joy
(byte) readJoy1::joy#0
(byte) readJoy1::joy#1
(byte) readJoy1::joy#2
(byte) readJoy1::joy#3
(byte) readJoy1::joy#4
(byte) readJoy1::return
(byte) readJoy1::return#0
(byte) readJoy1::return#1
(byte) readJoy1::return#2
(byte) readJoy1::return#3
(byte) readJoy1::return#4
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$1
(number~) vblank::$10
(number~) vblank::$11
(number~) vblank::$12
(bool~) vblank::$13
(byte~) vblank::$14
(bool~) vblank::$15
(number~) vblank::$16
(number~) vblank::$17
(number~) vblank::$18
(number~) vblank::$19
(bool~) vblank::$2
(number~) vblank::$20
(bool~) vblank::$21
(number~) vblank::$22
(number~) vblank::$23
(number~) vblank::$24
(number~) vblank::$25
(number~) vblank::$26
(byte~) vblank::$27
(byte~) vblank::$28
(byte*~) vblank::$29
(bool~) vblank::$3
(byte*~) vblank::$30
(byte*~) vblank::$31
(byte*~) vblank::$32
(bool~) vblank::$33
(number~) vblank::$4
(number~) vblank::$5
(number~) vblank::$6
(number~) vblank::$7
(bool~) vblank::$8
(number~) vblank::$9
(label) vblank::@1
(label) vblank::@10
(label) vblank::@11
(label) vblank::@12
(label) vblank::@13
(label) vblank::@14
(label) vblank::@15
(label) vblank::@16
(label) vblank::@17
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@5
(label) vblank::@6
(label) vblank::@7
(label) vblank::@8
(label) vblank::@9
(label) vblank::@return
(byte) vblank::joy
(byte) vblank::joy#0
(label) vblank::ppuSpriteBufferDmaTransfer1
(byte~) vblank::ppuSpriteBufferDmaTransfer1_$0
(byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1
(byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2
(byte*~) vblank::ppuSpriteBufferDmaTransfer1_$3
(byte*~) vblank::ppuSpriteBufferDmaTransfer1_$4
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1
(byte) vblank::s
(byte) vblank::s#0
(byte) vblank::s#1
(byte) vblank::s#2
(byte) vblank::s#3
(byte) vblank::s#4
(byte) vblank::s#5
(byte) vblank::s#6
(byte) vblank::s#7
(byte) vblank::s#8
(byte) vblank::s#9
(byte) vblank::x_idx
(byte) vblank::x_idx#0
(byte) vblank::x_idx#1
(byte) vblank::x_idx#10
(byte) vblank::x_idx#11
(byte) vblank::x_idx#2
(byte) vblank::x_idx#3
(byte) vblank::x_idx#4
(byte) vblank::x_idx#5
(byte) vblank::x_idx#6
(byte) vblank::x_idx#7
(byte) vblank::x_idx#8
(byte) vblank::x_idx#9
(byte) vblank::x_idx_2
(byte) vblank::x_idx_2#0
(byte) vblank::x_idx_2#1
(byte) vblank::x_idx_2#2
(byte) vblank::x_idx_2#3
(byte) vblank::x_idx_2#4
(byte) vblank::x_idx_2#5
(byte) vblank::x_idx_2#6
(byte) vblank::x_idx_2#7
(byte) vblank::x_idx_2#8
(byte) vblank::y_idx
(byte) vblank::y_idx#0
(byte) vblank::y_idx#1
(byte) vblank::y_idx#10
(byte) vblank::y_idx#11
(byte) vblank::y_idx#12
(byte) vblank::y_idx#13
(byte) vblank::y_idx#14
(byte) vblank::y_idx#15
(byte) vblank::y_idx#2
(byte) vblank::y_idx#3
(byte) vblank::y_idx#4
(byte) vblank::y_idx#5
(byte) vblank::y_idx#6
(byte) vblank::y_idx#7
(byte) vblank::y_idx#8
(byte) vblank::y_idx#9
(volatile byte) x_sin_idx loadstore
(volatile byte) x_sin_idx_2 loadstore
(volatile byte) y_sin_idx loadstore

Adding number conversion cast (unumber) 1 in *((byte*~) readJoy1::$4) ← (number) 1
Adding number conversion cast (unumber) 0 in *((byte*~) readJoy1::$5) ← (number) 0
Adding number conversion cast (unumber) 8 in (bool~) readJoy1::$0 ← (byte) readJoy1::i#2 < (number) 8
Adding number conversion cast (unumber) 1 in (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (number) 1
Adding number conversion cast (unumber) 1 in (number~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (number) 1
Adding number conversion cast (unumber) readJoy1::$2 in (number~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (unumber)(number) 1
Adding number conversion cast (unumber) readJoy1::$3 in (number~) readJoy1::$3 ← (byte~) readJoy1::$1 | (unumber~) readJoy1::$2
Adding number conversion cast (unumber) 0 in *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (number) 0
Adding number conversion cast (unumber) $40 in *((const nomodify byte*) FR_COUNTER) ← (number) $40
Adding number conversion cast (unumber) $40 in *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (number) $40
Adding number conversion cast (unumber) $80 in (number~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (number) $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank1_$0 in (number~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) main::initNES1_waitForVBlank1_$4 ← (number) 0 != (unumber~) main::initNES1_waitForVBlank1_$0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) 0 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $100 in *((const nomodify byte*) MEMORY+(number) $100 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $200 in *((const nomodify byte*) MEMORY+(number) $200 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $300 in *((const nomodify byte*) MEMORY+(number) $300 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $400 in *((const nomodify byte*) MEMORY+(number) $400 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $500 in *((const nomodify byte*) MEMORY+(number) $500 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $600 in *((const nomodify byte*) MEMORY+(number) $600 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::initNES1_i#2) ← (number) 0
Adding number conversion cast (unumber) $700 in *((const nomodify byte*) MEMORY+(number) $700 + (byte) main::initNES1_i#2) ← ((unumber)) (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::initNES1_$5 ← (number) 0 != (byte) main::initNES1_i#1
Adding number conversion cast (unumber) $80 in (number~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (number) $80
Adding number conversion cast (unumber) main::initNES1_waitForVBlank2_$0 in (number~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) main::initNES1_waitForVBlank2_$4 ← (number) 0 != (unumber~) main::initNES1_waitForVBlank2_$0
Adding number conversion cast (unumber) $20*$1e in (word) ppuDataFill::size#0 ← (number) $20*(number) $1e
Adding number conversion cast (unumber) 0 in (byte) ppuDataFill::val#1 ← (number) 0
Adding number conversion cast (unumber) $40 in (word) ppuDataFill::size#1 ← (number) $40
Adding number conversion cast (unumber) $40 in (bool~) main::$6 ← (byte) main::s#2 < (number) $40
Adding number conversion cast (unumber) $80 in *((byte*~) main::enableVideoOutput1_$0) ← (number) $80
Adding number conversion cast (unumber) $1e in *((byte*~) main::enableVideoOutput1_$1) ← (number) $1e
Adding number conversion cast (unumber) 0 in *((byte*~) vblank::$29) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*~) vblank::$30) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1) ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) vblank::$33 ← (number) 0 != (byte) vblank::joy#0
Adding number conversion cast (unumber) $ee in (bool~) vblank::$3 ← (volatile byte) x_sin_idx == (number) $ee
Adding number conversion cast (unumber) 1 in (number~) vblank::$4 ← (volatile byte) x_sin_idx + (number) 1
Adding number conversion cast (unumber) vblank::$4 in (number~) vblank::$4 ← (volatile byte) x_sin_idx + (unumber)(number) 1
Adding number conversion cast (unumber) vblank::$5 in (number~) vblank::$5 ← (unumber~) vblank::$4
Adding number conversion cast (unumber) vblank::$7 in (byte) vblank::y_idx#10 ← phi( vblank::@2/(byte) vblank::y_idx#12 vblank::@3/(byte) vblank::y_idx#13 )
  (number~) vblank::$7 ← phi( vblank::@2/(number~) vblank::$6 vblank::@3/(unumber~) vblank::$5 )
Adding number conversion cast (unumber) $58 in (bool~) vblank::$8 ← (volatile byte) x_sin_idx_2 == (number) $58
Adding number conversion cast (unumber) 1 in (number~) vblank::$9 ← (volatile byte) x_sin_idx_2 + (number) 1
Adding number conversion cast (unumber) vblank::$9 in (number~) vblank::$9 ← (volatile byte) x_sin_idx_2 + (unumber)(number) 1
Adding number conversion cast (unumber) vblank::$10 in (number~) vblank::$10 ← (unumber~) vblank::$9
Adding number conversion cast (unumber) vblank::$12 in (byte) vblank::x_idx#7 ← phi( vblank::@5/(byte) vblank::x_idx#8 vblank::@6/(byte) vblank::x_idx#9 )
  (byte) vblank::y_idx#5 ← phi( vblank::@5/(byte) vblank::y_idx#6 vblank::@6/(byte) vblank::y_idx#7 )
  (number~) vblank::$12 ← phi( vblank::@5/(number~) vblank::$11 vblank::@6/(unumber~) vblank::$10 )
Adding number conversion cast (unumber) $40 in (bool~) vblank::$13 ← (byte) vblank::s#2 < (number) $40
Adding number conversion cast (unumber) 4 in (byte) vblank::y_idx#1 ← (byte) vblank::y_idx#2 - (number) 4
Adding number conversion cast (unumber) 3 in (bool~) vblank::$15 ← (byte) vblank::x_idx#2 < (number) 3
Adding number conversion cast (unumber) $ec in (number~) vblank::$18 ← (byte) vblank::x_idx#3 + (number) $ec
Adding number conversion cast (unumber) vblank::$18 in (number~) vblank::$18 ← (byte) vblank::x_idx#3 + (unumber)(number) $ec
Adding number conversion cast (unumber) vblank::$19 in (number~) vblank::$19 ← (unumber~) vblank::$18
Adding number conversion cast (unumber) 3 in (number~) vblank::$16 ← (byte) vblank::x_idx#4 - (number) 3
Adding number conversion cast (unumber) vblank::$16 in (number~) vblank::$16 ← (byte) vblank::x_idx#4 - (unumber)(number) 3
Adding number conversion cast (unumber) vblank::$17 in (number~) vblank::$17 ← (unumber~) vblank::$16
Adding number conversion cast (unumber) vblank::$20 in (byte) vblank::y_idx#11 ← phi( vblank::@10/(byte) vblank::y_idx#14 vblank::@11/(byte) vblank::y_idx#15 )
  (byte) vblank::s#7 ← phi( vblank::@10/(byte) vblank::s#8 vblank::@11/(byte) vblank::s#9 )
  (byte) vblank::x_idx_2#3 ← phi( vblank::@10/(byte) vblank::x_idx_2#7 vblank::@11/(byte) vblank::x_idx_2#8 )
  (number~) vblank::$20 ← phi( vblank::@10/(unumber~) vblank::$19 vblank::@11/(unumber~) vblank::$17 )
Adding number conversion cast (unumber) $56 in (bool~) vblank::$21 ← (byte) vblank::x_idx_2#3 >= (number) $56
Adding number conversion cast (unumber) $56 in (number~) vblank::$24 ← (byte) vblank::x_idx_2#4 - (number) $56
Adding number conversion cast (unumber) vblank::$24 in (number~) vblank::$24 ← (byte) vblank::x_idx_2#4 - (unumber)(number) $56
Adding number conversion cast (unumber) vblank::$25 in (number~) vblank::$25 ← (unumber~) vblank::$24
Adding number conversion cast (unumber) 3 in (number~) vblank::$22 ← (byte) vblank::x_idx_2#5 + (number) 3
Adding number conversion cast (unumber) vblank::$22 in (number~) vblank::$22 ← (byte) vblank::x_idx_2#5 + (unumber)(number) 3
Adding number conversion cast (unumber) vblank::$23 in (number~) vblank::$23 ← (unumber~) vblank::$22
Adding number conversion cast (unumber) vblank::$26 in (byte) vblank::x_idx#6 ← phi( vblank::@13/(byte) vblank::x_idx#10 vblank::@14/(byte) vblank::x_idx#11 )
  (byte) vblank::y_idx#4 ← phi( vblank::@13/(byte) vblank::y_idx#8 vblank::@14/(byte) vblank::y_idx#9 )
  (byte) vblank::s#4 ← phi( vblank::@13/(byte) vblank::s#5 vblank::@14/(byte) vblank::s#6 )
  (number~) vblank::$26 ← phi( vblank::@13/(unumber~) vblank::$25 vblank::@14/(unumber~) vblank::$23 )
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) vblank::$6 in (byte) vblank::y_idx#10 ← phi( vblank::@2/(byte) vblank::y_idx#12 vblank::@3/(byte) vblank::y_idx#13 )
  (unumber~) vblank::$7 ← phi( vblank::@2/(number~) vblank::$6 vblank::@3/(unumber~) vblank::$5 )
Adding number conversion cast (unumber) vblank::$11 in (byte) vblank::x_idx#7 ← phi( vblank::@5/(byte) vblank::x_idx#8 vblank::@6/(byte) vblank::x_idx#9 )
  (byte) vblank::y_idx#5 ← phi( vblank::@5/(byte) vblank::y_idx#6 vblank::@6/(byte) vblank::y_idx#7 )
  (unumber~) vblank::$12 ← phi( vblank::@5/(number~) vblank::$11 vblank::@6/(unumber~) vblank::$10 )
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in (unumber~) vblank::$6 ← (number) 0
Adding number conversion cast (unumber) 0 in (unumber~) vblank::$11 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*~) readJoy1::$4) ← (unumber)(number) 1
Inlining cast *((byte*~) readJoy1::$5) ← (unumber)(number) 0
Inlining cast *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (unumber)(number) 0
Inlining cast *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) FR_COUNTER) ← (unumber)(number) $40
Inlining cast *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (unumber)(number) $40
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) 0 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $100 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $200 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $300 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $400 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $500 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $600 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) MEMORY+(unumber)(number) $700 + (byte) main::initNES1_i#2) ← (unumber)(number) 0
Inlining cast (word) ppuDataFill::size#0 ← (unumber)(number) $20*(number) $1e
Inlining cast (byte) ppuDataFill::val#1 ← (unumber)(number) 0
Inlining cast (word) ppuDataFill::size#1 ← (unumber)(number) $40
Inlining cast *((byte*~) main::enableVideoOutput1_$0) ← (unumber)(number) $80
Inlining cast *((byte*~) main::enableVideoOutput1_$1) ← (unumber)(number) $1e
Inlining cast *((byte*~) vblank::$29) ← (unumber)(number) 0
Inlining cast *((byte*~) vblank::$30) ← (unumber)(number) 0
Inlining cast *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1) ← (unumber)(number) 0
Inlining cast (unumber~) vblank::$6 ← (unumber)(number) 0
Inlining cast (unumber~) vblank::$11 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 9152
Simplifying constant pointer cast (byte*) 16128
Simplifying constant pointer cast (byte*) 8194
Simplifying constant pointer cast (byte*) 16407
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (void()*) 0
Simplifying constant pointer cast (struct RICOH_2C02*) 8192
Simplifying constant pointer cast (struct RICOH_2A03*) 16384
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast 0
Simplifying constant integer cast $200
Simplifying constant integer cast 0
Simplifying constant integer cast $300
Simplifying constant integer cast 0
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast $500
Simplifying constant integer cast 0
Simplifying constant integer cast $600
Simplifying constant integer cast 0
Simplifying constant integer cast $700
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast $1e
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ee
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $58
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $40
Simplifying constant integer cast 4
Simplifying constant integer cast 3
Simplifying constant integer cast $ec
Simplifying constant integer cast 3
Simplifying constant integer cast $56
Simplifying constant integer cast $56
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $300
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $500
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $600
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $700
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $1e
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ee
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $58
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $ec
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $56
Finalized unsigned number type (byte) $56
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (byte) 1
Inferred type updated to byte in (unumber~) readJoy1::$3 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2
Inferred type updated to byte in (unumber~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (byte) $80
Inferred type updated to byte in (unumber~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (byte) $80
Inferred type updated to byte in (unumber~) vblank::$6 ← (byte) 0
Inferred type updated to byte in (unumber~) vblank::$4 ← (volatile byte) x_sin_idx + (byte) 1
Inferred type updated to byte in (unumber~) vblank::$5 ← (byte~) vblank::$4
Inferred type updated to byte for (unumber~) vblank::$7
Inferred type updated to byte in (unumber~) vblank::$11 ← (byte) 0
Inferred type updated to byte in (unumber~) vblank::$9 ← (volatile byte) x_sin_idx_2 + (byte) 1
Inferred type updated to byte in (unumber~) vblank::$10 ← (byte~) vblank::$9
Inferred type updated to byte for (unumber~) vblank::$12
Inferred type updated to byte in (unumber~) vblank::$18 ← (byte) vblank::x_idx#3 + (byte) $ec
Inferred type updated to byte in (unumber~) vblank::$19 ← (byte~) vblank::$18
Inferred type updated to byte in (unumber~) vblank::$16 ← (byte) vblank::x_idx#4 - (byte) 3
Inferred type updated to byte in (unumber~) vblank::$17 ← (byte~) vblank::$16
Inferred type updated to byte for (unumber~) vblank::$20
Inferred type updated to byte in (unumber~) vblank::$24 ← (byte) vblank::x_idx_2#4 - (byte) $56
Inferred type updated to byte in (unumber~) vblank::$25 ← (byte~) vblank::$24
Inferred type updated to byte in (unumber~) vblank::$22 ← (byte) vblank::x_idx_2#5 + (byte) 3
Inferred type updated to byte in (unumber~) vblank::$23 ← (byte~) vblank::$22
Inferred type updated to byte for (unumber~) vblank::$26
Inversing boolean not [92] (bool~) main::initNES1_waitForVBlank1_$1 ← (byte) 0 == (byte~) main::initNES1_waitForVBlank1_$0 from [91] (bool~) main::initNES1_waitForVBlank1_$4 ← (byte) 0 != (byte~) main::initNES1_waitForVBlank1_$0
Inversing boolean not [111] (bool~) main::initNES1_waitForVBlank2_$1 ← (byte) 0 == (byte~) main::initNES1_waitForVBlank2_$0 from [110] (bool~) main::initNES1_waitForVBlank2_$4 ← (byte) 0 != (byte~) main::initNES1_waitForVBlank2_$0
Inversing boolean not [168] (bool~) vblank::$2 ← (byte) 0 == (byte) vblank::joy#0 from [167] (bool~) vblank::$33 ← (byte) 0 != (byte) vblank::joy#0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)x_sin_idx = vblank::$7 
Alias candidate removed (volatile)x_sin_idx_2 = vblank::$12 
Alias readJoy1::joy#2 = readJoy1::joy#4 readJoy1::joy#3 readJoy1::return#0 readJoy1::return#3 readJoy1::return#1 
Alias readJoy1::i#2 = readJoy1::i#3 
Alias readJoy1::joy#1 = readJoy1::$3 
Alias ppuDataFill::ppuDataPrepare1_ppuData#0 = ppuDataFill::ppuData#2 ppuDataFill::ppuDataPrepare1_ppuData#1 
Alias ppuDataFill::size#3 = ppuDataFill::size#5 ppuDataFill::size#7 
Alias ppuDataFill::val#4 = ppuDataFill::val#6 ppuDataFill::val#8 
Alias ppuDataFill::val#2 = ppuDataFill::val#3 ppuDataFill::ppuDataPut1_val#0 ppuDataFill::ppuDataPut1_val#1 ppuDataFill::val#7 ppuDataFill::val#5 
Alias ppuDataFill::i#2 = ppuDataFill::i#5 ppuDataFill::i#4 ppuDataFill::i#3 
Alias ppuDataFill::size#2 = ppuDataFill::size#8 ppuDataFill::size#6 ppuDataFill::size#4 
Alias ppuDataTransfer::ppuDataPrepare1_ppuData#0 = ppuDataTransfer::ppuData#1 ppuDataTransfer::ppuDataPrepare1_ppuData#1 
Alias ppuDataTransfer::cpuData#1 = ppuDataTransfer::cpuData#2 ppuDataTransfer::cpuData#3 
Alias ppuDataTransfer::size#2 = ppuDataTransfer::size#4 ppuDataTransfer::size#6 
Alias ppuDataTransfer::cpuSrc#2 = ppuDataTransfer::cpuSrc#4 ppuDataTransfer::cpuSrc#5 ppuDataTransfer::cpuSrc#3 
Alias ppuDataTransfer::i#2 = ppuDataTransfer::i#5 ppuDataTransfer::i#4 ppuDataTransfer::i#3 
Alias ppuDataTransfer::size#1 = ppuDataTransfer::size#7 ppuDataTransfer::size#5 ppuDataTransfer::size#3 
Alias ppuDataTransfer::ppuDataPut1_val#0 = ppuDataTransfer::ppuDataPut1_val#1 
Alias ppuDataTransfer::size#0 = main::$1 
Alias main::s#2 = main::s#3 
Alias vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#1 
Alias readJoy1::return#2 = readJoy1::return#4 
Alias vblank::joy#0 = vblank::$1 
Alias vblank::y_idx#0 = vblank::y_idx#12 vblank::y_idx#13 
Alias vblank::$5 = vblank::$4 
Alias vblank::y_idx#10 = vblank::y_idx#6 vblank::y_idx#7 
Alias vblank::x_idx#0 = vblank::x_idx#8 vblank::x_idx#9 
Alias vblank::$10 = vblank::$9 
Alias vblank::s#2 = vblank::s#3 vblank::s#8 vblank::s#9 
Alias vblank::y_idx#2 = vblank::y_idx#3 
Alias vblank::x_idx#2 = vblank::x_idx#5 vblank::x_idx#3 vblank::x_idx#4 
Alias vblank::x_idx_2#2 = vblank::x_idx_2#6 vblank::x_idx_2#7 vblank::x_idx_2#8 
Alias vblank::y_idx#1 = vblank::y_idx#14 vblank::y_idx#15 
Alias vblank::$19 = vblank::$18 
Alias vblank::$17 = vblank::$16 
Alias vblank::x_idx#1 = vblank::$20 vblank::x_idx#10 vblank::x_idx#11 
Alias vblank::x_idx_2#3 = vblank::x_idx_2#4 vblank::x_idx_2#5 
Alias vblank::s#5 = vblank::s#7 vblank::s#6 
Alias vblank::y_idx#11 = vblank::y_idx#8 vblank::y_idx#9 
Alias vblank::$25 = vblank::$24 
Alias vblank::$23 = vblank::$22 
Alias vblank::x_idx_2#1 = vblank::$26 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)x_sin_idx = vblank::$7 
Alias candidate removed (volatile)x_sin_idx_2 = vblank::$12 
Alias vblank::y_idx#0 = vblank::y_idx#10 vblank::y_idx#5 
Alias vblank::x_idx#0 = vblank::x_idx#7 
Alias vblank::x_idx_2#2 = vblank::x_idx_2#3 
Alias vblank::s#2 = vblank::s#5 vblank::s#4 
Alias vblank::y_idx#1 = vblank::y_idx#11 vblank::y_idx#4 
Alias vblank::x_idx#1 = vblank::x_idx#6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)x_sin_idx = vblank::$7 
Alias candidate removed (volatile)x_sin_idx_2 = vblank::$12 
Identical Phi Values (word) ppuDataFill::size#2 (word) ppuDataFill::size#3
Identical Phi Values (byte) ppuDataFill::val#2 (byte) ppuDataFill::val#4
Identical Phi Values (nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData#0 (nomodify void*) ppuDataTransfer::ppuData#0
Identical Phi Values (nomodify void*) ppuDataTransfer::cpuData#1 (nomodify void*) ppuDataTransfer::cpuData#0
Identical Phi Values (word) ppuDataTransfer::size#2 (word) ppuDataTransfer::size#0
Identical Phi Values (word) ppuDataTransfer::size#1 (word) ppuDataTransfer::size#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [202] (byte~) vblank::$28 ← (byte) vblank::s#2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) readJoy1::$0 [10] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2
Simple Condition (bool~) ppuDataFill::$1 [30] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::@2
Simple Condition (bool~) ppuDataTransfer::$1 [49] if((word) ppuDataTransfer::i#2<(word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2
Simple Condition (bool~) main::initNES1_waitForVBlank1_$1 [73] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
Simple Condition (bool~) main::initNES1_$5 [86] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1
Simple Condition (bool~) main::initNES1_waitForVBlank2_$1 [91] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
Simple Condition (bool~) main::$6 [108] if((byte) main::s#2<(byte) $40) goto main::@2
Simple Condition (bool~) main::$8 [122] if((number) 0!=(number) 1) goto main::@3
Simple Condition (bool~) vblank::$2 [142] if((byte) 0==(byte) vblank::joy#0) goto vblank::@1
Simple Condition (bool~) vblank::$3 [146] if((volatile byte) x_sin_idx==(byte) $ee) goto vblank::@2
Simple Condition (bool~) vblank::$8 [154] if((volatile byte) x_sin_idx_2==(byte) $58) goto vblank::@5
Simple Condition (bool~) vblank::$13 [163] if((byte) vblank::s#2<(byte) $40) goto vblank::@9
Simple Condition (bool~) vblank::$15 [171] if((byte) vblank::x_idx#2<(byte) 3) goto vblank::@10
Simple Condition (bool~) vblank::$21 [176] if((byte) vblank::x_idx_2#2>=(byte) $56) goto vblank::@13
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] (byte*~) readJoy1::$7 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [3] (byte*~) readJoy1::$8 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [12] (byte*~) readJoy1::$9 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [20] (byte*~) ppuDataFill::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [24] (byte*~) ppuDataFill::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [31] (byte*~) ppuDataFill::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [38] (byte*~) ppuDataTransfer::ppuDataPrepare1_$4 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [42] (byte*~) ppuDataTransfer::ppuDataPrepare1_$5 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [51] (byte*~) ppuDataTransfer::ppuDataPut1_$1 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [58] (byte*~) main::initNES1_disableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [61] (byte*~) main::initNES1_disableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [65] (byte*~) main::initNES1_disableAudioOutput1_$1 ← (byte*)(const struct RICOH_2A03*) APU
Constant right-side identified [69] (byte*~) main::initNES1_waitForVBlank1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [87] (byte*~) main::initNES1_waitForVBlank2_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [93] (word) ppuDataTransfer::size#0 ← sizeof  (const byte*) PALETTE
Constant right-side identified [99] (word) ppuDataFill::size#0 ← (unumber)(number) $20*(number) $1e
Constant right-side identified [115] (byte*~) main::enableVideoOutput1_$2 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [118] (byte*~) main::enableVideoOutput1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [124] (byte*~) vblank::$31 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [127] (byte*~) vblank::$32 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [131] (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$3 ← (byte*)(const struct RICOH_2C02*) PPU
Constant right-side identified [135] (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$4 ← (byte*)(const struct RICOH_2A03*) APU
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) readJoy1::$7 = (byte*)APU
Constant (const byte*) readJoy1::$8 = (byte*)APU
Constant (const byte) readJoy1::joy#0 = 0
Constant (const byte) readJoy1::i#0 = 0
Constant (const byte*) readJoy1::$9 = (byte*)APU
Constant (const byte*) ppuDataFill::ppuDataPrepare1_$4 = (byte*)PPU
Constant (const byte*) ppuDataFill::ppuDataPrepare1_$5 = (byte*)PPU
Constant (const word) ppuDataFill::i#0 = 0
Constant (const byte*) ppuDataFill::ppuDataPut1_$1 = (byte*)PPU
Constant (const byte*) ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)PPU
Constant (const byte*) ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)PPU
Constant (const word) ppuDataTransfer::i#0 = 0
Constant (const byte*) ppuDataTransfer::ppuDataPut1_$1 = (byte*)PPU
Constant (const byte*) main::initNES1_disableVideoOutput1_$2 = (byte*)PPU
Constant (const byte*) main::initNES1_disableVideoOutput1_$3 = (byte*)PPU
Constant (const byte*) main::initNES1_disableAudioOutput1_$1 = (byte*)APU
Constant (const byte*) main::initNES1_waitForVBlank1_$3 = (byte*)PPU
Constant (const byte) main::initNES1_i#0 = 0
Constant (const byte*) main::initNES1_waitForVBlank2_$3 = (byte*)PPU
Constant (const word) ppuDataTransfer::size#0 = sizeof PALETTE
Constant (const nomodify void*) ppuDataTransfer::ppuData#0 = (void*)PPU_PALETTE
Constant (const nomodify void*) ppuDataTransfer::cpuData#0 = (void*)PALETTE
Constant (const nomodify void*) ppuDataFill::ppuData#0 = (void*)PPU_NAME_TABLE_0
Constant (const byte) ppuDataFill::val#0 = '*'
Constant (const word) ppuDataFill::size#0 = (unumber)$20*$1e
Constant (const nomodify void*) ppuDataFill::ppuData#1 = (void*)PPU_ATTRIBUTE_TABLE_0
Constant (const byte) ppuDataFill::val#1 = 0
Constant (const word) ppuDataFill::size#1 = $40
Constant (const byte) main::s#0 = 0
Constant (const byte*) main::enableVideoOutput1_$2 = (byte*)PPU
Constant (const byte*) main::enableVideoOutput1_$3 = (byte*)PPU
Constant (const byte*) vblank::$31 = (byte*)PPU
Constant (const byte*) vblank::$32 = (byte*)PPU
Constant (const struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = SPRITE_BUFFER
Constant (const byte*) vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)PPU
Constant (const byte*) vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)APU
Constant (const byte) vblank::$6 = 0
Constant (const byte) vblank::$11 = 0
Constant (const byte) vblank::s#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) ppuDataTransfer::cpuSrc#0 = (byte*)ppuDataTransfer::cpuData#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [122] if((number) 0!=(number) 1) goto main::@3
Successful SSA optimization Pass2ConstantIfs
Converting *(pointer+n) to pointer[n] [2] *((byte*~) readJoy1::$4) ← (byte) 1  -- *(readJoy1::$7 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [5] *((byte*~) readJoy1::$5) ← (byte) 0  -- *(readJoy1::$8 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [14] (byte~) readJoy1::$2 ← *((byte*~) readJoy1::$6) & (byte) 1  -- *(readJoy1::$9 + OFFSET_STRUCT_RICOH_2A03_JOY1)
Converting *(pointer+n) to pointer[n] [22] *((byte*~) ppuDataFill::ppuDataPrepare1_$2) ← (byte~) ppuDataFill::ppuDataPrepare1_$0  -- *(ppuDataFill::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [26] *((byte*~) ppuDataFill::ppuDataPrepare1_$3) ← (byte~) ppuDataFill::ppuDataPrepare1_$1  -- *(ppuDataFill::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [33] *((byte*~) ppuDataFill::ppuDataPut1_$0) ← (byte) ppuDataFill::val#4  -- *(ppuDataFill::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [40] *((byte*~) ppuDataTransfer::ppuDataPrepare1_$2) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$0  -- *(ppuDataTransfer::ppuDataPrepare1_$4 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [44] *((byte*~) ppuDataTransfer::ppuDataPrepare1_$3) ← (byte~) ppuDataTransfer::ppuDataPrepare1_$1  -- *(ppuDataTransfer::ppuDataPrepare1_$5 + OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Converting *(pointer+n) to pointer[n] [53] *((byte*~) ppuDataTransfer::ppuDataPut1_$0) ← (byte) ppuDataTransfer::ppuDataPut1_val#0  -- *(ppuDataTransfer::ppuDataPut1_$1 + OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Converting *(pointer+n) to pointer[n] [60] *((byte*~) main::initNES1_disableVideoOutput1_$0) ← (byte) 0  -- *(main::initNES1_disableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL)
Converting *(pointer+n) to pointer[n] [63] *((byte*~) main::initNES1_disableVideoOutput1_$1) ← (byte) 0  -- *(main::initNES1_disableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Converting *(pointer+n) to pointer[n] [67] *((byte*~) main::initNES1_disableAudioOutput1_$0) ← (byte) $40  -- *(main::initNES1_disableAudioOutput1_$1 + OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Converting *(pointer+n) to pointer[n] [71] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*~) main::initNES1_waitForVBlank1_$2) & (byte) $80  -- *(main::initNES1_waitForVBlank1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Converting *(pointer+n) to pointer[n] [89] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*~) main::initNES1_waitForVBlank2_$2) & (byte) $80  -- *(main::initNES1_waitForVBlank2_$3 + OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Converting *(pointer+n) to pointer[n] [117] *((byte*~) main::enableVideoOutput1_$0) ← (byte) $80  -- *(main::enableVideoOutput1_$2 + OFFSET_STRUCT_RICOH_2C02_PPUCTRL)
Converting *(pointer+n) to pointer[n] [120] *((byte*~) main::enableVideoOutput1_$1) ← (byte) $1e  -- *(main::enableVideoOutput1_$3 + OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Converting *(pointer+n) to pointer[n] [126] *((byte*~) vblank::$29) ← (byte) 0  -- *(vblank::$31 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Converting *(pointer+n) to pointer[n] [129] *((byte*~) vblank::$30) ← (byte) 0  -- *(vblank::$32 + OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Converting *(pointer+n) to pointer[n] [133] *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1) ← (byte) 0  -- *(vblank::ppuSpriteBufferDmaTransfer1_$3 + OFFSET_STRUCT_RICOH_2C02_OAMADDR)
Converting *(pointer+n) to pointer[n] [137] *((byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2) ← (byte~) vblank::ppuSpriteBufferDmaTransfer1_$0  -- *(vblank::ppuSpriteBufferDmaTransfer1_$4 + OFFSET_STRUCT_RICOH_2A03_OAMDMA)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [59] (byte*~) main::initNES1_disableVideoOutput1_$0 ← (const byte*) main::initNES1_disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::initNES1_disableVideoOutput1_$2 in [60] *((const byte*) main::initNES1_disableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL) ← (byte) 0
Simplifying expression containing zero MEMORY in [76] *((const nomodify byte*) MEMORY+(byte) 0 + (byte) main::initNES1_i#2) ← (byte) 0
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [110] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (byte~) main::$7) ← (byte) 0
Simplifying expression containing zero main::enableVideoOutput1_$2 in [116] (byte*~) main::enableVideoOutput1_$0 ← (const byte*) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Simplifying expression containing zero main::enableVideoOutput1_$2 in [117] *((const byte*) main::enableVideoOutput1_$2 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL) ← (byte) $80
Simplifying expression containing zero (byte*)SPRITE_BUFFER in [165] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_Y + (byte~) vblank::$27) ← *((const to_nomodify byte*) SINTABLE_240 + (byte) vblank::y_idx#2)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) readJoy1::$4 and assignment [0] (byte*~) readJoy1::$4 ← (const byte*) readJoy1::$7 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) readJoy1::$5 and assignment [2] (byte*~) readJoy1::$5 ← (const byte*) readJoy1::$8 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) readJoy1::$6 and assignment [7] (byte*~) readJoy1::$6 ← (const byte*) readJoy1::$9 + (const byte) OFFSET_STRUCT_RICOH_2A03_JOY1
Eliminating unused variable (byte*~) ppuDataFill::ppuDataPrepare1_$2 and assignment [14] (byte*~) ppuDataFill::ppuDataPrepare1_$2 ← (const byte*) ppuDataFill::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataFill::ppuDataPrepare1_$3 and assignment [17] (byte*~) ppuDataFill::ppuDataPrepare1_$3 ← (const byte*) ppuDataFill::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataFill::ppuDataPut1_$0 and assignment [21] (byte*~) ppuDataFill::ppuDataPut1_$0 ← (const byte*) ppuDataFill::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) ppuDataTransfer::ppuDataPrepare1_$2 and assignment [26] (byte*~) ppuDataTransfer::ppuDataPrepare1_$2 ← (const byte*) ppuDataTransfer::ppuDataPrepare1_$4 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataTransfer::ppuDataPrepare1_$3 and assignment [29] (byte*~) ppuDataTransfer::ppuDataPrepare1_$3 ← (const byte*) ppuDataTransfer::ppuDataPrepare1_$5 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR
Eliminating unused variable (byte*~) ppuDataTransfer::ppuDataPut1_$0 and assignment [34] (byte*~) ppuDataTransfer::ppuDataPut1_$0 ← (const byte*) ppuDataTransfer::ppuDataPut1_$1 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA
Eliminating unused variable (byte*~) main::initNES1_disableVideoOutput1_$0 and assignment [40] (byte*~) main::initNES1_disableVideoOutput1_$0 ← (const byte*) main::initNES1_disableVideoOutput1_$2
Eliminating unused variable (byte*~) main::initNES1_disableVideoOutput1_$1 and assignment [42] (byte*~) main::initNES1_disableVideoOutput1_$1 ← (const byte*) main::initNES1_disableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable (byte*~) main::initNES1_disableAudioOutput1_$0 and assignment [45] (byte*~) main::initNES1_disableAudioOutput1_$0 ← (const byte*) main::initNES1_disableAudioOutput1_$1 + (const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
Eliminating unused variable (byte*~) main::initNES1_waitForVBlank1_$2 and assignment [48] (byte*~) main::initNES1_waitForVBlank1_$2 ← (const byte*) main::initNES1_waitForVBlank1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable (byte*~) main::initNES1_waitForVBlank2_$2 and assignment [62] (byte*~) main::initNES1_waitForVBlank2_$2 ← (const byte*) main::initNES1_waitForVBlank2_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
Eliminating unused variable (byte*~) main::enableVideoOutput1_$0 and assignment [77] (byte*~) main::enableVideoOutput1_$0 ← (const byte*) main::enableVideoOutput1_$2
Eliminating unused variable (byte*~) main::enableVideoOutput1_$1 and assignment [79] (byte*~) main::enableVideoOutput1_$1 ← (const byte*) main::enableVideoOutput1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK
Eliminating unused variable (byte*~) vblank::$29 and assignment [82] (byte*~) vblank::$29 ← (const byte*) vblank::$31 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused variable (byte*~) vblank::$30 and assignment [84] (byte*~) vblank::$30 ← (const byte*) vblank::$32 + (const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
Eliminating unused variable (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1 and assignment [86] (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$1 ← (const byte*) vblank::ppuSpriteBufferDmaTransfer1_$3 + (const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR
Eliminating unused variable (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2 and assignment [89] (byte*~) vblank::ppuSpriteBufferDmaTransfer1_$2 ← (const byte*) vblank::ppuSpriteBufferDmaTransfer1_$4 + (const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA
Eliminating unused constant (const byte) OFFSET_STRUCT_SPRITEDATA_Y
Eliminating unused constant (const byte) OFFSET_STRUCT_RICOH_2C02_PPUCTRL
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolving array sizeof() sizeof (const byte*) PALETTE
Successful SSA optimization PassNSizeOfSimplification
Alias candidate removed (volatile)x_sin_idx = vblank::$7 
Alias candidate removed (volatile)x_sin_idx_2 = vblank::$12 
Alias vblank::$28 = vblank::$27 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)x_sin_idx = vblank::$7 
Alias candidate removed (volatile)x_sin_idx_2 = vblank::$12 
Constant right-side identified [19] (byte~) ppuDataTransfer::ppuDataPrepare1_$0 ← > (const nomodify void*) ppuDataTransfer::ppuData#0
Constant right-side identified [21] (byte~) ppuDataTransfer::ppuDataPrepare1_$1 ← < (const nomodify void*) ppuDataTransfer::ppuData#0
Constant right-side identified [68] (byte~) vblank::ppuSpriteBufferDmaTransfer1_$0 ← > (const struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) ppuDataTransfer::ppuDataPrepare1_$0 = >ppuDataTransfer::ppuData#0
Constant (const byte) ppuDataTransfer::ppuDataPrepare1_$1 = <ppuDataTransfer::ppuData#0
Constant (const byte) vblank::ppuSpriteBufferDmaTransfer1_$0 = >vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero <(const nomodify void*) ppuDataTransfer::ppuData#0 in 
Successful SSA optimization PassNSimplifyConstantZero
Adding number conversion cast (unumber) $20 in 
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $20
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $20
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)x_sin_idx = vblank::$7 
Alias candidate removed (volatile)x_sin_idx_2 = vblank::$12 
Alias candidate removed (volatile)x_sin_idx = vblank::$7 
Alias candidate removed (volatile)x_sin_idx_2 = vblank::$12 
Rewriting multiplication to use shift [55] (byte~) main::$7 ← (byte) main::s#2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Rewriting multiplication to use shift [86] (byte~) vblank::$28 ← (byte) vblank::s#2 * (const byte) SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) readJoy1::joy#0
Inlining constant with var siblings (const byte) readJoy1::i#0
Inlining constant with var siblings (const word) ppuDataFill::i#0
Inlining constant with different constant siblings (const nomodify void*) ppuDataFill::ppuData#0
Inlining constant with var siblings (const byte) ppuDataFill::val#0
Inlining constant with var siblings (const word) ppuDataFill::size#0
Inlining constant with different constant siblings (const nomodify void*) ppuDataFill::ppuData#1
Inlining constant with var siblings (const byte) ppuDataFill::val#1
Inlining constant with var siblings (const word) ppuDataFill::size#1
Inlining constant with var siblings (const word) ppuDataTransfer::i#0
Inlining constant with var siblings (const byte*) ppuDataTransfer::cpuSrc#0
Inlining constant with var siblings (const byte) main::initNES1_i#0
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) vblank::s#0
Constant inlined ppuDataTransfer::i#0 = (word) 0
Constant inlined ppuDataTransfer::ppuDataPrepare1_$1 = (byte) 0
Constant inlined ppuDataTransfer::ppuDataPrepare1_$0 = >(const nomodify void*) ppuDataTransfer::ppuData#0
Constant inlined vblank::s#0 = (byte) 0
Constant inlined main::enableVideoOutput1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined vblank::$6 = (byte) 0
Constant inlined main::enableVideoOutput1_$2 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined readJoy1::i#0 = (byte) 0
Constant inlined ppuDataTransfer::ppuDataPut1_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::val#1 = (byte) 0
Constant inlined ppuDataFill::ppuDataPut1_$1 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::val#0 = (byte) '*'
Constant inlined main::initNES1_waitForVBlank2_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::ppuDataPrepare1_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::ppuDataPrepare1_$5 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataTransfer::ppuDataPrepare1_$4 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::initNES1_disableVideoOutput1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined main::initNES1_disableVideoOutput1_$2 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::ppuData#1 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0
Constant inlined ppuDataFill::ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0
Constant inlined main::initNES1_disableAudioOutput1_$1 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined readJoy1::joy#0 = (byte) 0
Constant inlined ppuDataTransfer::cpuSrc#0 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0
Constant inlined main::s#0 = (byte) 0
Constant inlined main::initNES1_i#0 = (byte) 0
Constant inlined vblank::$31 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined vblank::$32 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined vblank::$11 = (byte) 0
Constant inlined readJoy1::$9 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer#0 = (const struct SpriteData*) SPRITE_BUFFER
Constant inlined main::initNES1_waitForVBlank1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$0 = >(const struct SpriteData*) SPRITE_BUFFER
Constant inlined ppuDataFill::size#1 = (byte) $40
Constant inlined ppuDataFill::size#0 = (word)(number) $20*(number) $1e
Constant inlined readJoy1::$7 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$3 = (byte*)(const struct RICOH_2C02*) PPU
Constant inlined ppuDataFill::i#0 = (word) 0
Constant inlined readJoy1::$8 = (byte*)(const struct RICOH_2A03*) APU
Constant inlined vblank::ppuSpriteBufferDmaTransfer1_$4 = (byte*)(const struct RICOH_2A03*) APU
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_JOY1)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL)
Consolidated array index constant in *((byte*)PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR)
Consolidated array index constant in *((byte*)APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias candidate removed (volatile)x_sin_idx = vblank::$7 
Alias candidate removed (volatile)x_sin_idx_2 = vblank::$12 
Eliminating unused constant (const byte) SIZEOF_STRUCT_SPRITEDATA
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)x_sin_idx = vblank::$7 
Alias candidate removed (volatile)x_sin_idx_2 = vblank::$12 
Added new block during phi lifting main::@8(between main::initNES1_@1 and main::initNES1_@1)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of vblank::@16
Adding NOP phi() at start of vblank::@5
Adding NOP phi() at start of vblank::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_@6
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of readJoy1::@3
Adding NOP phi() at start of ppuDataTransfer
Adding NOP phi() at start of ppuDataTransfer::@3
Adding NOP phi() at start of ppuDataFill::@3
Adding NOP phi() at start of ppuDataFill::@2
CALL GRAPH
Calls in [__start] to main:5 
Calls in [vblank] to readJoy1:13 
Calls in [main] to ppuDataTransfer:88 ppuDataFill:90 ppuDataFill:92 

Created 18 initial phi equivalence classes
Coalesced [22] vblank::$34 ← vblank::$5
Coalesced [28] vblank::$35 ← vblank::$10
Coalesced [32] vblank::y_idx#17 ← vblank::y_idx#0
Coalesced [33] vblank::x_idx#13 ← vblank::x_idx#0
Coalesced [34] vblank::x_idx_2#10 ← vblank::x_idx_2#0
Coalesced [44] vblank::x_idx#15 ← vblank::$17
Coalesced [48] vblank::x_idx_2#12 ← vblank::$23
Coalesced [51] vblank::s#10 ← vblank::s#1
Coalesced [52] vblank::y_idx#16 ← vblank::y_idx#1
Coalesced [53] vblank::x_idx#12 ← vblank::x_idx#1
Coalesced [54] vblank::x_idx_2#9 ← vblank::x_idx_2#1
Coalesced [56] vblank::x_idx_2#11 ← vblank::$25
Coalesced [58] vblank::x_idx#14 ← vblank::$19
Coalesced [105] main::s#4 ← main::s#1
Coalesced [106] main::initNES1_i#3 ← main::initNES1_i#1
Coalesced [117] readJoy1::i#4 ← readJoy1::i#1
Coalesced [118] readJoy1::joy#5 ← readJoy1::joy#1
Coalesced [130] ppuDataTransfer::i#6 ← ppuDataTransfer::i#1
Coalesced [131] ppuDataTransfer::cpuSrc#6 ← ppuDataTransfer::cpuSrc#1
Coalesced [144] ppuDataFill::i#6 ← ppuDataFill::i#1
Coalesced down to 16 phi equivalence classes
Culled Empty Block (label) __start::@2
Culled Empty Block (label) vblank::@5
Culled Empty Block (label) vblank::@2
Culled Empty Block (label) main::initNES1_@6
Culled Empty Block (label) main::@7
Culled Empty Block (label) main::@8
Culled Empty Block (label) readJoy1::@3
Culled Empty Block (label) ppuDataTransfer::@3
Culled Empty Block (label) ppuDataFill::@3
Culled Empty Block (label) ppuDataFill::@2
Renumbering block ppuDataFill::@4 to ppuDataFill::@2
Renumbering block ppuDataTransfer::@4 to ppuDataTransfer::@3
Renumbering block vblank::@3 to vblank::@2
Renumbering block vblank::@4 to vblank::@3
Renumbering block vblank::@6 to vblank::@4
Renumbering block vblank::@7 to vblank::@5
Renumbering block vblank::@8 to vblank::@6
Renumbering block vblank::@9 to vblank::@7
Renumbering block vblank::@10 to vblank::@8
Renumbering block vblank::@11 to vblank::@9
Renumbering block vblank::@12 to vblank::@10
Renumbering block vblank::@13 to vblank::@11
Renumbering block vblank::@14 to vblank::@12
Renumbering block vblank::@15 to vblank::@13
Renumbering block vblank::@16 to vblank::@14
Renumbering block vblank::@17 to vblank::@15
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of vblank::@14
Adding NOP phi() at start of main
Adding NOP phi() at start of main::initNES1_waitForVBlank1
Adding NOP phi() at start of main::initNES1_waitForVBlank2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of ppuDataTransfer

FINAL CONTROL FLOW GRAPH

(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (volatile byte) y_sin_idx ← (byte) 0
  [2] (volatile byte) x_sin_idx ← (byte) $49
  [3] (volatile byte) x_sin_idx_2 ← (byte) $52
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [4] phi()
  [5] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [6] return 
  to:@return

interrupt(HARDWARE_STACK)(void()) vblank()
vblank: scope:[vblank]  from
  [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0
  [8] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0
  to:vblank::ppuSpriteBufferDmaTransfer1
vblank::ppuSpriteBufferDmaTransfer1: scope:[vblank]  from vblank
  [9] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0
  [10] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const struct SpriteData*) SPRITE_BUFFER
  to:vblank::@14
vblank::@14: scope:[vblank]  from vblank::ppuSpriteBufferDmaTransfer1
  [11] phi()
  [12] call readJoy1 
  [13] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2
  to:vblank::@15
vblank::@15: scope:[vblank]  from vblank::@14
  [14] (byte) vblank::joy#0 ← (byte) readJoy1::return#2
  [15] if((byte) 0==(byte) vblank::joy#0) goto vblank::@1
  to:vblank::@return
vblank::@return: scope:[vblank]  from vblank::@15 vblank::@6
  [16] return 
  to:@return
vblank::@1: scope:[vblank]  from vblank::@15
  [17] (byte) vblank::y_idx#0 ← (volatile byte) y_sin_idx
  [18] (volatile byte) y_sin_idx ← ++ (volatile byte) y_sin_idx
  [19] if((volatile byte) x_sin_idx==(byte) $ee) goto vblank::@3
  to:vblank::@2
vblank::@2: scope:[vblank]  from vblank::@1
  [20] (byte~) vblank::$5 ← (volatile byte) x_sin_idx + (byte) 1
  to:vblank::@3
vblank::@3: scope:[vblank]  from vblank::@1 vblank::@2
  [21] (byte~) vblank::$7 ← phi( vblank::@1/(byte) 0 vblank::@2/(byte~) vblank::$5 )
  [22] (volatile byte) x_sin_idx ← (byte~) vblank::$7
  [23] (byte) vblank::x_idx#0 ← (volatile byte) x_sin_idx
  [24] if((volatile byte) x_sin_idx_2==(byte) $58) goto vblank::@5
  to:vblank::@4
vblank::@4: scope:[vblank]  from vblank::@3
  [25] (byte~) vblank::$10 ← (volatile byte) x_sin_idx_2 + (byte) 1
  to:vblank::@5
vblank::@5: scope:[vblank]  from vblank::@3 vblank::@4
  [26] (byte~) vblank::$12 ← phi( vblank::@3/(byte) 0 vblank::@4/(byte~) vblank::$10 )
  [27] (volatile byte) x_sin_idx_2 ← (byte~) vblank::$12
  [28] (byte) vblank::x_idx_2#0 ← (volatile byte) x_sin_idx_2
  to:vblank::@6
vblank::@6: scope:[vblank]  from vblank::@13 vblank::@5
  [29] (byte) vblank::x_idx_2#2 ← phi( vblank::@13/(byte) vblank::x_idx_2#1 vblank::@5/(byte) vblank::x_idx_2#0 )
  [29] (byte) vblank::x_idx#2 ← phi( vblank::@13/(byte) vblank::x_idx#1 vblank::@5/(byte) vblank::x_idx#0 )
  [29] (byte) vblank::y_idx#2 ← phi( vblank::@13/(byte) vblank::y_idx#1 vblank::@5/(byte) vblank::y_idx#0 )
  [29] (byte) vblank::s#2 ← phi( vblank::@13/(byte) vblank::s#1 vblank::@5/(byte) 0 )
  [30] if((byte) vblank::s#2<(byte) $40) goto vblank::@7
  to:vblank::@return
vblank::@7: scope:[vblank]  from vblank::@6
  [31] (byte~) vblank::$28 ← (byte) vblank::s#2 << (byte) 2
  [32] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) vblank::$28) ← *((const to_nomodify byte*) SINTABLE_240 + (byte) vblank::y_idx#2)
  [33] (byte) vblank::y_idx#1 ← (byte) vblank::y_idx#2 - (byte) 4
  [34] (byte~) vblank::$14 ← *((const to_nomodify byte*) SINTABLE_184 + (byte) vblank::x_idx#2) + *((const to_nomodify byte*) SINTABLE_64 + (byte) vblank::x_idx_2#2)
  [35] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) vblank::$28) ← (byte~) vblank::$14
  [36] if((byte) vblank::x_idx#2<(byte) 3) goto vblank::@8
  to:vblank::@9
vblank::@9: scope:[vblank]  from vblank::@7
  [37] (byte~) vblank::$17 ← (byte) vblank::x_idx#2 - (byte) 3
  to:vblank::@10
vblank::@10: scope:[vblank]  from vblank::@8 vblank::@9
  [38] (byte) vblank::x_idx#1 ← phi( vblank::@8/(byte~) vblank::$19 vblank::@9/(byte~) vblank::$17 )
  [39] if((byte) vblank::x_idx_2#2>=(byte) $56) goto vblank::@11
  to:vblank::@12
vblank::@12: scope:[vblank]  from vblank::@10
  [40] (byte~) vblank::$23 ← (byte) vblank::x_idx_2#2 + (byte) 3
  to:vblank::@13
vblank::@13: scope:[vblank]  from vblank::@11 vblank::@12
  [41] (byte) vblank::x_idx_2#1 ← phi( vblank::@11/(byte~) vblank::$25 vblank::@12/(byte~) vblank::$23 )
  [42] (byte) vblank::s#1 ← ++ (byte) vblank::s#2
  to:vblank::@6
vblank::@11: scope:[vblank]  from vblank::@10
  [43] (byte~) vblank::$25 ← (byte) vblank::x_idx_2#2 - (byte) $56
  to:vblank::@13
vblank::@8: scope:[vblank]  from vblank::@7
  [44] (byte~) vblank::$19 ← (byte) vblank::x_idx#2 + (byte) $ec
  to:vblank::@10

(void()) main()
main: scope:[main]  from __start::@1
  [45] phi()
  to:main::initNES1
main::initNES1: scope:[main]  from main
  asm { cld ldx#$ff txs  }
  to:main::initNES1_disableVideoOutput1
main::initNES1_disableVideoOutput1: scope:[main]  from main::initNES1
  [47] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0
  [48] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0
  to:main::initNES1_disableAudioOutput1
main::initNES1_disableAudioOutput1: scope:[main]  from main::initNES1_disableVideoOutput1
  [49] *((const nomodify byte*) FR_COUNTER) ← (byte) $40
  [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40
  to:main::initNES1_clearVBlankFlag1
main::initNES1_clearVBlankFlag1: scope:[main]  from main::initNES1_disableAudioOutput1
  asm { ldaPPU_PPUSTATUS  }
  to:main::initNES1_waitForVBlank1
main::initNES1_waitForVBlank1: scope:[main]  from main::initNES1_clearVBlankFlag1
  [52] phi()
  to:main::initNES1_waitForVBlank1_@1
main::initNES1_waitForVBlank1_@1: scope:[main]  from main::initNES1_waitForVBlank1 main::initNES1_waitForVBlank1_@1
  [53] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [54] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1
  to:main::initNES1_@1
main::initNES1_@1: scope:[main]  from main::initNES1_@1 main::initNES1_waitForVBlank1_@1
  [55] (byte) main::initNES1_i#2 ← phi( main::initNES1_@1/(byte) main::initNES1_i#1 main::initNES1_waitForVBlank1_@1/(byte) 0 )
  [56] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0
  [57] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0
  [58] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0
  [59] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0
  [60] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0
  [61] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0
  [62] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0
  [63] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0
  [64] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2
  [65] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1
  to:main::initNES1_waitForVBlank2
main::initNES1_waitForVBlank2: scope:[main]  from main::initNES1_@1
  [66] phi()
  to:main::initNES1_waitForVBlank2_@1
main::initNES1_waitForVBlank2_@1: scope:[main]  from main::initNES1_waitForVBlank2 main::initNES1_waitForVBlank2_@1
  [67] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80
  [68] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1
  to:main::initNES1_@7
main::initNES1_@7: scope:[main]  from main::initNES1_waitForVBlank2_@1
  asm { ldaPPU_PPUSTATUS  }
  to:main::@4
main::@4: scope:[main]  from main::initNES1_@7
  [70] phi()
  [71] call ppuDataTransfer 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [72] phi()
  [73] call ppuDataFill 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [74] phi()
  [75] call ppuDataFill 
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@6
  [76] (byte) main::s#2 ← phi( main::@2/(byte) main::s#1 main::@6/(byte) 0 )
  [77] if((byte) main::s#2<(byte) $40) goto main::@2
  to:main::enableVideoOutput1
main::enableVideoOutput1: scope:[main]  from main::@1
  [78] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80
  [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e
  to:main::@3
main::@3: scope:[main]  from main::@3 main::enableVideoOutput1
  [80] phi()
  to:main::@3
main::@2: scope:[main]  from main::@1
  [81] (byte~) main::$7 ← (byte) main::s#2 << (byte) 2
  [82] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) main::$7) ← (byte) 0
  [83] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_TILE + (byte~) main::$7) ← *((const byte*) MESSAGE + (byte) main::s#2)
  [84] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES + (byte~) main::$7) ← (byte) 2
  [85] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) main::$7) ← (byte) 0
  [86] (byte) main::s#1 ← ++ (byte) main::s#2
  to:main::@1

(byte()) readJoy1()
readJoy1: scope:[readJoy1]  from vblank::@14
  [87] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1
  [88] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0
  to:readJoy1::@1
readJoy1::@1: scope:[readJoy1]  from readJoy1 readJoy1::@2
  [89] (byte) readJoy1::joy#2 ← phi( readJoy1/(byte) 0 readJoy1::@2/(byte) readJoy1::joy#1 )
  [89] (byte) readJoy1::i#2 ← phi( readJoy1/(byte) 0 readJoy1::@2/(byte) readJoy1::i#1 )
  [90] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2
  to:readJoy1::@return
readJoy1::@return: scope:[readJoy1]  from readJoy1::@1
  [91] return 
  to:@return
readJoy1::@2: scope:[readJoy1]  from readJoy1::@1
  [92] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1
  [93] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1
  [94] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2
  [95] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2
  to:readJoy1::@1

(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
ppuDataTransfer: scope:[ppuDataTransfer]  from main::@4
  [96] phi()
  to:ppuDataTransfer::ppuDataPrepare1
ppuDataTransfer::ppuDataPrepare1: scope:[ppuDataTransfer]  from ppuDataTransfer
  [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0
  [98] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0
  to:ppuDataTransfer::@1
ppuDataTransfer::@1: scope:[ppuDataTransfer]  from ppuDataTransfer::@3 ppuDataTransfer::ppuDataPrepare1
  [99] (byte*) ppuDataTransfer::cpuSrc#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 ppuDataTransfer::@3/(byte*) ppuDataTransfer::cpuSrc#1 )
  [99] (word) ppuDataTransfer::i#2 ← phi( ppuDataTransfer::ppuDataPrepare1/(word) 0 ppuDataTransfer::@3/(word) ppuDataTransfer::i#1 )
  [100] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2
  to:ppuDataTransfer::@return
ppuDataTransfer::@return: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [101] return 
  to:@return
ppuDataTransfer::@2: scope:[ppuDataTransfer]  from ppuDataTransfer::@1
  [102] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2)
  to:ppuDataTransfer::ppuDataPut1
ppuDataTransfer::ppuDataPut1: scope:[ppuDataTransfer]  from ppuDataTransfer::@2
  [103] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0
  to:ppuDataTransfer::@3
ppuDataTransfer::@3: scope:[ppuDataTransfer]  from ppuDataTransfer::ppuDataPut1
  [104] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2
  [105] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2
  to:ppuDataTransfer::@1

(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
ppuDataFill: scope:[ppuDataFill]  from main::@5 main::@6
  [106] (byte) ppuDataFill::val#4 ← phi( main::@5/(byte) '*' main::@6/(byte) 0 )
  [106] (word) ppuDataFill::size#3 ← phi( main::@5/(word)(number) $20*(number) $1e main::@6/(byte) $40 )
  [106] (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ← phi( main::@5/(void*)(const nomodify byte*) PPU_NAME_TABLE_0 main::@6/(void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 )
  to:ppuDataFill::ppuDataPrepare1
ppuDataFill::ppuDataPrepare1: scope:[ppuDataFill]  from ppuDataFill
  [107] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [108] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0
  [109] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0
  [110] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1
  to:ppuDataFill::@1
ppuDataFill::@1: scope:[ppuDataFill]  from ppuDataFill::@2 ppuDataFill::ppuDataPrepare1
  [111] (word) ppuDataFill::i#2 ← phi( ppuDataFill::ppuDataPrepare1/(word) 0 ppuDataFill::@2/(word) ppuDataFill::i#1 )
  [112] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1
  to:ppuDataFill::@return
ppuDataFill::@return: scope:[ppuDataFill]  from ppuDataFill::@1
  [113] return 
  to:@return
ppuDataFill::ppuDataPut1: scope:[ppuDataFill]  from ppuDataFill::@1
  [114] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#4
  to:ppuDataFill::@2
ppuDataFill::@2: scope:[ppuDataFill]  from ppuDataFill::ppuDataPut1
  [115] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2
  to:ppuDataFill::@1


VARIABLE REGISTER WEIGHTS
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(void()) __start()
(void()) main()
(byte~) main::$7 126.25
(byte) main::initNES1_i
(byte) main::initNES1_i#1 151.5
(byte) main::initNES1_i#2 112.22222222222223
(byte~) main::initNES1_waitForVBlank1_$0 202.0
(byte~) main::initNES1_waitForVBlank2_$0 202.0
(byte) main::s
(byte) main::s#1 202.0
(byte) main::s#2 72.14285714285714
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(word) ppuDataFill::i
(word) ppuDataFill::i#1 2002.0
(word) ppuDataFill::i#2 1001.0
(nomodify void*) ppuDataFill::ppuData
(byte~) ppuDataFill::ppuDataPrepare1_$0 202.0
(byte~) ppuDataFill::ppuDataPrepare1_$1 202.0
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 67.33333333333333
(byte) ppuDataFill::ppuDataPut1_val
(word) ppuDataFill::size
(word) ppuDataFill::size#3 111.22222222222223
(byte) ppuDataFill::val
(byte) ppuDataFill::val#4 111.22222222222223
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(nomodify void*) ppuDataTransfer::cpuData
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#1 1001.0
(byte*) ppuDataTransfer::cpuSrc#2 750.75
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#1 2002.0
(word) ppuDataTransfer::i#2 600.5999999999999
(nomodify void*) ppuDataTransfer::ppuData
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0 2002.0
(word) ppuDataTransfer::size
(byte()) readJoy1()
(byte~) readJoy1::$1 101.0
(byte~) readJoy1::$2 202.0
(byte) readJoy1::i
(byte) readJoy1::i#1 202.0
(byte) readJoy1::i#2 60.599999999999994
(byte) readJoy1::joy
(byte) readJoy1::joy#1 101.0
(byte) readJoy1::joy#2 51.0
(byte) readJoy1::return
(byte) readJoy1::return#2 4.0
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$10 4.0
(byte~) vblank::$12 4.0
(byte~) vblank::$14 22.0
(byte~) vblank::$17 22.0
(byte~) vblank::$19 22.0
(byte~) vblank::$23 22.0
(byte~) vblank::$25 22.0
(byte~) vblank::$28 8.25
(byte~) vblank::$5 4.0
(byte~) vblank::$7 4.0
(byte) vblank::joy
(byte) vblank::joy#0 4.0
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
(byte) vblank::s
(byte) vblank::s#1 22.0
(byte) vblank::s#2 2.933333333333333
(byte) vblank::x_idx
(byte) vblank::x_idx#0 0.6666666666666666
(byte) vblank::x_idx#1 5.5
(byte) vblank::x_idx#2 7.125
(byte) vblank::x_idx_2
(byte) vblank::x_idx_2#0 4.0
(byte) vblank::x_idx_2#1 16.5
(byte) vblank::x_idx_2#2 4.75
(byte) vblank::y_idx
(byte) vblank::y_idx#0 0.3333333333333333
(byte) vblank::y_idx#1 1.8333333333333333
(byte) vblank::y_idx#2 8.75
(volatile byte) x_sin_idx loadstore 0.7692307692307693
(volatile byte) x_sin_idx_2 loadstore 0.5555555555555556
(volatile byte) y_sin_idx loadstore 0.8

Initial phi equivalence classes
[ vblank::$7 vblank::$5 ]
[ vblank::$12 vblank::$10 ]
[ vblank::s#2 vblank::s#1 ]
[ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ]
[ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ]
[ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ]
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ main::s#2 main::s#1 ]
[ readJoy1::i#2 readJoy1::i#1 ]
[ readJoy1::joy#2 readJoy1::joy#1 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#3 ]
[ ppuDataFill::val#4 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
Added variable y_sin_idx to live range equivalence class [ y_sin_idx ]
Added variable x_sin_idx to live range equivalence class [ x_sin_idx ]
Added variable x_sin_idx_2 to live range equivalence class [ x_sin_idx_2 ]
Added variable readJoy1::return#2 to live range equivalence class [ readJoy1::return#2 ]
Added variable vblank::joy#0 to live range equivalence class [ vblank::joy#0 ]
Added variable vblank::$28 to live range equivalence class [ vblank::$28 ]
Added variable vblank::$14 to live range equivalence class [ vblank::$14 ]
Added variable main::initNES1_waitForVBlank1_$0 to live range equivalence class [ main::initNES1_waitForVBlank1_$0 ]
Added variable main::initNES1_waitForVBlank2_$0 to live range equivalence class [ main::initNES1_waitForVBlank2_$0 ]
Added variable main::$7 to live range equivalence class [ main::$7 ]
Added variable readJoy1::$1 to live range equivalence class [ readJoy1::$1 ]
Added variable readJoy1::$2 to live range equivalence class [ readJoy1::$2 ]
Added variable ppuDataTransfer::ppuDataPut1_val#0 to live range equivalence class [ ppuDataTransfer::ppuDataPut1_val#0 ]
Added variable ppuDataFill::ppuDataPrepare1_$0 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$0 ]
Added variable ppuDataFill::ppuDataPrepare1_$1 to live range equivalence class [ ppuDataFill::ppuDataPrepare1_$1 ]
Complete equivalence classes
[ vblank::$7 vblank::$5 ]
[ vblank::$12 vblank::$10 ]
[ vblank::s#2 vblank::s#1 ]
[ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ]
[ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ]
[ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ]
[ main::initNES1_i#2 main::initNES1_i#1 ]
[ main::s#2 main::s#1 ]
[ readJoy1::i#2 readJoy1::i#1 ]
[ readJoy1::joy#2 readJoy1::joy#1 ]
[ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
[ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
[ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
[ ppuDataFill::size#3 ]
[ ppuDataFill::val#4 ]
[ ppuDataFill::i#2 ppuDataFill::i#1 ]
[ y_sin_idx ]
[ x_sin_idx ]
[ x_sin_idx_2 ]
[ readJoy1::return#2 ]
[ vblank::joy#0 ]
[ vblank::$28 ]
[ vblank::$14 ]
[ main::initNES1_waitForVBlank1_$0 ]
[ main::initNES1_waitForVBlank2_$0 ]
[ main::$7 ]
[ readJoy1::$1 ]
[ readJoy1::$2 ]
[ ppuDataTransfer::ppuDataPut1_val#0 ]
[ ppuDataFill::ppuDataPrepare1_$0 ]
[ ppuDataFill::ppuDataPrepare1_$1 ]
Allocated zp[1]:2 [ vblank::$7 vblank::$5 ]
Allocated zp[1]:3 [ vblank::$12 vblank::$10 ]
Allocated zp[1]:4 [ vblank::s#2 vblank::s#1 ]
Allocated zp[1]:5 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ]
Allocated zp[1]:6 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ]
Allocated zp[1]:7 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ]
Allocated zp[1]:8 [ main::initNES1_i#2 main::initNES1_i#1 ]
Allocated zp[1]:9 [ main::s#2 main::s#1 ]
Allocated zp[1]:10 [ readJoy1::i#2 readJoy1::i#1 ]
Allocated zp[1]:11 [ readJoy1::joy#2 readJoy1::joy#1 ]
Allocated zp[2]:12 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
Allocated zp[2]:14 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
Allocated zp[2]:16 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ]
Allocated zp[2]:18 [ ppuDataFill::size#3 ]
Allocated zp[1]:20 [ ppuDataFill::val#4 ]
Allocated zp[2]:21 [ ppuDataFill::i#2 ppuDataFill::i#1 ]
Allocated zp[1]:23 [ y_sin_idx ]
Allocated zp[1]:24 [ x_sin_idx ]
Allocated zp[1]:25 [ x_sin_idx_2 ]
Allocated zp[1]:26 [ readJoy1::return#2 ]
Allocated zp[1]:27 [ vblank::joy#0 ]
Allocated zp[1]:28 [ vblank::$28 ]
Allocated zp[1]:29 [ vblank::$14 ]
Allocated zp[1]:30 [ main::initNES1_waitForVBlank1_$0 ]
Allocated zp[1]:31 [ main::initNES1_waitForVBlank2_$0 ]
Allocated zp[1]:32 [ main::$7 ]
Allocated zp[1]:33 [ readJoy1::$1 ]
Allocated zp[1]:34 [ readJoy1::$2 ]
Allocated zp[1]:35 [ ppuDataTransfer::ppuDataPut1_val#0 ]
Allocated zp[1]:36 [ ppuDataFill::ppuDataPrepare1_$0 ]
Allocated zp[1]:37 [ ppuDataFill::ppuDataPrepare1_$1 ]

INITIAL ASM
Target platform is nes / MOS6502X
  // File Comments
// NES DXYCP using sprites
// Nintendo Entertainment System (NES
// https://en.wikipedia.org/wiki/Nintendo_Entertainment_System_(Model_NES-101)
// https://github.com/gregkrsak/first_nes
// Ricoh 2C02 - NES Picture Processing Unit (PPU)
// Ricoh RP2C02 (NTSC version) / RP2C07 (PAL version),
// https://en.wikipedia.org/wiki/Picture_Processing_Unit
// https://wiki.nesdev.com/w/index.php/PPU_registers
// http://nesdev.com/2C02%20technical%20reference.TXT
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-dxycp.nes", type="bin", segments="NesRom"]
.file [name="nes-dxycp.nes_hdr", type="bin", segments="Header"]
.file [name="nes-dxycp.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-dxycp.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const OFFSET_STRUCT_SPRITEDATA_TILE = 1
  .const OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
  .const OFFSET_STRUCT_SPRITEDATA_X = 3
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  // Index into the Y sine
  .label y_sin_idx = $17
  // Index into the X sine
  .label x_sin_idx = $18
  // Index into the small X sine
  .label x_sin_idx_2 = $19
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (volatile byte) y_sin_idx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z y_sin_idx
    // [2] (volatile byte) x_sin_idx ← (byte) $49 -- vbuz1=vbuc1 
    lda #$49
    sta.z x_sin_idx
    // [3] (volatile byte) x_sin_idx_2 ← (byte) $52 -- vbuz1=vbuc1 
    lda #$52
    sta.z x_sin_idx_2
    // [4] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [5] call main 
    // [45] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [6] return 
    rts
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    .label __5 = 2
    .label __7 = 2
    .label __10 = 3
    .label __12 = 3
    .label __14 = $1d
    .label __17 = 6
    .label __19 = 6
    .label __23 = 7
    .label __25 = 7
    .label __28 = $1c
    .label joy = $1b
    .label y_idx = 5
    .label x_idx = 6
    .label x_idx_2 = 7
    .label s = 4
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // [8] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    jmp ppuSpriteBufferDmaTransfer1
    // vblank::ppuSpriteBufferDmaTransfer1
  ppuSpriteBufferDmaTransfer1:
    // [9] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // [10] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const struct SpriteData*) SPRITE_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>SPRITE_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    // [11] phi from vblank::ppuSpriteBufferDmaTransfer1 to vblank::@14 [phi:vblank::ppuSpriteBufferDmaTransfer1->vblank::@14]
  __b14_from_ppuSpriteBufferDmaTransfer1:
    jmp __b14
    // vblank::@14
  __b14:
    // [12] call readJoy1 
    jsr readJoy1
    // [13] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2 -- vbuz1=vbuz2 
    lda.z readJoy1.joy
    sta.z readJoy1.return
    jmp __b15
    // vblank::@15
  __b15:
    // [14] (byte) vblank::joy#0 ← (byte) readJoy1::return#2 -- vbuz1=vbuz2 
    lda.z readJoy1.return
    sta.z joy
    // [15] if((byte) 0==(byte) vblank::joy#0) goto vblank::@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z joy
    beq __b1
    jmp __breturn
    // vblank::@return
  __breturn:
    // [16] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
    // vblank::@1
  __b1:
    // [17] (byte) vblank::y_idx#0 ← (volatile byte) y_sin_idx -- vbuz1=vbuz2 
    // Update sprite positions
    lda.z y_sin_idx
    sta.z y_idx
    // [18] (volatile byte) y_sin_idx ← ++ (volatile byte) y_sin_idx -- vbuz1=_inc_vbuz1 
    inc.z y_sin_idx
    // [19] if((volatile byte) x_sin_idx==(byte) $ee) goto vblank::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #$ee
    cmp.z x_sin_idx
    beq __b3_from___b1
    jmp __b2
    // vblank::@2
  __b2:
    // [20] (byte~) vblank::$5 ← (volatile byte) x_sin_idx + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x_sin_idx
    iny
    sty.z __5
    // [21] phi from vblank::@2 to vblank::@3 [phi:vblank::@2->vblank::@3]
  __b3_from___b2:
    // [21] phi (byte~) vblank::$7 = (byte~) vblank::$5 [phi:vblank::@2->vblank::@3#0] -- register_copy 
    jmp __b3
    // [21] phi from vblank::@1 to vblank::@3 [phi:vblank::@1->vblank::@3]
  __b3_from___b1:
    // [21] phi (byte~) vblank::$7 = (byte) 0 [phi:vblank::@1->vblank::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z __7
    jmp __b3
    // vblank::@3
  __b3:
    // [22] (volatile byte) x_sin_idx ← (byte~) vblank::$7 -- vbuz1=vbuz2 
    lda.z __7
    sta.z x_sin_idx
    // [23] (byte) vblank::x_idx#0 ← (volatile byte) x_sin_idx -- vbuz1=vbuz2 
    lda.z x_sin_idx
    sta.z x_idx
    // [24] if((volatile byte) x_sin_idx_2==(byte) $58) goto vblank::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda #$58
    cmp.z x_sin_idx_2
    beq __b5_from___b3
    jmp __b4
    // vblank::@4
  __b4:
    // [25] (byte~) vblank::$10 ← (volatile byte) x_sin_idx_2 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x_sin_idx_2
    iny
    sty.z __10
    // [26] phi from vblank::@4 to vblank::@5 [phi:vblank::@4->vblank::@5]
  __b5_from___b4:
    // [26] phi (byte~) vblank::$12 = (byte~) vblank::$10 [phi:vblank::@4->vblank::@5#0] -- register_copy 
    jmp __b5
    // [26] phi from vblank::@3 to vblank::@5 [phi:vblank::@3->vblank::@5]
  __b5_from___b3:
    // [26] phi (byte~) vblank::$12 = (byte) 0 [phi:vblank::@3->vblank::@5#0] -- vbuz1=vbuc1 
    lda #0
    sta.z __12
    jmp __b5
    // vblank::@5
  __b5:
    // [27] (volatile byte) x_sin_idx_2 ← (byte~) vblank::$12 -- vbuz1=vbuz2 
    lda.z __12
    sta.z x_sin_idx_2
    // [28] (byte) vblank::x_idx_2#0 ← (volatile byte) x_sin_idx_2 -- vbuz1=vbuz2 
    lda.z x_sin_idx_2
    sta.z x_idx_2
    // [29] phi from vblank::@5 to vblank::@6 [phi:vblank::@5->vblank::@6]
  __b6_from___b5:
    // [29] phi (byte) vblank::x_idx_2#2 = (byte) vblank::x_idx_2#0 [phi:vblank::@5->vblank::@6#0] -- register_copy 
    // [29] phi (byte) vblank::x_idx#2 = (byte) vblank::x_idx#0 [phi:vblank::@5->vblank::@6#1] -- register_copy 
    // [29] phi (byte) vblank::y_idx#2 = (byte) vblank::y_idx#0 [phi:vblank::@5->vblank::@6#2] -- register_copy 
    // [29] phi (byte) vblank::s#2 = (byte) 0 [phi:vblank::@5->vblank::@6#3] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    jmp __b6
    // vblank::@6
  __b6:
    // [30] if((byte) vblank::s#2<(byte) $40) goto vblank::@7 -- vbuz1_lt_vbuc1_then_la1 
    lda.z s
    cmp #$40
    bcc __b7
    jmp __breturn
    // vblank::@7
  __b7:
    // [31] (byte~) vblank::$28 ← (byte) vblank::s#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z s
    asl
    asl
    sta.z __28
    // [32] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) vblank::$28) ← *((const to_nomodify byte*) SINTABLE_240 + (byte) vblank::y_idx#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z y_idx
    lda SINTABLE_240,y
    ldy.z __28
    sta SPRITE_BUFFER,y
    // [33] (byte) vblank::y_idx#1 ← (byte) vblank::y_idx#2 - (byte) 4 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z y_idx
    axs #4
    stx.z y_idx
    // [34] (byte~) vblank::$14 ← *((const to_nomodify byte*) SINTABLE_184 + (byte) vblank::x_idx#2) + *((const to_nomodify byte*) SINTABLE_64 + (byte) vblank::x_idx_2#2) -- vbuz1=pbuc1_derefidx_vbuz2_plus_pbuc2_derefidx_vbuz3 
    ldy.z x_idx
    lda SINTABLE_184,y
    ldy.z x_idx_2
    clc
    adc SINTABLE_64,y
    sta.z __14
    // [35] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) vblank::$28) ← (byte~) vblank::$14 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __14
    ldy.z __28
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X,y
    // [36] if((byte) vblank::x_idx#2<(byte) 3) goto vblank::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x_idx
    cmp #3
    bcc __b8
    jmp __b9
    // vblank::@9
  __b9:
    // [37] (byte~) vblank::$17 ← (byte) vblank::x_idx#2 - (byte) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z __17
    axs #3
    stx.z __17
    // [38] phi from vblank::@8 vblank::@9 to vblank::@10 [phi:vblank::@8/vblank::@9->vblank::@10]
  __b10_from___b8:
  __b10_from___b9:
    // [38] phi (byte) vblank::x_idx#1 = (byte~) vblank::$19 [phi:vblank::@8/vblank::@9->vblank::@10#0] -- register_copy 
    jmp __b10
    // vblank::@10
  __b10:
    // [39] if((byte) vblank::x_idx_2#2>=(byte) $56) goto vblank::@11 -- vbuz1_ge_vbuc1_then_la1 
    lda.z x_idx_2
    cmp #$56
    bcs __b11
    jmp __b12
    // vblank::@12
  __b12:
    // [40] (byte~) vblank::$23 ← (byte) vblank::x_idx_2#2 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z __23
    axs #-[3]
    stx.z __23
    // [41] phi from vblank::@11 vblank::@12 to vblank::@13 [phi:vblank::@11/vblank::@12->vblank::@13]
  __b13_from___b11:
  __b13_from___b12:
    // [41] phi (byte) vblank::x_idx_2#1 = (byte~) vblank::$25 [phi:vblank::@11/vblank::@12->vblank::@13#0] -- register_copy 
    jmp __b13
    // vblank::@13
  __b13:
    // [42] (byte) vblank::s#1 ← ++ (byte) vblank::s#2 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [29] phi from vblank::@13 to vblank::@6 [phi:vblank::@13->vblank::@6]
  __b6_from___b13:
    // [29] phi (byte) vblank::x_idx_2#2 = (byte) vblank::x_idx_2#1 [phi:vblank::@13->vblank::@6#0] -- register_copy 
    // [29] phi (byte) vblank::x_idx#2 = (byte) vblank::x_idx#1 [phi:vblank::@13->vblank::@6#1] -- register_copy 
    // [29] phi (byte) vblank::y_idx#2 = (byte) vblank::y_idx#1 [phi:vblank::@13->vblank::@6#2] -- register_copy 
    // [29] phi (byte) vblank::s#2 = (byte) vblank::s#1 [phi:vblank::@13->vblank::@6#3] -- register_copy 
    jmp __b6
    // vblank::@11
  __b11:
    // [43] (byte~) vblank::$25 ← (byte) vblank::x_idx_2#2 - (byte) $56 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z __25
    axs #$56
    stx.z __25
    jmp __b13_from___b11
    // vblank::@8
  __b8:
    // [44] (byte~) vblank::$19 ← (byte) vblank::x_idx#2 + (byte) $ec -- vbuz1=vbuz1_plus_vbuc1 
    lax.z __19
    axs #-[$ec]
    stx.z __19
    jmp __b10_from___b8
}
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    .label __7 = $20
    .label initNES1_waitForVBlank1___0 = $1e
    .label initNES1_waitForVBlank2___0 = $1f
    .label initNES1_i = 8
    .label s = 9
    jmp initNES1
    // main::initNES1
  initNES1:
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    jmp initNES1_disableVideoOutput1
    // main::initNES1_disableVideoOutput1
  initNES1_disableVideoOutput1:
    // [47] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [48] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp initNES1_disableAudioOutput1
    // main::initNES1_disableAudioOutput1
  initNES1_disableAudioOutput1:
    // [49] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp initNES1_clearVBlankFlag1
    // main::initNES1_clearVBlankFlag1
  initNES1_clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [52] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
  initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
    jmp initNES1_waitForVBlank1
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    jmp initNES1_waitForVBlank1___b1
    // main::initNES1_waitForVBlank1_@1
  initNES1_waitForVBlank1___b1:
    // [53] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    sta.z initNES1_waitForVBlank1___0
    // [54] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z initNES1_waitForVBlank1___0
    beq initNES1_waitForVBlank1___b1
    // [55] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1_waitForVBlank1___b1:
    // [55] phi (byte) main::initNES1_i#2 = (byte) 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z initNES1_i
    jmp initNES1___b1
    // [55] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1___b1:
    // [55] phi (byte) main::initNES1_i#2 = (byte) main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    jmp initNES1___b1
    // main::initNES1_@1
  initNES1___b1:
    // [56] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY,y
    // [57] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$100,y
    // [58] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$200,y
    // [59] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$300,y
    // [60] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$400,y
    // [61] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$500,y
    // [62] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$600,y
    // [63] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z initNES1_i
    sta MEMORY+$700,y
    // [64] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2 -- vbuz1=_inc_vbuz1 
    inc.z initNES1_i
    // [65] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z initNES1_i
    bne initNES1___b1_from_initNES1___b1
    // [66] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
  initNES1_waitForVBlank2_from_initNES1___b1:
    jmp initNES1_waitForVBlank2
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    jmp initNES1_waitForVBlank2___b1
    // main::initNES1_waitForVBlank2_@1
  initNES1_waitForVBlank2___b1:
    // [67] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    sta.z initNES1_waitForVBlank2___0
    // [68] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z initNES1_waitForVBlank2___0
    beq initNES1_waitForVBlank2___b1
    jmp initNES1___b7
    // main::initNES1_@7
  initNES1___b7:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [70] phi from main::initNES1_@7 to main::@4 [phi:main::initNES1_@7->main::@4]
  __b4_from_initNES1___b7:
    jmp __b4
    // main::@4
  __b4:
    // [71] call ppuDataTransfer 
  // Transfer the palette
    // [96] phi from main::@4 to ppuDataTransfer [phi:main::@4->ppuDataTransfer]
  ppuDataTransfer_from___b4:
    jsr ppuDataTransfer
    // [72] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [73] call ppuDataFill 
  // Fill the PPU attribute table
    // [106] phi from main::@5 to ppuDataFill [phi:main::@5->ppuDataFill]
  ppuDataFill_from___b5:
    // [106] phi (byte) ppuDataFill::val#4 = (byte) '*' [phi:main::@5->ppuDataFill#0] -- vbuz1=vbuc1 
    lda #'*'
    sta.z ppuDataFill.val
    // [106] phi (word) ppuDataFill::size#3 = (word)(number) $20*(number) $1e [phi:main::@5->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$20*$1e
    sta.z ppuDataFill.size
    lda #>$20*$1e
    sta.z ppuDataFill.size+1
    // [106] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0 [phi:main::@5->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [74] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [75] call ppuDataFill 
    // [106] phi from main::@6 to ppuDataFill [phi:main::@6->ppuDataFill]
  ppuDataFill_from___b6:
    // [106] phi (byte) ppuDataFill::val#4 = (byte) 0 [phi:main::@6->ppuDataFill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ppuDataFill.val
    // [106] phi (word) ppuDataFill::size#3 = (byte) $40 [phi:main::@6->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [106] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 [phi:main::@6->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [76] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [76] phi (byte) main::s#2 = (byte) 0 [phi:main::@6->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    jmp __b1
  // Initialize Sprite Buffer with the SPRITE data
    // main::@1
  __b1:
    // [77] if((byte) main::s#2<(byte) $40) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z s
    cmp #$40
    bcc __b2
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [78] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [80] phi from main::@3 main::enableVideoOutput1 to main::@3 [phi:main::@3/main::enableVideoOutput1->main::@3]
  __b3_from___b3:
  __b3_from_enableVideoOutput1:
    jmp __b3
  // Infinite loop
    // main::@3
  __b3:
    jmp __b3_from___b3
    // main::@2
  __b2:
    // [81] (byte~) main::$7 ← (byte) main::s#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z s
    asl
    asl
    sta.z __7
    // [82] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) main::$7) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z __7
    sta SPRITE_BUFFER,y
    // [83] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_TILE + (byte~) main::$7) ← *((const byte*) MESSAGE + (byte) main::s#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z s
    lda MESSAGE,y
    ldy.z __7
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE,y
    // [84] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES + (byte~) main::$7) ← (byte) 2 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #2
    ldy.z __7
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES,y
    // [85] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) main::$7) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z __7
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X,y
    // [86] (byte) main::s#1 ← ++ (byte) main::s#2 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [76] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [76] phi (byte) main::s#2 = (byte) main::s#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // readJoy1
// Read Standard Controller #1
// Returns a byte representing the pushed buttons
// - bit 0: right
// - bit 1: left
// - bit 2: down
// - bit 3: up
// - bit 4: start
// - bit 5: select
// - bit 6: B
// - bit 7: A
readJoy1: {
    .label __1 = $21
    .label __2 = $22
    .label joy = $b
    .label i = $a
    .label return = $1a
    // [87] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [88] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [89] phi from readJoy1 to readJoy1::@1 [phi:readJoy1->readJoy1::@1]
  __b1_from_readJoy1:
    // [89] phi (byte) readJoy1::joy#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z joy
    // [89] phi (byte) readJoy1::i#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // readJoy1::@1
  __b1:
    // [90] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #8
    bcc __b2
    jmp __breturn
    // readJoy1::@return
  __breturn:
    // [91] return 
    rts
    // readJoy1::@2
  __b2:
    // [92] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z joy
    asl
    sta.z __1
    // [93] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuz1=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    sta.z __2
    // [94] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __1
    ora.z __2
    sta.z joy
    // [95] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [89] phi from readJoy1::@2 to readJoy1::@1 [phi:readJoy1::@2->readJoy1::@1]
  __b1_from___b2:
    // [89] phi (byte) readJoy1::joy#2 = (byte) readJoy1::joy#1 [phi:readJoy1::@2->readJoy1::@1#0] -- register_copy 
    // [89] phi (byte) readJoy1::i#2 = (byte) readJoy1::i#1 [phi:readJoy1::@2->readJoy1::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - ppuData : Pointer in the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    .label ppuDataPut1_val = $23
    // Transfer to PPU
    .label cpuSrc = $e
    .label i = $c
    jmp ppuDataPrepare1
    // ppuDataTransfer::ppuDataPrepare1
  ppuDataPrepare1:
    // [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [98] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [99] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
  __b1_from_ppuDataPrepare1:
    // [99] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [99] phi (word) ppuDataTransfer::i#2 = (word) 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // ppuDataTransfer::@1
  __b1:
    // [100] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    jmp __breturn
    // ppuDataTransfer::@return
  __breturn:
    // [101] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // [102] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (cpuSrc),y
    sta.z ppuDataPut1_val
    jmp ppuDataPut1
    // ppuDataTransfer::ppuDataPut1
  ppuDataPut1:
    // [103] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPut1_val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataTransfer::@3
  __b3:
    // [104] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // [105] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [99] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
  __b1_from___b3:
    // [99] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*) ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [99] phi (word) ppuDataTransfer::i#2 = (word) ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte zp($14) val, word zp($12) size)
ppuDataFill: {
    .label ppuDataPrepare1___0 = $24
    .label ppuDataPrepare1___1 = $25
    .label ppuDataPrepare1_ppuData = $10
    .label i = $15
    .label size = $12
    .label val = $14
    jmp ppuDataPrepare1
    // ppuDataFill::ppuDataPrepare1
  ppuDataPrepare1:
    // [107] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuz1=_hi_pvoz2 
    lda.z ppuDataPrepare1_ppuData+1
    sta.z ppuDataPrepare1___0
    // [108] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [109] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuz1=_lo_pvoz2 
    lda.z ppuDataPrepare1_ppuData
    sta.z ppuDataPrepare1___1
    // [110] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuz1 
    lda.z ppuDataPrepare1___1
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [111] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
  __b1_from_ppuDataPrepare1:
    // [111] phi (word) ppuDataFill::i#2 = (word) 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // [112] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    jmp __breturn
    // ppuDataFill::@return
  __breturn:
    // [113] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // [114] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#4 -- _deref_pbuc1=vbuz1 
    lda.z val
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataFill::@2
  __b2:
    // [115] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [111] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
  __b1_from___b2:
    // [111] phi (word) ppuDataFill::i#2 = (word) ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // The DXYCP message  0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
  MESSAGE: .text "rex-of-camelot-presents-a-dxycp-on-nintendo-entertainment-system"
  // Color Palette
  PALETTE: .byte 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $f, $30, 8, 1, $f, $18, 8, 1, $30, $37, $1a, $f, $f, $f, $f
  // Sinus Table (0-239)
SINTABLE_240:
.fill $100, round(115.5+107.5*sin(2*PI*i/256))

  // Sinus Table (0-63)
SINTABLE_64:
.fill 89, round(52.5+52.5*sin(2*PI*i/89))

  // Sinus Table (0-183)
SINTABLE_184:
.fill 239, round(71.5+71.5*sin(2*PI*i/239))

.segment Tiles
TILES:
.var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }

.segment GameRam
  .align $100
  SPRITE_BUFFER: .fill 4*$100, 0
.segment Vectors
  VECTORS: .word vblank, main, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (volatile byte) y_sin_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) x_sin_idx ← (byte) $49 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (volatile byte) x_sin_idx_2 ← (byte) $52 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 [ y_sin_idx x_sin_idx x_sin_idx_2 ] (  [ y_sin_idx x_sin_idx x_sin_idx_2 ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 [ y_sin_idx x_sin_idx x_sin_idx_2 ] (  [ y_sin_idx x_sin_idx x_sin_idx_2 ] { }  ) always clobbers reg byte a 
Statement [9] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 [ y_sin_idx x_sin_idx x_sin_idx_2 ] (  [ y_sin_idx x_sin_idx x_sin_idx_2 ] { }  ) always clobbers reg byte a 
Statement [10] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const struct SpriteData*) SPRITE_BUFFER [ y_sin_idx x_sin_idx x_sin_idx_2 ] (  [ y_sin_idx x_sin_idx x_sin_idx_2 ] { }  ) always clobbers reg byte a 
Statement [16] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [19] if((volatile byte) x_sin_idx==(byte) $ee) goto vblank::@3 [ x_sin_idx x_sin_idx_2 vblank::y_idx#0 ] (  [ x_sin_idx x_sin_idx_2 vblank::y_idx#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ]
Statement [24] if((volatile byte) x_sin_idx_2==(byte) $58) goto vblank::@5 [ x_sin_idx_2 vblank::y_idx#0 vblank::x_idx#0 ] (  [ x_sin_idx_2 vblank::y_idx#0 vblank::x_idx#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ]
Statement [31] (byte~) vblank::$28 ← (byte) vblank::s#2 << (byte) 2 [ vblank::s#2 vblank::y_idx#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::$28 ] (  [ vblank::s#2 vblank::y_idx#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::$28 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ vblank::s#2 vblank::s#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ]
Statement [32] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) vblank::$28) ← *((const to_nomodify byte*) SINTABLE_240 + (byte) vblank::y_idx#2) [ vblank::s#2 vblank::y_idx#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::$28 ] (  [ vblank::s#2 vblank::y_idx#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::$28 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:28 [ vblank::$28 ]
Statement [33] (byte) vblank::y_idx#1 ← (byte) vblank::y_idx#2 - (byte) 4 [ vblank::s#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$28 ] (  [ vblank::s#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$28 ] { }  ) always clobbers reg byte a 
Statement [34] (byte~) vblank::$14 ← *((const to_nomodify byte*) SINTABLE_184 + (byte) vblank::x_idx#2) + *((const to_nomodify byte*) SINTABLE_64 + (byte) vblank::x_idx_2#2) [ vblank::s#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$28 vblank::$14 ] (  [ vblank::s#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$28 vblank::$14 ] { }  ) always clobbers reg byte a 
Statement [37] (byte~) vblank::$17 ← (byte) vblank::x_idx#2 - (byte) 3 [ vblank::s#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$17 ] (  [ vblank::s#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$17 ] { }  ) always clobbers reg byte a 
Statement [40] (byte~) vblank::$23 ← (byte) vblank::x_idx_2#2 + (byte) 3 [ vblank::s#2 vblank::y_idx#1 vblank::x_idx#1 vblank::$23 ] (  [ vblank::s#2 vblank::y_idx#1 vblank::x_idx#1 vblank::$23 ] { }  ) always clobbers reg byte a 
Statement [43] (byte~) vblank::$25 ← (byte) vblank::x_idx_2#2 - (byte) $56 [ vblank::s#2 vblank::y_idx#1 vblank::x_idx#1 vblank::$25 ] (  [ vblank::s#2 vblank::y_idx#1 vblank::x_idx#1 vblank::$25 ] { }  ) always clobbers reg byte a 
Statement [44] (byte~) vblank::$19 ← (byte) vblank::x_idx#2 + (byte) $ec [ vblank::s#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$19 ] (  [ vblank::s#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$19 ] { }  ) always clobbers reg byte a 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [47] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [48] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [49] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [53] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank1_$0 ] (  [ main::initNES1_waitForVBlank1_$0 ] { }  main:5 [ main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [56] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::initNES1_i#2 main::initNES1_i#1 ]
Statement [57] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [58] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [59] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [60] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [61] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [62] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [63] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [67] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank2_$0 ] (  [ main::initNES1_waitForVBlank2_$0 ] { }  main:5 [ main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [78] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [81] (byte~) main::$7 ← (byte) main::s#2 << (byte) 2 [ main::s#2 main::$7 ] (  [ main::s#2 main::$7 ] { }  main:5 [ main::s#2 main::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ main::s#2 main::s#1 ]
Statement [82] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) main::$7) ← (byte) 0 [ main::s#2 main::$7 ] (  [ main::s#2 main::$7 ] { }  main:5 [ main::s#2 main::$7 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ main::$7 ]
Statement [83] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_TILE + (byte~) main::$7) ← *((const byte*) MESSAGE + (byte) main::s#2) [ main::s#2 main::$7 ] (  [ main::s#2 main::$7 ] { }  main:5 [ main::s#2 main::$7 ] { }  ) always clobbers reg byte a 
Statement [84] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES + (byte~) main::$7) ← (byte) 2 [ main::s#2 main::$7 ] (  [ main::s#2 main::$7 ] { }  main:5 [ main::s#2 main::$7 ] { }  ) always clobbers reg byte a 
Statement [85] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) main::$7) ← (byte) 0 [ main::s#2 ] (  [ main::s#2 ] { }  main:5 [ main::s#2 ] { }  ) always clobbers reg byte a 
Statement [87] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 [ ] ( readJoy1:12 [ y_sin_idx x_sin_idx x_sin_idx_2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [88] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 [ ] ( readJoy1:12 [ y_sin_idx x_sin_idx x_sin_idx_2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [92] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 [ readJoy1::i#2 readJoy1::$1 ] ( readJoy1:12 [ y_sin_idx x_sin_idx x_sin_idx_2 readJoy1::i#2 readJoy1::$1 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ readJoy1::i#2 readJoy1::i#1 ]
Statement [93] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] ( readJoy1:12 [ y_sin_idx x_sin_idx x_sin_idx_2 readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:33 [ readJoy1::$1 ]
Statement [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 [ ] ( ppuDataTransfer:71 [ ] { }  main:5::ppuDataTransfer:71 [ ] { }  ) always clobbers reg byte a 
Statement [98] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 [ ] ( ppuDataTransfer:71 [ ] { }  main:5::ppuDataTransfer:71 [ ] { }  ) always clobbers reg byte a 
Statement [100] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:71 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:5::ppuDataTransfer:71 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [102] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:71 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:5::ppuDataTransfer:71 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [112] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] ( ppuDataFill:73 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  main:5::ppuDataFill:73 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ppuDataFill:75 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  main:5::ppuDataFill:75 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ ppuDataFill::val#4 ]
Statement [1] (volatile byte) y_sin_idx ← (byte) 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (volatile byte) x_sin_idx ← (byte) $49 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] (volatile byte) x_sin_idx_2 ← (byte) $52 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 [ y_sin_idx x_sin_idx x_sin_idx_2 ] (  [ y_sin_idx x_sin_idx x_sin_idx_2 ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 [ y_sin_idx x_sin_idx x_sin_idx_2 ] (  [ y_sin_idx x_sin_idx x_sin_idx_2 ] { }  ) always clobbers reg byte a 
Statement [9] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 [ y_sin_idx x_sin_idx x_sin_idx_2 ] (  [ y_sin_idx x_sin_idx x_sin_idx_2 ] { }  ) always clobbers reg byte a 
Statement [10] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const struct SpriteData*) SPRITE_BUFFER [ y_sin_idx x_sin_idx x_sin_idx_2 ] (  [ y_sin_idx x_sin_idx x_sin_idx_2 ] { }  ) always clobbers reg byte a 
Statement [16] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [19] if((volatile byte) x_sin_idx==(byte) $ee) goto vblank::@3 [ x_sin_idx x_sin_idx_2 vblank::y_idx#0 ] (  [ x_sin_idx x_sin_idx_2 vblank::y_idx#0 ] { }  ) always clobbers reg byte a 
Statement [24] if((volatile byte) x_sin_idx_2==(byte) $58) goto vblank::@5 [ x_sin_idx_2 vblank::y_idx#0 vblank::x_idx#0 ] (  [ x_sin_idx_2 vblank::y_idx#0 vblank::x_idx#0 ] { }  ) always clobbers reg byte a 
Statement [31] (byte~) vblank::$28 ← (byte) vblank::s#2 << (byte) 2 [ vblank::s#2 vblank::y_idx#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::$28 ] (  [ vblank::s#2 vblank::y_idx#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::$28 ] { }  ) always clobbers reg byte a 
Statement [32] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) vblank::$28) ← *((const to_nomodify byte*) SINTABLE_240 + (byte) vblank::y_idx#2) [ vblank::s#2 vblank::y_idx#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::$28 ] (  [ vblank::s#2 vblank::y_idx#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::$28 ] { }  ) always clobbers reg byte a 
Statement [33] (byte) vblank::y_idx#1 ← (byte) vblank::y_idx#2 - (byte) 4 [ vblank::s#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$28 ] (  [ vblank::s#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$28 ] { }  ) always clobbers reg byte a 
Statement [34] (byte~) vblank::$14 ← *((const to_nomodify byte*) SINTABLE_184 + (byte) vblank::x_idx#2) + *((const to_nomodify byte*) SINTABLE_64 + (byte) vblank::x_idx_2#2) [ vblank::s#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$28 vblank::$14 ] (  [ vblank::s#2 vblank::x_idx#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$28 vblank::$14 ] { }  ) always clobbers reg byte a 
Statement [37] (byte~) vblank::$17 ← (byte) vblank::x_idx#2 - (byte) 3 [ vblank::s#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$17 ] (  [ vblank::s#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$17 ] { }  ) always clobbers reg byte a 
Statement [40] (byte~) vblank::$23 ← (byte) vblank::x_idx_2#2 + (byte) 3 [ vblank::s#2 vblank::y_idx#1 vblank::x_idx#1 vblank::$23 ] (  [ vblank::s#2 vblank::y_idx#1 vblank::x_idx#1 vblank::$23 ] { }  ) always clobbers reg byte a 
Statement [43] (byte~) vblank::$25 ← (byte) vblank::x_idx_2#2 - (byte) $56 [ vblank::s#2 vblank::y_idx#1 vblank::x_idx#1 vblank::$25 ] (  [ vblank::s#2 vblank::y_idx#1 vblank::x_idx#1 vblank::$25 ] { }  ) always clobbers reg byte a 
Statement [44] (byte~) vblank::$19 ← (byte) vblank::x_idx#2 + (byte) $ec [ vblank::s#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$19 ] (  [ vblank::s#2 vblank::x_idx_2#2 vblank::y_idx#1 vblank::$19 ] { }  ) always clobbers reg byte a 
Statement asm { cld ldx#$ff txs  } always clobbers reg byte x 
Statement [47] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [48] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [49] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [53] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank1_$0 ] (  [ main::initNES1_waitForVBlank1_$0 ] { }  main:5 [ main::initNES1_waitForVBlank1_$0 ] { }  ) always clobbers reg byte a 
Statement [56] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [57] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [58] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [59] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [60] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [61] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [62] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [63] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 [ main::initNES1_i#2 ] (  [ main::initNES1_i#2 ] { }  main:5 [ main::initNES1_i#2 ] { }  ) always clobbers reg byte a 
Statement [67] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 [ main::initNES1_waitForVBlank2_$0 ] (  [ main::initNES1_waitForVBlank2_$0 ] { }  main:5 [ main::initNES1_waitForVBlank2_$0 ] { }  ) always clobbers reg byte a 
Statement asm { ldaPPU_PPUSTATUS  } always clobbers reg byte a 
Statement [78] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e [ ] (  [ ] { }  main:5 [ ] { }  ) always clobbers reg byte a 
Statement [81] (byte~) main::$7 ← (byte) main::s#2 << (byte) 2 [ main::s#2 main::$7 ] (  [ main::s#2 main::$7 ] { }  main:5 [ main::s#2 main::$7 ] { }  ) always clobbers reg byte a 
Statement [82] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) main::$7) ← (byte) 0 [ main::s#2 main::$7 ] (  [ main::s#2 main::$7 ] { }  main:5 [ main::s#2 main::$7 ] { }  ) always clobbers reg byte a 
Statement [83] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_TILE + (byte~) main::$7) ← *((const byte*) MESSAGE + (byte) main::s#2) [ main::s#2 main::$7 ] (  [ main::s#2 main::$7 ] { }  main:5 [ main::s#2 main::$7 ] { }  ) always clobbers reg byte a 
Statement [84] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES + (byte~) main::$7) ← (byte) 2 [ main::s#2 main::$7 ] (  [ main::s#2 main::$7 ] { }  main:5 [ main::s#2 main::$7 ] { }  ) always clobbers reg byte a 
Statement [85] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) main::$7) ← (byte) 0 [ main::s#2 ] (  [ main::s#2 ] { }  main:5 [ main::s#2 ] { }  ) always clobbers reg byte a 
Statement [87] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 [ ] ( readJoy1:12 [ y_sin_idx x_sin_idx x_sin_idx_2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [88] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 [ ] ( readJoy1:12 [ y_sin_idx x_sin_idx x_sin_idx_2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [92] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 [ readJoy1::i#2 readJoy1::$1 ] ( readJoy1:12 [ y_sin_idx x_sin_idx x_sin_idx_2 readJoy1::i#2 readJoy1::$1 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [93] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 [ readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] ( readJoy1:12 [ y_sin_idx x_sin_idx x_sin_idx_2 readJoy1::i#2 readJoy1::$1 readJoy1::$2 ] { { readJoy1::return#2 = readJoy1::joy#2 } }  ) always clobbers reg byte a 
Statement [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 [ ] ( ppuDataTransfer:71 [ ] { }  main:5::ppuDataTransfer:71 [ ] { }  ) always clobbers reg byte a 
Statement [98] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 [ ] ( ppuDataTransfer:71 [ ] { }  main:5::ppuDataTransfer:71 [ ] { }  ) always clobbers reg byte a 
Statement [100] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] ( ppuDataTransfer:71 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  main:5::ppuDataTransfer:71 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ] { }  ) always clobbers reg byte a 
Statement [102] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] ( ppuDataTransfer:71 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  main:5::ppuDataTransfer:71 [ ppuDataTransfer::i#2 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::ppuDataPut1_val#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [112] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] ( ppuDataFill:73 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  main:5::ppuDataFill:73 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ppuDataFill:75 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  main:5::ppuDataFill:75 [ ppuDataFill::size#3 ppuDataFill::val#4 ppuDataFill::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ vblank::$7 vblank::$5 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ vblank::$12 vblank::$10 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ vblank::s#2 vblank::s#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::initNES1_i#2 main::initNES1_i#1 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ main::s#2 main::s#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ readJoy1::i#2 readJoy1::i#1 ] : zp[1]:10 , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ readJoy1::joy#2 readJoy1::joy#1 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:12 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] : zp[2]:12 , 
Potential registers zp[2]:14 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] : zp[2]:16 , 
Potential registers zp[2]:18 [ ppuDataFill::size#3 ] : zp[2]:18 , 
Potential registers zp[1]:20 [ ppuDataFill::val#4 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ ppuDataFill::i#2 ppuDataFill::i#1 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ y_sin_idx ] : zp[1]:23 , 
Potential registers zp[1]:24 [ x_sin_idx ] : zp[1]:24 , 
Potential registers zp[1]:25 [ x_sin_idx_2 ] : zp[1]:25 , 
Potential registers zp[1]:26 [ readJoy1::return#2 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ vblank::joy#0 ] : zp[1]:27 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ vblank::$28 ] : zp[1]:28 , reg byte x , reg byte y , 
Potential registers zp[1]:29 [ vblank::$14 ] : zp[1]:29 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:30 [ main::initNES1_waitForVBlank1_$0 ] : zp[1]:30 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ main::initNES1_waitForVBlank2_$0 ] : zp[1]:31 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:32 [ main::$7 ] : zp[1]:32 , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ readJoy1::$1 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ readJoy1::$2 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:35 [ ppuDataTransfer::ppuDataPut1_val#0 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ ppuDataFill::ppuDataPrepare1_$0 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ ppuDataFill::ppuDataPrepare1_$1 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [ppuDataTransfer] 2,602.6: zp[2]:12 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] 2,002: zp[1]:35 [ ppuDataTransfer::ppuDataPut1_val#0 ] 1,751.75: zp[2]:14 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] 
Uplift Scope [ppuDataFill] 3,003: zp[2]:21 [ ppuDataFill::i#2 ppuDataFill::i#1 ] 202: zp[1]:36 [ ppuDataFill::ppuDataPrepare1_$0 ] 202: zp[1]:37 [ ppuDataFill::ppuDataPrepare1_$1 ] 111.22: zp[2]:18 [ ppuDataFill::size#3 ] 111.22: zp[1]:20 [ ppuDataFill::val#4 ] 67.33: zp[2]:16 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplift Scope [main] 274.14: zp[1]:9 [ main::s#2 main::s#1 ] 263.72: zp[1]:8 [ main::initNES1_i#2 main::initNES1_i#1 ] 202: zp[1]:30 [ main::initNES1_waitForVBlank1_$0 ] 202: zp[1]:31 [ main::initNES1_waitForVBlank2_$0 ] 126.25: zp[1]:32 [ main::$7 ] 
Uplift Scope [readJoy1] 262.6: zp[1]:10 [ readJoy1::i#2 readJoy1::i#1 ] 202: zp[1]:34 [ readJoy1::$2 ] 152: zp[1]:11 [ readJoy1::joy#2 readJoy1::joy#1 ] 101: zp[1]:33 [ readJoy1::$1 ] 4: zp[1]:26 [ readJoy1::return#2 ] 
Uplift Scope [vblank] 69.25: zp[1]:7 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ] 57.29: zp[1]:6 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ] 24.93: zp[1]:4 [ vblank::s#2 vblank::s#1 ] 22: zp[1]:29 [ vblank::$14 ] 10.92: zp[1]:5 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ] 8.25: zp[1]:28 [ vblank::$28 ] 8: zp[1]:2 [ vblank::$7 vblank::$5 ] 8: zp[1]:3 [ vblank::$12 vblank::$10 ] 4: zp[1]:27 [ vblank::joy#0 ] 
Uplift Scope [] 0.8: zp[1]:23 [ y_sin_idx ] 0.77: zp[1]:24 [ x_sin_idx ] 0.56: zp[1]:25 [ x_sin_idx_2 ] 
Uplift Scope [RICOH_2C02] 
Uplift Scope [RICOH_2A03] 
Uplift Scope [SpriteData] 
Uplift Scope [__start] 

Uplifting [ppuDataTransfer] best 6639 combination zp[2]:12 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ] zp[2]:14 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] 
Uplifting [ppuDataFill] best 6591 combination zp[2]:21 [ ppuDataFill::i#2 ppuDataFill::i#1 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ] reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ] zp[2]:18 [ ppuDataFill::size#3 ] reg byte x [ ppuDataFill::val#4 ] zp[2]:16 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] 
Uplifting [main] best 6011 combination reg byte x [ main::s#2 main::s#1 ] reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ] reg byte a [ main::initNES1_waitForVBlank1_$0 ] reg byte a [ main::initNES1_waitForVBlank2_$0 ] zp[1]:32 [ main::$7 ] 
Limited combination testing to 100 combinations of 432 possible.
Uplifting [readJoy1] best 5768 combination reg byte x [ readJoy1::i#2 readJoy1::i#1 ] reg byte a [ readJoy1::$2 ] reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ] zp[1]:33 [ readJoy1::$1 ] zp[1]:26 [ readJoy1::return#2 ] 
Limited combination testing to 100 combinations of 576 possible.
Uplifting [vblank] best 5708 combination zp[1]:7 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ] zp[1]:6 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ] zp[1]:4 [ vblank::s#2 vblank::s#1 ] reg byte a [ vblank::$14 ] zp[1]:5 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ] zp[1]:28 [ vblank::$28 ] zp[1]:2 [ vblank::$7 vblank::$5 ] zp[1]:3 [ vblank::$12 vblank::$10 ] zp[1]:27 [ vblank::joy#0 ] 
Limited combination testing to 100 combinations of 62208 possible.
Uplifting [] best 5708 combination zp[1]:23 [ y_sin_idx ] zp[1]:24 [ x_sin_idx ] zp[1]:25 [ x_sin_idx_2 ] 
Uplifting [RICOH_2C02] best 5708 combination 
Uplifting [RICOH_2A03] best 5708 combination 
Uplifting [SpriteData] best 5708 combination 
Uplifting [__start] best 5708 combination 
Attempting to uplift remaining variables inzp[1]:32 [ main::$7 ]
Uplifting [main] best 5578 combination reg byte y [ main::$7 ] 
Attempting to uplift remaining variables inzp[1]:33 [ readJoy1::$1 ]
Uplifting [readJoy1] best 5578 combination zp[1]:33 [ readJoy1::$1 ] 
Attempting to uplift remaining variables inzp[1]:7 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ]
Uplifting [vblank] best 5578 combination zp[1]:7 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ] 
Attempting to uplift remaining variables inzp[1]:6 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ]
Uplifting [vblank] best 5578 combination zp[1]:6 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ] 
Attempting to uplift remaining variables inzp[1]:4 [ vblank::s#2 vblank::s#1 ]
Uplifting [vblank] best 5578 combination zp[1]:4 [ vblank::s#2 vblank::s#1 ] 
Attempting to uplift remaining variables inzp[1]:5 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ]
Uplifting [vblank] best 5578 combination zp[1]:5 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ] 
Attempting to uplift remaining variables inzp[1]:28 [ vblank::$28 ]
Uplifting [vblank] best 5578 combination zp[1]:28 [ vblank::$28 ] 
Attempting to uplift remaining variables inzp[1]:2 [ vblank::$7 vblank::$5 ]
Uplifting [vblank] best 5569 combination reg byte x [ vblank::$7 vblank::$5 ] 
Attempting to uplift remaining variables inzp[1]:3 [ vblank::$12 vblank::$10 ]
Uplifting [vblank] best 5560 combination reg byte x [ vblank::$12 vblank::$10 ] 
Attempting to uplift remaining variables inzp[1]:26 [ readJoy1::return#2 ]
Uplifting [readJoy1] best 5554 combination reg byte a [ readJoy1::return#2 ] 
Attempting to uplift remaining variables inzp[1]:27 [ vblank::joy#0 ]
Uplifting [vblank] best 5548 combination reg byte a [ vblank::joy#0 ] 
Attempting to uplift remaining variables inzp[1]:23 [ y_sin_idx ]
Uplifting [] best 5548 combination zp[1]:23 [ y_sin_idx ] 
Attempting to uplift remaining variables inzp[1]:24 [ x_sin_idx ]
Uplifting [] best 5548 combination zp[1]:24 [ x_sin_idx ] 
Attempting to uplift remaining variables inzp[1]:25 [ x_sin_idx_2 ]
Uplifting [] best 5548 combination zp[1]:25 [ x_sin_idx_2 ] 
Coalescing zero page register [ zp[2]:16 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ] ] with [ zp[2]:12 [ ppuDataTransfer::i#2 ppuDataTransfer::i#1 ] ]
Coalescing zero page register [ zp[2]:18 [ ppuDataFill::size#3 ] ] with [ zp[2]:14 [ ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ] ]
Allocated (was zp[1]:4) zp[1]:2 [ vblank::s#2 vblank::s#1 ]
Allocated (was zp[1]:5) zp[1]:3 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ]
Allocated (was zp[1]:6) zp[1]:4 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ]
Allocated (was zp[1]:7) zp[1]:5 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ]
Allocated (was zp[2]:16) zp[2]:6 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
Allocated (was zp[2]:18) zp[2]:8 [ ppuDataFill::size#3 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
Allocated (was zp[2]:21) zp[2]:10 [ ppuDataFill::i#2 ppuDataFill::i#1 ]
Allocated (was zp[1]:23) zp[1]:12 [ y_sin_idx ]
Allocated (was zp[1]:24) zp[1]:13 [ x_sin_idx ]
Allocated (was zp[1]:25) zp[1]:14 [ x_sin_idx_2 ]
Allocated (was zp[1]:28) zp[1]:15 [ vblank::$28 ]
Allocated (was zp[1]:33) zp[1]:16 [ readJoy1::$1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// NES DXYCP using sprites
// Nintendo Entertainment System (NES
// https://en.wikipedia.org/wiki/Nintendo_Entertainment_System_(Model_NES-101)
// https://github.com/gregkrsak/first_nes
// Ricoh 2C02 - NES Picture Processing Unit (PPU)
// Ricoh RP2C02 (NTSC version) / RP2C07 (PAL version),
// https://en.wikipedia.org/wiki/Picture_Processing_Unit
// https://wiki.nesdev.com/w/index.php/PPU_registers
// http://nesdev.com/2C02%20technical%20reference.TXT
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-dxycp.nes", type="bin", segments="NesRom"]
.file [name="nes-dxycp.nes_hdr", type="bin", segments="Header"]
.file [name="nes-dxycp.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-dxycp.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const OFFSET_STRUCT_SPRITEDATA_TILE = 1
  .const OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
  .const OFFSET_STRUCT_SPRITEDATA_X = 3
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  // Index into the Y sine
  .label y_sin_idx = $c
  // Index into the X sine
  .label x_sin_idx = $d
  // Index into the small X sine
  .label x_sin_idx_2 = $e
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (volatile byte) y_sin_idx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z y_sin_idx
    // [2] (volatile byte) x_sin_idx ← (byte) $49 -- vbuz1=vbuc1 
    lda #$49
    sta.z x_sin_idx
    // [3] (volatile byte) x_sin_idx_2 ← (byte) $52 -- vbuz1=vbuc1 
    lda #$52
    sta.z x_sin_idx_2
    // [4] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [5] call main 
    // [45] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [6] return 
    rts
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    .label __17 = 4
    .label __19 = 4
    .label __23 = 5
    .label __25 = 5
    .label __28 = $f
    .label y_idx = 3
    .label x_idx = 4
    .label x_idx_2 = 5
    .label s = 2
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // [8] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    jmp ppuSpriteBufferDmaTransfer1
    // vblank::ppuSpriteBufferDmaTransfer1
  ppuSpriteBufferDmaTransfer1:
    // [9] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // [10] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const struct SpriteData*) SPRITE_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>SPRITE_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    // [11] phi from vblank::ppuSpriteBufferDmaTransfer1 to vblank::@14 [phi:vblank::ppuSpriteBufferDmaTransfer1->vblank::@14]
  __b14_from_ppuSpriteBufferDmaTransfer1:
    jmp __b14
    // vblank::@14
  __b14:
    // [12] call readJoy1 
    jsr readJoy1
    // [13] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2
    jmp __b15
    // vblank::@15
  __b15:
    // [14] (byte) vblank::joy#0 ← (byte) readJoy1::return#2
    // [15] if((byte) 0==(byte) vblank::joy#0) goto vblank::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    jmp __breturn
    // vblank::@return
  __breturn:
    // [16] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
    // vblank::@1
  __b1:
    // [17] (byte) vblank::y_idx#0 ← (volatile byte) y_sin_idx -- vbuz1=vbuz2 
    // Update sprite positions
    lda.z y_sin_idx
    sta.z y_idx
    // [18] (volatile byte) y_sin_idx ← ++ (volatile byte) y_sin_idx -- vbuz1=_inc_vbuz1 
    inc.z y_sin_idx
    // [19] if((volatile byte) x_sin_idx==(byte) $ee) goto vblank::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #$ee
    cmp.z x_sin_idx
    beq __b3_from___b1
    jmp __b2
    // vblank::@2
  __b2:
    // [20] (byte~) vblank::$5 ← (volatile byte) x_sin_idx + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x_sin_idx
    inx
    // [21] phi from vblank::@2 to vblank::@3 [phi:vblank::@2->vblank::@3]
  __b3_from___b2:
    // [21] phi (byte~) vblank::$7 = (byte~) vblank::$5 [phi:vblank::@2->vblank::@3#0] -- register_copy 
    jmp __b3
    // [21] phi from vblank::@1 to vblank::@3 [phi:vblank::@1->vblank::@3]
  __b3_from___b1:
    // [21] phi (byte~) vblank::$7 = (byte) 0 [phi:vblank::@1->vblank::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // vblank::@3
  __b3:
    // [22] (volatile byte) x_sin_idx ← (byte~) vblank::$7 -- vbuz1=vbuxx 
    stx.z x_sin_idx
    // [23] (byte) vblank::x_idx#0 ← (volatile byte) x_sin_idx -- vbuz1=vbuz2 
    lda.z x_sin_idx
    sta.z x_idx
    // [24] if((volatile byte) x_sin_idx_2==(byte) $58) goto vblank::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda #$58
    cmp.z x_sin_idx_2
    beq __b5_from___b3
    jmp __b4
    // vblank::@4
  __b4:
    // [25] (byte~) vblank::$10 ← (volatile byte) x_sin_idx_2 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x_sin_idx_2
    inx
    // [26] phi from vblank::@4 to vblank::@5 [phi:vblank::@4->vblank::@5]
  __b5_from___b4:
    // [26] phi (byte~) vblank::$12 = (byte~) vblank::$10 [phi:vblank::@4->vblank::@5#0] -- register_copy 
    jmp __b5
    // [26] phi from vblank::@3 to vblank::@5 [phi:vblank::@3->vblank::@5]
  __b5_from___b3:
    // [26] phi (byte~) vblank::$12 = (byte) 0 [phi:vblank::@3->vblank::@5#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b5
    // vblank::@5
  __b5:
    // [27] (volatile byte) x_sin_idx_2 ← (byte~) vblank::$12 -- vbuz1=vbuxx 
    stx.z x_sin_idx_2
    // [28] (byte) vblank::x_idx_2#0 ← (volatile byte) x_sin_idx_2 -- vbuz1=vbuz2 
    lda.z x_sin_idx_2
    sta.z x_idx_2
    // [29] phi from vblank::@5 to vblank::@6 [phi:vblank::@5->vblank::@6]
  __b6_from___b5:
    // [29] phi (byte) vblank::x_idx_2#2 = (byte) vblank::x_idx_2#0 [phi:vblank::@5->vblank::@6#0] -- register_copy 
    // [29] phi (byte) vblank::x_idx#2 = (byte) vblank::x_idx#0 [phi:vblank::@5->vblank::@6#1] -- register_copy 
    // [29] phi (byte) vblank::y_idx#2 = (byte) vblank::y_idx#0 [phi:vblank::@5->vblank::@6#2] -- register_copy 
    // [29] phi (byte) vblank::s#2 = (byte) 0 [phi:vblank::@5->vblank::@6#3] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    jmp __b6
    // vblank::@6
  __b6:
    // [30] if((byte) vblank::s#2<(byte) $40) goto vblank::@7 -- vbuz1_lt_vbuc1_then_la1 
    lda.z s
    cmp #$40
    bcc __b7
    jmp __breturn
    // vblank::@7
  __b7:
    // [31] (byte~) vblank::$28 ← (byte) vblank::s#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z s
    asl
    asl
    sta.z __28
    // [32] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) vblank::$28) ← *((const to_nomodify byte*) SINTABLE_240 + (byte) vblank::y_idx#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z y_idx
    lda SINTABLE_240,y
    ldy.z __28
    sta SPRITE_BUFFER,y
    // [33] (byte) vblank::y_idx#1 ← (byte) vblank::y_idx#2 - (byte) 4 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z y_idx
    axs #4
    stx.z y_idx
    // [34] (byte~) vblank::$14 ← *((const to_nomodify byte*) SINTABLE_184 + (byte) vblank::x_idx#2) + *((const to_nomodify byte*) SINTABLE_64 + (byte) vblank::x_idx_2#2) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc2_derefidx_vbuz2 
    ldy.z x_idx
    lda SINTABLE_184,y
    ldy.z x_idx_2
    clc
    adc SINTABLE_64,y
    // [35] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) vblank::$28) ← (byte~) vblank::$14 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z __28
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X,y
    // [36] if((byte) vblank::x_idx#2<(byte) 3) goto vblank::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x_idx
    cmp #3
    bcc __b8
    jmp __b9
    // vblank::@9
  __b9:
    // [37] (byte~) vblank::$17 ← (byte) vblank::x_idx#2 - (byte) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z __17
    axs #3
    stx.z __17
    // [38] phi from vblank::@8 vblank::@9 to vblank::@10 [phi:vblank::@8/vblank::@9->vblank::@10]
  __b10_from___b8:
  __b10_from___b9:
    // [38] phi (byte) vblank::x_idx#1 = (byte~) vblank::$19 [phi:vblank::@8/vblank::@9->vblank::@10#0] -- register_copy 
    jmp __b10
    // vblank::@10
  __b10:
    // [39] if((byte) vblank::x_idx_2#2>=(byte) $56) goto vblank::@11 -- vbuz1_ge_vbuc1_then_la1 
    lda.z x_idx_2
    cmp #$56
    bcs __b11
    jmp __b12
    // vblank::@12
  __b12:
    // [40] (byte~) vblank::$23 ← (byte) vblank::x_idx_2#2 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z __23
    axs #-[3]
    stx.z __23
    // [41] phi from vblank::@11 vblank::@12 to vblank::@13 [phi:vblank::@11/vblank::@12->vblank::@13]
  __b13_from___b11:
  __b13_from___b12:
    // [41] phi (byte) vblank::x_idx_2#1 = (byte~) vblank::$25 [phi:vblank::@11/vblank::@12->vblank::@13#0] -- register_copy 
    jmp __b13
    // vblank::@13
  __b13:
    // [42] (byte) vblank::s#1 ← ++ (byte) vblank::s#2 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [29] phi from vblank::@13 to vblank::@6 [phi:vblank::@13->vblank::@6]
  __b6_from___b13:
    // [29] phi (byte) vblank::x_idx_2#2 = (byte) vblank::x_idx_2#1 [phi:vblank::@13->vblank::@6#0] -- register_copy 
    // [29] phi (byte) vblank::x_idx#2 = (byte) vblank::x_idx#1 [phi:vblank::@13->vblank::@6#1] -- register_copy 
    // [29] phi (byte) vblank::y_idx#2 = (byte) vblank::y_idx#1 [phi:vblank::@13->vblank::@6#2] -- register_copy 
    // [29] phi (byte) vblank::s#2 = (byte) vblank::s#1 [phi:vblank::@13->vblank::@6#3] -- register_copy 
    jmp __b6
    // vblank::@11
  __b11:
    // [43] (byte~) vblank::$25 ← (byte) vblank::x_idx_2#2 - (byte) $56 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z __25
    axs #$56
    stx.z __25
    jmp __b13_from___b11
    // vblank::@8
  __b8:
    // [44] (byte~) vblank::$19 ← (byte) vblank::x_idx#2 + (byte) $ec -- vbuz1=vbuz1_plus_vbuc1 
    lax.z __19
    axs #-[$ec]
    stx.z __19
    jmp __b10_from___b8
}
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    jmp initNES1
    // main::initNES1
  initNES1:
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    jmp initNES1_disableVideoOutput1
    // main::initNES1_disableVideoOutput1
  initNES1_disableVideoOutput1:
    // [47] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // [48] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    jmp initNES1_disableAudioOutput1
    // main::initNES1_disableAudioOutput1
  initNES1_disableAudioOutput1:
    // [49] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    jmp initNES1_clearVBlankFlag1
    // main::initNES1_clearVBlankFlag1
  initNES1_clearVBlankFlag1:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [52] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
  initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
    jmp initNES1_waitForVBlank1
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    jmp initNES1_waitForVBlank1___b1
    // main::initNES1_waitForVBlank1_@1
  initNES1_waitForVBlank1___b1:
    // [53] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [54] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1___b1
    // [55] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1_waitForVBlank1___b1:
    // [55] phi (byte) main::initNES1_i#2 = (byte) 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp initNES1___b1
    // [55] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
  initNES1___b1_from_initNES1___b1:
    // [55] phi (byte) main::initNES1_i#2 = (byte) main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    jmp initNES1___b1
    // main::initNES1_@1
  initNES1___b1:
    // [56] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // [57] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$100,x
    // [58] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$200,x
    // [59] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$300,x
    // [60] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$400,x
    // [61] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$500,x
    // [62] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$600,x
    // [63] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY+$700,x
    // [64] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [65] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1_from_initNES1___b1
    // [66] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
  initNES1_waitForVBlank2_from_initNES1___b1:
    jmp initNES1_waitForVBlank2
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    jmp initNES1_waitForVBlank2___b1
    // main::initNES1_waitForVBlank2_@1
  initNES1_waitForVBlank2___b1:
    // [67] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // [68] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2___b1
    jmp initNES1___b7
    // main::initNES1_@7
  initNES1___b7:
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [70] phi from main::initNES1_@7 to main::@4 [phi:main::initNES1_@7->main::@4]
  __b4_from_initNES1___b7:
    jmp __b4
    // main::@4
  __b4:
    // [71] call ppuDataTransfer 
  // Transfer the palette
    // [96] phi from main::@4 to ppuDataTransfer [phi:main::@4->ppuDataTransfer]
  ppuDataTransfer_from___b4:
    jsr ppuDataTransfer
    // [72] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [73] call ppuDataFill 
  // Fill the PPU attribute table
    // [106] phi from main::@5 to ppuDataFill [phi:main::@5->ppuDataFill]
  ppuDataFill_from___b5:
    // [106] phi (byte) ppuDataFill::val#4 = (byte) '*' [phi:main::@5->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #'*'
    // [106] phi (word) ppuDataFill::size#3 = (word)(number) $20*(number) $1e [phi:main::@5->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$20*$1e
    sta.z ppuDataFill.size
    lda #>$20*$1e
    sta.z ppuDataFill.size+1
    // [106] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0 [phi:main::@5->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [74] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [75] call ppuDataFill 
    // [106] phi from main::@6 to ppuDataFill [phi:main::@6->ppuDataFill]
  ppuDataFill_from___b6:
    // [106] phi (byte) ppuDataFill::val#4 = (byte) 0 [phi:main::@6->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [106] phi (word) ppuDataFill::size#3 = (byte) $40 [phi:main::@6->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [106] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 [phi:main::@6->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [76] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [76] phi (byte) main::s#2 = (byte) 0 [phi:main::@6->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // Initialize Sprite Buffer with the SPRITE data
    // main::@1
  __b1:
    // [77] if((byte) main::s#2<(byte) $40) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$40
    bcc __b2
    jmp enableVideoOutput1
    // main::enableVideoOutput1
  enableVideoOutput1:
    // [78] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [80] phi from main::@3 main::enableVideoOutput1 to main::@3 [phi:main::@3/main::enableVideoOutput1->main::@3]
  __b3_from___b3:
  __b3_from_enableVideoOutput1:
    jmp __b3
  // Infinite loop
    // main::@3
  __b3:
    jmp __b3_from___b3
    // main::@2
  __b2:
    // [81] (byte~) main::$7 ← (byte) main::s#2 << (byte) 2 -- vbuyy=vbuxx_rol_2 
    txa
    asl
    asl
    tay
    // [82] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) main::$7) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SPRITE_BUFFER,y
    // [83] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_TILE + (byte~) main::$7) ← *((const byte*) MESSAGE + (byte) main::s#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE,y
    // [84] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES + (byte~) main::$7) ← (byte) 2 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #2
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES,y
    // [85] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) main::$7) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X,y
    // [86] (byte) main::s#1 ← ++ (byte) main::s#2 -- vbuxx=_inc_vbuxx 
    inx
    // [76] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [76] phi (byte) main::s#2 = (byte) main::s#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // readJoy1
// Read Standard Controller #1
// Returns a byte representing the pushed buttons
// - bit 0: right
// - bit 1: left
// - bit 2: down
// - bit 3: up
// - bit 4: start
// - bit 5: select
// - bit 6: B
// - bit 7: A
readJoy1: {
    .label __1 = $10
    // [87] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [88] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [89] phi from readJoy1 to readJoy1::@1 [phi:readJoy1->readJoy1::@1]
  __b1_from_readJoy1:
    // [89] phi (byte) readJoy1::joy#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#0] -- vbuaa=vbuc1 
    lda #0
    // [89] phi (byte) readJoy1::i#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // readJoy1::@1
  __b1:
    // [90] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc __b2
    jmp __breturn
    // readJoy1::@return
  __breturn:
    // [91] return 
    rts
    // readJoy1::@2
  __b2:
    // [92] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 -- vbuz1=vbuaa_rol_1 
    asl
    sta.z __1
    // [93] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [94] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // [95] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [89] phi from readJoy1::@2 to readJoy1::@1 [phi:readJoy1::@2->readJoy1::@1]
  __b1_from___b2:
    // [89] phi (byte) readJoy1::joy#2 = (byte) readJoy1::joy#1 [phi:readJoy1::@2->readJoy1::@1#0] -- register_copy 
    // [89] phi (byte) readJoy1::i#2 = (byte) readJoy1::i#1 [phi:readJoy1::@2->readJoy1::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - ppuData : Pointer in the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    // Transfer to PPU
    .label cpuSrc = 8
    .label i = 6
    jmp ppuDataPrepare1
    // ppuDataTransfer::ppuDataPrepare1
  ppuDataPrepare1:
    // [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [98] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [99] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
  __b1_from_ppuDataPrepare1:
    // [99] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [99] phi (word) ppuDataTransfer::i#2 = (word) 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
    // ppuDataTransfer::@1
  __b1:
    // [100] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    jmp __breturn
    // ppuDataTransfer::@return
  __breturn:
    // [101] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // [102] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    jmp ppuDataPut1
    // ppuDataTransfer::ppuDataPut1
  ppuDataPut1:
    // [103] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b3
    // ppuDataTransfer::@3
  __b3:
    // [104] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // [105] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [99] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
  __b1_from___b3:
    // [99] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*) ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [99] phi (word) ppuDataTransfer::i#2 = (word) ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte register(X) val, word zp(8) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = 6
    .label i = $a
    .label size = 8
    jmp ppuDataPrepare1
    // ppuDataFill::ppuDataPrepare1
  ppuDataPrepare1:
    // [107] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // [108] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [109] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // [110] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [111] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
  __b1_from_ppuDataPrepare1:
    // [111] phi (word) ppuDataFill::i#2 = (word) 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    lda #>0
    sta.z i+1
    jmp __b1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // [112] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    jmp __breturn
    // ppuDataFill::@return
  __breturn:
    // [113] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // [114] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#4 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    jmp __b2
    // ppuDataFill::@2
  __b2:
    // [115] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [111] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
  __b1_from___b2:
    // [111] phi (word) ppuDataFill::i#2 = (word) ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // The DXYCP message  0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
  MESSAGE: .text "rex-of-camelot-presents-a-dxycp-on-nintendo-entertainment-system"
  // Color Palette
  PALETTE: .byte 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $f, $30, 8, 1, $f, $18, 8, 1, $30, $37, $1a, $f, $f, $f, $f
  // Sinus Table (0-239)
SINTABLE_240:
.fill $100, round(115.5+107.5*sin(2*PI*i/256))

  // Sinus Table (0-63)
SINTABLE_64:
.fill 89, round(52.5+52.5*sin(2*PI*i/89))

  // Sinus Table (0-183)
SINTABLE_184:
.fill 239, round(71.5+71.5*sin(2*PI*i/239))

.segment Tiles
TILES:
.var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }

.segment GameRam
  .align $100
  SPRITE_BUFFER: .fill 4*$100, 0
.segment Vectors
  VECTORS: .word vblank, main, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuSpriteBufferDmaTransfer1
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp initNES1
Removing instruction jmp initNES1_disableVideoOutput1
Removing instruction jmp initNES1_disableAudioOutput1
Removing instruction jmp initNES1_clearVBlankFlag1
Removing instruction jmp initNES1_waitForVBlank1
Removing instruction jmp initNES1_waitForVBlank1___b1
Removing instruction jmp initNES1___b1
Removing instruction jmp initNES1_waitForVBlank2
Removing instruction jmp initNES1_waitForVBlank2___b1
Removing instruction jmp initNES1___b7
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp enableVideoOutput1
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp ppuDataPut1
Removing instruction jmp __b3
Removing instruction jmp ppuDataPrepare1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Replacing instruction lda.z x_sin_idx with TXA
Replacing instruction lda.z x_sin_idx_2 with TXA
Removing instruction lda #0
Removing instruction lda #$40
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Replacing instruction ldx #0 with TAX
Removing instruction lda #>0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b13_from___b11 with __b13
Replacing label __b10_from___b8 with __b10
Replacing label initNES1_waitForVBlank1___b1 with initNES1_waitForVBlank1
Replacing label initNES1___b1_from_initNES1___b1 with initNES1___b1
Replacing label initNES1_waitForVBlank2___b1 with initNES1_waitForVBlank2
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction __b14_from_ppuSpriteBufferDmaTransfer1:
Removing instruction __b10_from___b8:
Removing instruction __b10_from___b9:
Removing instruction __b13_from___b11:
Removing instruction __b13_from___b12:
Removing instruction initNES1_waitForVBlank1_from_initNES1_clearVBlankFlag1:
Removing instruction initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b1_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2_from_initNES1___b1:
Removing instruction initNES1_waitForVBlank2___b1:
Removing instruction __b4_from_initNES1___b7:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b5:
Removing instruction ppuDataFill_from___b6:
Removing instruction __b3_from_enableVideoOutput1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction ppuSpriteBufferDmaTransfer1:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b4:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b5:
Removing instruction __b9:
Removing instruction __b12:
Removing instruction __b6_from___b13:
Removing instruction initNES1:
Removing instruction initNES1_disableVideoOutput1:
Removing instruction initNES1_disableAudioOutput1:
Removing instruction initNES1_clearVBlankFlag1:
Removing instruction initNES1___b1_from_initNES1_waitForVBlank1___b1:
Removing instruction initNES1___b7:
Removing instruction __b4:
Removing instruction ppuDataTransfer_from___b4:
Removing instruction __b5:
Removing instruction ppuDataFill_from___b5:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction enableVideoOutput1:
Removing instruction __b3:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_readJoy1:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction ppuDataPrepare1:
Removing instruction __b1_from_ppuDataPrepare1:
Removing instruction __breturn:
Removing instruction ppuDataPut1:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction ppuDataPrepare1:
Removing instruction __b1_from_ppuDataPrepare1:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label __b3_from___b1 to __b2
Relabelling long label __b5_from___b3 to __b4
Relabelling long label __b3_from___b3 to __b3
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp initNES1___b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(const struct RICOH_2A03*) APU = (struct RICOH_2A03*) 16384
(const nomodify byte*) FR_COUNTER = (byte*) 16407
(const nomodify byte*) MEMORY = (byte*) 0
(const byte*) MESSAGE[(number) $40]  = (byte*) "rex-of-camelot-presents-a-dxycp-on-nintendo-entertainment-system"z
(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = (byte) $10
(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1 = (byte) $16
(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA = (byte) $14
(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR = (byte) 3
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR = (byte) 6
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA = (byte) 7
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK = (byte) 1
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = (byte) 5
(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = (byte) 2
(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = (byte) 2
(const byte) OFFSET_STRUCT_SPRITEDATA_TILE = (byte) 1
(const byte) OFFSET_STRUCT_SPRITEDATA_X = (byte) 3
(const byte*) PALETTE[(number) $20]  = { (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $21, (byte) $f, (byte) $30, (byte) 1, (byte) $f, (byte) $30, (byte) 8, (byte) 1, (byte) $f, (byte) $18, (byte) 8, (byte) 1, (byte) $30, (byte) $37, (byte) $1a, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const struct RICOH_2C02*) PPU = (struct RICOH_2C02*) 8192
(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 = (byte*) 9152
(const nomodify byte*) PPU_NAME_TABLE_0 = (byte*) 8192
(const nomodify byte*) PPU_PALETTE = (byte*) 16128
(const nomodify to_volatile byte*) PPU_PPUSTATUS = (byte*) 8194
(byte) RICOH_2A03::DMC_FREQ
(byte) RICOH_2A03::DMC_LEN
(byte) RICOH_2A03::DMC_RAW
(byte) RICOH_2A03::DMC_START
(byte) RICOH_2A03::JOY1
(byte) RICOH_2A03::JOY2
(byte) RICOH_2A03::NOISE_HI
(byte) RICOH_2A03::NOISE_LO
(byte) RICOH_2A03::NOISE_VOL
(byte) RICOH_2A03::OAMDMA
(byte) RICOH_2A03::SND_CHN
(byte) RICOH_2A03::SQ1_HI
(byte) RICOH_2A03::SQ1_LO
(byte) RICOH_2A03::SQ1_SWEEP
(byte) RICOH_2A03::SQ1_VOL
(byte) RICOH_2A03::SQ2_HI
(byte) RICOH_2A03::SQ2_LO
(byte) RICOH_2A03::SQ2_SWEEP
(byte) RICOH_2A03::SQ2_VOL
(byte) RICOH_2A03::TRI_HI
(byte) RICOH_2A03::TRI_LINEAR
(byte) RICOH_2A03::TRI_LO
(byte) RICOH_2A03::UNUSED1
(byte) RICOH_2A03::UNUSED2
(byte) RICOH_2C02::OAMADDR
(byte) RICOH_2C02::OAMDATA
(byte) RICOH_2C02::PPUADDR
(byte) RICOH_2C02::PPUCTRL
(byte) RICOH_2C02::PPUDATA
(byte) RICOH_2C02::PPUMASK
(byte) RICOH_2C02::PPUSCROLL
(volatile byte) RICOH_2C02::PPUSTATUS loadstore
(const to_nomodify byte*) SINTABLE_184[(number) $ef]  = kickasm {{ .fill 239, round(71.5+71.5*sin(2*PI*i/239))
 }}
(const to_nomodify byte*) SINTABLE_240[(number) $100]  = kickasm {{ .fill $100, round(115.5+107.5*sin(2*PI*i/256))
 }}
(const to_nomodify byte*) SINTABLE_64[(number) $59]  = kickasm {{ .fill 89, round(52.5+52.5*sin(2*PI*i/89))
 }}
(const byte) SIZEOF_BYTE = (byte) 1
(const struct SpriteData*) SPRITE_BUFFER[(number) $100]  = { fill( $100, 0) }
(byte) SpriteData::attributes
(byte) SpriteData::tile
(byte) SpriteData::x
(byte) SpriteData::y
(const byte*) TILES[]  = kickasm {{ .var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }
 }}
(const to_nomodify void()**) VECTORS[]  = { &interrupt(HARDWARE_STACK)(void()) vblank(), &(void()) main(), (void()*) 0 }
(void()) __start()
(label) __start::@1
(label) __start::@return
(label) __start::__init1
(void()) main()
(byte~) main::$7 reg byte y 126.25
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::enableVideoOutput1
(label) main::initNES1
(label) main::initNES1_@1
(label) main::initNES1_@7
(label) main::initNES1_clearVBlankFlag1
(label) main::initNES1_disableAudioOutput1
(label) main::initNES1_disableVideoOutput1
(byte) main::initNES1_i
(byte) main::initNES1_i#1 reg byte x 151.5
(byte) main::initNES1_i#2 reg byte x 112.22222222222223
(label) main::initNES1_waitForVBlank1
(byte~) main::initNES1_waitForVBlank1_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank1_@1
(label) main::initNES1_waitForVBlank2
(byte~) main::initNES1_waitForVBlank2_$0 reg byte a 202.0
(label) main::initNES1_waitForVBlank2_@1
(byte) main::s
(byte) main::s#1 reg byte x 202.0
(byte) main::s#2 reg byte x 72.14285714285714
(void()) ppuDataFill((nomodify void*) ppuDataFill::ppuData , (byte) ppuDataFill::val , (word) ppuDataFill::size)
(label) ppuDataFill::@1
(label) ppuDataFill::@2
(label) ppuDataFill::@return
(word) ppuDataFill::i
(word) ppuDataFill::i#1 i zp[2]:10 2002.0
(word) ppuDataFill::i#2 i zp[2]:10 1001.0
(nomodify void*) ppuDataFill::ppuData
(label) ppuDataFill::ppuDataPrepare1
(byte~) ppuDataFill::ppuDataPrepare1_$0 reg byte a 202.0
(byte~) ppuDataFill::ppuDataPrepare1_$1 reg byte a 202.0
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData
(nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataPrepare1_ppuData zp[2]:6 67.33333333333333
(label) ppuDataFill::ppuDataPut1
(byte) ppuDataFill::ppuDataPut1_val
(word) ppuDataFill::size
(word) ppuDataFill::size#3 size zp[2]:8 111.22222222222223
(byte) ppuDataFill::val
(byte) ppuDataFill::val#4 reg byte x 111.22222222222223
(void()) ppuDataTransfer((nomodify void*) ppuDataTransfer::ppuData , (nomodify void*) ppuDataTransfer::cpuData , (word) ppuDataTransfer::size)
(label) ppuDataTransfer::@1
(label) ppuDataTransfer::@2
(label) ppuDataTransfer::@3
(label) ppuDataTransfer::@return
(nomodify void*) ppuDataTransfer::cpuData
(const nomodify void*) ppuDataTransfer::cpuData#0 cpuData = (void*)(const byte*) PALETTE
(byte*) ppuDataTransfer::cpuSrc
(byte*) ppuDataTransfer::cpuSrc#1 cpuSrc zp[2]:8 1001.0
(byte*) ppuDataTransfer::cpuSrc#2 cpuSrc zp[2]:8 750.75
(word) ppuDataTransfer::i
(word) ppuDataTransfer::i#1 i zp[2]:6 2002.0
(word) ppuDataTransfer::i#2 i zp[2]:6 600.5999999999999
(nomodify void*) ppuDataTransfer::ppuData
(const nomodify void*) ppuDataTransfer::ppuData#0 ppuData = (void*)(const nomodify byte*) PPU_PALETTE
(label) ppuDataTransfer::ppuDataPrepare1
(nomodify void*) ppuDataTransfer::ppuDataPrepare1_ppuData
(label) ppuDataTransfer::ppuDataPut1
(byte) ppuDataTransfer::ppuDataPut1_val
(byte) ppuDataTransfer::ppuDataPut1_val#0 reg byte a 2002.0
(word) ppuDataTransfer::size
(const word) ppuDataTransfer::size#0 size = (byte) $20*(const byte) SIZEOF_BYTE
(byte()) readJoy1()
(byte~) readJoy1::$1 zp[1]:16 101.0
(byte~) readJoy1::$2 reg byte a 202.0
(label) readJoy1::@1
(label) readJoy1::@2
(label) readJoy1::@return
(byte) readJoy1::i
(byte) readJoy1::i#1 reg byte x 202.0
(byte) readJoy1::i#2 reg byte x 60.599999999999994
(byte) readJoy1::joy
(byte) readJoy1::joy#1 reg byte a 101.0
(byte) readJoy1::joy#2 reg byte a 51.0
(byte) readJoy1::return
(byte) readJoy1::return#2 reg byte a 4.0
interrupt(HARDWARE_STACK)(void()) vblank()
(byte~) vblank::$10 reg byte x 4.0
(byte~) vblank::$12 reg byte x 4.0
(byte~) vblank::$14 reg byte a 22.0
(byte~) vblank::$17 zp[1]:4 22.0
(byte~) vblank::$19 zp[1]:4 22.0
(byte~) vblank::$23 zp[1]:5 22.0
(byte~) vblank::$25 zp[1]:5 22.0
(byte~) vblank::$28 zp[1]:15 8.25
(byte~) vblank::$5 reg byte x 4.0
(byte~) vblank::$7 reg byte x 4.0
(label) vblank::@1
(label) vblank::@10
(label) vblank::@11
(label) vblank::@12
(label) vblank::@13
(label) vblank::@14
(label) vblank::@15
(label) vblank::@2
(label) vblank::@3
(label) vblank::@4
(label) vblank::@5
(label) vblank::@6
(label) vblank::@7
(label) vblank::@8
(label) vblank::@9
(label) vblank::@return
(byte) vblank::joy
(byte) vblank::joy#0 reg byte a 4.0
(label) vblank::ppuSpriteBufferDmaTransfer1
(struct SpriteData*) vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer
(byte) vblank::s
(byte) vblank::s#1 s zp[1]:2 22.0
(byte) vblank::s#2 s zp[1]:2 2.933333333333333
(byte) vblank::x_idx
(byte) vblank::x_idx#0 x_idx zp[1]:4 0.6666666666666666
(byte) vblank::x_idx#1 x_idx zp[1]:4 5.5
(byte) vblank::x_idx#2 x_idx zp[1]:4 7.125
(byte) vblank::x_idx_2
(byte) vblank::x_idx_2#0 x_idx_2 zp[1]:5 4.0
(byte) vblank::x_idx_2#1 x_idx_2 zp[1]:5 16.5
(byte) vblank::x_idx_2#2 x_idx_2 zp[1]:5 4.75
(byte) vblank::y_idx
(byte) vblank::y_idx#0 y_idx zp[1]:3 0.3333333333333333
(byte) vblank::y_idx#1 y_idx zp[1]:3 1.8333333333333333
(byte) vblank::y_idx#2 y_idx zp[1]:3 8.75
(volatile byte) x_sin_idx loadstore zp[1]:13 0.7692307692307693
(volatile byte) x_sin_idx_2 loadstore zp[1]:14 0.5555555555555556
(volatile byte) y_sin_idx loadstore zp[1]:12 0.8

reg byte x [ vblank::$7 vblank::$5 ]
reg byte x [ vblank::$12 vblank::$10 ]
zp[1]:2 [ vblank::s#2 vblank::s#1 ]
zp[1]:3 [ vblank::y_idx#2 vblank::y_idx#1 vblank::y_idx#0 ]
zp[1]:4 [ vblank::x_idx#2 vblank::x_idx#1 vblank::x_idx#0 vblank::$19 vblank::$17 ]
zp[1]:5 [ vblank::x_idx_2#2 vblank::x_idx_2#1 vblank::x_idx_2#0 vblank::$25 vblank::$23 ]
reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
reg byte x [ main::s#2 main::s#1 ]
reg byte x [ readJoy1::i#2 readJoy1::i#1 ]
reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ]
zp[2]:6 [ ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
zp[2]:8 [ ppuDataFill::size#3 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
reg byte x [ ppuDataFill::val#4 ]
zp[2]:10 [ ppuDataFill::i#2 ppuDataFill::i#1 ]
zp[1]:12 [ y_sin_idx ]
zp[1]:13 [ x_sin_idx ]
zp[1]:14 [ x_sin_idx_2 ]
reg byte a [ readJoy1::return#2 ]
reg byte a [ vblank::joy#0 ]
zp[1]:15 [ vblank::$28 ]
reg byte a [ vblank::$14 ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
reg byte y [ main::$7 ]
zp[1]:16 [ readJoy1::$1 ]
reg byte a [ readJoy1::$2 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]


FINAL ASSEMBLER
Score: 4504

  // File Comments
// NES DXYCP using sprites
// Nintendo Entertainment System (NES
// https://en.wikipedia.org/wiki/Nintendo_Entertainment_System_(Model_NES-101)
// https://github.com/gregkrsak/first_nes
// Ricoh 2C02 - NES Picture Processing Unit (PPU)
// Ricoh RP2C02 (NTSC version) / RP2C07 (PAL version),
// https://en.wikipedia.org/wiki/Picture_Processing_Unit
// https://wiki.nesdev.com/w/index.php/PPU_registers
// http://nesdev.com/2C02%20technical%20reference.TXT
// Based on: https://github.com/gregkrsak/first_nes written by Greg M. Krsak, 2018. 
  // Upstart
  // Nintendo Entertainment System (NES) ROM
// https://sadistech.com/nesromtool/romdoc.html
// https://forums.nesdev.com/viewtopic.php?f=2&t=9896
// https://github.com/gregkrsak/first_nes
.file [name="nes-dxycp.nes", type="bin", segments="NesRom"]
.file [name="nes-dxycp.nes_hdr", type="bin", segments="Header"]
.file [name="nes-dxycp.nes_prg", type="bin", segments="ProgramRom"]
.file [name="nes-dxycp.nes_chr", type="bin", segments="CharacterRom"]
.segmentdef Header  [ start=$0000,       min=$0000, max=$000f, fill ]
.segmentdef Tiles   [ start=$0000,       min=$0000, max=$1fff, fill ]
.segmentdef Code    [ start=$c000,       min=$c000, max=$fff9 ]
.segmentdef Data    [ startAfter="Code", min=$c000, max=$fff9 ]
.segmentdef Vectors [ start=$fffa,       min=$fffa, max=$ffff ]
.segmentdef GameRam [start=$200,max=$7ff, virtual]
.segmentdef ProgramRom [ segments="Code, Data, Vectors" ]
.segmentdef CharacterRom [ segments="Tiles" ]
.segmentdef NesRom
.segment NesRom
.segmentout [ segments="Header" ]
.segmentout [ segments="ProgramRom" ]
.segmentout [ segments="CharacterRom" ]
.segment Header
.text   @"NES\$1a"
.byte   $01           // 1x 16KB ROM (PRG)
.byte   $01           // 1x 8KB VROM (CHR)
.byte   %00000001     // Mapper nibble 0000 == No mapping (a simple 16KB PRG + 8KB CHR game)
                      // Mirroring nibble 0001 == Vertical mirroring only
.segment Code

  // Global Constants & labels
  .const OFFSET_STRUCT_SPRITEDATA_TILE = 1
  .const OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES = 2
  .const OFFSET_STRUCT_SPRITEDATA_X = 3
  .const OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
  .const OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
  .const OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
  .const OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
  .const OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
  .const OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
  .const OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
  .const OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
  .const OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
  .const SIZEOF_BYTE = 1
  // $2000-$23bf	$03c0	Name table 0
  .label PPU_NAME_TABLE_0 = $2000
  // $23c0-$23ff	$0040	Attribute table 0
  .label PPU_ATTRIBUTE_TABLE_0 = $23c0
  // $3000-$3eff	$0f00	Mirrors of $2000-$2eff
  // $3f00-$3f1f	$0020	Palette RAM indexes
  .label PPU_PALETTE = $3f00
  // PPU Status Register for reading in ASM
  .label PPU_PPUSTATUS = $2002
  // APU Frame Counter
  // generates low-frequency clocks for the channels and an optional 60 Hz interrupt.
  // https://wiki.nesdev.com/w/index.php/APU_Frame_Counter
  // ------+-----+---------------------------------------------------------------
  //  $4017 |	 W  | FR_COUNTER Frame Counter	Set mode and interrupt
  //  ------+-----+---------------------------------------------------------------
  //        |   7	| Sequencer mode: 0 selects 4-step sequence, 1 selects 5-step sequence
  //        |   6	| Interrupt inhibit flag. If set, the frame interrupt flag is cleared, otherwise it is unaffected.
  //  ------+-----+---------------------------------------------------------------
  // Side effects	After 3 or 4 CPU clock cycles*, the timer is reset.
  // If the mode flag is set, then both "quarter frame" and "half frame" signals are also generated.
  .label FR_COUNTER = $4017
  // Pointer to the start of RAM memory
  .label MEMORY = 0
  // NES Picture Processing Unit (PPU)
  .label PPU = $2000
  // NES CPU and audion processing unit (APU)
  .label APU = $4000
  // Index into the Y sine
  .label y_sin_idx = $c
  // Index into the X sine
  .label x_sin_idx = $d
  // Index into the small X sine
  .label x_sin_idx_2 = $e
.segment Code
  // __start
__start: {
    // __start::__init1
    // y_sin_idx = 0
    // [1] (volatile byte) y_sin_idx ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z y_sin_idx
    // x_sin_idx = 73
    // [2] (volatile byte) x_sin_idx ← (byte) $49 -- vbuz1=vbuc1 
    lda #$49
    sta.z x_sin_idx
    // x_sin_idx_2 = 82
    // [3] (volatile byte) x_sin_idx_2 ← (byte) $52 -- vbuz1=vbuc1 
    lda #$52
    sta.z x_sin_idx_2
    // [4] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [5] call main 
    // [45] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [6] return 
    rts
}
  // vblank
// NMI Called when the PPU refreshes the screen (also known as the V-Blank period)
vblank: {
    .label __17 = 4
    .label __19 = 4
    .label __23 = 5
    .label __25 = 5
    .label __28 = $f
    .label y_idx = 3
    .label x_idx = 4
    .label x_idx_2 = 5
    .label s = 2
    // entry interrupt(HARDWARE_STACK)
    pha
    txa
    pha
    tya
    pha
    // PPU->PPUSCROLL = 0
    // [7] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set scroll
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // [8] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSCROLL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUSCROLL
    // vblank::ppuSpriteBufferDmaTransfer1
    // PPU->OAMADDR = 0
    // [9] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_OAMADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_OAMADDR
    // APU->OAMDMA = >spriteBuffer
    // [10] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_OAMDMA) ← >(const struct SpriteData*) SPRITE_BUFFER -- _deref_pbuc1=vbuc2 
    lda #>SPRITE_BUFFER
    sta APU+OFFSET_STRUCT_RICOH_2A03_OAMDMA
    // [11] phi from vblank::ppuSpriteBufferDmaTransfer1 to vblank::@14 [phi:vblank::ppuSpriteBufferDmaTransfer1->vblank::@14]
    // vblank::@14
    // readJoy1()
    // [12] call readJoy1 
    jsr readJoy1
    // [13] (byte) readJoy1::return#2 ← (byte) readJoy1::joy#2
    // vblank::@15
    // joy = readJoy1()
    // [14] (byte) vblank::joy#0 ← (byte) readJoy1::return#2
    // if(joy)
    // [15] if((byte) 0==(byte) vblank::joy#0) goto vblank::@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b1
    // vblank::@return
  __breturn:
    // }
    // [16] return  - exit interrupt(HARDWARE_STACK)
    pla
    tay
    pla
    tax
    pla
    rti
    // vblank::@1
  __b1:
    // y_idx = y_sin_idx++
    // [17] (byte) vblank::y_idx#0 ← (volatile byte) y_sin_idx -- vbuz1=vbuz2 
    // Update sprite positions
    lda.z y_sin_idx
    sta.z y_idx
    // [18] (volatile byte) y_sin_idx ← ++ (volatile byte) y_sin_idx -- vbuz1=_inc_vbuz1 
    inc.z y_sin_idx
    // (x_sin_idx==238) ? 0 : x_sin_idx+1
    // [19] if((volatile byte) x_sin_idx==(byte) $ee) goto vblank::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #$ee
    cmp.z x_sin_idx
    beq __b2
    // vblank::@2
    // [20] (byte~) vblank::$5 ← (volatile byte) x_sin_idx + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x_sin_idx
    inx
    // [21] phi from vblank::@2 to vblank::@3 [phi:vblank::@2->vblank::@3]
    // [21] phi (byte~) vblank::$7 = (byte~) vblank::$5 [phi:vblank::@2->vblank::@3#0] -- register_copy 
    jmp __b3
    // [21] phi from vblank::@1 to vblank::@3 [phi:vblank::@1->vblank::@3]
  __b2:
    // [21] phi (byte~) vblank::$7 = (byte) 0 [phi:vblank::@1->vblank::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // vblank::@3
  __b3:
    // x_sin_idx = (x_sin_idx==238) ? 0 : x_sin_idx+1
    // [22] (volatile byte) x_sin_idx ← (byte~) vblank::$7 -- vbuz1=vbuxx 
    stx.z x_sin_idx
    // x_idx = x_sin_idx
    // [23] (byte) vblank::x_idx#0 ← (volatile byte) x_sin_idx -- vbuz1=vbuz2 
    txa
    sta.z x_idx
    // (x_sin_idx_2==88) ? 0 : x_sin_idx_2+1
    // [24] if((volatile byte) x_sin_idx_2==(byte) $58) goto vblank::@5 -- vbuz1_eq_vbuc1_then_la1 
    lda #$58
    cmp.z x_sin_idx_2
    beq __b4
    // vblank::@4
    // [25] (byte~) vblank::$10 ← (volatile byte) x_sin_idx_2 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x_sin_idx_2
    inx
    // [26] phi from vblank::@4 to vblank::@5 [phi:vblank::@4->vblank::@5]
    // [26] phi (byte~) vblank::$12 = (byte~) vblank::$10 [phi:vblank::@4->vblank::@5#0] -- register_copy 
    jmp __b5
    // [26] phi from vblank::@3 to vblank::@5 [phi:vblank::@3->vblank::@5]
  __b4:
    // [26] phi (byte~) vblank::$12 = (byte) 0 [phi:vblank::@3->vblank::@5#0] -- vbuxx=vbuc1 
    ldx #0
    // vblank::@5
  __b5:
    // x_sin_idx_2 = (x_sin_idx_2==88) ? 0 : x_sin_idx_2+1
    // [27] (volatile byte) x_sin_idx_2 ← (byte~) vblank::$12 -- vbuz1=vbuxx 
    stx.z x_sin_idx_2
    // x_idx_2 = x_sin_idx_2
    // [28] (byte) vblank::x_idx_2#0 ← (volatile byte) x_sin_idx_2 -- vbuz1=vbuz2 
    txa
    sta.z x_idx_2
    // [29] phi from vblank::@5 to vblank::@6 [phi:vblank::@5->vblank::@6]
    // [29] phi (byte) vblank::x_idx_2#2 = (byte) vblank::x_idx_2#0 [phi:vblank::@5->vblank::@6#0] -- register_copy 
    // [29] phi (byte) vblank::x_idx#2 = (byte) vblank::x_idx#0 [phi:vblank::@5->vblank::@6#1] -- register_copy 
    // [29] phi (byte) vblank::y_idx#2 = (byte) vblank::y_idx#0 [phi:vblank::@5->vblank::@6#2] -- register_copy 
    // [29] phi (byte) vblank::s#2 = (byte) 0 [phi:vblank::@5->vblank::@6#3] -- vbuz1=vbuc1 
    lda #0
    sta.z s
    // vblank::@6
  __b6:
    // for(char s=0;s<0x40;s++)
    // [30] if((byte) vblank::s#2<(byte) $40) goto vblank::@7 -- vbuz1_lt_vbuc1_then_la1 
    lda.z s
    cmp #$40
    bcc __b7
    jmp __breturn
    // vblank::@7
  __b7:
    // SPRITE_BUFFER[s].y = SINTABLE_240[y_idx]
    // [31] (byte~) vblank::$28 ← (byte) vblank::s#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z s
    asl
    asl
    sta.z __28
    // [32] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) vblank::$28) ← *((const to_nomodify byte*) SINTABLE_240 + (byte) vblank::y_idx#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z y_idx
    lda SINTABLE_240,y
    ldy.z __28
    sta SPRITE_BUFFER,y
    // y_idx -= 4
    // [33] (byte) vblank::y_idx#1 ← (byte) vblank::y_idx#2 - (byte) 4 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z y_idx
    axs #4
    stx.z y_idx
    // SINTABLE_184[x_idx] + SINTABLE_64[x_idx_2]
    // [34] (byte~) vblank::$14 ← *((const to_nomodify byte*) SINTABLE_184 + (byte) vblank::x_idx#2) + *((const to_nomodify byte*) SINTABLE_64 + (byte) vblank::x_idx_2#2) -- vbuaa=pbuc1_derefidx_vbuz1_plus_pbuc2_derefidx_vbuz2 
    ldy.z x_idx
    lda SINTABLE_184,y
    ldy.z x_idx_2
    clc
    adc SINTABLE_64,y
    // SPRITE_BUFFER[s].x = SINTABLE_184[x_idx] + SINTABLE_64[x_idx_2]
    // [35] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) vblank::$28) ← (byte~) vblank::$14 -- pbuc1_derefidx_vbuz1=vbuaa 
    ldy.z __28
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X,y
    // (x_idx<3) ? x_idx+236 : x_idx-3
    // [36] if((byte) vblank::x_idx#2<(byte) 3) goto vblank::@8 -- vbuz1_lt_vbuc1_then_la1 
    lda.z x_idx
    cmp #3
    bcc __b8
    // vblank::@9
    // [37] (byte~) vblank::$17 ← (byte) vblank::x_idx#2 - (byte) 3 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z __17
    axs #3
    stx.z __17
    // [38] phi from vblank::@8 vblank::@9 to vblank::@10 [phi:vblank::@8/vblank::@9->vblank::@10]
    // [38] phi (byte) vblank::x_idx#1 = (byte~) vblank::$19 [phi:vblank::@8/vblank::@9->vblank::@10#0] -- register_copy 
    // vblank::@10
  __b10:
    // (x_idx_2>=86) ? x_idx_2-86 : x_idx_2+3
    // [39] if((byte) vblank::x_idx_2#2>=(byte) $56) goto vblank::@11 -- vbuz1_ge_vbuc1_then_la1 
    lda.z x_idx_2
    cmp #$56
    bcs __b11
    // vblank::@12
    // [40] (byte~) vblank::$23 ← (byte) vblank::x_idx_2#2 + (byte) 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z __23
    axs #-[3]
    stx.z __23
    // [41] phi from vblank::@11 vblank::@12 to vblank::@13 [phi:vblank::@11/vblank::@12->vblank::@13]
    // [41] phi (byte) vblank::x_idx_2#1 = (byte~) vblank::$25 [phi:vblank::@11/vblank::@12->vblank::@13#0] -- register_copy 
    // vblank::@13
  __b13:
    // for(char s=0;s<0x40;s++)
    // [42] (byte) vblank::s#1 ← ++ (byte) vblank::s#2 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [29] phi from vblank::@13 to vblank::@6 [phi:vblank::@13->vblank::@6]
    // [29] phi (byte) vblank::x_idx_2#2 = (byte) vblank::x_idx_2#1 [phi:vblank::@13->vblank::@6#0] -- register_copy 
    // [29] phi (byte) vblank::x_idx#2 = (byte) vblank::x_idx#1 [phi:vblank::@13->vblank::@6#1] -- register_copy 
    // [29] phi (byte) vblank::y_idx#2 = (byte) vblank::y_idx#1 [phi:vblank::@13->vblank::@6#2] -- register_copy 
    // [29] phi (byte) vblank::s#2 = (byte) vblank::s#1 [phi:vblank::@13->vblank::@6#3] -- register_copy 
    jmp __b6
    // vblank::@11
  __b11:
    // (x_idx_2>=86) ? x_idx_2-86 : x_idx_2+3
    // [43] (byte~) vblank::$25 ← (byte) vblank::x_idx_2#2 - (byte) $56 -- vbuz1=vbuz1_minus_vbuc1 
    lax.z __25
    axs #$56
    stx.z __25
    jmp __b13
    // vblank::@8
  __b8:
    // (x_idx<3) ? x_idx+236 : x_idx-3
    // [44] (byte~) vblank::$19 ← (byte) vblank::x_idx#2 + (byte) $ec -- vbuz1=vbuz1_plus_vbuc1 
    lax.z __19
    axs #-[$ec]
    stx.z __19
    jmp __b10
}
  // main
// RESET Called when the NES is reset, including when it is turned on.
main: {
    // main::initNES1
    // asm
    // asm { cld ldx#$ff txs  }
    cld
    ldx #$ff
    txs
    // main::initNES1_disableVideoOutput1
    // PPU->PPUCTRL = 0
    // [47] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU
    // PPU->PPUMASK = 0
    // [48] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // main::initNES1_disableAudioOutput1
    // *FR_COUNTER = 0b01000000
    // [49] *((const nomodify byte*) FR_COUNTER) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$40
    sta FR_COUNTER
    // APU->DMC_FREQ  = 0b01000000
    // [50] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_DMC_FREQ) ← (byte) $40 -- _deref_pbuc1=vbuc2 
    sta APU+OFFSET_STRUCT_RICOH_2A03_DMC_FREQ
    // main::initNES1_clearVBlankFlag1
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [52] phi from main::initNES1_clearVBlankFlag1 to main::initNES1_waitForVBlank1 [phi:main::initNES1_clearVBlankFlag1->main::initNES1_waitForVBlank1]
    // main::initNES1_waitForVBlank1
  initNES1_waitForVBlank1:
    // main::initNES1_waitForVBlank1_@1
    // PPU->PPUSTATUS&0x80
    // [53] (byte~) main::initNES1_waitForVBlank1_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [54] if((byte) 0==(byte~) main::initNES1_waitForVBlank1_$0) goto main::initNES1_waitForVBlank1_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank1
    // [55] phi from main::initNES1_waitForVBlank1_@1 to main::initNES1_@1 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1]
    // [55] phi (byte) main::initNES1_i#2 = (byte) 0 [phi:main::initNES1_waitForVBlank1_@1->main::initNES1_@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [55] phi from main::initNES1_@1 to main::initNES1_@1 [phi:main::initNES1_@1->main::initNES1_@1]
    // [55] phi (byte) main::initNES1_i#2 = (byte) main::initNES1_i#1 [phi:main::initNES1_@1->main::initNES1_@1#0] -- register_copy 
    // main::initNES1_@1
  initNES1___b1:
    // (MEMORY+0x000)[i] = 0
    // [56] *((const nomodify byte*) MEMORY + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #0
    sta MEMORY,x
    // (MEMORY+0x100)[i] = 0
    // [57] *((const nomodify byte*) MEMORY+(word) $100 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$100,x
    // (MEMORY+0x200)[i] = 0
    // [58] *((const nomodify byte*) MEMORY+(word) $200 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$200,x
    // (MEMORY+0x300)[i] = 0
    // [59] *((const nomodify byte*) MEMORY+(word) $300 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$300,x
    // (MEMORY+0x400)[i] = 0
    // [60] *((const nomodify byte*) MEMORY+(word) $400 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$400,x
    // (MEMORY+0x500)[i] = 0
    // [61] *((const nomodify byte*) MEMORY+(word) $500 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$500,x
    // (MEMORY+0x600)[i] = 0
    // [62] *((const nomodify byte*) MEMORY+(word) $600 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$600,x
    // (MEMORY+0x700)[i] = 0
    // [63] *((const nomodify byte*) MEMORY+(word) $700 + (byte) main::initNES1_i#2) ← (byte) 0 -- pbuc1_derefidx_vbuxx=vbuc2 
    sta MEMORY+$700,x
    // while (++i)
    // [64] (byte) main::initNES1_i#1 ← ++ (byte) main::initNES1_i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [65] if((byte) 0!=(byte) main::initNES1_i#1) goto main::initNES1_@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne initNES1___b1
    // [66] phi from main::initNES1_@1 to main::initNES1_waitForVBlank2 [phi:main::initNES1_@1->main::initNES1_waitForVBlank2]
    // main::initNES1_waitForVBlank2
  initNES1_waitForVBlank2:
    // main::initNES1_waitForVBlank2_@1
    // PPU->PPUSTATUS&0x80
    // [67] (byte~) main::initNES1_waitForVBlank2_$0 ← *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUSTATUS) & (byte) $80 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #$80
    and PPU+OFFSET_STRUCT_RICOH_2C02_PPUSTATUS
    // while(!(PPU->PPUSTATUS&0x80))
    // [68] if((byte) 0==(byte~) main::initNES1_waitForVBlank2_$0) goto main::initNES1_waitForVBlank2_@1 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq initNES1_waitForVBlank2
    // main::initNES1_@7
    // asm
    // asm { ldaPPU_PPUSTATUS  }
    lda PPU_PPUSTATUS
    // [70] phi from main::initNES1_@7 to main::@4 [phi:main::initNES1_@7->main::@4]
    // main::@4
    // ppuDataTransfer(PPU_PALETTE, PALETTE, sizeof(PALETTE))
    // [71] call ppuDataTransfer 
  // Transfer the palette
    // [96] phi from main::@4 to ppuDataTransfer [phi:main::@4->ppuDataTransfer]
    jsr ppuDataTransfer
    // [72] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // ppuDataFill(PPU_NAME_TABLE_0, '*', 32*30)
    // [73] call ppuDataFill 
  // Fill the PPU attribute table
    // [106] phi from main::@5 to ppuDataFill [phi:main::@5->ppuDataFill]
    // [106] phi (byte) ppuDataFill::val#4 = (byte) '*' [phi:main::@5->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #'*'
    // [106] phi (word) ppuDataFill::size#3 = (word)(number) $20*(number) $1e [phi:main::@5->ppuDataFill#1] -- vwuz1=vwuc1 
    lda #<$20*$1e
    sta.z ppuDataFill.size
    lda #>$20*$1e
    sta.z ppuDataFill.size+1
    // [106] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_NAME_TABLE_0 [phi:main::@5->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_NAME_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [74] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // ppuDataFill(PPU_ATTRIBUTE_TABLE_0, 0, 0x40)
    // [75] call ppuDataFill 
    // [106] phi from main::@6 to ppuDataFill [phi:main::@6->ppuDataFill]
    // [106] phi (byte) ppuDataFill::val#4 = (byte) 0 [phi:main::@6->ppuDataFill#0] -- vbuxx=vbuc1 
    ldx #0
    // [106] phi (word) ppuDataFill::size#3 = (byte) $40 [phi:main::@6->ppuDataFill#1] -- vwuz1=vbuc1 
    lda #<$40
    sta.z ppuDataFill.size
    lda #>$40
    sta.z ppuDataFill.size+1
    // [106] phi (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 = (void*)(const nomodify byte*) PPU_ATTRIBUTE_TABLE_0 [phi:main::@6->ppuDataFill#2] -- pvoz1=pvoc1 
    lda #<PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData
    lda #>PPU_ATTRIBUTE_TABLE_0
    sta.z ppuDataFill.ppuDataPrepare1_ppuData+1
    jsr ppuDataFill
    // [76] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [76] phi (byte) main::s#2 = (byte) 0 [phi:main::@6->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  // Initialize Sprite Buffer with the SPRITE data
    // main::@1
  __b1:
    // for(char s=0;s<0x40;s++)
    // [77] if((byte) main::s#2<(byte) $40) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$40
    bcc __b2
    // main::enableVideoOutput1
    // PPU->PPUCTRL = 0b10000000
    // [78] *((byte*)(const struct RICOH_2C02*) PPU) ← (byte) $80 -- _deref_pbuc1=vbuc2 
    lda #$80
    sta PPU
    // PPU->PPUMASK = 0b00011110
    // [79] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUMASK) ← (byte) $1e -- _deref_pbuc1=vbuc2 
    lda #$1e
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUMASK
    // [80] phi from main::@3 main::enableVideoOutput1 to main::@3 [phi:main::@3/main::enableVideoOutput1->main::@3]
  __b3:
  // Infinite loop
    // main::@3
    jmp __b3
    // main::@2
  __b2:
    // SPRITE_BUFFER[s] = { 0, MESSAGE[s], 0b00000010, 0 }
    // [81] (byte~) main::$7 ← (byte) main::s#2 << (byte) 2 -- vbuyy=vbuxx_rol_2 
    txa
    asl
    asl
    tay
    // [82] *((byte*)(const struct SpriteData*) SPRITE_BUFFER + (byte~) main::$7) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SPRITE_BUFFER,y
    // [83] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_TILE + (byte~) main::$7) ← *((const byte*) MESSAGE + (byte) main::s#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda MESSAGE,x
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_TILE,y
    // [84] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES + (byte~) main::$7) ← (byte) 2 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #2
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_ATTRIBUTES,y
    // [85] *((byte*)(const struct SpriteData*) SPRITE_BUFFER+(const byte) OFFSET_STRUCT_SPRITEDATA_X + (byte~) main::$7) ← (byte) 0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #0
    sta SPRITE_BUFFER+OFFSET_STRUCT_SPRITEDATA_X,y
    // for(char s=0;s<0x40;s++)
    // [86] (byte) main::s#1 ← ++ (byte) main::s#2 -- vbuxx=_inc_vbuxx 
    inx
    // [76] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [76] phi (byte) main::s#2 = (byte) main::s#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
}
  // readJoy1
// Read Standard Controller #1
// Returns a byte representing the pushed buttons
// - bit 0: right
// - bit 1: left
// - bit 2: down
// - bit 3: up
// - bit 4: start
// - bit 5: select
// - bit 6: B
// - bit 7: A
readJoy1: {
    .label __1 = $10
    // APU->JOY1 = 1
    // [87] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 1 -- _deref_pbuc1=vbuc2 
    // Latch the controller buttons
    lda #1
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // APU->JOY1 = 0
    // [88] *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // [89] phi from readJoy1 to readJoy1::@1 [phi:readJoy1->readJoy1::@1]
    // [89] phi (byte) readJoy1::joy#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#0] -- vbuaa=vbuc1 
    // [89] phi (byte) readJoy1::i#2 = (byte) 0 [phi:readJoy1->readJoy1::@1#1] -- vbuxx=vbuc1 
    tax
    // readJoy1::@1
  __b1:
    // for(char i=0;i<8;i++)
    // [90] if((byte) readJoy1::i#2<(byte) 8) goto readJoy1::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #8
    bcc __b2
    // readJoy1::@return
    // }
    // [91] return 
    rts
    // readJoy1::@2
  __b2:
    // joy<<1
    // [92] (byte~) readJoy1::$1 ← (byte) readJoy1::joy#2 << (byte) 1 -- vbuz1=vbuaa_rol_1 
    asl
    sta.z __1
    // APU->JOY1&1
    // [93] (byte~) readJoy1::$2 ← *((byte*)(const struct RICOH_2A03*) APU+(const byte) OFFSET_STRUCT_RICOH_2A03_JOY1) & (byte) 1 -- vbuaa=_deref_pbuc1_band_vbuc2 
    lda #1
    and APU+OFFSET_STRUCT_RICOH_2A03_JOY1
    // joy = joy<<1 | APU->JOY1&1
    // [94] (byte) readJoy1::joy#1 ← (byte~) readJoy1::$1 | (byte~) readJoy1::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // for(char i=0;i<8;i++)
    // [95] (byte) readJoy1::i#1 ← ++ (byte) readJoy1::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [89] phi from readJoy1::@2 to readJoy1::@1 [phi:readJoy1::@2->readJoy1::@1]
    // [89] phi (byte) readJoy1::joy#2 = (byte) readJoy1::joy#1 [phi:readJoy1::@2->readJoy1::@1#0] -- register_copy 
    // [89] phi (byte) readJoy1::i#2 = (byte) readJoy1::i#1 [phi:readJoy1::@2->readJoy1::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataTransfer
// Transfer a number of bytes from the CPU memory to the PPU memory
// - ppuData : Pointer in the PPU memory
// - cpuData : Pointer to the CPU memory (RAM of ROM)
// - size : The number of bytes to transfer
ppuDataTransfer: {
    .const size = $20*SIZEOF_BYTE
    .label ppuData = PPU_PALETTE
    .label cpuData = PALETTE
    // Transfer to PPU
    .label cpuSrc = 8
    .label i = 6
    // ppuDataTransfer::ppuDataPrepare1
    // PPU->PPUADDR = >ppuData
    // [97] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← >(const nomodify void*) ppuDataTransfer::ppuData#0 -- _deref_pbuc1=vbuc2 
    lda #>ppuData
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // PPU->PPUADDR = <ppuData
    // [98] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [99] phi from ppuDataTransfer::ppuDataPrepare1 to ppuDataTransfer::@1 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1]
    // [99] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*)(const nomodify void*) ppuDataTransfer::cpuData#0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#0] -- pbuz1=pbuc1 
    lda #<cpuData
    sta.z cpuSrc
    lda #>cpuData
    sta.z cpuSrc+1
    // [99] phi (word) ppuDataTransfer::i#2 = (word) 0 [phi:ppuDataTransfer::ppuDataPrepare1->ppuDataTransfer::@1#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
    // ppuDataTransfer::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [100] if((word) ppuDataTransfer::i#2<(const word) ppuDataTransfer::size#0) goto ppuDataTransfer::@2 -- vwuz1_lt_vwuc1_then_la1 
    lda.z i+1
    cmp #>size
    bcc __b2
    bne !+
    lda.z i
    cmp #<size
    bcc __b2
  !:
    // ppuDataTransfer::@return
    // }
    // [101] return 
    rts
    // ppuDataTransfer::@2
  __b2:
    // ppuDataPut(*cpuSrc++)
    // [102] (byte) ppuDataTransfer::ppuDataPut1_val#0 ← *((byte*) ppuDataTransfer::cpuSrc#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (cpuSrc),y
    // ppuDataTransfer::ppuDataPut1
    // PPU->PPUDATA = val
    // [103] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataTransfer::ppuDataPut1_val#0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataTransfer::@3
    // ppuDataPut(*cpuSrc++);
    // [104] (byte*) ppuDataTransfer::cpuSrc#1 ← ++ (byte*) ppuDataTransfer::cpuSrc#2 -- pbuz1=_inc_pbuz1 
    inc.z cpuSrc
    bne !+
    inc.z cpuSrc+1
  !:
    // for(unsigned int i=0;i<size;i++)
    // [105] (word) ppuDataTransfer::i#1 ← ++ (word) ppuDataTransfer::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [99] phi from ppuDataTransfer::@3 to ppuDataTransfer::@1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1]
    // [99] phi (byte*) ppuDataTransfer::cpuSrc#2 = (byte*) ppuDataTransfer::cpuSrc#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#0] -- register_copy 
    // [99] phi (word) ppuDataTransfer::i#2 = (word) ppuDataTransfer::i#1 [phi:ppuDataTransfer::@3->ppuDataTransfer::@1#1] -- register_copy 
    jmp __b1
}
  // ppuDataFill
// Fill a number of bytes in the PPU memory
// - ppuData : Pointer in the PPU memory
// - size : The number of bytes to transfer
// ppuDataFill(byte register(X) val, word zp(8) size)
ppuDataFill: {
    .label ppuDataPrepare1_ppuData = 6
    .label i = $a
    .label size = 8
    // ppuDataFill::ppuDataPrepare1
    // >ppuData
    // [107] (byte~) ppuDataFill::ppuDataPrepare1_$0 ← > (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_hi_pvoz1 
    lda.z ppuDataPrepare1_ppuData+1
    // PPU->PPUADDR = >ppuData
    // [108] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$0 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // <ppuData
    // [109] (byte~) ppuDataFill::ppuDataPrepare1_$1 ← < (nomodify void*) ppuDataFill::ppuDataPrepare1_ppuData#0 -- vbuaa=_lo_pvoz1 
    lda.z ppuDataPrepare1_ppuData
    // PPU->PPUADDR = <ppuData
    // [110] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUADDR) ← (byte~) ppuDataFill::ppuDataPrepare1_$1 -- _deref_pbuc1=vbuaa 
    sta PPU+OFFSET_STRUCT_RICOH_2C02_PPUADDR
    // [111] phi from ppuDataFill::ppuDataPrepare1 to ppuDataFill::@1 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1]
    // [111] phi (word) ppuDataFill::i#2 = (word) 0 [phi:ppuDataFill::ppuDataPrepare1->ppuDataFill::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z i
    sta.z i+1
  // Transfer to PPU
    // ppuDataFill::@1
  __b1:
    // for(unsigned int i=0;i<size;i++)
    // [112] if((word) ppuDataFill::i#2<(word) ppuDataFill::size#3) goto ppuDataFill::ppuDataPut1 -- vwuz1_lt_vwuz2_then_la1 
    lda.z i+1
    cmp.z size+1
    bcc ppuDataPut1
    bne !+
    lda.z i
    cmp.z size
    bcc ppuDataPut1
  !:
    // ppuDataFill::@return
    // }
    // [113] return 
    rts
    // ppuDataFill::ppuDataPut1
  ppuDataPut1:
    // PPU->PPUDATA = val
    // [114] *((byte*)(const struct RICOH_2C02*) PPU+(const byte) OFFSET_STRUCT_RICOH_2C02_PPUDATA) ← (byte) ppuDataFill::val#4 -- _deref_pbuc1=vbuxx 
    stx PPU+OFFSET_STRUCT_RICOH_2C02_PPUDATA
    // ppuDataFill::@2
    // for(unsigned int i=0;i<size;i++)
    // [115] (word) ppuDataFill::i#1 ← ++ (word) ppuDataFill::i#2 -- vwuz1=_inc_vwuz1 
    inc.z i
    bne !+
    inc.z i+1
  !:
    // [111] phi from ppuDataFill::@2 to ppuDataFill::@1 [phi:ppuDataFill::@2->ppuDataFill::@1]
    // [111] phi (word) ppuDataFill::i#2 = (word) ppuDataFill::i#1 [phi:ppuDataFill::@2->ppuDataFill::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
.segment Data
  // The DXYCP message  0123456789abcdef0123456789abcdef0123456789abcdef0123456789abcdef
  MESSAGE: .text "rex-of-camelot-presents-a-dxycp-on-nintendo-entertainment-system"
  // Color Palette
  PALETTE: .byte 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $21, $f, $30, 1, $f, $30, 8, 1, $f, $18, 8, 1, $30, $37, $1a, $f, $f, $f, $f
  // Sinus Table (0-239)
SINTABLE_240:
.fill $100, round(115.5+107.5*sin(2*PI*i/256))

  // Sinus Table (0-63)
SINTABLE_64:
.fill 89, round(52.5+52.5*sin(2*PI*i/89))

  // Sinus Table (0-183)
SINTABLE_184:
.fill 239, round(71.5+71.5*sin(2*PI*i/239))

.segment Tiles
TILES:
.var filechargen = LoadBinary("characters.901225-01.bin")
     .for(var c=0; c<256; c++) {
        // Plane 0
        .fill 8, filechargen.get(c*8+i)
        // Plane 1
        .fill 8, 0
    }

.segment GameRam
  .align $100
  SPRITE_BUFFER: .fill 4*$100, 0
.segment Vectors
  VECTORS: .word vblank, main, 0

