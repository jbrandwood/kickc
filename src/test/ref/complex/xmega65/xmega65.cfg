@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@3
  [5] (byte) main::i#3 ← phi( main/(byte) 0 main::@3/(byte) main::i#1 main::@2/(byte) 0 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] (byte~) main::$0 ← (byte) main::i#3 << (byte) 1
  [7] (byte~) main::$4 ← (byte~) main::$0 << (byte) 1
  [8] (void()*) main::fsyscall#0 ← *((const void()**) FSYSCALLS#0 + (byte~) main::$4)
  [9] call *((void()*) main::fsyscall#0) 
  [10] (byte) main::i#1 ← ++ (byte) main::i#3
  [11] if((byte) main::i#1!=(byte) 2) goto main::@3
  to:main::@1
main::@3: scope:[main]  from main::@2
  [12] phi()
  to:main::@1
fn2: scope:[fn2]  from
  [13] *((const byte*) fn2::BGCOL#0) ← ++ *((const byte*) fn2::BGCOL#0)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [14] return 
  to:@return
fn1: scope:[fn1]  from
  [15] *((const byte*) fn1::BORDERCOL#0) ← ++ *((const byte*) fn1::BORDERCOL#0)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [16] return 
  to:@return
