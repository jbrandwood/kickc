
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  fibs[0] = 0
  fibs[1] = 1
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::$0 = main::i#2 + 2
  main::$1 = main::i#2 + 1
  main::$2 = fibs[main::i#2] + fibs[main::$1]
  fibs[main::$0] = main::$2
  main::i#1 = ++ main::i#2
  main::$3 = main::i#1 < $f
  if(main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
__constant char fibs[$f] = { fill( $f, 0) }
void main()
number main::$0
number main::$1
char main::$2
bool main::$3
char main::i
char main::i#0
char main::i#1
char main::i#2

Adding number conversion cast (unumber) 0 in fibs[0] = 0
Adding number conversion cast (unumber) 0 in fibs[0] = ((unumber)) 0
Adding number conversion cast (unumber) 1 in fibs[1] = 1
Adding number conversion cast (unumber) 1 in fibs[1] = ((unumber)) 1
Adding number conversion cast (unumber) 2 in main::$0 = main::i#2 + 2
Adding number conversion cast (unumber) main::$0 in main::$0 = main::i#2 + (unumber)2
Adding number conversion cast (unumber) 1 in main::$1 = main::i#2 + 1
Adding number conversion cast (unumber) main::$1 in main::$1 = main::i#2 + (unumber)1
Adding number conversion cast (unumber) $f in main::$3 = main::i#1 < $f
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast fibs[(unumber)0] = (unumber)0
Inlining cast fibs[(unumber)1] = (unumber)1
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast $f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in main::$0 = main::i#2 + 2
Inferred type updated to char in main::$1 = main::i#2 + 1
Simple Condition main::$3 [10] if(main::i#1<$f) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero fibs in [0] fibs[0] = 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(fibs+1)
Consolidated array index constant in assignment (fibs+1)[main::$1]
Consolidated array index constant in assignment (fibs+2)[main::$0]
Successful SSA optimization Pass2ConstantAdditionElimination
Alias main::i#2 = main::$0 main::$1 
Successful SSA optimization Pass2AliasElimination
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@2(between main::@1 and main::@1)
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [8] main::i#3 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *fibs = 0
  [1] *(fibs+1) = 1
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [2] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [3] main::$2 = fibs[main::i#2] + (fibs+1)[main::i#2]
  [4] (fibs+2)[main::i#2] = main::$2
  [5] main::i#1 = ++ main::i#2
  [6] if(main::i#1<$f) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [7] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::$2 // 22.0
char main::i
char main::i#1 // 16.5
char main::i#2 // 18.333333333333332

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$2 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::$2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *fibs = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(fibs+1) = 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] main::$2 = fibs[main::i#2] + (fibs+1)[main::i#2] [ main::i#2 main::$2 ] (  [ main::i#2 main::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [0] *fibs = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(fibs+1) = 1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] main::$2 = fibs[main::i#2] + (fibs+1)[main::i#2] [ main::i#2 main::$2 ] (  [ main::i#2 main::$2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::$2 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 34.83: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:3 [ main::$2 ] 
Uplift Scope [] 

Uplifting [main] best 353 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$2 ] 
Uplifting [] best 353 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="fibmem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // [0] *fibs = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta fibs
    // [1] *(fibs+1) = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta fibs+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [2] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [2] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [3] main::$2 = fibs[main::i#2] + (fibs+1)[main::i#2] -- vbuaa=pbuc1_derefidx_vbuxx_plus_pbuc2_derefidx_vbuxx 
    lda fibs,x
    clc
    adc fibs+1,x
    // [4] (fibs+2)[main::i#2] = main::$2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta fibs+2,x
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1<$f) goto main::@1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$f
    bcc __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [7] return 
    rts
}
  // File Data
.segment Data
  fibs: .fill $f, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
__constant char fibs[$f] = { fill( $f, 0) }
void main()
char main::$2 // reg byte a 22.0
char main::i
char main::i#1 // reg byte x 16.5
char main::i#2 // reg byte x 18.333333333333332

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$2 ]


FINAL ASSEMBLER
Score: 263

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="fibmem.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // fibs[0] = 0
    // [0] *fibs = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta fibs
    // fibs[1] = 1
    // [1] *(fibs+1) = 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta fibs+1
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // [2] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [2] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [2] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // fibs[i]+fibs[i+1]
    // [3] main::$2 = fibs[main::i#2] + (fibs+1)[main::i#2] -- vbuaa=pbuc1_derefidx_vbuxx_plus_pbuc2_derefidx_vbuxx 
    lda fibs,x
    clc
    adc fibs+1,x
    // fibs[i+2] = fibs[i]+fibs[i+1]
    // [4] (fibs+2)[main::i#2] = main::$2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta fibs+2,x
    // while(++i<15)
    // [5] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [6] if(main::i#1<$f) goto main::@1 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$f
    bcc __b1
    // main::@return
    // }
    // [7] return 
    rts
}
  // File Data
.segment Data
  fibs: .fill $f, 0

