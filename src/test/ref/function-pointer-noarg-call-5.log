Fixing pointer array-indexing *((const void()**) fns + (number~) main::$0)
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@3

(void()) fn1()
fn1: scope:[fn1]  from
  *((const byte*) fn1::BORDERCOL) ← ++ *((const byte*) fn1::BORDERCOL)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  return 
  to:@return

(void()) fn2()
fn2: scope:[fn2]  from
  *((const byte*) fn2::BGCOL) ← ++ *((const byte*) fn2::BGCOL)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  return 
  to:@return

(void()) main()
main: scope:[main]  from @3
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  (number~) main::$0 ← (byte) main::i#1 & (number) 1
  (number~) main::$2 ← (number~) main::$0 * (const byte) SIZEOF_POINTER
  (void()*) main::f#0 ← *((const void()**) fns + (number~) main::$2)
  call *((void()*) main::f#0) 
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@3: scope:[]  from @begin
  call main 
  to:@4
@4: scope:[]  from @3
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @begin
(label) @end
(const byte) SIZEOF_POINTER = (byte) 2
(void()) fn1()
(label) fn1::@return
(const byte*) fn1::BORDERCOL = (byte*)(number) $d020
(void()) fn2()
(label) fn2::@return
(const byte*) fn2::BGCOL = (byte*)(number) $d021
(const void()**) fns[(number) 2]  = { &(void()) fn1(), &(void()) fn2() }
(void()) main()
(number~) main::$0
(number~) main::$2
(label) main::@1
(label) main::@2
(label) main::@return
(void()*) main::f
(void()*) main::f#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3

Adding number conversion cast (unumber) 1 in (number~) main::$0 ← (byte) main::i#1 & (number) 1
Adding number conversion cast (unumber) main::$0 in (number~) main::$0 ← (byte) main::i#1 & (unumber)(number) 1
Adding number conversion cast (unumber) main::$2 in (number~) main::$2 ← (unumber~) main::$0 * (const byte) SIZEOF_POINTER
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$0 ← (byte) main::i#1 & (byte) 1
Inferred type updated to byte in (unumber~) main::$2 ← (byte~) main::$0 * (const byte) SIZEOF_POINTER
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [6] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Rewriting multiplication to use shift [7] (byte~) main::$2 ← (byte~) main::$0 * (const byte) SIZEOF_POINTER
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_POINTER
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [12] main::i#4 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @4
Renumbering block @3 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] (byte) main::i#1 ← ++ (byte) main::i#2
  [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1
  [8] (byte~) main::$2 ← (byte~) main::$0 << (byte) 1
  [9] (void()*) main::f#0 ← *((const void()**) fns + (byte~) main::$2)
  [10] call *((void()*) main::f#0) 
  to:main::@1

(void()) fn2()
fn2: scope:[fn2]  from
  [11] *((const byte*) fn2::BGCOL) ← ++ *((const byte*) fn2::BGCOL)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [12] return 
  to:@return

(void()) fn1()
fn1: scope:[fn1]  from
  [13] *((const byte*) fn1::BORDERCOL) ← ++ *((const byte*) fn1::BORDERCOL)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) fn1()
(void()) fn2()
(void()) main()
(byte~) main::$0 202.0
(byte~) main::$2 202.0
(void()*) main::f
(void()*) main::f#0 101.0
(byte) main::i
(byte) main::i#1 60.599999999999994
(byte) main::i#2 202.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::f#0 to live range equivalence class [ main::f#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$0 ]
[ main::$2 ]
[ main::f#0 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::$0 ]
Allocated zp[1]:4 [ main::$2 ]
Allocated zp[2]:5 [ main::f#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests calling into arrays of pointers to non-args no-return functions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label __0 = 3
    .label __2 = 4
    .label i = 2
    .label f = 5
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z i
    sta.z __0
    // [8] (byte~) main::$2 ← (byte~) main::$0 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z __0
    asl
    sta.z __2
    // [9] (void()*) main::f#0 ← *((const void()**) fns + (byte~) main::$2) -- pprz1=pptc1_derefidx_vbuz2 
    ldy.z __2
    lda fns,y
    sta.z f
    lda fns+1,y
    sta.z f+1
    // [10] call *((void()*) main::f#0) 
    jsr bi_f
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
  bi_f:
    jmp (f)
}
  // fn2
fn2: {
    .label BGCOL = $d021
    // [11] *((const byte*) fn2::BGCOL) ← ++ *((const byte*) fn2::BGCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp __breturn
    // fn2::@return
  __breturn:
    // [12] return 
    rts
}
  // fn1
fn1: {
    .label BORDERCOL = $d020
    // [13] *((const byte*) fn1::BORDERCOL) ← ++ *((const byte*) fn1::BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp __breturn
    // fn1::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data
  fns: .word fn1, fn2

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (byte~) main::$2 ← (byte~) main::$0 << (byte) 1 [ main::i#1 main::$2 ] (  [ main::i#1 main::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [9] (void()*) main::f#0 ← *((const void()**) fns + (byte~) main::$2) [ main::i#1 main::f#0 ] (  [ main::i#1 main::f#0 ] { }  ) always clobbers reg byte a 
Statement [10] call *((void()*) main::f#0)  [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1 [ main::i#1 main::$0 ] (  [ main::i#1 main::$0 ] { }  ) always clobbers reg byte a 
Statement [8] (byte~) main::$2 ← (byte~) main::$0 << (byte) 1 [ main::i#1 main::$2 ] (  [ main::i#1 main::$2 ] { }  ) always clobbers reg byte a 
Statement [9] (void()*) main::f#0 ← *((const void()**) fns + (byte~) main::$2) [ main::i#1 main::f#0 ] (  [ main::i#1 main::f#0 ] { }  ) always clobbers reg byte a 
Statement [10] call *((void()*) main::f#0)  [ main::i#1 ] (  [ main::i#1 ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ main::$0 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ main::f#0 ] : zp[2]:5 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 262.6: zp[1]:2 [ main::i#2 main::i#1 ] 202: zp[1]:3 [ main::$0 ] 202: zp[1]:4 [ main::$2 ] 101: zp[2]:5 [ main::f#0 ] 
Uplift Scope [fn1] 
Uplift Scope [fn2] 
Uplift Scope [] 

Uplifting [main] best 582 combination zp[1]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$0 ] reg byte a [ main::$2 ] zp[2]:5 [ main::f#0 ] 
Uplifting [fn1] best 582 combination 
Uplifting [fn2] best 582 combination 
Uplifting [] best 582 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 582 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Allocated (was zp[2]:5) zp[2]:3 [ main::f#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests calling into arrays of pointers to non-args no-return functions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label i = 2
    .label f = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z i
    // [8] (byte~) main::$2 ← (byte~) main::$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [9] (void()*) main::f#0 ← *((const void()**) fns + (byte~) main::$2) -- pprz1=pptc1_derefidx_vbuaa 
    tay
    lda fns,y
    sta.z f
    lda fns+1,y
    sta.z f+1
    // [10] call *((void()*) main::f#0) 
    jsr bi_f
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
  bi_f:
    jmp (f)
}
  // fn2
fn2: {
    .label BGCOL = $d021
    // [11] *((const byte*) fn2::BGCOL) ← ++ *((const byte*) fn2::BGCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp __breturn
    // fn2::@return
  __breturn:
    // [12] return 
    rts
}
  // fn1
fn1: {
    .label BORDERCOL = $d020
    // [13] *((const byte*) fn1::BORDERCOL) ← ++ *((const byte*) fn1::BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp __breturn
    // fn1::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data
  fns: .word fn1, fn2

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1 with __b2
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) fn1()
(label) fn1::@return
(const byte*) fn1::BORDERCOL = (byte*) 53280
(void()) fn2()
(label) fn2::@return
(const byte*) fn2::BGCOL = (byte*) 53281
(const void()**) fns[(number) 2]  = { &(void()) fn1(), &(void()) fn2() }
(void()) main()
(byte~) main::$0 reg byte a 202.0
(byte~) main::$2 reg byte a 202.0
(label) main::@1
(label) main::@2
(void()*) main::f
(void()*) main::f#0 f zp[2]:3 101.0
(byte) main::i
(byte) main::i#1 i zp[1]:2 60.599999999999994
(byte) main::i#2 i zp[1]:2 202.0

zp[1]:2 [ main::i#2 main::i#1 ]
reg byte a [ main::$0 ]
reg byte a [ main::$2 ]
zp[2]:3 [ main::f#0 ]


FINAL ASSEMBLER
Score: 504

  // File Comments
// Tests calling into arrays of pointers to non-args no-return functions
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label i = 2
    .label f = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // main::@1
    // main::@2
  __b2:
    // f = fns[++i&1]
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // ++i&1
    // [7] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z i
    // f = fns[++i&1]
    // [8] (byte~) main::$2 ← (byte~) main::$0 << (byte) 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [9] (void()*) main::f#0 ← *((const void()**) fns + (byte~) main::$2) -- pprz1=pptc1_derefidx_vbuaa 
    tay
    lda fns,y
    sta.z f
    lda fns+1,y
    sta.z f+1
    // (*f)()
    // [10] call *((void()*) main::f#0) 
    jsr bi_f
    // [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b2
  bi_f:
    jmp (f)
}
  // fn2
fn2: {
    .label BGCOL = $d021
    // (*BGCOL)++;
    // [11] *((const byte*) fn2::BGCOL) ← ++ *((const byte*) fn2::BGCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    // fn2::@return
    // }
    // [12] return 
    rts
}
  // fn1
fn1: {
    .label BORDERCOL = $d020
    // (*BORDERCOL)++;
    // [13] *((const byte*) fn1::BORDERCOL) ← ++ *((const byte*) fn1::BORDERCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    // fn1::@return
    // }
    // [14] return 
    rts
}
  // File Data
  fns: .word fn1, fn2

