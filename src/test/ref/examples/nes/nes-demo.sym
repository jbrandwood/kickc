__constant struct RICOH_2A03 *APU = (struct RICOH_2A03 *) 16384
__constant char FLAG[] = { $54, $55, $56, $57 }
__constant char FLOOR[] = { $85, $85, $86, $86 }
__constant char * const FR_COUNTER = (char *) 16407
__constant const char JOY_DOWN = 4
__constant const char JOY_LEFT = 2
__constant const char JOY_RIGHT = 1
__constant const char JOY_UP = 8
__constant char * const MEMORY = (char *) 0
__constant char OFFSET_STRUCT_RICOH_2A03_DMC_FREQ = $10
__constant char OFFSET_STRUCT_RICOH_2A03_JOY1 = $16
__constant char OFFSET_STRUCT_RICOH_2A03_OAMDMA = $14
__constant char OFFSET_STRUCT_RICOH_2C02_OAMADDR = 3
__constant char OFFSET_STRUCT_RICOH_2C02_PPUADDR = 6
__constant char OFFSET_STRUCT_RICOH_2C02_PPUDATA = 7
__constant char OFFSET_STRUCT_RICOH_2C02_PPUMASK = 1
__constant char OFFSET_STRUCT_RICOH_2C02_PPUSCROLL = 5
__constant char OFFSET_STRUCT_RICOH_2C02_PPUSTATUS = 2
__constant char OFFSET_STRUCT_SPRITEDATA_X = 3
__constant char PALETTE[$20] = { $11, $2d, 8, $18, $11, 6, $15, $36, $11, $39, $4a, $5b, $f, $3d, $4e, $5f, $11, $f, $30, 8, $11, $f, $18, 8, $11, $30, $37, $1a, $f, $f, $f, $f }
__constant struct RICOH_2C02 *PPU = (struct RICOH_2C02 *) 8192
__constant char * const PPU_ATTRIBUTE_TABLE_0 = (char *) 9152
__constant char * const PPU_NAME_TABLE_0 = (char *) 8192
__constant char * const PPU_PALETTE = (char *) 16128
__constant volatile char * const PPU_PPUSTATUS = (char *) 8194
__constant char SIZEOF_CHAR = 1
__constant char SIZEOF_STRUCT_SPRITEDATA = 4
__constant struct SpriteData SPRITES[] = { { y: $96, tile: $36, attributes: 2, x: $c }, { y: $96, tile: $37, attributes: 2, x: $14 }, { y: $9e, tile: $38, attributes: 2, x: $c }, { y: $9e, tile: $39, attributes: 2, x: $14 }, { y: $96, tile: $70, attributes: 0, x: $48 }, { y: $96, tile: $71, attributes: 0, x: $50 }, { y: $9e, tile: $72, attributes: 1, x: $48 }, { y: $9e, tile: $73, attributes: 1, x: $50 } }
__constant struct SpriteData SPRITE_BUFFER[$40] = { fill( $40, 0) }
__constant char TILES[] = kickasm {{ .import binary "smb1_chr.bin"
 }}
__constant void (*VECTORS[])() = { &vblank, &main, 0 }
void main()
char main::initNES1_i
char main::initNES1_i#1 // reg byte x 16.5
char main::initNES1_i#2 // reg byte x 12.222222222222221
char main::initNES1_waitForVBlank1_$0 // reg byte a 22.0
char main::initNES1_waitForVBlank2_$0 // reg byte a 22.0
char main::x
char main::x#1 // reg byte x 22.0
char main::x#2 // reg byte x 8.8
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
__constant void *memcpy::destination#0 = (void *)SPRITE_BUFFER // destination
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:6 101.0
char *memcpy::dst#2 // dst zp[2]:6 101.0
unsigned int memcpy::num
__constant unsigned int memcpy::num#0 = 8*SIZEOF_STRUCT_SPRITEDATA // num
void *memcpy::return
void *memcpy::source
__constant void *memcpy::source#0 = (void *)SPRITES // source
char *memcpy::src
char *memcpy::src#1 // src zp[2]:4 202.0
char *memcpy::src#2 // src zp[2]:4 101.0
char *memcpy::src_end
__constant char *memcpy::src_end#0 = (char *)memcpy::source#0+memcpy::num#0 // src_end
void ppuDataFill(void * const ppuData , char val , unsigned int size)
unsigned int ppuDataFill::i
unsigned int ppuDataFill::i#1 // i zp[2]:2 202.0
unsigned int ppuDataFill::i#2 // i zp[2]:2 101.0
void * const ppuDataFill::ppuData
char ppuDataFill::ppuDataPrepare1_$0 // reg byte a 22.0
char ppuDataFill::ppuDataPrepare1_$1 // reg byte a 22.0
void * const ppuDataFill::ppuDataPrepare1_ppuData
void * const ppuDataFill::ppuDataPrepare1_ppuData#0 // ppuDataPrepare1_ppuData zp[2]:4 7.333333333333333
char ppuDataFill::ppuDataPut1_val
unsigned int ppuDataFill::size
unsigned int ppuDataFill::size#3 // size zp[2]:6 11.222222222222221
char ppuDataFill::val
char ppuDataFill::val#4 // reg byte x 11.222222222222221
void ppuDataPutTile(void * const ppuData , char *tile)
void * const ppuDataPutTile::ppuData
char * const ppuDataPutTile::ppuData#0 // ppuData zp[2]:2 11.0
void * const ppuDataPutTile::ppuData#2 // ppuData zp[2]:2 23.666666666666664
void * const ppuDataPutTile::ppuData#9 // ppuData zp[2]:2 22.0
char ppuDataPutTile::ppuDataPrepare1_$0 // reg byte a 202.0
char ppuDataPutTile::ppuDataPrepare1_$1 // reg byte a 202.0
void * const ppuDataPutTile::ppuDataPrepare1_ppuData
char ppuDataPutTile::ppuDataPrepare2_$0 // reg byte a 202.0
char ppuDataPutTile::ppuDataPrepare2_$1 // reg byte a 202.0
void * const ppuDataPutTile::ppuDataPrepare2_ppuData
char * const ppuDataPutTile::ppuDataPrepare2_ppuData#0 // ppuDataPrepare2_ppuData zp[2]:2 33.666666666666664
char ppuDataPutTile::ppuDataPut1_val
char ppuDataPutTile::ppuDataPut1_val#0 // reg byte a 202.0
char ppuDataPutTile::ppuDataPut2_val
char ppuDataPutTile::ppuDataPut2_val#0 // reg byte a 202.0
char ppuDataPutTile::ppuDataPut3_val
char ppuDataPutTile::ppuDataPut3_val#0 // reg byte a 202.0
char ppuDataPutTile::ppuDataPut4_val
char ppuDataPutTile::ppuDataPut4_val#0 // reg byte a 202.0
char *ppuDataPutTile::tile
char *ppuDataPutTile::tile#10 // tile zp[2]:4 25.25
void ppuDataTransfer(void * const ppuData , void * const cpuData , unsigned int size)
void * const ppuDataTransfer::cpuData
__constant void * const ppuDataTransfer::cpuData#0 = (void * const )PALETTE // cpuData
char *ppuDataTransfer::cpuSrc
char *ppuDataTransfer::cpuSrc#1 // cpuSrc zp[2]:6 101.0
char *ppuDataTransfer::cpuSrc#2 // cpuSrc zp[2]:6 75.75
unsigned int ppuDataTransfer::i
unsigned int ppuDataTransfer::i#1 // i zp[2]:4 202.0
unsigned int ppuDataTransfer::i#2 // i zp[2]:4 60.599999999999994
void * const ppuDataTransfer::ppuData
__constant void * const ppuDataTransfer::ppuData#0 = (void * const )PPU_PALETTE // ppuData
void * const ppuDataTransfer::ppuDataPrepare1_ppuData
char ppuDataTransfer::ppuDataPut1_val
char ppuDataTransfer::ppuDataPut1_val#0 // reg byte a 202.0
unsigned int ppuDataTransfer::size
__constant unsigned int ppuDataTransfer::size#0 = $20*SIZEOF_CHAR // size
char readJoy1()
char readJoy1::$1 // zp[1]:8 101.0
char readJoy1::$2 // reg byte a 202.0
char readJoy1::i
char readJoy1::i#1 // reg byte x 202.0
char readJoy1::i#2 // reg byte x 60.599999999999994
char readJoy1::joy
char readJoy1::joy#1 // reg byte a 101.0
char readJoy1::joy#2 // reg byte a 51.0
char readJoy1::return
char readJoy1::return#2 // reg byte a 4.0
__interrupt(hardware_all) void vblank()
char vblank::$1 // reg byte a 4.0
char vblank::$3 // reg byte a 4.0
char vblank::$5 // reg byte a 4.0
char vblank::$7 // reg byte a 4.0
char vblank::joy
char vblank::joy#0 // reg byte x 0.5263157894736842
struct SpriteData *vblank::ppuSpriteBufferDmaTransfer1_spriteBuffer

reg byte x [ main::initNES1_i#2 main::initNES1_i#1 ]
reg byte x [ main::x#2 main::x#1 ]
reg byte x [ readJoy1::i#2 readJoy1::i#1 ]
reg byte a [ readJoy1::joy#2 readJoy1::joy#1 ]
reg byte x [ ppuDataFill::val#4 ]
zp[2]:2 [ ppuDataPutTile::ppuData#2 ppuDataPutTile::ppuData#9 ppuDataPutTile::ppuData#0 ppuDataPutTile::ppuDataPrepare2_ppuData#0 ppuDataFill::i#2 ppuDataFill::i#1 ]
zp[2]:4 [ memcpy::src#2 memcpy::src#1 ppuDataPutTile::tile#10 ppuDataFill::ppuDataPrepare1_ppuData#0 ppuDataTransfer::i#2 ppuDataTransfer::i#1 ]
zp[2]:6 [ memcpy::dst#2 memcpy::dst#1 ppuDataFill::size#3 ppuDataTransfer::cpuSrc#2 ppuDataTransfer::cpuSrc#1 ]
reg byte a [ readJoy1::return#2 ]
reg byte x [ vblank::joy#0 ]
reg byte a [ vblank::$1 ]
reg byte a [ vblank::$3 ]
reg byte a [ vblank::$5 ]
reg byte a [ vblank::$7 ]
reg byte a [ main::initNES1_waitForVBlank1_$0 ]
reg byte a [ main::initNES1_waitForVBlank2_$0 ]
zp[1]:8 [ readJoy1::$1 ]
reg byte a [ readJoy1::$2 ]
reg byte a [ ppuDataTransfer::ppuDataPut1_val#0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataFill::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare1_$0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare1_$1 ]
reg byte a [ ppuDataPutTile::ppuDataPut1_val#0 ]
reg byte a [ ppuDataPutTile::ppuDataPut2_val#0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare2_$0 ]
reg byte a [ ppuDataPutTile::ppuDataPrepare2_$1 ]
reg byte a [ ppuDataPutTile::ppuDataPut3_val#0 ]
reg byte a [ ppuDataPutTile::ppuDataPut4_val#0 ]
