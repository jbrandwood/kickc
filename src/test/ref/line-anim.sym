constant byte* BITMAP = (byte*) 40960
constant byte* const BORDER_COLOR = (byte*) 53280
constant struct MOS6526_CIA* const CIA2 = (struct MOS6526_CIA*) 56576
constant byte* const D011 = (byte*) 53265
constant byte* const D018 = (byte*) 53272
constant const byte DELAY = 8
constant byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
constant byte* const PROCPORT = (byte*) 1
constant byte* const PROCPORT_DDR = (byte*) 0
constant const byte PROCPORT_DDR_MEMORY_MASK = 7
constant const byte PROCPORT_RAM_IO = 5
constant byte* const RASTER = (byte*) 53266
constant byte* SCREEN = (byte*) 34816
constant const byte SIZE = 4
constant const byte VICII_BMM = $20
constant const byte VICII_DEN = $10
constant const byte VICII_RSEL = 8
void bitmap_clear()
byte* bitmap_clear::bitmap
word bitmap_clear::bitmap#0 bitmap zp[2]:3 11.0
byte* bitmap_clear::bitmap#1 bitmap zp[2]:3 420.59999999999997
byte* bitmap_clear::bitmap#2 bitmap zp[2]:3 1552.0
byte* bitmap_clear::bitmap#3 bitmap zp[2]:3 213.0
byte* bitmap_clear::bitmap#5 bitmap zp[2]:3 22.0
byte bitmap_clear::x
byte bitmap_clear::x#1 reg byte x 1501.5
byte bitmap_clear::x#2 reg byte x 667.3333333333334
byte bitmap_clear::y
byte bitmap_clear::y#1 y zp[1]:9 151.5
byte bitmap_clear::y#4 y zp[1]:9 33.666666666666664
void bitmap_init(byte* bitmap_init::bitmap)
byte~ bitmap_init::$4 reg byte a 202.0
byte~ bitmap_init::$5 reg byte a 202.0
byte~ bitmap_init::$6 reg byte a 202.0
byte~ bitmap_init::$7 zp[1]:9 50.5
byte* bitmap_init::bitmap
byte bitmap_init::bits
byte bitmap_init::bits#1 reg byte a 101.0
byte bitmap_init::bits#3 reg byte a 151.5
byte bitmap_init::bits#4 reg byte a 67.33333333333333
byte bitmap_init::x
byte bitmap_init::x#1 reg byte x 151.5
byte bitmap_init::x#2 reg byte x 50.5
byte bitmap_init::y
byte bitmap_init::y#1 reg byte x 151.5
byte bitmap_init::y#2 reg byte x 50.5
byte* bitmap_init::yoffs
byte* bitmap_init::yoffs#1 yoffs zp[2]:3 202.0
byte* bitmap_init::yoffs#2 yoffs zp[2]:3 63.125
byte* bitmap_init::yoffs#4 yoffs zp[2]:3 101.0
void bitmap_plot(word bitmap_plot::x , byte bitmap_plot::y)
word~ bitmap_plot::$0 zp[2]:18 202.0
byte~ bitmap_plot::$1 reg byte x 202.0
byte* bitmap_plot::plotter
word bitmap_plot::plotter#0 plotter zp[2]:16 50.5
byte* bitmap_plot::plotter#1 plotter zp[2]:16 151.5
word bitmap_plot::x
word bitmap_plot::x#0 x zp[2]:7 42.599999999999994
byte bitmap_plot::y
byte bitmap_plot::y#0 reg byte x 213.0
constant const byte* bitmap_plot_bit[$100]  = { fill( $100, 0) }
constant const byte* bitmap_plot_yhi[$100]  = { fill( $100, 0) }
constant const byte* bitmap_plot_ylo[$100]  = { fill( $100, 0) }
constant byte* delay[SIZE]  = { fill( SIZE, 0) }
signed word divr16s(signed word divr16s::dividend , signed word divr16s::divisor , signed word divr16s::rem)
signed word divr16s::dividend
word divr16s::dividendu
signed word divr16s::divisor
signed word divr16s::divisor#0 divisor zp[2]:18 233.66666666666669
word divr16s::divisoru
signed word divr16s::divisoru#1 divisoru zp[2]:18 500.5
word divr16s::divisoru#3 divisoru zp[2]:18 3003.0
word divr16s::divisoru#4 divisoru zp[2]:18 2002.0
word divr16s::divisoru#5 divisoru zp[2]:18 2002.0
byte divr16s::neg
byte divr16s::neg#2 reg byte y 1001.0
byte divr16s::neg#3 reg byte y 500.5
byte divr16s::neg#4 reg byte y 500.5
signed word divr16s::rem
signed word divr16s::rem#0 rem zp[2]:16 701.0
word divr16s::remu
signed word divr16s::remu#1 remu zp[2]:16 1001.0
word divr16s::remu#3 remu zp[2]:16 375.375
word divr16s::remu#7 remu zp[2]:16 2002.0
word divr16s::remu#8 remu zp[2]:16 2002.0
word divr16s::resultu
word divr16s::resultu#0 resultu zp[2]:5 500.5
signed word divr16s::return
signed word divr16s::return#1 return zp[2]:5 2002.0
signed word divr16s::return#2 return zp[2]:5 701.0
signed word divr16s::return#3 return zp[2]:5 202.0
signed word divr16s::return#6 return zp[2]:5 2002.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 2000002.0
byte~ divr16u::$2 reg byte a 2000002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:10 250000.25
word divr16u::dividend#2 dividend zp[2]:10 428571.85714285716
word divr16u::divisor
word divr16u::divisor#0 divisor zp[2]:18 111166.83333333333
byte divr16u::i
byte divr16u::i#1 reg byte x 1500001.5
byte divr16u::i#2 reg byte x 153846.3076923077
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:5 1500001.5
word divr16u::quotient#2 quotient zp[2]:5 1000001.0
word divr16u::quotient#3 quotient zp[2]:5 250000.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:16 750000.75
word divr16u::rem#1 rem zp[2]:16 2000002.0
word divr16u::rem#2 rem zp[2]:16 2000002.0
word divr16u::rem#3 rem zp[2]:16 5501.0
word divr16u::rem#4 rem zp[2]:16 2010003.0
word divr16u::rem#5 rem zp[2]:16 1000001.0
word divr16u::rem#9 rem zp[2]:16 1000001.0
word divr16u::return
word divr16u::return#0 return zp[2]:5 600200.8
word divr16u::return#2 return zp[2]:5 2002.0
void main()
byte~ main::$10 reg byte a 22.0
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 7.857142857142857
byte* main::toD0181_gfx
byte main::toD0181_return
constant byte main::toD0181_return#0 toD0181_return = >(word)SCREEN&$3fff*4|>(word)BITMAP/4&$f
byte* main::toD0181_screen
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx
byte main::vicSelectGfxBank1_toDd001_return
constant byte main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = 3^>(word)SCREEN/$40
void point_init(byte point_init::point_idx)
byte~ point_init::$10 reg byte a 101.0
byte~ point_init::$13 zp[1]:9 13.03225806451613
signed word~ point_init::$17 zp[2]:16 101.0
signed word~ point_init::$18 zp[2]:10 202.0
word~ point_init::$19 zp[2]:14 202.0
word~ point_init::$5 zp[2]:12 202.0
word~ point_init::$6 zp[2]:14 202.0
byte~ point_init::$9 reg byte a 202.0
word point_init::abs16s1_return
signed word point_init::abs16s1_return#0 abs16s1_return zp[2]:3 101.0
word point_init::abs16s1_return#2 abs16s1_return zp[2]:3 50.5
word point_init::abs16s1_return#5 abs16s1_return zp[2]:3 202.0
word point_init::abs16s1_return#6 abs16s1_return zp[2]:3 202.0
signed word point_init::abs16s1_w
word point_init::abs16s2_return
signed word point_init::abs16s2_return#0 abs16s2_return zp[2]:7 101.0
word point_init::abs16s2_return#2 abs16s2_return zp[2]:7 303.0
word point_init::abs16s2_return#5 abs16s2_return zp[2]:7 202.0
word point_init::abs16s2_return#6 abs16s2_return zp[2]:7 202.0
signed word point_init::abs16s2_w
byte point_init::point_idx
byte point_init::point_idx#0 point_idx zp[1]:2 15.636363636363637
signed word point_init::x_diff
signed word point_init::x_diff#1 x_diff zp[2]:18 28.055555555555554
signed word point_init::x_stepf
signed word point_init::x_stepf#0 x_stepf zp[2]:5 202.0
signed word point_init::y_diff
signed word point_init::y_diff#0 y_diff zp[2]:16 25.25
void screen_fill(byte* screen_fill::screen , byte screen_fill::ch)
byte screen_fill::ch
constant byte screen_fill::ch#0 ch = $10
byte* screen_fill::screen
byte* screen_fill::screen#1 screen zp[2]:3 420.59999999999997
byte* screen_fill::screen#2 screen zp[2]:3 1552.0
byte* screen_fill::screen#3 screen zp[2]:3 202.0
byte screen_fill::x
byte screen_fill::x#1 reg byte x 1501.5
byte screen_fill::x#2 reg byte x 667.3333333333334
byte screen_fill::y
byte screen_fill::y#1 y zp[1]:9 151.5
byte screen_fill::y#4 y zp[1]:9 33.666666666666664
constant signed byte* x_add[SIZE]  = { fill( SIZE, 0) }
constant word* x_cur[SIZE]  = { fill( SIZE, 0) }
constant word* x_end[SIZE]  = { $14, $a, $14, $14 }
constant word* x_start[SIZE]  = { $a, $14, $1e, $1e }
constant signed byte* y_add[SIZE]  = { fill( SIZE, 0) }
constant word* y_cur[SIZE]  = { fill( SIZE, 0) }
constant byte* y_end[SIZE]  = { $14, $14, $a, $14 }
constant byte* y_start[SIZE]  = { $a, $a, $a, $14 }

zp[1]:2 [ main::i#2 main::i#1 point_init::point_idx#0 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte x [ screen_fill::x#2 screen_fill::x#1 ]
zp[2]:3 [ point_init::abs16s1_return#2 point_init::abs16s1_return#5 point_init::abs16s1_return#6 point_init::abs16s1_return#0 screen_fill::screen#2 screen_fill::screen#3 screen_fill::screen#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
reg byte y [ divr16s::neg#4 divr16s::neg#2 divr16s::neg#3 ]
zp[2]:5 [ divr16s::return#2 divr16s::return#6 divr16s::return#1 divr16s::resultu#0 divr16s::return#3 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 point_init::x_stepf#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte a [ main::$10 ]
zp[2]:7 [ bitmap_plot::x#0 point_init::abs16s2_return#2 point_init::abs16s2_return#5 point_init::abs16s2_return#6 point_init::abs16s2_return#0 ]
reg byte x [ bitmap_plot::y#0 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
zp[1]:9 [ point_init::$13 bitmap_init::$7 screen_fill::y#4 screen_fill::y#1 bitmap_clear::y#4 bitmap_clear::y#1 ]
zp[2]:10 [ point_init::$18 divr16u::dividend#2 divr16u::dividend#0 ]
zp[2]:12 [ point_init::$5 ]
zp[2]:14 [ point_init::$19 point_init::$6 ]
reg byte a [ point_init::$9 ]
reg byte a [ point_init::$10 ]
zp[2]:16 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 divr16s::remu#3 divr16s::remu#7 divr16s::remu#8 divr16u::rem#4 divr16u::rem#3 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 divr16s::rem#0 divr16s::remu#1 point_init::$17 point_init::y_diff#0 ]
zp[2]:18 [ bitmap_plot::$0 divr16s::divisoru#3 divr16s::divisoru#4 divr16s::divisoru#5 divr16s::divisor#0 divr16u::divisor#0 divr16s::divisoru#1 point_init::x_diff#1 ]
reg byte x [ bitmap_plot::$1 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
