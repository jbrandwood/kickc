
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = $64
  main::s#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@5
  main::s#6 = phi( main/main::s#0, main::@4/main::s#1, main::@5/main::s#2 )
  main::i#2 = phi( main/main::i#0, main::@4/main::i#4, main::@5/main::i#5 )
  main::i#1 = -- main::i#2
  main::$0 = main::i#1 > 0
  if(main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::s#7 = phi( main::@1/main::s#6 )
  main::i#3 = phi( main::@1/main::i#1 )
  main::$1 = main::i#3 > $32
  if(main::$1) goto main::@4
  to:main::@5
main::@3: scope:[main]  from main::@1
  main::s#3 = phi( main::@1/main::s#6 )
  *main::SCREEN = main::s#3
  to:main::@return
main::@4: scope:[main]  from main::@2
  main::i#4 = phi( main::@2/main::i#3 )
  main::s#4 = phi( main::@2/main::s#7 )
  main::s#1 = ++ main::s#4
  to:main::@1
main::@5: scope:[main]  from main::@2
  main::i#5 = phi( main::@2/main::i#3 )
  main::s#5 = phi( main::@2/main::s#7 )
  main::s#2 = -- main::s#5
  to:main::@1
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool main::$0
bool main::$1
__constant char * const main::SCREEN = (char *)$400
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::i#5
char main::s
char main::s#0
char main::s#1
char main::s#2
char main::s#3
char main::s#4
char main::s#5
char main::s#6
char main::s#7

Adding number conversion cast (unumber) 0 in main::$0 = main::i#1 > 0
Adding number conversion cast (unumber) $32 in main::$1 = main::i#3 > $32
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $32
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $32
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::i#1 = main::i#3 main::i#4 main::i#5 
Alias main::s#3 = main::s#7 main::s#6 main::s#4 main::s#5 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [5] if(main::i#1>0) goto main::@2
Simple Condition main::$1 [7] if(main::i#1>$32) goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = $64
Constant main::s#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Rewriting conditional comparison [7] if(main::i#1>$32) goto main::@4
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $32+1 in [3] if(main::i#1>=$32+1) goto main::@4
Adding number conversion cast (unumber) 1 in [3] if(main::i#1>=(unumber)$32+1) goto main::@4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $32+(unumber)1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::s#0
Constant inlined main::i#0 = $64
Constant inlined main::s#0 = 0
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [8] main::i#7 = main::i#1
Coalesced [9] main::s#9 = main::s#2
Coalesced (already) [11] main::i#6 = main::i#1
Coalesced [12] main::s#8 = main::s#1
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@5
  [1] main::s#3 = phi( main/0, main::@4/main::s#1, main::@5/main::s#2 )
  [1] main::i#2 = phi( main/$64, main::@4/main::i#1, main::@5/main::i#1 )
  [2] main::i#1 = -- main::i#2
  [3] if(main::i#1>0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [4] *main::SCREEN = main::s#3
  to:main::@return
main::@return: scope:[main]  from main::@3
  [5] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [6] if(main::i#1>=$32+1) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@2
  [7] main::s#2 = -- main::s#3
  to:main::@1
main::@4: scope:[main]  from main::@2
  [8] main::s#1 = ++ main::s#3
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
char main::i
char main::i#1 // 11.0
char main::i#2 // 33.0
char main::s
char main::s#1 // 22.0
char main::s#2 // 22.0
char main::s#3 // 11.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#3 main::s#1 main::s#2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#3 main::s#1 main::s#2 ]
Allocated zp[1]:2 [ main::s#3 main::s#1 main::s#2 ]
Allocated zp[1]:3 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:3 [ main::i#2 main::i#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:2 [ main::s#3 main::s#1 main::s#2 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 55.5: zp[1]:2 [ main::s#3 main::s#1 main::s#2 ] 44: zp[1]:3 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 353 combination reg byte y [ main::s#3 main::s#1 main::s#2 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 353 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="loopsplit.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::s#3 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi main::i#2 = $64 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #$64
    jmp __b1
    // main::@1
  __b1:
    // [2] main::i#1 = -- main::i#2 -- vbuxx=_dec_vbuxx 
    dex
    // [3] if(main::i#1>0) goto main::@2 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [4] *main::SCREEN = main::s#3 -- _deref_pbuc1=vbuyy 
    sty SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
    // main::@2
  __b2:
    // [6] if(main::i#1>=$32+1) goto main::@4 -- vbuxx_ge_vbuc1_then_la1 
    cpx #$32+1
    bcs __b4
    jmp __b5
    // main::@5
  __b5:
    // [7] main::s#2 = -- main::s#3 -- vbuyy=_dec_vbuyy 
    dey
    // [1] phi from main::@4 main::@5 to main::@1 [phi:main::@4/main::@5->main::@1]
  __b1_from___b4:
  __b1_from___b5:
    // [1] phi main::s#3 = main::s#1 [phi:main::@4/main::@5->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@4/main::@5->main::@1#1] -- register_copy 
    jmp __b1
    // main::@4
  __b4:
    // [8] main::s#1 = ++ main::s#3 -- vbuyy=_inc_vbuyy 
    iny
    jmp __b1_from___b4
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b4 with __b1_from___b5
Removing instruction __b1_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b1 in jmp __b1_from___b5
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from___b5 to __b3
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction __b3:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
__constant char * const main::SCREEN = (char *) 1024
char main::i
char main::i#1 // reg byte x 11.0
char main::i#2 // reg byte x 33.0
char main::s
char main::s#1 // reg byte y 22.0
char main::s#2 // reg byte y 22.0
char main::s#3 // reg byte y 11.5

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::s#3 main::s#1 main::s#2 ]


FINAL ASSEMBLER
Score: 260

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="loopsplit.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::s#3 = 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi main::i#2 = $64 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #$64
    // main::@1
  __b1:
    // while(--i>0)
    // [2] main::i#1 = -- main::i#2 -- vbuxx=_dec_vbuxx 
    dex
    // [3] if(main::i#1>0) goto main::@2 -- vbuxx_gt_0_then_la1 
    cpx #0
    bne __b2
    // main::@3
    // *SCREEN = s
    // [4] *main::SCREEN = main::s#3 -- _deref_pbuc1=vbuyy 
    sty SCREEN
    // main::@return
    // }
    // [5] return 
    rts
    // main::@2
  __b2:
    // if(i>50)
    // [6] if(main::i#1>=$32+1) goto main::@4 -- vbuxx_ge_vbuc1_then_la1 
    cpx #$32+1
    bcs __b4
    // main::@5
    // s--;
    // [7] main::s#2 = -- main::s#3 -- vbuyy=_dec_vbuyy 
    dey
    // [1] phi from main::@4 main::@5 to main::@1 [phi:main::@4/main::@5->main::@1]
    // [1] phi main::s#3 = main::s#1 [phi:main::@4/main::@5->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@4/main::@5->main::@1#1] -- register_copy 
    jmp __b1
    // main::@4
  __b4:
    // s++;
    // [8] main::s#1 = ++ main::s#3 -- vbuyy=_inc_vbuyy 
    iny
    jmp __b1
}
  // File Data

