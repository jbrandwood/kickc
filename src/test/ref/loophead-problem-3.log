Inlined call vicSelectGfxBank::$0 = call toDd00(vicSelectGfxBank::gfx)
Eliminating unused variable with no statement main::$0
Eliminating unused variable with no statement main::$1

CONTROL FLOW GRAPH SSA

unsigned long mul16u(unsigned int a , unsigned int b)
mul16u: scope:[mul16u]  from main
  mul16u::a#5 = phi( main/mul16u::a#1 )
  mul16u::b#1 = phi( main/mul16u::b#0 )
  mul16u::res#0 = 0
  mul16u::mb#0 = (unsigned long)mul16u::b#1
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  mul16u::mb#5 = phi( mul16u/mul16u::mb#0, mul16u::@4/mul16u::mb#1 )
  mul16u::res#4 = phi( mul16u/mul16u::res#0, mul16u::@4/mul16u::res#6 )
  mul16u::a#2 = phi( mul16u/mul16u::a#5, mul16u::@4/mul16u::a#0 )
  mul16u::$0 = mul16u::a#2 != 0
  if(mul16u::$0) goto mul16u::@2
  to:mul16u::@3
mul16u::@2: scope:[mul16u]  from mul16u::@1
  mul16u::res#5 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::mb#4 = phi( mul16u::@1/mul16u::mb#5 )
  mul16u::a#3 = phi( mul16u::@1/mul16u::a#2 )
  mul16u::$1 = mul16u::a#3 & 1
  mul16u::$2 = mul16u::$1 != 0
  mul16u::$3 = ! mul16u::$2
  if(mul16u::$3) goto mul16u::@4
  to:mul16u::@5
mul16u::@3: scope:[mul16u]  from mul16u::@1
  mul16u::res#2 = phi( mul16u::@1/mul16u::res#4 )
  mul16u::return#0 = mul16u::res#2
  to:mul16u::@return
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@5
  mul16u::res#6 = phi( mul16u::@2/mul16u::res#5, mul16u::@5/mul16u::res#1 )
  mul16u::mb#2 = phi( mul16u::@2/mul16u::mb#4, mul16u::@5/mul16u::mb#3 )
  mul16u::a#4 = phi( mul16u::@2/mul16u::a#3, mul16u::@5/mul16u::a#6 )
  mul16u::$5 = mul16u::a#4 >> 1
  mul16u::a#0 = mul16u::$5
  mul16u::$6 = mul16u::mb#2 << 1
  mul16u::mb#1 = mul16u::$6
  to:mul16u::@1
mul16u::@5: scope:[mul16u]  from mul16u::@2
  mul16u::a#6 = phi( mul16u::@2/mul16u::a#3 )
  mul16u::mb#3 = phi( mul16u::@2/mul16u::mb#4 )
  mul16u::res#3 = phi( mul16u::@2/mul16u::res#5 )
  mul16u::$4 = mul16u::res#3 + mul16u::mb#3
  mul16u::res#1 = mul16u::$4
  to:mul16u::@4
mul16u::@return: scope:[mul16u]  from mul16u::@3
  mul16u::return#3 = phi( mul16u::@3/mul16u::return#0 )
  mul16u::return#1 = mul16u::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start
  mul16u::a#1 = 4
  mul16u::b#0 = $7b
  call mul16u
  mul16u::return#2 = mul16u::return#1
  to:main::@1
main::@1: scope:[main]  from main
  mul16u::return#4 = phi( main/mul16u::return#2 )
  main::result#0 = mul16u::return#4
  main::kaputt#0 = word0  main::result#0
  main::$2 = byte0  main::kaputt#0
  *BORDER_COLOR = main::$2
  main::$3 = byte1  main::kaputt#0
  *BG_COLOR = main::$3
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const BG_COLOR = (char *)$d021
__constant char * const BORDER_COLOR = (char *)$d020
void __start()
void main()
char main::$2
char main::$3
unsigned int main::kaputt
unsigned int main::kaputt#0
unsigned long main::result
unsigned long main::result#0
unsigned long mul16u(unsigned int a , unsigned int b)
bool mul16u::$0
number mul16u::$1
bool mul16u::$2
bool mul16u::$3
unsigned long mul16u::$4
unsigned int mul16u::$5
unsigned long mul16u::$6
unsigned int mul16u::a
unsigned int mul16u::a#0
unsigned int mul16u::a#1
unsigned int mul16u::a#2
unsigned int mul16u::a#3
unsigned int mul16u::a#4
unsigned int mul16u::a#5
unsigned int mul16u::a#6
unsigned int mul16u::b
unsigned int mul16u::b#0
unsigned int mul16u::b#1
unsigned long mul16u::mb
unsigned long mul16u::mb#0
unsigned long mul16u::mb#1
unsigned long mul16u::mb#2
unsigned long mul16u::mb#3
unsigned long mul16u::mb#4
unsigned long mul16u::mb#5
unsigned long mul16u::res
unsigned long mul16u::res#0
unsigned long mul16u::res#1
unsigned long mul16u::res#2
unsigned long mul16u::res#3
unsigned long mul16u::res#4
unsigned long mul16u::res#5
unsigned long mul16u::res#6
unsigned long mul16u::return
unsigned long mul16u::return#0
unsigned long mul16u::return#1
unsigned long mul16u::return#2
unsigned long mul16u::return#3
unsigned long mul16u::return#4

Adding number conversion cast (unumber) 0 in mul16u::$0 = mul16u::a#2 != 0
Adding number conversion cast (unumber) 1 in mul16u::$1 = mul16u::a#3 & 1
Adding number conversion cast (unumber) mul16u::$1 in mul16u::$1 = mul16u::a#3 & (unumber)1
Adding number conversion cast (unumber) 0 in mul16u::$2 = mul16u::$1 != 0
Adding number conversion cast (unumber) 1 in mul16u::$5 = mul16u::a#4 >> 1
Adding number conversion cast (unumber) 1 in mul16u::$6 = mul16u::mb#2 << 1
Adding number conversion cast (unumber) 4 in mul16u::a#1 = 4
Adding number conversion cast (unumber) $7b in mul16u::b#0 = $7b
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast mul16u::a#1 = (unumber)4
Inlining cast mul16u::b#0 = (unumber)$7b
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 53280
Simplifying constant pointer cast (char *) 53281
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast $7b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $7b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in mul16u::$1 = mul16u::a#3 & 1
Inversing boolean not [9] mul16u::$3 = mul16u::$1 == 0 from [8] mul16u::$2 = mul16u::$1 != 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias mul16u::a#2 = mul16u::a#3 mul16u::a#6 
Alias mul16u::mb#3 = mul16u::mb#4 mul16u::mb#5 
Alias mul16u::res#2 = mul16u::res#5 mul16u::res#4 mul16u::return#0 mul16u::res#3 mul16u::return#3 mul16u::return#1 
Alias mul16u::a#0 = mul16u::$5 
Alias mul16u::mb#1 = mul16u::$6 
Alias mul16u::res#1 = mul16u::$4 
Alias mul16u::return#2 = mul16u::return#4 
Successful SSA optimization Pass2AliasElimination
Alias mul16u::a#2 = mul16u::a#4 
Alias mul16u::mb#2 = mul16u::mb#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values mul16u::b#1 mul16u::b#0
Identical Phi Values mul16u::a#5 mul16u::a#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition mul16u::$0 [5] if(mul16u::a#2!=0) goto mul16u::@2
Simple Condition mul16u::$3 [8] if(mul16u::$1==0) goto mul16u::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant mul16u::res#0 = 0
Constant mul16u::a#1 = 4
Constant mul16u::b#0 = $7b
Successful SSA optimization Pass2ConstantIdentification
Constant mul16u::mb#0 = (unsigned long)mul16u::b#0
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings mul16u::res#0
Inlining constant with var siblings mul16u::a#1
Inlining constant with var siblings mul16u::mb#0
Constant inlined mul16u::mb#0 = (unsigned long)mul16u::b#0
Constant inlined mul16u::res#0 = 0
Constant inlined mul16u::a#1 = 4
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting mul16u::@6(between mul16u::@2 and mul16u::@4)
Adding NOP phi() at start of main
Adding NOP phi() at start of mul16u
Adding NOP phi() at start of mul16u::@3
CALL GRAPH
Calls in [main] to mul16u:1 

Created 4 initial phi equivalence classes
Coalesced [18] mul16u::res#9 = mul16u::res#1
Coalesced [22] mul16u::a#7 = mul16u::a#0
Coalesced [23] mul16u::res#7 = mul16u::res#6
Coalesced [24] mul16u::mb#6 = mul16u::mb#1
Coalesced (already) [25] mul16u::res#8 = mul16u::res#2
Coalesced down to 3 phi equivalence classes
Culled Empty Block label mul16u::@3
Culled Empty Block label mul16u::@6
Renumbering block mul16u::@4 to mul16u::@3
Renumbering block mul16u::@5 to mul16u::@4
Adding NOP phi() at start of main
Adding NOP phi() at start of mul16u

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call mul16u
  [2] mul16u::return#2 = mul16u::res#2
  to:main::@1
main::@1: scope:[main]  from main
  [3] main::result#0 = mul16u::return#2
  [4] main::kaputt#0 = word0  main::result#0
  [5] main::$2 = byte0  main::kaputt#0
  [6] *BORDER_COLOR = main::$2
  [7] main::$3 = byte1  main::kaputt#0
  [8] *BG_COLOR = main::$3
  to:main::@return
main::@return: scope:[main]  from main::@1
  [9] return 
  to:@return

unsigned long mul16u(unsigned int a , unsigned int b)
mul16u: scope:[mul16u]  from main
  [10] phi()
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [11] mul16u::mb#2 = phi( mul16u/(unsigned long)mul16u::b#0, mul16u::@3/mul16u::mb#1 )
  [11] mul16u::res#2 = phi( mul16u/0, mul16u::@3/mul16u::res#6 )
  [11] mul16u::a#2 = phi( mul16u/4, mul16u::@3/mul16u::a#0 )
  [12] if(mul16u::a#2!=0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [13] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [14] mul16u::$1 = mul16u::a#2 & 1
  [15] if(mul16u::$1==0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [16] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [17] mul16u::res#6 = phi( mul16u::@2/mul16u::res#2, mul16u::@4/mul16u::res#1 )
  [18] mul16u::a#0 = mul16u::a#2 >> 1
  [19] mul16u::mb#1 = mul16u::mb#2 << 1
  to:mul16u::@1


VARIABLE REGISTER WEIGHTS
void main()
char main::$2 // 4.0
char main::$3 // 4.0
unsigned int main::kaputt
unsigned int main::kaputt#0 // 2.0
unsigned long main::result
unsigned long main::result#0 // 4.0
unsigned long mul16u(unsigned int a , unsigned int b)
char mul16u::$1 // 202.0
unsigned int mul16u::a
unsigned int mul16u::a#0 // 101.0
unsigned int mul16u::a#2 // 67.33333333333333
unsigned int mul16u::b
unsigned long mul16u::mb
unsigned long mul16u::mb#1 // 202.0
unsigned long mul16u::mb#2 // 43.285714285714285
unsigned long mul16u::res
unsigned long mul16u::res#1 // 202.0
unsigned long mul16u::res#2 // 50.83333333333333
unsigned long mul16u::res#6 // 101.0
unsigned long mul16u::return
unsigned long mul16u::return#2 // 4.0

Initial phi equivalence classes
[ mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#1 ]
Added variable mul16u::return#2 to live range equivalence class [ mul16u::return#2 ]
Added variable main::result#0 to live range equivalence class [ main::result#0 ]
Added variable main::kaputt#0 to live range equivalence class [ main::kaputt#0 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable mul16u::$1 to live range equivalence class [ mul16u::$1 ]
Complete equivalence classes
[ mul16u::a#2 mul16u::a#0 ]
[ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
[ mul16u::mb#2 mul16u::mb#1 ]
[ mul16u::return#2 ]
[ main::result#0 ]
[ main::kaputt#0 ]
[ main::$2 ]
[ main::$3 ]
[ mul16u::$1 ]
Allocated zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ]
Allocated zp[4]:6 [ mul16u::mb#2 mul16u::mb#1 ]
Allocated zp[1]:10 [ mul16u::$1 ]
Allocated zp[2]:11 [ mul16u::a#2 mul16u::a#0 ]
Allocated zp[4]:13 [ mul16u::return#2 ]
Allocated zp[4]:17 [ main::result#0 ]
Allocated zp[1]:21 [ main::$2 ]
Allocated zp[1]:22 [ main::$3 ]
Allocated zp[2]:23 [ main::kaputt#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] mul16u::return#2 = mul16u::res#2 [ mul16u::return#2 ] (  [ mul16u::return#2 ] { { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [3] main::result#0 = mul16u::return#2 [ main::result#0 ] (  [ main::result#0 ] { }  ) always clobbers reg byte a 
Statement [4] main::kaputt#0 = word0  main::result#0 [ main::kaputt#0 ] (  [ main::kaputt#0 ] { }  ) always clobbers reg byte a 
Statement [12] if(mul16u::a#2!=0) goto mul16u::@2 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] ( mul16u:1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 ] { { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [14] mul16u::$1 = mul16u::a#2 & 1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] ( mul16u:1 [ mul16u::res#2 mul16u::a#2 mul16u::mb#2 mul16u::$1 ] { { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Statement [16] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] ( mul16u:1 [ mul16u::a#2 mul16u::mb#2 mul16u::res#1 ] { { mul16u::return#2 = mul16u::res#2 } }  ) always clobbers reg byte a 
Potential registers zp[2]:11 [ mul16u::a#2 mul16u::a#0 ] : zp[2]:11 , 
Potential registers zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] : zp[4]:2 , 
Potential registers zp[4]:6 [ mul16u::mb#2 mul16u::mb#1 ] : zp[4]:6 , 
Potential registers zp[4]:13 [ mul16u::return#2 ] : zp[4]:13 , 
Potential registers zp[4]:17 [ main::result#0 ] : zp[4]:17 , 
Potential registers zp[2]:23 [ main::kaputt#0 ] : zp[2]:23 , 
Potential registers zp[1]:21 [ main::$2 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ main::$3 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ mul16u::$1 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [mul16u] 353.83: zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] 245.29: zp[4]:6 [ mul16u::mb#2 mul16u::mb#1 ] 202: zp[1]:10 [ mul16u::$1 ] 168.33: zp[2]:11 [ mul16u::a#2 mul16u::a#0 ] 4: zp[4]:13 [ mul16u::return#2 ] 
Uplift Scope [main] 4: zp[4]:17 [ main::result#0 ] 4: zp[1]:21 [ main::$2 ] 4: zp[1]:22 [ main::$3 ] 2: zp[2]:23 [ main::kaputt#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [] 

Uplifting [mul16u] best 1620 combination zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] zp[4]:6 [ mul16u::mb#2 mul16u::mb#1 ] reg byte a [ mul16u::$1 ] zp[2]:11 [ mul16u::a#2 mul16u::a#0 ] zp[4]:13 [ mul16u::return#2 ] 
Uplifting [main] best 1608 combination zp[4]:17 [ main::result#0 ] reg byte a [ main::$2 ] reg byte a [ main::$3 ] zp[2]:23 [ main::kaputt#0 ] 
Uplifting [MOS6526_CIA] best 1608 combination 
Uplifting [MOS6569_VICII] best 1608 combination 
Uplifting [MOS6581_SID] best 1608 combination 
Uplifting [] best 1608 combination 
Coalescing zero page register [ zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 ] ] with [ zp[4]:13 [ mul16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 ] ] with [ zp[4]:17 [ main::result#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ main::kaputt#0 ] ] with [ zp[2]:11 [ mul16u::a#2 mul16u::a#0 ] ]
Allocated (was zp[2]:23) zp[2]:10 [ main::kaputt#0 mul16u::a#2 mul16u::a#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Program where loop-head optimization produces wrong return value
// Reported by Richard-William Loerakker
  // Upstart
  // Commodore 64 PRG executable file
.file [name="loophead-problem-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  /// $D020 Border Color
  .label BORDER_COLOR = $d020
  /// $D021 Background Color 0
  .label BG_COLOR = $d021
.segment Code
  // main
main: {
    .label result = 2
    .label kaputt = $a
    // [1] call mul16u
    // [10] phi from main to mul16u [phi:main->mul16u] -- call_phi_near 
  mul16u_from_main:
    jsr mul16u
    // [2] mul16u::return#2 = mul16u::res#2
    jmp __b1
    // main::@1
  __b1:
    // [3] main::result#0 = mul16u::return#2
    // [4] main::kaputt#0 = word0  main::result#0 -- vwuz1=_word0_vduz2 
    lda.z result
    sta.z kaputt
    lda.z result+1
    sta.z kaputt+1
    // [5] main::$2 = byte0  main::kaputt#0 -- vbuaa=_byte0_vwuz1 
    lda.z kaputt
    // [6] *BORDER_COLOR = main::$2 -- _deref_pbuc1=vbuaa 
    sta BORDER_COLOR
    // [7] main::$3 = byte1  main::kaputt#0 -- vbuaa=_byte1_vwuz1 
    lda.z kaputt+1
    // [8] *BG_COLOR = main::$3 -- _deref_pbuc1=vbuaa 
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// __zp(2) unsigned long mul16u(__zp($a) unsigned int a, unsigned int b)
mul16u: {
    .const b = $7b
    .label a = $a
    .label mb = 6
    .label res = 2
    .label return = 2
    // [11] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
  __b1_from_mul16u:
    // [11] phi mul16u::mb#2 = (unsigned long)mul16u::b#0 [phi:mul16u->mul16u::@1#0] -- vduz1=vduc1 
    lda #<b
    sta.z mb
    lda #>b
    sta.z mb+1
    lda #<b>>$10
    sta.z mb+2
    lda #>b>>$10
    sta.z mb+3
    // [11] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    lda #>0
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [11] phi mul16u::a#2 = 4 [phi:mul16u->mul16u::@1#2] -- vwuz1=vbuc1 
    lda #<4
    sta.z a
    lda #>4
    sta.z a+1
    jmp __b1
    // mul16u::@1
  __b1:
    // [12] if(mul16u::a#2!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    jmp __breturn
    // mul16u::@return
  __breturn:
    // [13] return 
    rts
    // mul16u::@2
  __b2:
    // [14] mul16u::$1 = mul16u::a#2 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // [15] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // mul16u::@4
  __b4:
    // [16] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    clc
    lda.z res
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [17] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [17] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    jmp __b3
    // mul16u::@3
  __b3:
    // [18] mul16u::a#0 = mul16u::a#2 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // [19] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [11] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
  __b1_from___b3:
    // [11] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [11] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [11] phi mul16u::a#2 = mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b3_from___b2 with __b3
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction mul16u_from_main:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_mul16u:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const BG_COLOR = (char *) 53281
__constant char * const BORDER_COLOR = (char *) 53280
void main()
char main::$2 // reg byte a 4.0
char main::$3 // reg byte a 4.0
unsigned int main::kaputt
unsigned int main::kaputt#0 // kaputt zp[2]:10 2.0
unsigned long main::result
unsigned long main::result#0 // result zp[4]:2 4.0
unsigned long mul16u(unsigned int a , unsigned int b)
char mul16u::$1 // reg byte a 202.0
unsigned int mul16u::a
unsigned int mul16u::a#0 // a zp[2]:10 101.0
unsigned int mul16u::a#2 // a zp[2]:10 67.33333333333333
unsigned int mul16u::b
__constant unsigned int mul16u::b#0 = $7b // b
unsigned long mul16u::mb
unsigned long mul16u::mb#1 // mb zp[4]:6 202.0
unsigned long mul16u::mb#2 // mb zp[4]:6 43.285714285714285
unsigned long mul16u::res
unsigned long mul16u::res#1 // res zp[4]:2 202.0
unsigned long mul16u::res#2 // res zp[4]:2 50.83333333333333
unsigned long mul16u::res#6 // res zp[4]:2 101.0
unsigned long mul16u::return
unsigned long mul16u::return#2 // return zp[4]:2 4.0

zp[4]:2 [ mul16u::res#2 mul16u::res#6 mul16u::res#1 mul16u::return#2 main::result#0 ]
zp[4]:6 [ mul16u::mb#2 mul16u::mb#1 ]
zp[2]:10 [ main::kaputt#0 mul16u::a#2 mul16u::a#0 ]
reg byte a [ main::$2 ]
reg byte a [ main::$3 ]
reg byte a [ mul16u::$1 ]


FINAL ASSEMBLER
Score: 1414

  // File Comments
// Program where loop-head optimization produces wrong return value
// Reported by Richard-William Loerakker
  // Upstart
  // Commodore 64 PRG executable file
.file [name="loophead-problem-3.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  /// $D020 Border Color
  .label BORDER_COLOR = $d020
  /// $D021 Background Color 0
  .label BG_COLOR = $d021
.segment Code
  // main
main: {
    .label result = 2
    .label kaputt = $a
    // dword result = mul16u(4,123)
    // [1] call mul16u
    // [10] phi from main to mul16u [phi:main->mul16u] -- call_phi_near 
    jsr mul16u
    // dword result = mul16u(4,123)
    // [2] mul16u::return#2 = mul16u::res#2
    // main::@1
    // [3] main::result#0 = mul16u::return#2
    // word kaputt = WORD0(result)
    // [4] main::kaputt#0 = word0  main::result#0 -- vwuz1=_word0_vduz2 
    lda.z result
    sta.z kaputt
    lda.z result+1
    sta.z kaputt+1
    // BYTE0(kaputt)
    // [5] main::$2 = byte0  main::kaputt#0 -- vbuaa=_byte0_vwuz1 
    lda.z kaputt
    // *BORDER_COLOR = BYTE0(kaputt)
    // [6] *BORDER_COLOR = main::$2 -- _deref_pbuc1=vbuaa 
    sta BORDER_COLOR
    // BYTE1(kaputt)
    // [7] main::$3 = byte1  main::kaputt#0 -- vbuaa=_byte1_vwuz1 
    lda.z kaputt+1
    // *BG_COLOR = BYTE1(kaputt)
    // [8] *BG_COLOR = main::$3 -- _deref_pbuc1=vbuaa 
    sta BG_COLOR
    // main::@return
    // }
    // [9] return 
    rts
}
  // mul16u
// Perform binary multiplication of two unsigned 16-bit unsigned ints into a 32-bit unsigned long
// __zp(2) unsigned long mul16u(__zp($a) unsigned int a, unsigned int b)
mul16u: {
    .const b = $7b
    .label a = $a
    .label mb = 6
    .label res = 2
    .label return = 2
    // [11] phi from mul16u to mul16u::@1 [phi:mul16u->mul16u::@1]
    // [11] phi mul16u::mb#2 = (unsigned long)mul16u::b#0 [phi:mul16u->mul16u::@1#0] -- vduz1=vduc1 
    lda #<b
    sta.z mb
    lda #>b
    sta.z mb+1
    lda #<b>>$10
    sta.z mb+2
    lda #>b>>$10
    sta.z mb+3
    // [11] phi mul16u::res#2 = 0 [phi:mul16u->mul16u::@1#1] -- vduz1=vduc1 
    lda #<0
    sta.z res
    sta.z res+1
    lda #<0>>$10
    sta.z res+2
    lda #>0>>$10
    sta.z res+3
    // [11] phi mul16u::a#2 = 4 [phi:mul16u->mul16u::@1#2] -- vwuz1=vbuc1 
    lda #<4
    sta.z a
    lda #>4
    sta.z a+1
    // mul16u::@1
  __b1:
    // while(a!=0)
    // [12] if(mul16u::a#2!=0) goto mul16u::@2 -- vwuz1_neq_0_then_la1 
    lda.z a
    ora.z a+1
    bne __b2
    // mul16u::@return
    // }
    // [13] return 
    rts
    // mul16u::@2
  __b2:
    // a&1
    // [14] mul16u::$1 = mul16u::a#2 & 1 -- vbuaa=vwuz1_band_vbuc1 
    lda #1
    and.z a
    // if( (a&1) != 0)
    // [15] if(mul16u::$1==0) goto mul16u::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // mul16u::@4
    // res = res + mb
    // [16] mul16u::res#1 = mul16u::res#2 + mul16u::mb#2 -- vduz1=vduz1_plus_vduz2 
    clc
    lda.z res
    adc.z mb
    sta.z res
    lda.z res+1
    adc.z mb+1
    sta.z res+1
    lda.z res+2
    adc.z mb+2
    sta.z res+2
    lda.z res+3
    adc.z mb+3
    sta.z res+3
    // [17] phi from mul16u::@2 mul16u::@4 to mul16u::@3 [phi:mul16u::@2/mul16u::@4->mul16u::@3]
    // [17] phi mul16u::res#6 = mul16u::res#2 [phi:mul16u::@2/mul16u::@4->mul16u::@3#0] -- register_copy 
    // mul16u::@3
  __b3:
    // a = a>>1
    // [18] mul16u::a#0 = mul16u::a#2 >> 1 -- vwuz1=vwuz1_ror_1 
    lsr.z a+1
    ror.z a
    // mb = mb<<1
    // [19] mul16u::mb#1 = mul16u::mb#2 << 1 -- vduz1=vduz1_rol_1 
    asl.z mb
    rol.z mb+1
    rol.z mb+2
    rol.z mb+3
    // [11] phi from mul16u::@3 to mul16u::@1 [phi:mul16u::@3->mul16u::@1]
    // [11] phi mul16u::mb#2 = mul16u::mb#1 [phi:mul16u::@3->mul16u::@1#0] -- register_copy 
    // [11] phi mul16u::res#2 = mul16u::res#6 [phi:mul16u::@3->mul16u::@1#1] -- register_copy 
    // [11] phi mul16u::a#2 = mul16u::a#0 [phi:mul16u::@3->mul16u::@1#2] -- register_copy 
    jmp __b1
}
  // File Data

