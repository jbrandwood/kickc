
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::w#0 = $3039
  main::i#0 = 0
  main::$7 = main::i#0 * SIZEOF_WORD
  main::SCREEN[main::$7] = main::w#0
  main::i#1 = ++ main::i#0
  main::$4 = 1
  main::w#1 = main::w#0 byte0= main::$4
  main::$8 = main::i#1 * SIZEOF_WORD
  main::SCREEN[main::$8] = main::w#1
  main::i#2 = ++ main::i#1
  main::$5 = 2
  main::w#2 = main::w#1 byte1= main::$5
  main::$9 = main::i#2 * SIZEOF_WORD
  main::SCREEN[main::$9] = main::w#2
  main::i#3 = ++ main::i#2
  main::j#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#7 = phi( main/main::i#3, main::@2/main::i#5 )
  main::j#2 = phi( main/main::j#0, main::@2/main::j#1 )
  main::$2 = main::j#2 < 2
  if(main::$2) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  main::i#6 = phi( main::@1/main::i#7 )
  main::j#3 = phi( main::@1/main::j#2 )
  main::$10 = main::j#3 * SIZEOF_WORD
  main::$11 = main::i#6 * SIZEOF_WORD
  main::SCREEN[main::$11] = main::ws[main::$10]
  main::i#4 = ++ main::i#6
  main::$6 = 2
  main::$12 = main::j#3 * SIZEOF_WORD
  main::ws[main::$12] = main::ws[main::$12] byte0= main::$6
  main::$13 = main::j#3 * SIZEOF_WORD
  main::$14 = main::i#4 * SIZEOF_WORD
  main::SCREEN[main::$14] = main::ws[main::$13]
  main::i#5 = ++ main::i#4
  main::j#1 = ++ main::j#3
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
constant byte SIZEOF_WORD = 2
void __start()
void main()
byte~ main::$10
byte~ main::$11
byte~ main::$12
byte~ main::$13
byte~ main::$14
bool~ main::$2
byte~ main::$4
byte~ main::$5
byte~ main::$6
byte~ main::$7
byte~ main::$8
byte~ main::$9
constant word* const main::SCREEN = (word*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte main::i#5
byte main::i#6
byte main::i#7
byte main::j
byte main::j#0
byte main::j#1
byte main::j#2
byte main::j#3
word main::w
word main::w#0
word main::w#1
word main::w#2
constant word* main::ws[]  = { $5ba0, $8707 }

Adding number conversion cast (unumber) 1 in main::$4 = 1
Adding number conversion cast (unumber) 2 in main::$5 = 2
Adding number conversion cast (unumber) 2 in main::$2 = main::j#2 < 2
Adding number conversion cast (unumber) 2 in main::$6 = 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::$4 = (unumber)1
Inlining cast main::$5 = (unumber)2
Inlining cast main::$6 = (unumber)2
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (word*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::j#2 = main::j#3 
Alias main::i#6 = main::i#7 
Successful SSA optimization Pass2AliasElimination
Identified duplicate assignment right side [25] main::$12 = main::j#2 * SIZEOF_WORD
Identified duplicate assignment right side [27] main::$13 = main::j#2 * SIZEOF_WORD
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition main::$2 [18] if(main::j#2<2) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::w#0 = $3039
Constant main::i#0 = 0
Constant main::$4 = 1
Constant main::$5 = 2
Constant main::j#0 = 0
Constant main::$6 = 2
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Alias main::$12 = main::$10 main::$13 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] main::$7 = main::i#0 * SIZEOF_WORD
Constant right-side identified [2] main::i#1 = ++ main::i#0
Constant right-side identified [3] main::w#1 = main::w#0 byte0= main::$4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$7 = main::i#0*SIZEOF_WORD
Constant main::i#1 = ++main::i#0
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero main::i#0*SIZEOF_WORD in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN in [1] main::SCREEN[main::$7] = main::w#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::$7
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) main::w#0&$ffffff00|main::$4 in main::w#1 = main::w#0&$ffffff00|main::$4
Adding number conversion cast (unumber) main::w#0&$ffffff00 in main::w#1 = ((unumber)) main::w#0&$ffffff00|main::$4
Adding number conversion cast (unumber) $ffffff00 in main::w#1 = ((unumber)) (unumber)main::w#0&$ffffff00|main::$4
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::w#1 = (unumber)(unumber)main::w#0&(unumber)$ffffff00|main::$4
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast (unumber)main::w#0&(unumber)$ffffff00|main::$4
Simplifying constant integer cast main::w#0&(unumber)$ffffff00
Simplifying constant integer cast $ffffff00
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (dword) $ffffff00
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [2] main::$8 = main::i#1 * SIZEOF_WORD
Constant right-side identified [4] main::i#2 = ++ main::i#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::w#1 = main::w#0&$ffffff00|main::$4
Constant main::$8 = main::i#1*SIZEOF_WORD
Constant main::i#2 = ++main::i#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [2] main::w#2 = main::w#1 byte1= main::$5
Constant right-side identified [3] main::$9 = main::i#2 * SIZEOF_WORD
Constant right-side identified [5] main::i#3 = ++ main::i#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$9 = main::i#2*SIZEOF_WORD
Constant main::i#3 = ++main::i#2
Successful SSA optimization Pass2ConstantIdentification
Adding number conversion cast (unumber) main::w#1&$ffff00ff|main::$5*$100 in main::w#2 = main::w#1&$ffff00ff|main::$5*$100
Adding number conversion cast (unumber) $ffff00ff in main::w#2 = ((unumber)) main::w#1&$ffff00ff|main::$5*$100
Adding number conversion cast (unumber) $100 in main::w#2 = ((unumber)) main::w#1&(unumber)$ffff00ff|main::$5*$100
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::w#2 = (unumber)main::w#1&(unumber)$ffff00ff|main::$5*(unumber)$100
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast main::w#1&(unumber)$ffff00ff|main::$5*(unumber)$100
Simplifying constant integer cast $ffff00ff
Simplifying constant integer cast $100
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (dword) $ffff00ff
Finalized unsigned number type (word) $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant main::w#2 = main::w#1&$ffff00ff|main::$5*$100
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [5] main::$12 = main::j#2 * SIZEOF_WORD
Rewriting multiplication to use shift [6] main::$11 = main::i#6 * SIZEOF_WORD
Rewriting multiplication to use shift [10] main::$14 = main::i#4 * SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with different constant siblings main::w#0
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::j#0
Inlining constant with var siblings main::i#1
Inlining constant with different constant siblings main::w#1
Inlining constant with var siblings main::i#2
Inlining constant with var siblings main::i#3
Inlining constant with different constant siblings main::w#2
Constant inlined main::i#3 = ++++++0
Constant inlined main::w#1 = $3039&$ffffff00|1
Constant inlined main::w#2 = $3039&$ffffff00|1&$ffff00ff|2*$100
Constant inlined main::w#0 = $3039
Constant inlined main::$5 = 2
Constant inlined main::i#0 = 0
Constant inlined main::$6 = 2
Constant inlined main::i#2 = ++++0
Constant inlined main::$4 = 1
Constant inlined main::j#0 = 0
Constant inlined main::i#1 = ++0
Constant inlined main::$9 = ++++0*SIZEOF_WORD
Constant inlined main::$8 = ++0*SIZEOF_WORD
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+++0*SIZEOF_WORD)
Consolidated array index constant in *(main::SCREEN+++++0*SIZEOF_WORD)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Successful SSA optimization Pass2ConstantSimplification
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [15] main::j#4 = main::j#1
Coalesced [16] main::i#8 = main::i#5
Coalesced down to 2 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::SCREEN = $3039
  [1] *(main::SCREEN+1*SIZEOF_WORD) = $3039&$ffffff00|1
  [2] *(main::SCREEN+2*SIZEOF_WORD) = $3039&$ffffff00|1&$ffff00ff|2*$100
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [3] main::i#6 = phi( main/3, main::@2/main::i#5 )
  [3] main::j#2 = phi( main/0, main::@2/main::j#1 )
  [4] if(main::j#2<2) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [5] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [6] main::$12 = main::j#2 << 1
  [7] main::$11 = main::i#6 << 1
  [8] main::SCREEN[main::$11] = main::ws[main::$12]
  [9] main::i#4 = ++ main::i#6
  [10] main::ws[main::$12] = main::ws[main::$12] byte0= 2
  [11] main::$14 = main::i#4 << 1
  [12] main::SCREEN[main::$14] = main::ws[main::$12]
  [13] main::i#5 = ++ main::i#4
  [14] main::j#1 = ++ main::j#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte~ main::$11 22.0
byte~ main::$12 9.166666666666666
byte~ main::$14 22.0
byte main::i
byte main::i#4 8.25
byte main::i#5 11.0
byte main::i#6 6.6000000000000005
byte main::j
byte main::j#1 22.0
byte main::j#2 4.4
word main::w

Initial phi equivalence classes
[ main::j#2 main::j#1 ]
[ main::i#6 main::i#5 ]
Added variable main::$12 to live range equivalence class [ main::$12 ]
Added variable main::$11 to live range equivalence class [ main::$11 ]
Added variable main::i#4 to live range equivalence class [ main::i#4 ]
Added variable main::$14 to live range equivalence class [ main::$14 ]
Complete equivalence classes
[ main::j#2 main::j#1 ]
[ main::i#6 main::i#5 ]
[ main::$12 ]
[ main::$11 ]
[ main::i#4 ]
[ main::$14 ]
Allocated zp[1]:2 [ main::j#2 main::j#1 ]
Allocated zp[1]:3 [ main::i#6 main::i#5 ]
Allocated zp[1]:4 [ main::$12 ]
Allocated zp[1]:5 [ main::$11 ]
Allocated zp[1]:6 [ main::i#4 ]
Allocated zp[1]:7 [ main::$14 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::SCREEN = $3039 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::SCREEN+1*SIZEOF_WORD) = $3039&$ffffff00|1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *(main::SCREEN+2*SIZEOF_WORD) = $3039&$ffffff00|1&$ffff00ff|2*$100 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] main::$12 = main::j#2 << 1 [ main::j#2 main::i#6 main::$12 ] (  [ main::j#2 main::i#6 main::$12 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i#6 main::i#5 ]
Statement [7] main::$11 = main::i#6 << 1 [ main::j#2 main::i#6 main::$12 main::$11 ] (  [ main::j#2 main::i#6 main::$12 main::$11 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::$12 ]
Statement [8] main::SCREEN[main::$11] = main::ws[main::$12] [ main::j#2 main::i#6 main::$12 ] (  [ main::j#2 main::i#6 main::$12 ] { }  ) always clobbers reg byte a 
Statement [10] main::ws[main::$12] = main::ws[main::$12] byte0= 2 [ main::j#2 main::$12 main::i#4 ] (  [ main::j#2 main::$12 main::i#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::i#4 ]
Statement [11] main::$14 = main::i#4 << 1 [ main::j#2 main::$12 main::i#4 main::$14 ] (  [ main::j#2 main::$12 main::i#4 main::$14 ] { }  ) always clobbers reg byte a 
Statement [12] main::SCREEN[main::$14] = main::ws[main::$12] [ main::j#2 main::i#4 ] (  [ main::j#2 main::i#4 ] { }  ) always clobbers reg byte a 
Statement [0] *main::SCREEN = $3039 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::SCREEN+1*SIZEOF_WORD) = $3039&$ffffff00|1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *(main::SCREEN+2*SIZEOF_WORD) = $3039&$ffffff00|1&$ffff00ff|2*$100 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] main::$12 = main::j#2 << 1 [ main::j#2 main::i#6 main::$12 ] (  [ main::j#2 main::i#6 main::$12 ] { }  ) always clobbers reg byte a 
Statement [7] main::$11 = main::i#6 << 1 [ main::j#2 main::i#6 main::$12 main::$11 ] (  [ main::j#2 main::i#6 main::$12 main::$11 ] { }  ) always clobbers reg byte a 
Statement [8] main::SCREEN[main::$11] = main::ws[main::$12] [ main::j#2 main::i#6 main::$12 ] (  [ main::j#2 main::i#6 main::$12 ] { }  ) always clobbers reg byte a 
Statement [10] main::ws[main::$12] = main::ws[main::$12] byte0= 2 [ main::j#2 main::$12 main::i#4 ] (  [ main::j#2 main::$12 main::i#4 ] { }  ) always clobbers reg byte a 
Statement [11] main::$14 = main::i#4 << 1 [ main::j#2 main::$12 main::i#4 main::$14 ] (  [ main::j#2 main::$12 main::i#4 main::$14 ] { }  ) always clobbers reg byte a 
Statement [12] main::SCREEN[main::$14] = main::ws[main::$12] [ main::j#2 main::i#4 ] (  [ main::j#2 main::i#4 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::j#2 main::j#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i#6 main::i#5 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$12 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$11 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::i#4 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$14 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 26.4: zp[1]:2 [ main::j#2 main::j#1 ] 22: zp[1]:5 [ main::$11 ] 22: zp[1]:7 [ main::$14 ] 17.6: zp[1]:3 [ main::i#6 main::i#5 ] 9.17: zp[1]:4 [ main::$12 ] 8.25: zp[1]:6 [ main::i#4 ] 
Uplift Scope [] 

Uplifting [main] best 1277 combination zp[1]:2 [ main::j#2 main::j#1 ] reg byte a [ main::$11 ] reg byte a [ main::$14 ] zp[1]:3 [ main::i#6 main::i#5 ] zp[1]:4 [ main::$12 ] zp[1]:6 [ main::i#4 ] 
Limited combination testing to 100 combinations of 1296 possible.
Uplifting [] best 1277 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::j#2 main::j#1 ]
Uplifting [main] best 1277 combination zp[1]:2 [ main::j#2 main::j#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::i#6 main::i#5 ]
Uplifting [main] best 1277 combination zp[1]:3 [ main::i#6 main::i#5 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::$12 ]
Uplifting [main] best 1177 combination reg byte x [ main::$12 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::i#4 ]
Uplifting [main] best 1177 combination zp[1]:6 [ main::i#4 ] 
Coalescing zero page register [ zp[1]:3 [ main::i#6 main::i#5 ] ] with [ zp[1]:6 [ main::i#4 ] ] - score: 2

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test using operator byte0() in an lvalue
  // Upstart
  // Commodore 64 PRG executable file
.file [name="operator-byte0-lvalue-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_WORD = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label i = 3
    .label j = 2
    // [0] *main::SCREEN = $3039 -- _deref_pwuc1=vwuc2 
    lda #<$3039
    sta SCREEN
    lda #>$3039
    sta SCREEN+1
    // [1] *(main::SCREEN+1*SIZEOF_WORD) = $3039&$ffffff00|1 -- _deref_pwuc1=vwuc2 
    lda #<$3039&$ffffff00|1
    sta SCREEN+1*SIZEOF_WORD
    lda #>$3039&$ffffff00|1
    sta SCREEN+1*SIZEOF_WORD+1
    // [2] *(main::SCREEN+2*SIZEOF_WORD) = $3039&$ffffff00|1&$ffff00ff|2*$100 -- _deref_pwuc1=vwuc2 
    lda #<($3039&$ffffff00|1)&$ffff00ff|2*$100
    sta SCREEN+2*SIZEOF_WORD
    lda #>($3039&$ffffff00|1)&$ffff00ff|2*$100
    sta SCREEN+2*SIZEOF_WORD+1
    // [3] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [3] phi main::i#6 = 3 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #3
    sta.z i
    // [3] phi main::j#2 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b1
    // main::@1
  __b1:
    // [4] if(main::j#2<2) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #2
    bcc __b2
    jmp __breturn
    // main::@return
  __breturn:
    // [5] return 
    rts
    // main::@2
  __b2:
    // [6] main::$12 = main::j#2 << 1 -- vbuxx=vbuz1_rol_1 
    lda.z j
    asl
    tax
    // [7] main::$11 = main::i#6 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [8] main::SCREEN[main::$11] = main::ws[main::$12] -- pwuc1_derefidx_vbuaa=pwuc2_derefidx_vbuxx 
    tay
    lda ws,x
    sta SCREEN,y
    lda ws+1,x
    sta SCREEN+1,y
    // [9] main::i#4 = ++ main::i#6 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] main::ws[main::$12] = main::ws[main::$12] byte0= 2 -- pwuc1_derefidx_vbuxx=pwuc1_derefidx_vbuxx_setbyte0_vbuc2 
    lda #2
    sta ws,x
    // [11] main::$14 = main::i#4 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [12] main::SCREEN[main::$14] = main::ws[main::$12] -- pwuc1_derefidx_vbuaa=pwuc2_derefidx_vbuxx 
    tay
    lda ws,x
    sta SCREEN,y
    lda ws+1,x
    sta SCREEN+1,y
    // [13] main::i#5 = ++ main::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [14] main::j#1 = ++ main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [3] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [3] phi main::i#6 = main::i#5 [phi:main::@2->main::@1#0] -- register_copy 
    // [3] phi main::j#2 = main::j#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
  .segment Data
    ws: .word $5ba0, $8707
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte SIZEOF_WORD = 2
void main()
byte~ main::$11 reg byte a 22.0
byte~ main::$12 reg byte x 9.166666666666666
byte~ main::$14 reg byte a 22.0
constant word* const main::SCREEN = (word*) 1024
byte main::i
byte main::i#4 i zp[1]:3 8.25
byte main::i#5 i zp[1]:3 11.0
byte main::i#6 i zp[1]:3 6.6000000000000005
byte main::j
byte main::j#1 j zp[1]:2 22.0
byte main::j#2 j zp[1]:2 4.4
word main::w
constant word* main::ws[]  = { $5ba0, $8707 }

zp[1]:2 [ main::j#2 main::j#1 ]
zp[1]:3 [ main::i#6 main::i#5 main::i#4 ]
reg byte x [ main::$12 ]
reg byte a [ main::$11 ]
reg byte a [ main::$14 ]


FINAL ASSEMBLER
Score: 1057

  // File Comments
// Test using operator byte0() in an lvalue
  // Upstart
  // Commodore 64 PRG executable file
.file [name="operator-byte0-lvalue-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_WORD = 2
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label i = 3
    .label j = 2
    // SCREEN[i++] = w
    // [0] *main::SCREEN = $3039 -- _deref_pwuc1=vwuc2 
    lda #<$3039
    sta SCREEN
    lda #>$3039
    sta SCREEN+1
    // [1] *(main::SCREEN+1*SIZEOF_WORD) = $3039&$ffffff00|1 -- _deref_pwuc1=vwuc2 
    lda #<$3039&$ffffff00|1
    sta SCREEN+1*SIZEOF_WORD
    lda #>$3039&$ffffff00|1
    sta SCREEN+1*SIZEOF_WORD+1
    // [2] *(main::SCREEN+2*SIZEOF_WORD) = $3039&$ffffff00|1&$ffff00ff|2*$100 -- _deref_pwuc1=vwuc2 
    lda #<($3039&$ffffff00|1)&$ffff00ff|2*$100
    sta SCREEN+2*SIZEOF_WORD
    lda #>($3039&$ffffff00|1)&$ffff00ff|2*$100
    sta SCREEN+2*SIZEOF_WORD+1
    // [3] phi from main to main::@1 [phi:main->main::@1]
    // [3] phi main::i#6 = 3 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #3
    sta.z i
    // [3] phi main::j#2 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    // main::@1
  __b1:
    // for(char j=0;j<2;j++)
    // [4] if(main::j#2<2) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z j
    cmp #2
    bcc __b2
    // main::@return
    // }
    // [5] return 
    rts
    // main::@2
  __b2:
    // SCREEN[i++] = ws[j]
    // [6] main::$12 = main::j#2 << 1 -- vbuxx=vbuz1_rol_1 
    lda.z j
    asl
    tax
    // [7] main::$11 = main::i#6 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [8] main::SCREEN[main::$11] = main::ws[main::$12] -- pwuc1_derefidx_vbuaa=pwuc2_derefidx_vbuxx 
    tay
    lda ws,x
    sta SCREEN,y
    lda ws+1,x
    sta SCREEN+1,y
    // SCREEN[i++] = ws[j];
    // [9] main::i#4 = ++ main::i#6 -- vbuz1=_inc_vbuz1 
    inc.z i
    // BYTE0(ws[j]) = 2
    // [10] main::ws[main::$12] = main::ws[main::$12] byte0= 2 -- pwuc1_derefidx_vbuxx=pwuc1_derefidx_vbuxx_setbyte0_vbuc2 
    lda #2
    sta ws,x
    // SCREEN[i++] = ws[j]
    // [11] main::$14 = main::i#4 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [12] main::SCREEN[main::$14] = main::ws[main::$12] -- pwuc1_derefidx_vbuaa=pwuc2_derefidx_vbuxx 
    tay
    lda ws,x
    sta SCREEN,y
    lda ws+1,x
    sta SCREEN+1,y
    // SCREEN[i++] = ws[j];
    // [13] main::i#5 = ++ main::i#4 -- vbuz1=_inc_vbuz1 
    inc.z i
    // for(char j=0;j<2;j++)
    // [14] main::j#1 = ++ main::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [3] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [3] phi main::i#6 = main::i#5 [phi:main::@2->main::@1#0] -- register_copy 
    // [3] phi main::j#2 = main::j#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
  .segment Data
    ws: .word $5ba0, $8707
}
  // File Data

