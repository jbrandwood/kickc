
void main()
main: scope:[main]  from
  [0] phi()
  [1] call test 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call test 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call test 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] phi()
  [7] call test 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] phi()
  [9] call test 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] phi()
  [11] call test 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [12] phi()
  [13] call test 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [14] phi()
  [15] call test 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [16] phi()
  [17] call test 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [18] phi()
  [19] call test 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [20] phi()
  [21] call test 
  to:main::@return
main::@return: scope:[main]  from main::@10
  [22] return 
  to:@return

void test(byte test::i , byte test::a)
test: scope:[test]  from main main::@1 main::@10 main::@2 main::@3 main::@4 main::@5 main::@6 main::@7 main::@8 main::@9
  [23] test::i#11 = phi( main/0, main::@1/1, main::@10/$a, main::@2/2, main::@3/3, main::@4/4, main::@5/5, main::@6/6, main::@7/7, main::@8/8, main::@9/9 )
  [23] test::a#11 = phi( main/3, main::@1/3+1, main::@10/3+1-1*6/2&2-1<<2>>1^6|1&1, main::@2/3+1-1, main::@3/3+1-1*6, main::@4/3+1-1*6/2, main::@5/3+1-1*6/2&2-1, main::@6/3+1-1*6/2&2-1<<2, main::@7/3+1-1*6/2&2-1<<2>>1, main::@8/3+1-1*6/2&2-1<<2>>1^6, main::@9/3+1-1*6/2&2-1<<2>>1^6|1 )
  [24] screen1[test::i#11] = test::a#11
  [25] screen2#0[test::i#11] = ref[test::i#11]
  [26] if(ref[test::i#11]==test::a#11) goto test::@1
  to:test::@2
test::@2: scope:[test]  from test
  [27] cols[test::i#11] = RED
  to:test::@return
test::@return: scope:[test]  from test::@1 test::@2
  [28] return 
  to:@return
test::@1: scope:[test]  from test
  [29] cols[test::i#11] = GREEN
  to:test::@return
