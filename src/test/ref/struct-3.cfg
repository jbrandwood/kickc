@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$5 ← (byte) main::i#2 << (byte) 1
  [7] *((const struct Point[4]) points#0 + (byte~) main::$5).x ← (byte) main::i#2
  [8] (byte~) main::$0 ← (byte) main::i#2 + (byte) 1
  [9] *((const struct Point[4]) points#0 + (byte~) main::$5).y ← (byte~) main::$0
  [10] (byte) main::i#1 ← ++ (byte) main::i#2
  [11] if((byte) main::i#1!=(byte) 5) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [12] (byte) main::i1#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i1#1 )
  [13] (byte~) main::$7 ← (byte) main::i1#2 << (byte) 1
  [14] *((const byte*) main::SCREEN#0 + (byte) main::i1#2) ← *((const struct Point[4]) points#0 + (byte~) main::$7).x
  [15] *((const byte*) main::SCREEN#0+(byte) $28 + (byte) main::i1#2) ← *((const struct Point[4]) points#0 + (byte~) main::$7).y
  [16] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [17] if((byte) main::i1#1!=(byte) 5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [18] return 
  to:@return
