Adding pointer type conversion cast (byte*) print_screen in (byte*) print_screen ← (number) $400
Inlined call (byte*~) init_points::$1 ← call getPoint (byte) init_points::i 
Inlined call (byte*~) init_points::$2 ← call pointXpos (byte*) init_points::point 
Inlined call (byte*~) init_points::$3 ← call pointYpos (byte*) init_points::point 
Inlined call (byte*~) print_points::$2 ← call getPoint (byte) print_points::i 
Inlined call (byte*~) print_points::$3 ← call pointXpos (byte*) print_points::point 
Inlined call (byte*~) print_points::$6 ← call pointYpos (byte*) print_points::point 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) print_str::@4
Culled Empty Block (label) print_str::@3
Culled Empty Block (label) print_str::@5
Culled Empty Block (label) print_str::@6
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) init_points::getPoint1_@1
Culled Empty Block (label) init_points::pointXpos1_@1
Culled Empty Block (label) init_points::pointYpos1_@1
Culled Empty Block (label) init_points::@2
Culled Empty Block (label) @24
Culled Empty Block (label) print_points::getPoint1_@1
Culled Empty Block (label) print_points::pointXpos1_@1
Culled Empty Block (label) print_points::pointYpos1_@1
Culled Empty Block (label) print_points::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@12
print_str: scope:[print_str]  from print_points::@7
  (byte*) print_char_cursor#48 ← phi( print_points::@7/(byte*) print_char_cursor#15 )
  (byte*) print_str::str#4 ← phi( print_points::@7/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#40 ← phi( print_str/(byte*) print_char_cursor#48 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#4 print_str::@2/(byte*) print_str::str#0 )
  (bool~) print_str::$0 ← *((byte*) print_str::str#2) != (byte) '@'
  if((bool~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#21 ← phi( print_str::@1/(byte*) print_char_cursor#40 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  *((byte*) print_char_cursor#21) ← *((byte*) print_str::str#3)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#21
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#22 ← phi( print_str::@1/(byte*) print_char_cursor#40 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#22
  return 
  to:@return
print_ln: scope:[print_ln]  from print_points::@9
  (byte*) print_char_cursor#41 ← phi( print_points::@9/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#21 ← phi( print_points::@9/(byte*) print_line_cursor#24 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#23 ← phi( print_ln/(byte*) print_char_cursor#41 print_ln::@1/(byte*) print_char_cursor#23 )
  (byte*) print_line_cursor#11 ← phi( print_ln/(byte*) print_line_cursor#21 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#11 + (number) $28
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#23
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#12 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#12
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#24 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#13 ← phi( print_ln::@2/(byte*) print_line_cursor#12 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#24
  return 
  to:@return
@12: scope:[]  from @begin
  (byte*) print_screen#9 ← phi( @begin/(byte*) print_screen#0 )
  (byte*) print_char_cursor#53 ← phi( @begin/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#29 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte[]) print_hextab#0 ← (const string) $1
  to:@19
print_byte: scope:[print_byte]  from print_points::@4 print_points::@5
  (byte*) print_char_cursor#42 ← phi( print_points::@4/(byte*) print_char_cursor#45 print_points::@5/(byte*) print_char_cursor#46 )
  (byte) print_byte::b#2 ← phi( print_points::@4/(byte) print_byte::b#0 print_points::@5/(byte) print_byte::b#1 )
  (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
  (byte) print_char::ch#0 ← *((byte[]) print_hextab#0 + (byte~) print_byte::$0)
  call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#3 ← phi( print_byte/(byte) print_byte::b#2 )
  (byte*) print_char_cursor#25 ← phi( print_byte/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#25
  (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
  (byte) print_char::ch#1 ← *((byte[]) print_hextab#0 + (number~) print_byte::$2)
  call print_char 
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) print_char_cursor#26 ← phi( print_byte::@1/(byte*) print_char_cursor#9 )
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#26
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) print_char_cursor#27 ← phi( print_byte::@2/(byte*) print_char_cursor#6 )
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#27
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  (byte*) print_char_cursor#28 ← phi( print_byte/(byte*) print_char_cursor#42 print_byte::@1/(byte*) print_char_cursor#5 )
  (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  *((byte*) print_char_cursor#28) ← (byte) print_char::ch#2
  (byte*) print_char_cursor#8 ← ++ (byte*) print_char_cursor#28
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) print_char_cursor#29 ← phi( print_char/(byte*) print_char_cursor#8 )
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#29
  return 
  to:@return
print_cls: scope:[print_cls]  from print_points
  (byte*) print_screen#1 ← phi( print_points/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
  (bool~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((bool~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#10 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#30 ← phi( print_cls::@2/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#14 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#30
  return 
  to:@return
@19: scope:[]  from @12
  (byte*) print_screen#8 ← phi( @12/(byte*) print_screen#9 )
  (byte*) print_char_cursor#52 ← phi( @12/(byte*) print_char_cursor#53 )
  (byte*) print_line_cursor#28 ← phi( @12/(byte*) print_line_cursor#29 )
  (byte) SIZEOF_POINT#0 ← (number) 2
  (byte) NUM_POINTS#0 ← (number) 4
  (byte~) $0 ← (byte) NUM_POINTS#0 * (byte) SIZEOF_POINT#0
  (byte[$0]) points#0 ← { fill( $0, 0) }
  to:@25
main: scope:[main]  from @25
  (byte*) print_screen#6 ← phi( @25/(byte*) print_screen#7 )
  (byte*) print_char_cursor#49 ← phi( @25/(byte*) print_char_cursor#47 )
  (byte*) print_line_cursor#26 ← phi( @25/(byte*) print_line_cursor#25 )
  call init_points 
  to:main::@1
main::@1: scope:[main]  from main
  (byte*) print_screen#5 ← phi( main/(byte*) print_screen#6 )
  (byte*) print_char_cursor#43 ← phi( main/(byte*) print_char_cursor#49 )
  (byte*) print_line_cursor#22 ← phi( main/(byte*) print_line_cursor#26 )
  call print_points 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) print_char_cursor#31 ← phi( main::@1/(byte*) print_char_cursor#19 )
  (byte*) print_line_cursor#15 ← phi( main::@1/(byte*) print_line_cursor#9 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#31
  to:main::@return
main::@return: scope:[main]  from main::@2
  (byte*) print_char_cursor#32 ← phi( main::@2/(byte*) print_char_cursor#12 )
  (byte*) print_line_cursor#16 ← phi( main::@2/(byte*) print_line_cursor#5 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#32
  return 
  to:@return
init_points: scope:[init_points]  from main
  (byte) init_points::pos#0 ← (number) $a
  (number~) init_points::$0 ← (byte) NUM_POINTS#0 - (number) 1
  (byte) init_points::i#0 ← (number) 0
  to:init_points::@1
init_points::@1: scope:[init_points]  from init_points init_points::@5
  (byte) init_points::pos#12 ← phi( init_points/(byte) init_points::pos#0 init_points::@5/(byte) init_points::pos#2 )
  (byte) init_points::i#2 ← phi( init_points/(byte) init_points::i#0 init_points::@5/(byte) init_points::i#1 )
  (byte) init_points::getPoint1_idx#0 ← (byte) init_points::i#2
  to:init_points::getPoint1
init_points::getPoint1: scope:[init_points]  from init_points::@1
  (byte) init_points::i#11 ← phi( init_points::@1/(byte) init_points::i#2 )
  (byte) init_points::pos#11 ← phi( init_points::@1/(byte) init_points::pos#12 )
  (byte) init_points::getPoint1_idx#1 ← phi( init_points::@1/(byte) init_points::getPoint1_idx#0 )
  (byte~) init_points::getPoint1_$0#0 ← (byte) init_points::getPoint1_idx#1 * (byte) SIZEOF_POINT#0
  (byte*~) init_points::getPoint1_$1#0 ← (byte[$0]) points#0 + (byte~) init_points::getPoint1_$0#0
  (byte*) init_points::getPoint1_return#0 ← (byte*~) init_points::getPoint1_$1#0
  to:init_points::getPoint1_@return
init_points::getPoint1_@return: scope:[init_points]  from init_points::getPoint1
  (byte) init_points::i#10 ← phi( init_points::getPoint1/(byte) init_points::i#11 )
  (byte) init_points::pos#10 ← phi( init_points::getPoint1/(byte) init_points::pos#11 )
  (byte*) init_points::getPoint1_return#2 ← phi( init_points::getPoint1/(byte*) init_points::getPoint1_return#0 )
  (byte*) init_points::getPoint1_return#1 ← (byte*) init_points::getPoint1_return#2
  to:init_points::@3
init_points::@3: scope:[init_points]  from init_points::getPoint1_@return
  (byte) init_points::i#9 ← phi( init_points::getPoint1_@return/(byte) init_points::i#10 )
  (byte) init_points::pos#9 ← phi( init_points::getPoint1_@return/(byte) init_points::pos#10 )
  (byte*) init_points::getPoint1_return#3 ← phi( init_points::getPoint1_@return/(byte*) init_points::getPoint1_return#1 )
  (byte*~) init_points::$1 ← (byte*) init_points::getPoint1_return#3
  (byte*) init_points::point#0 ← (byte*~) init_points::$1
  (byte*) init_points::pointXpos1_point#0 ← (byte*) init_points::point#0
  to:init_points::pointXpos1
init_points::pointXpos1: scope:[init_points]  from init_points::@3
  (byte) init_points::i#8 ← phi( init_points::@3/(byte) init_points::i#9 )
  (byte*) init_points::point#3 ← phi( init_points::@3/(byte*) init_points::point#0 )
  (byte) init_points::pos#7 ← phi( init_points::@3/(byte) init_points::pos#9 )
  (byte*) init_points::pointXpos1_point#1 ← phi( init_points::@3/(byte*) init_points::pointXpos1_point#0 )
  (byte*~) init_points::pointXpos1_$0#0 ← (byte*) init_points::pointXpos1_point#1 + (number) 0
  (byte*~) init_points::pointXpos1_$1#0 ← ((byte*)) (byte*~) init_points::pointXpos1_$0#0
  (byte*) init_points::pointXpos1_return#0 ← (byte*~) init_points::pointXpos1_$1#0
  to:init_points::pointXpos1_@return
init_points::pointXpos1_@return: scope:[init_points]  from init_points::pointXpos1
  (byte) init_points::i#7 ← phi( init_points::pointXpos1/(byte) init_points::i#8 )
  (byte*) init_points::point#2 ← phi( init_points::pointXpos1/(byte*) init_points::point#3 )
  (byte) init_points::pos#5 ← phi( init_points::pointXpos1/(byte) init_points::pos#7 )
  (byte*) init_points::pointXpos1_return#2 ← phi( init_points::pointXpos1/(byte*) init_points::pointXpos1_return#0 )
  (byte*) init_points::pointXpos1_return#1 ← (byte*) init_points::pointXpos1_return#2
  to:init_points::@4
init_points::@4: scope:[init_points]  from init_points::pointXpos1_@return
  (byte) init_points::i#6 ← phi( init_points::pointXpos1_@return/(byte) init_points::i#7 )
  (byte*) init_points::point#1 ← phi( init_points::pointXpos1_@return/(byte*) init_points::point#2 )
  (byte) init_points::pos#3 ← phi( init_points::pointXpos1_@return/(byte) init_points::pos#5 )
  (byte*) init_points::pointXpos1_return#3 ← phi( init_points::pointXpos1_@return/(byte*) init_points::pointXpos1_return#1 )
  (byte*~) init_points::$2 ← (byte*) init_points::pointXpos1_return#3
  *((byte*~) init_points::$2) ← (byte) init_points::pos#3
  (byte) init_points::pos#1 ← (byte) init_points::pos#3 + (number) $a
  (byte*) init_points::pointYpos1_point#0 ← (byte*) init_points::point#1
  to:init_points::pointYpos1
init_points::pointYpos1: scope:[init_points]  from init_points::@4
  (byte) init_points::i#5 ← phi( init_points::@4/(byte) init_points::i#6 )
  (byte) init_points::pos#8 ← phi( init_points::@4/(byte) init_points::pos#1 )
  (byte*) init_points::pointYpos1_point#1 ← phi( init_points::@4/(byte*) init_points::pointYpos1_point#0 )
  (byte*~) init_points::pointYpos1_$0#0 ← (byte*) init_points::pointYpos1_point#1 + (number) 1
  (byte*~) init_points::pointYpos1_$1#0 ← ((byte*)) (byte*~) init_points::pointYpos1_$0#0
  (byte*) init_points::pointYpos1_return#0 ← (byte*~) init_points::pointYpos1_$1#0
  to:init_points::pointYpos1_@return
init_points::pointYpos1_@return: scope:[init_points]  from init_points::pointYpos1
  (byte) init_points::i#4 ← phi( init_points::pointYpos1/(byte) init_points::i#5 )
  (byte) init_points::pos#6 ← phi( init_points::pointYpos1/(byte) init_points::pos#8 )
  (byte*) init_points::pointYpos1_return#2 ← phi( init_points::pointYpos1/(byte*) init_points::pointYpos1_return#0 )
  (byte*) init_points::pointYpos1_return#1 ← (byte*) init_points::pointYpos1_return#2
  to:init_points::@5
init_points::@5: scope:[init_points]  from init_points::pointYpos1_@return
  (byte) init_points::i#3 ← phi( init_points::pointYpos1_@return/(byte) init_points::i#4 )
  (byte) init_points::pos#4 ← phi( init_points::pointYpos1_@return/(byte) init_points::pos#6 )
  (byte*) init_points::pointYpos1_return#3 ← phi( init_points::pointYpos1_@return/(byte*) init_points::pointYpos1_return#1 )
  (byte*~) init_points::$3 ← (byte*) init_points::pointYpos1_return#3
  *((byte*~) init_points::$3) ← (byte) init_points::pos#4
  (byte) init_points::pos#2 ← (byte) init_points::pos#4 + (number) $a
  (byte) init_points::i#1 ← (byte) init_points::i#3 + rangenext(0,init_points::$0)
  (bool~) init_points::$4 ← (byte) init_points::i#1 != rangelast(0,init_points::$0)
  if((bool~) init_points::$4) goto init_points::@1
  to:init_points::@return
init_points::@return: scope:[init_points]  from init_points::@5
  return 
  to:@return
print_points: scope:[print_points]  from main::@1
  (byte*) print_char_cursor#44 ← phi( main::@1/(byte*) print_char_cursor#43 )
  (byte*) print_line_cursor#23 ← phi( main::@1/(byte*) print_line_cursor#22 )
  (byte*) print_screen#4 ← phi( main::@1/(byte*) print_screen#5 )
  call print_cls 
  to:print_points::@6
print_points::@6: scope:[print_points]  from print_points
  (byte*) print_char_cursor#33 ← phi( print_points/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#17 ← phi( print_points/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#17
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#33
  (number~) print_points::$1 ← (byte) NUM_POINTS#0 - (number) 1
  (byte) print_points::i#0 ← (number) 0
  to:print_points::@1
print_points::@1: scope:[print_points]  from print_points::@10 print_points::@6
  (byte*) print_line_cursor#40 ← phi( print_points::@10/(byte*) print_line_cursor#8 print_points::@6/(byte*) print_line_cursor#7 )
  (byte*) print_char_cursor#59 ← phi( print_points::@10/(byte*) print_char_cursor#18 print_points::@6/(byte*) print_char_cursor#14 )
  (byte) print_points::i#2 ← phi( print_points::@10/(byte) print_points::i#1 print_points::@6/(byte) print_points::i#0 )
  (byte) print_points::getPoint1_idx#0 ← (byte) print_points::i#2
  to:print_points::getPoint1
print_points::getPoint1: scope:[print_points]  from print_points::@1
  (byte) print_points::i#15 ← phi( print_points::@1/(byte) print_points::i#2 )
  (byte*) print_line_cursor#39 ← phi( print_points::@1/(byte*) print_line_cursor#40 )
  (byte*) print_char_cursor#58 ← phi( print_points::@1/(byte*) print_char_cursor#59 )
  (byte) print_points::getPoint1_idx#1 ← phi( print_points::@1/(byte) print_points::getPoint1_idx#0 )
  (byte~) print_points::getPoint1_$0#0 ← (byte) print_points::getPoint1_idx#1 * (byte) SIZEOF_POINT#0
  (byte*~) print_points::getPoint1_$1#0 ← (byte[$0]) points#0 + (byte~) print_points::getPoint1_$0#0
  (byte*) print_points::getPoint1_return#0 ← (byte*~) print_points::getPoint1_$1#0
  to:print_points::getPoint1_@return
print_points::getPoint1_@return: scope:[print_points]  from print_points::getPoint1
  (byte) print_points::i#14 ← phi( print_points::getPoint1/(byte) print_points::i#15 )
  (byte*) print_line_cursor#38 ← phi( print_points::getPoint1/(byte*) print_line_cursor#39 )
  (byte*) print_char_cursor#57 ← phi( print_points::getPoint1/(byte*) print_char_cursor#58 )
  (byte*) print_points::getPoint1_return#2 ← phi( print_points::getPoint1/(byte*) print_points::getPoint1_return#0 )
  (byte*) print_points::getPoint1_return#1 ← (byte*) print_points::getPoint1_return#2
  to:print_points::@3
print_points::@3: scope:[print_points]  from print_points::getPoint1_@return
  (byte) print_points::i#13 ← phi( print_points::getPoint1_@return/(byte) print_points::i#14 )
  (byte*) print_line_cursor#37 ← phi( print_points::getPoint1_@return/(byte*) print_line_cursor#38 )
  (byte*) print_char_cursor#56 ← phi( print_points::getPoint1_@return/(byte*) print_char_cursor#57 )
  (byte*) print_points::getPoint1_return#3 ← phi( print_points::getPoint1_@return/(byte*) print_points::getPoint1_return#1 )
  (byte*~) print_points::$2 ← (byte*) print_points::getPoint1_return#3
  (byte*) print_points::point#0 ← (byte*~) print_points::$2
  (byte*) print_points::pointXpos1_point#0 ← (byte*) print_points::point#0
  to:print_points::pointXpos1
print_points::pointXpos1: scope:[print_points]  from print_points::@3
  (byte) print_points::i#12 ← phi( print_points::@3/(byte) print_points::i#13 )
  (byte*) print_line_cursor#36 ← phi( print_points::@3/(byte*) print_line_cursor#37 )
  (byte*) print_points::point#5 ← phi( print_points::@3/(byte*) print_points::point#0 )
  (byte*) print_char_cursor#54 ← phi( print_points::@3/(byte*) print_char_cursor#56 )
  (byte*) print_points::pointXpos1_point#1 ← phi( print_points::@3/(byte*) print_points::pointXpos1_point#0 )
  (byte*~) print_points::pointXpos1_$0#0 ← (byte*) print_points::pointXpos1_point#1 + (number) 0
  (byte*~) print_points::pointXpos1_$1#0 ← ((byte*)) (byte*~) print_points::pointXpos1_$0#0
  (byte*) print_points::pointXpos1_return#0 ← (byte*~) print_points::pointXpos1_$1#0
  to:print_points::pointXpos1_@return
print_points::pointXpos1_@return: scope:[print_points]  from print_points::pointXpos1
  (byte) print_points::i#11 ← phi( print_points::pointXpos1/(byte) print_points::i#12 )
  (byte*) print_line_cursor#35 ← phi( print_points::pointXpos1/(byte*) print_line_cursor#36 )
  (byte*) print_points::point#4 ← phi( print_points::pointXpos1/(byte*) print_points::point#5 )
  (byte*) print_char_cursor#50 ← phi( print_points::pointXpos1/(byte*) print_char_cursor#54 )
  (byte*) print_points::pointXpos1_return#2 ← phi( print_points::pointXpos1/(byte*) print_points::pointXpos1_return#0 )
  (byte*) print_points::pointXpos1_return#1 ← (byte*) print_points::pointXpos1_return#2
  to:print_points::@4
print_points::@4: scope:[print_points]  from print_points::pointXpos1_@return
  (byte) print_points::i#10 ← phi( print_points::pointXpos1_@return/(byte) print_points::i#11 )
  (byte*) print_line_cursor#34 ← phi( print_points::pointXpos1_@return/(byte*) print_line_cursor#35 )
  (byte*) print_points::point#3 ← phi( print_points::pointXpos1_@return/(byte*) print_points::point#4 )
  (byte*) print_char_cursor#45 ← phi( print_points::pointXpos1_@return/(byte*) print_char_cursor#50 )
  (byte*) print_points::pointXpos1_return#3 ← phi( print_points::pointXpos1_@return/(byte*) print_points::pointXpos1_return#1 )
  (byte*~) print_points::$3 ← (byte*) print_points::pointXpos1_return#3
  (byte) print_byte::b#0 ← *((byte*~) print_points::$3)
  call print_byte 
  to:print_points::@7
print_points::@7: scope:[print_points]  from print_points::@4
  (byte) print_points::i#9 ← phi( print_points::@4/(byte) print_points::i#10 )
  (byte*) print_line_cursor#33 ← phi( print_points::@4/(byte*) print_line_cursor#34 )
  (byte*) print_points::point#2 ← phi( print_points::@4/(byte*) print_points::point#3 )
  (byte*) print_char_cursor#34 ← phi( print_points::@4/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#34
  (byte*) print_str::str#1 ← (const string) print_points::str
  call print_str 
  to:print_points::@8
print_points::@8: scope:[print_points]  from print_points::@7
  (byte) print_points::i#8 ← phi( print_points::@7/(byte) print_points::i#9 )
  (byte*) print_line_cursor#32 ← phi( print_points::@7/(byte*) print_line_cursor#33 )
  (byte*) print_points::point#1 ← phi( print_points::@7/(byte*) print_points::point#2 )
  (byte*) print_char_cursor#35 ← phi( print_points::@7/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#35
  (byte*) print_points::pointYpos1_point#0 ← (byte*) print_points::point#1
  to:print_points::pointYpos1
print_points::pointYpos1: scope:[print_points]  from print_points::@8
  (byte) print_points::i#7 ← phi( print_points::@8/(byte) print_points::i#8 )
  (byte*) print_line_cursor#31 ← phi( print_points::@8/(byte*) print_line_cursor#32 )
  (byte*) print_char_cursor#55 ← phi( print_points::@8/(byte*) print_char_cursor#16 )
  (byte*) print_points::pointYpos1_point#1 ← phi( print_points::@8/(byte*) print_points::pointYpos1_point#0 )
  (byte*~) print_points::pointYpos1_$0#0 ← (byte*) print_points::pointYpos1_point#1 + (number) 1
  (byte*~) print_points::pointYpos1_$1#0 ← ((byte*)) (byte*~) print_points::pointYpos1_$0#0
  (byte*) print_points::pointYpos1_return#0 ← (byte*~) print_points::pointYpos1_$1#0
  to:print_points::pointYpos1_@return
print_points::pointYpos1_@return: scope:[print_points]  from print_points::pointYpos1
  (byte) print_points::i#6 ← phi( print_points::pointYpos1/(byte) print_points::i#7 )
  (byte*) print_line_cursor#30 ← phi( print_points::pointYpos1/(byte*) print_line_cursor#31 )
  (byte*) print_char_cursor#51 ← phi( print_points::pointYpos1/(byte*) print_char_cursor#55 )
  (byte*) print_points::pointYpos1_return#2 ← phi( print_points::pointYpos1/(byte*) print_points::pointYpos1_return#0 )
  (byte*) print_points::pointYpos1_return#1 ← (byte*) print_points::pointYpos1_return#2
  to:print_points::@5
print_points::@5: scope:[print_points]  from print_points::pointYpos1_@return
  (byte) print_points::i#5 ← phi( print_points::pointYpos1_@return/(byte) print_points::i#6 )
  (byte*) print_line_cursor#27 ← phi( print_points::pointYpos1_@return/(byte*) print_line_cursor#30 )
  (byte*) print_char_cursor#46 ← phi( print_points::pointYpos1_@return/(byte*) print_char_cursor#51 )
  (byte*) print_points::pointYpos1_return#3 ← phi( print_points::pointYpos1_@return/(byte*) print_points::pointYpos1_return#1 )
  (byte*~) print_points::$6 ← (byte*) print_points::pointYpos1_return#3
  (byte) print_byte::b#1 ← *((byte*~) print_points::$6)
  call print_byte 
  to:print_points::@9
print_points::@9: scope:[print_points]  from print_points::@5
  (byte) print_points::i#4 ← phi( print_points::@5/(byte) print_points::i#5 )
  (byte*) print_line_cursor#24 ← phi( print_points::@5/(byte*) print_line_cursor#27 )
  (byte*) print_char_cursor#36 ← phi( print_points::@5/(byte*) print_char_cursor#7 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#36
  call print_ln 
  to:print_points::@10
print_points::@10: scope:[print_points]  from print_points::@9
  (byte) print_points::i#3 ← phi( print_points::@9/(byte) print_points::i#4 )
  (byte*) print_char_cursor#37 ← phi( print_points::@9/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#18 ← phi( print_points::@9/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#18
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#37
  (byte) print_points::i#1 ← (byte) print_points::i#3 + rangenext(0,print_points::$1)
  (bool~) print_points::$9 ← (byte) print_points::i#1 != rangelast(0,print_points::$1)
  if((bool~) print_points::$9) goto print_points::@1
  to:print_points::@return
print_points::@return: scope:[print_points]  from print_points::@10
  (byte*) print_char_cursor#38 ← phi( print_points::@10/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#19 ← phi( print_points::@10/(byte*) print_line_cursor#8 )
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#38
  return 
  to:@return
@25: scope:[]  from @19
  (byte*) print_screen#7 ← phi( @19/(byte*) print_screen#8 )
  (byte*) print_char_cursor#47 ← phi( @19/(byte*) print_char_cursor#52 )
  (byte*) print_line_cursor#25 ← phi( @19/(byte*) print_line_cursor#28 )
  call main 
  to:@26
@26: scope:[]  from @25
  (byte*) print_char_cursor#39 ← phi( @25/(byte*) print_char_cursor#13 )
  (byte*) print_line_cursor#20 ← phi( @25/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#20
  (byte*) print_char_cursor#20 ← (byte*) print_char_cursor#39
  to:@end
@end: scope:[]  from @26

SYMBOL TABLE SSA
(byte~) $0
(const string) $1 = (string) "0123456789abcdef"
(label) @12
(label) @19
(label) @25
(label) @26
(label) @begin
(label) @end
(byte) NUM_POINTS
(byte) NUM_POINTS#0
(byte) SIZEOF_POINT
(byte) SIZEOF_POINT#0
(void()) init_points()
(number~) init_points::$0
(byte*~) init_points::$1
(byte*~) init_points::$2
(byte*~) init_points::$3
(bool~) init_points::$4
(label) init_points::@1
(label) init_points::@3
(label) init_points::@4
(label) init_points::@5
(label) init_points::@return
(label) init_points::getPoint1
(byte~) init_points::getPoint1_$0
(byte~) init_points::getPoint1_$0#0
(byte*~) init_points::getPoint1_$1
(byte*~) init_points::getPoint1_$1#0
(label) init_points::getPoint1_@return
(byte) init_points::getPoint1_idx
(byte) init_points::getPoint1_idx#0
(byte) init_points::getPoint1_idx#1
(byte*) init_points::getPoint1_return
(byte*) init_points::getPoint1_return#0
(byte*) init_points::getPoint1_return#1
(byte*) init_points::getPoint1_return#2
(byte*) init_points::getPoint1_return#3
(byte) init_points::i
(byte) init_points::i#0
(byte) init_points::i#1
(byte) init_points::i#10
(byte) init_points::i#11
(byte) init_points::i#2
(byte) init_points::i#3
(byte) init_points::i#4
(byte) init_points::i#5
(byte) init_points::i#6
(byte) init_points::i#7
(byte) init_points::i#8
(byte) init_points::i#9
(byte*) init_points::point
(byte*) init_points::point#0
(byte*) init_points::point#1
(byte*) init_points::point#2
(byte*) init_points::point#3
(label) init_points::pointXpos1
(byte*~) init_points::pointXpos1_$0
(byte*~) init_points::pointXpos1_$0#0
(byte*~) init_points::pointXpos1_$1
(byte*~) init_points::pointXpos1_$1#0
(label) init_points::pointXpos1_@return
(byte*) init_points::pointXpos1_point
(byte*) init_points::pointXpos1_point#0
(byte*) init_points::pointXpos1_point#1
(byte*) init_points::pointXpos1_return
(byte*) init_points::pointXpos1_return#0
(byte*) init_points::pointXpos1_return#1
(byte*) init_points::pointXpos1_return#2
(byte*) init_points::pointXpos1_return#3
(label) init_points::pointYpos1
(byte*~) init_points::pointYpos1_$0
(byte*~) init_points::pointYpos1_$0#0
(byte*~) init_points::pointYpos1_$1
(byte*~) init_points::pointYpos1_$1#0
(label) init_points::pointYpos1_@return
(byte*) init_points::pointYpos1_point
(byte*) init_points::pointYpos1_point#0
(byte*) init_points::pointYpos1_point#1
(byte*) init_points::pointYpos1_return
(byte*) init_points::pointYpos1_return#0
(byte*) init_points::pointYpos1_return#1
(byte*) init_points::pointYpos1_return#2
(byte*) init_points::pointYpos1_return#3
(byte) init_points::pos
(byte) init_points::pos#0
(byte) init_points::pos#1
(byte) init_points::pos#10
(byte) init_points::pos#11
(byte) init_points::pos#12
(byte) init_points::pos#2
(byte) init_points::pos#3
(byte) init_points::pos#4
(byte) init_points::pos#5
(byte) init_points::pos#6
(byte) init_points::pos#7
(byte) init_points::pos#8
(byte) init_points::pos#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@return
(byte[$0]) points
(byte[$0]) points#0
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(number~) print_byte::$2
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(bool~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte[]) print_hextab
(byte[]) print_hextab#0
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_points()
(number~) print_points::$1
(byte*~) print_points::$2
(byte*~) print_points::$3
(byte*~) print_points::$6
(bool~) print_points::$9
(label) print_points::@1
(label) print_points::@10
(label) print_points::@3
(label) print_points::@4
(label) print_points::@5
(label) print_points::@6
(label) print_points::@7
(label) print_points::@8
(label) print_points::@9
(label) print_points::@return
(label) print_points::getPoint1
(byte~) print_points::getPoint1_$0
(byte~) print_points::getPoint1_$0#0
(byte*~) print_points::getPoint1_$1
(byte*~) print_points::getPoint1_$1#0
(label) print_points::getPoint1_@return
(byte) print_points::getPoint1_idx
(byte) print_points::getPoint1_idx#0
(byte) print_points::getPoint1_idx#1
(byte*) print_points::getPoint1_return
(byte*) print_points::getPoint1_return#0
(byte*) print_points::getPoint1_return#1
(byte*) print_points::getPoint1_return#2
(byte*) print_points::getPoint1_return#3
(byte) print_points::i
(byte) print_points::i#0
(byte) print_points::i#1
(byte) print_points::i#10
(byte) print_points::i#11
(byte) print_points::i#12
(byte) print_points::i#13
(byte) print_points::i#14
(byte) print_points::i#15
(byte) print_points::i#2
(byte) print_points::i#3
(byte) print_points::i#4
(byte) print_points::i#5
(byte) print_points::i#6
(byte) print_points::i#7
(byte) print_points::i#8
(byte) print_points::i#9
(byte*) print_points::point
(byte*) print_points::point#0
(byte*) print_points::point#1
(byte*) print_points::point#2
(byte*) print_points::point#3
(byte*) print_points::point#4
(byte*) print_points::point#5
(label) print_points::pointXpos1
(byte*~) print_points::pointXpos1_$0
(byte*~) print_points::pointXpos1_$0#0
(byte*~) print_points::pointXpos1_$1
(byte*~) print_points::pointXpos1_$1#0
(label) print_points::pointXpos1_@return
(byte*) print_points::pointXpos1_point
(byte*) print_points::pointXpos1_point#0
(byte*) print_points::pointXpos1_point#1
(byte*) print_points::pointXpos1_return
(byte*) print_points::pointXpos1_return#0
(byte*) print_points::pointXpos1_return#1
(byte*) print_points::pointXpos1_return#2
(byte*) print_points::pointXpos1_return#3
(label) print_points::pointYpos1
(byte*~) print_points::pointYpos1_$0
(byte*~) print_points::pointYpos1_$0#0
(byte*~) print_points::pointYpos1_$1
(byte*~) print_points::pointYpos1_$1#0
(label) print_points::pointYpos1_@return
(byte*) print_points::pointYpos1_point
(byte*) print_points::pointYpos1_point#0
(byte*) print_points::pointYpos1_point#1
(byte*) print_points::pointYpos1_return
(byte*) print_points::pointYpos1_return#0
(byte*) print_points::pointYpos1_return#1
(byte*) print_points::pointYpos1_return#2
(byte*) print_points::pointYpos1_return#3
(const string) print_points::str = (string) " @"
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_str((byte*) print_str::str)
(bool~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4

Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#11 + (number) $28
Adding number conversion cast (unumber) 4 in (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (number) 4
Adding number conversion cast (unumber) $f in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (number) $f
Adding number conversion cast (unumber) print_byte::$2 in (number~) print_byte::$2 ← (byte) print_byte::b#3 & (unumber)(number) $f
Adding number conversion cast (unumber) $3e8 in (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (number) $3e8
Adding number conversion cast (unumber) 2 in (byte) SIZEOF_POINT#0 ← (number) 2
Adding number conversion cast (unumber) 4 in (byte) NUM_POINTS#0 ← (number) 4
Adding number conversion cast (unumber) $a in (byte) init_points::pos#0 ← (number) $a
Adding number conversion cast (unumber) 1 in (number~) init_points::$0 ← (byte) NUM_POINTS#0 - (number) 1
Adding number conversion cast (unumber) init_points::$0 in (number~) init_points::$0 ← (byte) NUM_POINTS#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) init_points::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte*~) init_points::pointXpos1_$0#0 ← (byte*) init_points::pointXpos1_point#1 + (number) 0
Adding number conversion cast (unumber) $a in (byte) init_points::pos#1 ← (byte) init_points::pos#3 + (number) $a
Adding number conversion cast (unumber) 1 in (byte*~) init_points::pointYpos1_$0#0 ← (byte*) init_points::pointYpos1_point#1 + (number) 1
Adding number conversion cast (unumber) $a in (byte) init_points::pos#2 ← (byte) init_points::pos#4 + (number) $a
Adding number conversion cast (unumber) 1 in (number~) print_points::$1 ← (byte) NUM_POINTS#0 - (number) 1
Adding number conversion cast (unumber) print_points::$1 in (number~) print_points::$1 ← (byte) NUM_POINTS#0 - (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (byte) print_points::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte*~) print_points::pointXpos1_$0#0 ← (byte*) print_points::pointXpos1_point#1 + (number) 0
Adding number conversion cast (unumber) 1 in (byte*~) print_points::pointYpos1_$0#0 ← (byte*) print_points::pointYpos1_point#1 + (number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (byte) SIZEOF_POINT#0 ← (unumber)(number) 2
Inlining cast (byte) NUM_POINTS#0 ← (unumber)(number) 4
Inlining cast (byte) init_points::pos#0 ← (unumber)(number) $a
Inlining cast (byte) init_points::i#0 ← (unumber)(number) 0
Inlining cast (byte*~) init_points::pointXpos1_$1#0 ← (byte*)(byte*~) init_points::pointXpos1_$0#0
Inlining cast (byte*~) init_points::pointYpos1_$1#0 ← (byte*)(byte*~) init_points::pointYpos1_$0#0
Inlining cast (byte) print_points::i#0 ← (unumber)(number) 0
Inlining cast (byte*~) print_points::pointXpos1_$1#0 ← (byte*)(byte*~) print_points::pointXpos1_$0#0
Inlining cast (byte*~) print_points::pointYpos1_$1#0 ← (byte*)(byte*~) print_points::pointYpos1_$0#0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3e8
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (byte*~) init_points::pointXpos1_$0#0
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast (byte*~) init_points::pointYpos1_$0#0
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (byte*~) print_points::pointXpos1_$0#0
Simplifying constant integer cast 1
Simplifying constant integer cast (byte*~) print_points::pointYpos1_$0#0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) print_byte::$2 ← (byte) print_byte::b#3 & (byte) $f
Inferred type updated to byte in (unumber~) init_points::$0 ← (byte) NUM_POINTS#0 - (byte) 1
Inferred type updated to byte in (unumber~) print_points::$1 ← (byte) NUM_POINTS#0 - (byte) 1
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#29 (byte*) print_char_cursor#53 (byte*) print_screen#9 (byte*) print_line_cursor#28 (byte*) print_char_cursor#52 (byte*) print_screen#8 (byte*) print_line_cursor#25 (byte*) print_char_cursor#47 (byte*) print_screen#7 
Alias (byte*) print_str::str#2 = (byte*) print_str::str#3 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#21 (byte*) print_char_cursor#40 (byte*) print_char_cursor#22 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#12 (byte*) print_char_cursor#3 (byte*) print_line_cursor#13 (byte*) print_char_cursor#24 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte) print_byte::b#2 = (byte) print_byte::b#3 
Alias (byte*) print_char_cursor#25 = (byte*) print_char_cursor#5 
Alias (byte*) print_char_cursor#26 = (byte*) print_char_cursor#6 (byte*) print_char_cursor#27 (byte*) print_char_cursor#7 
Alias (byte*) print_char_cursor#29 = (byte*) print_char_cursor#8 (byte*) print_char_cursor#9 
Alias (byte*) print_line_cursor#14 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#10 (byte*) print_char_cursor#30 (byte*) print_line_cursor#4 (byte*) print_char_cursor#11 
Alias (byte*) print_line_cursor#22 = (byte*) print_line_cursor#26 
Alias (byte*) print_char_cursor#43 = (byte*) print_char_cursor#49 
Alias (byte*) print_screen#5 = (byte*) print_screen#6 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#5 (byte*) print_line_cursor#16 (byte*) print_line_cursor#6 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#31 (byte*) print_char_cursor#32 (byte*) print_char_cursor#13 
Alias (byte) init_points::i#10 = (byte) init_points::getPoint1_idx#0 (byte) init_points::i#2 (byte) init_points::getPoint1_idx#1 (byte) init_points::i#11 (byte) init_points::i#9 (byte) init_points::i#8 (byte) init_points::i#7 (byte) init_points::i#6 (byte) init_points::i#5 (byte) init_points::i#4 (byte) init_points::i#3 
Alias (byte) init_points::pos#10 = (byte) init_points::pos#11 (byte) init_points::pos#12 (byte) init_points::pos#9 (byte) init_points::pos#7 (byte) init_points::pos#5 (byte) init_points::pos#3 
Alias (byte*) init_points::getPoint1_return#0 = (byte*~) init_points::getPoint1_$1#0 (byte*) init_points::getPoint1_return#2 (byte*) init_points::getPoint1_return#1 (byte*) init_points::getPoint1_return#3 (byte*~) init_points::$1 (byte*) init_points::point#0 (byte*) init_points::pointXpos1_point#0 (byte*) init_points::pointXpos1_point#1 (byte*) init_points::point#3 (byte*) init_points::point#2 (byte*) init_points::point#1 (byte*) init_points::pointYpos1_point#0 (byte*) init_points::pointYpos1_point#1 
Alias (byte*) init_points::pointXpos1_return#0 = (byte*~) init_points::pointXpos1_$1#0 (byte*~) init_points::pointXpos1_$0#0 (byte*) init_points::pointXpos1_return#2 (byte*) init_points::pointXpos1_return#1 (byte*) init_points::pointXpos1_return#3 (byte*~) init_points::$2 
Alias (byte) init_points::pos#1 = (byte) init_points::pos#8 (byte) init_points::pos#6 (byte) init_points::pos#4 
Alias (byte*) init_points::pointYpos1_return#0 = (byte*~) init_points::pointYpos1_$1#0 (byte*~) init_points::pointYpos1_$0#0 (byte*) init_points::pointYpos1_return#2 (byte*) init_points::pointYpos1_return#1 (byte*) init_points::pointYpos1_return#3 (byte*~) init_points::$3 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#33 
Alias (byte) print_points::i#10 = (byte) print_points::getPoint1_idx#0 (byte) print_points::i#2 (byte) print_points::getPoint1_idx#1 (byte) print_points::i#15 (byte) print_points::i#14 (byte) print_points::i#13 (byte) print_points::i#12 (byte) print_points::i#11 (byte) print_points::i#9 (byte) print_points::i#8 (byte) print_points::i#7 (byte) print_points::i#6 (byte) print_points::i#5 (byte) print_points::i#4 (byte) print_points::i#3 
Alias (byte*) print_char_cursor#45 = (byte*) print_char_cursor#58 (byte*) print_char_cursor#59 (byte*) print_char_cursor#57 (byte*) print_char_cursor#56 (byte*) print_char_cursor#54 (byte*) print_char_cursor#50 
Alias (byte*) print_line_cursor#24 = (byte*) print_line_cursor#39 (byte*) print_line_cursor#40 (byte*) print_line_cursor#38 (byte*) print_line_cursor#37 (byte*) print_line_cursor#36 (byte*) print_line_cursor#35 (byte*) print_line_cursor#34 (byte*) print_line_cursor#33 (byte*) print_line_cursor#32 (byte*) print_line_cursor#31 (byte*) print_line_cursor#30 (byte*) print_line_cursor#27 
Alias (byte*) print_points::point#0 = (byte*) print_points::getPoint1_return#0 (byte*~) print_points::getPoint1_$1#0 (byte*) print_points::getPoint1_return#2 (byte*) print_points::getPoint1_return#1 (byte*) print_points::getPoint1_return#3 (byte*~) print_points::$2 (byte*) print_points::pointXpos1_point#0 (byte*) print_points::pointXpos1_point#1 (byte*) print_points::point#5 (byte*) print_points::point#4 (byte*) print_points::point#3 (byte*) print_points::point#2 (byte*) print_points::point#1 (byte*) print_points::pointYpos1_point#0 (byte*) print_points::pointYpos1_point#1 
Alias (byte*) print_points::pointXpos1_return#0 = (byte*~) print_points::pointXpos1_$1#0 (byte*~) print_points::pointXpos1_$0#0 (byte*) print_points::pointXpos1_return#2 (byte*) print_points::pointXpos1_return#1 (byte*) print_points::pointXpos1_return#3 (byte*~) print_points::$3 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#34 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#35 (byte*) print_char_cursor#55 (byte*) print_char_cursor#51 (byte*) print_char_cursor#46 
Alias (byte*) print_points::pointYpos1_return#0 = (byte*~) print_points::pointYpos1_$1#0 (byte*~) print_points::pointYpos1_$0#0 (byte*) print_points::pointYpos1_return#2 (byte*) print_points::pointYpos1_return#1 (byte*) print_points::pointYpos1_return#3 (byte*~) print_points::$6 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#36 
Alias (byte*) print_line_cursor#18 = (byte*) print_line_cursor#8 (byte*) print_line_cursor#19 (byte*) print_line_cursor#9 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#37 (byte*) print_char_cursor#38 (byte*) print_char_cursor#19 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#20 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#39 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) print_char_cursor#23
Self Phi Eliminated (byte*) print_line_cursor#14
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) print_str::str#4 (byte*) print_str::str#1
Identical Phi Values (byte*) print_char_cursor#48 (byte*) print_char_cursor#15
Identical Phi Values (byte*) print_line_cursor#21 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#41 (byte*) print_char_cursor#17
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#41
Identical Phi Values (byte*) print_char_cursor#25 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_char_cursor#26 (byte*) print_char_cursor#29
Identical Phi Values (byte*) print_screen#1 (byte*) print_screen#4
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#22 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_screen#5 (byte*) print_line_cursor#0
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#18
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_char_cursor#18
Identical Phi Values (byte*) print_screen#4 (byte*) print_screen#5
Identical Phi Values (byte*) print_line_cursor#23 (byte*) print_line_cursor#22
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#43
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_line_cursor#14
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_char_cursor#26
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_char_cursor#2
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#26
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_line_cursor#1
Identical Phi Values (byte*) print_line_cursor#10 (byte*) print_line_cursor#15
Identical Phi Values (byte*) print_char_cursor#20 (byte*) print_char_cursor#12
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) print_str::$0 [6] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
Simple Condition (bool~) print_ln::$1 [19] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#29) goto print_ln::@1
Simple Condition (bool~) print_cls::$1 [55] if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (bool~) init_points::$4 [117] if((byte) init_points::i#1!=rangelast(0,init_points::$0)) goto init_points::@1
Simple Condition (bool~) print_points::$9 [173] if((byte) print_points::i#1!=rangelast(0,print_points::$1)) goto print_points::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = (byte*) 1024
Constant (const byte[]) print_hextab#0 = $1
Constant (const byte) SIZEOF_POINT#0 = 2
Constant (const byte) NUM_POINTS#0 = 4
Constant (const byte) init_points::pos#0 = $a
Constant (const byte) init_points::i#0 = 0
Constant (const byte) print_points::i#0 = 0
Constant (const byte*) print_str::str#1 = print_points::str
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [102] *((byte*) init_points::pointXpos1_return#0) ← (byte) init_points::pos#10  -- *(init_points::getPoint1_return#0 + 0)
Converting *(pointer+n) to pointer[n] [113] *((byte*) init_points::pointYpos1_return#0) ← (byte) init_points::pos#1  -- *(init_points::getPoint1_return#0 + 1)
Converting *(pointer+n) to pointer[n] [146] (byte) print_byte::b#0 ← *((byte*) print_points::pointXpos1_return#0)  -- *(print_points::point#0 + 0)
Converting *(pointer+n) to pointer[n] [163] (byte) print_byte::b#1 ← *((byte*) print_points::pointYpos1_return#0)  -- *(print_points::point#0 + 1)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero init_points::getPoint1_return#0 in [95] (byte*) init_points::pointXpos1_return#0 ← (byte*) init_points::getPoint1_return#0 + (byte) 0
Simplifying expression containing zero init_points::getPoint1_return#0 in [102] *((byte*) init_points::getPoint1_return#0 + (byte) 0) ← (byte) init_points::pos#10
Simplifying expression containing zero print_points::point#0 in [139] (byte*) print_points::pointXpos1_return#0 ← (byte*) print_points::point#0 + (byte) 0
Simplifying expression containing zero print_points::point#0 in [146] (byte) print_byte::b#0 ← *((byte*) print_points::point#0 + (byte) 0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*) init_points::pointXpos1_return#0 and assignment [37] (byte*) init_points::pointXpos1_return#0 ← (byte*) init_points::getPoint1_return#0
Eliminating unused variable (byte*) init_points::pointYpos1_return#0 and assignment [40] (byte*) init_points::pointYpos1_return#0 ← (byte*) init_points::getPoint1_return#0 + (byte) 1
Eliminating unused variable (byte*) print_points::pointXpos1_return#0 and assignment [51] (byte*) print_points::pointXpos1_return#0 ← (byte*) print_points::point#0
Eliminating unused variable (byte*) print_points::pointYpos1_return#0 and assignment [55] (byte*) print_points::pointYpos1_return#0 ← (byte*) print_points::point#0 + (byte) 1
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [25] (byte*~) print_cls::$0 ← (const byte*) print_line_cursor#0 + (word) $3e8
Constant right-side identified [28] (byte~) $0 ← (const byte) NUM_POINTS#0 * (const byte) SIZEOF_POINT#0
Constant right-side identified [33] (byte~) init_points::$0 ← (const byte) NUM_POINTS#0 - (byte) 1
Constant right-side identified [45] (byte~) print_points::$1 ← (const byte) NUM_POINTS#0 - (byte) 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_cls::$0 = print_line_cursor#0+$3e8
Constant (const byte) $0 = NUM_POINTS#0*SIZEOF_POINT#0
Constant (const byte) init_points::$0 = NUM_POINTS#0-1
Constant (const byte) print_points::$1 = NUM_POINTS#0-1
Successful SSA optimization Pass2ConstantIdentification
Constant value identified { fill( $0, 0) } in [29] (byte[$0]) points#0 ← { fill( $0, 0) }
Successful SSA optimization Pass2ConstantValues
Resolved ranged next value [41] init_points::i#1 ← ++ init_points::i#10 to ++
Resolved ranged comparison value [42] if(init_points::i#1!=rangelast(0,init_points::$0)) goto init_points::@1 to (const byte) init_points::$0+(number) 1
Resolved ranged next value [55] print_points::i#1 ← ++ print_points::i#10 to ++
Resolved ranged comparison value [56] if(print_points::i#1!=rangelast(0,print_points::$1)) goto print_points::@1 to (const byte) print_points::$1+(number) 1
Converting *(pointer+n) to pointer[n] [37] *((byte*) init_points::getPoint1_return#0) ← (byte) init_points::pos#10  -- *(points#0 + init_points::getPoint1_$0#0)
Converting *(pointer+n) to pointer[n] [49] (byte) print_byte::b#0 ← *((byte*) print_points::point#0)  -- *(points#0 + print_points::getPoint1_$0#0)
Successful SSA optimization Pass2InlineDerefIdx
Adding number conversion cast (unumber) init_points::$0+1 in if((byte) init_points::i#1!=(const byte) init_points::$0+(number) 1) goto init_points::@1
Adding number conversion cast (unumber) 1 in if((byte) init_points::i#1!=(unumber)(const byte) init_points::$0+(number) 1) goto init_points::@1
Adding number conversion cast (unumber) print_points::$1+1 in if((byte) print_points::i#1!=(const byte) print_points::$1+(number) 1) goto print_points::@1
Adding number conversion cast (unumber) 1 in if((byte) print_points::i#1!=(unumber)(const byte) print_points::$1+(number) 1) goto print_points::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (const byte) init_points::$0+(unumber)(number) 1
Simplifying constant integer cast 1
Simplifying constant integer cast (const byte) print_points::$1+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const byte[$0]) points#0 = { fill( $0, 0) }
Successful SSA optimization Pass2ConstantIdentification
Rewriting multiplication to use shift [31] (byte~) init_points::getPoint1_$0#0 ← (byte) init_points::i#10 * (const byte) SIZEOF_POINT#0
Rewriting multiplication to use shift [42] (byte~) print_points::getPoint1_$0#0 ← (byte) print_points::i#10 * (const byte) SIZEOF_POINT#0
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte*) print_str::str#1
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) init_points::pos#0
Inlining constant with var siblings (const byte) init_points::i#0
Inlining constant with var siblings (const byte) print_points::i#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined init_points::$0 = (const byte) NUM_POINTS#0-(byte) 1
Constant inlined init_points::i#0 = (byte) 0
Constant inlined print_points::$1 = (const byte) NUM_POINTS#0-(byte) 1
Constant inlined print_points::i#0 = (byte) 0
Constant inlined print_cls::$0 = (byte*) 1024+(word) $3e8
Constant inlined print_line_cursor#0 = (byte*) 1024
Constant inlined print_str::str#1 = (const string) print_points::str
Constant inlined print_cls::sc#0 = (byte*) 1024
Constant inlined $0 = (const byte) NUM_POINTS#0*(const byte) SIZEOF_POINT#0
Constant inlined $1 = (const byte[]) print_hextab#0
Constant inlined init_points::pos#0 = (byte) $a
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Added new block during phi lifting init_points::@6(between init_points::@5 and init_points::@1)
Added new block during phi lifting print_points::@11(between print_points::@10 and print_points::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @12
Adding NOP phi() at start of @19
Adding NOP phi() at start of @25
Adding NOP phi() at start of @26
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of print_points
Adding NOP phi() at start of print_points::@6
Adding NOP phi() at start of print_points::getPoint1_@return
Adding NOP phi() at start of print_points::@3
Adding NOP phi() at start of print_points::pointXpos1
Adding NOP phi() at start of print_points::pointXpos1_@return
Adding NOP phi() at start of print_points::@7
Adding NOP phi() at start of print_points::@8
Adding NOP phi() at start of print_points::pointYpos1
Adding NOP phi() at start of print_points::pointYpos1_@return
Adding NOP phi() at start of print_points::@9
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_byte::@2
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of print_cls::@2
Adding NOP phi() at start of init_points
Adding NOP phi() at start of init_points::getPoint1_@return
Adding NOP phi() at start of init_points::@3
Adding NOP phi() at start of init_points::pointXpos1
Adding NOP phi() at start of init_points::pointXpos1_@return
Adding NOP phi() at start of init_points::pointYpos1
Adding NOP phi() at start of init_points::pointYpos1_@return
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to init_points:8 print_points:10 
Calls in [print_points] to print_cls:14 print_byte:26 print_str:28 print_byte:35 print_ln:37 
Calls in [print_byte] to print_char:56 print_char:61 

Created 13 initial phi equivalence classes
Coalesced [24] print_byte::b#4 ← print_byte::b#0
Coalesced [25] print_char_cursor#62 ← print_char_cursor#45
Coalesced [33] print_byte::b#5 ← print_byte::b#1
Coalesced [34] print_char_cursor#63 ← print_char_cursor#2
Coalesced [41] print_points::i#16 ← print_points::i#1
Not coalescing [42] print_char_cursor#66 ← print_line_cursor#1
Coalesced [43] print_line_cursor#43 ← print_line_cursor#1
Coalesced [44] print_line_cursor#41 ← print_line_cursor#24
Coalesced (already) [50] print_line_cursor#42 ← print_line_cursor#1
Coalesced [54] print_char::ch#3 ← print_char::ch#0
Coalesced [55] print_char_cursor#64 ← print_char_cursor#42
Coalesced [59] print_char::ch#4 ← print_char::ch#1
Coalesced [60] print_char_cursor#65 ← print_char_cursor#29
Coalesced (already) [68] print_char_cursor#60 ← print_char_cursor#29
Coalesced [75] print_str::str#5 ← print_str::str#0
Coalesced [76] print_char_cursor#61 ← print_char_cursor#1
Coalesced [84] print_cls::sc#3 ← print_cls::sc#1
Coalesced [102] init_points::i#12 ← init_points::i#1
Coalesced [103] init_points::pos#13 ← init_points::pos#2
Coalesced down to 9 phi equivalence classes
Culled Empty Block (label) @12
Culled Empty Block (label) @19
Culled Empty Block (label) @26
Culled Empty Block (label) main::@2
Culled Empty Block (label) print_points::@6
Culled Empty Block (label) print_points::getPoint1_@return
Culled Empty Block (label) print_points::@3
Culled Empty Block (label) print_points::pointXpos1_@return
Culled Empty Block (label) print_points::@8
Culled Empty Block (label) print_points::pointYpos1_@return
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) print_cls::@3
Culled Empty Block (label) init_points::getPoint1_@return
Culled Empty Block (label) init_points::@3
Culled Empty Block (label) init_points::pointXpos1_@return
Culled Empty Block (label) init_points::pointYpos1_@return
Culled Empty Block (label) init_points::@6
Renumbering block @25 to @1
Renumbering block init_points::@4 to init_points::@2
Renumbering block init_points::@5 to init_points::@3
Renumbering block print_points::@4 to print_points::@2
Renumbering block print_points::@5 to print_points::@3
Renumbering block print_points::@7 to print_points::@4
Renumbering block print_points::@9 to print_points::@5
Renumbering block print_points::@10 to print_points::@6
Renumbering block print_points::@11 to print_points::@7
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_points
Adding NOP phi() at start of print_points::pointXpos1
Adding NOP phi() at start of print_points::@4
Adding NOP phi() at start of print_points::pointYpos1
Adding NOP phi() at start of print_points::@5
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_cls
Adding NOP phi() at start of init_points
Adding NOP phi() at start of init_points::pointXpos1
Adding NOP phi() at start of init_points::pointYpos1

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call init_points 
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi()
  [7] call print_points 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [8] return 
  to:@return
print_points: scope:[print_points]  from main::@1
  [9] phi()
  [10] call print_cls 
  to:print_points::@1
print_points::@1: scope:[print_points]  from print_points print_points::@7
  [11] (byte*) print_line_cursor#24 ← phi( print_points::@7/(byte*) print_line_cursor#1 print_points/(byte*) 1024 )
  [11] (byte*) print_char_cursor#45 ← phi( print_points::@7/(byte*~) print_char_cursor#66 print_points/(byte*) 1024 )
  [11] (byte) print_points::i#10 ← phi( print_points::@7/(byte) print_points::i#1 print_points/(byte) 0 )
  to:print_points::getPoint1
print_points::getPoint1: scope:[print_points]  from print_points::@1
  [12] (byte~) print_points::getPoint1_$0#0 ← (byte) print_points::i#10 << (byte) 1
  [13] (byte*) print_points::point#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0
  to:print_points::pointXpos1
print_points::pointXpos1: scope:[print_points]  from print_points::getPoint1
  [14] phi()
  to:print_points::@2
print_points::@2: scope:[print_points]  from print_points::pointXpos1
  [15] (byte) print_byte::b#0 ← *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0)
  [16] call print_byte 
  to:print_points::@4
print_points::@4: scope:[print_points]  from print_points::@2
  [17] phi()
  [18] call print_str 
  to:print_points::pointYpos1
print_points::pointYpos1: scope:[print_points]  from print_points::@4
  [19] phi()
  to:print_points::@3
print_points::@3: scope:[print_points]  from print_points::pointYpos1
  [20] (byte) print_byte::b#1 ← *((byte*) print_points::point#0 + (byte) 1)
  [21] call print_byte 
  to:print_points::@5
print_points::@5: scope:[print_points]  from print_points::@3
  [22] phi()
  [23] call print_ln 
  to:print_points::@6
print_points::@6: scope:[print_points]  from print_points::@5
  [24] (byte) print_points::i#1 ← ++ (byte) print_points::i#10
  [25] if((byte) print_points::i#1!=(const byte) NUM_POINTS#0-(byte) 1+(byte) 1) goto print_points::@7
  to:print_points::@return
print_points::@return: scope:[print_points]  from print_points::@6
  [26] return 
  to:@return
print_points::@7: scope:[print_points]  from print_points::@6
  [27] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1
  to:print_points::@1
print_ln: scope:[print_ln]  from print_points::@5
  [28] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [29] (byte*) print_line_cursor#11 ← phi( print_ln/(byte*) print_line_cursor#24 print_ln::@1/(byte*) print_line_cursor#1 )
  [30] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte) $28
  [31] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#29) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [32] return 
  to:@return
print_byte: scope:[print_byte]  from print_points::@2 print_points::@3
  [33] (byte*) print_char_cursor#42 ← phi( print_points::@2/(byte*) print_char_cursor#45 print_points::@3/(byte*) print_char_cursor#2 )
  [33] (byte) print_byte::b#2 ← phi( print_points::@2/(byte) print_byte::b#0 print_points::@3/(byte) print_byte::b#1 )
  [34] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [35] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [36] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [37] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [38] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [39] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [40] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1
  [41] (byte*) print_char_cursor#28 ← phi( print_byte/(byte*) print_char_cursor#42 print_byte::@1/(byte*) print_char_cursor#29 )
  [41] (byte) print_char::ch#2 ← phi( print_byte/(byte) print_char::ch#0 print_byte::@1/(byte) print_char::ch#1 )
  [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#2
  [43] (byte*) print_char_cursor#29 ← ++ (byte*) print_char_cursor#28
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [44] return 
  to:@return
print_str: scope:[print_str]  from print_points::@4
  [45] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [46] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#29 print_str::@2/(byte*) print_char_cursor#1 )
  [46] (byte*) print_str::str#2 ← phi( print_str/(const string) print_points::str print_str::@2/(byte*) print_str::str#0 )
  [47] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [48] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [49] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2)
  [50] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [51] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1
print_cls: scope:[print_cls]  from print_points
  [52] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [53] (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) 1024 print_cls::@1/(byte*) print_cls::sc#1 )
  [54] *((byte*) print_cls::sc#2) ← (byte) ' '
  [55] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [56] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [57] return 
  to:@return
init_points: scope:[init_points]  from main
  [58] phi()
  to:init_points::@1
init_points::@1: scope:[init_points]  from init_points init_points::@3
  [59] (byte) init_points::pos#10 ← phi( init_points/(byte) $a init_points::@3/(byte) init_points::pos#2 )
  [59] (byte) init_points::i#10 ← phi( init_points/(byte) 0 init_points::@3/(byte) init_points::i#1 )
  to:init_points::getPoint1
init_points::getPoint1: scope:[init_points]  from init_points::@1
  [60] (byte~) init_points::getPoint1_$0#0 ← (byte) init_points::i#10 << (byte) 1
  [61] (byte*) init_points::getPoint1_return#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0
  to:init_points::pointXpos1
init_points::pointXpos1: scope:[init_points]  from init_points::getPoint1
  [62] phi()
  to:init_points::@2
init_points::@2: scope:[init_points]  from init_points::pointXpos1
  [63] *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0) ← (byte) init_points::pos#10
  [64] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a
  to:init_points::pointYpos1
init_points::pointYpos1: scope:[init_points]  from init_points::@2
  [65] phi()
  to:init_points::@3
init_points::@3: scope:[init_points]  from init_points::pointYpos1
  [66] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1
  [67] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte) $a
  [68] (byte) init_points::i#1 ← ++ (byte) init_points::i#10
  [69] if((byte) init_points::i#1!=(const byte) NUM_POINTS#0-(byte) 1+(byte) 1) goto init_points::@1
  to:init_points::@return
init_points::@return: scope:[init_points]  from init_points::@3
  [70] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) NUM_POINTS
(byte) SIZEOF_POINT
(void()) init_points()
(byte~) init_points::getPoint1_$0
(byte~) init_points::getPoint1_$0#0 11.0
(byte*~) init_points::getPoint1_$1
(byte) init_points::getPoint1_idx
(byte*) init_points::getPoint1_return
(byte*) init_points::getPoint1_return#0 4.4
(byte) init_points::i
(byte) init_points::i#1 16.5
(byte) init_points::i#10 3.666666666666667
(byte*) init_points::point
(byte*~) init_points::pointXpos1_$0
(byte*~) init_points::pointXpos1_$1
(byte*) init_points::pointXpos1_point
(byte*) init_points::pointXpos1_return
(byte*~) init_points::pointYpos1_$0
(byte*~) init_points::pointYpos1_$1
(byte*) init_points::pointYpos1_point
(byte*) init_points::pointYpos1_return
(byte) init_points::pos
(byte) init_points::pos#1 11.0
(byte) init_points::pos#10 6.6000000000000005
(byte) init_points::pos#2 7.333333333333333
(void()) main()
(byte[NUM_POINTS#0*SIZEOF_POINT#0]) points
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#0 22.0
(byte) print_byte::b#1 22.0
(byte) print_byte::b#2 6.5
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#0 4.0
(byte) print_char::ch#1 4.0
(byte) print_char::ch#2 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#2 45.142857142857146
(byte*) print_char_cursor#28 4.0
(byte*) print_char_cursor#29 6.6875
(byte*) print_char_cursor#42 8.0
(byte*) print_char_cursor#45 4.4
(byte*~) print_char_cursor#66 22.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#1 46.42857142857143
(byte*) print_line_cursor#11 204.0
(byte*) print_line_cursor#24 1.0
(void()) print_ln()
(void()) print_points()
(byte~) print_points::getPoint1_$0
(byte~) print_points::getPoint1_$0#0 11.0
(byte*~) print_points::getPoint1_$1
(byte) print_points::getPoint1_idx
(byte*) print_points::getPoint1_return
(byte) print_points::i
(byte) print_points::i#1 11.0
(byte) print_points::i#10 2.5384615384615383
(byte*) print_points::point
(byte*) print_points::point#0 3.142857142857143
(byte*~) print_points::pointXpos1_$0
(byte*~) print_points::pointXpos1_$1
(byte*) print_points::pointXpos1_point
(byte*) print_points::pointXpos1_return
(byte*~) print_points::pointYpos1_$0
(byte*~) print_points::pointYpos1_$1
(byte*) print_points::pointYpos1_point
(byte*) print_points::pointYpos1_return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#2 101.0

Initial phi equivalence classes
[ print_points::i#10 print_points::i#1 ]
[ print_line_cursor#11 print_line_cursor#24 print_line_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#28 print_char_cursor#42 print_char_cursor#45 print_char_cursor#66 print_char_cursor#2 print_char_cursor#29 print_char_cursor#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ init_points::i#10 init_points::i#1 ]
[ init_points::pos#10 init_points::pos#2 ]
Added variable print_points::getPoint1_$0#0 to zero page equivalence class [ print_points::getPoint1_$0#0 ]
Added variable print_points::point#0 to zero page equivalence class [ print_points::point#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable init_points::getPoint1_$0#0 to zero page equivalence class [ init_points::getPoint1_$0#0 ]
Added variable init_points::getPoint1_return#0 to zero page equivalence class [ init_points::getPoint1_return#0 ]
Added variable init_points::pos#1 to zero page equivalence class [ init_points::pos#1 ]
Complete equivalence classes
[ print_points::i#10 print_points::i#1 ]
[ print_line_cursor#11 print_line_cursor#24 print_line_cursor#1 ]
[ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
[ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
[ print_char_cursor#28 print_char_cursor#42 print_char_cursor#45 print_char_cursor#66 print_char_cursor#2 print_char_cursor#29 print_char_cursor#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ init_points::i#10 init_points::i#1 ]
[ init_points::pos#10 init_points::pos#2 ]
[ print_points::getPoint1_$0#0 ]
[ print_points::point#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ init_points::getPoint1_$0#0 ]
[ init_points::getPoint1_return#0 ]
[ init_points::pos#1 ]
Allocated zp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 ]
Allocated zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#24 print_line_cursor#1 ]
Allocated zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Allocated zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
Allocated zp ZP_WORD:7 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#45 print_char_cursor#66 print_char_cursor#2 print_char_cursor#29 print_char_cursor#1 ]
Allocated zp ZP_WORD:9 [ print_str::str#2 print_str::str#0 ]
Allocated zp ZP_WORD:11 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:13 [ init_points::i#10 init_points::i#1 ]
Allocated zp ZP_BYTE:14 [ init_points::pos#10 init_points::pos#2 ]
Allocated zp ZP_BYTE:15 [ print_points::getPoint1_$0#0 ]
Allocated zp ZP_WORD:16 [ print_points::point#0 ]
Allocated zp ZP_BYTE:18 [ print_byte::$0 ]
Allocated zp ZP_BYTE:19 [ print_byte::$2 ]
Allocated zp ZP_BYTE:20 [ init_points::getPoint1_$0#0 ]
Allocated zp ZP_WORD:21 [ init_points::getPoint1_return#0 ]
Allocated zp ZP_BYTE:23 [ init_points::pos#1 ]

INITIAL ASM
//SEG0 File Comments
// Implementing a semi-struct without the struct keyword by using pointer math and inline functions
//
// struct Point {
//    byte xpos; // The x-position
//    byte ypos; // The y-position
// };
// Point[NUM_POINTS] points;
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // The size of a point
  .const SIZEOF_POINT = 2
  // The number of points
  .const NUM_POINTS = 4
  .label print_char_cursor = 7
  .label print_line_cursor = 3
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
// Initialize some points and print them
main: {
  //SEG11 [5] call init_points 
  //SEG12 [58] phi from main to init_points [phi:main->init_points]
  init_points_from_main:
    jsr init_points
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call print_points 
  //SEG16 [9] phi from main::@1 to print_points [phi:main::@1->print_points]
  print_points_from_b1:
    jsr print_points
    jmp breturn
  //SEG17 main::@return
  breturn:
  //SEG18 [8] return 
    rts
}
//SEG19 print_points
// Print points
print_points: {
    .label getPoint1__0 = $f
    .label point = $10
    .label i = 2
  //SEG20 [10] call print_cls 
  //SEG21 [52] phi from print_points to print_cls [phi:print_points->print_cls]
  print_cls_from_print_points:
    jsr print_cls
  //SEG22 [11] phi from print_points to print_points::@1 [phi:print_points->print_points::@1]
  b1_from_print_points:
  //SEG23 [11] phi (byte*) print_line_cursor#24 = (byte*) 1024 [phi:print_points->print_points::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG24 [11] phi (byte*) print_char_cursor#45 = (byte*) 1024 [phi:print_points->print_points::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG25 [11] phi (byte) print_points::i#10 = (byte) 0 [phi:print_points->print_points::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG26 print_points::@1
  b1:
    jmp getPoint1
  //SEG27 print_points::getPoint1
  getPoint1:
  //SEG28 [12] (byte~) print_points::getPoint1_$0#0 ← (byte) print_points::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta getPoint1__0
  //SEG29 [13] (byte*) print_points::point#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0 -- pbuz1=pbuc1_plus_vbuz2 
    lda getPoint1__0
    clc
    adc #<points
    sta point
    lda #>points
    adc #0
    sta point+1
  //SEG30 [14] phi from print_points::getPoint1 to print_points::pointXpos1 [phi:print_points::getPoint1->print_points::pointXpos1]
  pointXpos1_from_getPoint1:
    jmp pointXpos1
  //SEG31 print_points::pointXpos1
  pointXpos1:
    jmp b2
  //SEG32 print_points::@2
  b2:
  //SEG33 [15] (byte) print_byte::b#0 ← *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy getPoint1__0
    lda points,y
    sta print_byte.b
  //SEG34 [16] call print_byte 
  //SEG35 [33] phi from print_points::@2 to print_byte [phi:print_points::@2->print_byte]
  print_byte_from_b2:
  //SEG36 [33] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#45 [phi:print_points::@2->print_byte#0] -- register_copy 
  //SEG37 [33] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_points::@2->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG38 [17] phi from print_points::@2 to print_points::@4 [phi:print_points::@2->print_points::@4]
  b4_from_b2:
    jmp b4
  //SEG39 print_points::@4
  b4:
  //SEG40 [18] call print_str 
  //SEG41 [45] phi from print_points::@4 to print_str [phi:print_points::@4->print_str]
  print_str_from_b4:
    jsr print_str
  //SEG42 [19] phi from print_points::@4 to print_points::pointYpos1 [phi:print_points::@4->print_points::pointYpos1]
  pointYpos1_from_b4:
    jmp pointYpos1
  //SEG43 print_points::pointYpos1
  pointYpos1:
    jmp b3
  //SEG44 print_points::@3
  b3:
  //SEG45 [20] (byte) print_byte::b#1 ← *((byte*) print_points::point#0 + (byte) 1) -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #1
    lda (point),y
    sta print_byte.b
  //SEG46 [21] call print_byte 
  //SEG47 [33] phi from print_points::@3 to print_byte [phi:print_points::@3->print_byte]
  print_byte_from_b3:
  //SEG48 [33] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#2 [phi:print_points::@3->print_byte#0] -- register_copy 
  //SEG49 [33] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_points::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG50 [22] phi from print_points::@3 to print_points::@5 [phi:print_points::@3->print_points::@5]
  b5_from_b3:
    jmp b5
  //SEG51 print_points::@5
  b5:
  //SEG52 [23] call print_ln 
  //SEG53 [28] phi from print_points::@5 to print_ln [phi:print_points::@5->print_ln]
  print_ln_from_b5:
    jsr print_ln
    jmp b6
  //SEG54 print_points::@6
  b6:
  //SEG55 [24] (byte) print_points::i#1 ← ++ (byte) print_points::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG56 [25] if((byte) print_points::i#1!=(const byte) NUM_POINTS#0-(byte) 1+(byte) 1) goto print_points::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_POINTS-1+1
    cmp i
    bne b7
    jmp breturn
  //SEG57 print_points::@return
  breturn:
  //SEG58 [26] return 
    rts
  //SEG59 print_points::@7
  b7:
  //SEG60 [27] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG61 [11] phi from print_points::@7 to print_points::@1 [phi:print_points::@7->print_points::@1]
  b1_from_b7:
  //SEG62 [11] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#1 [phi:print_points::@7->print_points::@1#0] -- register_copy 
  //SEG63 [11] phi (byte*) print_char_cursor#45 = (byte*~) print_char_cursor#66 [phi:print_points::@7->print_points::@1#1] -- register_copy 
  //SEG64 [11] phi (byte) print_points::i#10 = (byte) print_points::i#1 [phi:print_points::@7->print_points::@1#2] -- register_copy 
    jmp b1
    str: .text " @"
}
//SEG65 print_ln
// Print a newline
print_ln: {
  //SEG66 [29] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG67 [29] phi (byte*) print_line_cursor#11 = (byte*) print_line_cursor#24 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG68 print_ln::@1
  b1:
  //SEG69 [30] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG70 [31] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#29) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG71 print_ln::@return
  breturn:
  //SEG72 [32] return 
    rts
}
//SEG73 print_byte
// Print a byte as HEX
// print_byte(byte zeropage(5) b)
print_byte: {
    .label _0 = $12
    .label _2 = $13
    .label b = 5
  //SEG74 [34] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG75 [35] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda print_hextab,y
    sta print_char.ch
  //SEG76 [36] call print_char 
  //SEG77 [41] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG78 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#42 [phi:print_byte->print_char#0] -- register_copy 
  //SEG79 [41] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG80 print_byte::@1
  b1:
  //SEG81 [37] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG82 [38] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda print_hextab,y
    sta print_char.ch
  //SEG83 [39] call print_char 
  //SEG84 [41] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG85 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#29 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG86 [41] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG87 print_byte::@return
  breturn:
  //SEG88 [40] return 
    rts
}
//SEG89 print_char
// Print a single char
// print_char(byte zeropage(6) ch)
print_char: {
    .label ch = 6
  //SEG90 [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (print_char_cursor),y
  //SEG91 [43] (byte*) print_char_cursor#29 ← ++ (byte*) print_char_cursor#28 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG92 print_char::@return
  breturn:
  //SEG93 [44] return 
    rts
}
//SEG94 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(9) str)
print_str: {
    .label str = 9
  //SEG95 [46] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  b1_from_print_str:
  //SEG96 [46] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#29 [phi:print_str->print_str::@1#0] -- register_copy 
  //SEG97 [46] phi (byte*) print_str::str#2 = (const string) print_points::str [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<print_points.str
    sta str
    lda #>print_points.str
    sta str+1
    jmp b1
  //SEG98 print_str::@1
  b1:
  //SEG99 [47] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG100 print_str::@return
  breturn:
  //SEG101 [48] return 
    rts
  //SEG102 print_str::@2
  b2:
  //SEG103 [49] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG104 [50] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG105 [51] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG106 [46] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  b1_from_b2:
  //SEG107 [46] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG108 [46] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}
//SEG109 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = $b
  //SEG110 [53] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG111 [53] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG112 [53] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG113 [53] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG114 print_cls::@1
  b1:
  //SEG115 [54] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG116 [55] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG117 [56] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG118 print_cls::@return
  breturn:
  //SEG119 [57] return 
    rts
}
//SEG120 init_points
// Initialize points
init_points: {
    .label getPoint1__0 = $14
    .label getPoint1_return = $15
    .label pos = $17
    .label pos_2 = $e
    .label i = $d
    .label pos_10 = $e
  //SEG121 [59] phi from init_points to init_points::@1 [phi:init_points->init_points::@1]
  b1_from_init_points:
  //SEG122 [59] phi (byte) init_points::pos#10 = (byte) $a [phi:init_points->init_points::@1#0] -- vbuz1=vbuc1 
    lda #$a
    sta pos_10
  //SEG123 [59] phi (byte) init_points::i#10 = (byte) 0 [phi:init_points->init_points::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG124 [59] phi from init_points::@3 to init_points::@1 [phi:init_points::@3->init_points::@1]
  b1_from_b3:
  //SEG125 [59] phi (byte) init_points::pos#10 = (byte) init_points::pos#2 [phi:init_points::@3->init_points::@1#0] -- register_copy 
  //SEG126 [59] phi (byte) init_points::i#10 = (byte) init_points::i#1 [phi:init_points::@3->init_points::@1#1] -- register_copy 
    jmp b1
  //SEG127 init_points::@1
  b1:
    jmp getPoint1
  //SEG128 init_points::getPoint1
  getPoint1:
  //SEG129 [60] (byte~) init_points::getPoint1_$0#0 ← (byte) init_points::i#10 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda i
    asl
    sta getPoint1__0
  //SEG130 [61] (byte*) init_points::getPoint1_return#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0 -- pbuz1=pbuc1_plus_vbuz2 
    lda getPoint1__0
    clc
    adc #<points
    sta getPoint1_return
    lda #>points
    adc #0
    sta getPoint1_return+1
  //SEG131 [62] phi from init_points::getPoint1 to init_points::pointXpos1 [phi:init_points::getPoint1->init_points::pointXpos1]
  pointXpos1_from_getPoint1:
    jmp pointXpos1
  //SEG132 init_points::pointXpos1
  pointXpos1:
    jmp b2
  //SEG133 init_points::@2
  b2:
  //SEG134 [63] *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0) ← (byte) init_points::pos#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda pos_10
    ldy getPoint1__0
    sta points,y
  //SEG135 [64] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a -- vbuz1=vbuz2_plus_vbuc1 
    lax pos_10
    axs #-[$a]
    stx pos
  //SEG136 [65] phi from init_points::@2 to init_points::pointYpos1 [phi:init_points::@2->init_points::pointYpos1]
  pointYpos1_from_b2:
    jmp pointYpos1
  //SEG137 init_points::pointYpos1
  pointYpos1:
    jmp b3
  //SEG138 init_points::@3
  b3:
  //SEG139 [66] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 -- pbuz1_derefidx_vbuc1=vbuz2 
    lda pos
    ldy #1
    sta (getPoint1_return),y
  //SEG140 [67] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte) $a -- vbuz1=vbuz2_plus_vbuc1 
    lax pos
    axs #-[$a]
    stx pos_2
  //SEG141 [68] (byte) init_points::i#1 ← ++ (byte) init_points::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG142 [69] if((byte) init_points::i#1!=(const byte) NUM_POINTS#0-(byte) 1+(byte) 1) goto init_points::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_POINTS-1+1
    cmp i
    bne b1_from_b3
    jmp breturn
  //SEG143 init_points::@return
  breturn:
  //SEG144 [70] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  // All points
  points: .fill NUM_POINTS*SIZEOF_POINT, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [12] (byte~) print_points::getPoint1_$0#0 ← (byte) print_points::i#10 << (byte) 1 [ print_points::i#10 print_char_cursor#45 print_line_cursor#24 print_points::getPoint1_$0#0 ] ( main:2::print_points:7 [ print_points::i#10 print_char_cursor#45 print_line_cursor#24 print_points::getPoint1_$0#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 ]
Statement [13] (byte*) print_points::point#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0 [ print_points::i#10 print_char_cursor#45 print_line_cursor#24 print_points::getPoint1_$0#0 print_points::point#0 ] ( main:2::print_points:7 [ print_points::i#10 print_char_cursor#45 print_line_cursor#24 print_points::getPoint1_$0#0 print_points::point#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ print_points::getPoint1_$0#0 ]
Statement [20] (byte) print_byte::b#1 ← *((byte*) print_points::point#0 + (byte) 1) [ print_points::i#10 print_line_cursor#24 print_byte::b#1 print_char_cursor#2 ] ( main:2::print_points:7 [ print_points::i#10 print_line_cursor#24 print_byte::b#1 print_char_cursor#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 ]
Statement [27] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 [ print_points::i#1 print_char_cursor#66 print_line_cursor#1 ] ( main:2::print_points:7 [ print_points::i#1 print_char_cursor#66 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [30] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte) $28 [ print_line_cursor#1 print_char_cursor#29 ] ( main:2::print_points:7::print_ln:23 [ print_points::i#10 print_line_cursor#1 print_char_cursor#29 ] ) always clobbers reg byte a 
Statement [31] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#29) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#29 ] ( main:2::print_points:7::print_ln:23 [ print_points::i#10 print_line_cursor#1 print_char_cursor#29 ] ) always clobbers reg byte a 
Statement [34] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_byte::b#2 print_char_cursor#42 print_byte::$0 ] ( main:2::print_points:7::print_byte:16 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_byte::b#2 print_char_cursor#42 print_byte::$0 ] main:2::print_points:7::print_byte:21 [ print_points::i#10 print_line_cursor#24 print_byte::b#2 print_char_cursor#42 print_byte::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [37] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#29 print_byte::$2 ] ( main:2::print_points:7::print_byte:16 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_char_cursor#29 print_byte::$2 ] main:2::print_points:7::print_byte:21 [ print_points::i#10 print_line_cursor#24 print_char_cursor#29 print_byte::$2 ] ) always clobbers reg byte a 
Statement [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#2 [ print_char_cursor#28 ] ( main:2::print_points:7::print_byte:16::print_char:36 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_byte::b#2 print_char_cursor#28 ] main:2::print_points:7::print_byte:21::print_char:36 [ print_points::i#10 print_line_cursor#24 print_byte::b#2 print_char_cursor#28 ] main:2::print_points:7::print_byte:16::print_char:39 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_char_cursor#28 ] main:2::print_points:7::print_byte:21::print_char:39 [ print_points::i#10 print_line_cursor#24 print_char_cursor#28 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
Statement [47] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#2 ] ( main:2::print_points:7::print_str:18 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [49] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) [ print_char_cursor#2 print_str::str#2 ] ( main:2::print_points:7::print_str:18 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [54] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_points:7::print_cls:10 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [56] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_points:7::print_cls:10 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [60] (byte~) init_points::getPoint1_$0#0 ← (byte) init_points::i#10 << (byte) 1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0#0 ] ( main:2::init_points:5 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:13 [ init_points::i#10 init_points::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ init_points::pos#10 init_points::pos#2 ]
Statement [61] (byte*) init_points::getPoint1_return#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0#0 init_points::getPoint1_return#0 ] ( main:2::init_points:5 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0#0 init_points::getPoint1_return#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:20 [ init_points::getPoint1_$0#0 ]
Statement [63] *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0) ← (byte) init_points::pos#10 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_return#0 ] ( main:2::init_points:5 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_return#0 ] ) always clobbers reg byte a 
Statement [64] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a [ init_points::i#10 init_points::getPoint1_return#0 init_points::pos#1 ] ( main:2::init_points:5 [ init_points::i#10 init_points::getPoint1_return#0 init_points::pos#1 ] ) always clobbers reg byte a 
Statement [66] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 [ init_points::i#10 init_points::pos#1 ] ( main:2::init_points:5 [ init_points::i#10 init_points::pos#1 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:13 [ init_points::i#10 init_points::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:23 [ init_points::pos#1 ]
Statement [12] (byte~) print_points::getPoint1_$0#0 ← (byte) print_points::i#10 << (byte) 1 [ print_points::i#10 print_char_cursor#45 print_line_cursor#24 print_points::getPoint1_$0#0 ] ( main:2::print_points:7 [ print_points::i#10 print_char_cursor#45 print_line_cursor#24 print_points::getPoint1_$0#0 ] ) always clobbers reg byte a 
Statement [13] (byte*) print_points::point#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0 [ print_points::i#10 print_char_cursor#45 print_line_cursor#24 print_points::getPoint1_$0#0 print_points::point#0 ] ( main:2::print_points:7 [ print_points::i#10 print_char_cursor#45 print_line_cursor#24 print_points::getPoint1_$0#0 print_points::point#0 ] ) always clobbers reg byte a 
Statement [20] (byte) print_byte::b#1 ← *((byte*) print_points::point#0 + (byte) 1) [ print_points::i#10 print_line_cursor#24 print_byte::b#1 print_char_cursor#2 ] ( main:2::print_points:7 [ print_points::i#10 print_line_cursor#24 print_byte::b#1 print_char_cursor#2 ] ) always clobbers reg byte a reg byte y 
Statement [27] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 [ print_points::i#1 print_char_cursor#66 print_line_cursor#1 ] ( main:2::print_points:7 [ print_points::i#1 print_char_cursor#66 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [30] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte) $28 [ print_line_cursor#1 print_char_cursor#29 ] ( main:2::print_points:7::print_ln:23 [ print_points::i#10 print_line_cursor#1 print_char_cursor#29 ] ) always clobbers reg byte a 
Statement [31] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#29) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#29 ] ( main:2::print_points:7::print_ln:23 [ print_points::i#10 print_line_cursor#1 print_char_cursor#29 ] ) always clobbers reg byte a 
Statement [34] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 [ print_byte::b#2 print_char_cursor#42 print_byte::$0 ] ( main:2::print_points:7::print_byte:16 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_byte::b#2 print_char_cursor#42 print_byte::$0 ] main:2::print_points:7::print_byte:21 [ print_points::i#10 print_line_cursor#24 print_byte::b#2 print_char_cursor#42 print_byte::$0 ] ) always clobbers reg byte a 
Statement [37] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f [ print_char_cursor#29 print_byte::$2 ] ( main:2::print_points:7::print_byte:16 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_char_cursor#29 print_byte::$2 ] main:2::print_points:7::print_byte:21 [ print_points::i#10 print_line_cursor#24 print_char_cursor#29 print_byte::$2 ] ) always clobbers reg byte a 
Statement [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#2 [ print_char_cursor#28 ] ( main:2::print_points:7::print_byte:16::print_char:36 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_byte::b#2 print_char_cursor#28 ] main:2::print_points:7::print_byte:21::print_char:36 [ print_points::i#10 print_line_cursor#24 print_byte::b#2 print_char_cursor#28 ] main:2::print_points:7::print_byte:16::print_char:39 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_char_cursor#28 ] main:2::print_points:7::print_byte:21::print_char:39 [ print_points::i#10 print_line_cursor#24 print_char_cursor#28 ] ) always clobbers reg byte y 
Statement [47] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#2 print_str::str#2 ] ( main:2::print_points:7::print_str:18 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [49] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) [ print_char_cursor#2 print_str::str#2 ] ( main:2::print_points:7::print_str:18 [ print_points::i#10 print_line_cursor#24 print_points::point#0 print_char_cursor#2 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [54] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_points:7::print_cls:10 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [56] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_points:7::print_cls:10 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [60] (byte~) init_points::getPoint1_$0#0 ← (byte) init_points::i#10 << (byte) 1 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0#0 ] ( main:2::init_points:5 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0#0 ] ) always clobbers reg byte a 
Statement [61] (byte*) init_points::getPoint1_return#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0#0 init_points::getPoint1_return#0 ] ( main:2::init_points:5 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_$0#0 init_points::getPoint1_return#0 ] ) always clobbers reg byte a 
Statement [63] *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0) ← (byte) init_points::pos#10 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_return#0 ] ( main:2::init_points:5 [ init_points::i#10 init_points::pos#10 init_points::getPoint1_return#0 ] ) always clobbers reg byte a 
Statement [64] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a [ init_points::i#10 init_points::getPoint1_return#0 init_points::pos#1 ] ( main:2::init_points:5 [ init_points::i#10 init_points::getPoint1_return#0 init_points::pos#1 ] ) always clobbers reg byte a 
Statement [66] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 [ init_points::i#10 init_points::pos#1 ] ( main:2::init_points:5 [ init_points::i#10 init_points::pos#1 ] ) always clobbers reg byte y 
Potential registers zp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#24 print_line_cursor#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] : zp ZP_BYTE:5 , reg byte x , 
Potential registers zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:7 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#45 print_char_cursor#66 print_char_cursor#2 print_char_cursor#29 print_char_cursor#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ print_str::str#2 print_str::str#0 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_WORD:11 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_BYTE:13 [ init_points::i#10 init_points::i#1 ] : zp ZP_BYTE:13 , reg byte x , 
Potential registers zp ZP_BYTE:14 [ init_points::pos#10 init_points::pos#2 ] : zp ZP_BYTE:14 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:15 [ print_points::getPoint1_$0#0 ] : zp ZP_BYTE:15 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:16 [ print_points::point#0 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_BYTE:18 [ print_byte::$0 ] : zp ZP_BYTE:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ print_byte::$2 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ init_points::getPoint1_$0#0 ] : zp ZP_BYTE:20 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:21 [ init_points::getPoint1_return#0 ] : zp ZP_WORD:21 , 
Potential registers zp ZP_BYTE:23 [ init_points::pos#1 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 251.43: zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#24 print_line_cursor#1 ] 191.23: zp ZP_WORD:7 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#45 print_char_cursor#66 print_char_cursor#2 print_char_cursor#29 print_char_cursor#1 ] 
Uplift Scope [print_str] 303: zp ZP_WORD:9 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [init_points] 20.17: zp ZP_BYTE:13 [ init_points::i#10 init_points::i#1 ] 13.93: zp ZP_BYTE:14 [ init_points::pos#10 init_points::pos#2 ] 11: zp ZP_BYTE:20 [ init_points::getPoint1_$0#0 ] 11: zp ZP_BYTE:23 [ init_points::pos#1 ] 4.4: zp ZP_WORD:21 [ init_points::getPoint1_return#0 ] 
Uplift Scope [print_byte] 50.5: zp ZP_BYTE:5 [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] 4: zp ZP_BYTE:18 [ print_byte::$0 ] 4: zp ZP_BYTE:19 [ print_byte::$2 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:11 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [print_points] 13.54: zp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 ] 11: zp ZP_BYTE:15 [ print_points::getPoint1_$0#0 ] 3.14: zp ZP_WORD:16 [ print_points::point#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:6 [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplift Scope [print_ln] 
Uplift Scope [main] 

Uplifting [] best 14562 combination zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#24 print_line_cursor#1 ] zp ZP_WORD:7 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#45 print_char_cursor#66 print_char_cursor#2 print_char_cursor#29 print_char_cursor#1 ] 
Uplifting [print_str] best 14562 combination zp ZP_WORD:9 [ print_str::str#2 print_str::str#0 ] 
Uplifting [init_points] best 14362 combination reg byte x [ init_points::i#10 init_points::i#1 ] zp ZP_BYTE:14 [ init_points::pos#10 init_points::pos#2 ] reg byte y [ init_points::getPoint1_$0#0 ] reg byte a [ init_points::pos#1 ] zp ZP_WORD:21 [ init_points::getPoint1_return#0 ] 
Uplifting [print_byte] best 14310 combination reg byte x [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ] reg byte a [ print_byte::$0 ] reg byte x [ print_byte::$2 ] 
Uplifting [print_cls] best 14310 combination zp ZP_WORD:11 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [print_points] best 14260 combination zp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 ] reg byte y [ print_points::getPoint1_$0#0 ] zp ZP_WORD:16 [ print_points::point#0 ] 
Uplifting [print_char] best 14251 combination reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ] 
Uplifting [print_ln] best 14251 combination 
Uplifting [main] best 14251 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ init_points::pos#10 init_points::pos#2 ]
Uplifting [init_points] best 14251 combination zp ZP_BYTE:14 [ init_points::pos#10 init_points::pos#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 ]
Uplifting [print_points] best 14251 combination zp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 ] 
Coalescing zero page register [ zp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 ] ] with [ zp ZP_BYTE:14 [ init_points::pos#10 init_points::pos#2 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#24 print_line_cursor#1 ] ] with [ zp ZP_WORD:11 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#24 print_line_cursor#1 print_cls::sc#2 print_cls::sc#1 ] ] with [ zp ZP_WORD:21 [ init_points::getPoint1_return#0 ] ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:5 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#45 print_char_cursor#66 print_char_cursor#2 print_char_cursor#29 print_char_cursor#1 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:7 [ print_str::str#2 print_str::str#0 ]
Allocated (was zp ZP_WORD:16) zp ZP_WORD:9 [ print_points::point#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Implementing a semi-struct without the struct keyword by using pointer math and inline functions
//
// struct Point {
//    byte xpos; // The x-position
//    byte ypos; // The y-position
// };
// Point[NUM_POINTS] points;
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // The size of a point
  .const SIZEOF_POINT = 2
  // The number of points
  .const NUM_POINTS = 4
  .label print_char_cursor = 5
  .label print_line_cursor = 3
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
// Initialize some points and print them
main: {
  //SEG11 [5] call init_points 
  //SEG12 [58] phi from main to init_points [phi:main->init_points]
  init_points_from_main:
    jsr init_points
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG14 main::@1
  b1:
  //SEG15 [7] call print_points 
  //SEG16 [9] phi from main::@1 to print_points [phi:main::@1->print_points]
  print_points_from_b1:
    jsr print_points
    jmp breturn
  //SEG17 main::@return
  breturn:
  //SEG18 [8] return 
    rts
}
//SEG19 print_points
// Print points
print_points: {
    .label point = 9
    .label i = 2
  //SEG20 [10] call print_cls 
  //SEG21 [52] phi from print_points to print_cls [phi:print_points->print_cls]
  print_cls_from_print_points:
    jsr print_cls
  //SEG22 [11] phi from print_points to print_points::@1 [phi:print_points->print_points::@1]
  b1_from_print_points:
  //SEG23 [11] phi (byte*) print_line_cursor#24 = (byte*) 1024 [phi:print_points->print_points::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG24 [11] phi (byte*) print_char_cursor#45 = (byte*) 1024 [phi:print_points->print_points::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG25 [11] phi (byte) print_points::i#10 = (byte) 0 [phi:print_points->print_points::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG26 print_points::@1
  b1:
    jmp getPoint1
  //SEG27 print_points::getPoint1
  getPoint1:
  //SEG28 [12] (byte~) print_points::getPoint1_$0#0 ← (byte) print_points::i#10 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda i
    asl
    tay
  //SEG29 [13] (byte*) print_points::point#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0 -- pbuz1=pbuc1_plus_vbuyy 
    tya
    clc
    adc #<points
    sta point
    lda #>points
    adc #0
    sta point+1
  //SEG30 [14] phi from print_points::getPoint1 to print_points::pointXpos1 [phi:print_points::getPoint1->print_points::pointXpos1]
  pointXpos1_from_getPoint1:
    jmp pointXpos1
  //SEG31 print_points::pointXpos1
  pointXpos1:
    jmp b2
  //SEG32 print_points::@2
  b2:
  //SEG33 [15] (byte) print_byte::b#0 ← *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx points,y
  //SEG34 [16] call print_byte 
  //SEG35 [33] phi from print_points::@2 to print_byte [phi:print_points::@2->print_byte]
  print_byte_from_b2:
  //SEG36 [33] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#45 [phi:print_points::@2->print_byte#0] -- register_copy 
  //SEG37 [33] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_points::@2->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG38 [17] phi from print_points::@2 to print_points::@4 [phi:print_points::@2->print_points::@4]
  b4_from_b2:
    jmp b4
  //SEG39 print_points::@4
  b4:
  //SEG40 [18] call print_str 
  //SEG41 [45] phi from print_points::@4 to print_str [phi:print_points::@4->print_str]
  print_str_from_b4:
    jsr print_str
  //SEG42 [19] phi from print_points::@4 to print_points::pointYpos1 [phi:print_points::@4->print_points::pointYpos1]
  pointYpos1_from_b4:
    jmp pointYpos1
  //SEG43 print_points::pointYpos1
  pointYpos1:
    jmp b3
  //SEG44 print_points::@3
  b3:
  //SEG45 [20] (byte) print_byte::b#1 ← *((byte*) print_points::point#0 + (byte) 1) -- vbuxx=pbuz1_derefidx_vbuc1 
    ldy #1
    lda (point),y
    tax
  //SEG46 [21] call print_byte 
  //SEG47 [33] phi from print_points::@3 to print_byte [phi:print_points::@3->print_byte]
  print_byte_from_b3:
  //SEG48 [33] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#2 [phi:print_points::@3->print_byte#0] -- register_copy 
  //SEG49 [33] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_points::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG50 [22] phi from print_points::@3 to print_points::@5 [phi:print_points::@3->print_points::@5]
  b5_from_b3:
    jmp b5
  //SEG51 print_points::@5
  b5:
  //SEG52 [23] call print_ln 
  //SEG53 [28] phi from print_points::@5 to print_ln [phi:print_points::@5->print_ln]
  print_ln_from_b5:
    jsr print_ln
    jmp b6
  //SEG54 print_points::@6
  b6:
  //SEG55 [24] (byte) print_points::i#1 ← ++ (byte) print_points::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG56 [25] if((byte) print_points::i#1!=(const byte) NUM_POINTS#0-(byte) 1+(byte) 1) goto print_points::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_POINTS-1+1
    cmp i
    bne b7
    jmp breturn
  //SEG57 print_points::@return
  breturn:
  //SEG58 [26] return 
    rts
  //SEG59 print_points::@7
  b7:
  //SEG60 [27] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG61 [11] phi from print_points::@7 to print_points::@1 [phi:print_points::@7->print_points::@1]
  b1_from_b7:
  //SEG62 [11] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#1 [phi:print_points::@7->print_points::@1#0] -- register_copy 
  //SEG63 [11] phi (byte*) print_char_cursor#45 = (byte*~) print_char_cursor#66 [phi:print_points::@7->print_points::@1#1] -- register_copy 
  //SEG64 [11] phi (byte) print_points::i#10 = (byte) print_points::i#1 [phi:print_points::@7->print_points::@1#2] -- register_copy 
    jmp b1
    str: .text " @"
}
//SEG65 print_ln
// Print a newline
print_ln: {
  //SEG66 [29] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG67 [29] phi (byte*) print_line_cursor#11 = (byte*) print_line_cursor#24 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG68 print_ln::@1
  b1:
  //SEG69 [30] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG70 [31] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#29) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG71 print_ln::@return
  breturn:
  //SEG72 [32] return 
    rts
}
//SEG73 print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
  //SEG74 [34] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
  //SEG75 [35] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG76 [36] call print_char 
  //SEG77 [41] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG78 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#42 [phi:print_byte->print_char#0] -- register_copy 
  //SEG79 [41] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG80 print_byte::@1
  b1:
  //SEG81 [37] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
  //SEG82 [38] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
  //SEG83 [39] call print_char 
  //SEG84 [41] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG85 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#29 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG86 [41] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG87 print_byte::@return
  breturn:
  //SEG88 [40] return 
    rts
}
//SEG89 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG90 [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG91 [43] (byte*) print_char_cursor#29 ← ++ (byte*) print_char_cursor#28 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
    jmp breturn
  //SEG92 print_char::@return
  breturn:
  //SEG93 [44] return 
    rts
}
//SEG94 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(7) str)
print_str: {
    .label str = 7
  //SEG95 [46] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  b1_from_print_str:
  //SEG96 [46] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#29 [phi:print_str->print_str::@1#0] -- register_copy 
  //SEG97 [46] phi (byte*) print_str::str#2 = (const string) print_points::str [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<print_points.str
    sta str
    lda #>print_points.str
    sta str+1
    jmp b1
  //SEG98 print_str::@1
  b1:
  //SEG99 [47] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG100 print_str::@return
  breturn:
  //SEG101 [48] return 
    rts
  //SEG102 print_str::@2
  b2:
  //SEG103 [49] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG104 [50] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG105 [51] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG106 [46] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  b1_from_b2:
  //SEG107 [46] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG108 [46] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}
//SEG109 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 3
  //SEG110 [53] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG111 [53] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG112 [53] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG113 [53] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG114 print_cls::@1
  b1:
  //SEG115 [54] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG116 [55] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG117 [56] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG118 print_cls::@return
  breturn:
  //SEG119 [57] return 
    rts
}
//SEG120 init_points
// Initialize points
init_points: {
    .label getPoint1_return = 3
    .label pos = 2
  //SEG121 [59] phi from init_points to init_points::@1 [phi:init_points->init_points::@1]
  b1_from_init_points:
  //SEG122 [59] phi (byte) init_points::pos#10 = (byte) $a [phi:init_points->init_points::@1#0] -- vbuz1=vbuc1 
    lda #$a
    sta pos
  //SEG123 [59] phi (byte) init_points::i#10 = (byte) 0 [phi:init_points->init_points::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG124 [59] phi from init_points::@3 to init_points::@1 [phi:init_points::@3->init_points::@1]
  b1_from_b3:
  //SEG125 [59] phi (byte) init_points::pos#10 = (byte) init_points::pos#2 [phi:init_points::@3->init_points::@1#0] -- register_copy 
  //SEG126 [59] phi (byte) init_points::i#10 = (byte) init_points::i#1 [phi:init_points::@3->init_points::@1#1] -- register_copy 
    jmp b1
  //SEG127 init_points::@1
  b1:
    jmp getPoint1
  //SEG128 init_points::getPoint1
  getPoint1:
  //SEG129 [60] (byte~) init_points::getPoint1_$0#0 ← (byte) init_points::i#10 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
  //SEG130 [61] (byte*) init_points::getPoint1_return#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0 -- pbuz1=pbuc1_plus_vbuyy 
    tya
    clc
    adc #<points
    sta getPoint1_return
    lda #>points
    adc #0
    sta getPoint1_return+1
  //SEG131 [62] phi from init_points::getPoint1 to init_points::pointXpos1 [phi:init_points::getPoint1->init_points::pointXpos1]
  pointXpos1_from_getPoint1:
    jmp pointXpos1
  //SEG132 init_points::pointXpos1
  pointXpos1:
    jmp b2
  //SEG133 init_points::@2
  b2:
  //SEG134 [63] *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0) ← (byte) init_points::pos#10 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda pos
    sta points,y
  //SEG135 [64] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a -- vbuaa=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc pos
  //SEG136 [65] phi from init_points::@2 to init_points::pointYpos1 [phi:init_points::@2->init_points::pointYpos1]
  pointYpos1_from_b2:
    jmp pointYpos1
  //SEG137 init_points::pointYpos1
  pointYpos1:
    jmp b3
  //SEG138 init_points::@3
  b3:
  //SEG139 [66] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 -- pbuz1_derefidx_vbuc1=vbuaa 
    ldy #1
    sta (getPoint1_return),y
  //SEG140 [67] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte) $a -- vbuz1=vbuaa_plus_vbuc1 
    clc
    adc #$a
    sta pos
  //SEG141 [68] (byte) init_points::i#1 ← ++ (byte) init_points::i#10 -- vbuxx=_inc_vbuxx 
    inx
  //SEG142 [69] if((byte) init_points::i#1!=(const byte) NUM_POINTS#0-(byte) 1+(byte) 1) goto init_points::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_POINTS-1+1
    bne b1_from_b3
    jmp breturn
  //SEG143 init_points::@return
  breturn:
  //SEG144 [70] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  // All points
  points: .fill NUM_POINTS*SIZEOF_POINT, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp getPoint1
Removing instruction jmp pointXpos1
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp pointYpos1
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp getPoint1
Removing instruction jmp pointXpos1
Removing instruction jmp b2
Removing instruction jmp pointYpos1
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b3 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_main:
Removing instruction print_points_from_b1:
Removing instruction getPoint1:
Removing instruction pointXpos1_from_getPoint1:
Removing instruction pointXpos1:
Removing instruction b4_from_b2:
Removing instruction print_str_from_b4:
Removing instruction pointYpos1_from_b4:
Removing instruction pointYpos1:
Removing instruction b5_from_b3:
Removing instruction print_ln_from_b5:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_b1:
Removing instruction b1_from_b3:
Removing instruction getPoint1:
Removing instruction pointXpos1_from_getPoint1:
Removing instruction pointXpos1:
Removing instruction pointYpos1_from_b2:
Removing instruction pointYpos1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction init_points_from_main:
Removing instruction b1:
Removing instruction breturn:
Removing instruction print_cls_from_print_points:
Removing instruction b1_from_print_points:
Removing instruction b2:
Removing instruction print_byte_from_b2:
Removing instruction b4:
Removing instruction b3:
Removing instruction print_byte_from_b3:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction b1_from_b7:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_print_str:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Removing instruction b1_from_init_points:
Removing instruction b2:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte) NUM_POINTS
(const byte) NUM_POINTS#0 NUM_POINTS = (byte) 4
(byte) SIZEOF_POINT
(const byte) SIZEOF_POINT#0 SIZEOF_POINT = (byte) 2
(void()) init_points()
(label) init_points::@1
(label) init_points::@2
(label) init_points::@3
(label) init_points::@return
(label) init_points::getPoint1
(byte~) init_points::getPoint1_$0
(byte~) init_points::getPoint1_$0#0 reg byte y 11.0
(byte*~) init_points::getPoint1_$1
(byte) init_points::getPoint1_idx
(byte*) init_points::getPoint1_return
(byte*) init_points::getPoint1_return#0 getPoint1_return zp ZP_WORD:3 4.4
(byte) init_points::i
(byte) init_points::i#1 reg byte x 16.5
(byte) init_points::i#10 reg byte x 3.666666666666667
(byte*) init_points::point
(label) init_points::pointXpos1
(byte*~) init_points::pointXpos1_$0
(byte*~) init_points::pointXpos1_$1
(byte*) init_points::pointXpos1_point
(byte*) init_points::pointXpos1_return
(label) init_points::pointYpos1
(byte*~) init_points::pointYpos1_$0
(byte*~) init_points::pointYpos1_$1
(byte*) init_points::pointYpos1_point
(byte*) init_points::pointYpos1_return
(byte) init_points::pos
(byte) init_points::pos#1 reg byte a 11.0
(byte) init_points::pos#10 pos zp ZP_BYTE:2 6.6000000000000005
(byte) init_points::pos#2 pos zp ZP_BYTE:2 7.333333333333333
(void()) main()
(label) main::@1
(label) main::@return
(byte[NUM_POINTS#0*SIZEOF_POINT#0]) points
(const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 points = { fill( NUM_POINTS#0*SIZEOF_POINT#0, 0) }
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte x 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 22.0
(byte) print_byte::b#1 reg byte x 22.0
(byte) print_byte::b#2 reg byte x 6.5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0 reg byte a 4.0
(byte) print_char::ch#1 reg byte a 4.0
(byte) print_char::ch#2 reg byte a 6.0
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:5 101.0
(byte*) print_char_cursor#2 print_char_cursor zp ZP_WORD:5 45.142857142857146
(byte*) print_char_cursor#28 print_char_cursor zp ZP_WORD:5 4.0
(byte*) print_char_cursor#29 print_char_cursor zp ZP_WORD:5 6.6875
(byte*) print_char_cursor#42 print_char_cursor zp ZP_WORD:5 8.0
(byte*) print_char_cursor#45 print_char_cursor zp ZP_WORD:5 4.4
(byte*~) print_char_cursor#66 print_char_cursor zp ZP_WORD:5 22.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(byte[]) print_hextab
(const byte[]) print_hextab#0 print_hextab = (string) "0123456789abcdef"
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:3 46.42857142857143
(byte*) print_line_cursor#11 print_line_cursor zp ZP_WORD:3 204.0
(byte*) print_line_cursor#24 print_line_cursor zp ZP_WORD:3 1.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_points()
(label) print_points::@1
(label) print_points::@2
(label) print_points::@3
(label) print_points::@4
(label) print_points::@5
(label) print_points::@6
(label) print_points::@7
(label) print_points::@return
(label) print_points::getPoint1
(byte~) print_points::getPoint1_$0
(byte~) print_points::getPoint1_$0#0 reg byte y 11.0
(byte*~) print_points::getPoint1_$1
(byte) print_points::getPoint1_idx
(byte*) print_points::getPoint1_return
(byte) print_points::i
(byte) print_points::i#1 i zp ZP_BYTE:2 11.0
(byte) print_points::i#10 i zp ZP_BYTE:2 2.5384615384615383
(byte*) print_points::point
(byte*) print_points::point#0 point zp ZP_WORD:9 3.142857142857143
(label) print_points::pointXpos1
(byte*~) print_points::pointXpos1_$0
(byte*~) print_points::pointXpos1_$1
(byte*) print_points::pointXpos1_point
(byte*) print_points::pointXpos1_return
(label) print_points::pointYpos1
(byte*~) print_points::pointYpos1_$0
(byte*~) print_points::pointYpos1_$1
(byte*) print_points::pointYpos1_point
(byte*) print_points::pointYpos1_return
(const string) print_points::str str = (string) " @"
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:7 202.0
(byte*) print_str::str#2 str zp ZP_WORD:7 101.0

zp ZP_BYTE:2 [ print_points::i#10 print_points::i#1 init_points::pos#10 init_points::pos#2 ]
zp ZP_WORD:3 [ print_line_cursor#11 print_line_cursor#24 print_line_cursor#1 print_cls::sc#2 print_cls::sc#1 init_points::getPoint1_return#0 ]
reg byte x [ print_byte::b#2 print_byte::b#0 print_byte::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp ZP_WORD:5 [ print_char_cursor#28 print_char_cursor#42 print_char_cursor#45 print_char_cursor#66 print_char_cursor#2 print_char_cursor#29 print_char_cursor#1 ]
zp ZP_WORD:7 [ print_str::str#2 print_str::str#0 ]
reg byte x [ init_points::i#10 init_points::i#1 ]
reg byte y [ print_points::getPoint1_$0#0 ]
zp ZP_WORD:9 [ print_points::point#0 ]
reg byte a [ print_byte::$0 ]
reg byte x [ print_byte::$2 ]
reg byte y [ init_points::getPoint1_$0#0 ]
reg byte a [ init_points::pos#1 ]


FINAL ASSEMBLER
Score: 12221

//SEG0 File Comments
// Implementing a semi-struct without the struct keyword by using pointer math and inline functions
//
// struct Point {
//    byte xpos; // The x-position
//    byte ypos; // The y-position
// };
// Point[NUM_POINTS] points;
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // The size of a point
  .const SIZEOF_POINT = 2
  // The number of points
  .const NUM_POINTS = 4
  .label print_char_cursor = 5
  .label print_line_cursor = 3
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
// Initialize some points and print them
main: {
  //SEG11 [5] call init_points 
  //SEG12 [58] phi from main to init_points [phi:main->init_points]
    jsr init_points
  //SEG13 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG14 main::@1
  //SEG15 [7] call print_points 
  //SEG16 [9] phi from main::@1 to print_points [phi:main::@1->print_points]
    jsr print_points
  //SEG17 main::@return
  //SEG18 [8] return 
    rts
}
//SEG19 print_points
// Print points
print_points: {
    .label point = 9
    .label i = 2
  //SEG20 [10] call print_cls 
  //SEG21 [52] phi from print_points to print_cls [phi:print_points->print_cls]
    jsr print_cls
  //SEG22 [11] phi from print_points to print_points::@1 [phi:print_points->print_points::@1]
  //SEG23 [11] phi (byte*) print_line_cursor#24 = (byte*) 1024 [phi:print_points->print_points::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG24 [11] phi (byte*) print_char_cursor#45 = (byte*) 1024 [phi:print_points->print_points::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG25 [11] phi (byte) print_points::i#10 = (byte) 0 [phi:print_points->print_points::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG26 print_points::@1
  b1:
  //SEG27 print_points::getPoint1
  //SEG28 [12] (byte~) print_points::getPoint1_$0#0 ← (byte) print_points::i#10 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda i
    asl
    tay
  //SEG29 [13] (byte*) print_points::point#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0 -- pbuz1=pbuc1_plus_vbuyy 
    tya
    clc
    adc #<points
    sta point
    lda #>points
    adc #0
    sta point+1
  //SEG30 [14] phi from print_points::getPoint1 to print_points::pointXpos1 [phi:print_points::getPoint1->print_points::pointXpos1]
  //SEG31 print_points::pointXpos1
  //SEG32 print_points::@2
  //SEG33 [15] (byte) print_byte::b#0 ← *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) print_points::getPoint1_$0#0) -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx points,y
  //SEG34 [16] call print_byte 
  //SEG35 [33] phi from print_points::@2 to print_byte [phi:print_points::@2->print_byte]
  //SEG36 [33] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#45 [phi:print_points::@2->print_byte#0] -- register_copy 
  //SEG37 [33] phi (byte) print_byte::b#2 = (byte) print_byte::b#0 [phi:print_points::@2->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG38 [17] phi from print_points::@2 to print_points::@4 [phi:print_points::@2->print_points::@4]
  //SEG39 print_points::@4
  //SEG40 [18] call print_str 
  //SEG41 [45] phi from print_points::@4 to print_str [phi:print_points::@4->print_str]
    jsr print_str
  //SEG42 [19] phi from print_points::@4 to print_points::pointYpos1 [phi:print_points::@4->print_points::pointYpos1]
  //SEG43 print_points::pointYpos1
  //SEG44 print_points::@3
  //SEG45 [20] (byte) print_byte::b#1 ← *((byte*) print_points::point#0 + (byte) 1) -- vbuxx=pbuz1_derefidx_vbuc1 
    ldy #1
    lda (point),y
    tax
  //SEG46 [21] call print_byte 
  //SEG47 [33] phi from print_points::@3 to print_byte [phi:print_points::@3->print_byte]
  //SEG48 [33] phi (byte*) print_char_cursor#42 = (byte*) print_char_cursor#2 [phi:print_points::@3->print_byte#0] -- register_copy 
  //SEG49 [33] phi (byte) print_byte::b#2 = (byte) print_byte::b#1 [phi:print_points::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG50 [22] phi from print_points::@3 to print_points::@5 [phi:print_points::@3->print_points::@5]
  //SEG51 print_points::@5
  //SEG52 [23] call print_ln 
  //SEG53 [28] phi from print_points::@5 to print_ln [phi:print_points::@5->print_ln]
    jsr print_ln
  //SEG54 print_points::@6
  //SEG55 [24] (byte) print_points::i#1 ← ++ (byte) print_points::i#10 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG56 [25] if((byte) print_points::i#1!=(const byte) NUM_POINTS#0-(byte) 1+(byte) 1) goto print_points::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #NUM_POINTS-1+1
    cmp i
    bne b7
  //SEG57 print_points::@return
  //SEG58 [26] return 
    rts
  //SEG59 print_points::@7
  b7:
  //SEG60 [27] (byte*~) print_char_cursor#66 ← (byte*) print_line_cursor#1 -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG61 [11] phi from print_points::@7 to print_points::@1 [phi:print_points::@7->print_points::@1]
  //SEG62 [11] phi (byte*) print_line_cursor#24 = (byte*) print_line_cursor#1 [phi:print_points::@7->print_points::@1#0] -- register_copy 
  //SEG63 [11] phi (byte*) print_char_cursor#45 = (byte*~) print_char_cursor#66 [phi:print_points::@7->print_points::@1#1] -- register_copy 
  //SEG64 [11] phi (byte) print_points::i#10 = (byte) print_points::i#1 [phi:print_points::@7->print_points::@1#2] -- register_copy 
    jmp b1
    str: .text " @"
}
//SEG65 print_ln
// Print a newline
print_ln: {
  //SEG66 [29] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG67 [29] phi (byte*) print_line_cursor#11 = (byte*) print_line_cursor#24 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG68 print_ln::@1
  b1:
  //SEG69 [30] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc print_line_cursor
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG70 [31] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#29) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG71 print_ln::@return
  //SEG72 [32] return 
    rts
}
//SEG73 print_byte
// Print a byte as HEX
// print_byte(byte register(X) b)
print_byte: {
  //SEG74 [34] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4 -- vbuaa=vbuxx_ror_4 
    txa
    lsr
    lsr
    lsr
    lsr
  //SEG75 [35] (byte) print_char::ch#0 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda print_hextab,y
  //SEG76 [36] call print_char 
  //SEG77 [41] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG78 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#42 [phi:print_byte->print_char#0] -- register_copy 
  //SEG79 [41] phi (byte) print_char::ch#2 = (byte) print_char::ch#0 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG80 print_byte::@1
  //SEG81 [37] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f -- vbuxx=vbuxx_band_vbuc1 
    lda #$f
    axs #0
  //SEG82 [38] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda print_hextab,x
  //SEG83 [39] call print_char 
  //SEG84 [41] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG85 [41] phi (byte*) print_char_cursor#28 = (byte*) print_char_cursor#29 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG86 [41] phi (byte) print_char::ch#2 = (byte) print_char::ch#1 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG87 print_byte::@return
  //SEG88 [40] return 
    rts
}
//SEG89 print_char
// Print a single char
// print_char(byte register(A) ch)
print_char: {
  //SEG90 [42] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
  //SEG91 [43] (byte*) print_char_cursor#29 ← ++ (byte*) print_char_cursor#28 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG92 print_char::@return
  //SEG93 [44] return 
    rts
}
//SEG94 print_str
// Print a zero-terminated string
// print_str(byte* zeropage(7) str)
print_str: {
    .label str = 7
  //SEG95 [46] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  //SEG96 [46] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#29 [phi:print_str->print_str::@1#0] -- register_copy 
  //SEG97 [46] phi (byte*) print_str::str#2 = (const string) print_points::str [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<print_points.str
    sta str
    lda #>print_points.str
    sta str+1
  //SEG98 print_str::@1
  b1:
  //SEG99 [47] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG100 print_str::@return
  //SEG101 [48] return 
    rts
  //SEG102 print_str::@2
  b2:
  //SEG103 [49] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG104 [50] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2 -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG105 [51] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG106 [46] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  //SEG107 [46] phi (byte*) print_char_cursor#2 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG108 [46] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}
//SEG109 print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    .label sc = 3
  //SEG110 [53] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG111 [53] phi (byte*) print_cls::sc#2 = (byte*) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG112 [53] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG113 [53] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG114 print_cls::@1
  b1:
  //SEG115 [54] *((byte*) print_cls::sc#2) ← (byte) ' ' -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG116 [55] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG117 [56] if((byte*) print_cls::sc#1!=(byte*) 1024+(word) $3e8) goto print_cls::@1 -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG118 print_cls::@return
  //SEG119 [57] return 
    rts
}
//SEG120 init_points
// Initialize points
init_points: {
    .label getPoint1_return = 3
    .label pos = 2
  //SEG121 [59] phi from init_points to init_points::@1 [phi:init_points->init_points::@1]
  //SEG122 [59] phi (byte) init_points::pos#10 = (byte) $a [phi:init_points->init_points::@1#0] -- vbuz1=vbuc1 
    lda #$a
    sta pos
  //SEG123 [59] phi (byte) init_points::i#10 = (byte) 0 [phi:init_points->init_points::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG124 [59] phi from init_points::@3 to init_points::@1 [phi:init_points::@3->init_points::@1]
  //SEG125 [59] phi (byte) init_points::pos#10 = (byte) init_points::pos#2 [phi:init_points::@3->init_points::@1#0] -- register_copy 
  //SEG126 [59] phi (byte) init_points::i#10 = (byte) init_points::i#1 [phi:init_points::@3->init_points::@1#1] -- register_copy 
  //SEG127 init_points::@1
  b1:
  //SEG128 init_points::getPoint1
  //SEG129 [60] (byte~) init_points::getPoint1_$0#0 ← (byte) init_points::i#10 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
  //SEG130 [61] (byte*) init_points::getPoint1_return#0 ← (const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0 -- pbuz1=pbuc1_plus_vbuyy 
    tya
    clc
    adc #<points
    sta getPoint1_return
    lda #>points
    adc #0
    sta getPoint1_return+1
  //SEG131 [62] phi from init_points::getPoint1 to init_points::pointXpos1 [phi:init_points::getPoint1->init_points::pointXpos1]
  //SEG132 init_points::pointXpos1
  //SEG133 init_points::@2
  //SEG134 [63] *((const byte[NUM_POINTS#0*SIZEOF_POINT#0]) points#0 + (byte~) init_points::getPoint1_$0#0) ← (byte) init_points::pos#10 -- pbuc1_derefidx_vbuyy=vbuz1 
    lda pos
    sta points,y
  //SEG135 [64] (byte) init_points::pos#1 ← (byte) init_points::pos#10 + (byte) $a -- vbuaa=vbuz1_plus_vbuc1 
    lda #$a
    clc
    adc pos
  //SEG136 [65] phi from init_points::@2 to init_points::pointYpos1 [phi:init_points::@2->init_points::pointYpos1]
  //SEG137 init_points::pointYpos1
  //SEG138 init_points::@3
  //SEG139 [66] *((byte*) init_points::getPoint1_return#0 + (byte) 1) ← (byte) init_points::pos#1 -- pbuz1_derefidx_vbuc1=vbuaa 
    ldy #1
    sta (getPoint1_return),y
  //SEG140 [67] (byte) init_points::pos#2 ← (byte) init_points::pos#1 + (byte) $a -- vbuz1=vbuaa_plus_vbuc1 
    clc
    adc #$a
    sta pos
  //SEG141 [68] (byte) init_points::i#1 ← ++ (byte) init_points::i#10 -- vbuxx=_inc_vbuxx 
    inx
  //SEG142 [69] if((byte) init_points::i#1!=(const byte) NUM_POINTS#0-(byte) 1+(byte) 1) goto init_points::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #NUM_POINTS-1+1
    bne b1
  //SEG143 init_points::@return
  //SEG144 [70] return 
    rts
}
  print_hextab: .text "0123456789abcdef"
  // All points
  points: .fill NUM_POINTS*SIZEOF_POINT, 0

