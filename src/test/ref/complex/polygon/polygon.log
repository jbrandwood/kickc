Resolved forward reference irq_bottom_1 to interrupt(KERNEL_MIN) void irq_bottom_1()
Resolved forward reference irq_bottom_2 to interrupt(KERNEL_KEYBOARD) void irq_bottom_2()
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call __init::$0 = call toD018 SCREEN CANVAS2 
Inlined call main::$15 = call toD018 SCREEN CANVAS1 
Inlined call main::$16 = call toD018 SCREEN CANVAS2 
Inlined call irq_bottom_1::$0 = call toD018 CONSOLE PETSCII 
Inlined call irq_bottom_2::$2 = call toD018 SCREEN LINE_BUFFER 
Inlined call call plot line::x line::y 
Inlined call call plot line::x line::$15 
Inlined call call plot line::x line::y 
Inlined call call plot line::x line::y 
Inlined call call plot line::x line::y 
Inlined call call plot line::x line::y 
Inlined call call __init 
Eliminating unused variable with no statement printf_buffer

CONTROL FLOW GRAPH SSA

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main main::@13 main::@14 main::@18
  memset::c#7 = phi( main/memset::c#0, main::@13/memset::c#1, main::@14/memset::c#2, main::@18/memset::c#3 )
  memset::str#6 = phi( main/memset::str#0, main::@13/memset::str#1, main::@14/memset::str#2, main::@18/memset::str#3 )
  memset::num#4 = phi( main/memset::num#0, main::@13/memset::num#1, main::@14/memset::num#2, main::@18/memset::num#3 )
  memset::$0 = memset::num#4 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#4 = phi( memset/memset::str#6, memset::@3/memset::str#7 )
  memset::return#0 = memset::str#4
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#6 = phi( memset/memset::c#7 )
  memset::num#5 = phi( memset/memset::num#4 )
  memset::str#5 = phi( memset/memset::str#6 )
  memset::$4 = (byte*)memset::str#5
  memset::$2 = memset::$4 + memset::num#5
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#5
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#5 = phi( memset::@2/memset::c#6, memset::@4/memset::c#4 )
  memset::str#7 = phi( memset::@2/memset::str#5, memset::@4/memset::str#8 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#8 = phi( memset::@3/memset::str#7 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#4 = phi( memset::@3/memset::c#5 )
  *memset::dst#3 = memset::c#4
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#6 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#6
  return 
  to:@return

dword clock()
clock: scope:[clock]  from main::@12
  clock::$0 = $ffffffff - *CIA2_TIMER_AB
  clock::return#0 = clock::$0
  to:clock::@return
clock::@return: scope:[clock]  from clock
  clock::return#3 = phi( clock/clock::return#0 )
  clock::return#1 = clock::return#3
  return 
  to:@return

void clock_start()
clock_start: scope:[clock_start]  from main::@8
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  *CIA2_TIMER_AB = $ffffffff
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  gotoxy::x#3 = phi( conio_c64_init::@1/gotoxy::x#1 )
  gotoxy::y#2 = phi( conio_c64_init::@1/gotoxy::y#1 )
  gotoxy::$0 = gotoxy::y#2 > $19
  gotoxy::$1 = ! gotoxy::$0
  if(gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@2
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@2
  gotoxy::x#2 = phi( gotoxy/gotoxy::x#3, gotoxy::@2/gotoxy::x#4 )
  gotoxy::$2 = gotoxy::x#2 >= $28
  gotoxy::$3 = ! gotoxy::$2
  if(gotoxy::$3) goto gotoxy::@return
  to:gotoxy::@3
gotoxy::@2: scope:[gotoxy]  from gotoxy
  gotoxy::x#4 = phi( gotoxy/gotoxy::x#3 )
  gotoxy::y#0 = 0
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy::@1
  gotoxy::x#0 = 0
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@1 gotoxy::@3
  return 
  to:@return

byte textcolor(byte textcolor::color)
textcolor: scope:[textcolor]  from main::@16
  textcolor::color#1 = phi( main::@16/textcolor::color#0 )
  textcolor::old#0 = conio_textcolor
  conio_textcolor = textcolor::color#1
  textcolor::return#0 = textcolor::old#0
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  textcolor::return#3 = phi( textcolor/textcolor::return#0 )
  textcolor::return#1 = textcolor::return#3
  return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1_@1
  conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  conio_c64_init::$0 = conio_c64_init::line#0 >= $19
  conio_c64_init::$1 = ! conio_c64_init::$0
  if(conio_c64_init::$1) goto conio_c64_init::@1
  to:conio_c64_init::@2
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  conio_c64_init::line#2 = phi( conio_c64_init/conio_c64_init::line#0, conio_c64_init::@2/conio_c64_init::line#1 )
  gotoxy::x#1 = 0
  gotoxy::y#1 = conio_c64_init::line#2
  call gotoxy 
  to:conio_c64_init::@3
conio_c64_init::@3: scope:[conio_c64_init]  from conio_c64_init::@1
  to:conio_c64_init::@return
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  conio_c64_init::line#1 = $19-1
  to:conio_c64_init::@1
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@3
  return 
  to:@return

byte kbhit()
kbhit: scope:[kbhit]  from irq_bottom_2
  *kbhit::CIA1_PORT_A = 0
  kbhit::$0 = ~ *kbhit::CIA1_PORT_B
  kbhit::return#0 = kbhit::$0
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  kbhit::return#3 = phi( kbhit/kbhit::return#0 )
  kbhit::return#1 = kbhit::return#3
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  memset::str#0 = (void*)CONSOLE
  memset::c#0 = ' '
  memset::num#0 = $28*$19
  call memset 
  memset::return#2 = memset::return#1
  to:main::@13
main::@13: scope:[main]  from main
  memset::str#1 = (void*)SCREEN
  memset::c#1 = 0
  memset::num#1 = $28*$19
  call memset 
  memset::return#3 = memset::return#1
  to:main::@14
main::@14: scope:[main]  from main::@13
  memset::str#2 = (void*)COLS
  memset::c#2 = BLACK
  memset::num#2 = $28*$19
  call memset 
  memset::return#4 = memset::return#1
  to:main::@15
main::@15: scope:[main]  from main::@14
  main::screen#0 = SCREEN+$c
  main::cols#0 = COLS+$c
  main::y#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@6
  main::screen#6 = phi( main::@15/main::screen#0, main::@6/main::screen#1 )
  main::cols#6 = phi( main::@15/main::cols#0, main::@6/main::cols#1 )
  main::y#2 = phi( main::@15/main::y#0, main::@6/main::y#1 )
  main::$7 = main::y#2 < $10
  if(main::$7) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::screen#5 = phi( main::@1/main::screen#6 )
  main::cols#5 = phi( main::@1/main::cols#6 )
  main::y#3 = phi( main::@1/main::y#2 )
  main::c#0 = main::y#3
  main::x#0 = 0
  to:main::@4
main::@3: scope:[main]  from main::@1
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK
  call setup_irq 
  to:main::@16
main::@16: scope:[main]  from main::@3
  textcolor::color#0 = WHITE
  call textcolor 
  textcolor::return#2 = textcolor::return#1
  to:main::@17
main::@17: scope:[main]  from main::@16
  main::p0_idx#0 = $b5
  main::$5 = main::p0_idx#0 + $f
  main::p1_idx#0 = main::$5
  main::$6 = main::p0_idx#0 + $aa
  main::p2_idx#0 = main::$6
  main::canvas#0 = CANVAS1
  to:main::@7
main::@4: scope:[main]  from main::@2 main::@5
  main::y#5 = phi( main::@2/main::y#3, main::@5/main::y#6 )
  main::screen#4 = phi( main::@2/main::screen#5, main::@5/main::screen#2 )
  main::c#3 = phi( main::@2/main::c#0, main::@5/main::c#1 )
  main::cols#4 = phi( main::@2/main::cols#5, main::@5/main::cols#2 )
  main::x#2 = phi( main::@2/main::x#0, main::@5/main::x#1 )
  main::$8 = main::x#2 < $10
  if(main::$8) goto main::@5
  to:main::@6
main::@5: scope:[main]  from main::@4
  main::y#6 = phi( main::@4/main::y#5 )
  main::screen#2 = phi( main::@4/main::screen#4 )
  main::c#2 = phi( main::@4/main::c#3 )
  main::x#3 = phi( main::@4/main::x#2 )
  main::cols#2 = phi( main::@4/main::cols#4 )
  main::cols#2[main::x#3] = WHITE
  main::screen#2[main::x#3] = main::c#2
  main::c#1 = main::c#2 + $10
  main::x#1 = ++ main::x#3
  to:main::@4
main::@6: scope:[main]  from main::@4
  main::y#4 = phi( main::@4/main::y#5 )
  main::screen#3 = phi( main::@4/main::screen#4 )
  main::cols#3 = phi( main::@4/main::cols#4 )
  main::cols#1 = main::cols#3 + $28
  main::screen#1 = main::screen#3 + $28
  main::y#1 = ++ main::y#4
  to:main::@1
main::@7: scope:[main]  from main::@17 main::@24
  main::canvas#11 = phi( main::@17/main::canvas#0, main::@24/main::canvas#12 )
  main::p2_idx#8 = phi( main::@17/main::p2_idx#0, main::@24/main::p2_idx#9 )
  main::p1_idx#8 = phi( main::@17/main::p1_idx#0, main::@24/main::p1_idx#9 )
  main::p0_idx#8 = phi( main::@17/main::p0_idx#0, main::@24/main::p0_idx#9 )
  main::$21 = 0 != 1
  if(main::$21) goto main::@8
  to:main::@return
main::@8: scope:[main]  from main::@7
  main::canvas#10 = phi( main::@7/main::canvas#11 )
  main::p2_idx#7 = phi( main::@7/main::p2_idx#8 )
  main::p1_idx#6 = phi( main::@7/main::p1_idx#8 )
  main::p0_idx#6 = phi( main::@7/main::p0_idx#8 )
  call clock_start 
  to:main::@18
main::@18: scope:[main]  from main::@8
  main::canvas#9 = phi( main::@8/main::canvas#10 )
  main::p2_idx#6 = phi( main::@8/main::p2_idx#7 )
  main::p1_idx#4 = phi( main::@8/main::p1_idx#6 )
  main::p0_idx#4 = phi( main::@8/main::p0_idx#6 )
  memset::str#3 = (void*)LINE_BUFFER
  memset::c#3 = 0
  memset::num#3 = $800
  call memset 
  memset::return#5 = memset::return#1
  to:main::@19
main::@19: scope:[main]  from main::@18
  main::canvas#8 = phi( main::@18/main::canvas#9 )
  main::p2_idx#4 = phi( main::@18/main::p2_idx#6 )
  main::p1_idx#2 = phi( main::@18/main::p1_idx#4 )
  main::p0_idx#2 = phi( main::@18/main::p0_idx#4 )
  main::x0#0 = COSTAB[main::p0_idx#2]
  main::y0#0 = SINTAB[main::p0_idx#2]
  main::x1#0 = COSTAB[main::p1_idx#2]
  main::y1#0 = SINTAB[main::p1_idx#2]
  line::canvas#0 = LINE_BUFFER
  line::x1#0 = main::x0#0
  line::y1#0 = main::y0#0
  line::x2#0 = main::x1#0
  line::y2#0 = main::y1#0
  call line 
  to:main::@20
main::@20: scope:[main]  from main::@19
  main::canvas#7 = phi( main::@19/main::canvas#8 )
  main::p1_idx#7 = phi( main::@19/main::p1_idx#2 )
  main::p0_idx#7 = phi( main::@19/main::p0_idx#2 )
  main::y0#2 = phi( main::@19/main::y0#0 )
  main::x0#2 = phi( main::@19/main::x0#0 )
  main::y1#1 = phi( main::@19/main::y1#0 )
  main::x1#1 = phi( main::@19/main::x1#0 )
  main::p2_idx#2 = phi( main::@19/main::p2_idx#4 )
  main::x2#0 = COSTAB[main::p2_idx#2]
  main::y2#0 = SINTAB[main::p2_idx#2]
  line::canvas#1 = LINE_BUFFER
  line::x1#1 = main::x1#1
  line::y1#1 = main::y1#1
  line::x2#1 = main::x2#0
  line::y2#1 = main::y2#0
  call line 
  to:main::@21
main::@21: scope:[main]  from main::@20
  main::canvas#6 = phi( main::@20/main::canvas#7 )
  main::p2_idx#5 = phi( main::@20/main::p2_idx#2 )
  main::p1_idx#5 = phi( main::@20/main::p1_idx#7 )
  main::p0_idx#5 = phi( main::@20/main::p0_idx#7 )
  main::y0#1 = phi( main::@20/main::y0#2 )
  main::x0#1 = phi( main::@20/main::x0#2 )
  main::y2#1 = phi( main::@20/main::y2#0 )
  main::x2#1 = phi( main::@20/main::x2#0 )
  line::canvas#2 = LINE_BUFFER
  line::x1#2 = main::x2#1
  line::y1#2 = main::y2#1
  line::x2#2 = main::x0#1
  line::y2#2 = main::y0#1
  call line 
  to:main::@22
main::@22: scope:[main]  from main::@21
  main::canvas#5 = phi( main::@21/main::canvas#6 )
  main::p2_idx#3 = phi( main::@21/main::p2_idx#5 )
  main::p1_idx#3 = phi( main::@21/main::p1_idx#5 )
  main::p0_idx#3 = phi( main::@21/main::p0_idx#5 )
  main::p0_idx#1 = ++ main::p0_idx#3
  main::p1_idx#1 = ++ main::p1_idx#3
  main::p2_idx#1 = ++ main::p2_idx#3
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = RED
  to:main::@9
main::@9: scope:[main]  from main::@22 main::@9
  main::p2_idx#18 = phi( main::@22/main::p2_idx#1, main::@9/main::p2_idx#18 )
  main::p1_idx#18 = phi( main::@22/main::p1_idx#1, main::@9/main::p1_idx#18 )
  main::p0_idx#18 = phi( main::@22/main::p0_idx#1, main::@9/main::p0_idx#18 )
  main::canvas#4 = phi( main::@22/main::canvas#5, main::@9/main::canvas#4 )
  main::$22 = 0 != canvas_show_flag
  if(main::$22) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@9
  main::p2_idx#17 = phi( main::@9/main::p2_idx#18 )
  main::p1_idx#17 = phi( main::@9/main::p1_idx#18 )
  main::p0_idx#17 = phi( main::@9/main::p0_idx#18 )
  main::canvas#2 = phi( main::@9/main::canvas#4 )
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  eorfill::line_buffer#0 = LINE_BUFFER
  eorfill::canvas#0 = main::canvas#2
  call eorfill 
  to:main::@23
main::@23: scope:[main]  from main::@10
  main::p2_idx#16 = phi( main::@10/main::p2_idx#17 )
  main::p1_idx#16 = phi( main::@10/main::p1_idx#17 )
  main::p0_idx#16 = phi( main::@10/main::p0_idx#17 )
  main::canvas#3 = phi( main::@10/main::canvas#2 )
  main::$20 = main::canvas#3 ^ CANVAS1^CANVAS2
  main::canvas#1 = ((byte*)) main::$20
  main::toD0181_screen#0 = SCREEN
  main::toD0181_gfx#0 = CANVAS1
  to:main::toD0181
main::toD0181: scope:[main]  from main::@23
  main::canvas#18 = phi( main::@23/main::canvas#1 )
  main::p2_idx#15 = phi( main::@23/main::p2_idx#16 )
  main::p1_idx#15 = phi( main::@23/main::p1_idx#16 )
  main::p0_idx#15 = phi( main::@23/main::p0_idx#16 )
  main::toD0181_gfx#1 = phi( main::@23/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main::@23/main::toD0181_screen#0 )
  main::toD0181_$7 = (word)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = > main::toD0181_$1
  main::toD0181_$3 = > (word)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  main::canvas#17 = phi( main::toD0181/main::canvas#18 )
  main::p2_idx#14 = phi( main::toD0181/main::p2_idx#15 )
  main::p1_idx#14 = phi( main::toD0181/main::p1_idx#15 )
  main::p0_idx#14 = phi( main::toD0181/main::p0_idx#15 )
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@11
main::@11: scope:[main]  from main::toD0181_@return
  main::canvas#16 = phi( main::toD0181_@return/main::canvas#17 )
  main::p2_idx#13 = phi( main::toD0181_@return/main::p2_idx#14 )
  main::p1_idx#13 = phi( main::toD0181_@return/main::p1_idx#14 )
  main::p0_idx#13 = phi( main::toD0181_@return/main::p0_idx#14 )
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$15 = main::toD0181_return#3
  main::toD0182_screen#0 = SCREEN
  main::toD0182_gfx#0 = CANVAS2
  to:main::toD0182
main::toD0182: scope:[main]  from main::@11
  main::canvas#15 = phi( main::@11/main::canvas#16 )
  main::p2_idx#12 = phi( main::@11/main::p2_idx#13 )
  main::p1_idx#12 = phi( main::@11/main::p1_idx#13 )
  main::p0_idx#12 = phi( main::@11/main::p0_idx#13 )
  main::toD0182_gfx#1 = phi( main::@11/main::toD0182_gfx#0 )
  main::toD0182_screen#1 = phi( main::@11/main::toD0182_screen#0 )
  main::toD0182_$7 = (word)main::toD0182_screen#1
  main::toD0182_$0 = main::toD0182_$7 & $3fff
  main::toD0182_$1 = main::toD0182_$0 * 4
  main::toD0182_$2 = > main::toD0182_$1
  main::toD0182_$3 = > (word)main::toD0182_gfx#1
  main::toD0182_$4 = main::toD0182_$3 / 4
  main::toD0182_$5 = main::toD0182_$4 & $f
  main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
  main::toD0182_return#0 = main::toD0182_$6
  to:main::toD0182_@return
main::toD0182_@return: scope:[main]  from main::toD0182
  main::canvas#14 = phi( main::toD0182/main::canvas#15 )
  main::p2_idx#11 = phi( main::toD0182/main::p2_idx#12 )
  main::p1_idx#11 = phi( main::toD0182/main::p1_idx#12 )
  main::p0_idx#11 = phi( main::toD0182/main::p0_idx#12 )
  main::toD0182_return#2 = phi( main::toD0182/main::toD0182_return#0 )
  main::toD0182_return#1 = main::toD0182_return#2
  to:main::@12
main::@12: scope:[main]  from main::toD0182_@return
  main::canvas#13 = phi( main::toD0182_@return/main::canvas#14 )
  main::p2_idx#10 = phi( main::toD0182_@return/main::p2_idx#11 )
  main::p1_idx#10 = phi( main::toD0182_@return/main::p1_idx#11 )
  main::p0_idx#10 = phi( main::toD0182_@return/main::p0_idx#11 )
  main::toD0182_return#3 = phi( main::toD0182_@return/main::toD0182_return#1 )
  main::$16 = main::toD0182_return#3
  main::$17 = main::$15 ^ main::$16
  canvas_show_memory = canvas_show_memory ^ main::$17
  canvas_show_flag = 1
  call clock 
  clock::return#2 = clock::return#1
  to:main::@24
main::@24: scope:[main]  from main::@12
  main::canvas#12 = phi( main::@12/main::canvas#13 )
  main::p2_idx#9 = phi( main::@12/main::p2_idx#10 )
  main::p1_idx#9 = phi( main::@12/main::p1_idx#10 )
  main::p0_idx#9 = phi( main::@12/main::p0_idx#10 )
  to:main::@7
main::@return: scope:[main]  from main::@7
  return 
  to:@return

void setup_irq()
setup_irq: scope:[setup_irq]  from main::@3
  asm { sei  }
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $7f
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) = IRQ_RASTER
  *KERNEL_IRQ = &irq_bottom_1
  asm { cli  }
  to:setup_irq::@return
setup_irq::@return: scope:[setup_irq]  from setup_irq
  return 
  to:@return

interrupt(KERNEL_MIN) void irq_bottom_1()
irq_bottom_1: scope:[irq_bottom_1]  from
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = DARK_GREY
  irq_bottom_1::toD0181_screen#0 = CONSOLE
  irq_bottom_1::toD0181_gfx#0 = PETSCII
  to:irq_bottom_1::toD0181
irq_bottom_1::toD0181: scope:[irq_bottom_1]  from irq_bottom_1
  irq_bottom_1::toD0181_gfx#1 = phi( irq_bottom_1/irq_bottom_1::toD0181_gfx#0 )
  irq_bottom_1::toD0181_screen#1 = phi( irq_bottom_1/irq_bottom_1::toD0181_screen#0 )
  irq_bottom_1::toD0181_$7 = (word)irq_bottom_1::toD0181_screen#1
  irq_bottom_1::toD0181_$0 = irq_bottom_1::toD0181_$7 & $3fff
  irq_bottom_1::toD0181_$1 = irq_bottom_1::toD0181_$0 * 4
  irq_bottom_1::toD0181_$2 = > irq_bottom_1::toD0181_$1
  irq_bottom_1::toD0181_$3 = > (word)irq_bottom_1::toD0181_gfx#1
  irq_bottom_1::toD0181_$4 = irq_bottom_1::toD0181_$3 / 4
  irq_bottom_1::toD0181_$5 = irq_bottom_1::toD0181_$4 & $f
  irq_bottom_1::toD0181_$6 = irq_bottom_1::toD0181_$2 | irq_bottom_1::toD0181_$5
  irq_bottom_1::toD0181_return#0 = irq_bottom_1::toD0181_$6
  to:irq_bottom_1::toD0181_@return
irq_bottom_1::toD0181_@return: scope:[irq_bottom_1]  from irq_bottom_1::toD0181
  irq_bottom_1::toD0181_return#2 = phi( irq_bottom_1::toD0181/irq_bottom_1::toD0181_return#0 )
  irq_bottom_1::toD0181_return#1 = irq_bottom_1::toD0181_return#2
  to:irq_bottom_1::@1
irq_bottom_1::@1: scope:[irq_bottom_1]  from irq_bottom_1::toD0181_@return
  irq_bottom_1::toD0181_return#3 = phi( irq_bottom_1::toD0181_@return/irq_bottom_1::toD0181_return#1 )
  irq_bottom_1::$0 = irq_bottom_1::toD0181_return#3
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_1::$0
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM
  *KERNEL_IRQ = &irq_bottom_2
  to:irq_bottom_1::@return
irq_bottom_1::@return: scope:[irq_bottom_1]  from irq_bottom_1::@1
  return 
  to:@return

interrupt(KERNEL_KEYBOARD) void irq_bottom_2()
irq_bottom_2: scope:[irq_bottom_2]  from
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  call kbhit 
  kbhit::return#2 = kbhit::return#1
  to:irq_bottom_2::@5
irq_bottom_2::@5: scope:[irq_bottom_2]  from irq_bottom_2
  kbhit::return#4 = phi( irq_bottom_2/kbhit::return#2 )
  irq_bottom_2::$0 = kbhit::return#4
  irq_bottom_2::$3 = 0 != irq_bottom_2::$0
  irq_bottom_2::$1 = ! irq_bottom_2::$3
  if(irq_bottom_2::$1) goto irq_bottom_2::@1
  to:irq_bottom_2::@3
irq_bottom_2::@1: scope:[irq_bottom_2]  from irq_bottom_2::@5
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = canvas_show_memory
  to:irq_bottom_2::@2
irq_bottom_2::@3: scope:[irq_bottom_2]  from irq_bottom_2::@5
  irq_bottom_2::toD0181_screen#0 = SCREEN
  irq_bottom_2::toD0181_gfx#0 = LINE_BUFFER
  to:irq_bottom_2::toD0181
irq_bottom_2::toD0181: scope:[irq_bottom_2]  from irq_bottom_2::@3
  irq_bottom_2::toD0181_gfx#1 = phi( irq_bottom_2::@3/irq_bottom_2::toD0181_gfx#0 )
  irq_bottom_2::toD0181_screen#1 = phi( irq_bottom_2::@3/irq_bottom_2::toD0181_screen#0 )
  irq_bottom_2::toD0181_$7 = (word)irq_bottom_2::toD0181_screen#1
  irq_bottom_2::toD0181_$0 = irq_bottom_2::toD0181_$7 & $3fff
  irq_bottom_2::toD0181_$1 = irq_bottom_2::toD0181_$0 * 4
  irq_bottom_2::toD0181_$2 = > irq_bottom_2::toD0181_$1
  irq_bottom_2::toD0181_$3 = > (word)irq_bottom_2::toD0181_gfx#1
  irq_bottom_2::toD0181_$4 = irq_bottom_2::toD0181_$3 / 4
  irq_bottom_2::toD0181_$5 = irq_bottom_2::toD0181_$4 & $f
  irq_bottom_2::toD0181_$6 = irq_bottom_2::toD0181_$2 | irq_bottom_2::toD0181_$5
  irq_bottom_2::toD0181_return#0 = irq_bottom_2::toD0181_$6
  to:irq_bottom_2::toD0181_@return
irq_bottom_2::toD0181_@return: scope:[irq_bottom_2]  from irq_bottom_2::toD0181
  irq_bottom_2::toD0181_return#2 = phi( irq_bottom_2::toD0181/irq_bottom_2::toD0181_return#0 )
  irq_bottom_2::toD0181_return#1 = irq_bottom_2::toD0181_return#2
  to:irq_bottom_2::@4
irq_bottom_2::@4: scope:[irq_bottom_2]  from irq_bottom_2::toD0181_@return
  irq_bottom_2::toD0181_return#3 = phi( irq_bottom_2::toD0181_@return/irq_bottom_2::toD0181_return#1 )
  irq_bottom_2::$2 = irq_bottom_2::toD0181_return#3
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_2::$2
  to:irq_bottom_2::@2
irq_bottom_2::@2: scope:[irq_bottom_2]  from irq_bottom_2::@1 irq_bottom_2::@4
  canvas_show_flag = 0
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER
  *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8
  *KERNEL_IRQ = &irq_bottom_1
  to:irq_bottom_2::@return
irq_bottom_2::@return: scope:[irq_bottom_2]  from irq_bottom_2::@2
  return 
  to:@return

void line(byte* line::canvas , byte line::x1 , byte line::y1 , byte line::x2 , byte line::y2)
line: scope:[line]  from main::@19 main::@20 main::@21
  line::y2#8 = phi( main::@19/line::y2#0, main::@20/line::y2#1, main::@21/line::y2#2 )
  line::x2#3 = phi( main::@19/line::x2#0, main::@20/line::x2#1, main::@21/line::x2#2 )
  line::y1#3 = phi( main::@19/line::y1#0, main::@20/line::y1#1, main::@21/line::y1#2 )
  line::x1#3 = phi( main::@19/line::x1#0, main::@20/line::x1#1, main::@21/line::x1#2 )
  line::x#0 = line::x1#3
  line::y#0 = line::y1#3
  line::$0 = line::x2#3 - line::x1#3
  abs_u8::u#0 = line::$0
  call abs_u8 
  abs_u8::return#0 = abs_u8::return#4
  to:line::@22
line::@22: scope:[line]  from line
  line::x#32 = phi( line/line::x#0 )
  line::y#33 = phi( line/line::y#0 )
  line::x1#5 = phi( line/line::x1#3 )
  line::x2#7 = phi( line/line::x2#3 )
  line::y1#4 = phi( line/line::y1#3 )
  line::y2#4 = phi( line/line::y2#8 )
  abs_u8::return#5 = phi( line/abs_u8::return#0 )
  line::$1 = abs_u8::return#5
  line::dx#0 = line::$1
  line::$2 = line::y2#4 - line::y1#4
  abs_u8::u#1 = line::$2
  call abs_u8 
  abs_u8::return#1 = abs_u8::return#4
  to:line::@23
line::@23: scope:[line]  from line::@22
  line::x#31 = phi( line::@22/line::x#32 )
  line::y#31 = phi( line::@22/line::y#33 )
  line::dx#22 = phi( line::@22/line::dx#0 )
  line::y1#6 = phi( line::@22/line::y1#4 )
  line::y2#9 = phi( line::@22/line::y2#4 )
  line::x1#4 = phi( line::@22/line::x1#5 )
  line::x2#4 = phi( line::@22/line::x2#7 )
  abs_u8::return#6 = phi( line::@22/abs_u8::return#1 )
  line::$3 = abs_u8::return#6
  line::dy#0 = line::$3
  line::$4 = line::x2#4 - line::x1#4
  sgn_u8::u#0 = line::$4
  call sgn_u8 
  sgn_u8::return#0 = sgn_u8::return#4
  to:line::@24
line::@24: scope:[line]  from line::@23
  line::x2#22 = phi( line::@23/line::x2#4 )
  line::x#29 = phi( line::@23/line::x#31 )
  line::y#25 = phi( line::@23/line::y#31 )
  line::dy#17 = phi( line::@23/line::dy#0 )
  line::dx#16 = phi( line::@23/line::dx#22 )
  line::y1#5 = phi( line::@23/line::y1#6 )
  line::y2#5 = phi( line::@23/line::y2#9 )
  sgn_u8::return#5 = phi( line::@23/sgn_u8::return#0 )
  line::$5 = sgn_u8::return#5
  line::sx#0 = line::$5
  line::$6 = line::y2#5 - line::y1#5
  sgn_u8::u#1 = line::$6
  call sgn_u8 
  sgn_u8::return#1 = sgn_u8::return#4
  to:line::@25
line::@25: scope:[line]  from line::@24
  line::x2#19 = phi( line::@24/line::x2#22 )
  line::x#26 = phi( line::@24/line::x#29 )
  line::y2#10 = phi( line::@24/line::y2#5 )
  line::y#16 = phi( line::@24/line::y#25 )
  line::dy#9 = phi( line::@24/line::dy#17 )
  line::dx#8 = phi( line::@24/line::dx#16 )
  line::sx#1 = phi( line::@24/line::sx#0 )
  sgn_u8::return#6 = phi( line::@24/sgn_u8::return#1 )
  line::$7 = sgn_u8::return#6
  line::sy#0 = line::$7
  line::$8 = line::sx#1 == $ff
  line::$9 = ! line::$8
  if(line::$9) goto line::@1
  to:line::@3
line::@1: scope:[line]  from line::@25 line::@3
  line::x2#17 = phi( line::@25/line::x2#19, line::@3/line::x2#20 )
  line::y2#17 = phi( line::@25/line::y2#10, line::@3/line::y2#3 )
  line::y#26 = phi( line::@25/line::y#16, line::@3/line::y#1 )
  line::x#23 = phi( line::@25/line::x#26, line::@3/line::x#27 )
  line::sy#6 = phi( line::@25/line::sy#0, line::@3/line::sy#12 )
  line::sx#6 = phi( line::@25/line::sx#1, line::@3/line::sx#10 )
  line::dy#1 = phi( line::@25/line::dy#9, line::@3/line::dy#10 )
  line::dx#1 = phi( line::@25/line::dx#8, line::@3/line::dx#9 )
  line::$10 = line::dx#1 > line::dy#1
  if(line::$10) goto line::@2
  to:line::@4
line::@3: scope:[line]  from line::@25
  line::x2#20 = phi( line::@25/line::x2#19 )
  line::x#27 = phi( line::@25/line::x#26 )
  line::sy#12 = phi( line::@25/line::sy#0 )
  line::sx#10 = phi( line::@25/line::sx#1 )
  line::dy#10 = phi( line::@25/line::dy#9 )
  line::dx#9 = phi( line::@25/line::dx#8 )
  line::y2#6 = phi( line::@25/line::y2#10 )
  line::y#5 = phi( line::@25/line::y#16 )
  line::y#1 = ++ line::y#5
  line::y2#3 = ++ line::y2#6
  to:line::@1
line::@2: scope:[line]  from line::@1
  line::sy#23 = phi( line::@1/line::sy#6 )
  line::x2#16 = phi( line::@1/line::x2#17 )
  line::dy#24 = phi( line::@1/line::dy#1 )
  line::sx#19 = phi( line::@1/line::sx#6 )
  line::y#23 = phi( line::@1/line::y#26 )
  line::x#20 = phi( line::@1/line::x#23 )
  line::dx#2 = phi( line::@1/line::dx#1 )
  line::$26 = line::dx#2 / 2
  line::e2#0 = line::$26
  to:line::@14
line::@4: scope:[line]  from line::@1
  line::x2#24 = phi( line::@1/line::x2#17 )
  line::y2#15 = phi( line::@1/line::y2#17 )
  line::dx#18 = phi( line::@1/line::dx#1 )
  line::dy#11 = phi( line::@1/line::dy#1 )
  line::y#17 = phi( line::@1/line::y#26 )
  line::x#14 = phi( line::@1/line::x#23 )
  line::sy#1 = phi( line::@1/line::sy#6 )
  line::sx#2 = phi( line::@1/line::sx#6 )
  line::$11 = line::sx#2 == line::sy#1
  if(line::$11) goto line::@6
  to:line::@5
line::@6: scope:[line]  from line::@4
  line::x2#23 = phi( line::@4/line::x2#24 )
  line::sx#24 = phi( line::@4/line::sx#2 )
  line::sy#21 = phi( line::@4/line::sy#1 )
  line::dy#22 = phi( line::@4/line::dy#11 )
  line::dx#17 = phi( line::@4/line::dx#18 )
  line::y#6 = phi( line::@4/line::y#17 )
  line::x#4 = phi( line::@4/line::x#14 )
  line::plot1_x#0 = line::x#4
  line::plot1_y#0 = line::y#6
  to:line::plot1
line::plot1: scope:[line]  from line::@6
  line::x2#21 = phi( line::@6/line::x2#23 )
  line::sx#20 = phi( line::@6/line::sx#24 )
  line::x#30 = phi( line::@6/line::x#4 )
  line::sy#17 = phi( line::@6/line::sy#21 )
  line::y#32 = phi( line::@6/line::y#6 )
  line::dy#18 = phi( line::@6/line::dy#22 )
  line::dx#10 = phi( line::@6/line::dx#17 )
  line::plot1_y#1 = phi( line::@6/line::plot1_y#0 )
  line::plot1_x#1 = phi( line::@6/line::plot1_x#0 )
  line::plot1_$0 = line::plot1_x#1 / 8
  line::plot1_$2 = line::plot1_$0 * SIZEOF_POINTER
  line::plot1_column#0 = plot_column[line::plot1_$2]
  line::plot1_$1 = line::plot1_x#1 & 7
  line::plot1_column#0[line::plot1_y#1] = line::plot1_column#0[line::plot1_y#1] | plot_bit[line::plot1_$1]
  to:line::@18
line::@18: scope:[line]  from line::plot1
  line::x2#18 = phi( line::plot1/line::x2#21 )
  line::sx#16 = phi( line::plot1/line::sx#20 )
  line::x#28 = phi( line::plot1/line::x#30 )
  line::sy#14 = phi( line::plot1/line::sy#17 )
  line::y#28 = phi( line::plot1/line::y#32 )
  line::dy#14 = phi( line::plot1/line::dy#18 )
  line::dx#3 = phi( line::plot1/line::dx#10 )
  line::$20 = line::dx#3 == 0
  line::$21 = ! line::$20
  if(line::$21) goto line::@11
  to:line::@return
line::@5: scope:[line]  from line::@4
  line::sx#21 = phi( line::@4/line::sx#2 )
  line::x#24 = phi( line::@4/line::x#14 )
  line::y2#13 = phi( line::@4/line::y2#15 )
  line::dx#11 = phi( line::@4/line::dx#18 )
  line::sy#7 = phi( line::@4/line::sy#1 )
  line::y#18 = phi( line::@4/line::y#17 )
  line::dy#2 = phi( line::@4/line::dy#11 )
  line::$12 = line::dy#2 / 2
  line::e#0 = line::$12
  to:line::@7
line::@7: scope:[line]  from line::@5 line::@8
  line::sx#15 = phi( line::@5/line::sx#21, line::@8/line::sx#22 )
  line::x#15 = phi( line::@5/line::x#24, line::@8/line::x#17 )
  line::y2#12 = phi( line::@5/line::y2#13, line::@8/line::y2#7 )
  line::dy#3 = phi( line::@5/line::dy#2, line::@8/line::dy#12 )
  line::dx#4 = phi( line::@5/line::dx#11, line::@8/line::dx#12 )
  line::e#3 = phi( line::@5/line::e#0, line::@8/line::e#5 )
  line::sy#2 = phi( line::@5/line::sy#7, line::@8/line::sy#8 )
  line::y#7 = phi( line::@5/line::y#18, line::@8/line::y#8 )
  line::y#2 = line::y#7 + line::sy#2
  line::e#1 = line::e#3 + line::dx#4
  line::$13 = line::e#1 > line::dy#3
  line::$14 = ! line::$13
  if(line::$14) goto line::@8
  to:line::@9
line::@8: scope:[line]  from line::@19 line::@7
  line::sx#22 = phi( line::@19/line::sx#3, line::@7/line::sx#15 )
  line::x#17 = phi( line::@19/line::x#1, line::@7/line::x#15 )
  line::dy#12 = phi( line::@19/line::dy#4, line::@7/line::dy#3 )
  line::dx#12 = phi( line::@19/line::dx#19, line::@7/line::dx#4 )
  line::e#5 = phi( line::@19/line::e#2, line::@7/line::e#1 )
  line::sy#8 = phi( line::@19/line::sy#13, line::@7/line::sy#2 )
  line::y2#7 = phi( line::@19/line::y2#11, line::@7/line::y2#12 )
  line::y#8 = phi( line::@19/line::y#19, line::@7/line::y#2 )
  line::$17 = line::y#8 != line::y2#7
  if(line::$17) goto line::@7
  to:line::@10
line::@9: scope:[line]  from line::@7
  line::dx#26 = phi( line::@7/line::dx#4 )
  line::y2#16 = phi( line::@7/line::y2#12 )
  line::dy#19 = phi( line::@7/line::dy#3 )
  line::e#7 = phi( line::@7/line::e#1 )
  line::sx#11 = phi( line::@7/line::sx#15 )
  line::x#5 = phi( line::@7/line::x#15 )
  line::sy#3 = phi( line::@7/line::sy#2 )
  line::y#9 = phi( line::@7/line::y#2 )
  line::$15 = line::y#9 - line::sy#3
  line::plot2_x#0 = line::x#5
  line::plot2_y#0 = line::$15
  to:line::plot2
line::plot2: scope:[line]  from line::@9
  line::dx#23 = phi( line::@9/line::dx#26 )
  line::sy#18 = phi( line::@9/line::sy#3 )
  line::y2#14 = phi( line::@9/line::y2#16 )
  line::y#27 = phi( line::@9/line::y#9 )
  line::dy#13 = phi( line::@9/line::dy#19 )
  line::e#6 = phi( line::@9/line::e#7 )
  line::sx#7 = phi( line::@9/line::sx#11 )
  line::x#16 = phi( line::@9/line::x#5 )
  line::plot2_y#1 = phi( line::@9/line::plot2_y#0 )
  line::plot2_x#1 = phi( line::@9/line::plot2_x#0 )
  line::plot2_$0 = line::plot2_x#1 / 8
  line::plot2_$2 = line::plot2_$0 * SIZEOF_POINTER
  line::plot2_column#0 = plot_column[line::plot2_$2]
  line::plot2_$1 = line::plot2_x#1 & 7
  line::plot2_column#0[line::plot2_y#1] = line::plot2_column#0[line::plot2_y#1] | plot_bit[line::plot2_$1]
  to:line::@19
line::@19: scope:[line]  from line::plot2
  line::dx#19 = phi( line::plot2/line::dx#23 )
  line::sy#13 = phi( line::plot2/line::sy#18 )
  line::y2#11 = phi( line::plot2/line::y2#14 )
  line::y#19 = phi( line::plot2/line::y#27 )
  line::dy#4 = phi( line::plot2/line::dy#13 )
  line::e#4 = phi( line::plot2/line::e#6 )
  line::sx#3 = phi( line::plot2/line::sx#7 )
  line::x#6 = phi( line::plot2/line::x#16 )
  line::x#1 = line::x#6 + line::sx#3
  line::e#2 = line::e#4 - line::dy#4
  to:line::@8
line::@10: scope:[line]  from line::@8
  line::y#10 = phi( line::@8/line::y#8 )
  line::x#7 = phi( line::@8/line::x#17 )
  line::plot3_x#0 = line::x#7
  line::plot3_y#0 = line::y#10
  to:line::plot3
line::plot3: scope:[line]  from line::@10
  line::plot3_y#1 = phi( line::@10/line::plot3_y#0 )
  line::plot3_x#1 = phi( line::@10/line::plot3_x#0 )
  line::plot3_$0 = line::plot3_x#1 / 8
  line::plot3_$2 = line::plot3_$0 * SIZEOF_POINTER
  line::plot3_column#0 = plot_column[line::plot3_$2]
  line::plot3_$1 = line::plot3_x#1 & 7
  line::plot3_column#0[line::plot3_y#1] = line::plot3_column#0[line::plot3_y#1] | plot_bit[line::plot3_$1]
  to:line::@return
line::@11: scope:[line]  from line::@18
  line::x2#15 = phi( line::@18/line::x2#18 )
  line::sx#12 = phi( line::@18/line::sx#16 )
  line::x#25 = phi( line::@18/line::x#28 )
  line::dx#13 = phi( line::@18/line::dx#3 )
  line::sy#9 = phi( line::@18/line::sy#14 )
  line::y#20 = phi( line::@18/line::y#28 )
  line::dy#5 = phi( line::@18/line::dy#14 )
  line::$22 = line::dy#5 / 2
  line::e1#0 = line::$22
  to:line::@12
line::@return: scope:[line]  from line::@18 line::@20 line::plot3 line::plot6
  return 
  to:@return
line::@12: scope:[line]  from line::@11 line::@12 line::@20
  line::x2#13 = phi( line::@11/line::x2#15, line::@12/line::x2#13, line::@20/line::x2#5 )
  line::sx#8 = phi( line::@11/line::sx#12, line::@12/line::sx#8, line::@20/line::sx#13 )
  line::x#18 = phi( line::@11/line::x#25, line::@12/line::x#18, line::@20/line::x#9 )
  line::dy#6 = phi( line::@11/line::dy#5, line::@12/line::dy#6, line::@20/line::dy#15 )
  line::dx#5 = phi( line::@11/line::dx#13, line::@12/line::dx#5, line::@20/line::dx#14 )
  line::e1#3 = phi( line::@11/line::e1#0, line::@12/line::e1#1, line::@20/line::e1#5 )
  line::sy#4 = phi( line::@11/line::sy#9, line::@12/line::sy#4, line::@20/line::sy#10 )
  line::y#11 = phi( line::@11/line::y#20, line::@12/line::y#3, line::@20/line::y#21 )
  line::y#3 = line::y#11 + line::sy#4
  line::e1#1 = line::e1#3 + line::dx#5
  line::$23 = line::e1#1 <= line::dy#6
  if(line::$23) goto line::@12
  to:line::@13
line::@13: scope:[line]  from line::@12
  line::dx#24 = phi( line::@12/line::dx#5 )
  line::sy#19 = phi( line::@12/line::sy#4 )
  line::x2#11 = phi( line::@12/line::x2#13 )
  line::y#12 = phi( line::@12/line::y#3 )
  line::dy#7 = phi( line::@12/line::dy#6 )
  line::e1#4 = phi( line::@12/line::e1#1 )
  line::sx#4 = phi( line::@12/line::sx#8 )
  line::x#8 = phi( line::@12/line::x#18 )
  line::x#2 = line::x#8 + line::sx#4
  line::e1#2 = line::e1#4 - line::dy#7
  line::plot4_x#0 = line::x#2
  line::plot4_y#0 = line::y#12
  to:line::plot4
line::plot4: scope:[line]  from line::@13
  line::sx#17 = phi( line::@13/line::sx#4 )
  line::dy#20 = phi( line::@13/line::dy#7 )
  line::dx#20 = phi( line::@13/line::dx#24 )
  line::e1#6 = phi( line::@13/line::e1#2 )
  line::sy#15 = phi( line::@13/line::sy#19 )
  line::y#29 = phi( line::@13/line::y#12 )
  line::x2#8 = phi( line::@13/line::x2#11 )
  line::x#19 = phi( line::@13/line::x#2 )
  line::plot4_y#1 = phi( line::@13/line::plot4_y#0 )
  line::plot4_x#1 = phi( line::@13/line::plot4_x#0 )
  line::plot4_$0 = line::plot4_x#1 / 8
  line::plot4_$2 = line::plot4_$0 * SIZEOF_POINTER
  line::plot4_column#0 = plot_column[line::plot4_$2]
  line::plot4_$1 = line::plot4_x#1 & 7
  line::plot4_column#0[line::plot4_y#1] = line::plot4_column#0[line::plot4_y#1] | plot_bit[line::plot4_$1]
  to:line::@20
line::@20: scope:[line]  from line::plot4
  line::sx#13 = phi( line::plot4/line::sx#17 )
  line::dy#15 = phi( line::plot4/line::dy#20 )
  line::dx#14 = phi( line::plot4/line::dx#20 )
  line::e1#5 = phi( line::plot4/line::e1#6 )
  line::sy#10 = phi( line::plot4/line::sy#15 )
  line::y#21 = phi( line::plot4/line::y#29 )
  line::x2#5 = phi( line::plot4/line::x2#8 )
  line::x#9 = phi( line::plot4/line::x#19 )
  line::$25 = line::x#9 != line::x2#5
  if(line::$25) goto line::@12
  to:line::@return
line::@14: scope:[line]  from line::@15 line::@2
  line::sy#20 = phi( line::@15/line::sy#22, line::@2/line::sy#23 )
  line::x2#14 = phi( line::@15/line::x2#6, line::@2/line::x2#16 )
  line::dx#21 = phi( line::@15/line::dx#25, line::@2/line::dx#2 )
  line::dy#21 = phi( line::@15/line::dy#23, line::@2/line::dy#24 )
  line::e2#6 = phi( line::@15/line::e2#7, line::@2/line::e2#0 )
  line::sx#14 = phi( line::@15/line::sx#18, line::@2/line::sx#19 )
  line::y#13 = phi( line::@15/line::y#22, line::@2/line::y#23 )
  line::x#10 = phi( line::@15/line::x#12, line::@2/line::x#20 )
  line::plot5_x#0 = line::x#10
  line::plot5_y#0 = line::y#13
  to:line::plot5
line::plot5: scope:[line]  from line::@14
  line::sy#16 = phi( line::@14/line::sy#20 )
  line::y#30 = phi( line::@14/line::y#13 )
  line::x2#12 = phi( line::@14/line::x2#14 )
  line::dx#15 = phi( line::@14/line::dx#21 )
  line::dy#16 = phi( line::@14/line::dy#21 )
  line::e2#5 = phi( line::@14/line::e2#6 )
  line::sx#9 = phi( line::@14/line::sx#14 )
  line::x#21 = phi( line::@14/line::x#10 )
  line::plot5_y#1 = phi( line::@14/line::plot5_y#0 )
  line::plot5_x#1 = phi( line::@14/line::plot5_x#0 )
  line::plot5_$0 = line::plot5_x#1 / 8
  line::plot5_$2 = line::plot5_$0 * SIZEOF_POINTER
  line::plot5_column#0 = plot_column[line::plot5_$2]
  line::plot5_$1 = line::plot5_x#1 & 7
  line::plot5_column#0[line::plot5_y#1] = line::plot5_column#0[line::plot5_y#1] | plot_bit[line::plot5_$1]
  to:line::@21
line::@21: scope:[line]  from line::plot5
  line::sy#11 = phi( line::plot5/line::sy#16 )
  line::y#24 = phi( line::plot5/line::y#30 )
  line::x2#10 = phi( line::plot5/line::x2#12 )
  line::dx#6 = phi( line::plot5/line::dx#15 )
  line::dy#8 = phi( line::plot5/line::dy#16 )
  line::e2#3 = phi( line::plot5/line::e2#5 )
  line::sx#5 = phi( line::plot5/line::sx#9 )
  line::x#11 = phi( line::plot5/line::x#21 )
  line::x#3 = line::x#11 + line::sx#5
  line::e2#1 = line::e2#3 + line::dy#8
  line::$28 = line::e2#1 > line::dx#6
  line::$29 = ! line::$28
  if(line::$29) goto line::@15
  to:line::@16
line::@15: scope:[line]  from line::@16 line::@21
  line::sy#22 = phi( line::@16/line::sy#5, line::@21/line::sy#11 )
  line::dx#25 = phi( line::@16/line::dx#7, line::@21/line::dx#6 )
  line::dy#23 = phi( line::@16/line::dy#25, line::@21/line::dy#8 )
  line::e2#7 = phi( line::@16/line::e2#2, line::@21/line::e2#1 )
  line::sx#18 = phi( line::@16/line::sx#23, line::@21/line::sx#5 )
  line::y#22 = phi( line::@16/line::y#4, line::@21/line::y#24 )
  line::x2#6 = phi( line::@16/line::x2#9, line::@21/line::x2#10 )
  line::x#12 = phi( line::@16/line::x#22, line::@21/line::x#3 )
  line::$30 = line::x#12 != line::x2#6
  if(line::$30) goto line::@14
  to:line::@17
line::@16: scope:[line]  from line::@21
  line::dy#25 = phi( line::@21/line::dy#8 )
  line::sx#23 = phi( line::@21/line::sx#5 )
  line::x2#9 = phi( line::@21/line::x2#10 )
  line::x#22 = phi( line::@21/line::x#3 )
  line::dx#7 = phi( line::@21/line::dx#6 )
  line::e2#4 = phi( line::@21/line::e2#1 )
  line::sy#5 = phi( line::@21/line::sy#11 )
  line::y#14 = phi( line::@21/line::y#24 )
  line::y#4 = line::y#14 + line::sy#5
  line::e2#2 = line::e2#4 - line::dx#7
  to:line::@15
line::@17: scope:[line]  from line::@15
  line::y#15 = phi( line::@15/line::y#22 )
  line::x#13 = phi( line::@15/line::x#12 )
  line::plot6_x#0 = line::x#13
  line::plot6_y#0 = line::y#15
  to:line::plot6
line::plot6: scope:[line]  from line::@17
  line::plot6_y#1 = phi( line::@17/line::plot6_y#0 )
  line::plot6_x#1 = phi( line::@17/line::plot6_x#0 )
  line::plot6_$0 = line::plot6_x#1 / 8
  line::plot6_$2 = line::plot6_$0 * SIZEOF_POINTER
  line::plot6_column#0 = plot_column[line::plot6_$2]
  line::plot6_$1 = line::plot6_x#1 & 7
  line::plot6_column#0[line::plot6_y#1] = line::plot6_column#0[line::plot6_y#1] | plot_bit[line::plot6_$1]
  to:line::@return

void eorfill(byte* eorfill::line_buffer , byte* eorfill::canvas)
eorfill: scope:[eorfill]  from main::@10
  eorfill::canvas#1 = phi( main::@10/eorfill::canvas#0 )
  eorfill::line_buffer#1 = phi( main::@10/eorfill::line_buffer#0 )
  eorfill::line_column#0 = eorfill::line_buffer#1
  eorfill::fill_column#0 = eorfill::canvas#1
  eorfill::x#0 = 0
  to:eorfill::@1
eorfill::@1: scope:[eorfill]  from eorfill eorfill::@5
  eorfill::fill_column#5 = phi( eorfill/eorfill::fill_column#0, eorfill::@5/eorfill::fill_column#1 )
  eorfill::line_column#5 = phi( eorfill/eorfill::line_column#0, eorfill::@5/eorfill::line_column#1 )
  eorfill::x#2 = phi( eorfill/eorfill::x#0, eorfill::@5/eorfill::x#1 )
  eorfill::$0 = eorfill::x#2 < $10
  if(eorfill::$0) goto eorfill::@2
  to:eorfill::@return
eorfill::@2: scope:[eorfill]  from eorfill::@1
  eorfill::x#5 = phi( eorfill::@1/eorfill::x#2 )
  eorfill::fill_column#2 = phi( eorfill::@1/eorfill::fill_column#5 )
  eorfill::line_column#2 = phi( eorfill::@1/eorfill::line_column#5 )
  eorfill::eor#0 = eorfill::line_column#2[0]
  eorfill::fill_column#2[0] = eorfill::eor#0
  eorfill::y#0 = 1
  to:eorfill::@3
eorfill::@3: scope:[eorfill]  from eorfill::@2 eorfill::@4
  eorfill::x#4 = phi( eorfill::@2/eorfill::x#5, eorfill::@4/eorfill::x#6 )
  eorfill::fill_column#6 = phi( eorfill::@2/eorfill::fill_column#2, eorfill::@4/eorfill::fill_column#3 )
  eorfill::line_column#6 = phi( eorfill::@2/eorfill::line_column#2, eorfill::@4/eorfill::line_column#3 )
  eorfill::eor#3 = phi( eorfill::@2/eorfill::eor#0, eorfill::@4/eorfill::eor#1 )
  eorfill::y#2 = phi( eorfill::@2/eorfill::y#0, eorfill::@4/eorfill::y#1 )
  eorfill::$1 = eorfill::y#2 < $10*8
  if(eorfill::$1) goto eorfill::@4
  to:eorfill::@5
eorfill::@4: scope:[eorfill]  from eorfill::@3
  eorfill::x#6 = phi( eorfill::@3/eorfill::x#4 )
  eorfill::fill_column#3 = phi( eorfill::@3/eorfill::fill_column#6 )
  eorfill::y#3 = phi( eorfill::@3/eorfill::y#2 )
  eorfill::line_column#3 = phi( eorfill::@3/eorfill::line_column#6 )
  eorfill::eor#2 = phi( eorfill::@3/eorfill::eor#3 )
  eorfill::eor#1 = eorfill::eor#2 ^ eorfill::line_column#3[eorfill::y#3]
  eorfill::fill_column#3[eorfill::y#3] = eorfill::eor#1
  eorfill::y#1 = ++ eorfill::y#3
  to:eorfill::@3
eorfill::@5: scope:[eorfill]  from eorfill::@3
  eorfill::x#3 = phi( eorfill::@3/eorfill::x#4 )
  eorfill::fill_column#4 = phi( eorfill::@3/eorfill::fill_column#6 )
  eorfill::line_column#4 = phi( eorfill::@3/eorfill::line_column#6 )
  eorfill::line_column#1 = eorfill::line_column#4 + $10*8
  eorfill::fill_column#1 = eorfill::fill_column#4 + $10*8
  eorfill::x#1 = ++ eorfill::x#3
  to:eorfill::@1
eorfill::@return: scope:[eorfill]  from eorfill::@1
  return 
  to:@return

byte abs_u8(byte abs_u8::u)
abs_u8: scope:[abs_u8]  from line line::@22
  abs_u8::u#2 = phi( line/abs_u8::u#0, line::@22/abs_u8::u#1 )
  abs_u8::$0 = abs_u8::u#2 & $80
  abs_u8::$2 = 0 != abs_u8::$0
  if(abs_u8::$2) goto abs_u8::@1
  to:abs_u8::@2
abs_u8::@1: scope:[abs_u8]  from abs_u8
  abs_u8::u#3 = phi( abs_u8/abs_u8::u#2 )
  abs_u8::$1 = - abs_u8::u#3
  abs_u8::return#2 = abs_u8::$1
  to:abs_u8::@return
abs_u8::@2: scope:[abs_u8]  from abs_u8
  abs_u8::u#4 = phi( abs_u8/abs_u8::u#2 )
  abs_u8::return#3 = abs_u8::u#4
  to:abs_u8::@return
abs_u8::@return: scope:[abs_u8]  from abs_u8::@1 abs_u8::@2
  abs_u8::return#7 = phi( abs_u8::@1/abs_u8::return#2, abs_u8::@2/abs_u8::return#3 )
  abs_u8::return#4 = abs_u8::return#7
  return 
  to:@return

byte sgn_u8(byte sgn_u8::u)
sgn_u8: scope:[sgn_u8]  from line::@23 line::@24
  sgn_u8::u#2 = phi( line::@23/sgn_u8::u#0, line::@24/sgn_u8::u#1 )
  sgn_u8::$0 = sgn_u8::u#2 & $80
  sgn_u8::$1 = 0 != sgn_u8::$0
  if(sgn_u8::$1) goto sgn_u8::@1
  to:sgn_u8::@2
sgn_u8::@1: scope:[sgn_u8]  from sgn_u8
  sgn_u8::return#2 = -1
  to:sgn_u8::@return
sgn_u8::@2: scope:[sgn_u8]  from sgn_u8
  sgn_u8::return#3 = 1
  to:sgn_u8::@return
sgn_u8::@return: scope:[sgn_u8]  from sgn_u8::@1 sgn_u8::@2
  sgn_u8::return#7 = phi( sgn_u8::@1/sgn_u8::return#2, sgn_u8::@2/sgn_u8::return#3 )
  sgn_u8::return#4 = sgn_u8::return#7
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
  __start::__init1_toD0181_screen#0 = SCREEN
  __start::__init1_toD0181_gfx#0 = CANVAS2
  to:__start::__init1_toD0181
__start::__init1_toD0181: scope:[__start]  from __start::__init1
  __start::__init1_toD0181_gfx#1 = phi( __start::__init1/__start::__init1_toD0181_gfx#0 )
  __start::__init1_toD0181_screen#1 = phi( __start::__init1/__start::__init1_toD0181_screen#0 )
  __start::__init1_toD0181_$7 = (word)__start::__init1_toD0181_screen#1
  __start::__init1_toD0181_$0 = __start::__init1_toD0181_$7 & $3fff
  __start::__init1_toD0181_$1 = __start::__init1_toD0181_$0 * 4
  __start::__init1_toD0181_$2 = > __start::__init1_toD0181_$1
  __start::__init1_toD0181_$3 = > (word)__start::__init1_toD0181_gfx#1
  __start::__init1_toD0181_$4 = __start::__init1_toD0181_$3 / 4
  __start::__init1_toD0181_$5 = __start::__init1_toD0181_$4 & $f
  __start::__init1_toD0181_$6 = __start::__init1_toD0181_$2 | __start::__init1_toD0181_$5
  __start::__init1_toD0181_return#0 = __start::__init1_toD0181_$6
  to:__start::__init1_toD0181_@return
__start::__init1_toD0181_@return: scope:[__start]  from __start::__init1_toD0181
  __start::__init1_toD0181_return#2 = phi( __start::__init1_toD0181/__start::__init1_toD0181_return#0 )
  __start::__init1_toD0181_return#1 = __start::__init1_toD0181_return#2
  to:__start::__init1_@1
__start::__init1_@1: scope:[__start]  from __start::__init1_toD0181_@return
  __start::__init1_toD0181_return#3 = phi( __start::__init1_toD0181_@return/__start::__init1_toD0181_return#1 )
  __start::__init1_$0 = __start::__init1_toD0181_return#3
  canvas_show_memory = __start::__init1_$0
  canvas_show_flag = 0
  call conio_c64_init 
  to:__start::@2
__start::@2: scope:[__start]  from __start::__init1_@1
  to:__start::@1
__start::@1: scope:[__start]  from __start::@2
  call main 
  to:__start::@3
__start::@3: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@3
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte BLACK = 0
const nomodify byte BORDER_YPOS_BOTTOM = $fa
const nomodify byte* CANVAS1 = (byte*)$3000
const nomodify byte* CANVAS2 = (byte*)$3800
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*)$dc00
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*)$dd00
const nomodify dword* CIA2_TIMER_AB = (dword*)$dd04
const nomodify byte CIA_INTERRUPT_CLEAR = $7f
const nomodify byte CIA_TIMER_CONTROL_A_COUNT_CYCLES = 0
const nomodify byte CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
const nomodify byte CIA_TIMER_CONTROL_CONTINUOUS = 0
const nomodify byte CIA_TIMER_CONTROL_START = 1
const nomodify byte CIA_TIMER_CONTROL_STOP = 0
const nomodify byte* COLS = (byte*)$d800
const nomodify byte CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
const nomodify byte* CONSOLE = (byte*)$400
const byte* COSTAB = SINTAB+$40
const nomodify byte DARK_GREY = $b
const nomodify byte IRQ_RASTER = 1
const nomodify void()** KERNEL_IRQ = (void()**)$314
const nomodify byte LIGHT_BLUE = $e
const nomodify byte* LINE_BUFFER = (byte*)$2000
const byte OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
const byte OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
const byte OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
const byte OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const nomodify byte* PETSCII = (byte*)$1000
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte RED = 2
const nomodify byte* SCREEN = (byte*)$2c00
const byte* SINTAB[$140]  = kickasm {{ .fill $200, round(63 + 63*sin(i*2*PI/$100))
 }}
const byte SIZEOF_POINTER = 2
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*)$d000
const nomodify byte WHITE = 1
void __start()
byte~ __start::__init1_$0
number~ __start::__init1_toD0181_$0
number~ __start::__init1_toD0181_$1
number~ __start::__init1_toD0181_$2
byte~ __start::__init1_toD0181_$3
number~ __start::__init1_toD0181_$4
number~ __start::__init1_toD0181_$5
number~ __start::__init1_toD0181_$6
word~ __start::__init1_toD0181_$7
byte* __start::__init1_toD0181_gfx
byte* __start::__init1_toD0181_gfx#0
byte* __start::__init1_toD0181_gfx#1
byte __start::__init1_toD0181_return
byte __start::__init1_toD0181_return#0
byte __start::__init1_toD0181_return#1
byte __start::__init1_toD0181_return#2
byte __start::__init1_toD0181_return#3
byte* __start::__init1_toD0181_screen
byte* __start::__init1_toD0181_screen#0
byte* __start::__init1_toD0181_screen#1
byte abs_u8(byte abs_u8::u)
number~ abs_u8::$0
byte~ abs_u8::$1
bool~ abs_u8::$2
byte abs_u8::return
byte abs_u8::return#0
byte abs_u8::return#1
byte abs_u8::return#2
byte abs_u8::return#3
byte abs_u8::return#4
byte abs_u8::return#5
byte abs_u8::return#6
byte abs_u8::return#7
byte abs_u8::u
byte abs_u8::u#0
byte abs_u8::u#1
byte abs_u8::u#2
byte abs_u8::u#3
byte abs_u8::u#4
volatile byte canvas_show_flag loadstore
volatile byte canvas_show_memory loadstore
dword clock()
number~ clock::$0
dword clock::return
dword clock::return#0
dword clock::return#1
dword clock::return#2
dword clock::return#3
void clock_start()
void conio_c64_init()
bool~ conio_c64_init::$0
bool~ conio_c64_init::$1
const nomodify byte* conio_c64_init::BASIC_CURSOR_LINE = (byte*)$d6
byte conio_c64_init::line
byte conio_c64_init::line#0
byte conio_c64_init::line#1
byte conio_c64_init::line#2
byte conio_textcolor loadstore
void eorfill(byte* eorfill::line_buffer , byte* eorfill::canvas)
bool~ eorfill::$0
bool~ eorfill::$1
byte* eorfill::canvas
byte* eorfill::canvas#0
byte* eorfill::canvas#1
byte eorfill::eor
byte eorfill::eor#0
byte eorfill::eor#1
byte eorfill::eor#2
byte eorfill::eor#3
byte* eorfill::fill_column
byte* eorfill::fill_column#0
byte* eorfill::fill_column#1
byte* eorfill::fill_column#2
byte* eorfill::fill_column#3
byte* eorfill::fill_column#4
byte* eorfill::fill_column#5
byte* eorfill::fill_column#6
byte* eorfill::line_buffer
byte* eorfill::line_buffer#0
byte* eorfill::line_buffer#1
byte* eorfill::line_column
byte* eorfill::line_column#0
byte* eorfill::line_column#1
byte* eorfill::line_column#2
byte* eorfill::line_column#3
byte* eorfill::line_column#4
byte* eorfill::line_column#5
byte* eorfill::line_column#6
byte eorfill::x
byte eorfill::x#0
byte eorfill::x#1
byte eorfill::x#2
byte eorfill::x#3
byte eorfill::x#4
byte eorfill::x#5
byte eorfill::x#6
byte eorfill::y
byte eorfill::y#0
byte eorfill::y#1
byte eorfill::y#2
byte eorfill::y#3
void gotoxy(byte gotoxy::x , byte gotoxy::y)
bool~ gotoxy::$0
bool~ gotoxy::$1
bool~ gotoxy::$2
bool~ gotoxy::$3
byte gotoxy::x
byte gotoxy::x#0
byte gotoxy::x#1
byte gotoxy::x#2
byte gotoxy::x#3
byte gotoxy::x#4
byte gotoxy::y
byte gotoxy::y#0
byte gotoxy::y#1
byte gotoxy::y#2
interrupt(KERNEL_MIN) void irq_bottom_1()
byte~ irq_bottom_1::$0
number~ irq_bottom_1::toD0181_$0
number~ irq_bottom_1::toD0181_$1
number~ irq_bottom_1::toD0181_$2
byte~ irq_bottom_1::toD0181_$3
number~ irq_bottom_1::toD0181_$4
number~ irq_bottom_1::toD0181_$5
number~ irq_bottom_1::toD0181_$6
word~ irq_bottom_1::toD0181_$7
byte* irq_bottom_1::toD0181_gfx
byte* irq_bottom_1::toD0181_gfx#0
byte* irq_bottom_1::toD0181_gfx#1
byte irq_bottom_1::toD0181_return
byte irq_bottom_1::toD0181_return#0
byte irq_bottom_1::toD0181_return#1
byte irq_bottom_1::toD0181_return#2
byte irq_bottom_1::toD0181_return#3
byte* irq_bottom_1::toD0181_screen
byte* irq_bottom_1::toD0181_screen#0
byte* irq_bottom_1::toD0181_screen#1
interrupt(KERNEL_KEYBOARD) void irq_bottom_2()
byte~ irq_bottom_2::$0
bool~ irq_bottom_2::$1
byte~ irq_bottom_2::$2
bool~ irq_bottom_2::$3
number~ irq_bottom_2::toD0181_$0
number~ irq_bottom_2::toD0181_$1
number~ irq_bottom_2::toD0181_$2
byte~ irq_bottom_2::toD0181_$3
number~ irq_bottom_2::toD0181_$4
number~ irq_bottom_2::toD0181_$5
number~ irq_bottom_2::toD0181_$6
word~ irq_bottom_2::toD0181_$7
byte* irq_bottom_2::toD0181_gfx
byte* irq_bottom_2::toD0181_gfx#0
byte* irq_bottom_2::toD0181_gfx#1
byte irq_bottom_2::toD0181_return
byte irq_bottom_2::toD0181_return#0
byte irq_bottom_2::toD0181_return#1
byte irq_bottom_2::toD0181_return#2
byte irq_bottom_2::toD0181_return#3
byte* irq_bottom_2::toD0181_screen
byte* irq_bottom_2::toD0181_screen#0
byte* irq_bottom_2::toD0181_screen#1
byte kbhit()
byte~ kbhit::$0
const nomodify byte* kbhit::CIA1_PORT_A = (byte*)$dc00
const nomodify byte* kbhit::CIA1_PORT_B = (byte*)$dc01
byte kbhit::return
byte kbhit::return#0
byte kbhit::return#1
byte kbhit::return#2
byte kbhit::return#3
byte kbhit::return#4
void line(byte* line::canvas , byte line::x1 , byte line::y1 , byte line::x2 , byte line::y2)
byte~ line::$0
byte~ line::$1
bool~ line::$10
bool~ line::$11
number~ line::$12
bool~ line::$13
bool~ line::$14
byte~ line::$15
bool~ line::$17
byte~ line::$2
bool~ line::$20
bool~ line::$21
number~ line::$22
bool~ line::$23
bool~ line::$25
number~ line::$26
bool~ line::$28
bool~ line::$29
byte~ line::$3
bool~ line::$30
byte~ line::$4
byte~ line::$5
byte~ line::$6
byte~ line::$7
bool~ line::$8
bool~ line::$9
byte* line::canvas
byte* line::canvas#0
byte* line::canvas#1
byte* line::canvas#2
byte line::dx
byte line::dx#0
byte line::dx#1
byte line::dx#10
byte line::dx#11
byte line::dx#12
byte line::dx#13
byte line::dx#14
byte line::dx#15
byte line::dx#16
byte line::dx#17
byte line::dx#18
byte line::dx#19
byte line::dx#2
byte line::dx#20
byte line::dx#21
byte line::dx#22
byte line::dx#23
byte line::dx#24
byte line::dx#25
byte line::dx#26
byte line::dx#3
byte line::dx#4
byte line::dx#5
byte line::dx#6
byte line::dx#7
byte line::dx#8
byte line::dx#9
byte line::dy
byte line::dy#0
byte line::dy#1
byte line::dy#10
byte line::dy#11
byte line::dy#12
byte line::dy#13
byte line::dy#14
byte line::dy#15
byte line::dy#16
byte line::dy#17
byte line::dy#18
byte line::dy#19
byte line::dy#2
byte line::dy#20
byte line::dy#21
byte line::dy#22
byte line::dy#23
byte line::dy#24
byte line::dy#25
byte line::dy#3
byte line::dy#4
byte line::dy#5
byte line::dy#6
byte line::dy#7
byte line::dy#8
byte line::dy#9
byte line::e
byte line::e#0
byte line::e#1
byte line::e#2
byte line::e#3
byte line::e#4
byte line::e#5
byte line::e#6
byte line::e#7
byte line::e1
byte line::e1#0
byte line::e1#1
byte line::e1#2
byte line::e1#3
byte line::e1#4
byte line::e1#5
byte line::e1#6
byte line::e2
byte line::e2#0
byte line::e2#1
byte line::e2#2
byte line::e2#3
byte line::e2#4
byte line::e2#5
byte line::e2#6
byte line::e2#7
number~ line::plot1_$0
number~ line::plot1_$1
number~ line::plot1_$2
byte* line::plot1_column
byte* line::plot1_column#0
byte line::plot1_x
byte line::plot1_x#0
byte line::plot1_x#1
byte line::plot1_y
byte line::plot1_y#0
byte line::plot1_y#1
number~ line::plot2_$0
number~ line::plot2_$1
number~ line::plot2_$2
byte* line::plot2_column
byte* line::plot2_column#0
byte line::plot2_x
byte line::plot2_x#0
byte line::plot2_x#1
byte line::plot2_y
byte line::plot2_y#0
byte line::plot2_y#1
number~ line::plot3_$0
number~ line::plot3_$1
number~ line::plot3_$2
byte* line::plot3_column
byte* line::plot3_column#0
byte line::plot3_x
byte line::plot3_x#0
byte line::plot3_x#1
byte line::plot3_y
byte line::plot3_y#0
byte line::plot3_y#1
number~ line::plot4_$0
number~ line::plot4_$1
number~ line::plot4_$2
byte* line::plot4_column
byte* line::plot4_column#0
byte line::plot4_x
byte line::plot4_x#0
byte line::plot4_x#1
byte line::plot4_y
byte line::plot4_y#0
byte line::plot4_y#1
number~ line::plot5_$0
number~ line::plot5_$1
number~ line::plot5_$2
byte* line::plot5_column
byte* line::plot5_column#0
byte line::plot5_x
byte line::plot5_x#0
byte line::plot5_x#1
byte line::plot5_y
byte line::plot5_y#0
byte line::plot5_y#1
number~ line::plot6_$0
number~ line::plot6_$1
number~ line::plot6_$2
byte* line::plot6_column
byte* line::plot6_column#0
byte line::plot6_x
byte line::plot6_x#0
byte line::plot6_x#1
byte line::plot6_y
byte line::plot6_y#0
byte line::plot6_y#1
byte line::sx
byte line::sx#0
byte line::sx#1
byte line::sx#10
byte line::sx#11
byte line::sx#12
byte line::sx#13
byte line::sx#14
byte line::sx#15
byte line::sx#16
byte line::sx#17
byte line::sx#18
byte line::sx#19
byte line::sx#2
byte line::sx#20
byte line::sx#21
byte line::sx#22
byte line::sx#23
byte line::sx#24
byte line::sx#3
byte line::sx#4
byte line::sx#5
byte line::sx#6
byte line::sx#7
byte line::sx#8
byte line::sx#9
byte line::sy
byte line::sy#0
byte line::sy#1
byte line::sy#10
byte line::sy#11
byte line::sy#12
byte line::sy#13
byte line::sy#14
byte line::sy#15
byte line::sy#16
byte line::sy#17
byte line::sy#18
byte line::sy#19
byte line::sy#2
byte line::sy#20
byte line::sy#21
byte line::sy#22
byte line::sy#23
byte line::sy#3
byte line::sy#4
byte line::sy#5
byte line::sy#6
byte line::sy#7
byte line::sy#8
byte line::sy#9
byte line::x
byte line::x#0
byte line::x#1
byte line::x#10
byte line::x#11
byte line::x#12
byte line::x#13
byte line::x#14
byte line::x#15
byte line::x#16
byte line::x#17
byte line::x#18
byte line::x#19
byte line::x#2
byte line::x#20
byte line::x#21
byte line::x#22
byte line::x#23
byte line::x#24
byte line::x#25
byte line::x#26
byte line::x#27
byte line::x#28
byte line::x#29
byte line::x#3
byte line::x#30
byte line::x#31
byte line::x#32
byte line::x#4
byte line::x#5
byte line::x#6
byte line::x#7
byte line::x#8
byte line::x#9
byte line::x1
byte line::x1#0
byte line::x1#1
byte line::x1#2
byte line::x1#3
byte line::x1#4
byte line::x1#5
byte line::x2
byte line::x2#0
byte line::x2#1
byte line::x2#10
byte line::x2#11
byte line::x2#12
byte line::x2#13
byte line::x2#14
byte line::x2#15
byte line::x2#16
byte line::x2#17
byte line::x2#18
byte line::x2#19
byte line::x2#2
byte line::x2#20
byte line::x2#21
byte line::x2#22
byte line::x2#23
byte line::x2#24
byte line::x2#3
byte line::x2#4
byte line::x2#5
byte line::x2#6
byte line::x2#7
byte line::x2#8
byte line::x2#9
byte line::y
byte line::y#0
byte line::y#1
byte line::y#10
byte line::y#11
byte line::y#12
byte line::y#13
byte line::y#14
byte line::y#15
byte line::y#16
byte line::y#17
byte line::y#18
byte line::y#19
byte line::y#2
byte line::y#20
byte line::y#21
byte line::y#22
byte line::y#23
byte line::y#24
byte line::y#25
byte line::y#26
byte line::y#27
byte line::y#28
byte line::y#29
byte line::y#3
byte line::y#30
byte line::y#31
byte line::y#32
byte line::y#33
byte line::y#4
byte line::y#5
byte line::y#6
byte line::y#7
byte line::y#8
byte line::y#9
byte line::y1
byte line::y1#0
byte line::y1#1
byte line::y1#2
byte line::y1#3
byte line::y1#4
byte line::y1#5
byte line::y1#6
byte line::y2
byte line::y2#0
byte line::y2#1
byte line::y2#10
byte line::y2#11
byte line::y2#12
byte line::y2#13
byte line::y2#14
byte line::y2#15
byte line::y2#16
byte line::y2#17
byte line::y2#2
byte line::y2#3
byte line::y2#4
byte line::y2#5
byte line::y2#6
byte line::y2#7
byte line::y2#8
byte line::y2#9
void main()
byte~ main::$15
byte~ main::$16
byte~ main::$17
word~ main::$20
bool~ main::$21
bool~ main::$22
number~ main::$5
number~ main::$6
bool~ main::$7
bool~ main::$8
byte main::c
byte main::c#0
byte main::c#1
byte main::c#2
byte main::c#3
byte* main::canvas
byte* main::canvas#0
byte* main::canvas#1
byte* main::canvas#10
byte* main::canvas#11
byte* main::canvas#12
byte* main::canvas#13
byte* main::canvas#14
byte* main::canvas#15
byte* main::canvas#16
byte* main::canvas#17
byte* main::canvas#18
byte* main::canvas#2
byte* main::canvas#3
byte* main::canvas#4
byte* main::canvas#5
byte* main::canvas#6
byte* main::canvas#7
byte* main::canvas#8
byte* main::canvas#9
byte* main::cols
byte* main::cols#0
byte* main::cols#1
byte* main::cols#2
byte* main::cols#3
byte* main::cols#4
byte* main::cols#5
byte* main::cols#6
byte main::p0_idx
byte main::p0_idx#0
byte main::p0_idx#1
byte main::p0_idx#10
byte main::p0_idx#11
byte main::p0_idx#12
byte main::p0_idx#13
byte main::p0_idx#14
byte main::p0_idx#15
byte main::p0_idx#16
byte main::p0_idx#17
byte main::p0_idx#18
byte main::p0_idx#2
byte main::p0_idx#3
byte main::p0_idx#4
byte main::p0_idx#5
byte main::p0_idx#6
byte main::p0_idx#7
byte main::p0_idx#8
byte main::p0_idx#9
byte main::p1_idx
byte main::p1_idx#0
byte main::p1_idx#1
byte main::p1_idx#10
byte main::p1_idx#11
byte main::p1_idx#12
byte main::p1_idx#13
byte main::p1_idx#14
byte main::p1_idx#15
byte main::p1_idx#16
byte main::p1_idx#17
byte main::p1_idx#18
byte main::p1_idx#2
byte main::p1_idx#3
byte main::p1_idx#4
byte main::p1_idx#5
byte main::p1_idx#6
byte main::p1_idx#7
byte main::p1_idx#8
byte main::p1_idx#9
byte main::p2_idx
byte main::p2_idx#0
byte main::p2_idx#1
byte main::p2_idx#10
byte main::p2_idx#11
byte main::p2_idx#12
byte main::p2_idx#13
byte main::p2_idx#14
byte main::p2_idx#15
byte main::p2_idx#16
byte main::p2_idx#17
byte main::p2_idx#18
byte main::p2_idx#2
byte main::p2_idx#3
byte main::p2_idx#4
byte main::p2_idx#5
byte main::p2_idx#6
byte main::p2_idx#7
byte main::p2_idx#8
byte main::p2_idx#9
byte* main::screen
byte* main::screen#0
byte* main::screen#1
byte* main::screen#2
byte* main::screen#3
byte* main::screen#4
byte* main::screen#5
byte* main::screen#6
number~ main::toD0181_$0
number~ main::toD0181_$1
number~ main::toD0181_$2
byte~ main::toD0181_$3
number~ main::toD0181_$4
number~ main::toD0181_$5
number~ main::toD0181_$6
word~ main::toD0181_$7
byte* main::toD0181_gfx
byte* main::toD0181_gfx#0
byte* main::toD0181_gfx#1
byte main::toD0181_return
byte main::toD0181_return#0
byte main::toD0181_return#1
byte main::toD0181_return#2
byte main::toD0181_return#3
byte* main::toD0181_screen
byte* main::toD0181_screen#0
byte* main::toD0181_screen#1
number~ main::toD0182_$0
number~ main::toD0182_$1
number~ main::toD0182_$2
byte~ main::toD0182_$3
number~ main::toD0182_$4
number~ main::toD0182_$5
number~ main::toD0182_$6
word~ main::toD0182_$7
byte* main::toD0182_gfx
byte* main::toD0182_gfx#0
byte* main::toD0182_gfx#1
byte main::toD0182_return
byte main::toD0182_return#0
byte main::toD0182_return#1
byte main::toD0182_return#2
byte main::toD0182_return#3
byte* main::toD0182_screen
byte* main::toD0182_screen#0
byte* main::toD0182_screen#1
byte main::x
byte main::x#0
byte main::x#1
byte main::x#2
byte main::x#3
byte main::x0
byte main::x0#0
byte main::x0#1
byte main::x0#2
byte main::x1
byte main::x1#0
byte main::x1#1
byte main::x2
byte main::x2#0
byte main::x2#1
byte main::y
byte main::y#0
byte main::y#1
byte main::y#2
byte main::y#3
byte main::y#4
byte main::y#5
byte main::y#6
byte main::y0
byte main::y0#0
byte main::y0#1
byte main::y0#2
byte main::y1
byte main::y1#0
byte main::y1#1
byte main::y2
byte main::y2#0
byte main::y2#1
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte memset::c#5
byte memset::c#6
byte memset::c#7
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
word memset::num#3
word memset::num#4
word memset::num#5
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::return#4
void* memset::return#5
void* memset::return#6
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void* memset::str#6
void* memset::str#7
void* memset::str#8
const byte* plot_bit[8]  = { $80, $40, $20, $10, 8, 4, 2, 1 }
const byte** plot_column[$10]  = { LINE_BUFFER+0, LINE_BUFFER+1*$80, LINE_BUFFER+2*$80, LINE_BUFFER+3*$80, LINE_BUFFER+4*$80, LINE_BUFFER+5*$80, LINE_BUFFER+6*$80, LINE_BUFFER+7*$80, LINE_BUFFER+8*$80, LINE_BUFFER+9*$80, LINE_BUFFER+$a*$80, LINE_BUFFER+$b*$80, LINE_BUFFER+$c*$80, LINE_BUFFER+$d*$80, LINE_BUFFER+$e*$80, LINE_BUFFER+$f*$80 }
void setup_irq()
byte sgn_u8(byte sgn_u8::u)
number~ sgn_u8::$0
bool~ sgn_u8::$1
byte sgn_u8::return
byte sgn_u8::return#0
byte sgn_u8::return#1
byte sgn_u8::return#2
byte sgn_u8::return#3
byte sgn_u8::return#4
byte sgn_u8::return#5
byte sgn_u8::return#6
byte sgn_u8::return#7
byte sgn_u8::u
byte sgn_u8::u#0
byte sgn_u8::u#1
byte sgn_u8::u#2
byte textcolor(byte textcolor::color)
byte textcolor::color
byte textcolor::color#0
byte textcolor::color#1
byte textcolor::old
byte textcolor::old#0
byte textcolor::return
byte textcolor::return#0
byte textcolor::return#1
byte textcolor::return#2
byte textcolor::return#3

Adding number conversion cast (unumber) 0 in 
Adding number conversion cast (unumber) 1*$80 in 
Adding number conversion cast (unumber) 2*$80 in 
Adding number conversion cast (unumber) 3*$80 in 
Adding number conversion cast (unumber) 4*$80 in 
Adding number conversion cast (unumber) 5*$80 in 
Adding number conversion cast (unumber) 6*$80 in 
Adding number conversion cast (unumber) 7*$80 in 
Adding number conversion cast (unumber) 8*$80 in 
Adding number conversion cast (unumber) 9*$80 in 
Adding number conversion cast (unumber) $a*$80 in 
Adding number conversion cast (unumber) $b*$80 in 
Adding number conversion cast (unumber) $c*$80 in 
Adding number conversion cast (unumber) $d*$80 in 
Adding number conversion cast (unumber) $e*$80 in 
Adding number conversion cast (unumber) $f*$80 in 
Adding number conversion cast (unumber) $40 in 
Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#4 > 0
Adding number conversion cast (unumber) $ffffffff in clock::$0 = $ffffffff - *CIA2_TIMER_AB
Adding number conversion cast (unumber) clock::$0 in clock::$0 = (unumber)$ffffffff - *CIA2_TIMER_AB
Adding number conversion cast (unumber) $ffffffff in *CIA2_TIMER_AB = $ffffffff
Adding number conversion cast (unumber) $19 in gotoxy::$0 = gotoxy::y#2 > $19
Adding number conversion cast (unumber) $28 in gotoxy::$2 = gotoxy::x#2 >= $28
Adding number conversion cast (unumber) 0 in gotoxy::y#0 = 0
Adding number conversion cast (unumber) 0 in gotoxy::x#0 = 0
Adding number conversion cast (unumber) $19 in conio_c64_init::$0 = conio_c64_init::line#0 >= $19
Adding number conversion cast (unumber) 0 in gotoxy::x#1 = 0
Adding number conversion cast (unumber) $19-1 in conio_c64_init::line#1 = $19-1
Adding number conversion cast (unumber) 0 in *kbhit::CIA1_PORT_A = 0
Adding number conversion cast (unumber) $28*$19 in memset::num#0 = $28*$19
Adding number conversion cast (unumber) 0 in memset::c#1 = 0
Adding number conversion cast (unumber) $28*$19 in memset::num#1 = $28*$19
Adding number conversion cast (unumber) $28*$19 in memset::num#2 = $28*$19
Adding number conversion cast (unumber) $c in main::screen#0 = SCREEN+$c
Adding number conversion cast (unumber) $c in main::cols#0 = COLS+$c
Adding number conversion cast (unumber) $10 in main::$7 = main::y#2 < $10
Adding number conversion cast (unumber) $f in main::$5 = main::p0_idx#0 + $f
Adding number conversion cast (unumber) main::$5 in main::$5 = main::p0_idx#0 + (unumber)$f
Adding number conversion cast (unumber) $aa in main::$6 = main::p0_idx#0 + $aa
Adding number conversion cast (unumber) main::$6 in main::$6 = main::p0_idx#0 + (unumber)$aa
Adding number conversion cast (unumber) $10 in main::$8 = main::x#2 < $10
Adding number conversion cast (unumber) $10 in main::c#1 = main::c#2 + $10
Adding number conversion cast (unumber) $28 in main::cols#1 = main::cols#3 + $28
Adding number conversion cast (unumber) $28 in main::screen#1 = main::screen#3 + $28
Adding number conversion cast (unumber) 0 in memset::c#3 = 0
Adding number conversion cast (unumber) $800 in memset::num#3 = $800
Adding number conversion cast (unumber) 0 in main::$22 = 0 != canvas_show_flag
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0181_$2 in main::toD0181_$2 = > main::toD0181_$1
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (unumber) $3fff in main::toD0182_$0 = main::toD0182_$7 & $3fff
Adding number conversion cast (unumber) main::toD0182_$0 in main::toD0182_$0 = main::toD0182_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0182_$1 = main::toD0182_$0 * 4
Adding number conversion cast (unumber) main::toD0182_$1 in main::toD0182_$1 = main::toD0182_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0182_$2 in main::toD0182_$2 = > main::toD0182_$1
Adding number conversion cast (unumber) 4 in main::toD0182_$4 = main::toD0182_$3 / 4
Adding number conversion cast (unumber) main::toD0182_$4 in main::toD0182_$4 = main::toD0182_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0182_$5 = main::toD0182_$4 & $f
Adding number conversion cast (unumber) main::toD0182_$5 in main::toD0182_$5 = main::toD0182_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0182_$6 in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Adding number conversion cast (unumber) 1 in canvas_show_flag = 1
Adding number conversion cast (unumber) $7f in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $7f
Adding number conversion cast (unumber) BORDER_YPOS_BOTTOM-8 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8
Adding number conversion cast (unumber) 8 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = ((unumber)) BORDER_YPOS_BOTTOM-8
Adding number conversion cast (unumber) $3fff in irq_bottom_1::toD0181_$0 = irq_bottom_1::toD0181_$7 & $3fff
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$0 in irq_bottom_1::toD0181_$0 = irq_bottom_1::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in irq_bottom_1::toD0181_$1 = irq_bottom_1::toD0181_$0 * 4
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$1 in irq_bottom_1::toD0181_$1 = irq_bottom_1::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$2 in irq_bottom_1::toD0181_$2 = > irq_bottom_1::toD0181_$1
Adding number conversion cast (unumber) 4 in irq_bottom_1::toD0181_$4 = irq_bottom_1::toD0181_$3 / 4
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$4 in irq_bottom_1::toD0181_$4 = irq_bottom_1::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in irq_bottom_1::toD0181_$5 = irq_bottom_1::toD0181_$4 & $f
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$5 in irq_bottom_1::toD0181_$5 = irq_bottom_1::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) irq_bottom_1::toD0181_$6 in irq_bottom_1::toD0181_$6 = irq_bottom_1::toD0181_$2 | irq_bottom_1::toD0181_$5
Adding number conversion cast (unumber) 0 in irq_bottom_2::$3 = 0 != irq_bottom_2::$0
Adding number conversion cast (unumber) $3fff in irq_bottom_2::toD0181_$0 = irq_bottom_2::toD0181_$7 & $3fff
Adding number conversion cast (unumber) irq_bottom_2::toD0181_$0 in irq_bottom_2::toD0181_$0 = irq_bottom_2::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in irq_bottom_2::toD0181_$1 = irq_bottom_2::toD0181_$0 * 4
Adding number conversion cast (unumber) irq_bottom_2::toD0181_$1 in irq_bottom_2::toD0181_$1 = irq_bottom_2::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) irq_bottom_2::toD0181_$2 in irq_bottom_2::toD0181_$2 = > irq_bottom_2::toD0181_$1
Adding number conversion cast (unumber) 4 in irq_bottom_2::toD0181_$4 = irq_bottom_2::toD0181_$3 / 4
Adding number conversion cast (unumber) irq_bottom_2::toD0181_$4 in irq_bottom_2::toD0181_$4 = irq_bottom_2::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in irq_bottom_2::toD0181_$5 = irq_bottom_2::toD0181_$4 & $f
Adding number conversion cast (unumber) irq_bottom_2::toD0181_$5 in irq_bottom_2::toD0181_$5 = irq_bottom_2::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) irq_bottom_2::toD0181_$6 in irq_bottom_2::toD0181_$6 = irq_bottom_2::toD0181_$2 | irq_bottom_2::toD0181_$5
Adding number conversion cast (unumber) 0 in canvas_show_flag = 0
Adding number conversion cast (unumber) BORDER_YPOS_BOTTOM-8 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8
Adding number conversion cast (unumber) 8 in *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = ((unumber)) BORDER_YPOS_BOTTOM-8
Adding number conversion cast (unumber) $ff in line::$8 = line::sx#1 == $ff
Adding number conversion cast (unumber) 2 in line::$26 = line::dx#2 / 2
Adding number conversion cast (unumber) line::$26 in line::$26 = line::dx#2 / (unumber)2
Adding number conversion cast (unumber) 8 in line::plot1_$0 = line::plot1_x#1 / 8
Adding number conversion cast (unumber) line::plot1_$0 in line::plot1_$0 = line::plot1_x#1 / (unumber)8
Adding number conversion cast (unumber) line::plot1_$2 in line::plot1_$2 = line::plot1_$0 * SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in line::plot1_$1 = line::plot1_x#1 & 7
Adding number conversion cast (unumber) line::plot1_$1 in line::plot1_$1 = line::plot1_x#1 & (unumber)7
Adding number conversion cast (unumber) 0 in line::$20 = line::dx#3 == 0
Adding number conversion cast (unumber) 2 in line::$12 = line::dy#2 / 2
Adding number conversion cast (unumber) line::$12 in line::$12 = line::dy#2 / (unumber)2
Adding number conversion cast (unumber) 8 in line::plot2_$0 = line::plot2_x#1 / 8
Adding number conversion cast (unumber) line::plot2_$0 in line::plot2_$0 = line::plot2_x#1 / (unumber)8
Adding number conversion cast (unumber) line::plot2_$2 in line::plot2_$2 = line::plot2_$0 * SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in line::plot2_$1 = line::plot2_x#1 & 7
Adding number conversion cast (unumber) line::plot2_$1 in line::plot2_$1 = line::plot2_x#1 & (unumber)7
Adding number conversion cast (unumber) 8 in line::plot3_$0 = line::plot3_x#1 / 8
Adding number conversion cast (unumber) line::plot3_$0 in line::plot3_$0 = line::plot3_x#1 / (unumber)8
Adding number conversion cast (unumber) line::plot3_$2 in line::plot3_$2 = line::plot3_$0 * SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in line::plot3_$1 = line::plot3_x#1 & 7
Adding number conversion cast (unumber) line::plot3_$1 in line::plot3_$1 = line::plot3_x#1 & (unumber)7
Adding number conversion cast (unumber) 2 in line::$22 = line::dy#5 / 2
Adding number conversion cast (unumber) line::$22 in line::$22 = line::dy#5 / (unumber)2
Adding number conversion cast (unumber) 8 in line::plot4_$0 = line::plot4_x#1 / 8
Adding number conversion cast (unumber) line::plot4_$0 in line::plot4_$0 = line::plot4_x#1 / (unumber)8
Adding number conversion cast (unumber) line::plot4_$2 in line::plot4_$2 = line::plot4_$0 * SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in line::plot4_$1 = line::plot4_x#1 & 7
Adding number conversion cast (unumber) line::plot4_$1 in line::plot4_$1 = line::plot4_x#1 & (unumber)7
Adding number conversion cast (unumber) 8 in line::plot5_$0 = line::plot5_x#1 / 8
Adding number conversion cast (unumber) line::plot5_$0 in line::plot5_$0 = line::plot5_x#1 / (unumber)8
Adding number conversion cast (unumber) line::plot5_$2 in line::plot5_$2 = line::plot5_$0 * SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in line::plot5_$1 = line::plot5_x#1 & 7
Adding number conversion cast (unumber) line::plot5_$1 in line::plot5_$1 = line::plot5_x#1 & (unumber)7
Adding number conversion cast (unumber) 8 in line::plot6_$0 = line::plot6_x#1 / 8
Adding number conversion cast (unumber) line::plot6_$0 in line::plot6_$0 = line::plot6_x#1 / (unumber)8
Adding number conversion cast (unumber) line::plot6_$2 in line::plot6_$2 = line::plot6_$0 * SIZEOF_POINTER
Adding number conversion cast (unumber) 7 in line::plot6_$1 = line::plot6_x#1 & 7
Adding number conversion cast (unumber) line::plot6_$1 in line::plot6_$1 = line::plot6_x#1 & (unumber)7
Adding number conversion cast (unumber) $10 in eorfill::$0 = eorfill::x#2 < $10
Adding number conversion cast (unumber) 0 in eorfill::eor#0 = eorfill::line_column#2[0]
Adding number conversion cast (unumber) 0 in eorfill::fill_column#2[0] = eorfill::eor#0
Adding number conversion cast (unumber) $10*8 in eorfill::$1 = eorfill::y#2 < $10*8
Adding number conversion cast (unumber) $10*8 in eorfill::line_column#1 = eorfill::line_column#4 + $10*8
Adding number conversion cast (unumber) $10*8 in eorfill::fill_column#1 = eorfill::fill_column#4 + $10*8
Adding number conversion cast (unumber) $80 in abs_u8::$0 = abs_u8::u#2 & $80
Adding number conversion cast (unumber) abs_u8::$0 in abs_u8::$0 = abs_u8::u#2 & (unumber)$80
Adding number conversion cast (unumber) 0 in abs_u8::$2 = 0 != abs_u8::$0
Adding number conversion cast (unumber) $80 in sgn_u8::$0 = sgn_u8::u#2 & $80
Adding number conversion cast (unumber) sgn_u8::$0 in sgn_u8::$0 = sgn_u8::u#2 & (unumber)$80
Adding number conversion cast (unumber) 0 in sgn_u8::$1 = 0 != sgn_u8::$0
Adding number conversion cast (unumber) -1 in sgn_u8::return#2 = -1
Adding number conversion cast (unumber) 1 in sgn_u8::return#3 = 1
Adding number conversion cast (unumber) $3fff in __start::__init1_toD0181_$0 = __start::__init1_toD0181_$7 & $3fff
Adding number conversion cast (unumber) __start::__init1_toD0181_$0 in __start::__init1_toD0181_$0 = __start::__init1_toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in __start::__init1_toD0181_$1 = __start::__init1_toD0181_$0 * 4
Adding number conversion cast (unumber) __start::__init1_toD0181_$1 in __start::__init1_toD0181_$1 = __start::__init1_toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) __start::__init1_toD0181_$2 in __start::__init1_toD0181_$2 = > __start::__init1_toD0181_$1
Adding number conversion cast (unumber) 4 in __start::__init1_toD0181_$4 = __start::__init1_toD0181_$3 / 4
Adding number conversion cast (unumber) __start::__init1_toD0181_$4 in __start::__init1_toD0181_$4 = __start::__init1_toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in __start::__init1_toD0181_$5 = __start::__init1_toD0181_$4 & $f
Adding number conversion cast (unumber) __start::__init1_toD0181_$5 in __start::__init1_toD0181_$5 = __start::__init1_toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) __start::__init1_toD0181_$6 in __start::__init1_toD0181_$6 = __start::__init1_toD0181_$2 | __start::__init1_toD0181_$5
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memset::dst#0 = (byte*)memset::str#5
Inlining cast *CIA2_TIMER_AB = (unumber)$ffffffff
Inlining cast gotoxy::y#0 = (unumber)0
Inlining cast gotoxy::x#0 = (unumber)0
Inlining cast gotoxy::x#1 = (unumber)0
Inlining cast conio_c64_init::line#1 = (unumber)$19-1
Inlining cast *kbhit::CIA1_PORT_A = (unumber)0
Inlining cast memset::num#0 = (unumber)$28*$19
Inlining cast memset::c#1 = (unumber)0
Inlining cast memset::num#1 = (unumber)$28*$19
Inlining cast memset::num#2 = (unumber)$28*$19
Inlining cast memset::c#3 = (unumber)0
Inlining cast memset::num#3 = (unumber)$800
Inlining cast main::canvas#1 = (byte*)main::$20
Inlining cast canvas_show_flag = (unumber)1
Inlining cast *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = (unumber)BORDER_YPOS_BOTTOM-(unumber)8
Inlining cast canvas_show_flag = (unumber)0
Inlining cast *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = (unumber)BORDER_YPOS_BOTTOM-(unumber)8
Inlining cast sgn_u8::return#2 = (unumber)-1
Inlining cast sgn_u8::return#3 = (unumber)1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct MOS6569_VICII*) 53248
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (dword*) 56580
Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 214
Simplifying constant pointer cast (byte*) 56320
Simplifying constant pointer cast (byte*) 56321
Simplifying constant pointer cast (byte*) 8192
Simplifying constant pointer cast (byte*) 12288
Simplifying constant pointer cast (byte*) 14336
Simplifying constant pointer cast (byte*) 11264
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 4096
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast $ffffffff
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $aa
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $800
Simplifying constant integer cast 0
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 1
Simplifying constant integer cast $7f
Simplifying constant integer cast BORDER_YPOS_BOTTOM-(unumber)8
Simplifying constant integer cast 8
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast BORDER_YPOS_BOTTOM-(unumber)8
Simplifying constant integer cast 8
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 2
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 7
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast 1
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type $40
Finalized unsigned number type 0
Finalized unsigned number type $ffffffff
Finalized unsigned number type $ffffffff
Finalized unsigned number type $19
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $19
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $c
Finalized unsigned number type $c
Finalized unsigned number type $10
Finalized unsigned number type $f
Finalized unsigned number type $aa
Finalized unsigned number type $10
Finalized unsigned number type $10
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $800
Finalized unsigned number type 0
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type 1
Finalized unsigned number type $7f
Finalized unsigned number type 8
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type 0
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type 0
Finalized unsigned number type 8
Finalized unsigned number type $ff
Finalized unsigned number type 2
Finalized unsigned number type 8
Finalized unsigned number type 7
Finalized unsigned number type 0
Finalized unsigned number type 2
Finalized unsigned number type 8
Finalized unsigned number type 7
Finalized unsigned number type 8
Finalized unsigned number type 7
Finalized unsigned number type 2
Finalized unsigned number type 8
Finalized unsigned number type 7
Finalized unsigned number type 8
Finalized unsigned number type 7
Finalized unsigned number type 8
Finalized unsigned number type 7
Finalized unsigned number type $10
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $80
Finalized unsigned number type 0
Finalized unsigned number type $80
Finalized unsigned number type 0
Finalized unsigned number type -1
Finalized unsigned number type 1
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to dword in clock::$0 = $ffffffff - *CIA2_TIMER_AB
Inferred type updated to byte in main::$5 = main::p0_idx#0 + $f
Inferred type updated to byte in main::$6 = main::p0_idx#0 + $aa
Inferred type updated to word in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to word in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to byte in main::toD0181_$2 = > main::toD0181_$1
Inferred type updated to byte in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to byte in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to byte in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to word in main::toD0182_$0 = main::toD0182_$7 & $3fff
Inferred type updated to word in main::toD0182_$1 = main::toD0182_$0 * 4
Inferred type updated to byte in main::toD0182_$2 = > main::toD0182_$1
Inferred type updated to byte in main::toD0182_$4 = main::toD0182_$3 / 4
Inferred type updated to byte in main::toD0182_$5 = main::toD0182_$4 & $f
Inferred type updated to byte in main::toD0182_$6 = main::toD0182_$2 | main::toD0182_$5
Inferred type updated to word in irq_bottom_1::toD0181_$0 = irq_bottom_1::toD0181_$7 & $3fff
Inferred type updated to word in irq_bottom_1::toD0181_$1 = irq_bottom_1::toD0181_$0 * 4
Inferred type updated to byte in irq_bottom_1::toD0181_$2 = > irq_bottom_1::toD0181_$1
Inferred type updated to byte in irq_bottom_1::toD0181_$4 = irq_bottom_1::toD0181_$3 / 4
Inferred type updated to byte in irq_bottom_1::toD0181_$5 = irq_bottom_1::toD0181_$4 & $f
Inferred type updated to byte in irq_bottom_1::toD0181_$6 = irq_bottom_1::toD0181_$2 | irq_bottom_1::toD0181_$5
Inferred type updated to word in irq_bottom_2::toD0181_$0 = irq_bottom_2::toD0181_$7 & $3fff
Inferred type updated to word in irq_bottom_2::toD0181_$1 = irq_bottom_2::toD0181_$0 * 4
Inferred type updated to byte in irq_bottom_2::toD0181_$2 = > irq_bottom_2::toD0181_$1
Inferred type updated to byte in irq_bottom_2::toD0181_$4 = irq_bottom_2::toD0181_$3 / 4
Inferred type updated to byte in irq_bottom_2::toD0181_$5 = irq_bottom_2::toD0181_$4 & $f
Inferred type updated to byte in irq_bottom_2::toD0181_$6 = irq_bottom_2::toD0181_$2 | irq_bottom_2::toD0181_$5
Inferred type updated to byte in line::$26 = line::dx#2 / 2
Inferred type updated to byte in line::plot1_$0 = line::plot1_x#1 / 8
Inferred type updated to byte in line::plot1_$2 = line::plot1_$0 * SIZEOF_POINTER
Inferred type updated to byte in line::plot1_$1 = line::plot1_x#1 & 7
Inferred type updated to byte in line::$12 = line::dy#2 / 2
Inferred type updated to byte in line::plot2_$0 = line::plot2_x#1 / 8
Inferred type updated to byte in line::plot2_$2 = line::plot2_$0 * SIZEOF_POINTER
Inferred type updated to byte in line::plot2_$1 = line::plot2_x#1 & 7
Inferred type updated to byte in line::plot3_$0 = line::plot3_x#1 / 8
Inferred type updated to byte in line::plot3_$2 = line::plot3_$0 * SIZEOF_POINTER
Inferred type updated to byte in line::plot3_$1 = line::plot3_x#1 & 7
Inferred type updated to byte in line::$22 = line::dy#5 / 2
Inferred type updated to byte in line::plot4_$0 = line::plot4_x#1 / 8
Inferred type updated to byte in line::plot4_$2 = line::plot4_$0 * SIZEOF_POINTER
Inferred type updated to byte in line::plot4_$1 = line::plot4_x#1 & 7
Inferred type updated to byte in line::plot5_$0 = line::plot5_x#1 / 8
Inferred type updated to byte in line::plot5_$2 = line::plot5_$0 * SIZEOF_POINTER
Inferred type updated to byte in line::plot5_$1 = line::plot5_x#1 & 7
Inferred type updated to byte in line::plot6_$0 = line::plot6_x#1 / 8
Inferred type updated to byte in line::plot6_$2 = line::plot6_$0 * SIZEOF_POINTER
Inferred type updated to byte in line::plot6_$1 = line::plot6_x#1 & 7
Inferred type updated to byte in abs_u8::$0 = abs_u8::u#2 & $80
Inferred type updated to byte in sgn_u8::$0 = sgn_u8::u#2 & $80
Inferred type updated to word in __start::__init1_toD0181_$0 = __start::__init1_toD0181_$7 & $3fff
Inferred type updated to word in __start::__init1_toD0181_$1 = __start::__init1_toD0181_$0 * 4
Inferred type updated to byte in __start::__init1_toD0181_$2 = > __start::__init1_toD0181_$1
Inferred type updated to byte in __start::__init1_toD0181_$4 = __start::__init1_toD0181_$3 / 4
Inferred type updated to byte in __start::__init1_toD0181_$5 = __start::__init1_toD0181_$4 & $f
Inferred type updated to byte in __start::__init1_toD0181_$6 = __start::__init1_toD0181_$2 | __start::__init1_toD0181_$5
Inversing boolean not [2] memset::$1 = memset::num#4 <= 0 from [1] memset::$0 = memset::num#4 > 0
Inversing boolean not [33] gotoxy::$1 = gotoxy::y#2 <= $19 from [32] gotoxy::$0 = gotoxy::y#2 > $19
Inversing boolean not [37] gotoxy::$3 = gotoxy::x#2 < $28 from [36] gotoxy::$2 = gotoxy::x#2 >= $28
Inversing boolean not [52] conio_c64_init::$1 = conio_c64_init::line#0 < $19 from [51] conio_c64_init::$0 = conio_c64_init::line#0 >= $19
Inversing boolean not [243] irq_bottom_2::$1 = 0 == irq_bottom_2::$0 from [242] irq_bottom_2::$3 = 0 != irq_bottom_2::$0
Inversing boolean not [300] line::$9 = line::sx#1 != $ff from [299] line::$8 = line::sx#1 == $ff
Inversing boolean not [325] line::$21 = line::dx#3 != 0 from [324] line::$20 = line::dx#3 == 0
Inversing boolean not [334] line::$14 = line::e#1 <= line::dy#3 from [333] line::$13 = line::e#1 > line::dy#3
Inversing boolean not [397] line::$29 = line::e2#1 <= line::dx#6 from [396] line::$28 = line::e2#1 > line::dx#6
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)__start::__init1_toD0181_return#0 = __start::__init1_toD0181_$6 __start::__init1_toD0181_return#2 __start::__init1_toD0181_return#1 __start::__init1_toD0181_return#3 __start::__init1_$0 canvas_show_memory 
Alias memset::return#0 = memset::str#4 memset::return#6 memset::return#1 
Alias memset::str#5 = memset::str#6 
Alias memset::num#4 = memset::num#5 
Alias memset::c#6 = memset::c#7 
Alias memset::end#0 = memset::$2 
Alias memset::c#4 = memset::c#5 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#7 = memset::str#8 
Alias clock::return#0 = clock::$0 clock::return#3 clock::return#1 
Alias gotoxy::x#3 = gotoxy::x#4 
Alias textcolor::return#0 = textcolor::old#0 textcolor::return#3 textcolor::return#1 
Alias kbhit::return#0 = kbhit::$0 kbhit::return#3 kbhit::return#1 
Alias main::y#2 = main::y#3 main::c#0 
Alias main::cols#5 = main::cols#6 
Alias main::screen#5 = main::screen#6 
Alias main::p1_idx#0 = main::$5 
Alias main::p2_idx#0 = main::$6 
Alias main::cols#2 = main::cols#4 main::cols#3 
Alias main::x#2 = main::x#3 
Alias main::c#2 = main::c#3 
Alias main::screen#2 = main::screen#4 main::screen#3 
Alias main::y#4 = main::y#6 main::y#5 
Alias main::p0_idx#2 = main::p0_idx#6 main::p0_idx#8 main::p0_idx#4 main::p0_idx#7 main::p0_idx#5 main::p0_idx#3 
Alias main::p1_idx#2 = main::p1_idx#6 main::p1_idx#8 main::p1_idx#4 main::p1_idx#7 main::p1_idx#5 main::p1_idx#3 
Alias main::p2_idx#2 = main::p2_idx#7 main::p2_idx#8 main::p2_idx#6 main::p2_idx#4 main::p2_idx#5 main::p2_idx#3 
Alias main::canvas#10 = main::canvas#11 main::canvas#9 main::canvas#8 main::canvas#7 main::canvas#6 main::canvas#5 
Alias main::x1#0 = main::x1#1 
Alias main::y1#0 = main::y1#1 
Alias main::x0#0 = main::x0#2 main::x0#1 
Alias main::y0#0 = main::y0#2 main::y0#1 
Alias main::x2#0 = main::x2#1 
Alias main::y2#0 = main::y2#1 
Alias main::canvas#2 = main::canvas#4 main::canvas#3 
Alias main::p0_idx#10 = main::p0_idx#17 main::p0_idx#18 main::p0_idx#16 main::p0_idx#15 main::p0_idx#14 main::p0_idx#13 main::p0_idx#12 main::p0_idx#11 main::p0_idx#9 
Alias main::p1_idx#10 = main::p1_idx#17 main::p1_idx#18 main::p1_idx#16 main::p1_idx#15 main::p1_idx#14 main::p1_idx#13 main::p1_idx#12 main::p1_idx#11 main::p1_idx#9 
Alias main::p2_idx#10 = main::p2_idx#17 main::p2_idx#18 main::p2_idx#16 main::p2_idx#15 main::p2_idx#14 main::p2_idx#13 main::p2_idx#12 main::p2_idx#11 main::p2_idx#9 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::canvas#1 = main::canvas#18 main::canvas#17 main::canvas#16 main::canvas#15 main::canvas#14 main::canvas#13 main::canvas#12 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$15 
Alias main::toD0182_screen#0 = main::toD0182_screen#1 
Alias main::toD0182_gfx#0 = main::toD0182_gfx#1 
Alias main::toD0182_return#0 = main::toD0182_$6 main::toD0182_return#2 main::toD0182_return#1 main::toD0182_return#3 main::$16 
Alias irq_bottom_1::toD0181_screen#0 = irq_bottom_1::toD0181_screen#1 
Alias irq_bottom_1::toD0181_gfx#0 = irq_bottom_1::toD0181_gfx#1 
Alias irq_bottom_1::toD0181_return#0 = irq_bottom_1::toD0181_$6 irq_bottom_1::toD0181_return#2 irq_bottom_1::toD0181_return#1 irq_bottom_1::toD0181_return#3 irq_bottom_1::$0 
Alias kbhit::return#2 = kbhit::return#4 
Alias irq_bottom_2::toD0181_screen#0 = irq_bottom_2::toD0181_screen#1 
Alias irq_bottom_2::toD0181_gfx#0 = irq_bottom_2::toD0181_gfx#1 
Alias irq_bottom_2::toD0181_return#0 = irq_bottom_2::toD0181_$6 irq_bottom_2::toD0181_return#2 irq_bottom_2::toD0181_return#1 irq_bottom_2::toD0181_return#3 irq_bottom_2::$2 
Alias line::x#0 = line::x1#3 line::x1#5 line::x#32 line::x1#4 line::x#31 line::x#29 line::x#26 line::x#27 
Alias line::y#0 = line::y1#3 line::y1#4 line::y#33 line::y1#6 line::y#31 line::y1#5 line::y#25 line::y#16 line::y#5 
Alias abs_u8::u#0 = line::$0 
Alias abs_u8::return#0 = abs_u8::return#5 
Alias line::y2#10 = line::y2#4 line::y2#8 line::y2#9 line::y2#5 line::y2#6 
Alias line::x2#19 = line::x2#7 line::x2#3 line::x2#4 line::x2#22 line::x2#20 
Alias line::dx#0 = line::$1 line::dx#22 line::dx#16 line::dx#8 line::dx#9 
Alias abs_u8::u#1 = line::$2 
Alias abs_u8::return#1 = abs_u8::return#6 
Alias line::dy#0 = line::$3 line::dy#17 line::dy#9 line::dy#10 
Alias sgn_u8::u#0 = line::$4 
Alias sgn_u8::return#0 = sgn_u8::return#5 
Alias line::sx#0 = line::$5 line::sx#1 line::sx#10 
Alias sgn_u8::u#1 = line::$6 
Alias sgn_u8::return#1 = sgn_u8::return#6 
Alias line::sy#0 = line::$7 line::sy#12 
Alias line::dx#1 = line::dx#2 line::dx#18 line::dx#17 line::dx#10 line::dx#3 line::dx#11 line::dx#13 
Alias line::x#14 = line::x#20 line::x#23 line::x#4 line::plot1_x#0 line::plot1_x#1 line::x#30 line::x#28 line::x#24 line::x#25 
Alias line::y#17 = line::y#23 line::y#26 line::y#6 line::plot1_y#0 line::plot1_y#1 line::y#32 line::y#28 line::y#18 line::y#20 
Alias line::sx#12 = line::sx#19 line::sx#6 line::sx#2 line::sx#24 line::sx#20 line::sx#16 line::sx#21 
Alias line::dy#1 = line::dy#24 line::dy#11 line::dy#22 line::dy#18 line::dy#14 line::dy#2 line::dy#5 
Alias line::x2#15 = line::x2#16 line::x2#17 line::x2#24 line::x2#23 line::x2#21 line::x2#18 
Alias line::sy#1 = line::sy#23 line::sy#6 line::sy#21 line::sy#17 line::sy#14 line::sy#7 line::sy#9 
Alias line::e2#0 = line::$26 
Alias line::y2#13 = line::y2#15 line::y2#17 
Alias line::e#0 = line::$12 
Alias line::y#19 = line::y#9 line::y#2 line::y#27 
Alias line::sy#13 = line::sy#3 line::sy#2 line::sy#18 
Alias line::x#15 = line::x#5 line::plot2_x#0 line::plot2_x#1 line::x#16 line::x#6 
Alias line::sx#11 = line::sx#15 line::sx#7 line::sx#3 
Alias line::e#1 = line::e#7 line::e#6 line::e#4 
Alias line::dy#13 = line::dy#19 line::dy#3 line::dy#4 
Alias line::y2#11 = line::y2#16 line::y2#12 line::y2#14 
Alias line::dx#19 = line::dx#26 line::dx#4 line::dx#23 
Alias line::plot2_y#0 = line::$15 line::plot2_y#1 
Alias line::x#17 = line::x#7 line::plot3_x#0 line::plot3_x#1 
Alias line::y#10 = line::y#8 line::plot3_y#0 line::plot3_y#1 
Alias line::e1#0 = line::$22 
Alias line::x#18 = line::x#8 
Alias line::sx#13 = line::sx#4 line::sx#8 line::sx#17 
Alias line::e1#1 = line::e1#4 
Alias line::dy#15 = line::dy#7 line::dy#6 line::dy#20 
Alias line::y#12 = line::y#3 line::plot4_y#0 line::plot4_y#1 line::y#29 line::y#21 
Alias line::x2#11 = line::x2#13 line::x2#8 line::x2#5 
Alias line::sy#10 = line::sy#19 line::sy#4 line::sy#15 
Alias line::dx#14 = line::dx#24 line::dx#5 line::dx#20 
Alias line::x#19 = line::plot4_x#0 line::x#2 line::plot4_x#1 line::x#9 
Alias line::e1#2 = line::e1#6 line::e1#5 
Alias line::x#10 = line::plot5_x#0 line::plot5_x#1 line::x#21 line::x#11 
Alias line::y#13 = line::plot5_y#0 line::plot5_y#1 line::y#30 line::y#24 line::y#14 
Alias line::sx#14 = line::sx#9 line::sx#5 line::sx#23 
Alias line::e2#3 = line::e2#5 line::e2#6 
Alias line::dy#16 = line::dy#21 line::dy#8 line::dy#25 
Alias line::dx#15 = line::dx#21 line::dx#6 line::dx#7 
Alias line::x2#10 = line::x2#12 line::x2#14 line::x2#9 
Alias line::sy#11 = line::sy#16 line::sy#20 line::sy#5 
Alias line::e2#1 = line::e2#4 
Alias line::x#22 = line::x#3 
Alias line::x#12 = line::x#13 line::plot6_x#0 line::plot6_x#1 
Alias line::y#15 = line::y#22 line::plot6_y#0 line::plot6_y#1 
Alias eorfill::line_column#0 = eorfill::line_buffer#1 
Alias eorfill::fill_column#0 = eorfill::canvas#1 
Alias eorfill::line_column#2 = eorfill::line_column#5 
Alias eorfill::fill_column#2 = eorfill::fill_column#5 
Alias eorfill::x#2 = eorfill::x#5 
Alias eorfill::eor#2 = eorfill::eor#3 
Alias eorfill::line_column#3 = eorfill::line_column#6 eorfill::line_column#4 
Alias eorfill::y#2 = eorfill::y#3 
Alias eorfill::fill_column#3 = eorfill::fill_column#6 eorfill::fill_column#4 
Alias eorfill::x#3 = eorfill::x#6 eorfill::x#4 
Alias abs_u8::u#2 = abs_u8::u#3 abs_u8::u#4 abs_u8::return#3 
Alias abs_u8::return#2 = abs_u8::$1 
Alias abs_u8::return#4 = abs_u8::return#7 
Alias sgn_u8::return#4 = sgn_u8::return#7 
Alias __start::__init1_toD0181_screen#0 = __start::__init1_toD0181_screen#1 
Alias __start::__init1_toD0181_gfx#0 = __start::__init1_toD0181_gfx#1 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)__start::__init1_toD0181_return#0 = __start::__init1_toD0181_$6 __start::__init1_toD0181_return#2 __start::__init1_toD0181_return#1 __start::__init1_toD0181_return#3 __start::__init1_$0 canvas_show_memory 
Alias gotoxy::x#2 = gotoxy::x#3 
Alias line::dx#0 = line::dx#1 
Alias line::dy#0 = line::dy#1 
Alias line::sx#0 = line::sx#12 
Alias line::sy#0 = line::sy#1 
Alias line::x#0 = line::x#14 
Alias line::x2#15 = line::x2#19 
Alias line::y#10 = line::y#19 
Alias line::y2#11 = line::y2#7 
Alias line::sy#13 = line::sy#8 
Alias line::dx#12 = line::dx#19 
Alias line::dy#12 = line::dy#13 
Alias line::sx#11 = line::sx#22 
Alias line::x#12 = line::x#22 
Alias line::x2#10 = line::x2#6 
Alias line::sx#14 = line::sx#18 
Alias line::dy#16 = line::dy#23 
Alias line::dx#15 = line::dx#25 
Alias line::sy#11 = line::sy#22 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)__start::__init1_toD0181_return#0 = __start::__init1_toD0181_$6 __start::__init1_toD0181_return#2 __start::__init1_toD0181_return#1 __start::__init1_toD0181_return#3 __start::__init1_$0 canvas_show_memory 
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#7 memset::str#5
Identical Phi Values memset::c#4 memset::c#6
Identical Phi Values gotoxy::y#2 gotoxy::y#1
Identical Phi Values gotoxy::x#2 gotoxy::x#1
Identical Phi Values textcolor::color#1 textcolor::color#0
Identical Phi Values main::cols#2 main::cols#5
Identical Phi Values main::screen#2 main::screen#5
Identical Phi Values main::y#4 main::y#2
Identical Phi Values main::canvas#2 main::canvas#10
Identical Phi Values main::p0_idx#10 main::p0_idx#1
Identical Phi Values main::p1_idx#10 main::p1_idx#1
Identical Phi Values main::p2_idx#10 main::p2_idx#1
Identical Phi Values line::sy#13 line::sy#0
Identical Phi Values line::dx#12 line::dx#0
Identical Phi Values line::dy#12 line::dy#0
Identical Phi Values line::y2#11 line::y2#13
Identical Phi Values line::sx#11 line::sx#0
Identical Phi Values line::sy#10 line::sy#0
Identical Phi Values line::dx#14 line::dx#0
Identical Phi Values line::dy#15 line::dy#0
Identical Phi Values line::sx#13 line::sx#0
Identical Phi Values line::x2#11 line::x2#15
Identical Phi Values line::sx#14 line::sx#0
Identical Phi Values line::dy#16 line::dy#0
Identical Phi Values line::dx#15 line::dx#0
Identical Phi Values line::x2#10 line::x2#15
Identical Phi Values line::sy#11 line::sy#0
Identical Phi Values eorfill::line_column#0 eorfill::line_buffer#0
Identical Phi Values eorfill::fill_column#0 eorfill::canvas#0
Identical Phi Values eorfill::line_column#3 eorfill::line_column#2
Identical Phi Values eorfill::fill_column#3 eorfill::fill_column#2
Identical Phi Values eorfill::x#3 eorfill::x#2
Identical Phi Values __start::__init1_toD0181_return#2 __start::__init1_toD0181_return#0
Identical Phi Values __start::__init1_toD0181_return#3 __start::__init1_toD0181_return#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#5
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memset::$1 [2] if(memset::num#4<=0) goto memset::@1
Simple Condition memset::$3 [9] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition gotoxy::$1 [23] if(gotoxy::y#1<=$19) goto gotoxy::@1
Simple Condition gotoxy::$3 [25] if(gotoxy::x#1<$28) goto gotoxy::@return
Simple Condition conio_c64_init::$1 [35] if(conio_c64_init::line#0<$19) goto conio_c64_init::@1
Simple Condition main::$7 [65] if(main::y#2<$10) goto main::@2
Simple Condition main::$8 [79] if(main::x#2<$10) goto main::@5
Simple Condition main::$21 [89] if(0!=1) goto main::@8
Simple Condition main::$22 [126] if(0!=canvas_show_flag) goto main::@9
Simple Condition irq_bottom_2::$1 [188] if(0==irq_bottom_2::$0) goto irq_bottom_2::@1
Simple Condition line::$9 [224] if(line::sx#0!=$ff) goto line::@1
Simple Condition line::$10 [227] if(line::dx#0>line::dy#0) goto line::@2
Simple Condition line::$11 [232] if(line::sx#0==line::sy#0) goto line::@6
Simple Condition line::$21 [239] if(line::dx#0!=0) goto line::@11
Simple Condition line::$14 [245] if(line::e#1<=line::dy#0) goto line::@8
Simple Condition line::$17 [248] if(line::y#10!=line::y2#13) goto line::@7
Simple Condition line::$23 [268] if(line::e1#1<=line::dy#0) goto line::@12
Simple Condition line::$25 [277] if(line::x#19!=line::x2#15) goto line::@12
Simple Condition line::$29 [287] if(line::e2#1<=line::dx#0) goto line::@15
Simple Condition line::$30 [290] if(line::x#12!=line::x2#15) goto line::@14
Simple Condition eorfill::$0 [302] if(eorfill::x#2<$10) goto eorfill::@2
Simple Condition eorfill::$1 [308] if(eorfill::y#2<(byte)$10*8) goto eorfill::@4
Simple Condition abs_u8::$2 [319] if(0!=abs_u8::$0) goto abs_u8::@1
Simple Condition sgn_u8::$1 [326] if(0!=sgn_u8::$0) goto sgn_u8::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [40] conio_c64_init::line#1 = (unumber)$19-1
Constant right-side identified [47] memset::num#0 = (unumber)$28*$19
Constant right-side identified [52] memset::num#1 = (unumber)$28*$19
Constant right-side identified [57] memset::num#2 = (unumber)$28*$19
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant gotoxy::y#0 = 0
Constant gotoxy::x#0 = 0
Constant gotoxy::x#1 = 0
Constant conio_c64_init::line#1 = (unumber)$19-1
Constant memset::str#0 = (void*)CONSOLE
Constant memset::c#0 = ' '
Constant memset::num#0 = (unumber)$28*$19
Constant memset::str#1 = (void*)SCREEN
Constant memset::c#1 = 0
Constant memset::num#1 = (unumber)$28*$19
Constant memset::str#2 = (void*)COLS
Constant memset::c#2 = BLACK
Constant memset::num#2 = (unumber)$28*$19
Constant main::screen#0 = SCREEN+$c
Constant main::cols#0 = COLS+$c
Constant main::y#0 = 0
Constant main::x#0 = 0
Constant textcolor::color#0 = WHITE
Constant main::p0_idx#0 = $b5
Constant main::canvas#0 = CANVAS1
Constant memset::str#3 = (void*)LINE_BUFFER
Constant memset::c#3 = 0
Constant memset::num#3 = $800
Constant line::canvas#0 = LINE_BUFFER
Constant line::canvas#1 = LINE_BUFFER
Constant line::canvas#2 = LINE_BUFFER
Constant eorfill::line_buffer#0 = LINE_BUFFER
Constant main::toD0181_screen#0 = SCREEN
Constant main::toD0181_gfx#0 = CANVAS1
Constant main::toD0182_screen#0 = SCREEN
Constant main::toD0182_gfx#0 = CANVAS2
Constant irq_bottom_1::toD0181_screen#0 = CONSOLE
Constant irq_bottom_1::toD0181_gfx#0 = PETSCII
Constant irq_bottom_2::toD0181_screen#0 = SCREEN
Constant irq_bottom_2::toD0181_gfx#0 = LINE_BUFFER
Constant eorfill::x#0 = 0
Constant eorfill::y#0 = 1
Constant sgn_u8::return#2 = -1
Constant sgn_u8::return#3 = 1
Constant __start::__init1_toD0181_screen#0 = SCREEN
Constant __start::__init1_toD0181_gfx#0 = CANVAS2
Successful SSA optimization Pass2ConstantIdentification
Constant main::toD0181_$7 = (word)main::toD0181_screen#0
Constant main::toD0182_$7 = (word)main::toD0182_screen#0
Constant irq_bottom_1::toD0181_$7 = (word)irq_bottom_1::toD0181_screen#0
Constant irq_bottom_2::toD0181_$7 = (word)irq_bottom_2::toD0181_screen#0
Constant __start::__init1_toD0181_$7 = (word)__start::__init1_toD0181_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::toD0181_gfx#0 in [139] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant value identified (word)main::toD0182_gfx#0 in [149] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Constant value identified (word)irq_bottom_1::toD0181_gfx#0 in [174] irq_bottom_1::toD0181_$3 = > (word)irq_bottom_1::toD0181_gfx#0
Constant value identified (word)irq_bottom_2::toD0181_gfx#0 in [196] irq_bottom_2::toD0181_$3 = > (word)irq_bottom_2::toD0181_gfx#0
Constant value identified (word)__start::__init1_toD0181_gfx#0 in [338] __start::__init1_toD0181_$3 = > (word)__start::__init1_toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [25] if(gotoxy::x#1<$28) goto gotoxy::@return
if() condition always true - replacing block destination [89] if(0!=1) goto main::@8
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [23] if(gotoxy::y#1<=$19) goto gotoxy::@1
Simplifying constant evaluating to zero CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES in [15] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
Simplifying constant evaluating to zero CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS in [16] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_STOP|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero LINE_BUFFER in 
Simplifying expression containing zero CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A in [16] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = 0|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Simplifying expression containing zero CIA_TIMER_CONTROL_START in [18] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
Simplifying expression containing zero CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS in [19] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS|CIA_TIMER_CONTROL_A_COUNT_CYCLES
Simplifying expression containing zero eorfill::line_column#2 in [303] eorfill::eor#0 = eorfill::line_column#2[0]
Simplifying expression containing zero eorfill::fill_column#2 in [304] eorfill::fill_column#2[0] = eorfill::eor#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Simplifying expression containing zero CIA_TIMER_CONTROL_START in [19] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_CONTINUOUS
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing call to constructor procedure [349] call conio_c64_init 
Successful SSA optimization PassNEliminateUnusedConstructors
Eliminating unused variable memset::return#2 and assignment [33] memset::return#2 = memset::str#5
Eliminating unused variable memset::return#3 and assignment [35] memset::return#3 = memset::str#5
Eliminating unused variable memset::return#4 and assignment [37] memset::return#4 = memset::str#5
Eliminating unused variable textcolor::return#2 and assignment [44] textcolor::return#2 = textcolor::return#0
Eliminating unused variable memset::return#5 and assignment [59] memset::return#5 = memset::str#5
Eliminating unused variable clock::return#2 and assignment [109] clock::return#2 = clock::return#0
Eliminating unused constant CIA_TIMER_CONTROL_STOP
Eliminating unused constant CIA_TIMER_CONTROL_CONTINUOUS
Eliminating unused constant CIA_TIMER_CONTROL_A_COUNT_CYCLES
Eliminating unused constant gotoxy::y#0
Eliminating unused constant gotoxy::x#0
Eliminating unused constant gotoxy::x#1
Eliminating unused constant line::canvas#0
Eliminating unused constant line::canvas#1
Eliminating unused constant line::canvas#2
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable clock::return#0 and assignment [10] clock::return#0 = $ffffffff - *CIA2_TIMER_AB
Eliminating unused variable textcolor::return#0 and assignment [20] textcolor::return#0 = conio_textcolor
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable conio_textcolor and assignment [19] conio_textcolor = textcolor::color#0
Eliminating unused variable conio_textcolor(null) and assignment [249] conio_textcolor(null) = CONIO_TEXTCOLOR_DEFAULT
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant CONIO_TEXTCOLOR_DEFAULT
Eliminating unused constant textcolor::color#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant LIGHT_BLUE
Successful SSA optimization PassNEliminateUnusedVars
Eliminating variable conio_c64_init::line#0 from unused block conio_c64_init
Eliminating variable conio_c64_init::line#2 from unused block conio_c64_init::@1
Eliminating variable gotoxy::y#1 from unused block conio_c64_init::@1
Removing unused procedure gotoxy
Removing unused procedure block gotoxy
Removing unused procedure block gotoxy::@1
Removing unused procedure block gotoxy::@2
Removing unused procedure block gotoxy::@3
Removing unused procedure block gotoxy::@return
Removing unused procedure conio_c64_init
Removing unused procedure block conio_c64_init
Removing PHI-reference to removed block (conio_c64_init) in block conio_c64_init::@1
Removing unused procedure block conio_c64_init::@1
Removing unused procedure block conio_c64_init::@3
Removing unused procedure block conio_c64_init::@2
Removing unused procedure block conio_c64_init::@return
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing call to empty procedure [92] call clock 
Removing unused procedure clock
Removing unused procedure block clock
Removing unused procedure block clock::@return
Removing call to empty procedure [28] call textcolor 
Removing unused procedure textcolor
Removing unused procedure block textcolor
Removing unused procedure block textcolor::@return
Successful SSA optimization PassNEliminateEmptyProcedure
Alias candidate removed (volatile)__start::__init1_toD0181_return#0 = __start::__init1_toD0181_$6 __start::__init1_toD0181_return#1 __start::__init1_$0 canvas_show_memory 
Constant right-side identified [27] main::p1_idx#0 = main::p0_idx#0 + $f
Constant right-side identified [28] main::p2_idx#0 = main::p0_idx#0 + $aa
Constant right-side identified [72] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [75] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant right-side identified [79] main::toD0182_$0 = main::toD0182_$7 & $3fff
Constant right-side identified [82] main::toD0182_$3 = > (word)main::toD0182_gfx#0
Constant right-side identified [98] irq_bottom_1::toD0181_$0 = irq_bottom_1::toD0181_$7 & $3fff
Constant right-side identified [101] irq_bottom_1::toD0181_$3 = > (word)irq_bottom_1::toD0181_gfx#0
Constant right-side identified [116] irq_bottom_2::toD0181_$0 = irq_bottom_2::toD0181_$7 & $3fff
Constant right-side identified [119] irq_bottom_2::toD0181_$3 = > (word)irq_bottom_2::toD0181_gfx#0
Constant right-side identified [235] __start::__init1_toD0181_$0 = __start::__init1_toD0181_$7 & $3fff
Constant right-side identified [238] __start::__init1_toD0181_$3 = > (word)__start::__init1_toD0181_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::p1_idx#0 = main::p0_idx#0+$f
Constant main::p2_idx#0 = main::p0_idx#0+$aa
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant main::toD0182_$0 = main::toD0182_$7&$3fff
Constant main::toD0182_$3 = >(word)main::toD0182_gfx#0
Constant irq_bottom_1::toD0181_$0 = irq_bottom_1::toD0181_$7&$3fff
Constant irq_bottom_1::toD0181_$3 = >(word)irq_bottom_1::toD0181_gfx#0
Constant irq_bottom_2::toD0181_$0 = irq_bottom_2::toD0181_$7&$3fff
Constant irq_bottom_2::toD0181_$3 = >(word)irq_bottom_2::toD0181_gfx#0
Constant __start::__init1_toD0181_$0 = __start::__init1_toD0181_$7&$3fff
Constant __start::__init1_toD0181_$3 = >(word)__start::__init1_toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)__start::__init1_toD0181_return#0 = __start::__init1_toD0181_$6 __start::__init1_toD0181_return#1 __start::__init1_$0 canvas_show_memory 
Constant right-side identified [70] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [72] main::toD0181_$4 = main::toD0181_$3 / 4
Constant right-side identified [75] main::toD0182_$1 = main::toD0182_$0 * 4
Constant right-side identified [77] main::toD0182_$4 = main::toD0182_$3 / 4
Constant right-side identified [92] irq_bottom_1::toD0181_$1 = irq_bottom_1::toD0181_$0 * 4
Constant right-side identified [94] irq_bottom_1::toD0181_$4 = irq_bottom_1::toD0181_$3 / 4
Constant right-side identified [108] irq_bottom_2::toD0181_$1 = irq_bottom_2::toD0181_$0 * 4
Constant right-side identified [110] irq_bottom_2::toD0181_$4 = irq_bottom_2::toD0181_$3 / 4
Constant right-side identified [225] __start::__init1_toD0181_$1 = __start::__init1_toD0181_$0 * 4
Constant right-side identified [227] __start::__init1_toD0181_$4 = __start::__init1_toD0181_$3 / 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Constant main::toD0182_$1 = main::toD0182_$0*4
Constant main::toD0182_$4 = main::toD0182_$3/4
Constant irq_bottom_1::toD0181_$1 = irq_bottom_1::toD0181_$0*4
Constant irq_bottom_1::toD0181_$4 = irq_bottom_1::toD0181_$3/4
Constant irq_bottom_2::toD0181_$1 = irq_bottom_2::toD0181_$0*4
Constant irq_bottom_2::toD0181_$4 = irq_bottom_2::toD0181_$3/4
Constant __start::__init1_toD0181_$1 = __start::__init1_toD0181_$0*4
Constant __start::__init1_toD0181_$4 = __start::__init1_toD0181_$3/4
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)__start::__init1_toD0181_return#0 = __start::__init1_toD0181_$6 __start::__init1_toD0181_return#1 __start::__init1_$0 canvas_show_memory 
Constant right-side identified [70] main::toD0181_$2 = > main::toD0181_$1
Constant right-side identified [71] main::toD0181_$5 = main::toD0181_$4 & $f
Constant right-side identified [73] main::toD0182_$2 = > main::toD0182_$1
Constant right-side identified [74] main::toD0182_$5 = main::toD0182_$4 & $f
Constant right-side identified [88] irq_bottom_1::toD0181_$2 = > irq_bottom_1::toD0181_$1
Constant right-side identified [89] irq_bottom_1::toD0181_$5 = irq_bottom_1::toD0181_$4 & $f
Constant right-side identified [102] irq_bottom_2::toD0181_$2 = > irq_bottom_2::toD0181_$1
Constant right-side identified [103] irq_bottom_2::toD0181_$5 = irq_bottom_2::toD0181_$4 & $f
Constant right-side identified [217] __start::__init1_toD0181_$2 = > __start::__init1_toD0181_$1
Constant right-side identified [218] __start::__init1_toD0181_$5 = __start::__init1_toD0181_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_$2 = >main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Constant main::toD0182_$2 = >main::toD0182_$1
Constant main::toD0182_$5 = main::toD0182_$4&$f
Constant irq_bottom_1::toD0181_$2 = >irq_bottom_1::toD0181_$1
Constant irq_bottom_1::toD0181_$5 = irq_bottom_1::toD0181_$4&$f
Constant irq_bottom_2::toD0181_$2 = >irq_bottom_2::toD0181_$1
Constant irq_bottom_2::toD0181_$5 = irq_bottom_2::toD0181_$4&$f
Constant __start::__init1_toD0181_$2 = >__start::__init1_toD0181_$1
Constant __start::__init1_toD0181_$5 = __start::__init1_toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)__start::__init1_toD0181_return#0 = __start::__init1_toD0181_$6 __start::__init1_toD0181_return#1 __start::__init1_$0 canvas_show_memory 
Constant right-side identified [70] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Constant right-side identified [71] main::toD0182_return#0 = main::toD0182_$2 | main::toD0182_$5
Constant right-side identified [84] irq_bottom_1::toD0181_return#0 = irq_bottom_1::toD0181_$2 | irq_bottom_1::toD0181_$5
Constant right-side identified [96] irq_bottom_2::toD0181_return#0 = irq_bottom_2::toD0181_$2 | irq_bottom_2::toD0181_$5
Constant right-side identified [209] __start::__init1_toD0181_$6 = __start::__init1_toD0181_$2 | __start::__init1_toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Constant main::toD0182_return#0 = main::toD0182_$2|main::toD0182_$5
Constant irq_bottom_1::toD0181_return#0 = irq_bottom_1::toD0181_$2|irq_bottom_1::toD0181_$5
Constant irq_bottom_2::toD0181_return#0 = irq_bottom_2::toD0181_$2|irq_bottom_2::toD0181_$5
Constant __start::__init1_toD0181_$6 = __start::__init1_toD0181_$2|__start::__init1_toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Constant __start::__init1_toD0181_return#0 = __start::__init1_toD0181_$6
Successful SSA optimization Pass2ConstantIdentification
Constant __start::__init1_toD0181_return#1 = __start::__init1_toD0181_return#0
Successful SSA optimization Pass2ConstantIdentification
Constant __start::__init1_$0 = __start::__init1_toD0181_return#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [70] main::$17 = main::toD0181_return#0 ^ main::toD0182_return#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$17 = main::toD0181_return#0^main::toD0182_return#0
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [2] memset::$4 = (byte*)memset::str#5 keeping memset::str#5
Inlining Noop Cast [4] memset::dst#0 = (byte*)memset::str#5 keeping memset::str#5
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [69] main::canvas#1 = (byte*)main::$20 keeping main::canvas#1
Successful SSA optimization Pass2NopCastInlining
Rewriting division to use shift [120] line::e2#0 = line::dx#0 / 2
Rewriting division to use shift [122] line::plot1_$0 = line::x#0 / 8
Rewriting multiplication to use shift [123] line::plot1_$2 = line::plot1_$0 * SIZEOF_POINTER
Rewriting division to use shift [128] line::e#0 = line::dy#0 / 2
Rewriting division to use shift [136] line::plot2_$0 = line::x#15 / 8
Rewriting multiplication to use shift [137] line::plot2_$2 = line::plot2_$0 * SIZEOF_POINTER
Rewriting division to use shift [143] line::plot3_$0 = line::x#17 / 8
Rewriting multiplication to use shift [144] line::plot3_$2 = line::plot3_$0 * SIZEOF_POINTER
Rewriting division to use shift [148] line::e1#0 = line::dy#0 / 2
Rewriting division to use shift [156] line::plot4_$0 = line::x#19 / 8
Rewriting multiplication to use shift [157] line::plot4_$2 = line::plot4_$0 * SIZEOF_POINTER
Rewriting division to use shift [163] line::plot5_$0 = line::x#10 / 8
Rewriting multiplication to use shift [164] line::plot5_$2 = line::plot5_$0 * SIZEOF_POINTER
Rewriting division to use shift [175] line::plot6_$0 = line::x#12 / 8
Rewriting multiplication to use shift [176] line::plot6_$2 = line::plot6_$0 * SIZEOF_POINTER
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings memset::str#0
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings memset::str#2
Inlining constant with var siblings memset::c#2
Inlining constant with var siblings memset::num#2
Inlining constant with var siblings memset::str#3
Inlining constant with var siblings memset::c#3
Inlining constant with var siblings memset::num#3
Inlining constant with var siblings main::screen#0
Inlining constant with var siblings main::cols#0
Inlining constant with var siblings main::y#0
Inlining constant with var siblings main::x#0
Inlining constant with var siblings main::p0_idx#0
Inlining constant with var siblings main::canvas#0
Inlining constant with var siblings main::p1_idx#0
Inlining constant with var siblings main::p2_idx#0
Inlining constant with var siblings eorfill::x#0
Inlining constant with var siblings eorfill::y#0
Inlining constant with var siblings sgn_u8::return#2
Inlining constant with var siblings sgn_u8::return#3
Inlining constant with different constant siblings __start::__init1_toD0181_return#1
Constant inlined irq_bottom_1::toD0181_$7 = (word)CONSOLE
Constant inlined irq_bottom_2::toD0181_$7 = (word)SCREEN
Constant inlined irq_bottom_1::toD0181_screen#0 = CONSOLE
Constant inlined irq_bottom_1::toD0181_$4 = >(word)PETSCII/4
Constant inlined irq_bottom_1::toD0181_$5 = >(word)PETSCII/4&$f
Constant inlined irq_bottom_2::toD0181_$4 = >(word)LINE_BUFFER/4
Constant inlined memset::num#3 = $800
Constant inlined irq_bottom_2::toD0181_$3 = >(word)LINE_BUFFER
Constant inlined memset::num#2 = (word)$28*$19
Constant inlined irq_bottom_2::toD0181_gfx#0 = LINE_BUFFER
Constant inlined irq_bottom_2::toD0181_$5 = >(word)LINE_BUFFER/4&$f
Constant inlined main::toD0182_$4 = >(word)CANVAS2/4
Constant inlined main::toD0182_$5 = >(word)CANVAS2/4&$f
Constant inlined memset::num#1 = (word)$28*$19
Constant inlined main::toD0182_$7 = (word)SCREEN
Constant inlined memset::num#0 = (word)$28*$19
Constant inlined main::toD0182_$0 = (word)SCREEN&$3fff
Constant inlined main::toD0182_$1 = (word)SCREEN&$3fff*4
Constant inlined main::toD0182_$2 = >(word)SCREEN&$3fff*4
Constant inlined main::toD0182_$3 = >(word)CANVAS2
Constant inlined main::p2_idx#0 = $b5+$aa
Constant inlined main::$17 = main::toD0181_return#0^main::toD0182_return#0
Constant inlined main::toD0181_$7 = (word)SCREEN
Constant inlined main::toD0182_gfx#0 = CANVAS2
Constant inlined main::cols#0 = COLS+$c
Constant inlined main::p1_idx#0 = $b5+$f
Constant inlined main::toD0181_$2 = >(word)SCREEN&$3fff*4
Constant inlined __start::__init1_toD0181_$4 = >(word)CANVAS2/4
Constant inlined main::toD0181_$1 = (word)SCREEN&$3fff*4
Constant inlined __start::__init1_toD0181_$5 = >(word)CANVAS2/4&$f
Constant inlined __start::__init1_toD0181_$6 = >(word)SCREEN&$3fff*4|>(word)CANVAS2/4&$f
Constant inlined main::toD0181_$0 = (word)SCREEN&$3fff
Constant inlined __start::__init1_toD0181_$7 = (word)SCREEN
Constant inlined main::y#0 = 0
Constant inlined __start::__init1_toD0181_$0 = (word)SCREEN&$3fff
Constant inlined main::toD0181_$5 = >(word)CANVAS1/4&$f
Constant inlined __start::__init1_toD0181_$1 = (word)SCREEN&$3fff*4
Constant inlined main::toD0181_$4 = >(word)CANVAS1/4
Constant inlined __start::__init1_toD0181_$2 = >(word)SCREEN&$3fff*4
Constant inlined main::toD0181_$3 = >(word)CANVAS1
Constant inlined __start::__init1_toD0181_$3 = >(word)CANVAS2
Constant inlined irq_bottom_1::toD0181_gfx#0 = PETSCII
Constant inlined eorfill::x#0 = 0
Constant inlined memset::c#0 = ' '
Constant inlined __start::__init1_$0 = __start::__init1_toD0181_return#0
Constant inlined memset::c#1 = 0
Constant inlined memset::c#2 = BLACK
Constant inlined memset::c#3 = 0
Constant inlined main::screen#0 = SCREEN+$c
Constant inlined main::toD0181_screen#0 = SCREEN
Constant inlined main::toD0181_gfx#0 = CANVAS1
Constant inlined sgn_u8::return#3 = 1
Constant inlined sgn_u8::return#2 = -1
Constant inlined memset::str#2 = (void*)COLS
Constant inlined memset::str#1 = (void*)SCREEN
Constant inlined memset::str#0 = (void*)CONSOLE
Constant inlined memset::str#3 = (void*)LINE_BUFFER
Constant inlined main::x#0 = 0
Constant inlined __start::__init1_toD0181_return#1 = __start::__init1_toD0181_return#0
Constant inlined main::canvas#0 = CANVAS1
Constant inlined main::toD0182_screen#0 = SCREEN
Constant inlined eorfill::y#0 = 1
Constant inlined irq_bottom_2::toD0181_$0 = (word)SCREEN&$3fff
Constant inlined main::p0_idx#0 = $b5
Constant inlined irq_bottom_2::toD0181_$2 = >(word)SCREEN&$3fff*4
Constant inlined eorfill::line_buffer#0 = LINE_BUFFER
Constant inlined __start::__init1_toD0181_screen#0 = SCREEN
Constant inlined irq_bottom_2::toD0181_$1 = (word)SCREEN&$3fff*4
Constant inlined irq_bottom_1::toD0181_$2 = >(word)CONSOLE&$3fff*4
Constant inlined __start::__init1_toD0181_gfx#0 = CANVAS2
Constant inlined irq_bottom_1::toD0181_$3 = >(word)PETSCII
Constant inlined irq_bottom_1::toD0181_$0 = (word)CONSOLE&$3fff
Constant inlined irq_bottom_2::toD0181_screen#0 = SCREEN
Constant inlined irq_bottom_1::toD0181_$1 = (word)CONSOLE&$3fff*4
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_POINTER
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting line::@26(between line::@25 and line::@1)
Added new block during phi lifting line::@27(between line::@8 and line::@7)
Added new block during phi lifting line::@28(between line::@7 and line::@8)
Added new block during phi lifting line::@29(between line::@12 and line::@12)
Added new block during phi lifting line::@30(between line::@20 and line::@12)
Added new block during phi lifting line::@31(between line::@15 and line::@14)
Added new block during phi lifting line::@32(between line::@21 and line::@15)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1
Adding NOP phi() at start of __start::__init1_toD0181
Adding NOP phi() at start of __start::__init1_toD0181_@return
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@3
Adding NOP phi() at start of irq_bottom_2::@3
Adding NOP phi() at start of irq_bottom_2::toD0181
Adding NOP phi() at start of irq_bottom_2::toD0181_@return
Adding NOP phi() at start of irq_bottom_1::toD0181
Adding NOP phi() at start of irq_bottom_1::toD0181_@return
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@18
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of main::toD0182_@return
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of line::@10
Adding NOP phi() at start of line::@6
Adding NOP phi() at start of line::@17
Adding NOP phi() at start of sgn_u8::@2
Adding NOP phi() at start of sgn_u8::@1
CALL GRAPH
Calls in [__start] to main:8 
Calls in [irq_bottom_2] to kbhit:12 
Calls in [main] to memset:35 memset:37 memset:39 setup_irq:45 clock_start:50 memset:52 line:65 line:76 line:85 eorfill:93 
Calls in [line] to abs_u8:152 abs_u8:157 sgn_u8:162 sgn_u8:167 

Created 41 initial phi equivalence classes
Coalesced [61] line::x#33 = line::x1#0
Coalesced [62] line::y#34 = line::y1#0
Coalesced [63] line::x2#25 = line::x2#0
Coalesced [64] line::y2#18 = line::y2#0
Coalesced [72] line::x#34 = line::x1#1
Coalesced [73] line::y#35 = line::y1#1
Coalesced [74] line::x2#26 = line::x2#1
Coalesced [75] line::y2#19 = line::y2#1
Coalesced [81] line::x#35 = line::x1#2
Coalesced [82] line::y#36 = line::y1#2
Coalesced [83] line::x2#27 = line::x2#2
Coalesced [84] line::y2#20 = line::y2#2
Coalesced [102] main::p0_idx#19 = main::p0_idx#1
Coalesced [103] main::p1_idx#19 = main::p1_idx#1
Coalesced [104] main::p2_idx#19 = main::p2_idx#1
Not coalescing [106] main::c#4 = main::y#2
Coalesced [112] main::y#7 = main::y#1
Coalesced [113] main::cols#7 = main::cols#1
Coalesced [114] main::screen#7 = main::screen#1
Coalesced [119] main::x#4 = main::x#1
Coalesced [120] main::c#5 = main::c#1
Coalesced [134] memset::dst#5 = memset::dst#1
Coalesced [151] abs_u8::u#5 = abs_u8::u#0
Coalesced [156] abs_u8::u#6 = abs_u8::u#1
Coalesced [161] sgn_u8::u#3 = sgn_u8::u#0
Coalesced [166] sgn_u8::u#4 = sgn_u8::u#1
Coalesced [173] line::y#38 = line::y#1
Coalesced [174] line::y2#22 = line::y2#3
Coalesced [179] line::y#39 = line::y#17
Coalesced [180] line::e#8 = line::e#0
Coalesced [181] line::x#36 = line::x#0
Coalesced [194] line::e#10 = line::e#2
Coalesced [195] line::x#38 = line::x#1
Coalesced [205] line::y#40 = line::y#10
Coalesced [206] line::e#9 = line::e#5
Coalesced [207] line::x#37 = line::x#17
Coalesced [208] line::e#11 = line::e#1
Coalesced (already) [209] line::x#39 = line::x#15
Coalesced [218] line::y#41 = line::y#17
Coalesced [219] line::e1#7 = line::e1#0
Coalesced [220] line::x#40 = line::x#0
Coalesced [233] line::y#43 = line::y#12
Coalesced [234] line::e1#9 = line::e1#2
Coalesced [235] line::x#42 = line::x#19
Coalesced (already) [236] line::y#42 = line::y#12
Coalesced [237] line::e1#8 = line::e1#1
Coalesced (already) [238] line::x#41 = line::x#18
Coalesced [240] line::x#44 = line::x#0
Coalesced [241] line::y#45 = line::y#17
Coalesced [242] line::e2#9 = line::e2#0
Coalesced [254] line::y#46 = line::y#4
Coalesced [255] line::e2#10 = line::e2#2
Coalesced [264] line::x#43 = line::x#12
Coalesced [265] line::y#44 = line::y#15
Coalesced [266] line::e2#8 = line::e2#7
Coalesced (already) [267] line::y#47 = line::y#13
Coalesced [268] line::e2#11 = line::e2#1
Coalesced [269] line::y#37 = line::y#0
Coalesced [270] line::y2#21 = line::y2#10
Coalesced [271] eorfill::fill_column#7 = eorfill::canvas#0
Coalesced [277] eorfill::eor#4 = eorfill::eor#0
Coalesced [283] eorfill::x#7 = eorfill::x#1
Coalesced [284] eorfill::line_column#7 = eorfill::line_column#1
Coalesced [285] eorfill::fill_column#8 = eorfill::fill_column#1
Coalesced [289] eorfill::y#4 = eorfill::y#1
Coalesced [290] eorfill::eor#5 = eorfill::eor#1
Coalesced [294] abs_u8::return#9 = abs_u8::u#2
Coalesced [298] abs_u8::return#8 = abs_u8::return#2
Coalesced down to 28 phi equivalence classes
Culled Empty Block label __start::__init1_toD0181_@return
Culled Empty Block label __start::@2
Culled Empty Block label __start::@3
Culled Empty Block label irq_bottom_2::@3
Culled Empty Block label irq_bottom_2::toD0181_@return
Culled Empty Block label irq_bottom_1::toD0181_@return
Culled Empty Block label main::@15
Culled Empty Block label main::@16
Culled Empty Block label main::@17
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::@11
Culled Empty Block label main::toD0182_@return
Culled Empty Block label memset::@1
Culled Empty Block label line::@10
Culled Empty Block label line::@27
Culled Empty Block label line::@28
Culled Empty Block label line::@6
Culled Empty Block label line::@30
Culled Empty Block label line::@29
Culled Empty Block label line::@17
Culled Empty Block label line::@31
Culled Empty Block label line::@32
Culled Empty Block label line::@26
Culled Empty Block label abs_u8::@2
Culled Empty Block label sgn_u8::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block main::@12 to main::@11
Renumbering block main::@13 to main::@12
Renumbering block main::@14 to main::@13
Renumbering block main::@18 to main::@14
Renumbering block main::@19 to main::@15
Renumbering block main::@20 to main::@16
Renumbering block main::@21 to main::@17
Renumbering block main::@22 to main::@18
Renumbering block main::@23 to main::@19
Renumbering block main::@24 to main::@20
Renumbering block irq_bottom_2::@4 to irq_bottom_2::@3
Renumbering block irq_bottom_2::@5 to irq_bottom_2::@4
Renumbering block line::@7 to line::@6
Renumbering block line::@8 to line::@7
Renumbering block line::@9 to line::@8
Renumbering block line::@11 to line::@9
Renumbering block line::@12 to line::@10
Renumbering block line::@13 to line::@11
Renumbering block line::@14 to line::@12
Renumbering block line::@15 to line::@13
Renumbering block line::@16 to line::@14
Renumbering block line::@18 to line::@15
Renumbering block line::@19 to line::@16
Renumbering block line::@20 to line::@17
Renumbering block line::@21 to line::@18
Renumbering block line::@22 to line::@19
Renumbering block line::@23 to line::@20
Renumbering block line::@24 to line::@21
Renumbering block line::@25 to line::@22
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1
Adding NOP phi() at start of __start::__init1_toD0181
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of irq_bottom_2::toD0181
Adding NOP phi() at start of irq_bottom_1::toD0181
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0182
Adding NOP phi() at start of eorfill
Adding NOP phi() at start of sgn_u8::@1

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] phi()
  to:__start::__init1_toD0181
__start::__init1_toD0181: scope:[__start]  from __start::__init1
  [2] phi()
  to:__start::__init1_@1
__start::__init1_@1: scope:[__start]  from __start::__init1_toD0181
  [3] canvas_show_memory = __start::__init1_toD0181_return#0
  [4] canvas_show_flag = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1_@1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

interrupt(KERNEL_KEYBOARD) void irq_bottom_2()
irq_bottom_2: scope:[irq_bottom_2]  from
  [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  [9] call kbhit 
  [10] kbhit::return#2 = kbhit::return#0
  to:irq_bottom_2::@4
irq_bottom_2::@4: scope:[irq_bottom_2]  from irq_bottom_2
  [11] irq_bottom_2::$0 = kbhit::return#2
  [12] if(0==irq_bottom_2::$0) goto irq_bottom_2::@1
  to:irq_bottom_2::toD0181
irq_bottom_2::toD0181: scope:[irq_bottom_2]  from irq_bottom_2::@4
  [13] phi()
  to:irq_bottom_2::@3
irq_bottom_2::@3: scope:[irq_bottom_2]  from irq_bottom_2::toD0181
  [14] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_2::toD0181_return#0
  to:irq_bottom_2::@2
irq_bottom_2::@2: scope:[irq_bottom_2]  from irq_bottom_2::@1 irq_bottom_2::@3
  [15] canvas_show_flag = 0
  [16] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER
  [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8
  [18] *KERNEL_IRQ = &irq_bottom_1
  to:irq_bottom_2::@return
irq_bottom_2::@return: scope:[irq_bottom_2]  from irq_bottom_2::@2
  [19] return 
  to:@return
irq_bottom_2::@1: scope:[irq_bottom_2]  from irq_bottom_2::@4
  [20] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = canvas_show_memory
  to:irq_bottom_2::@2

interrupt(KERNEL_MIN) void irq_bottom_1()
irq_bottom_1: scope:[irq_bottom_1]  from
  [21] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = DARK_GREY
  to:irq_bottom_1::toD0181
irq_bottom_1::toD0181: scope:[irq_bottom_1]  from irq_bottom_1
  [22] phi()
  to:irq_bottom_1::@1
irq_bottom_1::@1: scope:[irq_bottom_1]  from irq_bottom_1::toD0181
  [23] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_1::toD0181_return#0
  [24] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER
  [25] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM
  [26] *KERNEL_IRQ = &irq_bottom_2
  to:irq_bottom_1::@return
irq_bottom_1::@return: scope:[irq_bottom_1]  from irq_bottom_1::@1
  [27] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [28] phi()
  [29] call memset 
  to:main::@12
main::@12: scope:[main]  from main
  [30] phi()
  [31] call memset 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [32] phi()
  [33] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@13 main::@6
  [34] main::screen#5 = phi( main::@13/SCREEN+$c, main::@6/main::screen#1 )
  [34] main::cols#5 = phi( main::@13/COLS+$c, main::@6/main::cols#1 )
  [34] main::y#2 = phi( main::@13/0, main::@6/main::y#1 )
  [35] if(main::y#2<$10) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [36] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  [37] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK
  [38] call setup_irq 
  to:main::@7
main::@7: scope:[main]  from main::@20 main::@3
  [39] main::canvas#10 = phi( main::@3/CANVAS1, main::@20/main::canvas#19 )
  [39] main::p2_idx#2 = phi( main::@3/$b5+$aa, main::@20/main::p2_idx#1 )
  [39] main::p1_idx#2 = phi( main::@3/$b5+$f, main::@20/main::p1_idx#1 )
  [39] main::p0_idx#2 = phi( main::@3/$b5, main::@20/main::p0_idx#1 )
  to:main::@8
main::@8: scope:[main]  from main::@7
  [40] phi()
  [41] call clock_start 
  to:main::@14
main::@14: scope:[main]  from main::@8
  [42] phi()
  [43] call memset 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [44] main::x0#0 = COSTAB[main::p0_idx#2]
  [45] main::y0#0 = SINTAB[main::p0_idx#2]
  [46] main::x1#0 = COSTAB[main::p1_idx#2]
  [47] main::y1#0 = SINTAB[main::p1_idx#2]
  [48] line::x1#0 = main::x0#0
  [49] line::y1#0 = main::y0#0
  [50] line::x2#0 = main::x1#0
  [51] line::y2#0 = main::y1#0
  [52] call line 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [53] main::x2#0 = COSTAB[main::p2_idx#2]
  [54] main::y2#0 = SINTAB[main::p2_idx#2]
  [55] line::x1#1 = main::x1#0
  [56] line::y1#1 = main::y1#0
  [57] line::x2#1 = main::x2#0
  [58] line::y2#1 = main::y2#0
  [59] call line 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [60] line::x1#2 = main::x2#0
  [61] line::y1#2 = main::y2#0
  [62] line::x2#2 = main::x0#0
  [63] line::y2#2 = main::y0#0
  [64] call line 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [65] main::p0_idx#1 = ++ main::p0_idx#2
  [66] main::p1_idx#1 = ++ main::p1_idx#2
  [67] main::p2_idx#1 = ++ main::p2_idx#2
  [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = RED
  to:main::@9
main::@9: scope:[main]  from main::@18 main::@9
  [69] if(0!=canvas_show_flag) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@9
  [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK
  [71] eorfill::canvas#0 = main::canvas#10
  [72] call eorfill 
  to:main::@19
main::@19: scope:[main]  from main::@10
  [73] main::canvas#1 = main::canvas#10 ^ CANVAS1^CANVAS2
  to:main::toD0181
main::toD0181: scope:[main]  from main::@19
  [74] phi()
  to:main::toD0182
main::toD0182: scope:[main]  from main::toD0181
  [75] phi()
  to:main::@11
main::@11: scope:[main]  from main::toD0182
  [76] canvas_show_memory = canvas_show_memory ^ main::toD0181_return#0^main::toD0182_return#0
  [77] canvas_show_flag = 1
  to:main::@20
main::@20: scope:[main]  from main::@11
  [78] main::canvas#19 = (byte*)main::canvas#1
  to:main::@7
main::@2: scope:[main]  from main::@1
  [79] main::c#4 = main::y#2
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [80] main::c#2 = phi( main::@2/main::c#4, main::@5/main::c#1 )
  [80] main::x#2 = phi( main::@2/0, main::@5/main::x#1 )
  [81] if(main::x#2<$10) goto main::@5
  to:main::@6
main::@6: scope:[main]  from main::@4
  [82] main::cols#1 = main::cols#5 + $28
  [83] main::screen#1 = main::screen#5 + $28
  [84] main::y#1 = ++ main::y#2
  to:main::@1
main::@5: scope:[main]  from main::@4
  [85] main::cols#5[main::x#2] = WHITE
  [86] main::screen#5[main::x#2] = main::c#2
  [87] main::c#1 = main::c#2 + $10
  [88] main::x#1 = ++ main::x#2
  to:main::@4

byte kbhit()
kbhit: scope:[kbhit]  from irq_bottom_2
  [89] *kbhit::CIA1_PORT_A = 0
  [90] kbhit::return#0 = ~ *kbhit::CIA1_PORT_B
  to:kbhit::@return
kbhit::@return: scope:[kbhit]  from kbhit
  [91] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from main main::@12 main::@13 main::@14
  [92] memset::c#6 = phi( main/' ', main::@12/0, main::@13/BLACK, main::@14/0 )
  [92] memset::str#5 = phi( main/(void*)CONSOLE, main::@12/(void*)SCREEN, main::@13/(void*)COLS, main::@14/(void*)LINE_BUFFER )
  [92] memset::num#4 = phi( main/(word)$28*$19, main::@12/(word)$28*$19, main::@13/(word)$28*$19, main::@14/$800 )
  [93] if(memset::num#4<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [94] memset::end#0 = (byte*)memset::str#5 + memset::num#4
  [95] memset::dst#4 = (byte*)memset::str#5
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [96] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [97] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [98] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [99] *memset::dst#2 = memset::c#6
  [100] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void setup_irq()
setup_irq: scope:[setup_irq]  from main::@3
  asm { sei  }
  [102] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  [103] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $7f
  [104] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8
  [105] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) = IRQ_RASTER
  [106] *KERNEL_IRQ = &irq_bottom_1
  asm { cli  }
  to:setup_irq::@return
setup_irq::@return: scope:[setup_irq]  from setup_irq
  [108] return 
  to:@return

void clock_start()
clock_start: scope:[clock_start]  from main::@8
  [109] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0
  [110] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [111] *CIA2_TIMER_AB = $ffffffff
  [112] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [113] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [114] return 
  to:@return

void line(byte* line::canvas , byte line::x1 , byte line::y1 , byte line::x2 , byte line::y2)
line: scope:[line]  from main::@15 main::@16 main::@17
  [115] line::y2#10 = phi( main::@15/line::y2#0, main::@16/line::y2#1, main::@17/line::y2#2 )
  [115] line::x2#15 = phi( main::@15/line::x2#0, main::@16/line::x2#1, main::@17/line::x2#2 )
  [115] line::y#0 = phi( main::@15/line::y1#0, main::@16/line::y1#1, main::@17/line::y1#2 )
  [115] line::x#0 = phi( main::@15/line::x1#0, main::@16/line::x1#1, main::@17/line::x1#2 )
  [116] abs_u8::u#0 = line::x2#15 - line::x#0
  [117] call abs_u8 
  [118] abs_u8::return#0 = abs_u8::return#4
  to:line::@19
line::@19: scope:[line]  from line
  [119] line::dx#0 = abs_u8::return#0
  [120] abs_u8::u#1 = line::y2#10 - line::y#0
  [121] call abs_u8 
  [122] abs_u8::return#1 = abs_u8::return#4
  to:line::@20
line::@20: scope:[line]  from line::@19
  [123] line::dy#0 = abs_u8::return#1
  [124] sgn_u8::u#0 = line::x2#15 - line::x#0
  [125] call sgn_u8 
  [126] sgn_u8::return#0 = sgn_u8::return#4
  to:line::@21
line::@21: scope:[line]  from line::@20
  [127] line::sx#0 = sgn_u8::return#0
  [128] sgn_u8::u#1 = line::y2#10 - line::y#0
  [129] call sgn_u8 
  [130] sgn_u8::return#1 = sgn_u8::return#4
  to:line::@22
line::@22: scope:[line]  from line::@21
  [131] line::sy#0 = sgn_u8::return#1
  [132] if(line::sx#0!=$ff) goto line::@1
  to:line::@3
line::@3: scope:[line]  from line::@22
  [133] line::y#1 = ++ line::y#0
  [134] line::y2#3 = ++ line::y2#10
  to:line::@1
line::@1: scope:[line]  from line::@22 line::@3
  [135] line::y2#13 = phi( line::@22/line::y2#10, line::@3/line::y2#3 )
  [135] line::y#17 = phi( line::@22/line::y#0, line::@3/line::y#1 )
  [136] if(line::dx#0>line::dy#0) goto line::@2
  to:line::@4
line::@4: scope:[line]  from line::@1
  [137] if(line::sx#0==line::sy#0) goto line::plot1
  to:line::@5
line::@5: scope:[line]  from line::@4
  [138] line::e#0 = line::dy#0 >> 1
  to:line::@6
line::@6: scope:[line]  from line::@5 line::@7
  [139] line::x#15 = phi( line::@5/line::x#0, line::@7/line::x#17 )
  [139] line::e#3 = phi( line::@5/line::e#0, line::@7/line::e#5 )
  [139] line::y#7 = phi( line::@5/line::y#17, line::@7/line::y#10 )
  [140] line::y#10 = line::y#7 + line::sy#0
  [141] line::e#1 = line::e#3 + line::dx#0
  [142] if(line::e#1<=line::dy#0) goto line::@7
  to:line::@8
line::@8: scope:[line]  from line::@6
  [143] line::plot2_y#0 = line::y#10 - line::sy#0
  to:line::plot2
line::plot2: scope:[line]  from line::@8
  [144] line::plot2_$0 = line::x#15 >> 3
  [145] line::plot2_$2 = line::plot2_$0 << 1
  [146] line::plot2_column#0 = plot_column[line::plot2_$2]
  [147] line::plot2_$1 = line::x#15 & 7
  [148] line::plot2_column#0[line::plot2_y#0] = line::plot2_column#0[line::plot2_y#0] | plot_bit[line::plot2_$1]
  to:line::@16
line::@16: scope:[line]  from line::plot2
  [149] line::x#1 = line::x#15 + line::sx#0
  [150] line::e#2 = line::e#1 - line::dy#0
  to:line::@7
line::@7: scope:[line]  from line::@16 line::@6
  [151] line::x#17 = phi( line::@16/line::x#1, line::@6/line::x#15 )
  [151] line::e#5 = phi( line::@16/line::e#2, line::@6/line::e#1 )
  [152] if(line::y#10!=line::y2#13) goto line::@6
  to:line::plot3
line::plot3: scope:[line]  from line::@7
  [153] line::plot3_$0 = line::x#17 >> 3
  [154] line::plot3_$2 = line::plot3_$0 << 1
  [155] line::plot3_column#0 = plot_column[line::plot3_$2]
  [156] line::plot3_$1 = line::x#17 & 7
  [157] line::plot3_column#0[line::y#10] = line::plot3_column#0[line::y#10] | plot_bit[line::plot3_$1]
  to:line::@return
line::@return: scope:[line]  from line::@15 line::@17 line::plot3 line::plot6
  [158] return 
  to:@return
line::plot1: scope:[line]  from line::@4
  [159] line::plot1_$0 = line::x#0 >> 3
  [160] line::plot1_$2 = line::plot1_$0 << 1
  [161] line::plot1_column#0 = plot_column[line::plot1_$2]
  [162] line::plot1_$1 = line::x#0 & 7
  [163] line::plot1_column#0[line::y#17] = line::plot1_column#0[line::y#17] | plot_bit[line::plot1_$1]
  to:line::@15
line::@15: scope:[line]  from line::plot1
  [164] if(line::dx#0!=0) goto line::@9
  to:line::@return
line::@9: scope:[line]  from line::@15
  [165] line::e1#0 = line::dy#0 >> 1
  to:line::@10
line::@10: scope:[line]  from line::@10 line::@17 line::@9
  [166] line::x#18 = phi( line::@9/line::x#0, line::@10/line::x#18, line::@17/line::x#19 )
  [166] line::e1#3 = phi( line::@9/line::e1#0, line::@10/line::e1#1, line::@17/line::e1#2 )
  [166] line::y#11 = phi( line::@9/line::y#17, line::@10/line::y#12, line::@17/line::y#12 )
  [167] line::y#12 = line::y#11 + line::sy#0
  [168] line::e1#1 = line::e1#3 + line::dx#0
  [169] if(line::e1#1<=line::dy#0) goto line::@10
  to:line::@11
line::@11: scope:[line]  from line::@10
  [170] line::x#19 = line::x#18 + line::sx#0
  [171] line::e1#2 = line::e1#1 - line::dy#0
  to:line::plot4
line::plot4: scope:[line]  from line::@11
  [172] line::plot4_$0 = line::x#19 >> 3
  [173] line::plot4_$2 = line::plot4_$0 << 1
  [174] line::plot4_column#0 = plot_column[line::plot4_$2]
  [175] line::plot4_$1 = line::x#19 & 7
  [176] line::plot4_column#0[line::y#12] = line::plot4_column#0[line::y#12] | plot_bit[line::plot4_$1]
  to:line::@17
line::@17: scope:[line]  from line::plot4
  [177] if(line::x#19!=line::x2#15) goto line::@10
  to:line::@return
line::@2: scope:[line]  from line::@1
  [178] line::e2#0 = line::dx#0 >> 1
  to:line::@12
line::@12: scope:[line]  from line::@13 line::@2
  [179] line::e2#3 = phi( line::@13/line::e2#7, line::@2/line::e2#0 )
  [179] line::y#13 = phi( line::@13/line::y#15, line::@2/line::y#17 )
  [179] line::x#10 = phi( line::@13/line::x#12, line::@2/line::x#0 )
  to:line::plot5
line::plot5: scope:[line]  from line::@12
  [180] line::plot5_$0 = line::x#10 >> 3
  [181] line::plot5_$2 = line::plot5_$0 << 1
  [182] line::plot5_column#0 = plot_column[line::plot5_$2]
  [183] line::plot5_$1 = line::x#10 & 7
  [184] line::plot5_column#0[line::y#13] = line::plot5_column#0[line::y#13] | plot_bit[line::plot5_$1]
  to:line::@18
line::@18: scope:[line]  from line::plot5
  [185] line::x#12 = line::x#10 + line::sx#0
  [186] line::e2#1 = line::e2#3 + line::dy#0
  [187] if(line::e2#1<=line::dx#0) goto line::@13
  to:line::@14
line::@14: scope:[line]  from line::@18
  [188] line::y#4 = line::y#13 + line::sy#0
  [189] line::e2#2 = line::e2#1 - line::dx#0
  to:line::@13
line::@13: scope:[line]  from line::@14 line::@18
  [190] line::e2#7 = phi( line::@14/line::e2#2, line::@18/line::e2#1 )
  [190] line::y#15 = phi( line::@14/line::y#4, line::@18/line::y#13 )
  [191] if(line::x#12!=line::x2#15) goto line::@12
  to:line::plot6
line::plot6: scope:[line]  from line::@13
  [192] line::plot6_$0 = line::x#12 >> 3
  [193] line::plot6_$2 = line::plot6_$0 << 1
  [194] line::plot6_column#0 = plot_column[line::plot6_$2]
  [195] line::plot6_$1 = line::x#12 & 7
  [196] line::plot6_column#0[line::y#15] = line::plot6_column#0[line::y#15] | plot_bit[line::plot6_$1]
  to:line::@return

void eorfill(byte* eorfill::line_buffer , byte* eorfill::canvas)
eorfill: scope:[eorfill]  from main::@10
  [197] phi()
  to:eorfill::@1
eorfill::@1: scope:[eorfill]  from eorfill eorfill::@5
  [198] eorfill::fill_column#2 = phi( eorfill/eorfill::canvas#0, eorfill::@5/eorfill::fill_column#1 )
  [198] eorfill::line_column#2 = phi( eorfill/LINE_BUFFER, eorfill::@5/eorfill::line_column#1 )
  [198] eorfill::x#2 = phi( eorfill/0, eorfill::@5/eorfill::x#1 )
  [199] if(eorfill::x#2<$10) goto eorfill::@2
  to:eorfill::@return
eorfill::@return: scope:[eorfill]  from eorfill::@1
  [200] return 
  to:@return
eorfill::@2: scope:[eorfill]  from eorfill::@1
  [201] eorfill::eor#0 = *eorfill::line_column#2
  [202] *eorfill::fill_column#2 = eorfill::eor#0
  to:eorfill::@3
eorfill::@3: scope:[eorfill]  from eorfill::@2 eorfill::@4
  [203] eorfill::eor#2 = phi( eorfill::@2/eorfill::eor#0, eorfill::@4/eorfill::eor#1 )
  [203] eorfill::y#2 = phi( eorfill::@2/1, eorfill::@4/eorfill::y#1 )
  [204] if(eorfill::y#2<(byte)$10*8) goto eorfill::@4
  to:eorfill::@5
eorfill::@5: scope:[eorfill]  from eorfill::@3
  [205] eorfill::line_column#1 = eorfill::line_column#2 + (byte)$10*8
  [206] eorfill::fill_column#1 = eorfill::fill_column#2 + (byte)$10*8
  [207] eorfill::x#1 = ++ eorfill::x#2
  to:eorfill::@1
eorfill::@4: scope:[eorfill]  from eorfill::@3
  [208] eorfill::eor#1 = eorfill::eor#2 ^ eorfill::line_column#2[eorfill::y#2]
  [209] eorfill::fill_column#2[eorfill::y#2] = eorfill::eor#1
  [210] eorfill::y#1 = ++ eorfill::y#2
  to:eorfill::@3

byte abs_u8(byte abs_u8::u)
abs_u8: scope:[abs_u8]  from line line::@19
  [211] abs_u8::u#2 = phi( line/abs_u8::u#0, line::@19/abs_u8::u#1 )
  [212] abs_u8::$0 = abs_u8::u#2 & $80
  [213] if(0!=abs_u8::$0) goto abs_u8::@1
  to:abs_u8::@return
abs_u8::@1: scope:[abs_u8]  from abs_u8
  [214] abs_u8::return#2 = - abs_u8::u#2
  to:abs_u8::@return
abs_u8::@return: scope:[abs_u8]  from abs_u8 abs_u8::@1
  [215] abs_u8::return#4 = phi( abs_u8::@1/abs_u8::return#2, abs_u8/abs_u8::u#2 )
  [216] return 
  to:@return

byte sgn_u8(byte sgn_u8::u)
sgn_u8: scope:[sgn_u8]  from line::@20 line::@21
  [217] sgn_u8::u#2 = phi( line::@20/sgn_u8::u#0, line::@21/sgn_u8::u#1 )
  [218] sgn_u8::$0 = sgn_u8::u#2 & $80
  [219] if(0!=sgn_u8::$0) goto sgn_u8::@1
  to:sgn_u8::@return
sgn_u8::@1: scope:[sgn_u8]  from sgn_u8
  [220] phi()
  to:sgn_u8::@return
sgn_u8::@return: scope:[sgn_u8]  from sgn_u8 sgn_u8::@1
  [221] sgn_u8::return#4 = phi( sgn_u8::@1/-1, sgn_u8/1 )
  [222] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void __start()
byte* __start::__init1_toD0181_gfx
byte __start::__init1_toD0181_return
byte* __start::__init1_toD0181_screen
byte abs_u8(byte abs_u8::u)
byte~ abs_u8::$0 20002.0
byte abs_u8::return
byte abs_u8::return#0 2002.0
byte abs_u8::return#1 2002.0
byte abs_u8::return#2 20002.0
byte abs_u8::return#4 5501.0
byte abs_u8::u
byte abs_u8::u#0 2002.0
byte abs_u8::u#1 2002.0
byte abs_u8::u#2 10668.333333333332
volatile byte canvas_show_flag loadstore 19.75
volatile byte canvas_show_memory loadstore 2.9855072463768115
void clock_start()
void eorfill(byte* eorfill::line_buffer , byte* eorfill::canvas)
byte* eorfill::canvas
byte* eorfill::canvas#0 551.0
byte eorfill::eor
byte eorfill::eor#0 150001.5
byte eorfill::eor#1 1000001.0
byte eorfill::eor#2 1050001.5
byte* eorfill::fill_column
byte* eorfill::fill_column#1 100001.0
byte* eorfill::fill_column#2 130100.5
byte* eorfill::line_buffer
byte* eorfill::line_column
byte* eorfill::line_column#1 66667.33333333333
byte* eorfill::line_column#2 144444.88888888888
byte eorfill::x
byte eorfill::x#1 200002.0
byte eorfill::x#2 27273.0
byte eorfill::y
byte eorfill::y#1 2000002.0
byte eorfill::y#2 1250001.25
interrupt(KERNEL_MIN) void irq_bottom_1()
byte* irq_bottom_1::toD0181_gfx
byte irq_bottom_1::toD0181_return
byte* irq_bottom_1::toD0181_screen
interrupt(KERNEL_KEYBOARD) void irq_bottom_2()
byte~ irq_bottom_2::$0 4.0
byte* irq_bottom_2::toD0181_gfx
byte irq_bottom_2::toD0181_return
byte* irq_bottom_2::toD0181_screen
byte kbhit()
byte kbhit::return
byte kbhit::return#0 4.333333333333333
byte kbhit::return#2 4.0
void line(byte* line::canvas , byte line::x1 , byte line::y1 , byte line::x2 , byte line::y2)
byte* line::canvas
byte line::dx
byte line::dx#0 19462.805970149253
byte line::dy
byte line::dy#0 22285.85714285714
byte line::e
byte line::e#0 2002.0
byte line::e#1 44444.88888888889
byte line::e#2 200002.0
byte line::e#3 100501.5
byte line::e#5 150001.5
byte line::e1
byte line::e1#0 2002.0
byte line::e1#1 1033334.6666666666
byte line::e1#2 28571.714285714286
byte line::e1#3 1050502.0
byte line::e2
byte line::e2#0 2002.0
byte line::e2#1 133334.66666666666
byte line::e2#2 200002.0
byte line::e2#3 28714.714285714286
byte line::e2#7 150001.5
byte~ line::plot1_$0 2002.0
byte~ line::plot1_$1 2002.0
byte~ line::plot1_$2 2002.0
byte* line::plot1_column
byte* line::plot1_column#0 1501.5
byte line::plot1_x
byte line::plot1_y
byte~ line::plot2_$0 200002.0
byte~ line::plot2_$1 200002.0
byte~ line::plot2_$2 200002.0
byte* line::plot2_column
byte* line::plot2_column#0 150001.5
byte line::plot2_x
byte line::plot2_y
byte line::plot2_y#0 60000.600000000006
byte~ line::plot3_$0 2002.0
byte~ line::plot3_$1 2002.0
byte~ line::plot3_$2 2002.0
byte* line::plot3_column
byte* line::plot3_column#0 1501.5
byte line::plot3_x
byte line::plot3_y
byte~ line::plot4_$0 200002.0
byte~ line::plot4_$1 200002.0
byte~ line::plot4_$2 200002.0
byte* line::plot4_column
byte* line::plot4_column#0 150001.5
byte line::plot4_x
byte line::plot4_y
byte~ line::plot5_$0 200002.0
byte~ line::plot5_$1 200002.0
byte~ line::plot5_$2 200002.0
byte* line::plot5_column
byte* line::plot5_column#0 150001.5
byte line::plot5_x
byte line::plot5_y
byte~ line::plot6_$0 2002.0
byte~ line::plot6_$1 2002.0
byte~ line::plot6_$2 2002.0
byte* line::plot6_column
byte* line::plot6_column#0 1501.5
byte line::plot6_x
byte line::plot6_y
byte line::sx
byte line::sx#0 5135.6949152542375
byte line::sy
byte line::sy#0 23672.836363636365
byte line::x
byte line::x#0 228.4375
byte line::x#1 100001.0
byte line::x#10 66834.16666666666
byte line::x#12 30200.5
byte line::x#15 50100.6
byte line::x#17 60401.0
byte line::x#18 550251.25
byte line::x#19 62500.625
byte line::x1
byte line::x1#0 50.5
byte line::x1#1 50.5
byte line::x1#2 50.5
byte line::x2
byte line::x2#0 101.0
byte line::x2#1 101.0
byte line::x2#15 3612.625
byte line::x2#2 101.0
byte line::y
byte line::y#0 239.27777777777777
byte line::y#1 1001.0
byte line::y#10 23647.411764705877
byte line::y#11 2101004.0
byte line::y#12 209091.36363636365
byte line::y#13 55667.33333333333
byte line::y#15 50334.16666666667
byte line::y#17 583.9166666666667
byte line::y#4 100001.0
byte line::y#7 201003.0
byte line::y1
byte line::y1#0 67.33333333333333
byte line::y1#1 67.33333333333333
byte line::y1#2 67.33333333333333
byte line::y2
byte line::y2#0 202.0
byte line::y2#1 202.0
byte line::y2#10 226.68421052631578
byte line::y2#13 5666.833333333334
byte line::y2#2 202.0
byte line::y2#3 2002.0
void main()
byte main::c
byte main::c#1 1001.0
byte main::c#2 776.0
byte main::c#4 202.0
byte* main::canvas
word main::canvas#1 20.2
byte* main::canvas#10 8.911764705882353
byte* main::canvas#19 202.0
byte* main::cols
byte* main::cols#1 67.33333333333333
byte* main::cols#5 133.66666666666669
byte main::p0_idx
byte main::p0_idx#1 14.428571428571429
byte main::p0_idx#2 15.538461538461538
byte main::p1_idx
byte main::p1_idx#1 15.538461538461538
byte main::p1_idx#2 14.962962962962964
byte main::p2_idx
byte main::p2_idx#1 16.833333333333332
byte main::p2_idx#2 14.428571428571429
byte* main::screen
byte* main::screen#1 101.0
byte* main::screen#5 120.3
byte* main::toD0181_gfx
byte main::toD0181_return
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
byte* main::toD0182_screen
byte main::x
byte main::x#1 2002.0
byte main::x#2 1001.0
byte main::x0
byte main::x0#0 16.833333333333332
byte main::x1
byte main::x1#0 33.666666666666664
byte main::x2
byte main::x2#0 43.285714285714285
byte main::y
byte main::y#1 202.0
byte main::y#2 36.72727272727273
byte main::y0
byte main::y0#0 16.833333333333332
byte main::y1
byte main::y1#0 33.666666666666664
byte main::y2
byte main::y2#0 43.285714285714285
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#6 12500.125
byte* memset::dst
byte* memset::dst#1 200002.0
byte* memset::dst#2 133668.3333333333
byte* memset::dst#4 2002.0
byte* memset::end
byte* memset::end#0 16833.666666666664
word memset::num
word memset::num#4 1001.0
void* memset::return
void* memset::str
void* memset::str#5
void setup_irq()
byte sgn_u8(byte sgn_u8::u)
byte~ sgn_u8::$0 20002.0
byte sgn_u8::return
byte sgn_u8::return#0 2002.0
byte sgn_u8::return#1 2002.0
byte sgn_u8::return#4 500.5
byte sgn_u8::u
byte sgn_u8::u#0 2002.0
byte sgn_u8::u#1 2002.0
byte sgn_u8::u#2 12003.0

Initial phi equivalence classes
[ main::y#2 main::y#1 ]
[ main::cols#5 main::cols#1 ]
[ main::screen#5 main::screen#1 ]
[ main::p0_idx#2 main::p0_idx#1 ]
[ main::p1_idx#2 main::p1_idx#1 ]
[ main::p2_idx#2 main::p2_idx#1 ]
[ main::canvas#10 main::canvas#19 ]
[ main::x#2 main::x#1 ]
[ main::c#2 main::c#4 main::c#1 ]
[ memset::num#4 ]
[ memset::str#5 ]
[ memset::c#6 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ line::x2#15 line::x2#0 line::x2#1 line::x2#2 ]
[ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
[ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ]
[ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ]
[ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ]
[ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ]
[ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ]
[ eorfill::x#2 eorfill::x#1 ]
[ eorfill::line_column#2 eorfill::line_column#1 ]
[ eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 ]
[ eorfill::y#2 eorfill::y#1 ]
[ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ]
[ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ]
[ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ]
[ sgn_u8::return#4 ]
Added variable canvas_show_memory to live range equivalence class [ canvas_show_memory ]
Added variable canvas_show_flag to live range equivalence class [ canvas_show_flag ]
Added variable kbhit::return#2 to live range equivalence class [ kbhit::return#2 ]
Added variable irq_bottom_2::$0 to live range equivalence class [ irq_bottom_2::$0 ]
Added variable main::x0#0 to live range equivalence class [ main::x0#0 ]
Added variable main::y0#0 to live range equivalence class [ main::y0#0 ]
Added variable main::x1#0 to live range equivalence class [ main::x1#0 ]
Added variable main::y1#0 to live range equivalence class [ main::y1#0 ]
Added variable main::x2#0 to live range equivalence class [ main::x2#0 ]
Added variable main::y2#0 to live range equivalence class [ main::y2#0 ]
Added variable main::canvas#1 to live range equivalence class [ main::canvas#1 ]
Added variable kbhit::return#0 to live range equivalence class [ kbhit::return#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable abs_u8::return#0 to live range equivalence class [ abs_u8::return#0 ]
Added variable line::dx#0 to live range equivalence class [ line::dx#0 ]
Added variable abs_u8::return#1 to live range equivalence class [ abs_u8::return#1 ]
Added variable line::dy#0 to live range equivalence class [ line::dy#0 ]
Added variable sgn_u8::return#0 to live range equivalence class [ sgn_u8::return#0 ]
Added variable line::sx#0 to live range equivalence class [ line::sx#0 ]
Added variable sgn_u8::return#1 to live range equivalence class [ sgn_u8::return#1 ]
Added variable line::sy#0 to live range equivalence class [ line::sy#0 ]
Added variable line::plot2_y#0 to live range equivalence class [ line::plot2_y#0 ]
Added variable line::plot2_$0 to live range equivalence class [ line::plot2_$0 ]
Added variable line::plot2_$2 to live range equivalence class [ line::plot2_$2 ]
Added variable line::plot2_column#0 to live range equivalence class [ line::plot2_column#0 ]
Added variable line::plot2_$1 to live range equivalence class [ line::plot2_$1 ]
Added variable line::plot3_$0 to live range equivalence class [ line::plot3_$0 ]
Added variable line::plot3_$2 to live range equivalence class [ line::plot3_$2 ]
Added variable line::plot3_column#0 to live range equivalence class [ line::plot3_column#0 ]
Added variable line::plot3_$1 to live range equivalence class [ line::plot3_$1 ]
Added variable line::plot1_$0 to live range equivalence class [ line::plot1_$0 ]
Added variable line::plot1_$2 to live range equivalence class [ line::plot1_$2 ]
Added variable line::plot1_column#0 to live range equivalence class [ line::plot1_column#0 ]
Added variable line::plot1_$1 to live range equivalence class [ line::plot1_$1 ]
Added variable line::plot4_$0 to live range equivalence class [ line::plot4_$0 ]
Added variable line::plot4_$2 to live range equivalence class [ line::plot4_$2 ]
Added variable line::plot4_column#0 to live range equivalence class [ line::plot4_column#0 ]
Added variable line::plot4_$1 to live range equivalence class [ line::plot4_$1 ]
Added variable line::plot5_$0 to live range equivalence class [ line::plot5_$0 ]
Added variable line::plot5_$2 to live range equivalence class [ line::plot5_$2 ]
Added variable line::plot5_column#0 to live range equivalence class [ line::plot5_column#0 ]
Added variable line::plot5_$1 to live range equivalence class [ line::plot5_$1 ]
Added variable line::plot6_$0 to live range equivalence class [ line::plot6_$0 ]
Added variable line::plot6_$2 to live range equivalence class [ line::plot6_$2 ]
Added variable line::plot6_column#0 to live range equivalence class [ line::plot6_column#0 ]
Added variable line::plot6_$1 to live range equivalence class [ line::plot6_$1 ]
Added variable abs_u8::$0 to live range equivalence class [ abs_u8::$0 ]
Added variable sgn_u8::$0 to live range equivalence class [ sgn_u8::$0 ]
Complete equivalence classes
[ main::y#2 main::y#1 ]
[ main::cols#5 main::cols#1 ]
[ main::screen#5 main::screen#1 ]
[ main::p0_idx#2 main::p0_idx#1 ]
[ main::p1_idx#2 main::p1_idx#1 ]
[ main::p2_idx#2 main::p2_idx#1 ]
[ main::canvas#10 main::canvas#19 ]
[ main::x#2 main::x#1 ]
[ main::c#2 main::c#4 main::c#1 ]
[ memset::num#4 ]
[ memset::str#5 ]
[ memset::c#6 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ line::x2#15 line::x2#0 line::x2#1 line::x2#2 ]
[ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
[ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ]
[ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ]
[ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ]
[ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ]
[ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ]
[ eorfill::x#2 eorfill::x#1 ]
[ eorfill::line_column#2 eorfill::line_column#1 ]
[ eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 ]
[ eorfill::y#2 eorfill::y#1 ]
[ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ]
[ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ]
[ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ]
[ sgn_u8::return#4 ]
[ canvas_show_memory ]
[ canvas_show_flag ]
[ kbhit::return#2 ]
[ irq_bottom_2::$0 ]
[ main::x0#0 ]
[ main::y0#0 ]
[ main::x1#0 ]
[ main::y1#0 ]
[ main::x2#0 ]
[ main::y2#0 ]
[ main::canvas#1 ]
[ kbhit::return#0 ]
[ memset::end#0 ]
[ abs_u8::return#0 ]
[ line::dx#0 ]
[ abs_u8::return#1 ]
[ line::dy#0 ]
[ sgn_u8::return#0 ]
[ line::sx#0 ]
[ sgn_u8::return#1 ]
[ line::sy#0 ]
[ line::plot2_y#0 ]
[ line::plot2_$0 ]
[ line::plot2_$2 ]
[ line::plot2_column#0 ]
[ line::plot2_$1 ]
[ line::plot3_$0 ]
[ line::plot3_$2 ]
[ line::plot3_column#0 ]
[ line::plot3_$1 ]
[ line::plot1_$0 ]
[ line::plot1_$2 ]
[ line::plot1_column#0 ]
[ line::plot1_$1 ]
[ line::plot4_$0 ]
[ line::plot4_$2 ]
[ line::plot4_column#0 ]
[ line::plot4_$1 ]
[ line::plot5_$0 ]
[ line::plot5_$2 ]
[ line::plot5_column#0 ]
[ line::plot5_$1 ]
[ line::plot6_$0 ]
[ line::plot6_$2 ]
[ line::plot6_column#0 ]
[ line::plot6_$1 ]
[ abs_u8::$0 ]
[ sgn_u8::$0 ]
Allocated zp[1]:2 [ main::y#2 main::y#1 ]
Allocated zp[2]:3 [ main::cols#5 main::cols#1 ]
Allocated zp[2]:5 [ main::screen#5 main::screen#1 ]
Allocated zp[1]:7 [ main::p0_idx#2 main::p0_idx#1 ]
Allocated zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ]
Allocated zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ]
Allocated zp[2]:10 [ main::canvas#10 main::canvas#19 ]
Allocated zp[1]:12 [ main::x#2 main::x#1 ]
Allocated zp[1]:13 [ main::c#2 main::c#4 main::c#1 ]
Allocated zp[2]:14 [ memset::num#4 ]
Allocated zp[2]:16 [ memset::str#5 ]
Allocated zp[1]:18 [ memset::c#6 ]
Allocated zp[2]:19 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:21 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 ]
Allocated zp[1]:22 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
Allocated zp[1]:23 [ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ]
Allocated zp[1]:24 [ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ]
Allocated zp[1]:25 [ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ]
Allocated zp[1]:26 [ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ]
Allocated zp[1]:27 [ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ]
Allocated zp[1]:28 [ eorfill::x#2 eorfill::x#1 ]
Allocated zp[2]:29 [ eorfill::line_column#2 eorfill::line_column#1 ]
Allocated zp[2]:31 [ eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 ]
Allocated zp[1]:33 [ eorfill::y#2 eorfill::y#1 ]
Allocated zp[1]:34 [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ]
Allocated zp[1]:35 [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ]
Allocated zp[1]:36 [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ]
Allocated zp[1]:37 [ sgn_u8::return#4 ]
Allocated zp[1]:38 [ canvas_show_memory ]
Allocated zp[1]:39 [ canvas_show_flag ]
Allocated zp[1]:40 [ kbhit::return#2 ]
Allocated zp[1]:41 [ irq_bottom_2::$0 ]
Allocated zp[1]:42 [ main::x0#0 ]
Allocated zp[1]:43 [ main::y0#0 ]
Allocated zp[1]:44 [ main::x1#0 ]
Allocated zp[1]:45 [ main::y1#0 ]
Allocated zp[1]:46 [ main::x2#0 ]
Allocated zp[1]:47 [ main::y2#0 ]
Allocated zp[2]:48 [ main::canvas#1 ]
Allocated zp[1]:50 [ kbhit::return#0 ]
Allocated zp[2]:51 [ memset::end#0 ]
Allocated zp[1]:53 [ abs_u8::return#0 ]
Allocated zp[1]:54 [ line::dx#0 ]
Allocated zp[1]:55 [ abs_u8::return#1 ]
Allocated zp[1]:56 [ line::dy#0 ]
Allocated zp[1]:57 [ sgn_u8::return#0 ]
Allocated zp[1]:58 [ line::sx#0 ]
Allocated zp[1]:59 [ sgn_u8::return#1 ]
Allocated zp[1]:60 [ line::sy#0 ]
Allocated zp[1]:61 [ line::plot2_y#0 ]
Allocated zp[1]:62 [ line::plot2_$0 ]
Allocated zp[1]:63 [ line::plot2_$2 ]
Allocated zp[2]:64 [ line::plot2_column#0 ]
Allocated zp[1]:66 [ line::plot2_$1 ]
Allocated zp[1]:67 [ line::plot3_$0 ]
Allocated zp[1]:68 [ line::plot3_$2 ]
Allocated zp[2]:69 [ line::plot3_column#0 ]
Allocated zp[1]:71 [ line::plot3_$1 ]
Allocated zp[1]:72 [ line::plot1_$0 ]
Allocated zp[1]:73 [ line::plot1_$2 ]
Allocated zp[2]:74 [ line::plot1_column#0 ]
Allocated zp[1]:76 [ line::plot1_$1 ]
Allocated zp[1]:77 [ line::plot4_$0 ]
Allocated zp[1]:78 [ line::plot4_$2 ]
Allocated zp[2]:79 [ line::plot4_column#0 ]
Allocated zp[1]:81 [ line::plot4_$1 ]
Allocated zp[1]:82 [ line::plot5_$0 ]
Allocated zp[1]:83 [ line::plot5_$2 ]
Allocated zp[2]:84 [ line::plot5_column#0 ]
Allocated zp[1]:86 [ line::plot5_$1 ]
Allocated zp[1]:87 [ line::plot6_$0 ]
Allocated zp[1]:88 [ line::plot6_$2 ]
Allocated zp[2]:89 [ line::plot6_column#0 ]
Allocated zp[1]:91 [ line::plot6_$1 ]
Allocated zp[1]:92 [ abs_u8::$0 ]
Allocated zp[1]:93 [ sgn_u8::$0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] canvas_show_memory = __start::__init1_toD0181_return#0 [ canvas_show_memory ] (  [ canvas_show_memory ] { }  ) always clobbers reg byte a 
Statement [4] canvas_show_flag = 0 [ canvas_show_memory canvas_show_flag ] (  [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ canvas_show_memory ] (  [ canvas_show_memory ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [14] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_2::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [15] canvas_show_flag = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [16] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [18] *KERNEL_IRQ = &irq_bottom_1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [20] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = canvas_show_memory [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [21] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = DARK_GREY [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [23] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_1::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [24] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [25] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [26] *KERNEL_IRQ = &irq_bottom_2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [36] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ canvas_show_memory canvas_show_flag ] ( main:6 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [37] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK [ canvas_show_memory canvas_show_flag ] ( main:6 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = RED [ canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::p0_idx#2 main::p0_idx#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ]
Statement [69] if(0!=canvas_show_flag) goto main::@9 [ canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] ( main:6 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [71] eorfill::canvas#0 = main::canvas#10 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::canvas#0 ] ( main:6 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::canvas#0 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [73] main::canvas#1 = main::canvas#10 ^ CANVAS1^CANVAS2 [ canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] ( main:6 [ canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] { }  ) always clobbers reg byte a 
Statement [76] canvas_show_memory = canvas_show_memory ^ main::toD0181_return#0^main::toD0182_return#0 [ canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] ( main:6 [ canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] { }  ) always clobbers reg byte a 
Statement [77] canvas_show_flag = 1 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] { }  ) always clobbers reg byte a 
Statement [78] main::canvas#19 = (byte*)main::canvas#1 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#19 ] ( main:6 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#19 ] { }  ) always clobbers reg byte a 
Statement [82] main::cols#1 = main::cols#5 + $28 [ canvas_show_memory canvas_show_flag main::y#2 main::screen#5 main::cols#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::screen#5 main::cols#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::y#2 main::y#1 ]
Statement [83] main::screen#1 = main::screen#5 + $28 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#1 main::screen#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#1 main::screen#1 ] { }  ) always clobbers reg byte a 
Statement [85] main::cols#5[main::x#2] = WHITE [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ main::x#2 main::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:13 [ main::c#2 main::c#4 main::c#1 ]
Statement [86] main::screen#5[main::x#2] = main::c#2 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 ] { }  ) always clobbers reg byte a 
Statement [87] main::c#1 = main::c#2 + $10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#1 ] { }  ) always clobbers reg byte a 
Statement [89] *kbhit::CIA1_PORT_A = 0 [ ] ( kbhit:9 [ canvas_show_memory ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [90] kbhit::return#0 = ~ *kbhit::CIA1_PORT_B [ kbhit::return#0 ] ( kbhit:9 [ canvas_show_memory kbhit::return#0 ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [93] if(memset::num#4<=0) goto memset::@return [ memset::num#4 memset::str#5 memset::c#6 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::num#4 memset::str#5 memset::c#6 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::num#4 memset::str#5 memset::c#6 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::num#4 memset::str#5 memset::c#6 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::num#4 memset::str#5 memset::c#6 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ memset::c#6 ]
Statement [94] memset::end#0 = (byte*)memset::str#5 + memset::num#4 [ memset::str#5 memset::c#6 memset::end#0 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::str#5 memset::c#6 memset::end#0 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::str#5 memset::c#6 memset::end#0 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::str#5 memset::c#6 memset::end#0 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::str#5 memset::c#6 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [95] memset::dst#4 = (byte*)memset::str#5 [ memset::c#6 memset::end#0 memset::dst#4 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#4 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#4 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#4 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::c#6 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [97] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#6 memset::end#0 memset::dst#2 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::c#6 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [99] *memset::dst#2 = memset::c#6 [ memset::c#6 memset::end#0 memset::dst#2 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::c#6 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:18 [ memset::c#6 ]
Removing always clobbered register reg byte y as potential for zp[1]:7 [ main::p0_idx#2 main::p0_idx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ]
Statement [102] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [103] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $7f [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [104] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8 [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [105] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) = IRQ_RASTER [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [106] *KERNEL_IRQ = &irq_bottom_1 [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [109] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [110] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [111] *CIA2_TIMER_AB = $ffffffff [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [112] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [113] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [116] abs_u8::u#0 = line::x2#15 - line::x#0 [ line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::u#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:42 [ main::x0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:43 [ main::y0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:44 [ main::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:45 [ main::y1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:25 [ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ]
Removing always clobbered register reg byte a as potential for zp[1]:26 [ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ]
Removing always clobbered register reg byte a as potential for zp[1]:21 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:22 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:46 [ main::x2#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:47 [ main::y2#0 ]
Statement [120] abs_u8::u#1 = line::y2#10 - line::y#0 [ line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::u#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:54 [ line::dx#0 ]
Statement [124] sgn_u8::u#0 = line::x2#15 - line::x#0 [ line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:56 [ line::dy#0 ]
Statement [128] sgn_u8::u#1 = line::y2#10 - line::y#0 [ line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:58 [ line::sx#0 ]
Statement [138] line::e#0 = line::dy#0 >> 1 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::y2#13 line::e#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:60 [ line::sy#0 ]
Statement [140] line::y#10 = line::y#7 + line::sy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#15 line::y#10 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#15 line::y#10 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#15 line::y#10 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#15 line::y#10 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ]
Statement [141] line::e#1 = line::e#3 + line::dx#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [143] line::plot2_y#0 = line::y#10 - line::sy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [144] line::plot2_$0 = line::x#15 >> 3 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:61 [ line::plot2_y#0 ]
Statement [145] line::plot2_$2 = line::plot2_$0 << 1 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [146] line::plot2_column#0 = plot_column[line::plot2_$2] [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [147] line::plot2_$1 = line::x#15 & 7 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 line::plot2_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [148] line::plot2_column#0[line::plot2_y#0] = line::plot2_column#0[line::plot2_y#0] | plot_bit[line::plot2_$1] [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [149] line::x#1 = line::x#15 + line::sx#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::e#1 line::x#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::e#1 line::x#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::e#1 line::x#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::e#1 line::x#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [150] line::e#2 = line::e#1 - line::dy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::x#1 line::e#2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::x#1 line::e#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::x#1 line::e#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::x#1 line::e#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [153] line::plot3_$0 = line::x#17 >> 3 [ line::y#10 line::x#17 line::plot3_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#10 line::x#17 line::plot3_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#10 line::x#17 line::plot3_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#10 line::x#17 line::plot3_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [154] line::plot3_$2 = line::plot3_$0 << 1 [ line::y#10 line::x#17 line::plot3_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#10 line::x#17 line::plot3_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#10 line::x#17 line::plot3_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#10 line::x#17 line::plot3_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [155] line::plot3_column#0 = plot_column[line::plot3_$2] [ line::y#10 line::x#17 line::plot3_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#10 line::x#17 line::plot3_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#10 line::x#17 line::plot3_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#10 line::x#17 line::plot3_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [156] line::plot3_$1 = line::x#17 & 7 [ line::y#10 line::plot3_column#0 line::plot3_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#10 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#10 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#10 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [157] line::plot3_column#0[line::y#10] = line::plot3_column#0[line::y#10] | plot_bit[line::plot3_$1] [ ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [159] line::plot1_$0 = line::x#0 >> 3 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [160] line::plot1_$2 = line::plot1_$0 << 1 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [161] line::plot1_column#0 = plot_column[line::plot1_$2] [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [162] line::plot1_$1 = line::x#0 & 7 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 line::plot1_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [163] line::plot1_column#0[line::y#17] = line::plot1_column#0[line::y#17] | plot_bit[line::plot1_$1] [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [165] line::e1#0 = line::dy#0 >> 1 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e1#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e1#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e1#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e1#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [167] line::y#12 = line::y#11 + line::sy#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::e1#3 line::x#18 line::y#12 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::e1#3 line::x#18 line::y#12 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::e1#3 line::x#18 line::y#12 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::e1#3 line::x#18 line::y#12 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:24 [ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ]
Statement [168] line::e1#1 = line::e1#3 + line::dx#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#18 line::y#12 line::e1#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#18 line::y#12 line::e1#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#18 line::y#12 line::e1#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#18 line::y#12 line::e1#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [170] line::x#19 = line::x#18 + line::sx#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#1 line::x#19 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#1 line::x#19 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#1 line::x#19 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#1 line::x#19 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [171] line::e1#2 = line::e1#1 - line::dy#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [172] line::plot4_$0 = line::x#19 >> 3 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [173] line::plot4_$2 = line::plot4_$0 << 1 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [174] line::plot4_column#0 = plot_column[line::plot4_$2] [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [175] line::plot4_$1 = line::x#19 & 7 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 line::plot4_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [176] line::plot4_column#0[line::y#12] = line::plot4_column#0[line::y#12] | plot_bit[line::plot4_$1] [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [178] line::e2#0 = line::dx#0 >> 1 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e2#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e2#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e2#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e2#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [180] line::plot5_$0 = line::x#10 >> 3 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:27 [ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ]
Statement [181] line::plot5_$2 = line::plot5_$0 << 1 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [182] line::plot5_column#0 = plot_column[line::plot5_$2] [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [183] line::plot5_$1 = line::x#10 & 7 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 line::plot5_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 line::plot5_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 line::plot5_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 line::plot5_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [184] line::plot5_column#0[line::y#13] = line::plot5_column#0[line::y#13] | plot_bit[line::plot5_$1] [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [185] line::x#12 = line::x#10 + line::sx#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e2#3 line::x#12 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e2#3 line::x#12 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e2#3 line::x#12 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e2#3 line::x#12 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [186] line::e2#1 = line::e2#3 + line::dy#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::x#12 line::e2#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::x#12 line::e2#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::x#12 line::e2#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::x#12 line::e2#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [188] line::y#4 = line::y#13 + line::sy#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::e2#1 line::y#4 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::e2#1 line::y#4 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::e2#1 line::y#4 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::e2#1 line::y#4 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [189] line::e2#2 = line::e2#1 - line::dx#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#4 line::e2#2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#4 line::e2#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#4 line::e2#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#4 line::e2#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [192] line::plot6_$0 = line::x#12 >> 3 [ line::x#12 line::y#15 line::plot6_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#12 line::y#15 line::plot6_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#12 line::y#15 line::plot6_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#12 line::y#15 line::plot6_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [193] line::plot6_$2 = line::plot6_$0 << 1 [ line::x#12 line::y#15 line::plot6_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#12 line::y#15 line::plot6_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#12 line::y#15 line::plot6_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#12 line::y#15 line::plot6_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [194] line::plot6_column#0 = plot_column[line::plot6_$2] [ line::x#12 line::y#15 line::plot6_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#12 line::y#15 line::plot6_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#12 line::y#15 line::plot6_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#12 line::y#15 line::plot6_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [195] line::plot6_$1 = line::x#12 & 7 [ line::y#15 line::plot6_column#0 line::plot6_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#15 line::plot6_column#0 line::plot6_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#15 line::plot6_column#0 line::plot6_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#15 line::plot6_column#0 line::plot6_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [196] line::plot6_column#0[line::y#15] = line::plot6_column#0[line::y#15] | plot_bit[line::plot6_$1] [ ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [201] eorfill::eor#0 = *eorfill::line_column#2 [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::eor#0 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::eor#0 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:28 [ eorfill::x#2 eorfill::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:28 [ eorfill::x#2 eorfill::x#1 ]
Statement [202] *eorfill::fill_column#2 = eorfill::eor#0 [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::eor#0 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::eor#0 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:34 [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ]
Statement [205] eorfill::line_column#1 = eorfill::line_column#2 + (byte)$10*8 [ eorfill::x#2 eorfill::fill_column#2 eorfill::line_column#1 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::fill_column#2 eorfill::line_column#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [206] eorfill::fill_column#1 = eorfill::fill_column#2 + (byte)$10*8 [ eorfill::x#2 eorfill::line_column#1 eorfill::fill_column#1 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::line_column#1 eorfill::fill_column#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [208] eorfill::eor#1 = eorfill::eor#2 ^ eorfill::line_column#2[eorfill::y#2] [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::y#2 eorfill::eor#1 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::y#2 eorfill::eor#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:33 [ eorfill::y#2 eorfill::y#1 ]
Statement [214] abs_u8::return#2 = - abs_u8::u#2 [ abs_u8::return#2 ] ( main:6::line:52::abs_u8:117 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:59::abs_u8:117 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:64::abs_u8:117 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:52::abs_u8:121 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:6::line:59::abs_u8:121 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:6::line:64::abs_u8:121 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Statement [3] canvas_show_memory = __start::__init1_toD0181_return#0 [ canvas_show_memory ] (  [ canvas_show_memory ] { }  ) always clobbers reg byte a 
Statement [4] canvas_show_flag = 0 [ canvas_show_memory canvas_show_flag ] (  [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ canvas_show_memory ] (  [ canvas_show_memory ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [14] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_2::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [15] canvas_show_flag = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [16] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [18] *KERNEL_IRQ = &irq_bottom_1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [20] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = canvas_show_memory [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [21] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = DARK_GREY [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [23] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_1::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [24] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [25] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [26] *KERNEL_IRQ = &irq_bottom_2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [36] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ canvas_show_memory canvas_show_flag ] ( main:6 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [37] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK [ canvas_show_memory canvas_show_flag ] ( main:6 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = RED [ canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] { }  ) always clobbers reg byte a 
Statement [69] if(0!=canvas_show_flag) goto main::@9 [ canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] ( main:6 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [71] eorfill::canvas#0 = main::canvas#10 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::canvas#0 ] ( main:6 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::canvas#0 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [73] main::canvas#1 = main::canvas#10 ^ CANVAS1^CANVAS2 [ canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] ( main:6 [ canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] { }  ) always clobbers reg byte a 
Statement [76] canvas_show_memory = canvas_show_memory ^ main::toD0181_return#0^main::toD0182_return#0 [ canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] ( main:6 [ canvas_show_memory main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] { }  ) always clobbers reg byte a 
Statement [77] canvas_show_flag = 1 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#1 ] { }  ) always clobbers reg byte a 
Statement [78] main::canvas#19 = (byte*)main::canvas#1 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#19 ] ( main:6 [ canvas_show_memory canvas_show_flag main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 main::canvas#19 ] { }  ) always clobbers reg byte a 
Statement [82] main::cols#1 = main::cols#5 + $28 [ canvas_show_memory canvas_show_flag main::y#2 main::screen#5 main::cols#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::screen#5 main::cols#1 ] { }  ) always clobbers reg byte a 
Statement [83] main::screen#1 = main::screen#5 + $28 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#1 main::screen#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#1 main::screen#1 ] { }  ) always clobbers reg byte a 
Statement [85] main::cols#5[main::x#2] = WHITE [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 ] { }  ) always clobbers reg byte a 
Statement [86] main::screen#5[main::x#2] = main::c#2 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#2 ] { }  ) always clobbers reg byte a 
Statement [87] main::c#1 = main::c#2 + $10 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#1 ] ( main:6 [ canvas_show_memory canvas_show_flag main::y#2 main::cols#5 main::screen#5 main::x#2 main::c#1 ] { }  ) always clobbers reg byte a 
Statement [89] *kbhit::CIA1_PORT_A = 0 [ ] ( kbhit:9 [ canvas_show_memory ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [90] kbhit::return#0 = ~ *kbhit::CIA1_PORT_B [ kbhit::return#0 ] ( kbhit:9 [ canvas_show_memory kbhit::return#0 ] { { kbhit::return#0 = kbhit::return#2 } }  ) always clobbers reg byte a 
Statement [93] if(memset::num#4<=0) goto memset::@return [ memset::num#4 memset::str#5 memset::c#6 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::num#4 memset::str#5 memset::c#6 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::num#4 memset::str#5 memset::c#6 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::num#4 memset::str#5 memset::c#6 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::num#4 memset::str#5 memset::c#6 ] { }  ) always clobbers reg byte a 
Statement [94] memset::end#0 = (byte*)memset::str#5 + memset::num#4 [ memset::str#5 memset::c#6 memset::end#0 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::str#5 memset::c#6 memset::end#0 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::str#5 memset::c#6 memset::end#0 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::str#5 memset::c#6 memset::end#0 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::str#5 memset::c#6 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [95] memset::dst#4 = (byte*)memset::str#5 [ memset::c#6 memset::end#0 memset::dst#4 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#4 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#4 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#4 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::c#6 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [97] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#6 memset::end#0 memset::dst#2 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::c#6 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [99] *memset::dst#2 = memset::c#6 [ memset::c#6 memset::end#0 memset::dst#2 ] ( main:6::memset:29 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:31 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:33 [ canvas_show_memory canvas_show_flag memset::c#6 memset::end#0 memset::dst#2 ] { }  main:6::memset:43 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 memset::c#6 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [102] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [103] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $7f [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [104] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8 [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [105] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) = IRQ_RASTER [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [106] *KERNEL_IRQ = &irq_bottom_1 [ ] ( main:6::setup_irq:38 [ canvas_show_memory canvas_show_flag ] { }  ) always clobbers reg byte a 
Statement [109] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [110] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [111] *CIA2_TIMER_AB = $ffffffff [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [112] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [113] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START [ ] ( main:6::clock_start:41 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { }  ) always clobbers reg byte a 
Statement [116] abs_u8::u#0 = line::x2#15 - line::x#0 [ line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::u#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::u#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Statement [120] abs_u8::u#1 = line::y2#10 - line::y#0 [ line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::u#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::u#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Statement [124] sgn_u8::u#0 = line::x2#15 - line::x#0 [ line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 sgn_u8::u#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { sgn_u8::u#0 = sgn_u8::u#2 } { sgn_u8::return#0 = sgn_u8::return#4 } }  ) always clobbers reg byte a 
Statement [128] sgn_u8::u#1 = line::y2#10 - line::y#0 [ line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 line::dy#0 line::sx#0 sgn_u8::u#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { sgn_u8::u#1 = sgn_u8::u#2 } { sgn_u8::return#1 = sgn_u8::return#4 } }  ) always clobbers reg byte a 
Statement [138] line::e#0 = line::dy#0 >> 1 [ line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::y2#13 line::e#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::y2#13 line::e#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [140] line::y#10 = line::y#7 + line::sy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#15 line::y#10 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#15 line::y#10 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#15 line::y#10 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::e#3 line::x#15 line::y#10 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [141] line::e#1 = line::e#3 + line::dx#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [143] line::plot2_y#0 = line::y#10 - line::sy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [144] line::plot2_$0 = line::x#15 >> 3 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [145] line::plot2_$2 = line::plot2_$0 << 1 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [146] line::plot2_column#0 = plot_column[line::plot2_$2] [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [147] line::plot2_$1 = line::x#15 & 7 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 line::plot2_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 line::plot2_y#0 line::plot2_column#0 line::plot2_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [148] line::plot2_column#0[line::plot2_y#0] = line::plot2_column#0[line::plot2_y#0] | plot_bit[line::plot2_$1] [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::x#15 line::y#10 line::e#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [149] line::x#1 = line::x#15 + line::sx#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::e#1 line::x#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::e#1 line::x#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::e#1 line::x#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::e#1 line::x#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [150] line::e#2 = line::e#1 - line::dy#0 [ line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::x#1 line::e#2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::x#1 line::e#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::x#1 line::e#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y2#13 line::y#10 line::x#1 line::e#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [153] line::plot3_$0 = line::x#17 >> 3 [ line::y#10 line::x#17 line::plot3_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#10 line::x#17 line::plot3_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#10 line::x#17 line::plot3_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#10 line::x#17 line::plot3_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [154] line::plot3_$2 = line::plot3_$0 << 1 [ line::y#10 line::x#17 line::plot3_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#10 line::x#17 line::plot3_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#10 line::x#17 line::plot3_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#10 line::x#17 line::plot3_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [155] line::plot3_column#0 = plot_column[line::plot3_$2] [ line::y#10 line::x#17 line::plot3_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#10 line::x#17 line::plot3_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#10 line::x#17 line::plot3_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#10 line::x#17 line::plot3_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [156] line::plot3_$1 = line::x#17 & 7 [ line::y#10 line::plot3_column#0 line::plot3_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#10 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#10 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#10 line::plot3_column#0 line::plot3_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [157] line::plot3_column#0[line::y#10] = line::plot3_column#0[line::y#10] | plot_bit[line::plot3_$1] [ ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [159] line::plot1_$0 = line::x#0 >> 3 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [160] line::plot1_$2 = line::plot1_$0 << 1 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [161] line::plot1_column#0 = plot_column[line::plot1_$2] [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [162] line::plot1_$1 = line::x#0 & 7 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 line::plot1_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::plot1_column#0 line::plot1_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [163] line::plot1_column#0[line::y#17] = line::plot1_column#0[line::y#17] | plot_bit[line::plot1_$1] [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [165] line::e1#0 = line::dy#0 >> 1 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e1#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e1#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e1#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e1#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [167] line::y#12 = line::y#11 + line::sy#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::e1#3 line::x#18 line::y#12 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::e1#3 line::x#18 line::y#12 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::e1#3 line::x#18 line::y#12 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::e1#3 line::x#18 line::y#12 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [168] line::e1#1 = line::e1#3 + line::dx#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#18 line::y#12 line::e1#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#18 line::y#12 line::e1#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#18 line::y#12 line::e1#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#18 line::y#12 line::e1#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [170] line::x#19 = line::x#18 + line::sx#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#1 line::x#19 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#1 line::x#19 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#1 line::x#19 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#1 line::x#19 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [171] line::e1#2 = line::e1#1 - line::dy#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [172] line::plot4_$0 = line::x#19 >> 3 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [173] line::plot4_$2 = line::plot4_$0 << 1 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [174] line::plot4_column#0 = plot_column[line::plot4_$2] [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [175] line::plot4_$1 = line::x#19 & 7 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 line::plot4_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 line::plot4_column#0 line::plot4_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [176] line::plot4_column#0[line::y#12] = line::plot4_column#0[line::y#12] | plot_bit[line::plot4_$1] [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#12 line::e1#2 line::x#19 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [178] line::e2#0 = line::dx#0 >> 1 [ line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e2#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e2#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e2#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#17 line::e2#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [180] line::plot5_$0 = line::x#10 >> 3 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [181] line::plot5_$2 = line::plot5_$0 << 1 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [182] line::plot5_column#0 = plot_column[line::plot5_$2] [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [183] line::plot5_$1 = line::x#10 & 7 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 line::plot5_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 line::plot5_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 line::plot5_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 line::plot5_column#0 line::plot5_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [184] line::plot5_column#0[line::y#13] = line::plot5_column#0[line::y#13] | plot_bit[line::plot5_$1] [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#10 line::y#13 line::e2#3 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [185] line::x#12 = line::x#10 + line::sx#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e2#3 line::x#12 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e2#3 line::x#12 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e2#3 line::x#12 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::e2#3 line::x#12 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [186] line::e2#1 = line::e2#3 + line::dy#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::x#12 line::e2#1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::x#12 line::e2#1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::x#12 line::e2#1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::y#13 line::x#12 line::e2#1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [188] line::y#4 = line::y#13 + line::sy#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::e2#1 line::y#4 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::e2#1 line::y#4 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::e2#1 line::y#4 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::e2#1 line::y#4 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [189] line::e2#2 = line::e2#1 - line::dx#0 [ line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#4 line::e2#2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#4 line::e2#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#4 line::e2#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x2#15 line::dx#0 line::dy#0 line::sx#0 line::sy#0 line::x#12 line::y#4 line::e2#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [192] line::plot6_$0 = line::x#12 >> 3 [ line::x#12 line::y#15 line::plot6_$0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#12 line::y#15 line::plot6_$0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#12 line::y#15 line::plot6_$0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#12 line::y#15 line::plot6_$0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [193] line::plot6_$2 = line::plot6_$0 << 1 [ line::x#12 line::y#15 line::plot6_$2 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#12 line::y#15 line::plot6_$2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#12 line::y#15 line::plot6_$2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#12 line::y#15 line::plot6_$2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [194] line::plot6_column#0 = plot_column[line::plot6_$2] [ line::x#12 line::y#15 line::plot6_column#0 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#12 line::y#15 line::plot6_column#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#12 line::y#15 line::plot6_column#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#12 line::y#15 line::plot6_column#0 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [195] line::plot6_$1 = line::x#12 & 7 [ line::y#15 line::plot6_column#0 line::plot6_$1 ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::y#15 line::plot6_column#0 line::plot6_$1 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::y#15 line::plot6_column#0 line::plot6_$1 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::y#15 line::plot6_column#0 line::plot6_$1 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [196] line::plot6_column#0[line::y#15] = line::plot6_column#0[line::y#15] | plot_bit[line::plot6_$1] [ ] ( main:6::line:52 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } }  main:6::line:59 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } }  main:6::line:64 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } }  ) always clobbers reg byte a 
Statement [201] eorfill::eor#0 = *eorfill::line_column#2 [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::eor#0 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::eor#0 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a reg byte y 
Statement [202] *eorfill::fill_column#2 = eorfill::eor#0 [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::eor#0 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::eor#0 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte y 
Statement [205] eorfill::line_column#1 = eorfill::line_column#2 + (byte)$10*8 [ eorfill::x#2 eorfill::fill_column#2 eorfill::line_column#1 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::fill_column#2 eorfill::line_column#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [206] eorfill::fill_column#1 = eorfill::fill_column#2 + (byte)$10*8 [ eorfill::x#2 eorfill::line_column#1 eorfill::fill_column#1 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::line_column#1 eorfill::fill_column#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [208] eorfill::eor#1 = eorfill::eor#2 ^ eorfill::line_column#2[eorfill::y#2] [ eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::y#2 eorfill::eor#1 ] ( main:6::eorfill:72 [ canvas_show_memory main::canvas#10 main::p0_idx#1 main::p1_idx#1 main::p2_idx#1 eorfill::x#2 eorfill::line_column#2 eorfill::fill_column#2 eorfill::y#2 eorfill::eor#1 ] { { eorfill::canvas#0 = main::canvas#10 } }  ) always clobbers reg byte a 
Statement [214] abs_u8::return#2 = - abs_u8::u#2 [ abs_u8::return#2 ] ( main:6::line:52::abs_u8:117 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:59::abs_u8:117 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:64::abs_u8:117 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 abs_u8::return#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#0 = abs_u8::u#2 } { abs_u8::return#0 = abs_u8::return#4 } }  main:6::line:52::abs_u8:121 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x1#0 main::y1#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#0 main::x0#0 } { line::y#0 = line::y1#0 main::y0#0 } { line::x2#0 = line::x2#15 main::x1#0 } { line::y2#0 = line::y2#10 main::y1#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:6::line:59::abs_u8:121 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 main::x0#0 main::y0#0 main::x2#0 main::y2#0 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#1 main::x1#0 } { line::y#0 = line::y1#1 main::y1#0 } { line::x2#1 = line::x2#15 main::x2#0 } { line::y2#1 = line::y2#10 main::y2#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  main:6::line:64::abs_u8:121 [ canvas_show_memory canvas_show_flag main::p0_idx#2 main::p1_idx#2 main::p2_idx#2 main::canvas#10 line::x#0 line::y#0 line::x2#15 line::y2#10 line::dx#0 abs_u8::return#2 ] { { line::x#0 = line::x1#2 main::x2#0 } { line::y#0 = line::y1#2 main::y2#0 } { line::x2#15 = line::x2#2 main::x0#0 } { line::y2#10 = line::y2#2 main::y0#0 } { abs_u8::u#1 = abs_u8::u#2 } { abs_u8::return#1 = abs_u8::return#4 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::y#2 main::y#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[2]:3 [ main::cols#5 main::cols#1 ] : zp[2]:3 , 
Potential registers zp[2]:5 [ main::screen#5 main::screen#1 ] : zp[2]:5 , 
Potential registers zp[1]:7 [ main::p0_idx#2 main::p0_idx#1 ] : zp[1]:7 , reg byte x , 
Potential registers zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ] : zp[1]:8 , reg byte x , 
Potential registers zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ] : zp[1]:9 , reg byte x , 
Potential registers zp[2]:10 [ main::canvas#10 main::canvas#19 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ main::x#2 main::x#1 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ main::c#2 main::c#4 main::c#1 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[2]:14 [ memset::num#4 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ memset::str#5 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ memset::c#6 ] : zp[1]:18 , reg byte x , 
Potential registers zp[2]:19 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:19 , 
Potential registers zp[1]:21 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 ] : zp[1]:21 , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ] : zp[1]:22 , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ] : zp[1]:24 , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ] : zp[1]:25 , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ] : zp[1]:26 , reg byte x , reg byte y , 
Potential registers zp[1]:27 [ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ] : zp[1]:27 , reg byte x , reg byte y , 
Potential registers zp[1]:28 [ eorfill::x#2 eorfill::x#1 ] : zp[1]:28 , reg byte x , 
Potential registers zp[2]:29 [ eorfill::line_column#2 eorfill::line_column#1 ] : zp[2]:29 , 
Potential registers zp[2]:31 [ eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 ] : zp[2]:31 , 
Potential registers zp[1]:33 [ eorfill::y#2 eorfill::y#1 ] : zp[1]:33 , reg byte x , reg byte y , 
Potential registers zp[1]:34 [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ] : zp[1]:34 , reg byte a , reg byte x , 
Potential registers zp[1]:35 [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:36 [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ sgn_u8::return#4 ] : zp[1]:37 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:38 [ canvas_show_memory ] : zp[1]:38 , 
Potential registers zp[1]:39 [ canvas_show_flag ] : zp[1]:39 , 
Potential registers zp[1]:40 [ kbhit::return#2 ] : zp[1]:40 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:41 [ irq_bottom_2::$0 ] : zp[1]:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:42 [ main::x0#0 ] : zp[1]:42 , reg byte x , reg byte y , 
Potential registers zp[1]:43 [ main::y0#0 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[1]:44 [ main::x1#0 ] : zp[1]:44 , reg byte x , reg byte y , 
Potential registers zp[1]:45 [ main::y1#0 ] : zp[1]:45 , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ main::x2#0 ] : zp[1]:46 , reg byte x , reg byte y , 
Potential registers zp[1]:47 [ main::y2#0 ] : zp[1]:47 , reg byte x , reg byte y , 
Potential registers zp[2]:48 [ main::canvas#1 ] : zp[2]:48 , 
Potential registers zp[1]:50 [ kbhit::return#0 ] : zp[1]:50 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:51 [ memset::end#0 ] : zp[2]:51 , 
Potential registers zp[1]:53 [ abs_u8::return#0 ] : zp[1]:53 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:54 [ line::dx#0 ] : zp[1]:54 , reg byte x , reg byte y , 
Potential registers zp[1]:55 [ abs_u8::return#1 ] : zp[1]:55 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:56 [ line::dy#0 ] : zp[1]:56 , reg byte x , reg byte y , 
Potential registers zp[1]:57 [ sgn_u8::return#0 ] : zp[1]:57 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:58 [ line::sx#0 ] : zp[1]:58 , reg byte x , reg byte y , 
Potential registers zp[1]:59 [ sgn_u8::return#1 ] : zp[1]:59 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:60 [ line::sy#0 ] : zp[1]:60 , reg byte x , reg byte y , 
Potential registers zp[1]:61 [ line::plot2_y#0 ] : zp[1]:61 , reg byte x , reg byte y , 
Potential registers zp[1]:62 [ line::plot2_$0 ] : zp[1]:62 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ line::plot2_$2 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:64 [ line::plot2_column#0 ] : zp[2]:64 , 
Potential registers zp[1]:66 [ line::plot2_$1 ] : zp[1]:66 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:67 [ line::plot3_$0 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ line::plot3_$2 ] : zp[1]:68 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:69 [ line::plot3_column#0 ] : zp[2]:69 , 
Potential registers zp[1]:71 [ line::plot3_$1 ] : zp[1]:71 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:72 [ line::plot1_$0 ] : zp[1]:72 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:73 [ line::plot1_$2 ] : zp[1]:73 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:74 [ line::plot1_column#0 ] : zp[2]:74 , 
Potential registers zp[1]:76 [ line::plot1_$1 ] : zp[1]:76 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:77 [ line::plot4_$0 ] : zp[1]:77 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:78 [ line::plot4_$2 ] : zp[1]:78 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:79 [ line::plot4_column#0 ] : zp[2]:79 , 
Potential registers zp[1]:81 [ line::plot4_$1 ] : zp[1]:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:82 [ line::plot5_$0 ] : zp[1]:82 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:83 [ line::plot5_$2 ] : zp[1]:83 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:84 [ line::plot5_column#0 ] : zp[2]:84 , 
Potential registers zp[1]:86 [ line::plot5_$1 ] : zp[1]:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:87 [ line::plot6_$0 ] : zp[1]:87 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:88 [ line::plot6_$2 ] : zp[1]:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:89 [ line::plot6_column#0 ] : zp[2]:89 , 
Potential registers zp[1]:91 [ line::plot6_$1 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:92 [ abs_u8::$0 ] : zp[1]:92 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:93 [ sgn_u8::$0 ] : zp[1]:93 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [line] 2,742,774.47: zp[1]:26 [ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ] 2,114,410.38: zp[1]:24 [ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ] 920,669.08: zp[1]:25 [ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ] 514,054.88: zp[1]:27 [ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ] 496,951.89: zp[1]:23 [ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ] 200,002: zp[1]:62 [ line::plot2_$0 ] 200,002: zp[1]:63 [ line::plot2_$2 ] 200,002: zp[1]:66 [ line::plot2_$1 ] 200,002: zp[1]:77 [ line::plot4_$0 ] 200,002: zp[1]:78 [ line::plot4_$2 ] 200,002: zp[1]:81 [ line::plot4_$1 ] 200,002: zp[1]:82 [ line::plot5_$0 ] 200,002: zp[1]:83 [ line::plot5_$2 ] 200,002: zp[1]:86 [ line::plot5_$1 ] 150,001.5: zp[2]:64 [ line::plot2_column#0 ] 150,001.5: zp[2]:79 [ line::plot4_column#0 ] 150,001.5: zp[2]:84 [ line::plot5_column#0 ] 60,000.6: zp[1]:61 [ line::plot2_y#0 ] 23,672.84: zp[1]:60 [ line::sy#0 ] 22,285.86: zp[1]:56 [ line::dy#0 ] 19,462.81: zp[1]:54 [ line::dx#0 ] 8,501.52: zp[1]:22 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ] 5,135.69: zp[1]:58 [ line::sx#0 ] 3,915.62: zp[1]:21 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 ] 2,002: zp[1]:67 [ line::plot3_$0 ] 2,002: zp[1]:68 [ line::plot3_$2 ] 2,002: zp[1]:71 [ line::plot3_$1 ] 2,002: zp[1]:72 [ line::plot1_$0 ] 2,002: zp[1]:73 [ line::plot1_$2 ] 2,002: zp[1]:76 [ line::plot1_$1 ] 2,002: zp[1]:87 [ line::plot6_$0 ] 2,002: zp[1]:88 [ line::plot6_$2 ] 2,002: zp[1]:91 [ line::plot6_$1 ] 1,501.5: zp[2]:69 [ line::plot3_column#0 ] 1,501.5: zp[2]:74 [ line::plot1_column#0 ] 1,501.5: zp[2]:89 [ line::plot6_column#0 ] 
Uplift Scope [eorfill] 3,250,003.25: zp[1]:33 [ eorfill::y#2 eorfill::y#1 ] 2,200,004: zp[1]:34 [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ] 230,652.5: zp[2]:31 [ eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 ] 227,275: zp[1]:28 [ eorfill::x#2 eorfill::x#1 ] 211,112.22: zp[2]:29 [ eorfill::line_column#2 eorfill::line_column#1 ] 
Uplift Scope [memset] 335,672.33: zp[2]:19 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,833.67: zp[2]:51 [ memset::end#0 ] 12,500.12: zp[1]:18 [ memset::c#6 ] 1,001: zp[2]:14 [ memset::num#4 ] 0: zp[2]:16 [ memset::str#5 ] 
Uplift Scope [abs_u8] 40,175.33: zp[1]:35 [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ] 20,002: zp[1]:92 [ abs_u8::$0 ] 2,002: zp[1]:53 [ abs_u8::return#0 ] 2,002: zp[1]:55 [ abs_u8::return#1 ] 
Uplift Scope [sgn_u8] 20,002: zp[1]:93 [ sgn_u8::$0 ] 16,007: zp[1]:36 [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ] 2,002: zp[1]:57 [ sgn_u8::return#0 ] 2,002: zp[1]:59 [ sgn_u8::return#1 ] 500.5: zp[1]:37 [ sgn_u8::return#4 ] 
Uplift Scope [main] 3,003: zp[1]:12 [ main::x#2 main::x#1 ] 1,979: zp[1]:13 [ main::c#2 main::c#4 main::c#1 ] 238.73: zp[1]:2 [ main::y#2 main::y#1 ] 221.3: zp[2]:5 [ main::screen#5 main::screen#1 ] 210.91: zp[2]:10 [ main::canvas#10 main::canvas#19 ] 201: zp[2]:3 [ main::cols#5 main::cols#1 ] 43.29: zp[1]:46 [ main::x2#0 ] 43.29: zp[1]:47 [ main::y2#0 ] 33.67: zp[1]:44 [ main::x1#0 ] 33.67: zp[1]:45 [ main::y1#0 ] 31.26: zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ] 30.5: zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ] 29.97: zp[1]:7 [ main::p0_idx#2 main::p0_idx#1 ] 20.2: zp[2]:48 [ main::canvas#1 ] 16.83: zp[1]:42 [ main::x0#0 ] 16.83: zp[1]:43 [ main::y0#0 ] 
Uplift Scope [] 19.75: zp[1]:39 [ canvas_show_flag ] 2.99: zp[1]:38 [ canvas_show_memory ] 
Uplift Scope [kbhit] 4.33: zp[1]:50 [ kbhit::return#0 ] 4: zp[1]:40 [ kbhit::return#2 ] 
Uplift Scope [irq_bottom_2] 4: zp[1]:41 [ irq_bottom_2::$0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [clock_start] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [setup_irq] 
Uplift Scope [irq_bottom_1] 
Uplift Scope [__start] 

Uplifting [eorfill] best 130779 combination reg byte y [ eorfill::y#2 eorfill::y#1 ] reg byte a [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ] zp[2]:31 [ eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 ] reg byte x [ eorfill::x#2 eorfill::x#1 ] zp[2]:29 [ eorfill::line_column#2 eorfill::line_column#1 ] 
Uplifting [memset] best 130667 combination zp[2]:19 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:51 [ memset::end#0 ] reg byte x [ memset::c#6 ] zp[2]:14 [ memset::num#4 ] zp[2]:16 [ memset::str#5 ] 
Uplifting [abs_u8] best 130630 combination reg byte a [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ] reg byte x [ abs_u8::$0 ] reg byte a [ abs_u8::return#0 ] reg byte a [ abs_u8::return#1 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [sgn_u8] best 130603 combination reg byte a [ sgn_u8::$0 ] reg byte a [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ] reg byte a [ sgn_u8::return#0 ] reg byte a [ sgn_u8::return#1 ] zp[1]:37 [ sgn_u8::return#4 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [main] best 128573 combination reg byte y [ main::x#2 main::x#1 ] reg byte x [ main::c#2 main::c#4 main::c#1 ] zp[1]:2 [ main::y#2 main::y#1 ] zp[2]:5 [ main::screen#5 main::screen#1 ] zp[2]:10 [ main::canvas#10 main::canvas#19 ] zp[2]:3 [ main::cols#5 main::cols#1 ] zp[1]:46 [ main::x2#0 ] zp[1]:47 [ main::y2#0 ] zp[1]:44 [ main::x1#0 ] zp[1]:45 [ main::y1#0 ] zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ] zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ] zp[1]:7 [ main::p0_idx#2 main::p0_idx#1 ] zp[2]:48 [ main::canvas#1 ] zp[1]:42 [ main::x0#0 ] zp[1]:43 [ main::y0#0 ] 
Limited combination testing to 100 combinations of 157464 possible.
Uplifting [] best 128573 combination zp[1]:39 [ canvas_show_flag ] zp[1]:38 [ canvas_show_memory ] 
Uplifting [kbhit] best 128561 combination reg byte a [ kbhit::return#0 ] reg byte a [ kbhit::return#2 ] 
Uplifting [irq_bottom_2] best 128555 combination reg byte a [ irq_bottom_2::$0 ] 
Uplifting [MOS6526_CIA] best 128555 combination 
Uplifting [MOS6569_VICII] best 128555 combination 
Uplifting [MOS6581_SID] best 128555 combination 
Uplifting [clock_start] best 128555 combination 
Uplifting [RADIX] best 128555 combination 
Uplifting [printf_format_number] best 128555 combination 
Uplifting [printf_buffer_number] best 128555 combination 
Uplifting [printf_format_string] best 128555 combination 
Uplifting [setup_irq] best 128555 combination 
Uplifting [irq_bottom_1] best 128555 combination 
Uplifting [__start] best 128555 combination 
Attempting to uplift remaining variables inzp[1]:26 [ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ]
Uplifting [line] best 128555 combination zp[1]:26 [ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ] 
Attempting to uplift remaining variables inzp[1]:24 [ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ]
Uplifting [line] best 128555 combination zp[1]:24 [ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ] 
Attempting to uplift remaining variables inzp[1]:25 [ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ]
Uplifting [line] best 128555 combination zp[1]:25 [ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ] 
Attempting to uplift remaining variables inzp[1]:27 [ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ]
Uplifting [line] best 128555 combination zp[1]:27 [ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ] 
Attempting to uplift remaining variables inzp[1]:23 [ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ]
Uplifting [line] best 128555 combination zp[1]:23 [ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ] 
Attempting to uplift remaining variables inzp[1]:62 [ line::plot2_$0 ]
Uplifting [line] best 127955 combination reg byte a [ line::plot2_$0 ] 
Attempting to uplift remaining variables inzp[1]:63 [ line::plot2_$2 ]
Uplifting [line] best 127555 combination reg byte a [ line::plot2_$2 ] 
Attempting to uplift remaining variables inzp[1]:66 [ line::plot2_$1 ]
Uplifting [line] best 127155 combination reg byte a [ line::plot2_$1 ] 
Attempting to uplift remaining variables inzp[1]:77 [ line::plot4_$0 ]
Uplifting [line] best 126555 combination reg byte a [ line::plot4_$0 ] 
Attempting to uplift remaining variables inzp[1]:78 [ line::plot4_$2 ]
Uplifting [line] best 126155 combination reg byte a [ line::plot4_$2 ] 
Attempting to uplift remaining variables inzp[1]:81 [ line::plot4_$1 ]
Uplifting [line] best 125755 combination reg byte a [ line::plot4_$1 ] 
Attempting to uplift remaining variables inzp[1]:82 [ line::plot5_$0 ]
Uplifting [line] best 125155 combination reg byte a [ line::plot5_$0 ] 
Attempting to uplift remaining variables inzp[1]:83 [ line::plot5_$2 ]
Uplifting [line] best 124755 combination reg byte a [ line::plot5_$2 ] 
Attempting to uplift remaining variables inzp[1]:86 [ line::plot5_$1 ]
Uplifting [line] best 124355 combination reg byte a [ line::plot5_$1 ] 
Attempting to uplift remaining variables inzp[1]:61 [ line::plot2_y#0 ]
Uplifting [line] best 124355 combination zp[1]:61 [ line::plot2_y#0 ] 
Attempting to uplift remaining variables inzp[1]:60 [ line::sy#0 ]
Uplifting [line] best 124355 combination zp[1]:60 [ line::sy#0 ] 
Attempting to uplift remaining variables inzp[1]:56 [ line::dy#0 ]
Uplifting [line] best 124355 combination zp[1]:56 [ line::dy#0 ] 
Attempting to uplift remaining variables inzp[1]:54 [ line::dx#0 ]
Uplifting [line] best 124355 combination zp[1]:54 [ line::dx#0 ] 
Attempting to uplift remaining variables inzp[1]:22 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
Uplifting [line] best 124355 combination zp[1]:22 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ] 
Attempting to uplift remaining variables inzp[1]:58 [ line::sx#0 ]
Uplifting [line] best 124355 combination zp[1]:58 [ line::sx#0 ] 
Attempting to uplift remaining variables inzp[1]:21 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 ]
Uplifting [line] best 124355 combination zp[1]:21 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 ] 
Attempting to uplift remaining variables inzp[1]:67 [ line::plot3_$0 ]
Uplifting [line] best 124349 combination reg byte a [ line::plot3_$0 ] 
Attempting to uplift remaining variables inzp[1]:68 [ line::plot3_$2 ]
Uplifting [line] best 124345 combination reg byte a [ line::plot3_$2 ] 
Attempting to uplift remaining variables inzp[1]:71 [ line::plot3_$1 ]
Uplifting [line] best 124341 combination reg byte a [ line::plot3_$1 ] 
Attempting to uplift remaining variables inzp[1]:72 [ line::plot1_$0 ]
Uplifting [line] best 124335 combination reg byte a [ line::plot1_$0 ] 
Attempting to uplift remaining variables inzp[1]:73 [ line::plot1_$2 ]
Uplifting [line] best 124331 combination reg byte a [ line::plot1_$2 ] 
Attempting to uplift remaining variables inzp[1]:76 [ line::plot1_$1 ]
Uplifting [line] best 124327 combination reg byte a [ line::plot1_$1 ] 
Attempting to uplift remaining variables inzp[1]:87 [ line::plot6_$0 ]
Uplifting [line] best 124321 combination reg byte a [ line::plot6_$0 ] 
Attempting to uplift remaining variables inzp[1]:88 [ line::plot6_$2 ]
Uplifting [line] best 124317 combination reg byte a [ line::plot6_$2 ] 
Attempting to uplift remaining variables inzp[1]:91 [ line::plot6_$1 ]
Uplifting [line] best 124313 combination reg byte a [ line::plot6_$1 ] 
Attempting to uplift remaining variables inzp[1]:37 [ sgn_u8::return#4 ]
Uplifting [sgn_u8] best 124301 combination reg byte a [ sgn_u8::return#4 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::y#2 main::y#1 ]
Uplifting [main] best 124301 combination zp[1]:2 [ main::y#2 main::y#1 ] 
Attempting to uplift remaining variables inzp[1]:46 [ main::x2#0 ]
Uplifting [main] best 124301 combination zp[1]:46 [ main::x2#0 ] 
Attempting to uplift remaining variables inzp[1]:47 [ main::y2#0 ]
Uplifting [main] best 124301 combination zp[1]:47 [ main::y2#0 ] 
Attempting to uplift remaining variables inzp[1]:44 [ main::x1#0 ]
Uplifting [main] best 124301 combination zp[1]:44 [ main::x1#0 ] 
Attempting to uplift remaining variables inzp[1]:45 [ main::y1#0 ]
Uplifting [main] best 124301 combination zp[1]:45 [ main::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ]
Uplifting [main] best 124301 combination zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ]
Uplifting [main] best 124301 combination zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:7 [ main::p0_idx#2 main::p0_idx#1 ]
Uplifting [main] best 124301 combination zp[1]:7 [ main::p0_idx#2 main::p0_idx#1 ] 
Attempting to uplift remaining variables inzp[1]:39 [ canvas_show_flag ]
Uplifting [] best 124301 combination zp[1]:39 [ canvas_show_flag ] 
Attempting to uplift remaining variables inzp[1]:42 [ main::x0#0 ]
Uplifting [main] best 124301 combination zp[1]:42 [ main::x0#0 ] 
Attempting to uplift remaining variables inzp[1]:43 [ main::y0#0 ]
Uplifting [main] best 124301 combination zp[1]:43 [ main::y0#0 ] 
Attempting to uplift remaining variables inzp[1]:38 [ canvas_show_memory ]
Uplifting [] best 124301 combination zp[1]:38 [ canvas_show_memory ] 
Coalescing zero page register [ zp[2]:10 [ main::canvas#10 main::canvas#19 ] ] with [ zp[2]:48 [ main::canvas#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:14 [ memset::num#4 ] ] with [ zp[2]:51 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:16 [ memset::str#5 ] ] with [ zp[2]:19 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:21 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 ] ] with [ zp[1]:44 [ main::x1#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:21 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 main::x1#0 ] ] with [ zp[1]:46 [ main::x2#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:29 [ eorfill::line_column#2 eorfill::line_column#1 ] ] with [ zp[2]:14 [ memset::num#4 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:31 [ eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 ] ] with [ zp[2]:16 [ memset::str#5 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:64 [ line::plot2_column#0 ] ] with [ zp[2]:29 [ eorfill::line_column#2 eorfill::line_column#1 memset::num#4 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:69 [ line::plot3_column#0 ] ] with [ zp[2]:31 [ eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 memset::str#5 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Allocated (was zp[1]:21) zp[1]:12 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 main::x1#0 main::x2#0 ]
Allocated (was zp[1]:22) zp[1]:13 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
Allocated (was zp[1]:23) zp[1]:14 [ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ]
Allocated (was zp[1]:24) zp[1]:15 [ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ]
Allocated (was zp[1]:25) zp[1]:16 [ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ]
Allocated (was zp[1]:26) zp[1]:17 [ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ]
Allocated (was zp[1]:27) zp[1]:18 [ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ]
Allocated (was zp[1]:38) zp[1]:19 [ canvas_show_memory ]
Allocated (was zp[1]:39) zp[1]:20 [ canvas_show_flag ]
Allocated (was zp[1]:42) zp[1]:21 [ main::x0#0 ]
Allocated (was zp[1]:43) zp[1]:22 [ main::y0#0 ]
Allocated (was zp[1]:45) zp[1]:23 [ main::y1#0 ]
Allocated (was zp[1]:47) zp[1]:24 [ main::y2#0 ]
Allocated (was zp[1]:54) zp[1]:25 [ line::dx#0 ]
Allocated (was zp[1]:56) zp[1]:26 [ line::dy#0 ]
Allocated (was zp[1]:58) zp[1]:27 [ line::sx#0 ]
Allocated (was zp[1]:60) zp[1]:28 [ line::sy#0 ]
Allocated (was zp[1]:61) zp[1]:29 [ line::plot2_y#0 ]
Allocated (was zp[2]:64) zp[2]:30 [ line::plot2_column#0 eorfill::line_column#2 eorfill::line_column#1 memset::num#4 memset::end#0 ]
Allocated (was zp[2]:69) zp[2]:32 [ line::plot3_column#0 eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 memset::str#5 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[2]:74) zp[2]:34 [ line::plot1_column#0 ]
Allocated (was zp[2]:79) zp[2]:36 [ line::plot4_column#0 ]
Allocated (was zp[2]:84) zp[2]:38 [ line::plot5_column#0 ]
Allocated (was zp[2]:89) zp[2]:40 [ line::plot6_column#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Filling a simple 16x16 2D polygon using EOR-filling
// - Clearing canvas
// - Trivial 2D rotation using sine tables
// - Line-drawing polygon edges (fill-ready lines)
// - Up-to-down EOR filling 
// - Double buffering
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const BORDER_YPOS_BOTTOM = $fa
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const RED = 2
  .const DARK_GREY = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#2 timer A&B as one single 32-bit value
  .label CIA2_TIMER_AB = $dd04
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  // The line buffer
  .label LINE_BUFFER = $2000
  // The two charsets used as screen buffers
  .label CANVAS1 = $3000
  .label CANVAS2 = $3800
  // The screen matrix
  .label SCREEN = $2c00
  // The screen console
  .label CONSOLE = $400
  // The default charset address
  .label PETSCII = $1000
  .label COSTAB = SINTAB+$40
  // The current canvas being rendered to the screen - in D018 format.
  .label canvas_show_memory = $13
  // Flag signalling that the canvas on screen needs to be updated.
  // Set to 1 by the renderer when a new canvas is ready for showing, and to 0 by the raster when the canvas is shown on screen.
  .label canvas_show_flag = $14
  // __start
__start: {
    .const __init1_toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
  __init1_from___start:
    jmp __init1
    // __start::__init1
  __init1:
    // [2] phi from __start::__init1 to __start::__init1_toD0181 [phi:__start::__init1->__start::__init1_toD0181]
  __init1_toD0181_from___init1:
    jmp __init1_toD0181
    // __start::__init1_toD0181
  __init1_toD0181:
    jmp __init1___b1
    // __start::__init1_@1
  __init1___b1:
    // [3] canvas_show_memory = __start::__init1_toD0181_return#0 -- vbuz1=vbuc1 
    lda #__init1_toD0181_return
    sta.z canvas_show_memory
    // [4] canvas_show_flag = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z canvas_show_flag
    // [5] phi from __start::__init1_@1 to __start::@1 [phi:__start::__init1_@1->__start::@1]
  __b1_from___init1___b1:
    jmp __b1
    // __start::@1
  __b1:
    // [6] call main 
    // [28] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [7] return 
    rts
}
  // irq_bottom_2
// Interrupt Routine 2
irq_bottom_2: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>LINE_BUFFER)/4&$f
    // entry interrupt(KERNEL_KEYBOARD)
    // [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [9] call kbhit 
    jsr kbhit
    // [10] kbhit::return#2 = kbhit::return#0
    jmp __b4
    // irq_bottom_2::@4
  __b4:
    // [11] irq_bottom_2::$0 = kbhit::return#2
    // [12] if(0==irq_bottom_2::$0) goto irq_bottom_2::@1 -- vbuc1_eq_vbuaa_then_la1 
    // Show the current canvas (unless a key is being pressed)
    cmp #0
    beq __b1
    // [13] phi from irq_bottom_2::@4 to irq_bottom_2::toD0181 [phi:irq_bottom_2::@4->irq_bottom_2::toD0181]
  toD0181_from___b4:
    jmp toD0181
    // irq_bottom_2::toD0181
  toD0181:
    jmp __b3
    // irq_bottom_2::@3
  __b3:
    // [14] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_2::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    jmp __b2
    // irq_bottom_2::@2
  __b2:
    // [15] canvas_show_flag = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z canvas_show_flag
    // [16] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 1 at 8 pixels before the border
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [18] *KERNEL_IRQ = &irq_bottom_1 -- _deref_qprc1=pprc2 
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    jmp __breturn
    // irq_bottom_2::@return
  __breturn:
    // [19] return  - exit interrupt(KERNEL_KEYBOARD)
    jmp $ea31
    // irq_bottom_2::@1
  __b1:
    // [20] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = canvas_show_memory -- _deref_pbuc1=vbuz1 
    lda.z canvas_show_memory
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    jmp __b2
}
  // irq_bottom_1
// Interrupt Routine 1: Just above last text line.
irq_bottom_1: {
    .const toD0181_return = (>(CONSOLE&$3fff)*4)|(>PETSCII)/4&$f
    // entry interrupt(KERNEL_MIN)
    // [21] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = DARK_GREY -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #DARK_GREY
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [22] phi from irq_bottom_1 to irq_bottom_1::toD0181 [phi:irq_bottom_1->irq_bottom_1::toD0181]
  toD0181_from_irq_bottom_1:
    jmp toD0181
    // irq_bottom_1::toD0181
  toD0181:
    jmp __b1
    // irq_bottom_1::@1
  __b1:
    // [23] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_1::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show the cycle counter
    lda #toD0181_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // [24] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // [25] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 2 at bottom of text-line
    lda #BORDER_YPOS_BOTTOM
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [26] *KERNEL_IRQ = &irq_bottom_2 -- _deref_qprc1=pprc2 
    lda #<irq_bottom_2
    sta KERNEL_IRQ
    lda #>irq_bottom_2
    sta KERNEL_IRQ+1
    jmp __breturn
    // irq_bottom_1::@return
  __breturn:
    // [27] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS1)/4&$f
    .const toD0182_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
    .label cols = 3
    // Setup 16x16 canvas for rendering
    .label screen = 5
    .label y = 2
    .label x0 = $15
    .label y0 = $16
    .label x1 = $c
    .label y1 = $17
    .label x2 = $c
    .label y2 = $18
    .label p0_idx = 7
    .label p1_idx = 8
    .label p2_idx = 9
    // The current canvas being rendered to
    .label canvas = $a
    // [29] call memset 
  // Clear the console
    // [92] phi from main to memset [phi:main->memset]
  memset_from_main:
    // [92] phi memset::c#6 = ' ' [phi:main->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [92] phi memset::str#5 = (void*)CONSOLE [phi:main->memset#1] -- pvoz1=pvoc1 
    lda #<CONSOLE
    sta.z memset.str
    lda #>CONSOLE
    sta.z memset.str+1
    // [92] phi memset::num#4 = (word)$28*$19 [phi:main->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [30] phi from main to main::@12 [phi:main->main::@12]
  __b12_from_main:
    jmp __b12
    // main::@12
  __b12:
    // [31] call memset 
  // Clear the screen
    // [92] phi from main::@12 to memset [phi:main::@12->memset]
  memset_from___b12:
    // [92] phi memset::c#6 = 0 [phi:main::@12->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi memset::str#5 = (void*)SCREEN [phi:main::@12->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [92] phi memset::num#4 = (word)$28*$19 [phi:main::@12->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [32] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
  __b13_from___b12:
    jmp __b13
    // main::@13
  __b13:
    // [33] call memset 
    // [92] phi from main::@13 to memset [phi:main::@13->memset]
  memset_from___b13:
    // [92] phi memset::c#6 = BLACK [phi:main::@13->memset#0] -- vbuxx=vbuc1 
    ldx #BLACK
    // [92] phi memset::str#5 = (void*)COLS [phi:main::@13->memset#1] -- pvoz1=pvoc1 
    lda #<COLS
    sta.z memset.str
    lda #>COLS
    sta.z memset.str+1
    // [92] phi memset::num#4 = (word)$28*$19 [phi:main::@13->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [34] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  __b1_from___b13:
    // [34] phi main::screen#5 = SCREEN+$c [phi:main::@13->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$c
    sta.z screen
    lda #>SCREEN+$c
    sta.z screen+1
    // [34] phi main::cols#5 = COLS+$c [phi:main::@13->main::@1#1] -- pbuz1=pbuc1 
    lda #<COLS+$c
    sta.z cols
    lda #>COLS+$c
    sta.z cols+1
    // [34] phi main::y#2 = 0 [phi:main::@13->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b1
    // main::@1
  __b1:
    // [35] if(main::y#2<$10) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$10
    bcc __b2
    jmp __b3
    // main::@3
  __b3:
    // [36] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [37] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // [38] call setup_irq 
    // Set-up the raster IRQ
    jsr setup_irq
    // [39] phi from main::@3 to main::@7 [phi:main::@3->main::@7]
  __b7_from___b3:
    // [39] phi main::canvas#10 = CANVAS1 [phi:main::@3->main::@7#0] -- pbuz1=pbuc1 
    lda #<CANVAS1
    sta.z canvas
    lda #>CANVAS1
    sta.z canvas+1
    // [39] phi main::p2_idx#2 = $b5+$aa [phi:main::@3->main::@7#1] -- vbuz1=vbuc1 
    lda #$b5+$aa
    sta.z p2_idx
    // [39] phi main::p1_idx#2 = $b5+$f [phi:main::@3->main::@7#2] -- vbuz1=vbuc1 
    lda #$b5+$f
    sta.z p1_idx
    // [39] phi main::p0_idx#2 = $b5 [phi:main::@3->main::@7#3] -- vbuz1=vbuc1 
    lda #$b5
    sta.z p0_idx
    jmp __b7
    // main::@7
  __b7:
    // [40] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [41] call clock_start 
    jsr clock_start
    // [42] phi from main::@8 to main::@14 [phi:main::@8->main::@14]
  __b14_from___b8:
    jmp __b14
    // main::@14
  __b14:
    // [43] call memset 
  // Clear line buffer
    // [92] phi from main::@14 to memset [phi:main::@14->memset]
  memset_from___b14:
    // [92] phi memset::c#6 = 0 [phi:main::@14->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi memset::str#5 = (void*)LINE_BUFFER [phi:main::@14->memset#1] -- pvoz1=pvoc1 
    lda #<LINE_BUFFER
    sta.z memset.str
    lda #>LINE_BUFFER
    sta.z memset.str+1
    // [92] phi memset::num#4 = $800 [phi:main::@14->memset#2] -- vwuz1=vwuc1 
    lda #<$800
    sta.z memset.num
    lda #>$800
    sta.z memset.num+1
    jsr memset
    jmp __b15
    // main::@15
  __b15:
    // [44] main::x0#0 = COSTAB[main::p0_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    // Plot in line buffer
    ldy.z p0_idx
    lda COSTAB,y
    sta.z x0
    // [45] main::y0#0 = SINTAB[main::p0_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p0_idx
    lda SINTAB,y
    sta.z y0
    // [46] main::x1#0 = COSTAB[main::p1_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p1_idx
    lda COSTAB,y
    sta.z x1
    // [47] main::y1#0 = SINTAB[main::p1_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p1_idx
    lda SINTAB,y
    sta.z y1
    // [48] line::x1#0 = main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x1
    // [49] line::y1#0 = main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y1
    // [50] line::x2#0 = main::x1#0
    // [51] line::y2#0 = main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y2
    // [52] call line 
    // [115] phi from main::@15 to line [phi:main::@15->line]
  line_from___b15:
    // [115] phi line::y2#10 = line::y2#0 [phi:main::@15->line#0] -- register_copy 
    // [115] phi line::x2#15 = line::x2#0 [phi:main::@15->line#1] -- register_copy 
    // [115] phi line::y#0 = line::y1#0 [phi:main::@15->line#2] -- register_copy 
    // [115] phi line::x#0 = line::x1#0 [phi:main::@15->line#3] -- register_copy 
    jsr line
    jmp __b16
    // main::@16
  __b16:
    // [53] main::x2#0 = COSTAB[main::p2_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p2_idx
    lda COSTAB,y
    sta.z x2
    // [54] main::y2#0 = SINTAB[main::p2_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p2_idx
    lda SINTAB,y
    sta.z y2
    // [55] line::x1#1 = main::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z line.x1
    // [56] line::y1#1 = main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y1
    // [57] line::x2#1 = main::x2#0
    // [58] line::y2#1 = main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y2
    // [59] call line 
    // [115] phi from main::@16 to line [phi:main::@16->line]
  line_from___b16:
    // [115] phi line::y2#10 = line::y2#1 [phi:main::@16->line#0] -- register_copy 
    // [115] phi line::x2#15 = line::x2#1 [phi:main::@16->line#1] -- register_copy 
    // [115] phi line::y#0 = line::y1#1 [phi:main::@16->line#2] -- register_copy 
    // [115] phi line::x#0 = line::x1#1 [phi:main::@16->line#3] -- register_copy 
    jsr line
    jmp __b17
    // main::@17
  __b17:
    // [60] line::x1#2 = main::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z line.x1
    // [61] line::y1#2 = main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y1
    // [62] line::x2#2 = main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x2
    // [63] line::y2#2 = main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y2
    // [64] call line 
    // [115] phi from main::@17 to line [phi:main::@17->line]
  line_from___b17:
    // [115] phi line::y2#10 = line::y2#2 [phi:main::@17->line#0] -- register_copy 
    // [115] phi line::x2#15 = line::x2#2 [phi:main::@17->line#1] -- register_copy 
    // [115] phi line::y#0 = line::y1#2 [phi:main::@17->line#2] -- register_copy 
    // [115] phi line::x#0 = line::x1#2 [phi:main::@17->line#3] -- register_copy 
    jsr line
    jmp __b18
    // main::@18
  __b18:
    // [65] main::p0_idx#1 = ++ main::p0_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p0_idx
    // [66] main::p1_idx#1 = ++ main::p1_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p1_idx
    // [67] main::p2_idx#1 = ++ main::p2_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p2_idx
    // [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = RED -- _deref_pbuc1=vbuc2 
    // Wait until the canvas on screen has been switched before starting work on the next frame
    lda #RED
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    jmp __b9
    // main::@9
  __b9:
    // [69] if(0!=canvas_show_flag) goto main::@9 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z canvas_show_flag
    bne __b9
    jmp __b10
    // main::@10
  __b10:
    // [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [71] eorfill::canvas#0 = main::canvas#10 -- pbuz1=pbuz2 
    lda.z canvas
    sta.z eorfill.canvas
    lda.z canvas+1
    sta.z eorfill.canvas+1
    // [72] call eorfill 
  // Fill canvas
    // [197] phi from main::@10 to eorfill [phi:main::@10->eorfill]
  eorfill_from___b10:
    jsr eorfill
    jmp __b19
    // main::@19
  __b19:
    // [73] main::canvas#1 = main::canvas#10 ^ CANVAS1^CANVAS2 -- vwuz1=pbuz1_bxor_vwuc1 
    // swap canvas being rendered to (using XOR)
    lda #<CANVAS1^CANVAS2
    eor.z canvas
    sta.z canvas
    lda #>CANVAS1^CANVAS2
    eor.z canvas+1
    sta.z canvas+1
    // [74] phi from main::@19 to main::toD0181 [phi:main::@19->main::toD0181]
  toD0181_from___b19:
    jmp toD0181
    // main::toD0181
  toD0181:
    // [75] phi from main::toD0181 to main::toD0182 [phi:main::toD0181->main::toD0182]
  toD0182_from_toD0181:
    jmp toD0182
    // main::toD0182
  toD0182:
    jmp __b11
    // main::@11
  __b11:
    // [76] canvas_show_memory = canvas_show_memory ^ main::toD0181_return#0^main::toD0182_return#0 -- vbuz1=vbuz1_bxor_vbuc1 
    // Swap canvas to show on screen (using XOR)
    lda #toD0181_return^toD0182_return
    eor.z canvas_show_memory
    sta.z canvas_show_memory
    // [77] canvas_show_flag = 1 -- vbuz1=vbuc1 
    // Set flag used to signal when the canvas has been shown
    lda #1
    sta.z canvas_show_flag
    jmp __b20
    // main::@20
  __b20:
    // [78] main::canvas#19 = (byte*)main::canvas#1
    // [39] phi from main::@20 to main::@7 [phi:main::@20->main::@7]
  __b7_from___b20:
    // [39] phi main::canvas#10 = main::canvas#19 [phi:main::@20->main::@7#0] -- register_copy 
    // [39] phi main::p2_idx#2 = main::p2_idx#1 [phi:main::@20->main::@7#1] -- register_copy 
    // [39] phi main::p1_idx#2 = main::p1_idx#1 [phi:main::@20->main::@7#2] -- register_copy 
    // [39] phi main::p0_idx#2 = main::p0_idx#1 [phi:main::@20->main::@7#3] -- register_copy 
    jmp __b7
    // main::@2
  __b2:
    // [79] main::c#4 = main::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [80] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [80] phi main::c#2 = main::c#4 [phi:main::@2->main::@4#0] -- register_copy 
    // [80] phi main::x#2 = 0 [phi:main::@2->main::@4#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b4
    // main::@4
  __b4:
    // [81] if(main::x#2<$10) goto main::@5 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$10
    bcc __b5
    jmp __b6
    // main::@6
  __b6:
    // [82] main::cols#1 = main::cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z cols
    sta.z cols
    bcc !+
    inc.z cols+1
  !:
    // [83] main::screen#1 = main::screen#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // [84] main::y#1 = ++ main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [34] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [34] phi main::screen#5 = main::screen#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [34] phi main::cols#5 = main::cols#1 [phi:main::@6->main::@1#1] -- register_copy 
    // [34] phi main::y#2 = main::y#1 [phi:main::@6->main::@1#2] -- register_copy 
    jmp __b1
    // main::@5
  __b5:
    // [85] main::cols#5[main::x#2] = WHITE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #WHITE
    sta (cols),y
    // [86] main::screen#5[main::x#2] = main::c#2 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (screen),y
    // [87] main::c#1 = main::c#2 + $10 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[$10]
    // [88] main::x#1 = ++ main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [80] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [80] phi main::c#2 = main::c#1 [phi:main::@5->main::@4#0] -- register_copy 
    // [80] phi main::x#2 = main::x#1 [phi:main::@5->main::@4#1] -- register_copy 
    jmp __b4
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // CIA#1 Port A: keyboard matrix columns and joystick #2
    .label CIA1_PORT_A = $dc00
    // CIA#1 Port B: keyboard matrix rows and joystick #1.
    .label CIA1_PORT_B = $dc01
    // [89] *kbhit::CIA1_PORT_A = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta CIA1_PORT_A
    // [90] kbhit::return#0 = ~ *kbhit::CIA1_PORT_B -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    jmp __breturn
    // kbhit::@return
  __breturn:
    // [91] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($20) str, byte register(X) c, word zp($1e) num)
memset: {
    .label end = $1e
    .label dst = $20
    .label num = $1e
    .label str = $20
    // [93] if(memset::num#4<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [94] memset::end#0 = (byte*)memset::str#5 + memset::num#4 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [95] memset::dst#4 = (byte*)memset::str#5
    // [96] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [96] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [97] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [98] return 
    rts
    // memset::@3
  __b3:
    // [99] *memset::dst#2 = memset::c#6 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [100] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // setup_irq
// Setup raster IRQ to change charset at different lines
setup_irq: {
    // asm { sei  }
    sei
    // [102] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [103] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to 8 pixels before the border
    lda #$7f
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // [104] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8 -- _deref_pbuc1=vbuc2 
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // [105] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE
    // [106] *KERNEL_IRQ = &irq_bottom_1 -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    // asm { cli  }
    cli
    jmp __breturn
    // setup_irq::@return
  __breturn:
    // [108] return 
    rts
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // [109] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #0
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // [110] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [111] *CIA2_TIMER_AB = $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // [112] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // [113] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    jmp __breturn
    // clock_start::@return
  __breturn:
    // [114] return 
    rts
}
  // line
// Draw a EOR friendly line between two points
// Uses bresenham line drawing routine
// line(byte zp($10) x1, byte zp($11) y1, byte zp($c) x2, byte zp($d) y2)
line: {
    .label x1 = $10
    .label y1 = $11
    .label x2 = $c
    .label y2 = $d
    .label x = $10
    .label y = $11
    .label dx = $19
    .label dy = $1a
    .label sx = $1b
    .label sy = $1c
    .label e2 = $12
    .label plot1_column = $22
    .label e = $e
    .label plot2_y = $1d
    .label plot2_column = $1e
    .label plot3_column = $20
    .label e1 = $f
    .label plot4_column = $24
    .label plot5_column = $26
    .label plot6_column = $28
    // [116] abs_u8::u#0 = line::x2#15 - line::x#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x
    // [117] call abs_u8 
    // [211] phi from line to abs_u8 [phi:line->abs_u8]
  abs_u8_from_line:
    // [211] phi abs_u8::u#2 = abs_u8::u#0 [phi:line->abs_u8#0] -- register_copy 
    jsr abs_u8
    // [118] abs_u8::return#0 = abs_u8::return#4
    jmp __b19
    // line::@19
  __b19:
    // [119] line::dx#0 = abs_u8::return#0 -- vbuz1=vbuaa 
    sta.z dx
    // [120] abs_u8::u#1 = line::y2#10 - line::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y
    // [121] call abs_u8 
    // [211] phi from line::@19 to abs_u8 [phi:line::@19->abs_u8]
  abs_u8_from___b19:
    // [211] phi abs_u8::u#2 = abs_u8::u#1 [phi:line::@19->abs_u8#0] -- register_copy 
    jsr abs_u8
    // [122] abs_u8::return#1 = abs_u8::return#4
    jmp __b20
    // line::@20
  __b20:
    // [123] line::dy#0 = abs_u8::return#1 -- vbuz1=vbuaa 
    sta.z dy
    // [124] sgn_u8::u#0 = line::x2#15 - line::x#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x
    // [125] call sgn_u8 
    // [217] phi from line::@20 to sgn_u8 [phi:line::@20->sgn_u8]
  sgn_u8_from___b20:
    // [217] phi sgn_u8::u#2 = sgn_u8::u#0 [phi:line::@20->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // [126] sgn_u8::return#0 = sgn_u8::return#4
    jmp __b21
    // line::@21
  __b21:
    // [127] line::sx#0 = sgn_u8::return#0 -- vbuz1=vbuaa 
    sta.z sx
    // [128] sgn_u8::u#1 = line::y2#10 - line::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y
    // [129] call sgn_u8 
    // [217] phi from line::@21 to sgn_u8 [phi:line::@21->sgn_u8]
  sgn_u8_from___b21:
    // [217] phi sgn_u8::u#2 = sgn_u8::u#1 [phi:line::@21->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // [130] sgn_u8::return#1 = sgn_u8::return#4
    jmp __b22
    // line::@22
  __b22:
    // [131] line::sy#0 = sgn_u8::return#1 -- vbuz1=vbuaa 
    sta.z sy
    // [132] if(line::sx#0!=$ff) goto line::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z sx
    bne __b1_from___b22
    jmp __b3
    // line::@3
  __b3:
    // [133] line::y#1 = ++ line::y#0 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [134] line::y2#3 = ++ line::y2#10 -- vbuz1=_inc_vbuz1 
    inc.z y2
    // [135] phi from line::@22 line::@3 to line::@1 [phi:line::@22/line::@3->line::@1]
  __b1_from___b22:
  __b1_from___b3:
    // [135] phi line::y2#13 = line::y2#10 [phi:line::@22/line::@3->line::@1#0] -- register_copy 
    // [135] phi line::y#17 = line::y#0 [phi:line::@22/line::@3->line::@1#1] -- register_copy 
    jmp __b1
    // line::@1
  __b1:
    // [136] if(line::dx#0>line::dy#0) goto line::@2 -- vbuz1_gt_vbuz2_then_la1 
    lda.z dy
    cmp.z dx
    bcc __b2
    jmp __b4
    // line::@4
  __b4:
    // [137] if(line::sx#0==line::sy#0) goto line::plot1 -- vbuz1_eq_vbuz2_then_la1 
    // Steep slope - Y is the driver - only plot one plot per X
    lda.z sx
    cmp.z sy
    beq plot1
    jmp __b5
    // line::@5
  __b5:
    // [138] line::e#0 = line::dy#0 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z dy
    lsr
    sta.z e
    // [139] phi from line::@5 line::@7 to line::@6 [phi:line::@5/line::@7->line::@6]
  __b6_from___b5:
  __b6_from___b7:
    // [139] phi line::x#15 = line::x#0 [phi:line::@5/line::@7->line::@6#0] -- register_copy 
    // [139] phi line::e#3 = line::e#0 [phi:line::@5/line::@7->line::@6#1] -- register_copy 
    // [139] phi line::y#7 = line::y#17 [phi:line::@5/line::@7->line::@6#2] -- register_copy 
    jmp __b6
    // line::@6
  __b6:
    // [140] line::y#10 = line::y#7 + line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // [141] line::e#1 = line::e#3 + line::dx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    // [142] if(line::e#1<=line::dy#0) goto line::@7 -- vbuz1_le_vbuz2_then_la1 
    lda.z dy
    cmp.z e
    bcs __b7_from___b6
    jmp __b8
    // line::@8
  __b8:
    // [143] line::plot2_y#0 = line::y#10 - line::sy#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y
    sec
    sbc.z sy
    sta.z plot2_y
    jmp plot2
    // line::plot2
  plot2:
    // [144] line::plot2_$0 = line::x#15 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // [145] line::plot2_$2 = line::plot2_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [146] line::plot2_column#0 = plot_column[line::plot2_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot2_column
    lda plot_column+1,y
    sta.z plot2_column+1
    // [147] line::plot2_$1 = line::x#15 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // [148] line::plot2_column#0[line::plot2_y#0] = line::plot2_column#0[line::plot2_y#0] | plot_bit[line::plot2_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z plot2_y
    tax
    lda (plot2_column),y
    ora plot_bit,x
    sta (plot2_column),y
    jmp __b16
    // line::@16
  __b16:
    // [149] line::x#1 = line::x#15 + line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    // [150] line::e#2 = line::e#1 - line::dy#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    // [151] phi from line::@16 line::@6 to line::@7 [phi:line::@16/line::@6->line::@7]
  __b7_from___b16:
  __b7_from___b6:
    // [151] phi line::x#17 = line::x#1 [phi:line::@16/line::@6->line::@7#0] -- register_copy 
    // [151] phi line::e#5 = line::e#2 [phi:line::@16/line::@6->line::@7#1] -- register_copy 
    jmp __b7
    // line::@7
  __b7:
    // [152] if(line::y#10!=line::y2#13) goto line::@6 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b6_from___b7
    jmp plot3
    // line::plot3
  plot3:
    // [153] line::plot3_$0 = line::x#17 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // [154] line::plot3_$2 = line::plot3_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [155] line::plot3_column#0 = plot_column[line::plot3_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot3_column
    lda plot_column+1,y
    sta.z plot3_column+1
    // [156] line::plot3_$1 = line::x#17 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // [157] line::plot3_column#0[line::y#10] = line::plot3_column#0[line::y#10] | plot_bit[line::plot3_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot3_column),y
    ora plot_bit,x
    sta (plot3_column),y
    jmp __breturn
    // line::@return
  __breturn:
    // [158] return 
    rts
    // line::plot1
  plot1:
    // [159] line::plot1_$0 = line::x#0 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // [160] line::plot1_$2 = line::plot1_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [161] line::plot1_column#0 = plot_column[line::plot1_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot1_column
    lda plot_column+1,y
    sta.z plot1_column+1
    // [162] line::plot1_$1 = line::x#0 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // [163] line::plot1_column#0[line::y#17] = line::plot1_column#0[line::y#17] | plot_bit[line::plot1_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot1_column),y
    ora plot_bit,x
    sta (plot1_column),y
    jmp __b15
    // line::@15
  __b15:
    // [164] if(line::dx#0!=0) goto line::@9 -- vbuz1_neq_0_then_la1 
    lda.z dx
    cmp #0
    bne __b9
    jmp __breturn
    // line::@9
  __b9:
    // [165] line::e1#0 = line::dy#0 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z dy
    lsr
    sta.z e1
    // [166] phi from line::@10 line::@17 line::@9 to line::@10 [phi:line::@10/line::@17/line::@9->line::@10]
  __b10_from___b10:
  __b10_from___b17:
  __b10_from___b9:
    // [166] phi line::x#18 = line::x#18 [phi:line::@10/line::@17/line::@9->line::@10#0] -- register_copy 
    // [166] phi line::e1#3 = line::e1#1 [phi:line::@10/line::@17/line::@9->line::@10#1] -- register_copy 
    // [166] phi line::y#11 = line::y#12 [phi:line::@10/line::@17/line::@9->line::@10#2] -- register_copy 
    jmp __b10
    // line::@10
  __b10:
    // [167] line::y#12 = line::y#11 + line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // [168] line::e1#1 = line::e1#3 + line::dx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e1
    clc
    adc.z dx
    sta.z e1
    // [169] if(line::e1#1<=line::dy#0) goto line::@10 -- vbuz1_le_vbuz2_then_la1 
    lda.z dy
    cmp.z e1
    bcs __b10_from___b10
    jmp __b11
    // line::@11
  __b11:
    // [170] line::x#19 = line::x#18 + line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    // [171] line::e1#2 = line::e1#1 - line::dy#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e1
    sec
    sbc.z dy
    sta.z e1
    jmp plot4
    // line::plot4
  plot4:
    // [172] line::plot4_$0 = line::x#19 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // [173] line::plot4_$2 = line::plot4_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [174] line::plot4_column#0 = plot_column[line::plot4_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot4_column
    lda plot_column+1,y
    sta.z plot4_column+1
    // [175] line::plot4_$1 = line::x#19 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // [176] line::plot4_column#0[line::y#12] = line::plot4_column#0[line::y#12] | plot_bit[line::plot4_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot4_column),y
    ora plot_bit,x
    sta (plot4_column),y
    jmp __b17
    // line::@17
  __b17:
    // [177] if(line::x#19!=line::x2#15) goto line::@10 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne __b10_from___b17
    jmp __breturn
    // line::@2
  __b2:
    // [178] line::e2#0 = line::dx#0 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z dx
    lsr
    sta.z e2
    // [179] phi from line::@13 line::@2 to line::@12 [phi:line::@13/line::@2->line::@12]
  __b12_from___b13:
  __b12_from___b2:
    // [179] phi line::e2#3 = line::e2#7 [phi:line::@13/line::@2->line::@12#0] -- register_copy 
    // [179] phi line::y#13 = line::y#15 [phi:line::@13/line::@2->line::@12#1] -- register_copy 
    // [179] phi line::x#10 = line::x#12 [phi:line::@13/line::@2->line::@12#2] -- register_copy 
    jmp __b12
    // line::@12
  __b12:
    jmp plot5
    // line::plot5
  plot5:
    // [180] line::plot5_$0 = line::x#10 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // [181] line::plot5_$2 = line::plot5_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [182] line::plot5_column#0 = plot_column[line::plot5_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot5_column
    lda plot_column+1,y
    sta.z plot5_column+1
    // [183] line::plot5_$1 = line::x#10 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // [184] line::plot5_column#0[line::y#13] = line::plot5_column#0[line::y#13] | plot_bit[line::plot5_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot5_column),y
    ora plot_bit,x
    sta (plot5_column),y
    jmp __b18
    // line::@18
  __b18:
    // [185] line::x#12 = line::x#10 + line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    // [186] line::e2#1 = line::e2#3 + line::dy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e2
    clc
    adc.z dy
    sta.z e2
    // [187] if(line::e2#1<=line::dx#0) goto line::@13 -- vbuz1_le_vbuz2_then_la1 
    lda.z dx
    cmp.z e2
    bcs __b13_from___b18
    jmp __b14
    // line::@14
  __b14:
    // [188] line::y#4 = line::y#13 + line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // [189] line::e2#2 = line::e2#1 - line::dx#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e2
    sec
    sbc.z dx
    sta.z e2
    // [190] phi from line::@14 line::@18 to line::@13 [phi:line::@14/line::@18->line::@13]
  __b13_from___b14:
  __b13_from___b18:
    // [190] phi line::e2#7 = line::e2#2 [phi:line::@14/line::@18->line::@13#0] -- register_copy 
    // [190] phi line::y#15 = line::y#4 [phi:line::@14/line::@18->line::@13#1] -- register_copy 
    jmp __b13
    // line::@13
  __b13:
    // [191] if(line::x#12!=line::x2#15) goto line::@12 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne __b12_from___b13
    jmp plot6
    // line::plot6
  plot6:
    // [192] line::plot6_$0 = line::x#12 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // [193] line::plot6_$2 = line::plot6_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [194] line::plot6_column#0 = plot_column[line::plot6_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot6_column
    lda plot_column+1,y
    sta.z plot6_column+1
    // [195] line::plot6_$1 = line::x#12 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // [196] line::plot6_column#0[line::y#15] = line::plot6_column#0[line::y#15] | plot_bit[line::plot6_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot6_column),y
    ora plot_bit,x
    sta (plot6_column),y
    jmp __breturn
}
  // eorfill
// EOR fill from the line buffer onto the canvas
// eorfill(byte* zp($20) canvas)
eorfill: {
    .label canvas = $20
    .label line_column = $1e
    .label fill_column = $20
    // [198] phi from eorfill to eorfill::@1 [phi:eorfill->eorfill::@1]
  __b1_from_eorfill:
    // [198] phi eorfill::fill_column#2 = eorfill::canvas#0 [phi:eorfill->eorfill::@1#0] -- register_copy 
    // [198] phi eorfill::line_column#2 = LINE_BUFFER [phi:eorfill->eorfill::@1#1] -- pbuz1=pbuc1 
    lda #<LINE_BUFFER
    sta.z line_column
    lda #>LINE_BUFFER
    sta.z line_column+1
    // [198] phi eorfill::x#2 = 0 [phi:eorfill->eorfill::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // eorfill::@1
  __b1:
    // [199] if(eorfill::x#2<$10) goto eorfill::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$10
    bcc __b2
    jmp __breturn
    // eorfill::@return
  __breturn:
    // [200] return 
    rts
    // eorfill::@2
  __b2:
    // [201] eorfill::eor#0 = *eorfill::line_column#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (line_column),y
    // [202] *eorfill::fill_column#2 = eorfill::eor#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (fill_column),y
    // [203] phi from eorfill::@2 to eorfill::@3 [phi:eorfill::@2->eorfill::@3]
  __b3_from___b2:
    // [203] phi eorfill::eor#2 = eorfill::eor#0 [phi:eorfill::@2->eorfill::@3#0] -- register_copy 
    // [203] phi eorfill::y#2 = 1 [phi:eorfill::@2->eorfill::@3#1] -- vbuyy=vbuc1 
    ldy #1
    jmp __b3
    // eorfill::@3
  __b3:
    // [204] if(eorfill::y#2<(byte)$10*8) goto eorfill::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$10*8
    bcc __b4
    jmp __b5
    // eorfill::@5
  __b5:
    // [205] eorfill::line_column#1 = eorfill::line_column#2 + (byte)$10*8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z line_column
    sta.z line_column
    bcc !+
    inc.z line_column+1
  !:
    // [206] eorfill::fill_column#1 = eorfill::fill_column#2 + (byte)$10*8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z fill_column
    sta.z fill_column
    bcc !+
    inc.z fill_column+1
  !:
    // [207] eorfill::x#1 = ++ eorfill::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [198] phi from eorfill::@5 to eorfill::@1 [phi:eorfill::@5->eorfill::@1]
  __b1_from___b5:
    // [198] phi eorfill::fill_column#2 = eorfill::fill_column#1 [phi:eorfill::@5->eorfill::@1#0] -- register_copy 
    // [198] phi eorfill::line_column#2 = eorfill::line_column#1 [phi:eorfill::@5->eorfill::@1#1] -- register_copy 
    // [198] phi eorfill::x#2 = eorfill::x#1 [phi:eorfill::@5->eorfill::@1#2] -- register_copy 
    jmp __b1
    // eorfill::@4
  __b4:
    // [208] eorfill::eor#1 = eorfill::eor#2 ^ eorfill::line_column#2[eorfill::y#2] -- vbuaa=vbuaa_bxor_pbuz1_derefidx_vbuyy 
    eor (line_column),y
    // [209] eorfill::fill_column#2[eorfill::y#2] = eorfill::eor#1 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (fill_column),y
    // [210] eorfill::y#1 = ++ eorfill::y#2 -- vbuyy=_inc_vbuyy 
    iny
    // [203] phi from eorfill::@4 to eorfill::@3 [phi:eorfill::@4->eorfill::@3]
  __b3_from___b4:
    // [203] phi eorfill::eor#2 = eorfill::eor#1 [phi:eorfill::@4->eorfill::@3#0] -- register_copy 
    // [203] phi eorfill::y#2 = eorfill::y#1 [phi:eorfill::@4->eorfill::@3#1] -- register_copy 
    jmp __b3
}
  // abs_u8
// Get the absolute value of a 8-bit unsigned number treated as a signed number.
// abs_u8(byte register(A) u)
abs_u8: {
    // [212] abs_u8::$0 = abs_u8::u#2 & $80 -- vbuxx=vbuaa_band_vbuc1 
    ldx #$80
    axs #0
    // [213] if(0!=abs_u8::$0) goto abs_u8::@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b1
    // [215] phi from abs_u8 abs_u8::@1 to abs_u8::@return [phi:abs_u8/abs_u8::@1->abs_u8::@return]
  __breturn_from_abs_u8:
  __breturn_from___b1:
    // [215] phi abs_u8::return#4 = abs_u8::u#2 [phi:abs_u8/abs_u8::@1->abs_u8::@return#0] -- register_copy 
    jmp __breturn
    // abs_u8::@1
  __b1:
    // [214] abs_u8::return#2 = - abs_u8::u#2 -- vbuaa=_neg_vbuaa 
    eor #$ff
    clc
    adc #1
    jmp __breturn_from___b1
    // abs_u8::@return
  __breturn:
    // [216] return 
    rts
}
  // sgn_u8
// Get the sign of a 8-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is negative
// sgn_u8(byte register(A) u)
sgn_u8: {
    // [218] sgn_u8::$0 = sgn_u8::u#2 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [219] if(0!=sgn_u8::$0) goto sgn_u8::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1_from_sgn_u8
    // [221] phi from sgn_u8 to sgn_u8::@return [phi:sgn_u8->sgn_u8::@return]
  __breturn_from_sgn_u8:
    // [221] phi sgn_u8::return#4 = 1 [phi:sgn_u8->sgn_u8::@return#0] -- vbuaa=vbuc1 
    lda #1
    jmp __breturn
    // [220] phi from sgn_u8 to sgn_u8::@1 [phi:sgn_u8->sgn_u8::@1]
  __b1_from_sgn_u8:
    jmp __b1
    // sgn_u8::@1
  __b1:
    // [221] phi from sgn_u8::@1 to sgn_u8::@return [phi:sgn_u8::@1->sgn_u8::@return]
  __breturn_from___b1:
    // [221] phi sgn_u8::return#4 = -1 [phi:sgn_u8::@1->sgn_u8::@return#0] -- vbuaa=vbuc1 
    lda #-1
    jmp __breturn
    // sgn_u8::@return
  __breturn:
    // [222] return 
    rts
}
  // File Data
  // SIN/COS tables
  .align $100
SINTAB:
.fill $200, round(63 + 63*sin(i*2*PI/$100))

  // Column offsets
  plot_column: .word LINE_BUFFER, LINE_BUFFER+1*$80, LINE_BUFFER+2*$80, LINE_BUFFER+3*$80, LINE_BUFFER+4*$80, LINE_BUFFER+5*$80, LINE_BUFFER+6*$80, LINE_BUFFER+7*$80, LINE_BUFFER+8*$80, LINE_BUFFER+9*$80, LINE_BUFFER+$a*$80, LINE_BUFFER+$b*$80, LINE_BUFFER+$c*$80, LINE_BUFFER+$d*$80, LINE_BUFFER+$e*$80, LINE_BUFFER+$f*$80
  // The bits used for plotting a pixel
  plot_bit: .byte $80, $40, $20, $10, 8, 4, 2, 1

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __init1_toD0181
Removing instruction jmp __init1___b1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp toD0181
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp toD0181
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b18
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b19
Removing instruction jmp toD0181
Removing instruction jmp toD0182
Removing instruction jmp __b11
Removing instruction jmp __b20
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b8
Removing instruction jmp plot2
Removing instruction jmp __b16
Removing instruction jmp __b7
Removing instruction jmp plot3
Removing instruction jmp __breturn
Removing instruction jmp __b15
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp plot4
Removing instruction jmp __b17
Removing instruction jmp __b12
Removing instruction jmp plot5
Removing instruction jmp __b18
Removing instruction jmp __b14
Removing instruction jmp __b13
Removing instruction jmp plot6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #BLACK
Removing instruction ldy.z p0_idx
Removing instruction ldy.z p1_idx
Removing instruction ldy.z p2_idx
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b7 with __b8
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b22 with __b1
Replacing label __b7_from___b6 with __b7
Replacing label __b6_from___b7 with __b6
Replacing label __b10_from___b10 with __b10
Replacing label __b10_from___b17 with __b10
Replacing label __b13_from___b18 with __b13
Replacing label __b12_from___b13 with plot5
Replacing label __b1_from_sgn_u8 with __b1
Removing instruction __init1_from___start:
Removing instruction __init1_toD0181_from___init1:
Removing instruction __init1_toD0181:
Removing instruction __init1___b1:
Removing instruction __b1_from___init1___b1:
Removing instruction main_from___b1:
Removing instruction toD0181_from___b4:
Removing instruction toD0181:
Removing instruction toD0181_from_irq_bottom_1:
Removing instruction toD0181:
Removing instruction __b12_from_main:
Removing instruction __b13_from___b12:
Removing instruction memset_from___b13:
Removing instruction __b7:
Removing instruction __b8_from___b7:
Removing instruction __b14_from___b8:
Removing instruction toD0181_from___b19:
Removing instruction toD0181:
Removing instruction toD0182_from_toD0181:
Removing instruction toD0182:
Removing instruction __b7_from___b20:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from___b22:
Removing instruction __b1_from___b3:
Removing instruction __b6_from___b5:
Removing instruction __b6_from___b7:
Removing instruction __b7_from___b16:
Removing instruction __b7_from___b6:
Removing instruction __b10_from___b10:
Removing instruction __b10_from___b17:
Removing instruction __b10_from___b9:
Removing instruction __b12_from___b13:
Removing instruction __b12_from___b2:
Removing instruction __b12:
Removing instruction __b13_from___b14:
Removing instruction __b13_from___b18:
Removing instruction __breturn_from_abs_u8:
Removing instruction __b1_from_sgn_u8:
Removing instruction __breturn_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction memset_from_main:
Removing instruction __b12:
Removing instruction memset_from___b12:
Removing instruction __b13:
Removing instruction __b1_from___b13:
Removing instruction __b3:
Removing instruction __b7_from___b3:
Removing instruction __b14:
Removing instruction memset_from___b14:
Removing instruction __b15:
Removing instruction line_from___b15:
Removing instruction __b16:
Removing instruction line_from___b16:
Removing instruction __b17:
Removing instruction line_from___b17:
Removing instruction __b18:
Removing instruction __b10:
Removing instruction eorfill_from___b10:
Removing instruction __b19:
Removing instruction __b11:
Removing instruction __b20:
Removing instruction __b4_from___b2:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction __b4_from___b5:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction abs_u8_from_line:
Removing instruction __b19:
Removing instruction abs_u8_from___b19:
Removing instruction __b20:
Removing instruction sgn_u8_from___b20:
Removing instruction __b21:
Removing instruction sgn_u8_from___b21:
Removing instruction __b22:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b8:
Removing instruction plot2:
Removing instruction __b16:
Removing instruction plot3:
Removing instruction __b15:
Removing instruction __b11:
Removing instruction plot4:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction __b14:
Removing instruction plot6:
Removing instruction __b1_from_eorfill:
Removing instruction __breturn:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Removing instruction __breturn_from_sgn_u8:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b1
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __breturn_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda.z y with TYA
Removing instruction lda.z x
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [186] bcc __b2 to bcs
Fixing long branch [468] bcc __b2 to bcs

FINAL SYMBOL TABLE
const nomodify byte BLACK = 0
const nomodify byte BORDER_YPOS_BOTTOM = $fa
const nomodify byte* CANVAS1 = (byte*) 12288
const nomodify byte* CANVAS2 = (byte*) 14336
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*) 56576
const nomodify dword* CIA2_TIMER_AB = (dword*) 56580
const nomodify byte CIA_INTERRUPT_CLEAR = $7f
const nomodify byte CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
const nomodify byte CIA_TIMER_CONTROL_START = 1
const nomodify byte* COLS = (byte*) 55296
const nomodify byte* CONSOLE = (byte*) 1024
const byte* COSTAB = SINTAB+$40
const nomodify byte DARK_GREY = $b
const nomodify byte IRQ_RASTER = 1
const nomodify void()** KERNEL_IRQ = (void()**) 788
const nomodify byte* LINE_BUFFER = (byte*) 8192
const byte OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
const byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
const byte OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
const byte OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
const byte OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
const byte OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
const byte OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
const byte OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
const byte OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
const nomodify byte* PETSCII = (byte*) 4096
const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
const nomodify byte RED = 2
const nomodify byte* SCREEN = (byte*) 11264
const byte* SINTAB[$140]  = kickasm {{ .fill $200, round(63 + 63*sin(i*2*PI/$100))
 }}
const nomodify struct MOS6569_VICII* VICII = (struct MOS6569_VICII*) 53248
const nomodify byte WHITE = 1
void __start()
byte* __start::__init1_toD0181_gfx
byte __start::__init1_toD0181_return
const byte __start::__init1_toD0181_return#0 __init1_toD0181_return = >(word)SCREEN&$3fff*4|>(word)CANVAS2/4&$f
byte* __start::__init1_toD0181_screen
byte abs_u8(byte abs_u8::u)
byte~ abs_u8::$0 reg byte x 20002.0
byte abs_u8::return
byte abs_u8::return#0 reg byte a 2002.0
byte abs_u8::return#1 reg byte a 2002.0
byte abs_u8::return#2 reg byte a 20002.0
byte abs_u8::return#4 reg byte a 5501.0
byte abs_u8::u
byte abs_u8::u#0 reg byte a 2002.0
byte abs_u8::u#1 reg byte a 2002.0
byte abs_u8::u#2 reg byte a 10668.333333333332
volatile byte canvas_show_flag loadstore zp[1]:20 19.75
volatile byte canvas_show_memory loadstore zp[1]:19 2.9855072463768115
void clock_start()
void eorfill(byte* eorfill::line_buffer , byte* eorfill::canvas)
byte* eorfill::canvas
byte* eorfill::canvas#0 canvas zp[2]:32 551.0
byte eorfill::eor
byte eorfill::eor#0 reg byte a 150001.5
byte eorfill::eor#1 reg byte a 1000001.0
byte eorfill::eor#2 reg byte a 1050001.5
byte* eorfill::fill_column
byte* eorfill::fill_column#1 fill_column zp[2]:32 100001.0
byte* eorfill::fill_column#2 fill_column zp[2]:32 130100.5
byte* eorfill::line_buffer
byte* eorfill::line_column
byte* eorfill::line_column#1 line_column zp[2]:30 66667.33333333333
byte* eorfill::line_column#2 line_column zp[2]:30 144444.88888888888
byte eorfill::x
byte eorfill::x#1 reg byte x 200002.0
byte eorfill::x#2 reg byte x 27273.0
byte eorfill::y
byte eorfill::y#1 reg byte y 2000002.0
byte eorfill::y#2 reg byte y 1250001.25
interrupt(KERNEL_MIN) void irq_bottom_1()
byte* irq_bottom_1::toD0181_gfx
byte irq_bottom_1::toD0181_return
const byte irq_bottom_1::toD0181_return#0 toD0181_return = >(word)CONSOLE&$3fff*4|>(word)PETSCII/4&$f
byte* irq_bottom_1::toD0181_screen
interrupt(KERNEL_KEYBOARD) void irq_bottom_2()
byte~ irq_bottom_2::$0 reg byte a 4.0
byte* irq_bottom_2::toD0181_gfx
byte irq_bottom_2::toD0181_return
const byte irq_bottom_2::toD0181_return#0 toD0181_return = >(word)SCREEN&$3fff*4|>(word)LINE_BUFFER/4&$f
byte* irq_bottom_2::toD0181_screen
byte kbhit()
const nomodify byte* kbhit::CIA1_PORT_A = (byte*) 56320
const nomodify byte* kbhit::CIA1_PORT_B = (byte*) 56321
byte kbhit::return
byte kbhit::return#0 reg byte a 4.333333333333333
byte kbhit::return#2 reg byte a 4.0
void line(byte* line::canvas , byte line::x1 , byte line::y1 , byte line::x2 , byte line::y2)
byte* line::canvas
byte line::dx
byte line::dx#0 dx zp[1]:25 19462.805970149253
byte line::dy
byte line::dy#0 dy zp[1]:26 22285.85714285714
byte line::e
byte line::e#0 e zp[1]:14 2002.0
byte line::e#1 e zp[1]:14 44444.88888888889
byte line::e#2 e zp[1]:14 200002.0
byte line::e#3 e zp[1]:14 100501.5
byte line::e#5 e zp[1]:14 150001.5
byte line::e1
byte line::e1#0 e1 zp[1]:15 2002.0
byte line::e1#1 e1 zp[1]:15 1033334.6666666666
byte line::e1#2 e1 zp[1]:15 28571.714285714286
byte line::e1#3 e1 zp[1]:15 1050502.0
byte line::e2
byte line::e2#0 e2 zp[1]:18 2002.0
byte line::e2#1 e2 zp[1]:18 133334.66666666666
byte line::e2#2 e2 zp[1]:18 200002.0
byte line::e2#3 e2 zp[1]:18 28714.714285714286
byte line::e2#7 e2 zp[1]:18 150001.5
byte~ line::plot1_$0 reg byte a 2002.0
byte~ line::plot1_$1 reg byte a 2002.0
byte~ line::plot1_$2 reg byte a 2002.0
byte* line::plot1_column
byte* line::plot1_column#0 plot1_column zp[2]:34 1501.5
byte line::plot1_x
byte line::plot1_y
byte~ line::plot2_$0 reg byte a 200002.0
byte~ line::plot2_$1 reg byte a 200002.0
byte~ line::plot2_$2 reg byte a 200002.0
byte* line::plot2_column
byte* line::plot2_column#0 plot2_column zp[2]:30 150001.5
byte line::plot2_x
byte line::plot2_y
byte line::plot2_y#0 plot2_y zp[1]:29 60000.600000000006
byte~ line::plot3_$0 reg byte a 2002.0
byte~ line::plot3_$1 reg byte a 2002.0
byte~ line::plot3_$2 reg byte a 2002.0
byte* line::plot3_column
byte* line::plot3_column#0 plot3_column zp[2]:32 1501.5
byte line::plot3_x
byte line::plot3_y
byte~ line::plot4_$0 reg byte a 200002.0
byte~ line::plot4_$1 reg byte a 200002.0
byte~ line::plot4_$2 reg byte a 200002.0
byte* line::plot4_column
byte* line::plot4_column#0 plot4_column zp[2]:36 150001.5
byte line::plot4_x
byte line::plot4_y
byte~ line::plot5_$0 reg byte a 200002.0
byte~ line::plot5_$1 reg byte a 200002.0
byte~ line::plot5_$2 reg byte a 200002.0
byte* line::plot5_column
byte* line::plot5_column#0 plot5_column zp[2]:38 150001.5
byte line::plot5_x
byte line::plot5_y
byte~ line::plot6_$0 reg byte a 2002.0
byte~ line::plot6_$1 reg byte a 2002.0
byte~ line::plot6_$2 reg byte a 2002.0
byte* line::plot6_column
byte* line::plot6_column#0 plot6_column zp[2]:40 1501.5
byte line::plot6_x
byte line::plot6_y
byte line::sx
byte line::sx#0 sx zp[1]:27 5135.6949152542375
byte line::sy
byte line::sy#0 sy zp[1]:28 23672.836363636365
byte line::x
byte line::x#0 x zp[1]:16 228.4375
byte line::x#1 x zp[1]:16 100001.0
byte line::x#10 x zp[1]:16 66834.16666666666
byte line::x#12 x zp[1]:16 30200.5
byte line::x#15 x zp[1]:16 50100.6
byte line::x#17 x zp[1]:16 60401.0
byte line::x#18 x zp[1]:16 550251.25
byte line::x#19 x zp[1]:16 62500.625
byte line::x1
byte line::x1#0 x1 zp[1]:16 50.5
byte line::x1#1 x1 zp[1]:16 50.5
byte line::x1#2 x1 zp[1]:16 50.5
byte line::x2
byte line::x2#0 x2 zp[1]:12 101.0
byte line::x2#1 x2 zp[1]:12 101.0
byte line::x2#15 x2 zp[1]:12 3612.625
byte line::x2#2 x2 zp[1]:12 101.0
byte line::y
byte line::y#0 y zp[1]:17 239.27777777777777
byte line::y#1 y zp[1]:17 1001.0
byte line::y#10 y zp[1]:17 23647.411764705877
byte line::y#11 y zp[1]:17 2101004.0
byte line::y#12 y zp[1]:17 209091.36363636365
byte line::y#13 y zp[1]:17 55667.33333333333
byte line::y#15 y zp[1]:17 50334.16666666667
byte line::y#17 y zp[1]:17 583.9166666666667
byte line::y#4 y zp[1]:17 100001.0
byte line::y#7 y zp[1]:17 201003.0
byte line::y1
byte line::y1#0 y1 zp[1]:17 67.33333333333333
byte line::y1#1 y1 zp[1]:17 67.33333333333333
byte line::y1#2 y1 zp[1]:17 67.33333333333333
byte line::y2
byte line::y2#0 y2 zp[1]:13 202.0
byte line::y2#1 y2 zp[1]:13 202.0
byte line::y2#10 y2 zp[1]:13 226.68421052631578
byte line::y2#13 y2 zp[1]:13 5666.833333333334
byte line::y2#2 y2 zp[1]:13 202.0
byte line::y2#3 y2 zp[1]:13 2002.0
void main()
byte main::c
byte main::c#1 reg byte x 1001.0
byte main::c#2 reg byte x 776.0
byte main::c#4 reg byte x 202.0
byte* main::canvas
word main::canvas#1 canvas zp[2]:10 20.2
byte* main::canvas#10 canvas zp[2]:10 8.911764705882353
byte* main::canvas#19 canvas zp[2]:10 202.0
byte* main::cols
byte* main::cols#1 cols zp[2]:3 67.33333333333333
byte* main::cols#5 cols zp[2]:3 133.66666666666669
byte main::p0_idx
byte main::p0_idx#1 p0_idx zp[1]:7 14.428571428571429
byte main::p0_idx#2 p0_idx zp[1]:7 15.538461538461538
byte main::p1_idx
byte main::p1_idx#1 p1_idx zp[1]:8 15.538461538461538
byte main::p1_idx#2 p1_idx zp[1]:8 14.962962962962964
byte main::p2_idx
byte main::p2_idx#1 p2_idx zp[1]:9 16.833333333333332
byte main::p2_idx#2 p2_idx zp[1]:9 14.428571428571429
byte* main::screen
byte* main::screen#1 screen zp[2]:5 101.0
byte* main::screen#5 screen zp[2]:5 120.3
byte* main::toD0181_gfx
byte main::toD0181_return
const byte main::toD0181_return#0 toD0181_return = >(word)SCREEN&$3fff*4|>(word)CANVAS1/4&$f
byte* main::toD0181_screen
byte* main::toD0182_gfx
byte main::toD0182_return
const byte main::toD0182_return#0 toD0182_return = >(word)SCREEN&$3fff*4|>(word)CANVAS2/4&$f
byte* main::toD0182_screen
byte main::x
byte main::x#1 reg byte y 2002.0
byte main::x#2 reg byte y 1001.0
byte main::x0
byte main::x0#0 x0 zp[1]:21 16.833333333333332
byte main::x1
byte main::x1#0 x1 zp[1]:12 33.666666666666664
byte main::x2
byte main::x2#0 x2 zp[1]:12 43.285714285714285
byte main::y
byte main::y#1 y zp[1]:2 202.0
byte main::y#2 y zp[1]:2 36.72727272727273
byte main::y0
byte main::y0#0 y0 zp[1]:22 16.833333333333332
byte main::y1
byte main::y1#0 y1 zp[1]:23 33.666666666666664
byte main::y2
byte main::y2#0 y2 zp[1]:24 43.285714285714285
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#6 reg byte x 12500.125
byte* memset::dst
byte* memset::dst#1 dst zp[2]:32 200002.0
byte* memset::dst#2 dst zp[2]:32 133668.3333333333
byte* memset::dst#4 dst zp[2]:32 2002.0
byte* memset::end
byte* memset::end#0 end zp[2]:30 16833.666666666664
word memset::num
word memset::num#4 num zp[2]:30 1001.0
void* memset::return
void* memset::str
void* memset::str#5 str zp[2]:32
const byte* plot_bit[8]  = { $80, $40, $20, $10, 8, 4, 2, 1 }
const byte** plot_column[$10]  = { LINE_BUFFER, LINE_BUFFER+(byte)1*$80, LINE_BUFFER+(word)2*$80, LINE_BUFFER+(word)3*$80, LINE_BUFFER+(word)4*$80, LINE_BUFFER+(word)5*$80, LINE_BUFFER+(word)6*$80, LINE_BUFFER+(word)7*$80, LINE_BUFFER+(word)8*$80, LINE_BUFFER+(word)9*$80, LINE_BUFFER+(word)$a*$80, LINE_BUFFER+(word)$b*$80, LINE_BUFFER+(word)$c*$80, LINE_BUFFER+(word)$d*$80, LINE_BUFFER+(word)$e*$80, LINE_BUFFER+(word)$f*$80 }
void setup_irq()
byte sgn_u8(byte sgn_u8::u)
byte~ sgn_u8::$0 reg byte a 20002.0
byte sgn_u8::return
byte sgn_u8::return#0 reg byte a 2002.0
byte sgn_u8::return#1 reg byte a 2002.0
byte sgn_u8::return#4 reg byte a 500.5
byte sgn_u8::u
byte sgn_u8::u#0 reg byte a 2002.0
byte sgn_u8::u#1 reg byte a 2002.0
byte sgn_u8::u#2 reg byte a 12003.0

zp[1]:2 [ main::y#2 main::y#1 ]
zp[2]:3 [ main::cols#5 main::cols#1 ]
zp[2]:5 [ main::screen#5 main::screen#1 ]
zp[1]:7 [ main::p0_idx#2 main::p0_idx#1 ]
zp[1]:8 [ main::p1_idx#2 main::p1_idx#1 ]
zp[1]:9 [ main::p2_idx#2 main::p2_idx#1 ]
zp[2]:10 [ main::canvas#10 main::canvas#19 main::canvas#1 ]
reg byte y [ main::x#2 main::x#1 ]
reg byte x [ main::c#2 main::c#4 main::c#1 ]
reg byte x [ memset::c#6 ]
zp[1]:12 [ line::x2#15 line::x2#0 line::x2#1 line::x2#2 main::x1#0 main::x2#0 ]
zp[1]:13 [ line::y2#13 line::y2#10 line::y2#0 line::y2#1 line::y2#2 line::y2#3 ]
zp[1]:14 [ line::e#3 line::e#0 line::e#5 line::e#2 line::e#1 ]
zp[1]:15 [ line::e1#3 line::e1#0 line::e1#1 line::e1#2 ]
zp[1]:16 [ line::x#10 line::x#12 line::x#18 line::x#15 line::x#0 line::x1#0 line::x1#1 line::x1#2 line::x#17 line::x#1 line::x#19 ]
zp[1]:17 [ line::y#13 line::y#15 line::y#11 line::y#7 line::y#17 line::y#0 line::y1#0 line::y1#1 line::y1#2 line::y#1 line::y#10 line::y#12 line::y#4 ]
zp[1]:18 [ line::e2#3 line::e2#7 line::e2#0 line::e2#2 line::e2#1 ]
reg byte x [ eorfill::x#2 eorfill::x#1 ]
reg byte y [ eorfill::y#2 eorfill::y#1 ]
reg byte a [ eorfill::eor#2 eorfill::eor#0 eorfill::eor#1 ]
reg byte a [ abs_u8::return#4 abs_u8::return#2 abs_u8::u#2 abs_u8::u#0 abs_u8::u#1 ]
reg byte a [ sgn_u8::u#2 sgn_u8::u#0 sgn_u8::u#1 ]
reg byte a [ sgn_u8::return#4 ]
zp[1]:19 [ canvas_show_memory ]
zp[1]:20 [ canvas_show_flag ]
reg byte a [ kbhit::return#2 ]
reg byte a [ irq_bottom_2::$0 ]
zp[1]:21 [ main::x0#0 ]
zp[1]:22 [ main::y0#0 ]
zp[1]:23 [ main::y1#0 ]
zp[1]:24 [ main::y2#0 ]
reg byte a [ kbhit::return#0 ]
reg byte a [ abs_u8::return#0 ]
zp[1]:25 [ line::dx#0 ]
reg byte a [ abs_u8::return#1 ]
zp[1]:26 [ line::dy#0 ]
reg byte a [ sgn_u8::return#0 ]
zp[1]:27 [ line::sx#0 ]
reg byte a [ sgn_u8::return#1 ]
zp[1]:28 [ line::sy#0 ]
zp[1]:29 [ line::plot2_y#0 ]
reg byte a [ line::plot2_$0 ]
reg byte a [ line::plot2_$2 ]
zp[2]:30 [ line::plot2_column#0 eorfill::line_column#2 eorfill::line_column#1 memset::num#4 memset::end#0 ]
reg byte a [ line::plot2_$1 ]
reg byte a [ line::plot3_$0 ]
reg byte a [ line::plot3_$2 ]
zp[2]:32 [ line::plot3_column#0 eorfill::fill_column#2 eorfill::canvas#0 eorfill::fill_column#1 memset::str#5 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte a [ line::plot3_$1 ]
reg byte a [ line::plot1_$0 ]
reg byte a [ line::plot1_$2 ]
zp[2]:34 [ line::plot1_column#0 ]
reg byte a [ line::plot1_$1 ]
reg byte a [ line::plot4_$0 ]
reg byte a [ line::plot4_$2 ]
zp[2]:36 [ line::plot4_column#0 ]
reg byte a [ line::plot4_$1 ]
reg byte a [ line::plot5_$0 ]
reg byte a [ line::plot5_$2 ]
zp[2]:38 [ line::plot5_column#0 ]
reg byte a [ line::plot5_$1 ]
reg byte a [ line::plot6_$0 ]
reg byte a [ line::plot6_$2 ]
zp[2]:40 [ line::plot6_column#0 ]
reg byte a [ line::plot6_$1 ]
reg byte x [ abs_u8::$0 ]
reg byte a [ sgn_u8::$0 ]


FINAL ASSEMBLER
Score: 105477

  // File Comments
// Filling a simple 16x16 2D polygon using EOR-filling
// - Clearing canvas
// - Trivial 2D rotation using sine tables
// - Line-drawing polygon edges (fill-ready lines)
// - Up-to-down EOR filling 
// - Double buffering
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // Timer Control - Start/stop timer (0:stop, 1: start)
  .const CIA_TIMER_CONTROL_START = 1
  // Timer B Control - Timer counts (00:system cycles, 01: CNT pulses, 10: timer A underflow, 11: time A underflow while CNT is high)
  .const CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
  .const BORDER_YPOS_BOTTOM = $fa
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // The colors of the C64
  .const BLACK = 0
  .const WHITE = 1
  .const RED = 2
  .const DARK_GREY = $b
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
  .const OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
  .const OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR = $20
  .const OFFSET_STRUCT_MOS6569_VICII_BG_COLOR = $21
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .const OFFSET_STRUCT_MOS6569_VICII_CONTROL1 = $11
  .const OFFSET_STRUCT_MOS6569_VICII_RASTER = $12
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE = $1a
  .const OFFSET_STRUCT_MOS6569_VICII_MEMORY = $18
  .const OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS = $19
  // The VIC-II MOS 6567/6569
  .label VICII = $d000
  // Color Ram
  .label COLS = $d800
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#2 timer A&B as one single 32-bit value
  .label CIA2_TIMER_AB = $dd04
  // The vector used when the KERNAL serves IRQ interrupts
  .label KERNEL_IRQ = $314
  // The line buffer
  .label LINE_BUFFER = $2000
  // The two charsets used as screen buffers
  .label CANVAS1 = $3000
  .label CANVAS2 = $3800
  // The screen matrix
  .label SCREEN = $2c00
  // The screen console
  .label CONSOLE = $400
  // The default charset address
  .label PETSCII = $1000
  .label COSTAB = SINTAB+$40
  // The current canvas being rendered to the screen - in D018 format.
  .label canvas_show_memory = $13
  // Flag signalling that the canvas on screen needs to be updated.
  // Set to 1 by the renderer when a new canvas is ready for showing, and to 0 by the raster when the canvas is shown on screen.
  .label canvas_show_flag = $14
  // __start
__start: {
    .const __init1_toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
    // [1] phi from __start to __start::__init1 [phi:__start->__start::__init1]
    // __start::__init1
    // [2] phi from __start::__init1 to __start::__init1_toD0181 [phi:__start::__init1->__start::__init1_toD0181]
    // __start::__init1_toD0181
    // __start::__init1_@1
    // canvas_show_memory = toD018(SCREEN, CANVAS2)
    // [3] canvas_show_memory = __start::__init1_toD0181_return#0 -- vbuz1=vbuc1 
    lda #__init1_toD0181_return
    sta.z canvas_show_memory
    // canvas_show_flag = 0
    // [4] canvas_show_flag = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z canvas_show_flag
    // [5] phi from __start::__init1_@1 to __start::@1 [phi:__start::__init1_@1->__start::@1]
    // __start::@1
    // [6] call main 
    // [28] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [7] return 
    rts
}
  // irq_bottom_2
// Interrupt Routine 2
irq_bottom_2: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>LINE_BUFFER)/4&$f
    // entry interrupt(KERNEL_KEYBOARD)
    // VICII->BORDER_COLOR = BLACK
    // [8] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // kbhit()
    // [9] call kbhit 
    jsr kbhit
    // [10] kbhit::return#2 = kbhit::return#0
    // irq_bottom_2::@4
    // [11] irq_bottom_2::$0 = kbhit::return#2
    // if(!kbhit())
    // [12] if(0==irq_bottom_2::$0) goto irq_bottom_2::@1 -- vbuc1_eq_vbuaa_then_la1 
    // Show the current canvas (unless a key is being pressed)
    cmp #0
    beq __b1
    // [13] phi from irq_bottom_2::@4 to irq_bottom_2::toD0181 [phi:irq_bottom_2::@4->irq_bottom_2::toD0181]
    // irq_bottom_2::toD0181
    // irq_bottom_2::@3
    // VICII->MEMORY = toD018(SCREEN, LINE_BUFFER)
    // [14] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_2::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // irq_bottom_2::@2
  __b2:
    // canvas_show_flag = 0
    // [15] canvas_show_flag = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z canvas_show_flag
    // VICII->IRQ_STATUS = IRQ_RASTER
    // [16] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // VICII->RASTER = BORDER_YPOS_BOTTOM-8
    // [17] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8 -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 1 at 8 pixels before the border
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // *KERNEL_IRQ = &irq_bottom_1
    // [18] *KERNEL_IRQ = &irq_bottom_1 -- _deref_qprc1=pprc2 
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    // irq_bottom_2::@return
    // }
    // [19] return  - exit interrupt(KERNEL_KEYBOARD)
    jmp $ea31
    // irq_bottom_2::@1
  __b1:
    // VICII->MEMORY = canvas_show_memory
    // [20] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = canvas_show_memory -- _deref_pbuc1=vbuz1 
    lda.z canvas_show_memory
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    jmp __b2
}
  // irq_bottom_1
// Interrupt Routine 1: Just above last text line.
irq_bottom_1: {
    .const toD0181_return = (>(CONSOLE&$3fff)*4)|(>PETSCII)/4&$f
    // entry interrupt(KERNEL_MIN)
    // VICII->BORDER_COLOR = DARK_GREY
    // [21] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = DARK_GREY -- _deref_pbuc1=vbuc2 
    // Change border color
    lda #DARK_GREY
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // [22] phi from irq_bottom_1 to irq_bottom_1::toD0181 [phi:irq_bottom_1->irq_bottom_1::toD0181]
    // irq_bottom_1::toD0181
    // irq_bottom_1::@1
    // VICII->MEMORY = toD018(CONSOLE, PETSCII)
    // [23] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY) = irq_bottom_1::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    // Show the cycle counter
    lda #toD0181_return
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_MEMORY
    // VICII->IRQ_STATUS = IRQ_RASTER
    // [24] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS) = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_STATUS
    // VICII->RASTER = BORDER_YPOS_BOTTOM
    // [25] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM -- _deref_pbuc1=vbuc2 
    // Trigger IRQ 2 at bottom of text-line
    lda #BORDER_YPOS_BOTTOM
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // *KERNEL_IRQ = &irq_bottom_2
    // [26] *KERNEL_IRQ = &irq_bottom_2 -- _deref_qprc1=pprc2 
    lda #<irq_bottom_2
    sta KERNEL_IRQ
    lda #>irq_bottom_2
    sta KERNEL_IRQ+1
    // irq_bottom_1::@return
    // }
    // [27] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // main
main: {
    .const toD0181_return = (>(SCREEN&$3fff)*4)|(>CANVAS1)/4&$f
    .const toD0182_return = (>(SCREEN&$3fff)*4)|(>CANVAS2)/4&$f
    .label cols = 3
    // Setup 16x16 canvas for rendering
    .label screen = 5
    .label y = 2
    .label x0 = $15
    .label y0 = $16
    .label x1 = $c
    .label y1 = $17
    .label x2 = $c
    .label y2 = $18
    .label p0_idx = 7
    .label p1_idx = 8
    .label p2_idx = 9
    // The current canvas being rendered to
    .label canvas = $a
    // memset(CONSOLE, ' ', 40*25)
    // [29] call memset 
  // Clear the console
    // [92] phi from main to memset [phi:main->memset]
    // [92] phi memset::c#6 = ' ' [phi:main->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [92] phi memset::str#5 = (void*)CONSOLE [phi:main->memset#1] -- pvoz1=pvoc1 
    lda #<CONSOLE
    sta.z memset.str
    lda #>CONSOLE
    sta.z memset.str+1
    // [92] phi memset::num#4 = (word)$28*$19 [phi:main->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [30] phi from main to main::@12 [phi:main->main::@12]
    // main::@12
    // memset(SCREEN, 0, 40*25)
    // [31] call memset 
  // Clear the screen
    // [92] phi from main::@12 to memset [phi:main::@12->memset]
    // [92] phi memset::c#6 = 0 [phi:main::@12->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi memset::str#5 = (void*)SCREEN [phi:main::@12->memset#1] -- pvoz1=pvoc1 
    lda #<SCREEN
    sta.z memset.str
    lda #>SCREEN
    sta.z memset.str+1
    // [92] phi memset::num#4 = (word)$28*$19 [phi:main::@12->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [32] phi from main::@12 to main::@13 [phi:main::@12->main::@13]
    // main::@13
    // memset(COLS, BLACK, 40*25)
    // [33] call memset 
    // [92] phi from main::@13 to memset [phi:main::@13->memset]
    // [92] phi memset::c#6 = BLACK [phi:main::@13->memset#0] -- vbuxx=vbuc1 
    ldx #BLACK
    // [92] phi memset::str#5 = (void*)COLS [phi:main::@13->memset#1] -- pvoz1=pvoc1 
    lda #<COLS
    sta.z memset.str
    lda #>COLS
    sta.z memset.str+1
    // [92] phi memset::num#4 = (word)$28*$19 [phi:main::@13->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // [34] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
    // [34] phi main::screen#5 = SCREEN+$c [phi:main::@13->main::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN+$c
    sta.z screen
    lda #>SCREEN+$c
    sta.z screen+1
    // [34] phi main::cols#5 = COLS+$c [phi:main::@13->main::@1#1] -- pbuz1=pbuc1 
    lda #<COLS+$c
    sta.z cols
    lda #>COLS+$c
    sta.z cols+1
    // [34] phi main::y#2 = 0 [phi:main::@13->main::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // main::@1
  __b1:
    // for(char y=0;y<16;y++)
    // [35] if(main::y#2<$10) goto main::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z y
    cmp #$10
    bcs !__b2+
    jmp __b2
  !__b2:
    // main::@3
    // VICII->BORDER_COLOR = BLACK
    // [36] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // VICII->BG_COLOR = BLACK
    // [37] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BG_COLOR
    // setup_irq()
    // [38] call setup_irq 
    // Set-up the raster IRQ
    jsr setup_irq
    // [39] phi from main::@3 to main::@7 [phi:main::@3->main::@7]
    // [39] phi main::canvas#10 = CANVAS1 [phi:main::@3->main::@7#0] -- pbuz1=pbuc1 
    lda #<CANVAS1
    sta.z canvas
    lda #>CANVAS1
    sta.z canvas+1
    // [39] phi main::p2_idx#2 = $b5+$aa [phi:main::@3->main::@7#1] -- vbuz1=vbuc1 
    lda #$b5+$aa
    sta.z p2_idx
    // [39] phi main::p1_idx#2 = $b5+$f [phi:main::@3->main::@7#2] -- vbuz1=vbuc1 
    lda #$b5+$f
    sta.z p1_idx
    // [39] phi main::p0_idx#2 = $b5 [phi:main::@3->main::@7#3] -- vbuz1=vbuc1 
    lda #$b5
    sta.z p0_idx
    // main::@7
    // [40] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
  __b8:
    // clock_start()
    // [41] call clock_start 
    jsr clock_start
    // [42] phi from main::@8 to main::@14 [phi:main::@8->main::@14]
    // main::@14
    // memset(LINE_BUFFER, 0, 0x0800)
    // [43] call memset 
  // Clear line buffer
    // [92] phi from main::@14 to memset [phi:main::@14->memset]
    // [92] phi memset::c#6 = 0 [phi:main::@14->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [92] phi memset::str#5 = (void*)LINE_BUFFER [phi:main::@14->memset#1] -- pvoz1=pvoc1 
    lda #<LINE_BUFFER
    sta.z memset.str
    lda #>LINE_BUFFER
    sta.z memset.str+1
    // [92] phi memset::num#4 = $800 [phi:main::@14->memset#2] -- vwuz1=vwuc1 
    lda #<$800
    sta.z memset.num
    lda #>$800
    sta.z memset.num+1
    jsr memset
    // main::@15
    // x0 = COSTAB[p0_idx]
    // [44] main::x0#0 = COSTAB[main::p0_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    // Plot in line buffer
    ldy.z p0_idx
    lda COSTAB,y
    sta.z x0
    // y0 = SINTAB[p0_idx]
    // [45] main::y0#0 = SINTAB[main::p0_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    lda SINTAB,y
    sta.z y0
    // x1 = COSTAB[p1_idx]
    // [46] main::x1#0 = COSTAB[main::p1_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p1_idx
    lda COSTAB,y
    sta.z x1
    // y1 = SINTAB[p1_idx]
    // [47] main::y1#0 = SINTAB[main::p1_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    lda SINTAB,y
    sta.z y1
    // line(LINE_BUFFER, x0, y0, x1, y1)
    // [48] line::x1#0 = main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x1
    // [49] line::y1#0 = main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y1
    // [50] line::x2#0 = main::x1#0
    // [51] line::y2#0 = main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y2
    // [52] call line 
    // [115] phi from main::@15 to line [phi:main::@15->line]
    // [115] phi line::y2#10 = line::y2#0 [phi:main::@15->line#0] -- register_copy 
    // [115] phi line::x2#15 = line::x2#0 [phi:main::@15->line#1] -- register_copy 
    // [115] phi line::y#0 = line::y1#0 [phi:main::@15->line#2] -- register_copy 
    // [115] phi line::x#0 = line::x1#0 [phi:main::@15->line#3] -- register_copy 
    jsr line
    // main::@16
    // x2 = COSTAB[p2_idx]
    // [53] main::x2#0 = COSTAB[main::p2_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z p2_idx
    lda COSTAB,y
    sta.z x2
    // y2 = SINTAB[p2_idx]
    // [54] main::y2#0 = SINTAB[main::p2_idx#2] -- vbuz1=pbuc1_derefidx_vbuz2 
    lda SINTAB,y
    sta.z y2
    // line(LINE_BUFFER, x1, y1, x2, y2)
    // [55] line::x1#1 = main::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z line.x1
    // [56] line::y1#1 = main::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z line.y1
    // [57] line::x2#1 = main::x2#0
    // [58] line::y2#1 = main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y2
    // [59] call line 
    // [115] phi from main::@16 to line [phi:main::@16->line]
    // [115] phi line::y2#10 = line::y2#1 [phi:main::@16->line#0] -- register_copy 
    // [115] phi line::x2#15 = line::x2#1 [phi:main::@16->line#1] -- register_copy 
    // [115] phi line::y#0 = line::y1#1 [phi:main::@16->line#2] -- register_copy 
    // [115] phi line::x#0 = line::x1#1 [phi:main::@16->line#3] -- register_copy 
    jsr line
    // main::@17
    // line(LINE_BUFFER, x2, y2, x0, y0)
    // [60] line::x1#2 = main::x2#0 -- vbuz1=vbuz2 
    lda.z x2
    sta.z line.x1
    // [61] line::y1#2 = main::y2#0 -- vbuz1=vbuz2 
    lda.z y2
    sta.z line.y1
    // [62] line::x2#2 = main::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z line.x2
    // [63] line::y2#2 = main::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z line.y2
    // [64] call line 
    // [115] phi from main::@17 to line [phi:main::@17->line]
    // [115] phi line::y2#10 = line::y2#2 [phi:main::@17->line#0] -- register_copy 
    // [115] phi line::x2#15 = line::x2#2 [phi:main::@17->line#1] -- register_copy 
    // [115] phi line::y#0 = line::y1#2 [phi:main::@17->line#2] -- register_copy 
    // [115] phi line::x#0 = line::x1#2 [phi:main::@17->line#3] -- register_copy 
    jsr line
    // main::@18
    // p0_idx++;
    // [65] main::p0_idx#1 = ++ main::p0_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p0_idx
    // p1_idx++;
    // [66] main::p1_idx#1 = ++ main::p1_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p1_idx
    // p2_idx++;
    // [67] main::p2_idx#1 = ++ main::p2_idx#2 -- vbuz1=_inc_vbuz1 
    inc.z p2_idx
    // VICII->BORDER_COLOR = RED
    // [68] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = RED -- _deref_pbuc1=vbuc2 
    // Wait until the canvas on screen has been switched before starting work on the next frame
    lda #RED
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // main::@9
  __b9:
    // while(canvas_show_flag)
    // [69] if(0!=canvas_show_flag) goto main::@9 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z canvas_show_flag
    bne __b9
    // main::@10
    // VICII->BORDER_COLOR = BLACK
    // [70] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) = BLACK -- _deref_pbuc1=vbuc2 
    lda #BLACK
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR
    // eorfill(LINE_BUFFER, canvas)
    // [71] eorfill::canvas#0 = main::canvas#10 -- pbuz1=pbuz2 
    lda.z canvas
    sta.z eorfill.canvas
    lda.z canvas+1
    sta.z eorfill.canvas+1
    // [72] call eorfill 
  // Fill canvas
    // [197] phi from main::@10 to eorfill [phi:main::@10->eorfill]
    jsr eorfill
    // main::@19
    // canvas ^= (CANVAS1^CANVAS2)
    // [73] main::canvas#1 = main::canvas#10 ^ CANVAS1^CANVAS2 -- vwuz1=pbuz1_bxor_vwuc1 
    // swap canvas being rendered to (using XOR)
    lda #<CANVAS1^CANVAS2
    eor.z canvas
    sta.z canvas
    lda #>CANVAS1^CANVAS2
    eor.z canvas+1
    sta.z canvas+1
    // [74] phi from main::@19 to main::toD0181 [phi:main::@19->main::toD0181]
    // main::toD0181
    // [75] phi from main::toD0181 to main::toD0182 [phi:main::toD0181->main::toD0182]
    // main::toD0182
    // main::@11
    // canvas_show_memory ^= toD018(SCREEN,CANVAS1)^toD018(SCREEN,CANVAS2)
    // [76] canvas_show_memory = canvas_show_memory ^ main::toD0181_return#0^main::toD0182_return#0 -- vbuz1=vbuz1_bxor_vbuc1 
    // Swap canvas to show on screen (using XOR)
    lda #toD0181_return^toD0182_return
    eor.z canvas_show_memory
    sta.z canvas_show_memory
    // canvas_show_flag = 1
    // [77] canvas_show_flag = 1 -- vbuz1=vbuc1 
    // Set flag used to signal when the canvas has been shown
    lda #1
    sta.z canvas_show_flag
    // main::@20
    // [78] main::canvas#19 = (byte*)main::canvas#1
    // [39] phi from main::@20 to main::@7 [phi:main::@20->main::@7]
    // [39] phi main::canvas#10 = main::canvas#19 [phi:main::@20->main::@7#0] -- register_copy 
    // [39] phi main::p2_idx#2 = main::p2_idx#1 [phi:main::@20->main::@7#1] -- register_copy 
    // [39] phi main::p1_idx#2 = main::p1_idx#1 [phi:main::@20->main::@7#2] -- register_copy 
    // [39] phi main::p0_idx#2 = main::p0_idx#1 [phi:main::@20->main::@7#3] -- register_copy 
    jmp __b8
    // main::@2
  __b2:
    // [79] main::c#4 = main::y#2 -- vbuxx=vbuz1 
    ldx.z y
    // [80] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // [80] phi main::c#2 = main::c#4 [phi:main::@2->main::@4#0] -- register_copy 
    // [80] phi main::x#2 = 0 [phi:main::@2->main::@4#1] -- vbuyy=vbuc1 
    ldy #0
    // main::@4
  __b4:
    // for(char x=0;x<16;x++)
    // [81] if(main::x#2<$10) goto main::@5 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$10
    bcc __b5
    // main::@6
    // cols += 40
    // [82] main::cols#1 = main::cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z cols
    sta.z cols
    bcc !+
    inc.z cols+1
  !:
    // screen += 40
    // [83] main::screen#1 = main::screen#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen
    sta.z screen
    bcc !+
    inc.z screen+1
  !:
    // for(char y=0;y<16;y++)
    // [84] main::y#1 = ++ main::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [34] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [34] phi main::screen#5 = main::screen#1 [phi:main::@6->main::@1#0] -- register_copy 
    // [34] phi main::cols#5 = main::cols#1 [phi:main::@6->main::@1#1] -- register_copy 
    // [34] phi main::y#2 = main::y#1 [phi:main::@6->main::@1#2] -- register_copy 
    jmp __b1
    // main::@5
  __b5:
    // cols[x] = WHITE
    // [85] main::cols#5[main::x#2] = WHITE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #WHITE
    sta (cols),y
    // screen[x] = c
    // [86] main::screen#5[main::x#2] = main::c#2 -- pbuz1_derefidx_vbuyy=vbuxx 
    txa
    sta (screen),y
    // c+=0x10
    // [87] main::c#1 = main::c#2 + $10 -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[$10]
    // for(char x=0;x<16;x++)
    // [88] main::x#1 = ++ main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [80] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
    // [80] phi main::c#2 = main::c#1 [phi:main::@5->main::@4#0] -- register_copy 
    // [80] phi main::x#2 = main::x#1 [phi:main::@5->main::@4#1] -- register_copy 
    jmp __b4
}
  // kbhit
// Return true if there's a key waiting, return false if not
kbhit: {
    // CIA#1 Port A: keyboard matrix columns and joystick #2
    .label CIA1_PORT_A = $dc00
    // CIA#1 Port B: keyboard matrix rows and joystick #1.
    .label CIA1_PORT_B = $dc01
    // *CIA1_PORT_A = 0
    // [89] *kbhit::CIA1_PORT_A = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta CIA1_PORT_A
    // ~*CIA1_PORT_B
    // [90] kbhit::return#0 = ~ *kbhit::CIA1_PORT_B -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    // kbhit::@return
    // }
    // [91] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($20) str, byte register(X) c, word zp($1e) num)
memset: {
    .label end = $1e
    .label dst = $20
    .label num = $1e
    .label str = $20
    // if(num>0)
    // [93] if(memset::num#4<=0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [94] memset::end#0 = (byte*)memset::str#5 + memset::num#4 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [95] memset::dst#4 = (byte*)memset::str#5
    // [96] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [96] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [97] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [98] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [99] *memset::dst#2 = memset::c#6 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [100] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // setup_irq
// Setup raster IRQ to change charset at different lines
setup_irq: {
    // asm
    // asm { sei  }
    sei
    // CIA1->INTERRUPT = CIA_INTERRUPT_CLEAR
    // [102] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // VICII->CONTROL1 &= 0x7f
    // [103] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) = *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1) & $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to 8 pixels before the border
    lda #$7f
    and VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_CONTROL1
    // VICII->RASTER = BORDER_YPOS_BOTTOM-8
    // [104] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER) = BORDER_YPOS_BOTTOM-8 -- _deref_pbuc1=vbuc2 
    lda #BORDER_YPOS_BOTTOM-8
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_RASTER
    // VICII->IRQ_ENABLE = IRQ_RASTER
    // [105] *((byte*)VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE) = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta VICII+OFFSET_STRUCT_MOS6569_VICII_IRQ_ENABLE
    // *KERNEL_IRQ = &irq_bottom_1
    // [106] *KERNEL_IRQ = &irq_bottom_1 -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<irq_bottom_1
    sta KERNEL_IRQ
    lda #>irq_bottom_1
    sta KERNEL_IRQ+1
    // asm
    // asm { cli  }
    cli
    // setup_irq::@return
    // }
    // [108] return 
    rts
}
  // clock_start
// Reset & start the processor clock time. The value can be read using clock().
// This uses CIA #2 Timer A+B on the C64
clock_start: {
    // CIA2->TIMER_A_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [109] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = 0 -- _deref_pbuc1=vbuc2 
    // Setup CIA#2 timer A to count (down) CPU cycles
    lda #0
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // CIA2->TIMER_B_CONTROL = CIA_TIMER_CONTROL_STOP | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [110] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // *CIA2_TIMER_AB = 0xffffffff
    // [111] *CIA2_TIMER_AB = $ffffffff -- _deref_pduc1=vduc2 
    lda #<$ffffffff
    sta CIA2_TIMER_AB
    lda #>$ffffffff
    sta CIA2_TIMER_AB+1
    lda #<$ffffffff>>$10
    sta CIA2_TIMER_AB+2
    lda #>$ffffffff>>$10
    sta CIA2_TIMER_AB+3
    // CIA2->TIMER_B_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    // [112] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) = CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START|CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL
    // CIA2->TIMER_A_CONTROL = CIA_TIMER_CONTROL_START | CIA_TIMER_CONTROL_CONTINUOUS | CIA_TIMER_CONTROL_A_COUNT_CYCLES
    // [113] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) = CIA_TIMER_CONTROL_START -- _deref_pbuc1=vbuc2 
    lda #CIA_TIMER_CONTROL_START
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL
    // clock_start::@return
    // }
    // [114] return 
    rts
}
  // line
// Draw a EOR friendly line between two points
// Uses bresenham line drawing routine
// line(byte zp($10) x1, byte zp($11) y1, byte zp($c) x2, byte zp($d) y2)
line: {
    .label x1 = $10
    .label y1 = $11
    .label x2 = $c
    .label y2 = $d
    .label x = $10
    .label y = $11
    .label dx = $19
    .label dy = $1a
    .label sx = $1b
    .label sy = $1c
    .label e2 = $12
    .label plot1_column = $22
    .label e = $e
    .label plot2_y = $1d
    .label plot2_column = $1e
    .label plot3_column = $20
    .label e1 = $f
    .label plot4_column = $24
    .label plot5_column = $26
    .label plot6_column = $28
    // abs_u8(x2-x1)
    // [116] abs_u8::u#0 = line::x2#15 - line::x#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x
    // [117] call abs_u8 
    // [211] phi from line to abs_u8 [phi:line->abs_u8]
    // [211] phi abs_u8::u#2 = abs_u8::u#0 [phi:line->abs_u8#0] -- register_copy 
    jsr abs_u8
    // abs_u8(x2-x1)
    // [118] abs_u8::return#0 = abs_u8::return#4
    // line::@19
    // dx = abs_u8(x2-x1)
    // [119] line::dx#0 = abs_u8::return#0 -- vbuz1=vbuaa 
    sta.z dx
    // abs_u8(y2-y1)
    // [120] abs_u8::u#1 = line::y2#10 - line::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y
    // [121] call abs_u8 
    // [211] phi from line::@19 to abs_u8 [phi:line::@19->abs_u8]
    // [211] phi abs_u8::u#2 = abs_u8::u#1 [phi:line::@19->abs_u8#0] -- register_copy 
    jsr abs_u8
    // abs_u8(y2-y1)
    // [122] abs_u8::return#1 = abs_u8::return#4
    // line::@20
    // dy = abs_u8(y2-y1)
    // [123] line::dy#0 = abs_u8::return#1 -- vbuz1=vbuaa 
    sta.z dy
    // sgn_u8(x2-x1)
    // [124] sgn_u8::u#0 = line::x2#15 - line::x#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z x2
    sec
    sbc.z x
    // [125] call sgn_u8 
    // [217] phi from line::@20 to sgn_u8 [phi:line::@20->sgn_u8]
    // [217] phi sgn_u8::u#2 = sgn_u8::u#0 [phi:line::@20->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // sgn_u8(x2-x1)
    // [126] sgn_u8::return#0 = sgn_u8::return#4
    // line::@21
    // sx = sgn_u8(x2-x1)
    // [127] line::sx#0 = sgn_u8::return#0 -- vbuz1=vbuaa 
    sta.z sx
    // sgn_u8(y2-y1)
    // [128] sgn_u8::u#1 = line::y2#10 - line::y#0 -- vbuaa=vbuz1_minus_vbuz2 
    lda.z y2
    sec
    sbc.z y
    // [129] call sgn_u8 
    // [217] phi from line::@21 to sgn_u8 [phi:line::@21->sgn_u8]
    // [217] phi sgn_u8::u#2 = sgn_u8::u#1 [phi:line::@21->sgn_u8#0] -- register_copy 
    jsr sgn_u8
    // sgn_u8(y2-y1)
    // [130] sgn_u8::return#1 = sgn_u8::return#4
    // line::@22
    // sy = sgn_u8(y2-y1)
    // [131] line::sy#0 = sgn_u8::return#1 -- vbuz1=vbuaa 
    sta.z sy
    // if(sx==0xff)
    // [132] if(line::sx#0!=$ff) goto line::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z sx
    bne __b1
    // line::@3
    // y++;
    // [133] line::y#1 = ++ line::y#0 -- vbuz1=_inc_vbuz1 
    inc.z y
    // y2++;
    // [134] line::y2#3 = ++ line::y2#10 -- vbuz1=_inc_vbuz1 
    inc.z y2
    // [135] phi from line::@22 line::@3 to line::@1 [phi:line::@22/line::@3->line::@1]
    // [135] phi line::y2#13 = line::y2#10 [phi:line::@22/line::@3->line::@1#0] -- register_copy 
    // [135] phi line::y#17 = line::y#0 [phi:line::@22/line::@3->line::@1#1] -- register_copy 
    // line::@1
  __b1:
    // if(dx > dy)
    // [136] if(line::dx#0>line::dy#0) goto line::@2 -- vbuz1_gt_vbuz2_then_la1 
    lda.z dy
    cmp.z dx
    bcs !__b2+
    jmp __b2
  !__b2:
    // line::@4
    // if(sx==sy)
    // [137] if(line::sx#0==line::sy#0) goto line::plot1 -- vbuz1_eq_vbuz2_then_la1 
    // Steep slope - Y is the driver - only plot one plot per X
    lda.z sx
    cmp.z sy
    beq plot1
    // line::@5
    // e = dy/2
    // [138] line::e#0 = line::dy#0 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z dy
    lsr
    sta.z e
    // [139] phi from line::@5 line::@7 to line::@6 [phi:line::@5/line::@7->line::@6]
    // [139] phi line::x#15 = line::x#0 [phi:line::@5/line::@7->line::@6#0] -- register_copy 
    // [139] phi line::e#3 = line::e#0 [phi:line::@5/line::@7->line::@6#1] -- register_copy 
    // [139] phi line::y#7 = line::y#17 [phi:line::@5/line::@7->line::@6#2] -- register_copy 
    // line::@6
  __b6:
    // y += sy
    // [140] line::y#10 = line::y#7 + line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // e += dx
    // [141] line::e#1 = line::e#3 + line::dx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    // if(e>dy)
    // [142] if(line::e#1<=line::dy#0) goto line::@7 -- vbuz1_le_vbuz2_then_la1 
    lda.z dy
    cmp.z e
    bcs __b7
    // line::@8
    // plot(x, y-sy)
    // [143] line::plot2_y#0 = line::y#10 - line::sy#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y
    sec
    sbc.z sy
    sta.z plot2_y
    // line::plot2
    // x/8
    // [144] line::plot2_$0 = line::x#15 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [145] line::plot2_$2 = line::plot2_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [146] line::plot2_column#0 = plot_column[line::plot2_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot2_column
    lda plot_column+1,y
    sta.z plot2_column+1
    // x&7
    // [147] line::plot2_$1 = line::x#15 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // column[y] |= plot_bit[x&7]
    // [148] line::plot2_column#0[line::plot2_y#0] = line::plot2_column#0[line::plot2_y#0] | plot_bit[line::plot2_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z plot2_y
    tax
    lda (plot2_column),y
    ora plot_bit,x
    sta (plot2_column),y
    // line::@16
    // x += sx
    // [149] line::x#1 = line::x#15 + line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    // e -= dy
    // [150] line::e#2 = line::e#1 - line::dy#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    // [151] phi from line::@16 line::@6 to line::@7 [phi:line::@16/line::@6->line::@7]
    // [151] phi line::x#17 = line::x#1 [phi:line::@16/line::@6->line::@7#0] -- register_copy 
    // [151] phi line::e#5 = line::e#2 [phi:line::@16/line::@6->line::@7#1] -- register_copy 
    // line::@7
  __b7:
    // while (y != y2)
    // [152] if(line::y#10!=line::y2#13) goto line::@6 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z y2
    bne __b6
    // line::plot3
    // x/8
    // [153] line::plot3_$0 = line::x#17 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [154] line::plot3_$2 = line::plot3_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [155] line::plot3_column#0 = plot_column[line::plot3_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot3_column
    lda plot_column+1,y
    sta.z plot3_column+1
    // x&7
    // [156] line::plot3_$1 = line::x#17 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // column[y] |= plot_bit[x&7]
    // [157] line::plot3_column#0[line::y#10] = line::plot3_column#0[line::y#10] | plot_bit[line::plot3_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot3_column),y
    ora plot_bit,x
    sta (plot3_column),y
    // line::@return
    // }
    // [158] return 
    rts
    // line::plot1
  plot1:
    // x/8
    // [159] line::plot1_$0 = line::x#0 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [160] line::plot1_$2 = line::plot1_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [161] line::plot1_column#0 = plot_column[line::plot1_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot1_column
    lda plot_column+1,y
    sta.z plot1_column+1
    // x&7
    // [162] line::plot1_$1 = line::x#0 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // column[y] |= plot_bit[x&7]
    // [163] line::plot1_column#0[line::y#17] = line::plot1_column#0[line::y#17] | plot_bit[line::plot1_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot1_column),y
    ora plot_bit,x
    sta (plot1_column),y
    // line::@15
    // if(dx==0)
    // [164] if(line::dx#0!=0) goto line::@9 -- vbuz1_neq_0_then_la1 
    lda.z dx
    cmp #0
    bne __b9
    rts
    // line::@9
  __b9:
    // e = dy/2
    // [165] line::e1#0 = line::dy#0 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z dy
    lsr
    sta.z e1
    // [166] phi from line::@10 line::@17 line::@9 to line::@10 [phi:line::@10/line::@17/line::@9->line::@10]
    // [166] phi line::x#18 = line::x#18 [phi:line::@10/line::@17/line::@9->line::@10#0] -- register_copy 
    // [166] phi line::e1#3 = line::e1#1 [phi:line::@10/line::@17/line::@9->line::@10#1] -- register_copy 
    // [166] phi line::y#11 = line::y#12 [phi:line::@10/line::@17/line::@9->line::@10#2] -- register_copy 
    // line::@10
  __b10:
    // y += sy
    // [167] line::y#12 = line::y#11 + line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    // e += dx
    // [168] line::e1#1 = line::e1#3 + line::dx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e1
    clc
    adc.z dx
    sta.z e1
    // while(e<=dy)
    // [169] if(line::e1#1<=line::dy#0) goto line::@10 -- vbuz1_le_vbuz2_then_la1 
    lda.z dy
    cmp.z e1
    bcs __b10
    // line::@11
    // x += sx
    // [170] line::x#19 = line::x#18 + line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    // e -= dy
    // [171] line::e1#2 = line::e1#1 - line::dy#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e1
    sec
    sbc.z dy
    sta.z e1
    // line::plot4
    // x/8
    // [172] line::plot4_$0 = line::x#19 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [173] line::plot4_$2 = line::plot4_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [174] line::plot4_column#0 = plot_column[line::plot4_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot4_column
    lda plot_column+1,y
    sta.z plot4_column+1
    // x&7
    // [175] line::plot4_$1 = line::x#19 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // column[y] |= plot_bit[x&7]
    // [176] line::plot4_column#0[line::y#12] = line::plot4_column#0[line::y#12] | plot_bit[line::plot4_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot4_column),y
    ora plot_bit,x
    sta (plot4_column),y
    // line::@17
    // while (x != x2)
    // [177] if(line::x#19!=line::x2#15) goto line::@10 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne __b10
    rts
    // line::@2
  __b2:
    // e = dx/2
    // [178] line::e2#0 = line::dx#0 >> 1 -- vbuz1=vbuz2_ror_1 
    lda.z dx
    lsr
    sta.z e2
    // [179] phi from line::@13 line::@2 to line::@12 [phi:line::@13/line::@2->line::@12]
    // [179] phi line::e2#3 = line::e2#7 [phi:line::@13/line::@2->line::@12#0] -- register_copy 
    // [179] phi line::y#13 = line::y#15 [phi:line::@13/line::@2->line::@12#1] -- register_copy 
    // [179] phi line::x#10 = line::x#12 [phi:line::@13/line::@2->line::@12#2] -- register_copy 
    // line::@12
    // line::plot5
  plot5:
    // x/8
    // [180] line::plot5_$0 = line::x#10 >> 3 -- vbuaa=vbuz1_ror_3 
    lda.z x
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [181] line::plot5_$2 = line::plot5_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [182] line::plot5_column#0 = plot_column[line::plot5_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot5_column
    lda plot_column+1,y
    sta.z plot5_column+1
    // x&7
    // [183] line::plot5_$1 = line::x#10 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // column[y] |= plot_bit[x&7]
    // [184] line::plot5_column#0[line::y#13] = line::plot5_column#0[line::y#13] | plot_bit[line::plot5_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot5_column),y
    ora plot_bit,x
    sta (plot5_column),y
    // line::@18
    // x += sx
    // [185] line::x#12 = line::x#10 + line::sx#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    // e += dy
    // [186] line::e2#1 = line::e2#3 + line::dy#0 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e2
    clc
    adc.z dy
    sta.z e2
    // if(e>dx)
    // [187] if(line::e2#1<=line::dx#0) goto line::@13 -- vbuz1_le_vbuz2_then_la1 
    lda.z dx
    cmp.z e2
    bcs __b13
    // line::@14
    // y += sy
    // [188] line::y#4 = line::y#13 + line::sy#0 -- vbuz1=vbuz1_plus_vbuz2 
    tya
    clc
    adc.z sy
    sta.z y
    // e -= dx
    // [189] line::e2#2 = line::e2#1 - line::dx#0 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e2
    sec
    sbc.z dx
    sta.z e2
    // [190] phi from line::@14 line::@18 to line::@13 [phi:line::@14/line::@18->line::@13]
    // [190] phi line::e2#7 = line::e2#2 [phi:line::@14/line::@18->line::@13#0] -- register_copy 
    // [190] phi line::y#15 = line::y#4 [phi:line::@14/line::@18->line::@13#1] -- register_copy 
    // line::@13
  __b13:
    // while (x != x2)
    // [191] if(line::x#12!=line::x2#15) goto line::@12 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z x2
    bne plot5
    // line::plot6
    // x/8
    // [192] line::plot6_$0 = line::x#12 >> 3 -- vbuaa=vbuz1_ror_3 
    lsr
    lsr
    lsr
    // column = plot_column[x/8]
    // [193] line::plot6_$2 = line::plot6_$0 << 1 -- vbuaa=vbuaa_rol_1 
    asl
    // [194] line::plot6_column#0 = plot_column[line::plot6_$2] -- pbuz1=qbuc1_derefidx_vbuaa 
    tay
    lda plot_column,y
    sta.z plot6_column
    lda plot_column+1,y
    sta.z plot6_column+1
    // x&7
    // [195] line::plot6_$1 = line::x#12 & 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z x
    // column[y] |= plot_bit[x&7]
    // [196] line::plot6_column#0[line::y#15] = line::plot6_column#0[line::y#15] | plot_bit[line::plot6_$1] -- pbuz1_derefidx_vbuz2=pbuz1_derefidx_vbuz2_bor_pbuc1_derefidx_vbuaa 
    ldy.z y
    tax
    lda (plot6_column),y
    ora plot_bit,x
    sta (plot6_column),y
    rts
}
  // eorfill
// EOR fill from the line buffer onto the canvas
// eorfill(byte* zp($20) canvas)
eorfill: {
    .label canvas = $20
    .label line_column = $1e
    .label fill_column = $20
    // [198] phi from eorfill to eorfill::@1 [phi:eorfill->eorfill::@1]
    // [198] phi eorfill::fill_column#2 = eorfill::canvas#0 [phi:eorfill->eorfill::@1#0] -- register_copy 
    // [198] phi eorfill::line_column#2 = LINE_BUFFER [phi:eorfill->eorfill::@1#1] -- pbuz1=pbuc1 
    lda #<LINE_BUFFER
    sta.z line_column
    lda #>LINE_BUFFER
    sta.z line_column+1
    // [198] phi eorfill::x#2 = 0 [phi:eorfill->eorfill::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // eorfill::@1
  __b1:
    // for(char x=0;x<16;x++)
    // [199] if(eorfill::x#2<$10) goto eorfill::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$10
    bcc __b2
    // eorfill::@return
    // }
    // [200] return 
    rts
    // eorfill::@2
  __b2:
    // eor = line_column[0]
    // [201] eorfill::eor#0 = *eorfill::line_column#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (line_column),y
    // fill_column[0] = eor
    // [202] *eorfill::fill_column#2 = eorfill::eor#0 -- _deref_pbuz1=vbuaa 
    sta (fill_column),y
    // [203] phi from eorfill::@2 to eorfill::@3 [phi:eorfill::@2->eorfill::@3]
    // [203] phi eorfill::eor#2 = eorfill::eor#0 [phi:eorfill::@2->eorfill::@3#0] -- register_copy 
    // [203] phi eorfill::y#2 = 1 [phi:eorfill::@2->eorfill::@3#1] -- vbuyy=vbuc1 
    ldy #1
    // eorfill::@3
  __b3:
    // for(char y=1;y<16*8;y++)
    // [204] if(eorfill::y#2<(byte)$10*8) goto eorfill::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$10*8
    bcc __b4
    // eorfill::@5
    // line_column += 16*8
    // [205] eorfill::line_column#1 = eorfill::line_column#2 + (byte)$10*8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z line_column
    sta.z line_column
    bcc !+
    inc.z line_column+1
  !:
    // fill_column += 16*8
    // [206] eorfill::fill_column#1 = eorfill::fill_column#2 + (byte)$10*8 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$10*8
    clc
    adc.z fill_column
    sta.z fill_column
    bcc !+
    inc.z fill_column+1
  !:
    // for(char x=0;x<16;x++)
    // [207] eorfill::x#1 = ++ eorfill::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [198] phi from eorfill::@5 to eorfill::@1 [phi:eorfill::@5->eorfill::@1]
    // [198] phi eorfill::fill_column#2 = eorfill::fill_column#1 [phi:eorfill::@5->eorfill::@1#0] -- register_copy 
    // [198] phi eorfill::line_column#2 = eorfill::line_column#1 [phi:eorfill::@5->eorfill::@1#1] -- register_copy 
    // [198] phi eorfill::x#2 = eorfill::x#1 [phi:eorfill::@5->eorfill::@1#2] -- register_copy 
    jmp __b1
    // eorfill::@4
  __b4:
    // eor ^= line_column[y]
    // [208] eorfill::eor#1 = eorfill::eor#2 ^ eorfill::line_column#2[eorfill::y#2] -- vbuaa=vbuaa_bxor_pbuz1_derefidx_vbuyy 
    eor (line_column),y
    // fill_column[y] = eor
    // [209] eorfill::fill_column#2[eorfill::y#2] = eorfill::eor#1 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (fill_column),y
    // for(char y=1;y<16*8;y++)
    // [210] eorfill::y#1 = ++ eorfill::y#2 -- vbuyy=_inc_vbuyy 
    iny
    // [203] phi from eorfill::@4 to eorfill::@3 [phi:eorfill::@4->eorfill::@3]
    // [203] phi eorfill::eor#2 = eorfill::eor#1 [phi:eorfill::@4->eorfill::@3#0] -- register_copy 
    // [203] phi eorfill::y#2 = eorfill::y#1 [phi:eorfill::@4->eorfill::@3#1] -- register_copy 
    jmp __b3
}
  // abs_u8
// Get the absolute value of a 8-bit unsigned number treated as a signed number.
// abs_u8(byte register(A) u)
abs_u8: {
    // u & 0x80
    // [212] abs_u8::$0 = abs_u8::u#2 & $80 -- vbuxx=vbuaa_band_vbuc1 
    ldx #$80
    axs #0
    // if(u & 0x80)
    // [213] if(0!=abs_u8::$0) goto abs_u8::@1 -- vbuc1_neq_vbuxx_then_la1 
    cpx #0
    bne __b1
    // [215] phi from abs_u8 abs_u8::@1 to abs_u8::@return [phi:abs_u8/abs_u8::@1->abs_u8::@return]
    // [215] phi abs_u8::return#4 = abs_u8::u#2 [phi:abs_u8/abs_u8::@1->abs_u8::@return#0] -- register_copy 
    rts
    // abs_u8::@1
  __b1:
    // return -u;
    // [214] abs_u8::return#2 = - abs_u8::u#2 -- vbuaa=_neg_vbuaa 
    eor #$ff
    clc
    adc #1
    // abs_u8::@return
    // }
    // [216] return 
    rts
}
  // sgn_u8
// Get the sign of a 8-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is negative
// sgn_u8(byte register(A) u)
sgn_u8: {
    // u & 0x80
    // [218] sgn_u8::$0 = sgn_u8::u#2 & $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if(u & 0x80)
    // [219] if(0!=sgn_u8::$0) goto sgn_u8::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [221] phi from sgn_u8 to sgn_u8::@return [phi:sgn_u8->sgn_u8::@return]
    // [221] phi sgn_u8::return#4 = 1 [phi:sgn_u8->sgn_u8::@return#0] -- vbuaa=vbuc1 
    lda #1
    rts
    // [220] phi from sgn_u8 to sgn_u8::@1 [phi:sgn_u8->sgn_u8::@1]
    // sgn_u8::@1
  __b1:
    // [221] phi from sgn_u8::@1 to sgn_u8::@return [phi:sgn_u8::@1->sgn_u8::@return]
    // [221] phi sgn_u8::return#4 = -1 [phi:sgn_u8::@1->sgn_u8::@return#0] -- vbuaa=vbuc1 
    lda #-1
    // sgn_u8::@return
    // }
    // [222] return 
    rts
}
  // File Data
  // SIN/COS tables
  .align $100
SINTAB:
.fill $200, round(63 + 63*sin(i*2*PI/$100))

  // Column offsets
  plot_column: .word LINE_BUFFER, LINE_BUFFER+1*$80, LINE_BUFFER+2*$80, LINE_BUFFER+3*$80, LINE_BUFFER+4*$80, LINE_BUFFER+5*$80, LINE_BUFFER+6*$80, LINE_BUFFER+7*$80, LINE_BUFFER+8*$80, LINE_BUFFER+9*$80, LINE_BUFFER+$a*$80, LINE_BUFFER+$b*$80, LINE_BUFFER+$c*$80, LINE_BUFFER+$d*$80, LINE_BUFFER+$e*$80, LINE_BUFFER+$f*$80
  // The bits used for plotting a pixel
  plot_bit: .byte $80, $40, $20, $10, 8, 4, 2, 1

