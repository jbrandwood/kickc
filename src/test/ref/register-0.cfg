
(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (volatile byte) idx ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  [5] phi()
  [6] call print 
  to:main::@1
main::@1: scope:[main]  from main
  [7] phi()
  [8] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [9] phi()
  [10] call print 
  to:main::@return
main::@return: scope:[main]  from main::@2
  [11] return 
  to:@return

(void()) print((byte) print::ch)
print: scope:[print]  from main main::@1 main::@2
  [12] (byte) print::ch#3 ← phi( main/(byte) 'c' main::@1/(byte) 'm' main::@2/(byte) 'l' )
  kickasm( uses print::ch#3) {{  }}
  asm { ldxidx staSCREEN,x incidx  }
  to:print::@return
print::@return: scope:[print]  from print
  [15] return 
  to:@return
