Identified constant variable (byte*) print::SCREEN
Culled Empty Block (label) main::@6
Culled Empty Block (label) @1

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@2

(void()) main()
main: scope:[main]  from @2
  (byte) main::x#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@5
  (byte) main::x#7 ← phi( main/(byte) main::x#0 main::@5/(byte) main::x#1 )
  (byte) main::y#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  (byte) main::y#4 ← phi( main::@1/(byte) main::y#0 main::@4/(byte) main::y#1 )
  (byte) main::x#4 ← phi( main::@1/(byte) main::x#7 main::@4/(byte) main::x#6 )
  (byte) main::a#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@7
  (byte) main::y#2 ← phi( main::@2/(byte) main::y#4 main::@7/(byte) main::y#5 )
  (byte) main::x#2 ← phi( main::@2/(byte) main::x#4 main::@7/(byte) main::x#5 )
  (byte) main::a#2 ← phi( main::@2/(byte) main::a#0 main::@7/(byte) main::a#1 )
  (byte~) main::$0 ← (byte) main::a#2 + (byte) main::x#2
  (byte) main::val1#0 ← (byte~) main::$0
  (byte) print::idx#0 ← (byte) main::y#2
  (byte) print::val#0 ← (byte) main::val1#0
  call print 
  to:main::@7
main::@7: scope:[main]  from main::@3
  (byte) main::y#5 ← phi( main::@3/(byte) main::y#2 )
  (byte) main::x#5 ← phi( main::@3/(byte) main::x#2 )
  (byte) main::a#3 ← phi( main::@3/(byte) main::a#2 )
  (byte) main::a#1 ← (byte) main::a#3 + rangenext(0,$64)
  (bool~) main::$2 ← (byte) main::a#1 != rangelast(0,$64)
  if((bool~) main::$2) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte) main::x#6 ← phi( main::@7/(byte) main::x#5 )
  (byte) main::y#3 ← phi( main::@7/(byte) main::y#5 )
  (byte) main::y#1 ← (byte) main::y#3 + rangenext(0,$64)
  (bool~) main::$3 ← (byte) main::y#1 != rangelast(0,$64)
  if((bool~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::x#3 ← phi( main::@4/(byte) main::x#6 )
  (byte) main::x#1 ← (byte) main::x#3 + rangenext(0,$64)
  (bool~) main::$4 ← (byte) main::x#1 != rangelast(0,$64)
  if((bool~) main::$4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  return 
  to:@return

(void()) print((byte) print::idx , (byte) print::val)
print: scope:[print]  from main::@3
  (byte) print::idx#1 ← phi( main::@3/(byte) print::idx#0 )
  (byte) print::val#1 ← phi( main::@3/(byte) print::val#0 )
  *((const byte*) print::SCREEN + (byte) print::idx#1) ← (byte) print::val#1
  to:print::@return
print::@return: scope:[print]  from print
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @2
(label) @3
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0
(bool~) main::$2
(bool~) main::$3
(bool~) main::$4
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@7
(label) main::@return
(byte) main::a
(byte) main::a#0
(byte) main::a#1
(byte) main::a#2
(byte) main::a#3
(byte) main::val1 !reg byte a
(byte) main::val1#0 !reg byte a
(byte) main::x !reg byte y
(byte) main::x#0 !reg byte y
(byte) main::x#1 !reg byte y
(byte) main::x#2 !reg byte y
(byte) main::x#3 !reg byte y
(byte) main::x#4 !reg byte y
(byte) main::x#5 !reg byte y
(byte) main::x#6 !reg byte y
(byte) main::x#7 !reg byte y
(byte) main::y
(byte) main::y#0
(byte) main::y#1
(byte) main::y#2
(byte) main::y#3
(byte) main::y#4
(byte) main::y#5
(void()) print((byte) print::idx , (byte) print::val)
(label) print::@return
(const byte*) print::SCREEN = (byte*)(number) $400
(byte) print::idx !reg byte x
(byte) print::idx#0 !reg byte x
(byte) print::idx#1 !reg byte x
(byte) print::val
(byte) print::val#0
(byte) print::val#1

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias (byte) main::val1#0 = (byte~) main::$0 
Alias (byte) main::a#2 = (byte) main::a#3 
Alias (byte) main::x#2 = (byte) main::x#5 (byte) main::x#6 (byte) main::x#3 
Alias (byte) main::y#2 = (byte) main::y#5 (byte) main::y#3 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) main::y#2 (byte) main::y#4
Identical Phi Values (byte) print::val#1 (byte) print::val#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$2 [12] if((byte) main::a#1!=rangelast(0,$64)) goto main::@3
Simple Condition (bool~) main::$3 [15] if((byte) main::y#1!=rangelast(0,$64)) goto main::@2
Simple Condition (bool~) main::$4 [18] if((byte) main::x#1!=rangelast(0,$64)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::x#0 = 0
Constant (const byte) main::y#0 = 0
Constant (const byte) main::a#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [10] main::a#1 ← ++ main::a#2 to ++
Resolved ranged comparison value [12] if(main::a#1!=rangelast(0,$64)) goto main::@3 to (number) $65
Resolved ranged next value [13] main::y#1 ← ++ main::y#4 to ++
Resolved ranged comparison value [15] if(main::y#1!=rangelast(0,$64)) goto main::@2 to (number) $65
Resolved ranged next value [16] main::x#1 ← ++ main::x#2 to ++
Resolved ranged comparison value [18] if(main::x#1!=rangelast(0,$64)) goto main::@1 to (number) $65
Adding number conversion cast (unumber) $65 in if((byte) main::a#1!=(number) $65) goto main::@3
Adding number conversion cast (unumber) $65 in if((byte) main::y#1!=(number) $65) goto main::@2
Adding number conversion cast (unumber) $65 in if((byte) main::x#1!=(number) $65) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $65
Simplifying constant integer cast $65
Simplifying constant integer cast $65
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $65
Finalized unsigned number type (byte) $65
Finalized unsigned number type (byte) $65
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::x#0
Inlining constant with var siblings (const byte) main::y#0
Inlining constant with var siblings (const byte) main::a#0
Constant inlined main::a#0 = (byte) 0
Constant inlined main::x#0 = (byte) 0
Constant inlined main::y#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@8(between main::@5 and main::@1)
Added new block during phi lifting main::@9(between main::@4 and main::@2)
Added new block during phi lifting main::@10(between main::@7 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print:15 

Created 6 initial phi equivalence classes
Coalesced [7] main::x#9 ← main::x#7
Coalesced [9] main::x#11 ← main::x#4
Coalesced [14] print::idx#2 ← print::idx#0
Coalesced [23] main::x#8 ← main::x#1
Coalesced (already) [24] main::x#10 ← main::x#2
Coalesced [25] main::y#6 ← main::y#1
Coalesced [26] main::a#4 ← main::a#1
Coalesced (already) [27] main::x#12 ← main::x#2
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::@10
Renumbering block @2 to @1
Renumbering block main::@7 to main::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) main::x#7 ← phi( main/(byte) 0 main::@5/(byte) main::x#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [6] (byte) main::y#4 ← phi( main::@1/(byte) 0 main::@4/(byte) main::y#1 )
  [6] (byte) main::x#4 ← phi( main::@1/(byte) main::x#7 main::@4/(byte) main::x#2 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  [7] (byte) main::x#2 ← phi( main::@2/(byte) main::x#4 main::@6/(byte) main::x#2 )
  [7] (byte) main::a#2 ← phi( main::@2/(byte) 0 main::@6/(byte) main::a#1 )
  [8] (byte) main::val1#0 ← (byte) main::a#2 + (byte) main::x#2
  [9] (byte) print::idx#0 ← (byte) main::y#4
  [10] (byte) print::val#0 ← (byte) main::val1#0
  [11] call print 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [12] (byte) main::a#1 ← ++ (byte) main::a#2
  [13] if((byte) main::a#1!=(byte) $65) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@6
  [14] (byte) main::y#1 ← ++ (byte) main::y#4
  [15] if((byte) main::y#1!=(byte) $65) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [16] (byte) main::x#1 ← ++ (byte) main::x#2
  [17] if((byte) main::x#1!=(byte) $65) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [18] return 
  to:@return

(void()) print((byte) print::idx , (byte) print::val)
print: scope:[print]  from main::@3
  [19] (byte) print::idx#1 ← phi( main::@3/(byte) print::idx#0 )
  [20] *((const byte*) print::SCREEN + (byte) print::idx#1) ← (byte) print::val#0
  to:print::@return
print::@return: scope:[print]  from print
  [21] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::a
(byte) main::a#1 1501.5
(byte) main::a#2 600.5999999999999
(byte) main::val1 !reg byte a
(byte) main::val1#0 !reg byte a 1001.0
(byte) main::x !reg byte y
(byte) main::x#1 !reg byte y 16.5
(byte) main::x#2 !reg byte y 357.33333333333337
(byte) main::x#4 !reg byte y 213.0
(byte) main::x#7 !reg byte y 22.0
(byte) main::y
(byte) main::y#1 151.5
(byte) main::y#4 150.375
(void()) print((byte) print::idx , (byte) print::val)
(byte) print::idx !reg byte x
(byte) print::idx#0 !reg byte x 1001.0
(byte) print::idx#1 !reg byte x 1003.0
(byte) print::val
(byte) print::val#0 501.5

Initial phi equivalence classes
[ main::x#4 main::x#7 main::x#1 main::x#2 ]
[ main::y#4 main::y#1 ]
[ main::a#2 main::a#1 ]
[ print::idx#1 print::idx#0 ]
Added variable main::val1#0 to live range equivalence class [ main::val1#0 ]
Added variable print::val#0 to live range equivalence class [ print::val#0 ]
Complete equivalence classes
[ main::x#4 main::x#7 main::x#1 main::x#2 ]
[ main::y#4 main::y#1 ]
[ main::a#2 main::a#1 ]
[ print::idx#1 print::idx#0 ]
[ main::val1#0 ]
[ print::val#0 ]
Allocated zp[1]:2 [ main::y#4 main::y#1 ]
Allocated zp[1]:3 [ main::a#2 main::a#1 ]
Allocated zp[1]:4 [ print::val#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label a = 3
    .label y = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::x#7 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte) main::x#7 = (byte) main::x#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi (byte) main::y#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [6] phi (byte) main::x#4 = (byte) main::x#7 [phi:main::@1->main::@2#1] -- register_copy 
    jmp __b2
    // [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [6] phi (byte) main::y#4 = (byte) main::y#1 [phi:main::@4->main::@2#0] -- register_copy 
    // [6] phi (byte) main::x#4 = (byte) main::x#2 [phi:main::@4->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [7] phi (byte) main::x#2 = (byte) main::x#4 [phi:main::@2->main::@3#0] -- register_copy 
    // [7] phi (byte) main::a#2 = (byte) 0 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    jmp __b3
    // [7] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  __b3_from___b6:
    // [7] phi (byte) main::x#2 = (byte) main::x#2 [phi:main::@6->main::@3#0] -- register_copy 
    // [7] phi (byte) main::a#2 = (byte) main::a#1 [phi:main::@6->main::@3#1] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [8] (byte) main::val1#0 ← (byte) main::a#2 + (byte) main::x#2 -- vbuaa=vbuz1_plus_vbuyy 
    tya
    clc
    adc.z a
    // [9] (byte) print::idx#0 ← (byte) main::y#4 -- vbuxx=vbuz1 
    ldx.z y
    // [10] (byte) print::val#0 ← (byte) main::val1#0 -- vbuz1=vbuaa 
    sta.z print.val
    // [11] call print 
    // [19] phi from main::@3 to print [phi:main::@3->print]
  print_from___b3:
    // [19] phi (byte) print::idx#1 = (byte) print::idx#0 [phi:main::@3->print#0] -- register_copy 
    jsr print
    jmp __b6
    // main::@6
  __b6:
    // [12] (byte) main::a#1 ← ++ (byte) main::a#2 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [13] if((byte) main::a#1!=(byte) $65) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$65
    cmp.z a
    bne __b3_from___b6
    jmp __b4
    // main::@4
  __b4:
    // [14] (byte) main::y#1 ← ++ (byte) main::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [15] if((byte) main::y#1!=(byte) $65) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$65
    cmp.z y
    bne __b2_from___b4
    jmp __b5
    // main::@5
  __b5:
    // [16] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [17] if((byte) main::x#1!=(byte) $65) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$65
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [18] return 
    rts
}
  // print
// print(byte register(X) idx, byte zp(4) val)
print: {
    .label SCREEN = $400
    .label val = 4
    // [20] *((const byte*) print::SCREEN + (byte) print::idx#1) ← (byte) print::val#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z val
    sta SCREEN,x
    jmp __breturn
    // print::@return
  __breturn:
    // [21] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [8] (byte) main::val1#0 ← (byte) main::a#2 + (byte) main::x#2 [ main::y#4 main::x#2 main::a#2 main::val1#0 ] ( main:2 [ main::y#4 main::x#2 main::a#2 main::val1#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::y#4 main::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::a#2 main::a#1 ]
Statement [16] (byte) main::x#1 ← ++ (byte) main::x#2 [ main::x#1 ] ( main:2 [ main::x#1 ] ) always clobbers reg byte y 
Statement [8] (byte) main::val1#0 ← (byte) main::a#2 + (byte) main::x#2 [ main::y#4 main::x#2 main::a#2 main::val1#0 ] ( main:2 [ main::y#4 main::x#2 main::a#2 main::val1#0 ] ) always clobbers reg byte a 
Statement [16] (byte) main::x#1 ← ++ (byte) main::x#2 [ main::x#1 ] ( main:2 [ main::x#1 ] ) always clobbers reg byte y 
Potential registers reg byte y [ main::x#4 main::x#7 main::x#1 main::x#2 ] : reg byte y , 
Potential registers zp[1]:2 [ main::y#4 main::y#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::a#2 main::a#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers reg byte x [ print::idx#1 print::idx#0 ] : reg byte x , 
Potential registers reg byte a [ main::val1#0 ] : reg byte a , 
Potential registers zp[1]:4 [ print::val#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 2,102.1: zp[1]:3 [ main::a#2 main::a#1 ] 1,001: reg byte a [ main::val1#0 ] 608.83: reg byte y [ main::x#4 main::x#7 main::x#1 main::x#2 ] 301.88: zp[1]:2 [ main::y#4 main::y#1 ] 
Uplift Scope [print] 2,004: reg byte x [ print::idx#1 print::idx#0 ] 501.5: zp[1]:4 [ print::val#0 ] 
Uplift Scope [] 

Uplifting [main] best 38469 combination zp[1]:3 [ main::a#2 main::a#1 ] reg byte a [ main::val1#0 ] reg byte y [ main::x#4 main::x#7 main::x#1 main::x#2 ] reg byte x [ main::y#4 main::y#1 ] 
Uplifting [print] best 35466 combination reg byte x [ print::idx#1 print::idx#0 ] reg byte a [ print::val#0 ] 
Uplifting [] best 35466 combination 
Attempting to uplift remaining variables inzp[1]:3 [ main::a#2 main::a#1 ]
Uplifting [main] best 35466 combination zp[1]:3 [ main::a#2 main::a#1 ] 
Allocated (was zp[1]:3) zp[1]:2 [ main::a#2 main::a#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from___b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label a = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [5] phi (byte) main::x#7 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [5] phi (byte) main::x#7 = (byte) main::x#1 [phi:main::@5->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi (byte) main::y#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi (byte) main::x#4 = (byte) main::x#7 [phi:main::@1->main::@2#1] -- register_copy 
    jmp __b2
    // [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [6] phi (byte) main::y#4 = (byte) main::y#1 [phi:main::@4->main::@2#0] -- register_copy 
    // [6] phi (byte) main::x#4 = (byte) main::x#2 [phi:main::@4->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [7] phi (byte) main::x#2 = (byte) main::x#4 [phi:main::@2->main::@3#0] -- register_copy 
    // [7] phi (byte) main::a#2 = (byte) 0 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    jmp __b3
    // [7] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
  __b3_from___b6:
    // [7] phi (byte) main::x#2 = (byte) main::x#2 [phi:main::@6->main::@3#0] -- register_copy 
    // [7] phi (byte) main::a#2 = (byte) main::a#1 [phi:main::@6->main::@3#1] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [8] (byte) main::val1#0 ← (byte) main::a#2 + (byte) main::x#2 -- vbuaa=vbuz1_plus_vbuyy 
    tya
    clc
    adc.z a
    // [9] (byte) print::idx#0 ← (byte) main::y#4
    // [10] (byte) print::val#0 ← (byte) main::val1#0
    // [11] call print 
    // [19] phi from main::@3 to print [phi:main::@3->print]
  print_from___b3:
    // [19] phi (byte) print::idx#1 = (byte) print::idx#0 [phi:main::@3->print#0] -- register_copy 
    jsr print
    jmp __b6
    // main::@6
  __b6:
    // [12] (byte) main::a#1 ← ++ (byte) main::a#2 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [13] if((byte) main::a#1!=(byte) $65) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$65
    cmp.z a
    bne __b3_from___b6
    jmp __b4
    // main::@4
  __b4:
    // [14] (byte) main::y#1 ← ++ (byte) main::y#4 -- vbuxx=_inc_vbuxx 
    inx
    // [15] if((byte) main::y#1!=(byte) $65) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b2_from___b4
    jmp __b5
    // main::@5
  __b5:
    // [16] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [17] if((byte) main::x#1!=(byte) $65) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$65
    bne __b1_from___b5
    jmp __breturn
    // main::@return
  __breturn:
    // [18] return 
    rts
}
  // print
// print(byte register(X) idx, byte register(A) val)
print: {
    .label SCREEN = $400
    // [20] *((const byte*) print::SCREEN + (byte) print::idx#1) ← (byte) print::val#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    jmp __breturn
    // print::@return
  __breturn:
    // [21] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b6 with __b3
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b5 with __b1
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction main_from___b1:
Removing instruction __bend_from___b1:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b6:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b1_from_main:
Removing instruction print_from___b3:
Removing instruction __b6:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::a
(byte) main::a#1 a zp[1]:2 1501.5
(byte) main::a#2 a zp[1]:2 600.5999999999999
(byte) main::val1 !reg byte a
(byte) main::val1#0 !reg byte a 1001.0
(byte) main::x !reg byte y
(byte) main::x#1 !reg byte y 16.5
(byte) main::x#2 !reg byte y 357.33333333333337
(byte) main::x#4 !reg byte y 213.0
(byte) main::x#7 !reg byte y 22.0
(byte) main::y
(byte) main::y#1 reg byte x 151.5
(byte) main::y#4 reg byte x 150.375
(void()) print((byte) print::idx , (byte) print::val)
(label) print::@return
(const byte*) print::SCREEN = (byte*) 1024
(byte) print::idx !reg byte x
(byte) print::idx#0 !reg byte x 1001.0
(byte) print::idx#1 !reg byte x 1003.0
(byte) print::val
(byte) print::val#0 reg byte a 501.5

reg byte y [ main::x#4 main::x#7 main::x#1 main::x#2 ]
reg byte x [ main::y#4 main::y#1 ]
zp[1]:2 [ main::a#2 main::a#1 ]
reg byte x [ print::idx#1 print::idx#0 ]
reg byte a [ main::val1#0 ]
reg byte a [ print::val#0 ]


FINAL ASSEMBLER
Score: 25458

  // File Comments
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label a = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::x#7 = (byte) 0 [phi:main->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [5] phi (byte) main::x#7 = (byte) main::x#1 [phi:main::@5->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [6] phi (byte) main::y#4 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi (byte) main::x#4 = (byte) main::x#7 [phi:main::@1->main::@2#1] -- register_copy 
    // [6] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
    // [6] phi (byte) main::y#4 = (byte) main::y#1 [phi:main::@4->main::@2#0] -- register_copy 
    // [6] phi (byte) main::x#4 = (byte) main::x#2 [phi:main::@4->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // [7] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [7] phi (byte) main::x#2 = (byte) main::x#4 [phi:main::@2->main::@3#0] -- register_copy 
    // [7] phi (byte) main::a#2 = (byte) 0 [phi:main::@2->main::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z a
    // [7] phi from main::@6 to main::@3 [phi:main::@6->main::@3]
    // [7] phi (byte) main::x#2 = (byte) main::x#2 [phi:main::@6->main::@3#0] -- register_copy 
    // [7] phi (byte) main::a#2 = (byte) main::a#1 [phi:main::@6->main::@3#1] -- register_copy 
    // main::@3
  __b3:
    // val1 = a+x
    // [8] (byte) main::val1#0 ← (byte) main::a#2 + (byte) main::x#2 -- vbuaa=vbuz1_plus_vbuyy 
    tya
    clc
    adc.z a
    // print(y, val1)
    // [9] (byte) print::idx#0 ← (byte) main::y#4
    // [10] (byte) print::val#0 ← (byte) main::val1#0
    // [11] call print 
    // [19] phi from main::@3 to print [phi:main::@3->print]
    // [19] phi (byte) print::idx#1 = (byte) print::idx#0 [phi:main::@3->print#0] -- register_copy 
    jsr print
    // main::@6
    // for( byte a: 0..100 )
    // [12] (byte) main::a#1 ← ++ (byte) main::a#2 -- vbuz1=_inc_vbuz1 
    inc.z a
    // [13] if((byte) main::a#1!=(byte) $65) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$65
    cmp.z a
    bne __b3
    // main::@4
    // for( byte y: 0..100 )
    // [14] (byte) main::y#1 ← ++ (byte) main::y#4 -- vbuxx=_inc_vbuxx 
    inx
    // [15] if((byte) main::y#1!=(byte) $65) goto main::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b2
    // main::@5
    // for( register(Y) byte x: 0..100 )
    // [16] (byte) main::x#1 ← ++ (byte) main::x#2 -- vbuyy=_inc_vbuyy 
    iny
    // [17] if((byte) main::x#1!=(byte) $65) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$65
    bne __b1
    // main::@return
    // }
    // [18] return 
    rts
}
  // print
// print(byte register(X) idx, byte register(A) val)
print: {
    .label SCREEN = $400
    // SCREEN[idx] = val
    // [20] *((const byte*) print::SCREEN + (byte) print::idx#1) ← (byte) print::val#0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // print::@return
    // }
    // [21] return 
    rts
}
  // File Data

