Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  idx#18 = phi( __start::@1/idx#17 )
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  idx#16 = phi( main/idx#18, main::@2/idx#0 )
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$2 = main::i#2 * SIZEOF_STRUCT_POINT
  print::p_x#0 = ((byte*)points+OFFSET_STRUCT_POINT_X)[main::$2]
  print::p_y#0 = ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$2]
  call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  idx#10 = phi( main::@1/idx#6 )
  idx#0 = idx#10
  main::i#1 = main::i#3 + rangenext(0,3)
  main::$1 = main::i#1 != rangelast(0,3)
  if(main::$1) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  idx#11 = phi( main::@2/idx#0 )
  idx#1 = idx#11
  return 
  to:@return

void print(byte print::p_x , signed word print::p_y)
print: scope:[print]  from main::@1
  print::p_y#1 = phi( main::@1/print::p_y#0 )
  idx#12 = phi( main::@1/idx#16 )
  print::p_x#1 = phi( main::@1/print::p_x#0 )
  SCREEN[idx#12] = print::p_x#1
  idx#2 = ++ idx#12
  print::$0 = < print::p_y#1
  SCREEN[idx#2] = print::$0
  idx#3 = ++ idx#2
  print::$1 = > print::p_y#1
  SCREEN[idx#3] = print::$1
  idx#4 = ++ idx#3
  SCREEN[idx#4] = ' '
  idx#5 = ++ idx#4
  to:print::@return
print::@return: scope:[print]  from print
  idx#13 = phi( print/idx#5 )
  idx#6 = idx#13
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  idx#7 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  idx#17 = phi( __start::__init1/idx#7 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  idx#14 = phi( __start::@1/idx#1 )
  idx#8 = idx#14
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  idx#15 = phi( __start::@2/idx#8 )
  idx#9 = idx#15
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
const nomodify byte* SCREEN = (byte*)$400
const byte SIZEOF_STRUCT_POINT = 3
void __start()
byte idx
byte idx#0
byte idx#1
byte idx#10
byte idx#11
byte idx#12
byte idx#13
byte idx#14
byte idx#15
byte idx#16
byte idx#17
byte idx#18
byte idx#2
byte idx#3
byte idx#4
byte idx#5
byte idx#6
byte idx#7
byte idx#8
byte idx#9
void main()
bool~ main::$1
byte~ main::$2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
const struct Point* points[4]  = { { x: 1, y: $83f }, { x: 3, y: $107e } }
void print(byte print::p_x , signed word print::p_y)
byte~ print::$0
byte~ print::$1
struct Point print::p
byte print::p_x
byte print::p_x#0
byte print::p_x#1
signed word print::p_y
signed word print::p_y#0
signed word print::p_y#1

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias main::i#2 = main::i#3 
Alias idx#0 = idx#10 idx#11 idx#1 
Alias idx#13 = idx#5 idx#6 
Alias idx#17 = idx#7 
Alias idx#14 = idx#8 idx#15 idx#9 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values idx#18 idx#17
Identical Phi Values idx#0 idx#13
Identical Phi Values print::p_x#1 print::p_x#0
Identical Phi Values idx#12 idx#16
Identical Phi Values print::p_y#1 print::p_y#0
Identical Phi Values idx#14 idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition main::$1 [10] if(main::i#1!=rangelast(0,3)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Constant idx#17 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,3)) goto main::@1 to 4
Simplifying expression containing zero (byte*)points in [4] print::p_x#0 = ((byte*)points+OFFSET_STRUCT_POINT_X)[main::$2]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 4 in [6] if(main::i#1!=4) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift and addition[1] main::$2 = main::i#2 * SIZEOF_STRUCT_POINT
Inlining constant with var siblings main::i#0
Inlining constant with var siblings idx#17
Constant inlined main::i#0 = 0
Constant inlined idx#17 = 0
Successful SSA optimization Pass2ConstantInlining
Alias main::$2 = main::$4 
Successful SSA optimization Pass2AliasElimination
Eliminating unused constant SIZEOF_STRUCT_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@3(between main::@2 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to print:6 

Created 2 initial phi equivalence classes
Coalesced [10] main::i#4 = main::i#1
Coalesced [11] idx#19 = idx#13
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] idx#16 = phi( main/0, main::@2/idx#13 )
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [2] main::$3 = main::i#2 << 1
  [3] main::$2 = main::$3 + main::i#2
  [4] print::p_x#0 = ((byte*)points)[main::$2]
  [5] print::p_y#0 = ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$2]
  [6] call print 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] main::i#1 = ++ main::i#2
  [8] if(main::i#1!=4) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return

void print(byte print::p_x , signed word print::p_y)
print: scope:[print]  from main::@1
  [10] SCREEN[idx#16] = print::p_x#0
  [11] idx#2 = ++ idx#16
  [12] print::$0 = < print::p_y#0
  [13] SCREEN[idx#2] = print::$0
  [14] idx#3 = ++ idx#2
  [15] print::$1 = > print::p_y#0
  [16] SCREEN[idx#3] = print::$1
  [17] idx#4 = ++ idx#3
  [18] SCREEN[idx#4] = ' '
  [19] idx#13 = ++ idx#4
  to:print::@return
print::@return: scope:[print]  from print
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
byte idx
byte idx#13 22.4
byte idx#16 35.5
byte idx#2 101.0
byte idx#3 101.0
byte idx#4 151.5
void main()
byte~ main::$2 16.5
byte~ main::$3 22.0
byte main::i
byte main::i#1 16.5
byte main::i#2 7.333333333333333
void print(byte print::p_x , signed word print::p_y)
byte~ print::$0 202.0
byte~ print::$1 202.0
struct Point print::p
byte print::p_x
byte print::p_x#0 56.0
signed word print::p_y
signed word print::p_y#0 35.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ idx#16 idx#13 ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable print::p_x#0 to live range equivalence class [ print::p_x#0 ]
Added variable print::p_y#0 to live range equivalence class [ print::p_y#0 ]
Added variable idx#2 to live range equivalence class [ idx#2 ]
Added variable print::$0 to live range equivalence class [ print::$0 ]
Added variable idx#3 to live range equivalence class [ idx#3 ]
Added variable print::$1 to live range equivalence class [ print::$1 ]
Added variable idx#4 to live range equivalence class [ idx#4 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ idx#16 idx#13 ]
[ main::$3 ]
[ main::$2 ]
[ print::p_x#0 ]
[ print::p_y#0 ]
[ idx#2 ]
[ print::$0 ]
[ idx#3 ]
[ print::$1 ]
[ idx#4 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ idx#16 idx#13 ]
Allocated zp[1]:4 [ main::$3 ]
Allocated zp[1]:5 [ main::$2 ]
Allocated zp[1]:6 [ print::p_x#0 ]
Allocated zp[2]:7 [ print::p_y#0 ]
Allocated zp[1]:9 [ idx#2 ]
Allocated zp[1]:10 [ print::$0 ]
Allocated zp[1]:11 [ idx#3 ]
Allocated zp[1]:12 [ print::$1 ]
Allocated zp[1]:13 [ idx#4 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] main::$3 = main::i#2 << 1 [ main::i#2 idx#16 main::$3 ] (  [ main::i#2 idx#16 main::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ idx#16 idx#13 ]
Statement [3] main::$2 = main::$3 + main::i#2 [ main::i#2 idx#16 main::$2 ] (  [ main::i#2 idx#16 main::$2 ] { }  ) always clobbers reg byte a 
Statement [5] print::p_y#0 = ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$2] [ main::i#2 idx#16 print::p_x#0 print::p_y#0 ] (  [ main::i#2 idx#16 print::p_x#0 print::p_y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ print::p_x#0 ]
Statement [10] SCREEN[idx#16] = print::p_x#0 [ idx#16 print::p_y#0 ] ( print:6 [ main::i#2 idx#16 print::p_y#0 ] { }  ) always clobbers reg byte a 
Statement [18] SCREEN[idx#4] = ' ' [ idx#4 ] ( print:6 [ main::i#2 idx#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ idx#4 ]
Statement [2] main::$3 = main::i#2 << 1 [ main::i#2 idx#16 main::$3 ] (  [ main::i#2 idx#16 main::$3 ] { }  ) always clobbers reg byte a 
Statement [3] main::$2 = main::$3 + main::i#2 [ main::i#2 idx#16 main::$2 ] (  [ main::i#2 idx#16 main::$2 ] { }  ) always clobbers reg byte a 
Statement [5] print::p_y#0 = ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$2] [ main::i#2 idx#16 print::p_x#0 print::p_y#0 ] (  [ main::i#2 idx#16 print::p_x#0 print::p_y#0 ] { }  ) always clobbers reg byte a 
Statement [10] SCREEN[idx#16] = print::p_x#0 [ idx#16 print::p_y#0 ] ( print:6 [ main::i#2 idx#16 print::p_y#0 ] { }  ) always clobbers reg byte a 
Statement [18] SCREEN[idx#4] = ' ' [ idx#4 ] ( print:6 [ main::i#2 idx#4 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ idx#16 idx#13 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$3 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$2 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ print::p_x#0 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[2]:7 [ print::p_y#0 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ idx#2 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ print::$0 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ idx#3 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ print::$1 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ idx#4 ] : zp[1]:13 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [print] 202: zp[1]:10 [ print::$0 ] 202: zp[1]:12 [ print::$1 ] 56: zp[1]:6 [ print::p_x#0 ] 35.5: zp[2]:7 [ print::p_y#0 ] 
Uplift Scope [] 151.5: zp[1]:13 [ idx#4 ] 101: zp[1]:9 [ idx#2 ] 101: zp[1]:11 [ idx#3 ] 57.9: zp[1]:3 [ idx#16 idx#13 ] 
Uplift Scope [main] 23.83: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:4 [ main::$3 ] 16.5: zp[1]:5 [ main::$2 ] 
Uplift Scope [Point] 

Uplifting [print] best 939 combination reg byte a [ print::$0 ] reg byte a [ print::$1 ] reg byte x [ print::p_x#0 ] zp[2]:7 [ print::p_y#0 ] 
Uplifting [] best 912 combination reg byte x [ idx#4 ] reg byte x [ idx#2 ] reg byte x [ idx#3 ] zp[1]:3 [ idx#16 idx#13 ] 
Limited combination testing to 100 combinations of 144 possible.
Uplifting [main] best 782 combination zp[1]:2 [ main::i#2 main::i#1 ] reg byte a [ main::$3 ] reg byte y [ main::$2 ] 
Uplifting [Point] best 782 combination 
Attempting to uplift remaining variables inzp[1]:3 [ idx#16 idx#13 ]
Uplifting [] best 782 combination zp[1]:3 [ idx#16 idx#13 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 782 combination zp[1]:2 [ main::i#2 main::i#1 ] 
Allocated (was zp[2]:7) zp[2]:4 [ print::p_y#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test a struct array initialized with to few members (zero-filled for the rest)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const SIZEOF_STRUCT_POINT = 3
  .label SCREEN = $400
  .label idx = 3
  // main
main: {
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi idx#16 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi idx#16 = idx#13 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] main::$3 = main::i#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [3] main::$2 = main::$3 + main::i#2 -- vbuyy=vbuaa_plus_vbuz1 
    clc
    adc.z i
    tay
    // [4] print::p_x#0 = ((byte*)points)[main::$2] -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx points,y
    // [5] print::p_y#0 = ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$2] -- vwsz1=pwsc1_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta.z print.p_y
    lda points+OFFSET_STRUCT_POINT_Y+1,y
    sta.z print.p_y+1
    // [6] call print 
    jsr print
    jmp __b2
    // main::@2
  __b2:
    // [7] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [8] if(main::i#1!=4) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // print
// print(byte register(X) p_x, signed word zp(4) p_y)
print: {
    .label p_y = 4
    // [10] SCREEN[idx#16] = print::p_x#0 -- pbuc1_derefidx_vbuz1=vbuxx 
    ldy.z idx
    txa
    sta SCREEN,y
    // [11] idx#2 = ++ idx#16 -- vbuxx=_inc_vbuz1 
    ldx.z idx
    inx
    // [12] print::$0 = < print::p_y#0 -- vbuaa=_lo_vwsz1 
    lda.z p_y
    // [13] SCREEN[idx#2] = print::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [14] idx#3 = ++ idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [15] print::$1 = > print::p_y#0 -- vbuaa=_hi_vwsz1 
    lda.z p_y+1
    // [16] SCREEN[idx#3] = print::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [17] idx#4 = ++ idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // [18] SCREEN[idx#4] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // [19] idx#13 = ++ idx#4 -- vbuz1=_inc_vbuxx 
    inx
    stx.z idx
    jmp __breturn
    // print::@return
  __breturn:
    // [20] return 
    rts
}
  // File Data
  points: .byte 1
  .word $83f
  .byte 3
  .word $107e
  .fill SIZEOF_STRUCT_POINT, 0
  .fill SIZEOF_STRUCT_POINT, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_POINT_Y = 1
const nomodify byte* SCREEN = (byte*) 1024
const byte SIZEOF_STRUCT_POINT = 3
byte idx
byte idx#13 idx zp[1]:3 22.4
byte idx#16 idx zp[1]:3 35.5
byte idx#2 reg byte x 101.0
byte idx#3 reg byte x 101.0
byte idx#4 reg byte x 151.5
void main()
byte~ main::$2 reg byte y 16.5
byte~ main::$3 reg byte a 22.0
byte main::i
byte main::i#1 i zp[1]:2 16.5
byte main::i#2 i zp[1]:2 7.333333333333333
const struct Point* points[4]  = { { x: 1, y: $83f }, { x: 3, y: $107e } }
void print(byte print::p_x , signed word print::p_y)
byte~ print::$0 reg byte a 202.0
byte~ print::$1 reg byte a 202.0
struct Point print::p
byte print::p_x
byte print::p_x#0 reg byte x 56.0
signed word print::p_y
signed word print::p_y#0 p_y zp[2]:4 35.5

zp[1]:2 [ main::i#2 main::i#1 ]
zp[1]:3 [ idx#16 idx#13 ]
reg byte a [ main::$3 ]
reg byte y [ main::$2 ]
reg byte x [ print::p_x#0 ]
zp[2]:4 [ print::p_y#0 ]
reg byte x [ idx#2 ]
reg byte a [ print::$0 ]
reg byte x [ idx#3 ]
reg byte a [ print::$1 ]
reg byte x [ idx#4 ]


FINAL ASSEMBLER
Score: 639

  // File Comments
// Test a struct array initialized with to few members (zero-filled for the rest)
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .const SIZEOF_STRUCT_POINT = 3
  .label SCREEN = $400
  .label idx = 3
  // main
main: {
    .label i = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi idx#16 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // [1] phi main::i#2 = 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    sta.z i
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi idx#16 = idx#13 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // print(points[i])
    // [2] main::$3 = main::i#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z i
    asl
    // [3] main::$2 = main::$3 + main::i#2 -- vbuyy=vbuaa_plus_vbuz1 
    clc
    adc.z i
    tay
    // [4] print::p_x#0 = ((byte*)points)[main::$2] -- vbuxx=pbuc1_derefidx_vbuyy 
    ldx points,y
    // [5] print::p_y#0 = ((signed word*)points+OFFSET_STRUCT_POINT_Y)[main::$2] -- vwsz1=pwsc1_derefidx_vbuyy 
    lda points+OFFSET_STRUCT_POINT_Y,y
    sta.z print.p_y
    lda points+OFFSET_STRUCT_POINT_Y+1,y
    sta.z print.p_y+1
    // [6] call print 
    jsr print
    // main::@2
    // for ( char i: 0..3)
    // [7] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [8] if(main::i#1!=4) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
}
  // print
// print(byte register(X) p_x, signed word zp(4) p_y)
print: {
    .label p_y = 4
    // SCREEN[idx++] = p.x
    // [10] SCREEN[idx#16] = print::p_x#0 -- pbuc1_derefidx_vbuz1=vbuxx 
    ldy.z idx
    txa
    sta SCREEN,y
    // SCREEN[idx++] = p.x;
    // [11] idx#2 = ++ idx#16 -- vbuxx=_inc_vbuz1 
    ldx.z idx
    inx
    // <p.y
    // [12] print::$0 = < print::p_y#0 -- vbuaa=_lo_vwsz1 
    lda.z p_y
    // SCREEN[idx++] = <p.y
    // [13] SCREEN[idx#2] = print::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = <p.y;
    // [14] idx#3 = ++ idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // >p.y
    // [15] print::$1 = > print::p_y#0 -- vbuaa=_hi_vwsz1 
    lda.z p_y+1
    // SCREEN[idx++] = >p.y
    // [16] SCREEN[idx#3] = print::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = >p.y;
    // [17] idx#4 = ++ idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = ' '
    // [18] SCREEN[idx#4] = ' ' -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #' '
    sta SCREEN,x
    // SCREEN[idx++] = ' ';
    // [19] idx#13 = ++ idx#4 -- vbuz1=_inc_vbuxx 
    inx
    stx.z idx
    // print::@return
    // }
    // [20] return 
    rts
}
  // File Data
  points: .byte 1
  .word $83f
  .byte 3
  .word $107e
  .fill SIZEOF_STRUCT_POINT, 0
  .fill SIZEOF_STRUCT_POINT, 0

