Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  asm { sei  }
  *DTV_FEATURE = DTV_FEATURE_ENABLE
  *DTV_CONTROL = DTV_HIGHCOLOR|DTV_BORDER_OFF|DTV_BADLINE_OFF
  to:main::@1
main::@1: scope:[main]  from main main::@6
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1 main::@2
  main::$0 = *RASTER != $40
  if(main::$0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  *BG_COLOR = 0
  main::r#0 = $31
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  main::r#2 = phi( main::@3/main::r#0, main::@4/main::r#1 )
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  *BG_COLOR = ++ *BG_COLOR
  main::r#1 = main::r#2 + rangenext($31,$ff)
  main::$2 = main::r#1 != rangelast($31,$ff)
  if(main::$2) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@4
  main::c#0 = 0
  to:main::@6
main::@6: scope:[main]  from main::@5 main::@6
  main::c#2 = phi( main::@5/main::c#0, main::@6/main::c#1 )
  DTV_PALETTE[main::c#2] = main::palette[main::c#2]
  main::palette[main::c#2] = ++ main::palette[main::c#2]
  main::c#1 = main::c#2 + rangenext(0,$f)
  main::$4 = main::c#1 != rangelast(0,$f)
  if(main::$4) goto main::@6
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* BG_COLOR = (byte*)$d021
const nomodify byte DTV_BADLINE_OFF = $20
const nomodify byte DTV_BORDER_OFF = 2
const nomodify byte* DTV_CONTROL = (byte*)$d03c
const nomodify byte* DTV_FEATURE = (byte*)$d03f
const nomodify byte DTV_FEATURE_ENABLE = 1
const nomodify byte DTV_HIGHCOLOR = 4
const nomodify byte* DTV_PALETTE = (byte*)$d200
const nomodify byte* RASTER = (byte*)$d012
void __start()
void main()
bool~ main::$0
bool~ main::$2
bool~ main::$4
byte main::c
byte main::c#0
byte main::c#1
byte main::c#2
const byte* main::palette[$10]  = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $a, $b, $c, $d, $e, $f }
byte main::r
byte main::r#0
byte main::r#1
byte main::r#2

Adding number conversion cast (unumber) $40 in main::$0 = *RASTER != $40
Adding number conversion cast (unumber) 0 in *BG_COLOR = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *BG_COLOR = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53311
Simplifying constant pointer cast (byte*) 53308
Simplifying constant pointer cast (byte*) 53760
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $40
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition main::$0 [5] if(*RASTER!=$40) goto main::@2
Simple Condition main::$2 [13] if(main::r#1!=rangelast($31,$ff)) goto main::@4
Simple Condition main::$4 [20] if(main::c#1!=rangelast(0,$f)) goto main::@6
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::r#0 = $31
Constant main::c#0 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [3] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [11] main::r#1 = ++ main::r#2 to ++
Resolved ranged comparison value [13] if(main::r#1!=rangelast($31,$ff)) goto main::@4 to 0
Resolved ranged next value [18] main::c#1 = ++ main::c#2 to ++
Resolved ranged comparison value [20] if(main::c#1!=rangelast(0,$f)) goto main::@6 to $10
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 0 in [9] if(main::r#1!=0) goto main::@4
Adding number conversion cast (unumber) $10 in [14] if(main::c#1!=$10) goto main::@6
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type $10
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::r#0
Inlining constant with var siblings main::c#0
Constant inlined main::r#0 = $31
Constant inlined main::c#0 = 0
Successful SSA optimization Pass2ConstantInlining
Finalized unsigned number type $10
Successful SSA optimization Pass2FinalizeAllNumbers
Added new block during phi lifting main::@7(between main::@4 and main::@4)
Added new block during phi lifting main::@8(between main::@6 and main::@6)
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@5
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [17] main::c#3 = main::c#1
Coalesced [18] main::r#3 = main::r#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@1
Culled Empty Block label main::@5
Culled Empty Block label main::@8
Culled Empty Block label main::@7
Renumbering block main::@2 to main::@1
Renumbering block main::@3 to main::@2
Renumbering block main::@4 to main::@3
Renumbering block main::@6 to main::@4

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  asm { sei  }
  [1] *DTV_FEATURE = DTV_FEATURE_ENABLE
  [2] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_BORDER_OFF|DTV_BADLINE_OFF
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@4
  [3] if(*RASTER!=$40) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] *BG_COLOR = 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  [5] main::r#2 = phi( main::@2/$31, main::@3/main::r#1 )
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  [7] *BG_COLOR = ++ *BG_COLOR
  [8] main::r#1 = ++ main::r#2
  [9] if(main::r#1!=0) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [10] main::c#2 = phi( main::@3/0, main::@4/main::c#1 )
  [11] DTV_PALETTE[main::c#2] = main::palette[main::c#2]
  [12] main::palette[main::c#2] = ++ main::palette[main::c#2]
  [13] main::c#1 = ++ main::c#2
  [14] if(main::c#1!=$10) goto main::@4
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::c
byte main::c#1 151.5
byte main::c#2 201.99999999999997
byte main::r
byte main::r#1 151.5
byte main::r#2 67.33333333333333

Initial phi equivalence classes
[ main::r#2 main::r#1 ]
[ main::c#2 main::c#1 ]
Complete equivalence classes
[ main::r#2 main::r#1 ]
[ main::c#2 main::c#1 ]
Allocated zp[1]:2 [ main::r#2 main::r#1 ]
Allocated zp[1]:3 [ main::c#2 main::c#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *DTV_FEATURE = DTV_FEATURE_ENABLE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_BORDER_OFF|DTV_BADLINE_OFF [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] if(*RASTER!=$40) goto main::@1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *BG_COLOR = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] DTV_PALETTE[main::c#2] = main::palette[main::c#2] [ main::c#2 ] (  [ main::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::c#2 main::c#1 ]
Statement [1] *DTV_FEATURE = DTV_FEATURE_ENABLE [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_BORDER_OFF|DTV_BADLINE_OFF [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] if(*RASTER!=$40) goto main::@1 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *BG_COLOR = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] DTV_PALETTE[main::c#2] = main::palette[main::c#2] [ main::c#2 ] (  [ main::c#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::r#2 main::r#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::c#2 main::c#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 353.5: zp[1]:3 [ main::c#2 main::c#1 ] 218.83: zp[1]:2 [ main::r#2 main::r#1 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [] 

Uplifting [main] best 11677 combination reg byte x [ main::c#2 main::c#1 ] reg byte x [ main::r#2 main::r#1 ] 
Uplifting [MOS6526_CIA] best 11677 combination 
Uplifting [MOS6569_VICII] best 11677 combination 
Uplifting [MOS6581_SID] best 11677 combination 
Uplifting [] best 11677 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test C64DTV v2 256-colors and the 16-color redefinable palette
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const DTV_FEATURE_ENABLE = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_BADLINE_OFF = $20
  .label RASTER = $d012
  .label BG_COLOR = $d021
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // main
main: {
    // asm { sei  }
    sei
    // [1] *DTV_FEATURE = DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // [2] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_BORDER_OFF|DTV_BADLINE_OFF -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_BORDER_OFF|DTV_BADLINE_OFF
    sta DTV_CONTROL
    jmp __b1
    // main::@1
  __b1:
    // [3] if(*RASTER!=$40) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$40
    cmp RASTER
    bne __b1
    jmp __b2
    // main::@2
  __b2:
    // [4] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Create rasterbars
    lda #0
    sta BG_COLOR
    // [5] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    // [5] phi main::r#2 = $31 [phi:main::@2->main::@3#0] -- vbuxx=vbuc1 
    ldx #$31
    jmp __b3
    // [5] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  __b3_from___b3:
    // [5] phi main::r#2 = main::r#1 [phi:main::@3->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    // [7] *BG_COLOR = ++ *BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // [8] main::r#1 = ++ main::r#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if(main::r#1!=0) goto main::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b3
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    // [10] phi main::c#2 = 0 [phi:main::@3->main::@4#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b4
  // Rotate palette
    // [10] phi from main::@4 to main::@4 [phi:main::@4->main::@4]
  __b4_from___b4:
    // [10] phi main::c#2 = main::c#1 [phi:main::@4->main::@4#0] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [11] DTV_PALETTE[main::c#2] = main::palette[main::c#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda palette,x
    sta DTV_PALETTE,x
    // [12] main::palette[main::c#2] = ++ main::palette[main::c#2] -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc palette,x
    // [13] main::c#1 = ++ main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [14] if(main::c#1!=$10) goto main::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b4_from___b4
    jmp __b1
    palette: .byte 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $a, $b, $c, $d, $e, $f
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b3 with __b3
Replacing label __b4_from___b4 with __b4
Removing instruction __b3_from___b3:
Removing instruction __b4_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b3:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b3
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* BG_COLOR = (byte*) 53281
const nomodify byte DTV_BADLINE_OFF = $20
const nomodify byte DTV_BORDER_OFF = 2
const nomodify byte* DTV_CONTROL = (byte*) 53308
const nomodify byte* DTV_FEATURE = (byte*) 53311
const nomodify byte DTV_FEATURE_ENABLE = 1
const nomodify byte DTV_HIGHCOLOR = 4
const nomodify byte* DTV_PALETTE = (byte*) 53760
const nomodify byte* RASTER = (byte*) 53266
void main()
byte main::c
byte main::c#1 reg byte x 151.5
byte main::c#2 reg byte x 201.99999999999997
const byte* main::palette[$10]  = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $a, $b, $c, $d, $e, $f }
byte main::r
byte main::r#1 reg byte x 151.5
byte main::r#2 reg byte x 67.33333333333333

reg byte x [ main::r#2 main::r#1 ]
reg byte x [ main::c#2 main::c#1 ]


FINAL ASSEMBLER
Score: 10174

  // File Comments
// Test C64DTV v2 256-colors and the 16-color redefinable palette
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const DTV_FEATURE_ENABLE = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_BADLINE_OFF = $20
  .label RASTER = $d012
  .label BG_COLOR = $d021
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // *DTV_FEATURE = DTV_FEATURE_ENABLE
    // [1] *DTV_FEATURE = DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // *DTV_CONTROL = DTV_HIGHCOLOR | DTV_BORDER_OFF | DTV_BADLINE_OFF
    // [2] *DTV_CONTROL = DTV_HIGHCOLOR|DTV_BORDER_OFF|DTV_BADLINE_OFF -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_BORDER_OFF|DTV_BADLINE_OFF
    sta DTV_CONTROL
    // main::@1
  __b1:
    // while(*RASTER!=$40)
    // [3] if(*RASTER!=$40) goto main::@1 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$40
    cmp RASTER
    bne __b1
    // main::@2
    // *BG_COLOR = 0
    // [4] *BG_COLOR = 0 -- _deref_pbuc1=vbuc2 
    // Create rasterbars
    lda #0
    sta BG_COLOR
    // [5] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // [5] phi main::r#2 = $31 [phi:main::@2->main::@3#0] -- vbuxx=vbuc1 
    ldx #$31
    // [5] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
    // [5] phi main::r#2 = main::r#1 [phi:main::@3->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // asm
    // asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    // (*BG_COLOR)++;
    // [7] *BG_COLOR = ++ *BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // for (byte r : $31..$ff)
    // [8] main::r#1 = ++ main::r#2 -- vbuxx=_inc_vbuxx 
    inx
    // [9] if(main::r#1!=0) goto main::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // [10] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // [10] phi main::c#2 = 0 [phi:main::@3->main::@4#0] -- vbuxx=vbuc1 
    ldx #0
  // Rotate palette
    // [10] phi from main::@4 to main::@4 [phi:main::@4->main::@4]
    // [10] phi main::c#2 = main::c#1 [phi:main::@4->main::@4#0] -- register_copy 
    // main::@4
  __b4:
    // DTV_PALETTE[c] = palette[c]
    // [11] DTV_PALETTE[main::c#2] = main::palette[main::c#2] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda palette,x
    sta DTV_PALETTE,x
    // palette[c]++;
    // [12] main::palette[main::c#2] = ++ main::palette[main::c#2] -- pbuc1_derefidx_vbuxx=_inc_pbuc1_derefidx_vbuxx 
    inc palette,x
    // for(byte c : 0..$f)
    // [13] main::c#1 = ++ main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [14] if(main::c#1!=$10) goto main::@4 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b4
    jmp __b1
    palette: .byte 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $a, $b, $c, $d, $e, $f
}
  // File Data

