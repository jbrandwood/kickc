
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [16] phi()
  [17] call clrscr
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [18] main::i#2 = phi( main/0, main::@6/main::i#1 )
  [19] if(main::i#2<5) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [20] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [21] printf_uchar::uvalue#0 = ((char *)&stars)[main::i#2]
  [22] call printf_uchar
  to:main::@3
main::@3: scope:[main]  from main::@2
  [23] phi()
  [24] call cputs
  to:main::@4
main::@4: scope:[main]  from main::@3
  [25] printf_uchar::uvalue#1 = ((char *)&stars+5)[main::i#2]
  [26] call printf_uchar
  to:main::@5
main::@5: scope:[main]  from main::@4
  [27] phi()
  [28] call cputs
  to:main::@6
main::@6: scope:[main]  from main::@5
  [29] main::i#1 = ++ main::i#2
  to:main::@1

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1
  [30] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [31] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [32] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [33] conio_cursor_x = gotoxy::x#2
  [34] conio_cursor_y = gotoxy::y#4
  [35] gotoxy::$7 = (unsigned int)gotoxy::y#4
  [36] gotoxy::$8 = gotoxy::$7 << 2
  [37] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [38] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [39] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [40] conio_line_text = gotoxy::$5
  [41] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [42] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [43] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [44] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [45] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [45] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [45] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [46] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [47] conio_cursor_x = 0
  [48] conio_cursor_y = 0
  [49] conio_line_text = DEFAULT_SCREEN
  [50] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [51] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [52] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [53] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [54] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [55] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [56] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [57] clrscr::line_text#5[clrscr::c#2] = ' '
  [58] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [59] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void printf_uchar(char uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_uchar: scope:[printf_uchar]  from main::@2 main::@4
  [60] printf_uchar::uvalue#2 = phi( main::@2/printf_uchar::uvalue#0, main::@4/printf_uchar::uvalue#1 )
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [61] *((char *)&printf_buffer) = 0
  [62] uctoa::value#1 = printf_uchar::uvalue#2
  [63] call uctoa
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [64] printf_number_buffer::buffer_sign#0 = *((char *)&printf_buffer)
  [65] call printf_number_buffer
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [66] return 
  to:@return

void cputs(const char *s)
cputs: scope:[cputs]  from main::@3 main::@5 printf_number_buffer::@2
  [67] cputs::s#5 = phi( main::@3/main::s, main::@5/main::s1, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [68] cputs::s#4 = phi( cputs/cputs::s#5, cputs::@2/cputs::s#0 )
  [69] cputs::c#1 = *cputs::s#4
  [70] cputs::s#0 = ++ cputs::s#4
  [71] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [72] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [73] cputc::c#0 = cputs::c#1
  [74] call cputc
  to:cputs::@1

void uctoa(char value , char *buffer , char radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [75] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [76] uctoa::buffer#11 = phi( uctoa::@4/uctoa::buffer#14, uctoa/(char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [76] uctoa::started#2 = phi( uctoa::@4/uctoa::started#4, uctoa/0 )
  [76] uctoa::value#2 = phi( uctoa::@4/uctoa::value#6, uctoa/uctoa::value#1 )
  [76] uctoa::digit#2 = phi( uctoa::@4/uctoa::digit#1, uctoa/0 )
  [77] if(uctoa::digit#2<3-1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [78] *uctoa::buffer#11 = DIGITS[uctoa::value#2]
  [79] uctoa::buffer#3 = ++ uctoa::buffer#11
  [80] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [81] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [82] uctoa::digit_value#0 = RADIX_DECIMAL_VALUES_CHAR[uctoa::digit#2]
  [83] if(0!=uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [84] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [85] uctoa::buffer#14 = phi( uctoa::@7/uctoa::buffer#11, uctoa::@6/uctoa::buffer#4 )
  [85] uctoa::started#4 = phi( uctoa::@7/uctoa::started#2, uctoa::@6/1 )
  [85] uctoa::value#6 = phi( uctoa::@7/uctoa::value#2, uctoa::@6/uctoa::value#0 )
  [86] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [87] uctoa_append::buffer#0 = uctoa::buffer#11
  [88] uctoa_append::value#0 = uctoa::value#2
  [89] uctoa_append::sub#0 = uctoa::digit_value#0
  [90] call uctoa_append
  [91] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [92] uctoa::value#0 = uctoa_append::return#0
  [93] uctoa::buffer#4 = ++ uctoa::buffer#11
  to:uctoa::@4

void printf_number_buffer(char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2
  [94] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [95] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [96] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [97] call cputc
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [98] phi()
  [99] call cputs
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [100] return 
  to:@return

void cputc(char c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [101] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@3/cputc::c#2 )
  [102] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [103] conio_line_text[conio_cursor_x] = cputc::c#3
  [104] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [105] conio_cursor_x = ++ conio_cursor_x
  [106] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [107] phi()
  [108] call cputln
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [109] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [110] phi()
  [111] call cputln
  to:cputc::@return

char uctoa_append(char *buffer , char value , char sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [112] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [113] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [113] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [114] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [115] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [116] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [117] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [118] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [119] conio_line_text = conio_line_text + $28
  [120] conio_line_color = conio_line_color + $28
  [121] conio_cursor_x = 0
  [122] conio_cursor_y = ++ conio_cursor_y
  [123] call cscroll
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [124] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [125] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [126] phi()
  [127] call memcpy
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [128] phi()
  [129] call memcpy
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [130] phi()
  [131] call memset
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [132] phi()
  [133] call memset
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [134] conio_line_text = conio_line_text - $28
  [135] conio_line_color = conio_line_color - $28
  [136] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [137] return 
  to:@return

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [138] memcpy::destination#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN, cscroll::@2/(void *)COLORRAM )
  [138] memcpy::source#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN+$28, cscroll::@2/(void *)COLORRAM+$28 )
  [139] memcpy::src_end#0 = (char *)memcpy::source#2 + (unsigned int)$19*$28-$28
  [140] memcpy::src#4 = (char *)memcpy::source#2
  [141] memcpy::dst#4 = (char *)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [142] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [142] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [143] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [144] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [145] *memcpy::dst#2 = *memcpy::src#2
  [146] memcpy::dst#1 = ++ memcpy::dst#2
  [147] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [148] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [148] memset::str#3 = phi( cscroll::@3/(void *)DEFAULT_SCREEN+(unsigned int)$19*$28-$28, cscroll::@4/(void *)COLORRAM+(unsigned int)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [149] memset::end#0 = (char *)memset::str#3 + $28
  [150] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [151] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [152] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [153] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [154] *memset::dst#2 = memset::c#4
  [155] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
