PARSING src/test/java/dk/camelot64/kickc/test/kc/incrementinarray.kc
import "print.kc"

byte[] txt = "camelot@";

void main() {
    print_cls();
    for ( byte i: 0..10) {
        print_str(txt);
        print_ln();
        txt[1]++;
    }

}
Importing print.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/print.kc

byte* print_screen = $0400;
byte* print_line_cursor = print_screen;
byte* print_char_cursor = print_line_cursor;

// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
void print_str_lines(byte* str) {
    while(*str!='@') {
        do {
            byte ch = *(str++);
            if(ch!='@') {
                *(print_char_cursor++) = ch;
            }
        } while (ch!='@');
        print_ln();
    }
}

// Print a zero-terminated string followed by a newline
void print_str_ln(byte* str) {
    print_str(str);
    print_ln();
}

// Print a zero-terminated string
void print_str(byte* str) {
    while(*str!='@') {
        *(print_char_cursor++) = *(str++);
    }
}

// Print a string at a specific screen position
void print_str_at(byte* str, byte* at) {
    while(*str!='@') {
        *(at++) = *(str++);
    }
}

// Print a newline
void print_ln() {
    do {
        print_line_cursor = print_line_cursor + $28;
    } while (print_line_cursor<print_char_cursor);
    print_char_cursor = print_line_cursor;
}

// Print a signed word as HEX
void print_sword(signed word w) {
    if(w<0) {
        print_char('-');
        w = -w;
    }
    print_word((word)w);
}

// Print a signed byte as HEX
void print_sbyte(signed byte b) {
    if(b<0) {
        print_char('-');
        b = -b;
    }
    print_byte((byte)b);
}

// Print a word as HEX
void print_word(word w) {
    print_byte(>w);
    print_byte(<w);
}

// Print a dword as HEX
void print_dword(dword dw) {
    print_word(>dw);
    print_word(<dw);
}

// Print a signed dword as HEX
void print_sdword(signed dword dw) {
    if(dw<0) {
        print_char('-');
        dw = -dw;
    }
    print_dword((dword)dw);
}

const byte[] print_hextab = "0123456789abcdef";

// Print a byte as HEX
void print_byte(byte b) {
    // Table of hexadecimal digits
    print_char(print_hextab[b>>4]);
    print_char(print_hextab[b&$f]);
}

// Print a single char
void print_char(byte ch) {
    *(print_char_cursor++) = ch;
}

// Clear the screen. Also resets current line/char cursor.
void print_cls() {
    for(byte* sc=print_screen; sc!=print_screen+1000; sc++) {
        *sc = ' ';
    }
    print_line_cursor = print_screen;
    print_char_cursor = print_line_cursor;
}

// Set the screen to print on. Also resets current line/char cursor.
void print_set_screen(byte* screen) {
    print_screen = screen;
    print_line_cursor = print_screen;
    print_char_cursor = print_line_cursor;
}

Adding pre/post-modifier (byte*) print_str_lines::str ← ++ (byte*) print_str_lines::str
Adding pre/post-modifier (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
Adding pre/post-modifier (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
Adding pre/post-modifier (byte*) print_str::str ← ++ (byte*) print_str::str
Adding pre/post-modifier (byte*) print_str_at::at ← ++ (byte*) print_str_at::at
Adding pre/post-modifier (byte*) print_str_at::str ← ++ (byte*) print_str_at::str
Adding pre/post-modifier (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
Adding pre/post-modifier (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
Adding pre/post-modifier *((byte[]) txt + (byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((byte[]) txt + (byte/signed byte/word/signed word/dword/signed dword) 1)

STATEMENTS
  (byte*) print_screen ← (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
proc (void()) print_str_lines((byte*) print_str_lines::str)
print_str_lines::@1:
  (boolean~) print_str_lines::$0 ← *((byte*) print_str_lines::str) != (byte) '@'
  if((boolean~) print_str_lines::$0) goto print_str_lines::@2
  goto print_str_lines::@3
print_str_lines::@2:
print_str_lines::@4:
  (byte) print_str_lines::ch ← *((byte*) print_str_lines::str)
  (byte*) print_str_lines::str ← ++ (byte*) print_str_lines::str
  (boolean~) print_str_lines::$1 ← (byte) print_str_lines::ch != (byte) '@'
  (boolean~) print_str_lines::$2 ← ! (boolean~) print_str_lines::$1
  if((boolean~) print_str_lines::$2) goto print_str_lines::@5
  *((byte*) print_char_cursor) ← (byte) print_str_lines::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
print_str_lines::@5:
  (boolean~) print_str_lines::$3 ← (byte) print_str_lines::ch != (byte) '@'
  if((boolean~) print_str_lines::$3) goto print_str_lines::@4
  (void~) print_str_lines::$4 ← call print_ln 
  goto print_str_lines::@1
print_str_lines::@3:
print_str_lines::@return:
  return 
endproc // print_str_lines()
proc (void()) print_str_ln((byte*) print_str_ln::str)
  (void~) print_str_ln::$0 ← call print_str (byte*) print_str_ln::str 
  (void~) print_str_ln::$1 ← call print_ln 
print_str_ln::@return:
  return 
endproc // print_str_ln()
proc (void()) print_str((byte*) print_str::str)
print_str::@1:
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  goto print_str::@3
print_str::@2:
  *((byte*) print_char_cursor) ← *((byte*) print_str::str)
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  goto print_str::@1
print_str::@3:
print_str::@return:
  return 
endproc // print_str()
proc (void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
print_str_at::@1:
  (boolean~) print_str_at::$0 ← *((byte*) print_str_at::str) != (byte) '@'
  if((boolean~) print_str_at::$0) goto print_str_at::@2
  goto print_str_at::@3
print_str_at::@2:
  *((byte*) print_str_at::at) ← *((byte*) print_str_at::str)
  (byte*) print_str_at::at ← ++ (byte*) print_str_at::at
  (byte*) print_str_at::str ← ++ (byte*) print_str_at::str
  goto print_str_at::@1
print_str_at::@3:
print_str_at::@return:
  return 
endproc // print_str_at()
proc (void()) print_ln()
print_ln::@1:
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) print_line_cursor < (byte*) print_char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  (byte*) print_char_cursor ← (byte*) print_line_cursor
print_ln::@return:
  return 
endproc // print_ln()
proc (void()) print_sword((signed word) print_sword::w)
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
print_sword::@1:
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
print_sword::@return:
  return 
endproc // print_sword()
proc (void()) print_sbyte((signed byte) print_sbyte::b)
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
print_sbyte::@1:
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
print_sbyte::@return:
  return 
endproc // print_sbyte()
proc (void()) print_word((word) print_word::w)
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
print_word::@return:
  return 
endproc // print_word()
proc (void()) print_dword((dword) print_dword::dw)
  (word~) print_dword::$0 ← > (dword) print_dword::dw
  (void~) print_dword::$1 ← call print_word (word~) print_dword::$0 
  (word~) print_dword::$2 ← < (dword) print_dword::dw
  (void~) print_dword::$3 ← call print_word (word~) print_dword::$2 
print_dword::@return:
  return 
endproc // print_dword()
proc (void()) print_sdword((signed dword) print_sdword::dw)
  (boolean~) print_sdword::$0 ← (signed dword) print_sdword::dw < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sdword::$1 ← ! (boolean~) print_sdword::$0
  if((boolean~) print_sdword::$1) goto print_sdword::@1
  (void~) print_sdword::$2 ← call print_char (byte) '-' 
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw
  (signed dword) print_sdword::dw ← (signed dword~) print_sdword::$3
print_sdword::@1:
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw
  (void~) print_sdword::$5 ← call print_dword (dword~) print_sdword::$4 
print_sdword::@return:
  return 
endproc // print_sdword()
  (byte[]) print_hextab ← (string) "0123456789abcdef"
proc (void()) print_byte((byte) print_byte::b)
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_hextab + (byte~) print_byte::$2) 
print_byte::@return:
  return 
endproc // print_byte()
proc (void()) print_char((byte) print_char::ch)
  *((byte*) print_char_cursor) ← (byte) print_char::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
print_char::@return:
  return 
endproc // print_char()
proc (void()) print_cls()
  (byte*) print_cls::sc ← (byte*) print_screen
print_cls::@1:
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) print_screen + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
print_cls::@return:
  return 
endproc // print_cls()
proc (void()) print_set_screen((byte*) print_set_screen::screen)
  (byte*) print_screen ← (byte*) print_set_screen::screen
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
print_set_screen::@return:
  return 
endproc // print_set_screen()
  (byte[]) txt ← (string) "camelot@"
proc (void()) main()
  (void~) main::$0 ← call print_cls 
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
main::@1:
  (void~) main::$1 ← call print_str (byte[]) txt 
  (void~) main::$2 ← call print_ln 
  *((byte[]) txt + (byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((byte[]) txt + (byte/signed byte/word/signed word/dword/signed dword) 1)
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$3 ← (byte) main::i != (byte/signed byte/word/signed word/dword/signed dword) 11
  if((boolean~) main::$3) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(boolean~) main::$3
(label) main::@1
(label) main::@return
(byte) main::i
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(void~) print_byte::$1
(byte~) print_byte::$2
(void~) print_byte::$3
(label) print_byte::@return
(byte) print_byte::b
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte*) print_char_cursor
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(void()) print_dword((dword) print_dword::dw)
(word~) print_dword::$0
(void~) print_dword::$1
(word~) print_dword::$2
(void~) print_dword::$3
(label) print_dword::@return
(dword) print_dword::dw
(byte[]) print_hextab
(byte*) print_line_cursor
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(void~) print_sbyte::$2
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(void~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(byte*) print_screen
(void()) print_sdword((signed dword) print_sdword::dw)
(boolean~) print_sdword::$0
(boolean~) print_sdword::$1
(void~) print_sdword::$2
(signed dword~) print_sdword::$3
(dword~) print_sdword::$4
(void~) print_sdword::$5
(label) print_sdword::@1
(label) print_sdword::@return
(signed dword) print_sdword::dw
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(boolean~) print_str_at::$0
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@3
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::str
(void()) print_str_lines((byte*) print_str_lines::str)
(boolean~) print_str_lines::$0
(boolean~) print_str_lines::$1
(boolean~) print_str_lines::$2
(boolean~) print_str_lines::$3
(void~) print_str_lines::$4
(label) print_str_lines::@1
(label) print_str_lines::@2
(label) print_str_lines::@3
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte*) print_str_lines::str
(void()) print_str_ln((byte*) print_str_ln::str)
(void~) print_str_ln::$0
(void~) print_str_ln::$1
(label) print_str_ln::@return
(byte*) print_str_ln::str
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(void~) print_sword::$2
(signed word~) print_sword::$3
(word~) print_sword::$4
(void~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@return
(signed word) print_sword::w
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(void~) print_word::$1
(byte~) print_word::$2
(void~) print_word::$3
(label) print_word::@return
(word) print_word::w
(byte[]) txt

Promoting word/signed word/dword/signed dword to byte* in print_screen ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) print_screen ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:@1
print_str_lines: scope:[print_str_lines]  from
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@9
  (boolean~) print_str_lines::$0 ← *((byte*) print_str_lines::str) != (byte) '@'
  if((boolean~) print_str_lines::$0) goto print_str_lines::@2
  to:print_str_lines::@6
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@7
  to:print_str_lines::@4
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@1
  to:print_str_lines::@3
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@10 print_str_lines::@6
  to:print_str_lines::@return
print_str_lines::@7: scope:[print_str_lines]  from
  to:print_str_lines::@2
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@5
  (byte) print_str_lines::ch ← *((byte*) print_str_lines::str)
  (byte*) print_str_lines::str ← ++ (byte*) print_str_lines::str
  (boolean~) print_str_lines::$1 ← (byte) print_str_lines::ch != (byte) '@'
  (boolean~) print_str_lines::$2 ← ! (boolean~) print_str_lines::$1
  if((boolean~) print_str_lines::$2) goto print_str_lines::@5
  to:print_str_lines::@8
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@4 print_str_lines::@8
  (boolean~) print_str_lines::$3 ← (byte) print_str_lines::ch != (byte) '@'
  if((boolean~) print_str_lines::$3) goto print_str_lines::@4
  to:print_str_lines::@9
print_str_lines::@8: scope:[print_str_lines]  from print_str_lines::@4
  *((byte*) print_char_cursor) ← (byte) print_str_lines::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  to:print_str_lines::@5
print_str_lines::@9: scope:[print_str_lines]  from print_str_lines::@5
  (void~) print_str_lines::$4 ← call print_ln 
  to:print_str_lines::@1
print_str_lines::@10: scope:[print_str_lines]  from
  to:print_str_lines::@3
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
print_str_ln: scope:[print_str_ln]  from
  (void~) print_str_ln::$0 ← call print_str (byte*) print_str_ln::str 
  (void~) print_str_ln::$1 ← call print_ln 
  to:print_str_ln::@return
print_str_ln::@return: scope:[print_str_ln]  from print_str_ln
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
print_str: scope:[print_str]  from
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@4
print_str::@2: scope:[print_str]  from print_str::@1 print_str::@5
  *((byte*) print_char_cursor) ← *((byte*) print_str::str)
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  to:print_str::@1
print_str::@4: scope:[print_str]  from print_str::@1
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@4 print_str::@6
  to:print_str::@return
print_str::@5: scope:[print_str]  from
  to:print_str::@2
print_str::@6: scope:[print_str]  from
  to:print_str::@3
print_str::@return: scope:[print_str]  from print_str::@3
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
print_str_at: scope:[print_str_at]  from
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  (boolean~) print_str_at::$0 ← *((byte*) print_str_at::str) != (byte) '@'
  if((boolean~) print_str_at::$0) goto print_str_at::@2
  to:print_str_at::@4
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1 print_str_at::@5
  *((byte*) print_str_at::at) ← *((byte*) print_str_at::str)
  (byte*) print_str_at::at ← ++ (byte*) print_str_at::at
  (byte*) print_str_at::str ← ++ (byte*) print_str_at::str
  to:print_str_at::@1
print_str_at::@4: scope:[print_str_at]  from print_str_at::@1
  to:print_str_at::@3
print_str_at::@3: scope:[print_str_at]  from print_str_at::@4 print_str_at::@6
  to:print_str_at::@return
print_str_at::@5: scope:[print_str_at]  from
  to:print_str_at::@2
print_str_at::@6: scope:[print_str_at]  from
  to:print_str_at::@3
print_str_at::@return: scope:[print_str_at]  from print_str_at::@3
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
print_ln: scope:[print_ln]  from
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) print_line_cursor < (byte*) print_char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
print_sword: scope:[print_sword]  from
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@2
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@1
  return 
  to:@return
@6: scope:[]  from @5
  to:@7
print_sbyte: scope:[print_sbyte]  from
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@2
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  return 
  to:@return
@7: scope:[]  from @6
  to:@8
print_word: scope:[print_word]  from
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word
  return 
  to:@return
@8: scope:[]  from @7
  to:@9
print_dword: scope:[print_dword]  from
  (word~) print_dword::$0 ← > (dword) print_dword::dw
  (void~) print_dword::$1 ← call print_word (word~) print_dword::$0 
  (word~) print_dword::$2 ← < (dword) print_dword::dw
  (void~) print_dword::$3 ← call print_word (word~) print_dword::$2 
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword
  return 
  to:@return
@9: scope:[]  from @8
  to:@10
print_sdword: scope:[print_sdword]  from
  (boolean~) print_sdword::$0 ← (signed dword) print_sdword::dw < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sdword::$1 ← ! (boolean~) print_sdword::$0
  if((boolean~) print_sdword::$1) goto print_sdword::@1
  to:print_sdword::@2
print_sdword::@1: scope:[print_sdword]  from print_sdword print_sdword::@2
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw
  (void~) print_sdword::$5 ← call print_dword (dword~) print_sdword::$4 
  to:print_sdword::@return
print_sdword::@2: scope:[print_sdword]  from print_sdword
  (void~) print_sdword::$2 ← call print_char (byte) '-' 
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw
  (signed dword) print_sdword::dw ← (signed dword~) print_sdword::$3
  to:print_sdword::@1
print_sdword::@return: scope:[print_sdword]  from print_sdword::@1
  return 
  to:@return
@10: scope:[]  from @9
  (byte[]) print_hextab ← (string) "0123456789abcdef"
  to:@11
print_byte: scope:[print_byte]  from
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_hextab + (byte~) print_byte::$2) 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte
  return 
  to:@return
@11: scope:[]  from @10
  to:@12
print_char: scope:[print_char]  from
  *((byte*) print_char_cursor) ← (byte) print_char::ch
  (byte*) print_char_cursor ← ++ (byte*) print_char_cursor
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return
@12: scope:[]  from @11
  to:@13
print_cls: scope:[print_cls]  from
  (byte*) print_cls::sc ← (byte*) print_screen
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) print_screen + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  return 
  to:@return
@13: scope:[]  from @12
  to:@14
print_set_screen: scope:[print_set_screen]  from
  (byte*) print_screen ← (byte*) print_set_screen::screen
  (byte*) print_line_cursor ← (byte*) print_screen
  (byte*) print_char_cursor ← (byte*) print_line_cursor
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  return 
  to:@return
@14: scope:[]  from @13
  (byte[]) txt ← (string) "camelot@"
  to:@15
main: scope:[main]  from
  (void~) main::$0 ← call print_cls 
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$1 ← call print_str (byte[]) txt 
  (void~) main::$2 ← call print_ln 
  *((byte[]) txt + (byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((byte[]) txt + (byte/signed byte/word/signed word/dword/signed dword) 1)
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$3 ← (byte) main::i != (byte/signed byte/word/signed word/dword/signed dword) 11
  if((boolean~) main::$3) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@15: scope:[]  from @14
  call main 
  to:@end
@end: scope:[]  from @15

Removing unused procedure print_str_lines
Removing unused procedure print_str_ln
Removing unused procedure print_str_at
Removing unused procedure print_sword
Removing unused procedure print_sbyte
Removing unused procedure print_sdword
Removing unused procedure print_set_screen
Removing unused procedure print_dword
Removing unused procedure print_word
Removing unused procedure print_byte
Removing unused procedure print_char
Eliminating unused variable (byte[]) print_hextab and assignment [15] (byte[]) print_hextab ← (string) "0123456789abcdef"
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) main::$2
Creating constant string variable for inline (const string) $0 "camelot@"
Removing empty block @1
Removing empty block @2
Removing empty block print_str::@4
Removing empty block print_str::@3
Removing empty block print_str::@5
Removing empty block print_str::@6
Removing empty block @3
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block @8
Removing empty block @9
Removing empty block @10
Removing empty block @11
Removing empty block @12
Removing empty block @13
Removing empty block main::@2
PROCEDURE MODIFY VARIABLE ANALYSIS
print_str modifies print_char_cursor
print_ln modifies print_line_cursor
print_ln modifies print_char_cursor
print_cls modifies print_line_cursor
print_cls modifies print_char_cursor
main modifies print_line_cursor
main modifies print_char_cursor

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) print_screen#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@14
print_str: scope:[print_str]  from main::@1
  (byte*) print_char_cursor#27 ← phi( main::@1/(byte*) print_char_cursor#25 )
  (byte*) print_str::str#4 ← phi( main::@1/(byte*) print_str::str#1 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) print_char_cursor#22 ← phi( print_str/(byte*) print_char_cursor#27 print_str::@2/(byte*) print_char_cursor#1 )
  (byte*) print_str::str#2 ← phi( print_str/(byte*) print_str::str#4 print_str::@2/(byte*) print_str::str#0 )
  (boolean~) print_str::$0 ← *((byte*) print_str::str#2) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#12 ← phi( print_str::@1/(byte*) print_char_cursor#22 )
  (byte*) print_str::str#3 ← phi( print_str::@1/(byte*) print_str::str#2 )
  *((byte*) print_char_cursor#12) ← *((byte*) print_str::str#3)
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#12
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) print_char_cursor#13 ← phi( print_str::@1/(byte*) print_char_cursor#22 )
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#13
  return 
  to:@return
print_ln: scope:[print_ln]  from main::@4
  (byte*) print_char_cursor#23 ← phi( main::@4/(byte*) print_char_cursor#8 )
  (byte*) print_line_cursor#17 ← phi( main::@4/(byte*) print_line_cursor#19 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#14 ← phi( print_ln/(byte*) print_char_cursor#23 print_ln::@1/(byte*) print_char_cursor#14 )
  (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#17 print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#9 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) print_line_cursor#1 ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) print_line_cursor#1 < (byte*) print_char_cursor#14
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#10 ← phi( print_ln::@1/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#3 ← (byte*) print_line_cursor#10
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#15 ← phi( print_ln::@2/(byte*) print_char_cursor#3 )
  (byte*) print_line_cursor#11 ← phi( print_ln::@2/(byte*) print_line_cursor#10 )
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#11
  (byte*) print_char_cursor#4 ← (byte*) print_char_cursor#15
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_screen#1 ← phi( main/(byte*) print_screen#4 )
  (byte*) print_cls::sc#0 ← (byte*) print_screen#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_screen#2 ← phi( print_cls/(byte*) print_screen#1 print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) print_screen#2 + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) print_screen#3 ← phi( print_cls::@1/(byte*) print_screen#2 )
  (byte*) print_line_cursor#3 ← (byte*) print_screen#3
  (byte*) print_char_cursor#5 ← (byte*) print_line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) print_char_cursor#16 ← phi( print_cls::@2/(byte*) print_char_cursor#5 )
  (byte*) print_line_cursor#12 ← phi( print_cls::@2/(byte*) print_line_cursor#3 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#12
  (byte*) print_char_cursor#6 ← (byte*) print_char_cursor#16
  return 
  to:@return
@14: scope:[]  from @begin
  (byte*) print_screen#6 ← phi( @begin/(byte*) print_screen#0 )
  (byte*) print_char_cursor#28 ← phi( @begin/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#22 ← phi( @begin/(byte*) print_line_cursor#0 )
  (byte[]) txt#0 ← (const string) $0
  to:@15
main: scope:[main]  from @15
  (byte*) print_char_cursor#24 ← phi( @15/(byte*) print_char_cursor#26 )
  (byte*) print_line_cursor#18 ← phi( @15/(byte*) print_line_cursor#20 )
  (byte*) print_screen#4 ← phi( @15/(byte*) print_screen#5 )
  call print_cls param-assignment
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) print_char_cursor#17 ← phi( main/(byte*) print_char_cursor#6 )
  (byte*) print_line_cursor#13 ← phi( main/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#5 ← (byte*) print_line_cursor#13
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#17
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@5
  (byte) main::i#4 ← phi( main::@3/(byte) main::i#0 main::@5/(byte) main::i#1 )
  (byte*) print_line_cursor#21 ← phi( main::@3/(byte*) print_line_cursor#5 main::@5/(byte*) print_line_cursor#6 )
  (byte*) print_char_cursor#25 ← phi( main::@3/(byte*) print_char_cursor#7 main::@5/(byte*) print_char_cursor#9 )
  (byte*) print_str::str#1 ← (byte[]) txt#0
  call print_str param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@1
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#4 )
  (byte*) print_line_cursor#19 ← phi( main::@1/(byte*) print_line_cursor#21 )
  (byte*) print_char_cursor#18 ← phi( main::@1/(byte*) print_char_cursor#2 )
  (byte*) print_char_cursor#8 ← (byte*) print_char_cursor#18
  call print_ln param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::i#2 ← phi( main::@4/(byte) main::i#3 )
  (byte*) print_char_cursor#19 ← phi( main::@4/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#14 ← phi( main::@4/(byte*) print_line_cursor#2 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#14
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#19
  *((byte[]) txt#0 + (byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((byte[]) txt#0 + (byte/signed byte/word/signed word/dword/signed dword) 1)
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$3 ← (byte) main::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 11
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  (byte*) print_char_cursor#20 ← phi( main::@5/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#15 ← phi( main::@5/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#7 ← (byte*) print_line_cursor#15
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#20
  return 
  to:@return
@15: scope:[]  from @14
  (byte*) print_screen#5 ← phi( @14/(byte*) print_screen#6 )
  (byte*) print_char_cursor#26 ← phi( @14/(byte*) print_char_cursor#28 )
  (byte*) print_line_cursor#20 ← phi( @14/(byte*) print_line_cursor#22 )
  call main param-assignment
  to:@16
@16: scope:[]  from @15
  (byte*) print_char_cursor#21 ← phi( @15/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#16 ← phi( @15/(byte*) print_line_cursor#7 )
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#16
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#21
  to:@end
@end: scope:[]  from @16

SYMBOL TABLE SSA
(const string) $0 = (string) "camelot@"
(label) @14
(label) @15
(label) @16
(label) @begin
(label) @end
(void()) main()
(boolean~) main::$3
(label) main::@1
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#3
(byte*) print_char_cursor#4
(byte*) print_char_cursor#5
(byte*) print_char_cursor#6
(byte*) print_char_cursor#7
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#3
(byte*) print_line_cursor#4
(byte*) print_line_cursor#5
(byte*) print_line_cursor#6
(byte*) print_line_cursor#7
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#2
(byte*) print_screen#3
(byte*) print_screen#4
(byte*) print_screen#5
(byte*) print_screen#6
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte[]) txt
(byte[]) txt#0

OPTIMIZING CONTROL FLOW GRAPH
Not aliassing across scopes: print_str::str#4 print_str::str#1
Not aliassing across scopes: print_char_cursor#27 print_char_cursor#25
Not aliassing across scopes: print_line_cursor#17 print_line_cursor#19
Not aliassing across scopes: print_char_cursor#23 print_char_cursor#8
Not aliassing across scopes: print_screen#1 print_screen#4
Not aliassing across scopes: print_cls::sc#0 print_screen#1
Not aliassing across scopes: print_screen#4 print_screen#5
Not aliassing across scopes: print_line_cursor#18 print_line_cursor#20
Not aliassing across scopes: print_char_cursor#24 print_char_cursor#26
Not aliassing across scopes: print_line_cursor#13 print_line_cursor#4
Not aliassing across scopes: print_char_cursor#17 print_char_cursor#6
Not aliassing across scopes: print_str::str#1 txt#0
Not aliassing across scopes: print_char_cursor#18 print_char_cursor#2
Not aliassing across scopes: print_line_cursor#14 print_line_cursor#2
Not aliassing across scopes: print_char_cursor#19 print_char_cursor#4
Not aliassing across scopes: print_line_cursor#16 print_line_cursor#7
Not aliassing across scopes: print_char_cursor#21 print_char_cursor#10
Alias (byte*) print_line_cursor#0 = (byte*) print_screen#0 (byte*) print_char_cursor#0 (byte*) print_line_cursor#22 (byte*) print_char_cursor#28 (byte*) print_screen#6 (byte*) print_line_cursor#20 (byte*) print_char_cursor#26 (byte*) print_screen#5 
Alias (byte*) print_str::str#2 = (byte*) print_str::str#3 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#22 (byte*) print_char_cursor#13 (byte*) print_char_cursor#2 
Alias (byte*) print_line_cursor#1 = (byte*~) print_ln::$0 (byte*) print_line_cursor#10 (byte*) print_char_cursor#3 (byte*) print_line_cursor#11 (byte*) print_char_cursor#15 (byte*) print_line_cursor#2 (byte*) print_char_cursor#4 
Alias (byte*) print_line_cursor#12 = (byte*) print_screen#3 (byte*) print_screen#2 (byte*) print_line_cursor#3 (byte*) print_char_cursor#5 (byte*) print_char_cursor#16 (byte*) print_line_cursor#4 (byte*) print_char_cursor#6 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#5 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#7 
Alias (byte*) print_line_cursor#19 = (byte*) print_line_cursor#21 
Alias (byte) main::i#2 = (byte) main::i#3 (byte) main::i#4 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#8 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#6 (byte*) print_line_cursor#15 (byte*) print_line_cursor#7 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#9 (byte*) print_char_cursor#19 (byte*) print_char_cursor#20 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#8 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#21 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str::str#4 print_str::str#1
Not aliassing across scopes: print_char_cursor#27 print_char_cursor#25
Not aliassing across scopes: print_line_cursor#17 print_line_cursor#19
Not aliassing across scopes: print_char_cursor#23 print_char_cursor#18
Not aliassing across scopes: print_screen#1 print_screen#4
Not aliassing across scopes: print_cls::sc#0 print_screen#1
Not aliassing across scopes: print_screen#4 print_line_cursor#0
Not aliassing across scopes: print_line_cursor#18 print_line_cursor#0
Not aliassing across scopes: print_char_cursor#24 print_line_cursor#0
Not aliassing across scopes: print_line_cursor#13 print_line_cursor#12
Not aliassing across scopes: print_char_cursor#17 print_line_cursor#12
Not aliassing across scopes: print_str::str#1 txt#0
Not aliassing across scopes: print_char_cursor#18 print_char_cursor#12
Not aliassing across scopes: print_line_cursor#14 print_line_cursor#1
Not aliassing across scopes: print_char_cursor#10 print_line_cursor#1
Not aliassing across scopes: print_line_cursor#16 print_line_cursor#14
Not aliassing across scopes: print_char_cursor#11 print_char_cursor#10
Self Phi Eliminated (byte*) print_char_cursor#14
Self Phi Eliminated (byte*) print_line_cursor#12
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) print_str::str#4 (byte*) print_str::str#1
Redundant Phi (byte*) print_char_cursor#27 (byte*) print_char_cursor#25
Redundant Phi (byte*) print_line_cursor#17 (byte*) print_line_cursor#19
Redundant Phi (byte*) print_char_cursor#23 (byte*) print_char_cursor#18
Redundant Phi (byte*) print_char_cursor#14 (byte*) print_char_cursor#23
Redundant Phi (byte*) print_screen#1 (byte*) print_screen#4
Redundant Phi (byte*) print_line_cursor#12 (byte*) print_screen#1
Redundant Phi (byte*) print_screen#4 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_line_cursor#18 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_char_cursor#24 (byte*) print_line_cursor#0
Redundant Phi (byte*) print_line_cursor#13 (byte*) print_line_cursor#12
Redundant Phi (byte*) print_char_cursor#17 (byte*) print_line_cursor#12
Redundant Phi (byte*) print_char_cursor#18 (byte*) print_char_cursor#12
Redundant Phi (byte*) print_line_cursor#14 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_char_cursor#10 (byte*) print_line_cursor#1
Redundant Phi (byte*) print_line_cursor#16 (byte*) print_line_cursor#14
Redundant Phi (byte*) print_char_cursor#11 (byte*) print_char_cursor#10
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) print_str::$0 if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2
Simple Condition (boolean~) print_ln::$1 if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1
Simple Condition (boolean~) print_cls::$1 if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (boolean~) main::$3 if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) print_line_cursor#0 = ((byte*))1024
Constant (const string) txt#0 = $0
Constant (const byte) main::i#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = print_line_cursor#0
Constant (const byte*) print_cls::$0 = print_line_cursor#0+1000
Constant (const string) print_str::str#1 = txt#0
Succesful SSA optimization Pass2ConstantIdentification
Consolidated array index constant in *(txt#0+1)
Consolidated array index constant in *(txt#0+1)
Succesful SSA optimization Pass2ConstantAdditionElimination
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) @14
Culled Empty Block (label) main::@3
Culled Empty Block (label) @16
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: print_char_cursor#12 print_char_cursor#25
Not aliassing across scopes: print_line_cursor#9 print_line_cursor#19
Not aliassing across scopes: print_char_cursor#12 print_char_cursor#25
Not aliassing across scopes: print_line_cursor#9 print_line_cursor#19
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Inlining constant with var siblings (const byte*) print_line_cursor#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#1 = (const string) txt#0
Constant inlined print_cls::$0 = ((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000
Constant inlined print_cls::sc#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Constant inlined $0 = (const string) txt#0
Constant inlined print_line_cursor#0 = ((byte*))(word/signed word/dword/signed dword) 1024
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @15 @end main main::@1 main::@4 main::@5 main::@return print_ln print_ln::@1 print_ln::@return print_str print_str::@1 print_str::@return print_str::@2 print_cls print_cls::@1 print_cls::@return 
Added new block during phi lifting main::@6(between main::@5 and main::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Block Sequence Planned @begin @15 @end main main::@1 main::@4 main::@5 main::@return main::@6 print_ln print_ln::@1 print_ln::@return print_ln::@3 print_str print_str::@1 print_str::@return print_str::@2 print_cls print_cls::@1 print_cls::@return print_cls::@3 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @15
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_cls:5 print_str:7 print_ln:9 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 7 initial phi equivalence classes
Not coalescing [14] print_char_cursor#29 ← print_line_cursor#1
Coalesced [15] print_line_cursor#23 ← print_line_cursor#1
Coalesced [16] main::i#5 ← main::i#1
Coalesced [17] print_line_cursor#24 ← print_line_cursor#19
Coalesced (already) [22] print_line_cursor#25 ← print_line_cursor#1
Coalesced [23] print_char_cursor#30 ← print_char_cursor#25
Coalesced [30] print_str::str#5 ← print_str::str#0
Coalesced [31] print_char_cursor#31 ← print_char_cursor#1
Coalesced [38] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 5 phi equivalence classes
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_cls::@3
Block Sequence Planned @begin @15 @end main main::@1 main::@4 main::@5 main::@return main::@6 print_ln print_ln::@1 print_ln::@return print_str print_str::@1 print_str::@return print_str::@2 print_cls print_cls::@1 print_cls::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @15
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of print_str
Adding NOP phi() at start of print_cls
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@15
@15: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @15
  [3] phi() [ ] ( )
main: scope:[main]  from @15
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@6
  [6] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@6/(byte) main::i#1 ) [ print_char_cursor#25 print_line_cursor#19 main::i#2 ] ( main:2 [ print_char_cursor#25 print_line_cursor#19 main::i#2 ] )
  [6] (byte*) print_line_cursor#19 ← phi( main/((byte*))(word/signed word/dword/signed dword) 1024 main::@6/(byte*) print_line_cursor#1 ) [ print_char_cursor#25 print_line_cursor#19 main::i#2 ] ( main:2 [ print_char_cursor#25 print_line_cursor#19 main::i#2 ] )
  [6] (byte*) print_char_cursor#25 ← phi( main/((byte*))(word/signed word/dword/signed dword) 1024 main::@6/(byte*~) print_char_cursor#29 ) [ print_char_cursor#25 print_line_cursor#19 main::i#2 ] ( main:2 [ print_char_cursor#25 print_line_cursor#19 main::i#2 ] )
  [7] call print_str param-assignment [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] ( main:2 [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] )
  to:main::@4
main::@4: scope:[main]  from main::@1
  [8] phi() [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] ( main:2 [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] )
  [9] call print_ln param-assignment [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] )
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] )
  [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ print_line_cursor#1 main::i#1 ] ( main:2 [ print_line_cursor#1 main::i#1 ] )
  [12] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@6 [ print_line_cursor#1 main::i#1 ] ( main:2 [ print_line_cursor#1 main::i#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@5
  [13] return  [ ] ( main:2 [ ] )
  to:@return
main::@6: scope:[main]  from main::@5
  [14] (byte*~) print_char_cursor#29 ← (byte*) print_line_cursor#1 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ( main:2 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] )
  to:main::@1
print_ln: scope:[print_ln]  from main::@4
  [15] phi() [ print_line_cursor#19 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#19 print_char_cursor#12 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [16] (byte*) print_line_cursor#9 ← phi( print_ln/(byte*) print_line_cursor#19 print_ln::@1/(byte*) print_line_cursor#1 ) [ print_line_cursor#9 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#9 print_char_cursor#12 ] )
  [17] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] )
  [18] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [19] return  [ print_line_cursor#1 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 ] )
  to:@return
print_str: scope:[print_str]  from main::@1
  [20] phi() [ print_char_cursor#25 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#25 ] )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [21] (byte*) print_char_cursor#12 ← phi( print_str/(byte*) print_char_cursor#25 print_str::@2/(byte*) print_char_cursor#1 ) [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] )
  [21] (byte*) print_str::str#2 ← phi( print_str/(const string) txt#0 print_str::@2/(byte*) print_str::str#0 ) [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] )
  [22] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] )
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [23] return  [ print_char_cursor#12 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] )
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [24] *((byte*) print_char_cursor#12) ← *((byte*) print_str::str#2) [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] )
  [25] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#12 [ print_str::str#2 print_char_cursor#1 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_str::str#2 print_char_cursor#1 ] )
  [26] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 [ print_str::str#0 print_char_cursor#1 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_str::str#0 print_char_cursor#1 ] )
  to:print_str::@1
print_cls: scope:[print_cls]  from main
  [27] phi() [ ] ( main:2::print_cls:5 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [28] (byte*) print_cls::sc#2 ← phi( print_cls/((byte*))(word/signed word/dword/signed dword) 1024 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [29] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [30] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  [31] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [32] return  [ ] ( main:2::print_cls:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@15 dominated by  @begin @15 
@end dominated by  @begin @15 @end 
main dominated by  @begin @15 main 
main::@1 dominated by  @begin @15 main main::@1 
main::@4 dominated by  @begin @15 main main::@1 main::@4 
main::@5 dominated by  @begin @15 main main::@1 main::@5 main::@4 
main::@return dominated by  main::@return @begin @15 main main::@1 main::@5 main::@4 
main::@6 dominated by  @begin @15 main main::@1 main::@5 main::@6 main::@4 
print_ln dominated by  @begin @15 main print_ln main::@1 main::@4 
print_ln::@1 dominated by  print_ln::@1 @begin @15 main print_ln main::@1 main::@4 
print_ln::@return dominated by  print_ln::@1 @begin @15 main print_ln print_ln::@return main::@1 main::@4 
print_str dominated by  @begin @15 main print_str main::@1 
print_str::@1 dominated by  @begin @15 main print_str::@1 print_str main::@1 
print_str::@return dominated by  @begin @15 print_str::@return main print_str::@1 print_str main::@1 
print_str::@2 dominated by  @begin @15 main print_str::@1 print_str::@2 print_str main::@1 
print_cls dominated by  @begin @15 main print_cls 
print_cls::@1 dominated by  @begin @15 print_cls::@1 main print_cls 
print_cls::@return dominated by  @begin @15 print_cls::@1 main print_cls print_cls::@return 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@6 blocks: null
Found back edge: Loop head: print_ln::@1 tails: print_ln::@1 blocks: null
Found back edge: Loop head: print_str::@1 tails: print_str::@2 blocks: null
Found back edge: Loop head: print_cls::@1 tails: print_cls::@1 blocks: null
Populated: Loop head: main::@1 tails: main::@6 blocks: main::@6 main::@5 main::@4 main::@1 
Populated: Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Populated: Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Populated: Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Loop head: main::@1 tails: main::@6 blocks: main::@6 main::@5 main::@4 main::@1 
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@6 blocks: main::@6 main::@5 main::@4 main::@1 
Found 1 loops in scope [print_cls]
  Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Found 1 loops in scope [print_str]
  Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Found 1 loops in scope [print_ln]
  Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: main::@1 tails: main::@6 blocks: main::@6 main::@5 main::@4 main::@1  depth: 1
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1  depth: 2
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1  depth: 2
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 11.0
(byte) main::i#2 4.4
(byte*) print_char_cursor
(byte*) print_char_cursor#1 101.0
(byte*) print_char_cursor#12 40.6
(byte*) print_char_cursor#25 6.5
(byte*~) print_char_cursor#29 22.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(byte*) print_line_cursor
(byte*) print_line_cursor#1 40.625
(byte*) print_line_cursor#19 3.25
(byte*) print_line_cursor#9 204.0
(void()) print_ln()
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#2 101.0
(byte[]) txt

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_char_cursor#12 print_char_cursor#25 print_char_cursor#29 print_char_cursor#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
[ print_str::str#2 print_str::str#0 ]
[ print_char_cursor#12 print_char_cursor#25 print_char_cursor#29 print_char_cursor#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:3 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ]
Allocated zp ZP_WORD:5 [ print_str::str#2 print_str::str#0 ]
Allocated zp ZP_WORD:7 [ print_char_cursor#12 print_char_cursor#25 print_char_cursor#29 print_char_cursor#1 ]
Allocated zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_char_cursor = 7
  .label print_line_cursor = 3
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @15 [phi:@begin->@15]
b15_from_bbegin:
  jmp b15
//SEG4 @15
b15:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @15 to main [phi:@15->main]
main_from_b15:
  jsr main
//SEG7 [3] phi from @15 to @end [phi:@15->@end]
bend_from_b15:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label i = 2
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [27] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG14 [6] phi (byte*) print_line_cursor#19 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG15 [6] phi (byte*) print_char_cursor#25 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [7] call print_str param-assignment [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] ( main:2 [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] )
  //SEG18 [20] phi from main::@1 to print_str [phi:main::@1->print_str]
  print_str_from_b1:
    jsr print_str
  //SEG19 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  b4_from_b1:
    jmp b4
  //SEG20 main::@4
  b4:
  //SEG21 [9] call print_ln param-assignment [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] )
  //SEG22 [15] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from_b4:
    jsr print_ln
    jmp b5
  //SEG23 main::@5
  b5:
  //SEG24 [10] *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] ) -- _deref_pbuc1=_inc__deref_pbuc2 
    lda txt+1
    clc
    adc #1
    sta txt+1
  //SEG25 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ print_line_cursor#1 main::i#1 ] ( main:2 [ print_line_cursor#1 main::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG26 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@6 [ print_line_cursor#1 main::i#1 ] ( main:2 [ print_line_cursor#1 main::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$b
    bne b6
    jmp breturn
  //SEG27 main::@return
  breturn:
  //SEG28 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG29 main::@6
  b6:
  //SEG30 [14] (byte*~) print_char_cursor#29 ← (byte*) print_line_cursor#1 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ( main:2 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG31 [6] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG32 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG33 [6] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
  //SEG34 [6] phi (byte*) print_char_cursor#25 = (byte*~) print_char_cursor#29 [phi:main::@6->main::@1#2] -- register_copy 
    jmp b1
}
//SEG35 print_ln
print_ln: {
  //SEG36 [16] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG37 [16] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG38 print_ln::@1
  b1:
  //SEG39 [17] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG40 [18] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG41 print_ln::@return
  breturn:
  //SEG42 [19] return  [ print_line_cursor#1 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 ] )
    rts
}
//SEG43 print_str
print_str: {
    .label str = 5
  //SEG44 [21] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  b1_from_print_str:
  //SEG45 [21] phi (byte*) print_char_cursor#12 = (byte*) print_char_cursor#25 [phi:print_str->print_str::@1#0] -- register_copy 
  //SEG46 [21] phi (byte*) print_str::str#2 = (const string) txt#0 [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<txt
    sta str
    lda #>txt
    sta str+1
    jmp b1
  //SEG47 print_str::@1
  b1:
  //SEG48 [22] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG49 print_str::@return
  breturn:
  //SEG50 [23] return  [ print_char_cursor#12 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] )
    rts
  //SEG51 print_str::@2
  b2:
  //SEG52 [24] *((byte*) print_char_cursor#12) ← *((byte*) print_str::str#2) [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG53 [25] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#12 [ print_str::str#2 print_char_cursor#1 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_str::str#2 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG54 [26] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 [ print_str::str#0 print_char_cursor#1 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_str::str#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG55 [21] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  b1_from_b2:
  //SEG56 [21] phi (byte*) print_char_cursor#12 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG57 [21] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}
//SEG58 print_cls
print_cls: {
    .label sc = 9
  //SEG59 [28] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG60 [28] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG61 [28] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG62 [28] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG63 print_cls::@1
  b1:
  //SEG64 [29] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG65 [30] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG66 [31] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG67 print_cls::@return
  breturn:
  //SEG68 [32] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}
  txt: .text "camelot@"

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [10] *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [14] (byte*~) print_char_cursor#29 ← (byte*) print_line_cursor#1 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ( main:2 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ) always clobbers reg byte a 
Statement [17] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [18] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [22] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [24] *((byte*) print_char_cursor#12) ← *((byte*) print_str::str#2) [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [29] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [31] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [10] *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] ) always clobbers reg byte a 
Statement [14] (byte*~) print_char_cursor#29 ← (byte*) print_line_cursor#1 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ( main:2 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ) always clobbers reg byte a 
Statement [17] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [18] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) always clobbers reg byte a 
Statement [22] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [24] *((byte*) print_char_cursor#12) ← *((byte*) print_str::str#2) [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) always clobbers reg byte a reg byte y 
Statement [29] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [31] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ print_str::str#2 print_str::str#0 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_WORD:7 [ print_char_cursor#12 print_char_cursor#25 print_char_cursor#29 print_char_cursor#1 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:9 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 247.88: zp ZP_WORD:3 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] 170.1: zp ZP_WORD:7 [ print_char_cursor#12 print_char_cursor#25 print_char_cursor#29 print_char_cursor#1 ] 
Uplift Scope [print_str] 303: zp ZP_WORD:5 [ print_str::str#2 print_str::str#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [main] 15.4: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [print_ln] 

Uplifting [] best 12807 combination zp ZP_WORD:3 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] zp ZP_WORD:7 [ print_char_cursor#12 print_char_cursor#25 print_char_cursor#29 print_char_cursor#1 ] 
Uplifting [print_str] best 12807 combination zp ZP_WORD:5 [ print_str::str#2 print_str::str#0 ] 
Uplifting [print_cls] best 12807 combination zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [main] best 12717 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [print_ln] best 12717 combination 
Coalescing zero page register [ zp ZP_WORD:3 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 ] ] with [ zp ZP_WORD:9 [ print_cls::sc#2 print_cls::sc#1 ] ]
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 print_cls::sc#2 print_cls::sc#1 ]
Allocated (was zp ZP_WORD:5) zp ZP_WORD:4 [ print_str::str#2 print_str::str#0 ]
Allocated (was zp ZP_WORD:7) zp ZP_WORD:6 [ print_char_cursor#12 print_char_cursor#25 print_char_cursor#29 print_char_cursor#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_char_cursor = 6
  .label print_line_cursor = 2
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @15 [phi:@begin->@15]
b15_from_bbegin:
  jmp b15
//SEG4 @15
b15:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @15 to main [phi:@15->main]
main_from_b15:
  jsr main
//SEG7 [3] phi from @15 to @end [phi:@15->@end]
bend_from_b15:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [27] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG13 [6] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG14 [6] phi (byte*) print_line_cursor#19 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG15 [6] phi (byte*) print_char_cursor#25 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [7] call print_str param-assignment [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] ( main:2 [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] )
  //SEG18 [20] phi from main::@1 to print_str [phi:main::@1->print_str]
  print_str_from_b1:
    jsr print_str
  //SEG19 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  b4_from_b1:
    jmp b4
  //SEG20 main::@4
  b4:
  //SEG21 [9] call print_ln param-assignment [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] )
  //SEG22 [15] phi from main::@4 to print_ln [phi:main::@4->print_ln]
  print_ln_from_b4:
    jsr print_ln
    jmp b5
  //SEG23 main::@5
  b5:
  //SEG24 [10] *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] ) -- _deref_pbuc1=_inc__deref_pbuc2 
    lda txt+1
    clc
    adc #1
    sta txt+1
  //SEG25 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ print_line_cursor#1 main::i#1 ] ( main:2 [ print_line_cursor#1 main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG26 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@6 [ print_line_cursor#1 main::i#1 ] ( main:2 [ print_line_cursor#1 main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b6
    jmp breturn
  //SEG27 main::@return
  breturn:
  //SEG28 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG29 main::@6
  b6:
  //SEG30 [14] (byte*~) print_char_cursor#29 ← (byte*) print_line_cursor#1 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ( main:2 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG31 [6] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  b1_from_b6:
  //SEG32 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG33 [6] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
  //SEG34 [6] phi (byte*) print_char_cursor#25 = (byte*~) print_char_cursor#29 [phi:main::@6->main::@1#2] -- register_copy 
    jmp b1
}
//SEG35 print_ln
print_ln: {
  //SEG36 [16] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG37 [16] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG38 print_ln::@1
  b1:
  //SEG39 [17] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG40 [18] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1_from_b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG41 print_ln::@return
  breturn:
  //SEG42 [19] return  [ print_line_cursor#1 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 ] )
    rts
}
//SEG43 print_str
print_str: {
    .label str = 4
  //SEG44 [21] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  b1_from_print_str:
  //SEG45 [21] phi (byte*) print_char_cursor#12 = (byte*) print_char_cursor#25 [phi:print_str->print_str::@1#0] -- register_copy 
  //SEG46 [21] phi (byte*) print_str::str#2 = (const string) txt#0 [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<txt
    sta str
    lda #>txt
    sta str+1
    jmp b1
  //SEG47 print_str::@1
  b1:
  //SEG48 [22] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG49 print_str::@return
  breturn:
  //SEG50 [23] return  [ print_char_cursor#12 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] )
    rts
  //SEG51 print_str::@2
  b2:
  //SEG52 [24] *((byte*) print_char_cursor#12) ← *((byte*) print_str::str#2) [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (print_char_cursor),y
  //SEG53 [25] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#12 [ print_str::str#2 print_char_cursor#1 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_str::str#2 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG54 [26] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 [ print_str::str#0 print_char_cursor#1 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_str::str#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG55 [21] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  b1_from_b2:
  //SEG56 [21] phi (byte*) print_char_cursor#12 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG57 [21] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}
//SEG58 print_cls
print_cls: {
    .label sc = 2
  //SEG59 [28] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG60 [28] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
    jmp b1
  //SEG61 [28] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG62 [28] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG63 print_cls::@1
  b1:
  //SEG64 [29] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG65 [30] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG66 [31] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1_from_b1
    lda sc
    cmp #<$400+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG67 print_cls::@return
  breturn:
  //SEG68 [32] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}
  txt: .text "camelot@"

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b15
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b15_from_bbegin:
Removing instruction main_from_b15:
Removing instruction bend_from_b15:
Removing instruction print_str_from_b1:
Removing instruction b4_from_b1:
Removing instruction print_ln_from_b4:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b15:
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1_from_main:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_b6:
Removing instruction breturn:
Removing instruction b1_from_print_str:
Removing instruction breturn:
Removing instruction b1_from_b2:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @15
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 11.0
(byte) main::i#2 reg byte x 4.4
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp ZP_WORD:6 101.0
(byte*) print_char_cursor#12 print_char_cursor zp ZP_WORD:6 40.6
(byte*) print_char_cursor#25 print_char_cursor zp ZP_WORD:6 6.5
(byte*~) print_char_cursor#29 print_char_cursor zp ZP_WORD:6 22.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:2 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:2 16.5
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp ZP_WORD:2 40.625
(byte*) print_line_cursor#19 print_line_cursor zp ZP_WORD:2 3.25
(byte*) print_line_cursor#9 print_line_cursor zp ZP_WORD:2 204.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:4 202.0
(byte*) print_str::str#2 str zp ZP_WORD:4 101.0
(byte[]) txt
(const string) txt#0 txt = (string) "camelot@"

reg byte x [ main::i#2 main::i#1 ]
zp ZP_WORD:2 [ print_line_cursor#9 print_line_cursor#19 print_line_cursor#1 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:4 [ print_str::str#2 print_str::str#0 ]
zp ZP_WORD:6 [ print_char_cursor#12 print_char_cursor#25 print_char_cursor#29 print_char_cursor#1 ]


FINAL ASSEMBLER
Score: 11128

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label print_char_cursor = 6
  .label print_line_cursor = 2
//SEG2 @begin
//SEG3 [1] phi from @begin to @15 [phi:@begin->@15]
//SEG4 @15
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @15 to main [phi:@15->main]
  jsr main
//SEG7 [3] phi from @15 to @end [phi:@15->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [27] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 [6] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG14 [6] phi (byte*) print_line_cursor#19 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#1] -- pbuz1=pbuc1 
    lda #<$400
    sta print_line_cursor
    lda #>$400
    sta print_line_cursor+1
  //SEG15 [6] phi (byte*) print_char_cursor#25 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:main->main::@1#2] -- pbuz1=pbuc1 
    lda #<$400
    sta print_char_cursor
    lda #>$400
    sta print_char_cursor+1
  //SEG16 main::@1
  b1:
  //SEG17 [7] call print_str param-assignment [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] ( main:2 [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] )
  //SEG18 [20] phi from main::@1 to print_str [phi:main::@1->print_str]
    jsr print_str
  //SEG19 [8] phi from main::@1 to main::@4 [phi:main::@1->main::@4]
  //SEG20 main::@4
  //SEG21 [9] call print_ln param-assignment [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] )
  //SEG22 [15] phi from main::@4 to print_ln [phi:main::@4->print_ln]
    jsr print_ln
  //SEG23 main::@5
  //SEG24 [10] *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← ++ *((const string) txt#0+(byte/signed byte/word/signed word/dword/signed dword) 1) [ main::i#2 print_line_cursor#1 ] ( main:2 [ main::i#2 print_line_cursor#1 ] ) -- _deref_pbuc1=_inc__deref_pbuc2 
    lda txt+1
    clc
    adc #1
    sta txt+1
  //SEG25 [11] (byte) main::i#1 ← ++ (byte) main::i#2 [ print_line_cursor#1 main::i#1 ] ( main:2 [ print_line_cursor#1 main::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG26 [12] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 11) goto main::@6 [ print_line_cursor#1 main::i#1 ] ( main:2 [ print_line_cursor#1 main::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b6
  //SEG27 main::@return
  //SEG28 [13] return  [ ] ( main:2 [ ] )
    rts
  //SEG29 main::@6
  b6:
  //SEG30 [14] (byte*~) print_char_cursor#29 ← (byte*) print_line_cursor#1 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ( main:2 [ print_char_cursor#29 print_line_cursor#1 main::i#1 ] ) -- pbuz1=pbuz2 
    lda print_line_cursor
    sta print_char_cursor
    lda print_line_cursor+1
    sta print_char_cursor+1
  //SEG31 [6] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  //SEG32 [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@6->main::@1#0] -- register_copy 
  //SEG33 [6] phi (byte*) print_line_cursor#19 = (byte*) print_line_cursor#1 [phi:main::@6->main::@1#1] -- register_copy 
  //SEG34 [6] phi (byte*) print_char_cursor#25 = (byte*~) print_char_cursor#29 [phi:main::@6->main::@1#2] -- register_copy 
    jmp b1
}
//SEG35 print_ln
print_ln: {
  //SEG36 [16] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG37 [16] phi (byte*) print_line_cursor#9 = (byte*) print_line_cursor#19 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG38 print_ln::@1
  b1:
  //SEG39 [17] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#9 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda print_line_cursor
    clc
    adc #$28
    sta print_line_cursor
    bcc !+
    inc print_line_cursor+1
  !:
  //SEG40 [18] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#12) goto print_ln::@1 [ print_line_cursor#1 print_char_cursor#12 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 print_char_cursor#12 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda print_line_cursor+1
    cmp print_char_cursor+1
    bcc b1
    bne !+
    lda print_line_cursor
    cmp print_char_cursor
    bcc b1
  !:
  //SEG41 print_ln::@return
  //SEG42 [19] return  [ print_line_cursor#1 ] ( main:2::print_ln:9 [ main::i#2 print_line_cursor#1 ] )
    rts
}
//SEG43 print_str
print_str: {
    .label str = 4
  //SEG44 [21] phi from print_str to print_str::@1 [phi:print_str->print_str::@1]
  //SEG45 [21] phi (byte*) print_char_cursor#12 = (byte*) print_char_cursor#25 [phi:print_str->print_str::@1#0] -- register_copy 
  //SEG46 [21] phi (byte*) print_str::str#2 = (const string) txt#0 [phi:print_str->print_str::@1#1] -- pbuz1=pbuc1 
    lda #<txt
    sta str
    lda #>txt
    sta str+1
  //SEG47 print_str::@1
  b1:
  //SEG48 [22] if(*((byte*) print_str::str#2)!=(byte) '@') goto print_str::@2 [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG49 print_str::@return
  //SEG50 [23] return  [ print_char_cursor#12 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 ] )
    rts
  //SEG51 print_str::@2
  b2:
  //SEG52 [24] *((byte*) print_char_cursor#12) ← *((byte*) print_str::str#2) [ print_char_cursor#12 print_str::str#2 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_char_cursor#12 print_str::str#2 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (print_char_cursor),y
  //SEG53 [25] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#12 [ print_str::str#2 print_char_cursor#1 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_str::str#2 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc print_char_cursor
    bne !+
    inc print_char_cursor+1
  !:
  //SEG54 [26] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2 [ print_str::str#0 print_char_cursor#1 ] ( main:2::print_str:7 [ print_line_cursor#19 main::i#2 print_str::str#0 print_char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
  //SEG55 [21] phi from print_str::@2 to print_str::@1 [phi:print_str::@2->print_str::@1]
  //SEG56 [21] phi (byte*) print_char_cursor#12 = (byte*) print_char_cursor#1 [phi:print_str::@2->print_str::@1#0] -- register_copy 
  //SEG57 [21] phi (byte*) print_str::str#2 = (byte*) print_str::str#0 [phi:print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
}
//SEG58 print_cls
print_cls: {
    .label sc = 2
  //SEG59 [28] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG60 [28] phi (byte*) print_cls::sc#2 = ((byte*))(word/signed word/dword/signed dword) 1024 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<$400
    sta sc
    lda #>$400
    sta sc+1
  //SEG61 [28] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG62 [28] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG63 print_cls::@1
  b1:
  //SEG64 [29] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG65 [30] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG66 [31] if((byte*) print_cls::sc#1!=((byte*))(word/signed word/dword/signed dword) 1024+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>$400+$3e8
    bne b1
    lda sc
    cmp #<$400+$3e8
    bne b1
  //SEG67 print_cls::@return
  //SEG68 [32] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}
  txt: .text "camelot@"

