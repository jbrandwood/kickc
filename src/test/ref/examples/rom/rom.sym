const word STACK_BASE = $103
__stackcall byte call1(byte call1::param1 , byte call1::param2)
const byte call1::OFFSET_STACK_PARAM1 = 1
const byte call1::OFFSET_STACK_PARAM2 = 0
const byte call1::OFFSET_STACK_RETURN = 1
byte call1::param1
byte call1::param1#0 param1 zp[1]:4 11.0
byte call1::param2
byte call1::param2#0 reg byte a 22.0
byte call1::return
byte call1::return#0 reg byte a 22.0
byte call2(byte call2::param1 , byte call2::param2)
byte~ call2::$0 reg byte a 22.0
byte call2::param1 loadstore zp[1]:4 3.75
byte call2::param2 loadstore zp[1]:2 7.5
byte call2::return loadstore zp[1]:3 6.428571428571428
byte call3(byte call3::param1 , byte call3::param2)
byte call3::param1
byte call3::param1#2 reg byte x 11.0
byte call3::param2
byte call3::param2#2 reg byte a 11.0
byte call3::return
byte call3::return#0 reg byte a 3.75
byte call3::return#2 reg byte a 4.0
byte call3::return#3 reg byte a 4.0
void main()
byte~ main::$0 reg byte a 4.0
byte~ main::$1 reg byte a 4.0
byte~ main::$2 reg byte a 4.0
byte~ main::$3 reg byte a 4.0
byte~ main::$4 reg byte a 4.0
byte~ main::$5 reg byte a 4.0
const byte* main::ptr = (byte*) 254

reg byte x [ call3::param1#2 ]
reg byte a [ call3::param2#2 ]
reg byte a [ main::$0 ]
reg byte a [ main::$1 ]
zp[1]:2 [ call2::param2 ]
zp[1]:3 [ call2::return ]
reg byte a [ main::$2 ]
reg byte a [ main::$3 ]
reg byte a [ call3::return#2 ]
reg byte a [ main::$4 ]
reg byte a [ call3::return#3 ]
reg byte a [ main::$5 ]
zp[1]:4 [ call1::param1#0 call2::param1 ]
reg byte a [ call1::param2#0 ]
reg byte a [ call1::return#0 ]
reg byte a [ call2::$0 ]
reg byte a [ call3::return#0 ]
