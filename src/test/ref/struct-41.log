Created struct value member variable (struct Point) main::v1_p
Created struct value member variable (struct Point) main::v1_q
Converted struct value to member variables (struct Vector) main::v1
Created struct value member variable (struct Point) main::v5_p
Created struct value member variable (struct Point) main::v5_q
Converted struct value to member variables (struct Vector) main::v5
Created struct value member variable (byte) main::v1_p_x
Created struct value member variable (byte) main::v1_p_y
Converted struct value to member variables (struct Point) main::v1_p
Created struct value member variable (byte) main::v1_q_x
Created struct value member variable (byte) main::v1_q_y
Converted struct value to member variables (struct Point) main::v1_q
Created struct value member variable (byte) main::v5_p_x
Created struct value member variable (byte) main::v5_p_y
Converted struct value to member variables (struct Point) main::v5_p
Created struct value member variable (byte) main::v5_q_x
Created struct value member variable (byte) main::v5_q_y
Converted struct value to member variables (struct Point) main::v5_q
Unwinding value copy (struct Vector) main::v1 ← { p: { x: (byte) 2, y: (byte) 3 }, q: { x: (byte) 4, y: (byte) 5 } }
Unwinding value copy (struct Vector) main::v1 ← { p: { x: (byte) 2, y: (byte) 3 }, q: { x: (byte) 4, y: (byte) 5 } }
Adding value simple copy (byte) main::v1_p_x ← (byte) 2
Adding value simple copy (byte) main::v1_p_y ← (byte) 3
Unwinding value copy (struct Vector) main::v1 ← { p: { x: (byte) 2, y: (byte) 3 }, q: { x: (byte) 4, y: (byte) 5 } }
Adding value simple copy (byte) main::v1_q_x ← (byte) 4
Adding value simple copy (byte) main::v1_q_y ← (byte) 5
Unwinding value copy (struct Vector) main::v2 ← (struct Vector) main::v1
Unwinding value copy (struct Vector) main::v2 ← (struct Vector) main::v1
Adding value simple copy *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) main::v1_p_x
Adding value simple copy *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) main::v1_p_y
Unwinding value copy (struct Vector) main::v2 ← (struct Vector) main::v1
Adding value simple copy *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X) ← (byte) main::v1_q_x
Adding value simple copy *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) ← (byte) main::v1_q_y
Unwinding value copy (struct Vector) main::v3 ← (struct Vector){ (struct Vector) main::v2.p, { x: (byte) 6, y: (byte) 7 } }
Adding value bulk copy *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P) ← memcpy(*((struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P), struct Point, (const byte) SIZEOF_STRUCT_POINT)
Adding value bulk copy *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT)
Adding value bulk copy *(&(struct Vector) main::v4) ← memcpy(*(&(struct Vector) main::v3), struct Vector, (const byte) SIZEOF_STRUCT_VECTOR)
Unwinding value copy (struct Vector) main::v5 ← (struct Vector){ (struct Point){ (struct Vector) main::v4.p.x, (struct Vector) main::v4.p.y }, { x: (byte) 8, y: (byte) 9 } }
Unwinding value copy (struct Vector) main::v5 ← (struct Vector){ (struct Point){ (struct Vector) main::v4.p.x, (struct Vector) main::v4.p.y }, { x: (byte) 8, y: (byte) 9 } }
Adding value simple copy (byte) main::v5_p_x ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
Adding value simple copy (byte) main::v5_p_y ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
Unwinding value copy (struct Vector) main::v5 ← (struct Vector){ (struct Point){ (struct Vector) main::v4.p.x, (struct Vector) main::v4.p.y }, { x: (byte) 8, y: (byte) 9 } }
Adding value simple copy (byte) main::v5_q_x ← (byte) 8
Adding value simple copy (byte) main::v5_q_y ← (byte) 9
Replacing struct member reference (struct Vector) main::v1.p.x with member unwinding reference (byte) main::v1_p_x
Replacing struct member reference (struct Vector) main::v1.p.y with member unwinding reference (byte) main::v1_p_y
Replacing struct member reference (struct Vector) main::v1.q.x with member unwinding reference (byte) main::v1_q_x
Replacing struct member reference (struct Vector) main::v1.q.y with member unwinding reference (byte) main::v1_q_y
Replacing struct member reference (struct Vector) main::v2.p.x with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
Replacing struct member reference (struct Vector) main::v2.p.y with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
Replacing struct member reference (struct Vector) main::v2.q.x with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X)
Replacing struct member reference (struct Vector) main::v2.q.y with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)
Replacing struct member reference (struct Vector) main::v3.p.x with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
Replacing struct member reference (struct Vector) main::v3.p.y with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
Replacing struct member reference (struct Vector) main::v3.q.x with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X)
Replacing struct member reference (struct Vector) main::v3.q.y with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)
Replacing struct member reference (struct Vector) main::v4.p.x with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
Replacing struct member reference (struct Vector) main::v4.p.y with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
Replacing struct member reference (struct Vector) main::v4.q.x with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X)
Replacing struct member reference (struct Vector) main::v4.q.y with member unwinding reference *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)
Replacing struct member reference (struct Vector) main::v5.p.x with member unwinding reference (byte) main::v5_p_x
Replacing struct member reference (struct Vector) main::v5.p.y with member unwinding reference (byte) main::v5_p_y
Replacing struct member reference (struct Vector) main::v5.q.x with member unwinding reference (byte) main::v5_q_x
Replacing struct member reference (struct Vector) main::v5.q.y with member unwinding reference (byte) main::v5_q_y

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::idx#0 ← (byte) 0
  *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X) ← (const byte) main::v1_p_x
  *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_p_y
  *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X) ← (const byte) main::v1_q_x
  *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_q_y
  (struct Vector) main::v2 ← struct-unwound {*((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y), *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)}
  *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P) ← memcpy(*((struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P), struct Point, (const byte) SIZEOF_STRUCT_POINT)
  *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT)
  (struct Vector) main::v3 ← struct-unwound {*((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P), *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q)}
  *(&(struct Vector) main::v4) ← memcpy(*(&(struct Vector) main::v3), struct Vector, (const byte) SIZEOF_STRUCT_VECTOR)
  (struct Vector) main::v4 ← struct-unwound {*(&(struct Vector) main::v4)}
  (byte) main::v5_p_x#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) main::v5_p_y#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
  *((const nomodify byte*) SCREEN + (byte) main::idx#0) ← (const byte) main::v1_p_x
  (byte) main::idx#1 ← ++ (byte) main::idx#0
  *((const nomodify byte*) SCREEN + (byte) main::idx#1) ← (const byte) main::v1_p_y
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  *((const nomodify byte*) SCREEN + (byte) main::idx#2) ← (const byte) main::v1_q_x
  (byte) main::idx#3 ← ++ (byte) main::idx#2
  *((const nomodify byte*) SCREEN + (byte) main::idx#3) ← (const byte) main::v1_q_y
  (byte) main::idx#4 ← ++ (byte) main::idx#3
  *((const nomodify byte*) SCREEN + (byte) main::idx#4) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) main::idx#5 ← ++ (byte) main::idx#4
  *((const nomodify byte*) SCREEN + (byte) main::idx#5) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
  (byte) main::idx#6 ← ++ (byte) main::idx#5
  *((const nomodify byte*) SCREEN + (byte) main::idx#6) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) main::idx#7 ← ++ (byte) main::idx#6
  *((const nomodify byte*) SCREEN + (byte) main::idx#7) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)
  (byte) main::idx#8 ← ++ (byte) main::idx#7
  *((const nomodify byte*) SCREEN + (byte) main::idx#8) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) main::idx#9 ← ++ (byte) main::idx#8
  *((const nomodify byte*) SCREEN + (byte) main::idx#9) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
  (byte) main::idx#10 ← ++ (byte) main::idx#9
  *((const nomodify byte*) SCREEN + (byte) main::idx#10) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) main::idx#11 ← ++ (byte) main::idx#10
  *((const nomodify byte*) SCREEN + (byte) main::idx#11) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)
  (byte) main::idx#12 ← ++ (byte) main::idx#11
  *((const nomodify byte*) SCREEN + (byte) main::idx#12) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) main::idx#13 ← ++ (byte) main::idx#12
  *((const nomodify byte*) SCREEN + (byte) main::idx#13) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
  (byte) main::idx#14 ← ++ (byte) main::idx#13
  *((const nomodify byte*) SCREEN + (byte) main::idx#14) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X)
  (byte) main::idx#15 ← ++ (byte) main::idx#14
  *((const nomodify byte*) SCREEN + (byte) main::idx#15) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)
  (byte) main::idx#16 ← ++ (byte) main::idx#15
  *((const nomodify byte*) SCREEN + (byte) main::idx#16) ← (byte) main::v5_p_x#0
  (byte) main::idx#17 ← ++ (byte) main::idx#16
  *((const nomodify byte*) SCREEN + (byte) main::idx#17) ← (byte) main::v5_p_y#0
  (byte) main::idx#18 ← ++ (byte) main::idx#17
  *((const nomodify byte*) SCREEN + (byte) main::idx#18) ← (const byte) main::v5_q_x
  (byte) main::idx#19 ← ++ (byte) main::idx#18
  *((const nomodify byte*) SCREEN + (byte) main::idx#19) ← (const byte) main::v5_q_y
  (byte) main::idx#20 ← ++ (byte) main::idx#19
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(const struct Point) $0 = { x: (byte) 6, y: (byte) 7 }
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_X = (byte) 0
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(const byte) OFFSET_STRUCT_VECTOR_P = (byte) 0
(const byte) OFFSET_STRUCT_VECTOR_Q = (byte) 2
(byte) Point::x
(byte) Point::y
(const nomodify byte*) SCREEN = (byte*)(number) $400
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(const byte) SIZEOF_STRUCT_VECTOR = (byte) 4
(struct Point) Vector::p
(struct Point) Vector::q
(void()) main()
(label) main::@return
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#10
(byte) main::idx#11
(byte) main::idx#12
(byte) main::idx#13
(byte) main::idx#14
(byte) main::idx#15
(byte) main::idx#16
(byte) main::idx#17
(byte) main::idx#18
(byte) main::idx#19
(byte) main::idx#2
(byte) main::idx#20
(byte) main::idx#3
(byte) main::idx#4
(byte) main::idx#5
(byte) main::idx#6
(byte) main::idx#7
(byte) main::idx#8
(byte) main::idx#9
(struct Point) main::v1_p
(const byte) main::v1_p_x = (byte) 2
(const byte) main::v1_p_y = (byte) 3
(struct Point) main::v1_q
(const byte) main::v1_q_x = (byte) 4
(const byte) main::v1_q_y = (byte) 5
(struct Vector) main::v2 loadstore
(struct Vector) main::v3 loadstore
(struct Vector) main::v4 loadstore
(struct Point) main::v5_p
(byte) main::v5_p_x
(byte) main::v5_p_x#0
(byte) main::v5_p_y
(byte) main::v5_p_y#0
(struct Point) main::v5_q
(const byte) main::v5_q_x = (byte) 8
(const byte) main::v5_q_y = (byte) 9

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Removing C-classic struct-unwound assignment [5] (struct Vector) main::v2 ← struct-unwound {*((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y), *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X), *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)}
Removing C-classic struct-unwound assignment [8] (struct Vector) main::v3 ← struct-unwound {*((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P), *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q)}
Removing C-classic struct-unwound assignment [10] (struct Vector) main::v4 ← struct-unwound {*(&(struct Vector) main::v4)}
Constant (const byte) main::idx#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero (byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P in [1] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X) ← (const byte) main::v1_p_x
Simplifying expression containing zero (struct Point*)&main::v2 in [1] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P) ← (const byte) main::v1_p_x
Simplifying expression containing zero (struct Point*)&main::v2 in [2] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_p_y
Simplifying expression containing zero (byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q in [3] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X) ← (const byte) main::v1_q_x
Simplifying expression containing zero (struct Point*)&main::v2 in [6] *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P) ← memcpy(*((struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P), struct Point, (const byte) SIZEOF_STRUCT_POINT)
Simplifying expression containing zero (struct Point*)&main::v3 in [6] *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P) ← memcpy(*((struct Point*)&(struct Vector) main::v2), struct Point, (const byte) SIZEOF_STRUCT_POINT)
Simplifying expression containing zero (byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P in [11] (byte) main::v5_p_x#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (struct Point*)&main::v4 in [11] (byte) main::v5_p_x#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P)
Simplifying expression containing zero (struct Point*)&main::v4 in [12] (byte) main::v5_p_y#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
Simplifying expression containing zero SCREEN in [13] *((const nomodify byte*) SCREEN + (const byte) main::idx#0) ← (const byte) main::v1_p_x
Simplifying expression containing zero (byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_P in [21] *((const nomodify byte*) SCREEN + (byte) main::idx#4) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (struct Point*)&main::v2 in [21] *((const nomodify byte*) SCREEN + (byte) main::idx#4) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P)
Simplifying expression containing zero (struct Point*)&main::v2 in [23] *((const nomodify byte*) SCREEN + (byte) main::idx#5) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
Simplifying expression containing zero (byte*)(struct Point*)&main::v2+OFFSET_STRUCT_VECTOR_Q in [25] *((const nomodify byte*) SCREEN + (byte) main::idx#6) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_P in [29] *((const nomodify byte*) SCREEN + (byte) main::idx#8) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (struct Point*)&main::v3 in [29] *((const nomodify byte*) SCREEN + (byte) main::idx#8) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P)
Simplifying expression containing zero (struct Point*)&main::v3 in [31] *((const nomodify byte*) SCREEN + (byte) main::idx#9) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
Simplifying expression containing zero (byte*)(struct Point*)&main::v3+OFFSET_STRUCT_VECTOR_Q in [33] *((const nomodify byte*) SCREEN + (byte) main::idx#10) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_P in [37] *((const nomodify byte*) SCREEN + (byte) main::idx#12) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (struct Point*)&main::v4 in [37] *((const nomodify byte*) SCREEN + (byte) main::idx#12) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P)
Simplifying expression containing zero (struct Point*)&main::v4 in [39] *((const nomodify byte*) SCREEN + (byte) main::idx#13) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_P+(const byte) OFFSET_STRUCT_POINT_Y)
Simplifying expression containing zero (byte*)(struct Point*)&main::v4+OFFSET_STRUCT_VECTOR_Q in [41] *((const nomodify byte*) SCREEN + (byte) main::idx#14) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte) main::idx#20 and assignment [48] (byte) main::idx#20 ← ++ (byte) main::idx#19
Eliminating unused constant (const byte) OFFSET_STRUCT_VECTOR_P
Eliminating unused constant (const byte) OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [10] (byte) main::idx#1 ← ++ (const byte) main::idx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#1 = ++main::idx#0
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [11] (byte) main::idx#2 ← ++ (const byte) main::idx#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#2 = ++main::idx#1
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [12] (byte) main::idx#3 ← ++ (const byte) main::idx#2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#3 = ++main::idx#2
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [13] (byte) main::idx#4 ← ++ (const byte) main::idx#3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#4 = ++main::idx#3
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [14] (byte) main::idx#5 ← ++ (const byte) main::idx#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#5 = ++main::idx#4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [15] (byte) main::idx#6 ← ++ (const byte) main::idx#5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#6 = ++main::idx#5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [16] (byte) main::idx#7 ← ++ (const byte) main::idx#6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#7 = ++main::idx#6
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [17] (byte) main::idx#8 ← ++ (const byte) main::idx#7
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#8 = ++main::idx#7
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [18] (byte) main::idx#9 ← ++ (const byte) main::idx#8
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#9 = ++main::idx#8
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [19] (byte) main::idx#10 ← ++ (const byte) main::idx#9
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#10 = ++main::idx#9
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [20] (byte) main::idx#11 ← ++ (const byte) main::idx#10
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#11 = ++main::idx#10
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [21] (byte) main::idx#12 ← ++ (const byte) main::idx#11
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#12 = ++main::idx#11
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [22] (byte) main::idx#13 ← ++ (const byte) main::idx#12
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#13 = ++main::idx#12
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [23] (byte) main::idx#14 ← ++ (const byte) main::idx#13
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#14 = ++main::idx#13
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [24] (byte) main::idx#15 ← ++ (const byte) main::idx#14
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#15 = ++main::idx#14
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [25] (byte) main::idx#16 ← ++ (const byte) main::idx#15
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#16 = ++main::idx#15
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [26] (byte) main::idx#17 ← ++ (const byte) main::idx#16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#17 = ++main::idx#16
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [27] (byte) main::idx#18 ← ++ (const byte) main::idx#17
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#18 = ++main::idx#17
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [28] (byte) main::idx#19 ← ++ (const byte) main::idx#18
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::idx#19 = ++main::idx#18
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with different constant siblings (const byte) main::idx#0
Inlining constant with different constant siblings (const byte) main::idx#1
Inlining constant with different constant siblings (const byte) main::idx#2
Inlining constant with different constant siblings (const byte) main::idx#3
Inlining constant with different constant siblings (const byte) main::idx#4
Inlining constant with different constant siblings (const byte) main::idx#5
Inlining constant with different constant siblings (const byte) main::idx#6
Inlining constant with different constant siblings (const byte) main::idx#7
Inlining constant with different constant siblings (const byte) main::idx#8
Inlining constant with different constant siblings (const byte) main::idx#9
Inlining constant with different constant siblings (const byte) main::idx#10
Inlining constant with different constant siblings (const byte) main::idx#11
Inlining constant with different constant siblings (const byte) main::idx#12
Inlining constant with different constant siblings (const byte) main::idx#13
Inlining constant with different constant siblings (const byte) main::idx#14
Inlining constant with different constant siblings (const byte) main::idx#15
Inlining constant with different constant siblings (const byte) main::idx#16
Inlining constant with different constant siblings (const byte) main::idx#17
Inlining constant with different constant siblings (const byte) main::idx#18
Inlining constant with different constant siblings (const byte) main::idx#19
Constant inlined main::idx#16 = ++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#17 = ++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#18 = ++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#19 = ++++++++++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#12 = ++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#13 = ++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#14 = ++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#15 = ++++++++++++++++++++++++++++++(byte) 0
Constant inlined main::idx#0 = (byte) 0
Constant inlined main::idx#1 = ++(byte) 0
Constant inlined main::idx#2 = ++++(byte) 0
Constant inlined main::idx#3 = ++++++(byte) 0
Constant inlined main::idx#4 = ++++++++(byte) 0
Constant inlined main::idx#5 = ++++++++++(byte) 0
Constant inlined main::idx#6 = ++++++++++++(byte) 0
Constant inlined main::idx#7 = ++++++++++++++(byte) 0
Constant inlined main::idx#8 = ++++++++++++++++(byte) 0
Constant inlined main::idx#9 = ++++++++++++++++++(byte) 0
Constant inlined main::idx#10 = ++++++++++++++++++++(byte) 0
Constant inlined main::idx#11 = ++++++++++++++++++++++(byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+++0)
Consolidated array index constant in *(SCREEN+++++0)
Consolidated array index constant in *(SCREEN+++++++0)
Consolidated array index constant in *(SCREEN+++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++++0)
Consolidated array index constant in *(SCREEN+++++++++++++++++++++++++++++++++++++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Simplifying constant integer increment ++2
Simplifying constant integer increment ++3
Simplifying constant integer increment ++4
Simplifying constant integer increment ++5
Simplifying constant integer increment ++6
Simplifying constant integer increment ++7
Simplifying constant integer increment ++8
Simplifying constant integer increment ++9
Simplifying constant integer increment ++$a
Simplifying constant integer increment ++$b
Simplifying constant integer increment ++$c
Simplifying constant integer increment ++$d
Simplifying constant integer increment ++$e
Simplifying constant integer increment ++$f
Simplifying constant integer increment ++$10
Simplifying constant integer increment ++$11
Simplifying constant integer increment ++$12
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((byte*)(struct Point*)&(struct Vector) main::v2) ← (const byte) main::v1_p_x
  [5] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_p_y
  [6] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) ← (const byte) main::v1_q_x
  [7] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_q_y
  [8] *((struct Point*)&(struct Vector) main::v3) ← memcpy(*((struct Point*)&(struct Vector) main::v2), struct Point, (const byte) SIZEOF_STRUCT_POINT)
  [9] *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT)
  [10] *(&(struct Vector) main::v4) ← memcpy(*(&(struct Vector) main::v3), struct Vector, (const byte) SIZEOF_STRUCT_VECTOR)
  [11] (byte) main::v5_p_x#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4)
  [12] (byte) main::v5_p_y#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y)
  [13] *((const nomodify byte*) SCREEN) ← (const byte) main::v1_p_x
  [14] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) main::v1_p_y
  [15] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) main::v1_q_x
  [16] *((const nomodify byte*) SCREEN+(byte) 3) ← (const byte) main::v1_q_y
  [17] *((const nomodify byte*) SCREEN+(byte) 4) ← *((byte*)(struct Point*)&(struct Vector) main::v2)
  [18] *((const nomodify byte*) SCREEN+(byte) 5) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y)
  [19] *((const nomodify byte*) SCREEN+(byte) 6) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q)
  [20] *((const nomodify byte*) SCREEN+(byte) 7) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)
  [21] *((const nomodify byte*) SCREEN+(byte) 8) ← *((byte*)(struct Point*)&(struct Vector) main::v3)
  [22] *((const nomodify byte*) SCREEN+(byte) 9) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_POINT_Y)
  [23] *((const nomodify byte*) SCREEN+(byte) $a) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q)
  [24] *((const nomodify byte*) SCREEN+(byte) $b) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)
  [25] *((const nomodify byte*) SCREEN+(byte) $c) ← *((byte*)(struct Point*)&(struct Vector) main::v4)
  [26] *((const nomodify byte*) SCREEN+(byte) $d) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y)
  [27] *((const nomodify byte*) SCREEN+(byte) $e) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q)
  [28] *((const nomodify byte*) SCREEN+(byte) $f) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y)
  [29] *((const nomodify byte*) SCREEN+(byte) $10) ← (byte) main::v5_p_x#0
  [30] *((const nomodify byte*) SCREEN+(byte) $11) ← (byte) main::v5_p_y#0
  [31] *((const nomodify byte*) SCREEN+(byte) $12) ← (const byte) main::v5_q_x
  [32] *((const nomodify byte*) SCREEN+(byte) $13) ← (const byte) main::v5_q_y
  to:main::@return
main::@return: scope:[main]  from main
  [33] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(struct Point) Vector::p
(struct Point) Vector::q
(void()) main()
(byte) main::idx
(struct Point) main::v1_p
(struct Point) main::v1_q
(struct Vector) main::v2 loadstore
(struct Vector) main::v3 loadstore
(struct Vector) main::v4 loadstore
(struct Point) main::v5_p
(byte) main::v5_p_x
(byte) main::v5_p_x#0 1.2222222222222223
(byte) main::v5_p_y
(byte) main::v5_p_y#0 1.2222222222222223
(struct Point) main::v5_q

Initial phi equivalence classes
Added variable main::v5_p_x#0 to live range equivalence class [ main::v5_p_x#0 ]
Added variable main::v5_p_y#0 to live range equivalence class [ main::v5_p_y#0 ]
Added variable main::v2 to live range equivalence class [ main::v2 ]
Added variable main::v3 to live range equivalence class [ main::v3 ]
Added variable main::v4 to live range equivalence class [ main::v4 ]
Complete equivalence classes
[ main::v5_p_x#0 ]
[ main::v5_p_y#0 ]
[ main::v2 ]
[ main::v3 ]
[ main::v4 ]
Allocated zp[1]:2 [ main::v5_p_x#0 ]
Allocated zp[1]:3 [ main::v5_p_y#0 ]
Allocated zp[4]:4 [ main::v2 ]
Allocated zp[4]:8 [ main::v3 ]
Allocated zp[4]:12 [ main::v4 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct with Unwound behavior - struct containing struct copying
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_Q = 2
  .const SIZEOF_STRUCT_POINT = 2
  .const SIZEOF_STRUCT_VECTOR = 4
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const v1_p_x = 2
    .const v1_p_y = 3
    .const v1_q_x = 4
    .const v1_q_y = 5
    .const v5_q_x = 8
    .const v5_q_y = 9
    .label v2 = 4
    .label v3 = 8
    .label v4 = $c
    .label v5_p_x = 2
    .label v5_p_y = 3
    // [4] *((byte*)(struct Point*)&(struct Vector) main::v2) ← (const byte) main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta.z v2
    // [5] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta v2+OFFSET_STRUCT_POINT_Y
    // [6] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) ← (const byte) main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta v2+OFFSET_STRUCT_VECTOR_Q
    // [7] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    // [8] *((struct Point*)&(struct Vector) main::v3) ← memcpy(*((struct Point*)&(struct Vector) main::v2), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda v2-1,y
    sta v3-1,y
    dey
    bne !-
    // [9] *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta v3+OFFSET_STRUCT_VECTOR_Q-1,y
    dey
    bne !-
    // [10] *(&(struct Vector) main::v4) ← memcpy(*(&(struct Vector) main::v3), struct Vector, (const byte) SIZEOF_STRUCT_VECTOR) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_VECTOR
  !:
    lda v3-1,y
    sta v4-1,y
    dey
    bne !-
    // [11] (byte) main::v5_p_x#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4) -- vbuz1=_deref_pbuc1 
    lda.z v4
    sta.z v5_p_x
    // [12] (byte) main::v5_p_y#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuz1=_deref_pbuc1 
    lda v4+OFFSET_STRUCT_POINT_Y
    sta.z v5_p_y
    // [13] *((const nomodify byte*) SCREEN) ← (const byte) main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta SCREEN
    // [14] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta SCREEN+1
    // [15] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta SCREEN+2
    // [16] *((const nomodify byte*) SCREEN+(byte) 3) ← (const byte) main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta SCREEN+3
    // [17] *((const nomodify byte*) SCREEN+(byte) 4) ← *((byte*)(struct Point*)&(struct Vector) main::v2) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v2
    sta SCREEN+4
    // [18] *((const nomodify byte*) SCREEN+(byte) 5) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_POINT_Y
    sta SCREEN+5
    // [19] *((const nomodify byte*) SCREEN+(byte) 6) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+6
    // [20] *((const nomodify byte*) SCREEN+(byte) 7) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+7
    // [21] *((const nomodify byte*) SCREEN+(byte) 8) ← *((byte*)(struct Point*)&(struct Vector) main::v3) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v3
    sta SCREEN+8
    // [22] *((const nomodify byte*) SCREEN+(byte) 9) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_POINT_Y
    sta SCREEN+9
    // [23] *((const nomodify byte*) SCREEN+(byte) $a) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$a
    // [24] *((const nomodify byte*) SCREEN+(byte) $b) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$b
    // [25] *((const nomodify byte*) SCREEN+(byte) $c) ← *((byte*)(struct Point*)&(struct Vector) main::v4) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v4
    sta SCREEN+$c
    // [26] *((const nomodify byte*) SCREEN+(byte) $d) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$d
    // [27] *((const nomodify byte*) SCREEN+(byte) $e) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$e
    // [28] *((const nomodify byte*) SCREEN+(byte) $f) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$f
    // [29] *((const nomodify byte*) SCREEN+(byte) $10) ← (byte) main::v5_p_x#0 -- _deref_pbuc1=vbuz1 
    lda.z v5_p_x
    sta SCREEN+$10
    // [30] *((const nomodify byte*) SCREEN+(byte) $11) ← (byte) main::v5_p_y#0 -- _deref_pbuc1=vbuz1 
    lda.z v5_p_y
    sta SCREEN+$11
    // [31] *((const nomodify byte*) SCREEN+(byte) $12) ← (const byte) main::v5_q_x -- _deref_pbuc1=vbuc2 
    lda #v5_q_x
    sta SCREEN+$12
    // [32] *((const nomodify byte*) SCREEN+(byte) $13) ← (const byte) main::v5_q_y -- _deref_pbuc1=vbuc2 
    lda #v5_q_y
    sta SCREEN+$13
    jmp __breturn
    // main::@return
  __breturn:
    // [33] return 
    rts
}
  // File Data
  __0: .byte 6, 7

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((byte*)(struct Point*)&(struct Vector) main::v2) ← (const byte) main::v1_p_x [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [5] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_p_y [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) ← (const byte) main::v1_q_x [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_q_y [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [8] *((struct Point*)&(struct Vector) main::v3) ← memcpy(*((struct Point*)&(struct Vector) main::v2), struct Point, (const byte) SIZEOF_STRUCT_POINT) [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [9] *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT) [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] *(&(struct Vector) main::v4) ← memcpy(*(&(struct Vector) main::v3), struct Vector, (const byte) SIZEOF_STRUCT_VECTOR) [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [13] *((const nomodify byte*) SCREEN) ← (const byte) main::v1_p_x [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::v5_p_x#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::v5_p_y#0 ]
Statement [14] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) main::v1_p_y [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [15] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) main::v1_q_x [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [16] *((const nomodify byte*) SCREEN+(byte) 3) ← (const byte) main::v1_q_y [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) SCREEN+(byte) 4) ← *((byte*)(struct Point*)&(struct Vector) main::v2) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [18] *((const nomodify byte*) SCREEN+(byte) 5) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) SCREEN+(byte) 6) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [20] *((const nomodify byte*) SCREEN+(byte) 7) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) SCREEN+(byte) 8) ← *((byte*)(struct Point*)&(struct Vector) main::v3) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [22] *((const nomodify byte*) SCREEN+(byte) 9) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [23] *((const nomodify byte*) SCREEN+(byte) $a) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [24] *((const nomodify byte*) SCREEN+(byte) $b) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [25] *((const nomodify byte*) SCREEN+(byte) $c) ← *((byte*)(struct Point*)&(struct Vector) main::v4) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [26] *((const nomodify byte*) SCREEN+(byte) $d) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [27] *((const nomodify byte*) SCREEN+(byte) $e) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [28] *((const nomodify byte*) SCREEN+(byte) $f) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [31] *((const nomodify byte*) SCREEN+(byte) $12) ← (const byte) main::v5_q_x [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [32] *((const nomodify byte*) SCREEN+(byte) $13) ← (const byte) main::v5_q_y [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [4] *((byte*)(struct Point*)&(struct Vector) main::v2) ← (const byte) main::v1_p_x [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [5] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_p_y [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) ← (const byte) main::v1_q_x [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_q_y [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a 
Statement [8] *((struct Point*)&(struct Vector) main::v3) ← memcpy(*((struct Point*)&(struct Vector) main::v2), struct Point, (const byte) SIZEOF_STRUCT_POINT) [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [9] *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT) [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] *(&(struct Vector) main::v4) ← memcpy(*(&(struct Vector) main::v3), struct Vector, (const byte) SIZEOF_STRUCT_VECTOR) [ main::v2 main::v3 main::v4 ] ( main:2 [ main::v2 main::v3 main::v4 ] { }  ) always clobbers reg byte a reg byte y 
Statement [13] *((const nomodify byte*) SCREEN) ← (const byte) main::v1_p_x [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [14] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) main::v1_p_y [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [15] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) main::v1_q_x [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [16] *((const nomodify byte*) SCREEN+(byte) 3) ← (const byte) main::v1_q_y [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [17] *((const nomodify byte*) SCREEN+(byte) 4) ← *((byte*)(struct Point*)&(struct Vector) main::v2) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [18] *((const nomodify byte*) SCREEN+(byte) 5) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [19] *((const nomodify byte*) SCREEN+(byte) 6) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v2 main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [20] *((const nomodify byte*) SCREEN+(byte) 7) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [21] *((const nomodify byte*) SCREEN+(byte) 8) ← *((byte*)(struct Point*)&(struct Vector) main::v3) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [22] *((const nomodify byte*) SCREEN+(byte) 9) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [23] *((const nomodify byte*) SCREEN+(byte) $a) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v3 main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [24] *((const nomodify byte*) SCREEN+(byte) $b) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [25] *((const nomodify byte*) SCREEN+(byte) $c) ← *((byte*)(struct Point*)&(struct Vector) main::v4) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [26] *((const nomodify byte*) SCREEN+(byte) $d) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [27] *((const nomodify byte*) SCREEN+(byte) $e) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q) [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v4 main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [28] *((const nomodify byte*) SCREEN+(byte) $f) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) [ main::v5_p_x#0 main::v5_p_y#0 ] ( main:2 [ main::v5_p_x#0 main::v5_p_y#0 ] { }  ) always clobbers reg byte a 
Statement [31] *((const nomodify byte*) SCREEN+(byte) $12) ← (const byte) main::v5_q_x [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [32] *((const nomodify byte*) SCREEN+(byte) $13) ← (const byte) main::v5_q_y [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::v5_p_x#0 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::v5_p_y#0 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[4]:4 [ main::v2 ] : zp[4]:4 , 
Potential registers zp[4]:8 [ main::v3 ] : zp[4]:8 , 
Potential registers zp[4]:12 [ main::v4 ] : zp[4]:12 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 1.22: zp[1]:2 [ main::v5_p_x#0 ] 1.22: zp[1]:3 [ main::v5_p_y#0 ] 0: zp[4]:4 [ main::v2 ] 0: zp[4]:8 [ main::v3 ] 0: zp[4]:12 [ main::v4 ] 
Uplift Scope [Point] 
Uplift Scope [Vector] 
Uplift Scope [] 

Uplifting [main] best 236 combination reg byte y [ main::v5_p_x#0 ] reg byte x [ main::v5_p_y#0 ] zp[4]:4 [ main::v2 ] zp[4]:8 [ main::v3 ] zp[4]:12 [ main::v4 ] 
Uplifting [Point] best 236 combination 
Uplifting [Vector] best 236 combination 
Uplifting [] best 236 combination 
Allocated (was zp[4]:4) zp[4]:2 [ main::v2 ]
Allocated (was zp[4]:8) zp[4]:6 [ main::v3 ]
Allocated (was zp[4]:12) zp[4]:10 [ main::v4 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct with Unwound behavior - struct containing struct copying
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_Q = 2
  .const SIZEOF_STRUCT_POINT = 2
  .const SIZEOF_STRUCT_VECTOR = 4
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .const v1_p_x = 2
    .const v1_p_y = 3
    .const v1_q_x = 4
    .const v1_q_y = 5
    .const v5_q_x = 8
    .const v5_q_y = 9
    .label v2 = 2
    .label v3 = 6
    .label v4 = $a
    // [4] *((byte*)(struct Point*)&(struct Vector) main::v2) ← (const byte) main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta.z v2
    // [5] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta v2+OFFSET_STRUCT_POINT_Y
    // [6] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) ← (const byte) main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta v2+OFFSET_STRUCT_VECTOR_Q
    // [7] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    // [8] *((struct Point*)&(struct Vector) main::v3) ← memcpy(*((struct Point*)&(struct Vector) main::v2), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda v2-1,y
    sta v3-1,y
    dey
    bne !-
    // [9] *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta v3+OFFSET_STRUCT_VECTOR_Q-1,y
    dey
    bne !-
    // [10] *(&(struct Vector) main::v4) ← memcpy(*(&(struct Vector) main::v3), struct Vector, (const byte) SIZEOF_STRUCT_VECTOR) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_VECTOR
  !:
    lda v3-1,y
    sta v4-1,y
    dey
    bne !-
    // [11] (byte) main::v5_p_x#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4) -- vbuyy=_deref_pbuc1 
    ldy.z v4
    // [12] (byte) main::v5_p_y#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx v4+OFFSET_STRUCT_POINT_Y
    // [13] *((const nomodify byte*) SCREEN) ← (const byte) main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta SCREEN
    // [14] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta SCREEN+1
    // [15] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta SCREEN+2
    // [16] *((const nomodify byte*) SCREEN+(byte) 3) ← (const byte) main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta SCREEN+3
    // [17] *((const nomodify byte*) SCREEN+(byte) 4) ← *((byte*)(struct Point*)&(struct Vector) main::v2) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v2
    sta SCREEN+4
    // [18] *((const nomodify byte*) SCREEN+(byte) 5) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_POINT_Y
    sta SCREEN+5
    // [19] *((const nomodify byte*) SCREEN+(byte) 6) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+6
    // [20] *((const nomodify byte*) SCREEN+(byte) 7) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+7
    // [21] *((const nomodify byte*) SCREEN+(byte) 8) ← *((byte*)(struct Point*)&(struct Vector) main::v3) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v3
    sta SCREEN+8
    // [22] *((const nomodify byte*) SCREEN+(byte) 9) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_POINT_Y
    sta SCREEN+9
    // [23] *((const nomodify byte*) SCREEN+(byte) $a) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$a
    // [24] *((const nomodify byte*) SCREEN+(byte) $b) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$b
    // [25] *((const nomodify byte*) SCREEN+(byte) $c) ← *((byte*)(struct Point*)&(struct Vector) main::v4) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v4
    sta SCREEN+$c
    // [26] *((const nomodify byte*) SCREEN+(byte) $d) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$d
    // [27] *((const nomodify byte*) SCREEN+(byte) $e) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$e
    // [28] *((const nomodify byte*) SCREEN+(byte) $f) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$f
    // [29] *((const nomodify byte*) SCREEN+(byte) $10) ← (byte) main::v5_p_x#0 -- _deref_pbuc1=vbuyy 
    sty SCREEN+$10
    // [30] *((const nomodify byte*) SCREEN+(byte) $11) ← (byte) main::v5_p_y#0 -- _deref_pbuc1=vbuxx 
    stx SCREEN+$11
    // [31] *((const nomodify byte*) SCREEN+(byte) $12) ← (const byte) main::v5_q_x -- _deref_pbuc1=vbuc2 
    lda #v5_q_x
    sta SCREEN+$12
    // [32] *((const nomodify byte*) SCREEN+(byte) $13) ← (const byte) main::v5_q_y -- _deref_pbuc1=vbuc2 
    lda #v5_q_y
    sta SCREEN+$13
    jmp __breturn
    // main::@return
  __breturn:
    // [33] return 
    rts
}
  // File Data
  __0: .byte 6, 7

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda.z v4 with TYA
Replacing instruction lda v4+OFFSET_STRUCT_POINT_Y with TXA
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction __bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const struct Point) $0 = { x: (byte) 6, y: (byte) 7 }
(label) @1
(label) @begin
(label) @end
(const byte) OFFSET_STRUCT_POINT_Y = (byte) 1
(const byte) OFFSET_STRUCT_VECTOR_Q = (byte) 2
(byte) Point::x
(byte) Point::y
(const nomodify byte*) SCREEN = (byte*) 1024
(const byte) SIZEOF_STRUCT_POINT = (byte) 2
(const byte) SIZEOF_STRUCT_VECTOR = (byte) 4
(struct Point) Vector::p
(struct Point) Vector::q
(void()) main()
(label) main::@return
(byte) main::idx
(struct Point) main::v1_p
(const byte) main::v1_p_x = (byte) 2
(const byte) main::v1_p_y = (byte) 3
(struct Point) main::v1_q
(const byte) main::v1_q_x = (byte) 4
(const byte) main::v1_q_y = (byte) 5
(struct Vector) main::v2 loadstore zp[4]:2
(struct Vector) main::v3 loadstore zp[4]:6
(struct Vector) main::v4 loadstore zp[4]:10
(struct Point) main::v5_p
(byte) main::v5_p_x
(byte) main::v5_p_x#0 reg byte y 1.2222222222222223
(byte) main::v5_p_y
(byte) main::v5_p_y#0 reg byte x 1.2222222222222223
(struct Point) main::v5_q
(const byte) main::v5_q_x = (byte) 8
(const byte) main::v5_q_y = (byte) 9

reg byte y [ main::v5_p_x#0 ]
reg byte x [ main::v5_p_y#0 ]
zp[4]:2 [ main::v2 ]
zp[4]:6 [ main::v3 ]
zp[4]:10 [ main::v4 ]


FINAL ASSEMBLER
Score: 218

  // File Comments
// Minimal struct with Unwound behavior - struct containing struct copying
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  .const OFFSET_STRUCT_POINT_Y = 1
  .const OFFSET_STRUCT_VECTOR_Q = 2
  .const SIZEOF_STRUCT_POINT = 2
  .const SIZEOF_STRUCT_VECTOR = 4
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .const v1_p_x = 2
    .const v1_p_y = 3
    .const v1_q_x = 4
    .const v1_q_y = 5
    .const v5_q_x = 8
    .const v5_q_y = 9
    .label v2 = 2
    .label v3 = 6
    .label v4 = $a
    // v2 = v1
    // [4] *((byte*)(struct Point*)&(struct Vector) main::v2) ← (const byte) main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta.z v2
    // [5] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta v2+OFFSET_STRUCT_POINT_Y
    // [6] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) ← (const byte) main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta v2+OFFSET_STRUCT_VECTOR_Q
    // [7] *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) ← (const byte) main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    // v3 = { v2.p, {6, 7} }
    // [8] *((struct Point*)&(struct Vector) main::v3) ← memcpy(*((struct Point*)&(struct Vector) main::v2), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda v2-1,y
    sta v3-1,y
    dey
    bne !-
    // [9] *((struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) ← memcpy(*(&(const struct Point) $0), struct Point, (const byte) SIZEOF_STRUCT_POINT) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_POINT
  !:
    lda __0-1,y
    sta v3+OFFSET_STRUCT_VECTOR_Q-1,y
    dey
    bne !-
    // v4 = v3
    // [10] *(&(struct Vector) main::v4) ← memcpy(*(&(struct Vector) main::v3), struct Vector, (const byte) SIZEOF_STRUCT_VECTOR) -- _deref_pssc1=_deref_pssc2_memcpy_vbuc3 
    ldy #SIZEOF_STRUCT_VECTOR
  !:
    lda v3-1,y
    sta v4-1,y
    dey
    bne !-
    // v5 = { {v4.p.x, v4.p.y }, {8, 9} }
    // [11] (byte) main::v5_p_x#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4) -- vbuyy=_deref_pbuc1 
    ldy.z v4
    // [12] (byte) main::v5_p_y#0 ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y) -- vbuxx=_deref_pbuc1 
    ldx v4+OFFSET_STRUCT_POINT_Y
    // SCREEN[idx++] = v1.p.x
    // [13] *((const nomodify byte*) SCREEN) ← (const byte) main::v1_p_x -- _deref_pbuc1=vbuc2 
    lda #v1_p_x
    sta SCREEN
    // SCREEN[idx++] = v1.p.y
    // [14] *((const nomodify byte*) SCREEN+(byte) 1) ← (const byte) main::v1_p_y -- _deref_pbuc1=vbuc2 
    lda #v1_p_y
    sta SCREEN+1
    // SCREEN[idx++] = v1.q.x
    // [15] *((const nomodify byte*) SCREEN+(byte) 2) ← (const byte) main::v1_q_x -- _deref_pbuc1=vbuc2 
    lda #v1_q_x
    sta SCREEN+2
    // SCREEN[idx++] = v1.q.y
    // [16] *((const nomodify byte*) SCREEN+(byte) 3) ← (const byte) main::v1_q_y -- _deref_pbuc1=vbuc2 
    lda #v1_q_y
    sta SCREEN+3
    // SCREEN[idx++] = v2.p.x
    // [17] *((const nomodify byte*) SCREEN+(byte) 4) ← *((byte*)(struct Point*)&(struct Vector) main::v2) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v2
    sta SCREEN+4
    // SCREEN[idx++] = v2.p.y
    // [18] *((const nomodify byte*) SCREEN+(byte) 5) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_POINT_Y
    sta SCREEN+5
    // SCREEN[idx++] = v2.q.x
    // [19] *((const nomodify byte*) SCREEN+(byte) 6) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+6
    // SCREEN[idx++] = v2.q.y
    // [20] *((const nomodify byte*) SCREEN+(byte) 7) ← *((byte*)(struct Point*)&(struct Vector) main::v2+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v2+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+7
    // SCREEN[idx++] = v3.p.x
    // [21] *((const nomodify byte*) SCREEN+(byte) 8) ← *((byte*)(struct Point*)&(struct Vector) main::v3) -- _deref_pbuc1=_deref_pbuc2 
    lda.z v3
    sta SCREEN+8
    // SCREEN[idx++] = v3.p.y
    // [22] *((const nomodify byte*) SCREEN+(byte) 9) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_POINT_Y
    sta SCREEN+9
    // SCREEN[idx++] = v3.q.x
    // [23] *((const nomodify byte*) SCREEN+(byte) $a) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$a
    // SCREEN[idx++] = v3.q.y
    // [24] *((const nomodify byte*) SCREEN+(byte) $b) ← *((byte*)(struct Point*)&(struct Vector) main::v3+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v3+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$b
    // SCREEN[idx++] = v4.p.x
    // [25] *((const nomodify byte*) SCREEN+(byte) $c) ← *((byte*)(struct Point*)&(struct Vector) main::v4) -- _deref_pbuc1=_deref_pbuc2 
    tya
    sta SCREEN+$c
    // SCREEN[idx++] = v4.p.y
    // [26] *((const nomodify byte*) SCREEN+(byte) $d) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    txa
    sta SCREEN+$d
    // SCREEN[idx++] = v4.q.x
    // [27] *((const nomodify byte*) SCREEN+(byte) $e) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q
    sta SCREEN+$e
    // SCREEN[idx++] = v4.q.y
    // [28] *((const nomodify byte*) SCREEN+(byte) $f) ← *((byte*)(struct Point*)&(struct Vector) main::v4+(const byte) OFFSET_STRUCT_VECTOR_Q+(const byte) OFFSET_STRUCT_POINT_Y) -- _deref_pbuc1=_deref_pbuc2 
    lda v4+OFFSET_STRUCT_VECTOR_Q+OFFSET_STRUCT_POINT_Y
    sta SCREEN+$f
    // SCREEN[idx++] = v5.p.x
    // [29] *((const nomodify byte*) SCREEN+(byte) $10) ← (byte) main::v5_p_x#0 -- _deref_pbuc1=vbuyy 
    sty SCREEN+$10
    // SCREEN[idx++] = v5.p.y
    // [30] *((const nomodify byte*) SCREEN+(byte) $11) ← (byte) main::v5_p_y#0 -- _deref_pbuc1=vbuxx 
    stx SCREEN+$11
    // SCREEN[idx++] = v5.q.x
    // [31] *((const nomodify byte*) SCREEN+(byte) $12) ← (const byte) main::v5_q_x -- _deref_pbuc1=vbuc2 
    lda #v5_q_x
    sta SCREEN+$12
    // SCREEN[idx++] = v5.q.y
    // [32] *((const nomodify byte*) SCREEN+(byte) $13) ← (const byte) main::v5_q_y -- _deref_pbuc1=vbuc2 
    lda #v5_q_y
    sta SCREEN+$13
    // main::@return
    // }
    // [33] return 
    rts
}
  // File Data
  __0: .byte 6, 7

