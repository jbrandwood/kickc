Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::a#0 = $80
  main::b#0 = 2
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@5
  main::b#2 = phi( main/main::b#0, main::@4/main::b#4, main::@5/main::b#1 )
  main::a#2 = phi( main/main::a#0, main::@4/main::a#1, main::@5/main::a#6 )
  main::$0 = main::a#2 != main::b#2
  if(main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::b#3 = phi( main::@1/main::b#2 )
  main::a#3 = phi( main::@1/main::a#2 )
  main::$1 = main::a#3 > main::b#3
  if(main::$1) goto main::@4
  to:main::@5
main::@3: scope:[main]  from main::@1
  main::a#4 = phi( main::@1/main::a#2 )
  *SCREEN = main::a#4
  to:main::@return
main::@4: scope:[main]  from main::@2
  main::b#4 = phi( main::@2/main::b#3 )
  main::a#5 = phi( main::@2/main::a#3 )
  main::$3 = main::a#5 - main::b#4
  main::a#1 = main::$3
  to:main::@1
main::@5: scope:[main]  from main::@2
  main::a#6 = phi( main::@2/main::a#3 )
  main::b#5 = phi( main::@2/main::b#3 )
  main::$2 = main::b#5 - main::a#6
  main::b#1 = main::$2
  to:main::@1
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte* SCREEN = (byte*)$400
void __start()
void main()
bool~ main::$0
bool~ main::$1
byte~ main::$2
byte~ main::$3
byte main::a
byte main::a#0
byte main::a#1
byte main::a#2
byte main::a#3
byte main::a#4
byte main::a#5
byte main::a#6
byte main::b
byte main::b#0
byte main::b#1
byte main::b#2
byte main::b#3
byte main::b#4
byte main::b#5

Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Alias main::a#2 = main::a#3 main::a#4 main::a#5 main::a#6 
Alias main::b#2 = main::b#3 main::b#4 main::b#5 
Alias main::a#1 = main::$3 
Alias main::b#1 = main::$2 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$0 [4] if(main::a#2!=main::b#2) goto main::@2
Simple Condition main::$1 [6] if(main::a#2>main::b#2) goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::a#0 = $80
Constant main::b#0 = 2
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::a#0
Inlining constant with var siblings main::b#0
Constant inlined main::a#0 = $80
Constant inlined main::b#0 = 2
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of main
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced (already) [7] main::a#8 = main::a#2
Coalesced [8] main::b#7 = main::b#1
Coalesced [10] main::a#7 = main::a#1
Coalesced (already) [11] main::b#6 = main::b#2
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4 main::@5
  [1] main::b#2 = phi( main/2, main::@4/main::b#2, main::@5/main::b#1 )
  [1] main::a#2 = phi( main/$80, main::@4/main::a#1, main::@5/main::a#2 )
  [2] if(main::a#2!=main::b#2) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] *SCREEN = main::a#2
  to:main::@return
main::@return: scope:[main]  from main::@3
  [4] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [5] if(main::a#2>main::b#2) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@2
  [6] main::b#1 = main::b#2 - main::a#2
  to:main::@1
main::@4: scope:[main]  from main::@2
  [7] main::a#1 = main::a#2 - main::b#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::a
byte main::a#1 22.0
byte main::a#2 19.75
byte main::b
byte main::b#1 22.0
byte main::b#2 19.25

Initial phi equivalence classes
[ main::a#2 main::a#1 ]
[ main::b#2 main::b#1 ]
Complete equivalence classes
[ main::a#2 main::a#1 ]
[ main::b#2 main::b#1 ]
Allocated zp[1]:2 [ main::a#2 main::a#1 ]
Allocated zp[1]:3 [ main::b#2 main::b#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] main::b#1 = main::b#2 - main::a#2 [ main::a#2 main::b#1 ] (  [ main::a#2 main::b#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::a#2 main::a#1 ]
Statement [7] main::a#1 = main::a#2 - main::b#2 [ main::b#2 main::a#1 ] (  [ main::b#2 main::a#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::b#2 main::b#1 ]
Statement [6] main::b#1 = main::b#2 - main::a#2 [ main::a#2 main::b#1 ] (  [ main::a#2 main::b#1 ] { }  ) always clobbers reg byte a 
Statement [7] main::a#1 = main::a#2 - main::b#2 [ main::b#2 main::a#1 ] (  [ main::b#2 main::a#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::a#2 main::a#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::b#2 main::b#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 41.75: zp[1]:2 [ main::a#2 main::a#1 ] 41.25: zp[1]:3 [ main::b#2 main::b#1 ] 
Uplift Scope [] 

Uplifting [main] best 556 combination zp[1]:2 [ main::a#2 main::a#1 ] reg byte x [ main::b#2 main::b#1 ] 
Uplifting [] best 556 combination 
Attempting to uplift remaining variables inzp[1]:2 [ main::a#2 main::a#1 ]
Uplifting [main] best 556 combination zp[1]:2 [ main::a#2 main::a#1 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates a problem where wrong alive ranges result in clobbering an alive variable
// The compiler does not realize that A is alive in the statement b=b-a - and thus can clobber it.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label a = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::b#2 = 2 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #2
    // [1] phi main::a#2 = $80 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #$80
    sta.z a
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::a#2!=main::b#2) goto main::@2 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z a
    bne __b2
    jmp __b3
    // main::@3
  __b3:
    // [3] *SCREEN = main::a#2 -- _deref_pbuc1=vbuz1 
    lda.z a
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@2
  __b2:
    // [5] if(main::a#2>main::b#2) goto main::@4 -- vbuz1_gt_vbuxx_then_la1 
    cpx.z a
    bcc __b4
    jmp __b5
    // main::@5
  __b5:
    // [6] main::b#1 = main::b#2 - main::a#2 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z a
    tax
    // [1] phi from main::@4 main::@5 to main::@1 [phi:main::@4/main::@5->main::@1]
  __b1_from___b4:
  __b1_from___b5:
    // [1] phi main::b#2 = main::b#2 [phi:main::@4/main::@5->main::@1#0] -- register_copy 
    // [1] phi main::a#2 = main::a#1 [phi:main::@4/main::@5->main::@1#1] -- register_copy 
    jmp __b1
    // main::@4
  __b4:
    // [7] main::a#1 = main::a#2 - main::b#2 -- vbuz1=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z a
    sta.z a
    jmp __b1_from___b4
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b4 with __b1_from___b5
Removing instruction __b1_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b1 in jmp __b1_from___b5
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from___b5 to __b3
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction __b3:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const byte* SCREEN = (byte*) 1024
void main()
byte main::a
byte main::a#1 a zp[1]:2 22.0
byte main::a#2 a zp[1]:2 19.75
byte main::b
byte main::b#1 reg byte x 22.0
byte main::b#2 reg byte x 19.25

zp[1]:2 [ main::a#2 main::a#1 ]
reg byte x [ main::b#2 main::b#1 ]


FINAL ASSEMBLER
Score: 463

  // File Comments
// Demonstrates a problem where wrong alive ranges result in clobbering an alive variable
// The compiler does not realize that A is alive in the statement b=b-a - and thus can clobber it.
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    .label a = 2
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::b#2 = 2 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #2
    // [1] phi main::a#2 = $80 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #$80
    sta.z a
    // main::@1
  __b1:
    // while (a!=b)
    // [2] if(main::a#2!=main::b#2) goto main::@2 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z a
    bne __b2
    // main::@3
    // *SCREEN = a
    // [3] *SCREEN = main::a#2 -- _deref_pbuc1=vbuz1 
    lda.z a
    sta SCREEN
    // main::@return
    // }
    // [4] return 
    rts
    // main::@2
  __b2:
    // if(a>b)
    // [5] if(main::a#2>main::b#2) goto main::@4 -- vbuz1_gt_vbuxx_then_la1 
    cpx.z a
    bcc __b4
    // main::@5
    // b = b-a
    // [6] main::b#1 = main::b#2 - main::a#2 -- vbuxx=vbuxx_minus_vbuz1 
    txa
    sec
    sbc.z a
    tax
    // [1] phi from main::@4 main::@5 to main::@1 [phi:main::@4/main::@5->main::@1]
    // [1] phi main::b#2 = main::b#2 [phi:main::@4/main::@5->main::@1#0] -- register_copy 
    // [1] phi main::a#2 = main::a#1 [phi:main::@4/main::@5->main::@1#1] -- register_copy 
    jmp __b1
    // main::@4
  __b4:
    // a = a-b
    // [7] main::a#1 = main::a#2 - main::b#2 -- vbuz1=vbuz1_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z a
    sta.z a
    jmp __b1
}
  // File Data

