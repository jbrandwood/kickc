Constantified RValue *((const struct SplineVector16*) SPLINE_16SEG + (byte~) spline_16seg::$37) ← (struct SplineVector16){ (signed word)(number~) spline_16seg::$29, (signed word)(number~) spline_16seg::$31 }
Constantified RValue (struct SplineVector32) spline_16seg::p ← (struct SplineVector32){ (signed dword~) spline_16seg::$32, (signed dword~) spline_16seg::$33 }
Constantified RValue (struct SplineVector32) spline_16seg::i ← (struct SplineVector32){ (signed dword~) spline_16seg::$34, (signed dword~) spline_16seg::$35 }
Constantified RValue *((const struct SplineVector16*) SPLINE_16SEG + (number~) spline_16seg::$38) ← (struct SplineVector16){ (signed word)(number~) spline_16seg::$25, (signed word)(number~) spline_16seg::$27 }
Constantified RValue *((const struct SplineVector16*) SPLINE_8SEG + (byte~) spline_8seg::$39) ← (struct SplineVector16){ (signed word)(number~) spline_8seg::$31, (signed word)(number~) spline_8seg::$33 }
Constantified RValue (struct SplineVector32) spline_8seg::p ← (struct SplineVector32){ (signed dword~) spline_8seg::$34, (signed dword~) spline_8seg::$35 }
Constantified RValue (struct SplineVector32) spline_8seg::i ← (struct SplineVector32){ (signed dword~) spline_8seg::$36, (signed dword~) spline_8seg::$37 }
Constantified RValue *((const struct SplineVector16*) SPLINE_8SEG + (number~) spline_8seg::$40) ← (struct SplineVector16){ (signed word)(number~) spline_8seg::$27, (signed word)(number~) spline_8seg::$29 }
Constantified RValue *((const struct SplineVector16*) SPLINE_8SEG + (byte~) spline_8segB::$31) ← (struct SplineVector16){ (signed word)(number~) spline_8segB::$23, (signed word)(number~) spline_8segB::$25 }
Constantified RValue (struct SplineVector16) spline_8segB::p ← (struct SplineVector16){ (signed word~) spline_8segB::$26, (signed word~) spline_8segB::$27 }
Constantified RValue (struct SplineVector16) spline_8segB::i ← (struct SplineVector16){ (signed word~) spline_8segB::$28, (signed word~) spline_8segB::$29 }
Constantified RValue *((const struct SplineVector16*) SPLINE_8SEG + (number~) spline_8segB::$32) ← (struct SplineVector16){ (signed word)(number~) spline_8segB::$19, (signed word)(number~) spline_8segB::$21 }
Constantified RValue (struct SplineVector16) show_letter::to ← (struct SplineVector16){ (signed word)(number~) show_letter::$0, (signed word)(number~) show_letter::$1 }
Constantified RValue (struct SplineVector16) show_letter::to ← (struct SplineVector16){ (signed word)(number~) show_letter::$3, (signed word)(number~) show_letter::$4 }
Constantified RValue (struct SplineVector16) show_letter::via ← (struct SplineVector16){ (signed word)(number~) show_letter::$5, (signed word)(number~) show_letter::$6 }
Constantified RValue (struct SplineVector16) show_letter::via ← (struct SplineVector16){ (signed word)(number~) show_letter::$8, (signed word)(number~) show_letter::$9 }
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Inlined call call mulf8s_prepare (signed byte) mulf8s::a 
Inlined call call vicSelectGfxBank (const nomodify byte*) BITMAP_SCREEN 
Inlined call (byte~) main::$4 ← call toD018 (const nomodify byte*) BITMAP_SCREEN (const nomodify byte*) BITMAP_GRAPHICS 
Inlined call call __init 
Eliminating unused variable with no statement (struct SplineVector16~) show_letter::$2
Eliminating unused variable with no statement (struct SplineVector16~) show_letter::$7
Unwinding list assignment { (signed word~) show_letter::$2_x, (signed word~) show_letter::$2_y } ← { (signed word) rotate::return_x, (signed word) rotate::return_y }
Unwinding list assignment { (signed word~) show_letter::$7_x, (signed word~) show_letter::$7_y } ← { (signed word) rotate::return_x, (signed word) rotate::return_y }
Unwinding list assignment { (signed word) rotate::return_x#0, (signed word) rotate::return_y#0 } ← { (signed word) rotate::return_x#3, (signed word) rotate::return_y#3 }
Unwinding list assignment { (signed word) rotate::return_x#1, (signed word) rotate::return_y#1 } ← { (signed word) rotate::return_x#3, (signed word) rotate::return_y#3 }

CONTROL FLOW GRAPH SSA

(void()) spline_8segB((signed word) spline_8segB::p0_x , (signed word) spline_8segB::p0_y , (signed word) spline_8segB::p1_x , (signed word) spline_8segB::p1_y , (signed word) spline_8segB::p2_x , (signed word) spline_8segB::p2_y)
spline_8segB: scope:[spline_8segB]  from show_letter::@3
  (signed word) spline_8segB::p0_y#1 ← phi( show_letter::@3/(signed word) spline_8segB::p0_y#0 )
  (signed word) spline_8segB::p2_y#1 ← phi( show_letter::@3/(signed word) spline_8segB::p2_y#0 )
  (signed word) spline_8segB::p1_y#1 ← phi( show_letter::@3/(signed word) spline_8segB::p1_y#0 )
  (signed word) spline_8segB::p0_x#1 ← phi( show_letter::@3/(signed word) spline_8segB::p0_x#0 )
  (signed word) spline_8segB::p2_x#1 ← phi( show_letter::@3/(signed word) spline_8segB::p2_x#0 )
  (signed word) spline_8segB::p1_x#1 ← phi( show_letter::@3/(signed word) spline_8segB::p1_x#0 )
  (number~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#1 * (number) 2
  (number~) spline_8segB::$1 ← (signed word) spline_8segB::p2_x#1 - (number~) spline_8segB::$0
  (number~) spline_8segB::$2 ← (number~) spline_8segB::$1 + (signed word) spline_8segB::p0_x#1
  (number~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#1 * (number) 2
  (number~) spline_8segB::$4 ← (signed word) spline_8segB::p2_y#1 - (number~) spline_8segB::$3
  (number~) spline_8segB::$5 ← (number~) spline_8segB::$4 + (signed word) spline_8segB::p0_y#1
  (signed word) spline_8segB::a_x#0 ← (number~) spline_8segB::$2
  (signed word) spline_8segB::a_y#0 ← (number~) spline_8segB::$5
  (signed word~) spline_8segB::$6 ← (signed word) spline_8segB::p1_x#1 - (signed word) spline_8segB::p0_x#1
  (number~) spline_8segB::$7 ← (signed word~) spline_8segB::$6 * (number) 2
  (signed word~) spline_8segB::$8 ← (signed word) spline_8segB::p1_y#1 - (signed word) spline_8segB::p0_y#1
  (number~) spline_8segB::$9 ← (signed word~) spline_8segB::$8 * (number) 2
  (signed word) spline_8segB::b_x#0 ← (number~) spline_8segB::$7
  (signed word) spline_8segB::b_y#0 ← (number~) spline_8segB::$9
  (number~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 * (number) 8
  (number~) spline_8segB::$11 ← (signed word) spline_8segB::a_x#0 + (number~) spline_8segB::$10
  (number~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 * (number) 8
  (number~) spline_8segB::$13 ← (signed word) spline_8segB::a_y#0 + (number~) spline_8segB::$12
  (signed word) spline_8segB::i_x#0 ← (number~) spline_8segB::$11
  (signed word) spline_8segB::i_y#0 ← (number~) spline_8segB::$13
  (number~) spline_8segB::$14 ← (signed word) spline_8segB::a_x#0 * (number) 2
  (number~) spline_8segB::$15 ← (signed word) spline_8segB::a_y#0 * (number) 2
  (signed word) spline_8segB::j_x#0 ← (number~) spline_8segB::$14
  (signed word) spline_8segB::j_y#0 ← (number~) spline_8segB::$15
  (number~) spline_8segB::$16 ← (signed word) spline_8segB::p0_x#1 * (number) $40
  (number~) spline_8segB::$17 ← (signed word) spline_8segB::p0_y#1 * (number) $40
  (signed word) spline_8segB::p_x#0 ← (number~) spline_8segB::$16
  (signed word) spline_8segB::p_y#0 ← (number~) spline_8segB::$17
  (byte) spline_8segB::n#0 ← (byte) 0
  to:spline_8segB::@1
spline_8segB::@1: scope:[spline_8segB]  from spline_8segB spline_8segB::@1
  (signed word) spline_8segB::j_y#1 ← phi( spline_8segB/(signed word) spline_8segB::j_y#0 spline_8segB::@1/(signed word) spline_8segB::j_y#1 )
  (signed word) spline_8segB::j_x#1 ← phi( spline_8segB/(signed word) spline_8segB::j_x#0 spline_8segB::@1/(signed word) spline_8segB::j_x#1 )
  (signed word) spline_8segB::i_y#2 ← phi( spline_8segB/(signed word) spline_8segB::i_y#0 spline_8segB::@1/(signed word) spline_8segB::i_y#1 )
  (signed word) spline_8segB::i_x#2 ← phi( spline_8segB/(signed word) spline_8segB::i_x#0 spline_8segB::@1/(signed word) spline_8segB::i_x#1 )
  (byte) spline_8segB::n#2 ← phi( spline_8segB/(byte) spline_8segB::n#0 spline_8segB::@1/(byte) spline_8segB::n#1 )
  (signed word) spline_8segB::p_y#2 ← phi( spline_8segB/(signed word) spline_8segB::p_y#0 spline_8segB::@1/(signed word) spline_8segB::p_y#1 )
  (signed word) spline_8segB::p_x#2 ← phi( spline_8segB/(signed word) spline_8segB::p_x#0 spline_8segB::@1/(signed word) spline_8segB::p_x#1 )
  (number~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (number) $20
  (number~) spline_8segB::$23 ← (number~) spline_8segB::$22 / (number) $40
  (number~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (number) $20
  (number~) spline_8segB::$25 ← (number~) spline_8segB::$24 / (number) $40
  (byte~) spline_8segB::$31 ← (byte) spline_8segB::n#2 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
  *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) spline_8segB::$31) ← (signed word)(number~) spline_8segB::$23
  *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) spline_8segB::$31) ← (signed word)(number~) spline_8segB::$25
  (signed word~) spline_8segB::$26 ← (signed word) spline_8segB::p_x#2 + (signed word) spline_8segB::i_x#2
  (signed word~) spline_8segB::$27 ← (signed word) spline_8segB::p_y#2 + (signed word) spline_8segB::i_y#2
  (signed word) spline_8segB::p_x#1 ← (signed word~) spline_8segB::$26
  (signed word) spline_8segB::p_y#1 ← (signed word~) spline_8segB::$27
  (signed word~) spline_8segB::$28 ← (signed word) spline_8segB::i_x#2 + (signed word) spline_8segB::j_x#1
  (signed word~) spline_8segB::$29 ← (signed word) spline_8segB::i_y#2 + (signed word) spline_8segB::j_y#1
  (signed word) spline_8segB::i_x#1 ← (signed word~) spline_8segB::$28
  (signed word) spline_8segB::i_y#1 ← (signed word~) spline_8segB::$29
  (byte) spline_8segB::n#1 ← (byte) spline_8segB::n#2 + rangenext(0,7)
  (bool~) spline_8segB::$30 ← (byte) spline_8segB::n#1 != rangelast(0,7)
  if((bool~) spline_8segB::$30) goto spline_8segB::@1
  to:spline_8segB::@2
spline_8segB::@2: scope:[spline_8segB]  from spline_8segB::@1
  (signed word) spline_8segB::p_y#3 ← phi( spline_8segB::@1/(signed word) spline_8segB::p_y#1 )
  (signed word) spline_8segB::p_x#3 ← phi( spline_8segB::@1/(signed word) spline_8segB::p_x#1 )
  (number~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#3 + (number) $20
  (number~) spline_8segB::$19 ← (number~) spline_8segB::$18 / (number) $40
  (number~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#3 + (number) $20
  (number~) spline_8segB::$21 ← (number~) spline_8segB::$20 / (number) $40
  (number~) spline_8segB::$32 ← (number) 8 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
  *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (number~) spline_8segB::$32) ← (signed word)(number~) spline_8segB::$19
  *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (number~) spline_8segB::$32) ← (signed word)(number~) spline_8segB::$21
  to:spline_8segB::@return
spline_8segB::@return: scope:[spline_8segB]  from spline_8segB::@2
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  (byte) memset::c#5 ← phi( bitmap_clear/(byte) memset::c#0 bitmap_clear::@1/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( bitmap_clear/(void*) memset::str#0 bitmap_clear::@1/(void*) memset::str#1 )
  (word) memset::num#2 ← phi( bitmap_clear/(word) memset::num#0 bitmap_clear::@1/(word) memset::num#1 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@3/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$4 ← (byte*)(void*) memset::str#3
  (byte*~) memset::$2 ← (byte*~) memset::$4 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$2
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@4/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@4/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@4/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@4/(byte*) memset::dst#1 )
  (bool~) memset::$3 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  (void*) memset::str#6 ← phi( memset::@3/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@3/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@3/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@3/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from main::@11
  (byte*) bitmap_init::screen#1 ← phi( main::@11/(byte*) bitmap_init::screen#0 )
  (byte*) bitmap_init::gfx#1 ← phi( main::@11/(byte*) bitmap_init::gfx#0 )
  (byte*) bitmap_gfx#0 ← (byte*) bitmap_init::gfx#1
  (byte*) bitmap_screen#0 ← (byte*) bitmap_init::screen#1
  (byte) bitmap_init::bits#0 ← (byte) $80
  (byte) bitmap_init::x#0 ← (byte) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  (byte*) bitmap_screen#29 ← phi( bitmap_init/(byte*) bitmap_screen#0 bitmap_init::@2/(byte*) bitmap_screen#26 )
  (byte*) bitmap_gfx#30 ← phi( bitmap_init/(byte*) bitmap_gfx#0 bitmap_init::@2/(byte*) bitmap_gfx#27 )
  (byte*) bitmap_init::gfx#4 ← phi( bitmap_init/(byte*) bitmap_init::gfx#1 bitmap_init::@2/(byte*) bitmap_init::gfx#3 )
  (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) bitmap_init::x#0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) bitmap_init::bits#0 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (number) 1
  (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (number) 0
  (bool~) bitmap_init::$1 ← ! (bool~) bitmap_init::$0
  if((bool~) bitmap_init::$1) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  (byte*) bitmap_screen#26 ← phi( bitmap_init::@1/(byte*) bitmap_screen#29 bitmap_init::@3/(byte*) bitmap_screen#30 )
  (byte*) bitmap_gfx#27 ← phi( bitmap_init::@1/(byte*) bitmap_gfx#30 bitmap_init::@3/(byte*) bitmap_gfx#31 )
  (byte*) bitmap_init::gfx#3 ← phi( bitmap_init::@1/(byte*) bitmap_init::gfx#4 bitmap_init::@3/(byte*) bitmap_init::gfx#5 )
  (byte) bitmap_init::bits#4 ← phi( bitmap_init::@1/(byte) bitmap_init::bits#1 bitmap_init::@3/(byte) bitmap_init::bits#2 )
  (byte) bitmap_init::x#3 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 bitmap_init::@3/(byte) bitmap_init::x#4 )
  (byte) bitmap_init::x#1 ← (byte) bitmap_init::x#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$2 ← (byte) bitmap_init::x#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$2) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  (byte*) bitmap_screen#30 ← phi( bitmap_init::@1/(byte*) bitmap_screen#29 )
  (byte*) bitmap_gfx#31 ← phi( bitmap_init::@1/(byte*) bitmap_gfx#30 )
  (byte*) bitmap_init::gfx#5 ← phi( bitmap_init::@1/(byte*) bitmap_init::gfx#4 )
  (byte) bitmap_init::x#4 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 )
  (byte) bitmap_init::bits#2 ← (number) $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_screen#23 ← phi( bitmap_init::@2/(byte*) bitmap_screen#26 )
  (byte*) bitmap_gfx#24 ← phi( bitmap_init::@2/(byte*) bitmap_gfx#27 )
  (byte*) bitmap_init::gfx#2 ← phi( bitmap_init::@2/(byte*) bitmap_init::gfx#3 )
  (byte*) bitmap_init::yoffs#0 ← (byte*) bitmap_init::gfx#2
  (byte) bitmap_init::y#0 ← (byte) 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte*) bitmap_screen#18 ← phi( bitmap_init::@4/(byte*) bitmap_screen#23 bitmap_init::@6/(byte*) bitmap_screen#13 )
  (byte*) bitmap_gfx#18 ← phi( bitmap_init::@4/(byte*) bitmap_gfx#24 bitmap_init::@6/(byte*) bitmap_gfx#13 )
  (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#0 bitmap_init::@6/(byte*) bitmap_init::yoffs#4 )
  (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#0 bitmap_init::@6/(byte) bitmap_init::y#1 )
  (number~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (number) 7
  (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  (number~) bitmap_init::$5 ← (number~) bitmap_init::$3 | (byte~) bitmap_init::$4
  *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (number~) bitmap_init::$5
  (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  (number~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (number) 7
  (bool~) bitmap_init::$8 ← (number~) bitmap_init::$7 == (number) 7
  (bool~) bitmap_init::$9 ← ! (bool~) bitmap_init::$8
  if((bool~) bitmap_init::$9) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  (byte*) bitmap_screen#13 ← phi( bitmap_init::@5/(byte*) bitmap_screen#18 bitmap_init::@7/(byte*) bitmap_screen#19 )
  (byte*) bitmap_gfx#13 ← phi( bitmap_init::@5/(byte*) bitmap_gfx#18 bitmap_init::@7/(byte*) bitmap_gfx#19 )
  (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  (byte) bitmap_init::y#3 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 bitmap_init::@7/(byte) bitmap_init::y#4 )
  (byte) bitmap_init::y#1 ← (byte) bitmap_init::y#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$11 ← (byte) bitmap_init::y#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$11) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  (byte*) bitmap_screen#19 ← phi( bitmap_init::@5/(byte*) bitmap_screen#18 )
  (byte*) bitmap_gfx#19 ← phi( bitmap_init::@5/(byte*) bitmap_gfx#18 )
  (byte) bitmap_init::y#4 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 )
  (byte*) bitmap_init::yoffs#3 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 )
  (byte*~) bitmap_init::$10 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
  (byte*) bitmap_init::yoffs#1 ← (byte*~) bitmap_init::$10
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  (byte*) bitmap_screen#7 ← phi( bitmap_init::@6/(byte*) bitmap_screen#13 )
  (byte*) bitmap_gfx#7 ← phi( bitmap_init::@6/(byte*) bitmap_gfx#13 )
  (byte*) bitmap_gfx#1 ← (byte*) bitmap_gfx#7
  (byte*) bitmap_screen#1 ← (byte*) bitmap_screen#7
  return 
  to:@return

(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@12 main::@2
  (byte*) bitmap_gfx#14 ← phi( main::@12/(byte*) bitmap_gfx#2 main::@2/(byte*) bitmap_gfx#20 )
  (byte*) bitmap_screen#8 ← phi( main::@12/(byte*) bitmap_screen#2 main::@2/(byte*) bitmap_screen#14 )
  (byte) bitmap_clear::bgcol#2 ← phi( main::@12/(byte) bitmap_clear::bgcol#0 main::@2/(byte) bitmap_clear::bgcol#1 )
  (byte) bitmap_clear::fgcol#2 ← phi( main::@12/(byte) bitmap_clear::fgcol#0 main::@2/(byte) bitmap_clear::fgcol#1 )
  (number~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#2 * (number) $10
  (number~) bitmap_clear::$1 ← (number~) bitmap_clear::$0 + (byte) bitmap_clear::bgcol#2
  (byte) bitmap_clear::col#0 ← (number~) bitmap_clear::$1
  (void*) memset::str#0 ← (void*)(byte*) bitmap_screen#8
  (byte) memset::c#0 ← (byte) bitmap_clear::col#0
  (word) memset::num#0 ← (word) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  (byte*) bitmap_gfx#8 ← phi( bitmap_clear/(byte*) bitmap_gfx#14 )
  (void*) memset::str#1 ← (void*)(byte*) bitmap_gfx#8
  (byte) memset::c#1 ← (number) 0
  (word) memset::num#1 ← (word) $1f40
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@2
  return 
  to:@return

(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line::@3 bitmap_line::@4 bitmap_line::@6 bitmap_line::@9
  (word) bitmap_plot::x#4 ← phi( bitmap_line::@3/(word) bitmap_plot::x#2 bitmap_line::@4/(word) bitmap_plot::x#0 bitmap_line::@6/(word) bitmap_plot::x#1 bitmap_line::@9/(word) bitmap_plot::x#3 )
  (byte) bitmap_plot::y#4 ← phi( bitmap_line::@3/(byte) bitmap_plot::y#2 bitmap_line::@4/(byte) bitmap_plot::y#0 bitmap_line::@6/(byte) bitmap_plot::y#1 bitmap_line::@9/(byte) bitmap_plot::y#3 )
  (byte*) bitmap_plot::plotter#0 ← (byte*){ *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4), *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) }
  (number~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (number) $fff8
  (byte*) bitmap_plot::plotter#1 ← (byte*) bitmap_plot::plotter#0 + (number~) bitmap_plot::$0
  (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4
  *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return

(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
bitmap_line: scope:[bitmap_line]  from bitmap_plot_spline_8seg::@1 show_letter::@6
  (word) bitmap_line::y2#5 ← phi( bitmap_plot_spline_8seg::@1/(word) bitmap_line::y2#1 show_letter::@6/(word) bitmap_line::y2#0 )
  (word) bitmap_line::x2#2 ← phi( bitmap_plot_spline_8seg::@1/(word) bitmap_line::x2#1 show_letter::@6/(word) bitmap_line::x2#0 )
  (word) bitmap_line::y1#2 ← phi( bitmap_plot_spline_8seg::@1/(word) bitmap_line::y1#1 show_letter::@6/(word) bitmap_line::y1#0 )
  (word) bitmap_line::x1#2 ← phi( bitmap_plot_spline_8seg::@1/(word) bitmap_line::x1#1 show_letter::@6/(word) bitmap_line::x1#0 )
  (word) bitmap_line::x#0 ← (word) bitmap_line::x1#2
  (word) bitmap_line::y#0 ← (word) bitmap_line::y1#2
  (word~) bitmap_line::$0 ← (word) bitmap_line::x2#2 - (word) bitmap_line::x1#2
  (word) abs_u16::w#0 ← (word~) bitmap_line::$0
  call abs_u16 
  (word) abs_u16::return#0 ← (word) abs_u16::return#4
  to:bitmap_line::@12
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line
  (word) bitmap_line::y#16 ← phi( bitmap_line/(word) bitmap_line::y#0 )
  (word) bitmap_line::x#16 ← phi( bitmap_line/(word) bitmap_line::x#0 )
  (word) bitmap_line::x1#5 ← phi( bitmap_line/(word) bitmap_line::x1#2 )
  (word) bitmap_line::x2#8 ← phi( bitmap_line/(word) bitmap_line::x2#2 )
  (word) bitmap_line::y1#3 ← phi( bitmap_line/(word) bitmap_line::y1#2 )
  (word) bitmap_line::y2#2 ← phi( bitmap_line/(word) bitmap_line::y2#5 )
  (word) abs_u16::return#5 ← phi( bitmap_line/(word) abs_u16::return#0 )
  (word~) bitmap_line::$1 ← (word) abs_u16::return#5
  (word) bitmap_line::dx#0 ← (word~) bitmap_line::$1
  (word~) bitmap_line::$2 ← (word) bitmap_line::y2#2 - (word) bitmap_line::y1#3
  (word) abs_u16::w#1 ← (word~) bitmap_line::$2
  call abs_u16 
  (word) abs_u16::return#1 ← (word) abs_u16::return#4
  to:bitmap_line::@13
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@12
  (word) bitmap_line::y1#6 ← phi( bitmap_line::@12/(word) bitmap_line::y1#3 )
  (word) bitmap_line::y2#9 ← phi( bitmap_line::@12/(word) bitmap_line::y2#2 )
  (word) bitmap_line::y#10 ← phi( bitmap_line::@12/(word) bitmap_line::y#16 )
  (word) bitmap_line::x#10 ← phi( bitmap_line::@12/(word) bitmap_line::x#16 )
  (word) bitmap_line::x1#4 ← phi( bitmap_line::@12/(word) bitmap_line::x1#5 )
  (word) bitmap_line::x2#5 ← phi( bitmap_line::@12/(word) bitmap_line::x2#8 )
  (word) bitmap_line::dx#1 ← phi( bitmap_line::@12/(word) bitmap_line::dx#0 )
  (word) abs_u16::return#6 ← phi( bitmap_line::@12/(word) abs_u16::return#1 )
  (word~) bitmap_line::$3 ← (word) abs_u16::return#6
  (word) bitmap_line::dy#0 ← (word~) bitmap_line::$3
  (bool~) bitmap_line::$4 ← (word) bitmap_line::dx#1 == (number) 0
  (bool~) bitmap_line::$5 ← (word) bitmap_line::dy#0 == (number) 0
  (bool~) bitmap_line::$6 ← (bool~) bitmap_line::$4 && (bool~) bitmap_line::$5
  (bool~) bitmap_line::$7 ← ! (bool~) bitmap_line::$6
  if((bool~) bitmap_line::$7) goto bitmap_line::@1
  to:bitmap_line::@4
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line::@13
  (word) bitmap_line::y#19 ← phi( bitmap_line::@13/(word) bitmap_line::y#10 )
  (word) bitmap_line::x#19 ← phi( bitmap_line::@13/(word) bitmap_line::x#10 )
  (word) bitmap_line::dy#9 ← phi( bitmap_line::@13/(word) bitmap_line::dy#0 )
  (word) bitmap_line::dx#10 ← phi( bitmap_line::@13/(word) bitmap_line::dx#1 )
  (word) bitmap_line::y1#5 ← phi( bitmap_line::@13/(word) bitmap_line::y1#6 )
  (word) bitmap_line::y2#6 ← phi( bitmap_line::@13/(word) bitmap_line::y2#9 )
  (word) bitmap_line::x1#3 ← phi( bitmap_line::@13/(word) bitmap_line::x1#4 )
  (word) bitmap_line::x2#3 ← phi( bitmap_line::@13/(word) bitmap_line::x2#5 )
  (word~) bitmap_line::$8 ← (word) bitmap_line::x2#3 - (word) bitmap_line::x1#3
  (word) sgn_u16::w#0 ← (word~) bitmap_line::$8
  call sgn_u16 
  (word) sgn_u16::return#0 ← (word) sgn_u16::return#4
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@1
  (word) bitmap_line::x2#12 ← phi( bitmap_line::@1/(word) bitmap_line::x2#3 )
  (word) bitmap_line::y#18 ← phi( bitmap_line::@1/(word) bitmap_line::y#19 )
  (word) bitmap_line::x#18 ← phi( bitmap_line::@1/(word) bitmap_line::x#19 )
  (word) bitmap_line::dy#6 ← phi( bitmap_line::@1/(word) bitmap_line::dy#9 )
  (word) bitmap_line::dx#7 ← phi( bitmap_line::@1/(word) bitmap_line::dx#10 )
  (word) bitmap_line::y1#4 ← phi( bitmap_line::@1/(word) bitmap_line::y1#5 )
  (word) bitmap_line::y2#3 ← phi( bitmap_line::@1/(word) bitmap_line::y2#6 )
  (word) sgn_u16::return#5 ← phi( bitmap_line::@1/(word) sgn_u16::return#0 )
  (word~) bitmap_line::$9 ← (word) sgn_u16::return#5
  (word) bitmap_line::sx#0 ← (word~) bitmap_line::$9
  (word~) bitmap_line::$10 ← (word) bitmap_line::y2#3 - (word) bitmap_line::y1#4
  (word) sgn_u16::w#1 ← (word~) bitmap_line::$10
  call sgn_u16 
  (word) sgn_u16::return#1 ← (word) sgn_u16::return#4
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@14
  (word) bitmap_line::y2#12 ← phi( bitmap_line::@14/(word) bitmap_line::y2#3 )
  (word) bitmap_line::x2#11 ← phi( bitmap_line::@14/(word) bitmap_line::x2#12 )
  (word) bitmap_line::sx#8 ← phi( bitmap_line::@14/(word) bitmap_line::sx#0 )
  (word) bitmap_line::y#17 ← phi( bitmap_line::@14/(word) bitmap_line::y#18 )
  (word) bitmap_line::x#17 ← phi( bitmap_line::@14/(word) bitmap_line::x#18 )
  (word) bitmap_line::dy#1 ← phi( bitmap_line::@14/(word) bitmap_line::dy#6 )
  (word) bitmap_line::dx#2 ← phi( bitmap_line::@14/(word) bitmap_line::dx#7 )
  (word) sgn_u16::return#6 ← phi( bitmap_line::@14/(word) sgn_u16::return#1 )
  (word~) bitmap_line::$11 ← (word) sgn_u16::return#6
  (word) bitmap_line::sy#0 ← (word~) bitmap_line::$11
  (bool~) bitmap_line::$12 ← (word) bitmap_line::dx#2 > (word) bitmap_line::dy#1
  if((bool~) bitmap_line::$12) goto bitmap_line::@2
  to:bitmap_line::@5
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@13
  (word) bitmap_line::y#3 ← phi( bitmap_line::@13/(word) bitmap_line::y#10 )
  (word) bitmap_line::x#3 ← phi( bitmap_line::@13/(word) bitmap_line::x#10 )
  (word) bitmap_plot::x#0 ← (word) bitmap_line::x#3
  (byte) bitmap_plot::y#0 ← (byte)(word) bitmap_line::y#3
  call bitmap_plot 
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@4
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@16 bitmap_line::@18
  return 
  to:@return
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line::@15
  (word) bitmap_line::sy#10 ← phi( bitmap_line::@15/(word) bitmap_line::sy#0 )
  (word) bitmap_line::x2#10 ← phi( bitmap_line::@15/(word) bitmap_line::x2#11 )
  (word) bitmap_line::dx#13 ← phi( bitmap_line::@15/(word) bitmap_line::dx#2 )
  (word) bitmap_line::sx#7 ← phi( bitmap_line::@15/(word) bitmap_line::sx#8 )
  (word) bitmap_line::y#14 ← phi( bitmap_line::@15/(word) bitmap_line::y#17 )
  (word) bitmap_line::x#14 ← phi( bitmap_line::@15/(word) bitmap_line::x#17 )
  (word) bitmap_line::dy#2 ← phi( bitmap_line::@15/(word) bitmap_line::dy#1 )
  (number~) bitmap_line::$20 ← (word) bitmap_line::dy#2 / (number) 2
  (word) bitmap_line::e1#0 ← (number~) bitmap_line::$20
  to:bitmap_line::@9
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@15
  (word) bitmap_line::sx#9 ← phi( bitmap_line::@15/(word) bitmap_line::sx#8 )
  (word) bitmap_line::y2#11 ← phi( bitmap_line::@15/(word) bitmap_line::y2#12 )
  (word) bitmap_line::dy#10 ← phi( bitmap_line::@15/(word) bitmap_line::dy#1 )
  (word) bitmap_line::sy#5 ← phi( bitmap_line::@15/(word) bitmap_line::sy#0 )
  (word) bitmap_line::y#11 ← phi( bitmap_line::@15/(word) bitmap_line::y#17 )
  (word) bitmap_line::x#11 ← phi( bitmap_line::@15/(word) bitmap_line::x#17 )
  (word) bitmap_line::dx#3 ← phi( bitmap_line::@15/(word) bitmap_line::dx#2 )
  (number~) bitmap_line::$15 ← (word) bitmap_line::dx#3 / (number) 2
  (word) bitmap_line::e#0 ← (number~) bitmap_line::$15
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5 bitmap_line::@7
  (word) bitmap_line::sx#5 ← phi( bitmap_line::@5/(word) bitmap_line::sx#9 bitmap_line::@7/(word) bitmap_line::sx#10 )
  (word) bitmap_line::y2#10 ← phi( bitmap_line::@5/(word) bitmap_line::y2#11 bitmap_line::@7/(word) bitmap_line::y2#4 )
  (word) bitmap_line::dy#7 ← phi( bitmap_line::@5/(word) bitmap_line::dy#10 bitmap_line::@7/(word) bitmap_line::dy#11 )
  (word) bitmap_line::dx#8 ← phi( bitmap_line::@5/(word) bitmap_line::dx#3 bitmap_line::@7/(word) bitmap_line::dx#11 )
  (word) bitmap_line::e#5 ← phi( bitmap_line::@5/(word) bitmap_line::e#0 bitmap_line::@7/(word) bitmap_line::e#6 )
  (word) bitmap_line::sy#3 ← phi( bitmap_line::@5/(word) bitmap_line::sy#5 bitmap_line::@7/(word) bitmap_line::sy#6 )
  (word) bitmap_line::y#4 ← phi( bitmap_line::@5/(word) bitmap_line::y#11 bitmap_line::@7/(word) bitmap_line::y#6 )
  (word) bitmap_line::x#4 ← phi( bitmap_line::@5/(word) bitmap_line::x#11 bitmap_line::@7/(word) bitmap_line::x#12 )
  (word) bitmap_plot::x#1 ← (word) bitmap_line::x#4
  (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4
  call bitmap_plot 
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@6
  (word) bitmap_line::sx#3 ← phi( bitmap_line::@6/(word) bitmap_line::sx#5 )
  (word) bitmap_line::x#13 ← phi( bitmap_line::@6/(word) bitmap_line::x#4 )
  (word) bitmap_line::y2#7 ← phi( bitmap_line::@6/(word) bitmap_line::y2#10 )
  (word) bitmap_line::dy#3 ← phi( bitmap_line::@6/(word) bitmap_line::dy#7 )
  (word) bitmap_line::dx#4 ← phi( bitmap_line::@6/(word) bitmap_line::dx#8 )
  (word) bitmap_line::e#3 ← phi( bitmap_line::@6/(word) bitmap_line::e#5 )
  (word) bitmap_line::sy#1 ← phi( bitmap_line::@6/(word) bitmap_line::sy#3 )
  (word) bitmap_line::y#5 ← phi( bitmap_line::@6/(word) bitmap_line::y#4 )
  (word) bitmap_line::y#1 ← (word) bitmap_line::y#5 + (word) bitmap_line::sy#1
  (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#4
  (bool~) bitmap_line::$17 ← (word) bitmap_line::dy#3 < (word) bitmap_line::e#1
  (bool~) bitmap_line::$18 ← ! (bool~) bitmap_line::$17
  if((bool~) bitmap_line::$18) goto bitmap_line::@7
  to:bitmap_line::@8
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@17 bitmap_line::@8
  (word) bitmap_line::sx#10 ← phi( bitmap_line::@17/(word) bitmap_line::sx#3 bitmap_line::@8/(word) bitmap_line::sx#1 )
  (word) bitmap_line::dy#11 ← phi( bitmap_line::@17/(word) bitmap_line::dy#3 bitmap_line::@8/(word) bitmap_line::dy#4 )
  (word) bitmap_line::dx#11 ← phi( bitmap_line::@17/(word) bitmap_line::dx#4 bitmap_line::@8/(word) bitmap_line::dx#14 )
  (word) bitmap_line::e#6 ← phi( bitmap_line::@17/(word) bitmap_line::e#1 bitmap_line::@8/(word) bitmap_line::e#2 )
  (word) bitmap_line::sy#6 ← phi( bitmap_line::@17/(word) bitmap_line::sy#1 bitmap_line::@8/(word) bitmap_line::sy#8 )
  (word) bitmap_line::x#12 ← phi( bitmap_line::@17/(word) bitmap_line::x#13 bitmap_line::@8/(word) bitmap_line::x#1 )
  (word) bitmap_line::y2#4 ← phi( bitmap_line::@17/(word) bitmap_line::y2#7 bitmap_line::@8/(word) bitmap_line::y2#8 )
  (word) bitmap_line::y#6 ← phi( bitmap_line::@17/(word) bitmap_line::y#1 bitmap_line::@8/(word) bitmap_line::y#12 )
  (bool~) bitmap_line::$19 ← (word) bitmap_line::y#6 != (word) bitmap_line::y2#4
  if((bool~) bitmap_line::$19) goto bitmap_line::@6
  to:bitmap_line::@3
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@17
  (word) bitmap_line::dx#14 ← phi( bitmap_line::@17/(word) bitmap_line::dx#4 )
  (word) bitmap_line::sy#8 ← phi( bitmap_line::@17/(word) bitmap_line::sy#1 )
  (word) bitmap_line::y2#8 ← phi( bitmap_line::@17/(word) bitmap_line::y2#7 )
  (word) bitmap_line::y#12 ← phi( bitmap_line::@17/(word) bitmap_line::y#1 )
  (word) bitmap_line::dy#4 ← phi( bitmap_line::@17/(word) bitmap_line::dy#3 )
  (word) bitmap_line::e#4 ← phi( bitmap_line::@17/(word) bitmap_line::e#1 )
  (word) bitmap_line::sx#1 ← phi( bitmap_line::@17/(word) bitmap_line::sx#3 )
  (word) bitmap_line::x#5 ← phi( bitmap_line::@17/(word) bitmap_line::x#13 )
  (word) bitmap_line::x#1 ← (word) bitmap_line::x#5 + (word) bitmap_line::sx#1
  (word) bitmap_line::e#2 ← (word) bitmap_line::e#4 - (word) bitmap_line::dy#4
  to:bitmap_line::@7
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@7
  (word) bitmap_line::y#7 ← phi( bitmap_line::@10/(word) bitmap_line::y#13 bitmap_line::@7/(word) bitmap_line::y#6 )
  (word) bitmap_line::x#6 ← phi( bitmap_line::@10/(word) bitmap_line::x#9 bitmap_line::@7/(word) bitmap_line::x#12 )
  (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6
  (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7
  call bitmap_plot 
  to:bitmap_line::@18
bitmap_line::@18: scope:[bitmap_line]  from bitmap_line::@3
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@2
  (word) bitmap_line::sy#7 ← phi( bitmap_line::@10/(word) bitmap_line::sy#9 bitmap_line::@2/(word) bitmap_line::sy#10 )
  (word) bitmap_line::x2#9 ← phi( bitmap_line::@10/(word) bitmap_line::x2#4 bitmap_line::@2/(word) bitmap_line::x2#10 )
  (word) bitmap_line::dx#9 ← phi( bitmap_line::@10/(word) bitmap_line::dx#12 bitmap_line::@2/(word) bitmap_line::dx#13 )
  (word) bitmap_line::dy#8 ← phi( bitmap_line::@10/(word) bitmap_line::dy#12 bitmap_line::@2/(word) bitmap_line::dy#2 )
  (word) bitmap_line::e1#5 ← phi( bitmap_line::@10/(word) bitmap_line::e1#6 bitmap_line::@2/(word) bitmap_line::e1#0 )
  (word) bitmap_line::sx#4 ← phi( bitmap_line::@10/(word) bitmap_line::sx#6 bitmap_line::@2/(word) bitmap_line::sx#7 )
  (word) bitmap_line::y#8 ← phi( bitmap_line::@10/(word) bitmap_line::y#13 bitmap_line::@2/(word) bitmap_line::y#14 )
  (word) bitmap_line::x#7 ← phi( bitmap_line::@10/(word) bitmap_line::x#9 bitmap_line::@2/(word) bitmap_line::x#14 )
  (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7
  (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#8
  call bitmap_plot 
  to:bitmap_line::@19
bitmap_line::@19: scope:[bitmap_line]  from bitmap_line::@9
  (word) bitmap_line::sy#4 ← phi( bitmap_line::@9/(word) bitmap_line::sy#7 )
  (word) bitmap_line::y#15 ← phi( bitmap_line::@9/(word) bitmap_line::y#8 )
  (word) bitmap_line::x2#7 ← phi( bitmap_line::@9/(word) bitmap_line::x2#9 )
  (word) bitmap_line::dx#5 ← phi( bitmap_line::@9/(word) bitmap_line::dx#9 )
  (word) bitmap_line::dy#5 ← phi( bitmap_line::@9/(word) bitmap_line::dy#8 )
  (word) bitmap_line::e1#3 ← phi( bitmap_line::@9/(word) bitmap_line::e1#5 )
  (word) bitmap_line::sx#2 ← phi( bitmap_line::@9/(word) bitmap_line::sx#4 )
  (word) bitmap_line::x#8 ← phi( bitmap_line::@9/(word) bitmap_line::x#7 )
  (word) bitmap_line::x#2 ← (word) bitmap_line::x#8 + (word) bitmap_line::sx#2
  (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#5
  (bool~) bitmap_line::$22 ← (word) bitmap_line::dx#5 < (word) bitmap_line::e1#1
  (bool~) bitmap_line::$23 ← ! (bool~) bitmap_line::$22
  if((bool~) bitmap_line::$23) goto bitmap_line::@10
  to:bitmap_line::@11
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@11 bitmap_line::@19
  (word) bitmap_line::sy#9 ← phi( bitmap_line::@11/(word) bitmap_line::sy#2 bitmap_line::@19/(word) bitmap_line::sy#4 )
  (word) bitmap_line::dx#12 ← phi( bitmap_line::@11/(word) bitmap_line::dx#6 bitmap_line::@19/(word) bitmap_line::dx#5 )
  (word) bitmap_line::dy#12 ← phi( bitmap_line::@11/(word) bitmap_line::dy#13 bitmap_line::@19/(word) bitmap_line::dy#5 )
  (word) bitmap_line::e1#6 ← phi( bitmap_line::@11/(word) bitmap_line::e1#2 bitmap_line::@19/(word) bitmap_line::e1#1 )
  (word) bitmap_line::sx#6 ← phi( bitmap_line::@11/(word) bitmap_line::sx#11 bitmap_line::@19/(word) bitmap_line::sx#2 )
  (word) bitmap_line::y#13 ← phi( bitmap_line::@11/(word) bitmap_line::y#2 bitmap_line::@19/(word) bitmap_line::y#15 )
  (word) bitmap_line::x2#4 ← phi( bitmap_line::@11/(word) bitmap_line::x2#6 bitmap_line::@19/(word) bitmap_line::x2#7 )
  (word) bitmap_line::x#9 ← phi( bitmap_line::@11/(word) bitmap_line::x#15 bitmap_line::@19/(word) bitmap_line::x#2 )
  (bool~) bitmap_line::$24 ← (word) bitmap_line::x#9 != (word) bitmap_line::x2#4
  if((bool~) bitmap_line::$24) goto bitmap_line::@9
  to:bitmap_line::@3
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@19
  (word) bitmap_line::dy#13 ← phi( bitmap_line::@19/(word) bitmap_line::dy#5 )
  (word) bitmap_line::sx#11 ← phi( bitmap_line::@19/(word) bitmap_line::sx#2 )
  (word) bitmap_line::x2#6 ← phi( bitmap_line::@19/(word) bitmap_line::x2#7 )
  (word) bitmap_line::x#15 ← phi( bitmap_line::@19/(word) bitmap_line::x#2 )
  (word) bitmap_line::dx#6 ← phi( bitmap_line::@19/(word) bitmap_line::dx#5 )
  (word) bitmap_line::e1#4 ← phi( bitmap_line::@19/(word) bitmap_line::e1#1 )
  (word) bitmap_line::sy#2 ← phi( bitmap_line::@19/(word) bitmap_line::sy#4 )
  (word) bitmap_line::y#9 ← phi( bitmap_line::@19/(word) bitmap_line::y#15 )
  (word) bitmap_line::y#2 ← (word) bitmap_line::y#9 + (word) bitmap_line::sy#2
  (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#4 - (word) bitmap_line::dx#6
  to:bitmap_line::@10

(word()) abs_u16((word) abs_u16::w)
abs_u16: scope:[abs_u16]  from bitmap_line bitmap_line::@12
  (word) abs_u16::w#2 ← phi( bitmap_line/(word) abs_u16::w#0 bitmap_line::@12/(word) abs_u16::w#1 )
  (byte~) abs_u16::$0 ← > (word) abs_u16::w#2
  (number~) abs_u16::$1 ← (byte~) abs_u16::$0 & (number) $80
  (bool~) abs_u16::$3 ← (number) 0 != (number~) abs_u16::$1
  if((bool~) abs_u16::$3) goto abs_u16::@1
  to:abs_u16::@2
abs_u16::@1: scope:[abs_u16]  from abs_u16
  (word) abs_u16::w#3 ← phi( abs_u16/(word) abs_u16::w#2 )
  (word~) abs_u16::$2 ← - (word) abs_u16::w#3
  (word) abs_u16::return#2 ← (word~) abs_u16::$2
  to:abs_u16::@return
abs_u16::@2: scope:[abs_u16]  from abs_u16
  (word) abs_u16::w#4 ← phi( abs_u16/(word) abs_u16::w#2 )
  (word) abs_u16::return#3 ← (word) abs_u16::w#4
  to:abs_u16::@return
abs_u16::@return: scope:[abs_u16]  from abs_u16::@1 abs_u16::@2
  (word) abs_u16::return#7 ← phi( abs_u16::@1/(word) abs_u16::return#2 abs_u16::@2/(word) abs_u16::return#3 )
  (word) abs_u16::return#4 ← (word) abs_u16::return#7
  return 
  to:@return

(word()) sgn_u16((word) sgn_u16::w)
sgn_u16: scope:[sgn_u16]  from bitmap_line::@1 bitmap_line::@14
  (word) sgn_u16::w#2 ← phi( bitmap_line::@1/(word) sgn_u16::w#0 bitmap_line::@14/(word) sgn_u16::w#1 )
  (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2
  (number~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (number) $80
  (bool~) sgn_u16::$2 ← (number) 0 != (number~) sgn_u16::$1
  if((bool~) sgn_u16::$2) goto sgn_u16::@1
  to:sgn_u16::@2
sgn_u16::@1: scope:[sgn_u16]  from sgn_u16
  (word) sgn_u16::return#2 ← (number) -1
  to:sgn_u16::@return
sgn_u16::@2: scope:[sgn_u16]  from sgn_u16
  (word) sgn_u16::return#3 ← (number) 1
  to:sgn_u16::@return
sgn_u16::@return: scope:[sgn_u16]  from sgn_u16::@1 sgn_u16::@2
  (word) sgn_u16::return#7 ← phi( sgn_u16::@1/(word) sgn_u16::return#2 sgn_u16::@2/(word) sgn_u16::return#3 )
  (word) sgn_u16::return#4 ← (word) sgn_u16::return#7
  return 
  to:@return

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from main
  (word) mulf_init::sqr#0 ← (word) 0
  (byte) mulf_init::x_2#0 ← (byte) 0
  (byte) mulf_init::c#0 ← (byte) 0
  (byte*) mulf_init::sqr1_hi#0 ← (const byte*) mulf_sqr1_hi+(number) 1
  (byte*) mulf_init::sqr1_lo#0 ← (const byte*) mulf_sqr1_lo+(number) 1
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@4
  (byte) mulf_init::x_2#5 ← phi( mulf_init/(byte) mulf_init::x_2#0 mulf_init::@4/(byte) mulf_init::x_2#2 )
  (byte*) mulf_init::sqr1_hi#5 ← phi( mulf_init/(byte*) mulf_init::sqr1_hi#0 mulf_init::@4/(byte*) mulf_init::sqr1_hi#1 )
  (word) mulf_init::sqr#6 ← phi( mulf_init/(word) mulf_init::sqr#0 mulf_init::@4/(word) mulf_init::sqr#1 )
  (byte) mulf_init::c#3 ← phi( mulf_init/(byte) mulf_init::c#0 mulf_init::@4/(byte) mulf_init::c#4 )
  (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(byte*) mulf_init::sqr1_lo#0 mulf_init::@4/(byte*) mulf_init::sqr1_lo#1 )
  (bool~) mulf_init::$0 ← (byte*) mulf_init::sqr1_lo#2 != (const byte*) mulf_sqr1_lo+(number) $200
  if((bool~) mulf_init::$0) goto mulf_init::@2
  to:mulf_init::@3
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  (byte) mulf_init::x_2#4 ← phi( mulf_init::@1/(byte) mulf_init::x_2#5 )
  (byte*) mulf_init::sqr1_hi#3 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_hi#5 )
  (byte*) mulf_init::sqr1_lo#4 ← phi( mulf_init::@1/(byte*) mulf_init::sqr1_lo#2 )
  (word) mulf_init::sqr#5 ← phi( mulf_init::@1/(word) mulf_init::sqr#6 )
  (byte) mulf_init::c#2 ← phi( mulf_init::@1/(byte) mulf_init::c#3 )
  (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  (number~) mulf_init::$1 ← (byte) mulf_init::c#1 & (number) 1
  (bool~) mulf_init::$2 ← (number~) mulf_init::$1 == (number) 0
  (bool~) mulf_init::$3 ← ! (bool~) mulf_init::$2
  if((bool~) mulf_init::$3) goto mulf_init::@4
  to:mulf_init::@5
mulf_init::@3: scope:[mulf_init]  from mulf_init::@1
  (byte) mulf_init::x_255#0 ← (byte)(number) -1
  (byte) mulf_init::dir#0 ← (byte) $ff
  (byte*) mulf_init::sqr2_hi#0 ← (const byte*) mulf_sqr2_hi
  (byte*) mulf_init::sqr2_lo#0 ← (const byte*) mulf_sqr2_lo
  to:mulf_init::@6
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2 mulf_init::@5
  (byte) mulf_init::c#4 ← phi( mulf_init::@2/(byte) mulf_init::c#1 mulf_init::@5/(byte) mulf_init::c#5 )
  (byte) mulf_init::x_2#2 ← phi( mulf_init::@2/(byte) mulf_init::x_2#4 mulf_init::@5/(byte) mulf_init::x_2#1 )
  (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init::@2/(byte*) mulf_init::sqr1_hi#3 mulf_init::@5/(byte*) mulf_init::sqr1_hi#4 )
  (byte*) mulf_init::sqr1_lo#3 ← phi( mulf_init::@2/(byte*) mulf_init::sqr1_lo#4 mulf_init::@5/(byte*) mulf_init::sqr1_lo#5 )
  (word) mulf_init::sqr#3 ← phi( mulf_init::@2/(word) mulf_init::sqr#5 mulf_init::@5/(word) mulf_init::sqr#2 )
  (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_lo#3) ← (byte~) mulf_init::$4
  (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3
  *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5
  (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  (word~) mulf_init::$6 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  (word) mulf_init::sqr#1 ← (word~) mulf_init::$6
  (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#3
  to:mulf_init::@1
mulf_init::@5: scope:[mulf_init]  from mulf_init::@2
  (byte) mulf_init::c#5 ← phi( mulf_init::@2/(byte) mulf_init::c#1 )
  (byte*) mulf_init::sqr1_hi#4 ← phi( mulf_init::@2/(byte*) mulf_init::sqr1_hi#3 )
  (byte*) mulf_init::sqr1_lo#5 ← phi( mulf_init::@2/(byte*) mulf_init::sqr1_lo#4 )
  (word) mulf_init::sqr#4 ← phi( mulf_init::@2/(word) mulf_init::sqr#5 )
  (byte) mulf_init::x_2#3 ← phi( mulf_init::@2/(byte) mulf_init::x_2#4 )
  (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@4
mulf_init::@6: scope:[mulf_init]  from mulf_init::@3 mulf_init::@9
  (byte) mulf_init::dir#3 ← phi( mulf_init::@3/(byte) mulf_init::dir#0 mulf_init::@9/(byte) mulf_init::dir#4 )
  (byte*) mulf_init::sqr2_hi#3 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_hi#0 mulf_init::@9/(byte*) mulf_init::sqr2_hi#4 )
  (byte) mulf_init::x_255#3 ← phi( mulf_init::@3/(byte) mulf_init::x_255#0 mulf_init::@9/(byte) mulf_init::x_255#4 )
  (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@3/(byte*) mulf_init::sqr2_lo#0 mulf_init::@9/(byte*) mulf_init::sqr2_lo#1 )
  (bool~) mulf_init::$7 ← (byte*) mulf_init::sqr2_lo#2 != (const byte*) mulf_sqr2_lo+(number) $1ff
  if((bool~) mulf_init::$7) goto mulf_init::@7
  to:mulf_init::@8
mulf_init::@7: scope:[mulf_init]  from mulf_init::@6
  (byte) mulf_init::dir#2 ← phi( mulf_init::@6/(byte) mulf_init::dir#3 )
  (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@6/(byte*) mulf_init::sqr2_hi#3 )
  (byte*) mulf_init::sqr2_lo#3 ← phi( mulf_init::@6/(byte*) mulf_init::sqr2_lo#2 )
  (byte) mulf_init::x_255#2 ← phi( mulf_init::@6/(byte) mulf_init::x_255#3 )
  *((byte*) mulf_init::sqr2_lo#3) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2)
  *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2)
  (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  (byte~) mulf_init::$8 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  (byte) mulf_init::x_255#1 ← (byte~) mulf_init::$8
  (bool~) mulf_init::$9 ← (byte) mulf_init::x_255#1 == (number) 0
  (bool~) mulf_init::$10 ← ! (bool~) mulf_init::$9
  if((bool~) mulf_init::$10) goto mulf_init::@9
  to:mulf_init::@10
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6
  *((const byte*) mulf_sqr2_lo+(number) $1ff) ← *((const byte*) mulf_sqr1_lo+(number) $100)
  *((const byte*) mulf_sqr2_hi+(number) $1ff) ← *((const byte*) mulf_sqr1_hi+(number) $100)
  to:mulf_init::@return
mulf_init::@9: scope:[mulf_init]  from mulf_init::@10 mulf_init::@7
  (byte) mulf_init::dir#4 ← phi( mulf_init::@10/(byte) mulf_init::dir#1 mulf_init::@7/(byte) mulf_init::dir#2 )
  (byte*) mulf_init::sqr2_hi#4 ← phi( mulf_init::@10/(byte*) mulf_init::sqr2_hi#5 mulf_init::@7/(byte*) mulf_init::sqr2_hi#1 )
  (byte) mulf_init::x_255#4 ← phi( mulf_init::@10/(byte) mulf_init::x_255#5 mulf_init::@7/(byte) mulf_init::x_255#1 )
  (byte*) mulf_init::sqr2_lo#4 ← phi( mulf_init::@10/(byte*) mulf_init::sqr2_lo#5 mulf_init::@7/(byte*) mulf_init::sqr2_lo#3 )
  (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#4
  to:mulf_init::@6
mulf_init::@10: scope:[mulf_init]  from mulf_init::@7
  (byte*) mulf_init::sqr2_hi#5 ← phi( mulf_init::@7/(byte*) mulf_init::sqr2_hi#1 )
  (byte) mulf_init::x_255#5 ← phi( mulf_init::@7/(byte) mulf_init::x_255#1 )
  (byte*) mulf_init::sqr2_lo#5 ← phi( mulf_init::@7/(byte*) mulf_init::sqr2_lo#3 )
  (byte) mulf_init::dir#1 ← (number) 1
  to:mulf_init::@9
mulf_init::@return: scope:[mulf_init]  from mulf_init::@8
  return 
  to:@return

(dword()) mulf16u((word) mulf16u::a , (word) mulf16u::b)
mulf16u: scope:[mulf16u]  from mulf16s
  (word) mulf16u::b#1 ← phi( mulf16s/(word) mulf16u::b#0 )
  (word) mulf16u::a#1 ← phi( mulf16s/(word) mulf16u::a#0 )
  *((const nomodify word*) mulf16u::memA) ← (word) mulf16u::a#1
  *((const nomodify word*) mulf16u::memB) ← (word) mulf16u::b#1
  asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
  (dword) mulf16u::return#0 ← *((const nomodify dword*) mulf16u::memR)
  to:mulf16u::@return
mulf16u::@return: scope:[mulf16u]  from mulf16u
  (dword) mulf16u::return#3 ← phi( mulf16u/(dword) mulf16u::return#0 )
  (dword) mulf16u::return#1 ← (dword) mulf16u::return#3
  return 
  to:@return

(signed dword()) mulf16s((signed word) mulf16s::a , (signed word) mulf16s::b)
mulf16s: scope:[mulf16s]  from rotate rotate::@1 rotate::@2 rotate::@3
  (signed word) mulf16s::b#4 ← phi( rotate/(signed word) mulf16s::b#0 rotate::@1/(signed word) mulf16s::b#1 rotate::@2/(signed word) mulf16s::b#2 rotate::@3/(signed word) mulf16s::b#3 )
  (signed word) mulf16s::a#4 ← phi( rotate/(signed word) mulf16s::a#0 rotate::@1/(signed word) mulf16s::a#1 rotate::@2/(signed word) mulf16s::a#2 rotate::@3/(signed word) mulf16s::a#3 )
  (word) mulf16u::a#0 ← (word)(signed word) mulf16s::a#4
  (word) mulf16u::b#0 ← (word)(signed word) mulf16s::b#4
  call mulf16u 
  (dword) mulf16u::return#2 ← (dword) mulf16u::return#1
  to:mulf16s::@5
mulf16s::@5: scope:[mulf16s]  from mulf16s
  (signed word) mulf16s::b#7 ← phi( mulf16s/(signed word) mulf16s::b#4 )
  (signed word) mulf16s::a#5 ← phi( mulf16s/(signed word) mulf16s::a#4 )
  (dword) mulf16u::return#4 ← phi( mulf16s/(dword) mulf16u::return#2 )
  (dword~) mulf16s::$0 ← (dword) mulf16u::return#4
  (dword) mulf16s::m#0 ← (dword~) mulf16s::$0
  (bool~) mulf16s::$1 ← (signed word) mulf16s::a#5 < (number) 0
  (bool~) mulf16s::$2 ← ! (bool~) mulf16s::$1
  if((bool~) mulf16s::$2) goto mulf16s::@1
  to:mulf16s::@3
mulf16s::@1: scope:[mulf16s]  from mulf16s::@3 mulf16s::@5
  (signed word) mulf16s::a#7 ← phi( mulf16s::@3/(signed word) mulf16s::a#8 mulf16s::@5/(signed word) mulf16s::a#5 )
  (dword) mulf16s::m#6 ← phi( mulf16s::@3/(dword) mulf16s::m#1 mulf16s::@5/(dword) mulf16s::m#0 )
  (signed word) mulf16s::b#5 ← phi( mulf16s::@3/(signed word) mulf16s::b#6 mulf16s::@5/(signed word) mulf16s::b#7 )
  (bool~) mulf16s::$3 ← (signed word) mulf16s::b#5 < (number) 0
  (bool~) mulf16s::$4 ← ! (bool~) mulf16s::$3
  if((bool~) mulf16s::$4) goto mulf16s::@2
  to:mulf16s::@4
mulf16s::@3: scope:[mulf16s]  from mulf16s::@5
  (signed word) mulf16s::a#8 ← phi( mulf16s::@5/(signed word) mulf16s::a#5 )
  (signed word) mulf16s::b#6 ← phi( mulf16s::@5/(signed word) mulf16s::b#7 )
  (dword) mulf16s::m#3 ← phi( mulf16s::@5/(dword) mulf16s::m#0 )
  (word~) mulf16s::$6 ← > (dword) mulf16s::m#3
  (word~) mulf16s::$13 ← (word)(signed word) mulf16s::b#6
  (word~) mulf16s::$7 ← (word~) mulf16s::$6 - (word~) mulf16s::$13
  (word~) mulf16s::$11 ← (word~) mulf16s::$7
  (dword) mulf16s::m#1 ← (dword) mulf16s::m#3 hi= (word~) mulf16s::$11
  to:mulf16s::@1
mulf16s::@2: scope:[mulf16s]  from mulf16s::@1 mulf16s::@4
  (dword) mulf16s::m#4 ← phi( mulf16s::@1/(dword) mulf16s::m#6 mulf16s::@4/(dword) mulf16s::m#2 )
  (signed dword) mulf16s::return#0 ← (signed dword)(dword) mulf16s::m#4
  to:mulf16s::@return
mulf16s::@4: scope:[mulf16s]  from mulf16s::@1
  (signed word) mulf16s::a#6 ← phi( mulf16s::@1/(signed word) mulf16s::a#7 )
  (dword) mulf16s::m#5 ← phi( mulf16s::@1/(dword) mulf16s::m#6 )
  (word~) mulf16s::$9 ← > (dword) mulf16s::m#5
  (word~) mulf16s::$14 ← (word)(signed word) mulf16s::a#6
  (word~) mulf16s::$10 ← (word~) mulf16s::$9 - (word~) mulf16s::$14
  (word~) mulf16s::$12 ← (word~) mulf16s::$10
  (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$12
  to:mulf16s::@2
mulf16s::@return: scope:[mulf16s]  from mulf16s::@2
  (signed dword) mulf16s::return#6 ← phi( mulf16s::@2/(signed dword) mulf16s::return#0 )
  (signed dword) mulf16s::return#1 ← (signed dword) mulf16s::return#6
  return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  (byte*) bitmap_screen#20 ← phi( __start::@1/(byte*) bitmap_screen#17 )
  (byte*) bitmap_gfx#21 ← phi( __start::@1/(byte*) bitmap_gfx#17 )
  call mulf_init 
  to:main::@11
main::@11: scope:[main]  from main
  (byte*) bitmap_screen#15 ← phi( main/(byte*) bitmap_screen#20 )
  (byte*) bitmap_gfx#15 ← phi( main/(byte*) bitmap_gfx#21 )
  (byte*) bitmap_init::gfx#0 ← (const nomodify byte*) BITMAP_GRAPHICS
  (byte*) bitmap_init::screen#0 ← (const nomodify byte*) BITMAP_SCREEN
  call bitmap_init 
  to:main::@12
main::@12: scope:[main]  from main::@11
  (byte*) bitmap_screen#9 ← phi( main::@11/(byte*) bitmap_screen#1 )
  (byte*) bitmap_gfx#9 ← phi( main::@11/(byte*) bitmap_gfx#1 )
  (byte*) bitmap_gfx#2 ← (byte*) bitmap_gfx#9
  (byte*) bitmap_screen#2 ← (byte*) bitmap_screen#9
  (byte) bitmap_clear::bgcol#0 ← (const nomodify byte) BLACK
  (byte) bitmap_clear::fgcol#0 ← (const nomodify byte) WHITE
  call bitmap_clear 
  to:main::@13
main::@13: scope:[main]  from main::@12
  (byte*) bitmap_gfx#42 ← phi( main::@12/(byte*) bitmap_gfx#2 )
  (byte*) bitmap_screen#41 ← phi( main::@12/(byte*) bitmap_screen#2 )
  (byte*) main::vicSelectGfxBank1_gfx#0 ← (const nomodify byte*) BITMAP_SCREEN
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main::@13
  (byte*) bitmap_gfx#41 ← phi( main::@13/(byte*) bitmap_gfx#42 )
  (byte*) bitmap_screen#40 ← phi( main::@13/(byte*) bitmap_screen#41 )
  (byte*) main::vicSelectGfxBank1_gfx#1 ← phi( main::@13/(byte*) main::vicSelectGfxBank1_gfx#0 )
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) 3
  (byte*) main::vicSelectGfxBank1_toDd001_gfx#0 ← (byte*) main::vicSelectGfxBank1_gfx#1
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  (byte*) bitmap_gfx#40 ← phi( main::vicSelectGfxBank1/(byte*) bitmap_gfx#41 )
  (byte*) bitmap_screen#39 ← phi( main::vicSelectGfxBank1/(byte*) bitmap_screen#40 )
  (byte*) main::vicSelectGfxBank1_toDd001_gfx#1 ← phi( main::vicSelectGfxBank1/(byte*) main::vicSelectGfxBank1_toDd001_gfx#0 )
  (byte~) main::vicSelectGfxBank1_toDd001_$0 ← > (word)(byte*) main::vicSelectGfxBank1_toDd001_gfx#1
  (number~) main::vicSelectGfxBank1_toDd001_$1 ← (byte~) main::vicSelectGfxBank1_toDd001_$0 / (number) $40
  (number~) main::vicSelectGfxBank1_toDd001_$2 ← (number) 3 ^ (number~) main::vicSelectGfxBank1_toDd001_$1
  (byte) main::vicSelectGfxBank1_toDd001_return#0 ← (number~) main::vicSelectGfxBank1_toDd001_$2
  to:main::vicSelectGfxBank1_toDd001_@return
main::vicSelectGfxBank1_toDd001_@return: scope:[main]  from main::vicSelectGfxBank1_toDd001
  (byte*) bitmap_gfx#38 ← phi( main::vicSelectGfxBank1_toDd001/(byte*) bitmap_gfx#40 )
  (byte*) bitmap_screen#37 ← phi( main::vicSelectGfxBank1_toDd001/(byte*) bitmap_screen#39 )
  (byte) main::vicSelectGfxBank1_toDd001_return#2 ← phi( main::vicSelectGfxBank1_toDd001/(byte) main::vicSelectGfxBank1_toDd001_return#0 )
  (byte) main::vicSelectGfxBank1_toDd001_return#1 ← (byte) main::vicSelectGfxBank1_toDd001_return#2
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001_@return
  (byte*) bitmap_gfx#36 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte*) bitmap_gfx#38 )
  (byte*) bitmap_screen#35 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte*) bitmap_screen#37 )
  (byte) main::vicSelectGfxBank1_toDd001_return#3 ← phi( main::vicSelectGfxBank1_toDd001_@return/(byte) main::vicSelectGfxBank1_toDd001_return#1 )
  (byte~) main::vicSelectGfxBank1_$0 ← (byte) main::vicSelectGfxBank1_toDd001_return#3
  *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte~) main::vicSelectGfxBank1_$0
  to:main::@9
main::@9: scope:[main]  from main::vicSelectGfxBank1_@1
  (byte*) bitmap_gfx#34 ← phi( main::vicSelectGfxBank1_@1/(byte*) bitmap_gfx#36 )
  (byte*) bitmap_screen#33 ← phi( main::vicSelectGfxBank1_@1/(byte*) bitmap_screen#35 )
  (byte*) main::toD0181_screen#0 ← (const nomodify byte*) BITMAP_SCREEN
  (byte*) main::toD0181_gfx#0 ← (const nomodify byte*) BITMAP_GRAPHICS
  to:main::toD0181
main::toD0181: scope:[main]  from main::@9
  (byte*) bitmap_gfx#32 ← phi( main::@9/(byte*) bitmap_gfx#34 )
  (byte*) bitmap_screen#31 ← phi( main::@9/(byte*) bitmap_screen#33 )
  (byte*) main::toD0181_gfx#1 ← phi( main::@9/(byte*) main::toD0181_gfx#0 )
  (byte*) main::toD0181_screen#1 ← phi( main::@9/(byte*) main::toD0181_screen#0 )
  (word~) main::toD0181_$7 ← (word)(byte*) main::toD0181_screen#1
  (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (number) $3fff
  (number~) main::toD0181_$1 ← (number~) main::toD0181_$0 * (number) 4
  (number~) main::toD0181_$2 ← > (number~) main::toD0181_$1
  (byte~) main::toD0181_$3 ← > (word)(byte*) main::toD0181_gfx#1
  (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (number) 4
  (number~) main::toD0181_$5 ← (number~) main::toD0181_$4 & (number) $f
  (number~) main::toD0181_$6 ← (number~) main::toD0181_$2 | (number~) main::toD0181_$5
  (byte) main::toD0181_return#0 ← (number~) main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  (byte*) bitmap_gfx#28 ← phi( main::toD0181/(byte*) bitmap_gfx#32 )
  (byte*) bitmap_screen#27 ← phi( main::toD0181/(byte*) bitmap_screen#31 )
  (byte) main::toD0181_return#2 ← phi( main::toD0181/(byte) main::toD0181_return#0 )
  (byte) main::toD0181_return#1 ← (byte) main::toD0181_return#2
  to:main::@10
main::@10: scope:[main]  from main::toD0181_@return
  (byte*) bitmap_gfx#25 ← phi( main::toD0181_@return/(byte*) bitmap_gfx#28 )
  (byte*) bitmap_screen#24 ← phi( main::toD0181_@return/(byte*) bitmap_screen#27 )
  (byte) main::toD0181_return#3 ← phi( main::toD0181_@return/(byte) main::toD0181_return#1 )
  (byte~) main::$4 ← (byte) main::toD0181_return#3
  *((const nomodify byte*) D018) ← (byte~) main::$4
  *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
  (byte) main::angle#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@6
  (byte*) bitmap_gfx#22 ← phi( main::@10/(byte*) bitmap_gfx#25 main::@6/(byte*) bitmap_gfx#26 )
  (byte) main::angle#6 ← phi( main::@10/(byte) main::angle#0 main::@6/(byte) main::angle#1 )
  (byte*) bitmap_screen#21 ← phi( main::@10/(byte*) bitmap_screen#24 main::@6/(byte*) bitmap_screen#25 )
  if(true) goto main::@2
  to:main::@7
main::@2: scope:[main]  from main::@1
  (byte*) bitmap_gfx#20 ← phi( main::@1/(byte*) bitmap_gfx#22 )
  (byte) main::angle#4 ← phi( main::@1/(byte) main::angle#6 )
  (byte*) bitmap_screen#14 ← phi( main::@1/(byte*) bitmap_screen#21 )
  (byte) bitmap_clear::bgcol#1 ← (const nomodify byte) BLACK
  (byte) bitmap_clear::fgcol#1 ← (const nomodify byte) WHITE
  call bitmap_clear 
  to:main::@14
main::@14: scope:[main]  from main::@2
  (byte*) bitmap_gfx#39 ← phi( main::@2/(byte*) bitmap_gfx#20 )
  (byte*) bitmap_screen#38 ← phi( main::@2/(byte*) bitmap_screen#14 )
  (byte) main::angle#2 ← phi( main::@2/(byte) main::angle#4 )
  (byte) show_letter::angle#0 ← (byte) main::angle#2
  call show_letter 
  to:main::@15
main::@15: scope:[main]  from main::@14
  (byte*) bitmap_gfx#37 ← phi( main::@14/(byte*) bitmap_gfx#39 )
  (byte*) bitmap_screen#36 ← phi( main::@14/(byte*) bitmap_screen#38 )
  (byte) main::angle#9 ← phi( main::@14/(byte) main::angle#2 )
  (byte) main::w#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@15 main::@3 main::@5
  (byte*) bitmap_gfx#35 ← phi( main::@15/(byte*) bitmap_gfx#37 main::@3/(byte*) bitmap_gfx#35 main::@5/(byte*) bitmap_gfx#29 )
  (byte*) bitmap_screen#34 ← phi( main::@15/(byte*) bitmap_screen#36 main::@3/(byte*) bitmap_screen#34 main::@5/(byte*) bitmap_screen#28 )
  (byte) main::angle#8 ← phi( main::@15/(byte) main::angle#9 main::@3/(byte) main::angle#8 main::@5/(byte) main::angle#5 )
  (byte) main::w#4 ← phi( main::@15/(byte) main::w#0 main::@3/(byte) main::w#4 main::@5/(byte) main::w#1 )
  (bool~) main::$7 ← *((const nomodify byte*) RASTER) != (number) $fe
  if((bool~) main::$7) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  (byte*) bitmap_gfx#33 ← phi( main::@3/(byte*) bitmap_gfx#35 main::@4/(byte*) bitmap_gfx#33 )
  (byte*) bitmap_screen#32 ← phi( main::@3/(byte*) bitmap_screen#34 main::@4/(byte*) bitmap_screen#32 )
  (byte) main::angle#7 ← phi( main::@3/(byte) main::angle#8 main::@4/(byte) main::angle#7 )
  (byte) main::w#3 ← phi( main::@3/(byte) main::w#4 main::@4/(byte) main::w#3 )
  (bool~) main::$8 ← *((const nomodify byte*) RASTER) != (number) $ff
  if((bool~) main::$8) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte*) bitmap_gfx#29 ← phi( main::@4/(byte*) bitmap_gfx#33 )
  (byte*) bitmap_screen#28 ← phi( main::@4/(byte*) bitmap_screen#32 )
  (byte) main::angle#5 ← phi( main::@4/(byte) main::angle#7 )
  (byte) main::w#2 ← phi( main::@4/(byte) main::w#3 )
  (byte) main::w#1 ← (byte) main::w#2 + rangenext(0,$3c)
  (bool~) main::$9 ← (byte) main::w#1 != rangelast(0,$3c)
  if((bool~) main::$9) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) bitmap_gfx#26 ← phi( main::@5/(byte*) bitmap_gfx#29 )
  (byte*) bitmap_screen#25 ← phi( main::@5/(byte*) bitmap_screen#28 )
  (byte) main::angle#3 ← phi( main::@5/(byte) main::angle#5 )
  (byte) main::angle#1 ← (byte) main::angle#3 + (number) 9
  to:main::@1
main::@7: scope:[main]  from main::@1 main::@8
  (byte*) bitmap_screen#16 ← phi( main::@1/(byte*) bitmap_screen#21 main::@8/(byte*) bitmap_screen#22 )
  (byte*) bitmap_gfx#16 ← phi( main::@1/(byte*) bitmap_gfx#22 main::@8/(byte*) bitmap_gfx#23 )
  if(true) goto main::@8
  to:main::@return
main::@8: scope:[main]  from main::@7
  (byte*) bitmap_screen#22 ← phi( main::@7/(byte*) bitmap_screen#16 )
  (byte*) bitmap_gfx#23 ← phi( main::@7/(byte*) bitmap_gfx#16 )
  *((const nomodify byte*) PRINT_SCREEN+(number) $3e7) ← ++ *((const nomodify byte*) PRINT_SCREEN+(number) $3e7)
  to:main::@7
main::@return: scope:[main]  from main::@7
  (byte*) bitmap_screen#10 ← phi( main::@7/(byte*) bitmap_screen#16 )
  (byte*) bitmap_gfx#10 ← phi( main::@7/(byte*) bitmap_gfx#16 )
  (byte*) bitmap_gfx#3 ← (byte*) bitmap_gfx#10
  (byte*) bitmap_screen#3 ← (byte*) bitmap_screen#10
  return 
  to:@return

(void()) show_letter((byte) show_letter::angle)
show_letter: scope:[show_letter]  from main::@14
  (byte) show_letter::angle#3 ← phi( main::@14/(byte) show_letter::angle#0 )
  (signed word) show_letter::current_x#0 ← (signed word) 0
  (signed word) show_letter::current_y#0 ← (signed word) 0
  (byte) show_letter::i#0 ← (byte) 0
  to:show_letter::@1
show_letter::@1: scope:[show_letter]  from show_letter show_letter::@4
  (signed word) show_letter::current_y#9 ← phi( show_letter/(signed word) show_letter::current_y#0 show_letter::@4/(signed word) show_letter::current_y#10 )
  (signed word) show_letter::current_x#9 ← phi( show_letter/(signed word) show_letter::current_x#0 show_letter::@4/(signed word) show_letter::current_x#10 )
  (byte) show_letter::angle#1 ← phi( show_letter/(byte) show_letter::angle#3 show_letter::@4/(byte) show_letter::angle#4 )
  (byte) show_letter::i#2 ← phi( show_letter/(byte) show_letter::i#0 show_letter::@4/(byte) show_letter::i#1 )
  (byte~) show_letter::$16 ← (byte) show_letter::i#2 * (const byte) SIZEOF_STRUCT_SEGMENT
  (signed word) show_letter::to_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) show_letter::$16)
  (signed word) show_letter::to_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$16)
  (number~) show_letter::$0 ← (signed word) show_letter::to_x#0 - (number) $32
  (number~) show_letter::$1 ← (signed word) show_letter::to_y#0 - (number) $96
  (signed word) show_letter::to_x#1 ← (signed word)(number~) show_letter::$0
  (signed word) show_letter::to_y#1 ← (signed word)(number~) show_letter::$1
  (signed word) rotate::vector_x#0 ← (signed word) show_letter::to_x#1
  (signed word) rotate::vector_y#0 ← (signed word) show_letter::to_y#1
  (byte) rotate::angle#0 ← (byte) show_letter::angle#1
  call rotate 
  (signed word) rotate::return_x#0 ← (signed word) rotate::return_x#3
  (signed word) rotate::return_y#0 ← (signed word) rotate::return_y#3
  to:show_letter::@7
show_letter::@7: scope:[show_letter]  from show_letter::@1
  (signed word) show_letter::current_y#8 ← phi( show_letter::@1/(signed word) show_letter::current_y#9 )
  (signed word) show_letter::current_x#8 ← phi( show_letter::@1/(signed word) show_letter::current_x#9 )
  (byte) show_letter::angle#2 ← phi( show_letter::@1/(byte) show_letter::angle#1 )
  (byte) show_letter::i#3 ← phi( show_letter::@1/(byte) show_letter::i#2 )
  (signed word) rotate::return_y#4 ← phi( show_letter::@1/(signed word) rotate::return_y#0 )
  (signed word) rotate::return_x#4 ← phi( show_letter::@1/(signed word) rotate::return_x#0 )
  (signed word~) show_letter::$2_x ← (signed word) rotate::return_x#4
  (signed word~) show_letter::$2_y ← (signed word) rotate::return_y#4
  (signed word) show_letter::to_x#2 ← (signed word~) show_letter::$2_x
  (signed word) show_letter::to_y#2 ← (signed word~) show_letter::$2_y
  (number~) show_letter::$3 ← (signed word) show_letter::to_x#2 + (number) $64
  (number~) show_letter::$4 ← (signed word) show_letter::to_y#2 + (number) $64
  (signed word) show_letter::to_x#3 ← (signed word)(number~) show_letter::$3
  (signed word) show_letter::to_y#3 ← (signed word)(number~) show_letter::$4
  (byte~) show_letter::$17 ← (byte) show_letter::i#3 * (const byte) SIZEOF_STRUCT_SEGMENT
  (signed word) show_letter::via_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) show_letter::$17)
  (signed word) show_letter::via_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17)
  (number~) show_letter::$5 ← (signed word) show_letter::via_x#0 - (number) $32
  (number~) show_letter::$6 ← (signed word) show_letter::via_y#0 - (number) $96
  (signed word) show_letter::via_x#1 ← (signed word)(number~) show_letter::$5
  (signed word) show_letter::via_y#1 ← (signed word)(number~) show_letter::$6
  (signed word) rotate::vector_x#1 ← (signed word) show_letter::via_x#1
  (signed word) rotate::vector_y#1 ← (signed word) show_letter::via_y#1
  (byte) rotate::angle#1 ← (byte) show_letter::angle#2
  call rotate 
  (signed word) rotate::return_x#1 ← (signed word) rotate::return_x#3
  (signed word) rotate::return_y#1 ← (signed word) rotate::return_y#3
  to:show_letter::@8
show_letter::@8: scope:[show_letter]  from show_letter::@7
  (byte) show_letter::angle#8 ← phi( show_letter::@7/(byte) show_letter::angle#2 )
  (signed word) show_letter::current_y#7 ← phi( show_letter::@7/(signed word) show_letter::current_y#8 )
  (signed word) show_letter::current_x#7 ← phi( show_letter::@7/(signed word) show_letter::current_x#8 )
  (signed word) show_letter::to_y#4 ← phi( show_letter::@7/(signed word) show_letter::to_y#3 )
  (signed word) show_letter::to_x#4 ← phi( show_letter::@7/(signed word) show_letter::to_x#3 )
  (byte) show_letter::i#4 ← phi( show_letter::@7/(byte) show_letter::i#3 )
  (signed word) rotate::return_y#5 ← phi( show_letter::@7/(signed word) rotate::return_y#1 )
  (signed word) rotate::return_x#5 ← phi( show_letter::@7/(signed word) rotate::return_x#1 )
  (signed word~) show_letter::$7_x ← (signed word) rotate::return_x#5
  (signed word~) show_letter::$7_y ← (signed word) rotate::return_y#5
  (signed word) show_letter::via_x#2 ← (signed word~) show_letter::$7_x
  (signed word) show_letter::via_y#2 ← (signed word~) show_letter::$7_y
  (number~) show_letter::$8 ← (signed word) show_letter::via_x#2 + (number) $64
  (number~) show_letter::$9 ← (signed word) show_letter::via_y#2 + (number) $64
  (signed word) show_letter::via_x#3 ← (signed word)(number~) show_letter::$8
  (signed word) show_letter::via_y#3 ← (signed word)(number~) show_letter::$9
  (byte~) show_letter::$18 ← (byte) show_letter::i#4 * (const byte) SIZEOF_STRUCT_SEGMENT
  (byte) show_letter::segment_type#0 ← *((byte*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TYPE + (byte~) show_letter::$18)
  (signed word) show_letter::segment_to_x#0 ← (signed word) show_letter::to_x#4
  (signed word) show_letter::segment_to_y#0 ← (signed word) show_letter::to_y#4
  (signed word) show_letter::segment_via_x#0 ← (signed word) show_letter::via_x#3
  (signed word) show_letter::segment_via_y#0 ← (signed word) show_letter::via_y#3
  (bool~) show_letter::$10 ← (byte) show_letter::segment_type#0 == (const byte) MOVE_TO
  if((bool~) show_letter::$10) goto show_letter::@2
  to:show_letter::@5
show_letter::@2: scope:[show_letter]  from show_letter::@8
  (byte) show_letter::angle#7 ← phi( show_letter::@8/(byte) show_letter::angle#8 )
  (byte) show_letter::i#8 ← phi( show_letter::@8/(byte) show_letter::i#4 )
  (signed word) show_letter::segment_to_y#1 ← phi( show_letter::@8/(signed word) show_letter::segment_to_y#0 )
  (signed word) show_letter::segment_to_x#1 ← phi( show_letter::@8/(signed word) show_letter::segment_to_x#0 )
  (signed word) show_letter::current_x#1 ← (signed word) show_letter::segment_to_x#1
  (signed word) show_letter::current_y#1 ← (signed word) show_letter::segment_to_y#1
  to:show_letter::@4
show_letter::@5: scope:[show_letter]  from show_letter::@8
  (byte) show_letter::angle#12 ← phi( show_letter::@8/(byte) show_letter::angle#8 )
  (byte) show_letter::i#12 ← phi( show_letter::@8/(byte) show_letter::i#4 )
  (signed word) show_letter::segment_to_y#6 ← phi( show_letter::@8/(signed word) show_letter::segment_to_y#0 )
  (signed word) show_letter::segment_to_x#6 ← phi( show_letter::@8/(signed word) show_letter::segment_to_x#0 )
  (signed word) show_letter::segment_via_y#2 ← phi( show_letter::@8/(signed word) show_letter::segment_via_y#0 )
  (signed word) show_letter::segment_via_x#2 ← phi( show_letter::@8/(signed word) show_letter::segment_via_x#0 )
  (signed word) show_letter::current_y#6 ← phi( show_letter::@8/(signed word) show_letter::current_y#7 )
  (signed word) show_letter::current_x#6 ← phi( show_letter::@8/(signed word) show_letter::current_x#7 )
  (byte) show_letter::segment_type#1 ← phi( show_letter::@8/(byte) show_letter::segment_type#0 )
  (bool~) show_letter::$11 ← (byte) show_letter::segment_type#1 == (const byte) SPLINE_TO
  if((bool~) show_letter::$11) goto show_letter::@3
  to:show_letter::@6
show_letter::@3: scope:[show_letter]  from show_letter::@5
  (byte) show_letter::angle#11 ← phi( show_letter::@5/(byte) show_letter::angle#12 )
  (byte) show_letter::i#11 ← phi( show_letter::@5/(byte) show_letter::i#12 )
  (signed word) show_letter::segment_to_y#2 ← phi( show_letter::@5/(signed word) show_letter::segment_to_y#6 )
  (signed word) show_letter::segment_to_x#2 ← phi( show_letter::@5/(signed word) show_letter::segment_to_x#6 )
  (signed word) show_letter::segment_via_y#1 ← phi( show_letter::@5/(signed word) show_letter::segment_via_y#2 )
  (signed word) show_letter::segment_via_x#1 ← phi( show_letter::@5/(signed word) show_letter::segment_via_x#2 )
  (signed word) show_letter::current_y#4 ← phi( show_letter::@5/(signed word) show_letter::current_y#6 )
  (signed word) show_letter::current_x#4 ← phi( show_letter::@5/(signed word) show_letter::current_x#6 )
  (signed word) spline_8segB::p0_x#0 ← (signed word) show_letter::current_x#4
  (signed word) spline_8segB::p0_y#0 ← (signed word) show_letter::current_y#4
  (signed word) spline_8segB::p1_x#0 ← (signed word) show_letter::segment_via_x#1
  (signed word) spline_8segB::p1_y#0 ← (signed word) show_letter::segment_via_y#1
  (signed word) spline_8segB::p2_x#0 ← (signed word) show_letter::segment_to_x#2
  (signed word) spline_8segB::p2_y#0 ← (signed word) show_letter::segment_to_y#2
  call spline_8segB 
  to:show_letter::@9
show_letter::@9: scope:[show_letter]  from show_letter::@3
  (byte) show_letter::angle#9 ← phi( show_letter::@3/(byte) show_letter::angle#11 )
  (byte) show_letter::i#9 ← phi( show_letter::@3/(byte) show_letter::i#11 )
  (signed word) show_letter::segment_to_y#7 ← phi( show_letter::@3/(signed word) show_letter::segment_to_y#2 )
  (signed word) show_letter::segment_to_x#7 ← phi( show_letter::@3/(signed word) show_letter::segment_to_x#2 )
  call bitmap_plot_spline_8seg 
  to:show_letter::@10
show_letter::@10: scope:[show_letter]  from show_letter::@9
  (byte) show_letter::angle#5 ← phi( show_letter::@9/(byte) show_letter::angle#9 )
  (byte) show_letter::i#6 ← phi( show_letter::@9/(byte) show_letter::i#9 )
  (signed word) show_letter::segment_to_y#3 ← phi( show_letter::@9/(signed word) show_letter::segment_to_y#7 )
  (signed word) show_letter::segment_to_x#3 ← phi( show_letter::@9/(signed word) show_letter::segment_to_x#7 )
  (signed word) show_letter::current_x#2 ← (signed word) show_letter::segment_to_x#3
  (signed word) show_letter::current_y#2 ← (signed word) show_letter::segment_to_y#3
  to:show_letter::@4
show_letter::@6: scope:[show_letter]  from show_letter::@5
  (byte) show_letter::angle#10 ← phi( show_letter::@5/(byte) show_letter::angle#12 )
  (byte) show_letter::i#10 ← phi( show_letter::@5/(byte) show_letter::i#12 )
  (signed word) show_letter::segment_to_y#4 ← phi( show_letter::@5/(signed word) show_letter::segment_to_y#6 )
  (signed word) show_letter::segment_to_x#4 ← phi( show_letter::@5/(signed word) show_letter::segment_to_x#6 )
  (signed word) show_letter::current_y#5 ← phi( show_letter::@5/(signed word) show_letter::current_y#6 )
  (signed word) show_letter::current_x#5 ← phi( show_letter::@5/(signed word) show_letter::current_x#6 )
  (word) bitmap_line::x1#0 ← (word)(signed word) show_letter::current_x#5
  (word) bitmap_line::y1#0 ← (word)(signed word) show_letter::current_y#5
  (word) bitmap_line::x2#0 ← (word)(signed word) show_letter::segment_to_x#4
  (word) bitmap_line::y2#0 ← (word)(signed word) show_letter::segment_to_y#4
  call bitmap_line 
  to:show_letter::@11
show_letter::@11: scope:[show_letter]  from show_letter::@6
  (byte) show_letter::angle#6 ← phi( show_letter::@6/(byte) show_letter::angle#10 )
  (byte) show_letter::i#7 ← phi( show_letter::@6/(byte) show_letter::i#10 )
  (signed word) show_letter::segment_to_y#5 ← phi( show_letter::@6/(signed word) show_letter::segment_to_y#4 )
  (signed word) show_letter::segment_to_x#5 ← phi( show_letter::@6/(signed word) show_letter::segment_to_x#4 )
  (signed word) show_letter::current_x#3 ← (signed word) show_letter::segment_to_x#5
  (signed word) show_letter::current_y#3 ← (signed word) show_letter::segment_to_y#5
  to:show_letter::@4
show_letter::@4: scope:[show_letter]  from show_letter::@10 show_letter::@11 show_letter::@2
  (signed word) show_letter::current_y#10 ← phi( show_letter::@10/(signed word) show_letter::current_y#2 show_letter::@11/(signed word) show_letter::current_y#3 show_letter::@2/(signed word) show_letter::current_y#1 )
  (signed word) show_letter::current_x#10 ← phi( show_letter::@10/(signed word) show_letter::current_x#2 show_letter::@11/(signed word) show_letter::current_x#3 show_letter::@2/(signed word) show_letter::current_x#1 )
  (byte) show_letter::angle#4 ← phi( show_letter::@10/(byte) show_letter::angle#5 show_letter::@11/(byte) show_letter::angle#6 show_letter::@2/(byte) show_letter::angle#7 )
  (byte) show_letter::i#5 ← phi( show_letter::@10/(byte) show_letter::i#6 show_letter::@11/(byte) show_letter::i#7 show_letter::@2/(byte) show_letter::i#8 )
  (byte) show_letter::i#1 ← (byte) show_letter::i#5 + rangenext(0,$15)
  (bool~) show_letter::$15 ← (byte) show_letter::i#1 != rangelast(0,$15)
  if((bool~) show_letter::$15) goto show_letter::@1
  to:show_letter::@return
show_letter::@return: scope:[show_letter]  from show_letter::@4
  return 
  to:@return

(void()) bitmap_plot_spline_8seg()
bitmap_plot_spline_8seg: scope:[bitmap_plot_spline_8seg]  from show_letter::@9
  (number~) bitmap_plot_spline_8seg::$2 ← (number) 0 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
  (signed word) bitmap_plot_spline_8seg::current_x#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (number~) bitmap_plot_spline_8seg::$2)
  (signed word) bitmap_plot_spline_8seg::current_y#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (number~) bitmap_plot_spline_8seg::$2)
  (byte) bitmap_plot_spline_8seg::n#0 ← (byte) 1
  to:bitmap_plot_spline_8seg::@1
bitmap_plot_spline_8seg::@1: scope:[bitmap_plot_spline_8seg]  from bitmap_plot_spline_8seg bitmap_plot_spline_8seg::@2
  (signed word) bitmap_plot_spline_8seg::current_y#2 ← phi( bitmap_plot_spline_8seg/(signed word) bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::@2/(signed word) bitmap_plot_spline_8seg::current_y#1 )
  (signed word) bitmap_plot_spline_8seg::current_x#2 ← phi( bitmap_plot_spline_8seg/(signed word) bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::@2/(signed word) bitmap_plot_spline_8seg::current_x#1 )
  (byte) bitmap_plot_spline_8seg::n#2 ← phi( bitmap_plot_spline_8seg/(byte) bitmap_plot_spline_8seg::n#0 bitmap_plot_spline_8seg::@2/(byte) bitmap_plot_spline_8seg::n#1 )
  (byte~) bitmap_plot_spline_8seg::$3 ← (byte) bitmap_plot_spline_8seg::n#2 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
  (word) bitmap_line::x1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_x#2
  (word) bitmap_line::y1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_y#2
  (word) bitmap_line::x2#1 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) bitmap_plot_spline_8seg::$3)
  (word) bitmap_line::y2#1 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$3)
  call bitmap_line 
  to:bitmap_plot_spline_8seg::@2
bitmap_plot_spline_8seg::@2: scope:[bitmap_plot_spline_8seg]  from bitmap_plot_spline_8seg::@1
  (byte) bitmap_plot_spline_8seg::n#3 ← phi( bitmap_plot_spline_8seg::@1/(byte) bitmap_plot_spline_8seg::n#2 )
  (byte~) bitmap_plot_spline_8seg::$4 ← (byte) bitmap_plot_spline_8seg::n#3 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
  (signed word) bitmap_plot_spline_8seg::current_x#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) bitmap_plot_spline_8seg::$4)
  (signed word) bitmap_plot_spline_8seg::current_y#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4)
  (byte) bitmap_plot_spline_8seg::n#1 ← (byte) bitmap_plot_spline_8seg::n#3 + rangenext(1,8)
  (bool~) bitmap_plot_spline_8seg::$1 ← (byte) bitmap_plot_spline_8seg::n#1 != rangelast(1,8)
  if((bool~) bitmap_plot_spline_8seg::$1) goto bitmap_plot_spline_8seg::@1
  to:bitmap_plot_spline_8seg::@return
bitmap_plot_spline_8seg::@return: scope:[bitmap_plot_spline_8seg]  from bitmap_plot_spline_8seg::@2
  return 
  to:@return

(struct SplineVector16()) rotate((signed word) rotate::vector_x , (signed word) rotate::vector_y , (byte) rotate::angle)
rotate: scope:[rotate]  from show_letter::@1 show_letter::@7
  (signed word) rotate::vector_y#4 ← phi( show_letter::@1/(signed word) rotate::vector_y#0 show_letter::@7/(signed word) rotate::vector_y#1 )
  (signed word) rotate::vector_x#2 ← phi( show_letter::@1/(signed word) rotate::vector_x#0 show_letter::@7/(signed word) rotate::vector_x#1 )
  (byte) rotate::angle#2 ← phi( show_letter::@1/(byte) rotate::angle#0 show_letter::@7/(byte) rotate::angle#1 )
  (signed word) rotate::cos_a#0 ← (signed word)*((const signed byte*) COS + (byte) rotate::angle#2)
  (signed word) mulf16s::a#0 ← (signed word) rotate::cos_a#0
  (signed word) mulf16s::b#0 ← (signed word) rotate::vector_x#2
  call mulf16s 
  (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#1
  to:rotate::@1
rotate::@1: scope:[rotate]  from rotate
  (signed word) rotate::vector_x#5 ← phi( rotate/(signed word) rotate::vector_x#2 )
  (byte) rotate::angle#4 ← phi( rotate/(byte) rotate::angle#2 )
  (signed word) rotate::vector_y#2 ← phi( rotate/(signed word) rotate::vector_y#4 )
  (signed word) rotate::cos_a#1 ← phi( rotate/(signed word) rotate::cos_a#0 )
  (signed dword) mulf16s::return#7 ← phi( rotate/(signed dword) mulf16s::return#2 )
  (signed dword~) rotate::$0 ← (signed dword) mulf16s::return#7
  (signed word~) rotate::$10 ← (signed word)(signed dword~) rotate::$0
  (number~) rotate::$1 ← (signed word~) rotate::$10 * (number) 2
  (signed word) rotate::xr#0 ← (number~) rotate::$1
  (signed word) mulf16s::a#1 ← (signed word) rotate::cos_a#1
  (signed word) mulf16s::b#1 ← (signed word) rotate::vector_y#2
  call mulf16s 
  (signed dword) mulf16s::return#3 ← (signed dword) mulf16s::return#1
  to:rotate::@2
rotate::@2: scope:[rotate]  from rotate::@1
  (signed word) rotate::vector_x#4 ← phi( rotate::@1/(signed word) rotate::vector_x#5 )
  (signed word) rotate::xr#4 ← phi( rotate::@1/(signed word) rotate::xr#0 )
  (signed word) rotate::vector_y#3 ← phi( rotate::@1/(signed word) rotate::vector_y#2 )
  (byte) rotate::angle#3 ← phi( rotate::@1/(byte) rotate::angle#4 )
  (signed dword) mulf16s::return#8 ← phi( rotate::@1/(signed dword) mulf16s::return#3 )
  (signed dword~) rotate::$2 ← (signed dword) mulf16s::return#8
  (signed word~) rotate::$11 ← (signed word)(signed dword~) rotate::$2
  (number~) rotate::$3 ← (signed word~) rotate::$11 * (number) 2
  (signed word) rotate::yr#0 ← (number~) rotate::$3
  (signed word) rotate::sin_a#0 ← (signed word)*((const signed byte*) SIN + (byte) rotate::angle#3)
  (signed word) mulf16s::a#2 ← (signed word) rotate::sin_a#0
  (signed word) mulf16s::b#2 ← (signed word) rotate::vector_y#3
  call mulf16s 
  (signed dword) mulf16s::return#4 ← (signed dword) mulf16s::return#1
  to:rotate::@3
rotate::@3: scope:[rotate]  from rotate::@2
  (signed word) rotate::yr#3 ← phi( rotate::@2/(signed word) rotate::yr#0 )
  (signed word) rotate::vector_x#3 ← phi( rotate::@2/(signed word) rotate::vector_x#4 )
  (signed word) rotate::sin_a#1 ← phi( rotate::@2/(signed word) rotate::sin_a#0 )
  (signed word) rotate::xr#2 ← phi( rotate::@2/(signed word) rotate::xr#4 )
  (signed dword) mulf16s::return#9 ← phi( rotate::@2/(signed dword) mulf16s::return#4 )
  (signed dword~) rotate::$4 ← (signed dword) mulf16s::return#9
  (signed word~) rotate::$12 ← (signed word)(signed dword~) rotate::$4
  (number~) rotate::$5 ← (signed word~) rotate::$12 * (number) 2
  (signed word) rotate::xr#1 ← (signed word) rotate::xr#2 - (number~) rotate::$5
  (signed word) mulf16s::a#3 ← (signed word) rotate::sin_a#1
  (signed word) mulf16s::b#3 ← (signed word) rotate::vector_x#3
  call mulf16s 
  (signed dword) mulf16s::return#5 ← (signed dword) mulf16s::return#1
  to:rotate::@4
rotate::@4: scope:[rotate]  from rotate::@3
  (signed word) rotate::xr#3 ← phi( rotate::@3/(signed word) rotate::xr#1 )
  (signed word) rotate::yr#2 ← phi( rotate::@3/(signed word) rotate::yr#3 )
  (signed dword) mulf16s::return#10 ← phi( rotate::@3/(signed dword) mulf16s::return#5 )
  (signed dword~) rotate::$6 ← (signed dword) mulf16s::return#10
  (signed word~) rotate::$13 ← (signed word)(signed dword~) rotate::$6
  (number~) rotate::$7 ← (signed word~) rotate::$13 * (number) 2
  (signed word) rotate::yr#1 ← (signed word) rotate::yr#2 + (number~) rotate::$7
  (byte~) rotate::$8 ← > (signed word) rotate::xr#3
  (byte~) rotate::$9 ← > (signed word) rotate::yr#1
  (signed word) rotate::rotated_x#0 ← (signed word)(signed byte)(byte~) rotate::$8
  (signed word) rotate::rotated_y#0 ← (signed word)(signed byte)(byte~) rotate::$9
  (signed word) rotate::return_x#2 ← (signed word) rotate::rotated_x#0
  (signed word) rotate::return_y#2 ← (signed word) rotate::rotated_y#0
  (struct SplineVector16) rotate::return#0 ← struct-unwound {(signed word) rotate::return_x#2, (signed word) rotate::return_y#2}
  to:rotate::@return
rotate::@return: scope:[rotate]  from rotate::@4
  (signed word) rotate::return_y#6 ← phi( rotate::@4/(signed word) rotate::return_y#2 )
  (signed word) rotate::return_x#6 ← phi( rotate::@4/(signed word) rotate::return_x#2 )
  (signed word) rotate::return_x#3 ← (signed word) rotate::return_x#6
  (signed word) rotate::return_y#3 ← (signed word) rotate::return_y#6
  (struct SplineVector16) rotate::return#1 ← struct-unwound {(signed word) rotate::return_x#3, (signed word) rotate::return_y#3}
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte*) bitmap_screen#4 ← (byte*) 0
  (byte*) bitmap_gfx#4 ← (byte*) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte*) bitmap_screen#17 ← phi( __start::__init1/(byte*) bitmap_screen#4 )
  (byte*) bitmap_gfx#17 ← phi( __start::__init1/(byte*) bitmap_gfx#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte*) bitmap_screen#11 ← phi( __start::@1/(byte*) bitmap_screen#3 )
  (byte*) bitmap_gfx#11 ← phi( __start::@1/(byte*) bitmap_gfx#3 )
  (byte*) bitmap_gfx#5 ← (byte*) bitmap_gfx#11
  (byte*) bitmap_screen#5 ← (byte*) bitmap_screen#11
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte*) bitmap_gfx#12 ← phi( __start::@2/(byte*) bitmap_gfx#5 )
  (byte*) bitmap_screen#12 ← phi( __start::@2/(byte*) bitmap_screen#5 )
  (byte*) bitmap_screen#6 ← (byte*) bitmap_screen#12
  (byte*) bitmap_gfx#6 ← (byte*) bitmap_gfx#12
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) BITMAP_GRAPHICS = (byte*)(number) $6000
(const nomodify byte*) BITMAP_SCREEN = (byte*)(number) $5c00
(const nomodify byte) BLACK = (byte) 0
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*)(number) $dd00
(const signed byte*) COS = (const signed byte*) SIN+(number) $40
(const nomodify byte*) D011 = (byte*)(number) $d011
(const nomodify byte*) D018 = (byte*)(number) $d018
(const byte) LINE_TO = (byte) 2
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) MOVE_TO = (byte) 0
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A = (byte) 0
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = (byte) 2
(const byte) OFFSET_STRUCT_SEGMENT_TO = (byte) 1
(const byte) OFFSET_STRUCT_SEGMENT_TYPE = (byte) 0
(const byte) OFFSET_STRUCT_SEGMENT_VIA = (byte) 5
(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X = (byte) 0
(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y = (byte) 2
(const nomodify byte*) PRINT_SCREEN = (byte*)(number) $400
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte*) RASTER = (byte*)(number) $d012
(const signed byte*) SIN[(number) $140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
(const byte) SIZEOF_STRUCT_SEGMENT = (byte) 9
(const byte) SIZEOF_STRUCT_SPLINEVECTOR16 = (byte) 4
(const struct SplineVector16*) SPLINE_8SEG[(number) 9]  = { fill( 9, 0) }
(const byte) SPLINE_TO = (byte) 1
(const byte) Segment::SegmentType::LINE_TO = (byte) 2
(const byte) Segment::SegmentType::MOVE_TO = (byte) 0
(const byte) Segment::SegmentType::SPLINE_TO = (byte) 1
(struct SplineVector16) Segment::to
(byte) Segment::type
(struct SplineVector16) Segment::via
(signed word) SplineVector16::x
(signed word) SplineVector16::y
(signed dword) SplineVector32::x
(signed dword) SplineVector32::y
(const nomodify byte) VIC_BMM = (byte) $20
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_RSEL = (byte) 8
(const nomodify byte) WHITE = (byte) 1
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(word()) abs_u16((word) abs_u16::w)
(byte~) abs_u16::$0
(number~) abs_u16::$1
(word~) abs_u16::$2
(bool~) abs_u16::$3
(label) abs_u16::@1
(label) abs_u16::@2
(label) abs_u16::@return
(word) abs_u16::return
(word) abs_u16::return#0
(word) abs_u16::return#1
(word) abs_u16::return#2
(word) abs_u16::return#3
(word) abs_u16::return#4
(word) abs_u16::return#5
(word) abs_u16::return#6
(word) abs_u16::return#7
(word) abs_u16::w
(word) abs_u16::w#0
(word) abs_u16::w#1
(word) abs_u16::w#2
(word) abs_u16::w#3
(word) abs_u16::w#4
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(number~) bitmap_clear::$0
(number~) bitmap_clear::$1
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@return
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::bgcol#0
(byte) bitmap_clear::bgcol#1
(byte) bitmap_clear::bgcol#2
(byte) bitmap_clear::col
(byte) bitmap_clear::col#0
(byte) bitmap_clear::fgcol
(byte) bitmap_clear::fgcol#0
(byte) bitmap_clear::fgcol#1
(byte) bitmap_clear::fgcol#2
(byte*) bitmap_gfx
(byte*) bitmap_gfx#0
(byte*) bitmap_gfx#1
(byte*) bitmap_gfx#10
(byte*) bitmap_gfx#11
(byte*) bitmap_gfx#12
(byte*) bitmap_gfx#13
(byte*) bitmap_gfx#14
(byte*) bitmap_gfx#15
(byte*) bitmap_gfx#16
(byte*) bitmap_gfx#17
(byte*) bitmap_gfx#18
(byte*) bitmap_gfx#19
(byte*) bitmap_gfx#2
(byte*) bitmap_gfx#20
(byte*) bitmap_gfx#21
(byte*) bitmap_gfx#22
(byte*) bitmap_gfx#23
(byte*) bitmap_gfx#24
(byte*) bitmap_gfx#25
(byte*) bitmap_gfx#26
(byte*) bitmap_gfx#27
(byte*) bitmap_gfx#28
(byte*) bitmap_gfx#29
(byte*) bitmap_gfx#3
(byte*) bitmap_gfx#30
(byte*) bitmap_gfx#31
(byte*) bitmap_gfx#32
(byte*) bitmap_gfx#33
(byte*) bitmap_gfx#34
(byte*) bitmap_gfx#35
(byte*) bitmap_gfx#36
(byte*) bitmap_gfx#37
(byte*) bitmap_gfx#38
(byte*) bitmap_gfx#39
(byte*) bitmap_gfx#4
(byte*) bitmap_gfx#40
(byte*) bitmap_gfx#41
(byte*) bitmap_gfx#42
(byte*) bitmap_gfx#5
(byte*) bitmap_gfx#6
(byte*) bitmap_gfx#7
(byte*) bitmap_gfx#8
(byte*) bitmap_gfx#9
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(bool~) bitmap_init::$0
(bool~) bitmap_init::$1
(byte*~) bitmap_init::$10
(bool~) bitmap_init::$11
(bool~) bitmap_init::$2
(number~) bitmap_init::$3
(byte~) bitmap_init::$4
(number~) bitmap_init::$5
(byte~) bitmap_init::$6
(number~) bitmap_init::$7
(bool~) bitmap_init::$8
(bool~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte) bitmap_init::bits
(byte) bitmap_init::bits#0
(byte) bitmap_init::bits#1
(byte) bitmap_init::bits#2
(byte) bitmap_init::bits#3
(byte) bitmap_init::bits#4
(byte*) bitmap_init::gfx
(byte*) bitmap_init::gfx#0
(byte*) bitmap_init::gfx#1
(byte*) bitmap_init::gfx#2
(byte*) bitmap_init::gfx#3
(byte*) bitmap_init::gfx#4
(byte*) bitmap_init::gfx#5
(byte*) bitmap_init::screen
(byte*) bitmap_init::screen#0
(byte*) bitmap_init::screen#1
(byte) bitmap_init::x
(byte) bitmap_init::x#0
(byte) bitmap_init::x#1
(byte) bitmap_init::x#2
(byte) bitmap_init::x#3
(byte) bitmap_init::x#4
(byte) bitmap_init::y
(byte) bitmap_init::y#0
(byte) bitmap_init::y#1
(byte) bitmap_init::y#2
(byte) bitmap_init::y#3
(byte) bitmap_init::y#4
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#0
(byte*) bitmap_init::yoffs#1
(byte*) bitmap_init::yoffs#2
(byte*) bitmap_init::yoffs#3
(byte*) bitmap_init::yoffs#4
(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
(word~) bitmap_line::$0
(word~) bitmap_line::$1
(word~) bitmap_line::$10
(word~) bitmap_line::$11
(bool~) bitmap_line::$12
(number~) bitmap_line::$15
(bool~) bitmap_line::$17
(bool~) bitmap_line::$18
(bool~) bitmap_line::$19
(word~) bitmap_line::$2
(number~) bitmap_line::$20
(bool~) bitmap_line::$22
(bool~) bitmap_line::$23
(bool~) bitmap_line::$24
(word~) bitmap_line::$3
(bool~) bitmap_line::$4
(bool~) bitmap_line::$5
(bool~) bitmap_line::$6
(bool~) bitmap_line::$7
(word~) bitmap_line::$8
(word~) bitmap_line::$9
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@12
(label) bitmap_line::@13
(label) bitmap_line::@14
(label) bitmap_line::@15
(label) bitmap_line::@16
(label) bitmap_line::@17
(label) bitmap_line::@18
(label) bitmap_line::@19
(label) bitmap_line::@2
(label) bitmap_line::@3
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@6
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@9
(label) bitmap_line::@return
(word) bitmap_line::dx
(word) bitmap_line::dx#0
(word) bitmap_line::dx#1
(word) bitmap_line::dx#10
(word) bitmap_line::dx#11
(word) bitmap_line::dx#12
(word) bitmap_line::dx#13
(word) bitmap_line::dx#14
(word) bitmap_line::dx#2
(word) bitmap_line::dx#3
(word) bitmap_line::dx#4
(word) bitmap_line::dx#5
(word) bitmap_line::dx#6
(word) bitmap_line::dx#7
(word) bitmap_line::dx#8
(word) bitmap_line::dx#9
(word) bitmap_line::dy
(word) bitmap_line::dy#0
(word) bitmap_line::dy#1
(word) bitmap_line::dy#10
(word) bitmap_line::dy#11
(word) bitmap_line::dy#12
(word) bitmap_line::dy#13
(word) bitmap_line::dy#2
(word) bitmap_line::dy#3
(word) bitmap_line::dy#4
(word) bitmap_line::dy#5
(word) bitmap_line::dy#6
(word) bitmap_line::dy#7
(word) bitmap_line::dy#8
(word) bitmap_line::dy#9
(word) bitmap_line::e
(word) bitmap_line::e#0
(word) bitmap_line::e#1
(word) bitmap_line::e#2
(word) bitmap_line::e#3
(word) bitmap_line::e#4
(word) bitmap_line::e#5
(word) bitmap_line::e#6
(word) bitmap_line::e1
(word) bitmap_line::e1#0
(word) bitmap_line::e1#1
(word) bitmap_line::e1#2
(word) bitmap_line::e1#3
(word) bitmap_line::e1#4
(word) bitmap_line::e1#5
(word) bitmap_line::e1#6
(word) bitmap_line::sx
(word) bitmap_line::sx#0
(word) bitmap_line::sx#1
(word) bitmap_line::sx#10
(word) bitmap_line::sx#11
(word) bitmap_line::sx#2
(word) bitmap_line::sx#3
(word) bitmap_line::sx#4
(word) bitmap_line::sx#5
(word) bitmap_line::sx#6
(word) bitmap_line::sx#7
(word) bitmap_line::sx#8
(word) bitmap_line::sx#9
(word) bitmap_line::sy
(word) bitmap_line::sy#0
(word) bitmap_line::sy#1
(word) bitmap_line::sy#10
(word) bitmap_line::sy#2
(word) bitmap_line::sy#3
(word) bitmap_line::sy#4
(word) bitmap_line::sy#5
(word) bitmap_line::sy#6
(word) bitmap_line::sy#7
(word) bitmap_line::sy#8
(word) bitmap_line::sy#9
(word) bitmap_line::x
(word) bitmap_line::x#0
(word) bitmap_line::x#1
(word) bitmap_line::x#10
(word) bitmap_line::x#11
(word) bitmap_line::x#12
(word) bitmap_line::x#13
(word) bitmap_line::x#14
(word) bitmap_line::x#15
(word) bitmap_line::x#16
(word) bitmap_line::x#17
(word) bitmap_line::x#18
(word) bitmap_line::x#19
(word) bitmap_line::x#2
(word) bitmap_line::x#3
(word) bitmap_line::x#4
(word) bitmap_line::x#5
(word) bitmap_line::x#6
(word) bitmap_line::x#7
(word) bitmap_line::x#8
(word) bitmap_line::x#9
(word) bitmap_line::x1
(word) bitmap_line::x1#0
(word) bitmap_line::x1#1
(word) bitmap_line::x1#2
(word) bitmap_line::x1#3
(word) bitmap_line::x1#4
(word) bitmap_line::x1#5
(word) bitmap_line::x2
(word) bitmap_line::x2#0
(word) bitmap_line::x2#1
(word) bitmap_line::x2#10
(word) bitmap_line::x2#11
(word) bitmap_line::x2#12
(word) bitmap_line::x2#2
(word) bitmap_line::x2#3
(word) bitmap_line::x2#4
(word) bitmap_line::x2#5
(word) bitmap_line::x2#6
(word) bitmap_line::x2#7
(word) bitmap_line::x2#8
(word) bitmap_line::x2#9
(word) bitmap_line::y
(word) bitmap_line::y#0
(word) bitmap_line::y#1
(word) bitmap_line::y#10
(word) bitmap_line::y#11
(word) bitmap_line::y#12
(word) bitmap_line::y#13
(word) bitmap_line::y#14
(word) bitmap_line::y#15
(word) bitmap_line::y#16
(word) bitmap_line::y#17
(word) bitmap_line::y#18
(word) bitmap_line::y#19
(word) bitmap_line::y#2
(word) bitmap_line::y#3
(word) bitmap_line::y#4
(word) bitmap_line::y#5
(word) bitmap_line::y#6
(word) bitmap_line::y#7
(word) bitmap_line::y#8
(word) bitmap_line::y#9
(word) bitmap_line::y1
(word) bitmap_line::y1#0
(word) bitmap_line::y1#1
(word) bitmap_line::y1#2
(word) bitmap_line::y1#3
(word) bitmap_line::y1#4
(word) bitmap_line::y1#5
(word) bitmap_line::y1#6
(word) bitmap_line::y2
(word) bitmap_line::y2#0
(word) bitmap_line::y2#1
(word) bitmap_line::y2#10
(word) bitmap_line::y2#11
(word) bitmap_line::y2#12
(word) bitmap_line::y2#2
(word) bitmap_line::y2#3
(word) bitmap_line::y2#4
(word) bitmap_line::y2#5
(word) bitmap_line::y2#6
(word) bitmap_line::y2#7
(word) bitmap_line::y2#8
(word) bitmap_line::y2#9
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(number~) bitmap_plot::$0
(byte~) bitmap_plot::$1
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#0
(byte*) bitmap_plot::plotter#1
(word) bitmap_plot::x
(word) bitmap_plot::x#0
(word) bitmap_plot::x#1
(word) bitmap_plot::x#2
(word) bitmap_plot::x#3
(word) bitmap_plot::x#4
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0
(byte) bitmap_plot::y#1
(byte) bitmap_plot::y#2
(byte) bitmap_plot::y#3
(byte) bitmap_plot::y#4
(const to_nomodify byte*) bitmap_plot_bit[(number) $100]  = { fill( $100, 0) }
(void()) bitmap_plot_spline_8seg()
(bool~) bitmap_plot_spline_8seg::$1
(number~) bitmap_plot_spline_8seg::$2
(byte~) bitmap_plot_spline_8seg::$3
(byte~) bitmap_plot_spline_8seg::$4
(label) bitmap_plot_spline_8seg::@1
(label) bitmap_plot_spline_8seg::@2
(label) bitmap_plot_spline_8seg::@return
(signed word) bitmap_plot_spline_8seg::current_x
(signed word) bitmap_plot_spline_8seg::current_x#0
(signed word) bitmap_plot_spline_8seg::current_x#1
(signed word) bitmap_plot_spline_8seg::current_x#2
(signed word) bitmap_plot_spline_8seg::current_y
(signed word) bitmap_plot_spline_8seg::current_y#0
(signed word) bitmap_plot_spline_8seg::current_y#1
(signed word) bitmap_plot_spline_8seg::current_y#2
(byte) bitmap_plot_spline_8seg::n
(byte) bitmap_plot_spline_8seg::n#0
(byte) bitmap_plot_spline_8seg::n#1
(byte) bitmap_plot_spline_8seg::n#2
(byte) bitmap_plot_spline_8seg::n#3
(const to_nomodify byte*) bitmap_plot_yhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_ylo[(number) $100]  = { fill( $100, 0) }
(byte*) bitmap_screen
(byte*) bitmap_screen#0
(byte*) bitmap_screen#1
(byte*) bitmap_screen#10
(byte*) bitmap_screen#11
(byte*) bitmap_screen#12
(byte*) bitmap_screen#13
(byte*) bitmap_screen#14
(byte*) bitmap_screen#15
(byte*) bitmap_screen#16
(byte*) bitmap_screen#17
(byte*) bitmap_screen#18
(byte*) bitmap_screen#19
(byte*) bitmap_screen#2
(byte*) bitmap_screen#20
(byte*) bitmap_screen#21
(byte*) bitmap_screen#22
(byte*) bitmap_screen#23
(byte*) bitmap_screen#24
(byte*) bitmap_screen#25
(byte*) bitmap_screen#26
(byte*) bitmap_screen#27
(byte*) bitmap_screen#28
(byte*) bitmap_screen#29
(byte*) bitmap_screen#3
(byte*) bitmap_screen#30
(byte*) bitmap_screen#31
(byte*) bitmap_screen#32
(byte*) bitmap_screen#33
(byte*) bitmap_screen#34
(byte*) bitmap_screen#35
(byte*) bitmap_screen#36
(byte*) bitmap_screen#37
(byte*) bitmap_screen#38
(byte*) bitmap_screen#39
(byte*) bitmap_screen#4
(byte*) bitmap_screen#40
(byte*) bitmap_screen#41
(byte*) bitmap_screen#5
(byte*) bitmap_screen#6
(byte*) bitmap_screen#7
(byte*) bitmap_screen#8
(byte*) bitmap_screen#9
(const struct Segment*) letter_c[(number) $16]  = { { type: (const byte) MOVE_TO, to: { x: (signed word) $6c, y: (signed word) $92 }, via: { x: (signed word) 0, y: (signed word) 0 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $59, y: (signed word) $b6 }, via: { x: (signed word) $67, y: (signed word) $a9 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $3b, y: (signed word) $c3 }, via: { x: (signed word) $4b, y: (signed word) $c3 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $17, y: (signed word) $b2 }, via: { x: (signed word) $26, y: (signed word) $c3 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) 9, y: (signed word) $84 }, via: { x: (signed word) 9, y: (signed word) $a1 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $19, y: (signed word) $57 }, via: { x: (signed word) 9, y: (signed word) $68 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $41, y: (signed word) $45 }, via: { x: (signed word) $2a, y: (signed word) $45 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $5d, y: (signed word) $4f }, via: { x: (signed word) $52, y: (signed word) $45 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $69, y: (signed word) $62 }, via: { x: (signed word) $69, y: (signed word) $58 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $66, y: (signed word) $6a }, via: { x: (signed word) $69, y: (signed word) $67 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $5d, y: (signed word) $6d }, via: { x: (signed word) $62, y: (signed word) $6d } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $51, y: (signed word) $68 }, via: { x: (signed word) $55, y: (signed word) $6d } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $4e, y: (signed word) $5d }, via: { x: (signed word) $4f, y: (signed word) $65 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $49, y: (signed word) $52 }, via: { x: (signed word) $4e, y: (signed word) $56 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $3d, y: (signed word) $4e }, via: { x: (signed word) $45, y: (signed word) $4e } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $28, y: (signed word) $58 }, via: { x: (signed word) $30, y: (signed word) $4e } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $1d, y: (signed word) $79 }, via: { x: (signed word) $1d, y: (signed word) $64 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $28, y: (signed word) $9e }, via: { x: (signed word) $1d, y: (signed word) $8e } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $44, y: (signed word) $ae }, via: { x: (signed word) $32, y: (signed word) $ae } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $5b, y: (signed word) $a6 }, via: { x: (signed word) $50, y: (signed word) $ae } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $68, y: (signed word) $90 }, via: { x: (signed word) $62, y: (signed word) $a0 } }, { type: (const byte) LINE_TO, to: { x: (signed word) $6c, y: (signed word) $92 }, via: { x: (signed word) 0, y: (signed word) 0 } } }
(void()) main()
(byte~) main::$4
(bool~) main::$7
(bool~) main::$8
(bool~) main::$9
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::angle
(byte) main::angle#0
(byte) main::angle#1
(byte) main::angle#2
(byte) main::angle#3
(byte) main::angle#4
(byte) main::angle#5
(byte) main::angle#6
(byte) main::angle#7
(byte) main::angle#8
(byte) main::angle#9
(label) main::toD0181
(number~) main::toD0181_$0
(number~) main::toD0181_$1
(number~) main::toD0181_$2
(byte~) main::toD0181_$3
(number~) main::toD0181_$4
(number~) main::toD0181_$5
(number~) main::toD0181_$6
(word~) main::toD0181_$7
(label) main::toD0181_@return
(byte*) main::toD0181_gfx
(byte*) main::toD0181_gfx#0
(byte*) main::toD0181_gfx#1
(byte) main::toD0181_return
(byte) main::toD0181_return#0
(byte) main::toD0181_return#1
(byte) main::toD0181_return#2
(byte) main::toD0181_return#3
(byte*) main::toD0181_screen
(byte*) main::toD0181_screen#0
(byte*) main::toD0181_screen#1
(label) main::vicSelectGfxBank1
(byte~) main::vicSelectGfxBank1_$0
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(byte*) main::vicSelectGfxBank1_gfx#0
(byte*) main::vicSelectGfxBank1_gfx#1
(label) main::vicSelectGfxBank1_toDd001
(byte~) main::vicSelectGfxBank1_toDd001_$0
(number~) main::vicSelectGfxBank1_toDd001_$1
(number~) main::vicSelectGfxBank1_toDd001_$2
(label) main::vicSelectGfxBank1_toDd001_@return
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte*) main::vicSelectGfxBank1_toDd001_gfx#0
(byte*) main::vicSelectGfxBank1_toDd001_gfx#1
(byte) main::vicSelectGfxBank1_toDd001_return
(byte) main::vicSelectGfxBank1_toDd001_return#0
(byte) main::vicSelectGfxBank1_toDd001_return#1
(byte) main::vicSelectGfxBank1_toDd001_return#2
(byte) main::vicSelectGfxBank1_toDd001_return#3
(byte) main::w
(byte) main::w#0
(byte) main::w#1
(byte) main::w#2
(byte) main::w#3
(byte) main::w#4
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(bool~) memset::$3
(byte*~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@4
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(signed dword()) mulf16s((signed word) mulf16s::a , (signed word) mulf16s::b)
(dword~) mulf16s::$0
(bool~) mulf16s::$1
(word~) mulf16s::$10
(word~) mulf16s::$11
(word~) mulf16s::$12
(word~) mulf16s::$13
(word~) mulf16s::$14
(bool~) mulf16s::$2
(bool~) mulf16s::$3
(bool~) mulf16s::$4
(word~) mulf16s::$6
(word~) mulf16s::$7
(word~) mulf16s::$9
(label) mulf16s::@1
(label) mulf16s::@2
(label) mulf16s::@3
(label) mulf16s::@4
(label) mulf16s::@5
(label) mulf16s::@return
(signed word) mulf16s::a
(signed word) mulf16s::a#0
(signed word) mulf16s::a#1
(signed word) mulf16s::a#2
(signed word) mulf16s::a#3
(signed word) mulf16s::a#4
(signed word) mulf16s::a#5
(signed word) mulf16s::a#6
(signed word) mulf16s::a#7
(signed word) mulf16s::a#8
(signed word) mulf16s::b
(signed word) mulf16s::b#0
(signed word) mulf16s::b#1
(signed word) mulf16s::b#2
(signed word) mulf16s::b#3
(signed word) mulf16s::b#4
(signed word) mulf16s::b#5
(signed word) mulf16s::b#6
(signed word) mulf16s::b#7
(dword) mulf16s::m
(dword) mulf16s::m#0
(dword) mulf16s::m#1
(dword) mulf16s::m#2
(dword) mulf16s::m#3
(dword) mulf16s::m#4
(dword) mulf16s::m#5
(dword) mulf16s::m#6
(signed dword) mulf16s::return
(signed dword) mulf16s::return#0
(signed dword) mulf16s::return#1
(signed dword) mulf16s::return#10
(signed dword) mulf16s::return#2
(signed dword) mulf16s::return#3
(signed dword) mulf16s::return#4
(signed dword) mulf16s::return#5
(signed dword) mulf16s::return#6
(signed dword) mulf16s::return#7
(signed dword) mulf16s::return#8
(signed dword) mulf16s::return#9
(dword()) mulf16u((word) mulf16u::a , (word) mulf16u::b)
(label) mulf16u::@return
(word) mulf16u::a
(word) mulf16u::a#0
(word) mulf16u::a#1
(word) mulf16u::b
(word) mulf16u::b#0
(word) mulf16u::b#1
(const nomodify word*) mulf16u::memA = (word*)(number) $f8
(const nomodify word*) mulf16u::memB = (word*)(number) $fa
(const nomodify dword*) mulf16u::memR = (dword*)(number) $fc
(dword) mulf16u::return
(dword) mulf16u::return#0
(dword) mulf16u::return#1
(dword) mulf16u::return#2
(dword) mulf16u::return#3
(dword) mulf16u::return#4
(void()) mulf_init()
(bool~) mulf_init::$0
(number~) mulf_init::$1
(bool~) mulf_init::$10
(bool~) mulf_init::$2
(bool~) mulf_init::$3
(byte~) mulf_init::$4
(byte~) mulf_init::$5
(word~) mulf_init::$6
(bool~) mulf_init::$7
(byte~) mulf_init::$8
(bool~) mulf_init::$9
(label) mulf_init::@1
(label) mulf_init::@10
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@9
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#0
(byte) mulf_init::c#1
(byte) mulf_init::c#2
(byte) mulf_init::c#3
(byte) mulf_init::c#4
(byte) mulf_init::c#5
(byte) mulf_init::dir
(byte) mulf_init::dir#0
(byte) mulf_init::dir#1
(byte) mulf_init::dir#2
(byte) mulf_init::dir#3
(byte) mulf_init::dir#4
(word) mulf_init::sqr
(word) mulf_init::sqr#0
(word) mulf_init::sqr#1
(word) mulf_init::sqr#2
(word) mulf_init::sqr#3
(word) mulf_init::sqr#4
(word) mulf_init::sqr#5
(word) mulf_init::sqr#6
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#0
(byte*) mulf_init::sqr1_hi#1
(byte*) mulf_init::sqr1_hi#2
(byte*) mulf_init::sqr1_hi#3
(byte*) mulf_init::sqr1_hi#4
(byte*) mulf_init::sqr1_hi#5
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#0
(byte*) mulf_init::sqr1_lo#1
(byte*) mulf_init::sqr1_lo#2
(byte*) mulf_init::sqr1_lo#3
(byte*) mulf_init::sqr1_lo#4
(byte*) mulf_init::sqr1_lo#5
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#0
(byte*) mulf_init::sqr2_hi#1
(byte*) mulf_init::sqr2_hi#2
(byte*) mulf_init::sqr2_hi#3
(byte*) mulf_init::sqr2_hi#4
(byte*) mulf_init::sqr2_hi#5
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#0
(byte*) mulf_init::sqr2_lo#1
(byte*) mulf_init::sqr2_lo#2
(byte*) mulf_init::sqr2_lo#3
(byte*) mulf_init::sqr2_lo#4
(byte*) mulf_init::sqr2_lo#5
(byte) mulf_init::x_2
(byte) mulf_init::x_2#0
(byte) mulf_init::x_2#1
(byte) mulf_init::x_2#2
(byte) mulf_init::x_2#3
(byte) mulf_init::x_2#4
(byte) mulf_init::x_2#5
(byte) mulf_init::x_255
(byte) mulf_init::x_255#0
(byte) mulf_init::x_255#1
(byte) mulf_init::x_255#2
(byte) mulf_init::x_255#3
(byte) mulf_init::x_255#4
(byte) mulf_init::x_255#5
(const byte*) mulf_sqr1_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr1_lo[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_lo[(number) $200]  = { fill( $200, 0) }
(struct SplineVector16()) rotate((signed word) rotate::vector_x , (signed word) rotate::vector_y , (byte) rotate::angle)
(signed dword~) rotate::$0
(number~) rotate::$1
(signed word~) rotate::$10
(signed word~) rotate::$11
(signed word~) rotate::$12
(signed word~) rotate::$13
(signed dword~) rotate::$2
(number~) rotate::$3
(signed dword~) rotate::$4
(number~) rotate::$5
(signed dword~) rotate::$6
(number~) rotate::$7
(byte~) rotate::$8
(byte~) rotate::$9
(label) rotate::@1
(label) rotate::@2
(label) rotate::@3
(label) rotate::@4
(label) rotate::@return
(byte) rotate::angle
(byte) rotate::angle#0
(byte) rotate::angle#1
(byte) rotate::angle#2
(byte) rotate::angle#3
(byte) rotate::angle#4
(signed word) rotate::cos_a
(signed word) rotate::cos_a#0
(signed word) rotate::cos_a#1
(struct SplineVector16) rotate::return
(struct SplineVector16) rotate::return#0
(struct SplineVector16) rotate::return#1
(signed word) rotate::return_x
(signed word) rotate::return_x#0
(signed word) rotate::return_x#1
(signed word) rotate::return_x#2
(signed word) rotate::return_x#3
(signed word) rotate::return_x#4
(signed word) rotate::return_x#5
(signed word) rotate::return_x#6
(signed word) rotate::return_y
(signed word) rotate::return_y#0
(signed word) rotate::return_y#1
(signed word) rotate::return_y#2
(signed word) rotate::return_y#3
(signed word) rotate::return_y#4
(signed word) rotate::return_y#5
(signed word) rotate::return_y#6
(signed word) rotate::rotated_x
(signed word) rotate::rotated_x#0
(signed word) rotate::rotated_y
(signed word) rotate::rotated_y#0
(signed word) rotate::sin_a
(signed word) rotate::sin_a#0
(signed word) rotate::sin_a#1
(struct SplineVector16) rotate::vector
(signed word) rotate::vector_x
(signed word) rotate::vector_x#0
(signed word) rotate::vector_x#1
(signed word) rotate::vector_x#2
(signed word) rotate::vector_x#3
(signed word) rotate::vector_x#4
(signed word) rotate::vector_x#5
(signed word) rotate::vector_y
(signed word) rotate::vector_y#0
(signed word) rotate::vector_y#1
(signed word) rotate::vector_y#2
(signed word) rotate::vector_y#3
(signed word) rotate::vector_y#4
(signed word) rotate::xr
(signed word) rotate::xr#0
(signed word) rotate::xr#1
(signed word) rotate::xr#2
(signed word) rotate::xr#3
(signed word) rotate::xr#4
(signed word) rotate::yr
(signed word) rotate::yr#0
(signed word) rotate::yr#1
(signed word) rotate::yr#2
(signed word) rotate::yr#3
(word()) sgn_u16((word) sgn_u16::w)
(byte~) sgn_u16::$0
(number~) sgn_u16::$1
(bool~) sgn_u16::$2
(label) sgn_u16::@1
(label) sgn_u16::@2
(label) sgn_u16::@return
(word) sgn_u16::return
(word) sgn_u16::return#0
(word) sgn_u16::return#1
(word) sgn_u16::return#2
(word) sgn_u16::return#3
(word) sgn_u16::return#4
(word) sgn_u16::return#5
(word) sgn_u16::return#6
(word) sgn_u16::return#7
(word) sgn_u16::w
(word) sgn_u16::w#0
(word) sgn_u16::w#1
(word) sgn_u16::w#2
(void()) show_letter((byte) show_letter::angle)
(number~) show_letter::$0
(number~) show_letter::$1
(bool~) show_letter::$10
(bool~) show_letter::$11
(bool~) show_letter::$15
(byte~) show_letter::$16
(byte~) show_letter::$17
(byte~) show_letter::$18
(signed word~) show_letter::$2_x
(signed word~) show_letter::$2_y
(number~) show_letter::$3
(number~) show_letter::$4
(number~) show_letter::$5
(number~) show_letter::$6
(signed word~) show_letter::$7_x
(signed word~) show_letter::$7_y
(number~) show_letter::$8
(number~) show_letter::$9
(label) show_letter::@1
(label) show_letter::@10
(label) show_letter::@11
(label) show_letter::@2
(label) show_letter::@3
(label) show_letter::@4
(label) show_letter::@5
(label) show_letter::@6
(label) show_letter::@7
(label) show_letter::@8
(label) show_letter::@9
(label) show_letter::@return
(byte) show_letter::angle
(byte) show_letter::angle#0
(byte) show_letter::angle#1
(byte) show_letter::angle#10
(byte) show_letter::angle#11
(byte) show_letter::angle#12
(byte) show_letter::angle#2
(byte) show_letter::angle#3
(byte) show_letter::angle#4
(byte) show_letter::angle#5
(byte) show_letter::angle#6
(byte) show_letter::angle#7
(byte) show_letter::angle#8
(byte) show_letter::angle#9
(signed word) show_letter::current_x
(signed word) show_letter::current_x#0
(signed word) show_letter::current_x#1
(signed word) show_letter::current_x#10
(signed word) show_letter::current_x#2
(signed word) show_letter::current_x#3
(signed word) show_letter::current_x#4
(signed word) show_letter::current_x#5
(signed word) show_letter::current_x#6
(signed word) show_letter::current_x#7
(signed word) show_letter::current_x#8
(signed word) show_letter::current_x#9
(signed word) show_letter::current_y
(signed word) show_letter::current_y#0
(signed word) show_letter::current_y#1
(signed word) show_letter::current_y#10
(signed word) show_letter::current_y#2
(signed word) show_letter::current_y#3
(signed word) show_letter::current_y#4
(signed word) show_letter::current_y#5
(signed word) show_letter::current_y#6
(signed word) show_letter::current_y#7
(signed word) show_letter::current_y#8
(signed word) show_letter::current_y#9
(byte) show_letter::i
(byte) show_letter::i#0
(byte) show_letter::i#1
(byte) show_letter::i#10
(byte) show_letter::i#11
(byte) show_letter::i#12
(byte) show_letter::i#2
(byte) show_letter::i#3
(byte) show_letter::i#4
(byte) show_letter::i#5
(byte) show_letter::i#6
(byte) show_letter::i#7
(byte) show_letter::i#8
(byte) show_letter::i#9
(struct SplineVector16) show_letter::segment_to
(signed word) show_letter::segment_to_x
(signed word) show_letter::segment_to_x#0
(signed word) show_letter::segment_to_x#1
(signed word) show_letter::segment_to_x#2
(signed word) show_letter::segment_to_x#3
(signed word) show_letter::segment_to_x#4
(signed word) show_letter::segment_to_x#5
(signed word) show_letter::segment_to_x#6
(signed word) show_letter::segment_to_x#7
(signed word) show_letter::segment_to_y
(signed word) show_letter::segment_to_y#0
(signed word) show_letter::segment_to_y#1
(signed word) show_letter::segment_to_y#2
(signed word) show_letter::segment_to_y#3
(signed word) show_letter::segment_to_y#4
(signed word) show_letter::segment_to_y#5
(signed word) show_letter::segment_to_y#6
(signed word) show_letter::segment_to_y#7
(byte) show_letter::segment_type
(byte) show_letter::segment_type#0
(byte) show_letter::segment_type#1
(struct SplineVector16) show_letter::segment_via
(signed word) show_letter::segment_via_x
(signed word) show_letter::segment_via_x#0
(signed word) show_letter::segment_via_x#1
(signed word) show_letter::segment_via_x#2
(signed word) show_letter::segment_via_y
(signed word) show_letter::segment_via_y#0
(signed word) show_letter::segment_via_y#1
(signed word) show_letter::segment_via_y#2
(signed word) show_letter::to_x
(signed word) show_letter::to_x#0
(signed word) show_letter::to_x#1
(signed word) show_letter::to_x#2
(signed word) show_letter::to_x#3
(signed word) show_letter::to_x#4
(signed word) show_letter::to_y
(signed word) show_letter::to_y#0
(signed word) show_letter::to_y#1
(signed word) show_letter::to_y#2
(signed word) show_letter::to_y#3
(signed word) show_letter::to_y#4
(signed word) show_letter::via_x
(signed word) show_letter::via_x#0
(signed word) show_letter::via_x#1
(signed word) show_letter::via_x#2
(signed word) show_letter::via_x#3
(signed word) show_letter::via_y
(signed word) show_letter::via_y#0
(signed word) show_letter::via_y#1
(signed word) show_letter::via_y#2
(signed word) show_letter::via_y#3
(void()) spline_8segB((signed word) spline_8segB::p0_x , (signed word) spline_8segB::p0_y , (signed word) spline_8segB::p1_x , (signed word) spline_8segB::p1_y , (signed word) spline_8segB::p2_x , (signed word) spline_8segB::p2_y)
(number~) spline_8segB::$0
(number~) spline_8segB::$1
(number~) spline_8segB::$10
(number~) spline_8segB::$11
(number~) spline_8segB::$12
(number~) spline_8segB::$13
(number~) spline_8segB::$14
(number~) spline_8segB::$15
(number~) spline_8segB::$16
(number~) spline_8segB::$17
(number~) spline_8segB::$18
(number~) spline_8segB::$19
(number~) spline_8segB::$2
(number~) spline_8segB::$20
(number~) spline_8segB::$21
(number~) spline_8segB::$22
(number~) spline_8segB::$23
(number~) spline_8segB::$24
(number~) spline_8segB::$25
(signed word~) spline_8segB::$26
(signed word~) spline_8segB::$27
(signed word~) spline_8segB::$28
(signed word~) spline_8segB::$29
(number~) spline_8segB::$3
(bool~) spline_8segB::$30
(byte~) spline_8segB::$31
(number~) spline_8segB::$32
(number~) spline_8segB::$4
(number~) spline_8segB::$5
(signed word~) spline_8segB::$6
(number~) spline_8segB::$7
(signed word~) spline_8segB::$8
(number~) spline_8segB::$9
(label) spline_8segB::@1
(label) spline_8segB::@2
(label) spline_8segB::@return
(signed word) spline_8segB::a_x
(signed word) spline_8segB::a_x#0
(signed word) spline_8segB::a_y
(signed word) spline_8segB::a_y#0
(signed word) spline_8segB::b_x
(signed word) spline_8segB::b_x#0
(signed word) spline_8segB::b_y
(signed word) spline_8segB::b_y#0
(signed word) spline_8segB::i_x
(signed word) spline_8segB::i_x#0
(signed word) spline_8segB::i_x#1
(signed word) spline_8segB::i_x#2
(signed word) spline_8segB::i_y
(signed word) spline_8segB::i_y#0
(signed word) spline_8segB::i_y#1
(signed word) spline_8segB::i_y#2
(signed word) spline_8segB::j_x
(signed word) spline_8segB::j_x#0
(signed word) spline_8segB::j_x#1
(signed word) spline_8segB::j_y
(signed word) spline_8segB::j_y#0
(signed word) spline_8segB::j_y#1
(byte) spline_8segB::n
(byte) spline_8segB::n#0
(byte) spline_8segB::n#1
(byte) spline_8segB::n#2
(struct SplineVector16) spline_8segB::p0
(signed word) spline_8segB::p0_x
(signed word) spline_8segB::p0_x#0
(signed word) spline_8segB::p0_x#1
(signed word) spline_8segB::p0_y
(signed word) spline_8segB::p0_y#0
(signed word) spline_8segB::p0_y#1
(struct SplineVector16) spline_8segB::p1
(signed word) spline_8segB::p1_x
(signed word) spline_8segB::p1_x#0
(signed word) spline_8segB::p1_x#1
(signed word) spline_8segB::p1_y
(signed word) spline_8segB::p1_y#0
(signed word) spline_8segB::p1_y#1
(struct SplineVector16) spline_8segB::p2
(signed word) spline_8segB::p2_x
(signed word) spline_8segB::p2_x#0
(signed word) spline_8segB::p2_x#1
(signed word) spline_8segB::p2_y
(signed word) spline_8segB::p2_y#0
(signed word) spline_8segB::p2_y#1
(signed word) spline_8segB::p_x
(signed word) spline_8segB::p_x#0
(signed word) spline_8segB::p_x#1
(signed word) spline_8segB::p_x#2
(signed word) spline_8segB::p_x#3
(signed word) spline_8segB::p_y
(signed word) spline_8segB::p_y#0
(signed word) spline_8segB::p_y#1
(signed word) spline_8segB::p_y#2
(signed word) spline_8segB::p_y#3

Fixing inline constructor with bitmap_plot::$2 ← (byte)*(bitmap_plot_yhi + bitmap_plot::y#4) w= (byte)*(bitmap_plot_ylo + bitmap_plot::y#4)
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) $40 in 
Adding number conversion cast (snumber) 2 in (number~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#1 * (number) 2
Adding number conversion cast (snumber) spline_8segB::$0 in (number~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#1 * (snumber)(number) 2
Adding number conversion cast (snumber) spline_8segB::$1 in (number~) spline_8segB::$1 ← (signed word) spline_8segB::p2_x#1 - (snumber~) spline_8segB::$0
Adding number conversion cast (snumber) spline_8segB::$2 in (number~) spline_8segB::$2 ← (snumber~) spline_8segB::$1 + (signed word) spline_8segB::p0_x#1
Adding number conversion cast (snumber) 2 in (number~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#1 * (number) 2
Adding number conversion cast (snumber) spline_8segB::$3 in (number~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#1 * (snumber)(number) 2
Adding number conversion cast (snumber) spline_8segB::$4 in (number~) spline_8segB::$4 ← (signed word) spline_8segB::p2_y#1 - (snumber~) spline_8segB::$3
Adding number conversion cast (snumber) spline_8segB::$5 in (number~) spline_8segB::$5 ← (snumber~) spline_8segB::$4 + (signed word) spline_8segB::p0_y#1
Adding number conversion cast (snumber) 2 in (number~) spline_8segB::$7 ← (signed word~) spline_8segB::$6 * (number) 2
Adding number conversion cast (snumber) spline_8segB::$7 in (number~) spline_8segB::$7 ← (signed word~) spline_8segB::$6 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) spline_8segB::$9 ← (signed word~) spline_8segB::$8 * (number) 2
Adding number conversion cast (snumber) spline_8segB::$9 in (number~) spline_8segB::$9 ← (signed word~) spline_8segB::$8 * (snumber)(number) 2
Adding number conversion cast (snumber) 8 in (number~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 * (number) 8
Adding number conversion cast (snumber) spline_8segB::$10 in (number~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 * (snumber)(number) 8
Adding number conversion cast (snumber) spline_8segB::$11 in (number~) spline_8segB::$11 ← (signed word) spline_8segB::a_x#0 + (snumber~) spline_8segB::$10
Adding number conversion cast (snumber) 8 in (number~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 * (number) 8
Adding number conversion cast (snumber) spline_8segB::$12 in (number~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 * (snumber)(number) 8
Adding number conversion cast (snumber) spline_8segB::$13 in (number~) spline_8segB::$13 ← (signed word) spline_8segB::a_y#0 + (snumber~) spline_8segB::$12
Adding number conversion cast (snumber) 2 in (number~) spline_8segB::$14 ← (signed word) spline_8segB::a_x#0 * (number) 2
Adding number conversion cast (snumber) spline_8segB::$14 in (number~) spline_8segB::$14 ← (signed word) spline_8segB::a_x#0 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) spline_8segB::$15 ← (signed word) spline_8segB::a_y#0 * (number) 2
Adding number conversion cast (snumber) spline_8segB::$15 in (number~) spline_8segB::$15 ← (signed word) spline_8segB::a_y#0 * (snumber)(number) 2
Adding number conversion cast (snumber) $40 in (number~) spline_8segB::$16 ← (signed word) spline_8segB::p0_x#1 * (number) $40
Adding number conversion cast (snumber) spline_8segB::$16 in (number~) spline_8segB::$16 ← (signed word) spline_8segB::p0_x#1 * (snumber)(number) $40
Adding number conversion cast (snumber) $40 in (number~) spline_8segB::$17 ← (signed word) spline_8segB::p0_y#1 * (number) $40
Adding number conversion cast (snumber) spline_8segB::$17 in (number~) spline_8segB::$17 ← (signed word) spline_8segB::p0_y#1 * (snumber)(number) $40
Adding number conversion cast (snumber) $20 in (number~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (number) $20
Adding number conversion cast (snumber) spline_8segB::$22 in (number~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (snumber)(number) $20
Adding number conversion cast (snumber) $40 in (number~) spline_8segB::$23 ← (snumber~) spline_8segB::$22 / (number) $40
Adding number conversion cast (snumber) spline_8segB::$23 in (number~) spline_8segB::$23 ← (snumber~) spline_8segB::$22 / (snumber)(number) $40
Adding number conversion cast (snumber) $20 in (number~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (number) $20
Adding number conversion cast (snumber) spline_8segB::$24 in (number~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (snumber)(number) $20
Adding number conversion cast (snumber) $40 in (number~) spline_8segB::$25 ← (snumber~) spline_8segB::$24 / (number) $40
Adding number conversion cast (snumber) spline_8segB::$25 in (number~) spline_8segB::$25 ← (snumber~) spline_8segB::$24 / (snumber)(number) $40
Adding number conversion cast (snumber) $20 in (number~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#3 + (number) $20
Adding number conversion cast (snumber) spline_8segB::$18 in (number~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#3 + (snumber)(number) $20
Adding number conversion cast (snumber) $40 in (number~) spline_8segB::$19 ← (snumber~) spline_8segB::$18 / (number) $40
Adding number conversion cast (snumber) spline_8segB::$19 in (number~) spline_8segB::$19 ← (snumber~) spline_8segB::$18 / (snumber)(number) $40
Adding number conversion cast (snumber) $20 in (number~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#3 + (number) $20
Adding number conversion cast (snumber) spline_8segB::$20 in (number~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#3 + (snumber)(number) $20
Adding number conversion cast (snumber) $40 in (number~) spline_8segB::$21 ← (snumber~) spline_8segB::$20 / (number) $40
Adding number conversion cast (snumber) spline_8segB::$21 in (number~) spline_8segB::$21 ← (snumber~) spline_8segB::$20 / (snumber)(number) $40
Adding number conversion cast (unumber) 8 in (number~) spline_8segB::$32 ← (number) 8 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Adding number conversion cast (unumber) spline_8segB::$32 in (number~) spline_8segB::$32 ← (unumber)(number) 8 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 1 in (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (number) 1
Adding number conversion cast (unumber) 0 in (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (number) 0
Adding number conversion cast (unumber) $80 in (byte) bitmap_init::bits#2 ← (number) $80
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$3 in (number~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) bitmap_init::$5 in (number~) bitmap_init::$5 ← (unumber~) bitmap_init::$3 | (byte~) bitmap_init::$4
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$7 in (number~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) 7 in (bool~) bitmap_init::$8 ← (unumber~) bitmap_init::$7 == (number) 7
Adding number conversion cast (unumber) $28*8 in (byte*~) bitmap_init::$10 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
Adding number conversion cast (unumber) $10 in (number~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#2 * (number) $10
Adding number conversion cast (unumber) bitmap_clear::$0 in (number~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#2 * (unumber)(number) $10
Adding number conversion cast (unumber) bitmap_clear::$1 in (number~) bitmap_clear::$1 ← (unumber~) bitmap_clear::$0 + (byte) bitmap_clear::bgcol#2
Adding number conversion cast (unumber) 0 in (byte) memset::c#1 ← (number) 0
Adding number conversion cast (unumber) $fff8 in (number~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (number) $fff8
Adding number conversion cast (unumber) bitmap_plot::$0 in (number~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (unumber)(number) $fff8
Adding number conversion cast (unumber) 0 in (bool~) bitmap_line::$4 ← (word) bitmap_line::dx#1 == (number) 0
Adding number conversion cast (unumber) 0 in (bool~) bitmap_line::$5 ← (word) bitmap_line::dy#0 == (number) 0
Adding number conversion cast (unumber) 2 in (number~) bitmap_line::$20 ← (word) bitmap_line::dy#2 / (number) 2
Adding number conversion cast (unumber) bitmap_line::$20 in (number~) bitmap_line::$20 ← (word) bitmap_line::dy#2 / (unumber)(number) 2
Adding number conversion cast (unumber) 2 in (number~) bitmap_line::$15 ← (word) bitmap_line::dx#3 / (number) 2
Adding number conversion cast (unumber) bitmap_line::$15 in (number~) bitmap_line::$15 ← (word) bitmap_line::dx#3 / (unumber)(number) 2
Adding number conversion cast (unumber) $80 in (number~) abs_u16::$1 ← (byte~) abs_u16::$0 & (number) $80
Adding number conversion cast (unumber) abs_u16::$1 in (number~) abs_u16::$1 ← (byte~) abs_u16::$0 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) abs_u16::$3 ← (number) 0 != (unumber~) abs_u16::$1
Adding number conversion cast (unumber) $80 in (number~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (number) $80
Adding number conversion cast (unumber) sgn_u16::$1 in (number~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) sgn_u16::$2 ← (number) 0 != (unumber~) sgn_u16::$1
Adding number conversion cast (unumber) -1 in (word) sgn_u16::return#2 ← (number) -1
Adding number conversion cast (unumber) 1 in (word) sgn_u16::return#3 ← (number) 1
Adding number conversion cast (unumber) 1 in (byte*) mulf_init::sqr1_hi#0 ← (const byte*) mulf_sqr1_hi+(number) 1
Adding number conversion cast (unumber) 1 in (byte*) mulf_init::sqr1_lo#0 ← (const byte*) mulf_sqr1_lo+(number) 1
Adding number conversion cast (unumber) $200 in (bool~) mulf_init::$0 ← (byte*) mulf_init::sqr1_lo#2 != (const byte*) mulf_sqr1_lo+(number) $200
Adding number conversion cast (unumber) 1 in (number~) mulf_init::$1 ← (byte) mulf_init::c#1 & (number) 1
Adding number conversion cast (unumber) mulf_init::$1 in (number~) mulf_init::$1 ← (byte) mulf_init::c#1 & (unumber)(number) 1
Adding number conversion cast (unumber) 0 in (bool~) mulf_init::$2 ← (unumber~) mulf_init::$1 == (number) 0
Adding number conversion cast (unumber) $1ff in (bool~) mulf_init::$7 ← (byte*) mulf_init::sqr2_lo#2 != (const byte*) mulf_sqr2_lo+(number) $1ff
Adding number conversion cast (unumber) 0 in (bool~) mulf_init::$9 ← (byte) mulf_init::x_255#1 == (number) 0
Adding number conversion cast (unumber) $100 in *((const byte*) mulf_sqr2_lo+(number) $1ff) ← *((const byte*) mulf_sqr1_lo+(number) $100)
Adding number conversion cast (unumber) $1ff in *((const byte*) mulf_sqr2_lo+(number) $1ff) ← *((const byte*) mulf_sqr1_lo+(unumber)(number) $100)
Adding number conversion cast (unumber) $100 in *((const byte*) mulf_sqr2_hi+(number) $1ff) ← *((const byte*) mulf_sqr1_hi+(number) $100)
Adding number conversion cast (unumber) $1ff in *((const byte*) mulf_sqr2_hi+(number) $1ff) ← *((const byte*) mulf_sqr1_hi+(unumber)(number) $100)
Adding number conversion cast (unumber) 1 in (byte) mulf_init::dir#1 ← (number) 1
Adding number conversion cast (snumber) 0 in (bool~) mulf16s::$1 ← (signed word) mulf16s::a#5 < (number) 0
Adding number conversion cast (snumber) 0 in (bool~) mulf16s::$3 ← (signed word) mulf16s::b#5 < (number) 0
Adding number conversion cast (unumber) 3 in *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (number) 3
Adding number conversion cast (unumber) $40 in (number~) main::vicSelectGfxBank1_toDd001_$1 ← (byte~) main::vicSelectGfxBank1_toDd001_$0 / (number) $40
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$1 in (number~) main::vicSelectGfxBank1_toDd001_$1 ← (byte~) main::vicSelectGfxBank1_toDd001_$0 / (unumber)(number) $40
Adding number conversion cast (unumber) 3 in (number~) main::vicSelectGfxBank1_toDd001_$2 ← (number) 3 ^ (unumber~) main::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$2 in (number~) main::vicSelectGfxBank1_toDd001_$2 ← (unumber)(number) 3 ^ (unumber~) main::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) $3fff in (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (number) $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in (number~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (unumber)(number) $3fff
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$1 ← (unumber~) main::toD0181_$0 * (number) 4
Adding number conversion cast (unumber) main::toD0181_$1 in (number~) main::toD0181_$1 ← (unumber~) main::toD0181_$0 * (unumber)(number) 4
Adding number conversion cast (unumber) main::toD0181_$2 in (number~) main::toD0181_$2 ← > (unumber~) main::toD0181_$1
Adding number conversion cast (unumber) 4 in (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (number) 4
Adding number conversion cast (unumber) main::toD0181_$4 in (number~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (unumber)(number) 4
Adding number conversion cast (unumber) $f in (number~) main::toD0181_$5 ← (unumber~) main::toD0181_$4 & (number) $f
Adding number conversion cast (unumber) main::toD0181_$5 in (number~) main::toD0181_$5 ← (unumber~) main::toD0181_$4 & (unumber)(number) $f
Adding number conversion cast (unumber) main::toD0181_$6 in (number~) main::toD0181_$6 ← (unumber~) main::toD0181_$2 | (unumber~) main::toD0181_$5
Adding number conversion cast (unumber) VIC_BMM|VIC_DEN|VIC_RSEL|3 in *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) 3 in *((const nomodify byte*) D011) ← ((unumber)) (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(number) 3
Adding number conversion cast (unumber) $fe in (bool~) main::$7 ← *((const nomodify byte*) RASTER) != (number) $fe
Adding number conversion cast (unumber) $ff in (bool~) main::$8 ← *((const nomodify byte*) RASTER) != (number) $ff
Adding number conversion cast (unumber) 9 in (byte) main::angle#1 ← (byte) main::angle#3 + (number) 9
Adding number conversion cast (unumber) $3e7 in *((const nomodify byte*) PRINT_SCREEN+(number) $3e7) ← ++ *((const nomodify byte*) PRINT_SCREEN+(number) $3e7)
Adding number conversion cast (snumber) $32 in (number~) show_letter::$0 ← (signed word) show_letter::to_x#0 - (number) $32
Adding number conversion cast (snumber) show_letter::$0 in (number~) show_letter::$0 ← (signed word) show_letter::to_x#0 - (snumber)(number) $32
Adding number conversion cast (snumber) $96 in (number~) show_letter::$1 ← (signed word) show_letter::to_y#0 - (number) $96
Adding number conversion cast (snumber) show_letter::$1 in (number~) show_letter::$1 ← (signed word) show_letter::to_y#0 - (snumber)(number) $96
Adding number conversion cast (snumber) $64 in (number~) show_letter::$3 ← (signed word) show_letter::to_x#2 + (number) $64
Adding number conversion cast (snumber) show_letter::$3 in (number~) show_letter::$3 ← (signed word) show_letter::to_x#2 + (snumber)(number) $64
Adding number conversion cast (snumber) $64 in (number~) show_letter::$4 ← (signed word) show_letter::to_y#2 + (number) $64
Adding number conversion cast (snumber) show_letter::$4 in (number~) show_letter::$4 ← (signed word) show_letter::to_y#2 + (snumber)(number) $64
Adding number conversion cast (snumber) $32 in (number~) show_letter::$5 ← (signed word) show_letter::via_x#0 - (number) $32
Adding number conversion cast (snumber) show_letter::$5 in (number~) show_letter::$5 ← (signed word) show_letter::via_x#0 - (snumber)(number) $32
Adding number conversion cast (snumber) $96 in (number~) show_letter::$6 ← (signed word) show_letter::via_y#0 - (number) $96
Adding number conversion cast (snumber) show_letter::$6 in (number~) show_letter::$6 ← (signed word) show_letter::via_y#0 - (snumber)(number) $96
Adding number conversion cast (snumber) $64 in (number~) show_letter::$8 ← (signed word) show_letter::via_x#2 + (number) $64
Adding number conversion cast (snumber) show_letter::$8 in (number~) show_letter::$8 ← (signed word) show_letter::via_x#2 + (snumber)(number) $64
Adding number conversion cast (snumber) $64 in (number~) show_letter::$9 ← (signed word) show_letter::via_y#2 + (number) $64
Adding number conversion cast (snumber) show_letter::$9 in (number~) show_letter::$9 ← (signed word) show_letter::via_y#2 + (snumber)(number) $64
Adding number conversion cast (unumber) 0 in (number~) bitmap_plot_spline_8seg::$2 ← (number) 0 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Adding number conversion cast (unumber) bitmap_plot_spline_8seg::$2 in (number~) bitmap_plot_spline_8seg::$2 ← (unumber)(number) 0 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Adding number conversion cast (snumber) 2 in (number~) rotate::$1 ← (signed word~) rotate::$10 * (number) 2
Adding number conversion cast (snumber) rotate::$1 in (number~) rotate::$1 ← (signed word~) rotate::$10 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) rotate::$3 ← (signed word~) rotate::$11 * (number) 2
Adding number conversion cast (snumber) rotate::$3 in (number~) rotate::$3 ← (signed word~) rotate::$11 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) rotate::$5 ← (signed word~) rotate::$12 * (number) 2
Adding number conversion cast (snumber) rotate::$5 in (number~) rotate::$5 ← (signed word~) rotate::$12 * (snumber)(number) 2
Adding number conversion cast (snumber) 2 in (number~) rotate::$7 ← (signed word~) rotate::$13 * (number) 2
Adding number conversion cast (snumber) rotate::$7 in (number~) rotate::$7 ← (signed word~) rotate::$13 * (snumber)(number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (byte) bitmap_init::bits#2 ← (unumber)(number) $80
Inlining cast (byte) memset::c#1 ← (unumber)(number) 0
Inlining cast (word) sgn_u16::return#2 ← (unumber)(number) -1
Inlining cast (word) sgn_u16::return#3 ← (unumber)(number) 1
Inlining cast (byte) mulf_init::dir#1 ← (unumber)(number) 1
Inlining cast *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (unumber)(number) 3
Inlining cast *((const nomodify byte*) D011) ← (unumber)(const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (word*) 248
Simplifying constant pointer cast (word*) 250
Simplifying constant pointer cast (dword*) 252
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 23552
Simplifying constant pointer cast (byte*) 24576
Simplifying constant integer cast $40
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $40
Simplifying constant integer cast $40
Simplifying constant integer cast $20
Simplifying constant integer cast $40
Simplifying constant integer cast $20
Simplifying constant integer cast $40
Simplifying constant integer cast $20
Simplifying constant integer cast $40
Simplifying constant integer cast $20
Simplifying constant integer cast $40
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4)
Simplifying constant integer cast *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
Simplifying constant integer cast $fff8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $200
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast -1
Simplifying constant integer cast $1ff
Simplifying constant integer cast 0
Simplifying constant integer cast $100
Simplifying constant integer cast $1ff
Simplifying constant integer cast $100
Simplifying constant integer cast $1ff
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(unumber)(number) 3
Simplifying constant integer cast 3
Simplifying constant integer cast $fe
Simplifying constant integer cast $ff
Simplifying constant integer cast 9
Simplifying constant integer cast $3e7
Simplifying constant integer cast $32
Simplifying constant integer cast $96
Simplifying constant integer cast $64
Simplifying constant integer cast $64
Simplifying constant integer cast $32
Simplifying constant integer cast $96
Simplifying constant integer cast $64
Simplifying constant integer cast $64
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $40
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 8
Finalized signed number type (signed byte) 8
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) $20
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) $20
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) $20
Finalized signed number type (signed byte) $40
Finalized signed number type (signed byte) $20
Finalized signed number type (signed byte) $40
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $fff8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) -1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $200
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (word) $100
Finalized unsigned number type (word) $1ff
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $fe
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 9
Finalized unsigned number type (word) $3e7
Finalized signed number type (signed byte) $32
Finalized signed number type (signed word) $96
Finalized signed number type (signed byte) $64
Finalized signed number type (signed byte) $64
Finalized signed number type (signed byte) $32
Finalized signed number type (signed word) $96
Finalized signed number type (signed byte) $64
Finalized signed number type (signed byte) $64
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Finalized signed number type (signed byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to signed word in (snumber~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#1 * (signed byte) 2
Inferred type updated to signed word in (snumber~) spline_8segB::$1 ← (signed word) spline_8segB::p2_x#1 - (signed word~) spline_8segB::$0
Inferred type updated to signed word in (snumber~) spline_8segB::$2 ← (signed word~) spline_8segB::$1 + (signed word) spline_8segB::p0_x#1
Inferred type updated to signed word in (snumber~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#1 * (signed byte) 2
Inferred type updated to signed word in (snumber~) spline_8segB::$4 ← (signed word) spline_8segB::p2_y#1 - (signed word~) spline_8segB::$3
Inferred type updated to signed word in (snumber~) spline_8segB::$5 ← (signed word~) spline_8segB::$4 + (signed word) spline_8segB::p0_y#1
Inferred type updated to signed word in (snumber~) spline_8segB::$7 ← (signed word~) spline_8segB::$6 * (signed byte) 2
Inferred type updated to signed word in (snumber~) spline_8segB::$9 ← (signed word~) spline_8segB::$8 * (signed byte) 2
Inferred type updated to signed word in (snumber~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 * (signed byte) 8
Inferred type updated to signed word in (snumber~) spline_8segB::$11 ← (signed word) spline_8segB::a_x#0 + (signed word~) spline_8segB::$10
Inferred type updated to signed word in (snumber~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 * (signed byte) 8
Inferred type updated to signed word in (snumber~) spline_8segB::$13 ← (signed word) spline_8segB::a_y#0 + (signed word~) spline_8segB::$12
Inferred type updated to signed word in (snumber~) spline_8segB::$14 ← (signed word) spline_8segB::a_x#0 * (signed byte) 2
Inferred type updated to signed word in (snumber~) spline_8segB::$15 ← (signed word) spline_8segB::a_y#0 * (signed byte) 2
Inferred type updated to signed word in (snumber~) spline_8segB::$16 ← (signed word) spline_8segB::p0_x#1 * (signed byte) $40
Inferred type updated to signed word in (snumber~) spline_8segB::$17 ← (signed word) spline_8segB::p0_y#1 * (signed byte) $40
Inferred type updated to signed word in (snumber~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (signed byte) $20
Inferred type updated to signed word in (snumber~) spline_8segB::$23 ← (signed word~) spline_8segB::$22 / (signed byte) $40
Inferred type updated to signed word in (snumber~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (signed byte) $20
Inferred type updated to signed word in (snumber~) spline_8segB::$25 ← (signed word~) spline_8segB::$24 / (signed byte) $40
Inferred type updated to signed word in (snumber~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#3 + (signed byte) $20
Inferred type updated to signed word in (snumber~) spline_8segB::$19 ← (signed word~) spline_8segB::$18 / (signed byte) $40
Inferred type updated to signed word in (snumber~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#3 + (signed byte) $20
Inferred type updated to signed word in (snumber~) spline_8segB::$21 ← (signed word~) spline_8segB::$20 / (signed byte) $40
Inferred type updated to byte in (unumber~) spline_8segB::$32 ← (byte) 8 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Inferred type updated to byte in (unumber~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4
Inferred type updated to byte in (unumber~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#2 * (byte) $10
Inferred type updated to byte in (unumber~) bitmap_clear::$1 ← (byte~) bitmap_clear::$0 + (byte) bitmap_clear::bgcol#2
Inferred type updated to word in (unumber~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8
Inferred type updated to word in (unumber~) bitmap_line::$20 ← (word) bitmap_line::dy#2 / (byte) 2
Inferred type updated to word in (unumber~) bitmap_line::$15 ← (word) bitmap_line::dx#3 / (byte) 2
Inferred type updated to byte in (unumber~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80
Inferred type updated to byte in (unumber~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80
Inferred type updated to byte in (unumber~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1
Inferred type updated to byte in (unumber~) main::vicSelectGfxBank1_toDd001_$1 ← (byte~) main::vicSelectGfxBank1_toDd001_$0 / (byte) $40
Inferred type updated to byte in (unumber~) main::vicSelectGfxBank1_toDd001_$2 ← (byte) 3 ^ (byte~) main::vicSelectGfxBank1_toDd001_$1
Inferred type updated to word in (unumber~) main::toD0181_$0 ← (word~) main::toD0181_$7 & (word) $3fff
Inferred type updated to word in (unumber~) main::toD0181_$1 ← (word~) main::toD0181_$0 * (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$2 ← > (word~) main::toD0181_$1
Inferred type updated to byte in (unumber~) main::toD0181_$4 ← (byte~) main::toD0181_$3 / (byte) 4
Inferred type updated to byte in (unumber~) main::toD0181_$5 ← (byte~) main::toD0181_$4 & (byte) $f
Inferred type updated to byte in (unumber~) main::toD0181_$6 ← (byte~) main::toD0181_$2 | (byte~) main::toD0181_$5
Inferred type updated to signed word in (snumber~) show_letter::$0 ← (signed word) show_letter::to_x#0 - (signed byte) $32
Inferred type updated to signed word in (snumber~) show_letter::$1 ← (signed word) show_letter::to_y#0 - (signed word) $96
Inferred type updated to signed word in (snumber~) show_letter::$3 ← (signed word) show_letter::to_x#2 + (signed byte) $64
Inferred type updated to signed word in (snumber~) show_letter::$4 ← (signed word) show_letter::to_y#2 + (signed byte) $64
Inferred type updated to signed word in (snumber~) show_letter::$5 ← (signed word) show_letter::via_x#0 - (signed byte) $32
Inferred type updated to signed word in (snumber~) show_letter::$6 ← (signed word) show_letter::via_y#0 - (signed word) $96
Inferred type updated to signed word in (snumber~) show_letter::$8 ← (signed word) show_letter::via_x#2 + (signed byte) $64
Inferred type updated to signed word in (snumber~) show_letter::$9 ← (signed word) show_letter::via_y#2 + (signed byte) $64
Inferred type updated to byte in (unumber~) bitmap_plot_spline_8seg::$2 ← (byte) 0 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Inferred type updated to signed word in (snumber~) rotate::$1 ← (signed word~) rotate::$10 * (signed byte) 2
Inferred type updated to signed word in (snumber~) rotate::$3 ← (signed word~) rotate::$11 * (signed byte) 2
Inferred type updated to signed word in (snumber~) rotate::$5 ← (signed word~) rotate::$12 * (signed byte) 2
Inferred type updated to signed word in (snumber~) rotate::$7 ← (signed word~) rotate::$13 * (signed byte) 2
Adding pointer type conversion cast (byte*) bitmap_plot::$2 in (byte*~) bitmap_plot::$2 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
Successful SSA optimization PassNAddTypeConversionAssignment
Inversing boolean not [60] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [59] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [87] (bool~) bitmap_init::$1 ← (byte) bitmap_init::bits#1 != (byte) 0 from [86] (bool~) bitmap_init::$0 ← (byte) bitmap_init::bits#1 == (byte) 0
Inversing boolean not [107] (bool~) bitmap_init::$9 ← (byte~) bitmap_init::$7 != (byte) 7 from [106] (bool~) bitmap_init::$8 ← (byte~) bitmap_init::$7 == (byte) 7
Inversing boolean not [203] (bool~) bitmap_line::$18 ← (word) bitmap_line::dy#3 >= (word) bitmap_line::e#1 from [202] (bool~) bitmap_line::$17 ← (word) bitmap_line::dy#3 < (word) bitmap_line::e#1
Inversing boolean not [223] (bool~) bitmap_line::$23 ← (word) bitmap_line::dx#5 >= (word) bitmap_line::e1#1 from [222] (bool~) bitmap_line::$22 ← (word) bitmap_line::dx#5 < (word) bitmap_line::e1#1
Inversing boolean not [266] (bool~) mulf_init::$3 ← (byte~) mulf_init::$1 != (byte) 0 from [265] (bool~) mulf_init::$2 ← (byte~) mulf_init::$1 == (byte) 0
Inversing boolean not [294] (bool~) mulf_init::$10 ← (byte) mulf_init::x_255#1 != (byte) 0 from [293] (bool~) mulf_init::$9 ← (byte) mulf_init::x_255#1 == (byte) 0
Inversing boolean not [320] (bool~) mulf16s::$2 ← (signed word) mulf16s::a#5 >= (signed byte) 0 from [319] (bool~) mulf16s::$1 ← (signed word) mulf16s::a#5 < (signed byte) 0
Inversing boolean not [324] (bool~) mulf16s::$4 ← (signed word) mulf16s::b#5 >= (signed byte) 0 from [323] (bool~) mulf16s::$3 ← (signed word) mulf16s::b#5 < (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias spline_8segB::a_x#0 = spline_8segB::$2 
Alias spline_8segB::a_y#0 = spline_8segB::$5 
Alias spline_8segB::b_x#0 = spline_8segB::$7 
Alias spline_8segB::b_y#0 = spline_8segB::$9 
Alias spline_8segB::i_x#0 = spline_8segB::$11 
Alias spline_8segB::i_y#0 = spline_8segB::$13 
Alias spline_8segB::j_x#0 = spline_8segB::$14 
Alias spline_8segB::j_y#0 = spline_8segB::$15 
Alias spline_8segB::p_x#0 = spline_8segB::$16 
Alias spline_8segB::p_y#0 = spline_8segB::$17 
Alias spline_8segB::p_x#1 = spline_8segB::$26 spline_8segB::p_x#3 
Alias spline_8segB::p_y#1 = spline_8segB::$27 spline_8segB::p_y#3 
Alias spline_8segB::i_x#1 = spline_8segB::$28 
Alias spline_8segB::i_y#1 = spline_8segB::$29 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias bitmap_init::x#2 = bitmap_init::x#4 
Alias bitmap_init::gfx#4 = bitmap_init::gfx#5 
Alias bitmap_gfx#30 = bitmap_gfx#31 
Alias bitmap_screen#29 = bitmap_screen#30 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#3 bitmap_init::yoffs#0 
Alias bitmap_gfx#24 = bitmap_gfx#27 
Alias bitmap_screen#23 = bitmap_screen#26 
Alias bitmap_init::yoffs#2 = bitmap_init::yoffs#3 
Alias bitmap_init::y#2 = bitmap_init::y#4 
Alias bitmap_gfx#18 = bitmap_gfx#19 
Alias bitmap_screen#18 = bitmap_screen#19 
Alias bitmap_init::yoffs#1 = bitmap_init::$10 
Alias bitmap_gfx#1 = bitmap_gfx#7 bitmap_gfx#13 
Alias bitmap_screen#1 = bitmap_screen#7 bitmap_screen#13 
Alias bitmap_clear::col#0 = bitmap_clear::$1 
Alias bitmap_gfx#14 = bitmap_gfx#8 
Alias bitmap_plot::plotter#0 = bitmap_plot::$2 
Alias bitmap_line::x#0 = bitmap_line::x1#2 bitmap_line::x1#5 bitmap_line::x#16 bitmap_line::x1#4 bitmap_line::x#10 bitmap_line::x1#3 bitmap_line::x#19 bitmap_line::x#18 bitmap_line::x#17 bitmap_line::x#3 bitmap_line::x#14 bitmap_line::x#11 
Alias bitmap_line::y#0 = bitmap_line::y1#2 bitmap_line::y1#3 bitmap_line::y#16 bitmap_line::y#10 bitmap_line::y1#6 bitmap_line::y1#5 bitmap_line::y#19 bitmap_line::y1#4 bitmap_line::y#18 bitmap_line::y#17 bitmap_line::y#3 bitmap_line::y#14 bitmap_line::y#11 
Alias abs_u16::w#0 = bitmap_line::$0 
Alias abs_u16::return#0 = abs_u16::return#5 
Alias bitmap_line::y2#11 = bitmap_line::y2#2 bitmap_line::y2#5 bitmap_line::y2#9 bitmap_line::y2#6 bitmap_line::y2#3 bitmap_line::y2#12 
Alias bitmap_line::x2#10 = bitmap_line::x2#8 bitmap_line::x2#2 bitmap_line::x2#5 bitmap_line::x2#3 bitmap_line::x2#12 bitmap_line::x2#11 
Alias bitmap_line::dx#0 = bitmap_line::$1 bitmap_line::dx#1 bitmap_line::dx#10 bitmap_line::dx#7 bitmap_line::dx#2 bitmap_line::dx#13 bitmap_line::dx#3 
Alias abs_u16::w#1 = bitmap_line::$2 
Alias abs_u16::return#1 = abs_u16::return#6 
Alias bitmap_line::dy#0 = bitmap_line::$3 bitmap_line::dy#9 bitmap_line::dy#6 bitmap_line::dy#1 bitmap_line::dy#2 bitmap_line::dy#10 
Alias sgn_u16::w#0 = bitmap_line::$8 
Alias sgn_u16::return#0 = sgn_u16::return#5 
Alias bitmap_line::sx#0 = bitmap_line::$9 bitmap_line::sx#8 bitmap_line::sx#7 bitmap_line::sx#9 
Alias sgn_u16::w#1 = bitmap_line::$10 
Alias sgn_u16::return#1 = sgn_u16::return#6 
Alias bitmap_line::sy#0 = bitmap_line::$11 bitmap_line::sy#10 bitmap_line::sy#5 
Alias bitmap_line::e1#0 = bitmap_line::$20 
Alias bitmap_line::e#0 = bitmap_line::$15 
Alias bitmap_line::y#4 = bitmap_line::y#5 
Alias bitmap_line::sy#1 = bitmap_line::sy#3 bitmap_line::sy#8 
Alias bitmap_line::e#3 = bitmap_line::e#5 
Alias bitmap_line::dx#14 = bitmap_line::dx#4 bitmap_line::dx#8 
Alias bitmap_line::dy#3 = bitmap_line::dy#7 bitmap_line::dy#4 
Alias bitmap_line::y2#10 = bitmap_line::y2#7 bitmap_line::y2#8 
Alias bitmap_line::x#13 = bitmap_line::x#4 bitmap_line::x#5 
Alias bitmap_line::sx#1 = bitmap_line::sx#3 bitmap_line::sx#5 
Alias bitmap_line::e#1 = bitmap_line::e#4 
Alias bitmap_line::y#1 = bitmap_line::y#12 
Alias bitmap_line::x#7 = bitmap_line::x#8 
Alias bitmap_line::sx#11 = bitmap_line::sx#2 bitmap_line::sx#4 
Alias bitmap_line::e1#3 = bitmap_line::e1#5 
Alias bitmap_line::dy#13 = bitmap_line::dy#5 bitmap_line::dy#8 
Alias bitmap_line::dx#5 = bitmap_line::dx#9 bitmap_line::dx#6 
Alias bitmap_line::x2#6 = bitmap_line::x2#7 bitmap_line::x2#9 
Alias bitmap_line::y#15 = bitmap_line::y#8 bitmap_line::y#9 
Alias bitmap_line::sy#2 = bitmap_line::sy#4 bitmap_line::sy#7 
Alias bitmap_line::e1#1 = bitmap_line::e1#4 
Alias bitmap_line::x#15 = bitmap_line::x#2 
Alias abs_u16::w#2 = abs_u16::w#3 abs_u16::w#4 abs_u16::return#3 
Alias abs_u16::return#2 = abs_u16::$2 
Alias abs_u16::return#4 = abs_u16::return#7 
Alias sgn_u16::return#4 = sgn_u16::return#7 
Alias mulf_init::c#2 = mulf_init::c#3 
Alias mulf_init::sqr#4 = mulf_init::sqr#5 mulf_init::sqr#6 
Alias mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#4 mulf_init::sqr1_lo#5 
Alias mulf_init::sqr1_hi#3 = mulf_init::sqr1_hi#5 mulf_init::sqr1_hi#4 
Alias mulf_init::x_2#3 = mulf_init::x_2#4 mulf_init::x_2#5 
Alias mulf_init::sqr#1 = mulf_init::$6 
Alias mulf_init::c#1 = mulf_init::c#5 
Alias mulf_init::x_255#2 = mulf_init::x_255#3 
Alias mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#3 mulf_init::sqr2_lo#5 
Alias mulf_init::sqr2_hi#2 = mulf_init::sqr2_hi#3 
Alias mulf_init::dir#2 = mulf_init::dir#3 
Alias mulf_init::x_255#1 = mulf_init::$8 mulf_init::x_255#5 
Alias mulf_init::sqr2_hi#1 = mulf_init::sqr2_hi#5 
Alias mulf16u::return#0 = mulf16u::return#3 mulf16u::return#1 
Alias mulf16u::return#2 = mulf16u::return#4 
Alias mulf16s::a#4 = mulf16s::a#5 mulf16s::a#8 
Alias mulf16s::b#4 = mulf16s::b#7 mulf16s::b#6 
Alias mulf16s::m#0 = mulf16s::$0 mulf16s::m#3 
Alias mulf16s::$11 = mulf16s::$7 
Alias mulf16s::m#5 = mulf16s::m#6 
Alias mulf16s::a#6 = mulf16s::a#7 
Alias mulf16s::$12 = mulf16s::$10 
Alias mulf16s::return#0 = mulf16s::return#6 mulf16s::return#1 
Alias bitmap_gfx#15 = bitmap_gfx#21 
Alias bitmap_screen#15 = bitmap_screen#20 
Alias bitmap_gfx#2 = bitmap_gfx#9 bitmap_gfx#42 bitmap_gfx#41 bitmap_gfx#40 bitmap_gfx#38 bitmap_gfx#36 bitmap_gfx#34 bitmap_gfx#32 bitmap_gfx#28 bitmap_gfx#25 
Alias bitmap_screen#2 = bitmap_screen#9 bitmap_screen#41 bitmap_screen#40 bitmap_screen#39 bitmap_screen#37 bitmap_screen#35 bitmap_screen#33 bitmap_screen#31 bitmap_screen#27 bitmap_screen#24 
Alias main::vicSelectGfxBank1_gfx#0 = main::vicSelectGfxBank1_gfx#1 main::vicSelectGfxBank1_toDd001_gfx#0 main::vicSelectGfxBank1_toDd001_gfx#1 
Alias main::vicSelectGfxBank1_toDd001_return#0 = main::vicSelectGfxBank1_toDd001_$2 main::vicSelectGfxBank1_toDd001_return#2 main::vicSelectGfxBank1_toDd001_return#1 main::vicSelectGfxBank1_toDd001_return#3 main::vicSelectGfxBank1_$0 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$4 
Alias bitmap_screen#14 = bitmap_screen#21 bitmap_screen#38 bitmap_screen#36 
Alias main::angle#2 = main::angle#4 main::angle#6 main::angle#9 
Alias bitmap_gfx#20 = bitmap_gfx#22 bitmap_gfx#39 bitmap_gfx#37 
Alias main::w#2 = main::w#3 
Alias main::angle#3 = main::angle#5 main::angle#7 
Alias bitmap_screen#25 = bitmap_screen#28 bitmap_screen#32 
Alias bitmap_gfx#26 = bitmap_gfx#29 bitmap_gfx#33 
Alias bitmap_gfx#10 = bitmap_gfx#23 bitmap_gfx#16 bitmap_gfx#3 
Alias bitmap_screen#10 = bitmap_screen#22 bitmap_screen#16 bitmap_screen#3 
Alias rotate::return_x#0 = rotate::return_x#4 
Alias rotate::return_y#0 = rotate::return_y#4 
Alias show_letter::i#10 = show_letter::i#3 show_letter::i#2 show_letter::i#4 show_letter::i#8 show_letter::i#12 show_letter::i#11 show_letter::i#9 show_letter::i#6 show_letter::i#7 
Alias show_letter::angle#1 = show_letter::angle#2 show_letter::angle#8 show_letter::angle#7 show_letter::angle#12 show_letter::angle#11 show_letter::angle#9 show_letter::angle#5 show_letter::angle#10 show_letter::angle#6 
Alias show_letter::current_x#4 = show_letter::current_x#8 show_letter::current_x#9 show_letter::current_x#7 show_letter::current_x#6 show_letter::current_x#5 
Alias show_letter::current_y#4 = show_letter::current_y#8 show_letter::current_y#9 show_letter::current_y#7 show_letter::current_y#6 show_letter::current_y#5 
Alias show_letter::to_x#2 = show_letter::$2_x 
Alias show_letter::to_y#2 = show_letter::$2_y 
Alias rotate::return_x#1 = rotate::return_x#5 
Alias rotate::return_y#1 = rotate::return_y#5 
Alias show_letter::segment_to_x#0 = show_letter::to_x#4 show_letter::to_x#3 show_letter::segment_to_x#1 show_letter::current_x#1 show_letter::segment_to_x#6 show_letter::segment_to_x#2 show_letter::segment_to_x#7 show_letter::segment_to_x#3 show_letter::current_x#2 show_letter::segment_to_x#4 show_letter::segment_to_x#5 show_letter::current_x#3 
Alias show_letter::segment_to_y#0 = show_letter::to_y#4 show_letter::to_y#3 show_letter::segment_to_y#1 show_letter::current_y#1 show_letter::segment_to_y#6 show_letter::segment_to_y#2 show_letter::segment_to_y#7 show_letter::segment_to_y#3 show_letter::current_y#2 show_letter::segment_to_y#4 show_letter::segment_to_y#5 show_letter::current_y#3 
Alias show_letter::via_x#2 = show_letter::$7_x 
Alias show_letter::via_y#2 = show_letter::$7_y 
Alias show_letter::segment_via_x#0 = show_letter::via_x#3 show_letter::segment_via_x#2 show_letter::segment_via_x#1 
Alias show_letter::segment_via_y#0 = show_letter::via_y#3 show_letter::segment_via_y#2 show_letter::segment_via_y#1 
Alias show_letter::segment_type#0 = show_letter::segment_type#1 
Alias bitmap_plot_spline_8seg::n#2 = bitmap_plot_spline_8seg::n#3 
Alias mulf16s::return#2 = mulf16s::return#7 
Alias rotate::cos_a#0 = rotate::cos_a#1 
Alias rotate::vector_y#2 = rotate::vector_y#4 rotate::vector_y#3 
Alias rotate::angle#2 = rotate::angle#4 rotate::angle#3 
Alias rotate::vector_x#2 = rotate::vector_x#5 rotate::vector_x#4 rotate::vector_x#3 
Alias rotate::xr#0 = rotate::$1 rotate::xr#4 rotate::xr#2 
Alias mulf16s::return#3 = mulf16s::return#8 
Alias rotate::yr#0 = rotate::$3 rotate::yr#3 rotate::yr#2 
Alias mulf16s::return#4 = mulf16s::return#9 
Alias rotate::sin_a#0 = rotate::sin_a#1 
Alias mulf16s::return#10 = mulf16s::return#5 
Alias rotate::xr#1 = rotate::xr#3 
Alias rotate::return_x#2 = rotate::rotated_x#0 rotate::return_x#6 rotate::return_x#3 
Alias rotate::return_y#2 = rotate::rotated_y#0 rotate::return_y#6 rotate::return_y#3 
Alias bitmap_gfx#17 = bitmap_gfx#4 
Alias bitmap_screen#17 = bitmap_screen#4 
Alias bitmap_gfx#11 = bitmap_gfx#5 bitmap_gfx#12 bitmap_gfx#6 
Alias bitmap_screen#11 = bitmap_screen#5 bitmap_screen#12 bitmap_screen#6 
Successful SSA optimization Pass2AliasElimination
Alias bitmap_init::x#2 = bitmap_init::x#3 
Alias bitmap_init::gfx#2 = bitmap_init::gfx#4 
Alias bitmap_gfx#24 = bitmap_gfx#30 
Alias bitmap_screen#23 = bitmap_screen#29 
Alias bitmap_init::y#2 = bitmap_init::y#3 
Alias bitmap_gfx#1 = bitmap_gfx#18 
Alias bitmap_screen#1 = bitmap_screen#18 
Alias bitmap_line::y#1 = bitmap_line::y#6 
Alias bitmap_line::y2#10 = bitmap_line::y2#4 
Alias bitmap_line::sy#1 = bitmap_line::sy#6 
Alias bitmap_line::dx#11 = bitmap_line::dx#14 
Alias bitmap_line::dy#11 = bitmap_line::dy#3 
Alias bitmap_line::sx#1 = bitmap_line::sx#10 
Alias bitmap_line::x#15 = bitmap_line::x#9 
Alias bitmap_line::x2#4 = bitmap_line::x2#6 
Alias bitmap_line::sx#11 = bitmap_line::sx#6 
Alias bitmap_line::dy#12 = bitmap_line::dy#13 
Alias bitmap_line::dx#12 = bitmap_line::dx#5 
Alias bitmap_line::sy#2 = bitmap_line::sy#9 
Alias mulf_init::sqr1_lo#2 = mulf_init::sqr1_lo#3 
Alias mulf_init::sqr1_hi#2 = mulf_init::sqr1_hi#3 
Alias mulf_init::c#1 = mulf_init::c#4 
Alias mulf_init::sqr2_lo#2 = mulf_init::sqr2_lo#4 
Alias mulf_init::x_255#1 = mulf_init::x_255#4 
Alias mulf_init::sqr2_hi#1 = mulf_init::sqr2_hi#4 
Alias mulf16s::b#4 = mulf16s::b#5 
Alias mulf16s::a#4 = mulf16s::a#6 
Alias show_letter::i#10 = show_letter::i#5 
Alias show_letter::angle#1 = show_letter::angle#4 
Alias show_letter::current_x#10 = show_letter::segment_to_x#0 
Alias show_letter::current_y#10 = show_letter::segment_to_y#0 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (signed word) spline_8segB::p1_x#1 (signed word) spline_8segB::p1_x#0
Identical Phi Values (signed word) spline_8segB::p2_x#1 (signed word) spline_8segB::p2_x#0
Identical Phi Values (signed word) spline_8segB::p0_x#1 (signed word) spline_8segB::p0_x#0
Identical Phi Values (signed word) spline_8segB::p1_y#1 (signed word) spline_8segB::p1_y#0
Identical Phi Values (signed word) spline_8segB::p2_y#1 (signed word) spline_8segB::p2_y#0
Identical Phi Values (signed word) spline_8segB::p0_y#1 (signed word) spline_8segB::p0_y#0
Identical Phi Values (signed word) spline_8segB::j_x#1 (signed word) spline_8segB::j_x#0
Identical Phi Values (signed word) spline_8segB::j_y#1 (signed word) spline_8segB::j_y#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) bitmap_init::gfx#1 (byte*) bitmap_init::gfx#0
Identical Phi Values (byte*) bitmap_init::screen#1 (byte*) bitmap_init::screen#0
Identical Phi Values (byte*) bitmap_init::gfx#2 (byte*) bitmap_init::gfx#1
Identical Phi Values (byte*) bitmap_gfx#24 (byte*) bitmap_gfx#0
Identical Phi Values (byte*) bitmap_screen#23 (byte*) bitmap_screen#0
Identical Phi Values (byte*) bitmap_gfx#1 (byte*) bitmap_gfx#24
Identical Phi Values (byte*) bitmap_screen#1 (byte*) bitmap_screen#23
Identical Phi Values (word) bitmap_line::sy#1 (word) bitmap_line::sy#0
Identical Phi Values (word) bitmap_line::dx#11 (word) bitmap_line::dx#0
Identical Phi Values (word) bitmap_line::dy#11 (word) bitmap_line::dy#0
Identical Phi Values (word) bitmap_line::y2#10 (word) bitmap_line::y2#11
Identical Phi Values (word) bitmap_line::sx#1 (word) bitmap_line::sx#0
Identical Phi Values (word) bitmap_line::sx#11 (word) bitmap_line::sx#0
Identical Phi Values (word) bitmap_line::dy#12 (word) bitmap_line::dy#0
Identical Phi Values (word) bitmap_line::dx#12 (word) bitmap_line::dx#0
Identical Phi Values (word) bitmap_line::x2#4 (word) bitmap_line::x2#10
Identical Phi Values (word) bitmap_line::sy#2 (word) bitmap_line::sy#0
Identical Phi Values (word) mulf16u::a#1 (word) mulf16u::a#0
Identical Phi Values (word) mulf16u::b#1 (word) mulf16u::b#0
Identical Phi Values (byte*) bitmap_gfx#15 (byte*) bitmap_gfx#17
Identical Phi Values (byte*) bitmap_screen#15 (byte*) bitmap_screen#17
Identical Phi Values (byte*) bitmap_gfx#2 (byte*) bitmap_gfx#1
Identical Phi Values (byte*) bitmap_screen#2 (byte*) bitmap_screen#1
Identical Phi Values (byte) main::w#2 (byte) main::w#4
Identical Phi Values (byte) main::angle#3 (byte) main::angle#8
Identical Phi Values (byte*) bitmap_screen#25 (byte*) bitmap_screen#34
Identical Phi Values (byte*) bitmap_gfx#26 (byte*) bitmap_gfx#35
Identical Phi Values (byte*) bitmap_gfx#10 (byte*) bitmap_gfx#20
Identical Phi Values (byte*) bitmap_screen#10 (byte*) bitmap_screen#14
Identical Phi Values (byte) show_letter::angle#3 (byte) show_letter::angle#0
Identical Phi Values (byte) show_letter::angle#1 (byte) show_letter::angle#3
Identical Phi Values (byte*) bitmap_gfx#11 (byte*) bitmap_gfx#10
Identical Phi Values (byte*) bitmap_screen#11 (byte*) bitmap_screen#10
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Identical Phi Values (byte) main::angle#8 (byte) main::angle#2
Identical Phi Values (byte*) bitmap_screen#34 (byte*) bitmap_screen#14
Identical Phi Values (byte*) bitmap_gfx#35 (byte*) bitmap_gfx#20
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) bitmap_screen#14 (byte*) bitmap_screen#0
Identical Phi Values (byte*) bitmap_gfx#20 (byte*) bitmap_gfx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte*) bitmap_screen#8 (byte*) bitmap_screen#0
Identical Phi Values (byte*) bitmap_gfx#14 (byte*) bitmap_gfx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [105] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) spline_8segB::$30 [34] if((byte) spline_8segB::n#1!=rangelast(0,7)) goto spline_8segB::@1
Simple Condition (bool~) memset::$1 [45] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$3 [52] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@4
Simple Condition (bool~) bitmap_init::$1 [65] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@2
Simple Condition (bool~) bitmap_init::$2 [69] if((byte) bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition (bool~) bitmap_init::$9 [81] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@6
Simple Condition (bool~) bitmap_init::$11 [85] if((byte) bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition (bool~) bitmap_line::$12 [133] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2
Simple Condition (bool~) bitmap_line::$18 [147] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7
Simple Condition (bool~) bitmap_line::$19 [150] if((word) bitmap_line::y#1!=(word) bitmap_line::y2#11) goto bitmap_line::@6
Simple Condition (bool~) bitmap_line::$23 [164] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10
Simple Condition (bool~) bitmap_line::$24 [167] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#10) goto bitmap_line::@9
Simple Condition (bool~) abs_u16::$3 [174] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1
Simple Condition (bool~) sgn_u16::$2 [182] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1
Simple Condition (bool~) mulf_init::$0 [194] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2
Simple Condition (bool~) mulf_init::$3 [198] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@4
Simple Condition (bool~) mulf_init::$7 [215] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@7
Simple Condition (bool~) mulf_init::$10 [221] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9
Simple Condition (bool~) mulf16s::$2 [241] if((signed word) mulf16s::a#4>=(signed byte) 0) goto mulf16s::@1
Simple Condition (bool~) mulf16s::$4 [244] if((signed word) mulf16s::b#4>=(signed byte) 0) goto mulf16s::@2
Simple Condition (bool~) main::$7 [294] if(*((const nomodify byte*) RASTER)!=(byte) $fe) goto main::@3
Simple Condition (bool~) main::$8 [297] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@4
Simple Condition (bool~) main::$9 [300] if((byte) main::w#1!=rangelast(0,$3c)) goto main::@3
Simple Condition (bool~) show_letter::$10 [352] if((byte) show_letter::segment_type#0==(const byte) MOVE_TO) goto show_letter::@2
Simple Condition (bool~) show_letter::$11 [354] if((byte) show_letter::segment_type#0==(const byte) SPLINE_TO) goto show_letter::@3
Simple Condition (bool~) show_letter::$15 [370] if((byte) show_letter::i#1!=rangelast(0,$15)) goto show_letter::@1
Simple Condition (bool~) bitmap_plot_spline_8seg::$1 [388] if((byte) bitmap_plot_spline_8seg::n#1!=rangelast(1,8)) goto bitmap_plot_spline_8seg::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [122] (bool~) bitmap_line::$7 ← ! (bool~) bitmap_line::$6
Rewriting && if()-condition to two if()s [121] (bool~) bitmap_line::$6 ← (bool~) bitmap_line::$4 && (bool~) bitmap_line::$5
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant right-side identified [39] (byte~) spline_8segB::$32 ← (byte) 8 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Constant right-side identified [372] (byte~) bitmap_plot_spline_8seg::$2 ← (byte) 0 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) spline_8segB::n#0 = 0
Constant (const byte) spline_8segB::$32 = 8*SIZEOF_STRUCT_SPLINEVECTOR16
Constant (const byte) bitmap_init::bits#0 = $80
Constant (const byte) bitmap_init::x#0 = 0
Constant (const byte) bitmap_init::bits#2 = $80
Constant (const byte) bitmap_init::y#0 = 0
Constant (const word) memset::num#0 = $3e8
Constant (const byte) memset::c#1 = 0
Constant (const word) memset::num#1 = $1f40
Constant (const word) sgn_u16::return#2 = -1
Constant (const word) sgn_u16::return#3 = 1
Constant (const word) mulf_init::sqr#0 = 0
Constant (const byte) mulf_init::x_2#0 = 0
Constant (const byte) mulf_init::c#0 = 0
Constant (const byte*) mulf_init::sqr1_hi#0 = mulf_sqr1_hi+1
Constant (const byte*) mulf_init::sqr1_lo#0 = mulf_sqr1_lo+1
Constant (const byte) mulf_init::x_255#0 = -1
Constant (const byte) mulf_init::dir#0 = $ff
Constant (const byte*) mulf_init::sqr2_hi#0 = mulf_sqr2_hi
Constant (const byte*) mulf_init::sqr2_lo#0 = mulf_sqr2_lo
Constant (const byte) mulf_init::dir#1 = 1
Constant (const byte*) bitmap_init::gfx#0 = BITMAP_GRAPHICS
Constant (const byte*) bitmap_init::screen#0 = BITMAP_SCREEN
Constant (const byte) bitmap_clear::bgcol#0 = BLACK
Constant (const byte) bitmap_clear::fgcol#0 = WHITE
Constant (const byte*) main::vicSelectGfxBank1_gfx#0 = BITMAP_SCREEN
Constant (const byte*) main::toD0181_screen#0 = BITMAP_SCREEN
Constant (const byte*) main::toD0181_gfx#0 = BITMAP_GRAPHICS
Constant (const byte) main::angle#0 = 0
Constant (const byte) bitmap_clear::bgcol#1 = BLACK
Constant (const byte) bitmap_clear::fgcol#1 = WHITE
Constant (const byte) main::w#0 = 0
Constant (const signed word) show_letter::current_x#0 = 0
Constant (const signed word) show_letter::current_y#0 = 0
Constant (const byte) show_letter::i#0 = 0
Constant (const byte) bitmap_plot_spline_8seg::$2 = 0*SIZEOF_STRUCT_SPLINEVECTOR16
Constant (const byte) bitmap_plot_spline_8seg::n#0 = 1
Constant (const byte*) bitmap_screen#17 = (byte*) 0
Constant (const byte*) bitmap_gfx#17 = (byte*) 0
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) bitmap_gfx#0 = bitmap_init::gfx#0
Constant (const byte*) bitmap_screen#0 = bitmap_init::screen#0
Constant (const word) main::toD0181_$7 = (word)main::toD0181_screen#0
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#0 = (void*)bitmap_screen#0
Constant (const void*) memset::str#1 = (void*)bitmap_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::vicSelectGfxBank1_gfx#0 in [267] (byte~) main::vicSelectGfxBank1_toDd001_$0 ← > (word)(const byte*) main::vicSelectGfxBank1_gfx#0
Constant value identified (word)main::toD0181_gfx#0 in [277] (byte~) main::toD0181_$3 ← > (word)(const byte*) main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [285] if(true) goto main::@2
if() condition always true - replacing block destination [303] if(true) goto main::@8
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [32] spline_8segB::n#1 ← ++ spline_8segB::n#2 to ++
Resolved ranged comparison value [34] if(spline_8segB::n#1!=rangelast(0,7)) goto spline_8segB::@1 to (number) 8
Resolved ranged next value [67] bitmap_init::x#1 ← ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [69] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to (number) 0
Resolved ranged next value [83] bitmap_init::y#1 ← ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [85] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to (number) 0
Resolved ranged next value [298] main::w#1 ← ++ main::w#4 to ++
Resolved ranged comparison value [300] if(main::w#1!=rangelast(0,$3c)) goto main::@3 to (number) $3d
Resolved ranged next value [368] show_letter::i#1 ← ++ show_letter::i#10 to ++
Resolved ranged comparison value [370] if(show_letter::i#1!=rangelast(0,$15)) goto show_letter::@1 to (number) $16
Resolved ranged next value [386] bitmap_plot_spline_8seg::n#1 ← ++ bitmap_plot_spline_8seg::n#2 to ++
Resolved ranged comparison value [388] if(bitmap_plot_spline_8seg::n#1!=rangelast(1,8)) goto bitmap_plot_spline_8seg::@1 to (number) 9
Simplifying constant evaluating to zero (byte) 0*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (signed word*)SPLINE_8SEG in [26] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) spline_8segB::$31) ← (signed word)(signed word~) spline_8segB::$23
Simplifying expression containing zero (signed word*)SPLINE_8SEG in [40] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (const byte) spline_8segB::$32) ← (signed word)(signed word~) spline_8segB::$19
Simplifying expression containing zero (byte*)CIA2 in [270] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A) ← (byte) main::vicSelectGfxBank1_toDd001_return#0
Simplifying expression containing zero (signed word*)(struct SplineVector16*)letter_c+OFFSET_STRUCT_SEGMENT_TO in [312] (signed word) show_letter::to_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) show_letter::$16)
Simplifying expression containing zero (signed word*)(struct SplineVector16*)letter_c+OFFSET_STRUCT_SEGMENT_VIA in [331] (signed word) show_letter::via_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) show_letter::$17)
Simplifying expression containing zero (byte*)letter_c in [350] (byte) show_letter::segment_type#0 ← *((byte*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TYPE + (byte~) show_letter::$18)
Simplifying expression containing zero (signed word*)SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_X in [373] (signed word) bitmap_plot_spline_8seg::current_x#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (const byte) bitmap_plot_spline_8seg::$2)
Simplifying expression containing zero (signed word*)SPLINE_8SEG in [373] (signed word) bitmap_plot_spline_8seg::current_x#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X)
Simplifying expression containing zero (signed word*)SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y in [374] (signed word) bitmap_plot_spline_8seg::current_y#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (const byte) bitmap_plot_spline_8seg::$2)
Simplifying expression containing zero (signed word*)SPLINE_8SEG in [380] (word) bitmap_line::x2#1 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) bitmap_plot_spline_8seg::$3)
Simplifying expression containing zero (signed word*)SPLINE_8SEG in [384] (signed word) bitmap_plot_spline_8seg::current_x#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_X + (byte~) bitmap_plot_spline_8seg::$4)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memset::return#2 and assignment [75] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [77] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused variable (struct SplineVector16) rotate::return#0 and assignment [345] (struct SplineVector16) rotate::return#0 ← struct-unwound {(signed word) rotate::return_x#2, (signed word) rotate::return_y#2}
Eliminating unused variable (struct SplineVector16) rotate::return#1 and assignment [346] (struct SplineVector16) rotate::return#1 ← struct-unwound {(signed word) rotate::return_x#2, (signed word) rotate::return_y#2}
Eliminating unused constant (const byte) bitmap_plot_spline_8seg::$2
Eliminating unused constant (const byte) OFFSET_STRUCT_SPLINEVECTOR16_X
Eliminating unused constant (const byte) OFFSET_STRUCT_SEGMENT_TYPE
Eliminating unused constant (const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A
Eliminating unused constant (const byte*) bitmap_screen#17
Eliminating unused constant (const byte*) bitmap_gfx#17
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@7
Removing unused block main::@8
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [31] if((byte) spline_8segB::n#1!=(number) 8) goto spline_8segB::@1
Adding number conversion cast (unumber) 0 in [55] if((byte) bitmap_init::x#1!=(number) 0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in [67] if((byte) bitmap_init::y#1!=(number) 0) goto bitmap_init::@5
Adding number conversion cast (unumber) $3d in [228] if((byte) main::w#1!=(number) $3d) goto main::@3
Adding number conversion cast (unumber) $16 in [287] if((byte) show_letter::i#1!=(number) $16) goto show_letter::@1
Adding number conversion cast (unumber) 9 in [302] if((byte) bitmap_plot_spline_8seg::n#1!=(number) 9) goto bitmap_plot_spline_8seg::@1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [79] (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$3
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast (signed word~) spline_8segB::$23
Simplifying constant integer cast (signed word~) spline_8segB::$25
Simplifying constant integer cast 8
Simplifying constant integer cast (signed word~) spline_8segB::$19
Simplifying constant integer cast (signed word~) spline_8segB::$21
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $3d
Simplifying constant integer cast (signed word~) show_letter::$0
Simplifying constant integer cast (signed word~) show_letter::$1
Simplifying constant integer cast (signed word~) show_letter::$3
Simplifying constant integer cast (signed word~) show_letter::$4
Simplifying constant integer cast (signed word~) show_letter::$5
Simplifying constant integer cast (signed word~) show_letter::$6
Simplifying constant integer cast (signed word~) show_letter::$8
Simplifying constant integer cast (signed word~) show_letter::$9
Simplifying constant integer cast $16
Simplifying constant integer cast 9
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $3d
Finalized unsigned number type (byte) $16
Finalized unsigned number type (byte) 9
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias bitmap_init::$7 = bitmap_init::$3 
Alias show_letter::to_x#1 = show_letter::$0 
Alias show_letter::to_y#1 = show_letter::$1 
Alias show_letter::current_x#10 = show_letter::$3 
Alias show_letter::current_y#10 = show_letter::$4 
Alias show_letter::via_x#1 = show_letter::$5 
Alias show_letter::via_y#1 = show_letter::$6 
Alias show_letter::segment_via_x#0 = show_letter::$8 
Alias show_letter::segment_via_y#0 = show_letter::$9 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) bitmap_line::$4 [95] if((word) bitmap_line::dx#0==(byte) 0) goto bitmap_line::@20
Simple Condition (bool~) bitmap_line::$5 [333] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [95] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [206] (byte~) main::vicSelectGfxBank1_toDd001_$0 ← > (word)(const byte*) main::vicSelectGfxBank1_gfx#0
Constant right-side identified [210] (word~) main::toD0181_$0 ← (const word) main::toD0181_$7 & (word) $3fff
Constant right-side identified [213] (byte~) main::toD0181_$3 ← > (word)(const byte*) main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::vicSelectGfxBank1_toDd001_$0 = >(word)main::vicSelectGfxBank1_gfx#0
Constant (const word) main::toD0181_$0 = main::toD0181_$7&$3fff
Constant (const byte) main::toD0181_$3 = >(word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const nomodify byte*) PRINT_SCREEN
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [204] (byte~) main::vicSelectGfxBank1_toDd001_$1 ← (const byte) main::vicSelectGfxBank1_toDd001_$0 / (byte) $40
Constant right-side identified [207] (word~) main::toD0181_$1 ← (const word) main::toD0181_$0 * (byte) 4
Constant right-side identified [209] (byte~) main::toD0181_$4 ← (const byte) main::toD0181_$3 / (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0/$40
Constant (const word) main::toD0181_$1 = main::toD0181_$0*4
Constant (const byte) main::toD0181_$4 = main::toD0181_$3/4
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [204] (byte) main::vicSelectGfxBank1_toDd001_return#0 ← (byte) 3 ^ (const byte) main::vicSelectGfxBank1_toDd001_$1
Constant right-side identified [206] (byte~) main::toD0181_$2 ← > (const word) main::toD0181_$1
Constant right-side identified [207] (byte~) main::toD0181_$5 ← (const byte) main::toD0181_$4 & (byte) $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::vicSelectGfxBank1_toDd001_return#0 = 3^main::vicSelectGfxBank1_toDd001_$1
Constant (const byte) main::toD0181_$2 = >main::toD0181_$1
Constant (const byte) main::toD0181_$5 = main::toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [205] (byte) main::toD0181_return#0 ← (const byte) main::toD0181_$2 | (const byte) main::toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [41] (byte*~) memset::$4 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [43] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [190] (word~) mulf16s::$13 ← (word)(signed word) mulf16s::b#4 keeping mulf16s::b#4
Inlining Noop Cast [196] (word~) mulf16s::$14 ← (word)(signed word) mulf16s::a#4 keeping mulf16s::a#4
Inlining Noop Cast [274] (word) bitmap_line::x2#1 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$3) keeping *((signed word*)SPLINE_8SEG + bitmap_plot_spline_8seg::$3)
Inlining Noop Cast [275] (word) bitmap_line::y2#1 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$3) keeping *((signed word*)SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y + bitmap_plot_spline_8seg::$3)
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [78] (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$3 keeping bitmap_plot::plotter#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [0] (signed word~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#0 * (signed byte) 2
Rewriting multiplication to use shift [3] (signed word~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#0 * (signed byte) 2
Rewriting multiplication to use shift [7] (signed word) spline_8segB::b_x#0 ← (signed word~) spline_8segB::$6 * (signed byte) 2
Rewriting multiplication to use shift [9] (signed word) spline_8segB::b_y#0 ← (signed word~) spline_8segB::$8 * (signed byte) 2
Rewriting multiplication to use shift [10] (signed word~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 * (signed byte) 8
Rewriting multiplication to use shift [12] (signed word~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 * (signed byte) 8
Rewriting multiplication to use shift [14] (signed word) spline_8segB::j_x#0 ← (signed word) spline_8segB::a_x#0 * (signed byte) 2
Rewriting multiplication to use shift [15] (signed word) spline_8segB::j_y#0 ← (signed word) spline_8segB::a_y#0 * (signed byte) 2
Rewriting multiplication to use shift [16] (signed word) spline_8segB::p_x#0 ← (signed word) spline_8segB::p0_x#0 * (signed byte) $40
Rewriting multiplication to use shift [17] (signed word) spline_8segB::p_y#0 ← (signed word) spline_8segB::p0_y#0 * (signed byte) $40
Rewriting division to use shift [20] (signed word~) spline_8segB::$23 ← (signed word~) spline_8segB::$22 / (signed byte) $40
Rewriting division to use shift [22] (signed word~) spline_8segB::$25 ← (signed word~) spline_8segB::$24 / (signed byte) $40
Rewriting multiplication to use shift [23] (byte~) spline_8segB::$31 ← (byte) spline_8segB::n#2 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Rewriting division to use shift [33] (signed word~) spline_8segB::$19 ← (signed word~) spline_8segB::$18 / (signed byte) $40
Rewriting division to use shift [35] (signed word~) spline_8segB::$21 ← (signed word~) spline_8segB::$20 / (signed byte) $40
Rewriting multiplication to use shift [70] (byte~) bitmap_clear::$0 ← (byte) bitmap_clear::fgcol#2 * (byte) $10
Rewriting division to use shift [107] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 / (byte) 2
Rewriting division to use shift [108] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 / (byte) 2
Rewriting multiplication to use shift and addition[218] (byte~) show_letter::$16 ← (byte) show_letter::i#10 * (const byte) SIZEOF_STRUCT_SEGMENT
Rewriting multiplication to use shift and addition[233] (byte~) show_letter::$17 ← (byte) show_letter::i#10 * (const byte) SIZEOF_STRUCT_SEGMENT
Rewriting multiplication to use shift and addition[248] (byte~) show_letter::$18 ← (byte) show_letter::i#10 * (const byte) SIZEOF_STRUCT_SEGMENT
Rewriting multiplication to use shift [271] (byte~) bitmap_plot_spline_8seg::$3 ← (byte) bitmap_plot_spline_8seg::n#2 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Rewriting multiplication to use shift [277] (byte~) bitmap_plot_spline_8seg::$4 ← (byte) bitmap_plot_spline_8seg::n#2 * (const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Rewriting multiplication to use shift [291] (signed word) rotate::xr#0 ← (signed word~) rotate::$10 * (signed byte) 2
Rewriting multiplication to use shift [298] (signed word) rotate::yr#0 ← (signed word~) rotate::$11 * (signed byte) 2
Rewriting multiplication to use shift [306] (signed word~) rotate::$5 ← (signed word~) rotate::$12 * (signed byte) 2
Rewriting multiplication to use shift [314] (signed word~) rotate::$7 ← (signed word~) rotate::$13 * (signed byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) spline_8segB::n#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const byte) bitmap_clear::bgcol#0
Inlining constant with var siblings (const byte) bitmap_clear::fgcol#0
Inlining constant with var siblings (const byte) bitmap_clear::bgcol#1
Inlining constant with var siblings (const byte) bitmap_clear::fgcol#1
Inlining constant with var siblings (const word) sgn_u16::return#2
Inlining constant with var siblings (const word) sgn_u16::return#3
Inlining constant with var siblings (const word) mulf_init::sqr#0
Inlining constant with var siblings (const byte) mulf_init::x_2#0
Inlining constant with var siblings (const byte) mulf_init::c#0
Inlining constant with var siblings (const byte*) mulf_init::sqr1_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr1_lo#0
Inlining constant with var siblings (const byte) mulf_init::x_255#0
Inlining constant with var siblings (const byte) mulf_init::dir#0
Inlining constant with var siblings (const byte*) mulf_init::sqr2_hi#0
Inlining constant with var siblings (const byte*) mulf_init::sqr2_lo#0
Inlining constant with var siblings (const byte) mulf_init::dir#1
Inlining constant with var siblings (const byte) main::angle#0
Inlining constant with var siblings (const byte) main::w#0
Inlining constant with var siblings (const signed word) show_letter::current_x#0
Inlining constant with var siblings (const signed word) show_letter::current_y#0
Inlining constant with var siblings (const byte) show_letter::i#0
Inlining constant with var siblings (const byte) bitmap_plot_spline_8seg::n#0
Constant inlined bitmap_init::screen#0 = (const nomodify byte*) BITMAP_SCREEN
Constant inlined bitmap_clear::bgcol#0 = (const nomodify byte) BLACK
Constant inlined mulf_init::sqr2_lo#0 = (const byte*) mulf_sqr2_lo
Constant inlined bitmap_init::gfx#0 = (const nomodify byte*) BITMAP_GRAPHICS
Constant inlined bitmap_clear::bgcol#1 = (const nomodify byte) BLACK
Constant inlined mulf_init::sqr2_hi#0 = (const byte*) mulf_sqr2_hi
Constant inlined memset::num#1 = (word) $1f40
Constant inlined memset::num#0 = (word) $3e8
Constant inlined mulf_init::dir#1 = (byte) 1
Constant inlined mulf_init::dir#0 = (byte) $ff
Constant inlined mulf_init::x_255#0 = (byte) -1
Constant inlined mulf_init::x_2#0 = (byte) 0
Constant inlined main::toD0181_$7 = (word)(const nomodify byte*) BITMAP_SCREEN
Constant inlined bitmap_plot_spline_8seg::n#0 = (byte) 1
Constant inlined main::toD0181_$2 = >(word)(const nomodify byte*) BITMAP_SCREEN&(word) $3fff*(byte) 4
Constant inlined main::toD0181_$1 = (word)(const nomodify byte*) BITMAP_SCREEN&(word) $3fff*(byte) 4
Constant inlined main::toD0181_$0 = (word)(const nomodify byte*) BITMAP_SCREEN&(word) $3fff
Constant inlined show_letter::current_x#0 = (signed word) 0
Constant inlined bitmap_gfx#0 = (const nomodify byte*) BITMAP_GRAPHICS
Constant inlined main::toD0181_$5 = >(word)(const nomodify byte*) BITMAP_GRAPHICS/(byte) 4&(byte) $f
Constant inlined main::w#0 = (byte) 0
Constant inlined main::toD0181_$4 = >(word)(const nomodify byte*) BITMAP_GRAPHICS/(byte) 4
Constant inlined main::toD0181_$3 = >(word)(const nomodify byte*) BITMAP_GRAPHICS
Constant inlined mulf_init::sqr1_hi#0 = (const byte*) mulf_sqr1_hi+(byte) 1
Constant inlined mulf_init::sqr1_lo#0 = (const byte*) mulf_sqr1_lo+(byte) 1
Constant inlined spline_8segB::n#0 = (byte) 0
Constant inlined bitmap_init::x#0 = (byte) 0
Constant inlined memset::c#1 = (byte) 0
Constant inlined mulf_init::c#0 = (byte) 0
Constant inlined main::toD0181_screen#0 = (const nomodify byte*) BITMAP_SCREEN
Constant inlined main::toD0181_gfx#0 = (const nomodify byte*) BITMAP_GRAPHICS
Constant inlined bitmap_init::bits#0 = (byte) $80
Constant inlined bitmap_init::bits#2 = (byte) $80
Constant inlined spline_8segB::$32 = (byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16
Constant inlined sgn_u16::return#3 = (byte) 1
Constant inlined sgn_u16::return#2 = (byte) -1
Constant inlined memset::str#1 = (void*)(const nomodify byte*) BITMAP_GRAPHICS
Constant inlined memset::str#0 = (void*)(const nomodify byte*) BITMAP_SCREEN
Constant inlined mulf_init::sqr#0 = (word) 0
Constant inlined show_letter::current_y#0 = (signed word) 0
Constant inlined bitmap_clear::fgcol#0 = (const nomodify byte) WHITE
Constant inlined main::vicSelectGfxBank1_toDd001_$0 = >(word)(const nomodify byte*) BITMAP_SCREEN
Constant inlined main::angle#0 = (byte) 0
Constant inlined main::vicSelectGfxBank1_toDd001_$1 = >(word)(const nomodify byte*) BITMAP_SCREEN/(byte) $40
Constant inlined bitmap_clear::fgcol#1 = (const nomodify byte) WHITE
Constant inlined bitmap_screen#0 = (const nomodify byte*) BITMAP_SCREEN
Constant inlined main::vicSelectGfxBank1_gfx#0 = (const nomodify byte*) BITMAP_SCREEN
Constant inlined bitmap_init::y#0 = (byte) 0
Constant inlined show_letter::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((signed word*)SPLINE_8SEG+8*SIZEOF_STRUCT_SPLINEVECTOR16)
Consolidated array index constant in *((signed word*)SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+8*SIZEOF_STRUCT_SPLINEVECTOR16)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias show_letter::$16 = show_letter::$20 
Alias show_letter::$17 = show_letter::$22 
Alias show_letter::$18 = show_letter::$24 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) bitmap_clear::fgcol#2 (const nomodify byte) WHITE
Identical Phi Values (byte) bitmap_clear::bgcol#2 (const nomodify byte) BLACK
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [230] (byte~) show_letter::$21 ← (byte) show_letter::i#10 << (byte) 3
Identified duplicate assignment right side [247] (byte~) show_letter::$23 ← (byte) show_letter::i#10 << (byte) 3
Identified duplicate assignment right side [276] (byte~) bitmap_plot_spline_8seg::$4 ← (byte) bitmap_plot_spline_8seg::n#2 << (byte) 2
Successful SSA optimization Pass2DuplicateRValueIdentification
Constant right-side identified [68] (byte~) bitmap_clear::$0 ← (const nomodify byte) WHITE << (byte) 4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) bitmap_clear::$0 = WHITE<<4
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero bitmap_clear::$0 in [69] (byte) bitmap_clear::col#0 ← (const byte) bitmap_clear::$0 + (const nomodify byte) BLACK
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const nomodify byte) BLACK
Eliminating unused constant (const byte) SIZEOF_STRUCT_SEGMENT
Successful SSA optimization PassNEliminateUnusedVars
Constant inlined bitmap_clear::$0 = (const nomodify byte) WHITE<<(byte) 4
Successful SSA optimization Pass2ConstantInlining
Alias show_letter::$21 = show_letter::$19 show_letter::$23 
Alias bitmap_plot_spline_8seg::$4 = bitmap_plot_spline_8seg::$3 
Successful SSA optimization Pass2AliasElimination
Identified duplicate assignment right side [228] (byte~) show_letter::$17 ← (byte~) show_letter::$21 + (byte) show_letter::i#10
Identified duplicate assignment right side [244] (byte~) show_letter::$18 ← (byte~) show_letter::$21 + (byte) show_letter::i#10
Successful SSA optimization Pass2DuplicateRValueIdentification
Constant (const byte) bitmap_clear::col#0 = WHITE<<4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) memset::c#0 = bitmap_clear::col#0
Successful SSA optimization Pass2ConstantIdentification
Inlining constant with var siblings (const byte) memset::c#0
Constant inlined memset::c#0 = (const byte) bitmap_clear::col#0
Successful SSA optimization Pass2ConstantInlining
Alias show_letter::$17 = show_letter::$16 show_letter::$18 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting spline_8segB::@3(between spline_8segB::@1 and spline_8segB::@1)
Added new block during phi lifting bitmap_init::@8(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting bitmap_line::@21(between bitmap_line::@7 and bitmap_line::@6)
Added new block during phi lifting bitmap_line::@22(between bitmap_line::@17 and bitmap_line::@7)
Added new block during phi lifting bitmap_line::@23(between bitmap_line::@10 and bitmap_line::@3)
Added new block during phi lifting bitmap_line::@24(between bitmap_line::@7 and bitmap_line::@3)
Added new block during phi lifting bitmap_line::@25(between bitmap_line::@10 and bitmap_line::@9)
Added new block during phi lifting bitmap_line::@26(between bitmap_line::@19 and bitmap_line::@10)
Added new block during phi lifting mulf_init::@11(between mulf_init::@2 and mulf_init::@4)
Added new block during phi lifting mulf_init::@12(between mulf_init::@7 and mulf_init::@9)
Added new block during phi lifting mulf16s::@6(between mulf16s::@5 and mulf16s::@1)
Added new block during phi lifting mulf16s::@7(between mulf16s::@1 and mulf16s::@2)
Added new block during phi lifting main::@16(between main::@3 and main::@3)
Added new block during phi lifting main::@17(between main::@5 and main::@3)
Added new block during phi lifting show_letter::@12(between show_letter::@4 and show_letter::@1)
Added new block during phi lifting bitmap_plot_spline_8seg::@3(between bitmap_plot_spline_8seg::@2 and bitmap_plot_spline_8seg::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@11
Adding NOP phi() at start of main::@12
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001_@return
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@3
Adding NOP phi() at start of mulf_init::@10
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of bitmap_clear::@2
Adding NOP phi() at start of show_letter
Adding NOP phi() at start of show_letter::@11
Adding NOP phi() at start of show_letter::@9
Adding NOP phi() at start of show_letter::@10
Adding NOP phi() at start of show_letter::@2
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of bitmap_line::@18
Adding NOP phi() at start of bitmap_line::@16
Adding NOP phi() at start of sgn_u16::@2
Adding NOP phi() at start of sgn_u16::@1
CALL GRAPH
Calls in [main] to mulf_init:1 bitmap_init:3 bitmap_clear:5 bitmap_clear:18 show_letter:20 
Calls in [bitmap_clear] to memset:106 memset:108 
Calls in [show_letter] to rotate:125 rotate:142 bitmap_line:160 spline_8segB:174 bitmap_plot_spline_8seg:176 
Calls in [rotate] to mulf16s:196 mulf16s:205 mulf16s:215 mulf16s:225 
Calls in [bitmap_line] to abs_u16:239 abs_u16:244 sgn_u16:251 sgn_u16:256 bitmap_plot:269 bitmap_plot:286 bitmap_plot:303 bitmap_plot:324 
Calls in [bitmap_plot_spline_8seg] to bitmap_line:386 
Calls in [mulf16s] to mulf16u:398 

Created 64 initial phi equivalence classes
Coalesced [28] main::angle#10 ← main::angle#1
Coalesced [29] main::w#6 ← main::w#1
Coalesced (already) [30] main::w#5 ← main::w#4
Coalesced [48] mulf_init::sqr2_lo#6 ← mulf_init::sqr2_lo#1
Coalesced [49] mulf_init::x_255#6 ← mulf_init::x_255#1
Coalesced [50] mulf_init::sqr2_hi#6 ← mulf_init::sqr2_hi#1
Coalesced [51] mulf_init::dir#5 ← mulf_init::dir#4
Coalesced (already) [52] mulf_init::dir#6 ← mulf_init::dir#2
Coalesced [58] mulf_init::sqr#9 ← mulf_init::sqr#2
Coalesced [59] mulf_init::x_2#8 ← mulf_init::x_2#1
Coalesced [68] mulf_init::sqr1_lo#6 ← mulf_init::sqr1_lo#1
Coalesced [69] mulf_init::c#6 ← mulf_init::c#1
Coalesced [70] mulf_init::sqr#7 ← mulf_init::sqr#1
Coalesced [71] mulf_init::sqr1_hi#6 ← mulf_init::sqr1_hi#1
Coalesced [72] mulf_init::x_2#6 ← mulf_init::x_2#2
Coalesced [73] mulf_init::sqr#8 ← mulf_init::sqr#4
Coalesced (already) [74] mulf_init::x_2#7 ← mulf_init::x_2#3
Coalesced [94] bitmap_init::yoffs#7 ← bitmap_init::yoffs#1
Coalesced [99] bitmap_init::y#5 ← bitmap_init::y#1
Coalesced [100] bitmap_init::yoffs#5 ← bitmap_init::yoffs#4
Coalesced (already) [101] bitmap_init::yoffs#6 ← bitmap_init::yoffs#2
Coalesced [102] bitmap_init::bits#5 ← bitmap_init::bits#4
Coalesced [103] bitmap_init::x#5 ← bitmap_init::x#1
Coalesced [104] bitmap_init::bits#6 ← bitmap_init::bits#1
Coalesced [122] rotate::angle#5 ← rotate::angle#0
Coalesced [123] rotate::vector_x#6 ← rotate::vector_x#0
Coalesced [124] rotate::vector_y#5 ← rotate::vector_y#0
Coalesced [139] rotate::angle#6 ← rotate::angle#1
Coalesced [140] rotate::vector_x#7 ← rotate::vector_x#1
Coalesced [141] rotate::vector_y#6 ← rotate::vector_y#1
Coalesced [156] bitmap_line::x#21 ← bitmap_line::x1#0
Coalesced [157] bitmap_line::y#21 ← bitmap_line::y1#0
Coalesced [158] bitmap_line::x2#14 ← bitmap_line::x2#0
Coalesced [159] bitmap_line::y2#14 ← bitmap_line::y2#0
Coalesced [165] show_letter::i#13 ← show_letter::i#1
Not coalescing [166] show_letter::current_x#11 ← show_letter::current_x#10
Not coalescing [167] show_letter::current_y#11 ← show_letter::current_y#10
Coalesced [189] memset::dst#5 ← memset::dst#1
Coalesced [194] mulf16s::a#9 ← mulf16s::a#0
Coalesced [195] mulf16s::b#8 ← mulf16s::b#0
Coalesced [203] mulf16s::a#10 ← mulf16s::a#1
Coalesced [204] mulf16s::b#9 ← mulf16s::b#1
Coalesced [213] mulf16s::a#11 ← mulf16s::a#2
Coalesced [214] mulf16s::b#10 ← mulf16s::b#2
Coalesced [223] mulf16s::a#12 ← mulf16s::a#3
Coalesced [224] mulf16s::b#11 ← mulf16s::b#3
Coalesced [238] abs_u16::w#5 ← abs_u16::w#0
Coalesced [243] abs_u16::w#6 ← abs_u16::w#1
Coalesced [250] sgn_u16::w#3 ← sgn_u16::w#0
Coalesced [255] sgn_u16::w#4 ← sgn_u16::w#1
Coalesced [261] bitmap_line::x#22 ← bitmap_line::x#0
Coalesced [262] bitmap_line::y#22 ← bitmap_line::y#0
Coalesced [263] bitmap_line::e#7 ← bitmap_line::e#0
Coalesced [267] bitmap_plot::y#7 ← bitmap_plot::y#1
Coalesced [268] bitmap_plot::x#7 ← bitmap_plot::x#1
Coalesced [275] bitmap_line::x#25 ← bitmap_line::x#1
Coalesced [276] bitmap_line::e#10 ← bitmap_line::e#2
Coalesced [279] bitmap_line::x#27 ← bitmap_line::x#12
Coalesced [280] bitmap_line::y#25 ← bitmap_line::y#1
Coalesced [284] bitmap_plot::y#5 ← bitmap_plot::y#2
Coalesced [285] bitmap_plot::x#5 ← bitmap_plot::x#2
Coalesced [289] bitmap_line::x#23 ← bitmap_line::x#12
Coalesced [290] bitmap_line::y#23 ← bitmap_line::y#1
Coalesced [291] bitmap_line::e#8 ← bitmap_line::e#6
Coalesced (already) [292] bitmap_line::x#24 ← bitmap_line::x#13
Coalesced [293] bitmap_line::e#9 ← bitmap_line::e#1
Coalesced [295] bitmap_line::x#29 ← bitmap_line::x#0
Coalesced [296] bitmap_line::y#27 ← bitmap_line::y#0
Coalesced [297] bitmap_line::e1#8 ← bitmap_line::e1#0
Coalesced [301] bitmap_plot::y#8 ← bitmap_plot::y#3
Coalesced [302] bitmap_plot::x#8 ← bitmap_plot::x#3
Coalesced [309] bitmap_line::y#28 ← bitmap_line::y#2
Coalesced [310] bitmap_line::e1#9 ← bitmap_line::e1#2
Coalesced [313] bitmap_line::x#26 ← bitmap_line::x#15
Coalesced [314] bitmap_line::y#24 ← bitmap_line::y#13
Coalesced (already) [315] bitmap_line::x#28 ← bitmap_line::x#15
Coalesced (already) [316] bitmap_line::y#26 ← bitmap_line::y#13
Coalesced [317] bitmap_line::e1#7 ← bitmap_line::e1#6
Coalesced (already) [318] bitmap_line::y#29 ← bitmap_line::y#15
Coalesced [319] bitmap_line::e1#10 ← bitmap_line::e1#1
Coalesced [322] bitmap_plot::y#6 ← bitmap_plot::y#0
Coalesced [323] bitmap_plot::x#6 ← bitmap_plot::x#0
Coalesced [344] spline_8segB::p_x#4 ← spline_8segB::p_x#0
Coalesced [345] spline_8segB::p_y#4 ← spline_8segB::p_y#0
Coalesced [346] spline_8segB::i_x#3 ← spline_8segB::i_x#0
Coalesced [347] spline_8segB::i_y#3 ← spline_8segB::i_y#0
Coalesced [369] spline_8segB::p_x#5 ← spline_8segB::p_x#1
Coalesced [370] spline_8segB::p_y#5 ← spline_8segB::p_y#1
Coalesced [371] spline_8segB::n#3 ← spline_8segB::n#1
Coalesced [372] spline_8segB::i_x#4 ← spline_8segB::i_x#1
Coalesced [373] spline_8segB::i_y#4 ← spline_8segB::i_y#1
Coalesced [376] bitmap_plot_spline_8seg::current_x#3 ← bitmap_plot_spline_8seg::current_x#0
Coalesced [377] bitmap_plot_spline_8seg::current_y#3 ← bitmap_plot_spline_8seg::current_y#0
Coalesced [382] bitmap_line::x#20 ← bitmap_line::x1#1
Coalesced [383] bitmap_line::y#20 ← bitmap_line::y1#1
Coalesced [392] bitmap_plot_spline_8seg::n#4 ← bitmap_plot_spline_8seg::n#1
Coalesced [393] bitmap_plot_spline_8seg::current_x#4 ← bitmap_plot_spline_8seg::current_x#1
Coalesced [394] bitmap_plot_spline_8seg::current_y#4 ← bitmap_plot_spline_8seg::current_y#1
Coalesced [405] mulf16s::m#7 ← mulf16s::m#1
Coalesced [411] mulf16s::m#10 ← mulf16s::m#2
Coalesced [415] mulf16s::m#9 ← mulf16s::m#5
Coalesced [416] mulf16s::m#8 ← mulf16s::m#0
Coalesced [421] abs_u16::return#9 ← abs_u16::w#2
Coalesced [425] abs_u16::return#8 ← abs_u16::return#2
Coalesced down to 49 phi equivalence classes
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::vicSelectGfxBank1_toDd001_@return
Culled Empty Block (label) main::@9
Culled Empty Block (label) main::toD0181_@return
Culled Empty Block (label) main::@15
Culled Empty Block (label) main::@17
Culled Empty Block (label) main::@16
Culled Empty Block (label) mulf_init::@3
Culled Empty Block (label) mulf_init::@10
Culled Empty Block (label) mulf_init::@11
Culled Empty Block (label) bitmap_init::@3
Culled Empty Block (label) bitmap_init::@4
Culled Empty Block (label) bitmap_init::@10
Culled Empty Block (label) bitmap_init::@11
Culled Empty Block (label) bitmap_init::@8
Culled Empty Block (label) bitmap_clear::@2
Culled Empty Block (label) show_letter::@11
Culled Empty Block (label) show_letter::@10
Culled Empty Block (label) show_letter::@2
Culled Empty Block (label) memset::@1
Culled Empty Block (label) bitmap_line::@24
Culled Empty Block (label) bitmap_line::@18
Culled Empty Block (label) bitmap_line::@21
Culled Empty Block (label) bitmap_line::@22
Culled Empty Block (label) bitmap_line::@23
Culled Empty Block (label) bitmap_line::@25
Culled Empty Block (label) bitmap_line::@26
Culled Empty Block (label) bitmap_line::@16
Culled Empty Block (label) spline_8segB::@3
Culled Empty Block (label) bitmap_plot_spline_8seg::@3
Culled Empty Block (label) mulf16s::@7
Culled Empty Block (label) mulf16s::@6
Culled Empty Block (label) abs_u16::@2
Culled Empty Block (label) sgn_u16::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@9 to bitmap_init::@6
Renumbering block bitmap_line::@17 to bitmap_line::@16
Renumbering block bitmap_line::@19 to bitmap_line::@17
Renumbering block bitmap_line::@20 to bitmap_line::@18
Renumbering block mulf_init::@4 to mulf_init::@3
Renumbering block mulf_init::@5 to mulf_init::@4
Renumbering block mulf_init::@6 to mulf_init::@5
Renumbering block mulf_init::@7 to mulf_init::@6
Renumbering block mulf_init::@8 to mulf_init::@7
Renumbering block mulf_init::@9 to mulf_init::@8
Renumbering block mulf_init::@12 to mulf_init::@9
Renumbering block main::@10 to main::@7
Renumbering block main::@11 to main::@8
Renumbering block main::@12 to main::@9
Renumbering block main::@14 to main::@10
Renumbering block show_letter::@3 to show_letter::@2
Renumbering block show_letter::@4 to show_letter::@3
Renumbering block show_letter::@5 to show_letter::@4
Renumbering block show_letter::@6 to show_letter::@5
Renumbering block show_letter::@7 to show_letter::@6
Renumbering block show_letter::@8 to show_letter::@7
Renumbering block show_letter::@9 to show_letter::@8
Renumbering block show_letter::@12 to show_letter::@9
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of mulf_init
Adding NOP phi() at start of mulf_init::@9
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6
Adding NOP phi() at start of bitmap_clear
Adding NOP phi() at start of bitmap_clear::@1
Adding NOP phi() at start of show_letter
Adding NOP phi() at start of show_letter::@8
Adding NOP phi() at start of sgn_u16::@1

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call mulf_init 
  to:main::@8
main::@8: scope:[main]  from main
  [2] phi()
  [3] call bitmap_init 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [4] phi()
  [5] call bitmap_clear 
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main::@9
  [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [7] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [8] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [9] phi()
  to:main::@7
main::@7: scope:[main]  from main::toD0181
  [10] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [11] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3
  to:main::@1
main::@1: scope:[main]  from main::@6 main::@7
  [12] (byte) main::angle#2 ← phi( main::@7/(byte) 0 main::@6/(byte) main::angle#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [13] phi()
  [14] call bitmap_clear 
  to:main::@10
main::@10: scope:[main]  from main::@2
  [15] (byte) show_letter::angle#0 ← (byte) main::angle#2
  [16] call show_letter 
  to:main::@3
main::@3: scope:[main]  from main::@10 main::@3 main::@5
  [17] (byte) main::w#4 ← phi( main::@10/(byte) 0 main::@3/(byte) main::w#4 main::@5/(byte) main::w#1 )
  [18] if(*((const nomodify byte*) RASTER)!=(byte) $fe) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3 main::@4
  [19] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@4
  [20] (byte) main::w#1 ← ++ (byte) main::w#4
  [21] if((byte) main::w#1!=(byte) $3d) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@5
  [22] (byte) main::angle#1 ← (byte) main::angle#2 + (byte) 9
  to:main::@1

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from main
  [23] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [24] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::x_2#2 )
  [24] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte*) mulf_sqr1_hi+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_hi#1 )
  [24] (word) mulf_init::sqr#4 ← phi( mulf_init/(word) 0 mulf_init::@3/(word) mulf_init::sqr#1 )
  [24] (byte) mulf_init::c#2 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::c#1 )
  [24] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte*) mulf_sqr1_lo+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_lo#1 )
  [25] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [26] (byte) mulf_init::dir#2 ← phi( mulf_init::@1/(byte) $ff mulf_init::@8/(byte) mulf_init::dir#4 )
  [26] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_hi mulf_init::@8/(byte*) mulf_init::sqr2_hi#1 )
  [26] (byte) mulf_init::x_255#2 ← phi( mulf_init::@1/(byte) -1 mulf_init::@8/(byte) mulf_init::x_255#1 )
  [26] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_lo mulf_init::@8/(byte*) mulf_init::sqr2_lo#1 )
  [27] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [28] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100)
  [29] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [30] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [31] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2)
  [32] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2)
  [33] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  [34] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  [35] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [36] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [37] (byte) mulf_init::dir#4 ← phi( mulf_init::@6/(byte) 1 mulf_init::@9/(byte) mulf_init::dir#2 )
  [38] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [39] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  [40] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1
  [41] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [42] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  [43] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [44] (byte) mulf_init::x_2#2 ← phi( mulf_init::@2/(byte) mulf_init::x_2#3 mulf_init::@4/(byte) mulf_init::x_2#1 )
  [44] (word) mulf_init::sqr#3 ← phi( mulf_init::@2/(word) mulf_init::sqr#4 mulf_init::@4/(word) mulf_init::sqr#2 )
  [45] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3
  [46] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4
  [47] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3
  [48] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5
  [49] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  [50] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  [51] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  to:mulf_init::@1

(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
bitmap_init: scope:[bitmap_init]  from main::@8
  [52] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [53] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [53] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [54] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [55] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1
  [56] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [57] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [58] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte) $80 )
  [59] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [60] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [61] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/(const nomodify byte*) BITMAP_GRAPHICS bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [61] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [62] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7
  [63] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  [64] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4
  [65] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5
  [66] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  [67] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  [68] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [69] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [70] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [71] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [72] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [73] return 
  to:@return

(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
bitmap_clear: scope:[bitmap_clear]  from main::@2 main::@9
  [74] phi()
  [75] call memset 
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear
  [76] phi()
  [77] call memset 
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@1
  [78] return 
  to:@return

(void()) show_letter((byte) show_letter::angle)
show_letter: scope:[show_letter]  from main::@10
  [79] phi()
  to:show_letter::@1
show_letter::@1: scope:[show_letter]  from show_letter show_letter::@9
  [80] (signed word) show_letter::current_y#4 ← phi( show_letter/(signed word) 0 show_letter::@9/(signed word) show_letter::current_y#11 )
  [80] (signed word) show_letter::current_x#4 ← phi( show_letter/(signed word) 0 show_letter::@9/(signed word) show_letter::current_x#11 )
  [80] (byte) show_letter::i#10 ← phi( show_letter/(byte) 0 show_letter::@9/(byte) show_letter::i#1 )
  [81] (byte~) show_letter::$21 ← (byte) show_letter::i#10 << (byte) 3
  [82] (byte~) show_letter::$17 ← (byte~) show_letter::$21 + (byte) show_letter::i#10
  [83] (signed word) show_letter::to_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) show_letter::$17)
  [84] (signed word) show_letter::to_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17)
  [85] (signed word) show_letter::to_x#1 ← (signed word) show_letter::to_x#0 - (signed byte) $32
  [86] (signed word) show_letter::to_y#1 ← (signed word) show_letter::to_y#0 - (signed word) $96
  [87] (signed word) rotate::vector_x#0 ← (signed word) show_letter::to_x#1
  [88] (signed word) rotate::vector_y#0 ← (signed word) show_letter::to_y#1
  [89] (byte) rotate::angle#0 ← (byte) show_letter::angle#0
  [90] call rotate 
  [91] (signed word) rotate::return_x#0 ← (signed word) rotate::return_x#2
  [92] (signed word) rotate::return_y#0 ← (signed word) rotate::return_y#2
  to:show_letter::@6
show_letter::@6: scope:[show_letter]  from show_letter::@1
  [93] (signed word) show_letter::to_x#2 ← (signed word) rotate::return_x#0
  [94] (signed word) show_letter::to_y#2 ← (signed word) rotate::return_y#0
  [95] (signed word) show_letter::current_x#10 ← (signed word) show_letter::to_x#2 + (signed byte) $64
  [96] (signed word) show_letter::current_y#10 ← (signed word) show_letter::to_y#2 + (signed byte) $64
  [97] (signed word) show_letter::via_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA + (byte~) show_letter::$17)
  [98] (signed word) show_letter::via_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17)
  [99] (signed word) show_letter::via_x#1 ← (signed word) show_letter::via_x#0 - (signed byte) $32
  [100] (signed word) show_letter::via_y#1 ← (signed word) show_letter::via_y#0 - (signed word) $96
  [101] (signed word) rotate::vector_x#1 ← (signed word) show_letter::via_x#1
  [102] (signed word) rotate::vector_y#1 ← (signed word) show_letter::via_y#1
  [103] (byte) rotate::angle#1 ← (byte) show_letter::angle#0
  [104] call rotate 
  [105] (signed word) rotate::return_x#1 ← (signed word) rotate::return_x#2
  [106] (signed word) rotate::return_y#1 ← (signed word) rotate::return_y#2
  to:show_letter::@7
show_letter::@7: scope:[show_letter]  from show_letter::@6
  [107] (signed word) show_letter::via_x#2 ← (signed word) rotate::return_x#1
  [108] (signed word) show_letter::via_y#2 ← (signed word) rotate::return_y#1
  [109] (signed word) show_letter::segment_via_x#0 ← (signed word) show_letter::via_x#2 + (signed byte) $64
  [110] (signed word) show_letter::segment_via_y#0 ← (signed word) show_letter::via_y#2 + (signed byte) $64
  [111] (byte) show_letter::segment_type#0 ← *((byte*)(const struct Segment*) letter_c + (byte~) show_letter::$17)
  [112] if((byte) show_letter::segment_type#0==(const byte) MOVE_TO) goto show_letter::@3
  to:show_letter::@4
show_letter::@4: scope:[show_letter]  from show_letter::@7
  [113] if((byte) show_letter::segment_type#0==(const byte) SPLINE_TO) goto show_letter::@2
  to:show_letter::@5
show_letter::@5: scope:[show_letter]  from show_letter::@4
  [114] (word) bitmap_line::x1#0 ← (word)(signed word) show_letter::current_x#4
  [115] (word) bitmap_line::y1#0 ← (word)(signed word) show_letter::current_y#4
  [116] (word) bitmap_line::x2#0 ← (word)(signed word) show_letter::current_x#10
  [117] (word) bitmap_line::y2#0 ← (word)(signed word) show_letter::current_y#10
  [118] call bitmap_line 
  to:show_letter::@3
show_letter::@3: scope:[show_letter]  from show_letter::@5 show_letter::@7 show_letter::@8
  [119] (byte) show_letter::i#1 ← ++ (byte) show_letter::i#10
  [120] if((byte) show_letter::i#1!=(byte) $16) goto show_letter::@9
  to:show_letter::@return
show_letter::@return: scope:[show_letter]  from show_letter::@3
  [121] return 
  to:@return
show_letter::@9: scope:[show_letter]  from show_letter::@3
  [122] (signed word) show_letter::current_x#11 ← (signed word) show_letter::current_x#10
  [123] (signed word) show_letter::current_y#11 ← (signed word) show_letter::current_y#10
  to:show_letter::@1
show_letter::@2: scope:[show_letter]  from show_letter::@4
  [124] (signed word) spline_8segB::p0_x#0 ← (signed word) show_letter::current_x#4
  [125] (signed word) spline_8segB::p0_y#0 ← (signed word) show_letter::current_y#4
  [126] (signed word) spline_8segB::p1_x#0 ← (signed word) show_letter::segment_via_x#0
  [127] (signed word) spline_8segB::p1_y#0 ← (signed word) show_letter::segment_via_y#0
  [128] (signed word) spline_8segB::p2_x#0 ← (signed word) show_letter::current_x#10
  [129] (signed word) spline_8segB::p2_y#0 ← (signed word) show_letter::current_y#10
  [130] call spline_8segB 
  to:show_letter::@8
show_letter::@8: scope:[show_letter]  from show_letter::@2
  [131] phi()
  [132] call bitmap_plot_spline_8seg 
  to:show_letter::@3

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from bitmap_clear bitmap_clear::@1
  [133] (byte) memset::c#4 ← phi( bitmap_clear/(const byte) bitmap_clear::col#0 bitmap_clear::@1/(byte) 0 )
  [133] (void*) memset::str#3 ← phi( bitmap_clear/(void*)(const nomodify byte*) BITMAP_SCREEN bitmap_clear::@1/(void*)(const nomodify byte*) BITMAP_GRAPHICS )
  [133] (word) memset::num#2 ← phi( bitmap_clear/(word) $3e8 bitmap_clear::@1/(word) $1f40 )
  [134] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [135] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [136] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [137] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [138] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [139] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [140] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [141] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(struct SplineVector16()) rotate((signed word) rotate::vector_x , (signed word) rotate::vector_y , (byte) rotate::angle)
rotate: scope:[rotate]  from show_letter::@1 show_letter::@6
  [142] (signed word) rotate::vector_y#2 ← phi( show_letter::@1/(signed word) rotate::vector_y#0 show_letter::@6/(signed word) rotate::vector_y#1 )
  [142] (signed word) rotate::vector_x#2 ← phi( show_letter::@1/(signed word) rotate::vector_x#0 show_letter::@6/(signed word) rotate::vector_x#1 )
  [142] (byte) rotate::angle#2 ← phi( show_letter::@1/(byte) rotate::angle#0 show_letter::@6/(byte) rotate::angle#1 )
  [143] (signed word) rotate::cos_a#0 ← (signed word)*((const signed byte*) COS + (byte) rotate::angle#2)
  [144] (signed word) mulf16s::a#0 ← (signed word) rotate::cos_a#0
  [145] (signed word) mulf16s::b#0 ← (signed word) rotate::vector_x#2
  [146] call mulf16s 
  [147] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0
  to:rotate::@1
rotate::@1: scope:[rotate]  from rotate
  [148] (signed dword~) rotate::$0 ← (signed dword) mulf16s::return#2
  [149] (signed word~) rotate::$10 ← (signed word)(signed dword~) rotate::$0
  [150] (signed word) rotate::xr#0 ← (signed word~) rotate::$10 << (byte) 1
  [151] (signed word) mulf16s::a#1 ← (signed word) rotate::cos_a#0
  [152] (signed word) mulf16s::b#1 ← (signed word) rotate::vector_y#2
  [153] call mulf16s 
  [154] (signed dword) mulf16s::return#3 ← (signed dword) mulf16s::return#0
  to:rotate::@2
rotate::@2: scope:[rotate]  from rotate::@1
  [155] (signed dword~) rotate::$2 ← (signed dword) mulf16s::return#3
  [156] (signed word~) rotate::$11 ← (signed word)(signed dword~) rotate::$2
  [157] (signed word) rotate::yr#0 ← (signed word~) rotate::$11 << (byte) 1
  [158] (signed word) rotate::sin_a#0 ← (signed word)*((const signed byte*) SIN + (byte) rotate::angle#2)
  [159] (signed word) mulf16s::a#2 ← (signed word) rotate::sin_a#0
  [160] (signed word) mulf16s::b#2 ← (signed word) rotate::vector_y#2
  [161] call mulf16s 
  [162] (signed dword) mulf16s::return#4 ← (signed dword) mulf16s::return#0
  to:rotate::@3
rotate::@3: scope:[rotate]  from rotate::@2
  [163] (signed dword~) rotate::$4 ← (signed dword) mulf16s::return#4
  [164] (signed word~) rotate::$12 ← (signed word)(signed dword~) rotate::$4
  [165] (signed word~) rotate::$5 ← (signed word~) rotate::$12 << (byte) 1
  [166] (signed word) rotate::xr#1 ← (signed word) rotate::xr#0 - (signed word~) rotate::$5
  [167] (signed word) mulf16s::a#3 ← (signed word) rotate::sin_a#0
  [168] (signed word) mulf16s::b#3 ← (signed word) rotate::vector_x#2
  [169] call mulf16s 
  [170] (signed dword) mulf16s::return#10 ← (signed dword) mulf16s::return#0
  to:rotate::@4
rotate::@4: scope:[rotate]  from rotate::@3
  [171] (signed dword~) rotate::$6 ← (signed dword) mulf16s::return#10
  [172] (signed word~) rotate::$13 ← (signed word)(signed dword~) rotate::$6
  [173] (signed word~) rotate::$7 ← (signed word~) rotate::$13 << (byte) 1
  [174] (signed word) rotate::yr#1 ← (signed word) rotate::yr#0 + (signed word~) rotate::$7
  [175] (byte~) rotate::$8 ← > (signed word) rotate::xr#1
  [176] (byte~) rotate::$9 ← > (signed word) rotate::yr#1
  [177] (signed word) rotate::return_x#2 ← (signed word)(signed byte)(byte~) rotate::$8
  [178] (signed word) rotate::return_y#2 ← (signed word)(signed byte)(byte~) rotate::$9
  to:rotate::@return
rotate::@return: scope:[rotate]  from rotate::@4
  [179] return 
  to:@return

(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
bitmap_line: scope:[bitmap_line]  from bitmap_plot_spline_8seg::@1 show_letter::@5
  [180] (word) bitmap_line::y2#11 ← phi( bitmap_plot_spline_8seg::@1/(word) bitmap_line::y2#13 show_letter::@5/(word) bitmap_line::y2#0 )
  [180] (word) bitmap_line::x2#10 ← phi( bitmap_plot_spline_8seg::@1/(word) bitmap_line::x2#13 show_letter::@5/(word) bitmap_line::x2#0 )
  [180] (word) bitmap_line::y#0 ← phi( bitmap_plot_spline_8seg::@1/(word) bitmap_line::y1#1 show_letter::@5/(word) bitmap_line::y1#0 )
  [180] (word) bitmap_line::x#0 ← phi( bitmap_plot_spline_8seg::@1/(word) bitmap_line::x1#1 show_letter::@5/(word) bitmap_line::x1#0 )
  [181] (word) abs_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0
  [182] call abs_u16 
  [183] (word) abs_u16::return#0 ← (word) abs_u16::return#4
  to:bitmap_line::@12
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line
  [184] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0
  [185] (word) abs_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0
  [186] call abs_u16 
  [187] (word) abs_u16::return#1 ← (word) abs_u16::return#4
  to:bitmap_line::@13
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@12
  [188] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1
  [189] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1
  to:bitmap_line::@18
bitmap_line::@18: scope:[bitmap_line]  from bitmap_line::@13
  [190] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4
  to:bitmap_line::@1
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line::@13 bitmap_line::@18
  [191] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0
  [192] call sgn_u16 
  [193] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@1
  [194] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0
  [195] (word) sgn_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0
  [196] call sgn_u16 
  [197] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4
  to:bitmap_line::@15
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@14
  [198] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1
  [199] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2
  to:bitmap_line::@5
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@15
  [200] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5 bitmap_line::@7
  [201] (word) bitmap_line::e#3 ← phi( bitmap_line::@5/(word) bitmap_line::e#0 bitmap_line::@7/(word) bitmap_line::e#6 )
  [201] (word) bitmap_line::y#4 ← phi( bitmap_line::@5/(word) bitmap_line::y#0 bitmap_line::@7/(word) bitmap_line::y#1 )
  [201] (word) bitmap_line::x#13 ← phi( bitmap_line::@5/(word) bitmap_line::x#0 bitmap_line::@7/(word) bitmap_line::x#12 )
  [202] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13
  [203] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4
  [204] call bitmap_plot 
  to:bitmap_line::@16
bitmap_line::@16: scope:[bitmap_line]  from bitmap_line::@6
  [205] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0
  [206] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0
  [207] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7
  to:bitmap_line::@8
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@16
  [208] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0
  [209] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0
  to:bitmap_line::@7
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@16 bitmap_line::@8
  [210] (word) bitmap_line::e#6 ← phi( bitmap_line::@16/(word) bitmap_line::e#1 bitmap_line::@8/(word) bitmap_line::e#2 )
  [210] (word) bitmap_line::x#12 ← phi( bitmap_line::@16/(word) bitmap_line::x#13 bitmap_line::@8/(word) bitmap_line::x#1 )
  [211] if((word) bitmap_line::y#1!=(word) bitmap_line::y2#11) goto bitmap_line::@6
  to:bitmap_line::@3
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@7
  [212] (word) bitmap_line::y#7 ← phi( bitmap_line::@10/(word) bitmap_line::y#13 bitmap_line::@7/(word) bitmap_line::y#1 )
  [212] (word) bitmap_line::x#6 ← phi( bitmap_line::@10/(word) bitmap_line::x#15 bitmap_line::@7/(word) bitmap_line::x#12 )
  [213] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6
  [214] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7
  [215] call bitmap_plot 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@3 bitmap_line::@4
  [216] return 
  to:@return
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line::@15
  [217] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1
  to:bitmap_line::@9
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@2
  [218] (word) bitmap_line::e1#3 ← phi( bitmap_line::@10/(word) bitmap_line::e1#6 bitmap_line::@2/(word) bitmap_line::e1#0 )
  [218] (word) bitmap_line::y#15 ← phi( bitmap_line::@10/(word) bitmap_line::y#13 bitmap_line::@2/(word) bitmap_line::y#0 )
  [218] (word) bitmap_line::x#7 ← phi( bitmap_line::@10/(word) bitmap_line::x#15 bitmap_line::@2/(word) bitmap_line::x#0 )
  [219] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7
  [220] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15
  [221] call bitmap_plot 
  to:bitmap_line::@17
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@9
  [222] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0
  [223] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0
  [224] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10
  to:bitmap_line::@11
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@17
  [225] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0
  [226] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0
  to:bitmap_line::@10
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@11 bitmap_line::@17
  [227] (word) bitmap_line::e1#6 ← phi( bitmap_line::@11/(word) bitmap_line::e1#2 bitmap_line::@17/(word) bitmap_line::e1#1 )
  [227] (word) bitmap_line::y#13 ← phi( bitmap_line::@11/(word) bitmap_line::y#2 bitmap_line::@17/(word) bitmap_line::y#15 )
  [228] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#10) goto bitmap_line::@9
  to:bitmap_line::@3
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@18
  [229] (word) bitmap_plot::x#0 ← (word) bitmap_line::x#0
  [230] (byte) bitmap_plot::y#0 ← (byte)(word) bitmap_line::y#0
  [231] call bitmap_plot 
  to:bitmap_line::@return

(void()) spline_8segB((signed word) spline_8segB::p0_x , (signed word) spline_8segB::p0_y , (signed word) spline_8segB::p1_x , (signed word) spline_8segB::p1_y , (signed word) spline_8segB::p2_x , (signed word) spline_8segB::p2_y)
spline_8segB: scope:[spline_8segB]  from show_letter::@2
  [232] (signed word~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#0 << (byte) 1
  [233] (signed word~) spline_8segB::$1 ← (signed word) spline_8segB::p2_x#0 - (signed word~) spline_8segB::$0
  [234] (signed word) spline_8segB::a_x#0 ← (signed word~) spline_8segB::$1 + (signed word) spline_8segB::p0_x#0
  [235] (signed word~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#0 << (byte) 1
  [236] (signed word~) spline_8segB::$4 ← (signed word) spline_8segB::p2_y#0 - (signed word~) spline_8segB::$3
  [237] (signed word) spline_8segB::a_y#0 ← (signed word~) spline_8segB::$4 + (signed word) spline_8segB::p0_y#0
  [238] (signed word~) spline_8segB::$6 ← (signed word) spline_8segB::p1_x#0 - (signed word) spline_8segB::p0_x#0
  [239] (signed word) spline_8segB::b_x#0 ← (signed word~) spline_8segB::$6 << (byte) 1
  [240] (signed word~) spline_8segB::$8 ← (signed word) spline_8segB::p1_y#0 - (signed word) spline_8segB::p0_y#0
  [241] (signed word) spline_8segB::b_y#0 ← (signed word~) spline_8segB::$8 << (byte) 1
  [242] (signed word~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 << (byte) 3
  [243] (signed word) spline_8segB::i_x#0 ← (signed word) spline_8segB::a_x#0 + (signed word~) spline_8segB::$10
  [244] (signed word~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 << (byte) 3
  [245] (signed word) spline_8segB::i_y#0 ← (signed word) spline_8segB::a_y#0 + (signed word~) spline_8segB::$12
  [246] (signed word) spline_8segB::j_x#0 ← (signed word) spline_8segB::a_x#0 << (byte) 1
  [247] (signed word) spline_8segB::j_y#0 ← (signed word) spline_8segB::a_y#0 << (byte) 1
  [248] (signed word) spline_8segB::p_x#0 ← (signed word) spline_8segB::p0_x#0 << (byte) 6
  [249] (signed word) spline_8segB::p_y#0 ← (signed word) spline_8segB::p0_y#0 << (byte) 6
  to:spline_8segB::@1
spline_8segB::@1: scope:[spline_8segB]  from spline_8segB spline_8segB::@1
  [250] (signed word) spline_8segB::i_y#2 ← phi( spline_8segB/(signed word) spline_8segB::i_y#0 spline_8segB::@1/(signed word) spline_8segB::i_y#1 )
  [250] (signed word) spline_8segB::i_x#2 ← phi( spline_8segB/(signed word) spline_8segB::i_x#0 spline_8segB::@1/(signed word) spline_8segB::i_x#1 )
  [250] (byte) spline_8segB::n#2 ← phi( spline_8segB/(byte) 0 spline_8segB::@1/(byte) spline_8segB::n#1 )
  [250] (signed word) spline_8segB::p_y#2 ← phi( spline_8segB/(signed word) spline_8segB::p_y#0 spline_8segB::@1/(signed word) spline_8segB::p_y#1 )
  [250] (signed word) spline_8segB::p_x#2 ← phi( spline_8segB/(signed word) spline_8segB::p_x#0 spline_8segB::@1/(signed word) spline_8segB::p_x#1 )
  [251] (signed word~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (signed byte) $20
  [252] (signed word~) spline_8segB::$23 ← (signed word~) spline_8segB::$22 >> (byte) 6
  [253] (signed word~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (signed byte) $20
  [254] (signed word~) spline_8segB::$25 ← (signed word~) spline_8segB::$24 >> (byte) 6
  [255] (byte~) spline_8segB::$31 ← (byte) spline_8segB::n#2 << (byte) 2
  [256] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$23
  [257] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$25
  [258] (signed word) spline_8segB::p_x#1 ← (signed word) spline_8segB::p_x#2 + (signed word) spline_8segB::i_x#2
  [259] (signed word) spline_8segB::p_y#1 ← (signed word) spline_8segB::p_y#2 + (signed word) spline_8segB::i_y#2
  [260] (signed word) spline_8segB::i_x#1 ← (signed word) spline_8segB::i_x#2 + (signed word) spline_8segB::j_x#0
  [261] (signed word) spline_8segB::i_y#1 ← (signed word) spline_8segB::i_y#2 + (signed word) spline_8segB::j_y#0
  [262] (byte) spline_8segB::n#1 ← ++ (byte) spline_8segB::n#2
  [263] if((byte) spline_8segB::n#1!=(byte) 8) goto spline_8segB::@1
  to:spline_8segB::@2
spline_8segB::@2: scope:[spline_8segB]  from spline_8segB::@1
  [264] (signed word~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#1 + (signed byte) $20
  [265] (signed word~) spline_8segB::$19 ← (signed word~) spline_8segB::$18 >> (byte) 6
  [266] (signed word~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#1 + (signed byte) $20
  [267] (signed word~) spline_8segB::$21 ← (signed word~) spline_8segB::$20 >> (byte) 6
  [268] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$19
  [269] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$21
  to:spline_8segB::@return
spline_8segB::@return: scope:[spline_8segB]  from spline_8segB::@2
  [270] return 
  to:@return

(void()) bitmap_plot_spline_8seg()
bitmap_plot_spline_8seg: scope:[bitmap_plot_spline_8seg]  from show_letter::@8
  [271] (signed word) bitmap_plot_spline_8seg::current_x#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG)
  [272] (signed word) bitmap_plot_spline_8seg::current_y#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y)
  to:bitmap_plot_spline_8seg::@1
bitmap_plot_spline_8seg::@1: scope:[bitmap_plot_spline_8seg]  from bitmap_plot_spline_8seg bitmap_plot_spline_8seg::@2
  [273] (signed word) bitmap_plot_spline_8seg::current_y#2 ← phi( bitmap_plot_spline_8seg/(signed word) bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::@2/(signed word) bitmap_plot_spline_8seg::current_y#1 )
  [273] (signed word) bitmap_plot_spline_8seg::current_x#2 ← phi( bitmap_plot_spline_8seg/(signed word) bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::@2/(signed word) bitmap_plot_spline_8seg::current_x#1 )
  [273] (byte) bitmap_plot_spline_8seg::n#2 ← phi( bitmap_plot_spline_8seg/(byte) 1 bitmap_plot_spline_8seg::@2/(byte) bitmap_plot_spline_8seg::n#1 )
  [274] (byte~) bitmap_plot_spline_8seg::$4 ← (byte) bitmap_plot_spline_8seg::n#2 << (byte) 2
  [275] (word) bitmap_line::x1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_x#2
  [276] (word) bitmap_line::y1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_y#2
  [277] (word) bitmap_line::x2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4)
  [278] (word) bitmap_line::y2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4)
  [279] call bitmap_line 
  to:bitmap_plot_spline_8seg::@2
bitmap_plot_spline_8seg::@2: scope:[bitmap_plot_spline_8seg]  from bitmap_plot_spline_8seg::@1
  [280] (signed word) bitmap_plot_spline_8seg::current_x#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4)
  [281] (signed word) bitmap_plot_spline_8seg::current_y#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4)
  [282] (byte) bitmap_plot_spline_8seg::n#1 ← ++ (byte) bitmap_plot_spline_8seg::n#2
  [283] if((byte) bitmap_plot_spline_8seg::n#1!=(byte) 9) goto bitmap_plot_spline_8seg::@1
  to:bitmap_plot_spline_8seg::@return
bitmap_plot_spline_8seg::@return: scope:[bitmap_plot_spline_8seg]  from bitmap_plot_spline_8seg::@2
  [284] return 
  to:@return

(signed dword()) mulf16s((signed word) mulf16s::a , (signed word) mulf16s::b)
mulf16s: scope:[mulf16s]  from rotate rotate::@1 rotate::@2 rotate::@3
  [285] (signed word) mulf16s::b#4 ← phi( rotate/(signed word) mulf16s::b#0 rotate::@1/(signed word) mulf16s::b#1 rotate::@2/(signed word) mulf16s::b#2 rotate::@3/(signed word) mulf16s::b#3 )
  [285] (signed word) mulf16s::a#4 ← phi( rotate/(signed word) mulf16s::a#0 rotate::@1/(signed word) mulf16s::a#1 rotate::@2/(signed word) mulf16s::a#2 rotate::@3/(signed word) mulf16s::a#3 )
  [286] (word) mulf16u::a#0 ← (word)(signed word) mulf16s::a#4
  [287] (word) mulf16u::b#0 ← (word)(signed word) mulf16s::b#4
  [288] call mulf16u 
  [289] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0
  to:mulf16s::@5
mulf16s::@5: scope:[mulf16s]  from mulf16s
  [290] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2
  [291] if((signed word) mulf16s::a#4>=(signed byte) 0) goto mulf16s::@1
  to:mulf16s::@3
mulf16s::@3: scope:[mulf16s]  from mulf16s::@5
  [292] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0
  [293] (word~) mulf16s::$11 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#4
  [294] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$11
  to:mulf16s::@1
mulf16s::@1: scope:[mulf16s]  from mulf16s::@3 mulf16s::@5
  [295] (dword) mulf16s::m#5 ← phi( mulf16s::@3/(dword) mulf16s::m#1 mulf16s::@5/(dword) mulf16s::m#0 )
  [296] if((signed word) mulf16s::b#4>=(signed byte) 0) goto mulf16s::@2
  to:mulf16s::@4
mulf16s::@4: scope:[mulf16s]  from mulf16s::@1
  [297] (word~) mulf16s::$9 ← > (dword) mulf16s::m#5
  [298] (word~) mulf16s::$12 ← (word~) mulf16s::$9 - (word)(signed word) mulf16s::a#4
  [299] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$12
  to:mulf16s::@2
mulf16s::@2: scope:[mulf16s]  from mulf16s::@1 mulf16s::@4
  [300] (dword) mulf16s::m#4 ← phi( mulf16s::@1/(dword) mulf16s::m#5 mulf16s::@4/(dword) mulf16s::m#2 )
  [301] (signed dword) mulf16s::return#0 ← (signed dword)(dword) mulf16s::m#4
  to:mulf16s::@return
mulf16s::@return: scope:[mulf16s]  from mulf16s::@2
  [302] return 
  to:@return

(word()) abs_u16((word) abs_u16::w)
abs_u16: scope:[abs_u16]  from bitmap_line bitmap_line::@12
  [303] (word) abs_u16::w#2 ← phi( bitmap_line/(word) abs_u16::w#0 bitmap_line::@12/(word) abs_u16::w#1 )
  [304] (byte~) abs_u16::$0 ← > (word) abs_u16::w#2
  [305] (byte~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80
  [306] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1
  to:abs_u16::@return
abs_u16::@1: scope:[abs_u16]  from abs_u16
  [307] (word) abs_u16::return#2 ← - (word) abs_u16::w#2
  to:abs_u16::@return
abs_u16::@return: scope:[abs_u16]  from abs_u16 abs_u16::@1
  [308] (word) abs_u16::return#4 ← phi( abs_u16::@1/(word) abs_u16::return#2 abs_u16/(word) abs_u16::w#2 )
  [309] return 
  to:@return

(word()) sgn_u16((word) sgn_u16::w)
sgn_u16: scope:[sgn_u16]  from bitmap_line::@1 bitmap_line::@14
  [310] (word) sgn_u16::w#2 ← phi( bitmap_line::@1/(word) sgn_u16::w#0 bitmap_line::@14/(word) sgn_u16::w#1 )
  [311] (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2
  [312] (byte~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80
  [313] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1
  to:sgn_u16::@return
sgn_u16::@1: scope:[sgn_u16]  from sgn_u16
  [314] phi()
  to:sgn_u16::@return
sgn_u16::@return: scope:[sgn_u16]  from sgn_u16 sgn_u16::@1
  [315] (word) sgn_u16::return#4 ← phi( sgn_u16::@1/(byte) -1 sgn_u16/(byte) 1 )
  [316] return 
  to:@return

(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line::@3 bitmap_line::@4 bitmap_line::@6 bitmap_line::@9
  [317] (word) bitmap_plot::x#4 ← phi( bitmap_line::@3/(word) bitmap_plot::x#2 bitmap_line::@4/(word) bitmap_plot::x#0 bitmap_line::@6/(word) bitmap_plot::x#1 bitmap_line::@9/(word) bitmap_plot::x#3 )
  [317] (byte) bitmap_plot::y#4 ← phi( bitmap_line::@3/(byte) bitmap_plot::y#2 bitmap_line::@4/(byte) bitmap_plot::y#0 bitmap_line::@6/(byte) bitmap_plot::y#1 bitmap_line::@9/(byte) bitmap_plot::y#3 )
  [318] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
  [319] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8
  [320] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0
  [321] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4
  [322] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [323] return 
  to:@return

(dword()) mulf16u((word) mulf16u::a , (word) mulf16u::b)
mulf16u: scope:[mulf16u]  from mulf16s
  [324] *((const nomodify word*) mulf16u::memA) ← (word) mulf16u::a#0
  [325] *((const nomodify word*) mulf16u::memB) ← (word) mulf16u::b#0
  asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
  [327] (dword) mulf16u::return#0 ← *((const nomodify dword*) mulf16u::memR)
  to:mulf16u::@return
mulf16u::@return: scope:[mulf16u]  from mulf16u
  [328] return 
  to:@return

null depth in calling loop Loop head: bitmap_plot_spline_8seg::@1 tails: bitmap_plot_spline_8seg::@2 blocks: bitmap_plot_spline_8seg::@2 bitmap_plot_spline_8seg::@1  in scope bitmap_line

VARIABLE REGISTER WEIGHTS
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(struct SplineVector16) Segment::to
(byte) Segment::type
(struct SplineVector16) Segment::via
(signed word) SplineVector16::x
(signed word) SplineVector16::y
(signed dword) SplineVector32::x
(signed dword) SplineVector32::y
(word()) abs_u16((word) abs_u16::w)
(byte~) abs_u16::$0 2.0000000002E10
(byte~) abs_u16::$1 2.0000000002E10
(word) abs_u16::return
(word) abs_u16::return#0 2.000000002E9
(word) abs_u16::return#1 2.000000002E9
(word) abs_u16::return#2 2.0000000002E10
(word) abs_u16::return#4 5.500000001E9
(word) abs_u16::w
(word) abs_u16::w#0 2.000000002E9
(word) abs_u16::w#1 2.000000002E9
(word) abs_u16::w#2 8.00000000125E9
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::col
(byte) bitmap_clear::fgcol
(byte*) bitmap_gfx
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(byte~) bitmap_init::$4 202.0
(byte~) bitmap_init::$5 202.0
(byte~) bitmap_init::$6 202.0
(byte~) bitmap_init::$7 50.5
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 101.0
(byte) bitmap_init::bits#3 151.5
(byte) bitmap_init::bits#4 67.33333333333333
(byte*) bitmap_init::gfx
(byte*) bitmap_init::screen
(byte) bitmap_init::x
(byte) bitmap_init::x#1 151.5
(byte) bitmap_init::x#2 50.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 151.5
(byte) bitmap_init::y#2 50.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 202.0
(byte*) bitmap_init::yoffs#2 63.125
(byte*) bitmap_init::yoffs#4 101.0
(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
(word) bitmap_line::dx
(word) bitmap_line::dx#0 7.5100000000175E10
(word) bitmap_line::dy
(word) bitmap_line::dy#0 8.34444444446389E10
(word) bitmap_line::e
(word) bitmap_line::e#0 2.000000002E9
(word) bitmap_line::e#1 1.3333333333346667E12
(word) bitmap_line::e#2 2.000000000002E12
(word) bitmap_line::e#3 4.0020000000060004E11
(word) bitmap_line::e#6 1.5000000000015E12
(word) bitmap_line::e1
(word) bitmap_line::e1#0 2.000000002E9
(word) bitmap_line::e1#1 1.3333333333346667E12
(word) bitmap_line::e1#2 2.000000000002E12
(word) bitmap_line::e1#3 4.0020000000060004E11
(word) bitmap_line::e1#6 1.5000000000015E12
(word) bitmap_line::sx
(word) bitmap_line::sx#0 6.670000000009999E10
(word) bitmap_line::sy
(word) bitmap_line::sy#0 7.696153846165384E10
(word) bitmap_line::x
(word) bitmap_line::x#0 2.318186366818182E8
(word) bitmap_line::x#1 1.000000000001E12
(word) bitmap_line::x#12 2.000000000002E12
(word) bitmap_line::x#13 5.715714285721428E11
(word) bitmap_line::x#15 5.714285714291428E11
(word) bitmap_line::x#6 2.001000000003E12
(word) bitmap_line::x#7 7.50250000001E11
(word) bitmap_line::x1
(word) bitmap_line::x1#0 5000.5
(word) bitmap_line::x1#1 5.00000005E7
(word) bitmap_line::x2
(word) bitmap_line::x2#0 10001.0
(word) bitmap_line::x2#10 3.131562531265625E10
(word) bitmap_line::x2#13 1.00000001E8
(word) bitmap_line::y
(word) bitmap_line::y#0 1.7826130460869563E8
(word) bitmap_line::y#1 5.714285714291428E11
(word) bitmap_line::y#13 2.000000000002E12
(word) bitmap_line::y#15 4.287142857148571E11
(word) bitmap_line::y#2 1.000000000001E12
(word) bitmap_line::y#4 5.0025000000075E11
(word) bitmap_line::y#7 1.000000000001E12
(word) bitmap_line::y1
(word) bitmap_line::y1#0 6667.333333333333
(word) bitmap_line::y1#1 6.6666667333333336E7
(word) bitmap_line::y2
(word) bitmap_line::y2#0 20002.0
(word) bitmap_line::y2#11 3.131562531265625E10
(word) bitmap_line::y2#13 2.00000002E8
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0 2.0000000000002E13
(byte~) bitmap_plot::$1 2.0000000000002E13
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 5.0000000000005E12
(byte*) bitmap_plot::plotter#1 1.50000000000015E13
(word) bitmap_plot::x
(word) bitmap_plot::x#0 1.000000001E9
(word) bitmap_plot::x#1 1.000000000001E12
(word) bitmap_plot::x#2 1.000000001E9
(word) bitmap_plot::x#3 1.000000000001E12
(word) bitmap_plot::x#4 5.5005000000015E12
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 2.000000002E9
(byte) bitmap_plot::y#1 2.000000000002E12
(byte) bitmap_plot::y#2 2.000000002E9
(byte) bitmap_plot::y#3 2.000000000002E12
(byte) bitmap_plot::y#4 2.2002000000006E13
(void()) bitmap_plot_spline_8seg()
(byte~) bitmap_plot_spline_8seg::$4 4.285714328571428E7
(signed word) bitmap_plot_spline_8seg::current_x
(signed word) bitmap_plot_spline_8seg::current_x#0 100001.0
(signed word) bitmap_plot_spline_8seg::current_x#1 5.00000005E7
(signed word) bitmap_plot_spline_8seg::current_x#2 5.0050001E7
(signed word) bitmap_plot_spline_8seg::current_y
(signed word) bitmap_plot_spline_8seg::current_y#0 200002.0
(signed word) bitmap_plot_spline_8seg::current_y#1 6.6666667333333336E7
(signed word) bitmap_plot_spline_8seg::current_y#2 3.3366667333333336E7
(byte) bitmap_plot_spline_8seg::n
(byte) bitmap_plot_spline_8seg::n#1 1.500000015E8
(byte) bitmap_plot_spline_8seg::n#2 3.3333333666666664E7
(byte*) bitmap_screen
(void()) main()
(byte) main::angle
(byte) main::angle#1 22.0
(byte) main::angle#2 3.3000000000000003
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(byte*) main::toD0181_screen
(byte*) main::vicSelectGfxBank1_gfx
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(byte) main::w
(byte) main::w#1 151.5
(byte) main::w#4 734.6666666666666
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 12500.125
(byte*) memset::dst
(byte*) memset::dst#1 200002.0
(byte*) memset::dst#2 133668.3333333333
(byte*) memset::dst#4 2002.0
(byte*) memset::end
(byte*) memset::end#0 16833.666666666664
(word) memset::num
(word) memset::num#2 1001.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(signed dword()) mulf16s((signed word) mulf16s::a , (signed word) mulf16s::b)
(word~) mulf16s::$11 2000002.0
(word~) mulf16s::$12 2000002.0
(word~) mulf16s::$6 2000002.0
(word~) mulf16s::$9 2000002.0
(signed word) mulf16s::a
(signed word) mulf16s::a#0 100001.0
(signed word) mulf16s::a#1 100001.0
(signed word) mulf16s::a#2 100001.0
(signed word) mulf16s::a#3 100001.0
(signed word) mulf16s::a#4 107692.69230769231
(signed word) mulf16s::b
(signed word) mulf16s::b#0 200002.0
(signed word) mulf16s::b#1 200002.0
(signed word) mulf16s::b#2 200002.0
(signed word) mulf16s::b#3 200002.0
(signed word) mulf16s::b#4 127273.18181818182
(dword) mulf16s::m
(dword) mulf16s::m#0 1000001.0
(dword) mulf16s::m#1 2000002.0
(dword) mulf16s::m#2 2000002.0
(dword) mulf16s::m#4 2000002.0
(dword) mulf16s::m#5 1250001.25
(signed dword) mulf16s::return
(signed dword) mulf16s::return#0 233334.1666666667
(signed dword) mulf16s::return#10 200002.0
(signed dword) mulf16s::return#2 200002.0
(signed dword) mulf16s::return#3 200002.0
(signed dword) mulf16s::return#4 200002.0
(dword()) mulf16u((word) mulf16u::a , (word) mulf16u::b)
(word) mulf16u::a
(word) mulf16u::a#0 5500001.0
(word) mulf16u::b
(word) mulf16u::b#0 5500001.0
(dword) mulf16u::return
(dword) mulf16u::return#0 3666667.333333333
(dword) mulf16u::return#2 2000002.0
(void()) mulf_init()
(byte~) mulf_init::$1 202.0
(byte~) mulf_init::$4 202.0
(byte~) mulf_init::$5 202.0
(byte) mulf_init::c
(byte) mulf_init::c#1 23.307692307692307
(byte) mulf_init::c#2 101.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 37.875
(byte) mulf_init::dir#4 101.0
(word) mulf_init::sqr
(word) mulf_init::sqr#1 101.0
(word) mulf_init::sqr#2 202.0
(word) mulf_init::sqr#3 84.16666666666666
(word) mulf_init::sqr#4 50.5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 67.33333333333333
(byte*) mulf_init::sqr1_hi#2 25.25
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 202.0
(byte*) mulf_init::sqr1_lo#2 28.857142857142858
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 33.666666666666664
(byte*) mulf_init::sqr2_hi#2 75.75
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 202.0
(byte*) mulf_init::sqr2_lo#2 44.888888888888886
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 101.0
(byte) mulf_init::x_2#2 50.5
(byte) mulf_init::x_2#3 60.599999999999994
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 60.599999999999994
(byte) mulf_init::x_255#2 80.8
(struct SplineVector16()) rotate((signed word) rotate::vector_x , (signed word) rotate::vector_y , (byte) rotate::angle)
(signed dword~) rotate::$0 100001.0
(signed word~) rotate::$10 200002.0
(signed word~) rotate::$11 200002.0
(signed word~) rotate::$12 200002.0
(signed word~) rotate::$13 200002.0
(signed dword~) rotate::$2 100001.0
(signed dword~) rotate::$4 100001.0
(signed word~) rotate::$5 200002.0
(signed dword~) rotate::$6 100001.0
(signed word~) rotate::$7 200002.0
(byte~) rotate::$8 50000.5
(byte~) rotate::$9 50000.5
(byte) rotate::angle
(byte) rotate::angle#0 20002.0
(byte) rotate::angle#1 20002.0
(byte) rotate::angle#2 1250.125
(signed word) rotate::cos_a
(signed word) rotate::cos_a#0 37500.375
(struct SplineVector16) rotate::return
(signed word) rotate::return_x
(signed word) rotate::return_x#0 10001.0
(signed word) rotate::return_x#1 10001.0
(signed word) rotate::return_x#2 24000.600000000002
(signed word) rotate::return_y
(signed word) rotate::return_y#0 10001.0
(signed word) rotate::return_y#1 10001.0
(signed word) rotate::return_y#2 20000.5
(signed word) rotate::rotated_x
(signed word) rotate::rotated_y
(signed word) rotate::sin_a
(signed word) rotate::sin_a#0 33333.66666666667
(struct SplineVector16) rotate::vector
(signed word) rotate::vector_x
(signed word) rotate::vector_x#0 6667.333333333333
(signed word) rotate::vector_x#1 6667.333333333333
(signed word) rotate::vector_x#2 8461.692307692309
(signed word) rotate::vector_y
(signed word) rotate::vector_y#0 10001.0
(signed word) rotate::vector_y#1 10001.0
(signed word) rotate::vector_y#2 12222.444444444445
(signed word) rotate::xr
(signed word) rotate::xr#0 12500.125
(signed word) rotate::xr#1 22222.444444444445
(signed word) rotate::yr
(signed word) rotate::yr#0 11764.823529411764
(signed word) rotate::yr#1 100001.0
(word()) sgn_u16((word) sgn_u16::w)
(byte~) sgn_u16::$0 2.0000000002E10
(byte~) sgn_u16::$1 2.0000000002E10
(word) sgn_u16::return
(word) sgn_u16::return#0 2.000000002E9
(word) sgn_u16::return#1 2.000000002E9
(word) sgn_u16::return#4 5.000000005E8
(word) sgn_u16::w
(word) sgn_u16::w#0 2.000000002E9
(word) sgn_u16::w#1 2.000000002E9
(word) sgn_u16::w#2 1.2000000003E10
(void()) show_letter((byte) show_letter::angle)
(byte~) show_letter::$17 2069.1724137931037
(byte~) show_letter::$21 20002.0
(byte) show_letter::angle
(byte) show_letter::angle#0 370.6111111111111
(signed word) show_letter::current_x
(signed word) show_letter::current_x#10 857.2285714285714
(signed word) show_letter::current_x#11 10001.0
(signed word) show_letter::current_x#4 588.2941176470588
(signed word) show_letter::current_y
(signed word) show_letter::current_y#10 857.2285714285714
(signed word) show_letter::current_y#11 20002.0
(signed word) show_letter::current_y#4 555.6111111111111
(byte) show_letter::i
(byte) show_letter::i#1 7500.75
(byte) show_letter::i#10 833.4166666666666
(struct SplineVector16) show_letter::segment_to
(signed word) show_letter::segment_to_x
(signed word) show_letter::segment_to_y
(byte) show_letter::segment_type
(byte) show_letter::segment_type#0 15001.5
(struct SplineVector16) show_letter::segment_via
(signed word) show_letter::segment_via_x
(signed word) show_letter::segment_via_x#0 2857.4285714285716
(signed word) show_letter::segment_via_y
(signed word) show_letter::segment_via_y#0 2857.4285714285716
(signed word) show_letter::to_x
(signed word) show_letter::to_x#0 10001.0
(signed word) show_letter::to_x#1 10001.0
(signed word) show_letter::to_x#2 10001.0
(signed word) show_letter::to_y
(signed word) show_letter::to_y#0 10001.0
(signed word) show_letter::to_y#1 10001.0
(signed word) show_letter::to_y#2 10001.0
(signed word) show_letter::via_x
(signed word) show_letter::via_x#0 10001.0
(signed word) show_letter::via_x#1 10001.0
(signed word) show_letter::via_x#2 10001.0
(signed word) show_letter::via_y
(signed word) show_letter::via_y#0 10001.0
(signed word) show_letter::via_y#1 10001.0
(signed word) show_letter::via_y#2 10001.0
(void()) spline_8segB((signed word) spline_8segB::p0_x , (signed word) spline_8segB::p0_y , (signed word) spline_8segB::p1_x , (signed word) spline_8segB::p1_y , (signed word) spline_8segB::p2_x , (signed word) spline_8segB::p2_y)
(signed word~) spline_8segB::$0 200002.0
(signed word~) spline_8segB::$1 200002.0
(signed word~) spline_8segB::$10 200002.0
(signed word~) spline_8segB::$12 200002.0
(signed word~) spline_8segB::$18 200002.0
(signed word~) spline_8segB::$19 66667.33333333333
(signed word~) spline_8segB::$20 200002.0
(signed word~) spline_8segB::$21 100001.0
(signed word~) spline_8segB::$22 2.00000002E8
(signed word~) spline_8segB::$23 5.00000005E7
(signed word~) spline_8segB::$24 2.00000002E8
(signed word~) spline_8segB::$25 6.6666667333333336E7
(signed word~) spline_8segB::$3 200002.0
(byte~) spline_8segB::$31 1.500000015E8
(signed word~) spline_8segB::$4 200002.0
(signed word~) spline_8segB::$6 200002.0
(signed word~) spline_8segB::$8 200002.0
(signed word) spline_8segB::a_x
(signed word) spline_8segB::a_x#0 25000.25
(signed word) spline_8segB::a_y
(signed word) spline_8segB::a_y#0 30000.300000000003
(signed word) spline_8segB::b_x
(signed word) spline_8segB::b_x#0 66667.33333333333
(signed word) spline_8segB::b_y
(signed word) spline_8segB::b_y#0 66667.33333333333
(signed word) spline_8segB::i_x
(signed word) spline_8segB::i_x#0 28571.714285714286
(signed word) spline_8segB::i_x#1 5.00000005E7
(signed word) spline_8segB::i_x#2 3.00100004E7
(signed word) spline_8segB::i_y
(signed word) spline_8segB::i_y#0 40000.4
(signed word) spline_8segB::i_y#1 6.6666667333333336E7
(signed word) spline_8segB::i_y#2 2.7281818545454547E7
(signed word) spline_8segB::j_x
(signed word) spline_8segB::j_x#0 5561111.222222222
(signed word) spline_8segB::j_y
(signed word) spline_8segB::j_y#0 5888235.411764706
(byte) spline_8segB::n
(byte) spline_8segB::n#1 1.500000015E8
(byte) spline_8segB::n#2 2.500000025E7
(struct SplineVector16) spline_8segB::p0
(signed word) spline_8segB::p0_x
(signed word) spline_8segB::p0_x#0 14091.090909090908
(signed word) spline_8segB::p0_y
(signed word) spline_8segB::p0_y#0 14091.090909090908
(struct SplineVector16) spline_8segB::p1
(signed word) spline_8segB::p1_x
(signed word) spline_8segB::p1_x#0 21000.300000000003
(signed word) spline_8segB::p1_y
(signed word) spline_8segB::p1_y#0 19091.181818181816
(struct SplineVector16) spline_8segB::p2
(signed word) spline_8segB::p2_x
(signed word) spline_8segB::p2_x#0 36667.33333333333
(signed word) spline_8segB::p2_y
(signed word) spline_8segB::p2_y#0 22000.4
(signed word) spline_8segB::p_x
(signed word) spline_8segB::p_x#0 100001.0
(signed word) spline_8segB::p_x#1 3.33500005E7
(signed word) spline_8segB::p_x#2 3.75125005E7
(signed word) spline_8segB::p_y
(signed word) spline_8segB::p_y#0 200002.0
(signed word) spline_8segB::p_y#1 2.8585714714285716E7
(signed word) spline_8segB::p_y#2 3.3344444888888888E7

Initial phi equivalence classes
[ main::angle#2 main::angle#1 ]
[ main::w#4 main::w#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#4 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ show_letter::i#10 show_letter::i#1 ]
[ show_letter::current_x#4 show_letter::current_x#11 ]
[ show_letter::current_y#4 show_letter::current_y#11 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ rotate::angle#2 rotate::angle#0 rotate::angle#1 ]
[ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 ]
[ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 ]
[ bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 ]
[ bitmap_line::y2#11 bitmap_line::y2#13 bitmap_line::y2#0 ]
[ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
[ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ]
[ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ]
[ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
[ spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 ]
[ spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 ]
[ spline_8segB::n#2 spline_8segB::n#1 ]
[ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 ]
[ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 ]
[ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ]
[ bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 ]
[ bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 ]
[ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 ]
[ mulf16s::b#4 mulf16s::b#0 mulf16s::b#1 mulf16s::b#2 mulf16s::b#3 ]
[ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ]
[ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ]
[ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
[ sgn_u16::return#4 ]
[ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
[ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ]
Added variable show_letter::angle#0 to live range equivalence class [ show_letter::angle#0 ]
Added variable mulf_init::$1 to live range equivalence class [ mulf_init::$1 ]
Added variable mulf_init::$4 to live range equivalence class [ mulf_init::$4 ]
Added variable mulf_init::$5 to live range equivalence class [ mulf_init::$5 ]
Added variable bitmap_init::$7 to live range equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$4 to live range equivalence class [ bitmap_init::$4 ]
Added variable bitmap_init::$5 to live range equivalence class [ bitmap_init::$5 ]
Added variable bitmap_init::$6 to live range equivalence class [ bitmap_init::$6 ]
Added variable show_letter::$21 to live range equivalence class [ show_letter::$21 ]
Added variable show_letter::$17 to live range equivalence class [ show_letter::$17 ]
Added variable show_letter::to_x#0 to live range equivalence class [ show_letter::to_x#0 ]
Added variable show_letter::to_y#0 to live range equivalence class [ show_letter::to_y#0 ]
Added variable show_letter::to_x#1 to live range equivalence class [ show_letter::to_x#1 ]
Added variable show_letter::to_y#1 to live range equivalence class [ show_letter::to_y#1 ]
Added variable rotate::return_x#0 to live range equivalence class [ rotate::return_x#0 ]
Added variable rotate::return_y#0 to live range equivalence class [ rotate::return_y#0 ]
Added variable show_letter::to_x#2 to live range equivalence class [ show_letter::to_x#2 ]
Added variable show_letter::to_y#2 to live range equivalence class [ show_letter::to_y#2 ]
Added variable show_letter::current_x#10 to live range equivalence class [ show_letter::current_x#10 ]
Added variable show_letter::current_y#10 to live range equivalence class [ show_letter::current_y#10 ]
Added variable show_letter::via_x#0 to live range equivalence class [ show_letter::via_x#0 ]
Added variable show_letter::via_y#0 to live range equivalence class [ show_letter::via_y#0 ]
Added variable show_letter::via_x#1 to live range equivalence class [ show_letter::via_x#1 ]
Added variable show_letter::via_y#1 to live range equivalence class [ show_letter::via_y#1 ]
Added variable rotate::return_x#1 to live range equivalence class [ rotate::return_x#1 ]
Added variable rotate::return_y#1 to live range equivalence class [ rotate::return_y#1 ]
Added variable show_letter::via_x#2 to live range equivalence class [ show_letter::via_x#2 ]
Added variable show_letter::via_y#2 to live range equivalence class [ show_letter::via_y#2 ]
Added variable show_letter::segment_via_x#0 to live range equivalence class [ show_letter::segment_via_x#0 ]
Added variable show_letter::segment_via_y#0 to live range equivalence class [ show_letter::segment_via_y#0 ]
Added variable show_letter::segment_type#0 to live range equivalence class [ show_letter::segment_type#0 ]
Added variable spline_8segB::p0_x#0 to live range equivalence class [ spline_8segB::p0_x#0 ]
Added variable spline_8segB::p0_y#0 to live range equivalence class [ spline_8segB::p0_y#0 ]
Added variable spline_8segB::p1_x#0 to live range equivalence class [ spline_8segB::p1_x#0 ]
Added variable spline_8segB::p1_y#0 to live range equivalence class [ spline_8segB::p1_y#0 ]
Added variable spline_8segB::p2_x#0 to live range equivalence class [ spline_8segB::p2_x#0 ]
Added variable spline_8segB::p2_y#0 to live range equivalence class [ spline_8segB::p2_y#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable rotate::cos_a#0 to live range equivalence class [ rotate::cos_a#0 ]
Added variable mulf16s::return#2 to live range equivalence class [ mulf16s::return#2 ]
Added variable rotate::$0 to live range equivalence class [ rotate::$0 ]
Added variable rotate::$10 to live range equivalence class [ rotate::$10 ]
Added variable rotate::xr#0 to live range equivalence class [ rotate::xr#0 ]
Added variable mulf16s::return#3 to live range equivalence class [ mulf16s::return#3 ]
Added variable rotate::$2 to live range equivalence class [ rotate::$2 ]
Added variable rotate::$11 to live range equivalence class [ rotate::$11 ]
Added variable rotate::yr#0 to live range equivalence class [ rotate::yr#0 ]
Added variable rotate::sin_a#0 to live range equivalence class [ rotate::sin_a#0 ]
Added variable mulf16s::return#4 to live range equivalence class [ mulf16s::return#4 ]
Added variable rotate::$4 to live range equivalence class [ rotate::$4 ]
Added variable rotate::$12 to live range equivalence class [ rotate::$12 ]
Added variable rotate::$5 to live range equivalence class [ rotate::$5 ]
Added variable rotate::xr#1 to live range equivalence class [ rotate::xr#1 ]
Added variable mulf16s::return#10 to live range equivalence class [ mulf16s::return#10 ]
Added variable rotate::$6 to live range equivalence class [ rotate::$6 ]
Added variable rotate::$13 to live range equivalence class [ rotate::$13 ]
Added variable rotate::$7 to live range equivalence class [ rotate::$7 ]
Added variable rotate::yr#1 to live range equivalence class [ rotate::yr#1 ]
Added variable rotate::$8 to live range equivalence class [ rotate::$8 ]
Added variable rotate::$9 to live range equivalence class [ rotate::$9 ]
Added variable rotate::return_x#2 to live range equivalence class [ rotate::return_x#2 ]
Added variable rotate::return_y#2 to live range equivalence class [ rotate::return_y#2 ]
Added variable abs_u16::return#0 to live range equivalence class [ abs_u16::return#0 ]
Added variable bitmap_line::dx#0 to live range equivalence class [ bitmap_line::dx#0 ]
Added variable abs_u16::return#1 to live range equivalence class [ abs_u16::return#1 ]
Added variable bitmap_line::dy#0 to live range equivalence class [ bitmap_line::dy#0 ]
Added variable sgn_u16::return#0 to live range equivalence class [ sgn_u16::return#0 ]
Added variable bitmap_line::sx#0 to live range equivalence class [ bitmap_line::sx#0 ]
Added variable sgn_u16::return#1 to live range equivalence class [ sgn_u16::return#1 ]
Added variable bitmap_line::sy#0 to live range equivalence class [ bitmap_line::sy#0 ]
Added variable spline_8segB::$0 to live range equivalence class [ spline_8segB::$0 ]
Added variable spline_8segB::$1 to live range equivalence class [ spline_8segB::$1 ]
Added variable spline_8segB::a_x#0 to live range equivalence class [ spline_8segB::a_x#0 ]
Added variable spline_8segB::$3 to live range equivalence class [ spline_8segB::$3 ]
Added variable spline_8segB::$4 to live range equivalence class [ spline_8segB::$4 ]
Added variable spline_8segB::a_y#0 to live range equivalence class [ spline_8segB::a_y#0 ]
Added variable spline_8segB::$6 to live range equivalence class [ spline_8segB::$6 ]
Added variable spline_8segB::b_x#0 to live range equivalence class [ spline_8segB::b_x#0 ]
Added variable spline_8segB::$8 to live range equivalence class [ spline_8segB::$8 ]
Added variable spline_8segB::b_y#0 to live range equivalence class [ spline_8segB::b_y#0 ]
Added variable spline_8segB::$10 to live range equivalence class [ spline_8segB::$10 ]
Added variable spline_8segB::$12 to live range equivalence class [ spline_8segB::$12 ]
Added variable spline_8segB::j_x#0 to live range equivalence class [ spline_8segB::j_x#0 ]
Added variable spline_8segB::j_y#0 to live range equivalence class [ spline_8segB::j_y#0 ]
Added variable spline_8segB::$22 to live range equivalence class [ spline_8segB::$22 ]
Added variable spline_8segB::$23 to live range equivalence class [ spline_8segB::$23 ]
Added variable spline_8segB::$24 to live range equivalence class [ spline_8segB::$24 ]
Added variable spline_8segB::$25 to live range equivalence class [ spline_8segB::$25 ]
Added variable spline_8segB::$31 to live range equivalence class [ spline_8segB::$31 ]
Added variable spline_8segB::$18 to live range equivalence class [ spline_8segB::$18 ]
Added variable spline_8segB::$19 to live range equivalence class [ spline_8segB::$19 ]
Added variable spline_8segB::$20 to live range equivalence class [ spline_8segB::$20 ]
Added variable spline_8segB::$21 to live range equivalence class [ spline_8segB::$21 ]
Added variable bitmap_plot_spline_8seg::$4 to live range equivalence class [ bitmap_plot_spline_8seg::$4 ]
Added variable mulf16u::a#0 to live range equivalence class [ mulf16u::a#0 ]
Added variable mulf16u::b#0 to live range equivalence class [ mulf16u::b#0 ]
Added variable mulf16u::return#2 to live range equivalence class [ mulf16u::return#2 ]
Added variable mulf16s::$6 to live range equivalence class [ mulf16s::$6 ]
Added variable mulf16s::$11 to live range equivalence class [ mulf16s::$11 ]
Added variable mulf16s::$9 to live range equivalence class [ mulf16s::$9 ]
Added variable mulf16s::$12 to live range equivalence class [ mulf16s::$12 ]
Added variable mulf16s::return#0 to live range equivalence class [ mulf16s::return#0 ]
Added variable abs_u16::$0 to live range equivalence class [ abs_u16::$0 ]
Added variable abs_u16::$1 to live range equivalence class [ abs_u16::$1 ]
Added variable sgn_u16::$0 to live range equivalence class [ sgn_u16::$0 ]
Added variable sgn_u16::$1 to live range equivalence class [ sgn_u16::$1 ]
Added variable bitmap_plot::plotter#0 to live range equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$0 to live range equivalence class [ bitmap_plot::$0 ]
Added variable bitmap_plot::plotter#1 to live range equivalence class [ bitmap_plot::plotter#1 ]
Added variable bitmap_plot::$1 to live range equivalence class [ bitmap_plot::$1 ]
Added variable mulf16u::return#0 to live range equivalence class [ mulf16u::return#0 ]
Complete equivalence classes
[ main::angle#2 main::angle#1 ]
[ main::w#4 main::w#1 ]
[ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
[ mulf_init::c#2 mulf_init::c#1 ]
[ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
[ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
[ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
[ mulf_init::x_255#2 mulf_init::x_255#1 ]
[ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
[ mulf_init::dir#2 mulf_init::dir#4 ]
[ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ show_letter::i#10 show_letter::i#1 ]
[ show_letter::current_x#4 show_letter::current_x#11 ]
[ show_letter::current_y#4 show_letter::current_y#11 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ rotate::angle#2 rotate::angle#0 rotate::angle#1 ]
[ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 ]
[ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 ]
[ bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 ]
[ bitmap_line::y2#11 bitmap_line::y2#13 bitmap_line::y2#0 ]
[ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
[ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ]
[ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ]
[ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
[ spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 ]
[ spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 ]
[ spline_8segB::n#2 spline_8segB::n#1 ]
[ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 ]
[ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 ]
[ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ]
[ bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 ]
[ bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 ]
[ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 ]
[ mulf16s::b#4 mulf16s::b#0 mulf16s::b#1 mulf16s::b#2 mulf16s::b#3 ]
[ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ]
[ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ]
[ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
[ sgn_u16::return#4 ]
[ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
[ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ]
[ show_letter::angle#0 ]
[ mulf_init::$1 ]
[ mulf_init::$4 ]
[ mulf_init::$5 ]
[ bitmap_init::$7 ]
[ bitmap_init::$4 ]
[ bitmap_init::$5 ]
[ bitmap_init::$6 ]
[ show_letter::$21 ]
[ show_letter::$17 ]
[ show_letter::to_x#0 ]
[ show_letter::to_y#0 ]
[ show_letter::to_x#1 ]
[ show_letter::to_y#1 ]
[ rotate::return_x#0 ]
[ rotate::return_y#0 ]
[ show_letter::to_x#2 ]
[ show_letter::to_y#2 ]
[ show_letter::current_x#10 ]
[ show_letter::current_y#10 ]
[ show_letter::via_x#0 ]
[ show_letter::via_y#0 ]
[ show_letter::via_x#1 ]
[ show_letter::via_y#1 ]
[ rotate::return_x#1 ]
[ rotate::return_y#1 ]
[ show_letter::via_x#2 ]
[ show_letter::via_y#2 ]
[ show_letter::segment_via_x#0 ]
[ show_letter::segment_via_y#0 ]
[ show_letter::segment_type#0 ]
[ spline_8segB::p0_x#0 ]
[ spline_8segB::p0_y#0 ]
[ spline_8segB::p1_x#0 ]
[ spline_8segB::p1_y#0 ]
[ spline_8segB::p2_x#0 ]
[ spline_8segB::p2_y#0 ]
[ memset::end#0 ]
[ rotate::cos_a#0 ]
[ mulf16s::return#2 ]
[ rotate::$0 ]
[ rotate::$10 ]
[ rotate::xr#0 ]
[ mulf16s::return#3 ]
[ rotate::$2 ]
[ rotate::$11 ]
[ rotate::yr#0 ]
[ rotate::sin_a#0 ]
[ mulf16s::return#4 ]
[ rotate::$4 ]
[ rotate::$12 ]
[ rotate::$5 ]
[ rotate::xr#1 ]
[ mulf16s::return#10 ]
[ rotate::$6 ]
[ rotate::$13 ]
[ rotate::$7 ]
[ rotate::yr#1 ]
[ rotate::$8 ]
[ rotate::$9 ]
[ rotate::return_x#2 ]
[ rotate::return_y#2 ]
[ abs_u16::return#0 ]
[ bitmap_line::dx#0 ]
[ abs_u16::return#1 ]
[ bitmap_line::dy#0 ]
[ sgn_u16::return#0 ]
[ bitmap_line::sx#0 ]
[ sgn_u16::return#1 ]
[ bitmap_line::sy#0 ]
[ spline_8segB::$0 ]
[ spline_8segB::$1 ]
[ spline_8segB::a_x#0 ]
[ spline_8segB::$3 ]
[ spline_8segB::$4 ]
[ spline_8segB::a_y#0 ]
[ spline_8segB::$6 ]
[ spline_8segB::b_x#0 ]
[ spline_8segB::$8 ]
[ spline_8segB::b_y#0 ]
[ spline_8segB::$10 ]
[ spline_8segB::$12 ]
[ spline_8segB::j_x#0 ]
[ spline_8segB::j_y#0 ]
[ spline_8segB::$22 ]
[ spline_8segB::$23 ]
[ spline_8segB::$24 ]
[ spline_8segB::$25 ]
[ spline_8segB::$31 ]
[ spline_8segB::$18 ]
[ spline_8segB::$19 ]
[ spline_8segB::$20 ]
[ spline_8segB::$21 ]
[ bitmap_plot_spline_8seg::$4 ]
[ mulf16u::a#0 ]
[ mulf16u::b#0 ]
[ mulf16u::return#2 ]
[ mulf16s::$6 ]
[ mulf16s::$11 ]
[ mulf16s::$9 ]
[ mulf16s::$12 ]
[ mulf16s::return#0 ]
[ abs_u16::$0 ]
[ abs_u16::$1 ]
[ sgn_u16::$0 ]
[ sgn_u16::$1 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$0 ]
[ bitmap_plot::plotter#1 ]
[ bitmap_plot::$1 ]
[ mulf16u::return#0 ]
Allocated zp[1]:2 [ main::angle#2 main::angle#1 ]
Allocated zp[1]:3 [ main::w#4 main::w#1 ]
Allocated zp[2]:4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated zp[1]:6 [ mulf_init::c#2 mulf_init::c#1 ]
Allocated zp[2]:7 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated zp[1]:9 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Allocated zp[2]:10 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated zp[1]:12 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Allocated zp[2]:13 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated zp[1]:15 [ mulf_init::dir#2 mulf_init::dir#4 ]
Allocated zp[2]:16 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated zp[1]:18 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp[1]:19 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp[1]:20 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp[2]:21 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp[1]:23 [ show_letter::i#10 show_letter::i#1 ]
Allocated zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 ]
Allocated zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 ]
Allocated zp[2]:28 [ memset::num#2 ]
Allocated zp[2]:30 [ memset::str#3 ]
Allocated zp[1]:32 [ memset::c#4 ]
Allocated zp[2]:33 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:35 [ rotate::angle#2 rotate::angle#0 rotate::angle#1 ]
Allocated zp[2]:36 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 ]
Allocated zp[2]:38 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 ]
Allocated zp[2]:40 [ bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 ]
Allocated zp[2]:42 [ bitmap_line::y2#11 bitmap_line::y2#13 bitmap_line::y2#0 ]
Allocated zp[2]:44 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
Allocated zp[2]:46 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ]
Allocated zp[2]:48 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ]
Allocated zp[2]:50 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
Allocated zp[2]:52 [ spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 ]
Allocated zp[2]:54 [ spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 ]
Allocated zp[1]:56 [ spline_8segB::n#2 spline_8segB::n#1 ]
Allocated zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 ]
Allocated zp[2]:59 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 ]
Allocated zp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ]
Allocated zp[2]:62 [ bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 ]
Allocated zp[2]:64 [ bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 ]
Allocated zp[2]:66 [ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 ]
Allocated zp[2]:68 [ mulf16s::b#4 mulf16s::b#0 mulf16s::b#1 mulf16s::b#2 mulf16s::b#3 ]
Allocated zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ]
Allocated zp[2]:74 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ]
Allocated zp[2]:76 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
Allocated zp[2]:78 [ sgn_u16::return#4 ]
Allocated zp[1]:80 [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
Allocated zp[2]:81 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ]
Allocated zp[1]:83 [ show_letter::angle#0 ]
Allocated zp[1]:84 [ mulf_init::$1 ]
Allocated zp[1]:85 [ mulf_init::$4 ]
Allocated zp[1]:86 [ mulf_init::$5 ]
Allocated zp[1]:87 [ bitmap_init::$7 ]
Allocated zp[1]:88 [ bitmap_init::$4 ]
Allocated zp[1]:89 [ bitmap_init::$5 ]
Allocated zp[1]:90 [ bitmap_init::$6 ]
Allocated zp[1]:91 [ show_letter::$21 ]
Allocated zp[1]:92 [ show_letter::$17 ]
Allocated zp[2]:93 [ show_letter::to_x#0 ]
Allocated zp[2]:95 [ show_letter::to_y#0 ]
Allocated zp[2]:97 [ show_letter::to_x#1 ]
Allocated zp[2]:99 [ show_letter::to_y#1 ]
Allocated zp[2]:101 [ rotate::return_x#0 ]
Allocated zp[2]:103 [ rotate::return_y#0 ]
Allocated zp[2]:105 [ show_letter::to_x#2 ]
Allocated zp[2]:107 [ show_letter::to_y#2 ]
Allocated zp[2]:109 [ show_letter::current_x#10 ]
Allocated zp[2]:111 [ show_letter::current_y#10 ]
Allocated zp[2]:113 [ show_letter::via_x#0 ]
Allocated zp[2]:115 [ show_letter::via_y#0 ]
Allocated zp[2]:117 [ show_letter::via_x#1 ]
Allocated zp[2]:119 [ show_letter::via_y#1 ]
Allocated zp[2]:121 [ rotate::return_x#1 ]
Allocated zp[2]:123 [ rotate::return_y#1 ]
Allocated zp[2]:125 [ show_letter::via_x#2 ]
Allocated zp[2]:127 [ show_letter::via_y#2 ]
Allocated zp[2]:129 [ show_letter::segment_via_x#0 ]
Allocated zp[2]:131 [ show_letter::segment_via_y#0 ]
Allocated zp[1]:133 [ show_letter::segment_type#0 ]
Allocated zp[2]:134 [ spline_8segB::p0_x#0 ]
Allocated zp[2]:136 [ spline_8segB::p0_y#0 ]
Allocated zp[2]:138 [ spline_8segB::p1_x#0 ]
Allocated zp[2]:140 [ spline_8segB::p1_y#0 ]
Allocated zp[2]:142 [ spline_8segB::p2_x#0 ]
Allocated zp[2]:144 [ spline_8segB::p2_y#0 ]
Allocated zp[2]:146 [ memset::end#0 ]
Allocated zp[2]:148 [ rotate::cos_a#0 ]
Allocated zp[4]:150 [ mulf16s::return#2 ]
Allocated zp[4]:154 [ rotate::$0 ]
Allocated zp[2]:158 [ rotate::$10 ]
Allocated zp[2]:160 [ rotate::xr#0 ]
Allocated zp[4]:162 [ mulf16s::return#3 ]
Allocated zp[4]:166 [ rotate::$2 ]
Allocated zp[2]:170 [ rotate::$11 ]
Allocated zp[2]:172 [ rotate::yr#0 ]
Allocated zp[2]:174 [ rotate::sin_a#0 ]
Allocated zp[4]:176 [ mulf16s::return#4 ]
Allocated zp[4]:180 [ rotate::$4 ]
Allocated zp[2]:184 [ rotate::$12 ]
Allocated zp[2]:186 [ rotate::$5 ]
Allocated zp[2]:188 [ rotate::xr#1 ]
Allocated zp[4]:190 [ mulf16s::return#10 ]
Allocated zp[4]:194 [ rotate::$6 ]
Allocated zp[2]:198 [ rotate::$13 ]
Allocated zp[2]:200 [ rotate::$7 ]
Allocated zp[2]:202 [ rotate::yr#1 ]
Allocated zp[1]:204 [ rotate::$8 ]
Allocated zp[1]:205 [ rotate::$9 ]
Allocated zp[2]:206 [ rotate::return_x#2 ]
Allocated zp[2]:208 [ rotate::return_y#2 ]
Allocated zp[2]:210 [ abs_u16::return#0 ]
Allocated zp[2]:212 [ bitmap_line::dx#0 ]
Allocated zp[2]:214 [ abs_u16::return#1 ]
Allocated zp[2]:216 [ bitmap_line::dy#0 ]
Allocated zp[2]:218 [ sgn_u16::return#0 ]
Allocated zp[2]:220 [ bitmap_line::sx#0 ]
Allocated zp[2]:222 [ sgn_u16::return#1 ]
Allocated zp[2]:224 [ bitmap_line::sy#0 ]
Allocated zp[2]:226 [ spline_8segB::$0 ]
Allocated zp[2]:228 [ spline_8segB::$1 ]
Allocated zp[2]:230 [ spline_8segB::a_x#0 ]
Allocated zp[2]:232 [ spline_8segB::$3 ]
Allocated zp[2]:234 [ spline_8segB::$4 ]
Allocated zp[2]:236 [ spline_8segB::a_y#0 ]
Allocated zp[2]:238 [ spline_8segB::$6 ]
Allocated zp[2]:240 [ spline_8segB::b_x#0 ]
Allocated zp[2]:242 [ spline_8segB::$8 ]
Allocated zp[2]:244 [ spline_8segB::b_y#0 ]
Allocated zp[2]:246 [ spline_8segB::$10 ]
Allocated zp[2]:248 [ spline_8segB::$12 ]
Allocated zp[2]:250 [ spline_8segB::j_x#0 ]
Allocated zp[2]:252 [ spline_8segB::j_y#0 ]
Allocated zp[2]:254 [ spline_8segB::$22 ]
Allocated zp[2]:256 [ spline_8segB::$23 ]
Allocated zp[2]:258 [ spline_8segB::$24 ]
Allocated zp[2]:260 [ spline_8segB::$25 ]
Allocated zp[1]:262 [ spline_8segB::$31 ]
Allocated zp[2]:263 [ spline_8segB::$18 ]
Allocated zp[2]:265 [ spline_8segB::$19 ]
Allocated zp[2]:267 [ spline_8segB::$20 ]
Allocated zp[2]:269 [ spline_8segB::$21 ]
Allocated zp[1]:271 [ bitmap_plot_spline_8seg::$4 ]
Allocated zp[2]:272 [ mulf16u::a#0 ]
Allocated zp[2]:274 [ mulf16u::b#0 ]
Allocated zp[4]:276 [ mulf16u::return#2 ]
Allocated zp[2]:280 [ mulf16s::$6 ]
Allocated zp[2]:282 [ mulf16s::$11 ]
Allocated zp[2]:284 [ mulf16s::$9 ]
Allocated zp[2]:286 [ mulf16s::$12 ]
Allocated zp[4]:288 [ mulf16s::return#0 ]
Allocated zp[1]:292 [ abs_u16::$0 ]
Allocated zp[1]:293 [ abs_u16::$1 ]
Allocated zp[1]:294 [ sgn_u16::$0 ]
Allocated zp[1]:295 [ sgn_u16::$1 ]
Allocated zp[2]:296 [ bitmap_plot::plotter#0 ]
Allocated zp[2]:298 [ bitmap_plot::$0 ]
Allocated zp[2]:300 [ bitmap_plot::plotter#1 ]
Allocated zp[1]:302 [ bitmap_plot::$1 ]
Allocated zp[4]:303 [ mulf16u::return#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Show a few simple splines using the splines library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const WHITE = 1
  .const MOVE_TO = 0
  .const SPLINE_TO = 1
  .const LINE_TO = 2
  .const SIZEOF_STRUCT_SPLINEVECTOR16 = 4
  .const OFFSET_STRUCT_SPLINEVECTOR16_Y = 2
  .const OFFSET_STRUCT_SEGMENT_TO = 1
  .const OFFSET_STRUCT_SEGMENT_VIA = 5
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .label RASTER = $d012
  .label D011 = $d011
  .label D018 = $d018
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  .label BITMAP_SCREEN = $5c00
  .label BITMAP_GRAPHICS = $6000
  .label COS = SIN+$40
  // main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>BITMAP_SCREEN)/$40
    .const toD0181_return = (>(BITMAP_SCREEN&$3fff)*4)|(>BITMAP_GRAPHICS)/4&$f
    .label w = 3
    .label angle = 2
    // [1] call mulf_init 
    // [23] phi from main to mulf_init [phi:main->mulf_init]
  mulf_init_from_main:
    jsr mulf_init
    // [2] phi from main to main::@8 [phi:main->main::@8]
  __b8_from_main:
    jmp __b8
    // main::@8
  __b8:
    // [3] call bitmap_init 
    // [52] phi from main::@8 to bitmap_init [phi:main::@8->bitmap_init]
  bitmap_init_from___b8:
    jsr bitmap_init
    // [4] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [5] call bitmap_clear 
    // [74] phi from main::@9 to bitmap_clear [phi:main::@9->bitmap_clear]
  bitmap_clear_from___b9:
    jsr bitmap_clear
    jmp vicSelectGfxBank1
    // main::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [7] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1___b1
    // main::vicSelectGfxBank1_@1
  vicSelectGfxBank1___b1:
    // [8] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    // [9] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
  toD0181_from_vicSelectGfxBank1___b1:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b7
    // main::@7
  __b7:
    // [10] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [11] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [12] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [12] phi (byte) main::angle#2 = (byte) 0 [phi:main::@7->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z angle
    jmp __b1
    // main::@1
  __b1:
    // [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [14] call bitmap_clear 
    // [74] phi from main::@2 to bitmap_clear [phi:main::@2->bitmap_clear]
  bitmap_clear_from___b2:
    jsr bitmap_clear
    jmp __b10
    // main::@10
  __b10:
    // [15] (byte) show_letter::angle#0 ← (byte) main::angle#2 -- vbuz1=vbuz2 
    lda.z angle
    sta.z show_letter.angle
    // [16] call show_letter 
    // [79] phi from main::@10 to show_letter [phi:main::@10->show_letter]
  show_letter_from___b10:
    jsr show_letter
    // [17] phi from main::@10 to main::@3 [phi:main::@10->main::@3]
  __b3_from___b10:
    // [17] phi (byte) main::w#4 = (byte) 0 [phi:main::@10->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z w
    jmp __b3
    // [17] phi from main::@3 main::@5 to main::@3 [phi:main::@3/main::@5->main::@3]
  __b3_from___b3:
  __b3_from___b5:
    // [17] phi (byte) main::w#4 = (byte) main::w#4 [phi:main::@3/main::@5->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [18] if(*((const nomodify byte*) RASTER)!=(byte) $fe) goto main::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp RASTER
    bne __b3_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [19] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b4
    jmp __b5
    // main::@5
  __b5:
    // [20] (byte) main::w#1 ← ++ (byte) main::w#4 -- vbuz1=_inc_vbuz1 
    inc.z w
    // [21] if((byte) main::w#1!=(byte) $3d) goto main::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #$3d
    cmp.z w
    bne __b3_from___b5
    jmp __b6
    // main::@6
  __b6:
    // [22] (byte) main::angle#1 ← (byte) main::angle#2 + (byte) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z angle
    axs #-[9]
    stx.z angle
    // [12] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [12] phi (byte) main::angle#2 = (byte) main::angle#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b1
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    .label __1 = $54
    .label __4 = $55
    .label __5 = $56
    // x/2
    .label c = 6
    // Counter used for determining x%2==0
    .label sqr1_hi = 7
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $10
    .label sqr1_lo = 4
    // sqr = (x*x)/4
    .label x_2 = 9
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = $d
    // Fill mulf_sqr2 = g(x) = f(x-255) : If x-255<0 then g(x)=f(255-x) (because x*x = -x*-x)
    // g(0) = f(255), g(1) = f(254), ..., g(254) = f(1), g(255) = f(0), g(256) = f(1), ..., g(510) = f(255), g(511) = f(256)
    .label x_255 = $c
    .label sqr2_lo = $a
    //Start with g(0)=f(255)
    .label dir = $f
    // [24] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  __b1_from_mulf_init:
    // [24] phi (byte) mulf_init::x_2#3 = (byte) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x_2
    // [24] phi (byte*) mulf_init::sqr1_hi#2 = (const byte*) mulf_sqr1_hi+(byte) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [24] phi (word) mulf_init::sqr#4 = (word) 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z sqr
    lda #>0
    sta.z sqr+1
    // [24] phi (byte) mulf_init::c#2 = (byte) 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [24] phi (byte*) mulf_init::sqr1_lo#2 = (const byte*) mulf_sqr1_lo+(byte) 1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    jmp __b1
    // mulf_init::@1
  __b1:
    // [25] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [26] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
  __b5_from___b1:
    // [26] phi (byte) mulf_init::dir#2 = (byte) $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [26] phi (byte*) mulf_init::sqr2_hi#2 = (const byte*) mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [26] phi (byte) mulf_init::x_255#2 = (byte) -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuz1=vbuc1 
    lda #-1
    sta.z x_255
    // [26] phi (byte*) mulf_init::sqr2_lo#2 = (const byte*) mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    jmp __b5
    // mulf_init::@5
  __b5:
    // [27] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    jmp __b7
    // mulf_init::@7
  __b7:
    // [28] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // [29] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp __breturn
    // mulf_init::@return
  __breturn:
    // [30] return 
    rts
    // mulf_init::@6
  __b6:
    // [31] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z x_255
    lda mulf_sqr1_lo,y
    ldy #0
    sta (sqr2_lo),y
    // [32] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z x_255
    lda mulf_sqr1_hi,y
    ldy #0
    sta (sqr2_hi),y
    // [33] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // [34] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z x_255
    clc
    adc.z dir
    sta.z x_255
    // [35] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9 -- vbuz1_neq_0_then_la1 
    lda.z x_255
    cmp #0
    bne __b9_from___b6
    // [37] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
  __b8_from___b6:
    // [37] phi (byte) mulf_init::dir#4 = (byte) 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    jmp __b8
    // [36] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
  __b9_from___b6:
    jmp __b9
    // mulf_init::@9
  __b9:
    // [37] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
  __b8_from___b9:
    // [37] phi (byte) mulf_init::dir#4 = (byte) mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    jmp __b8
    // mulf_init::@8
  __b8:
    // [38] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [26] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
  __b5_from___b8:
    // [26] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [26] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [26] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [26] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // [39] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [40] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and.z c
    sta.z __1
    // [41] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3 -- vbuz1_neq_0_then_la1 
    lda.z __1
    cmp #0
    bne __b3_from___b2
    jmp __b4
    // mulf_init::@4
  __b4:
    // [42] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuz1=_inc_vbuz1 
    inc.z x_2
    // [43] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [44] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [44] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [44] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    jmp __b3
    // mulf_init::@3
  __b3:
    // [45] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3 -- vbuz1=_lo_vwuz2 
    lda.z sqr
    sta.z __4
    // [46] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 -- _deref_pbuz1=vbuz2 
    lda.z __4
    ldy #0
    sta (sqr1_lo),y
    // [47] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3 -- vbuz1=_hi_vwuz2 
    lda.z sqr+1
    sta.z __5
    // [48] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 -- _deref_pbuz1=vbuz2 
    lda.z __5
    ldy #0
    sta (sqr1_hi),y
    // [49] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // [50] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuz2 
    lda.z x_2
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // [51] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [24] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
  __b1_from___b3:
    // [24] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [24] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [24] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [24] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [24] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __4 = $58
    .label __5 = $59
    .label __6 = $5a
    .label __7 = $57
    .label bits = $12
    .label x = $13
    .label y = $14
    .label yoffs = $15
    // [53] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [53] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [53] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    jmp __b1
    // [53] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [53] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [53] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [54] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z bits
    ldy.z x
    sta bitmap_plot_bit,y
    // [55] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z bits
    // [56] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuz1_neq_0_then_la1 
    lda.z bits
    cmp #0
    bne __b6_from___b1
    // [58] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [58] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    jmp __b2
    // [57] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [58] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [58] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [59] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [60] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuz1_neq_0_then_la1 
    lda.z x
    cmp #0
    bne __b1_from___b2
    // [61] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [61] phi (byte*) bitmap_init::yoffs#2 = (const nomodify byte*) BITMAP_GRAPHICS [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP_GRAPHICS
    sta.z yoffs
    lda #>BITMAP_GRAPHICS
    sta.z yoffs+1
    // [61] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b3
    // [61] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [61] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [61] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [62] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z y
    sta.z __7
    // [63] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuz1=_lo_pbuz2 
    lda.z yoffs
    sta.z __4
    // [64] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __7
    ora.z __4
    sta.z __5
    // [65] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __5
    ldy.z y
    sta bitmap_plot_ylo,y
    // [66] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuz1=_hi_pbuz2 
    lda.z yoffs+1
    sta.z __6
    // [67] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __6
    ldy.z y
    sta bitmap_plot_yhi,y
    // [68] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [69] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [70] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [70] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [71] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [72] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuz1_neq_0_then_la1 
    lda.z y
    cmp #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [73] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE<<4
    // [75] call memset 
    // [133] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
  memset_from_bitmap_clear:
    // [133] phi (byte) memset::c#4 = (const byte) bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuz1=vbuc1 
    lda #col
    sta.z memset.c
    // [133] phi (void*) memset::str#3 = (void*)(const nomodify byte*) BITMAP_SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_SCREEN
    sta.z memset.str
    lda #>BITMAP_SCREEN
    sta.z memset.str+1
    // [133] phi (word) memset::num#2 = (word) $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [76] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [77] call memset 
    // [133] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
  memset_from___b1:
    // [133] phi (byte) memset::c#4 = (byte) 0 [phi:bitmap_clear::@1->memset#0] -- vbuz1=vbuc1 
    lda #0
    sta.z memset.c
    // [133] phi (void*) memset::str#3 = (void*)(const nomodify byte*) BITMAP_GRAPHICS [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_GRAPHICS
    sta.z memset.str
    lda #>BITMAP_GRAPHICS
    sta.z memset.str+1
    // [133] phi (word) memset::num#2 = (word) $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [78] return 
    rts
}
  // show_letter
// show_letter(byte zp($53) angle)
show_letter: {
    .label __17 = $5c
    .label angle = $53
    .label to_x = $5d
    .label to_y = $5f
    .label to_x_1 = $61
    .label to_y_1 = $63
    .label to_x_2 = $69
    .label to_y_2 = $6b
    .label via_x = $71
    .label via_y = $73
    .label via_x_1 = $75
    .label via_y_1 = $77
    .label via_x_2 = $7d
    .label via_y_2 = $7f
    .label segment_type = $85
    .label segment_via_x = $81
    .label segment_via_y = $83
    .label i = $17
    .label current_x = $18
    .label current_y = $1a
    .label current_x_1 = $6d
    .label current_y_1 = $6f
    .label __21 = $5b
    // [80] phi from show_letter to show_letter::@1 [phi:show_letter->show_letter::@1]
  __b1_from_show_letter:
    // [80] phi (signed word) show_letter::current_y#4 = (signed word) 0 [phi:show_letter->show_letter::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z current_y
    lda #>0
    sta.z current_y+1
    // [80] phi (signed word) show_letter::current_x#4 = (signed word) 0 [phi:show_letter->show_letter::@1#1] -- vwsz1=vwsc1 
    lda #<0
    sta.z current_x
    lda #>0
    sta.z current_x+1
    // [80] phi (byte) show_letter::i#10 = (byte) 0 [phi:show_letter->show_letter::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // show_letter::@1
  __b1:
    // [81] (byte~) show_letter::$21 ← (byte) show_letter::i#10 << (byte) 3 -- vbuz1=vbuz2_rol_3 
    lda.z i
    asl
    asl
    asl
    sta.z __21
    // [82] (byte~) show_letter::$17 ← (byte~) show_letter::$21 + (byte) show_letter::i#10 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z __21
    clc
    adc.z i
    sta.z __17
    // [83] (signed word) show_letter::to_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO,y
    sta.z to_x
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+1,y
    sta.z to_x+1
    // [84] (signed word) show_letter::to_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z to_y
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z to_y+1
    // [85] (signed word) show_letter::to_x#1 ← (signed word) show_letter::to_x#0 - (signed byte) $32 -- vwsz1=vwsz2_minus_vbsc1 
    lda.z to_x
    sec
    sbc #$32
    sta.z to_x_1
    lda.z to_x+1
    sbc #>$32
    sta.z to_x_1+1
    // [86] (signed word) show_letter::to_y#1 ← (signed word) show_letter::to_y#0 - (signed word) $96 -- vwsz1=vwsz2_minus_vwsc1 
    lda.z to_y
    sec
    sbc #<$96
    sta.z to_y_1
    lda.z to_y+1
    sbc #>$96
    sta.z to_y_1+1
    // [87] (signed word) rotate::vector_x#0 ← (signed word) show_letter::to_x#1 -- vwsz1=vwsz2 
    lda.z to_x_1
    sta.z rotate.vector_x
    lda.z to_x_1+1
    sta.z rotate.vector_x+1
    // [88] (signed word) rotate::vector_y#0 ← (signed word) show_letter::to_y#1 -- vwsz1=vwsz2 
    lda.z to_y_1
    sta.z rotate.vector_y
    lda.z to_y_1+1
    sta.z rotate.vector_y+1
    // [89] (byte) rotate::angle#0 ← (byte) show_letter::angle#0 -- vbuz1=vbuz2 
    lda.z angle
    sta.z rotate.angle
    // [90] call rotate 
    // [142] phi from show_letter::@1 to rotate [phi:show_letter::@1->rotate]
  rotate_from___b1:
    // [142] phi (signed word) rotate::vector_y#2 = (signed word) rotate::vector_y#0 [phi:show_letter::@1->rotate#0] -- register_copy 
    // [142] phi (signed word) rotate::vector_x#2 = (signed word) rotate::vector_x#0 [phi:show_letter::@1->rotate#1] -- register_copy 
    // [142] phi (byte) rotate::angle#2 = (byte) rotate::angle#0 [phi:show_letter::@1->rotate#2] -- register_copy 
    jsr rotate
    // [91] (signed word) rotate::return_x#0 ← (signed word) rotate::return_x#2 -- vwsz1=vwsz2 
    lda.z rotate.return_x_2
    sta.z rotate.return_x
    lda.z rotate.return_x_2+1
    sta.z rotate.return_x+1
    // [92] (signed word) rotate::return_y#0 ← (signed word) rotate::return_y#2 -- vwsz1=vwsz2 
    lda.z rotate.return_y_2
    sta.z rotate.return_y
    lda.z rotate.return_y_2+1
    sta.z rotate.return_y+1
    jmp __b6
    // show_letter::@6
  __b6:
    // [93] (signed word) show_letter::to_x#2 ← (signed word) rotate::return_x#0 -- vwsz1=vwsz2 
    lda.z rotate.return_x
    sta.z to_x_2
    lda.z rotate.return_x+1
    sta.z to_x_2+1
    // [94] (signed word) show_letter::to_y#2 ← (signed word) rotate::return_y#0 -- vwsz1=vwsz2 
    lda.z rotate.return_y
    sta.z to_y_2
    lda.z rotate.return_y+1
    sta.z to_y_2+1
    // [95] (signed word) show_letter::current_x#10 ← (signed word) show_letter::to_x#2 + (signed byte) $64 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z to_x_2
    clc
    adc #<$64
    sta.z current_x_1
    lda.z to_x_2+1
    adc #>$64
    sta.z current_x_1+1
    // [96] (signed word) show_letter::current_y#10 ← (signed word) show_letter::to_y#2 + (signed byte) $64 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z to_y_2
    clc
    adc #<$64
    sta.z current_y_1
    lda.z to_y_2+1
    adc #>$64
    sta.z current_y_1+1
    // [97] (signed word) show_letter::via_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA,y
    sta.z via_x
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA+1,y
    sta.z via_x+1
    // [98] (signed word) show_letter::via_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z via_y
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z via_y+1
    // [99] (signed word) show_letter::via_x#1 ← (signed word) show_letter::via_x#0 - (signed byte) $32 -- vwsz1=vwsz2_minus_vbsc1 
    lda.z via_x
    sec
    sbc #$32
    sta.z via_x_1
    lda.z via_x+1
    sbc #>$32
    sta.z via_x_1+1
    // [100] (signed word) show_letter::via_y#1 ← (signed word) show_letter::via_y#0 - (signed word) $96 -- vwsz1=vwsz2_minus_vwsc1 
    lda.z via_y
    sec
    sbc #<$96
    sta.z via_y_1
    lda.z via_y+1
    sbc #>$96
    sta.z via_y_1+1
    // [101] (signed word) rotate::vector_x#1 ← (signed word) show_letter::via_x#1 -- vwsz1=vwsz2 
    lda.z via_x_1
    sta.z rotate.vector_x
    lda.z via_x_1+1
    sta.z rotate.vector_x+1
    // [102] (signed word) rotate::vector_y#1 ← (signed word) show_letter::via_y#1 -- vwsz1=vwsz2 
    lda.z via_y_1
    sta.z rotate.vector_y
    lda.z via_y_1+1
    sta.z rotate.vector_y+1
    // [103] (byte) rotate::angle#1 ← (byte) show_letter::angle#0 -- vbuz1=vbuz2 
    lda.z angle
    sta.z rotate.angle
    // [104] call rotate 
    // [142] phi from show_letter::@6 to rotate [phi:show_letter::@6->rotate]
  rotate_from___b6:
    // [142] phi (signed word) rotate::vector_y#2 = (signed word) rotate::vector_y#1 [phi:show_letter::@6->rotate#0] -- register_copy 
    // [142] phi (signed word) rotate::vector_x#2 = (signed word) rotate::vector_x#1 [phi:show_letter::@6->rotate#1] -- register_copy 
    // [142] phi (byte) rotate::angle#2 = (byte) rotate::angle#1 [phi:show_letter::@6->rotate#2] -- register_copy 
    jsr rotate
    // [105] (signed word) rotate::return_x#1 ← (signed word) rotate::return_x#2 -- vwsz1=vwsz2 
    lda.z rotate.return_x_2
    sta.z rotate.return_x_1
    lda.z rotate.return_x_2+1
    sta.z rotate.return_x_1+1
    // [106] (signed word) rotate::return_y#1 ← (signed word) rotate::return_y#2 -- vwsz1=vwsz2 
    lda.z rotate.return_y_2
    sta.z rotate.return_y_1
    lda.z rotate.return_y_2+1
    sta.z rotate.return_y_1+1
    jmp __b7
    // show_letter::@7
  __b7:
    // [107] (signed word) show_letter::via_x#2 ← (signed word) rotate::return_x#1 -- vwsz1=vwsz2 
    lda.z rotate.return_x_1
    sta.z via_x_2
    lda.z rotate.return_x_1+1
    sta.z via_x_2+1
    // [108] (signed word) show_letter::via_y#2 ← (signed word) rotate::return_y#1 -- vwsz1=vwsz2 
    lda.z rotate.return_y_1
    sta.z via_y_2
    lda.z rotate.return_y_1+1
    sta.z via_y_2+1
    // [109] (signed word) show_letter::segment_via_x#0 ← (signed word) show_letter::via_x#2 + (signed byte) $64 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z via_x_2
    clc
    adc #<$64
    sta.z segment_via_x
    lda.z via_x_2+1
    adc #>$64
    sta.z segment_via_x+1
    // [110] (signed word) show_letter::segment_via_y#0 ← (signed word) show_letter::via_y#2 + (signed byte) $64 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z via_y_2
    clc
    adc #<$64
    sta.z segment_via_y
    lda.z via_y_2+1
    adc #>$64
    sta.z segment_via_y+1
    // [111] (byte) show_letter::segment_type#0 ← *((byte*)(const struct Segment*) letter_c + (byte~) show_letter::$17) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c,y
    sta.z segment_type
    // [112] if((byte) show_letter::segment_type#0==(const byte) MOVE_TO) goto show_letter::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #MOVE_TO
    cmp.z segment_type
    beq __b3
    jmp __b4
    // show_letter::@4
  __b4:
    // [113] if((byte) show_letter::segment_type#0==(const byte) SPLINE_TO) goto show_letter::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #SPLINE_TO
    cmp.z segment_type
    beq __b2
    jmp __b5
    // show_letter::@5
  __b5:
    // [114] (word) bitmap_line::x1#0 ← (word)(signed word) show_letter::current_x#4 -- vwuz1=vwuz2 
    lda.z current_x
    sta.z bitmap_line.x1
    lda.z current_x+1
    sta.z bitmap_line.x1+1
    // [115] (word) bitmap_line::y1#0 ← (word)(signed word) show_letter::current_y#4 -- vwuz1=vwuz2 
    lda.z current_y
    sta.z bitmap_line.y1
    lda.z current_y+1
    sta.z bitmap_line.y1+1
    // [116] (word) bitmap_line::x2#0 ← (word)(signed word) show_letter::current_x#10 -- vwuz1=vwuz2 
    lda.z current_x_1
    sta.z bitmap_line.x2
    lda.z current_x_1+1
    sta.z bitmap_line.x2+1
    // [117] (word) bitmap_line::y2#0 ← (word)(signed word) show_letter::current_y#10 -- vwuz1=vwuz2 
    lda.z current_y_1
    sta.z bitmap_line.y2
    lda.z current_y_1+1
    sta.z bitmap_line.y2+1
    // [118] call bitmap_line 
    // [180] phi from show_letter::@5 to bitmap_line [phi:show_letter::@5->bitmap_line]
  bitmap_line_from___b5:
    // [180] phi (word) bitmap_line::y2#11 = (word) bitmap_line::y2#0 [phi:show_letter::@5->bitmap_line#0] -- register_copy 
    // [180] phi (word) bitmap_line::x2#10 = (word) bitmap_line::x2#0 [phi:show_letter::@5->bitmap_line#1] -- register_copy 
    // [180] phi (word) bitmap_line::y#0 = (word) bitmap_line::y1#0 [phi:show_letter::@5->bitmap_line#2] -- register_copy 
    // [180] phi (word) bitmap_line::x#0 = (word) bitmap_line::x1#0 [phi:show_letter::@5->bitmap_line#3] -- register_copy 
    jsr bitmap_line
    jmp __b3
    // show_letter::@3
  __b3:
    // [119] (byte) show_letter::i#1 ← ++ (byte) show_letter::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [120] if((byte) show_letter::i#1!=(byte) $16) goto show_letter::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$16
    cmp.z i
    bne __b9
    jmp __breturn
    // show_letter::@return
  __breturn:
    // [121] return 
    rts
    // show_letter::@9
  __b9:
    // [122] (signed word) show_letter::current_x#11 ← (signed word) show_letter::current_x#10 -- vwsz1=vwsz2 
    lda.z current_x_1
    sta.z current_x
    lda.z current_x_1+1
    sta.z current_x+1
    // [123] (signed word) show_letter::current_y#11 ← (signed word) show_letter::current_y#10 -- vwsz1=vwsz2 
    lda.z current_y_1
    sta.z current_y
    lda.z current_y_1+1
    sta.z current_y+1
    // [80] phi from show_letter::@9 to show_letter::@1 [phi:show_letter::@9->show_letter::@1]
  __b1_from___b9:
    // [80] phi (signed word) show_letter::current_y#4 = (signed word) show_letter::current_y#11 [phi:show_letter::@9->show_letter::@1#0] -- register_copy 
    // [80] phi (signed word) show_letter::current_x#4 = (signed word) show_letter::current_x#11 [phi:show_letter::@9->show_letter::@1#1] -- register_copy 
    // [80] phi (byte) show_letter::i#10 = (byte) show_letter::i#1 [phi:show_letter::@9->show_letter::@1#2] -- register_copy 
    jmp __b1
    // show_letter::@2
  __b2:
    // [124] (signed word) spline_8segB::p0_x#0 ← (signed word) show_letter::current_x#4 -- vwsz1=vwsz2 
    lda.z current_x
    sta.z spline_8segB.p0_x
    lda.z current_x+1
    sta.z spline_8segB.p0_x+1
    // [125] (signed word) spline_8segB::p0_y#0 ← (signed word) show_letter::current_y#4 -- vwsz1=vwsz2 
    lda.z current_y
    sta.z spline_8segB.p0_y
    lda.z current_y+1
    sta.z spline_8segB.p0_y+1
    // [126] (signed word) spline_8segB::p1_x#0 ← (signed word) show_letter::segment_via_x#0 -- vwsz1=vwsz2 
    lda.z segment_via_x
    sta.z spline_8segB.p1_x
    lda.z segment_via_x+1
    sta.z spline_8segB.p1_x+1
    // [127] (signed word) spline_8segB::p1_y#0 ← (signed word) show_letter::segment_via_y#0 -- vwsz1=vwsz2 
    lda.z segment_via_y
    sta.z spline_8segB.p1_y
    lda.z segment_via_y+1
    sta.z spline_8segB.p1_y+1
    // [128] (signed word) spline_8segB::p2_x#0 ← (signed word) show_letter::current_x#10 -- vwsz1=vwsz2 
    lda.z current_x_1
    sta.z spline_8segB.p2_x
    lda.z current_x_1+1
    sta.z spline_8segB.p2_x+1
    // [129] (signed word) spline_8segB::p2_y#0 ← (signed word) show_letter::current_y#10 -- vwsz1=vwsz2 
    lda.z current_y_1
    sta.z spline_8segB.p2_y
    lda.z current_y_1+1
    sta.z spline_8segB.p2_y+1
    // [130] call spline_8segB 
    jsr spline_8segB
    // [131] phi from show_letter::@2 to show_letter::@8 [phi:show_letter::@2->show_letter::@8]
  __b8_from___b2:
    jmp __b8
    // show_letter::@8
  __b8:
    // [132] call bitmap_plot_spline_8seg 
    jsr bitmap_plot_spline_8seg
    jmp __b3
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($1e) str, byte zp($20) c, word zp($1c) num)
memset: {
    .label end = $92
    .label dst = $21
    .label num = $1c
    .label str = $1e
    .label c = $20
    // [134] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [135] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z str
    clc
    adc.z num
    sta.z end
    lda.z str+1
    adc.z num+1
    sta.z end+1
    // [136] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [137] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [137] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [138] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [139] return 
    rts
    // memset::@3
  __b3:
    // [140] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [141] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // rotate
// 2D-rotate a vector by an angle
// rotate(signed word zp($24) vector_x, signed word zp($26) vector_y, byte zp($23) angle)
rotate: {
    .label __0 = $9a
    .label __2 = $a6
    .label __4 = $b4
    .label __5 = $ba
    .label __6 = $c2
    .label __7 = $c8
    .label __8 = $cc
    .label __9 = $cd
    .label __10 = $9e
    .label __11 = $aa
    .label __12 = $b8
    .label __13 = $c6
    .label vector_x = $24
    .label vector_y = $26
    .label angle = $23
    .label return_x = $65
    .label return_y = $67
    .label return_x_1 = $79
    .label return_y_1 = $7b
    .label cos_a = $94
    .label xr = $a0
    .label yr = $ac
    .label sin_a = $ae
    .label xr_1 = $bc
    .label yr_1 = $ca
    .label return_x_2 = $ce
    .label return_y_2 = $d0
    // [143] (signed word) rotate::cos_a#0 ← (signed word)*((const signed byte*) COS + (byte) rotate::angle#2) -- vwsz1=_sword_pbsc1_derefidx_vbuz2 
    ldy.z angle
    lda COS,y
    sta.z cos_a
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z cos_a+1
    // [144] (signed word) mulf16s::a#0 ← (signed word) rotate::cos_a#0 -- vwsz1=vwsz2 
    lda.z cos_a
    sta.z mulf16s.a
    lda.z cos_a+1
    sta.z mulf16s.a+1
    // [145] (signed word) mulf16s::b#0 ← (signed word) rotate::vector_x#2 -- vwsz1=vwsz2 
    lda.z vector_x
    sta.z mulf16s.b
    lda.z vector_x+1
    sta.z mulf16s.b+1
    // [146] call mulf16s 
    // [285] phi from rotate to mulf16s [phi:rotate->mulf16s]
  mulf16s_from_rotate:
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#0 [phi:rotate->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#0 [phi:rotate->mulf16s#1] -- register_copy 
    jsr mulf16s
    // [147] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0 -- vdsz1=vdsz2 
    lda.z mulf16s.return
    sta.z mulf16s.return_1
    lda.z mulf16s.return+1
    sta.z mulf16s.return_1+1
    lda.z mulf16s.return+2
    sta.z mulf16s.return_1+2
    lda.z mulf16s.return+3
    sta.z mulf16s.return_1+3
    jmp __b1
    // rotate::@1
  __b1:
    // [148] (signed dword~) rotate::$0 ← (signed dword) mulf16s::return#2 -- vdsz1=vdsz2 
    lda.z mulf16s.return_1
    sta.z __0
    lda.z mulf16s.return_1+1
    sta.z __0+1
    lda.z mulf16s.return_1+2
    sta.z __0+2
    lda.z mulf16s.return_1+3
    sta.z __0+3
    // [149] (signed word~) rotate::$10 ← (signed word)(signed dword~) rotate::$0 -- vwsz1=_sword_vdsz2 
    lda.z __0
    sta.z __10
    lda.z __0+1
    sta.z __10+1
    // [150] (signed word) rotate::xr#0 ← (signed word~) rotate::$10 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z __10
    asl
    sta.z xr
    lda.z __10+1
    rol
    sta.z xr+1
    // [151] (signed word) mulf16s::a#1 ← (signed word) rotate::cos_a#0 -- vwsz1=vwsz2 
    lda.z cos_a
    sta.z mulf16s.a
    lda.z cos_a+1
    sta.z mulf16s.a+1
    // [152] (signed word) mulf16s::b#1 ← (signed word) rotate::vector_y#2 -- vwsz1=vwsz2 
    lda.z vector_y
    sta.z mulf16s.b
    lda.z vector_y+1
    sta.z mulf16s.b+1
    // [153] call mulf16s 
    // [285] phi from rotate::@1 to mulf16s [phi:rotate::@1->mulf16s]
  mulf16s_from___b1:
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#1 [phi:rotate::@1->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#1 [phi:rotate::@1->mulf16s#1] -- register_copy 
    jsr mulf16s
    // [154] (signed dword) mulf16s::return#3 ← (signed dword) mulf16s::return#0 -- vdsz1=vdsz2 
    lda.z mulf16s.return
    sta.z mulf16s.return_2
    lda.z mulf16s.return+1
    sta.z mulf16s.return_2+1
    lda.z mulf16s.return+2
    sta.z mulf16s.return_2+2
    lda.z mulf16s.return+3
    sta.z mulf16s.return_2+3
    jmp __b2
    // rotate::@2
  __b2:
    // [155] (signed dword~) rotate::$2 ← (signed dword) mulf16s::return#3 -- vdsz1=vdsz2 
    lda.z mulf16s.return_2
    sta.z __2
    lda.z mulf16s.return_2+1
    sta.z __2+1
    lda.z mulf16s.return_2+2
    sta.z __2+2
    lda.z mulf16s.return_2+3
    sta.z __2+3
    // [156] (signed word~) rotate::$11 ← (signed word)(signed dword~) rotate::$2 -- vwsz1=_sword_vdsz2 
    lda.z __2
    sta.z __11
    lda.z __2+1
    sta.z __11+1
    // [157] (signed word) rotate::yr#0 ← (signed word~) rotate::$11 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z __11
    asl
    sta.z yr
    lda.z __11+1
    rol
    sta.z yr+1
    // [158] (signed word) rotate::sin_a#0 ← (signed word)*((const signed byte*) SIN + (byte) rotate::angle#2) -- vwsz1=_sword_pbsc1_derefidx_vbuz2 
    // signed fixed[8.8]
    ldy.z angle
    lda SIN,y
    sta.z sin_a
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z sin_a+1
    // [159] (signed word) mulf16s::a#2 ← (signed word) rotate::sin_a#0 -- vwsz1=vwsz2 
    lda.z sin_a
    sta.z mulf16s.a
    lda.z sin_a+1
    sta.z mulf16s.a+1
    // [160] (signed word) mulf16s::b#2 ← (signed word) rotate::vector_y#2 -- vwsz1=vwsz2 
    lda.z vector_y
    sta.z mulf16s.b
    lda.z vector_y+1
    sta.z mulf16s.b+1
    // [161] call mulf16s 
    // [285] phi from rotate::@2 to mulf16s [phi:rotate::@2->mulf16s]
  mulf16s_from___b2:
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#2 [phi:rotate::@2->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#2 [phi:rotate::@2->mulf16s#1] -- register_copy 
    jsr mulf16s
    // [162] (signed dword) mulf16s::return#4 ← (signed dword) mulf16s::return#0 -- vdsz1=vdsz2 
    lda.z mulf16s.return
    sta.z mulf16s.return_3
    lda.z mulf16s.return+1
    sta.z mulf16s.return_3+1
    lda.z mulf16s.return+2
    sta.z mulf16s.return_3+2
    lda.z mulf16s.return+3
    sta.z mulf16s.return_3+3
    jmp __b3
    // rotate::@3
  __b3:
    // [163] (signed dword~) rotate::$4 ← (signed dword) mulf16s::return#4 -- vdsz1=vdsz2 
    lda.z mulf16s.return_3
    sta.z __4
    lda.z mulf16s.return_3+1
    sta.z __4+1
    lda.z mulf16s.return_3+2
    sta.z __4+2
    lda.z mulf16s.return_3+3
    sta.z __4+3
    // [164] (signed word~) rotate::$12 ← (signed word)(signed dword~) rotate::$4 -- vwsz1=_sword_vdsz2 
    lda.z __4
    sta.z __12
    lda.z __4+1
    sta.z __12+1
    // [165] (signed word~) rotate::$5 ← (signed word~) rotate::$12 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z __12
    asl
    sta.z __5
    lda.z __12+1
    rol
    sta.z __5+1
    // [166] (signed word) rotate::xr#1 ← (signed word) rotate::xr#0 - (signed word~) rotate::$5 -- vwsz1=vwsz2_minus_vwsz3 
    // signed fixed[0.7]
    lda.z xr
    sec
    sbc.z __5
    sta.z xr_1
    lda.z xr+1
    sbc.z __5+1
    sta.z xr_1+1
    // [167] (signed word) mulf16s::a#3 ← (signed word) rotate::sin_a#0 -- vwsz1=vwsz2 
    lda.z sin_a
    sta.z mulf16s.a
    lda.z sin_a+1
    sta.z mulf16s.a+1
    // [168] (signed word) mulf16s::b#3 ← (signed word) rotate::vector_x#2 -- vwsz1=vwsz2 
    lda.z vector_x
    sta.z mulf16s.b
    lda.z vector_x+1
    sta.z mulf16s.b+1
    // [169] call mulf16s 
    // [285] phi from rotate::@3 to mulf16s [phi:rotate::@3->mulf16s]
  mulf16s_from___b3:
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#3 [phi:rotate::@3->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#3 [phi:rotate::@3->mulf16s#1] -- register_copy 
    jsr mulf16s
    // [170] (signed dword) mulf16s::return#10 ← (signed dword) mulf16s::return#0 -- vdsz1=vdsz2 
    lda.z mulf16s.return
    sta.z mulf16s.return_4
    lda.z mulf16s.return+1
    sta.z mulf16s.return_4+1
    lda.z mulf16s.return+2
    sta.z mulf16s.return_4+2
    lda.z mulf16s.return+3
    sta.z mulf16s.return_4+3
    jmp __b4
    // rotate::@4
  __b4:
    // [171] (signed dword~) rotate::$6 ← (signed dword) mulf16s::return#10 -- vdsz1=vdsz2 
    lda.z mulf16s.return_4
    sta.z __6
    lda.z mulf16s.return_4+1
    sta.z __6+1
    lda.z mulf16s.return_4+2
    sta.z __6+2
    lda.z mulf16s.return_4+3
    sta.z __6+3
    // [172] (signed word~) rotate::$13 ← (signed word)(signed dword~) rotate::$6 -- vwsz1=_sword_vdsz2 
    lda.z __6
    sta.z __13
    lda.z __6+1
    sta.z __13+1
    // [173] (signed word~) rotate::$7 ← (signed word~) rotate::$13 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z __13
    asl
    sta.z __7
    lda.z __13+1
    rol
    sta.z __7+1
    // [174] (signed word) rotate::yr#1 ← (signed word) rotate::yr#0 + (signed word~) rotate::$7 -- vwsz1=vwsz2_plus_vwsz3 
    // signed fixed[8.8]
    lda.z yr
    clc
    adc.z __7
    sta.z yr_1
    lda.z yr+1
    adc.z __7+1
    sta.z yr_1+1
    // [175] (byte~) rotate::$8 ← > (signed word) rotate::xr#1 -- vbuz1=_hi_vwsz2 
    lda.z xr_1+1
    sta.z __8
    // [176] (byte~) rotate::$9 ← > (signed word) rotate::yr#1 -- vbuz1=_hi_vwsz2 
    lda.z yr_1+1
    sta.z __9
    // [177] (signed word) rotate::return_x#2 ← (signed word)(signed byte)(byte~) rotate::$8 -- vwsz1=_sword_vbsz2 
    lda.z __8
    sta.z return_x_2
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z return_x_2+1
    // [178] (signed word) rotate::return_y#2 ← (signed word)(signed byte)(byte~) rotate::$9 -- vwsz1=_sword_vbsz2 
    lda.z __9
    sta.z return_y_2
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z return_y_2+1
    jmp __breturn
    // rotate::@return
  __breturn:
    // [179] return 
    rts
}
  // bitmap_line
// Draw a line on the bitmap using bresenhams algorithm
// bitmap_line(word zp($2e) x1, word zp($30) y1, word zp($28) x2, word zp($2a) y2)
bitmap_line: {
    .label x = $2e
    .label y = $30
    .label dx = $d4
    .label dy = $d8
    .label sx = $dc
    .label sy = $e0
    .label e1 = $32
    .label e = $2c
    .label x1 = $2e
    .label y1 = $30
    .label x2 = $28
    .label y2 = $2a
    // [181] (word) abs_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x
    sta.z abs_u16.w
    lda.z x2+1
    sbc.z x+1
    sta.z abs_u16.w+1
    // [182] call abs_u16 
    // [303] phi from bitmap_line to abs_u16 [phi:bitmap_line->abs_u16]
  abs_u16_from_bitmap_line:
    // [303] phi (word) abs_u16::w#2 = (word) abs_u16::w#0 [phi:bitmap_line->abs_u16#0] -- register_copy 
    jsr abs_u16
    // [183] (word) abs_u16::return#0 ← (word) abs_u16::return#4 -- vwuz1=vwuz2 
    lda.z abs_u16.return_2
    sta.z abs_u16.return
    lda.z abs_u16.return_2+1
    sta.z abs_u16.return+1
    jmp __b12
    // bitmap_line::@12
  __b12:
    // [184] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 -- vwuz1=vwuz2 
    lda.z abs_u16.return
    sta.z dx
    lda.z abs_u16.return+1
    sta.z dx+1
    // [185] (word) abs_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y
    sta.z abs_u16.w
    lda.z y2+1
    sbc.z y+1
    sta.z abs_u16.w+1
    // [186] call abs_u16 
    // [303] phi from bitmap_line::@12 to abs_u16 [phi:bitmap_line::@12->abs_u16]
  abs_u16_from___b12:
    // [303] phi (word) abs_u16::w#2 = (word) abs_u16::w#1 [phi:bitmap_line::@12->abs_u16#0] -- register_copy 
    jsr abs_u16
    // [187] (word) abs_u16::return#1 ← (word) abs_u16::return#4 -- vwuz1=vwuz2 
    lda.z abs_u16.return_2
    sta.z abs_u16.return_1
    lda.z abs_u16.return_2+1
    sta.z abs_u16.return_1+1
    jmp __b13
    // bitmap_line::@13
  __b13:
    // [188] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1 -- vwuz1=vwuz2 
    lda.z abs_u16.return_1
    sta.z dy
    lda.z abs_u16.return_1+1
    sta.z dy+1
    // [189] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 -- vwuz1_neq_0_then_la1 
    lda.z dx
    bne __b1
    lda.z dx+1
    bne __b1
    jmp __b18
    // bitmap_line::@18
  __b18:
    // [190] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 -- vwuz1_eq_0_then_la1 
    lda.z dy
    bne !+
    lda.z dy+1
    beq __b4
  !:
    jmp __b1
    // bitmap_line::@1
  __b1:
    // [191] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x
    sta.z sgn_u16.w
    lda.z x2+1
    sbc.z x+1
    sta.z sgn_u16.w+1
    // [192] call sgn_u16 
    // [310] phi from bitmap_line::@1 to sgn_u16 [phi:bitmap_line::@1->sgn_u16]
  sgn_u16_from___b1:
    // [310] phi (word) sgn_u16::w#2 = (word) sgn_u16::w#0 [phi:bitmap_line::@1->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // [193] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4 -- vwuz1=vwuz2 
    lda.z sgn_u16.return_2
    sta.z sgn_u16.return
    lda.z sgn_u16.return_2+1
    sta.z sgn_u16.return+1
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [194] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 -- vwuz1=vwuz2 
    lda.z sgn_u16.return
    sta.z sx
    lda.z sgn_u16.return+1
    sta.z sx+1
    // [195] (word) sgn_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y
    sta.z sgn_u16.w
    lda.z y2+1
    sbc.z y+1
    sta.z sgn_u16.w+1
    // [196] call sgn_u16 
    // [310] phi from bitmap_line::@14 to sgn_u16 [phi:bitmap_line::@14->sgn_u16]
  sgn_u16_from___b14:
    // [310] phi (word) sgn_u16::w#2 = (word) sgn_u16::w#1 [phi:bitmap_line::@14->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // [197] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4 -- vwuz1=vwuz2 
    lda.z sgn_u16.return_2
    sta.z sgn_u16.return_1
    lda.z sgn_u16.return_2+1
    sta.z sgn_u16.return_1+1
    jmp __b15
    // bitmap_line::@15
  __b15:
    // [198] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1 -- vwuz1=vwuz2 
    lda.z sgn_u16.return_1
    sta.z sy
    lda.z sgn_u16.return_1+1
    sta.z sy+1
    // [199] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 -- vwuz1_gt_vwuz2_then_la1 
    lda.z dy+1
    cmp.z dx+1
    bcc __b2
    bne !+
    lda.z dy
    cmp.z dx
    bcc __b2
  !:
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [200] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dx+1
    lsr
    sta.z e+1
    lda.z dx
    ror
    sta.z e
    // [201] phi from bitmap_line::@5 bitmap_line::@7 to bitmap_line::@6 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6]
  __b6_from___b5:
  __b6_from___b7:
    // [201] phi (word) bitmap_line::e#3 = (word) bitmap_line::e#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#0] -- register_copy 
    // [201] phi (word) bitmap_line::y#4 = (word) bitmap_line::y#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#1] -- register_copy 
    // [201] phi (word) bitmap_line::x#13 = (word) bitmap_line::x#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#2] -- register_copy 
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [202] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13 -- vwuz1=vwuz2 
    lda.z x
    sta.z bitmap_plot.x
    lda.z x+1
    sta.z bitmap_plot.x+1
    // [203] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 -- vbuz1=_byte_vwuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [204] call bitmap_plot 
    // [317] phi from bitmap_line::@6 to bitmap_plot [phi:bitmap_line::@6->bitmap_plot]
  bitmap_plot_from___b6:
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#1 [phi:bitmap_line::@6->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b16
    // bitmap_line::@16
  __b16:
    // [205] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [206] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    lda.z e+1
    adc.z dx+1
    sta.z e+1
    // [207] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e+1
    cmp.z dy+1
    bne !+
    lda.z e
    cmp.z dy
    beq __b7_from___b16
  !:
    bcc __b7_from___b16
    jmp __b8
    // bitmap_line::@8
  __b8:
    // [208] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [209] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    lda.z e+1
    sbc.z dy+1
    sta.z e+1
    // [210] phi from bitmap_line::@16 bitmap_line::@8 to bitmap_line::@7 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7]
  __b7_from___b16:
  __b7_from___b8:
    // [210] phi (word) bitmap_line::e#6 = (word) bitmap_line::e#1 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#0] -- register_copy 
    // [210] phi (word) bitmap_line::x#12 = (word) bitmap_line::x#13 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#1] -- register_copy 
    jmp __b7
    // bitmap_line::@7
  __b7:
    // [211] if((word) bitmap_line::y#1!=(word) bitmap_line::y2#11) goto bitmap_line::@6 -- vwuz1_neq_vwuz2_then_la1 
    lda.z y+1
    cmp.z y2+1
    bne __b6_from___b7
    lda.z y
    cmp.z y2
    bne __b6_from___b7
    // [212] phi from bitmap_line::@10 bitmap_line::@7 to bitmap_line::@3 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3]
  __b3_from___b10:
  __b3_from___b7:
    // [212] phi (word) bitmap_line::y#7 = (word) bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#0] -- register_copy 
    // [212] phi (word) bitmap_line::x#6 = (word) bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#1] -- register_copy 
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [213] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6 -- vwuz1=vwuz2 
    lda.z x
    sta.z bitmap_plot.x
    lda.z x+1
    sta.z bitmap_plot.x+1
    // [214] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 -- vbuz1=_byte_vwuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [215] call bitmap_plot 
    // [317] phi from bitmap_line::@3 to bitmap_plot [phi:bitmap_line::@3->bitmap_plot]
  bitmap_plot_from___b3:
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#2 [phi:bitmap_line::@3->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line::@3->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [216] return 
    rts
    // bitmap_line::@2
  __b2:
    // [217] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dy+1
    lsr
    sta.z e1+1
    lda.z dy
    ror
    sta.z e1
    // [218] phi from bitmap_line::@10 bitmap_line::@2 to bitmap_line::@9 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9]
  __b9_from___b10:
  __b9_from___b2:
    // [218] phi (word) bitmap_line::e1#3 = (word) bitmap_line::e1#6 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#0] -- register_copy 
    // [218] phi (word) bitmap_line::y#15 = (word) bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#1] -- register_copy 
    // [218] phi (word) bitmap_line::x#7 = (word) bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#2] -- register_copy 
    jmp __b9
    // bitmap_line::@9
  __b9:
    // [219] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7 -- vwuz1=vwuz2 
    lda.z x
    sta.z bitmap_plot.x
    lda.z x+1
    sta.z bitmap_plot.x+1
    // [220] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 -- vbuz1=_byte_vwuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [221] call bitmap_plot 
    // [317] phi from bitmap_line::@9 to bitmap_plot [phi:bitmap_line::@9->bitmap_plot]
  bitmap_plot_from___b9:
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#3 [phi:bitmap_line::@9->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line::@9->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b17
    // bitmap_line::@17
  __b17:
    // [222] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [223] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e1
    clc
    adc.z dy
    sta.z e1
    lda.z e1+1
    adc.z dy+1
    sta.z e1+1
    // [224] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e1+1
    cmp.z dx+1
    bne !+
    lda.z e1
    cmp.z dx
    beq __b10_from___b17
  !:
    bcc __b10_from___b17
    jmp __b11
    // bitmap_line::@11
  __b11:
    // [225] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [226] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e1
    sec
    sbc.z dx
    sta.z e1
    lda.z e1+1
    sbc.z dx+1
    sta.z e1+1
    // [227] phi from bitmap_line::@11 bitmap_line::@17 to bitmap_line::@10 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10]
  __b10_from___b11:
  __b10_from___b17:
    // [227] phi (word) bitmap_line::e1#6 = (word) bitmap_line::e1#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#0] -- register_copy 
    // [227] phi (word) bitmap_line::y#13 = (word) bitmap_line::y#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#1] -- register_copy 
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [228] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#10) goto bitmap_line::@9 -- vwuz1_neq_vwuz2_then_la1 
    lda.z x+1
    cmp.z x2+1
    bne __b9_from___b10
    lda.z x
    cmp.z x2
    bne __b9_from___b10
    jmp __b3_from___b10
    // bitmap_line::@4
  __b4:
    // [229] (word) bitmap_plot::x#0 ← (word) bitmap_line::x#0 -- vwuz1=vwuz2 
    lda.z x
    sta.z bitmap_plot.x
    lda.z x+1
    sta.z bitmap_plot.x+1
    // [230] (byte) bitmap_plot::y#0 ← (byte)(word) bitmap_line::y#0 -- vbuz1=_byte_vwuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [231] call bitmap_plot 
    // [317] phi from bitmap_line::@4 to bitmap_plot [phi:bitmap_line::@4->bitmap_plot]
  bitmap_plot_from___b4:
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#0 [phi:bitmap_line::@4->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line::@4->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __breturn
}
  // spline_8segB
// Generate a 8-segment quadratic spline using 16-bit fixed point 1/64-format math (6 decimal bits).
// The resulting spline segment points are returned in SPLINE_8SEG[]
// Point values must be within [-200 ; 1ff] for the calculation to not overflow.
// A quadratic spline is a curve defined by 3 points: P0, P1 and P2.
// The curve connects P0 to P2 through a smooth curve that moves towards P1, but does usually not touch it.
// spline_8segB(signed word zp($86) p0_x, signed word zp($88) p0_y, signed word zp($8a) p1_x, signed word zp($8c) p1_y, signed word zp($8e) p2_x, signed word zp($90) p2_y)
spline_8segB: {
    .label __0 = $e2
    .label __1 = $e4
    .label __3 = $e8
    .label __4 = $ea
    .label __6 = $ee
    .label __8 = $f2
    .label __10 = $f6
    .label __12 = $f8
    .label __18 = $107
    .label __19 = $109
    .label __20 = $10b
    .label __21 = $10d
    .label __22 = $fe
    .label __23 = $100
    .label __24 = $102
    .label __25 = $104
    .label __31 = $106
    .label a_x = $e6
    .label a_y = $ec
    .label b_x = $f0
    .label b_y = $f4
    .label i_x = $39
    .label i_y = $3b
    .label j_x = $fa
    .label j_y = $fc
    .label p_x = $34
    .label p_y = $36
    .label n = $38
    .label p0_x = $86
    .label p0_y = $88
    .label p1_x = $8a
    .label p1_y = $8c
    .label p2_x = $8e
    .label p2_y = $90
    // [232] (signed word~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#0 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z p1_x
    asl
    sta.z __0
    lda.z p1_x+1
    rol
    sta.z __0+1
    // [233] (signed word~) spline_8segB::$1 ← (signed word) spline_8segB::p2_x#0 - (signed word~) spline_8segB::$0 -- vwsz1=vwsz2_minus_vwsz3 
    lda.z p2_x
    sec
    sbc.z __0
    sta.z __1
    lda.z p2_x+1
    sbc.z __0+1
    sta.z __1+1
    // [234] (signed word) spline_8segB::a_x#0 ← (signed word~) spline_8segB::$1 + (signed word) spline_8segB::p0_x#0 -- vwsz1=vwsz2_plus_vwsz3 
    lda.z __1
    clc
    adc.z p0_x
    sta.z a_x
    lda.z __1+1
    adc.z p0_x+1
    sta.z a_x+1
    // [235] (signed word~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#0 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z p1_y
    asl
    sta.z __3
    lda.z p1_y+1
    rol
    sta.z __3+1
    // [236] (signed word~) spline_8segB::$4 ← (signed word) spline_8segB::p2_y#0 - (signed word~) spline_8segB::$3 -- vwsz1=vwsz2_minus_vwsz3 
    lda.z p2_y
    sec
    sbc.z __3
    sta.z __4
    lda.z p2_y+1
    sbc.z __3+1
    sta.z __4+1
    // [237] (signed word) spline_8segB::a_y#0 ← (signed word~) spline_8segB::$4 + (signed word) spline_8segB::p0_y#0 -- vwsz1=vwsz2_plus_vwsz3 
    lda.z __4
    clc
    adc.z p0_y
    sta.z a_y
    lda.z __4+1
    adc.z p0_y+1
    sta.z a_y+1
    // [238] (signed word~) spline_8segB::$6 ← (signed word) spline_8segB::p1_x#0 - (signed word) spline_8segB::p0_x#0 -- vwsz1=vwsz2_minus_vwsz3 
    lda.z p1_x
    sec
    sbc.z p0_x
    sta.z __6
    lda.z p1_x+1
    sbc.z p0_x+1
    sta.z __6+1
    // [239] (signed word) spline_8segB::b_x#0 ← (signed word~) spline_8segB::$6 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z __6
    asl
    sta.z b_x
    lda.z __6+1
    rol
    sta.z b_x+1
    // [240] (signed word~) spline_8segB::$8 ← (signed word) spline_8segB::p1_y#0 - (signed word) spline_8segB::p0_y#0 -- vwsz1=vwsz2_minus_vwsz3 
    lda.z p1_y
    sec
    sbc.z p0_y
    sta.z __8
    lda.z p1_y+1
    sbc.z p0_y+1
    sta.z __8+1
    // [241] (signed word) spline_8segB::b_y#0 ← (signed word~) spline_8segB::$8 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z __8
    asl
    sta.z b_y
    lda.z __8+1
    rol
    sta.z b_y+1
    // [242] (signed word~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 << (byte) 3 -- vwsz1=vwsz2_rol_3 
    lda.z b_x
    asl
    sta.z __10
    lda.z b_x+1
    rol
    sta.z __10+1
    asl.z __10
    rol.z __10+1
    asl.z __10
    rol.z __10+1
    // [243] (signed word) spline_8segB::i_x#0 ← (signed word) spline_8segB::a_x#0 + (signed word~) spline_8segB::$10 -- vwsz1=vwsz2_plus_vwsz3 
    lda.z a_x
    clc
    adc.z __10
    sta.z i_x
    lda.z a_x+1
    adc.z __10+1
    sta.z i_x+1
    // [244] (signed word~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 << (byte) 3 -- vwsz1=vwsz2_rol_3 
    lda.z b_y
    asl
    sta.z __12
    lda.z b_y+1
    rol
    sta.z __12+1
    asl.z __12
    rol.z __12+1
    asl.z __12
    rol.z __12+1
    // [245] (signed word) spline_8segB::i_y#0 ← (signed word) spline_8segB::a_y#0 + (signed word~) spline_8segB::$12 -- vwsz1=vwsz2_plus_vwsz3 
    lda.z a_y
    clc
    adc.z __12
    sta.z i_y
    lda.z a_y+1
    adc.z __12+1
    sta.z i_y+1
    // [246] (signed word) spline_8segB::j_x#0 ← (signed word) spline_8segB::a_x#0 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z a_x
    asl
    sta.z j_x
    lda.z a_x+1
    rol
    sta.z j_x+1
    // [247] (signed word) spline_8segB::j_y#0 ← (signed word) spline_8segB::a_y#0 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z a_y
    asl
    sta.z j_y
    lda.z a_y+1
    rol
    sta.z j_y+1
    // [248] (signed word) spline_8segB::p_x#0 ← (signed word) spline_8segB::p0_x#0 << (byte) 6 -- vwsz1=vwsz2_rol_6 
    lda.z p0_x
    asl
    sta.z p_x
    lda.z p0_x+1
    rol
    sta.z p_x+1
    asl.z p_x
    rol.z p_x+1
    asl.z p_x
    rol.z p_x+1
    asl.z p_x
    rol.z p_x+1
    asl.z p_x
    rol.z p_x+1
    asl.z p_x
    rol.z p_x+1
    // [249] (signed word) spline_8segB::p_y#0 ← (signed word) spline_8segB::p0_y#0 << (byte) 6 -- vwsz1=vwsz2_rol_6 
    lda.z p0_y
    asl
    sta.z p_y
    lda.z p0_y+1
    rol
    sta.z p_y+1
    asl.z p_y
    rol.z p_y+1
    asl.z p_y
    rol.z p_y+1
    asl.z p_y
    rol.z p_y+1
    asl.z p_y
    rol.z p_y+1
    asl.z p_y
    rol.z p_y+1
    // [250] phi from spline_8segB to spline_8segB::@1 [phi:spline_8segB->spline_8segB::@1]
  __b1_from_spline_8segB:
    // [250] phi (signed word) spline_8segB::i_y#2 = (signed word) spline_8segB::i_y#0 [phi:spline_8segB->spline_8segB::@1#0] -- register_copy 
    // [250] phi (signed word) spline_8segB::i_x#2 = (signed word) spline_8segB::i_x#0 [phi:spline_8segB->spline_8segB::@1#1] -- register_copy 
    // [250] phi (byte) spline_8segB::n#2 = (byte) 0 [phi:spline_8segB->spline_8segB::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z n
    // [250] phi (signed word) spline_8segB::p_y#2 = (signed word) spline_8segB::p_y#0 [phi:spline_8segB->spline_8segB::@1#3] -- register_copy 
    // [250] phi (signed word) spline_8segB::p_x#2 = (signed word) spline_8segB::p_x#0 [phi:spline_8segB->spline_8segB::@1#4] -- register_copy 
    jmp __b1
    // [250] phi from spline_8segB::@1 to spline_8segB::@1 [phi:spline_8segB::@1->spline_8segB::@1]
  __b1_from___b1:
    // [250] phi (signed word) spline_8segB::i_y#2 = (signed word) spline_8segB::i_y#1 [phi:spline_8segB::@1->spline_8segB::@1#0] -- register_copy 
    // [250] phi (signed word) spline_8segB::i_x#2 = (signed word) spline_8segB::i_x#1 [phi:spline_8segB::@1->spline_8segB::@1#1] -- register_copy 
    // [250] phi (byte) spline_8segB::n#2 = (byte) spline_8segB::n#1 [phi:spline_8segB::@1->spline_8segB::@1#2] -- register_copy 
    // [250] phi (signed word) spline_8segB::p_y#2 = (signed word) spline_8segB::p_y#1 [phi:spline_8segB::@1->spline_8segB::@1#3] -- register_copy 
    // [250] phi (signed word) spline_8segB::p_x#2 = (signed word) spline_8segB::p_x#1 [phi:spline_8segB::@1->spline_8segB::@1#4] -- register_copy 
    jmp __b1
    // spline_8segB::@1
  __b1:
    // [251] (signed word~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (signed byte) $20 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z p_x
    clc
    adc #<$20
    sta.z __22
    lda.z p_x+1
    adc #>$20
    sta.z __22+1
    // [252] (signed word~) spline_8segB::$23 ← (signed word~) spline_8segB::$22 >> (byte) 6 -- vwsz1=vwsz2_ror_6 
    lda.z __22
    sta.z $ff
    lda.z __22+1
    sta.z __23
    lda #0
    bit.z __22+1
    bpl !+
    lda #$ff
  !:
    sta.z __23+1
    rol.z $ff
    rol.z __23
    rol.z __23+1
    rol.z $ff
    rol.z __23
    rol.z __23+1
    // [253] (signed word~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (signed byte) $20 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z p_y
    clc
    adc #<$20
    sta.z __24
    lda.z p_y+1
    adc #>$20
    sta.z __24+1
    // [254] (signed word~) spline_8segB::$25 ← (signed word~) spline_8segB::$24 >> (byte) 6 -- vwsz1=vwsz2_ror_6 
    lda.z __24
    sta.z $ff
    lda.z __24+1
    sta.z __25
    lda #0
    bit.z __24+1
    bpl !+
    lda #$ff
  !:
    sta.z __25+1
    rol.z $ff
    rol.z __25
    rol.z __25+1
    rol.z $ff
    rol.z __25
    rol.z __25+1
    // [255] (byte~) spline_8segB::$31 ← (byte) spline_8segB::n#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z n
    asl
    asl
    sta.z __31
    // [256] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$23 -- pwsc1_derefidx_vbuz1=vwsz2 
    ldy.z __31
    lda.z __23
    sta SPLINE_8SEG,y
    lda.z __23+1
    sta SPLINE_8SEG+1,y
    // [257] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$25 -- pwsc1_derefidx_vbuz1=vwsz2 
    ldy.z __31
    lda.z __25
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    lda.z __25+1
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    // [258] (signed word) spline_8segB::p_x#1 ← (signed word) spline_8segB::p_x#2 + (signed word) spline_8segB::i_x#2 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z p_x
    clc
    adc.z i_x
    sta.z p_x
    lda.z p_x+1
    adc.z i_x+1
    sta.z p_x+1
    // [259] (signed word) spline_8segB::p_y#1 ← (signed word) spline_8segB::p_y#2 + (signed word) spline_8segB::i_y#2 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z p_y
    clc
    adc.z i_y
    sta.z p_y
    lda.z p_y+1
    adc.z i_y+1
    sta.z p_y+1
    // [260] (signed word) spline_8segB::i_x#1 ← (signed word) spline_8segB::i_x#2 + (signed word) spline_8segB::j_x#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z i_x
    clc
    adc.z j_x
    sta.z i_x
    lda.z i_x+1
    adc.z j_x+1
    sta.z i_x+1
    // [261] (signed word) spline_8segB::i_y#1 ← (signed word) spline_8segB::i_y#2 + (signed word) spline_8segB::j_y#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z i_y
    clc
    adc.z j_y
    sta.z i_y
    lda.z i_y+1
    adc.z j_y+1
    sta.z i_y+1
    // [262] (byte) spline_8segB::n#1 ← ++ (byte) spline_8segB::n#2 -- vbuz1=_inc_vbuz1 
    inc.z n
    // [263] if((byte) spline_8segB::n#1!=(byte) 8) goto spline_8segB::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z n
    bne __b1_from___b1
    jmp __b2
    // spline_8segB::@2
  __b2:
    // [264] (signed word~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#1 + (signed byte) $20 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z p_x
    clc
    adc #<$20
    sta.z __18
    lda.z p_x+1
    adc #>$20
    sta.z __18+1
    // [265] (signed word~) spline_8segB::$19 ← (signed word~) spline_8segB::$18 >> (byte) 6 -- vwsz1=vwsz2_ror_6 
    lda.z __18
    sta.z $ff
    lda.z __18+1
    sta.z __19
    lda #0
    bit.z __18+1
    bpl !+
    lda #$ff
  !:
    sta.z __19+1
    rol.z $ff
    rol.z __19
    rol.z __19+1
    rol.z $ff
    rol.z __19
    rol.z __19+1
    // [266] (signed word~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#1 + (signed byte) $20 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z p_y
    clc
    adc #<$20
    sta.z __20
    lda.z p_y+1
    adc #>$20
    sta.z __20+1
    // [267] (signed word~) spline_8segB::$21 ← (signed word~) spline_8segB::$20 >> (byte) 6 -- vwsz1=vwsz2_ror_6 
    lda.z __20
    sta.z $ff
    lda.z __20+1
    sta.z __21
    lda #0
    bit.z __20+1
    bpl !+
    lda #$ff
  !:
    sta.z __21+1
    rol.z $ff
    rol.z __21
    rol.z __21+1
    rol.z $ff
    rol.z __21
    rol.z __21+1
    // [268] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$19 -- _deref_pwsc1=vwsz1 
    lda.z __19
    sta SPLINE_8SEG+8*SIZEOF_STRUCT_SPLINEVECTOR16
    lda.z __19+1
    sta SPLINE_8SEG+8*SIZEOF_STRUCT_SPLINEVECTOR16+1
    // [269] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$21 -- _deref_pwsc1=vwsz1 
    lda.z __21
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+8*SIZEOF_STRUCT_SPLINEVECTOR16
    lda.z __21+1
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+8*SIZEOF_STRUCT_SPLINEVECTOR16+1
    jmp __breturn
    // spline_8segB::@return
  __breturn:
    // [270] return 
    rts
}
  // bitmap_plot_spline_8seg
// Plot the spline in the SPLINE_8SEG array
bitmap_plot_spline_8seg: {
    .label __4 = $10f
    .label current_x = $3e
    .label current_y = $40
    .label n = $3d
    // [271] (signed word) bitmap_plot_spline_8seg::current_x#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG) -- vwsz1=_deref_pwsc1 
    lda SPLINE_8SEG
    sta.z current_x
    lda SPLINE_8SEG+1
    sta.z current_x+1
    // [272] (signed word) bitmap_plot_spline_8seg::current_y#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y) -- vwsz1=_deref_pwsc1 
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y
    sta.z current_y
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1
    sta.z current_y+1
    // [273] phi from bitmap_plot_spline_8seg to bitmap_plot_spline_8seg::@1 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1]
  __b1_from_bitmap_plot_spline_8seg:
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_y#2 = (signed word) bitmap_plot_spline_8seg::current_y#0 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1#0] -- register_copy 
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_x#2 = (signed word) bitmap_plot_spline_8seg::current_x#0 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1#1] -- register_copy 
    // [273] phi (byte) bitmap_plot_spline_8seg::n#2 = (byte) 1 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta.z n
    jmp __b1
    // [273] phi from bitmap_plot_spline_8seg::@2 to bitmap_plot_spline_8seg::@1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1]
  __b1_from___b2:
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_y#2 = (signed word) bitmap_plot_spline_8seg::current_y#1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1#0] -- register_copy 
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_x#2 = (signed word) bitmap_plot_spline_8seg::current_x#1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1#1] -- register_copy 
    // [273] phi (byte) bitmap_plot_spline_8seg::n#2 = (byte) bitmap_plot_spline_8seg::n#1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1#2] -- register_copy 
    jmp __b1
    // bitmap_plot_spline_8seg::@1
  __b1:
    // [274] (byte~) bitmap_plot_spline_8seg::$4 ← (byte) bitmap_plot_spline_8seg::n#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z n
    asl
    asl
    sta.z __4
    // [275] (word) bitmap_line::x1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_x#2 -- vwuz1=vwuz2 
    lda.z current_x
    sta.z bitmap_line.x1
    lda.z current_x+1
    sta.z bitmap_line.x1+1
    // [276] (word) bitmap_line::y1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_y#2 -- vwuz1=vwuz2 
    lda.z current_y
    sta.z bitmap_line.y1
    lda.z current_y+1
    sta.z bitmap_line.y1+1
    // [277] (word) bitmap_line::x2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __4
    lda SPLINE_8SEG,y
    sta.z bitmap_line.x2
    lda SPLINE_8SEG+1,y
    sta.z bitmap_line.x2+1
    // [278] (word) bitmap_line::y2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __4
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z bitmap_line.y2
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z bitmap_line.y2+1
    // [279] call bitmap_line 
    // [180] phi from bitmap_plot_spline_8seg::@1 to bitmap_line [phi:bitmap_plot_spline_8seg::@1->bitmap_line]
  bitmap_line_from___b1:
    // [180] phi (word) bitmap_line::y2#11 = (word) bitmap_line::y2#13 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#0] -- register_copy 
    // [180] phi (word) bitmap_line::x2#10 = (word) bitmap_line::x2#13 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#1] -- register_copy 
    // [180] phi (word) bitmap_line::y#0 = (word) bitmap_line::y1#1 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#2] -- register_copy 
    // [180] phi (word) bitmap_line::x#0 = (word) bitmap_line::x1#1 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#3] -- register_copy 
    jsr bitmap_line
    jmp __b2
    // bitmap_plot_spline_8seg::@2
  __b2:
    // [280] (signed word) bitmap_plot_spline_8seg::current_x#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __4
    lda SPLINE_8SEG,y
    sta.z current_x
    lda SPLINE_8SEG+1,y
    sta.z current_x+1
    // [281] (signed word) bitmap_plot_spline_8seg::current_y#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __4
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z current_y
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z current_y+1
    // [282] (byte) bitmap_plot_spline_8seg::n#1 ← ++ (byte) bitmap_plot_spline_8seg::n#2 -- vbuz1=_inc_vbuz1 
    inc.z n
    // [283] if((byte) bitmap_plot_spline_8seg::n#1!=(byte) 9) goto bitmap_plot_spline_8seg::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z n
    bne __b1_from___b2
    jmp __breturn
    // bitmap_plot_spline_8seg::@return
  __breturn:
    // [284] return 
    rts
}
  // mulf16s
// Fast multiply two signed ints to a signed double unsigned int result
// Fixes offsets introduced by using unsigned multiplication
// mulf16s(signed word zp($42) a, signed word zp($44) b)
mulf16s: {
    .label __6 = $118
    .label __9 = $11c
    .label __11 = $11a
    .label __12 = $11e
    .label m = $46
    .label return = $120
    .label a = $42
    .label b = $44
    .label return_1 = $96
    .label return_2 = $a2
    .label return_3 = $b0
    .label return_4 = $be
    // [286] (word) mulf16u::a#0 ← (word)(signed word) mulf16s::a#4 -- vwuz1=vwuz2 
    lda.z a
    sta.z mulf16u.a
    lda.z a+1
    sta.z mulf16u.a+1
    // [287] (word) mulf16u::b#0 ← (word)(signed word) mulf16s::b#4 -- vwuz1=vwuz2 
    lda.z b
    sta.z mulf16u.b
    lda.z b+1
    sta.z mulf16u.b+1
    // [288] call mulf16u 
    jsr mulf16u
    // [289] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0 -- vduz1=vduz2 
    lda.z mulf16u.return
    sta.z mulf16u.return_1
    lda.z mulf16u.return+1
    sta.z mulf16u.return_1+1
    lda.z mulf16u.return+2
    sta.z mulf16u.return_1+2
    lda.z mulf16u.return+3
    sta.z mulf16u.return_1+3
    jmp __b5
    // mulf16s::@5
  __b5:
    // [290] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2 -- vduz1=vduz2 
    lda.z mulf16u.return_1
    sta.z m
    lda.z mulf16u.return_1+1
    sta.z m+1
    lda.z mulf16u.return_1+2
    sta.z m+2
    lda.z mulf16u.return_1+3
    sta.z m+3
    // [291] if((signed word) mulf16s::a#4>=(signed byte) 0) goto mulf16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1_from___b5
    jmp __b3
    // mulf16s::@3
  __b3:
    // [292] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // [293] (word~) mulf16s::$11 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#4 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z __6
    sec
    sbc.z b
    sta.z __11
    lda.z __6+1
    sbc.z b+1
    sta.z __11+1
    // [294] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$11 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [295] phi from mulf16s::@3 mulf16s::@5 to mulf16s::@1 [phi:mulf16s::@3/mulf16s::@5->mulf16s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [295] phi (dword) mulf16s::m#5 = (dword) mulf16s::m#1 [phi:mulf16s::@3/mulf16s::@5->mulf16s::@1#0] -- register_copy 
    jmp __b1
    // mulf16s::@1
  __b1:
    // [296] if((signed word) mulf16s::b#4>=(signed byte) 0) goto mulf16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2_from___b1
    jmp __b4
    // mulf16s::@4
  __b4:
    // [297] (word~) mulf16s::$9 ← > (dword) mulf16s::m#5 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // [298] (word~) mulf16s::$12 ← (word~) mulf16s::$9 - (word)(signed word) mulf16s::a#4 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z __9
    sec
    sbc.z a
    sta.z __12
    lda.z __9+1
    sbc.z a+1
    sta.z __12+1
    // [299] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$12 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [300] phi from mulf16s::@1 mulf16s::@4 to mulf16s::@2 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [300] phi (dword) mulf16s::m#4 = (dword) mulf16s::m#5 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2#0] -- register_copy 
    jmp __b2
    // mulf16s::@2
  __b2:
    // [301] (signed dword) mulf16s::return#0 ← (signed dword)(dword) mulf16s::m#4 -- vdsz1=vdsz2 
    lda.z m
    sta.z return
    lda.z m+1
    sta.z return+1
    lda.z m+2
    sta.z return+2
    lda.z m+3
    sta.z return+3
    jmp __breturn
    // mulf16s::@return
  __breturn:
    // [302] return 
    rts
}
  // abs_u16
// Get the absolute value of a 16-bit unsigned number treated as a signed number.
// abs_u16(word zp($4a) w)
abs_u16: {
    .label __0 = $124
    .label __1 = $125
    .label w = $4a
    .label return = $d2
    .label return_1 = $d6
    .label return_2 = $4a
    // [304] (byte~) abs_u16::$0 ← > (word) abs_u16::w#2 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z __0
    // [305] (byte~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z __0
    sta.z __1
    // [306] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    bne __b1
    // [308] phi from abs_u16 abs_u16::@1 to abs_u16::@return [phi:abs_u16/abs_u16::@1->abs_u16::@return]
  __breturn_from_abs_u16:
  __breturn_from___b1:
    // [308] phi (word) abs_u16::return#4 = (word) abs_u16::w#2 [phi:abs_u16/abs_u16::@1->abs_u16::@return#0] -- register_copy 
    jmp __breturn
    // abs_u16::@1
  __b1:
    // [307] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc.z return_2
    sta.z return_2
    lda #0
    sbc.z return_2+1
    sta.z return_2+1
    jmp __breturn_from___b1
    // abs_u16::@return
  __breturn:
    // [309] return 
    rts
}
  // sgn_u16
// Get the sign of a 16-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is
// sgn_u16(word zp($4c) w)
sgn_u16: {
    .label __0 = $126
    .label __1 = $127
    .label w = $4c
    .label return = $da
    .label return_1 = $de
    .label return_2 = $4e
    // [311] (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2 -- vbuz1=_hi_vwuz2 
    lda.z w+1
    sta.z __0
    // [312] (byte~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z __0
    sta.z __1
    // [313] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z __1
    bne __b1_from_sgn_u16
    // [315] phi from sgn_u16 to sgn_u16::@return [phi:sgn_u16->sgn_u16::@return]
  __breturn_from_sgn_u16:
    // [315] phi (word) sgn_u16::return#4 = (byte) 1 [phi:sgn_u16->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<1
    sta.z return_2
    lda #>1
    sta.z return_2+1
    jmp __breturn
    // [314] phi from sgn_u16 to sgn_u16::@1 [phi:sgn_u16->sgn_u16::@1]
  __b1_from_sgn_u16:
    jmp __b1
    // sgn_u16::@1
  __b1:
    // [315] phi from sgn_u16::@1 to sgn_u16::@return [phi:sgn_u16::@1->sgn_u16::@return]
  __breturn_from___b1:
    // [315] phi (word) sgn_u16::return#4 = (byte) -1 [phi:sgn_u16::@1->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z return_2
    lda #>-1
    sta.z return_2+1
    jmp __breturn
    // sgn_u16::@return
  __breturn:
    // [316] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp($51) x, byte zp($50) y)
bitmap_plot: {
    .label __0 = $12a
    .label __1 = $12e
    .label plotter = $128
    .label plotter_1 = $12c
    .label x = $51
    .label y = $50
    // [318] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy.z y
    lda bitmap_plot_yhi,y
    sta.z plotter+1
    lda bitmap_plot_ylo,y
    sta.z plotter
    // [319] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // [320] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter_1
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter_1+1
    // [321] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4 -- vbuz1=_lo_vwuz2 
    lda.z x
    sta.z __1
    // [322] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuz2 
    ldy #0
    lda (plotter_1),y
    ldy.z __1
    ora bitmap_plot_bit,y
    ldy #0
    sta (plotter_1),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [323] return 
    rts
}
  // mulf16u
// Fast multiply two unsigned ints to a double unsigned int result
// Done in assembler to utilize fast addition A+X
// mulf16u(word zp($110) a, word zp($112) b)
mulf16u: {
    .label memA = $f8
    .label memB = $fa
    .label memR = $fc
    .label return = $12f
    .label a = $110
    .label b = $112
    .label return_1 = $114
    // [324] *((const nomodify word*) mulf16u::memA) ← (word) mulf16u::a#0 -- _deref_pwuc1=vwuz1 
    lda.z a
    sta memA
    lda.z a+1
    sta memA+1
    // [325] *((const nomodify word*) mulf16u::memB) ← (word) mulf16u::b#0 -- _deref_pwuc1=vwuz1 
    lda.z b
    sta memB
    lda.z b+1
    sta memB+1
    // asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
    lda memA
    sta sm1a+1
    sta sm3a+1
    sta sm5a+1
    sta sm7a+1
    eor #$ff
    sta sm2a+1
    sta sm4a+1
    sta sm6a+1
    sta sm8a+1
    lda memA+1
    sta sm1b+1
    sta sm3b+1
    sta sm5b+1
    sta sm7b+1
    eor #$ff
    sta sm2b+1
    sta sm4b+1
    sta sm6b+1
    sta sm8b+1
    ldx memB
    sec
  sm1a:
    lda mulf_sqr1_lo,x
  sm2a:
    sbc mulf_sqr2_lo,x
    sta memR+0
  sm3a:
    lda mulf_sqr1_hi,x
  sm4a:
    sbc mulf_sqr2_hi,x
    sta _AA+1
    sec
  sm1b:
    lda mulf_sqr1_lo,x
  sm2b:
    sbc mulf_sqr2_lo,x
    sta _cc+1
  sm3b:
    lda mulf_sqr1_hi,x
  sm4b:
    sbc mulf_sqr2_hi,x
    sta _CC+1
    ldx memB+1
    sec
  sm5a:
    lda mulf_sqr1_lo,x
  sm6a:
    sbc mulf_sqr2_lo,x
    sta _bb+1
  sm7a:
    lda mulf_sqr1_hi,x
  sm8a:
    sbc mulf_sqr2_hi,x
    sta _BB+1
    sec
  sm5b:
    lda mulf_sqr1_lo,x
  sm6b:
    sbc mulf_sqr2_lo,x
    sta _dd+1
  sm7b:
    lda mulf_sqr1_hi,x
  sm8b:
    sbc mulf_sqr2_hi,x
    sta memR+3
    clc
  _AA:
    lda #0
  _bb:
    adc #0
    sta memR+1
  _BB:
    lda #0
  _CC:
    adc #0
    sta memR+2
    bcc !+
    inc memR+3
    clc
  !:
  _cc:
    lda #0
    adc memR+1
    sta memR+1
  _dd:
    lda #0
    adc memR+2
    sta memR+2
    bcc !+
    inc memR+3
  !:
    // [327] (dword) mulf16u::return#0 ← *((const nomodify dword*) mulf16u::memR) -- vduz1=_deref_pduc1 
    lda memR
    sta.z return
    lda memR+1
    sta.z return+1
    lda memR+2
    sta.z return+2
    lda memR+3
    sta.z return+3
    jmp __breturn
    // mulf16u::@return
  __breturn:
    // [328] return 
    rts
}
  // File Data
  // Array filled with spline segment points by splinePlot_8()
  SPLINE_8SEG: .fill 4*9, 0
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // True type letter c
  letter_c: .byte MOVE_TO
  .word $6c, $92, 0, 0
  .byte SPLINE_TO
  .word $59, $b6, $67, $a9
  .byte SPLINE_TO
  .word $3b, $c3, $4b, $c3
  .byte SPLINE_TO
  .word $17, $b2, $26, $c3
  .byte SPLINE_TO
  .word 9, $84, 9, $a1
  .byte SPLINE_TO
  .word $19, $57, 9, $68
  .byte SPLINE_TO
  .word $41, $45, $2a, $45
  .byte SPLINE_TO
  .word $5d, $4f, $52, $45
  .byte SPLINE_TO
  .word $69, $62, $69, $58
  .byte SPLINE_TO
  .word $66, $6a, $69, $67
  .byte SPLINE_TO
  .word $5d, $6d, $62, $6d
  .byte SPLINE_TO
  .word $51, $68, $55, $6d
  .byte SPLINE_TO
  .word $4e, $5d, $4f, $65
  .byte SPLINE_TO
  .word $49, $52, $4e, $56
  .byte SPLINE_TO
  .word $3d, $4e, $45, $4e
  .byte SPLINE_TO
  .word $28, $58, $30, $4e
  .byte SPLINE_TO
  .word $1d, $79, $1d, $64
  .byte SPLINE_TO
  .word $28, $9e, $1d, $8e
  .byte SPLINE_TO
  .word $44, $ae, $32, $ae
  .byte SPLINE_TO
  .word $5b, $a6, $50, $ae
  .byte SPLINE_TO
  .word $68, $90, $62, $a0
  .byte LINE_TO
  .word $6c, $92, 0, 0
  // Sine and Cosine tables
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
SIN:
.for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))


REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:88 [ bitmap_init::$4 ] has ALU potential.
Statement [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [18] if(*((const nomodify byte*) RASTER)!=(byte) $fe) goto main::@3 [ main::angle#2 main::w#4 ] (  [ main::angle#2 main::w#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::angle#2 main::angle#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::w#4 main::w#1 ]
Statement [19] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@4 [ main::angle#2 main::w#4 ] (  [ main::angle#2 main::w#4 ] { }  ) always clobbers reg byte a 
Statement [22] (byte) main::angle#1 ← (byte) main::angle#2 + (byte) 9 [ main::angle#1 ] (  [ main::angle#1 ] { }  ) always clobbers reg byte a 
Statement [25] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:9 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [27] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ mulf_init::dir#2 mulf_init::dir#4 ]
Statement [28] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [29] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:12 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:15 [ mulf_init::dir#2 mulf_init::dir#4 ]
Statement [32] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [34] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [40] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ mulf_init::c#2 mulf_init::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:9 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
Statement [48] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [50] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [69] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( bitmap_init:3 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [81] (byte~) show_letter::$21 ← (byte) show_letter::i#10 << (byte) 3 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$21 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$21 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:83 [ show_letter::angle#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:23 [ show_letter::i#10 show_letter::i#1 ]
Statement [82] (byte~) show_letter::$17 ← (byte~) show_letter::$21 + (byte) show_letter::i#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [83] (signed word) show_letter::to_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) show_letter::$17) [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:92 [ show_letter::$17 ]
Statement [84] (signed word) show_letter::to_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#0 show_letter::to_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#0 show_letter::to_y#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [85] (signed word) show_letter::to_x#1 ← (signed word) show_letter::to_x#0 - (signed byte) $32 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#0 show_letter::to_x#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#0 show_letter::to_x#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [86] (signed word) show_letter::to_y#1 ← (signed word) show_letter::to_y#0 - (signed word) $96 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#1 show_letter::to_y#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#1 show_letter::to_y#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [87] (signed word) rotate::vector_x#0 ← (signed word) show_letter::to_x#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#1 rotate::vector_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#1 rotate::vector_x#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [88] (signed word) rotate::vector_y#0 ← (signed word) show_letter::to_y#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#0 rotate::vector_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#0 rotate::vector_y#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [91] (signed word) rotate::return_x#0 ← (signed word) rotate::return_x#2 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#0 rotate::return_y#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#0 rotate::return_y#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [92] (signed word) rotate::return_y#0 ← (signed word) rotate::return_y#2 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#0 rotate::return_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#0 rotate::return_y#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [93] (signed word) show_letter::to_x#2 ← (signed word) rotate::return_x#0 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_y#0 show_letter::to_x#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_y#0 show_letter::to_x#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [94] (signed word) show_letter::to_y#2 ← (signed word) rotate::return_y#0 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#2 show_letter::to_y#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#2 show_letter::to_y#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [95] (signed word) show_letter::current_x#10 ← (signed word) show_letter::to_x#2 + (signed byte) $64 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#2 show_letter::current_x#10 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#2 show_letter::current_x#10 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [96] (signed word) show_letter::current_y#10 ← (signed word) show_letter::to_y#2 + (signed byte) $64 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [97] (signed word) show_letter::via_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA + (byte~) show_letter::$17) [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [98] (signed word) show_letter::via_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#0 show_letter::via_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#0 show_letter::via_y#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [99] (signed word) show_letter::via_x#1 ← (signed word) show_letter::via_x#0 - (signed byte) $32 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#0 show_letter::via_x#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#0 show_letter::via_x#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [100] (signed word) show_letter::via_y#1 ← (signed word) show_letter::via_y#0 - (signed word) $96 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#1 show_letter::via_y#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#1 show_letter::via_y#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [101] (signed word) rotate::vector_x#1 ← (signed word) show_letter::via_x#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#1 rotate::vector_x#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#1 rotate::vector_x#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [102] (signed word) rotate::vector_y#1 ← (signed word) show_letter::via_y#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#1 rotate::vector_y#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#1 rotate::vector_y#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [105] (signed word) rotate::return_x#1 ← (signed word) rotate::return_x#2 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_y#2 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_y#2 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [106] (signed word) rotate::return_y#1 ← (signed word) rotate::return_y#2 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#1 rotate::return_y#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#1 rotate::return_y#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [107] (signed word) show_letter::via_x#2 ← (signed word) rotate::return_x#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_y#1 show_letter::via_x#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_y#1 show_letter::via_x#2 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [108] (signed word) show_letter::via_y#2 ← (signed word) rotate::return_y#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#2 show_letter::via_y#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#2 show_letter::via_y#2 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [109] (signed word) show_letter::segment_via_x#0 ← (signed word) show_letter::via_x#2 + (signed byte) $64 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#2 show_letter::segment_via_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#2 show_letter::segment_via_x#0 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [110] (signed word) show_letter::segment_via_y#0 ← (signed word) show_letter::via_y#2 + (signed byte) $64 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [114] (word) bitmap_line::x1#0 ← (word)(signed word) show_letter::current_x#4 [ show_letter::angle#0 show_letter::i#10 show_letter::current_y#4 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_y#4 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  ) always clobbers reg byte a 
Statement [115] (word) bitmap_line::y1#0 ← (word)(signed word) show_letter::current_y#4 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  ) always clobbers reg byte a 
Statement [116] (word) bitmap_line::x2#0 ← (word)(signed word) show_letter::current_x#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  ) always clobbers reg byte a 
Statement [117] (word) bitmap_line::y2#0 ← (word)(signed word) show_letter::current_y#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  ) always clobbers reg byte a 
Statement [122] (signed word) show_letter::current_x#11 ← (signed word) show_letter::current_x#10 [ show_letter::angle#0 show_letter::i#1 show_letter::current_x#11 show_letter::current_y#10 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#1 show_letter::current_x#11 show_letter::current_y#10 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [123] (signed word) show_letter::current_y#11 ← (signed word) show_letter::current_y#10 [ show_letter::angle#0 show_letter::i#1 show_letter::current_x#11 show_letter::current_y#11 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#1 show_letter::current_x#11 show_letter::current_y#11 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [124] (signed word) spline_8segB::p0_x#0 ← (signed word) show_letter::current_x#4 [ show_letter::angle#0 show_letter::i#10 show_letter::current_y#4 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 spline_8segB::p0_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_y#4 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 spline_8segB::p0_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [125] (signed word) spline_8segB::p0_y#0 ← (signed word) show_letter::current_y#4 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 spline_8segB::p0_x#0 spline_8segB::p0_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 spline_8segB::p0_x#0 spline_8segB::p0_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [126] (signed word) spline_8segB::p1_x#0 ← (signed word) show_letter::segment_via_x#0 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_y#0 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_y#0 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [127] (signed word) spline_8segB::p1_y#0 ← (signed word) show_letter::segment_via_y#0 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [128] (signed word) spline_8segB::p2_x#0 ← (signed word) show_letter::current_x#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [129] (signed word) spline_8segB::p2_y#0 ← (signed word) show_letter::current_y#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 spline_8segB::p2_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 spline_8segB::p2_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [134] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( bitmap_clear:5::memset:75 [ memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:5::memset:77 [ memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:32 [ memset::c#4 ]
Statement [135] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( bitmap_clear:5::memset:75 [ memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:5::memset:77 [ memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [136] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( bitmap_clear:5::memset:75 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:5::memset:77 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [138] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:5::memset:75 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:5::memset:77 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [140] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:5::memset:75 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:5::memset:77 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:32 [ memset::c#4 ]
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::angle#2 main::angle#1 ]
Statement [143] (signed word) rotate::cos_a#0 ← (signed word)*((const signed byte*) COS + (byte) rotate::angle#2) [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:35 [ rotate::angle#2 rotate::angle#0 rotate::angle#1 ]
Statement [144] (signed word) mulf16s::a#0 ← (signed word) rotate::cos_a#0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  ) always clobbers reg byte a 
Statement [145] (signed word) mulf16s::b#0 ← (signed word) rotate::vector_x#2 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 mulf16s::b#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 mulf16s::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 mulf16s::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  ) always clobbers reg byte a 
Statement [147] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  ) always clobbers reg byte a 
Statement [148] (signed dword~) rotate::$0 ← (signed dword) mulf16s::return#2 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [149] (signed word~) rotate::$10 ← (signed word)(signed dword~) rotate::$0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$10 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$10 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$10 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [150] (signed word) rotate::xr#0 ← (signed word~) rotate::$10 << (byte) 1 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::xr#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::xr#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::xr#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [151] (signed word) mulf16s::a#1 ← (signed word) rotate::cos_a#0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [152] (signed word) mulf16s::b#1 ← (signed word) rotate::vector_y#2 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 mulf16s::b#1 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 mulf16s::b#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 mulf16s::b#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [154] (signed dword) mulf16s::return#3 ← (signed dword) mulf16s::return#0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#3 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#3 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#3 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [155] (signed dword~) rotate::$2 ← (signed dword) mulf16s::return#3 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [156] (signed word~) rotate::$11 ← (signed word)(signed dword~) rotate::$2 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$11 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [157] (signed word) rotate::yr#0 ← (signed word~) rotate::$11 << (byte) 1 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [158] (signed word) rotate::sin_a#0 ← (signed word)*((const signed byte*) SIN + (byte) rotate::angle#2) [ rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [159] (signed word) mulf16s::a#2 ← (signed word) rotate::sin_a#0 [ rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [160] (signed word) mulf16s::b#2 ← (signed word) rotate::vector_y#2 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 mulf16s::b#2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 mulf16s::b#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 mulf16s::b#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [162] (signed dword) mulf16s::return#4 ← (signed dword) mulf16s::return#0 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#4 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [163] (signed dword~) rotate::$4 ← (signed dword) mulf16s::return#4 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$4 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [164] (signed word~) rotate::$12 ← (signed word)(signed dword~) rotate::$4 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$12 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [165] (signed word~) rotate::$5 ← (signed word~) rotate::$12 << (byte) 1 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$5 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [166] (signed word) rotate::xr#1 ← (signed word) rotate::xr#0 - (signed word~) rotate::$5 [ rotate::vector_x#2 rotate::yr#0 rotate::sin_a#0 rotate::xr#1 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::yr#0 rotate::sin_a#0 rotate::xr#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::yr#0 rotate::sin_a#0 rotate::xr#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [167] (signed word) mulf16s::a#3 ← (signed word) rotate::sin_a#0 [ rotate::vector_x#2 rotate::yr#0 rotate::xr#1 mulf16s::a#3 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::yr#0 rotate::xr#1 mulf16s::a#3 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::yr#0 rotate::xr#1 mulf16s::a#3 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [168] (signed word) mulf16s::b#3 ← (signed word) rotate::vector_x#2 [ rotate::yr#0 rotate::xr#1 mulf16s::a#3 mulf16s::b#3 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#3 mulf16s::b#3 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#3 mulf16s::b#3 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [170] (signed dword) mulf16s::return#10 ← (signed dword) mulf16s::return#0 [ rotate::yr#0 rotate::xr#1 mulf16s::return#10 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::return#10 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::return#10 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [171] (signed dword~) rotate::$6 ← (signed dword) mulf16s::return#10 [ rotate::yr#0 rotate::xr#1 rotate::$6 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 rotate::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 rotate::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [172] (signed word~) rotate::$13 ← (signed word)(signed dword~) rotate::$6 [ rotate::yr#0 rotate::xr#1 rotate::$13 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 rotate::$13 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 rotate::$13 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [173] (signed word~) rotate::$7 ← (signed word~) rotate::$13 << (byte) 1 [ rotate::yr#0 rotate::xr#1 rotate::$7 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 rotate::$7 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 rotate::$7 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [174] (signed word) rotate::yr#1 ← (signed word) rotate::yr#0 + (signed word~) rotate::$7 [ rotate::xr#1 rotate::yr#1 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::xr#1 rotate::yr#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::xr#1 rotate::yr#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [177] (signed word) rotate::return_x#2 ← (signed word)(signed byte)(byte~) rotate::$8 [ rotate::return_x#2 rotate::$9 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#2 rotate::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#2 rotate::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:205 [ rotate::$9 ]
Statement [178] (signed word) rotate::return_y#2 ← (signed word)(signed byte)(byte~) rotate::$9 [ rotate::return_x#2 rotate::return_y#2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#2 rotate::return_y#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#2 rotate::return_y#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [181] (word) abs_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::w#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::w#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::w#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:271 [ bitmap_plot_spline_8seg::$4 ]
Statement [183] (word) abs_u16::return#0 ← (word) abs_u16::return#4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [184] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [185] (word) abs_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::w#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::w#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::w#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [187] (word) abs_u16::return#1 ← (word) abs_u16::return#4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [188] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [189] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [190] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [191] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [193] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [194] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [195] (word) sgn_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [197] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [198] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [199] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [200] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [202] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [203] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [205] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [206] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [207] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [208] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [209] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [211] if((word) bitmap_line::y#1!=(word) bitmap_line::y2#11) goto bitmap_line::@6 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [213] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6 [ bitmap_line::y#7 bitmap_plot::x#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y#7 bitmap_plot::x#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y#7 bitmap_plot::x#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [214] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 [ bitmap_plot::x#2 bitmap_plot::y#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#2 bitmap_plot::y#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#2 bitmap_plot::y#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [217] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [219] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [220] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [222] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [223] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [224] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [225] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [226] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [228] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#10) goto bitmap_line::@9 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [229] (word) bitmap_plot::x#0 ← (word) bitmap_line::x#0 [ bitmap_line::y#0 bitmap_plot::x#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y#0 bitmap_plot::x#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y#0 bitmap_plot::x#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [230] (byte) bitmap_plot::y#0 ← (byte)(word) bitmap_line::y#0 [ bitmap_plot::x#0 bitmap_plot::y#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#0 bitmap_plot::y#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#0 bitmap_plot::y#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [232] (signed word~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#0 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 spline_8segB::p2_y#0 spline_8segB::$0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 spline_8segB::p2_y#0 spline_8segB::$0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [233] (signed word~) spline_8segB::$1 ← (signed word) spline_8segB::p2_x#0 - (signed word~) spline_8segB::$0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::$1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::$1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [234] (signed word) spline_8segB::a_x#0 ← (signed word~) spline_8segB::$1 + (signed word) spline_8segB::p0_x#0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::a_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::a_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [235] (signed word~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#0 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::a_x#0 spline_8segB::$3 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::a_x#0 spline_8segB::$3 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [236] (signed word~) spline_8segB::$4 ← (signed word) spline_8segB::p2_y#0 - (signed word~) spline_8segB::$3 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::$4 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::$4 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [237] (signed word) spline_8segB::a_y#0 ← (signed word~) spline_8segB::$4 + (signed word) spline_8segB::p0_y#0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [238] (signed word~) spline_8segB::$6 ← (signed word) spline_8segB::p1_x#0 - (signed word) spline_8segB::p0_x#0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::$6 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::$6 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [239] (signed word) spline_8segB::b_x#0 ← (signed word~) spline_8segB::$6 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [240] (signed word~) spline_8segB::$8 ← (signed word) spline_8segB::p1_y#0 - (signed word) spline_8segB::p0_y#0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 spline_8segB::$8 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 spline_8segB::$8 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [241] (signed word) spline_8segB::b_y#0 ← (signed word~) spline_8segB::$8 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 spline_8segB::b_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 spline_8segB::b_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [242] (signed word~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 << (byte) 3 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_y#0 spline_8segB::$10 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_y#0 spline_8segB::$10 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [243] (signed word) spline_8segB::i_x#0 ← (signed word) spline_8segB::a_x#0 + (signed word~) spline_8segB::$10 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_y#0 spline_8segB::i_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_y#0 spline_8segB::i_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [244] (signed word~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 << (byte) 3 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::$12 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::$12 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [245] (signed word) spline_8segB::i_y#0 ← (signed word) spline_8segB::a_y#0 + (signed word~) spline_8segB::$12 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [246] (signed word) spline_8segB::j_x#0 ← (signed word) spline_8segB::a_x#0 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [247] (signed word) spline_8segB::j_y#0 ← (signed word) spline_8segB::a_y#0 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [248] (signed word) spline_8segB::p_x#0 ← (signed word) spline_8segB::p0_x#0 << (byte) 6 [ spline_8segB::p0_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [249] (signed word) spline_8segB::p_y#0 ← (signed word) spline_8segB::p0_y#0 << (byte) 6 [ spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#0 spline_8segB::p_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#0 spline_8segB::p_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [251] (signed word~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (signed byte) $20 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$22 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$22 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:56 [ spline_8segB::n#2 spline_8segB::n#1 ]
Statement [252] (signed word~) spline_8segB::$23 ← (signed word~) spline_8segB::$22 >> (byte) 6 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [253] (signed word~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (signed byte) $20 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$24 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$24 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [254] (signed word~) spline_8segB::$25 ← (signed word~) spline_8segB::$24 >> (byte) 6 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$25 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$25 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [255] (byte~) spline_8segB::$31 ← (byte) spline_8segB::n#2 << (byte) 2 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$25 spline_8segB::$31 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$25 spline_8segB::$31 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [256] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$23 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$25 spline_8segB::$31 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$25 spline_8segB::$31 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:262 [ spline_8segB::$31 ]
Statement [257] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$25 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [258] (signed word) spline_8segB::p_x#1 ← (signed word) spline_8segB::p_x#2 + (signed word) spline_8segB::i_x#2 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::p_x#1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::p_x#1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [259] (signed word) spline_8segB::p_y#1 ← (signed word) spline_8segB::p_y#2 + (signed word) spline_8segB::i_y#2 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::p_x#1 spline_8segB::p_y#1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::p_x#1 spline_8segB::p_y#1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [260] (signed word) spline_8segB::i_x#1 ← (signed word) spline_8segB::i_x#2 + (signed word) spline_8segB::j_x#0 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::i_y#2 spline_8segB::p_x#1 spline_8segB::p_y#1 spline_8segB::i_x#1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::i_y#2 spline_8segB::p_x#1 spline_8segB::p_y#1 spline_8segB::i_x#1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [261] (signed word) spline_8segB::i_y#1 ← (signed word) spline_8segB::i_y#2 + (signed word) spline_8segB::j_y#0 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::p_x#1 spline_8segB::p_y#1 spline_8segB::i_x#1 spline_8segB::i_y#1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::p_x#1 spline_8segB::p_y#1 spline_8segB::i_x#1 spline_8segB::i_y#1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [264] (signed word~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#1 + (signed byte) $20 [ spline_8segB::p_y#1 spline_8segB::$18 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p_y#1 spline_8segB::$18 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [265] (signed word~) spline_8segB::$19 ← (signed word~) spline_8segB::$18 >> (byte) 6 [ spline_8segB::p_y#1 spline_8segB::$19 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p_y#1 spline_8segB::$19 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [266] (signed word~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#1 + (signed byte) $20 [ spline_8segB::$19 spline_8segB::$20 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::$19 spline_8segB::$20 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [267] (signed word~) spline_8segB::$21 ← (signed word~) spline_8segB::$20 >> (byte) 6 [ spline_8segB::$19 spline_8segB::$21 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::$19 spline_8segB::$21 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [268] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$19 [ spline_8segB::$21 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::$21 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [269] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$21 [ ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [271] (signed word) bitmap_plot_spline_8seg::current_x#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG) [ bitmap_plot_spline_8seg::current_x#0 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::current_x#0 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [272] (signed word) bitmap_plot_spline_8seg::current_y#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y) [ bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_y#0 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_y#0 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [274] (byte~) bitmap_plot_spline_8seg::$4 ← (byte) bitmap_plot_spline_8seg::n#2 << (byte) 2 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [275] (word) bitmap_line::x1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_x#2 [ bitmap_line::x1#1 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#1 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [276] (word) bitmap_line::y1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_y#2 [ bitmap_line::x1#1 bitmap_line::y1#1 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#1 bitmap_line::y1#1 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [277] (word) bitmap_line::x2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) [ bitmap_line::x1#1 bitmap_line::y1#1 bitmap_line::x2#13 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#1 bitmap_line::y1#1 bitmap_line::x2#13 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [278] (word) bitmap_line::y2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) [ bitmap_line::x1#1 bitmap_line::y1#1 bitmap_line::x2#13 bitmap_line::y2#13 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#1 bitmap_line::y1#1 bitmap_line::x2#13 bitmap_line::y2#13 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [280] (signed word) bitmap_plot_spline_8seg::current_x#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#1 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#1 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [281] (signed word) bitmap_plot_spline_8seg::current_y#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#1 bitmap_plot_spline_8seg::current_y#1 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#1 bitmap_plot_spline_8seg::current_y#1 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [286] (word) mulf16u::a#0 ← (word)(signed word) mulf16s::a#4 [ mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement [287] (word) mulf16u::b#0 ← (word)(signed word) mulf16s::b#4 [ mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement [289] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0 [ mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement [290] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [291] if((signed word) mulf16s::a#4>=(signed byte) 0) goto mulf16s::@1 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [292] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [293] (word~) mulf16s::$11 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#4 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [294] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$11 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [296] if((signed word) mulf16s::b#4>=(signed byte) 0) goto mulf16s::@2 [ mulf16s::a#4 mulf16s::m#5 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [297] (word~) mulf16s::$9 ← > (dword) mulf16s::m#5 [ mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [298] (word~) mulf16s::$12 ← (word~) mulf16s::$9 - (word)(signed word) mulf16s::a#4 [ mulf16s::m#5 mulf16s::$12 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [299] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$12 [ mulf16s::m#2 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::m#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::m#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::m#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::m#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::m#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::m#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::m#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::m#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [301] (signed dword) mulf16s::return#0 ← (signed dword)(dword) mulf16s::m#4 [ mulf16s::return#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [307] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 [ abs_u16::return#2 ] ( show_letter:16::bitmap_line:118::abs_u16:182 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::abs_u16:182 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  show_letter:16::bitmap_line:118::abs_u16:186 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::abs_u16:186 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [318] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( show_letter:16::bitmap_line:118::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_line:118::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_line:118::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_line:118::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [319] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 [ bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] ( show_letter:16::bitmap_line:118::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_line:118::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_line:118::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_line:118::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [320] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 [ bitmap_plot::x#4 bitmap_plot::plotter#1 ] ( show_letter:16::bitmap_line:118::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_line:118::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_line:118::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_line:118::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [322] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) [ ] ( show_letter:16::bitmap_line:118::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_line:118::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_line:118::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_line:118::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:83 [ show_letter::angle#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:23 [ show_letter::i#10 show_letter::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:271 [ bitmap_plot_spline_8seg::$4 ]
Statement [324] *((const nomodify word*) mulf16u::memA) ← (word) mulf16u::a#0 [ mulf16u::b#0 ] ( show_letter:16::rotate:90::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement [325] *((const nomodify word*) mulf16u::memB) ← (word) mulf16u::b#0 [ ] ( show_letter:16::rotate:90::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  } always clobbers reg byte a reg byte x 
Removing always clobbered register reg byte x as potential for zp[1]:2 [ main::angle#2 main::angle#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:83 [ show_letter::angle#0 ]
Removing always clobbered register reg byte x as potential for zp[1]:23 [ show_letter::i#10 show_letter::i#1 ]
Removing always clobbered register reg byte x as potential for zp[1]:92 [ show_letter::$17 ]
Removing always clobbered register reg byte x as potential for zp[1]:35 [ rotate::angle#2 rotate::angle#0 rotate::angle#1 ]
Statement [327] (dword) mulf16u::return#0 ← *((const nomodify dword*) mulf16u::memR) [ mulf16u::return#0 ] ( show_letter:16::rotate:90::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [10] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [15] (byte) show_letter::angle#0 ← (byte) main::angle#2 [ main::angle#2 show_letter::angle#0 ] (  [ main::angle#2 show_letter::angle#0 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [18] if(*((const nomodify byte*) RASTER)!=(byte) $fe) goto main::@3 [ main::angle#2 main::w#4 ] (  [ main::angle#2 main::w#4 ] { }  ) always clobbers reg byte a 
Statement [19] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@4 [ main::angle#2 main::w#4 ] (  [ main::angle#2 main::w#4 ] { }  ) always clobbers reg byte a 
Statement [22] (byte) main::angle#1 ← (byte) main::angle#2 + (byte) 9 [ main::angle#1 ] (  [ main::angle#1 ] { }  ) always clobbers reg byte a reg byte x 
Statement [25] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 ] { }  ) always clobbers reg byte a 
Statement [27] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a 
Statement [28] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [29] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) [ ] ( mulf_init:1 [ ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [32] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::x_255#2 mulf_init::sqr2_hi#2 mulf_init::dir#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [34] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] ( mulf_init:1 [ mulf_init::sqr2_lo#2 mulf_init::dir#2 mulf_init::x_255#1 mulf_init::sqr2_hi#1 ] { }  ) always clobbers reg byte a 
Statement [40] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr#4 mulf_init::sqr1_hi#2 mulf_init::x_2#3 mulf_init::c#1 mulf_init::$1 ] { }  ) always clobbers reg byte a 
Statement [46] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [48] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_hi#2 mulf_init::c#1 mulf_init::x_2#2 mulf_init::sqr#3 ] { }  ) always clobbers reg byte y 
Statement [50] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] ( mulf_init:1 [ mulf_init::sqr1_lo#2 mulf_init::c#1 mulf_init::sqr#1 mulf_init::sqr1_hi#1 mulf_init::x_2#2 ] { }  ) always clobbers reg byte a 
Statement [62] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] ( bitmap_init:3 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$7 ] { }  ) always clobbers reg byte a 
Statement [69] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( bitmap_init:3 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] { }  ) always clobbers reg byte a 
Statement [81] (byte~) show_letter::$21 ← (byte) show_letter::i#10 << (byte) 3 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$21 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$21 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [82] (byte~) show_letter::$17 ← (byte~) show_letter::$21 + (byte) show_letter::i#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [83] (signed word) show_letter::to_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) show_letter::$17) [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [84] (signed word) show_letter::to_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#0 show_letter::to_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#0 show_letter::to_y#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [85] (signed word) show_letter::to_x#1 ← (signed word) show_letter::to_x#0 - (signed byte) $32 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#0 show_letter::to_x#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#0 show_letter::to_x#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [86] (signed word) show_letter::to_y#1 ← (signed word) show_letter::to_y#0 - (signed word) $96 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#1 show_letter::to_y#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#1 show_letter::to_y#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [87] (signed word) rotate::vector_x#0 ← (signed word) show_letter::to_x#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#1 rotate::vector_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#1 rotate::vector_x#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [88] (signed word) rotate::vector_y#0 ← (signed word) show_letter::to_y#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#0 rotate::vector_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#0 rotate::vector_y#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [91] (signed word) rotate::return_x#0 ← (signed word) rotate::return_x#2 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#0 rotate::return_y#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#0 rotate::return_y#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [92] (signed word) rotate::return_y#0 ← (signed word) rotate::return_y#2 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#0 rotate::return_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#0 rotate::return_y#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [93] (signed word) show_letter::to_x#2 ← (signed word) rotate::return_x#0 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_y#0 show_letter::to_x#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_y#0 show_letter::to_x#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [94] (signed word) show_letter::to_y#2 ← (signed word) rotate::return_y#0 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#2 show_letter::to_y#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_x#2 show_letter::to_y#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [95] (signed word) show_letter::current_x#10 ← (signed word) show_letter::to_x#2 + (signed byte) $64 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#2 show_letter::current_x#10 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::to_y#2 show_letter::current_x#10 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [96] (signed word) show_letter::current_y#10 ← (signed word) show_letter::to_y#2 + (signed byte) $64 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [97] (signed word) show_letter::via_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA + (byte~) show_letter::$17) [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [98] (signed word) show_letter::via_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#0 show_letter::via_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#0 show_letter::via_y#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [99] (signed word) show_letter::via_x#1 ← (signed word) show_letter::via_x#0 - (signed byte) $32 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#0 show_letter::via_x#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#0 show_letter::via_x#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [100] (signed word) show_letter::via_y#1 ← (signed word) show_letter::via_y#0 - (signed word) $96 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#1 show_letter::via_y#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#1 show_letter::via_y#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [101] (signed word) rotate::vector_x#1 ← (signed word) show_letter::via_x#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#1 rotate::vector_x#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#1 rotate::vector_x#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [102] (signed word) rotate::vector_y#1 ← (signed word) show_letter::via_y#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#1 rotate::vector_y#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#1 rotate::vector_y#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [105] (signed word) rotate::return_x#1 ← (signed word) rotate::return_x#2 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_y#2 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_y#2 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [106] (signed word) rotate::return_y#1 ← (signed word) rotate::return_y#2 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#1 rotate::return_y#1 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#1 rotate::return_y#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [107] (signed word) show_letter::via_x#2 ← (signed word) rotate::return_x#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_y#1 show_letter::via_x#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_y#1 show_letter::via_x#2 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [108] (signed word) show_letter::via_y#2 ← (signed word) rotate::return_y#1 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#2 show_letter::via_y#2 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_x#2 show_letter::via_y#2 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [109] (signed word) show_letter::segment_via_x#0 ← (signed word) show_letter::via_x#2 + (signed byte) $64 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#2 show_letter::segment_via_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::via_y#2 show_letter::segment_via_x#0 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [110] (signed word) show_letter::segment_via_y#0 ← (signed word) show_letter::via_y#2 + (signed byte) $64 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [114] (word) bitmap_line::x1#0 ← (word)(signed word) show_letter::current_x#4 [ show_letter::angle#0 show_letter::i#10 show_letter::current_y#4 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_y#4 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  ) always clobbers reg byte a 
Statement [115] (word) bitmap_line::y1#0 ← (word)(signed word) show_letter::current_y#4 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  ) always clobbers reg byte a 
Statement [116] (word) bitmap_line::x2#0 ← (word)(signed word) show_letter::current_x#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  ) always clobbers reg byte a 
Statement [117] (word) bitmap_line::y2#0 ← (word)(signed word) show_letter::current_y#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#0 bitmap_line::y1#0 bitmap_line::x2#0 bitmap_line::y2#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  ) always clobbers reg byte a 
Statement [120] if((byte) show_letter::i#1!=(byte) $16) goto show_letter::@9 [ show_letter::angle#0 show_letter::i#1 show_letter::current_x#10 show_letter::current_y#10 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#1 show_letter::current_x#10 show_letter::current_y#10 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [122] (signed word) show_letter::current_x#11 ← (signed word) show_letter::current_x#10 [ show_letter::angle#0 show_letter::i#1 show_letter::current_x#11 show_letter::current_y#10 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#1 show_letter::current_x#11 show_letter::current_y#10 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [123] (signed word) show_letter::current_y#11 ← (signed word) show_letter::current_y#10 [ show_letter::angle#0 show_letter::i#1 show_letter::current_x#11 show_letter::current_y#11 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#1 show_letter::current_x#11 show_letter::current_y#11 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [124] (signed word) spline_8segB::p0_x#0 ← (signed word) show_letter::current_x#4 [ show_letter::angle#0 show_letter::i#10 show_letter::current_y#4 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 spline_8segB::p0_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_y#4 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 spline_8segB::p0_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [125] (signed word) spline_8segB::p0_y#0 ← (signed word) show_letter::current_y#4 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 spline_8segB::p0_x#0 spline_8segB::p0_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_x#0 show_letter::segment_via_y#0 spline_8segB::p0_x#0 spline_8segB::p0_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [126] (signed word) spline_8segB::p1_x#0 ← (signed word) show_letter::segment_via_x#0 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_y#0 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 show_letter::segment_via_y#0 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [127] (signed word) spline_8segB::p1_y#0 ← (signed word) show_letter::segment_via_y#0 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [128] (signed word) spline_8segB::p2_x#0 ← (signed word) show_letter::current_x#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [129] (signed word) spline_8segB::p2_y#0 ← (signed word) show_letter::current_y#10 [ show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 spline_8segB::p2_y#0 ] ( show_letter:16 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 spline_8segB::p2_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [134] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( bitmap_clear:5::memset:75 [ memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:5::memset:77 [ memset::num#2 memset::str#3 memset::c#4 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [135] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( bitmap_clear:5::memset:75 [ memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:5::memset:77 [ memset::str#3 memset::c#4 memset::end#0 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [136] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( bitmap_clear:5::memset:75 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:5::memset:77 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [138] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:5::memset:75 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:5::memset:77 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [140] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( bitmap_clear:5::memset:75 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:14::memset:75 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:5::memset:77 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  bitmap_clear:14::memset:77 [ main::angle#2 memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [143] (signed word) rotate::cos_a#0 ← (signed word)*((const signed byte*) COS + (byte) rotate::angle#2) [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  ) always clobbers reg byte a 
Statement [144] (signed word) mulf16s::a#0 ← (signed word) rotate::cos_a#0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  ) always clobbers reg byte a 
Statement [145] (signed word) mulf16s::b#0 ← (signed word) rotate::vector_x#2 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 mulf16s::b#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 mulf16s::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#0 mulf16s::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  ) always clobbers reg byte a 
Statement [147] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  ) always clobbers reg byte a 
Statement [148] (signed dword~) rotate::$0 ← (signed dword) mulf16s::return#2 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [149] (signed word~) rotate::$10 ← (signed word)(signed dword~) rotate::$0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$10 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$10 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::$10 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [150] (signed word) rotate::xr#0 ← (signed word~) rotate::$10 << (byte) 1 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::xr#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::xr#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 rotate::xr#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [151] (signed word) mulf16s::a#1 ← (signed word) rotate::cos_a#0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [152] (signed word) mulf16s::b#1 ← (signed word) rotate::vector_y#2 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 mulf16s::b#1 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 mulf16s::b#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#1 mulf16s::b#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [154] (signed dword) mulf16s::return#3 ← (signed dword) mulf16s::return#0 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#3 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#3 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#3 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  ) always clobbers reg byte a 
Statement [155] (signed dword~) rotate::$2 ← (signed dword) mulf16s::return#3 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [156] (signed word~) rotate::$11 ← (signed word)(signed dword~) rotate::$2 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$11 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [157] (signed word) rotate::yr#0 ← (signed word~) rotate::$11 << (byte) 1 [ rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [158] (signed word) rotate::sin_a#0 ← (signed word)*((const signed byte*) SIN + (byte) rotate::angle#2) [ rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [159] (signed word) mulf16s::a#2 ← (signed word) rotate::sin_a#0 [ rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [160] (signed word) mulf16s::b#2 ← (signed word) rotate::vector_y#2 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 mulf16s::b#2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 mulf16s::b#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#2 mulf16s::b#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [162] (signed dword) mulf16s::return#4 ← (signed dword) mulf16s::return#0 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#4 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  ) always clobbers reg byte a 
Statement [163] (signed dword~) rotate::$4 ← (signed dword) mulf16s::return#4 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$4 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [164] (signed word~) rotate::$12 ← (signed word)(signed dword~) rotate::$4 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$12 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [165] (signed word~) rotate::$5 ← (signed word~) rotate::$12 << (byte) 1 [ rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$5 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 rotate::$5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [166] (signed word) rotate::xr#1 ← (signed word) rotate::xr#0 - (signed word~) rotate::$5 [ rotate::vector_x#2 rotate::yr#0 rotate::sin_a#0 rotate::xr#1 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::yr#0 rotate::sin_a#0 rotate::xr#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::yr#0 rotate::sin_a#0 rotate::xr#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [167] (signed word) mulf16s::a#3 ← (signed word) rotate::sin_a#0 [ rotate::vector_x#2 rotate::yr#0 rotate::xr#1 mulf16s::a#3 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::yr#0 rotate::xr#1 mulf16s::a#3 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::yr#0 rotate::xr#1 mulf16s::a#3 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [168] (signed word) mulf16s::b#3 ← (signed word) rotate::vector_x#2 [ rotate::yr#0 rotate::xr#1 mulf16s::a#3 mulf16s::b#3 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#3 mulf16s::b#3 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#3 mulf16s::b#3 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [170] (signed dword) mulf16s::return#10 ← (signed dword) mulf16s::return#0 [ rotate::yr#0 rotate::xr#1 mulf16s::return#10 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::return#10 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::return#10 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [171] (signed dword~) rotate::$6 ← (signed dword) mulf16s::return#10 [ rotate::yr#0 rotate::xr#1 rotate::$6 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 rotate::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 rotate::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [172] (signed word~) rotate::$13 ← (signed word)(signed dword~) rotate::$6 [ rotate::yr#0 rotate::xr#1 rotate::$13 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 rotate::$13 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 rotate::$13 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [173] (signed word~) rotate::$7 ← (signed word~) rotate::$13 << (byte) 1 [ rotate::yr#0 rotate::xr#1 rotate::$7 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 rotate::$7 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 rotate::$7 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [174] (signed word) rotate::yr#1 ← (signed word) rotate::yr#0 + (signed word~) rotate::$7 [ rotate::xr#1 rotate::yr#1 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::xr#1 rotate::yr#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::xr#1 rotate::yr#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [177] (signed word) rotate::return_x#2 ← (signed word)(signed byte)(byte~) rotate::$8 [ rotate::return_x#2 rotate::$9 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#2 rotate::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#2 rotate::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [178] (signed word) rotate::return_y#2 ← (signed word)(signed byte)(byte~) rotate::$9 [ rotate::return_x#2 rotate::return_y#2 ] ( show_letter:16::rotate:90 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::return_x#2 rotate::return_y#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } }  show_letter:16::rotate:104 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::return_x#2 rotate::return_y#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } }  ) always clobbers reg byte a 
Statement [181] (word) abs_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::w#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::w#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::w#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [183] (word) abs_u16::return#0 ← (word) abs_u16::return#4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [184] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [185] (word) abs_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::w#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::w#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::w#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [187] (word) abs_u16::return#1 ← (word) abs_u16::return#4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [188] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [189] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [190] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [191] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::w#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [193] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 sgn_u16::return#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#0 = sgn_u16::w#2 } { sgn_u16::return#0 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [194] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [195] (word) sgn_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::w#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [197] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 sgn_u16::return#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { sgn_u16::w#1 = sgn_u16::w#2 } { sgn_u16::return#1 = sgn_u16::return#4 } }  ) always clobbers reg byte a 
Statement [198] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [199] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [200] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [202] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [203] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#1 bitmap_plot::y#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  ) always clobbers reg byte a 
Statement [205] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::e#3 bitmap_line::y#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [206] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [207] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#1 bitmap_line::e#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [208] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::e#1 bitmap_line::x#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [209] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::y#1 bitmap_line::x#1 bitmap_line::e#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [211] if((word) bitmap_line::y#1!=(word) bitmap_line::y2#11) goto bitmap_line::@6 [ bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#12 bitmap_line::y#1 bitmap_line::e#6 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [213] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6 [ bitmap_line::y#7 bitmap_plot::x#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y#7 bitmap_plot::x#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y#7 bitmap_plot::x#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [214] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 [ bitmap_plot::x#2 bitmap_plot::y#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#2 bitmap_plot::y#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#2 bitmap_plot::y#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  ) always clobbers reg byte a 
Statement [217] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 [ bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::e1#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [219] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [220] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#3 bitmap_plot::y#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  ) always clobbers reg byte a 
Statement [222] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [223] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [224] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#15 bitmap_line::e1#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [225] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::e1#1 bitmap_line::y#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [226] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#2 bitmap_line::e1#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [228] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#10) goto bitmap_line::@9 [ bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#15 bitmap_line::y#13 bitmap_line::e1#6 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [229] (word) bitmap_plot::x#0 ← (word) bitmap_line::x#0 [ bitmap_line::y#0 bitmap_plot::x#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y#0 bitmap_plot::x#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y#0 bitmap_plot::x#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [230] (byte) bitmap_plot::y#0 ← (byte)(word) bitmap_line::y#0 [ bitmap_plot::x#0 bitmap_plot::y#0 ] ( show_letter:16::bitmap_line:118 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#0 bitmap_plot::y#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#0 bitmap_plot::y#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [232] (signed word~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#0 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 spline_8segB::p2_y#0 spline_8segB::$0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_x#0 spline_8segB::p2_y#0 spline_8segB::$0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [233] (signed word~) spline_8segB::$1 ← (signed word) spline_8segB::p2_x#0 - (signed word~) spline_8segB::$0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::$1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::$1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [234] (signed word) spline_8segB::a_x#0 ← (signed word~) spline_8segB::$1 + (signed word) spline_8segB::p0_x#0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::a_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::a_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [235] (signed word~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#0 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::a_x#0 spline_8segB::$3 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::p2_y#0 spline_8segB::a_x#0 spline_8segB::$3 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [236] (signed word~) spline_8segB::$4 ← (signed word) spline_8segB::p2_y#0 - (signed word~) spline_8segB::$3 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::$4 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::$4 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [237] (signed word) spline_8segB::a_y#0 ← (signed word~) spline_8segB::$4 + (signed word) spline_8segB::p0_y#0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_x#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [238] (signed word~) spline_8segB::$6 ← (signed word) spline_8segB::p1_x#0 - (signed word) spline_8segB::p0_x#0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::$6 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::$6 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [239] (signed word) spline_8segB::b_x#0 ← (signed word~) spline_8segB::$6 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::p1_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [240] (signed word~) spline_8segB::$8 ← (signed word) spline_8segB::p1_y#0 - (signed word) spline_8segB::p0_y#0 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 spline_8segB::$8 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 spline_8segB::$8 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [241] (signed word) spline_8segB::b_y#0 ← (signed word~) spline_8segB::$8 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 spline_8segB::b_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_x#0 spline_8segB::b_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [242] (signed word~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 << (byte) 3 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_y#0 spline_8segB::$10 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_y#0 spline_8segB::$10 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [243] (signed word) spline_8segB::i_x#0 ← (signed word) spline_8segB::a_x#0 + (signed word~) spline_8segB::$10 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_y#0 spline_8segB::i_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::b_y#0 spline_8segB::i_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [244] (signed word~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 << (byte) 3 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::$12 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::$12 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [245] (signed word) spline_8segB::i_y#0 ← (signed word) spline_8segB::a_y#0 + (signed word~) spline_8segB::$12 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_x#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [246] (signed word) spline_8segB::j_x#0 ← (signed word) spline_8segB::a_x#0 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::a_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [247] (signed word) spline_8segB::j_y#0 ← (signed word) spline_8segB::a_y#0 << (byte) 1 [ spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_x#0 spline_8segB::p0_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [248] (signed word) spline_8segB::p_x#0 ← (signed word) spline_8segB::p0_x#0 << (byte) 6 [ spline_8segB::p0_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p0_y#0 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [249] (signed word) spline_8segB::p_y#0 ← (signed word) spline_8segB::p0_y#0 << (byte) 6 [ spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#0 spline_8segB::p_y#0 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::i_x#0 spline_8segB::i_y#0 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#0 spline_8segB::p_y#0 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [251] (signed word~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (signed byte) $20 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$22 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$22 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [252] (signed word~) spline_8segB::$23 ← (signed word~) spline_8segB::$22 >> (byte) 6 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [253] (signed word~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (signed byte) $20 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$24 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$24 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [254] (signed word~) spline_8segB::$25 ← (signed word~) spline_8segB::$24 >> (byte) 6 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$25 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$25 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [255] (byte~) spline_8segB::$31 ← (byte) spline_8segB::n#2 << (byte) 2 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$25 spline_8segB::$31 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$23 spline_8segB::$25 spline_8segB::$31 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [256] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$23 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$25 spline_8segB::$31 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::$25 spline_8segB::$31 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [257] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$25 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_x#2 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [258] (signed word) spline_8segB::p_x#1 ← (signed word) spline_8segB::p_x#2 + (signed word) spline_8segB::i_x#2 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::p_x#1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::p_y#2 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::p_x#1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [259] (signed word) spline_8segB::p_y#1 ← (signed word) spline_8segB::p_y#2 + (signed word) spline_8segB::i_y#2 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::p_x#1 spline_8segB::p_y#1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::i_x#2 spline_8segB::i_y#2 spline_8segB::p_x#1 spline_8segB::p_y#1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [260] (signed word) spline_8segB::i_x#1 ← (signed word) spline_8segB::i_x#2 + (signed word) spline_8segB::j_x#0 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::i_y#2 spline_8segB::p_x#1 spline_8segB::p_y#1 spline_8segB::i_x#1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::i_y#2 spline_8segB::p_x#1 spline_8segB::p_y#1 spline_8segB::i_x#1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [261] (signed word) spline_8segB::i_y#1 ← (signed word) spline_8segB::i_y#2 + (signed word) spline_8segB::j_y#0 [ spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::p_x#1 spline_8segB::p_y#1 spline_8segB::i_x#1 spline_8segB::i_y#1 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::j_x#0 spline_8segB::j_y#0 spline_8segB::n#2 spline_8segB::p_x#1 spline_8segB::p_y#1 spline_8segB::i_x#1 spline_8segB::i_y#1 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [264] (signed word~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#1 + (signed byte) $20 [ spline_8segB::p_y#1 spline_8segB::$18 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p_y#1 spline_8segB::$18 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [265] (signed word~) spline_8segB::$19 ← (signed word~) spline_8segB::$18 >> (byte) 6 [ spline_8segB::p_y#1 spline_8segB::$19 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::p_y#1 spline_8segB::$19 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [266] (signed word~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#1 + (signed byte) $20 [ spline_8segB::$19 spline_8segB::$20 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::$19 spline_8segB::$20 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [267] (signed word~) spline_8segB::$21 ← (signed word~) spline_8segB::$20 >> (byte) 6 [ spline_8segB::$19 spline_8segB::$21 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::$19 spline_8segB::$21 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [268] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$19 [ spline_8segB::$21 ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 spline_8segB::$21 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [269] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$21 [ ] ( show_letter:16::spline_8segB:130 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 ] { { show_letter::angle#0 = main::angle#2 } { spline_8segB::p0_x#0 = show_letter::current_x#4 } { spline_8segB::p0_y#0 = show_letter::current_y#4 } { spline_8segB::p1_x#0 = show_letter::segment_via_x#0 } { spline_8segB::p1_y#0 = show_letter::segment_via_y#0 } { spline_8segB::p2_x#0 = show_letter::current_x#10 } { spline_8segB::p2_y#0 = show_letter::current_y#10 } }  ) always clobbers reg byte a 
Statement [271] (signed word) bitmap_plot_spline_8seg::current_x#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG) [ bitmap_plot_spline_8seg::current_x#0 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::current_x#0 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [272] (signed word) bitmap_plot_spline_8seg::current_y#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y) [ bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_y#0 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_y#0 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [274] (byte~) bitmap_plot_spline_8seg::$4 ← (byte) bitmap_plot_spline_8seg::n#2 << (byte) 2 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [275] (word) bitmap_line::x1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_x#2 [ bitmap_line::x1#1 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#1 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [276] (word) bitmap_line::y1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_y#2 [ bitmap_line::x1#1 bitmap_line::y1#1 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#1 bitmap_line::y1#1 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [277] (word) bitmap_line::x2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) [ bitmap_line::x1#1 bitmap_line::y1#1 bitmap_line::x2#13 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#1 bitmap_line::y1#1 bitmap_line::x2#13 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [278] (word) bitmap_line::y2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) [ bitmap_line::x1#1 bitmap_line::y1#1 bitmap_line::x2#13 bitmap_line::y2#13 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x1#1 bitmap_line::y1#1 bitmap_line::x2#13 bitmap_line::y2#13 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } }  ) always clobbers reg byte a 
Statement [280] (signed word) bitmap_plot_spline_8seg::current_x#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#1 bitmap_plot_spline_8seg::$4 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#1 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [281] (signed word) bitmap_plot_spline_8seg::current_y#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#1 bitmap_plot_spline_8seg::current_y#1 ] ( show_letter:16::bitmap_plot_spline_8seg:132 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::current_x#1 bitmap_plot_spline_8seg::current_y#1 ] { { show_letter::angle#0 = main::angle#2 } }  ) always clobbers reg byte a 
Statement [286] (word) mulf16u::a#0 ← (word)(signed word) mulf16s::a#4 [ mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement [287] (word) mulf16u::b#0 ← (word)(signed word) mulf16s::b#4 [ mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::a#0 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement [289] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0 [ mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::return#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement [290] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [291] if((signed word) mulf16s::a#4>=(signed byte) 0) goto mulf16s::@1 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [292] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$6 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [293] (word~) mulf16s::$11 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#4 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#0 mulf16s::$11 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [294] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$11 [ mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16s::m#1 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [296] if((signed word) mulf16s::b#4>=(signed byte) 0) goto mulf16s::@2 [ mulf16s::a#4 mulf16s::m#5 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::m#5 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [297] (word~) mulf16s::$9 ← > (dword) mulf16s::m#5 [ mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::m#5 mulf16s::$9 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [298] (word~) mulf16s::$12 ← (word~) mulf16s::$9 - (word)(signed word) mulf16s::a#4 [ mulf16s::m#5 mulf16s::$12 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::m#5 mulf16s::$12 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [299] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$12 [ mulf16s::m#2 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::m#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::m#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::m#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::m#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::m#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::m#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::m#2 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::m#2 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [301] (signed dword) mulf16s::return#0 ← (signed dword)(dword) mulf16s::m#4 [ mulf16s::return#0 ] ( show_letter:16::rotate:90::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:104::mulf16s:146 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } }  show_letter:16::rotate:90::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:104::mulf16s:153 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } }  show_letter:16::rotate:90::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:104::mulf16s:161 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } }  show_letter:16::rotate:90::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  show_letter:16::rotate:104::mulf16s:169 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } }  ) always clobbers reg byte a 
Statement [307] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 [ abs_u16::return#2 ] ( show_letter:16::bitmap_line:118::abs_u16:182 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::abs_u16:182 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 abs_u16::return#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#0 = abs_u16::w#2 } { abs_u16::return#0 = abs_u16::return#4 } }  show_letter:16::bitmap_line:118::abs_u16:186 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::abs_u16:186 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x#0 bitmap_line::y#0 bitmap_line::x2#10 bitmap_line::y2#11 bitmap_line::dx#0 abs_u16::return#2 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { abs_u16::w#1 = abs_u16::w#2 } { abs_u16::return#1 = abs_u16::return#4 } }  ) always clobbers reg byte a 
Statement [318] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( show_letter:16::bitmap_line:118::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_line:118::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_line:118::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_line:118::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [319] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 [ bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] ( show_letter:16::bitmap_line:118::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_line:118::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_line:118::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_line:118::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#0 bitmap_plot::$0 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [320] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 [ bitmap_plot::x#4 bitmap_plot::plotter#1 ] ( show_letter:16::bitmap_line:118::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_line:118::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_line:118::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_line:118::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_plot::x#4 bitmap_plot::plotter#1 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a 
Statement [322] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) [ ] ( show_letter:16::bitmap_line:118::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:204 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::y2#11 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#13 bitmap_line::y#4 bitmap_line::e#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#1 = bitmap_plot::y#4 } { bitmap_plot::x#1 = bitmap_plot::x#4 bitmap_line::x#13 } }  show_letter:16::bitmap_line:118::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:215 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#2 = bitmap_plot::y#4 } { bitmap_plot::x#2 = bitmap_plot::x#4 bitmap_line::x#6 } }  show_letter:16::bitmap_line:118::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#0 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:221 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 bitmap_line::x2#10 bitmap_line::dx#0 bitmap_line::dy#0 bitmap_line::sx#0 bitmap_line::sy#0 bitmap_line::x#7 bitmap_line::y#15 bitmap_line::e1#3 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::x#0 = bitmap_line::x1#1 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#3 = bitmap_plot::y#4 } { bitmap_plot::x#3 = bitmap_plot::x#4 bitmap_line::x#7 } }  show_letter:16::bitmap_line:118::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#0 } { bitmap_line::x2#0 = bitmap_line::x2#10 } { bitmap_line::y2#0 = bitmap_line::y2#11 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#0 } }  show_letter:16::bitmap_plot_spline_8seg:132::bitmap_line:279::bitmap_plot:231 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#10 show_letter::current_y#10 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::$4 ] { { show_letter::angle#0 = main::angle#2 } { bitmap_line::y#0 = bitmap_line::y1#1 } { bitmap_line::x2#10 = bitmap_line::x2#13 } { bitmap_line::y2#11 = bitmap_line::y2#13 } { bitmap_plot::y#0 = bitmap_plot::y#4 } { bitmap_plot::x#0 = bitmap_plot::x#4 bitmap_line::x#0 bitmap_line::x1#1 } }  ) always clobbers reg byte a reg byte y 
Statement [324] *((const nomodify word*) mulf16u::memA) ← (word) mulf16u::a#0 [ mulf16u::b#0 ] ( show_letter:16::rotate:90::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::b#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement [325] *((const nomodify word*) mulf16u::memB) ← (word) mulf16u::b#0 [ ] ( show_letter:16::rotate:90::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Statement asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  } always clobbers reg byte a reg byte x 
Statement [327] (dword) mulf16u::return#0 ← *((const nomodify dword*) mulf16u::memR) [ mulf16u::return#0 ] ( show_letter:16::rotate:90::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:146::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::cos_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#0 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#0 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#2 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:153::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::angle#2 rotate::vector_x#2 rotate::vector_y#2 rotate::xr#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#1 = mulf16s::a#4 rotate::cos_a#0 } { mulf16s::b#1 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#3 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#0 = rotate::vector_x#2 show_letter::to_x#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#0 show_letter::to_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:161::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::vector_x#2 rotate::xr#0 rotate::yr#0 rotate::sin_a#0 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_x#1 = rotate::vector_x#2 show_letter::via_x#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#2 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#2 = mulf16s::b#4 rotate::vector_y#2 rotate::vector_y#1 show_letter::via_y#1 } { mulf16s::return#0 = mulf16s::return#4 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:90::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#0 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#0 = rotate::vector_y#2 show_letter::to_y#1 } { rotate::return_x#0 = rotate::return_x#2 } { rotate::return_y#0 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#0 show_letter::to_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  show_letter:16::rotate:104::mulf16s:169::mulf16u:288 [ main::angle#2 show_letter::angle#0 show_letter::i#10 show_letter::current_x#4 show_letter::current_y#4 show_letter::$17 show_letter::current_x#10 show_letter::current_y#10 rotate::yr#0 rotate::xr#1 mulf16s::a#4 mulf16s::b#4 mulf16u::return#0 ] { { rotate::angle#1 = rotate::angle#2 show_letter::angle#0 main::angle#2 } { rotate::vector_y#1 = rotate::vector_y#2 show_letter::via_y#1 } { rotate::return_x#1 = rotate::return_x#2 } { rotate::return_y#1 = rotate::return_y#2 } { mulf16s::a#3 = mulf16s::a#4 rotate::sin_a#0 } { mulf16s::b#3 = mulf16s::b#4 rotate::vector_x#2 rotate::vector_x#1 show_letter::via_x#1 } { mulf16s::return#0 = mulf16s::return#10 } { mulf16u::return#0 = mulf16u::return#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::angle#2 main::angle#1 ] : zp[1]:2 , 
Potential registers zp[1]:3 [ main::w#4 main::w#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[2]:4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] : zp[2]:4 , 
Potential registers zp[1]:6 [ mulf_init::c#2 mulf_init::c#1 ] : zp[1]:6 , reg byte x , 
Potential registers zp[2]:7 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] : zp[1]:9 , reg byte x , 
Potential registers zp[2]:10 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] : zp[2]:10 , 
Potential registers zp[1]:12 [ mulf_init::x_255#2 mulf_init::x_255#1 ] : zp[1]:12 , reg byte x , 
Potential registers zp[2]:13 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] : zp[2]:13 , 
Potential registers zp[1]:15 [ mulf_init::dir#2 mulf_init::dir#4 ] : zp[1]:15 , reg byte x , 
Potential registers zp[2]:16 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp[1]:18 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp[1]:20 , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ show_letter::i#10 show_letter::i#1 ] : zp[1]:23 , 
Potential registers zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 ] : zp[2]:24 , 
Potential registers zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 ] : zp[2]:26 , 
Potential registers zp[2]:28 [ memset::num#2 ] : zp[2]:28 , 
Potential registers zp[2]:30 [ memset::str#3 ] : zp[2]:30 , 
Potential registers zp[1]:32 [ memset::c#4 ] : zp[1]:32 , reg byte x , 
Potential registers zp[2]:33 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:33 , 
Potential registers zp[1]:35 [ rotate::angle#2 rotate::angle#0 rotate::angle#1 ] : zp[1]:35 , reg byte y , 
Potential registers zp[2]:36 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ bitmap_line::y2#11 bitmap_line::y2#13 bitmap_line::y2#0 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] : zp[2]:48 , 
Potential registers zp[2]:50 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] : zp[2]:50 , 
Potential registers zp[2]:52 [ spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 ] : zp[2]:52 , 
Potential registers zp[2]:54 [ spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 ] : zp[2]:54 , 
Potential registers zp[1]:56 [ spline_8segB::n#2 spline_8segB::n#1 ] : zp[1]:56 , reg byte x , reg byte y , 
Potential registers zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 ] : zp[2]:57 , 
Potential registers zp[2]:59 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 ] : zp[2]:59 , 
Potential registers zp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ] : zp[1]:61 , reg byte x , 
Potential registers zp[2]:62 [ bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 ] : zp[2]:62 , 
Potential registers zp[2]:64 [ bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 ] : zp[2]:66 , 
Potential registers zp[2]:68 [ mulf16s::b#4 mulf16s::b#0 mulf16s::b#1 mulf16s::b#2 mulf16s::b#3 ] : zp[2]:68 , 
Potential registers zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ] : zp[4]:70 , 
Potential registers zp[2]:74 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ] : zp[2]:74 , 
Potential registers zp[2]:76 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] : zp[2]:76 , 
Potential registers zp[2]:78 [ sgn_u16::return#4 ] : zp[2]:78 , 
Potential registers zp[1]:80 [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ] : zp[1]:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:81 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] : zp[2]:81 , 
Potential registers zp[1]:83 [ show_letter::angle#0 ] : zp[1]:83 , 
Potential registers zp[1]:84 [ mulf_init::$1 ] : zp[1]:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:85 [ mulf_init::$4 ] : zp[1]:85 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:86 [ mulf_init::$5 ] : zp[1]:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:87 [ bitmap_init::$7 ] : zp[1]:87 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:88 [ bitmap_init::$4 ] : zp[1]:88 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:89 [ bitmap_init::$5 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ bitmap_init::$6 ] : zp[1]:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:91 [ show_letter::$21 ] : zp[1]:91 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:92 [ show_letter::$17 ] : zp[1]:92 , reg byte y , 
Potential registers zp[2]:93 [ show_letter::to_x#0 ] : zp[2]:93 , 
Potential registers zp[2]:95 [ show_letter::to_y#0 ] : zp[2]:95 , 
Potential registers zp[2]:97 [ show_letter::to_x#1 ] : zp[2]:97 , 
Potential registers zp[2]:99 [ show_letter::to_y#1 ] : zp[2]:99 , 
Potential registers zp[2]:101 [ rotate::return_x#0 ] : zp[2]:101 , 
Potential registers zp[2]:103 [ rotate::return_y#0 ] : zp[2]:103 , 
Potential registers zp[2]:105 [ show_letter::to_x#2 ] : zp[2]:105 , 
Potential registers zp[2]:107 [ show_letter::to_y#2 ] : zp[2]:107 , 
Potential registers zp[2]:109 [ show_letter::current_x#10 ] : zp[2]:109 , 
Potential registers zp[2]:111 [ show_letter::current_y#10 ] : zp[2]:111 , 
Potential registers zp[2]:113 [ show_letter::via_x#0 ] : zp[2]:113 , 
Potential registers zp[2]:115 [ show_letter::via_y#0 ] : zp[2]:115 , 
Potential registers zp[2]:117 [ show_letter::via_x#1 ] : zp[2]:117 , 
Potential registers zp[2]:119 [ show_letter::via_y#1 ] : zp[2]:119 , 
Potential registers zp[2]:121 [ rotate::return_x#1 ] : zp[2]:121 , 
Potential registers zp[2]:123 [ rotate::return_y#1 ] : zp[2]:123 , 
Potential registers zp[2]:125 [ show_letter::via_x#2 ] : zp[2]:125 , 
Potential registers zp[2]:127 [ show_letter::via_y#2 ] : zp[2]:127 , 
Potential registers zp[2]:129 [ show_letter::segment_via_x#0 ] : zp[2]:129 , 
Potential registers zp[2]:131 [ show_letter::segment_via_y#0 ] : zp[2]:131 , 
Potential registers zp[1]:133 [ show_letter::segment_type#0 ] : zp[1]:133 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:134 [ spline_8segB::p0_x#0 ] : zp[2]:134 , 
Potential registers zp[2]:136 [ spline_8segB::p0_y#0 ] : zp[2]:136 , 
Potential registers zp[2]:138 [ spline_8segB::p1_x#0 ] : zp[2]:138 , 
Potential registers zp[2]:140 [ spline_8segB::p1_y#0 ] : zp[2]:140 , 
Potential registers zp[2]:142 [ spline_8segB::p2_x#0 ] : zp[2]:142 , 
Potential registers zp[2]:144 [ spline_8segB::p2_y#0 ] : zp[2]:144 , 
Potential registers zp[2]:146 [ memset::end#0 ] : zp[2]:146 , 
Potential registers zp[2]:148 [ rotate::cos_a#0 ] : zp[2]:148 , 
Potential registers zp[4]:150 [ mulf16s::return#2 ] : zp[4]:150 , 
Potential registers zp[4]:154 [ rotate::$0 ] : zp[4]:154 , 
Potential registers zp[2]:158 [ rotate::$10 ] : zp[2]:158 , 
Potential registers zp[2]:160 [ rotate::xr#0 ] : zp[2]:160 , 
Potential registers zp[4]:162 [ mulf16s::return#3 ] : zp[4]:162 , 
Potential registers zp[4]:166 [ rotate::$2 ] : zp[4]:166 , 
Potential registers zp[2]:170 [ rotate::$11 ] : zp[2]:170 , 
Potential registers zp[2]:172 [ rotate::yr#0 ] : zp[2]:172 , 
Potential registers zp[2]:174 [ rotate::sin_a#0 ] : zp[2]:174 , 
Potential registers zp[4]:176 [ mulf16s::return#4 ] : zp[4]:176 , 
Potential registers zp[4]:180 [ rotate::$4 ] : zp[4]:180 , 
Potential registers zp[2]:184 [ rotate::$12 ] : zp[2]:184 , 
Potential registers zp[2]:186 [ rotate::$5 ] : zp[2]:186 , 
Potential registers zp[2]:188 [ rotate::xr#1 ] : zp[2]:188 , 
Potential registers zp[4]:190 [ mulf16s::return#10 ] : zp[4]:190 , 
Potential registers zp[4]:194 [ rotate::$6 ] : zp[4]:194 , 
Potential registers zp[2]:198 [ rotate::$13 ] : zp[2]:198 , 
Potential registers zp[2]:200 [ rotate::$7 ] : zp[2]:200 , 
Potential registers zp[2]:202 [ rotate::yr#1 ] : zp[2]:202 , 
Potential registers zp[1]:204 [ rotate::$8 ] : zp[1]:204 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:205 [ rotate::$9 ] : zp[1]:205 , reg byte x , reg byte y , 
Potential registers zp[2]:206 [ rotate::return_x#2 ] : zp[2]:206 , 
Potential registers zp[2]:208 [ rotate::return_y#2 ] : zp[2]:208 , 
Potential registers zp[2]:210 [ abs_u16::return#0 ] : zp[2]:210 , 
Potential registers zp[2]:212 [ bitmap_line::dx#0 ] : zp[2]:212 , 
Potential registers zp[2]:214 [ abs_u16::return#1 ] : zp[2]:214 , 
Potential registers zp[2]:216 [ bitmap_line::dy#0 ] : zp[2]:216 , 
Potential registers zp[2]:218 [ sgn_u16::return#0 ] : zp[2]:218 , 
Potential registers zp[2]:220 [ bitmap_line::sx#0 ] : zp[2]:220 , 
Potential registers zp[2]:222 [ sgn_u16::return#1 ] : zp[2]:222 , 
Potential registers zp[2]:224 [ bitmap_line::sy#0 ] : zp[2]:224 , 
Potential registers zp[2]:226 [ spline_8segB::$0 ] : zp[2]:226 , 
Potential registers zp[2]:228 [ spline_8segB::$1 ] : zp[2]:228 , 
Potential registers zp[2]:230 [ spline_8segB::a_x#0 ] : zp[2]:230 , 
Potential registers zp[2]:232 [ spline_8segB::$3 ] : zp[2]:232 , 
Potential registers zp[2]:234 [ spline_8segB::$4 ] : zp[2]:234 , 
Potential registers zp[2]:236 [ spline_8segB::a_y#0 ] : zp[2]:236 , 
Potential registers zp[2]:238 [ spline_8segB::$6 ] : zp[2]:238 , 
Potential registers zp[2]:240 [ spline_8segB::b_x#0 ] : zp[2]:240 , 
Potential registers zp[2]:242 [ spline_8segB::$8 ] : zp[2]:242 , 
Potential registers zp[2]:244 [ spline_8segB::b_y#0 ] : zp[2]:244 , 
Potential registers zp[2]:246 [ spline_8segB::$10 ] : zp[2]:246 , 
Potential registers zp[2]:248 [ spline_8segB::$12 ] : zp[2]:248 , 
Potential registers zp[2]:250 [ spline_8segB::j_x#0 ] : zp[2]:250 , 
Potential registers zp[2]:252 [ spline_8segB::j_y#0 ] : zp[2]:252 , 
Potential registers zp[2]:254 [ spline_8segB::$22 ] : zp[2]:254 , 
Potential registers zp[2]:256 [ spline_8segB::$23 ] : zp[2]:256 , 
Potential registers zp[2]:258 [ spline_8segB::$24 ] : zp[2]:258 , 
Potential registers zp[2]:260 [ spline_8segB::$25 ] : zp[2]:260 , 
Potential registers zp[1]:262 [ spline_8segB::$31 ] : zp[1]:262 , reg byte x , reg byte y , 
Potential registers zp[2]:263 [ spline_8segB::$18 ] : zp[2]:263 , 
Potential registers zp[2]:265 [ spline_8segB::$19 ] : zp[2]:265 , 
Potential registers zp[2]:267 [ spline_8segB::$20 ] : zp[2]:267 , 
Potential registers zp[2]:269 [ spline_8segB::$21 ] : zp[2]:269 , 
Potential registers zp[1]:271 [ bitmap_plot_spline_8seg::$4 ] : zp[1]:271 , reg byte x , 
Potential registers zp[2]:272 [ mulf16u::a#0 ] : zp[2]:272 , 
Potential registers zp[2]:274 [ mulf16u::b#0 ] : zp[2]:274 , 
Potential registers zp[4]:276 [ mulf16u::return#2 ] : zp[4]:276 , 
Potential registers zp[2]:280 [ mulf16s::$6 ] : zp[2]:280 , 
Potential registers zp[2]:282 [ mulf16s::$11 ] : zp[2]:282 , 
Potential registers zp[2]:284 [ mulf16s::$9 ] : zp[2]:284 , 
Potential registers zp[2]:286 [ mulf16s::$12 ] : zp[2]:286 , 
Potential registers zp[4]:288 [ mulf16s::return#0 ] : zp[4]:288 , 
Potential registers zp[1]:292 [ abs_u16::$0 ] : zp[1]:292 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:293 [ abs_u16::$1 ] : zp[1]:293 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:294 [ sgn_u16::$0 ] : zp[1]:294 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:295 [ sgn_u16::$1 ] : zp[1]:295 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:296 [ bitmap_plot::plotter#0 ] : zp[2]:296 , 
Potential registers zp[2]:298 [ bitmap_plot::$0 ] : zp[2]:298 , 
Potential registers zp[2]:300 [ bitmap_plot::plotter#1 ] : zp[2]:300 , 
Potential registers zp[1]:302 [ bitmap_plot::$1 ] : zp[1]:302 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:303 [ mulf16u::return#0 ] : zp[4]:303 , 

REGISTER UPLIFT SCOPES
Uplift Scope [bitmap_plot] 26,006,000,000,014: zp[1]:80 [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ] 20,000,000,000,002: zp[2]:298 [ bitmap_plot::$0 ] 20,000,000,000,002: zp[1]:302 [ bitmap_plot::$1 ] 15,000,000,000,001.5: zp[2]:300 [ bitmap_plot::plotter#1 ] 7,502,500,000,005.5: zp[2]:81 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] 5,000,000,000,000.5: zp[2]:296 [ bitmap_plot::plotter#0 ] 
Uplift Scope [bitmap_line] 6,894,531,823,645.97: zp[2]:46 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ] 5,500,637,791,788.03: zp[2]:48 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] 5,235,533,333,340.77: zp[2]:44 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] 5,235,533,333,340.77: zp[2]:50 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] 83,444,444,444.64: zp[2]:216 [ bitmap_line::dy#0 ] 76,961,538,461.65: zp[2]:224 [ bitmap_line::sy#0 ] 75,100,000,000.18: zp[2]:212 [ bitmap_line::dx#0 ] 66,700,000,000.1: zp[2]:220 [ bitmap_line::sx#0 ] 31,515,645,316.66: zp[2]:42 [ bitmap_line::y2#11 bitmap_line::y2#13 bitmap_line::y2#0 ] 31,415,635,314.66: zp[2]:40 [ bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 ] 
Uplift Scope [abs_u16] 37,500,000,008.25: zp[2]:74 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ] 20,000,000,002: zp[1]:292 [ abs_u16::$0 ] 20,000,000,002: zp[1]:293 [ abs_u16::$1 ] 2,000,000,002: zp[2]:210 [ abs_u16::return#0 ] 2,000,000,002: zp[2]:214 [ abs_u16::return#1 ] 
Uplift Scope [sgn_u16] 20,000,000,002: zp[1]:294 [ sgn_u16::$0 ] 20,000,000,002: zp[1]:295 [ sgn_u16::$1 ] 16,000,000,007: zp[2]:76 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] 2,000,000,002: zp[2]:218 [ sgn_u16::return#0 ] 2,000,000,002: zp[2]:222 [ sgn_u16::return#1 ] 500,000,000.5: zp[2]:78 [ sgn_u16::return#4 ] 
Uplift Scope [spline_8segB] 200,000,002: zp[2]:254 [ spline_8segB::$22 ] 200,000,002: zp[2]:258 [ spline_8segB::$24 ] 175,000,001.75: zp[1]:56 [ spline_8segB::n#2 spline_8segB::n#1 ] 150,000,001.5: zp[1]:262 [ spline_8segB::$31 ] 93,988,486.28: zp[2]:59 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 ] 80,038,572.61: zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 ] 70,962,502: zp[2]:52 [ spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 ] 66,666,667.33: zp[2]:260 [ spline_8segB::$25 ] 62,130,161.6: zp[2]:54 [ spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 ] 50,000,000.5: zp[2]:256 [ spline_8segB::$23 ] 5,888,235.41: zp[2]:252 [ spline_8segB::j_y#0 ] 5,561,111.22: zp[2]:250 [ spline_8segB::j_x#0 ] 200,002: zp[2]:226 [ spline_8segB::$0 ] 200,002: zp[2]:228 [ spline_8segB::$1 ] 200,002: zp[2]:232 [ spline_8segB::$3 ] 200,002: zp[2]:234 [ spline_8segB::$4 ] 200,002: zp[2]:238 [ spline_8segB::$6 ] 200,002: zp[2]:242 [ spline_8segB::$8 ] 200,002: zp[2]:246 [ spline_8segB::$10 ] 200,002: zp[2]:248 [ spline_8segB::$12 ] 200,002: zp[2]:263 [ spline_8segB::$18 ] 200,002: zp[2]:267 [ spline_8segB::$20 ] 100,001: zp[2]:269 [ spline_8segB::$21 ] 66,667.33: zp[2]:240 [ spline_8segB::b_x#0 ] 66,667.33: zp[2]:244 [ spline_8segB::b_y#0 ] 66,667.33: zp[2]:265 [ spline_8segB::$19 ] 36,667.33: zp[2]:142 [ spline_8segB::p2_x#0 ] 30,000.3: zp[2]:236 [ spline_8segB::a_y#0 ] 25,000.25: zp[2]:230 [ spline_8segB::a_x#0 ] 22,000.4: zp[2]:144 [ spline_8segB::p2_y#0 ] 21,000.3: zp[2]:138 [ spline_8segB::p1_x#0 ] 19,091.18: zp[2]:140 [ spline_8segB::p1_y#0 ] 14,091.09: zp[2]:134 [ spline_8segB::p0_x#0 ] 14,091.09: zp[2]:136 [ spline_8segB::p0_y#0 ] 
Uplift Scope [bitmap_plot_spline_8seg] 183,333,335.17: zp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ] 100,233,336.67: zp[2]:64 [ bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 ] 100,150,002.5: zp[2]:62 [ bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 ] 42,857,143.29: zp[1]:271 [ bitmap_plot_spline_8seg::$4 ] 
Uplift Scope [mulf16s] 8,250,008.25: zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ] 2,000,002: zp[2]:280 [ mulf16s::$6 ] 2,000,002: zp[2]:282 [ mulf16s::$11 ] 2,000,002: zp[2]:284 [ mulf16s::$9 ] 2,000,002: zp[2]:286 [ mulf16s::$12 ] 927,281.18: zp[2]:68 [ mulf16s::b#4 mulf16s::b#0 mulf16s::b#1 mulf16s::b#2 mulf16s::b#3 ] 507,696.69: zp[2]:66 [ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 ] 233,334.17: zp[4]:288 [ mulf16s::return#0 ] 200,002: zp[4]:150 [ mulf16s::return#2 ] 200,002: zp[4]:162 [ mulf16s::return#3 ] 200,002: zp[4]:176 [ mulf16s::return#4 ] 200,002: zp[4]:190 [ mulf16s::return#10 ] 
Uplift Scope [mulf16u] 5,500,001: zp[2]:272 [ mulf16u::a#0 ] 5,500,001: zp[2]:274 [ mulf16u::b#0 ] 3,666,667.33: zp[4]:303 [ mulf16u::return#0 ] 2,000,002: zp[4]:276 [ mulf16u::return#2 ] 
Uplift Scope [rotate] 200,002: zp[2]:158 [ rotate::$10 ] 200,002: zp[2]:170 [ rotate::$11 ] 200,002: zp[2]:184 [ rotate::$12 ] 200,002: zp[2]:186 [ rotate::$5 ] 200,002: zp[2]:198 [ rotate::$13 ] 200,002: zp[2]:200 [ rotate::$7 ] 100,001: zp[4]:154 [ rotate::$0 ] 100,001: zp[4]:166 [ rotate::$2 ] 100,001: zp[4]:180 [ rotate::$4 ] 100,001: zp[4]:194 [ rotate::$6 ] 100,001: zp[2]:202 [ rotate::yr#1 ] 50,000.5: zp[1]:204 [ rotate::$8 ] 50,000.5: zp[1]:205 [ rotate::$9 ] 41,254.12: zp[1]:35 [ rotate::angle#2 rotate::angle#0 rotate::angle#1 ] 37,500.38: zp[2]:148 [ rotate::cos_a#0 ] 33,333.67: zp[2]:174 [ rotate::sin_a#0 ] 32,224.44: zp[2]:38 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 ] 24,000.6: zp[2]:206 [ rotate::return_x#2 ] 22,222.44: zp[2]:188 [ rotate::xr#1 ] 21,796.36: zp[2]:36 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 ] 20,000.5: zp[2]:208 [ rotate::return_y#2 ] 12,500.12: zp[2]:160 [ rotate::xr#0 ] 11,764.82: zp[2]:172 [ rotate::yr#0 ] 10,001: zp[2]:101 [ rotate::return_x#0 ] 10,001: zp[2]:103 [ rotate::return_y#0 ] 10,001: zp[2]:121 [ rotate::return_x#1 ] 10,001: zp[2]:123 [ rotate::return_y#1 ] 
Uplift Scope [memset] 335,672.33: zp[2]:33 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,833.67: zp[2]:146 [ memset::end#0 ] 12,500.12: zp[1]:32 [ memset::c#4 ] 1,001: zp[2]:28 [ memset::num#2 ] 0: zp[2]:30 [ memset::str#3 ] 
Uplift Scope [show_letter] 20,557.61: zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 ] 20,002: zp[1]:91 [ show_letter::$21 ] 15,001.5: zp[1]:133 [ show_letter::segment_type#0 ] 10,589.29: zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 ] 10,001: zp[2]:93 [ show_letter::to_x#0 ] 10,001: zp[2]:95 [ show_letter::to_y#0 ] 10,001: zp[2]:97 [ show_letter::to_x#1 ] 10,001: zp[2]:99 [ show_letter::to_y#1 ] 10,001: zp[2]:105 [ show_letter::to_x#2 ] 10,001: zp[2]:107 [ show_letter::to_y#2 ] 10,001: zp[2]:113 [ show_letter::via_x#0 ] 10,001: zp[2]:115 [ show_letter::via_y#0 ] 10,001: zp[2]:117 [ show_letter::via_x#1 ] 10,001: zp[2]:119 [ show_letter::via_y#1 ] 10,001: zp[2]:125 [ show_letter::via_x#2 ] 10,001: zp[2]:127 [ show_letter::via_y#2 ] 8,334.17: zp[1]:23 [ show_letter::i#10 show_letter::i#1 ] 2,857.43: zp[2]:129 [ show_letter::segment_via_x#0 ] 2,857.43: zp[2]:131 [ show_letter::segment_via_y#0 ] 2,069.17: zp[1]:92 [ show_letter::$17 ] 857.23: zp[2]:109 [ show_letter::current_x#10 ] 857.23: zp[2]:111 [ show_letter::current_y#10 ] 370.61: zp[1]:83 [ show_letter::angle#0 ] 
Uplift Scope [mulf_init] 437.67: zp[2]:16 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] 246.89: zp[2]:10 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] 230.86: zp[2]:4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] 212.1: zp[1]:9 [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] 202: zp[1]:84 [ mulf_init::$1 ] 202: zp[1]:85 [ mulf_init::$4 ] 202: zp[1]:86 [ mulf_init::$5 ] 141.4: zp[1]:12 [ mulf_init::x_255#2 mulf_init::x_255#1 ] 138.88: zp[1]:15 [ mulf_init::dir#2 mulf_init::dir#4 ] 124.31: zp[1]:6 [ mulf_init::c#2 mulf_init::c#1 ] 109.42: zp[2]:13 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] 92.58: zp[2]:7 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Uplift Scope [bitmap_init] 366.12: zp[2]:21 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 319.83: zp[1]:18 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 202: zp[1]:19 [ bitmap_init::x#2 bitmap_init::x#1 ] 202: zp[1]:20 [ bitmap_init::y#2 bitmap_init::y#1 ] 202: zp[1]:88 [ bitmap_init::$4 ] 202: zp[1]:89 [ bitmap_init::$5 ] 202: zp[1]:90 [ bitmap_init::$6 ] 50.5: zp[1]:87 [ bitmap_init::$7 ] 
Uplift Scope [main] 886.17: zp[1]:3 [ main::w#4 main::w#1 ] 25.3: zp[1]:2 [ main::angle#2 main::angle#1 ] 
Uplift Scope [SplineVector16] 
Uplift Scope [SplineVector32] 
Uplift Scope [bitmap_clear] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [RADIX] 
Uplift Scope [Segment] 
Uplift Scope [Segment::SegmentType] 
Uplift Scope [] 

Uplifting [bitmap_plot] best 828650 combination reg byte a [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ] zp[2]:298 [ bitmap_plot::$0 ] reg byte x [ bitmap_plot::$1 ] zp[2]:300 [ bitmap_plot::plotter#1 ] zp[2]:81 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] zp[2]:296 [ bitmap_plot::plotter#0 ] 
Uplifting [bitmap_line] best 828650 combination zp[2]:46 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ] zp[2]:48 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] zp[2]:44 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] zp[2]:50 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] zp[2]:216 [ bitmap_line::dy#0 ] zp[2]:224 [ bitmap_line::sy#0 ] zp[2]:212 [ bitmap_line::dx#0 ] zp[2]:220 [ bitmap_line::sx#0 ] zp[2]:42 [ bitmap_line::y2#11 bitmap_line::y2#13 bitmap_line::y2#0 ] zp[2]:40 [ bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 ] 
Uplifting [abs_u16] best 828638 combination zp[2]:74 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ] reg byte a [ abs_u16::$0 ] reg byte a [ abs_u16::$1 ] zp[2]:210 [ abs_u16::return#0 ] zp[2]:214 [ abs_u16::return#1 ] 
Uplifting [sgn_u16] best 828626 combination reg byte a [ sgn_u16::$0 ] reg byte a [ sgn_u16::$1 ] zp[2]:76 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] zp[2]:218 [ sgn_u16::return#0 ] zp[2]:222 [ sgn_u16::return#1 ] zp[2]:78 [ sgn_u16::return#4 ] 
Uplifting [spline_8segB] best 811626 combination zp[2]:254 [ spline_8segB::$22 ] zp[2]:258 [ spline_8segB::$24 ] reg byte y [ spline_8segB::n#2 spline_8segB::n#1 ] reg byte x [ spline_8segB::$31 ] zp[2]:59 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 ] zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 ] zp[2]:52 [ spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 ] zp[2]:260 [ spline_8segB::$25 ] zp[2]:54 [ spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 ] zp[2]:256 [ spline_8segB::$23 ] zp[2]:252 [ spline_8segB::j_y#0 ] zp[2]:250 [ spline_8segB::j_x#0 ] zp[2]:226 [ spline_8segB::$0 ] zp[2]:228 [ spline_8segB::$1 ] zp[2]:232 [ spline_8segB::$3 ] zp[2]:234 [ spline_8segB::$4 ] zp[2]:238 [ spline_8segB::$6 ] zp[2]:242 [ spline_8segB::$8 ] zp[2]:246 [ spline_8segB::$10 ] zp[2]:248 [ spline_8segB::$12 ] zp[2]:263 [ spline_8segB::$18 ] zp[2]:267 [ spline_8segB::$20 ] zp[2]:269 [ spline_8segB::$21 ] zp[2]:240 [ spline_8segB::b_x#0 ] zp[2]:244 [ spline_8segB::b_y#0 ] zp[2]:265 [ spline_8segB::$19 ] zp[2]:142 [ spline_8segB::p2_x#0 ] zp[2]:236 [ spline_8segB::a_y#0 ] zp[2]:230 [ spline_8segB::a_x#0 ] zp[2]:144 [ spline_8segB::p2_y#0 ] zp[2]:138 [ spline_8segB::p1_x#0 ] zp[2]:140 [ spline_8segB::p1_y#0 ] zp[2]:134 [ spline_8segB::p0_x#0 ] zp[2]:136 [ spline_8segB::p0_y#0 ] 
Uplifting [bitmap_plot_spline_8seg] best 811626 combination zp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ] zp[2]:64 [ bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 ] zp[2]:62 [ bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 ] zp[1]:271 [ bitmap_plot_spline_8seg::$4 ] 
Uplifting [mulf16s] best 811626 combination zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ] zp[2]:280 [ mulf16s::$6 ] zp[2]:282 [ mulf16s::$11 ] zp[2]:284 [ mulf16s::$9 ] zp[2]:286 [ mulf16s::$12 ] zp[2]:68 [ mulf16s::b#4 mulf16s::b#0 mulf16s::b#1 mulf16s::b#2 mulf16s::b#3 ] zp[2]:66 [ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 ] zp[4]:288 [ mulf16s::return#0 ] zp[4]:150 [ mulf16s::return#2 ] zp[4]:162 [ mulf16s::return#3 ] zp[4]:176 [ mulf16s::return#4 ] zp[4]:190 [ mulf16s::return#10 ] 
Uplifting [mulf16u] best 811626 combination zp[2]:272 [ mulf16u::a#0 ] zp[2]:274 [ mulf16u::b#0 ] zp[4]:303 [ mulf16u::return#0 ] zp[4]:276 [ mulf16u::return#2 ] 
Uplifting [rotate] best 811010 combination zp[2]:158 [ rotate::$10 ] zp[2]:170 [ rotate::$11 ] zp[2]:184 [ rotate::$12 ] zp[2]:186 [ rotate::$5 ] zp[2]:198 [ rotate::$13 ] zp[2]:200 [ rotate::$7 ] zp[4]:154 [ rotate::$0 ] zp[4]:166 [ rotate::$2 ] zp[4]:180 [ rotate::$4 ] zp[4]:194 [ rotate::$6 ] zp[2]:202 [ rotate::yr#1 ] reg byte a [ rotate::$8 ] reg byte x [ rotate::$9 ] reg byte y [ rotate::angle#2 rotate::angle#0 rotate::angle#1 ] zp[2]:148 [ rotate::cos_a#0 ] zp[2]:174 [ rotate::sin_a#0 ] zp[2]:38 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 ] zp[2]:206 [ rotate::return_x#2 ] zp[2]:188 [ rotate::xr#1 ] zp[2]:36 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 ] zp[2]:208 [ rotate::return_y#2 ] zp[2]:160 [ rotate::xr#0 ] zp[2]:172 [ rotate::yr#0 ] zp[2]:101 [ rotate::return_x#0 ] zp[2]:103 [ rotate::return_y#0 ] zp[2]:121 [ rotate::return_x#1 ] zp[2]:123 [ rotate::return_y#1 ] 
Uplifting [memset] best 810904 combination zp[2]:33 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:146 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:28 [ memset::num#2 ] zp[2]:30 [ memset::str#3 ] 
Uplifting [show_letter] best 809404 combination zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 ] reg byte a [ show_letter::$21 ] reg byte a [ show_letter::segment_type#0 ] zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 ] zp[2]:93 [ show_letter::to_x#0 ] zp[2]:95 [ show_letter::to_y#0 ] zp[2]:97 [ show_letter::to_x#1 ] zp[2]:99 [ show_letter::to_y#1 ] zp[2]:105 [ show_letter::to_x#2 ] zp[2]:107 [ show_letter::to_y#2 ] zp[2]:113 [ show_letter::via_x#0 ] zp[2]:115 [ show_letter::via_y#0 ] zp[2]:117 [ show_letter::via_x#1 ] zp[2]:119 [ show_letter::via_y#1 ] zp[2]:125 [ show_letter::via_x#2 ] zp[2]:127 [ show_letter::via_y#2 ] zp[1]:23 [ show_letter::i#10 show_letter::i#1 ] zp[2]:129 [ show_letter::segment_via_x#0 ] zp[2]:131 [ show_letter::segment_via_y#0 ] zp[1]:92 [ show_letter::$17 ] zp[2]:109 [ show_letter::current_x#10 ] zp[2]:111 [ show_letter::current_y#10 ] zp[1]:83 [ show_letter::angle#0 ] 
Uplifting [mulf_init] best 809154 combination zp[2]:16 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] zp[2]:10 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] zp[2]:4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ] reg byte a [ mulf_init::$1 ] reg byte a [ mulf_init::$4 ] reg byte a [ mulf_init::$5 ] zp[1]:12 [ mulf_init::x_255#2 mulf_init::x_255#1 ] zp[1]:15 [ mulf_init::dir#2 mulf_init::dir#4 ] zp[1]:6 [ mulf_init::c#2 mulf_init::c#1 ] zp[2]:13 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] zp[2]:7 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [bitmap_init] best 808644 combination zp[2]:21 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] reg byte a [ bitmap_init::$4 ] zp[1]:89 [ bitmap_init::$5 ] zp[1]:90 [ bitmap_init::$6 ] zp[1]:87 [ bitmap_init::$7 ] 
Limited combination testing to 100 combinations of 15360 possible.
Uplifting [main] best 805044 combination reg byte x [ main::w#4 main::w#1 ] zp[1]:2 [ main::angle#2 main::angle#1 ] 
Uplifting [SplineVector16] best 805044 combination 
Uplifting [SplineVector32] best 805044 combination 
Uplifting [bitmap_clear] best 805044 combination 
Uplifting [MOS6526_CIA] best 805044 combination 
Uplifting [MOS6569_VICII] best 805044 combination 
Uplifting [MOS6581_SID] best 805044 combination 
Uplifting [RADIX] best 805044 combination 
Uplifting [Segment] best 805044 combination 
Uplifting [Segment::SegmentType] best 805044 combination 
Uplifting [] best 805044 combination 
Attempting to uplift remaining variables inzp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ]
Uplifting [bitmap_plot_spline_8seg] best 805044 combination zp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ] 
Attempting to uplift remaining variables inzp[1]:271 [ bitmap_plot_spline_8seg::$4 ]
Uplifting [bitmap_plot_spline_8seg] best 805044 combination zp[1]:271 [ bitmap_plot_spline_8seg::$4 ] 
Attempting to uplift remaining variables inzp[1]:23 [ show_letter::i#10 show_letter::i#1 ]
Uplifting [show_letter] best 805044 combination zp[1]:23 [ show_letter::i#10 show_letter::i#1 ] 
Attempting to uplift remaining variables inzp[1]:92 [ show_letter::$17 ]
Uplifting [show_letter] best 805044 combination zp[1]:92 [ show_letter::$17 ] 
Attempting to uplift remaining variables inzp[1]:83 [ show_letter::angle#0 ]
Uplifting [show_letter] best 805044 combination zp[1]:83 [ show_letter::angle#0 ] 
Attempting to uplift remaining variables inzp[1]:89 [ bitmap_init::$5 ]
Uplifting [bitmap_init] best 804984 combination reg byte a [ bitmap_init::$5 ] 
Attempting to uplift remaining variables inzp[1]:90 [ bitmap_init::$6 ]
Uplifting [bitmap_init] best 804924 combination reg byte a [ bitmap_init::$6 ] 
Attempting to uplift remaining variables inzp[1]:12 [ mulf_init::x_255#2 mulf_init::x_255#1 ]
Uplifting [mulf_init] best 804784 combination reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ] 
Attempting to uplift remaining variables inzp[1]:15 [ mulf_init::dir#2 mulf_init::dir#4 ]
Uplifting [mulf_init] best 804784 combination zp[1]:15 [ mulf_init::dir#2 mulf_init::dir#4 ] 
Attempting to uplift remaining variables inzp[1]:6 [ mulf_init::c#2 mulf_init::c#1 ]
Uplifting [mulf_init] best 804784 combination zp[1]:6 [ mulf_init::c#2 mulf_init::c#1 ] 
Attempting to uplift remaining variables inzp[1]:87 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 804784 combination zp[1]:87 [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::angle#2 main::angle#1 ]
Uplifting [main] best 804784 combination zp[1]:2 [ main::angle#2 main::angle#1 ] 
Coalescing zero page register [ zp[2]:46 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 ] ] with [ zp[2]:81 [ bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] ] - score: 4
Coalescing zero page register [ zp[2]:66 [ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 ] ] with [ zp[2]:148 [ rotate::cos_a#0 ] ] - score: 2
Coalescing zero page register [ zp[2]:66 [ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 rotate::cos_a#0 ] ] with [ zp[2]:174 [ rotate::sin_a#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:2 [ main::angle#2 main::angle#1 ] ] with [ zp[1]:83 [ show_letter::angle#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 ] ] with [ zp[2]:46 [ bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 ] ] with [ zp[2]:134 [ spline_8segB::p0_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 ] ] with [ zp[2]:48 [ bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 ] ] with [ zp[2]:136 [ spline_8segB::p0_y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ memset::num#2 ] ] with [ zp[2]:146 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ memset::str#3 ] ] with [ zp[2]:33 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:36 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 ] ] with [ zp[2]:97 [ show_letter::to_x#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:36 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 show_letter::to_x#1 ] ] with [ zp[2]:117 [ show_letter::via_x#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 ] ] with [ zp[2]:99 [ show_letter::to_y#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 show_letter::to_y#1 ] ] with [ zp[2]:119 [ show_letter::via_y#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:52 [ spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 ] ] with [ zp[2]:263 [ spline_8segB::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:54 [ spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 ] ] with [ zp[2]:267 [ spline_8segB::$20 ] ] - score: 1
Coalescing zero page register [ zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 ] ] with [ zp[2]:246 [ spline_8segB::$10 ] ] - score: 1
Coalescing zero page register [ zp[2]:59 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 ] ] with [ zp[2]:248 [ spline_8segB::$12 ] ] - score: 1
Coalescing zero page register [ zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 ] ] with [ zp[4]:276 [ mulf16u::return#2 ] ] - score: 1
Coalescing zero page register [ zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 ] ] with [ zp[4]:288 [ mulf16s::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:74 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 ] ] with [ zp[2]:210 [ abs_u16::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:74 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 ] ] with [ zp[2]:214 [ abs_u16::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:78 [ sgn_u16::return#4 ] ] with [ zp[2]:218 [ sgn_u16::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:78 [ sgn_u16::return#4 sgn_u16::return#0 ] ] with [ zp[2]:222 [ sgn_u16::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:101 [ rotate::return_x#0 ] ] with [ zp[2]:105 [ show_letter::to_x#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:101 [ rotate::return_x#0 show_letter::to_x#2 ] ] with [ zp[2]:206 [ rotate::return_x#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:103 [ rotate::return_y#0 ] ] with [ zp[2]:107 [ show_letter::to_y#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:103 [ rotate::return_y#0 show_letter::to_y#2 ] ] with [ zp[2]:208 [ rotate::return_y#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:109 [ show_letter::current_x#10 ] ] with [ zp[2]:142 [ spline_8segB::p2_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:111 [ show_letter::current_y#10 ] ] with [ zp[2]:144 [ spline_8segB::p2_y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:121 [ rotate::return_x#1 ] ] with [ zp[2]:125 [ show_letter::via_x#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:123 [ rotate::return_y#1 ] ] with [ zp[2]:127 [ show_letter::via_y#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:129 [ show_letter::segment_via_x#0 ] ] with [ zp[2]:138 [ spline_8segB::p1_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:131 [ show_letter::segment_via_y#0 ] ] with [ zp[2]:140 [ spline_8segB::p1_y#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:150 [ mulf16s::return#2 ] ] with [ zp[4]:154 [ rotate::$0 ] ] - score: 1
Coalescing zero page register [ zp[2]:158 [ rotate::$10 ] ] with [ zp[2]:160 [ rotate::xr#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:162 [ mulf16s::return#3 ] ] with [ zp[4]:166 [ rotate::$2 ] ] - score: 1
Coalescing zero page register [ zp[2]:170 [ rotate::$11 ] ] with [ zp[2]:172 [ rotate::yr#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:176 [ mulf16s::return#4 ] ] with [ zp[4]:180 [ rotate::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:184 [ rotate::$12 ] ] with [ zp[2]:186 [ rotate::$5 ] ] - score: 1
Coalescing zero page register [ zp[4]:190 [ mulf16s::return#10 ] ] with [ zp[4]:194 [ rotate::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:198 [ rotate::$13 ] ] with [ zp[2]:200 [ rotate::$7 ] ] - score: 1
Coalescing zero page register [ zp[2]:226 [ spline_8segB::$0 ] ] with [ zp[2]:228 [ spline_8segB::$1 ] ] - score: 1
Coalescing zero page register [ zp[2]:230 [ spline_8segB::a_x#0 ] ] with [ zp[2]:250 [ spline_8segB::j_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:232 [ spline_8segB::$3 ] ] with [ zp[2]:234 [ spline_8segB::$4 ] ] - score: 1
Coalescing zero page register [ zp[2]:236 [ spline_8segB::a_y#0 ] ] with [ zp[2]:252 [ spline_8segB::j_y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:238 [ spline_8segB::$6 ] ] with [ zp[2]:240 [ spline_8segB::b_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:242 [ spline_8segB::$8 ] ] with [ zp[2]:244 [ spline_8segB::b_y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:254 [ spline_8segB::$22 ] ] with [ zp[2]:256 [ spline_8segB::$23 ] ] - score: 1
Coalescing zero page register [ zp[2]:258 [ spline_8segB::$24 ] ] with [ zp[2]:260 [ spline_8segB::$25 ] ] - score: 1
Coalescing zero page register [ zp[2]:280 [ mulf16s::$6 ] ] with [ zp[2]:282 [ mulf16s::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:284 [ mulf16s::$9 ] ] with [ zp[2]:286 [ mulf16s::$12 ] ] - score: 1
Coalescing zero page register [ zp[2]:296 [ bitmap_plot::plotter#0 ] ] with [ zp[2]:300 [ bitmap_plot::plotter#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 spline_8segB::p0_x#0 ] ] with [ zp[2]:52 [ spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 spline_8segB::$18 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 spline_8segB::p0_x#0 spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 spline_8segB::$18 ] ] with [ zp[2]:62 [ bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 spline_8segB::p0_y#0 ] ] with [ zp[2]:54 [ spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 spline_8segB::$20 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 spline_8segB::p0_y#0 spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 spline_8segB::$20 ] ] with [ zp[2]:64 [ bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:36 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 show_letter::to_x#1 show_letter::via_x#1 ] ] with [ zp[2]:93 [ show_letter::to_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:36 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 show_letter::to_x#1 show_letter::via_x#1 show_letter::to_x#0 ] ] with [ zp[2]:113 [ show_letter::via_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 show_letter::to_y#1 show_letter::via_y#1 ] ] with [ zp[2]:95 [ show_letter::to_y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:38 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 show_letter::to_y#1 show_letter::via_y#1 show_letter::to_y#0 ] ] with [ zp[2]:115 [ show_letter::via_y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 spline_8segB::$10 ] ] with [ zp[2]:238 [ spline_8segB::$6 spline_8segB::b_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:59 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 spline_8segB::$12 ] ] with [ zp[2]:242 [ spline_8segB::$8 spline_8segB::b_y#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 ] ] with [ zp[4]:150 [ mulf16s::return#2 rotate::$0 ] ] - score: 1
Coalescing zero page register [ zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 rotate::$0 ] ] with [ zp[4]:162 [ mulf16s::return#3 rotate::$2 ] ] - score: 1
Coalescing zero page register [ zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 rotate::$0 mulf16s::return#3 rotate::$2 ] ] with [ zp[4]:176 [ mulf16s::return#4 rotate::$4 ] ] - score: 1
Coalescing zero page register [ zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 rotate::$0 mulf16s::return#3 rotate::$2 mulf16s::return#4 rotate::$4 ] ] with [ zp[4]:190 [ mulf16s::return#10 rotate::$6 ] ] - score: 1
Coalescing zero page register [ zp[4]:70 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 rotate::$0 mulf16s::return#3 rotate::$2 mulf16s::return#4 rotate::$4 mulf16s::return#10 rotate::$6 ] ] with [ zp[4]:303 [ mulf16u::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:74 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 ] ] with [ zp[2]:216 [ bitmap_line::dy#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:78 [ sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 ] ] with [ zp[2]:224 [ bitmap_line::sy#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:101 [ rotate::return_x#0 show_letter::to_x#2 rotate::return_x#2 ] ] with [ zp[2]:121 [ rotate::return_x#1 show_letter::via_x#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:103 [ rotate::return_y#0 show_letter::to_y#2 rotate::return_y#2 ] ] with [ zp[2]:123 [ rotate::return_y#1 show_letter::via_y#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:158 [ rotate::$10 rotate::xr#0 ] ] with [ zp[2]:188 [ rotate::xr#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:170 [ rotate::$11 rotate::yr#0 ] ] with [ zp[2]:202 [ rotate::yr#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:226 [ spline_8segB::$0 spline_8segB::$1 ] ] with [ zp[2]:230 [ spline_8segB::a_x#0 spline_8segB::j_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:232 [ spline_8segB::$3 spline_8segB::$4 ] ] with [ zp[2]:236 [ spline_8segB::a_y#0 spline_8segB::j_y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 spline_8segB::p0_x#0 spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 spline_8segB::$18 bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 ] ] with [ zp[2]:265 [ spline_8segB::$19 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 spline_8segB::p0_y#0 spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 spline_8segB::$20 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 ] ] with [ zp[2]:269 [ spline_8segB::$21 ] ] - score: 1
Coalescing zero page register [ zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 spline_8segB::$10 spline_8segB::$6 spline_8segB::b_x#0 ] ] with [ zp[2]:129 [ show_letter::segment_via_x#0 spline_8segB::p1_x#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:59 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 spline_8segB::$12 spline_8segB::$8 spline_8segB::b_y#0 ] ] with [ zp[2]:131 [ show_letter::segment_via_y#0 spline_8segB::p1_y#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 spline_8segB::$10 spline_8segB::$6 spline_8segB::b_x#0 show_letter::segment_via_x#0 spline_8segB::p1_x#0 ] ] with [ zp[2]:101 [ rotate::return_x#0 show_letter::to_x#2 rotate::return_x#2 rotate::return_x#1 show_letter::via_x#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:59 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 spline_8segB::$12 spline_8segB::$8 spline_8segB::b_y#0 show_letter::segment_via_y#0 spline_8segB::p1_y#0 ] ] with [ zp[2]:103 [ rotate::return_y#0 show_letter::to_y#2 rotate::return_y#2 rotate::return_y#1 show_letter::via_y#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp[2]:4 [ mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] ]
Coalescing zero page register [ zp[1]:23 [ show_letter::i#10 show_letter::i#1 ] ] with [ zp[1]:6 [ mulf_init::c#2 mulf_init::c#1 ] ]
Coalescing zero page register [ zp[2]:24 [ show_letter::current_x#4 show_letter::current_x#11 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 spline_8segB::p0_x#0 spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 spline_8segB::$18 bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 spline_8segB::$19 ] ] with [ zp[2]:7 [ mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ] ]
Coalescing zero page register [ zp[2]:26 [ show_letter::current_y#4 show_letter::current_y#11 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 spline_8segB::p0_y#0 spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 spline_8segB::$20 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 spline_8segB::$21 ] ] with [ zp[2]:10 [ mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ] ]
Coalescing zero page register [ zp[2]:28 [ memset::num#2 memset::end#0 ] ] with [ zp[2]:13 [ mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] ]
Coalescing zero page register [ zp[2]:30 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:16 [ mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] ]
Coalescing zero page register [ zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 spline_8segB::$10 spline_8segB::$6 spline_8segB::b_x#0 show_letter::segment_via_x#0 spline_8segB::p1_x#0 rotate::return_x#0 show_letter::to_x#2 rotate::return_x#2 rotate::return_x#1 show_letter::via_x#2 ] ] with [ zp[2]:40 [ bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 ] ]
Coalescing zero page register [ zp[2]:59 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 spline_8segB::$12 spline_8segB::$8 spline_8segB::b_y#0 show_letter::segment_via_y#0 spline_8segB::p1_y#0 rotate::return_y#0 show_letter::to_y#2 rotate::return_y#2 rotate::return_y#1 show_letter::via_y#2 ] ] with [ zp[2]:42 [ bitmap_line::y2#11 bitmap_line::y2#13 bitmap_line::y2#0 ] ]
Coalescing zero page register [ zp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 ] ] with [ zp[1]:15 [ mulf_init::dir#2 mulf_init::dir#4 ] ]
Coalescing zero page register [ zp[2]:66 [ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 rotate::cos_a#0 rotate::sin_a#0 ] ] with [ zp[2]:44 [ bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ] ]
Coalescing zero page register [ zp[2]:68 [ mulf16s::b#4 mulf16s::b#0 mulf16s::b#1 mulf16s::b#2 mulf16s::b#3 ] ] with [ zp[2]:50 [ bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ] ]
Coalescing zero page register [ zp[1]:92 [ show_letter::$17 ] ] with [ zp[1]:87 [ bitmap_init::$7 ] ]
Coalescing zero page register [ zp[2]:158 [ rotate::$10 rotate::xr#0 rotate::xr#1 ] ] with [ zp[2]:74 [ abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 ] ]
Coalescing zero page register [ zp[2]:170 [ rotate::$11 rotate::yr#0 rotate::yr#1 ] ] with [ zp[2]:76 [ sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] ]
Coalescing zero page register [ zp[2]:184 [ rotate::$12 rotate::$5 ] ] with [ zp[2]:78 [ sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ] ]
Coalescing zero page register [ zp[2]:212 [ bitmap_line::dx#0 ] ] with [ zp[2]:198 [ rotate::$13 rotate::$7 ] ]
Coalescing zero page register [ zp[2]:226 [ spline_8segB::$0 spline_8segB::$1 spline_8segB::a_x#0 spline_8segB::j_x#0 ] ] with [ zp[2]:220 [ bitmap_line::sx#0 ] ]
Coalescing zero page register [ zp[2]:272 [ mulf16u::a#0 ] ] with [ zp[2]:232 [ spline_8segB::$3 spline_8segB::$4 spline_8segB::a_y#0 spline_8segB::j_y#0 ] ]
Coalescing zero page register [ zp[2]:274 [ mulf16u::b#0 ] ] with [ zp[2]:254 [ spline_8segB::$22 spline_8segB::$23 ] ]
Coalescing zero page register [ zp[2]:280 [ mulf16s::$6 mulf16s::$11 ] ] with [ zp[2]:258 [ spline_8segB::$24 spline_8segB::$25 ] ]
Coalescing zero page register [ zp[2]:296 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 ] ] with [ zp[2]:284 [ mulf16s::$9 mulf16s::$12 ] ]
Coalescing zero page register [ zp[2]:36 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 show_letter::to_x#1 show_letter::via_x#1 show_letter::to_x#0 show_letter::via_x#0 ] ] with [ zp[2]:21 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ] ]
Coalescing zero page register [ zp[2]:38 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 show_letter::to_y#1 show_letter::via_y#1 show_letter::to_y#0 show_letter::via_y#0 ] ] with [ zp[2]:28 [ memset::num#2 memset::end#0 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ] ]
Coalescing zero page register [ zp[2]:57 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 spline_8segB::$10 spline_8segB::$6 spline_8segB::b_x#0 show_letter::segment_via_x#0 spline_8segB::p1_x#0 rotate::return_x#0 show_letter::to_x#2 rotate::return_x#2 rotate::return_x#1 show_letter::via_x#2 bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 ] ] with [ zp[2]:30 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ] ]
Coalescing zero page register [ zp[1]:92 [ show_letter::$17 bitmap_init::$7 ] ] with [ zp[1]:61 [ bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 mulf_init::dir#2 mulf_init::dir#4 ] ]
Coalescing zero page register [ zp[2]:296 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 mulf16s::$9 mulf16s::$12 ] ] with [ zp[2]:272 [ mulf16u::a#0 spline_8segB::$3 spline_8segB::$4 spline_8segB::a_y#0 spline_8segB::j_y#0 ] ]
Coalescing zero page register [ zp[2]:298 [ bitmap_plot::$0 ] ] with [ zp[2]:170 [ rotate::$11 rotate::yr#0 rotate::yr#1 sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ] ]
Allocated (was zp[1]:23) zp[1]:3 [ show_letter::i#10 show_letter::i#1 mulf_init::c#2 mulf_init::c#1 ]
Allocated (was zp[2]:24) zp[2]:4 [ show_letter::current_x#4 show_letter::current_x#11 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 spline_8segB::p0_x#0 spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 spline_8segB::$18 bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 spline_8segB::$19 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
Allocated (was zp[2]:26) zp[2]:6 [ show_letter::current_y#4 show_letter::current_y#11 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 spline_8segB::p0_y#0 spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 spline_8segB::$20 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 spline_8segB::$21 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
Allocated (was zp[2]:36) zp[2]:8 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 show_letter::to_x#1 show_letter::via_x#1 show_letter::to_x#0 show_letter::via_x#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
Allocated (was zp[2]:38) zp[2]:10 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 show_letter::to_y#1 show_letter::via_y#1 show_letter::to_y#0 show_letter::via_y#0 memset::num#2 memset::end#0 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
Allocated (was zp[2]:57) zp[2]:12 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 spline_8segB::$10 spline_8segB::$6 spline_8segB::b_x#0 show_letter::segment_via_x#0 spline_8segB::p1_x#0 rotate::return_x#0 show_letter::to_x#2 rotate::return_x#2 rotate::return_x#1 show_letter::via_x#2 bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
Allocated (was zp[2]:59) zp[2]:14 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 spline_8segB::$12 spline_8segB::$8 spline_8segB::b_y#0 show_letter::segment_via_y#0 spline_8segB::p1_y#0 rotate::return_y#0 show_letter::to_y#2 rotate::return_y#2 rotate::return_y#1 show_letter::via_y#2 bitmap_line::y2#11 bitmap_line::y2#13 bitmap_line::y2#0 ]
Allocated (was zp[2]:66) zp[2]:16 [ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 rotate::cos_a#0 rotate::sin_a#0 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
Allocated (was zp[2]:68) zp[2]:18 [ mulf16s::b#4 mulf16s::b#0 mulf16s::b#1 mulf16s::b#2 mulf16s::b#3 bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
Allocated (was zp[4]:70) zp[4]:20 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 rotate::$0 mulf16s::return#3 rotate::$2 mulf16s::return#4 rotate::$4 mulf16s::return#10 rotate::$6 mulf16u::return#0 ]
Allocated (was zp[1]:92) zp[1]:24 [ show_letter::$17 bitmap_init::$7 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 mulf_init::dir#2 mulf_init::dir#4 ]
Allocated (was zp[2]:109) zp[2]:25 [ show_letter::current_x#10 spline_8segB::p2_x#0 ]
Allocated (was zp[2]:111) zp[2]:27 [ show_letter::current_y#10 spline_8segB::p2_y#0 ]
Allocated (was zp[2]:158) zp[2]:29 [ rotate::$10 rotate::xr#0 rotate::xr#1 abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 ]
Allocated (was zp[2]:184) zp[2]:31 [ rotate::$12 rotate::$5 sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ]
Allocated (was zp[2]:212) zp[2]:33 [ bitmap_line::dx#0 rotate::$13 rotate::$7 ]
Allocated (was zp[2]:226) zp[2]:35 [ spline_8segB::$0 spline_8segB::$1 spline_8segB::a_x#0 spline_8segB::j_x#0 bitmap_line::sx#0 ]
Allocated (was zp[1]:271) zp[1]:37 [ bitmap_plot_spline_8seg::$4 ]
Allocated (was zp[2]:274) zp[2]:38 [ mulf16u::b#0 spline_8segB::$22 spline_8segB::$23 ]
Allocated (was zp[2]:280) zp[2]:40 [ mulf16s::$6 mulf16s::$11 spline_8segB::$24 spline_8segB::$25 ]
Allocated (was zp[2]:296) zp[2]:42 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 mulf16s::$9 mulf16s::$12 mulf16u::a#0 spline_8segB::$3 spline_8segB::$4 spline_8segB::a_y#0 spline_8segB::j_y#0 ]
Allocated (was zp[2]:298) zp[2]:44 [ bitmap_plot::$0 rotate::$11 rotate::yr#0 rotate::yr#1 sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Show a few simple splines using the splines library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const WHITE = 1
  .const MOVE_TO = 0
  .const SPLINE_TO = 1
  .const LINE_TO = 2
  .const SIZEOF_STRUCT_SPLINEVECTOR16 = 4
  .const OFFSET_STRUCT_SPLINEVECTOR16_Y = 2
  .const OFFSET_STRUCT_SEGMENT_TO = 1
  .const OFFSET_STRUCT_SEGMENT_VIA = 5
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .label RASTER = $d012
  .label D011 = $d011
  .label D018 = $d018
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  .label BITMAP_SCREEN = $5c00
  .label BITMAP_GRAPHICS = $6000
  .label COS = SIN+$40
  // main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>BITMAP_SCREEN)/$40
    .const toD0181_return = (>(BITMAP_SCREEN&$3fff)*4)|(>BITMAP_GRAPHICS)/4&$f
    .label angle = 2
    // [1] call mulf_init 
    // [23] phi from main to mulf_init [phi:main->mulf_init]
  mulf_init_from_main:
    jsr mulf_init
    // [2] phi from main to main::@8 [phi:main->main::@8]
  __b8_from_main:
    jmp __b8
    // main::@8
  __b8:
    // [3] call bitmap_init 
    // [52] phi from main::@8 to bitmap_init [phi:main::@8->bitmap_init]
  bitmap_init_from___b8:
    jsr bitmap_init
    // [4] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
  __b9_from___b8:
    jmp __b9
    // main::@9
  __b9:
    // [5] call bitmap_clear 
    // [74] phi from main::@9 to bitmap_clear [phi:main::@9->bitmap_clear]
  bitmap_clear_from___b9:
    jsr bitmap_clear
    jmp vicSelectGfxBank1
    // main::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [7] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1___b1
    // main::vicSelectGfxBank1_@1
  vicSelectGfxBank1___b1:
    // [8] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    // [9] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
  toD0181_from_vicSelectGfxBank1___b1:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b7
    // main::@7
  __b7:
    // [10] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [11] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [12] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  __b1_from___b7:
    // [12] phi (byte) main::angle#2 = (byte) 0 [phi:main::@7->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z angle
    jmp __b1
    // main::@1
  __b1:
    // [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [14] call bitmap_clear 
    // [74] phi from main::@2 to bitmap_clear [phi:main::@2->bitmap_clear]
  bitmap_clear_from___b2:
    jsr bitmap_clear
    jmp __b10
    // main::@10
  __b10:
    // [15] (byte) show_letter::angle#0 ← (byte) main::angle#2
    // [16] call show_letter 
    // [79] phi from main::@10 to show_letter [phi:main::@10->show_letter]
  show_letter_from___b10:
    jsr show_letter
    // [17] phi from main::@10 to main::@3 [phi:main::@10->main::@3]
  __b3_from___b10:
    // [17] phi (byte) main::w#4 = (byte) 0 [phi:main::@10->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [17] phi from main::@3 main::@5 to main::@3 [phi:main::@3/main::@5->main::@3]
  __b3_from___b3:
  __b3_from___b5:
    // [17] phi (byte) main::w#4 = (byte) main::w#4 [phi:main::@3/main::@5->main::@3#0] -- register_copy 
    jmp __b3
    // main::@3
  __b3:
    // [18] if(*((const nomodify byte*) RASTER)!=(byte) $fe) goto main::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp RASTER
    bne __b3_from___b3
    jmp __b4
    // main::@4
  __b4:
    // [19] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b4
    jmp __b5
    // main::@5
  __b5:
    // [20] (byte) main::w#1 ← ++ (byte) main::w#4 -- vbuxx=_inc_vbuxx 
    inx
    // [21] if((byte) main::w#1!=(byte) $3d) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$3d
    bne __b3_from___b5
    jmp __b6
    // main::@6
  __b6:
    // [22] (byte) main::angle#1 ← (byte) main::angle#2 + (byte) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z angle
    axs #-[9]
    stx.z angle
    // [12] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
  __b1_from___b6:
    // [12] phi (byte) main::angle#2 = (byte) main::angle#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b1
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    // x/2
    .label c = 3
    // Counter used for determining x%2==0
    .label sqr1_hi = 4
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $c
    .label sqr1_lo = 8
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = $a
    .label sqr2_lo = 6
    //Start with g(0)=f(255)
    .label dir = $18
    // [24] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
  __b1_from_mulf_init:
    // [24] phi (byte) mulf_init::x_2#3 = (byte) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [24] phi (byte*) mulf_init::sqr1_hi#2 = (const byte*) mulf_sqr1_hi+(byte) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [24] phi (word) mulf_init::sqr#4 = (word) 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    lda #<0
    sta.z sqr
    lda #>0
    sta.z sqr+1
    // [24] phi (byte) mulf_init::c#2 = (byte) 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [24] phi (byte*) mulf_init::sqr1_lo#2 = (const byte*) mulf_sqr1_lo+(byte) 1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    jmp __b1
    // mulf_init::@1
  __b1:
    // [25] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [26] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
  __b5_from___b1:
    // [26] phi (byte) mulf_init::dir#2 = (byte) $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [26] phi (byte*) mulf_init::sqr2_hi#2 = (const byte*) mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [26] phi (byte) mulf_init::x_255#2 = (byte) -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuxx=vbuc1 
    ldx #-1
    // [26] phi (byte*) mulf_init::sqr2_lo#2 = (const byte*) mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    jmp __b5
    // mulf_init::@5
  __b5:
    // [27] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    jmp __b7
    // mulf_init::@7
  __b7:
    // [28] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // [29] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    jmp __breturn
    // mulf_init::@return
  __breturn:
    // [30] return 
    rts
    // mulf_init::@6
  __b6:
    // [31] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // [32] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    ldy #0
    sta (sqr2_hi),y
    // [33] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // [34] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dir
    tax
    // [35] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b9_from___b6
    // [37] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
  __b8_from___b6:
    // [37] phi (byte) mulf_init::dir#4 = (byte) 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    jmp __b8
    // [36] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
  __b9_from___b6:
    jmp __b9
    // mulf_init::@9
  __b9:
    // [37] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
  __b8_from___b9:
    // [37] phi (byte) mulf_init::dir#4 = (byte) mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    jmp __b8
    // mulf_init::@8
  __b8:
    // [38] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [26] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
  __b5_from___b8:
    // [26] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [26] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [26] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [26] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // [39] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [40] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z c
    // [41] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3_from___b2
    jmp __b4
    // mulf_init::@4
  __b4:
    // [42] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuxx=_inc_vbuxx 
    inx
    // [43] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [44] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [44] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [44] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    jmp __b3
    // mulf_init::@3
  __b3:
    // [45] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda.z sqr
    // [46] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // [47] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda.z sqr+1
    // [48] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_hi),y
    // [49] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // [50] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // [51] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [24] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
  __b1_from___b3:
    // [24] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [24] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [24] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [24] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [24] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __7 = $18
    .label yoffs = 8
    // [53] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [53] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [53] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    jmp __b1
    // [53] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [53] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [53] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [54] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // [55] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // [56] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b6_from___b1
    // [58] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [58] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    jmp __b2
    // [57] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [58] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [58] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [59] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [60] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [61] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [61] phi (byte*) bitmap_init::yoffs#2 = (const nomodify byte*) BITMAP_GRAPHICS [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP_GRAPHICS
    sta.z yoffs
    lda #>BITMAP_GRAPHICS
    sta.z yoffs+1
    // [61] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [61] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [61] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [61] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [62] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // [63] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // [64] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // [65] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [66] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // [67] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [68] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [69] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [70] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [70] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [71] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [72] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [73] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE<<4
    // [75] call memset 
    // [133] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
  memset_from_bitmap_clear:
    // [133] phi (byte) memset::c#4 = (const byte) bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [133] phi (void*) memset::str#3 = (void*)(const nomodify byte*) BITMAP_SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_SCREEN
    sta.z memset.str
    lda #>BITMAP_SCREEN
    sta.z memset.str+1
    // [133] phi (word) memset::num#2 = (word) $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [76] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [77] call memset 
    // [133] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
  memset_from___b1:
    // [133] phi (byte) memset::c#4 = (byte) 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [133] phi (void*) memset::str#3 = (void*)(const nomodify byte*) BITMAP_GRAPHICS [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_GRAPHICS
    sta.z memset.str
    lda #>BITMAP_GRAPHICS
    sta.z memset.str+1
    // [133] phi (word) memset::num#2 = (word) $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [78] return 
    rts
}
  // show_letter
// show_letter(byte zp(2) angle)
show_letter: {
    .label __17 = $18
    .label angle = 2
    .label to_x = 8
    .label to_y = $a
    .label to_x_1 = $c
    .label to_y_1 = $e
    .label via_x = 8
    .label via_y = $a
    .label via_x_1 = $c
    .label via_y_1 = $e
    .label segment_via_x = $c
    .label segment_via_y = $e
    .label i = 3
    .label current_x = 4
    .label current_y = 6
    .label current_x_1 = $19
    .label current_y_1 = $1b
    // [80] phi from show_letter to show_letter::@1 [phi:show_letter->show_letter::@1]
  __b1_from_show_letter:
    // [80] phi (signed word) show_letter::current_y#4 = (signed word) 0 [phi:show_letter->show_letter::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z current_y
    lda #>0
    sta.z current_y+1
    // [80] phi (signed word) show_letter::current_x#4 = (signed word) 0 [phi:show_letter->show_letter::@1#1] -- vwsz1=vwsc1 
    lda #<0
    sta.z current_x
    lda #>0
    sta.z current_x+1
    // [80] phi (byte) show_letter::i#10 = (byte) 0 [phi:show_letter->show_letter::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // show_letter::@1
  __b1:
    // [81] (byte~) show_letter::$21 ← (byte) show_letter::i#10 << (byte) 3 -- vbuaa=vbuz1_rol_3 
    lda.z i
    asl
    asl
    asl
    // [82] (byte~) show_letter::$17 ← (byte~) show_letter::$21 + (byte) show_letter::i#10 -- vbuz1=vbuaa_plus_vbuz2 
    clc
    adc.z i
    sta.z __17
    // [83] (signed word) show_letter::to_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO,y
    sta.z to_x
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+1,y
    sta.z to_x+1
    // [84] (signed word) show_letter::to_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z to_y
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z to_y+1
    // [85] (signed word) show_letter::to_x#1 ← (signed word) show_letter::to_x#0 - (signed byte) $32 -- vwsz1=vwsz1_minus_vbsc1 
    lda.z to_x
    sec
    sbc #$32
    sta.z to_x
    lda.z to_x+1
    sbc #>$32
    sta.z to_x+1
    // [86] (signed word) show_letter::to_y#1 ← (signed word) show_letter::to_y#0 - (signed word) $96 -- vwsz1=vwsz1_minus_vwsc1 
    lda.z to_y
    sec
    sbc #<$96
    sta.z to_y
    lda.z to_y+1
    sbc #>$96
    sta.z to_y+1
    // [87] (signed word) rotate::vector_x#0 ← (signed word) show_letter::to_x#1
    // [88] (signed word) rotate::vector_y#0 ← (signed word) show_letter::to_y#1
    // [89] (byte) rotate::angle#0 ← (byte) show_letter::angle#0 -- vbuyy=vbuz1 
    ldy.z angle
    // [90] call rotate 
    // [142] phi from show_letter::@1 to rotate [phi:show_letter::@1->rotate]
  rotate_from___b1:
    // [142] phi (signed word) rotate::vector_y#2 = (signed word) rotate::vector_y#0 [phi:show_letter::@1->rotate#0] -- register_copy 
    // [142] phi (signed word) rotate::vector_x#2 = (signed word) rotate::vector_x#0 [phi:show_letter::@1->rotate#1] -- register_copy 
    // [142] phi (byte) rotate::angle#2 = (byte) rotate::angle#0 [phi:show_letter::@1->rotate#2] -- register_copy 
    jsr rotate
    // [91] (signed word) rotate::return_x#0 ← (signed word) rotate::return_x#2
    // [92] (signed word) rotate::return_y#0 ← (signed word) rotate::return_y#2
    jmp __b6
    // show_letter::@6
  __b6:
    // [93] (signed word) show_letter::to_x#2 ← (signed word) rotate::return_x#0
    // [94] (signed word) show_letter::to_y#2 ← (signed word) rotate::return_y#0
    // [95] (signed word) show_letter::current_x#10 ← (signed word) show_letter::to_x#2 + (signed byte) $64 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z to_x_1
    clc
    adc #<$64
    sta.z current_x_1
    lda.z to_x_1+1
    adc #>$64
    sta.z current_x_1+1
    // [96] (signed word) show_letter::current_y#10 ← (signed word) show_letter::to_y#2 + (signed byte) $64 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z to_y_1
    clc
    adc #<$64
    sta.z current_y_1
    lda.z to_y_1+1
    adc #>$64
    sta.z current_y_1+1
    // [97] (signed word) show_letter::via_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA,y
    sta.z via_x
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA+1,y
    sta.z via_x+1
    // [98] (signed word) show_letter::via_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z via_y
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z via_y+1
    // [99] (signed word) show_letter::via_x#1 ← (signed word) show_letter::via_x#0 - (signed byte) $32 -- vwsz1=vwsz1_minus_vbsc1 
    lda.z via_x
    sec
    sbc #$32
    sta.z via_x
    lda.z via_x+1
    sbc #>$32
    sta.z via_x+1
    // [100] (signed word) show_letter::via_y#1 ← (signed word) show_letter::via_y#0 - (signed word) $96 -- vwsz1=vwsz1_minus_vwsc1 
    lda.z via_y
    sec
    sbc #<$96
    sta.z via_y
    lda.z via_y+1
    sbc #>$96
    sta.z via_y+1
    // [101] (signed word) rotate::vector_x#1 ← (signed word) show_letter::via_x#1
    // [102] (signed word) rotate::vector_y#1 ← (signed word) show_letter::via_y#1
    // [103] (byte) rotate::angle#1 ← (byte) show_letter::angle#0 -- vbuyy=vbuz1 
    ldy.z angle
    // [104] call rotate 
    // [142] phi from show_letter::@6 to rotate [phi:show_letter::@6->rotate]
  rotate_from___b6:
    // [142] phi (signed word) rotate::vector_y#2 = (signed word) rotate::vector_y#1 [phi:show_letter::@6->rotate#0] -- register_copy 
    // [142] phi (signed word) rotate::vector_x#2 = (signed word) rotate::vector_x#1 [phi:show_letter::@6->rotate#1] -- register_copy 
    // [142] phi (byte) rotate::angle#2 = (byte) rotate::angle#1 [phi:show_letter::@6->rotate#2] -- register_copy 
    jsr rotate
    // [105] (signed word) rotate::return_x#1 ← (signed word) rotate::return_x#2
    // [106] (signed word) rotate::return_y#1 ← (signed word) rotate::return_y#2
    jmp __b7
    // show_letter::@7
  __b7:
    // [107] (signed word) show_letter::via_x#2 ← (signed word) rotate::return_x#1
    // [108] (signed word) show_letter::via_y#2 ← (signed word) rotate::return_y#1
    // [109] (signed word) show_letter::segment_via_x#0 ← (signed word) show_letter::via_x#2 + (signed byte) $64 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z segment_via_x
    clc
    adc #<$64
    sta.z segment_via_x
    lda.z segment_via_x+1
    adc #>$64
    sta.z segment_via_x+1
    // [110] (signed word) show_letter::segment_via_y#0 ← (signed word) show_letter::via_y#2 + (signed byte) $64 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z segment_via_y
    clc
    adc #<$64
    sta.z segment_via_y
    lda.z segment_via_y+1
    adc #>$64
    sta.z segment_via_y+1
    // [111] (byte) show_letter::segment_type#0 ← *((byte*)(const struct Segment*) letter_c + (byte~) show_letter::$17) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z __17
    lda letter_c,y
    // [112] if((byte) show_letter::segment_type#0==(const byte) MOVE_TO) goto show_letter::@3 -- vbuaa_eq_vbuc1_then_la1 
    cmp #MOVE_TO
    beq __b3
    jmp __b4
    // show_letter::@4
  __b4:
    // [113] if((byte) show_letter::segment_type#0==(const byte) SPLINE_TO) goto show_letter::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #SPLINE_TO
    beq __b2
    jmp __b5
    // show_letter::@5
  __b5:
    // [114] (word) bitmap_line::x1#0 ← (word)(signed word) show_letter::current_x#4
    // [115] (word) bitmap_line::y1#0 ← (word)(signed word) show_letter::current_y#4
    // [116] (word) bitmap_line::x2#0 ← (word)(signed word) show_letter::current_x#10 -- vwuz1=vwuz2 
    lda.z current_x_1
    sta.z bitmap_line.x2
    lda.z current_x_1+1
    sta.z bitmap_line.x2+1
    // [117] (word) bitmap_line::y2#0 ← (word)(signed word) show_letter::current_y#10 -- vwuz1=vwuz2 
    lda.z current_y_1
    sta.z bitmap_line.y2
    lda.z current_y_1+1
    sta.z bitmap_line.y2+1
    // [118] call bitmap_line 
    // [180] phi from show_letter::@5 to bitmap_line [phi:show_letter::@5->bitmap_line]
  bitmap_line_from___b5:
    // [180] phi (word) bitmap_line::y2#11 = (word) bitmap_line::y2#0 [phi:show_letter::@5->bitmap_line#0] -- register_copy 
    // [180] phi (word) bitmap_line::x2#10 = (word) bitmap_line::x2#0 [phi:show_letter::@5->bitmap_line#1] -- register_copy 
    // [180] phi (word) bitmap_line::y#0 = (word) bitmap_line::y1#0 [phi:show_letter::@5->bitmap_line#2] -- register_copy 
    // [180] phi (word) bitmap_line::x#0 = (word) bitmap_line::x1#0 [phi:show_letter::@5->bitmap_line#3] -- register_copy 
    jsr bitmap_line
    jmp __b3
    // show_letter::@3
  __b3:
    // [119] (byte) show_letter::i#1 ← ++ (byte) show_letter::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [120] if((byte) show_letter::i#1!=(byte) $16) goto show_letter::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$16
    cmp.z i
    bne __b9
    jmp __breturn
    // show_letter::@return
  __breturn:
    // [121] return 
    rts
    // show_letter::@9
  __b9:
    // [122] (signed word) show_letter::current_x#11 ← (signed word) show_letter::current_x#10 -- vwsz1=vwsz2 
    lda.z current_x_1
    sta.z current_x
    lda.z current_x_1+1
    sta.z current_x+1
    // [123] (signed word) show_letter::current_y#11 ← (signed word) show_letter::current_y#10 -- vwsz1=vwsz2 
    lda.z current_y_1
    sta.z current_y
    lda.z current_y_1+1
    sta.z current_y+1
    // [80] phi from show_letter::@9 to show_letter::@1 [phi:show_letter::@9->show_letter::@1]
  __b1_from___b9:
    // [80] phi (signed word) show_letter::current_y#4 = (signed word) show_letter::current_y#11 [phi:show_letter::@9->show_letter::@1#0] -- register_copy 
    // [80] phi (signed word) show_letter::current_x#4 = (signed word) show_letter::current_x#11 [phi:show_letter::@9->show_letter::@1#1] -- register_copy 
    // [80] phi (byte) show_letter::i#10 = (byte) show_letter::i#1 [phi:show_letter::@9->show_letter::@1#2] -- register_copy 
    jmp __b1
    // show_letter::@2
  __b2:
    // [124] (signed word) spline_8segB::p0_x#0 ← (signed word) show_letter::current_x#4
    // [125] (signed word) spline_8segB::p0_y#0 ← (signed word) show_letter::current_y#4
    // [126] (signed word) spline_8segB::p1_x#0 ← (signed word) show_letter::segment_via_x#0
    // [127] (signed word) spline_8segB::p1_y#0 ← (signed word) show_letter::segment_via_y#0
    // [128] (signed word) spline_8segB::p2_x#0 ← (signed word) show_letter::current_x#10
    // [129] (signed word) spline_8segB::p2_y#0 ← (signed word) show_letter::current_y#10
    // [130] call spline_8segB 
    jsr spline_8segB
    // [131] phi from show_letter::@2 to show_letter::@8 [phi:show_letter::@2->show_letter::@8]
  __b8_from___b2:
    jmp __b8
    // show_letter::@8
  __b8:
    // [132] call bitmap_plot_spline_8seg 
    jsr bitmap_plot_spline_8seg
    jmp __b3
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($c) str, byte register(X) c, word zp($a) num)
memset: {
    .label end = $a
    .label dst = $c
    .label num = $a
    .label str = $c
    // [134] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [135] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [136] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [137] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [137] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [138] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [139] return 
    rts
    // memset::@3
  __b3:
    // [140] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [141] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // rotate
// 2D-rotate a vector by an angle
// rotate(signed word zp(8) vector_x, signed word zp($a) vector_y, byte register(Y) angle)
rotate: {
    .label __0 = $14
    .label __2 = $14
    .label __4 = $14
    .label __5 = $1f
    .label __6 = $14
    .label __7 = $21
    .label __10 = $1d
    .label __11 = $2c
    .label __12 = $1f
    .label __13 = $21
    .label vector_x = 8
    .label vector_y = $a
    .label return_x = $c
    .label return_y = $e
    .label cos_a = $10
    .label xr = $1d
    .label yr = $2c
    .label sin_a = $10
    // [143] (signed word) rotate::cos_a#0 ← (signed word)*((const signed byte*) COS + (byte) rotate::angle#2) -- vwsz1=_sword_pbsc1_derefidx_vbuyy 
    lda COS,y
    sta.z cos_a
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z cos_a+1
    // [144] (signed word) mulf16s::a#0 ← (signed word) rotate::cos_a#0
    // [145] (signed word) mulf16s::b#0 ← (signed word) rotate::vector_x#2 -- vwsz1=vwsz2 
    lda.z vector_x
    sta.z mulf16s.b
    lda.z vector_x+1
    sta.z mulf16s.b+1
    // [146] call mulf16s 
    // [285] phi from rotate to mulf16s [phi:rotate->mulf16s]
  mulf16s_from_rotate:
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#0 [phi:rotate->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#0 [phi:rotate->mulf16s#1] -- register_copy 
    jsr mulf16s
    // [147] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0
    jmp __b1
    // rotate::@1
  __b1:
    // [148] (signed dword~) rotate::$0 ← (signed dword) mulf16s::return#2
    // [149] (signed word~) rotate::$10 ← (signed word)(signed dword~) rotate::$0 -- vwsz1=_sword_vdsz2 
    lda.z __0
    sta.z __10
    lda.z __0+1
    sta.z __10+1
    // [150] (signed word) rotate::xr#0 ← (signed word~) rotate::$10 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z xr
    rol.z xr+1
    // [151] (signed word) mulf16s::a#1 ← (signed word) rotate::cos_a#0
    // [152] (signed word) mulf16s::b#1 ← (signed word) rotate::vector_y#2 -- vwsz1=vwsz2 
    lda.z vector_y
    sta.z mulf16s.b
    lda.z vector_y+1
    sta.z mulf16s.b+1
    // [153] call mulf16s 
    // [285] phi from rotate::@1 to mulf16s [phi:rotate::@1->mulf16s]
  mulf16s_from___b1:
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#1 [phi:rotate::@1->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#1 [phi:rotate::@1->mulf16s#1] -- register_copy 
    jsr mulf16s
    // [154] (signed dword) mulf16s::return#3 ← (signed dword) mulf16s::return#0
    jmp __b2
    // rotate::@2
  __b2:
    // [155] (signed dword~) rotate::$2 ← (signed dword) mulf16s::return#3
    // [156] (signed word~) rotate::$11 ← (signed word)(signed dword~) rotate::$2 -- vwsz1=_sword_vdsz2 
    lda.z __2
    sta.z __11
    lda.z __2+1
    sta.z __11+1
    // [157] (signed word) rotate::yr#0 ← (signed word~) rotate::$11 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z yr
    rol.z yr+1
    // [158] (signed word) rotate::sin_a#0 ← (signed word)*((const signed byte*) SIN + (byte) rotate::angle#2) -- vwsz1=_sword_pbsc1_derefidx_vbuyy 
    // signed fixed[8.8]
    lda SIN,y
    sta.z sin_a
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z sin_a+1
    // [159] (signed word) mulf16s::a#2 ← (signed word) rotate::sin_a#0
    // [160] (signed word) mulf16s::b#2 ← (signed word) rotate::vector_y#2 -- vwsz1=vwsz2 
    lda.z vector_y
    sta.z mulf16s.b
    lda.z vector_y+1
    sta.z mulf16s.b+1
    // [161] call mulf16s 
    // [285] phi from rotate::@2 to mulf16s [phi:rotate::@2->mulf16s]
  mulf16s_from___b2:
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#2 [phi:rotate::@2->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#2 [phi:rotate::@2->mulf16s#1] -- register_copy 
    jsr mulf16s
    // [162] (signed dword) mulf16s::return#4 ← (signed dword) mulf16s::return#0
    jmp __b3
    // rotate::@3
  __b3:
    // [163] (signed dword~) rotate::$4 ← (signed dword) mulf16s::return#4
    // [164] (signed word~) rotate::$12 ← (signed word)(signed dword~) rotate::$4 -- vwsz1=_sword_vdsz2 
    lda.z __4
    sta.z __12
    lda.z __4+1
    sta.z __12+1
    // [165] (signed word~) rotate::$5 ← (signed word~) rotate::$12 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __5
    rol.z __5+1
    // [166] (signed word) rotate::xr#1 ← (signed word) rotate::xr#0 - (signed word~) rotate::$5 -- vwsz1=vwsz1_minus_vwsz2 
    // signed fixed[0.7]
    lda.z xr
    sec
    sbc.z __5
    sta.z xr
    lda.z xr+1
    sbc.z __5+1
    sta.z xr+1
    // [167] (signed word) mulf16s::a#3 ← (signed word) rotate::sin_a#0
    // [168] (signed word) mulf16s::b#3 ← (signed word) rotate::vector_x#2 -- vwsz1=vwsz2 
    lda.z vector_x
    sta.z mulf16s.b
    lda.z vector_x+1
    sta.z mulf16s.b+1
    // [169] call mulf16s 
    // [285] phi from rotate::@3 to mulf16s [phi:rotate::@3->mulf16s]
  mulf16s_from___b3:
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#3 [phi:rotate::@3->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#3 [phi:rotate::@3->mulf16s#1] -- register_copy 
    jsr mulf16s
    // [170] (signed dword) mulf16s::return#10 ← (signed dword) mulf16s::return#0
    jmp __b4
    // rotate::@4
  __b4:
    // [171] (signed dword~) rotate::$6 ← (signed dword) mulf16s::return#10
    // [172] (signed word~) rotate::$13 ← (signed word)(signed dword~) rotate::$6 -- vwsz1=_sword_vdsz2 
    lda.z __6
    sta.z __13
    lda.z __6+1
    sta.z __13+1
    // [173] (signed word~) rotate::$7 ← (signed word~) rotate::$13 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __7
    rol.z __7+1
    // [174] (signed word) rotate::yr#1 ← (signed word) rotate::yr#0 + (signed word~) rotate::$7 -- vwsz1=vwsz1_plus_vwsz2 
    // signed fixed[8.8]
    lda.z yr
    clc
    adc.z __7
    sta.z yr
    lda.z yr+1
    adc.z __7+1
    sta.z yr+1
    // [175] (byte~) rotate::$8 ← > (signed word) rotate::xr#1 -- vbuaa=_hi_vwsz1 
    lda.z xr+1
    // [176] (byte~) rotate::$9 ← > (signed word) rotate::yr#1 -- vbuxx=_hi_vwsz1 
    ldx.z yr+1
    // [177] (signed word) rotate::return_x#2 ← (signed word)(signed byte)(byte~) rotate::$8 -- vwsz1=_sword_vbsaa 
    sta.z return_x
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z return_x+1
    // [178] (signed word) rotate::return_y#2 ← (signed word)(signed byte)(byte~) rotate::$9 -- vwsz1=_sword_vbsxx 
    txa
    sta.z return_y
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z return_y+1
    jmp __breturn
    // rotate::@return
  __breturn:
    // [179] return 
    rts
}
  // bitmap_line
// Draw a line on the bitmap using bresenhams algorithm
// bitmap_line(word zp(4) x1, word zp(6) y1, word zp($c) x2, word zp($e) y2)
bitmap_line: {
    .label x = 4
    .label y = 6
    .label dx = $21
    .label dy = $1d
    .label sx = $23
    .label sy = $1f
    .label e1 = $12
    .label e = $10
    .label x1 = 4
    .label y1 = 6
    .label x2 = $c
    .label y2 = $e
    // [181] (word) abs_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x
    sta.z abs_u16.w
    lda.z x2+1
    sbc.z x+1
    sta.z abs_u16.w+1
    // [182] call abs_u16 
    // [303] phi from bitmap_line to abs_u16 [phi:bitmap_line->abs_u16]
  abs_u16_from_bitmap_line:
    // [303] phi (word) abs_u16::w#2 = (word) abs_u16::w#0 [phi:bitmap_line->abs_u16#0] -- register_copy 
    jsr abs_u16
    // [183] (word) abs_u16::return#0 ← (word) abs_u16::return#4
    jmp __b12
    // bitmap_line::@12
  __b12:
    // [184] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 -- vwuz1=vwuz2 
    lda.z abs_u16.return
    sta.z dx
    lda.z abs_u16.return+1
    sta.z dx+1
    // [185] (word) abs_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y
    sta.z abs_u16.w
    lda.z y2+1
    sbc.z y+1
    sta.z abs_u16.w+1
    // [186] call abs_u16 
    // [303] phi from bitmap_line::@12 to abs_u16 [phi:bitmap_line::@12->abs_u16]
  abs_u16_from___b12:
    // [303] phi (word) abs_u16::w#2 = (word) abs_u16::w#1 [phi:bitmap_line::@12->abs_u16#0] -- register_copy 
    jsr abs_u16
    // [187] (word) abs_u16::return#1 ← (word) abs_u16::return#4
    jmp __b13
    // bitmap_line::@13
  __b13:
    // [188] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1
    // [189] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 -- vwuz1_neq_0_then_la1 
    lda.z dx
    bne __b1
    lda.z dx+1
    bne __b1
    jmp __b18
    // bitmap_line::@18
  __b18:
    // [190] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 -- vwuz1_eq_0_then_la1 
    lda.z dy
    bne !+
    lda.z dy+1
    beq __b4
  !:
    jmp __b1
    // bitmap_line::@1
  __b1:
    // [191] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x
    sta.z sgn_u16.w
    lda.z x2+1
    sbc.z x+1
    sta.z sgn_u16.w+1
    // [192] call sgn_u16 
    // [310] phi from bitmap_line::@1 to sgn_u16 [phi:bitmap_line::@1->sgn_u16]
  sgn_u16_from___b1:
    // [310] phi (word) sgn_u16::w#2 = (word) sgn_u16::w#0 [phi:bitmap_line::@1->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // [193] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [194] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 -- vwuz1=vwuz2 
    lda.z sgn_u16.return
    sta.z sx
    lda.z sgn_u16.return+1
    sta.z sx+1
    // [195] (word) sgn_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y
    sta.z sgn_u16.w
    lda.z y2+1
    sbc.z y+1
    sta.z sgn_u16.w+1
    // [196] call sgn_u16 
    // [310] phi from bitmap_line::@14 to sgn_u16 [phi:bitmap_line::@14->sgn_u16]
  sgn_u16_from___b14:
    // [310] phi (word) sgn_u16::w#2 = (word) sgn_u16::w#1 [phi:bitmap_line::@14->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // [197] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4
    jmp __b15
    // bitmap_line::@15
  __b15:
    // [198] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1
    // [199] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 -- vwuz1_gt_vwuz2_then_la1 
    lda.z dy+1
    cmp.z dx+1
    bcc __b2
    bne !+
    lda.z dy
    cmp.z dx
    bcc __b2
  !:
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [200] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dx+1
    lsr
    sta.z e+1
    lda.z dx
    ror
    sta.z e
    // [201] phi from bitmap_line::@5 bitmap_line::@7 to bitmap_line::@6 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6]
  __b6_from___b5:
  __b6_from___b7:
    // [201] phi (word) bitmap_line::e#3 = (word) bitmap_line::e#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#0] -- register_copy 
    // [201] phi (word) bitmap_line::y#4 = (word) bitmap_line::y#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#1] -- register_copy 
    // [201] phi (word) bitmap_line::x#13 = (word) bitmap_line::x#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#2] -- register_copy 
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [202] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13
    // [203] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [204] call bitmap_plot 
    // [317] phi from bitmap_line::@6 to bitmap_plot [phi:bitmap_line::@6->bitmap_plot]
  bitmap_plot_from___b6:
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#1 [phi:bitmap_line::@6->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b16
    // bitmap_line::@16
  __b16:
    // [205] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [206] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    lda.z e+1
    adc.z dx+1
    sta.z e+1
    // [207] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e+1
    cmp.z dy+1
    bne !+
    lda.z e
    cmp.z dy
    beq __b7_from___b16
  !:
    bcc __b7_from___b16
    jmp __b8
    // bitmap_line::@8
  __b8:
    // [208] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [209] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    lda.z e+1
    sbc.z dy+1
    sta.z e+1
    // [210] phi from bitmap_line::@16 bitmap_line::@8 to bitmap_line::@7 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7]
  __b7_from___b16:
  __b7_from___b8:
    // [210] phi (word) bitmap_line::e#6 = (word) bitmap_line::e#1 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#0] -- register_copy 
    // [210] phi (word) bitmap_line::x#12 = (word) bitmap_line::x#13 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#1] -- register_copy 
    jmp __b7
    // bitmap_line::@7
  __b7:
    // [211] if((word) bitmap_line::y#1!=(word) bitmap_line::y2#11) goto bitmap_line::@6 -- vwuz1_neq_vwuz2_then_la1 
    lda.z y+1
    cmp.z y2+1
    bne __b6_from___b7
    lda.z y
    cmp.z y2
    bne __b6_from___b7
    // [212] phi from bitmap_line::@10 bitmap_line::@7 to bitmap_line::@3 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3]
  __b3_from___b10:
  __b3_from___b7:
    // [212] phi (word) bitmap_line::y#7 = (word) bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#0] -- register_copy 
    // [212] phi (word) bitmap_line::x#6 = (word) bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#1] -- register_copy 
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [213] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6
    // [214] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [215] call bitmap_plot 
    // [317] phi from bitmap_line::@3 to bitmap_plot [phi:bitmap_line::@3->bitmap_plot]
  bitmap_plot_from___b3:
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#2 [phi:bitmap_line::@3->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line::@3->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [216] return 
    rts
    // bitmap_line::@2
  __b2:
    // [217] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dy+1
    lsr
    sta.z e1+1
    lda.z dy
    ror
    sta.z e1
    // [218] phi from bitmap_line::@10 bitmap_line::@2 to bitmap_line::@9 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9]
  __b9_from___b10:
  __b9_from___b2:
    // [218] phi (word) bitmap_line::e1#3 = (word) bitmap_line::e1#6 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#0] -- register_copy 
    // [218] phi (word) bitmap_line::y#15 = (word) bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#1] -- register_copy 
    // [218] phi (word) bitmap_line::x#7 = (word) bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#2] -- register_copy 
    jmp __b9
    // bitmap_line::@9
  __b9:
    // [219] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7
    // [220] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [221] call bitmap_plot 
    // [317] phi from bitmap_line::@9 to bitmap_plot [phi:bitmap_line::@9->bitmap_plot]
  bitmap_plot_from___b9:
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#3 [phi:bitmap_line::@9->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line::@9->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b17
    // bitmap_line::@17
  __b17:
    // [222] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // [223] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e1
    clc
    adc.z dy
    sta.z e1
    lda.z e1+1
    adc.z dy+1
    sta.z e1+1
    // [224] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 -- vwuz1_ge_vwuz2_then_la1 
    lda.z e1+1
    cmp.z dx+1
    bne !+
    lda.z e1
    cmp.z dx
    beq __b10_from___b17
  !:
    bcc __b10_from___b17
    jmp __b11
    // bitmap_line::@11
  __b11:
    // [225] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // [226] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e1
    sec
    sbc.z dx
    sta.z e1
    lda.z e1+1
    sbc.z dx+1
    sta.z e1+1
    // [227] phi from bitmap_line::@11 bitmap_line::@17 to bitmap_line::@10 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10]
  __b10_from___b11:
  __b10_from___b17:
    // [227] phi (word) bitmap_line::e1#6 = (word) bitmap_line::e1#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#0] -- register_copy 
    // [227] phi (word) bitmap_line::y#13 = (word) bitmap_line::y#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#1] -- register_copy 
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [228] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#10) goto bitmap_line::@9 -- vwuz1_neq_vwuz2_then_la1 
    lda.z x+1
    cmp.z x2+1
    bne __b9_from___b10
    lda.z x
    cmp.z x2
    bne __b9_from___b10
    jmp __b3_from___b10
    // bitmap_line::@4
  __b4:
    // [229] (word) bitmap_plot::x#0 ← (word) bitmap_line::x#0
    // [230] (byte) bitmap_plot::y#0 ← (byte)(word) bitmap_line::y#0 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [231] call bitmap_plot 
    // [317] phi from bitmap_line::@4 to bitmap_plot [phi:bitmap_line::@4->bitmap_plot]
  bitmap_plot_from___b4:
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#0 [phi:bitmap_line::@4->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line::@4->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __breturn
}
  // spline_8segB
// Generate a 8-segment quadratic spline using 16-bit fixed point 1/64-format math (6 decimal bits).
// The resulting spline segment points are returned in SPLINE_8SEG[]
// Point values must be within [-200 ; 1ff] for the calculation to not overflow.
// A quadratic spline is a curve defined by 3 points: P0, P1 and P2.
// The curve connects P0 to P2 through a smooth curve that moves towards P1, but does usually not touch it.
// spline_8segB(signed word zp(4) p0_x, signed word zp(6) p0_y, signed word zp($c) p1_x, signed word zp($e) p1_y, signed word zp($19) p2_x, signed word zp($1b) p2_y)
spline_8segB: {
    .label __0 = $23
    .label __1 = $23
    .label __3 = $2a
    .label __4 = $2a
    .label __6 = $c
    .label __8 = $e
    .label __10 = $c
    .label __12 = $e
    .label __18 = 4
    .label __19 = 4
    .label __20 = 6
    .label __21 = 6
    .label __22 = $26
    .label __23 = $26
    .label __24 = $28
    .label __25 = $28
    .label a_x = $23
    .label a_y = $2a
    .label b_x = $c
    .label b_y = $e
    .label i_x = $c
    .label i_y = $e
    .label j_x = $23
    .label j_y = $2a
    .label p_x = 4
    .label p_y = 6
    .label p0_x = 4
    .label p0_y = 6
    .label p1_x = $c
    .label p1_y = $e
    .label p2_x = $19
    .label p2_y = $1b
    // [232] (signed word~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#0 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z p1_x
    asl
    sta.z __0
    lda.z p1_x+1
    rol
    sta.z __0+1
    // [233] (signed word~) spline_8segB::$1 ← (signed word) spline_8segB::p2_x#0 - (signed word~) spline_8segB::$0 -- vwsz1=vwsz2_minus_vwsz1 
    lda.z p2_x
    sec
    sbc.z __1
    sta.z __1
    lda.z p2_x+1
    sbc.z __1+1
    sta.z __1+1
    // [234] (signed word) spline_8segB::a_x#0 ← (signed word~) spline_8segB::$1 + (signed word) spline_8segB::p0_x#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z a_x
    clc
    adc.z p0_x
    sta.z a_x
    lda.z a_x+1
    adc.z p0_x+1
    sta.z a_x+1
    // [235] (signed word~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#0 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z p1_y
    asl
    sta.z __3
    lda.z p1_y+1
    rol
    sta.z __3+1
    // [236] (signed word~) spline_8segB::$4 ← (signed word) spline_8segB::p2_y#0 - (signed word~) spline_8segB::$3 -- vwsz1=vwsz2_minus_vwsz1 
    lda.z p2_y
    sec
    sbc.z __4
    sta.z __4
    lda.z p2_y+1
    sbc.z __4+1
    sta.z __4+1
    // [237] (signed word) spline_8segB::a_y#0 ← (signed word~) spline_8segB::$4 + (signed word) spline_8segB::p0_y#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z a_y
    clc
    adc.z p0_y
    sta.z a_y
    lda.z a_y+1
    adc.z p0_y+1
    sta.z a_y+1
    // [238] (signed word~) spline_8segB::$6 ← (signed word) spline_8segB::p1_x#0 - (signed word) spline_8segB::p0_x#0 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z __6
    sec
    sbc.z p0_x
    sta.z __6
    lda.z __6+1
    sbc.z p0_x+1
    sta.z __6+1
    // [239] (signed word) spline_8segB::b_x#0 ← (signed word~) spline_8segB::$6 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z b_x
    rol.z b_x+1
    // [240] (signed word~) spline_8segB::$8 ← (signed word) spline_8segB::p1_y#0 - (signed word) spline_8segB::p0_y#0 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z __8
    sec
    sbc.z p0_y
    sta.z __8
    lda.z __8+1
    sbc.z p0_y+1
    sta.z __8+1
    // [241] (signed word) spline_8segB::b_y#0 ← (signed word~) spline_8segB::$8 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z b_y
    rol.z b_y+1
    // [242] (signed word~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 << (byte) 3 -- vwsz1=vwsz1_rol_3 
    asl.z __10
    rol.z __10+1
    asl.z __10
    rol.z __10+1
    asl.z __10
    rol.z __10+1
    // [243] (signed word) spline_8segB::i_x#0 ← (signed word) spline_8segB::a_x#0 + (signed word~) spline_8segB::$10 -- vwsz1=vwsz2_plus_vwsz1 
    lda.z i_x
    clc
    adc.z a_x
    sta.z i_x
    lda.z i_x+1
    adc.z a_x+1
    sta.z i_x+1
    // [244] (signed word~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 << (byte) 3 -- vwsz1=vwsz1_rol_3 
    asl.z __12
    rol.z __12+1
    asl.z __12
    rol.z __12+1
    asl.z __12
    rol.z __12+1
    // [245] (signed word) spline_8segB::i_y#0 ← (signed word) spline_8segB::a_y#0 + (signed word~) spline_8segB::$12 -- vwsz1=vwsz2_plus_vwsz1 
    lda.z i_y
    clc
    adc.z a_y
    sta.z i_y
    lda.z i_y+1
    adc.z a_y+1
    sta.z i_y+1
    // [246] (signed word) spline_8segB::j_x#0 ← (signed word) spline_8segB::a_x#0 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z j_x
    rol.z j_x+1
    // [247] (signed word) spline_8segB::j_y#0 ← (signed word) spline_8segB::a_y#0 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z j_y
    rol.z j_y+1
    // [248] (signed word) spline_8segB::p_x#0 ← (signed word) spline_8segB::p0_x#0 << (byte) 6 -- vwsz1=vwsz1_rol_6 
    lda.z p_x+1
    sta.z $ff
    lda.z p_x
    sta.z p_x+1
    lda #0
    sta.z p_x
    lsr.z $ff
    ror.z p_x+1
    ror.z p_x
    lsr.z $ff
    ror.z p_x+1
    ror.z p_x
    // [249] (signed word) spline_8segB::p_y#0 ← (signed word) spline_8segB::p0_y#0 << (byte) 6 -- vwsz1=vwsz1_rol_6 
    lda.z p_y+1
    sta.z $ff
    lda.z p_y
    sta.z p_y+1
    lda #0
    sta.z p_y
    lsr.z $ff
    ror.z p_y+1
    ror.z p_y
    lsr.z $ff
    ror.z p_y+1
    ror.z p_y
    // [250] phi from spline_8segB to spline_8segB::@1 [phi:spline_8segB->spline_8segB::@1]
  __b1_from_spline_8segB:
    // [250] phi (signed word) spline_8segB::i_y#2 = (signed word) spline_8segB::i_y#0 [phi:spline_8segB->spline_8segB::@1#0] -- register_copy 
    // [250] phi (signed word) spline_8segB::i_x#2 = (signed word) spline_8segB::i_x#0 [phi:spline_8segB->spline_8segB::@1#1] -- register_copy 
    // [250] phi (byte) spline_8segB::n#2 = (byte) 0 [phi:spline_8segB->spline_8segB::@1#2] -- vbuyy=vbuc1 
    ldy #0
    // [250] phi (signed word) spline_8segB::p_y#2 = (signed word) spline_8segB::p_y#0 [phi:spline_8segB->spline_8segB::@1#3] -- register_copy 
    // [250] phi (signed word) spline_8segB::p_x#2 = (signed word) spline_8segB::p_x#0 [phi:spline_8segB->spline_8segB::@1#4] -- register_copy 
    jmp __b1
    // [250] phi from spline_8segB::@1 to spline_8segB::@1 [phi:spline_8segB::@1->spline_8segB::@1]
  __b1_from___b1:
    // [250] phi (signed word) spline_8segB::i_y#2 = (signed word) spline_8segB::i_y#1 [phi:spline_8segB::@1->spline_8segB::@1#0] -- register_copy 
    // [250] phi (signed word) spline_8segB::i_x#2 = (signed word) spline_8segB::i_x#1 [phi:spline_8segB::@1->spline_8segB::@1#1] -- register_copy 
    // [250] phi (byte) spline_8segB::n#2 = (byte) spline_8segB::n#1 [phi:spline_8segB::@1->spline_8segB::@1#2] -- register_copy 
    // [250] phi (signed word) spline_8segB::p_y#2 = (signed word) spline_8segB::p_y#1 [phi:spline_8segB::@1->spline_8segB::@1#3] -- register_copy 
    // [250] phi (signed word) spline_8segB::p_x#2 = (signed word) spline_8segB::p_x#1 [phi:spline_8segB::@1->spline_8segB::@1#4] -- register_copy 
    jmp __b1
    // spline_8segB::@1
  __b1:
    // [251] (signed word~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (signed byte) $20 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z p_x
    clc
    adc #<$20
    sta.z __22
    lda.z p_x+1
    adc #>$20
    sta.z __22+1
    // [252] (signed word~) spline_8segB::$23 ← (signed word~) spline_8segB::$22 >> (byte) 6 -- vwsz1=vwsz1_ror_6 
    lda.z __23
    sta.z $ff
    lda.z __23+1
    sta.z __23
    lda #0
    bit.z __23+1
    bpl !+
    lda #$ff
  !:
    sta.z __23+1
    rol.z $ff
    rol.z __23
    rol.z __23+1
    rol.z $ff
    rol.z __23
    rol.z __23+1
    // [253] (signed word~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (signed byte) $20 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z p_y
    clc
    adc #<$20
    sta.z __24
    lda.z p_y+1
    adc #>$20
    sta.z __24+1
    // [254] (signed word~) spline_8segB::$25 ← (signed word~) spline_8segB::$24 >> (byte) 6 -- vwsz1=vwsz1_ror_6 
    lda.z __25
    sta.z $ff
    lda.z __25+1
    sta.z __25
    lda #0
    bit.z __25+1
    bpl !+
    lda #$ff
  !:
    sta.z __25+1
    rol.z $ff
    rol.z __25
    rol.z __25+1
    rol.z $ff
    rol.z __25
    rol.z __25+1
    // [255] (byte~) spline_8segB::$31 ← (byte) spline_8segB::n#2 << (byte) 2 -- vbuxx=vbuyy_rol_2 
    tya
    asl
    asl
    tax
    // [256] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$23 -- pwsc1_derefidx_vbuxx=vwsz1 
    lda.z __23
    sta SPLINE_8SEG,x
    lda.z __23+1
    sta SPLINE_8SEG+1,x
    // [257] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$25 -- pwsc1_derefidx_vbuxx=vwsz1 
    lda.z __25
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y,x
    lda.z __25+1
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,x
    // [258] (signed word) spline_8segB::p_x#1 ← (signed word) spline_8segB::p_x#2 + (signed word) spline_8segB::i_x#2 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z p_x
    clc
    adc.z i_x
    sta.z p_x
    lda.z p_x+1
    adc.z i_x+1
    sta.z p_x+1
    // [259] (signed word) spline_8segB::p_y#1 ← (signed word) spline_8segB::p_y#2 + (signed word) spline_8segB::i_y#2 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z p_y
    clc
    adc.z i_y
    sta.z p_y
    lda.z p_y+1
    adc.z i_y+1
    sta.z p_y+1
    // [260] (signed word) spline_8segB::i_x#1 ← (signed word) spline_8segB::i_x#2 + (signed word) spline_8segB::j_x#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z i_x
    clc
    adc.z j_x
    sta.z i_x
    lda.z i_x+1
    adc.z j_x+1
    sta.z i_x+1
    // [261] (signed word) spline_8segB::i_y#1 ← (signed word) spline_8segB::i_y#2 + (signed word) spline_8segB::j_y#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z i_y
    clc
    adc.z j_y
    sta.z i_y
    lda.z i_y+1
    adc.z j_y+1
    sta.z i_y+1
    // [262] (byte) spline_8segB::n#1 ← ++ (byte) spline_8segB::n#2 -- vbuyy=_inc_vbuyy 
    iny
    // [263] if((byte) spline_8segB::n#1!=(byte) 8) goto spline_8segB::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b1_from___b1
    jmp __b2
    // spline_8segB::@2
  __b2:
    // [264] (signed word~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#1 + (signed byte) $20 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z __18
    clc
    adc #<$20
    sta.z __18
    lda.z __18+1
    adc #>$20
    sta.z __18+1
    // [265] (signed word~) spline_8segB::$19 ← (signed word~) spline_8segB::$18 >> (byte) 6 -- vwsz1=vwsz1_ror_6 
    lda.z __19
    sta.z $ff
    lda.z __19+1
    sta.z __19
    lda #0
    bit.z __19+1
    bpl !+
    lda #$ff
  !:
    sta.z __19+1
    rol.z $ff
    rol.z __19
    rol.z __19+1
    rol.z $ff
    rol.z __19
    rol.z __19+1
    // [266] (signed word~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#1 + (signed byte) $20 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z __20
    clc
    adc #<$20
    sta.z __20
    lda.z __20+1
    adc #>$20
    sta.z __20+1
    // [267] (signed word~) spline_8segB::$21 ← (signed word~) spline_8segB::$20 >> (byte) 6 -- vwsz1=vwsz1_ror_6 
    lda.z __21
    sta.z $ff
    lda.z __21+1
    sta.z __21
    lda #0
    bit.z __21+1
    bpl !+
    lda #$ff
  !:
    sta.z __21+1
    rol.z $ff
    rol.z __21
    rol.z __21+1
    rol.z $ff
    rol.z __21
    rol.z __21+1
    // [268] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$19 -- _deref_pwsc1=vwsz1 
    lda.z __19
    sta SPLINE_8SEG+8*SIZEOF_STRUCT_SPLINEVECTOR16
    lda.z __19+1
    sta SPLINE_8SEG+8*SIZEOF_STRUCT_SPLINEVECTOR16+1
    // [269] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$21 -- _deref_pwsc1=vwsz1 
    lda.z __21
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+8*SIZEOF_STRUCT_SPLINEVECTOR16
    lda.z __21+1
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+8*SIZEOF_STRUCT_SPLINEVECTOR16+1
    jmp __breturn
    // spline_8segB::@return
  __breturn:
    // [270] return 
    rts
}
  // bitmap_plot_spline_8seg
// Plot the spline in the SPLINE_8SEG array
bitmap_plot_spline_8seg: {
    .label __4 = $25
    .label current_x = 4
    .label current_y = 6
    .label n = $18
    // [271] (signed word) bitmap_plot_spline_8seg::current_x#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG) -- vwsz1=_deref_pwsc1 
    lda SPLINE_8SEG
    sta.z current_x
    lda SPLINE_8SEG+1
    sta.z current_x+1
    // [272] (signed word) bitmap_plot_spline_8seg::current_y#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y) -- vwsz1=_deref_pwsc1 
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y
    sta.z current_y
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1
    sta.z current_y+1
    // [273] phi from bitmap_plot_spline_8seg to bitmap_plot_spline_8seg::@1 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1]
  __b1_from_bitmap_plot_spline_8seg:
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_y#2 = (signed word) bitmap_plot_spline_8seg::current_y#0 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1#0] -- register_copy 
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_x#2 = (signed word) bitmap_plot_spline_8seg::current_x#0 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1#1] -- register_copy 
    // [273] phi (byte) bitmap_plot_spline_8seg::n#2 = (byte) 1 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta.z n
    jmp __b1
    // [273] phi from bitmap_plot_spline_8seg::@2 to bitmap_plot_spline_8seg::@1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1]
  __b1_from___b2:
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_y#2 = (signed word) bitmap_plot_spline_8seg::current_y#1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1#0] -- register_copy 
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_x#2 = (signed word) bitmap_plot_spline_8seg::current_x#1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1#1] -- register_copy 
    // [273] phi (byte) bitmap_plot_spline_8seg::n#2 = (byte) bitmap_plot_spline_8seg::n#1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1#2] -- register_copy 
    jmp __b1
    // bitmap_plot_spline_8seg::@1
  __b1:
    // [274] (byte~) bitmap_plot_spline_8seg::$4 ← (byte) bitmap_plot_spline_8seg::n#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z n
    asl
    asl
    sta.z __4
    // [275] (word) bitmap_line::x1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_x#2
    // [276] (word) bitmap_line::y1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_y#2
    // [277] (word) bitmap_line::x2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __4
    lda SPLINE_8SEG,y
    sta.z bitmap_line.x2
    lda SPLINE_8SEG+1,y
    sta.z bitmap_line.x2+1
    // [278] (word) bitmap_line::y2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy.z __4
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z bitmap_line.y2
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z bitmap_line.y2+1
    // [279] call bitmap_line 
    // [180] phi from bitmap_plot_spline_8seg::@1 to bitmap_line [phi:bitmap_plot_spline_8seg::@1->bitmap_line]
  bitmap_line_from___b1:
    // [180] phi (word) bitmap_line::y2#11 = (word) bitmap_line::y2#13 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#0] -- register_copy 
    // [180] phi (word) bitmap_line::x2#10 = (word) bitmap_line::x2#13 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#1] -- register_copy 
    // [180] phi (word) bitmap_line::y#0 = (word) bitmap_line::y1#1 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#2] -- register_copy 
    // [180] phi (word) bitmap_line::x#0 = (word) bitmap_line::x1#1 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#3] -- register_copy 
    jsr bitmap_line
    jmp __b2
    // bitmap_plot_spline_8seg::@2
  __b2:
    // [280] (signed word) bitmap_plot_spline_8seg::current_x#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __4
    lda SPLINE_8SEG,y
    sta.z current_x
    lda SPLINE_8SEG+1,y
    sta.z current_x+1
    // [281] (signed word) bitmap_plot_spline_8seg::current_y#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __4
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z current_y
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z current_y+1
    // [282] (byte) bitmap_plot_spline_8seg::n#1 ← ++ (byte) bitmap_plot_spline_8seg::n#2 -- vbuz1=_inc_vbuz1 
    inc.z n
    // [283] if((byte) bitmap_plot_spline_8seg::n#1!=(byte) 9) goto bitmap_plot_spline_8seg::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z n
    bne __b1_from___b2
    jmp __breturn
    // bitmap_plot_spline_8seg::@return
  __breturn:
    // [284] return 
    rts
}
  // mulf16s
// Fast multiply two signed ints to a signed double unsigned int result
// Fixes offsets introduced by using unsigned multiplication
// mulf16s(signed word zp($10) a, signed word zp($12) b)
mulf16s: {
    .label __6 = $28
    .label __9 = $2a
    .label __11 = $28
    .label __12 = $2a
    .label m = $14
    .label return = $14
    .label a = $10
    .label b = $12
    // [286] (word) mulf16u::a#0 ← (word)(signed word) mulf16s::a#4 -- vwuz1=vwuz2 
    lda.z a
    sta.z mulf16u.a
    lda.z a+1
    sta.z mulf16u.a+1
    // [287] (word) mulf16u::b#0 ← (word)(signed word) mulf16s::b#4 -- vwuz1=vwuz2 
    lda.z b
    sta.z mulf16u.b
    lda.z b+1
    sta.z mulf16u.b+1
    // [288] call mulf16u 
    jsr mulf16u
    // [289] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0
    jmp __b5
    // mulf16s::@5
  __b5:
    // [290] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2
    // [291] if((signed word) mulf16s::a#4>=(signed byte) 0) goto mulf16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1_from___b5
    jmp __b3
    // mulf16s::@3
  __b3:
    // [292] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // [293] (word~) mulf16s::$11 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#4 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __11
    sec
    sbc.z b
    sta.z __11
    lda.z __11+1
    sbc.z b+1
    sta.z __11+1
    // [294] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$11 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [295] phi from mulf16s::@3 mulf16s::@5 to mulf16s::@1 [phi:mulf16s::@3/mulf16s::@5->mulf16s::@1]
  __b1_from___b3:
  __b1_from___b5:
    // [295] phi (dword) mulf16s::m#5 = (dword) mulf16s::m#1 [phi:mulf16s::@3/mulf16s::@5->mulf16s::@1#0] -- register_copy 
    jmp __b1
    // mulf16s::@1
  __b1:
    // [296] if((signed word) mulf16s::b#4>=(signed byte) 0) goto mulf16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2_from___b1
    jmp __b4
    // mulf16s::@4
  __b4:
    // [297] (word~) mulf16s::$9 ← > (dword) mulf16s::m#5 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // [298] (word~) mulf16s::$12 ← (word~) mulf16s::$9 - (word)(signed word) mulf16s::a#4 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __12
    sec
    sbc.z a
    sta.z __12
    lda.z __12+1
    sbc.z a+1
    sta.z __12+1
    // [299] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$12 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [300] phi from mulf16s::@1 mulf16s::@4 to mulf16s::@2 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2]
  __b2_from___b1:
  __b2_from___b4:
    // [300] phi (dword) mulf16s::m#4 = (dword) mulf16s::m#5 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2#0] -- register_copy 
    jmp __b2
    // mulf16s::@2
  __b2:
    // [301] (signed dword) mulf16s::return#0 ← (signed dword)(dword) mulf16s::m#4
    jmp __breturn
    // mulf16s::@return
  __breturn:
    // [302] return 
    rts
}
  // abs_u16
// Get the absolute value of a 16-bit unsigned number treated as a signed number.
// abs_u16(word zp($1d) w)
abs_u16: {
    .label w = $1d
    .label return = $1d
    // [304] (byte~) abs_u16::$0 ← > (word) abs_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // [305] (byte~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [306] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [308] phi from abs_u16 abs_u16::@1 to abs_u16::@return [phi:abs_u16/abs_u16::@1->abs_u16::@return]
  __breturn_from_abs_u16:
  __breturn_from___b1:
    // [308] phi (word) abs_u16::return#4 = (word) abs_u16::w#2 [phi:abs_u16/abs_u16::@1->abs_u16::@return#0] -- register_copy 
    jmp __breturn
    // abs_u16::@1
  __b1:
    // [307] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    jmp __breturn_from___b1
    // abs_u16::@return
  __breturn:
    // [309] return 
    rts
}
  // sgn_u16
// Get the sign of a 16-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is
// sgn_u16(word zp($2c) w)
sgn_u16: {
    .label w = $2c
    .label return = $1f
    // [311] (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // [312] (byte~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // [313] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1_from_sgn_u16
    // [315] phi from sgn_u16 to sgn_u16::@return [phi:sgn_u16->sgn_u16::@return]
  __breturn_from_sgn_u16:
    // [315] phi (word) sgn_u16::return#4 = (byte) 1 [phi:sgn_u16->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<1
    sta.z return
    lda #>1
    sta.z return+1
    jmp __breturn
    // [314] phi from sgn_u16 to sgn_u16::@1 [phi:sgn_u16->sgn_u16::@1]
  __b1_from_sgn_u16:
    jmp __b1
    // sgn_u16::@1
  __b1:
    // [315] phi from sgn_u16::@1 to sgn_u16::@return [phi:sgn_u16::@1->sgn_u16::@return]
  __breturn_from___b1:
    // [315] phi (word) sgn_u16::return#4 = (byte) -1 [phi:sgn_u16::@1->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z return
    lda #>-1
    sta.z return+1
    jmp __breturn
    // sgn_u16::@return
  __breturn:
    // [316] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp(4) x, byte register(A) y)
bitmap_plot: {
    .label __0 = $2c
    .label plotter = $2a
    .label x = 4
    // [318] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda bitmap_plot_yhi,y
    sta.z plotter+1
    lda bitmap_plot_ylo,y
    sta.z plotter
    // [319] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // [320] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter+1
    // [321] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4 -- vbuxx=_lo_vwuz1 
    ldx.z x
    // [322] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [323] return 
    rts
}
  // mulf16u
// Fast multiply two unsigned ints to a double unsigned int result
// Done in assembler to utilize fast addition A+X
// mulf16u(word zp($2a) a, word zp($26) b)
mulf16u: {
    .label memA = $f8
    .label memB = $fa
    .label memR = $fc
    .label return = $14
    .label a = $2a
    .label b = $26
    // [324] *((const nomodify word*) mulf16u::memA) ← (word) mulf16u::a#0 -- _deref_pwuc1=vwuz1 
    lda.z a
    sta memA
    lda.z a+1
    sta memA+1
    // [325] *((const nomodify word*) mulf16u::memB) ← (word) mulf16u::b#0 -- _deref_pwuc1=vwuz1 
    lda.z b
    sta memB
    lda.z b+1
    sta memB+1
    // asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
    lda memA
    sta sm1a+1
    sta sm3a+1
    sta sm5a+1
    sta sm7a+1
    eor #$ff
    sta sm2a+1
    sta sm4a+1
    sta sm6a+1
    sta sm8a+1
    lda memA+1
    sta sm1b+1
    sta sm3b+1
    sta sm5b+1
    sta sm7b+1
    eor #$ff
    sta sm2b+1
    sta sm4b+1
    sta sm6b+1
    sta sm8b+1
    ldx memB
    sec
  sm1a:
    lda mulf_sqr1_lo,x
  sm2a:
    sbc mulf_sqr2_lo,x
    sta memR+0
  sm3a:
    lda mulf_sqr1_hi,x
  sm4a:
    sbc mulf_sqr2_hi,x
    sta _AA+1
    sec
  sm1b:
    lda mulf_sqr1_lo,x
  sm2b:
    sbc mulf_sqr2_lo,x
    sta _cc+1
  sm3b:
    lda mulf_sqr1_hi,x
  sm4b:
    sbc mulf_sqr2_hi,x
    sta _CC+1
    ldx memB+1
    sec
  sm5a:
    lda mulf_sqr1_lo,x
  sm6a:
    sbc mulf_sqr2_lo,x
    sta _bb+1
  sm7a:
    lda mulf_sqr1_hi,x
  sm8a:
    sbc mulf_sqr2_hi,x
    sta _BB+1
    sec
  sm5b:
    lda mulf_sqr1_lo,x
  sm6b:
    sbc mulf_sqr2_lo,x
    sta _dd+1
  sm7b:
    lda mulf_sqr1_hi,x
  sm8b:
    sbc mulf_sqr2_hi,x
    sta memR+3
    clc
  _AA:
    lda #0
  _bb:
    adc #0
    sta memR+1
  _BB:
    lda #0
  _CC:
    adc #0
    sta memR+2
    bcc !+
    inc memR+3
    clc
  !:
  _cc:
    lda #0
    adc memR+1
    sta memR+1
  _dd:
    lda #0
    adc memR+2
    sta memR+2
    bcc !+
    inc memR+3
  !:
    // [327] (dword) mulf16u::return#0 ← *((const nomodify dword*) mulf16u::memR) -- vduz1=_deref_pduc1 
    lda memR
    sta.z return
    lda memR+1
    sta.z return+1
    lda memR+2
    sta.z return+2
    lda memR+3
    sta.z return+3
    jmp __breturn
    // mulf16u::@return
  __breturn:
    // [328] return 
    rts
}
  // File Data
  // Array filled with spline segment points by splinePlot_8()
  SPLINE_8SEG: .fill 4*9, 0
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // True type letter c
  letter_c: .byte MOVE_TO
  .word $6c, $92, 0, 0
  .byte SPLINE_TO
  .word $59, $b6, $67, $a9
  .byte SPLINE_TO
  .word $3b, $c3, $4b, $c3
  .byte SPLINE_TO
  .word $17, $b2, $26, $c3
  .byte SPLINE_TO
  .word 9, $84, 9, $a1
  .byte SPLINE_TO
  .word $19, $57, 9, $68
  .byte SPLINE_TO
  .word $41, $45, $2a, $45
  .byte SPLINE_TO
  .word $5d, $4f, $52, $45
  .byte SPLINE_TO
  .word $69, $62, $69, $58
  .byte SPLINE_TO
  .word $66, $6a, $69, $67
  .byte SPLINE_TO
  .word $5d, $6d, $62, $6d
  .byte SPLINE_TO
  .word $51, $68, $55, $6d
  .byte SPLINE_TO
  .word $4e, $5d, $4f, $65
  .byte SPLINE_TO
  .word $49, $52, $4e, $56
  .byte SPLINE_TO
  .word $3d, $4e, $45, $4e
  .byte SPLINE_TO
  .word $28, $58, $30, $4e
  .byte SPLINE_TO
  .word $1d, $79, $1d, $64
  .byte SPLINE_TO
  .word $28, $9e, $1d, $8e
  .byte SPLINE_TO
  .word $44, $ae, $32, $ae
  .byte SPLINE_TO
  .word $5b, $a6, $50, $ae
  .byte SPLINE_TO
  .word $68, $90, $62, $a0
  .byte LINE_TO
  .word $6c, $92, 0, 0
  // Sine and Cosine tables
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
SIN:
.for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1___b1
Removing instruction jmp toD0181
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b10
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __b5
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b8
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b8
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b17
Removing instruction jmp __b11
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction ldy #0
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #0
Replacing instruction ldy.z __17 with TAY
Removing instruction ldy.z __17
Removing instruction ldy.z __17
Removing instruction lda.z e+1
Removing instruction lda.z e1+1
Replacing instruction ldy.z __4 with TAY
Removing instruction ldy.z __4
Removing instruction ldy.z __4
Removing instruction lda #>-1
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b3_from___b3 with __b3
Replacing label __b3_from___b5 with __b3
Replacing label __b1 with __b2
Replacing label __b9_from___b6 with __b8
Replacing label __b3_from___b2 with __b3
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b7_from___b16 with __b7
Replacing label __b7_from___b16 with __b7
Replacing label __b6_from___b7 with __b6
Replacing label __b6_from___b7 with __b6
Replacing label __b10_from___b17 with __b10
Replacing label __b10_from___b17 with __b10
Replacing label __b9_from___b10 with __b9
Replacing label __b9_from___b10 with __b9
Replacing label __b3_from___b10 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b1_from_sgn_u16 with __b1
Removing instruction __b8_from_main:
Removing instruction bitmap_init_from___b8:
Removing instruction __b9_from___b8:
Removing instruction bitmap_clear_from___b9:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction toD0181_from_vicSelectGfxBank1___b1:
Removing instruction toD0181:
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction bitmap_clear_from___b2:
Removing instruction show_letter_from___b10:
Removing instruction __b3_from___b3:
Removing instruction __b3_from___b5:
Removing instruction __b9_from___b6:
Removing instruction __b9:
Removing instruction __b8_from___b9:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b1_from_bitmap_clear:
Removing instruction memset_from___b1:
Removing instruction __b8_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b6_from___b5:
Removing instruction __b6_from___b7:
Removing instruction __b7_from___b16:
Removing instruction __b7_from___b8:
Removing instruction __b3_from___b10:
Removing instruction __b3_from___b7:
Removing instruction __b9_from___b10:
Removing instruction __b9_from___b2:
Removing instruction __b10_from___b11:
Removing instruction __b10_from___b17:
Removing instruction __b1_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __breturn:
Removing instruction __breturn_from_abs_u16:
Removing instruction __b1_from_sgn_u16:
Removing instruction __breturn_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction mulf_init_from_main:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1___b1:
Removing instruction __b7:
Removing instruction __b1_from___b7:
Removing instruction __b10:
Removing instruction __b3_from___b10:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction __b1_from_mulf_init:
Removing instruction __b5_from___b1:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction __b8_from___b6:
Removing instruction __b5_from___b8:
Removing instruction __b4:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_bitmap_init:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction memset_from_bitmap_clear:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_show_letter:
Removing instruction rotate_from___b1:
Removing instruction __b6:
Removing instruction rotate_from___b6:
Removing instruction __b7:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction bitmap_line_from___b5:
Removing instruction __breturn:
Removing instruction __b1_from___b9:
Removing instruction __b8:
Removing instruction __b1:
Removing instruction mulf16s_from_rotate:
Removing instruction __b1:
Removing instruction mulf16s_from___b1:
Removing instruction __b2:
Removing instruction mulf16s_from___b2:
Removing instruction __b3:
Removing instruction mulf16s_from___b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction abs_u16_from_bitmap_line:
Removing instruction __b12:
Removing instruction abs_u16_from___b12:
Removing instruction __b13:
Removing instruction __b18:
Removing instruction sgn_u16_from___b1:
Removing instruction __b14:
Removing instruction sgn_u16_from___b14:
Removing instruction __b15:
Removing instruction __b5:
Removing instruction bitmap_plot_from___b6:
Removing instruction __b16:
Removing instruction __b8:
Removing instruction bitmap_plot_from___b3:
Removing instruction bitmap_plot_from___b9:
Removing instruction __b17:
Removing instruction __b11:
Removing instruction bitmap_plot_from___b4:
Removing instruction __b1_from_spline_8segB:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1_from_bitmap_plot_spline_8seg:
Removing instruction bitmap_line_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn_from_sgn_u16:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b1
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __breturn_from___b1 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b3
Removing instruction jmp __b8
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldy #0 with TAY
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Fixing long branch [974] bne __b1 to beq
Fixing long branch [589] beq __b4 to bne

FINAL SYMBOL TABLE
(const nomodify byte*) BITMAP_GRAPHICS = (byte*) 24576
(const nomodify byte*) BITMAP_SCREEN = (byte*) 23552
(const nomodify struct MOS6526_CIA*) CIA2 = (struct MOS6526_CIA*) 56576
(const signed byte*) COS = (const signed byte*) SIN+(byte) $40
(const nomodify byte*) D011 = (byte*) 53265
(const nomodify byte*) D018 = (byte*) 53272
(const byte) LINE_TO = (byte) 2
(byte) MOS6526_CIA::INTERRUPT
(byte) MOS6526_CIA::PORT_A
(byte) MOS6526_CIA::PORT_A_DDR
(byte) MOS6526_CIA::PORT_B
(byte) MOS6526_CIA::PORT_B_DDR
(byte) MOS6526_CIA::SERIAL_DATA
(word) MOS6526_CIA::TIMER_A
(byte) MOS6526_CIA::TIMER_A_CONTROL
(word) MOS6526_CIA::TIMER_B
(byte) MOS6526_CIA::TIMER_B_CONTROL
(byte) MOS6526_CIA::TOD_10THS
(byte) MOS6526_CIA::TOD_HOURS
(byte) MOS6526_CIA::TOD_MIN
(byte) MOS6526_CIA::TOD_SEC
(byte) MOS6569_VICII::BG_COLOR
(byte) MOS6569_VICII::BG_COLOR1
(byte) MOS6569_VICII::BG_COLOR2
(byte) MOS6569_VICII::BG_COLOR3
(byte) MOS6569_VICII::BORDER_COLOR
(byte) MOS6569_VICII::CONTROL1
(byte) MOS6569_VICII::CONTROL2
(byte) MOS6569_VICII::IRQ_ENABLE
(byte) MOS6569_VICII::IRQ_STATUS
(byte) MOS6569_VICII::LIGHTPEN_X
(byte) MOS6569_VICII::LIGHTPEN_Y
(byte) MOS6569_VICII::MEMORY
(byte) MOS6569_VICII::RASTER
(byte) MOS6569_VICII::SPRITE0_COLOR
(byte) MOS6569_VICII::SPRITE0_X
(byte) MOS6569_VICII::SPRITE0_Y
(byte) MOS6569_VICII::SPRITE1_COLOR
(byte) MOS6569_VICII::SPRITE1_X
(byte) MOS6569_VICII::SPRITE1_Y
(byte) MOS6569_VICII::SPRITE2_COLOR
(byte) MOS6569_VICII::SPRITE2_X
(byte) MOS6569_VICII::SPRITE2_Y
(byte) MOS6569_VICII::SPRITE3_COLOR
(byte) MOS6569_VICII::SPRITE3_X
(byte) MOS6569_VICII::SPRITE3_Y
(byte) MOS6569_VICII::SPRITE4_COLOR
(byte) MOS6569_VICII::SPRITE4_X
(byte) MOS6569_VICII::SPRITE4_Y
(byte) MOS6569_VICII::SPRITE5_COLOR
(byte) MOS6569_VICII::SPRITE5_X
(byte) MOS6569_VICII::SPRITE5_Y
(byte) MOS6569_VICII::SPRITE6_COLOR
(byte) MOS6569_VICII::SPRITE6_X
(byte) MOS6569_VICII::SPRITE6_Y
(byte) MOS6569_VICII::SPRITE7_COLOR
(byte) MOS6569_VICII::SPRITE7_X
(byte) MOS6569_VICII::SPRITE7_Y
(byte) MOS6569_VICII::SPRITES_BG_COLLISION
(byte) MOS6569_VICII::SPRITES_COLLISION
(byte) MOS6569_VICII::SPRITES_ENABLE
(byte) MOS6569_VICII::SPRITES_EXPAND_X
(byte) MOS6569_VICII::SPRITES_EXPAND_Y
(byte) MOS6569_VICII::SPRITES_MC
(byte) MOS6569_VICII::SPRITES_MCOLOR1
(byte) MOS6569_VICII::SPRITES_MCOLOR2
(byte) MOS6569_VICII::SPRITES_PRIORITY
(byte) MOS6569_VICII::SPRITES_XMSB
(byte) MOS6581_SID::CH1_ATTACK_DECAY
(byte) MOS6581_SID::CH1_CONTROL
(word) MOS6581_SID::CH1_FREQ
(word) MOS6581_SID::CH1_PULSE_WIDTH
(byte) MOS6581_SID::CH1_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH2_ATTACK_DECAY
(byte) MOS6581_SID::CH2_CONTROL
(word) MOS6581_SID::CH2_FREQ
(word) MOS6581_SID::CH2_PULSE_WIDTH
(byte) MOS6581_SID::CH2_SUSTAIN_RELEASE
(byte) MOS6581_SID::CH3_ATTACK_DECAY
(byte) MOS6581_SID::CH3_CONTROL
(byte) MOS6581_SID::CH3_ENV
(word) MOS6581_SID::CH3_FREQ
(byte) MOS6581_SID::CH3_OSC
(word) MOS6581_SID::CH3_PULSE_WIDTH
(byte) MOS6581_SID::CH3_SUSTAIN_RELEASE
(byte) MOS6581_SID::FILTER_CUTOFF_HIGH
(byte) MOS6581_SID::FILTER_CUTOFF_LOW
(byte) MOS6581_SID::FILTER_SETUP
(byte) MOS6581_SID::POT_X
(byte) MOS6581_SID::POT_Y
(byte) MOS6581_SID::VOLUME_FILTER_MODE
(const byte) MOVE_TO = (byte) 0
(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = (byte) 2
(const byte) OFFSET_STRUCT_SEGMENT_TO = (byte) 1
(const byte) OFFSET_STRUCT_SEGMENT_VIA = (byte) 5
(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y = (byte) 2
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(const nomodify byte*) RASTER = (byte*) 53266
(const signed byte*) SIN[(number) $140]  = kickasm {{ .for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))
 }}
(const byte) SIZEOF_STRUCT_SPLINEVECTOR16 = (byte) 4
(const struct SplineVector16*) SPLINE_8SEG[(number) 9]  = { fill( 9, 0) }
(const byte) SPLINE_TO = (byte) 1
(const byte) Segment::SegmentType::LINE_TO = (byte) 2
(const byte) Segment::SegmentType::MOVE_TO = (byte) 0
(const byte) Segment::SegmentType::SPLINE_TO = (byte) 1
(struct SplineVector16) Segment::to
(byte) Segment::type
(struct SplineVector16) Segment::via
(signed word) SplineVector16::x
(signed word) SplineVector16::y
(signed dword) SplineVector32::x
(signed dword) SplineVector32::y
(const nomodify byte) VIC_BMM = (byte) $20
(const nomodify byte) VIC_DEN = (byte) $10
(const nomodify byte) VIC_RSEL = (byte) 8
(const nomodify byte) WHITE = (byte) 1
(word()) abs_u16((word) abs_u16::w)
(byte~) abs_u16::$0 reg byte a 2.0000000002E10
(byte~) abs_u16::$1 reg byte a 2.0000000002E10
(label) abs_u16::@1
(label) abs_u16::@return
(word) abs_u16::return
(word) abs_u16::return#0 return zp[2]:29 2.000000002E9
(word) abs_u16::return#1 return zp[2]:29 2.000000002E9
(word) abs_u16::return#2 return zp[2]:29 2.0000000002E10
(word) abs_u16::return#4 return zp[2]:29 5.500000001E9
(word) abs_u16::w
(word) abs_u16::w#0 w zp[2]:29 2.000000002E9
(word) abs_u16::w#1 w zp[2]:29 2.000000002E9
(word) abs_u16::w#2 w zp[2]:29 8.00000000125E9
(void()) bitmap_clear((byte) bitmap_clear::bgcol , (byte) bitmap_clear::fgcol)
(label) bitmap_clear::@1
(label) bitmap_clear::@return
(byte) bitmap_clear::bgcol
(byte) bitmap_clear::col
(const byte) bitmap_clear::col#0 col = (const nomodify byte) WHITE<<(byte) 4
(byte) bitmap_clear::fgcol
(byte*) bitmap_gfx
(void()) bitmap_init((byte*) bitmap_init::gfx , (byte*) bitmap_init::screen)
(byte~) bitmap_init::$4 reg byte a 202.0
(byte~) bitmap_init::$5 reg byte a 202.0
(byte~) bitmap_init::$6 reg byte a 202.0
(byte~) bitmap_init::$7 zp[1]:24 50.5
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte a 101.0
(byte) bitmap_init::bits#3 reg byte a 151.5
(byte) bitmap_init::bits#4 reg byte a 67.33333333333333
(byte*) bitmap_init::gfx
(byte*) bitmap_init::screen
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 151.5
(byte) bitmap_init::x#2 reg byte x 50.5
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 151.5
(byte) bitmap_init::y#2 reg byte x 50.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp[2]:8 202.0
(byte*) bitmap_init::yoffs#2 yoffs zp[2]:8 63.125
(byte*) bitmap_init::yoffs#4 yoffs zp[2]:8 101.0
(void()) bitmap_line((word) bitmap_line::x1 , (word) bitmap_line::y1 , (word) bitmap_line::x2 , (word) bitmap_line::y2)
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@12
(label) bitmap_line::@13
(label) bitmap_line::@14
(label) bitmap_line::@15
(label) bitmap_line::@16
(label) bitmap_line::@17
(label) bitmap_line::@18
(label) bitmap_line::@2
(label) bitmap_line::@3
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@6
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@9
(label) bitmap_line::@return
(word) bitmap_line::dx
(word) bitmap_line::dx#0 dx zp[2]:33 7.5100000000175E10
(word) bitmap_line::dy
(word) bitmap_line::dy#0 dy zp[2]:29 8.34444444446389E10
(word) bitmap_line::e
(word) bitmap_line::e#0 e zp[2]:16 2.000000002E9
(word) bitmap_line::e#1 e zp[2]:16 1.3333333333346667E12
(word) bitmap_line::e#2 e zp[2]:16 2.000000000002E12
(word) bitmap_line::e#3 e zp[2]:16 4.0020000000060004E11
(word) bitmap_line::e#6 e zp[2]:16 1.5000000000015E12
(word) bitmap_line::e1
(word) bitmap_line::e1#0 e1 zp[2]:18 2.000000002E9
(word) bitmap_line::e1#1 e1 zp[2]:18 1.3333333333346667E12
(word) bitmap_line::e1#2 e1 zp[2]:18 2.000000000002E12
(word) bitmap_line::e1#3 e1 zp[2]:18 4.0020000000060004E11
(word) bitmap_line::e1#6 e1 zp[2]:18 1.5000000000015E12
(word) bitmap_line::sx
(word) bitmap_line::sx#0 sx zp[2]:35 6.670000000009999E10
(word) bitmap_line::sy
(word) bitmap_line::sy#0 sy zp[2]:31 7.696153846165384E10
(word) bitmap_line::x
(word) bitmap_line::x#0 x zp[2]:4 2.318186366818182E8
(word) bitmap_line::x#1 x zp[2]:4 1.000000000001E12
(word) bitmap_line::x#12 x zp[2]:4 2.000000000002E12
(word) bitmap_line::x#13 x zp[2]:4 5.715714285721428E11
(word) bitmap_line::x#15 x zp[2]:4 5.714285714291428E11
(word) bitmap_line::x#6 x zp[2]:4 2.001000000003E12
(word) bitmap_line::x#7 x zp[2]:4 7.50250000001E11
(word) bitmap_line::x1
(word) bitmap_line::x1#0 x1 zp[2]:4 5000.5
(word) bitmap_line::x1#1 x1 zp[2]:4 5.00000005E7
(word) bitmap_line::x2
(word) bitmap_line::x2#0 x2 zp[2]:12 10001.0
(word) bitmap_line::x2#10 x2 zp[2]:12 3.131562531265625E10
(word) bitmap_line::x2#13 x2 zp[2]:12 1.00000001E8
(word) bitmap_line::y
(word) bitmap_line::y#0 y zp[2]:6 1.7826130460869563E8
(word) bitmap_line::y#1 y zp[2]:6 5.714285714291428E11
(word) bitmap_line::y#13 y zp[2]:6 2.000000000002E12
(word) bitmap_line::y#15 y zp[2]:6 4.287142857148571E11
(word) bitmap_line::y#2 y zp[2]:6 1.000000000001E12
(word) bitmap_line::y#4 y zp[2]:6 5.0025000000075E11
(word) bitmap_line::y#7 y zp[2]:6 1.000000000001E12
(word) bitmap_line::y1
(word) bitmap_line::y1#0 y1 zp[2]:6 6667.333333333333
(word) bitmap_line::y1#1 y1 zp[2]:6 6.6666667333333336E7
(word) bitmap_line::y2
(word) bitmap_line::y2#0 y2 zp[2]:14 20002.0
(word) bitmap_line::y2#11 y2 zp[2]:14 3.131562531265625E10
(word) bitmap_line::y2#13 y2 zp[2]:14 2.00000002E8
(void()) bitmap_plot((word) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0 zp[2]:44 2.0000000000002E13
(byte~) bitmap_plot::$1 reg byte x 2.0000000000002E13
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 plotter zp[2]:42 5.0000000000005E12
(byte*) bitmap_plot::plotter#1 plotter zp[2]:42 1.50000000000015E13
(word) bitmap_plot::x
(word) bitmap_plot::x#0 x zp[2]:4 1.000000001E9
(word) bitmap_plot::x#1 x zp[2]:4 1.000000000001E12
(word) bitmap_plot::x#2 x zp[2]:4 1.000000001E9
(word) bitmap_plot::x#3 x zp[2]:4 1.000000000001E12
(word) bitmap_plot::x#4 x zp[2]:4 5.5005000000015E12
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte a 2.000000002E9
(byte) bitmap_plot::y#1 reg byte a 2.000000000002E12
(byte) bitmap_plot::y#2 reg byte a 2.000000002E9
(byte) bitmap_plot::y#3 reg byte a 2.000000000002E12
(byte) bitmap_plot::y#4 reg byte a 2.2002000000006E13
(const to_nomodify byte*) bitmap_plot_bit[(number) $100]  = { fill( $100, 0) }
(void()) bitmap_plot_spline_8seg()
(byte~) bitmap_plot_spline_8seg::$4 zp[1]:37 4.285714328571428E7
(label) bitmap_plot_spline_8seg::@1
(label) bitmap_plot_spline_8seg::@2
(label) bitmap_plot_spline_8seg::@return
(signed word) bitmap_plot_spline_8seg::current_x
(signed word) bitmap_plot_spline_8seg::current_x#0 current_x zp[2]:4 100001.0
(signed word) bitmap_plot_spline_8seg::current_x#1 current_x zp[2]:4 5.00000005E7
(signed word) bitmap_plot_spline_8seg::current_x#2 current_x zp[2]:4 5.0050001E7
(signed word) bitmap_plot_spline_8seg::current_y
(signed word) bitmap_plot_spline_8seg::current_y#0 current_y zp[2]:6 200002.0
(signed word) bitmap_plot_spline_8seg::current_y#1 current_y zp[2]:6 6.6666667333333336E7
(signed word) bitmap_plot_spline_8seg::current_y#2 current_y zp[2]:6 3.3366667333333336E7
(byte) bitmap_plot_spline_8seg::n
(byte) bitmap_plot_spline_8seg::n#1 n zp[1]:24 1.500000015E8
(byte) bitmap_plot_spline_8seg::n#2 n zp[1]:24 3.3333333666666664E7
(const to_nomodify byte*) bitmap_plot_yhi[(number) $100]  = { fill( $100, 0) }
(const to_nomodify byte*) bitmap_plot_ylo[(number) $100]  = { fill( $100, 0) }
(byte*) bitmap_screen
(const struct Segment*) letter_c[(number) $16]  = { { type: (const byte) MOVE_TO, to: { x: (signed word) $6c, y: (signed word) $92 }, via: { x: (signed word) 0, y: (signed word) 0 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $59, y: (signed word) $b6 }, via: { x: (signed word) $67, y: (signed word) $a9 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $3b, y: (signed word) $c3 }, via: { x: (signed word) $4b, y: (signed word) $c3 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $17, y: (signed word) $b2 }, via: { x: (signed word) $26, y: (signed word) $c3 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) 9, y: (signed word) $84 }, via: { x: (signed word) 9, y: (signed word) $a1 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $19, y: (signed word) $57 }, via: { x: (signed word) 9, y: (signed word) $68 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $41, y: (signed word) $45 }, via: { x: (signed word) $2a, y: (signed word) $45 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $5d, y: (signed word) $4f }, via: { x: (signed word) $52, y: (signed word) $45 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $69, y: (signed word) $62 }, via: { x: (signed word) $69, y: (signed word) $58 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $66, y: (signed word) $6a }, via: { x: (signed word) $69, y: (signed word) $67 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $5d, y: (signed word) $6d }, via: { x: (signed word) $62, y: (signed word) $6d } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $51, y: (signed word) $68 }, via: { x: (signed word) $55, y: (signed word) $6d } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $4e, y: (signed word) $5d }, via: { x: (signed word) $4f, y: (signed word) $65 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $49, y: (signed word) $52 }, via: { x: (signed word) $4e, y: (signed word) $56 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $3d, y: (signed word) $4e }, via: { x: (signed word) $45, y: (signed word) $4e } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $28, y: (signed word) $58 }, via: { x: (signed word) $30, y: (signed word) $4e } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $1d, y: (signed word) $79 }, via: { x: (signed word) $1d, y: (signed word) $64 } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $28, y: (signed word) $9e }, via: { x: (signed word) $1d, y: (signed word) $8e } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $44, y: (signed word) $ae }, via: { x: (signed word) $32, y: (signed word) $ae } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $5b, y: (signed word) $a6 }, via: { x: (signed word) $50, y: (signed word) $ae } }, { type: (const byte) SPLINE_TO, to: { x: (signed word) $68, y: (signed word) $90 }, via: { x: (signed word) $62, y: (signed word) $a0 } }, { type: (const byte) LINE_TO, to: { x: (signed word) $6c, y: (signed word) $92 }, via: { x: (signed word) 0, y: (signed word) 0 } } }
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::angle
(byte) main::angle#1 angle zp[1]:2 22.0
(byte) main::angle#2 angle zp[1]:2 3.3000000000000003
(label) main::toD0181
(byte*) main::toD0181_gfx
(byte) main::toD0181_return
(const byte) main::toD0181_return#0 toD0181_return = >(word)(const nomodify byte*) BITMAP_SCREEN&(word) $3fff*(byte) 4|>(word)(const nomodify byte*) BITMAP_GRAPHICS/(byte) 4&(byte) $f
(byte*) main::toD0181_screen
(label) main::vicSelectGfxBank1
(label) main::vicSelectGfxBank1_@1
(byte*) main::vicSelectGfxBank1_gfx
(label) main::vicSelectGfxBank1_toDd001
(byte*) main::vicSelectGfxBank1_toDd001_gfx
(byte) main::vicSelectGfxBank1_toDd001_return
(const byte) main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = (byte) 3^>(word)(const nomodify byte*) BITMAP_SCREEN/(byte) $40
(byte) main::w
(byte) main::w#1 reg byte x 151.5
(byte) main::w#4 reg byte x 734.6666666666666
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 12500.125
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:12 200002.0
(byte*) memset::dst#2 dst zp[2]:12 133668.3333333333
(byte*) memset::dst#4 dst zp[2]:12 2002.0
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:10 16833.666666666664
(word) memset::num
(word) memset::num#2 num zp[2]:10 1001.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:12
(signed dword()) mulf16s((signed word) mulf16s::a , (signed word) mulf16s::b)
(word~) mulf16s::$11 zp[2]:40 2000002.0
(word~) mulf16s::$12 zp[2]:42 2000002.0
(word~) mulf16s::$6 zp[2]:40 2000002.0
(word~) mulf16s::$9 zp[2]:42 2000002.0
(label) mulf16s::@1
(label) mulf16s::@2
(label) mulf16s::@3
(label) mulf16s::@4
(label) mulf16s::@5
(label) mulf16s::@return
(signed word) mulf16s::a
(signed word) mulf16s::a#0 a zp[2]:16 100001.0
(signed word) mulf16s::a#1 a zp[2]:16 100001.0
(signed word) mulf16s::a#2 a zp[2]:16 100001.0
(signed word) mulf16s::a#3 a zp[2]:16 100001.0
(signed word) mulf16s::a#4 a zp[2]:16 107692.69230769231
(signed word) mulf16s::b
(signed word) mulf16s::b#0 b zp[2]:18 200002.0
(signed word) mulf16s::b#1 b zp[2]:18 200002.0
(signed word) mulf16s::b#2 b zp[2]:18 200002.0
(signed word) mulf16s::b#3 b zp[2]:18 200002.0
(signed word) mulf16s::b#4 b zp[2]:18 127273.18181818182
(dword) mulf16s::m
(dword) mulf16s::m#0 m zp[4]:20 1000001.0
(dword) mulf16s::m#1 m zp[4]:20 2000002.0
(dword) mulf16s::m#2 m zp[4]:20 2000002.0
(dword) mulf16s::m#4 m zp[4]:20 2000002.0
(dword) mulf16s::m#5 m zp[4]:20 1250001.25
(signed dword) mulf16s::return
(signed dword) mulf16s::return#0 return zp[4]:20 233334.1666666667
(signed dword) mulf16s::return#10 return zp[4]:20 200002.0
(signed dword) mulf16s::return#2 return zp[4]:20 200002.0
(signed dword) mulf16s::return#3 return zp[4]:20 200002.0
(signed dword) mulf16s::return#4 return zp[4]:20 200002.0
(dword()) mulf16u((word) mulf16u::a , (word) mulf16u::b)
(label) mulf16u::@return
(word) mulf16u::a
(word) mulf16u::a#0 a zp[2]:42 5500001.0
(word) mulf16u::b
(word) mulf16u::b#0 b zp[2]:38 5500001.0
(const nomodify word*) mulf16u::memA = (word*) 248
(const nomodify word*) mulf16u::memB = (word*) 250
(const nomodify dword*) mulf16u::memR = (dword*) 252
(dword) mulf16u::return
(dword) mulf16u::return#0 return zp[4]:20 3666667.333333333
(dword) mulf16u::return#2 return zp[4]:20 2000002.0
(void()) mulf_init()
(byte~) mulf_init::$1 reg byte a 202.0
(byte~) mulf_init::$4 reg byte a 202.0
(byte~) mulf_init::$5 reg byte a 202.0
(label) mulf_init::@1
(label) mulf_init::@2
(label) mulf_init::@3
(label) mulf_init::@4
(label) mulf_init::@5
(label) mulf_init::@6
(label) mulf_init::@7
(label) mulf_init::@8
(label) mulf_init::@9
(label) mulf_init::@return
(byte) mulf_init::c
(byte) mulf_init::c#1 c zp[1]:3 23.307692307692307
(byte) mulf_init::c#2 c zp[1]:3 101.0
(byte) mulf_init::dir
(byte) mulf_init::dir#2 dir zp[1]:24 37.875
(byte) mulf_init::dir#4 dir zp[1]:24 101.0
(word) mulf_init::sqr
(word) mulf_init::sqr#1 sqr zp[2]:12 101.0
(word) mulf_init::sqr#2 sqr zp[2]:12 202.0
(word) mulf_init::sqr#3 sqr zp[2]:12 84.16666666666666
(word) mulf_init::sqr#4 sqr zp[2]:12 50.5
(byte*) mulf_init::sqr1_hi
(byte*) mulf_init::sqr1_hi#1 sqr1_hi zp[2]:4 67.33333333333333
(byte*) mulf_init::sqr1_hi#2 sqr1_hi zp[2]:4 25.25
(byte*) mulf_init::sqr1_lo
(byte*) mulf_init::sqr1_lo#1 sqr1_lo zp[2]:8 202.0
(byte*) mulf_init::sqr1_lo#2 sqr1_lo zp[2]:8 28.857142857142858
(byte*) mulf_init::sqr2_hi
(byte*) mulf_init::sqr2_hi#1 sqr2_hi zp[2]:10 33.666666666666664
(byte*) mulf_init::sqr2_hi#2 sqr2_hi zp[2]:10 75.75
(byte*) mulf_init::sqr2_lo
(byte*) mulf_init::sqr2_lo#1 sqr2_lo zp[2]:6 202.0
(byte*) mulf_init::sqr2_lo#2 sqr2_lo zp[2]:6 44.888888888888886
(byte) mulf_init::x_2
(byte) mulf_init::x_2#1 reg byte x 101.0
(byte) mulf_init::x_2#2 reg byte x 50.5
(byte) mulf_init::x_2#3 reg byte x 60.599999999999994
(byte) mulf_init::x_255
(byte) mulf_init::x_255#1 reg byte x 60.599999999999994
(byte) mulf_init::x_255#2 reg byte x 80.8
(const byte*) mulf_sqr1_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr1_lo[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_hi[(number) $200]  = { fill( $200, 0) }
(const byte*) mulf_sqr2_lo[(number) $200]  = { fill( $200, 0) }
(struct SplineVector16()) rotate((signed word) rotate::vector_x , (signed word) rotate::vector_y , (byte) rotate::angle)
(signed dword~) rotate::$0 zp[4]:20 100001.0
(signed word~) rotate::$10 zp[2]:29 200002.0
(signed word~) rotate::$11 zp[2]:44 200002.0
(signed word~) rotate::$12 zp[2]:31 200002.0
(signed word~) rotate::$13 zp[2]:33 200002.0
(signed dword~) rotate::$2 zp[4]:20 100001.0
(signed dword~) rotate::$4 zp[4]:20 100001.0
(signed word~) rotate::$5 zp[2]:31 200002.0
(signed dword~) rotate::$6 zp[4]:20 100001.0
(signed word~) rotate::$7 zp[2]:33 200002.0
(byte~) rotate::$8 reg byte a 50000.5
(byte~) rotate::$9 reg byte x 50000.5
(label) rotate::@1
(label) rotate::@2
(label) rotate::@3
(label) rotate::@4
(label) rotate::@return
(byte) rotate::angle
(byte) rotate::angle#0 reg byte y 20002.0
(byte) rotate::angle#1 reg byte y 20002.0
(byte) rotate::angle#2 reg byte y 1250.125
(signed word) rotate::cos_a
(signed word) rotate::cos_a#0 cos_a zp[2]:16 37500.375
(struct SplineVector16) rotate::return
(signed word) rotate::return_x
(signed word) rotate::return_x#0 return_x zp[2]:12 10001.0
(signed word) rotate::return_x#1 return_x zp[2]:12 10001.0
(signed word) rotate::return_x#2 return_x zp[2]:12 24000.600000000002
(signed word) rotate::return_y
(signed word) rotate::return_y#0 return_y zp[2]:14 10001.0
(signed word) rotate::return_y#1 return_y zp[2]:14 10001.0
(signed word) rotate::return_y#2 return_y zp[2]:14 20000.5
(signed word) rotate::rotated_x
(signed word) rotate::rotated_y
(signed word) rotate::sin_a
(signed word) rotate::sin_a#0 sin_a zp[2]:16 33333.66666666667
(struct SplineVector16) rotate::vector
(signed word) rotate::vector_x
(signed word) rotate::vector_x#0 vector_x zp[2]:8 6667.333333333333
(signed word) rotate::vector_x#1 vector_x zp[2]:8 6667.333333333333
(signed word) rotate::vector_x#2 vector_x zp[2]:8 8461.692307692309
(signed word) rotate::vector_y
(signed word) rotate::vector_y#0 vector_y zp[2]:10 10001.0
(signed word) rotate::vector_y#1 vector_y zp[2]:10 10001.0
(signed word) rotate::vector_y#2 vector_y zp[2]:10 12222.444444444445
(signed word) rotate::xr
(signed word) rotate::xr#0 xr zp[2]:29 12500.125
(signed word) rotate::xr#1 xr zp[2]:29 22222.444444444445
(signed word) rotate::yr
(signed word) rotate::yr#0 yr zp[2]:44 11764.823529411764
(signed word) rotate::yr#1 yr zp[2]:44 100001.0
(word()) sgn_u16((word) sgn_u16::w)
(byte~) sgn_u16::$0 reg byte a 2.0000000002E10
(byte~) sgn_u16::$1 reg byte a 2.0000000002E10
(label) sgn_u16::@1
(label) sgn_u16::@return
(word) sgn_u16::return
(word) sgn_u16::return#0 return zp[2]:31 2.000000002E9
(word) sgn_u16::return#1 return zp[2]:31 2.000000002E9
(word) sgn_u16::return#4 return zp[2]:31 5.000000005E8
(word) sgn_u16::w
(word) sgn_u16::w#0 w zp[2]:44 2.000000002E9
(word) sgn_u16::w#1 w zp[2]:44 2.000000002E9
(word) sgn_u16::w#2 w zp[2]:44 1.2000000003E10
(void()) show_letter((byte) show_letter::angle)
(byte~) show_letter::$17 zp[1]:24 2069.1724137931037
(byte~) show_letter::$21 reg byte a 20002.0
(label) show_letter::@1
(label) show_letter::@2
(label) show_letter::@3
(label) show_letter::@4
(label) show_letter::@5
(label) show_letter::@6
(label) show_letter::@7
(label) show_letter::@8
(label) show_letter::@9
(label) show_letter::@return
(byte) show_letter::angle
(byte) show_letter::angle#0 angle zp[1]:2 370.6111111111111
(signed word) show_letter::current_x
(signed word) show_letter::current_x#10 current_x_1 zp[2]:25 857.2285714285714
(signed word) show_letter::current_x#11 current_x zp[2]:4 10001.0
(signed word) show_letter::current_x#4 current_x zp[2]:4 588.2941176470588
(signed word) show_letter::current_y
(signed word) show_letter::current_y#10 current_y_1 zp[2]:27 857.2285714285714
(signed word) show_letter::current_y#11 current_y zp[2]:6 20002.0
(signed word) show_letter::current_y#4 current_y zp[2]:6 555.6111111111111
(byte) show_letter::i
(byte) show_letter::i#1 i zp[1]:3 7500.75
(byte) show_letter::i#10 i zp[1]:3 833.4166666666666
(struct SplineVector16) show_letter::segment_to
(signed word) show_letter::segment_to_x
(signed word) show_letter::segment_to_y
(byte) show_letter::segment_type
(byte) show_letter::segment_type#0 reg byte a 15001.5
(struct SplineVector16) show_letter::segment_via
(signed word) show_letter::segment_via_x
(signed word) show_letter::segment_via_x#0 segment_via_x zp[2]:12 2857.4285714285716
(signed word) show_letter::segment_via_y
(signed word) show_letter::segment_via_y#0 segment_via_y zp[2]:14 2857.4285714285716
(signed word) show_letter::to_x
(signed word) show_letter::to_x#0 to_x zp[2]:8 10001.0
(signed word) show_letter::to_x#1 to_x zp[2]:8 10001.0
(signed word) show_letter::to_x#2 to_x_1 zp[2]:12 10001.0
(signed word) show_letter::to_y
(signed word) show_letter::to_y#0 to_y zp[2]:10 10001.0
(signed word) show_letter::to_y#1 to_y zp[2]:10 10001.0
(signed word) show_letter::to_y#2 to_y_1 zp[2]:14 10001.0
(signed word) show_letter::via_x
(signed word) show_letter::via_x#0 via_x zp[2]:8 10001.0
(signed word) show_letter::via_x#1 via_x zp[2]:8 10001.0
(signed word) show_letter::via_x#2 via_x_1 zp[2]:12 10001.0
(signed word) show_letter::via_y
(signed word) show_letter::via_y#0 via_y zp[2]:10 10001.0
(signed word) show_letter::via_y#1 via_y zp[2]:10 10001.0
(signed word) show_letter::via_y#2 via_y_1 zp[2]:14 10001.0
(void()) spline_8segB((signed word) spline_8segB::p0_x , (signed word) spline_8segB::p0_y , (signed word) spline_8segB::p1_x , (signed word) spline_8segB::p1_y , (signed word) spline_8segB::p2_x , (signed word) spline_8segB::p2_y)
(signed word~) spline_8segB::$0 zp[2]:35 200002.0
(signed word~) spline_8segB::$1 zp[2]:35 200002.0
(signed word~) spline_8segB::$10 zp[2]:12 200002.0
(signed word~) spline_8segB::$12 zp[2]:14 200002.0
(signed word~) spline_8segB::$18 zp[2]:4 200002.0
(signed word~) spline_8segB::$19 zp[2]:4 66667.33333333333
(signed word~) spline_8segB::$20 zp[2]:6 200002.0
(signed word~) spline_8segB::$21 zp[2]:6 100001.0
(signed word~) spline_8segB::$22 zp[2]:38 2.00000002E8
(signed word~) spline_8segB::$23 zp[2]:38 5.00000005E7
(signed word~) spline_8segB::$24 zp[2]:40 2.00000002E8
(signed word~) spline_8segB::$25 zp[2]:40 6.6666667333333336E7
(signed word~) spline_8segB::$3 zp[2]:42 200002.0
(byte~) spline_8segB::$31 reg byte x 1.500000015E8
(signed word~) spline_8segB::$4 zp[2]:42 200002.0
(signed word~) spline_8segB::$6 zp[2]:12 200002.0
(signed word~) spline_8segB::$8 zp[2]:14 200002.0
(label) spline_8segB::@1
(label) spline_8segB::@2
(label) spline_8segB::@return
(signed word) spline_8segB::a_x
(signed word) spline_8segB::a_x#0 a_x zp[2]:35 25000.25
(signed word) spline_8segB::a_y
(signed word) spline_8segB::a_y#0 a_y zp[2]:42 30000.300000000003
(signed word) spline_8segB::b_x
(signed word) spline_8segB::b_x#0 b_x zp[2]:12 66667.33333333333
(signed word) spline_8segB::b_y
(signed word) spline_8segB::b_y#0 b_y zp[2]:14 66667.33333333333
(signed word) spline_8segB::i_x
(signed word) spline_8segB::i_x#0 i_x zp[2]:12 28571.714285714286
(signed word) spline_8segB::i_x#1 i_x zp[2]:12 5.00000005E7
(signed word) spline_8segB::i_x#2 i_x zp[2]:12 3.00100004E7
(signed word) spline_8segB::i_y
(signed word) spline_8segB::i_y#0 i_y zp[2]:14 40000.4
(signed word) spline_8segB::i_y#1 i_y zp[2]:14 6.6666667333333336E7
(signed word) spline_8segB::i_y#2 i_y zp[2]:14 2.7281818545454547E7
(signed word) spline_8segB::j_x
(signed word) spline_8segB::j_x#0 j_x zp[2]:35 5561111.222222222
(signed word) spline_8segB::j_y
(signed word) spline_8segB::j_y#0 j_y zp[2]:42 5888235.411764706
(byte) spline_8segB::n
(byte) spline_8segB::n#1 reg byte y 1.500000015E8
(byte) spline_8segB::n#2 reg byte y 2.500000025E7
(struct SplineVector16) spline_8segB::p0
(signed word) spline_8segB::p0_x
(signed word) spline_8segB::p0_x#0 p0_x zp[2]:4 14091.090909090908
(signed word) spline_8segB::p0_y
(signed word) spline_8segB::p0_y#0 p0_y zp[2]:6 14091.090909090908
(struct SplineVector16) spline_8segB::p1
(signed word) spline_8segB::p1_x
(signed word) spline_8segB::p1_x#0 p1_x zp[2]:12 21000.300000000003
(signed word) spline_8segB::p1_y
(signed word) spline_8segB::p1_y#0 p1_y zp[2]:14 19091.181818181816
(struct SplineVector16) spline_8segB::p2
(signed word) spline_8segB::p2_x
(signed word) spline_8segB::p2_x#0 p2_x zp[2]:25 36667.33333333333
(signed word) spline_8segB::p2_y
(signed word) spline_8segB::p2_y#0 p2_y zp[2]:27 22000.4
(signed word) spline_8segB::p_x
(signed word) spline_8segB::p_x#0 p_x zp[2]:4 100001.0
(signed word) spline_8segB::p_x#1 p_x zp[2]:4 3.33500005E7
(signed word) spline_8segB::p_x#2 p_x zp[2]:4 3.75125005E7
(signed word) spline_8segB::p_y
(signed word) spline_8segB::p_y#0 p_y zp[2]:6 200002.0
(signed word) spline_8segB::p_y#1 p_y zp[2]:6 2.8585714714285716E7
(signed word) spline_8segB::p_y#2 p_y zp[2]:6 3.3344444888888888E7

zp[1]:2 [ main::angle#2 main::angle#1 show_letter::angle#0 ]
reg byte x [ main::w#4 main::w#1 ]
reg byte x [ mulf_init::x_2#3 mulf_init::x_2#2 mulf_init::x_2#1 ]
reg byte x [ mulf_init::x_255#2 mulf_init::x_255#1 ]
reg byte a [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[1]:3 [ show_letter::i#10 show_letter::i#1 mulf_init::c#2 mulf_init::c#1 ]
zp[2]:4 [ show_letter::current_x#4 show_letter::current_x#11 bitmap_line::x#7 bitmap_line::x#6 bitmap_line::x#15 bitmap_line::x#13 bitmap_line::x#0 bitmap_line::x1#1 bitmap_line::x1#0 bitmap_line::x#12 bitmap_line::x#1 bitmap_plot::x#4 bitmap_plot::x#2 bitmap_plot::x#0 bitmap_plot::x#1 bitmap_plot::x#3 spline_8segB::p0_x#0 spline_8segB::p_x#2 spline_8segB::p_x#0 spline_8segB::p_x#1 spline_8segB::$18 bitmap_plot_spline_8seg::current_x#2 bitmap_plot_spline_8seg::current_x#0 bitmap_plot_spline_8seg::current_x#1 spline_8segB::$19 mulf_init::sqr1_hi#2 mulf_init::sqr1_hi#1 ]
zp[2]:6 [ show_letter::current_y#4 show_letter::current_y#11 bitmap_line::y#15 bitmap_line::y#7 bitmap_line::y#13 bitmap_line::y#4 bitmap_line::y#0 bitmap_line::y1#1 bitmap_line::y1#0 bitmap_line::y#1 bitmap_line::y#2 spline_8segB::p0_y#0 spline_8segB::p_y#2 spline_8segB::p_y#0 spline_8segB::p_y#1 spline_8segB::$20 bitmap_plot_spline_8seg::current_y#2 bitmap_plot_spline_8seg::current_y#0 bitmap_plot_spline_8seg::current_y#1 spline_8segB::$21 mulf_init::sqr2_lo#2 mulf_init::sqr2_lo#1 ]
reg byte x [ memset::c#4 ]
reg byte y [ rotate::angle#2 rotate::angle#0 rotate::angle#1 ]
zp[2]:8 [ rotate::vector_x#2 rotate::vector_x#0 rotate::vector_x#1 show_letter::to_x#1 show_letter::via_x#1 show_letter::to_x#0 show_letter::via_x#0 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 mulf_init::sqr1_lo#2 mulf_init::sqr1_lo#1 ]
zp[2]:10 [ rotate::vector_y#2 rotate::vector_y#0 rotate::vector_y#1 show_letter::to_y#1 show_letter::via_y#1 show_letter::to_y#0 show_letter::via_y#0 memset::num#2 memset::end#0 mulf_init::sqr2_hi#2 mulf_init::sqr2_hi#1 ]
reg byte y [ spline_8segB::n#2 spline_8segB::n#1 ]
zp[2]:12 [ spline_8segB::i_x#2 spline_8segB::i_x#0 spline_8segB::i_x#1 spline_8segB::$10 spline_8segB::$6 spline_8segB::b_x#0 show_letter::segment_via_x#0 spline_8segB::p1_x#0 rotate::return_x#0 show_letter::to_x#2 rotate::return_x#2 rotate::return_x#1 show_letter::via_x#2 bitmap_line::x2#10 bitmap_line::x2#13 bitmap_line::x2#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 mulf_init::sqr#3 mulf_init::sqr#4 mulf_init::sqr#1 mulf_init::sqr#2 ]
zp[2]:14 [ spline_8segB::i_y#2 spline_8segB::i_y#0 spline_8segB::i_y#1 spline_8segB::$12 spline_8segB::$8 spline_8segB::b_y#0 show_letter::segment_via_y#0 spline_8segB::p1_y#0 rotate::return_y#0 show_letter::to_y#2 rotate::return_y#2 rotate::return_y#1 show_letter::via_y#2 bitmap_line::y2#11 bitmap_line::y2#13 bitmap_line::y2#0 ]
zp[2]:16 [ mulf16s::a#4 mulf16s::a#0 mulf16s::a#1 mulf16s::a#2 mulf16s::a#3 rotate::cos_a#0 rotate::sin_a#0 bitmap_line::e#3 bitmap_line::e#0 bitmap_line::e#6 bitmap_line::e#1 bitmap_line::e#2 ]
zp[2]:18 [ mulf16s::b#4 mulf16s::b#0 mulf16s::b#1 mulf16s::b#2 mulf16s::b#3 bitmap_line::e1#3 bitmap_line::e1#6 bitmap_line::e1#0 bitmap_line::e1#2 bitmap_line::e1#1 ]
zp[4]:20 [ mulf16s::m#4 mulf16s::m#5 mulf16s::m#1 mulf16s::m#0 mulf16s::m#2 mulf16u::return#2 mulf16s::return#0 mulf16s::return#2 rotate::$0 mulf16s::return#3 rotate::$2 mulf16s::return#4 rotate::$4 mulf16s::return#10 rotate::$6 mulf16u::return#0 ]
reg byte a [ bitmap_plot::y#4 bitmap_plot::y#2 bitmap_plot::y#0 bitmap_plot::y#1 bitmap_plot::y#3 ]
reg byte a [ mulf_init::$1 ]
reg byte a [ mulf_init::$4 ]
reg byte a [ mulf_init::$5 ]
reg byte a [ bitmap_init::$4 ]
reg byte a [ bitmap_init::$5 ]
reg byte a [ bitmap_init::$6 ]
reg byte a [ show_letter::$21 ]
zp[1]:24 [ show_letter::$17 bitmap_init::$7 bitmap_plot_spline_8seg::n#2 bitmap_plot_spline_8seg::n#1 mulf_init::dir#2 mulf_init::dir#4 ]
zp[2]:25 [ show_letter::current_x#10 spline_8segB::p2_x#0 ]
zp[2]:27 [ show_letter::current_y#10 spline_8segB::p2_y#0 ]
reg byte a [ show_letter::segment_type#0 ]
zp[2]:29 [ rotate::$10 rotate::xr#0 rotate::xr#1 abs_u16::return#4 abs_u16::return#2 abs_u16::w#2 abs_u16::w#0 abs_u16::w#1 abs_u16::return#0 abs_u16::return#1 bitmap_line::dy#0 ]
zp[2]:31 [ rotate::$12 rotate::$5 sgn_u16::return#4 sgn_u16::return#0 sgn_u16::return#1 bitmap_line::sy#0 ]
reg byte a [ rotate::$8 ]
reg byte x [ rotate::$9 ]
zp[2]:33 [ bitmap_line::dx#0 rotate::$13 rotate::$7 ]
zp[2]:35 [ spline_8segB::$0 spline_8segB::$1 spline_8segB::a_x#0 spline_8segB::j_x#0 bitmap_line::sx#0 ]
reg byte x [ spline_8segB::$31 ]
zp[1]:37 [ bitmap_plot_spline_8seg::$4 ]
zp[2]:38 [ mulf16u::b#0 spline_8segB::$22 spline_8segB::$23 ]
zp[2]:40 [ mulf16s::$6 mulf16s::$11 spline_8segB::$24 spline_8segB::$25 ]
reg byte a [ abs_u16::$0 ]
reg byte a [ abs_u16::$1 ]
reg byte a [ sgn_u16::$0 ]
reg byte a [ sgn_u16::$1 ]
zp[2]:42 [ bitmap_plot::plotter#0 bitmap_plot::plotter#1 mulf16s::$9 mulf16s::$12 mulf16u::a#0 spline_8segB::$3 spline_8segB::$4 spline_8segB::a_y#0 spline_8segB::j_y#0 ]
zp[2]:44 [ bitmap_plot::$0 rotate::$11 rotate::yr#0 rotate::yr#1 sgn_u16::w#2 sgn_u16::w#0 sgn_u16::w#1 ]
reg byte x [ bitmap_plot::$1 ]


FINAL ASSEMBLER
Score: 668854

  // File Comments
// Show a few simple splines using the splines library
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .const WHITE = 1
  .const MOVE_TO = 0
  .const SPLINE_TO = 1
  .const LINE_TO = 2
  .const SIZEOF_STRUCT_SPLINEVECTOR16 = 4
  .const OFFSET_STRUCT_SPLINEVECTOR16_Y = 2
  .const OFFSET_STRUCT_SEGMENT_TO = 1
  .const OFFSET_STRUCT_SEGMENT_VIA = 5
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .label RASTER = $d012
  .label D011 = $d011
  .label D018 = $d018
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  .label BITMAP_SCREEN = $5c00
  .label BITMAP_GRAPHICS = $6000
  .label COS = SIN+$40
  // main
main: {
    .const vicSelectGfxBank1_toDd001_return = 3^(>BITMAP_SCREEN)/$40
    .const toD0181_return = (>(BITMAP_SCREEN&$3fff)*4)|(>BITMAP_GRAPHICS)/4&$f
    .label angle = 2
    // mulf_init()
    // [1] call mulf_init 
    // [23] phi from main to mulf_init [phi:main->mulf_init]
    jsr mulf_init
    // [2] phi from main to main::@8 [phi:main->main::@8]
    // main::@8
    // bitmap_init(BITMAP_GRAPHICS, BITMAP_SCREEN)
    // [3] call bitmap_init 
    // [52] phi from main::@8 to bitmap_init [phi:main::@8->bitmap_init]
    jsr bitmap_init
    // [4] phi from main::@8 to main::@9 [phi:main::@8->main::@9]
    // main::@9
    // bitmap_clear(BLACK, WHITE)
    // [5] call bitmap_clear 
    // [74] phi from main::@9 to bitmap_clear [phi:main::@9->bitmap_clear]
    jsr bitmap_clear
    // main::vicSelectGfxBank1
    // CIA2->PORT_A_DDR = %00000011
    // [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [7] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
    // main::vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_@1
    // CIA2->PORT_A = toDd00(gfx)
    // [8] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    // [9] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
    // main::toD0181
    // main::@7
    // *D018 = toD018(BITMAP_SCREEN, BITMAP_GRAPHICS)
    // [10] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // *D011 = VIC_BMM|VIC_DEN|VIC_RSEL|3
    // [11] *((const nomodify byte*) D011) ← (const nomodify byte) VIC_BMM|(const nomodify byte) VIC_DEN|(const nomodify byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_BMM|VIC_DEN|VIC_RSEL|3
    sta D011
    // [12] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
    // [12] phi (byte) main::angle#2 = (byte) 0 [phi:main::@7->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z angle
    // main::@1
    // [13] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // bitmap_clear(BLACK, WHITE)
    // [14] call bitmap_clear 
    // [74] phi from main::@2 to bitmap_clear [phi:main::@2->bitmap_clear]
    jsr bitmap_clear
    // main::@10
    // show_letter(angle)
    // [15] (byte) show_letter::angle#0 ← (byte) main::angle#2
    // [16] call show_letter 
    // [79] phi from main::@10 to show_letter [phi:main::@10->show_letter]
    jsr show_letter
    // [17] phi from main::@10 to main::@3 [phi:main::@10->main::@3]
    // [17] phi (byte) main::w#4 = (byte) 0 [phi:main::@10->main::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [17] phi from main::@3 main::@5 to main::@3 [phi:main::@3/main::@5->main::@3]
    // [17] phi (byte) main::w#4 = (byte) main::w#4 [phi:main::@3/main::@5->main::@3#0] -- register_copy 
    // main::@3
  __b3:
    // while(*RASTER!=0xfe)
    // [18] if(*((const nomodify byte*) RASTER)!=(byte) $fe) goto main::@3 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$fe
    cmp RASTER
    bne __b3
    // main::@4
  __b4:
    // while(*RASTER!=0xff)
    // [19] if(*((const nomodify byte*) RASTER)!=(byte) $ff) goto main::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b4
    // main::@5
    // for ( byte w: 0..60)
    // [20] (byte) main::w#1 ← ++ (byte) main::w#4 -- vbuxx=_inc_vbuxx 
    inx
    // [21] if((byte) main::w#1!=(byte) $3d) goto main::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$3d
    bne __b3
    // main::@6
    // angle += 9
    // [22] (byte) main::angle#1 ← (byte) main::angle#2 + (byte) 9 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z angle
    axs #-[9]
    stx.z angle
    // [12] phi from main::@6 to main::@1 [phi:main::@6->main::@1]
    // [12] phi (byte) main::angle#2 = (byte) main::angle#1 [phi:main::@6->main::@1#0] -- register_copy 
    jmp __b2
}
  // mulf_init
// Initialize the mulf_sqr multiplication tables with f(x)=int(x*x/4)
mulf_init: {
    // x/2
    .label c = 3
    // Counter used for determining x%2==0
    .label sqr1_hi = 4
    // Fill mulf_sqr1 = f(x) = int(x*x/4): If f(x) = x*x/4 then f(x+1) = f(x) + x/2 + 1/4
    .label sqr = $c
    .label sqr1_lo = 8
    // Decrease or increase x_255 - initially we decrease
    .label sqr2_hi = $a
    .label sqr2_lo = 6
    //Start with g(0)=f(255)
    .label dir = $18
    // [24] phi from mulf_init to mulf_init::@1 [phi:mulf_init->mulf_init::@1]
    // [24] phi (byte) mulf_init::x_2#3 = (byte) 0 [phi:mulf_init->mulf_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [24] phi (byte*) mulf_init::sqr1_hi#2 = (const byte*) mulf_sqr1_hi+(byte) 1 [phi:mulf_init->mulf_init::@1#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_hi+1
    sta.z sqr1_hi
    lda #>mulf_sqr1_hi+1
    sta.z sqr1_hi+1
    // [24] phi (word) mulf_init::sqr#4 = (word) 0 [phi:mulf_init->mulf_init::@1#2] -- vwuz1=vwuc1 
    txa
    sta.z sqr
    sta.z sqr+1
    // [24] phi (byte) mulf_init::c#2 = (byte) 0 [phi:mulf_init->mulf_init::@1#3] -- vbuz1=vbuc1 
    sta.z c
    // [24] phi (byte*) mulf_init::sqr1_lo#2 = (const byte*) mulf_sqr1_lo+(byte) 1 [phi:mulf_init->mulf_init::@1#4] -- pbuz1=pbuc1 
    lda #<mulf_sqr1_lo+1
    sta.z sqr1_lo
    lda #>mulf_sqr1_lo+1
    sta.z sqr1_lo+1
    // mulf_init::@1
  __b1:
    // for(char* sqr1_lo = mulf_sqr1_lo+1; sqr1_lo!=mulf_sqr1_lo+512; sqr1_lo++)
    // [25] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr1_lo+1
    cmp #>mulf_sqr1_lo+$200
    bne __b2
    lda.z sqr1_lo
    cmp #<mulf_sqr1_lo+$200
    bne __b2
    // [26] phi from mulf_init::@1 to mulf_init::@5 [phi:mulf_init::@1->mulf_init::@5]
    // [26] phi (byte) mulf_init::dir#2 = (byte) $ff [phi:mulf_init::@1->mulf_init::@5#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z dir
    // [26] phi (byte*) mulf_init::sqr2_hi#2 = (const byte*) mulf_sqr2_hi [phi:mulf_init::@1->mulf_init::@5#1] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_hi
    sta.z sqr2_hi
    lda #>mulf_sqr2_hi
    sta.z sqr2_hi+1
    // [26] phi (byte) mulf_init::x_255#2 = (byte) -1 [phi:mulf_init::@1->mulf_init::@5#2] -- vbuxx=vbuc1 
    ldx #-1
    // [26] phi (byte*) mulf_init::sqr2_lo#2 = (const byte*) mulf_sqr2_lo [phi:mulf_init::@1->mulf_init::@5#3] -- pbuz1=pbuc1 
    lda #<mulf_sqr2_lo
    sta.z sqr2_lo
    lda #>mulf_sqr2_lo
    sta.z sqr2_lo+1
    // mulf_init::@5
  __b5:
    // for(char* sqr2_lo = mulf_sqr2_lo; sqr2_lo!=mulf_sqr2_lo+511; sqr2_lo++)
    // [27] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6 -- pbuz1_neq_pbuc1_then_la1 
    lda.z sqr2_lo+1
    cmp #>mulf_sqr2_lo+$1ff
    bne __b6
    lda.z sqr2_lo
    cmp #<mulf_sqr2_lo+$1ff
    bne __b6
    // mulf_init::@7
    // *(mulf_sqr2_lo+511) = *(mulf_sqr1_lo+256)
    // [28] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    // Set the very last value g(511) = f(256)
    lda mulf_sqr1_lo+$100
    sta mulf_sqr2_lo+$1ff
    // *(mulf_sqr2_hi+511) = *(mulf_sqr1_hi+256)
    // [29] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100) -- _deref_pbuc1=_deref_pbuc2 
    lda mulf_sqr1_hi+$100
    sta mulf_sqr2_hi+$1ff
    // mulf_init::@return
    // }
    // [30] return 
    rts
    // mulf_init::@6
  __b6:
    // *sqr2_lo = mulf_sqr1_lo[x_255]
    // [31] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_lo,x
    ldy #0
    sta (sqr2_lo),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255]
    // [32] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2) -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda mulf_sqr1_hi,x
    sta (sqr2_hi),y
    // *sqr2_hi++ = mulf_sqr1_hi[x_255];
    // [33] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_hi
    bne !+
    inc.z sqr2_hi+1
  !:
    // x_255 = x_255 + dir
    // [34] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2 -- vbuxx=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z dir
    tax
    // if(x_255==0)
    // [35] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b8
    // [37] phi from mulf_init::@6 to mulf_init::@8 [phi:mulf_init::@6->mulf_init::@8]
    // [37] phi (byte) mulf_init::dir#4 = (byte) 1 [phi:mulf_init::@6->mulf_init::@8#0] -- vbuz1=vbuc1 
    lda #1
    sta.z dir
    // [36] phi from mulf_init::@6 to mulf_init::@9 [phi:mulf_init::@6->mulf_init::@9]
    // mulf_init::@9
    // [37] phi from mulf_init::@9 to mulf_init::@8 [phi:mulf_init::@9->mulf_init::@8]
    // [37] phi (byte) mulf_init::dir#4 = (byte) mulf_init::dir#2 [phi:mulf_init::@9->mulf_init::@8#0] -- register_copy 
    // mulf_init::@8
  __b8:
    // for(char* sqr2_lo = mulf_sqr2_lo; sqr2_lo!=mulf_sqr2_lo+511; sqr2_lo++)
    // [38] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr2_lo
    bne !+
    inc.z sqr2_lo+1
  !:
    // [26] phi from mulf_init::@8 to mulf_init::@5 [phi:mulf_init::@8->mulf_init::@5]
    // [26] phi (byte) mulf_init::dir#2 = (byte) mulf_init::dir#4 [phi:mulf_init::@8->mulf_init::@5#0] -- register_copy 
    // [26] phi (byte*) mulf_init::sqr2_hi#2 = (byte*) mulf_init::sqr2_hi#1 [phi:mulf_init::@8->mulf_init::@5#1] -- register_copy 
    // [26] phi (byte) mulf_init::x_255#2 = (byte) mulf_init::x_255#1 [phi:mulf_init::@8->mulf_init::@5#2] -- register_copy 
    // [26] phi (byte*) mulf_init::sqr2_lo#2 = (byte*) mulf_init::sqr2_lo#1 [phi:mulf_init::@8->mulf_init::@5#3] -- register_copy 
    jmp __b5
    // mulf_init::@2
  __b2:
    // if((++c&1)==0)
    // [39] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // ++c&1
    // [40] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1 -- vbuaa=vbuz1_band_vbuc1 
    lda #1
    and.z c
    // if((++c&1)==0)
    // [41] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b3
    // mulf_init::@4
    // x_2++;
    // [42] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3 -- vbuxx=_inc_vbuxx 
    inx
    // sqr++;
    // [43] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4 -- vwuz1=_inc_vwuz1 
    inc.z sqr
    bne !+
    inc.z sqr+1
  !:
    // [44] phi from mulf_init::@2 mulf_init::@4 to mulf_init::@3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3]
    // [44] phi (byte) mulf_init::x_2#2 = (byte) mulf_init::x_2#3 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#0] -- register_copy 
    // [44] phi (word) mulf_init::sqr#3 = (word) mulf_init::sqr#4 [phi:mulf_init::@2/mulf_init::@4->mulf_init::@3#1] -- register_copy 
    // mulf_init::@3
  __b3:
    // <sqr
    // [45] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3 -- vbuaa=_lo_vwuz1 
    lda.z sqr
    // *sqr1_lo = <sqr
    // [46] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (sqr1_lo),y
    // >sqr
    // [47] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3 -- vbuaa=_hi_vwuz1 
    lda.z sqr+1
    // *sqr1_hi++ = >sqr
    // [48] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5 -- _deref_pbuz1=vbuaa 
    sta (sqr1_hi),y
    // *sqr1_hi++ = >sqr;
    // [49] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_hi
    bne !+
    inc.z sqr1_hi+1
  !:
    // sqr = sqr + x_2
    // [50] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2 -- vwuz1=vwuz1_plus_vbuxx 
    txa
    clc
    adc.z sqr
    sta.z sqr
    bcc !+
    inc.z sqr+1
  !:
    // for(char* sqr1_lo = mulf_sqr1_lo+1; sqr1_lo!=mulf_sqr1_lo+512; sqr1_lo++)
    // [51] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2 -- pbuz1=_inc_pbuz1 
    inc.z sqr1_lo
    bne !+
    inc.z sqr1_lo+1
  !:
    // [24] phi from mulf_init::@3 to mulf_init::@1 [phi:mulf_init::@3->mulf_init::@1]
    // [24] phi (byte) mulf_init::x_2#3 = (byte) mulf_init::x_2#2 [phi:mulf_init::@3->mulf_init::@1#0] -- register_copy 
    // [24] phi (byte*) mulf_init::sqr1_hi#2 = (byte*) mulf_init::sqr1_hi#1 [phi:mulf_init::@3->mulf_init::@1#1] -- register_copy 
    // [24] phi (word) mulf_init::sqr#4 = (word) mulf_init::sqr#1 [phi:mulf_init::@3->mulf_init::@1#2] -- register_copy 
    // [24] phi (byte) mulf_init::c#2 = (byte) mulf_init::c#1 [phi:mulf_init::@3->mulf_init::@1#3] -- register_copy 
    // [24] phi (byte*) mulf_init::sqr1_lo#2 = (byte*) mulf_init::sqr1_lo#1 [phi:mulf_init::@3->mulf_init::@1#4] -- register_copy 
    jmp __b1
}
  // bitmap_init
// Initialize bitmap plotting tables
bitmap_init: {
    .label __7 = $18
    .label yoffs = 8
    // [53] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [53] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [53] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#1] -- vbuaa=vbuc1 
    lda #$80
    // [53] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [53] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [53] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  __b1:
    // bitmap_plot_bit[x] = bits
    // [54] *((const to_nomodify byte*) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_bit,x
    // bits >>= 1
    // [55] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuaa=vbuaa_ror_1 
    lsr
    // if(bits==0)
    // [56] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b2
    // [58] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [58] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuaa=vbuc1 
    lda #$80
    // [57] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [58] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [58] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  __b2:
    // for(char x : 0..255)
    // [59] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [60] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [61] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [61] phi (byte*) bitmap_init::yoffs#2 = (const nomodify byte*) BITMAP_GRAPHICS [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<BITMAP_GRAPHICS
    sta.z yoffs
    lda #>BITMAP_GRAPHICS
    sta.z yoffs+1
    // [61] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    // [61] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [61] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [61] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  __b3:
    // y&$7
    // [62] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __7
    // <yoffs
    // [63] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // y&$7 | <yoffs
    // [64] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$7 | (byte~) bitmap_init::$4 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __7
    // bitmap_plot_ylo[y] = y&$7 | <yoffs
    // [65] *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // >yoffs
    // [66] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // bitmap_plot_yhi[y] = >yoffs
    // [67] *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [68] if((byte~) bitmap_init::$7!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __7
    bne __b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [69] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [70] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [70] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  __b4:
    // for(char y : 0..255)
    // [71] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [72] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // bitmap_init::@return
    // }
    // [73] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
// bgcol - the background color to fill the screen with
// fgcol - the foreground color to fill the screen with
bitmap_clear: {
    .const col = WHITE<<4
    // memset(bitmap_screen, col, 1000uw)
    // [75] call memset 
    // [133] phi from bitmap_clear to memset [phi:bitmap_clear->memset]
    // [133] phi (byte) memset::c#4 = (const byte) bitmap_clear::col#0 [phi:bitmap_clear->memset#0] -- vbuxx=vbuc1 
    ldx #col
    // [133] phi (void*) memset::str#3 = (void*)(const nomodify byte*) BITMAP_SCREEN [phi:bitmap_clear->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_SCREEN
    sta.z memset.str
    lda #>BITMAP_SCREEN
    sta.z memset.str+1
    // [133] phi (word) memset::num#2 = (word) $3e8 [phi:bitmap_clear->memset#2] -- vwuz1=vwuc1 
    lda #<$3e8
    sta.z memset.num
    lda #>$3e8
    sta.z memset.num+1
    jsr memset
    // [76] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // bitmap_clear::@1
    // memset(bitmap_gfx, 0, 8000uw)
    // [77] call memset 
    // [133] phi from bitmap_clear::@1 to memset [phi:bitmap_clear::@1->memset]
    // [133] phi (byte) memset::c#4 = (byte) 0 [phi:bitmap_clear::@1->memset#0] -- vbuxx=vbuc1 
    ldx #0
    // [133] phi (void*) memset::str#3 = (void*)(const nomodify byte*) BITMAP_GRAPHICS [phi:bitmap_clear::@1->memset#1] -- pvoz1=pvoc1 
    lda #<BITMAP_GRAPHICS
    sta.z memset.str
    lda #>BITMAP_GRAPHICS
    sta.z memset.str+1
    // [133] phi (word) memset::num#2 = (word) $1f40 [phi:bitmap_clear::@1->memset#2] -- vwuz1=vwuc1 
    lda #<$1f40
    sta.z memset.num
    lda #>$1f40
    sta.z memset.num+1
    jsr memset
    // bitmap_clear::@return
    // }
    // [78] return 
    rts
}
  // show_letter
// show_letter(byte zp(2) angle)
show_letter: {
    .label __17 = $18
    .label angle = 2
    .label to_x = 8
    .label to_y = $a
    .label to_x_1 = $c
    .label to_y_1 = $e
    .label via_x = 8
    .label via_y = $a
    .label via_x_1 = $c
    .label via_y_1 = $e
    .label segment_via_x = $c
    .label segment_via_y = $e
    .label i = 3
    .label current_x = 4
    .label current_y = 6
    .label current_x_1 = $19
    .label current_y_1 = $1b
    // [80] phi from show_letter to show_letter::@1 [phi:show_letter->show_letter::@1]
    // [80] phi (signed word) show_letter::current_y#4 = (signed word) 0 [phi:show_letter->show_letter::@1#0] -- vwsz1=vwsc1 
    lda #<0
    sta.z current_y
    sta.z current_y+1
    // [80] phi (signed word) show_letter::current_x#4 = (signed word) 0 [phi:show_letter->show_letter::@1#1] -- vwsz1=vwsc1 
    sta.z current_x
    sta.z current_x+1
    // [80] phi (byte) show_letter::i#10 = (byte) 0 [phi:show_letter->show_letter::@1#2] -- vbuz1=vbuc1 
    sta.z i
    // show_letter::@1
  __b1:
    // to = letter_c[i].to
    // [81] (byte~) show_letter::$21 ← (byte) show_letter::i#10 << (byte) 3 -- vbuaa=vbuz1_rol_3 
    lda.z i
    asl
    asl
    asl
    // [82] (byte~) show_letter::$17 ← (byte~) show_letter::$21 + (byte) show_letter::i#10 -- vbuz1=vbuaa_plus_vbuz2 
    clc
    adc.z i
    sta.z __17
    // [83] (signed word) show_letter::to_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    tay
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO,y
    sta.z to_x
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+1,y
    sta.z to_x+1
    // [84] (signed word) show_letter::to_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_TO+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z to_y
    lda letter_c+OFFSET_STRUCT_SEGMENT_TO+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z to_y+1
    // to = { to.x - 50, to.y - 150}
    // [85] (signed word) show_letter::to_x#1 ← (signed word) show_letter::to_x#0 - (signed byte) $32 -- vwsz1=vwsz1_minus_vbsc1 
    lda.z to_x
    sec
    sbc #$32
    sta.z to_x
    lda.z to_x+1
    sbc #>$32
    sta.z to_x+1
    // [86] (signed word) show_letter::to_y#1 ← (signed word) show_letter::to_y#0 - (signed word) $96 -- vwsz1=vwsz1_minus_vwsc1 
    lda.z to_y
    sec
    sbc #<$96
    sta.z to_y
    lda.z to_y+1
    sbc #>$96
    sta.z to_y+1
    // rotate(to, angle)
    // [87] (signed word) rotate::vector_x#0 ← (signed word) show_letter::to_x#1
    // [88] (signed word) rotate::vector_y#0 ← (signed word) show_letter::to_y#1
    // [89] (byte) rotate::angle#0 ← (byte) show_letter::angle#0 -- vbuyy=vbuz1 
    ldy.z angle
    // [90] call rotate 
    // [142] phi from show_letter::@1 to rotate [phi:show_letter::@1->rotate]
    // [142] phi (signed word) rotate::vector_y#2 = (signed word) rotate::vector_y#0 [phi:show_letter::@1->rotate#0] -- register_copy 
    // [142] phi (signed word) rotate::vector_x#2 = (signed word) rotate::vector_x#0 [phi:show_letter::@1->rotate#1] -- register_copy 
    // [142] phi (byte) rotate::angle#2 = (byte) rotate::angle#0 [phi:show_letter::@1->rotate#2] -- register_copy 
    jsr rotate
    // rotate(to, angle)
    // [91] (signed word) rotate::return_x#0 ← (signed word) rotate::return_x#2
    // [92] (signed word) rotate::return_y#0 ← (signed word) rotate::return_y#2
    // show_letter::@6
    // to = rotate(to, angle)
    // [93] (signed word) show_letter::to_x#2 ← (signed word) rotate::return_x#0
    // [94] (signed word) show_letter::to_y#2 ← (signed word) rotate::return_y#0
    // to = { to.x + 100, to.y + 100}
    // [95] (signed word) show_letter::current_x#10 ← (signed word) show_letter::to_x#2 + (signed byte) $64 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z to_x_1
    clc
    adc #<$64
    sta.z current_x_1
    lda.z to_x_1+1
    adc #>$64
    sta.z current_x_1+1
    // [96] (signed word) show_letter::current_y#10 ← (signed word) show_letter::to_y#2 + (signed byte) $64 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z to_y_1
    clc
    adc #<$64
    sta.z current_y_1
    lda.z to_y_1+1
    adc #>$64
    sta.z current_y_1+1
    // via = letter_c[i].via
    // [97] (signed word) show_letter::via_x#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __17
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA,y
    sta.z via_x
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA+1,y
    sta.z via_x+1
    // [98] (signed word) show_letter::via_y#0 ← *((signed word*)(struct SplineVector16*)(const struct Segment*) letter_c+(const byte) OFFSET_STRUCT_SEGMENT_VIA+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) show_letter::$17) -- vwsz1=pwsc1_derefidx_vbuz2 
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z via_y
    lda letter_c+OFFSET_STRUCT_SEGMENT_VIA+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z via_y+1
    // via = { via.x - 50, via.y - 150}
    // [99] (signed word) show_letter::via_x#1 ← (signed word) show_letter::via_x#0 - (signed byte) $32 -- vwsz1=vwsz1_minus_vbsc1 
    lda.z via_x
    sec
    sbc #$32
    sta.z via_x
    lda.z via_x+1
    sbc #>$32
    sta.z via_x+1
    // [100] (signed word) show_letter::via_y#1 ← (signed word) show_letter::via_y#0 - (signed word) $96 -- vwsz1=vwsz1_minus_vwsc1 
    lda.z via_y
    sec
    sbc #<$96
    sta.z via_y
    lda.z via_y+1
    sbc #>$96
    sta.z via_y+1
    // rotate(via, angle)
    // [101] (signed word) rotate::vector_x#1 ← (signed word) show_letter::via_x#1
    // [102] (signed word) rotate::vector_y#1 ← (signed word) show_letter::via_y#1
    // [103] (byte) rotate::angle#1 ← (byte) show_letter::angle#0 -- vbuyy=vbuz1 
    ldy.z angle
    // [104] call rotate 
    // [142] phi from show_letter::@6 to rotate [phi:show_letter::@6->rotate]
    // [142] phi (signed word) rotate::vector_y#2 = (signed word) rotate::vector_y#1 [phi:show_letter::@6->rotate#0] -- register_copy 
    // [142] phi (signed word) rotate::vector_x#2 = (signed word) rotate::vector_x#1 [phi:show_letter::@6->rotate#1] -- register_copy 
    // [142] phi (byte) rotate::angle#2 = (byte) rotate::angle#1 [phi:show_letter::@6->rotate#2] -- register_copy 
    jsr rotate
    // rotate(via, angle)
    // [105] (signed word) rotate::return_x#1 ← (signed word) rotate::return_x#2
    // [106] (signed word) rotate::return_y#1 ← (signed word) rotate::return_y#2
    // show_letter::@7
    // via = rotate(via, angle)
    // [107] (signed word) show_letter::via_x#2 ← (signed word) rotate::return_x#1
    // [108] (signed word) show_letter::via_y#2 ← (signed word) rotate::return_y#1
    // via = { via.x + 100, via.y + 100}
    // [109] (signed word) show_letter::segment_via_x#0 ← (signed word) show_letter::via_x#2 + (signed byte) $64 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z segment_via_x
    clc
    adc #<$64
    sta.z segment_via_x
    lda.z segment_via_x+1
    adc #>$64
    sta.z segment_via_x+1
    // [110] (signed word) show_letter::segment_via_y#0 ← (signed word) show_letter::via_y#2 + (signed byte) $64 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z segment_via_y
    clc
    adc #<$64
    sta.z segment_via_y
    lda.z segment_via_y+1
    adc #>$64
    sta.z segment_via_y+1
    // segment = { letter_c[i].type, to, via}
    // [111] (byte) show_letter::segment_type#0 ← *((byte*)(const struct Segment*) letter_c + (byte~) show_letter::$17) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z __17
    lda letter_c,y
    // if(segment.type==MOVE_TO)
    // [112] if((byte) show_letter::segment_type#0==(const byte) MOVE_TO) goto show_letter::@3 -- vbuaa_eq_vbuc1_then_la1 
    cmp #MOVE_TO
    beq __b3
    // show_letter::@4
    // if(segment.type==SPLINE_TO)
    // [113] if((byte) show_letter::segment_type#0==(const byte) SPLINE_TO) goto show_letter::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #SPLINE_TO
    beq __b2
    // show_letter::@5
    // bitmap_line((unsigned int)current.x, (unsigned int)current.y, (unsigned int)segment.to.x, (unsigned int)segment.to.y)
    // [114] (word) bitmap_line::x1#0 ← (word)(signed word) show_letter::current_x#4
    // [115] (word) bitmap_line::y1#0 ← (word)(signed word) show_letter::current_y#4
    // [116] (word) bitmap_line::x2#0 ← (word)(signed word) show_letter::current_x#10 -- vwuz1=vwuz2 
    lda.z current_x_1
    sta.z bitmap_line.x2
    lda.z current_x_1+1
    sta.z bitmap_line.x2+1
    // [117] (word) bitmap_line::y2#0 ← (word)(signed word) show_letter::current_y#10 -- vwuz1=vwuz2 
    lda.z current_y_1
    sta.z bitmap_line.y2
    lda.z current_y_1+1
    sta.z bitmap_line.y2+1
    // [118] call bitmap_line 
    // [180] phi from show_letter::@5 to bitmap_line [phi:show_letter::@5->bitmap_line]
    // [180] phi (word) bitmap_line::y2#11 = (word) bitmap_line::y2#0 [phi:show_letter::@5->bitmap_line#0] -- register_copy 
    // [180] phi (word) bitmap_line::x2#10 = (word) bitmap_line::x2#0 [phi:show_letter::@5->bitmap_line#1] -- register_copy 
    // [180] phi (word) bitmap_line::y#0 = (word) bitmap_line::y1#0 [phi:show_letter::@5->bitmap_line#2] -- register_copy 
    // [180] phi (word) bitmap_line::x#0 = (word) bitmap_line::x1#0 [phi:show_letter::@5->bitmap_line#3] -- register_copy 
    jsr bitmap_line
    // show_letter::@3
  __b3:
    // for( byte i: 0..21)
    // [119] (byte) show_letter::i#1 ← ++ (byte) show_letter::i#10 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [120] if((byte) show_letter::i#1!=(byte) $16) goto show_letter::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #$16
    cmp.z i
    bne __b9
    // show_letter::@return
    // }
    // [121] return 
    rts
    // show_letter::@9
  __b9:
    // [122] (signed word) show_letter::current_x#11 ← (signed word) show_letter::current_x#10 -- vwsz1=vwsz2 
    lda.z current_x_1
    sta.z current_x
    lda.z current_x_1+1
    sta.z current_x+1
    // [123] (signed word) show_letter::current_y#11 ← (signed word) show_letter::current_y#10 -- vwsz1=vwsz2 
    lda.z current_y_1
    sta.z current_y
    lda.z current_y_1+1
    sta.z current_y+1
    // [80] phi from show_letter::@9 to show_letter::@1 [phi:show_letter::@9->show_letter::@1]
    // [80] phi (signed word) show_letter::current_y#4 = (signed word) show_letter::current_y#11 [phi:show_letter::@9->show_letter::@1#0] -- register_copy 
    // [80] phi (signed word) show_letter::current_x#4 = (signed word) show_letter::current_x#11 [phi:show_letter::@9->show_letter::@1#1] -- register_copy 
    // [80] phi (byte) show_letter::i#10 = (byte) show_letter::i#1 [phi:show_letter::@9->show_letter::@1#2] -- register_copy 
    jmp __b1
    // show_letter::@2
  __b2:
    // spline_8segB(current, segment.via, segment.to)
    // [124] (signed word) spline_8segB::p0_x#0 ← (signed word) show_letter::current_x#4
    // [125] (signed word) spline_8segB::p0_y#0 ← (signed word) show_letter::current_y#4
    // [126] (signed word) spline_8segB::p1_x#0 ← (signed word) show_letter::segment_via_x#0
    // [127] (signed word) spline_8segB::p1_y#0 ← (signed word) show_letter::segment_via_y#0
    // [128] (signed word) spline_8segB::p2_x#0 ← (signed word) show_letter::current_x#10
    // [129] (signed word) spline_8segB::p2_y#0 ← (signed word) show_letter::current_y#10
    // [130] call spline_8segB 
    jsr spline_8segB
    // [131] phi from show_letter::@2 to show_letter::@8 [phi:show_letter::@2->show_letter::@8]
    // show_letter::@8
    // bitmap_plot_spline_8seg()
    // [132] call bitmap_plot_spline_8seg 
    jsr bitmap_plot_spline_8seg
    jmp __b3
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($c) str, byte register(X) c, word zp($a) num)
memset: {
    .label end = $a
    .label dst = $c
    .label num = $a
    .label str = $c
    // if(num>0)
    // [134] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [135] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [136] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [137] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [137] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [138] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [139] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [140] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [141] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // rotate
// 2D-rotate a vector by an angle
// rotate(signed word zp(8) vector_x, signed word zp($a) vector_y, byte register(Y) angle)
rotate: {
    .label __0 = $14
    .label __2 = $14
    .label __4 = $14
    .label __5 = $1f
    .label __6 = $14
    .label __7 = $21
    .label __10 = $1d
    .label __11 = $2c
    .label __12 = $1f
    .label __13 = $21
    .label vector_x = 8
    .label vector_y = $a
    .label return_x = $c
    .label return_y = $e
    .label cos_a = $10
    .label xr = $1d
    .label yr = $2c
    .label sin_a = $10
    // cos_a = (signed int) COS[angle]
    // [143] (signed word) rotate::cos_a#0 ← (signed word)*((const signed byte*) COS + (byte) rotate::angle#2) -- vwsz1=_sword_pbsc1_derefidx_vbuyy 
    lda COS,y
    sta.z cos_a
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z cos_a+1
    // mulf16s(cos_a, vector.x)
    // [144] (signed word) mulf16s::a#0 ← (signed word) rotate::cos_a#0
    // [145] (signed word) mulf16s::b#0 ← (signed word) rotate::vector_x#2 -- vwsz1=vwsz2 
    lda.z vector_x
    sta.z mulf16s.b
    lda.z vector_x+1
    sta.z mulf16s.b+1
    // [146] call mulf16s 
    // [285] phi from rotate to mulf16s [phi:rotate->mulf16s]
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#0 [phi:rotate->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#0 [phi:rotate->mulf16s#1] -- register_copy 
    jsr mulf16s
    // mulf16s(cos_a, vector.x)
    // [147] (signed dword) mulf16s::return#2 ← (signed dword) mulf16s::return#0
    // rotate::@1
    // [148] (signed dword~) rotate::$0 ← (signed dword) mulf16s::return#2
    // (signed int )mulf16s(cos_a, vector.x)*2
    // [149] (signed word~) rotate::$10 ← (signed word)(signed dword~) rotate::$0 -- vwsz1=_sword_vdsz2 
    lda.z __0
    sta.z __10
    lda.z __0+1
    sta.z __10+1
    // xr = (signed int )mulf16s(cos_a, vector.x)*2
    // [150] (signed word) rotate::xr#0 ← (signed word~) rotate::$10 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z xr
    rol.z xr+1
    // mulf16s(cos_a, vector.y)
    // [151] (signed word) mulf16s::a#1 ← (signed word) rotate::cos_a#0
    // [152] (signed word) mulf16s::b#1 ← (signed word) rotate::vector_y#2 -- vwsz1=vwsz2 
    lda.z vector_y
    sta.z mulf16s.b
    lda.z vector_y+1
    sta.z mulf16s.b+1
    // [153] call mulf16s 
    // [285] phi from rotate::@1 to mulf16s [phi:rotate::@1->mulf16s]
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#1 [phi:rotate::@1->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#1 [phi:rotate::@1->mulf16s#1] -- register_copy 
    jsr mulf16s
    // mulf16s(cos_a, vector.y)
    // [154] (signed dword) mulf16s::return#3 ← (signed dword) mulf16s::return#0
    // rotate::@2
    // [155] (signed dword~) rotate::$2 ← (signed dword) mulf16s::return#3
    // (signed int )mulf16s(cos_a, vector.y)*2
    // [156] (signed word~) rotate::$11 ← (signed word)(signed dword~) rotate::$2 -- vwsz1=_sword_vdsz2 
    lda.z __2
    sta.z __11
    lda.z __2+1
    sta.z __11+1
    // yr = (signed int )mulf16s(cos_a, vector.y)*2
    // [157] (signed word) rotate::yr#0 ← (signed word~) rotate::$11 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z yr
    rol.z yr+1
    // sin_a = (signed int) SIN[angle]
    // [158] (signed word) rotate::sin_a#0 ← (signed word)*((const signed byte*) SIN + (byte) rotate::angle#2) -- vwsz1=_sword_pbsc1_derefidx_vbuyy 
    // signed fixed[8.8]
    lda SIN,y
    sta.z sin_a
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z sin_a+1
    // mulf16s(sin_a, vector.y)
    // [159] (signed word) mulf16s::a#2 ← (signed word) rotate::sin_a#0
    // [160] (signed word) mulf16s::b#2 ← (signed word) rotate::vector_y#2 -- vwsz1=vwsz2 
    lda.z vector_y
    sta.z mulf16s.b
    lda.z vector_y+1
    sta.z mulf16s.b+1
    // [161] call mulf16s 
    // [285] phi from rotate::@2 to mulf16s [phi:rotate::@2->mulf16s]
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#2 [phi:rotate::@2->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#2 [phi:rotate::@2->mulf16s#1] -- register_copy 
    jsr mulf16s
    // mulf16s(sin_a, vector.y)
    // [162] (signed dword) mulf16s::return#4 ← (signed dword) mulf16s::return#0
    // rotate::@3
    // [163] (signed dword~) rotate::$4 ← (signed dword) mulf16s::return#4
    // (signed int)mulf16s(sin_a, vector.y)*2
    // [164] (signed word~) rotate::$12 ← (signed word)(signed dword~) rotate::$4 -- vwsz1=_sword_vdsz2 
    lda.z __4
    sta.z __12
    lda.z __4+1
    sta.z __12+1
    // [165] (signed word~) rotate::$5 ← (signed word~) rotate::$12 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __5
    rol.z __5+1
    // xr -= (signed int)mulf16s(sin_a, vector.y)*2
    // [166] (signed word) rotate::xr#1 ← (signed word) rotate::xr#0 - (signed word~) rotate::$5 -- vwsz1=vwsz1_minus_vwsz2 
    // signed fixed[0.7]
    lda.z xr
    sec
    sbc.z __5
    sta.z xr
    lda.z xr+1
    sbc.z __5+1
    sta.z xr+1
    // mulf16s(sin_a, vector.x)
    // [167] (signed word) mulf16s::a#3 ← (signed word) rotate::sin_a#0
    // [168] (signed word) mulf16s::b#3 ← (signed word) rotate::vector_x#2 -- vwsz1=vwsz2 
    lda.z vector_x
    sta.z mulf16s.b
    lda.z vector_x+1
    sta.z mulf16s.b+1
    // [169] call mulf16s 
    // [285] phi from rotate::@3 to mulf16s [phi:rotate::@3->mulf16s]
    // [285] phi (signed word) mulf16s::b#4 = (signed word) mulf16s::b#3 [phi:rotate::@3->mulf16s#0] -- register_copy 
    // [285] phi (signed word) mulf16s::a#4 = (signed word) mulf16s::a#3 [phi:rotate::@3->mulf16s#1] -- register_copy 
    jsr mulf16s
    // mulf16s(sin_a, vector.x)
    // [170] (signed dword) mulf16s::return#10 ← (signed dword) mulf16s::return#0
    // rotate::@4
    // [171] (signed dword~) rotate::$6 ← (signed dword) mulf16s::return#10
    // (signed int)mulf16s(sin_a, vector.x)*2
    // [172] (signed word~) rotate::$13 ← (signed word)(signed dword~) rotate::$6 -- vwsz1=_sword_vdsz2 
    lda.z __6
    sta.z __13
    lda.z __6+1
    sta.z __13+1
    // [173] (signed word~) rotate::$7 ← (signed word~) rotate::$13 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z __7
    rol.z __7+1
    // yr += (signed int)mulf16s(sin_a, vector.x)*2
    // [174] (signed word) rotate::yr#1 ← (signed word) rotate::yr#0 + (signed word~) rotate::$7 -- vwsz1=vwsz1_plus_vwsz2 
    // signed fixed[8.8]
    lda.z yr
    clc
    adc.z __7
    sta.z yr
    lda.z yr+1
    adc.z __7+1
    sta.z yr+1
    // >xr
    // [175] (byte~) rotate::$8 ← > (signed word) rotate::xr#1 -- vbuaa=_hi_vwsz1 
    lda.z xr+1
    // >yr
    // [176] (byte~) rotate::$9 ← > (signed word) rotate::yr#1 -- vbuxx=_hi_vwsz1 
    ldx.z yr+1
    // rotated = { (signed int)(signed char)>xr, (signed int)(signed char)>yr }
    // [177] (signed word) rotate::return_x#2 ← (signed word)(signed byte)(byte~) rotate::$8 -- vwsz1=_sword_vbsaa 
    sta.z return_x
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z return_x+1
    // [178] (signed word) rotate::return_y#2 ← (signed word)(signed byte)(byte~) rotate::$9 -- vwsz1=_sword_vbsxx 
    txa
    sta.z return_y
    ora #$7f
    bmi !+
    lda #0
  !:
    sta.z return_y+1
    // rotate::@return
    // }
    // [179] return 
    rts
}
  // bitmap_line
// Draw a line on the bitmap using bresenhams algorithm
// bitmap_line(word zp(4) x1, word zp(6) y1, word zp($c) x2, word zp($e) y2)
bitmap_line: {
    .label x = 4
    .label y = 6
    .label dx = $21
    .label dy = $1d
    .label sx = $23
    .label sy = $1f
    .label e1 = $12
    .label e = $10
    .label x1 = 4
    .label y1 = 6
    .label x2 = $c
    .label y2 = $e
    // abs_u16(x2-x1)
    // [181] (word) abs_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x
    sta.z abs_u16.w
    lda.z x2+1
    sbc.z x+1
    sta.z abs_u16.w+1
    // [182] call abs_u16 
    // [303] phi from bitmap_line to abs_u16 [phi:bitmap_line->abs_u16]
    // [303] phi (word) abs_u16::w#2 = (word) abs_u16::w#0 [phi:bitmap_line->abs_u16#0] -- register_copy 
    jsr abs_u16
    // abs_u16(x2-x1)
    // [183] (word) abs_u16::return#0 ← (word) abs_u16::return#4
    // bitmap_line::@12
    // dx = abs_u16(x2-x1)
    // [184] (word) bitmap_line::dx#0 ← (word) abs_u16::return#0 -- vwuz1=vwuz2 
    lda.z abs_u16.return
    sta.z dx
    lda.z abs_u16.return+1
    sta.z dx+1
    // abs_u16(y2-y1)
    // [185] (word) abs_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y
    sta.z abs_u16.w
    lda.z y2+1
    sbc.z y+1
    sta.z abs_u16.w+1
    // [186] call abs_u16 
    // [303] phi from bitmap_line::@12 to abs_u16 [phi:bitmap_line::@12->abs_u16]
    // [303] phi (word) abs_u16::w#2 = (word) abs_u16::w#1 [phi:bitmap_line::@12->abs_u16#0] -- register_copy 
    jsr abs_u16
    // abs_u16(y2-y1)
    // [187] (word) abs_u16::return#1 ← (word) abs_u16::return#4
    // bitmap_line::@13
    // dy = abs_u16(y2-y1)
    // [188] (word) bitmap_line::dy#0 ← (word) abs_u16::return#1
    // if(dx==0 && dy==0)
    // [189] if((word) bitmap_line::dx#0!=(byte) 0) goto bitmap_line::@1 -- vwuz1_neq_0_then_la1 
    lda.z dx
    bne __b1
    lda.z dx+1
    bne __b1
    // bitmap_line::@18
    // [190] if((word) bitmap_line::dy#0==(byte) 0) goto bitmap_line::@4 -- vwuz1_eq_0_then_la1 
    lda.z dy
    bne !+
    lda.z dy+1
    bne !__b4+
    jmp __b4
  !__b4:
  !:
    // bitmap_line::@1
  __b1:
    // sgn_u16(x2-x1)
    // [191] (word) sgn_u16::w#0 ← (word) bitmap_line::x2#10 - (word) bitmap_line::x#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z x2
    sec
    sbc.z x
    sta.z sgn_u16.w
    lda.z x2+1
    sbc.z x+1
    sta.z sgn_u16.w+1
    // [192] call sgn_u16 
    // [310] phi from bitmap_line::@1 to sgn_u16 [phi:bitmap_line::@1->sgn_u16]
    // [310] phi (word) sgn_u16::w#2 = (word) sgn_u16::w#0 [phi:bitmap_line::@1->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // sgn_u16(x2-x1)
    // [193] (word) sgn_u16::return#0 ← (word) sgn_u16::return#4
    // bitmap_line::@14
    // sx = sgn_u16(x2-x1)
    // [194] (word) bitmap_line::sx#0 ← (word) sgn_u16::return#0 -- vwuz1=vwuz2 
    lda.z sgn_u16.return
    sta.z sx
    lda.z sgn_u16.return+1
    sta.z sx+1
    // sgn_u16(y2-y1)
    // [195] (word) sgn_u16::w#1 ← (word) bitmap_line::y2#11 - (word) bitmap_line::y#0 -- vwuz1=vwuz2_minus_vwuz3 
    lda.z y2
    sec
    sbc.z y
    sta.z sgn_u16.w
    lda.z y2+1
    sbc.z y+1
    sta.z sgn_u16.w+1
    // [196] call sgn_u16 
    // [310] phi from bitmap_line::@14 to sgn_u16 [phi:bitmap_line::@14->sgn_u16]
    // [310] phi (word) sgn_u16::w#2 = (word) sgn_u16::w#1 [phi:bitmap_line::@14->sgn_u16#0] -- register_copy 
    jsr sgn_u16
    // sgn_u16(y2-y1)
    // [197] (word) sgn_u16::return#1 ← (word) sgn_u16::return#4
    // bitmap_line::@15
    // sy = sgn_u16(y2-y1)
    // [198] (word) bitmap_line::sy#0 ← (word) sgn_u16::return#1
    // if(dx > dy)
    // [199] if((word) bitmap_line::dx#0>(word) bitmap_line::dy#0) goto bitmap_line::@2 -- vwuz1_gt_vwuz2_then_la1 
    lda.z dy+1
    cmp.z dx+1
    bcc __b2
    bne !+
    lda.z dy
    cmp.z dx
    bcc __b2
  !:
    // bitmap_line::@5
    // e = dx/2
    // [200] (word) bitmap_line::e#0 ← (word) bitmap_line::dx#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dx+1
    lsr
    sta.z e+1
    lda.z dx
    ror
    sta.z e
    // [201] phi from bitmap_line::@5 bitmap_line::@7 to bitmap_line::@6 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6]
    // [201] phi (word) bitmap_line::e#3 = (word) bitmap_line::e#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#0] -- register_copy 
    // [201] phi (word) bitmap_line::y#4 = (word) bitmap_line::y#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#1] -- register_copy 
    // [201] phi (word) bitmap_line::x#13 = (word) bitmap_line::x#0 [phi:bitmap_line::@5/bitmap_line::@7->bitmap_line::@6#2] -- register_copy 
    // bitmap_line::@6
  __b6:
    // bitmap_plot(x,(char)y)
    // [202] (word) bitmap_plot::x#1 ← (word) bitmap_line::x#13
    // [203] (byte) bitmap_plot::y#1 ← (byte)(word) bitmap_line::y#4 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [204] call bitmap_plot 
    // [317] phi from bitmap_line::@6 to bitmap_plot [phi:bitmap_line::@6->bitmap_plot]
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#1 [phi:bitmap_line::@6->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line::@6->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line::@16
    // y += sy
    // [205] (word) bitmap_line::y#1 ← (word) bitmap_line::y#4 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // e += dx
    // [206] (word) bitmap_line::e#1 ← (word) bitmap_line::e#3 + (word) bitmap_line::dx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e
    clc
    adc.z dx
    sta.z e
    lda.z e+1
    adc.z dx+1
    sta.z e+1
    // if(dy<e)
    // [207] if((word) bitmap_line::dy#0>=(word) bitmap_line::e#1) goto bitmap_line::@7 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z dy+1
    bne !+
    lda.z e
    cmp.z dy
    beq __b7
  !:
    bcc __b7
    // bitmap_line::@8
    // x += sx
    // [208] (word) bitmap_line::x#1 ← (word) bitmap_line::x#13 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // e -= dy
    // [209] (word) bitmap_line::e#2 ← (word) bitmap_line::e#1 - (word) bitmap_line::dy#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e
    sec
    sbc.z dy
    sta.z e
    lda.z e+1
    sbc.z dy+1
    sta.z e+1
    // [210] phi from bitmap_line::@16 bitmap_line::@8 to bitmap_line::@7 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7]
    // [210] phi (word) bitmap_line::e#6 = (word) bitmap_line::e#1 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#0] -- register_copy 
    // [210] phi (word) bitmap_line::x#12 = (word) bitmap_line::x#13 [phi:bitmap_line::@16/bitmap_line::@8->bitmap_line::@7#1] -- register_copy 
    // bitmap_line::@7
  __b7:
    // while (y != y2)
    // [211] if((word) bitmap_line::y#1!=(word) bitmap_line::y2#11) goto bitmap_line::@6 -- vwuz1_neq_vwuz2_then_la1 
    lda.z y+1
    cmp.z y2+1
    bne __b6
    lda.z y
    cmp.z y2
    bne __b6
    // [212] phi from bitmap_line::@10 bitmap_line::@7 to bitmap_line::@3 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3]
    // [212] phi (word) bitmap_line::y#7 = (word) bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#0] -- register_copy 
    // [212] phi (word) bitmap_line::x#6 = (word) bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@7->bitmap_line::@3#1] -- register_copy 
    // bitmap_line::@3
  __b3:
    // bitmap_plot(x,(char)y)
    // [213] (word) bitmap_plot::x#2 ← (word) bitmap_line::x#6
    // [214] (byte) bitmap_plot::y#2 ← (byte)(word) bitmap_line::y#7 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [215] call bitmap_plot 
    // [317] phi from bitmap_line::@3 to bitmap_plot [phi:bitmap_line::@3->bitmap_plot]
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#2 [phi:bitmap_line::@3->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line::@3->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line::@return
    // }
    // [216] return 
    rts
    // bitmap_line::@2
  __b2:
    // e = dy/2
    // [217] (word) bitmap_line::e1#0 ← (word) bitmap_line::dy#0 >> (byte) 1 -- vwuz1=vwuz2_ror_1 
    lda.z dy+1
    lsr
    sta.z e1+1
    lda.z dy
    ror
    sta.z e1
    // [218] phi from bitmap_line::@10 bitmap_line::@2 to bitmap_line::@9 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9]
    // [218] phi (word) bitmap_line::e1#3 = (word) bitmap_line::e1#6 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#0] -- register_copy 
    // [218] phi (word) bitmap_line::y#15 = (word) bitmap_line::y#13 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#1] -- register_copy 
    // [218] phi (word) bitmap_line::x#7 = (word) bitmap_line::x#15 [phi:bitmap_line::@10/bitmap_line::@2->bitmap_line::@9#2] -- register_copy 
    // bitmap_line::@9
  __b9:
    // bitmap_plot(x,(char)y)
    // [219] (word) bitmap_plot::x#3 ← (word) bitmap_line::x#7
    // [220] (byte) bitmap_plot::y#3 ← (byte)(word) bitmap_line::y#15 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [221] call bitmap_plot 
    // [317] phi from bitmap_line::@9 to bitmap_plot [phi:bitmap_line::@9->bitmap_plot]
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#3 [phi:bitmap_line::@9->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line::@9->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line::@17
    // x += sx
    // [222] (word) bitmap_line::x#15 ← (word) bitmap_line::x#7 + (word) bitmap_line::sx#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z x
    clc
    adc.z sx
    sta.z x
    lda.z x+1
    adc.z sx+1
    sta.z x+1
    // e += dy
    // [223] (word) bitmap_line::e1#1 ← (word) bitmap_line::e1#3 + (word) bitmap_line::dy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z e1
    clc
    adc.z dy
    sta.z e1
    lda.z e1+1
    adc.z dy+1
    sta.z e1+1
    // if(dx < e)
    // [224] if((word) bitmap_line::dx#0>=(word) bitmap_line::e1#1) goto bitmap_line::@10 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z dx+1
    bne !+
    lda.z e1
    cmp.z dx
    beq __b10
  !:
    bcc __b10
    // bitmap_line::@11
    // y += sy
    // [225] (word) bitmap_line::y#2 ← (word) bitmap_line::y#15 + (word) bitmap_line::sy#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z y
    clc
    adc.z sy
    sta.z y
    lda.z y+1
    adc.z sy+1
    sta.z y+1
    // e -= dx
    // [226] (word) bitmap_line::e1#2 ← (word) bitmap_line::e1#1 - (word) bitmap_line::dx#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z e1
    sec
    sbc.z dx
    sta.z e1
    lda.z e1+1
    sbc.z dx+1
    sta.z e1+1
    // [227] phi from bitmap_line::@11 bitmap_line::@17 to bitmap_line::@10 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10]
    // [227] phi (word) bitmap_line::e1#6 = (word) bitmap_line::e1#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#0] -- register_copy 
    // [227] phi (word) bitmap_line::y#13 = (word) bitmap_line::y#2 [phi:bitmap_line::@11/bitmap_line::@17->bitmap_line::@10#1] -- register_copy 
    // bitmap_line::@10
  __b10:
    // while (x != x2)
    // [228] if((word) bitmap_line::x#15!=(word) bitmap_line::x2#10) goto bitmap_line::@9 -- vwuz1_neq_vwuz2_then_la1 
    lda.z x+1
    cmp.z x2+1
    bne __b9
    lda.z x
    cmp.z x2
    bne __b9
    jmp __b3
    // bitmap_line::@4
  __b4:
    // bitmap_plot(x,(char)y)
    // [229] (word) bitmap_plot::x#0 ← (word) bitmap_line::x#0
    // [230] (byte) bitmap_plot::y#0 ← (byte)(word) bitmap_line::y#0 -- vbuaa=_byte_vwuz1 
    lda.z y
    // [231] call bitmap_plot 
    // [317] phi from bitmap_line::@4 to bitmap_plot [phi:bitmap_line::@4->bitmap_plot]
    // [317] phi (word) bitmap_plot::x#4 = (word) bitmap_plot::x#0 [phi:bitmap_line::@4->bitmap_plot#0] -- register_copy 
    // [317] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line::@4->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    rts
}
  // spline_8segB
// Generate a 8-segment quadratic spline using 16-bit fixed point 1/64-format math (6 decimal bits).
// The resulting spline segment points are returned in SPLINE_8SEG[]
// Point values must be within [-200 ; 1ff] for the calculation to not overflow.
// A quadratic spline is a curve defined by 3 points: P0, P1 and P2.
// The curve connects P0 to P2 through a smooth curve that moves towards P1, but does usually not touch it.
// spline_8segB(signed word zp(4) p0_x, signed word zp(6) p0_y, signed word zp($c) p1_x, signed word zp($e) p1_y, signed word zp($19) p2_x, signed word zp($1b) p2_y)
spline_8segB: {
    .label __0 = $23
    .label __1 = $23
    .label __3 = $2a
    .label __4 = $2a
    .label __6 = $c
    .label __8 = $e
    .label __10 = $c
    .label __12 = $e
    .label __18 = 4
    .label __19 = 4
    .label __20 = 6
    .label __21 = 6
    .label __22 = $26
    .label __23 = $26
    .label __24 = $28
    .label __25 = $28
    .label a_x = $23
    .label a_y = $2a
    .label b_x = $c
    .label b_y = $e
    .label i_x = $c
    .label i_y = $e
    .label j_x = $23
    .label j_y = $2a
    .label p_x = 4
    .label p_y = 6
    .label p0_x = 4
    .label p0_y = 6
    .label p1_x = $c
    .label p1_y = $e
    .label p2_x = $19
    .label p2_y = $1b
    // p1.x*2
    // [232] (signed word~) spline_8segB::$0 ← (signed word) spline_8segB::p1_x#0 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z p1_x
    asl
    sta.z __0
    lda.z p1_x+1
    rol
    sta.z __0+1
    // p2.x - p1.x*2
    // [233] (signed word~) spline_8segB::$1 ← (signed word) spline_8segB::p2_x#0 - (signed word~) spline_8segB::$0 -- vwsz1=vwsz2_minus_vwsz1 
    lda.z p2_x
    sec
    sbc.z __1
    sta.z __1
    lda.z p2_x+1
    sbc.z __1+1
    sta.z __1+1
    // a = { p2.x - p1.x*2 + p0.x, p2.y - p1.y*2 + p0.y}
    // [234] (signed word) spline_8segB::a_x#0 ← (signed word~) spline_8segB::$1 + (signed word) spline_8segB::p0_x#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z a_x
    clc
    adc.z p0_x
    sta.z a_x
    lda.z a_x+1
    adc.z p0_x+1
    sta.z a_x+1
    // p1.y*2
    // [235] (signed word~) spline_8segB::$3 ← (signed word) spline_8segB::p1_y#0 << (byte) 1 -- vwsz1=vwsz2_rol_1 
    lda.z p1_y
    asl
    sta.z __3
    lda.z p1_y+1
    rol
    sta.z __3+1
    // p2.y - p1.y*2
    // [236] (signed word~) spline_8segB::$4 ← (signed word) spline_8segB::p2_y#0 - (signed word~) spline_8segB::$3 -- vwsz1=vwsz2_minus_vwsz1 
    lda.z p2_y
    sec
    sbc.z __4
    sta.z __4
    lda.z p2_y+1
    sbc.z __4+1
    sta.z __4+1
    // a = { p2.x - p1.x*2 + p0.x, p2.y - p1.y*2 + p0.y}
    // [237] (signed word) spline_8segB::a_y#0 ← (signed word~) spline_8segB::$4 + (signed word) spline_8segB::p0_y#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z a_y
    clc
    adc.z p0_y
    sta.z a_y
    lda.z a_y+1
    adc.z p0_y+1
    sta.z a_y+1
    // p1.x - p0.x
    // [238] (signed word~) spline_8segB::$6 ← (signed word) spline_8segB::p1_x#0 - (signed word) spline_8segB::p0_x#0 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z __6
    sec
    sbc.z p0_x
    sta.z __6
    lda.z __6+1
    sbc.z p0_x+1
    sta.z __6+1
    // b = { (p1.x - p0.x)*2, (p1.y - p0.y)*2 }
    // [239] (signed word) spline_8segB::b_x#0 ← (signed word~) spline_8segB::$6 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z b_x
    rol.z b_x+1
    // p1.y - p0.y
    // [240] (signed word~) spline_8segB::$8 ← (signed word) spline_8segB::p1_y#0 - (signed word) spline_8segB::p0_y#0 -- vwsz1=vwsz1_minus_vwsz2 
    lda.z __8
    sec
    sbc.z p0_y
    sta.z __8
    lda.z __8+1
    sbc.z p0_y+1
    sta.z __8+1
    // b = { (p1.x - p0.x)*2, (p1.y - p0.y)*2 }
    // [241] (signed word) spline_8segB::b_y#0 ← (signed word~) spline_8segB::$8 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z b_y
    rol.z b_y+1
    // b.x*8
    // [242] (signed word~) spline_8segB::$10 ← (signed word) spline_8segB::b_x#0 << (byte) 3 -- vwsz1=vwsz1_rol_3 
    asl.z __10
    rol.z __10+1
    asl.z __10
    rol.z __10+1
    asl.z __10
    rol.z __10+1
    // i = { a.x + b.x*8, a.y + b.y*8}
    // [243] (signed word) spline_8segB::i_x#0 ← (signed word) spline_8segB::a_x#0 + (signed word~) spline_8segB::$10 -- vwsz1=vwsz2_plus_vwsz1 
    lda.z i_x
    clc
    adc.z a_x
    sta.z i_x
    lda.z i_x+1
    adc.z a_x+1
    sta.z i_x+1
    // b.y*8
    // [244] (signed word~) spline_8segB::$12 ← (signed word) spline_8segB::b_y#0 << (byte) 3 -- vwsz1=vwsz1_rol_3 
    asl.z __12
    rol.z __12+1
    asl.z __12
    rol.z __12+1
    asl.z __12
    rol.z __12+1
    // i = { a.x + b.x*8, a.y + b.y*8}
    // [245] (signed word) spline_8segB::i_y#0 ← (signed word) spline_8segB::a_y#0 + (signed word~) spline_8segB::$12 -- vwsz1=vwsz2_plus_vwsz1 
    lda.z i_y
    clc
    adc.z a_y
    sta.z i_y
    lda.z i_y+1
    adc.z a_y+1
    sta.z i_y+1
    // j = { a.x*2, a.y*2 }
    // [246] (signed word) spline_8segB::j_x#0 ← (signed word) spline_8segB::a_x#0 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z j_x
    rol.z j_x+1
    // [247] (signed word) spline_8segB::j_y#0 ← (signed word) spline_8segB::a_y#0 << (byte) 1 -- vwsz1=vwsz1_rol_1 
    asl.z j_y
    rol.z j_y+1
    // p = { p0.x*0x40, p0.y*0x40 }
    // [248] (signed word) spline_8segB::p_x#0 ← (signed word) spline_8segB::p0_x#0 << (byte) 6 -- vwsz1=vwsz1_rol_6 
    lda.z p_x+1
    sta.z $ff
    lda.z p_x
    sta.z p_x+1
    lda #0
    sta.z p_x
    lsr.z $ff
    ror.z p_x+1
    ror.z p_x
    lsr.z $ff
    ror.z p_x+1
    ror.z p_x
    // [249] (signed word) spline_8segB::p_y#0 ← (signed word) spline_8segB::p0_y#0 << (byte) 6 -- vwsz1=vwsz1_rol_6 
    lda.z p_y+1
    sta.z $ff
    lda.z p_y
    sta.z p_y+1
    lda #0
    sta.z p_y
    lsr.z $ff
    ror.z p_y+1
    ror.z p_y
    lsr.z $ff
    ror.z p_y+1
    ror.z p_y
    // [250] phi from spline_8segB to spline_8segB::@1 [phi:spline_8segB->spline_8segB::@1]
    // [250] phi (signed word) spline_8segB::i_y#2 = (signed word) spline_8segB::i_y#0 [phi:spline_8segB->spline_8segB::@1#0] -- register_copy 
    // [250] phi (signed word) spline_8segB::i_x#2 = (signed word) spline_8segB::i_x#0 [phi:spline_8segB->spline_8segB::@1#1] -- register_copy 
    // [250] phi (byte) spline_8segB::n#2 = (byte) 0 [phi:spline_8segB->spline_8segB::@1#2] -- vbuyy=vbuc1 
    tay
    // [250] phi (signed word) spline_8segB::p_y#2 = (signed word) spline_8segB::p_y#0 [phi:spline_8segB->spline_8segB::@1#3] -- register_copy 
    // [250] phi (signed word) spline_8segB::p_x#2 = (signed word) spline_8segB::p_x#0 [phi:spline_8segB->spline_8segB::@1#4] -- register_copy 
    // [250] phi from spline_8segB::@1 to spline_8segB::@1 [phi:spline_8segB::@1->spline_8segB::@1]
    // [250] phi (signed word) spline_8segB::i_y#2 = (signed word) spline_8segB::i_y#1 [phi:spline_8segB::@1->spline_8segB::@1#0] -- register_copy 
    // [250] phi (signed word) spline_8segB::i_x#2 = (signed word) spline_8segB::i_x#1 [phi:spline_8segB::@1->spline_8segB::@1#1] -- register_copy 
    // [250] phi (byte) spline_8segB::n#2 = (byte) spline_8segB::n#1 [phi:spline_8segB::@1->spline_8segB::@1#2] -- register_copy 
    // [250] phi (signed word) spline_8segB::p_y#2 = (signed word) spline_8segB::p_y#1 [phi:spline_8segB::@1->spline_8segB::@1#3] -- register_copy 
    // [250] phi (signed word) spline_8segB::p_x#2 = (signed word) spline_8segB::p_x#1 [phi:spline_8segB::@1->spline_8segB::@1#4] -- register_copy 
    // spline_8segB::@1
  __b1:
    // p.x+0x20
    // [251] (signed word~) spline_8segB::$22 ← (signed word) spline_8segB::p_x#2 + (signed byte) $20 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z p_x
    clc
    adc #<$20
    sta.z __22
    lda.z p_x+1
    adc #>$20
    sta.z __22+1
    // (p.x+0x20)/0x40
    // [252] (signed word~) spline_8segB::$23 ← (signed word~) spline_8segB::$22 >> (byte) 6 -- vwsz1=vwsz1_ror_6 
    lda.z __23
    sta.z $ff
    lda.z __23+1
    sta.z __23
    lda #0
    bit.z __23+1
    bpl !+
    lda #$ff
  !:
    sta.z __23+1
    rol.z $ff
    rol.z __23
    rol.z __23+1
    rol.z $ff
    rol.z __23
    rol.z __23+1
    // p.y+0x20
    // [253] (signed word~) spline_8segB::$24 ← (signed word) spline_8segB::p_y#2 + (signed byte) $20 -- vwsz1=vwsz2_plus_vbsc1 
    lda.z p_y
    clc
    adc #<$20
    sta.z __24
    lda.z p_y+1
    adc #>$20
    sta.z __24+1
    // (p.y+0x20)/0x40
    // [254] (signed word~) spline_8segB::$25 ← (signed word~) spline_8segB::$24 >> (byte) 6 -- vwsz1=vwsz1_ror_6 
    lda.z __25
    sta.z $ff
    lda.z __25+1
    sta.z __25
    lda #0
    bit.z __25+1
    bpl !+
    lda #$ff
  !:
    sta.z __25+1
    rol.z $ff
    rol.z __25
    rol.z __25+1
    rol.z $ff
    rol.z __25
    rol.z __25+1
    // SPLINE_8SEG[n] = { (p.x+0x20)/0x40, (p.y+0x20)/0x40 }
    // [255] (byte~) spline_8segB::$31 ← (byte) spline_8segB::n#2 << (byte) 2 -- vbuxx=vbuyy_rol_2 
    tya
    asl
    asl
    tax
    // [256] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$23 -- pwsc1_derefidx_vbuxx=vwsz1 
    lda.z __23
    sta SPLINE_8SEG,x
    lda.z __23+1
    sta SPLINE_8SEG+1,x
    // [257] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) spline_8segB::$31) ← (signed word~) spline_8segB::$25 -- pwsc1_derefidx_vbuxx=vwsz1 
    lda.z __25
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y,x
    lda.z __25+1
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,x
    // p = { p.x+i.x, p.y+i.y }
    // [258] (signed word) spline_8segB::p_x#1 ← (signed word) spline_8segB::p_x#2 + (signed word) spline_8segB::i_x#2 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z p_x
    clc
    adc.z i_x
    sta.z p_x
    lda.z p_x+1
    adc.z i_x+1
    sta.z p_x+1
    // [259] (signed word) spline_8segB::p_y#1 ← (signed word) spline_8segB::p_y#2 + (signed word) spline_8segB::i_y#2 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z p_y
    clc
    adc.z i_y
    sta.z p_y
    lda.z p_y+1
    adc.z i_y+1
    sta.z p_y+1
    // i = { i.x+j.x, i.y+j.y }
    // [260] (signed word) spline_8segB::i_x#1 ← (signed word) spline_8segB::i_x#2 + (signed word) spline_8segB::j_x#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z i_x
    clc
    adc.z j_x
    sta.z i_x
    lda.z i_x+1
    adc.z j_x+1
    sta.z i_x+1
    // [261] (signed word) spline_8segB::i_y#1 ← (signed word) spline_8segB::i_y#2 + (signed word) spline_8segB::j_y#0 -- vwsz1=vwsz1_plus_vwsz2 
    lda.z i_y
    clc
    adc.z j_y
    sta.z i_y
    lda.z i_y+1
    adc.z j_y+1
    sta.z i_y+1
    // for( char n: 0..7)
    // [262] (byte) spline_8segB::n#1 ← ++ (byte) spline_8segB::n#2 -- vbuyy=_inc_vbuyy 
    iny
    // [263] if((byte) spline_8segB::n#1!=(byte) 8) goto spline_8segB::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    beq !__b1+
    jmp __b1
  !__b1:
    // spline_8segB::@2
    // p.x+0x20
    // [264] (signed word~) spline_8segB::$18 ← (signed word) spline_8segB::p_x#1 + (signed byte) $20 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z __18
    clc
    adc #<$20
    sta.z __18
    lda.z __18+1
    adc #>$20
    sta.z __18+1
    // (p.x+0x20)/0x40
    // [265] (signed word~) spline_8segB::$19 ← (signed word~) spline_8segB::$18 >> (byte) 6 -- vwsz1=vwsz1_ror_6 
    lda.z __19
    sta.z $ff
    lda.z __19+1
    sta.z __19
    lda #0
    bit.z __19+1
    bpl !+
    lda #$ff
  !:
    sta.z __19+1
    rol.z $ff
    rol.z __19
    rol.z __19+1
    rol.z $ff
    rol.z __19
    rol.z __19+1
    // p.y+0x20
    // [266] (signed word~) spline_8segB::$20 ← (signed word) spline_8segB::p_y#1 + (signed byte) $20 -- vwsz1=vwsz1_plus_vbsc1 
    lda.z __20
    clc
    adc #<$20
    sta.z __20
    lda.z __20+1
    adc #>$20
    sta.z __20+1
    // (p.y+0x20)/0x40
    // [267] (signed word~) spline_8segB::$21 ← (signed word~) spline_8segB::$20 >> (byte) 6 -- vwsz1=vwsz1_ror_6 
    lda.z __21
    sta.z $ff
    lda.z __21+1
    sta.z __21
    lda #0
    bit.z __21+1
    bpl !+
    lda #$ff
  !:
    sta.z __21+1
    rol.z $ff
    rol.z __21
    rol.z __21+1
    rol.z $ff
    rol.z __21
    rol.z __21+1
    // SPLINE_8SEG[8] = { (p.x+0x20)/0x40, (p.y+0x20)/0x40 }
    // [268] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$19 -- _deref_pwsc1=vwsz1 
    lda.z __19
    sta SPLINE_8SEG+8*SIZEOF_STRUCT_SPLINEVECTOR16
    lda.z __19+1
    sta SPLINE_8SEG+8*SIZEOF_STRUCT_SPLINEVECTOR16+1
    // [269] *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y+(byte) 8*(const byte) SIZEOF_STRUCT_SPLINEVECTOR16) ← (signed word~) spline_8segB::$21 -- _deref_pwsc1=vwsz1 
    lda.z __21
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+8*SIZEOF_STRUCT_SPLINEVECTOR16
    lda.z __21+1
    sta SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+8*SIZEOF_STRUCT_SPLINEVECTOR16+1
    // spline_8segB::@return
    // }
    // [270] return 
    rts
}
  // bitmap_plot_spline_8seg
// Plot the spline in the SPLINE_8SEG array
bitmap_plot_spline_8seg: {
    .label __4 = $25
    .label current_x = 4
    .label current_y = 6
    .label n = $18
    // current = SPLINE_8SEG[0]
    // [271] (signed word) bitmap_plot_spline_8seg::current_x#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG) -- vwsz1=_deref_pwsc1 
    lda SPLINE_8SEG
    sta.z current_x
    lda SPLINE_8SEG+1
    sta.z current_x+1
    // [272] (signed word) bitmap_plot_spline_8seg::current_y#0 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y) -- vwsz1=_deref_pwsc1 
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y
    sta.z current_y
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1
    sta.z current_y+1
    // [273] phi from bitmap_plot_spline_8seg to bitmap_plot_spline_8seg::@1 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1]
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_y#2 = (signed word) bitmap_plot_spline_8seg::current_y#0 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1#0] -- register_copy 
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_x#2 = (signed word) bitmap_plot_spline_8seg::current_x#0 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1#1] -- register_copy 
    // [273] phi (byte) bitmap_plot_spline_8seg::n#2 = (byte) 1 [phi:bitmap_plot_spline_8seg->bitmap_plot_spline_8seg::@1#2] -- vbuz1=vbuc1 
    lda #1
    sta.z n
    // [273] phi from bitmap_plot_spline_8seg::@2 to bitmap_plot_spline_8seg::@1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1]
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_y#2 = (signed word) bitmap_plot_spline_8seg::current_y#1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1#0] -- register_copy 
    // [273] phi (signed word) bitmap_plot_spline_8seg::current_x#2 = (signed word) bitmap_plot_spline_8seg::current_x#1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1#1] -- register_copy 
    // [273] phi (byte) bitmap_plot_spline_8seg::n#2 = (byte) bitmap_plot_spline_8seg::n#1 [phi:bitmap_plot_spline_8seg::@2->bitmap_plot_spline_8seg::@1#2] -- register_copy 
    // bitmap_plot_spline_8seg::@1
  __b1:
    // bitmap_line((unsigned int)current.x, (unsigned int)current.y, (unsigned int)SPLINE_8SEG[n].x, (unsigned int)SPLINE_8SEG[n].y)
    // [274] (byte~) bitmap_plot_spline_8seg::$4 ← (byte) bitmap_plot_spline_8seg::n#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z n
    asl
    asl
    sta.z __4
    // [275] (word) bitmap_line::x1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_x#2
    // [276] (word) bitmap_line::y1#1 ← (word)(signed word) bitmap_plot_spline_8seg::current_y#2
    // [277] (word) bitmap_line::x2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) -- vwuz1=pwuc1_derefidx_vbuz2 
    tay
    lda SPLINE_8SEG,y
    sta.z bitmap_line.x2
    lda SPLINE_8SEG+1,y
    sta.z bitmap_line.x2+1
    // [278] (word) bitmap_line::y2#13 ← (word)*((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) -- vwuz1=pwuc1_derefidx_vbuz2 
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z bitmap_line.y2
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z bitmap_line.y2+1
    // bitmap_line((unsigned int)current.x, (unsigned int)current.y, (unsigned int)SPLINE_8SEG[n].x, (unsigned int)SPLINE_8SEG[n].y)
    // [279] call bitmap_line 
    // [180] phi from bitmap_plot_spline_8seg::@1 to bitmap_line [phi:bitmap_plot_spline_8seg::@1->bitmap_line]
    // [180] phi (word) bitmap_line::y2#11 = (word) bitmap_line::y2#13 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#0] -- register_copy 
    // [180] phi (word) bitmap_line::x2#10 = (word) bitmap_line::x2#13 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#1] -- register_copy 
    // [180] phi (word) bitmap_line::y#0 = (word) bitmap_line::y1#1 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#2] -- register_copy 
    // [180] phi (word) bitmap_line::x#0 = (word) bitmap_line::x1#1 [phi:bitmap_plot_spline_8seg::@1->bitmap_line#3] -- register_copy 
    jsr bitmap_line
    // bitmap_plot_spline_8seg::@2
    // current = SPLINE_8SEG[n]
    // [280] (signed word) bitmap_plot_spline_8seg::current_x#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG + (byte~) bitmap_plot_spline_8seg::$4) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy.z __4
    lda SPLINE_8SEG,y
    sta.z current_x
    lda SPLINE_8SEG+1,y
    sta.z current_x+1
    // [281] (signed word) bitmap_plot_spline_8seg::current_y#1 ← *((signed word*)(const struct SplineVector16*) SPLINE_8SEG+(const byte) OFFSET_STRUCT_SPLINEVECTOR16_Y + (byte~) bitmap_plot_spline_8seg::$4) -- vwsz1=pwsc1_derefidx_vbuz2 
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y,y
    sta.z current_y
    lda SPLINE_8SEG+OFFSET_STRUCT_SPLINEVECTOR16_Y+1,y
    sta.z current_y+1
    // for(char n:1..8)
    // [282] (byte) bitmap_plot_spline_8seg::n#1 ← ++ (byte) bitmap_plot_spline_8seg::n#2 -- vbuz1=_inc_vbuz1 
    inc.z n
    // [283] if((byte) bitmap_plot_spline_8seg::n#1!=(byte) 9) goto bitmap_plot_spline_8seg::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #9
    cmp.z n
    bne __b1
    // bitmap_plot_spline_8seg::@return
    // }
    // [284] return 
    rts
}
  // mulf16s
// Fast multiply two signed ints to a signed double unsigned int result
// Fixes offsets introduced by using unsigned multiplication
// mulf16s(signed word zp($10) a, signed word zp($12) b)
mulf16s: {
    .label __6 = $28
    .label __9 = $2a
    .label __11 = $28
    .label __12 = $2a
    .label m = $14
    .label return = $14
    .label a = $10
    .label b = $12
    // mulf16u((unsigned int)a, (unsigned int)b)
    // [286] (word) mulf16u::a#0 ← (word)(signed word) mulf16s::a#4 -- vwuz1=vwuz2 
    lda.z a
    sta.z mulf16u.a
    lda.z a+1
    sta.z mulf16u.a+1
    // [287] (word) mulf16u::b#0 ← (word)(signed word) mulf16s::b#4 -- vwuz1=vwuz2 
    lda.z b
    sta.z mulf16u.b
    lda.z b+1
    sta.z mulf16u.b+1
    // [288] call mulf16u 
    jsr mulf16u
    // [289] (dword) mulf16u::return#2 ← (dword) mulf16u::return#0
    // mulf16s::@5
    // m = mulf16u((unsigned int)a, (unsigned int)b)
    // [290] (dword) mulf16s::m#0 ← (dword) mulf16u::return#2
    // if(a<0)
    // [291] if((signed word) mulf16s::a#4>=(signed byte) 0) goto mulf16s::@1 -- vwsz1_ge_0_then_la1 
    lda.z a+1
    bpl __b1
    // mulf16s::@3
    // >m
    // [292] (word~) mulf16s::$6 ← > (dword) mulf16s::m#0 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __6
    lda.z m+3
    sta.z __6+1
    // >m = (>m)-(unsigned int)b
    // [293] (word~) mulf16s::$11 ← (word~) mulf16s::$6 - (word)(signed word) mulf16s::b#4 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __11
    sec
    sbc.z b
    sta.z __11
    lda.z __11+1
    sbc.z b+1
    sta.z __11+1
    // [294] (dword) mulf16s::m#1 ← (dword) mulf16s::m#0 hi= (word~) mulf16s::$11 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __11
    sta.z m+2
    lda.z __11+1
    sta.z m+3
    // [295] phi from mulf16s::@3 mulf16s::@5 to mulf16s::@1 [phi:mulf16s::@3/mulf16s::@5->mulf16s::@1]
    // [295] phi (dword) mulf16s::m#5 = (dword) mulf16s::m#1 [phi:mulf16s::@3/mulf16s::@5->mulf16s::@1#0] -- register_copy 
    // mulf16s::@1
  __b1:
    // if(b<0)
    // [296] if((signed word) mulf16s::b#4>=(signed byte) 0) goto mulf16s::@2 -- vwsz1_ge_0_then_la1 
    lda.z b+1
    bpl __b2
    // mulf16s::@4
    // >m
    // [297] (word~) mulf16s::$9 ← > (dword) mulf16s::m#5 -- vwuz1=_hi_vduz2 
    lda.z m+2
    sta.z __9
    lda.z m+3
    sta.z __9+1
    // >m = (>m)-(unsigned int)a
    // [298] (word~) mulf16s::$12 ← (word~) mulf16s::$9 - (word)(signed word) mulf16s::a#4 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z __12
    sec
    sbc.z a
    sta.z __12
    lda.z __12+1
    sbc.z a+1
    sta.z __12+1
    // [299] (dword) mulf16s::m#2 ← (dword) mulf16s::m#5 hi= (word~) mulf16s::$12 -- vduz1=vduz1_sethi_vwuz2 
    lda.z __12
    sta.z m+2
    lda.z __12+1
    sta.z m+3
    // [300] phi from mulf16s::@1 mulf16s::@4 to mulf16s::@2 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2]
    // [300] phi (dword) mulf16s::m#4 = (dword) mulf16s::m#5 [phi:mulf16s::@1/mulf16s::@4->mulf16s::@2#0] -- register_copy 
    // mulf16s::@2
  __b2:
    // return (signed long)m;
    // [301] (signed dword) mulf16s::return#0 ← (signed dword)(dword) mulf16s::m#4
    // mulf16s::@return
    // }
    // [302] return 
    rts
}
  // abs_u16
// Get the absolute value of a 16-bit unsigned number treated as a signed number.
// abs_u16(word zp($1d) w)
abs_u16: {
    .label w = $1d
    .label return = $1d
    // >w
    // [304] (byte~) abs_u16::$0 ← > (word) abs_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // >w&0x80
    // [305] (byte~) abs_u16::$1 ← (byte~) abs_u16::$0 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if(>w&0x80)
    // [306] if((byte) 0!=(byte~) abs_u16::$1) goto abs_u16::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [308] phi from abs_u16 abs_u16::@1 to abs_u16::@return [phi:abs_u16/abs_u16::@1->abs_u16::@return]
    // [308] phi (word) abs_u16::return#4 = (word) abs_u16::w#2 [phi:abs_u16/abs_u16::@1->abs_u16::@return#0] -- register_copy 
    rts
    // abs_u16::@1
  __b1:
    // return -w;
    // [307] (word) abs_u16::return#2 ← - (word) abs_u16::w#2 -- vwuz1=_neg_vwuz1 
    sec
    lda #0
    sbc.z return
    sta.z return
    lda #0
    sbc.z return+1
    sta.z return+1
    // abs_u16::@return
    // }
    // [309] return 
    rts
}
  // sgn_u16
// Get the sign of a 16-bit unsigned number treated as a signed number.
// Returns unsigned -1 if the number is
// sgn_u16(word zp($2c) w)
sgn_u16: {
    .label w = $2c
    .label return = $1f
    // >w
    // [311] (byte~) sgn_u16::$0 ← > (word) sgn_u16::w#2 -- vbuaa=_hi_vwuz1 
    lda.z w+1
    // >w&0x80
    // [312] (byte~) sgn_u16::$1 ← (byte~) sgn_u16::$0 & (byte) $80 -- vbuaa=vbuaa_band_vbuc1 
    and #$80
    // if(>w&0x80)
    // [313] if((byte) 0!=(byte~) sgn_u16::$1) goto sgn_u16::@1 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b1
    // [315] phi from sgn_u16 to sgn_u16::@return [phi:sgn_u16->sgn_u16::@return]
    // [315] phi (word) sgn_u16::return#4 = (byte) 1 [phi:sgn_u16->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<1
    sta.z return
    lda #>1
    sta.z return+1
    rts
    // [314] phi from sgn_u16 to sgn_u16::@1 [phi:sgn_u16->sgn_u16::@1]
    // sgn_u16::@1
  __b1:
    // [315] phi from sgn_u16::@1 to sgn_u16::@return [phi:sgn_u16::@1->sgn_u16::@return]
    // [315] phi (word) sgn_u16::return#4 = (byte) -1 [phi:sgn_u16::@1->sgn_u16::@return#0] -- vwuz1=vbuc1 
    lda #<-1
    sta.z return
    sta.z return+1
    // sgn_u16::@return
    // }
    // [316] return 
    rts
}
  // bitmap_plot
// Plot a single dot in the bitmap
// bitmap_plot(word zp(4) x, byte register(A) y)
bitmap_plot: {
    .label __0 = $2c
    .label plotter = $2a
    .label x = 4
    // plotter = (char*) { bitmap_plot_yhi[y], bitmap_plot_ylo[y] }
    // [318] (word) bitmap_plot::plotter#0 ← *((const to_nomodify byte*) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const to_nomodify byte*) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda bitmap_plot_yhi,y
    sta.z plotter+1
    lda bitmap_plot_ylo,y
    sta.z plotter
    // x & $fff8
    // [319] (word~) bitmap_plot::$0 ← (word) bitmap_plot::x#4 & (word) $fff8 -- vwuz1=vwuz2_band_vwuc1 
    lda.z x
    and #<$fff8
    sta.z __0
    lda.z x+1
    and #>$fff8
    sta.z __0+1
    // plotter += ( x & $fff8 )
    // [320] (byte*) bitmap_plot::plotter#1 ← (byte*)(word) bitmap_plot::plotter#0 + (word~) bitmap_plot::$0 -- pbuz1=pbuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z __0
    sta.z plotter
    lda.z plotter+1
    adc.z __0+1
    sta.z plotter+1
    // <x
    // [321] (byte~) bitmap_plot::$1 ← < (word) bitmap_plot::x#4 -- vbuxx=_lo_vwuz1 
    ldx.z x
    // *plotter |= bitmap_plot_bit[<x]
    // [322] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const to_nomodify byte*) bitmap_plot_bit + (byte~) bitmap_plot::$1) -- _deref_pbuz1=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [323] return 
    rts
}
  // mulf16u
// Fast multiply two unsigned ints to a double unsigned int result
// Done in assembler to utilize fast addition A+X
// mulf16u(word zp($2a) a, word zp($26) b)
mulf16u: {
    .label memA = $f8
    .label memB = $fa
    .label memR = $fc
    .label return = $14
    .label a = $2a
    .label b = $26
    // *memA = a
    // [324] *((const nomodify word*) mulf16u::memA) ← (word) mulf16u::a#0 -- _deref_pwuc1=vwuz1 
    lda.z a
    sta memA
    lda.z a+1
    sta memA+1
    // *memB = b
    // [325] *((const nomodify word*) mulf16u::memB) ← (word) mulf16u::b#0 -- _deref_pwuc1=vwuz1 
    lda.z b
    sta memB
    lda.z b+1
    sta memB+1
    // asm
    // asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
    lda memA
    sta sm1a+1
    sta sm3a+1
    sta sm5a+1
    sta sm7a+1
    eor #$ff
    sta sm2a+1
    sta sm4a+1
    sta sm6a+1
    sta sm8a+1
    lda memA+1
    sta sm1b+1
    sta sm3b+1
    sta sm5b+1
    sta sm7b+1
    eor #$ff
    sta sm2b+1
    sta sm4b+1
    sta sm6b+1
    sta sm8b+1
    ldx memB
    sec
  sm1a:
    lda mulf_sqr1_lo,x
  sm2a:
    sbc mulf_sqr2_lo,x
    sta memR+0
  sm3a:
    lda mulf_sqr1_hi,x
  sm4a:
    sbc mulf_sqr2_hi,x
    sta _AA+1
    sec
  sm1b:
    lda mulf_sqr1_lo,x
  sm2b:
    sbc mulf_sqr2_lo,x
    sta _cc+1
  sm3b:
    lda mulf_sqr1_hi,x
  sm4b:
    sbc mulf_sqr2_hi,x
    sta _CC+1
    ldx memB+1
    sec
  sm5a:
    lda mulf_sqr1_lo,x
  sm6a:
    sbc mulf_sqr2_lo,x
    sta _bb+1
  sm7a:
    lda mulf_sqr1_hi,x
  sm8a:
    sbc mulf_sqr2_hi,x
    sta _BB+1
    sec
  sm5b:
    lda mulf_sqr1_lo,x
  sm6b:
    sbc mulf_sqr2_lo,x
    sta _dd+1
  sm7b:
    lda mulf_sqr1_hi,x
  sm8b:
    sbc mulf_sqr2_hi,x
    sta memR+3
    clc
  _AA:
    lda #0
  _bb:
    adc #0
    sta memR+1
  _BB:
    lda #0
  _CC:
    adc #0
    sta memR+2
    bcc !+
    inc memR+3
    clc
  !:
  _cc:
    lda #0
    adc memR+1
    sta memR+1
  _dd:
    lda #0
    adc memR+2
    sta memR+2
    bcc !+
    inc memR+3
  !:
    // return *memR;
    // [327] (dword) mulf16u::return#0 ← *((const nomodify dword*) mulf16u::memR) -- vduz1=_deref_pduc1 
    lda memR
    sta.z return
    lda memR+1
    sta.z return+1
    lda memR+2
    sta.z return+2
    lda memR+3
    sta.z return+3
    // mulf16u::@return
    // }
    // [328] return 
    rts
}
  // File Data
  // Array filled with spline segment points by splinePlot_8()
  SPLINE_8SEG: .fill 4*9, 0
  // Tables for the plotter - initialized by calling bitmap_init();
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // mulf_sqr tables will contain f(x)=int(x*x/4) and g(x) = f(x-255).
  // <f(x) = <(( x * x )/4)
  .align $100
  mulf_sqr1_lo: .fill $200, 0
  // >f(x) = >(( x * x )/4)
  .align $100
  mulf_sqr1_hi: .fill $200, 0
  // <g(x) =  <((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_lo: .fill $200, 0
  // >g(x) = >((( x - 255) * ( x - 255 ))/4)
  .align $100
  mulf_sqr2_hi: .fill $200, 0
  // True type letter c
  letter_c: .byte MOVE_TO
  .word $6c, $92, 0, 0
  .byte SPLINE_TO
  .word $59, $b6, $67, $a9
  .byte SPLINE_TO
  .word $3b, $c3, $4b, $c3
  .byte SPLINE_TO
  .word $17, $b2, $26, $c3
  .byte SPLINE_TO
  .word 9, $84, 9, $a1
  .byte SPLINE_TO
  .word $19, $57, 9, $68
  .byte SPLINE_TO
  .word $41, $45, $2a, $45
  .byte SPLINE_TO
  .word $5d, $4f, $52, $45
  .byte SPLINE_TO
  .word $69, $62, $69, $58
  .byte SPLINE_TO
  .word $66, $6a, $69, $67
  .byte SPLINE_TO
  .word $5d, $6d, $62, $6d
  .byte SPLINE_TO
  .word $51, $68, $55, $6d
  .byte SPLINE_TO
  .word $4e, $5d, $4f, $65
  .byte SPLINE_TO
  .word $49, $52, $4e, $56
  .byte SPLINE_TO
  .word $3d, $4e, $45, $4e
  .byte SPLINE_TO
  .word $28, $58, $30, $4e
  .byte SPLINE_TO
  .word $1d, $79, $1d, $64
  .byte SPLINE_TO
  .word $28, $9e, $1d, $8e
  .byte SPLINE_TO
  .word $44, $ae, $32, $ae
  .byte SPLINE_TO
  .word $5b, $a6, $50, $ae
  .byte SPLINE_TO
  .word $68, $90, $62, $a0
  .byte LINE_TO
  .word $6c, $92, 0, 0
  // Sine and Cosine tables
  // Angles: $00=0, $80=PI,$100=2*PI
  // Sine/Cosine: signed fixed [-$7f,$7f]
  .align $40
SIN:
.for(var i=0;i<$140;i++)
        .byte >round($7fff*sin(i*2*PI/256))


