constant byte* const COLORRAM = (byte*) 55296
constant byte* const DEFAULT_SCREEN = (byte*) 1024
constant byte* DIGITS[]  = "0123456789abcdef"z
constant const byte GREEN = 5
constant const byte LIGHT_BLUE = $e
constant byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant byte* RADIX_DECIMAL_VALUES_CHAR[]  = { $64, $a }
constant const byte RED = 2
constant byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
void __start()
void assert_cmp(signed byte assert_cmp::expect , signed byte assert_cmp::actual , byte* assert_cmp::message)
bool~ assert_cmp::$0 reg byte a 101.0
bool~ assert_cmp::$1 reg byte a 101.0
bool~ assert_cmp::$2 reg byte a 101.0
signed byte assert_cmp::actual
signed byte assert_cmp::actual#0 actual zp[1]:3 22.0
signed byte assert_cmp::actual#1 actual zp[1]:3 22.0
signed byte assert_cmp::actual#10 actual zp[1]:3 22.0
signed byte assert_cmp::actual#11 actual zp[1]:3 22.0
signed byte assert_cmp::actual#12 actual zp[1]:3 22.0
signed byte assert_cmp::actual#13 actual zp[1]:3 22.0
signed byte assert_cmp::actual#14 actual zp[1]:3 22.0
signed byte assert_cmp::actual#15 actual zp[1]:3 22.0
signed byte assert_cmp::actual#16 actual zp[1]:3 22.0
signed byte assert_cmp::actual#17 actual zp[1]:3 29.55
signed byte assert_cmp::actual#2 actual zp[1]:3 22.0
signed byte assert_cmp::actual#3 actual zp[1]:3 22.0
signed byte assert_cmp::actual#4 actual zp[1]:3 22.0
signed byte assert_cmp::actual#5 actual zp[1]:3 22.0
signed byte assert_cmp::actual#6 actual zp[1]:3 22.0
signed byte assert_cmp::actual#7 actual zp[1]:3 22.0
signed byte assert_cmp::actual#8 actual zp[1]:3 22.0
signed byte assert_cmp::actual#9 actual zp[1]:3 22.0
signed byte assert_cmp::expect
signed byte assert_cmp::expect#17 expect zp[1]:2 25.25
byte* assert_cmp::message
byte* assert_cmp::message#17 message zp[2]:4 7.214285714285714
byte assert_cmp::ok
byte assert_cmp::ok#1 reg byte a 202.0
byte assert_cmp::ok#2 reg byte a 202.0
byte assert_cmp::ok#3 reg byte a 202.0
byte assert_cmp::ok#4 reg byte a 404.0
constant byte* assert_cmp::s[5]  = "ok! "
constant byte* assert_cmp::s1[2]  = "
"
constant byte* assert_cmp::s2[$19]  = "Assert failed. expected:"
constant byte* assert_cmp::s3[9]  = " actual:"
constant byte* assert_cmp::s4[3]  = ". "
void conio_c64_init()
constant byte* const conio_c64_init::BASIC_CURSOR_LINE = (byte*) 214
byte conio_c64_init::line
byte conio_c64_init::line#0 reg byte x 11.0
byte conio_c64_init::line#2 reg byte x 22.0
byte conio_cursor_x loadstore zp[1]:12 837989.43575419
byte conio_cursor_y loadstore zp[1]:13 1.6410256964102566E7
byte* conio_line_color loadstore zp[2]:16 1.1818182395721925E7
byte* conio_line_text loadstore zp[2]:14 1.1693122264550265E7
byte conio_textcolor loadstore zp[1]:18 1.2317085426829267E7
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 2000002.0
byte cputc::c#2 reg byte a 20002.0
byte cputc::c#3 reg byte a 1.0505002E7
void cputln()
void cputs(const byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1000001.0
const byte* cputs::s
const byte* cputs::s#0 s zp[2]:6 500000.5
const byte* cputs::s#10 s zp[2]:6 101002.0
const byte* cputs::s#2 s zp[2]:6 2002.0
const byte* cputs::s#9 s zp[2]:6 1550002.0
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:23 202.0
byte*~ gotoxy::$6 zp[2]:19 202.0
word~ gotoxy::$7 zp[2]:19 151.5
word~ gotoxy::$8 zp[2]:21 202.0
word~ gotoxy::$9 zp[2]:19 202.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:19 101.0
byte gotoxy::x
constant byte gotoxy::x#2 x = 0
byte gotoxy::y
byte gotoxy::y#2 reg byte x 71.0
byte gotoxy::y#4 reg byte x 67.33333333333333
void main()
constant byte* main::$35[4]  = "aba"
constant byte* main::$38[3]  = "xy"
constant byte* main::$39[3]  = "xz"
constant byte* main::message[$d]  = "a<b strcmp()"
constant byte* main::message1[$11]  = "aaa<aab strcmp()"
constant byte* main::message10[$13]  = "aab=aac strncmp(2)"
constant byte* main::message11[$15]  = "qwex=qwea strncmp(3)"
constant byte* main::message12[$13]  = "aa<aacx strncmp(3)"
constant byte* main::message13[$10]  = "aa<ab memcmp(2)"
constant byte* main::message14[$e]  = "x=x memcmp(2)"
constant byte* main::message15[$10]  = "xy=xz memcmp(1)"
constant byte* main::message16[$14]  = "qwez>qwex memcmp(4)"
constant byte* main::message2[$10]  = "aa<aaa strcmp()"
constant byte* main::message3[$d]  = "x=x strcmp()"
constant byte* main::message4[$13]  = "qwez=qwez strcmp()"
constant byte* main::message5[$d]  = "q>k strcmp()"
constant byte* main::message6[$13]  = "kkkq>kkkp strcmp()"
constant byte* main::message7[$12]  = "kkkq>kkk strcmp()"
constant byte* main::message8[$15]  = "aaax<aabx strncmp(3)"
constant byte* main::message9[$13]  = "qwe>qee strncmp(2)"
constant byte* main::str1[2]  = "a"
constant byte* main::str11[4]  = "aaa"
constant byte* main::str111[5]  = "qwex"
constant byte* main::str12[3]  = "aa"
constant byte* main::str13[2]  = "x"
constant byte* main::str14[5]  = "qwez"
constant byte* main::str15[2]  = "q"
constant byte* main::str16[5]  = "kkkq"
constant byte* main::str18[5]  = "aaax"
constant byte* main::str19[4]  = "qwe"
constant byte* main::str2[2]  = "b"
constant byte* main::str21[4]  = "aab"
constant byte* main::str210[4]  = "aac"
constant byte* main::str211[5]  = "qwea"
constant byte* main::str212[5]  = "aacx"
constant byte* main::str25[2]  = "k"
constant byte* main::str26[5]  = "kkkp"
constant byte* main::str27[4]  = "kkk"
constant byte* main::str28[5]  = "aabx"
constant byte* main::str29[4]  = "qee"
signed word memcmp(const void* memcmp::str1 , const void* memcmp::str2 , word memcmp::n)
byte~ memcmp::$3 reg byte a 101.0
word memcmp::n
word memcmp::n#0 n zp[2]:6 667.3333333333334
word memcmp::n#5 n zp[2]:6 1034.6666666666667
word memcmp::n#7 n zp[2]:6 33.666666666666664
signed word memcmp::return
signed word memcmp::return#1 return zp[2]:26 202.0
signed word memcmp::return#10 return zp[2]:26 22.0
signed word memcmp::return#11 return zp[2]:26 22.0
signed word memcmp::return#2 return zp[2]:26 24.166666666666664
signed word memcmp::return#3 return zp[2]:26 22.0
signed word memcmp::return#4 return zp[2]:26 22.0
byte* memcmp::s1
byte* memcmp::s1#1 s1 zp[2]:4 1001.0
byte* memcmp::s1#2 s1 zp[2]:4 801.25
byte* memcmp::s1#6 s1 zp[2]:4 101.0
byte* memcmp::s2
byte* memcmp::s2#1 s2 zp[2]:10 2002.0
byte* memcmp::s2#2 s2 zp[2]:10 641.0
byte* memcmp::s2#6 s2 zp[2]:10 202.0
const void* memcmp::str1
const void* memcmp::str1#4 str1 zp[2]:4
const void* memcmp::str2
const void* memcmp::str2#4 str2 zp[2]:10
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:28
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:28 1.000000000001E12
byte* memcpy::dst#2 dst zp[2]:28 1.0033333333346667E12
byte* memcpy::dst#4 dst zp[2]:28 2.0000000002E10
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:10
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:10 2.000000000002E12
byte* memcpy::src#2 src zp[2]:10 1.00250000000125E12
byte* memcpy::src#4 src zp[2]:10 1.0000000001E10
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:26 1.2625000000025E11
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#1 reg byte x 2.000000002E9
byte memset::c#4 reg byte x 1.430000000002857E11
byte* memset::dst
byte* memset::dst#1 dst zp[2]:10 2.000000000002E12
byte* memset::dst#2 dst zp[2]:10 1.3366666666683335E12
byte* memset::dst#4 dst zp[2]:10 2.0000000002E10
byte* memset::end
byte* memset::end#0 end zp[2]:28 1.683333333336667E11
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:10
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
constant byte* printf_number_buffer::buffer_digits#0 buffer_digits = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 reg byte a 7001.0
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_zero_padding
signed byte printf_number_buffer::len
signed byte printf_number_buffer::padding
void printf_schar(signed byte printf_schar::value , byte printf_schar::format_min_length , byte printf_schar::format_justify_left , byte printf_schar::format_sign_always , byte printf_schar::format_zero_padding , byte printf_schar::format_upper_case , byte printf_schar::format_radix)
struct printf_format_number printf_schar::format
byte printf_schar::format_justify_left
byte printf_schar::format_min_length
byte printf_schar::format_radix
byte printf_schar::format_sign_always
byte printf_schar::format_upper_case
byte printf_schar::format_zero_padding
byte printf_schar::uvalue
signed byte printf_schar::value
signed byte printf_schar::value#0 reg byte x 1001.0
signed byte printf_schar::value#1 reg byte x 202.0
signed byte printf_schar::value#2 reg byte x 202.0
signed byte printf_schar::value#3 reg byte x 1068.3333333333335
signed byte printf_schar::value#5 reg byte x 2002.0
void printf_string(byte* printf_string::str , byte printf_string::format_min_length , byte printf_string::format_justify_left)
struct printf_format_string printf_string::format
byte printf_string::format_justify_left
byte printf_string::format_min_length
signed byte printf_string::len
signed byte printf_string::padding
byte* printf_string::str
byte* printf_string::str#0 str zp[2]:4 202.0
byte* printf_string::str#1 str zp[2]:4 202.0
byte* printf_string::str#2 str zp[2]:4 1203.0
signed word strcmp(const byte* strcmp::str1 , const byte* strcmp::str2)
byte~ strcmp::$0 reg byte a 101.0
signed word strcmp::return
signed word strcmp::return#0 return zp[2]:26 202.0
signed word strcmp::return#10 return zp[2]:26 22.0
signed word strcmp::return#11 return zp[2]:26 18.9
signed word strcmp::return#12 return zp[2]:26 22.0
signed word strcmp::return#13 return zp[2]:26 22.0
signed word strcmp::return#14 return zp[2]:26 22.0
signed word strcmp::return#15 return zp[2]:26 22.0
signed word strcmp::return#16 return zp[2]:26 22.0
signed word strcmp::return#17 return zp[2]:26 22.0
signed word strcmp::return#18 return zp[2]:26 22.0
byte* strcmp::s1
byte* strcmp::s1#0 s1 zp[2]:4 101.0
byte* strcmp::s1#1 s1 zp[2]:4 1001.0
byte* strcmp::s1#2 s1 zp[2]:4 1402.0
byte* strcmp::s2
byte* strcmp::s2#0 s2 zp[2]:6 101.0
byte* strcmp::s2#1 s2 zp[2]:6 2002.0
byte* strcmp::s2#2 s2 zp[2]:6 801.25
const byte* strcmp::str1
const byte* strcmp::str2
signed word strncmp(const byte* strncmp::str1 , const byte* strncmp::str2 , word strncmp::n)
byte~ strncmp::$0 reg byte a 101.0
word strncmp::n
word strncmp::n#0 n zp[2]:4 600.5999999999999
word strncmp::n#6 n zp[2]:4 1051.5
word strncmp::n#8 n zp[2]:4 101.0
signed word strncmp::return
signed word strncmp::return#0 return zp[2]:10 202.0
signed word strncmp::return#10 return zp[2]:10 22.0
signed word strncmp::return#11 return zp[2]:10 22.0
signed word strncmp::return#12 return zp[2]:10 22.0
signed word strncmp::return#13 return zp[2]:10 22.0
signed word strncmp::return#2 return zp[2]:10 22.285714285714285
signed word strncmp::return#3 return zp[2]:10 22.0
byte* strncmp::s1
byte* strncmp::s1#0 s1 zp[2]:6 101.0
byte* strncmp::s1#1 s1 zp[2]:6 1001.0
byte* strncmp::s1#2 s1 zp[2]:6 841.2
byte* strncmp::s2
byte* strncmp::s2#0 s2 zp[2]:26 101.0
byte* strncmp::s2#1 s2 zp[2]:26 2002.0
byte* strncmp::s2#2 s2 zp[2]:26 534.1666666666666
const byte* strncmp::str1
const byte* strncmp::str2
byte textcolor(byte textcolor::color)
byte textcolor::color
byte textcolor::color#2 reg byte a 1001.0
byte textcolor::old
byte textcolor::return
void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
byte* uctoa::buffer
byte* uctoa::buffer#11 buffer zp[2]:26 35000.49999999999
byte* uctoa::buffer#14 buffer zp[2]:26 150001.5
byte* uctoa::buffer#3 buffer zp[2]:26 20002.0
byte* uctoa::buffer#4 buffer zp[2]:26 200002.0
byte uctoa::digit
byte uctoa::digit#1 digit zp[1]:8 200002.0
byte uctoa::digit#2 digit zp[1]:8 30769.53846153846
byte uctoa::digit_value
byte uctoa::digit_value#0 digit_value zp[1]:25 60000.600000000006
byte* uctoa::digit_values
byte uctoa::max_digits
byte uctoa::radix
byte uctoa::started
byte uctoa::started#2 started zp[1]:9 60000.600000000006
byte uctoa::started#4 started zp[1]:9 100001.0
byte uctoa::value
byte uctoa::value#0 reg byte x 100001.0
byte uctoa::value#1 reg byte x 5501.0
byte uctoa::value#2 reg byte x 70000.99999999999
byte uctoa::value#6 reg byte x 150001.5
byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
byte* uctoa_append::buffer
byte* uctoa_append::buffer#0 buffer zp[2]:26 137500.25
byte uctoa_append::digit
byte uctoa_append::digit#1 reg byte y 1.00000001E8
byte uctoa_append::digit#2 reg byte y 1.005000015E8
byte uctoa_append::return
byte uctoa_append::return#0 reg byte x 200002.0
byte uctoa_append::sub
byte uctoa_append::sub#0 sub zp[1]:25 3.33500005E7
byte uctoa_append::value
byte uctoa_append::value#0 reg byte x 366667.3333333334
byte uctoa_append::value#1 reg byte x 2.00000002E8
byte uctoa_append::value#2 reg byte x 5.018333416666667E7

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
zp[1]:2 [ assert_cmp::expect#17 ]
zp[1]:3 [ assert_cmp::actual#17 assert_cmp::actual#4 assert_cmp::actual#5 assert_cmp::actual#6 assert_cmp::actual#7 assert_cmp::actual#8 assert_cmp::actual#0 assert_cmp::actual#9 assert_cmp::actual#10 assert_cmp::actual#11 assert_cmp::actual#12 assert_cmp::actual#13 assert_cmp::actual#14 assert_cmp::actual#15 assert_cmp::actual#16 assert_cmp::actual#1 assert_cmp::actual#2 assert_cmp::actual#3 ]
reg byte a [ assert_cmp::ok#4 assert_cmp::ok#1 assert_cmp::ok#2 assert_cmp::ok#3 ]
zp[2]:4 [ memcmp::str1#4 memcmp::s1#2 memcmp::s1#6 memcmp::s1#1 strncmp::n#6 strncmp::n#8 strncmp::n#0 assert_cmp::message#17 printf_string::str#2 printf_string::str#0 printf_string::str#1 strcmp::s1#2 strcmp::s1#0 strcmp::s1#1 ]
reg byte a [ textcolor::color#2 ]
zp[2]:6 [ cputs::s#9 cputs::s#10 cputs::s#2 cputs::s#0 memcmp::n#5 memcmp::n#7 memcmp::n#0 strncmp::s1#2 strncmp::s1#0 strncmp::s1#1 strcmp::s2#2 strcmp::s2#0 strcmp::s2#1 ]
reg byte x [ printf_schar::value#5 printf_schar::value#0 printf_schar::value#3 printf_schar::value#1 printf_schar::value#2 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 ]
zp[1]:8 [ uctoa::digit#2 uctoa::digit#1 ]
reg byte x [ uctoa::value#2 uctoa::value#6 uctoa::value#1 uctoa::value#0 ]
zp[1]:9 [ uctoa::started#2 uctoa::started#4 ]
reg byte x [ uctoa_append::value#2 uctoa_append::value#0 uctoa_append::value#1 ]
reg byte y [ uctoa_append::digit#2 uctoa_append::digit#1 ]
zp[2]:10 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 memcmp::str2#4 memcmp::s2#2 memcmp::s2#6 memcmp::s2#1 strncmp::return#2 strncmp::return#0 strncmp::return#3 strncmp::return#10 strncmp::return#11 strncmp::return#12 strncmp::return#13 ]
reg byte x [ memset::c#4 memset::c#1 ]
zp[1]:12 [ conio_cursor_x ]
zp[1]:13 [ conio_cursor_y ]
zp[2]:14 [ conio_line_text ]
zp[2]:16 [ conio_line_color ]
zp[1]:18 [ conio_textcolor ]
zp[2]:19 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:21 [ gotoxy::$8 ]
zp[2]:23 [ gotoxy::$5 ]
reg byte a [ strcmp::$0 ]
reg byte a [ assert_cmp::$2 ]
reg byte a [ assert_cmp::$1 ]
reg byte a [ assert_cmp::$0 ]
reg byte a [ strncmp::$0 ]
reg byte a [ memcmp::$3 ]
reg byte a [ cputs::c#1 ]
reg byte a [ printf_number_buffer::buffer_sign#0 ]
zp[1]:25 [ uctoa::digit_value#0 uctoa_append::sub#0 ]
reg byte x [ uctoa_append::return#0 ]
zp[2]:26 [ memcpy::src_end#0 uctoa::buffer#11 uctoa::buffer#14 uctoa::buffer#4 uctoa::buffer#3 uctoa_append::buffer#0 memcmp::return#2 memcmp::return#1 memcmp::return#3 memcmp::return#4 memcmp::return#10 memcmp::return#11 strncmp::s2#2 strncmp::s2#0 strncmp::s2#1 strcmp::return#11 strcmp::return#0 strcmp::return#12 strcmp::return#13 strcmp::return#14 strcmp::return#15 strcmp::return#16 strcmp::return#17 strcmp::return#18 strcmp::return#10 ]
zp[2]:28 [ memset::end#0 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
mem[12] [ printf_buffer ]
