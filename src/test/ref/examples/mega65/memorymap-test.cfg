
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call memoryRemapBlock 
  to:main::@1
main::@1: scope:[main]  from main
  [2] *((const byte*) main::block1) ← (byte) $55
  [3] *((const byte*) main::block1+(byte) 1) ← (byte) $aa
  [4] call memoryRemapBlock 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [5] *((const byte*) main::block2+(byte) 2) ← (byte) $55
  [6] *((const byte*) main::block2+(byte) 3) ← (byte) $aa
  [7] call memoryRemap 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] *((const byte*) main::block2+(byte) 4) ← *((const byte*) main::block1+(byte) 2)
  [9] *((const byte*) main::block1+(byte) 5) ← *((const byte*) main::block2+(byte) 1)
  to:main::@return
main::@return: scope:[main]  from main::@3
  [10] return 
  to:@return

(void()) memoryRemapBlock((byte) memoryRemapBlock::blockPage , (word) memoryRemapBlock::memoryPage)
memoryRemapBlock: scope:[memoryRemapBlock]  from main main::@1
  [11] (byte) memoryRemapBlock::blockPage#2 ← phi( main/(byte) $40 main::@1/(byte) $80 )
  [12] (word) memoryRemapBlock::pageOffset#0 ← (word) $100 - (byte) memoryRemapBlock::blockPage#2
  [13] (byte) memoryRemapBlock::block#0 ← (byte) memoryRemapBlock::blockPage#2 >> (byte) 5
  [14] (byte) memoryRemapBlock::blockBits#0 ← (byte) 1 << (byte) memoryRemapBlock::block#0
  [15] (byte) memoryRemap::remapBlocks#1 ← (byte) memoryRemapBlock::blockBits#0
  [16] (word) memoryRemap::lowerMemoryPageOffset#1 ← (word) memoryRemapBlock::pageOffset#0
  [17] (word) memoryRemap::upperMemoryPageOffset#1 ← (word) memoryRemapBlock::pageOffset#0
  [18] call memoryRemap 
  to:memoryRemapBlock::@return
memoryRemapBlock::@return: scope:[memoryRemapBlock]  from memoryRemapBlock
  [19] return 
  to:@return

(void()) memoryRemap((byte) memoryRemap::remapBlocks , (word) memoryRemap::lowerMemoryPageOffset , (word) memoryRemap::upperMemoryPageOffset)
memoryRemap: scope:[memoryRemap]  from main::@2 memoryRemapBlock
  [20] (word) memoryRemap::upperMemoryPageOffset#2 ← phi( main::@2/(byte) $80 memoryRemapBlock/(word) memoryRemap::upperMemoryPageOffset#1 )
  [20] (byte) memoryRemap::remapBlocks#2 ← phi( main::@2/(const nomodify byte) MEMORYBLOCK_4000|(const nomodify byte) MEMORYBLOCK_8000 memoryRemapBlock/(byte) memoryRemap::remapBlocks#1 )
  [20] (word) memoryRemap::lowerMemoryPageOffset#2 ← phi( main::@2/(byte) $c0 memoryRemapBlock/(word) memoryRemap::lowerMemoryPageOffset#1 )
  [21] (byte~) memoryRemap::$0 ← < (word) memoryRemap::lowerMemoryPageOffset#2
  [22] *((const byte*) memoryRemap::aVal) ← (byte~) memoryRemap::$0
  [23] (byte~) memoryRemap::$1 ← (byte) memoryRemap::remapBlocks#2 << (byte) 4
  [24] (byte~) memoryRemap::$2 ← > (word) memoryRemap::lowerMemoryPageOffset#2
  [25] (byte~) memoryRemap::$3 ← (byte~) memoryRemap::$2 & (byte) $f
  [26] (byte~) memoryRemap::$4 ← (byte~) memoryRemap::$1 | (byte~) memoryRemap::$3
  [27] *((const byte*) memoryRemap::xVal) ← (byte~) memoryRemap::$4
  [28] (byte~) memoryRemap::$5 ← < (word) memoryRemap::upperMemoryPageOffset#2
  [29] *((const byte*) memoryRemap::yVal) ← (byte~) memoryRemap::$5
  [30] (byte~) memoryRemap::$6 ← (byte) memoryRemap::remapBlocks#2 & (byte) $f0
  [31] (byte~) memoryRemap::$7 ← > (word) memoryRemap::upperMemoryPageOffset#2
  [32] (byte~) memoryRemap::$8 ← (byte~) memoryRemap::$7 & (byte) $f
  [33] (byte~) memoryRemap::$9 ← (byte~) memoryRemap::$6 | (byte~) memoryRemap::$8
  [34] *((const byte*) memoryRemap::zVal) ← (byte~) memoryRemap::$9
  asm { ldaaVal ldxxVal ldyyVal ldzzVal map eom  }
  to:memoryRemap::@return
memoryRemap::@return: scope:[memoryRemap]  from memoryRemap
  [36] return 
  to:@return
