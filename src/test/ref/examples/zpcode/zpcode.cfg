@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@2/(byte) main::i#1 )
  [6] if((byte) main::i#2<(byte) $14) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3 main::@6
  [7] if(*((const byte*) RASTER#0)!=(byte) $ff) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] phi()
  [9] call loop 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] phi()
  [11] call zpLoop 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [12] *((const byte*) BGCOL#0) ← (byte) 0
  to:main::@3
main::@2: scope:[main]  from main::@1
  [13] *((const byte*) main::zpCode#0 + (byte) main::i#2) ← *((const byte[]) zpCodeData + (byte) main::i#2)
  [14] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@1

(void()) zpLoop()
zpLoop: scope:[zpLoop]  from main::@5
  [15] phi()
  to:zpLoop::@1
zpLoop::@1: scope:[zpLoop]  from zpLoop zpLoop::@1
  [16] (byte) zpLoop::i#2 ← phi( zpLoop/(byte) 0 zpLoop::@1/(byte) zpLoop::i#1 )
  [17] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0)
  [18] (byte) zpLoop::i#1 ← ++ (byte) zpLoop::i#2
  [19] if((byte) zpLoop::i#1!=(byte) $65) goto zpLoop::@1
  to:zpLoop::@return
zpLoop::@return: scope:[zpLoop]  from zpLoop::@1
  [20] return 
  to:@return

(void()) loop()
loop: scope:[loop]  from main::@4
  [21] phi()
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@1
  [22] (byte) loop::i#2 ← phi( loop/(byte) 0 loop::@1/(byte) loop::i#1 )
  [23] *((const byte*) BGCOL#0) ← -- *((const byte*) BGCOL#0)
  [24] (byte) loop::i#1 ← ++ (byte) loop::i#2
  [25] if((byte) loop::i#1!=(byte) $65) goto loop::@1
  to:loop::@return
loop::@return: scope:[loop]  from loop::@1
  [26] return 
  to:@return
