
(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (byte) conio_cursor_x ← (byte) 0
  [2] (byte) conio_cursor_y ← (byte) 0
  [3] (byte*) conio_line_text ← (const nomodify byte*) DEFAULT_SCREEN
  [4] (byte*) conio_line_color ← (const nomodify byte*) COLORRAM
  [5] call conio_mega65_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

(void()) conio_mega65_init()
conio_mega65_init: scope:[conio_mega65_init]  from __start::__init1
  asm { sei  }
  asm { lda#0 tax tay taz map eom  }
  [11] *((const nomodify to_volatile byte*) IO_KEY) ← (byte) $47
  [12] *((const nomodify to_volatile byte*) IO_KEY) ← (byte) $53
  [13] *((const nomodify to_volatile byte*) IO_BANK) ← *((const nomodify to_volatile byte*) IO_BANK) | (const nomodify byte) CRAM2K
  [14] (byte) conio_mega65_init::line#0 ← *((const nomodify byte*) conio_mega65_init::BASIC_CURSOR_LINE) + (byte) 1
  [15] if((byte) conio_mega65_init::line#0<(byte) $18+(byte) 1) goto conio_mega65_init::@2
  to:conio_mega65_init::@1
conio_mega65_init::@2: scope:[conio_mega65_init]  from conio_mega65_init
  [16] phi()
  to:conio_mega65_init::@1
conio_mega65_init::@1: scope:[conio_mega65_init]  from conio_mega65_init conio_mega65_init::@2
  [17] (byte) conio_mega65_init::line#2 ← phi( conio_mega65_init::@2/(byte) conio_mega65_init::line#0 conio_mega65_init/(byte) $18 )
  [18] (byte) gotoxy::y#2 ← (byte) conio_mega65_init::line#2
  [19] call gotoxy 
  to:conio_mega65_init::@return
conio_mega65_init::@return: scope:[conio_mega65_init]  from conio_mega65_init::@1
  [20] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  [21] phi()
  [22] call cputs 
  to:main::@return
main::@return: scope:[main]  from main
  [23] return 
  to:@return

(void()) gotoxy((byte) gotoxy::x , (byte) gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_mega65_init::@1
  [24] if((byte) gotoxy::y#2<(byte) $19+(byte) 1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [25] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [26] (byte) gotoxy::y#4 ← phi( gotoxy::@3/(byte) gotoxy::y#2 gotoxy/(byte) 0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [27] (byte) conio_cursor_x ← (const byte) gotoxy::x#2
  [28] (byte) conio_cursor_y ← (byte) gotoxy::y#4
  [29] (word~) gotoxy::$7 ← (word)(byte) gotoxy::y#4
  [30] (word~) gotoxy::$8 ← (word~) gotoxy::$7 << (byte) 2
  [31] (word~) gotoxy::$9 ← (word~) gotoxy::$8 + (word~) gotoxy::$7
  [32] (word) gotoxy::line_offset#0 ← (word~) gotoxy::$9 << (byte) 4
  [33] (byte*~) gotoxy::$5 ← (const nomodify byte*) DEFAULT_SCREEN + (word) gotoxy::line_offset#0
  [34] (byte*) conio_line_text ← (byte*~) gotoxy::$5
  [35] (byte*~) gotoxy::$6 ← (const nomodify byte*) COLORRAM + (word) gotoxy::line_offset#0
  [36] (byte*) conio_line_color ← (byte*~) gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [37] return 
  to:@return

(void()) cputs((to_nomodify byte*) cputs::s)
cputs: scope:[cputs]  from main
  [38] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [39] (to_nomodify byte*) cputs::s#2 ← phi( cputs/(const byte*) main::s cputs::@2/(to_nomodify byte*) cputs::s#0 )
  [40] (byte) cputs::c#1 ← *((to_nomodify byte*) cputs::s#2)
  [41] (to_nomodify byte*) cputs::s#0 ← ++ (to_nomodify byte*) cputs::s#2
  [42] if((byte) 0!=(byte) cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [43] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [44] (byte) cputc::c#0 ← (byte) cputs::c#1
  [45] call cputc 
  to:cputs::@1

(void()) cputc((byte) cputc::c)
cputc: scope:[cputc]  from cputs::@2
  [46] if((byte) cputc::c#0==(byte) '
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [47] *((byte*) conio_line_text + (byte) conio_cursor_x) ← (byte) cputc::c#0
  [48] *((byte*) conio_line_color + (byte) conio_cursor_x) ← (const nomodify byte) LIGHT_BLUE
  [49] (byte) conio_cursor_x ← ++ (byte) conio_cursor_x
  [50] if((byte) conio_cursor_x!=(byte) $50) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [51] phi()
  [52] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [53] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [54] phi()
  [55] call cputln 
  to:cputc::@return

(void()) cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [56] (byte*) conio_line_text ← (byte*) conio_line_text + (byte) $50
  [57] (byte*) conio_line_color ← (byte*) conio_line_color + (byte) $50
  [58] (byte) conio_cursor_x ← (byte) 0
  [59] (byte) conio_cursor_y ← ++ (byte) conio_cursor_y
  [60] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [61] return 
  to:@return

(void()) cscroll()
cscroll: scope:[cscroll]  from cputln
  [62] if((byte) conio_cursor_y!=(byte) $19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [63] phi()
  [64] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [65] phi()
  [66] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [67] phi()
  [68] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [69] phi()
  [70] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [71] (byte*) conio_line_text ← (byte*) conio_line_text - (byte) $50
  [72] (byte*) conio_line_color ← (byte*) conio_line_color - (byte) $50
  [73] (byte) conio_cursor_y ← -- (byte) conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [74] return 
  to:@return

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [75] (void*) memcpy::destination#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN cscroll::@2/(void*)(const nomodify byte*) COLORRAM )
  [75] (void*) memcpy::source#2 ← phi( cscroll::@1/(void*)(const nomodify byte*) DEFAULT_SCREEN+(byte) $50 cscroll::@2/(void*)(const nomodify byte*) COLORRAM+(byte) $50 )
  [76] (byte*) memcpy::src_end#0 ← (byte*)(void*) memcpy::source#2 + (word)(number) $19*(number) $50-(number) $50
  [77] (byte*) memcpy::src#4 ← (byte*)(void*) memcpy::source#2
  [78] (byte*) memcpy::dst#4 ← (byte*)(void*) memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [79] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*) memcpy::dst#4 memcpy::@2/(byte*) memcpy::dst#1 )
  [79] (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#4 memcpy::@2/(byte*) memcpy::src#1 )
  [80] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [81] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [82] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [83] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [84] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [85] (byte) memset::c#4 ← phi( cscroll::@3/(byte) ' ' cscroll::@4/(const nomodify byte) LIGHT_BLUE )
  [85] (void*) memset::str#3 ← phi( cscroll::@3/(void*)(const nomodify byte*) DEFAULT_SCREEN+(word)(number) $19*(number) $50-(byte) $50 cscroll::@4/(void*)(const nomodify byte*) COLORRAM+(word)(number) $19*(number) $50-(byte) $50 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [86] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (byte) $50
  [87] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [88] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [89] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [90] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [91] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [92] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2
