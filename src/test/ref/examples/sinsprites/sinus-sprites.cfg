@begin: scope:[]  from
  [0] phi()
  to:@57
@57: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @57
  [3] phi()
main: scope:[main]  from @57
  [4] phi()
  [5] call init 
  to:main::@2
main::@2: scope:[main]  from main main::@2 main::@3
  [6] (byte) sin_idx_y#13 ← phi( main::@3/(byte) sin_idx_y#11 main/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [6] (byte) sin_idx_x#13 ← phi( main::@3/(byte) sin_idx_x#11 main/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [7] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [8] phi()
  [9] call anim 
  to:main::@2
anim: scope:[anim]  from main::@3
  [10] *((const byte*) BORDERCOL#0) ← ++ *((const byte*) BORDERCOL#0)
  [11] (byte) anim::xidx#0 ← (byte) sin_idx_x#13
  [12] (byte) anim::yidx#0 ← (byte) sin_idx_y#13
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@3
  [13] (byte) anim::j#2 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@3/(byte) anim::j#1 )
  [13] (byte) anim::yidx#3 ← phi( anim/(byte) anim::yidx#0 anim::@3/(byte) anim::yidx#6 )
  [13] (byte) anim::j2#2 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 12 anim::@3/(byte) anim::j2#1 )
  [13] (byte) anim::x_msb#2 ← phi( anim/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@3/(byte) anim::x_msb#1 )
  [13] (byte) anim::xidx#3 ← phi( anim/(byte) anim::xidx#0 anim::@3/(byte) anim::xidx#5 )
  [14] (word) anim::x#0 ← ((word))(byte/signed byte/word/signed word/dword/signed dword) 30 + *((const byte[221]) sintab_x#0 + (byte) anim::xidx#3)
  [15] (byte~) anim::$2 ← (byte) anim::x_msb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [16] (byte~) anim::$3 ← > (word) anim::x#0
  [17] (byte) anim::x_msb#1 ← (byte~) anim::$2 | (byte~) anim::$3
  [18] (byte~) anim::$5 ← < (word) anim::x#0
  [19] *((const byte*) SPRITES_XPOS#0 + (byte) anim::j2#2) ← (byte~) anim::$5
  [20] *((const byte*) SPRITES_YPOS#0 + (byte) anim::j2#2) ← *((const byte[197]) sintab_y#0 + (byte) anim::yidx#3)
  [21] (byte) anim::xidx#1 ← (byte) anim::xidx#3 + (byte/signed byte/word/signed word/dword/signed dword) 10
  [22] if((byte) anim::xidx#1<(const byte) sinlen_x#0) goto anim::@2
  to:anim::@6
anim::@6: scope:[anim]  from anim::@1
  [23] (byte) anim::xidx#2 ← (byte) anim::xidx#1 - (const byte) sinlen_x#0
  to:anim::@2
anim::@2: scope:[anim]  from anim::@1 anim::@6
  [24] (byte) anim::xidx#5 ← phi( anim::@1/(byte) anim::xidx#1 anim::@6/(byte) anim::xidx#2 )
  [25] (byte) anim::yidx#1 ← (byte) anim::yidx#3 + (byte/signed byte/word/signed word/dword/signed dword) 8
  [26] if((byte) anim::yidx#1<(const byte) sinlen_y#0) goto anim::@3
  to:anim::@7
anim::@7: scope:[anim]  from anim::@2
  [27] (byte) anim::yidx#2 ← (byte) anim::yidx#1 - (const byte) sinlen_y#0
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2 anim::@7
  [28] (byte) anim::yidx#6 ← phi( anim::@2/(byte) anim::yidx#1 anim::@7/(byte) anim::yidx#2 )
  [29] (byte) anim::j2#1 ← (byte) anim::j2#2 - (byte/signed byte/word/signed word/dword/signed dword) 2
  [30] (byte) anim::j#1 ← ++ (byte) anim::j#2
  [31] if((byte) anim::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto anim::@1
  to:anim::@8
anim::@8: scope:[anim]  from anim::@3
  [32] *((const byte*) SPRITES_XMSB#0) ← (byte) anim::x_msb#1
  [33] (byte) sin_idx_x#3 ← ++ (byte) sin_idx_x#13
  [34] if((byte) sin_idx_x#3<(const byte) sinlen_x#0) goto anim::@14
  to:anim::@4
anim::@4: scope:[anim]  from anim::@14 anim::@8
  [35] (byte) sin_idx_x#11 ← phi( anim::@14/(byte) sin_idx_x#3 anim::@8/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [36] (byte) sin_idx_y#3 ← ++ (byte) sin_idx_y#13
  [37] if((byte) sin_idx_y#3<(const byte) sinlen_y#0) goto anim::@15
  to:anim::@5
anim::@5: scope:[anim]  from anim::@15 anim::@4
  [38] (byte) sin_idx_y#11 ← phi( anim::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 anim::@15/(byte) sin_idx_y#3 )
  [39] *((const byte*) BORDERCOL#0) ← -- *((const byte*) BORDERCOL#0)
  to:anim::@return
anim::@return: scope:[anim]  from anim::@5
  [40] return 
  to:@return
anim::@15: scope:[anim]  from anim::@4
  [41] phi()
  to:anim::@5
anim::@14: scope:[anim]  from anim::@8
  [42] phi()
  to:anim::@4
init: scope:[init]  from main
  [43] phi()
  [44] call clear_screen 
  to:init::@1
init::@1: scope:[init]  from init init::@1
  [45] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [46] *((const byte*) COLS#0 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [47] *((const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 40 + (byte) init::i#2) ← (byte/signed byte/word/signed word/dword/signed dword) 11
  [48] (byte) init::i#1 ← ++ (byte) init::i#2
  [49] if((byte) init::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto init::@1
  to:init::@2
init::@2: scope:[init]  from init::@1
  [50] phi()
  [51] call place_sprites 
  to:init::@4
init::@4: scope:[init]  from init::@2
  [52] phi()
  [53] call gen_sprites 
  to:init::@5
init::@5: scope:[init]  from init::@4
  [54] phi()
  [55] call progress_init 
  to:init::@6
init::@6: scope:[init]  from init::@5
  [56] phi()
  [57] call gen_sintab 
  to:init::@7
init::@7: scope:[init]  from init::@6
  [58] phi()
  [59] call progress_init 
  to:init::@8
init::@8: scope:[init]  from init::@7
  [60] phi()
  [61] call gen_sintab 
  to:init::@9
init::@9: scope:[init]  from init::@8
  [62] phi()
  [63] call clear_screen 
  to:init::@return
init::@return: scope:[init]  from init::@9
  [64] return 
  to:@return
clear_screen: scope:[clear_screen]  from init init::@9
  [65] phi()
  to:clear_screen::@1
clear_screen::@1: scope:[clear_screen]  from clear_screen clear_screen::@1
  [66] (byte*) clear_screen::sc#2 ← phi( clear_screen/(const byte*) SCREEN#0 clear_screen::@1/(byte*) clear_screen::sc#1 )
  [67] *((byte*) clear_screen::sc#2) ← (byte) ' '
  [68] (byte*) clear_screen::sc#1 ← ++ (byte*) clear_screen::sc#2
  [69] if((byte*) clear_screen::sc#1<(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto clear_screen::@1
  to:clear_screen::@return
clear_screen::@return: scope:[clear_screen]  from clear_screen::@1
  [70] return 
  to:@return
gen_sintab: scope:[gen_sintab]  from init::@6 init::@8
  [71] (byte*) gen_sintab::sintab#12 ← phi( init::@6/(const byte[221]) sintab_x#0 init::@8/(const byte[197]) sintab_y#0 )
  [71] (byte) gen_sintab::length#10 ← phi( init::@6/(const byte) sinlen_x#0 init::@8/(const byte) sinlen_y#0 )
  [71] (byte) gen_sintab::min#2 ← phi( init::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 init::@8/(byte/signed byte/word/signed word/dword/signed dword) 50 )
  [71] (byte) gen_sintab::max#2 ← phi( init::@6/(byte/word/signed word/dword/signed dword) 255 init::@8/(byte/word/signed word/dword/signed dword) 208 )
  [72] (word) setFAC::w#0 ← ((word)) (byte) gen_sintab::max#2
  [73] call setFAC 
  to:gen_sintab::@3
gen_sintab::@3: scope:[gen_sintab]  from gen_sintab
  [74] phi()
  [75] call setARGtoFAC 
  to:gen_sintab::@4
gen_sintab::@4: scope:[gen_sintab]  from gen_sintab::@3
  asm { lda#0 ldx#0 ldy#0  }
  [77] (word) setFAC::w#1 ← ((word)) (byte) gen_sintab::min#2
  [78] call setFAC 
  to:gen_sintab::@5
gen_sintab::@5: scope:[gen_sintab]  from gen_sintab::@4
  [79] phi()
  [80] call setMEMtoFAC 
  to:gen_sintab::@6
gen_sintab::@6: scope:[gen_sintab]  from gen_sintab::@5
  [81] phi()
  [82] call subFACfromARG 
  to:gen_sintab::@7
gen_sintab::@7: scope:[gen_sintab]  from gen_sintab::@6
  [83] phi()
  [84] call setMEMtoFAC 
  to:gen_sintab::@8
gen_sintab::@8: scope:[gen_sintab]  from gen_sintab::@7
  [85] phi()
  [86] call setFAC 
  to:gen_sintab::@9
gen_sintab::@9: scope:[gen_sintab]  from gen_sintab::@8
  [87] phi()
  [88] call divMEMbyFAC 
  to:gen_sintab::@10
gen_sintab::@10: scope:[gen_sintab]  from gen_sintab::@9
  [89] phi()
  [90] call setMEMtoFAC 
  to:gen_sintab::@11
gen_sintab::@11: scope:[gen_sintab]  from gen_sintab::@10
  [91] phi()
  [92] call addMEMtoFAC 
  to:gen_sintab::@12
gen_sintab::@12: scope:[gen_sintab]  from gen_sintab::@11
  [93] phi()
  [94] call setMEMtoFAC 
  to:gen_sintab::@1
gen_sintab::@1: scope:[gen_sintab]  from gen_sintab::@12 gen_sintab::@23
  [95] (byte*) progress_cursor#34 ← phi( gen_sintab::@12/(byte*) progress_init::line#2 gen_sintab::@23/(byte*) progress_cursor#11 )
  [95] (byte) progress_idx#34 ← phi( gen_sintab::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_sintab::@23/(byte) progress_idx#12 )
  [95] (byte) gen_sintab::i#10 ← phi( gen_sintab::@12/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_sintab::@23/(byte) gen_sintab::i#1 )
  [96] (word) setFAC::w#3 ← ((word)) (byte) gen_sintab::i#10
  [97] call setFAC 
  to:gen_sintab::@14
gen_sintab::@14: scope:[gen_sintab]  from gen_sintab::@1
  [98] phi()
  [99] call mulFACbyMEM 
  to:gen_sintab::@15
gen_sintab::@15: scope:[gen_sintab]  from gen_sintab::@14
  [100] phi()
  [101] call setMEMtoFAC 
  to:gen_sintab::@16
gen_sintab::@16: scope:[gen_sintab]  from gen_sintab::@15
  [102] (word) setFAC::w#4 ← ((word)) (byte) gen_sintab::length#10
  [103] call setFAC 
  to:gen_sintab::@17
gen_sintab::@17: scope:[gen_sintab]  from gen_sintab::@16
  [104] phi()
  [105] call divMEMbyFAC 
  to:gen_sintab::@18
gen_sintab::@18: scope:[gen_sintab]  from gen_sintab::@17
  [106] phi()
  [107] call sinFAC 
  to:gen_sintab::@19
gen_sintab::@19: scope:[gen_sintab]  from gen_sintab::@18
  [108] phi()
  [109] call mulFACbyMEM 
  to:gen_sintab::@20
gen_sintab::@20: scope:[gen_sintab]  from gen_sintab::@19
  [110] phi()
  [111] call addMEMtoFAC 
  to:gen_sintab::@21
gen_sintab::@21: scope:[gen_sintab]  from gen_sintab::@20
  [112] phi()
  [113] call getFAC 
  [114] (word) getFAC::return#2 ← (word) getFAC::return#0
  to:gen_sintab::@22
gen_sintab::@22: scope:[gen_sintab]  from gen_sintab::@21
  [115] (word~) gen_sintab::$23 ← (word) getFAC::return#2
  [116] (byte~) gen_sintab::$24 ← ((byte)) (word~) gen_sintab::$23
  [117] *((byte*) gen_sintab::sintab#12 + (byte) gen_sintab::i#10) ← (byte~) gen_sintab::$24
  [118] call progress_inc 
  to:gen_sintab::@23
gen_sintab::@23: scope:[gen_sintab]  from gen_sintab::@22
  [119] (byte) gen_sintab::i#1 ← ++ (byte) gen_sintab::i#10
  [120] if((byte) gen_sintab::i#1<(byte) gen_sintab::length#10) goto gen_sintab::@1
  to:gen_sintab::@return
gen_sintab::@return: scope:[gen_sintab]  from gen_sintab::@23
  [121] return 
  to:@return
progress_inc: scope:[progress_inc]  from gen_sintab::@22
  [122] (byte) progress_idx#10 ← ++ (byte) progress_idx#34
  [123] if((byte) progress_idx#10!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@2: scope:[progress_inc]  from progress_inc
  [124] *((byte*) progress_cursor#34) ← *((const byte[]) progress_inc::progress_chars#0+(byte/signed byte/word/signed word/dword/signed dword) 8)
  [125] (byte*) progress_cursor#10 ← ++ (byte*) progress_cursor#34
  to:progress_inc::@1
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  [126] (byte*) progress_cursor#11 ← phi( progress_inc/(byte*) progress_cursor#34 progress_inc::@2/(byte*) progress_cursor#10 )
  [126] (byte) progress_idx#12 ← phi( progress_inc/(byte) progress_idx#10 progress_inc::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [127] *((byte*) progress_cursor#11) ← *((const byte[]) progress_inc::progress_chars#0 + (byte) progress_idx#12)
  to:progress_inc::@return
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  [128] return 
  to:@return
getFAC: scope:[getFAC]  from gen_sintab::@21
  asm { jsr$b1aa sty$fe sta$ff  }
  [130] (word) getFAC::return#0 ← *((const byte*) memHi#0) w= *((const byte*) memLo#0)
  to:getFAC::@return
getFAC::@return: scope:[getFAC]  from getFAC
  [131] return 
  to:@return
addMEMtoFAC: scope:[addMEMtoFAC]  from gen_sintab::@11 gen_sintab::@20
  [132] phi()
  [133] call prepareMEM 
  to:addMEMtoFAC::@1
addMEMtoFAC::@1: scope:[addMEMtoFAC]  from addMEMtoFAC
  asm { lda$fe ldy$ff jsr$b867  }
  to:addMEMtoFAC::@return
addMEMtoFAC::@return: scope:[addMEMtoFAC]  from addMEMtoFAC::@1
  [135] return 
  to:@return
prepareMEM: scope:[prepareMEM]  from addMEMtoFAC divMEMbyFAC mulFACbyMEM setFAC setMEMtoFAC
  [136] (byte*) prepareMEM::mem#5 ← phi( addMEMtoFAC/(const byte[]) gen_sintab::f_min#0 divMEMbyFAC/(byte*) prepareMEM::mem#3 mulFACbyMEM/(byte*) prepareMEM::mem#4 setFAC/(byte*~) prepareMEM::mem#8 setMEMtoFAC/(byte*) prepareMEM::mem#1 )
  [137] (byte~) prepareMEM::$0 ← < (byte*) prepareMEM::mem#5
  [138] *((const byte*) memLo#0) ← (byte~) prepareMEM::$0
  [139] (byte~) prepareMEM::$1 ← > (byte*) prepareMEM::mem#5
  [140] *((const byte*) memHi#0) ← (byte~) prepareMEM::$1
  to:prepareMEM::@return
prepareMEM::@return: scope:[prepareMEM]  from prepareMEM
  [141] return 
  to:@return
mulFACbyMEM: scope:[mulFACbyMEM]  from gen_sintab::@14 gen_sintab::@19
  [142] (byte*) mulFACbyMEM::mem#2 ← phi( gen_sintab::@14/(const byte*) gen_sintab::f_2pi#0 gen_sintab::@19/(const byte[]) gen_sintab::f_amp#0 )
  [143] (byte*) prepareMEM::mem#4 ← (byte*) mulFACbyMEM::mem#2
  [144] call prepareMEM 
  to:mulFACbyMEM::@1
mulFACbyMEM::@1: scope:[mulFACbyMEM]  from mulFACbyMEM
  asm { lda$fe ldy$ff jsr$ba28  }
  to:mulFACbyMEM::@return
mulFACbyMEM::@return: scope:[mulFACbyMEM]  from mulFACbyMEM::@1
  [146] return 
  to:@return
sinFAC: scope:[sinFAC]  from gen_sintab::@18
  asm { jsr$e26b  }
  to:sinFAC::@return
sinFAC::@return: scope:[sinFAC]  from sinFAC
  [148] return 
  to:@return
divMEMbyFAC: scope:[divMEMbyFAC]  from gen_sintab::@17 gen_sintab::@9
  [149] (byte*) divMEMbyFAC::mem#2 ← phi( gen_sintab::@17/(const byte[]) gen_sintab::f_i#0 gen_sintab::@9/(const byte[]) gen_sintab::f_amp#0 )
  [150] (byte*) prepareMEM::mem#3 ← (byte*) divMEMbyFAC::mem#2
  [151] call prepareMEM 
  to:divMEMbyFAC::@1
divMEMbyFAC::@1: scope:[divMEMbyFAC]  from divMEMbyFAC
  asm { lda$fe ldy$ff jsr$bb0f  }
  to:divMEMbyFAC::@return
divMEMbyFAC::@return: scope:[divMEMbyFAC]  from divMEMbyFAC::@1
  [153] return 
  to:@return
setFAC: scope:[setFAC]  from gen_sintab gen_sintab::@1 gen_sintab::@16 gen_sintab::@4 gen_sintab::@8
  [154] (word) setFAC::w#5 ← phi( gen_sintab/(word) setFAC::w#0 gen_sintab::@1/(word) setFAC::w#3 gen_sintab::@16/(word) setFAC::w#4 gen_sintab::@4/(word) setFAC::w#1 gen_sintab::@8/(byte/signed byte/word/signed word/dword/signed dword) 2 )
  [155] (byte*~) prepareMEM::mem#8 ← (byte*)(word) setFAC::w#5
  [156] call prepareMEM 
  to:setFAC::@1
setFAC::@1: scope:[setFAC]  from setFAC
  asm { ldy$fe lda$ff jsr$b391  }
  to:setFAC::@return
setFAC::@return: scope:[setFAC]  from setFAC::@1
  [158] return 
  to:@return
setMEMtoFAC: scope:[setMEMtoFAC]  from gen_sintab::@10 gen_sintab::@12 gen_sintab::@15 gen_sintab::@5 gen_sintab::@7
  [159] (byte*) setMEMtoFAC::mem#5 ← phi( gen_sintab::@10/(const byte[]) gen_sintab::f_amp#0 gen_sintab::@12/(const byte[]) gen_sintab::f_min#0 gen_sintab::@15/(const byte[]) gen_sintab::f_i#0 gen_sintab::@5/(const byte[]) gen_sintab::f_min#0 gen_sintab::@7/(const byte[]) gen_sintab::f_amp#0 )
  [160] (byte*) prepareMEM::mem#1 ← (byte*) setMEMtoFAC::mem#5
  [161] call prepareMEM 
  to:setMEMtoFAC::@1
setMEMtoFAC::@1: scope:[setMEMtoFAC]  from setMEMtoFAC
  asm { ldx$fe ldy$ff jsr$bbd4  }
  to:setMEMtoFAC::@return
setMEMtoFAC::@return: scope:[setMEMtoFAC]  from setMEMtoFAC::@1
  [163] return 
  to:@return
subFACfromARG: scope:[subFACfromARG]  from gen_sintab::@6
  asm { jsr$b853  }
  to:subFACfromARG::@return
subFACfromARG::@return: scope:[subFACfromARG]  from subFACfromARG
  [165] return 
  to:@return
setARGtoFAC: scope:[setARGtoFAC]  from gen_sintab::@3
  asm { jsr$bc0f  }
  to:setARGtoFAC::@return
setARGtoFAC::@return: scope:[setARGtoFAC]  from setARGtoFAC
  [167] return 
  to:@return
progress_init: scope:[progress_init]  from init::@5 init::@7
  [168] (byte*) progress_init::line#2 ← phi( init::@5/(const byte*) SCREEN#0 init::@7/(const byte*) SCREEN#0+(byte/signed byte/word/signed word/dword/signed dword) 40 )
  to:progress_init::@return
progress_init::@return: scope:[progress_init]  from progress_init
  [169] return 
  to:@return
gen_sprites: scope:[gen_sprites]  from init::@4
  [170] phi()
  to:gen_sprites::@1
gen_sprites::@1: scope:[gen_sprites]  from gen_sprites gen_sprites::@3
  [171] (byte*) gen_sprites::spr#2 ← phi( gen_sprites/(const byte*) sprites#0 gen_sprites::@3/(byte*) gen_sprites::spr#1 )
  [171] (byte) gen_sprites::i#2 ← phi( gen_sprites/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_sprites::@3/(byte) gen_sprites::i#1 )
  [172] (byte) gen_chargen_sprite::ch#0 ← *((const byte[]) gen_sprites::cml#0 + (byte) gen_sprites::i#2)
  [173] (byte*) gen_chargen_sprite::sprite#0 ← (byte*) gen_sprites::spr#2
  [174] call gen_chargen_sprite 
  to:gen_sprites::@3
gen_sprites::@3: scope:[gen_sprites]  from gen_sprites::@1
  [175] (byte*) gen_sprites::spr#1 ← (byte*) gen_sprites::spr#2 + (byte/signed byte/word/signed word/dword/signed dword) 64
  [176] (byte) gen_sprites::i#1 ← ++ (byte) gen_sprites::i#2
  [177] if((byte) gen_sprites::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto gen_sprites::@1
  to:gen_sprites::@return
gen_sprites::@return: scope:[gen_sprites]  from gen_sprites::@3
  [178] return 
  to:@return
gen_chargen_sprite: scope:[gen_chargen_sprite]  from gen_sprites::@1
  [179] (word~) gen_chargen_sprite::$0 ← ((word)) (byte) gen_chargen_sprite::ch#0
  [180] (word~) gen_chargen_sprite::$1 ← (word~) gen_chargen_sprite::$0 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [181] (byte*) gen_chargen_sprite::chargen#0 ← (const byte*) CHARGEN#0 + (word~) gen_chargen_sprite::$1
  asm { sei  }
  [183] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:gen_chargen_sprite::@1
gen_chargen_sprite::@1: scope:[gen_chargen_sprite]  from gen_chargen_sprite gen_chargen_sprite::@9
  [184] (byte*) gen_chargen_sprite::sprite#11 ← phi( gen_chargen_sprite/(byte*) gen_chargen_sprite::sprite#0 gen_chargen_sprite::@9/(byte*) gen_chargen_sprite::sprite#2 )
  [184] (byte) gen_chargen_sprite::y#2 ← phi( gen_chargen_sprite/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@9/(byte) gen_chargen_sprite::y#1 )
  [185] (byte) gen_chargen_sprite::bits#0 ← *((byte*) gen_chargen_sprite::chargen#0 + (byte) gen_chargen_sprite::y#2)
  to:gen_chargen_sprite::@2
gen_chargen_sprite::@2: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@1 gen_chargen_sprite::@8
  [186] (byte) gen_chargen_sprite::x#6 ← phi( gen_chargen_sprite::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::x#1 )
  [186] (byte*) gen_chargen_sprite::sprite#10 ← phi( gen_chargen_sprite::@1/(byte*) gen_chargen_sprite::sprite#11 gen_chargen_sprite::@8/(byte*) gen_chargen_sprite::sprite#4 )
  [186] (byte) gen_chargen_sprite::s_gen_cnt#4 ← phi( gen_chargen_sprite::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  [186] (byte) gen_chargen_sprite::s_gen#5 ← phi( gen_chargen_sprite::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::s_gen#6 )
  [186] (byte) gen_chargen_sprite::bits#2 ← phi( gen_chargen_sprite::@1/(byte) gen_chargen_sprite::bits#0 gen_chargen_sprite::@8/(byte) gen_chargen_sprite::bits#1 )
  [187] (byte~) gen_chargen_sprite::$3 ← (byte) gen_chargen_sprite::bits#2 & (byte/word/signed word/dword/signed dword) 128
  [188] if((byte~) gen_chargen_sprite::$3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gen_chargen_sprite::@3
  to:gen_chargen_sprite::@6
gen_chargen_sprite::@6: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@2
  [189] phi()
  to:gen_chargen_sprite::@3
gen_chargen_sprite::@3: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@2 gen_chargen_sprite::@6
  [190] (byte) gen_chargen_sprite::c#3 ← phi( gen_chargen_sprite::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@6/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  to:gen_chargen_sprite::@4
gen_chargen_sprite::@4: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@3 gen_chargen_sprite::@5
  [191] (byte*) gen_chargen_sprite::sprite#3 ← phi( gen_chargen_sprite::@3/(byte*) gen_chargen_sprite::sprite#10 gen_chargen_sprite::@5/(byte*) gen_chargen_sprite::sprite#4 )
  [191] (byte) gen_chargen_sprite::b#2 ← phi( gen_chargen_sprite::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::b#1 )
  [191] (byte) gen_chargen_sprite::s_gen_cnt#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen_cnt#4 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen_cnt#5 )
  [191] (byte) gen_chargen_sprite::s_gen#3 ← phi( gen_chargen_sprite::@3/(byte) gen_chargen_sprite::s_gen#5 gen_chargen_sprite::@5/(byte) gen_chargen_sprite::s_gen#6 )
  [192] (byte~) gen_chargen_sprite::$6 ← (byte) gen_chargen_sprite::s_gen#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [193] (byte) gen_chargen_sprite::s_gen#1 ← (byte~) gen_chargen_sprite::$6 | (byte) gen_chargen_sprite::c#3
  [194] (byte) gen_chargen_sprite::s_gen_cnt#1 ← ++ (byte) gen_chargen_sprite::s_gen_cnt#3
  [195] if((byte) gen_chargen_sprite::s_gen_cnt#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@5
  to:gen_chargen_sprite::@7
gen_chargen_sprite::@7: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4
  [196] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 0) ← (byte) gen_chargen_sprite::s_gen#1
  [197] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) gen_chargen_sprite::s_gen#1
  [198] *((byte*) gen_chargen_sprite::sprite#3 + (byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) gen_chargen_sprite::s_gen#1
  [199] (byte*) gen_chargen_sprite::sprite#1 ← ++ (byte*) gen_chargen_sprite::sprite#3
  to:gen_chargen_sprite::@5
gen_chargen_sprite::@5: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@4 gen_chargen_sprite::@7
  [200] (byte*) gen_chargen_sprite::sprite#4 ← phi( gen_chargen_sprite::@4/(byte*) gen_chargen_sprite::sprite#3 gen_chargen_sprite::@7/(byte*) gen_chargen_sprite::sprite#1 )
  [200] (byte) gen_chargen_sprite::s_gen_cnt#5 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen_cnt#1 gen_chargen_sprite::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [200] (byte) gen_chargen_sprite::s_gen#6 ← phi( gen_chargen_sprite::@4/(byte) gen_chargen_sprite::s_gen#1 gen_chargen_sprite::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [201] (byte) gen_chargen_sprite::b#1 ← ++ (byte) gen_chargen_sprite::b#2
  [202] if((byte) gen_chargen_sprite::b#1!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto gen_chargen_sprite::@4
  to:gen_chargen_sprite::@8
gen_chargen_sprite::@8: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@5
  [203] (byte) gen_chargen_sprite::bits#1 ← (byte) gen_chargen_sprite::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [204] (byte) gen_chargen_sprite::x#1 ← ++ (byte) gen_chargen_sprite::x#6
  [205] if((byte) gen_chargen_sprite::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@2
  to:gen_chargen_sprite::@9
gen_chargen_sprite::@9: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@8
  [206] (byte*) gen_chargen_sprite::sprite#2 ← (byte*) gen_chargen_sprite::sprite#4 + (byte/signed byte/word/signed word/dword/signed dword) 6
  [207] (byte) gen_chargen_sprite::y#1 ← ++ (byte) gen_chargen_sprite::y#2
  [208] if((byte) gen_chargen_sprite::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gen_chargen_sprite::@1
  to:gen_chargen_sprite::@10
gen_chargen_sprite::@10: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@9
  [209] *((const byte*) PROCPORT#0) ← (byte/signed byte/word/signed word/dword/signed dword) 55
  asm { cli  }
  to:gen_chargen_sprite::@return
gen_chargen_sprite::@return: scope:[gen_chargen_sprite]  from gen_chargen_sprite::@10
  [211] return 
  to:@return
place_sprites: scope:[place_sprites]  from init::@2
  [212] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 127
  [213] *((const byte*) SPRITES_EXPAND_X#0) ← (byte/signed byte/word/signed word/dword/signed dword) 127
  [214] *((const byte*) SPRITES_EXPAND_Y#0) ← (byte/signed byte/word/signed word/dword/signed dword) 127
  to:place_sprites::@1
place_sprites::@1: scope:[place_sprites]  from place_sprites place_sprites::@1
  [215] (byte) place_sprites::col#2 ← phi( place_sprites/(byte/signed byte/word/signed word/dword/signed dword) 5 place_sprites::@1/(byte) place_sprites::col#1 )
  [215] (byte) place_sprites::j2#3 ← phi( place_sprites/(byte/signed byte/word/signed word/dword/signed dword) 0 place_sprites::@1/(byte) place_sprites::j2#2 )
  [215] (byte) place_sprites::spr_x#2 ← phi( place_sprites/(byte/signed byte/word/signed word/dword/signed dword) 60 place_sprites::@1/(byte) place_sprites::spr_x#1 )
  [215] (byte) place_sprites::j#2 ← phi( place_sprites/(byte/signed byte/word/signed word/dword/signed dword) 0 place_sprites::@1/(byte) place_sprites::j#1 )
  [215] (byte) place_sprites::spr_id#2 ← phi( place_sprites/((byte))(const byte*) sprites#0/(byte/signed byte/word/signed word/dword/signed dword) 64 place_sprites::@1/(byte) place_sprites::spr_id#1 )
  [216] *((const byte*) place_sprites::sprites_ptr#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::spr_id#2
  [217] (byte) place_sprites::spr_id#1 ← ++ (byte) place_sprites::spr_id#2
  [218] *((const byte*) SPRITES_XPOS#0 + (byte) place_sprites::j2#3) ← (byte) place_sprites::spr_x#2
  [219] *((const byte*) SPRITES_YPOS#0 + (byte) place_sprites::j2#3) ← (byte/signed byte/word/signed word/dword/signed dword) 80
  [220] *((const byte*) SPRITES_COLS#0 + (byte) place_sprites::j#2) ← (byte) place_sprites::col#2
  [221] (byte) place_sprites::spr_x#1 ← (byte) place_sprites::spr_x#2 + (byte/signed byte/word/signed word/dword/signed dword) 32
  [222] (byte) place_sprites::col#1 ← (byte) place_sprites::col#2 ^ (byte/signed byte/word/signed word/dword/signed dword) 7^(byte/signed byte/word/signed word/dword/signed dword) 5
  [223] (byte) place_sprites::j2#1 ← ++ (byte) place_sprites::j2#3
  [224] (byte) place_sprites::j2#2 ← ++ (byte) place_sprites::j2#1
  [225] (byte) place_sprites::j#1 ← ++ (byte) place_sprites::j#2
  [226] if((byte) place_sprites::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto place_sprites::@1
  to:place_sprites::@return
place_sprites::@return: scope:[place_sprites]  from place_sprites::@1
  [227] return 
  to:@return
