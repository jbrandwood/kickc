Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  b#5 = phi( __start::@1/b#9 )
  main::$0 = b#5 + 1
  s#0 = main::$0
  b#0 = 3
  *main::screen = b#0
  main::$1 = main::screen + 1
  *main::$1 = s#0
  to:main::@return
main::@return: scope:[main]  from main
  b#6 = phi( main/b#0 )
  s#5 = phi( main/s#0 )
  s#1 = s#5
  b#1 = b#6
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  b#2 = 0
  s#2 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  s#8 = phi( __start::__init1/s#2 )
  b#9 = phi( __start::__init1/b#2 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  b#7 = phi( __start::@1/b#1 )
  s#6 = phi( __start::@1/s#1 )
  s#3 = s#6
  b#3 = b#7
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  s#7 = phi( __start::@2/s#3 )
  b#8 = phi( __start::@2/b#3 )
  b#4 = b#8
  s#4 = s#7
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
char b
char b#0
char b#1
char b#2
char b#3
char b#4
char b#5
char b#6
char b#7
char b#8
char b#9
void main()
number main::$0
char *main::$1
__constant char *main::screen = (char *)$400
char s
char s#0
char s#1
char s#2
char s#3
char s#4
char s#5
char s#6
char s#7
char s#8

Adding number conversion cast (unumber) 1 in main::$0 = b#5 + 1
Adding number conversion cast (unumber) main::$0 in main::$0 = b#5 + (unumber)1
Adding number conversion cast (unumber) 3 in b#0 = 3
Adding number conversion cast (unumber) 1 in main::$1 = main::screen + 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast b#0 = (unumber)3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in main::$0 = b#5 + 1
Alias s#0 = main::$0 s#5 s#1 
Alias b#0 = b#6 b#1 
Alias b#2 = b#9 
Alias s#2 = s#8 
Alias s#3 = s#6 s#7 s#4 
Alias b#3 = b#7 b#8 b#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values b#5 b#2
Identical Phi Values s#3 s#0
Identical Phi Values b#3 b#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [4] main::$1 = main::screen + 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant b#0 = 3
Constant main::$1 = main::screen+1
Constant b#2 = 0
Constant s#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero 1 in [1] s#0 = b#2 + 1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant b#2
Eliminating unused constant s#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant s#0 = 1
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$1 = main::screen+1
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::screen = b#0
  [1] *(main::screen+1) = s#0
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
char b
void main()
char s

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::screen = b#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(main::screen+1) = s#0 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Use an uninitialized variable - should use the default value (0)!
  // Upstart
  // Commodore 64 PRG executable file
.file [name="useuninitialized.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const b = 3
  .const s = 1
.segment Code
  // main
main: {
    .label screen = $400
    // [0] *main::screen = b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    // [1] *(main::screen+1) = s#0 -- _deref_pbuc1=vbuc2 
    lda #s
    sta screen+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
char b
__constant char b#0 = 3 // b
void main()
__constant char *main::screen = (char *) 1024
char s
__constant char s#0 = 1 // s



FINAL ASSEMBLER
Score: 18

  // File Comments
// Use an uninitialized variable - should use the default value (0)!
  // Upstart
  // Commodore 64 PRG executable file
.file [name="useuninitialized.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const b = 3
  .const s = 1
.segment Code
  // main
main: {
    .label screen = $400
    // *screen = b
    // [0] *main::screen = b#0 -- _deref_pbuc1=vbuc2 
    lda #b
    sta screen
    // *(screen+1) = s
    // [1] *(main::screen+1) = s#0 -- _deref_pbuc1=vbuc2 
    lda #s
    sta screen+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

