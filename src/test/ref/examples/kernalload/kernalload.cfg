@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  [5] call loadFileToMemory 
  [6] (byte) loadFileToMemory::return#0 ← (byte) loadFileToMemory::return#1
  to:main::@4
main::@4: scope:[main]  from main
  [7] (byte) main::status#0 ← (byte) loadFileToMemory::return#0
  [8] if((byte) main::status#0==(byte) $ff) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@4
  [9] *((const byte*) BORDERCOL) ← (byte) 2
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@4
  [10] *((const byte*) SPRITES_ENABLE) ← (byte) 1
  to:main::toSpritePtr1
main::toSpritePtr1: scope:[main]  from main::@1
  [11] phi()
  to:main::@3
main::@3: scope:[main]  from main::toSpritePtr1
  [12] *((const byte*) SPRITES_PTR) ← (const byte) main::toSpritePtr1_return#0
  [13] *((const byte*) SPRITES_COLS) ← (const byte) GREEN
  [14] *((const byte*) SPRITES_XPOS) ← (byte) $15
  [15] *((const byte*) SPRITES_YPOS) ← (byte) $33
  to:main::@return
main::@return: scope:[main]  from main::@3
  [16] return 
  to:@return

(byte()) loadFileToMemory((byte) loadFileToMemory::device , (byte*) loadFileToMemory::filename , (byte*) loadFileToMemory::address)
loadFileToMemory: scope:[loadFileToMemory]  from main
  [17] phi()
  [18] call setnam 
  to:loadFileToMemory::@1
loadFileToMemory::@1: scope:[loadFileToMemory]  from loadFileToMemory
  [19] phi()
  [20] call setlfs 
  to:loadFileToMemory::@2
loadFileToMemory::@2: scope:[loadFileToMemory]  from loadFileToMemory::@1
  [21] phi()
  [22] call load 
  [23] (byte) load::return#2 ← (byte) load::return#0
  to:loadFileToMemory::@3
loadFileToMemory::@3: scope:[loadFileToMemory]  from loadFileToMemory::@2
  [24] (byte) loadFileToMemory::return#1 ← (byte) load::return#2
  to:loadFileToMemory::@return
loadFileToMemory::@return: scope:[loadFileToMemory]  from loadFileToMemory::@3
  [25] return 
  to:@return

(byte()) load((byte*) load::address , (bool) load::verify)
load: scope:[load]  from loadFileToMemory::@2
  [26] *((const byte*) load::loadOrVerify) ← (byte) 0
  [27] *((const byte**) load::loadAddress) ← (const byte*) LOAD_SPRITE
  asm { ldxloadAddress ldyloadAddress+1 ldaloadOrVerify jsr$ffd5 bcserror lda#$ff error: stastatus  }
  [29] (byte) load::return#0 ← *((const byte*) load::status)
  to:load::@return
load::@return: scope:[load]  from load
  [30] return 
  to:@return

(void()) setlfs((byte) setlfs::device)
setlfs: scope:[setlfs]  from loadFileToMemory::@1
  [31] *((const byte*) setlfs::deviceNum) ← (const byte) loadFileToMemory::device#0
  asm { ldxdeviceNum lda#1 ldy#0 jsr$ffba  }
  to:setlfs::@return
setlfs::@return: scope:[setlfs]  from setlfs
  [33] return 
  to:@return

(void()) setnam((byte*) setnam::filename)
setnam: scope:[setnam]  from loadFileToMemory
  [34] phi()
  [35] call strlen 
  [36] (word) strlen::return#2 ← (word) strlen::len#2
  to:setnam::@1
setnam::@1: scope:[setnam]  from setnam
  [37] (word~) setnam::$0 ← (word) strlen::return#2
  [38] (byte~) setnam::$1 ← (byte)(word~) setnam::$0
  [39] *((const byte*) setnam::filename_len) ← (byte~) setnam::$1
  [40] *((const byte**) setnam::filename_ptr) ← (const string) main::filename
  asm { ldafilename_len ldxfilename_ptr ldyfilename_ptr+1 jsr$ffbd  }
  to:setnam::@return
setnam::@return: scope:[setnam]  from setnam::@1
  [42] return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from setnam
  [43] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [44] (word) strlen::len#2 ← phi( strlen/(byte) 0 strlen::@2/(word) strlen::len#1 )
  [44] (byte*) strlen::str#2 ← phi( strlen/(const string) main::filename strlen::@2/(byte*) strlen::str#0 )
  [45] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [46] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [47] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [48] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1
