(label) @1
(label) @begin
(label) @end
(const word) PI2_u4f12 = (word) $6488
(const word) PI_HALF_u4f12 = (word) $1922
(const word) PI_u4f12 = (word) $3244
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@1
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(word) div16u::return#0 return zp[2]:17 367.33333333333337
(word) div16u::return#2 return zp[2]:17 202.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 200002.0
(byte~) divr16u::$2 reg byte a 200002.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp[2]:15 25000.25
(word) divr16u::dividend#2 dividend zp[2]:15 42857.57142857143
(word) divr16u::divisor
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 150001.5
(byte) divr16u::i#2 reg byte x 15384.76923076923
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp[2]:17 150001.5
(word) divr16u::quotient#2 quotient zp[2]:17 100001.0
(word) divr16u::quotient#3 quotient zp[2]:17 25000.25
(word) divr16u::rem
(word) divr16u::rem#0 rem zp[2]:13 75000.75
(word) divr16u::rem#1 rem zp[2]:13 200002.0
(word) divr16u::rem#2 rem zp[2]:13 200002.0
(word) divr16u::rem#4 rem zp[2]:13 200002.0
(word) divr16u::rem#5 rem zp[2]:13 100001.0
(word) divr16u::rem#9 rem zp[2]:13 100001.0
(word) divr16u::return
(word) divr16u::return#0 return zp[2]:17 60200.8
(word) divr16u::return#2 return zp[2]:17 2002.0
(void()) main()
(label) main::@1
(label) main::@return
(const byte*) main::sintab[(number) $14]  = { fill( $14, 0) }
(const word) main::tabsize = (word) $14
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:19 20002.0
(byte*) memset::dst#2 dst zp[2]:19 13334.666666666666
(byte*) memset::end
(const byte*) memset::end#0 end = (byte*)(const void*) memset::str#0+(const word) memset::num#0
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(const void*) memset::str#0 str = (void*)(byte*) 1024
(signed word()) mul8su((signed byte) mul8su::a , (byte) mul8su::b)
(byte~) mul8su::$10 reg byte a 20002.0
(byte~) mul8su::$7 reg byte a 20002.0
(label) mul8su::@1
(label) mul8su::@2
(label) mul8su::@3
(label) mul8su::@return
(signed byte) mul8su::a
(signed byte) mul8su::a#0 reg byte y 2200.4
(byte) mul8su::b
(const byte) mul8su::b#0 b = (const byte) sin8u_table::amplitude#0+(byte) 1
(word) mul8su::m
(word) mul8su::m#0 m zp[2]:10 10001.0
(word) mul8su::m#1 m zp[2]:10 20002.0
(word) mul8su::m#2 m zp[2]:10 6667.333333333333
(signed word) mul8su::return
(word()) mul8u((byte) mul8u::a , (byte) mul8u::b)
(byte~) mul8u::$1 reg byte a 2.00000002E8
(label) mul8u::@1
(label) mul8u::@2
(label) mul8u::@3
(label) mul8u::@4
(label) mul8u::@return
(byte) mul8u::a
(byte) mul8u::a#0 reg byte x 1.00000001E8
(byte) mul8u::a#1 reg byte x 20002.0
(byte) mul8u::a#2 reg byte x 100001.0
(byte) mul8u::a#3 reg byte x 6.683333416666667E7
(byte) mul8u::a#6 reg byte x 555001.5
(byte) mul8u::b
(byte) mul8u::b#1 reg byte a 200002.0
(byte) mul8u::b#2 reg byte a 100001.0
(word) mul8u::mb
(word) mul8u::mb#0 mb zp[2]:15 2000002.0
(word) mul8u::mb#1 mb zp[2]:15 2.00000002E8
(word) mul8u::mb#2 mb zp[2]:15 4.300000057142857E7
(word) mul8u::res
(word) mul8u::res#1 res zp[2]:10 2.00000002E8
(word) mul8u::res#2 res zp[2]:10 4.287285785714286E7
(word) mul8u::res#6 res zp[2]:10 1.00000001E8
(word) mul8u::return
(word) mul8u::return#2 return zp[2]:10 20002.0
(word) mul8u::return#3 return zp[2]:10 200002.0
(byte()) mulu8_sel((byte) mulu8_sel::v1 , (byte) mulu8_sel::v2 , (byte) mulu8_sel::select)
(word~) mulu8_sel::$0 zp[2]:10 200002.0
(word~) mulu8_sel::$1 zp[2]:10 200002.0
(label) mulu8_sel::@1
(label) mulu8_sel::@return
(byte) mulu8_sel::return
(byte) mulu8_sel::return#0 reg byte a 20002.0
(byte) mulu8_sel::return#1 reg byte a 20002.0
(byte) mulu8_sel::return#10 reg byte a 20002.0
(byte) mulu8_sel::return#11 reg byte a 20002.0
(byte) mulu8_sel::return#12 reg byte a 21429.428571428572
(byte) mulu8_sel::return#2 reg byte a 20002.0
(byte) mulu8_sel::select
(byte) mulu8_sel::select#5 select zp[1]:22 16666.833333333332
(byte) mulu8_sel::v1
(byte) mulu8_sel::v1#0 reg byte x 10001.0
(byte) mulu8_sel::v1#1 reg byte x 10001.0
(byte) mulu8_sel::v1#2 reg byte x 20002.0
(byte) mulu8_sel::v1#3 reg byte x 10001.0
(byte) mulu8_sel::v1#4 reg byte x 10001.0
(byte) mulu8_sel::v1#5 reg byte x 150006.0
(byte) mulu8_sel::v2
(byte) mulu8_sel::v2#0 reg byte y 20002.0
(byte) mulu8_sel::v2#1 reg byte y 20002.0
(byte) mulu8_sel::v2#3 reg byte y 20002.0
(byte) mulu8_sel::v2#4 reg byte y 20002.0
(byte) mulu8_sel::v2#5 reg byte y 70002.5
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 2000002.0
(byte~) print_byte::$2 reg byte x 2000002.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0 reg byte x 20002.0
(byte) print_byte::b#1 reg byte x 200002.0
(byte) print_byte::b#2 reg byte x 200002.0
(byte) print_byte::b#7 reg byte x 2002.0
(byte) print_byte::b#8 reg byte x 552751.5
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#4 reg byte a 2000002.0
(byte) print_char::ch#5 reg byte a 2000002.0
(byte) print_char::ch#6 reg byte a 1.2000003E7
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:8 1000001.0
(byte*) print_char_cursor#102 print_char_cursor zp[2]:8 55552.0
(byte*) print_char_cursor#103 print_char_cursor zp[2]:8 403803.00000000006
(byte*) print_char_cursor#109 print_char_cursor zp[2]:8 14409.0
(byte*) print_char_cursor#118 print_char_cursor zp[2]:8 2002.0
(byte*) print_char_cursor#19 print_char_cursor zp[2]:8 257944.95744680852
(byte*) print_char_cursor#2 print_char_cursor zp[2]:8 109018.39285714286
(byte*) print_char_cursor#66 print_char_cursor zp[2]:8 1.1020004E7
(void()) print_cls()
(label) print_cls::@return
(const byte*) print_hextab[]  = (byte*) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#1 print_line_cursor zp[2]:6 81135.27027027027
(byte*) print_line_cursor#12 print_line_cursor zp[2]:6 2010003.0
(byte*) print_line_cursor#23 print_line_cursor zp[2]:6 11002.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp[1]:12 20002.0
(signed byte) print_sbyte::b#1 b zp[1]:12 5167.333333333333
(signed byte) print_sbyte::b#4 b zp[1]:12 20002.0
(byte*) print_screen
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp[2]:13 2000002.0
(byte*) print_str::str#10 str zp[2]:13 1002501.25
(byte*) print_str::str#12 str zp[2]:13 10001.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp[2]:13 20002.0
(signed word) print_sword::w#1 w zp[2]:13 5167.333333333333
(signed word) print_sword::w#4 w zp[2]:13 20002.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0 w zp[2]:15 20002.0
(word) print_word::w#1 w zp[2]:15 202.0
(word) print_word::w#2 w zp[2]:15 2002.0
(word) print_word::w#3 w zp[2]:15 70368.33333333333
(signed byte()) sin8s((word) sin8s::x)
(word~) sin8s::$4 zp[2]:13 20002.0
(label) sin8s::@1
(label) sin8s::@10
(label) sin8s::@11
(label) sin8s::@12
(label) sin8s::@13
(label) sin8s::@14
(label) sin8s::@2
(label) sin8s::@3
(label) sin8s::@4
(label) sin8s::@5
(label) sin8s::@6
(label) sin8s::@7
(label) sin8s::@8
(label) sin8s::@9
(label) sin8s::@return
(const byte) sin8s::DIV_6 = (byte) $2b
(byte) sin8s::isUpper
(byte) sin8s::isUpper#10 isUpper zp[1]:12 277.80555555555554
(signed byte) sin8s::return
(signed byte) sin8s::return#0 reg byte a 7001.0
(signed byte) sin8s::return#2 reg byte a 2002.0
(signed byte) sin8s::return#5 reg byte a 20002.0
(signed byte) sin8s::sinx
(signed byte) sin8s::sinx#1 reg byte a 20002.0
(byte) sin8s::usinx
(byte) sin8s::usinx#0 usinx zp[1]:25 1666.8333333333333
(byte) sin8s::usinx#1 reg byte x 20002.0
(byte) sin8s::usinx#2 reg byte x 20002.0
(byte) sin8s::usinx#4 reg byte x 10001.0
(word) sin8s::x
(word) sin8s::x#0 x zp[2]:13 20002.0
(word) sin8s::x#1 x zp[2]:13 20002.0
(word) sin8s::x#2 x zp[2]:13 15502.0
(word) sin8s::x#4 x zp[2]:13 25002.5
(word) sin8s::x#6 x zp[2]:13 30003.0
(byte) sin8s::x1
(byte) sin8s::x1#0 x1 zp[1]:23 3182.1363636363635
(byte) sin8s::x2
(byte) sin8s::x2#0 reg byte a 20002.0
(byte) sin8s::x3
(byte) sin8s::x3#0 x3 zp[1]:24 5000.5
(byte) sin8s::x3_6
(byte) sin8s::x3_6#0 reg byte a 20002.0
(byte) sin8s::x4
(byte) sin8s::x4#0 reg byte a 20002.0
(byte) sin8s::x5
(byte) sin8s::x5#0 reg byte a 20002.0
(byte) sin8s::x5_128
(byte) sin8s::x5_128#0 reg byte a 20002.0
(void()) sin8u_table((byte*) sin8u_table::sintab , (word) sin8u_table::tabsize , (byte) sin8u_table::min , (byte) sin8u_table::max)
(byte~) sin8u_table::$22 reg byte a 2002.0
(label) sin8u_table::@1
(label) sin8u_table::@10
(label) sin8u_table::@11
(label) sin8u_table::@12
(label) sin8u_table::@13
(label) sin8u_table::@14
(label) sin8u_table::@15
(label) sin8u_table::@16
(label) sin8u_table::@17
(label) sin8u_table::@18
(label) sin8u_table::@19
(label) sin8u_table::@2
(label) sin8u_table::@20
(label) sin8u_table::@21
(label) sin8u_table::@22
(label) sin8u_table::@23
(label) sin8u_table::@24
(label) sin8u_table::@3
(label) sin8u_table::@4
(label) sin8u_table::@5
(label) sin8u_table::@6
(label) sin8u_table::@7
(label) sin8u_table::@8
(label) sin8u_table::@9
(label) sin8u_table::@return
(byte) sin8u_table::amplitude
(const byte) sin8u_table::amplitude#0 amplitude = (const byte) sin8u_table::max#0-(const byte) sin8u_table::min#0
(word) sin8u_table::i
(word) sin8u_table::i#1 i zp[2]:19 2002.0
(word) sin8u_table::i#10 i zp[2]:19 93.84375
(byte) sin8u_table::max
(const byte) sin8u_table::max#0 max = (byte) $ff
(byte) sin8u_table::mid
(const byte) sin8u_table::mid#0 mid = (byte)(const word) sin8u_table::sum#0/(byte) 2+(byte) 1
(byte) sin8u_table::min
(const byte) sin8u_table::min#0 min = (byte) $a
(byte*) sin8u_table::sintab
(byte*) sin8u_table::sintab#1 sintab zp[2]:4 95.33333333333333
(byte*) sin8u_table::sintab#2 sintab zp[2]:4 250.25
(signed byte) sin8u_table::sinx
(signed byte) sin8u_table::sinx#0 sinx zp[1]:21 214.5
(signed word) sin8u_table::sinx_sc
(signed word) sin8u_table::sinx_sc#0 sinx_sc zp[2]:10 200.2
(byte) sin8u_table::sinx_tr
(byte) sin8u_table::sinx_tr#0 sinx_tr zp[1]:22 176.64705882352942
(word) sin8u_table::step
(word) sin8u_table::step#0 step zp[2]:17 21.87272727272727
(const byte*) sin8u_table::str[(byte) 6]  = (byte*) "step:"
(const byte*) sin8u_table::str1[(byte) 6]  = (byte*) " min:"
(const byte*) sin8u_table::str2[(byte) 6]  = (byte*) " max:"
(const byte*) sin8u_table::str3[(byte) 7]  = (byte*) " ampl:"
(const byte*) sin8u_table::str4[(byte) 6]  = (byte*) " mid:"
(const byte*) sin8u_table::str5[(byte) 4]  = (byte*) "x: "
(const byte*) sin8u_table::str6[(byte) 7]  = (byte*) " sin: "
(const byte*) sin8u_table::str7[(byte) $a]  = (byte*) " scaled: "
(const byte*) sin8u_table::str8[(byte) 9]  = (byte*) " trans: "
(word) sin8u_table::sum
(const word) sin8u_table::sum#0 sum = (word)(const byte) sin8u_table::min#0+(const byte) sin8u_table::max#0
(word) sin8u_table::tabsize
(word) sin8u_table::x
(word) sin8u_table::x#1 x zp[2]:2 1001.0
(word) sin8u_table::x#10 x zp[2]:2 129.16129032258064

zp[2]:2 [ sin8u_table::x#10 sin8u_table::x#1 ]
zp[2]:4 [ sin8u_table::sintab#2 sin8u_table::sintab#1 ]
zp[2]:6 [ print_line_cursor#12 print_line_cursor#23 print_line_cursor#1 ]
reg byte x [ print_byte::b#8 print_byte::b#0 print_byte::b#1 print_byte::b#2 print_byte::b#7 ]
reg byte a [ print_char::ch#6 print_char::ch#4 print_char::ch#5 ]
zp[2]:8 [ print_char_cursor#109 print_char_cursor#66 print_char_cursor#103 print_char_cursor#19 print_char_cursor#102 print_char_cursor#2 print_char_cursor#118 print_char_cursor#1 ]
zp[2]:10 [ mul8su::m#2 mul8su::m#1 mul8su::m#0 sin8u_table::sinx_sc#0 mul8u::return#2 mul8u::res#2 mul8u::res#6 mul8u::res#1 mul8u::return#3 mulu8_sel::$0 mulu8_sel::$1 ]
reg byte a [ mul8u::b#2 mul8u::b#1 ]
reg byte x [ mul8u::a#3 mul8u::a#6 mul8u::a#1 mul8u::a#2 mul8u::a#0 ]
zp[1]:12 [ sin8s::isUpper#10 print_sbyte::b#4 print_sbyte::b#0 print_sbyte::b#1 ]
reg byte x [ sin8s::usinx#4 sin8s::usinx#1 sin8s::usinx#2 ]
reg byte a [ sin8s::return#0 sin8s::return#5 sin8s::sinx#1 ]
reg byte x [ mulu8_sel::v1#5 mulu8_sel::v1#1 mulu8_sel::v1#2 mulu8_sel::v1#3 mulu8_sel::v1#4 mulu8_sel::v1#0 ]
reg byte y [ mulu8_sel::v2#5 mulu8_sel::v2#1 mulu8_sel::v2#3 mulu8_sel::v2#4 mulu8_sel::v2#0 ]
zp[2]:13 [ divr16u::rem#4 divr16u::rem#9 divr16u::rem#5 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 sin8s::x#6 sin8s::x#4 sin8s::x#2 sin8s::x#0 sin8s::x#1 sin8s::$4 print_sword::w#4 print_sword::w#0 print_sword::w#1 print_str::str#10 print_str::str#12 print_str::str#0 ]
zp[2]:15 [ divr16u::dividend#2 divr16u::dividend#0 mul8u::mb#2 mul8u::mb#0 mul8u::mb#1 print_word::w#3 print_word::w#0 print_word::w#2 print_word::w#1 ]
zp[2]:17 [ divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 div16u::return#2 sin8u_table::step#0 div16u::return#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[2]:19 [ memset::dst#2 memset::dst#1 sin8u_table::i#10 sin8u_table::i#1 ]
reg byte a [ sin8s::return#2 ]
zp[1]:21 [ sin8u_table::sinx#0 ]
reg byte y [ mul8su::a#0 ]
reg byte a [ sin8u_table::$22 ]
zp[1]:22 [ sin8u_table::sinx_tr#0 mulu8_sel::select#5 ]
reg byte a [ print_byte::$0 ]
reg byte x [ print_byte::$2 ]
reg byte a [ mul8su::$7 ]
reg byte a [ mul8su::$10 ]
reg byte a [ mul8u::$1 ]
zp[1]:23 [ sin8s::x1#0 ]
reg byte a [ mulu8_sel::return#0 ]
reg byte a [ sin8s::x2#0 ]
reg byte a [ mulu8_sel::return#1 ]
zp[1]:24 [ sin8s::x3#0 ]
reg byte a [ mulu8_sel::return#2 ]
reg byte a [ sin8s::x3_6#0 ]
zp[1]:25 [ sin8s::usinx#0 ]
reg byte a [ mulu8_sel::return#10 ]
reg byte a [ sin8s::x4#0 ]
reg byte a [ mulu8_sel::return#11 ]
reg byte a [ sin8s::x5#0 ]
reg byte a [ sin8s::x5_128#0 ]
reg byte a [ mulu8_sel::return#12 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
