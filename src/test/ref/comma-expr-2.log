
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::c#0 = 0
  main::c#1 = 1+3
  main::SCREEN[0] = main::c#1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
const nomodify byte* main::SCREEN = (byte*)$400
byte main::c
byte main::c#0
byte main::c#1

Adding number conversion cast (unumber) 1+3 in main::c#1 = 1+3
Adding number conversion cast (unumber) 0 in main::SCREEN[0] = main::c#1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::c#1 = (unumber)1+3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [1] main::c#1 = (unumber)1+3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::c#0 = 0
Constant main::c#1 = (unumber)1+3
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::SCREEN in [2] main::SCREEN[0] = main::c#1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::c#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast 1+3
Successful SSA optimization PassNCastSimplification
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *main::SCREEN = main::c#1
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::c

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *main::SCREEN = main::c#1 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests simple comma-expressions (without parenthesis)
  // Upstart
  // Commodore 64 PRG executable file
.file [name="comma-expr-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .const c = 1+3
    .label SCREEN = $400
    // [0] *main::SCREEN = main::c#1 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const nomodify byte* main::SCREEN = (byte*) 1024
byte main::c
const byte main::c#1 c = 1+3



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests simple comma-expressions (without parenthesis)
  // Upstart
  // Commodore 64 PRG executable file
.file [name="comma-expr-2.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .const c = 1+3
    .label SCREEN = $400
    // SCREEN[1,0] = c
    // [0] *main::SCREEN = main::c#1 -- _deref_pbuc1=vbuc2 
    lda #c
    sta SCREEN
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

