const byte RADIX::BINARY = 2
const byte RADIX::DECIMAL = $a
const byte RADIX::HEXADECIMAL = $10
const byte RADIX::OCTAL = 8
void main()
struct fileentry* main::file
const struct fileentry* main::file#1 file = (struct fileentry*) 16384
word* main::ptrw
word main::uSize
word main::uSize#1 uSize zp[2]:4 4.0
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 202.0
byte print_char::ch#1 reg byte a 202.0
byte print_char::ch#2 reg byte a 1203.0
byte* print_char_cursor
byte* print_char_cursor#19 print_char_cursor zp[2]:2 1102.0
byte* print_char_cursor#20 print_char_cursor zp[2]:2 123.66666666666667
byte* print_char_cursor#26 print_char_cursor zp[2]:2 37.33333333333333
const to_nomodify byte* print_hextab[]  = "0123456789abcdef"z
byte* print_line_cursor
byte* print_screen
const byte* print_screen#0 print_screen = (byte*) 1024
void print_uchar(byte print_uchar::b)
byte~ print_uchar::$0 reg byte a 202.0
byte~ print_uchar::$2 reg byte x 202.0
byte print_uchar::b
byte print_uchar::b#0 reg byte x 22.0
byte print_uchar::b#1 reg byte x 22.0
byte print_uchar::b#2 reg byte x 56.0
void print_uint(word print_uint::w)
word print_uint::w
word print_uint::w#0 w zp[2]:4 8.0

reg byte x [ print_uchar::b#2 print_uchar::b#0 print_uchar::b#1 ]
reg byte a [ print_char::ch#2 print_char::ch#0 print_char::ch#1 ]
zp[2]:2 [ print_char_cursor#19 print_char_cursor#26 print_char_cursor#20 ]
zp[2]:4 [ main::uSize#1 print_uint::w#0 ]
reg byte a [ print_uchar::$0 ]
reg byte x [ print_uchar::$2 ]
