Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Added struct type cast to parameter value list call printf_uint main::rnd (struct printf_format_number){ 5, 0, 0, 0, 0, DECIMAL } 
Added struct type cast to parameter value list call printf_ulong main::cnt (struct printf_format_number){ 0, 0, 0, 0, 0, DECIMAL } 
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call call __init 
Eliminating unused variable with no statement main::$2
Eliminating unused variable with no statement main::$6
Eliminating unused variable with no statement main::$10

CONTROL FLOW GRAPH SSA

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  memcpy::num#2 = phi( cscroll::@3/memcpy::num#0, cscroll::@4/memcpy::num#1 )
  memcpy::destination#2 = phi( cscroll::@3/memcpy::destination#0, cscroll::@4/memcpy::destination#1 )
  memcpy::source#2 = phi( cscroll::@3/memcpy::source#0, cscroll::@4/memcpy::source#1 )
  memcpy::src#0 = ((byte*)) memcpy::source#2
  memcpy::dst#0 = ((byte*)) memcpy::destination#2
  memcpy::$2 = (byte*)memcpy::source#2
  memcpy::$0 = memcpy::$2 + memcpy::num#2
  memcpy::src_end#0 = memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  memcpy::destination#4 = phi( memcpy/memcpy::destination#2, memcpy::@2/memcpy::destination#5 )
  memcpy::dst#3 = phi( memcpy/memcpy::dst#0, memcpy::@2/memcpy::dst#1 )
  memcpy::src_end#1 = phi( memcpy/memcpy::src_end#0, memcpy::@2/memcpy::src_end#2 )
  memcpy::src#2 = phi( memcpy/memcpy::src#0, memcpy::@2/memcpy::src#1 )
  memcpy::$1 = memcpy::src#2 != memcpy::src_end#1
  if(memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  memcpy::destination#5 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::src_end#2 = phi( memcpy::@1/memcpy::src_end#1 )
  memcpy::dst#2 = phi( memcpy::@1/memcpy::dst#3 )
  memcpy::src#3 = phi( memcpy::@1/memcpy::src#2 )
  *memcpy::dst#2 = *memcpy::src#3
  memcpy::dst#1 = ++ memcpy::dst#2
  memcpy::src#1 = ++ memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  memcpy::destination#3 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::return#0 = memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  memcpy::return#4 = phi( memcpy::@3/memcpy::return#0 )
  memcpy::return#1 = memcpy::return#4
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  memset::c#5 = phi( cscroll::@5/memset::c#0, cscroll::@6/memset::c#1 )
  memset::str#4 = phi( cscroll::@5/memset::str#0, cscroll::@6/memset::str#1 )
  memset::num#2 = phi( cscroll::@5/memset::num#0, cscroll::@6/memset::num#1 )
  memset::$0 = memset::num#2 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#2 = phi( memset/memset::str#4, memset::@3/memset::str#5 )
  memset::return#0 = memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#4 = phi( memset/memset::c#5 )
  memset::num#3 = phi( memset/memset::num#2 )
  memset::str#3 = phi( memset/memset::str#4 )
  memset::$4 = (byte*)memset::str#3
  memset::$2 = memset::$4 + memset::num#3
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#3 = phi( memset::@2/memset::c#4, memset::@4/memset::c#2 )
  memset::str#5 = phi( memset::@2/memset::str#3, memset::@4/memset::str#6 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#6 = phi( memset::@3/memset::str#5 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#2 = phi( memset::@3/memset::c#3 )
  *memset::dst#3 = memset::c#2
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#4 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#4
  return 
  to:@return

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  strlen::str#4 = phi( printf_number_buffer::@6/strlen::str#1 )
  strlen::len#0 = 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  strlen::len#4 = phi( strlen/strlen::len#0, strlen::@2/strlen::len#1 )
  strlen::str#2 = phi( strlen/strlen::str#4, strlen::@2/strlen::str#0 )
  strlen::$0 = 0 != *strlen::str#2
  if(strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  strlen::str#3 = phi( strlen::@1/strlen::str#2 )
  strlen::len#2 = phi( strlen::@1/strlen::len#4 )
  strlen::len#1 = ++ strlen::len#2
  strlen::str#0 = ++ strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  strlen::len#3 = phi( strlen::@1/strlen::len#4 )
  strlen::return#0 = strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  strlen::return#3 = phi( strlen::@3/strlen::return#0 )
  strlen::return#1 = strlen::return#3
  return 
  to:@return

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  toupper::ch#1 = phi( strupr::@2/toupper::ch#0 )
  toupper::$0 = toupper::ch#1 >= 'a'
  toupper::$1 = toupper::ch#1 <= 'z'
  toupper::$2 = toupper::$0 && toupper::$1
  if(toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  toupper::ch#2 = phi( toupper/toupper::ch#1 )
  toupper::$3 = toupper::ch#2 + 'A'-'a'
  toupper::return#0 = toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  toupper::ch#3 = phi( toupper/toupper::ch#1 )
  toupper::return#1 = toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  toupper::return#4 = phi( toupper::@1/toupper::return#0, toupper::@2/toupper::return#1 )
  toupper::return#2 = toupper::return#4
  return 
  to:@return

byte* strupr(byte* strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  strupr::str#1 = phi( printf_number_buffer::@11/strupr::str#0 )
  strupr::src#0 = strupr::str#1
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@4
  strupr::str#3 = phi( strupr/strupr::str#1, strupr::@4/strupr::str#4 )
  strupr::src#2 = phi( strupr/strupr::src#0, strupr::@4/strupr::src#1 )
  strupr::$1 = 0 != *strupr::src#2
  if(strupr::$1) goto strupr::@2
  to:strupr::@3
strupr::@2: scope:[strupr]  from strupr::@1
  strupr::str#5 = phi( strupr::@1/strupr::str#3 )
  strupr::src#3 = phi( strupr::@1/strupr::src#2 )
  toupper::ch#0 = *strupr::src#3
  call toupper 
  toupper::return#3 = toupper::return#2
  to:strupr::@4
strupr::@4: scope:[strupr]  from strupr::@2
  strupr::str#4 = phi( strupr::@2/strupr::str#5 )
  strupr::src#4 = phi( strupr::@2/strupr::src#3 )
  toupper::return#5 = phi( strupr::@2/toupper::return#3 )
  strupr::$0 = toupper::return#5
  *strupr::src#4 = strupr::$0
  strupr::src#1 = ++ strupr::src#4
  to:strupr::@1
strupr::@3: scope:[strupr]  from strupr::@1
  strupr::str#2 = phi( strupr::@1/strupr::str#3 )
  strupr::return#0 = strupr::str#2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@3
  strupr::return#3 = phi( strupr::@3/strupr::return#0 )
  strupr::return#1 = strupr::return#3
  return 
  to:@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@3
  utoa::buffer#21 = phi( printf_uint::@3/utoa::buffer#5 )
  utoa::value#12 = phi( printf_uint::@3/utoa::value#1 )
  utoa::radix#1 = phi( printf_uint::@3/utoa::radix#0 )
  utoa::max_digits#0 = 0
  utoa::digit_values#0 = (word*) 0
  utoa::$0 = utoa::radix#1 == DECIMAL
  if(utoa::$0) goto utoa::@1
  to:utoa::@6
utoa::@1: scope:[utoa]  from utoa
  utoa::buffer#17 = phi( utoa/utoa::buffer#21 )
  utoa::value#8 = phi( utoa/utoa::value#12 )
  utoa::max_digits#1 = 5
  utoa::digit_values#1 = RADIX_DECIMAL_VALUES
  to:utoa::@5
utoa::@6: scope:[utoa]  from utoa
  utoa::value#13 = phi( utoa/utoa::value#12 )
  utoa::buffer#16 = phi( utoa/utoa::buffer#21 )
  utoa::radix#2 = phi( utoa/utoa::radix#1 )
  utoa::$1 = utoa::radix#2 == HEXADECIMAL
  if(utoa::$1) goto utoa::@2
  to:utoa::@7
utoa::@2: scope:[utoa]  from utoa::@6
  utoa::buffer#18 = phi( utoa::@6/utoa::buffer#16 )
  utoa::value#9 = phi( utoa::@6/utoa::value#13 )
  utoa::max_digits#2 = 4
  utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
  to:utoa::@5
utoa::@7: scope:[utoa]  from utoa::@6
  utoa::value#14 = phi( utoa::@6/utoa::value#13 )
  utoa::buffer#13 = phi( utoa::@6/utoa::buffer#16 )
  utoa::radix#3 = phi( utoa::@6/utoa::radix#2 )
  utoa::$2 = utoa::radix#3 == OCTAL
  if(utoa::$2) goto utoa::@3
  to:utoa::@8
utoa::@3: scope:[utoa]  from utoa::@7
  utoa::buffer#19 = phi( utoa::@7/utoa::buffer#13 )
  utoa::value#10 = phi( utoa::@7/utoa::value#14 )
  utoa::max_digits#3 = 6
  utoa::digit_values#3 = RADIX_OCTAL_VALUES
  to:utoa::@5
utoa::@8: scope:[utoa]  from utoa::@7
  utoa::value#15 = phi( utoa::@7/utoa::value#14 )
  utoa::buffer#10 = phi( utoa::@7/utoa::buffer#13 )
  utoa::radix#4 = phi( utoa::@7/utoa::radix#3 )
  utoa::$3 = utoa::radix#4 == BINARY
  if(utoa::$3) goto utoa::@4
  to:utoa::@9
utoa::@4: scope:[utoa]  from utoa::@8
  utoa::buffer#20 = phi( utoa::@8/utoa::buffer#10 )
  utoa::value#11 = phi( utoa::@8/utoa::value#15 )
  utoa::max_digits#4 = $10
  utoa::digit_values#4 = RADIX_BINARY_VALUES
  to:utoa::@5
utoa::@9: scope:[utoa]  from utoa::@8
  utoa::buffer#6 = phi( utoa::@8/utoa::buffer#10 )
  *utoa::buffer#6 = 'e'
  utoa::buffer#0 = ++ utoa::buffer#6
  *utoa::buffer#0 = 'r'
  utoa::buffer#1 = ++ utoa::buffer#0
  *utoa::buffer#1 = 'r'
  utoa::buffer#2 = ++ utoa::buffer#1
  *utoa::buffer#2 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@12 utoa::@9
  return 
  to:@return
utoa::@5: scope:[utoa]  from utoa::@1 utoa::@2 utoa::@3 utoa::@4
  utoa::buffer#15 = phi( utoa::@1/utoa::buffer#17, utoa::@2/utoa::buffer#18, utoa::@3/utoa::buffer#19, utoa::@4/utoa::buffer#20 )
  utoa::value#7 = phi( utoa::@1/utoa::value#8, utoa::@2/utoa::value#9, utoa::@3/utoa::value#10, utoa::@4/utoa::value#11 )
  utoa::digit_values#8 = phi( utoa::@1/utoa::digit_values#1, utoa::@2/utoa::digit_values#2, utoa::@3/utoa::digit_values#3, utoa::@4/utoa::digit_values#4 )
  utoa::max_digits#7 = phi( utoa::@1/utoa::max_digits#1, utoa::@2/utoa::max_digits#2, utoa::@3/utoa::max_digits#3, utoa::@4/utoa::max_digits#4 )
  utoa::started#0 = 0
  utoa::digit#0 = 0
  to:utoa::@10
utoa::@10: scope:[utoa]  from utoa::@13 utoa::@5
  utoa::buffer#11 = phi( utoa::@13/utoa::buffer#14, utoa::@5/utoa::buffer#15 )
  utoa::started#3 = phi( utoa::@13/utoa::started#4, utoa::@5/utoa::started#0 )
  utoa::value#5 = phi( utoa::@13/utoa::value#6, utoa::@5/utoa::value#7 )
  utoa::digit_values#6 = phi( utoa::@13/utoa::digit_values#7, utoa::@5/utoa::digit_values#8 )
  utoa::digit#2 = phi( utoa::@13/utoa::digit#1, utoa::@5/utoa::digit#0 )
  utoa::max_digits#5 = phi( utoa::@13/utoa::max_digits#6, utoa::@5/utoa::max_digits#7 )
  utoa::$4 = utoa::max_digits#5 - 1
  utoa::$5 = utoa::digit#2 < utoa::$4
  if(utoa::$5) goto utoa::@11
  to:utoa::@12
utoa::@11: scope:[utoa]  from utoa::@10
  utoa::max_digits#8 = phi( utoa::@10/utoa::max_digits#5 )
  utoa::buffer#12 = phi( utoa::@10/utoa::buffer#11 )
  utoa::started#2 = phi( utoa::@10/utoa::started#3 )
  utoa::value#2 = phi( utoa::@10/utoa::value#5 )
  utoa::digit_values#5 = phi( utoa::@10/utoa::digit_values#6 )
  utoa::digit#3 = phi( utoa::@10/utoa::digit#2 )
  utoa::$10 = utoa::digit#3 * SIZEOF_WORD
  utoa::digit_value#0 = utoa::digit_values#5[utoa::$10]
  utoa::$6 = utoa::value#2 >= utoa::digit_value#0
  utoa::$7 = utoa::started#2 || utoa::$6
  utoa::$8 = ! utoa::$7
  if(utoa::$8) goto utoa::@13
  to:utoa::@14
utoa::@12: scope:[utoa]  from utoa::@10
  utoa::buffer#7 = phi( utoa::@10/utoa::buffer#11 )
  utoa::value#3 = phi( utoa::@10/utoa::value#5 )
  utoa::$11 = (byte)utoa::value#3
  *utoa::buffer#7 = DIGITS[utoa::$11]
  utoa::buffer#3 = ++ utoa::buffer#7
  *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@13: scope:[utoa]  from utoa::@11 utoa::@15
  utoa::buffer#14 = phi( utoa::@11/utoa::buffer#12, utoa::@15/utoa::buffer#4 )
  utoa::started#4 = phi( utoa::@11/utoa::started#2, utoa::@15/utoa::started#1 )
  utoa::value#6 = phi( utoa::@11/utoa::value#2, utoa::@15/utoa::value#0 )
  utoa::digit_values#7 = phi( utoa::@11/utoa::digit_values#5, utoa::@15/utoa::digit_values#9 )
  utoa::max_digits#6 = phi( utoa::@11/utoa::max_digits#8, utoa::@15/utoa::max_digits#9 )
  utoa::digit#4 = phi( utoa::@11/utoa::digit#3, utoa::@15/utoa::digit#5 )
  utoa::digit#1 = ++ utoa::digit#4
  to:utoa::@10
utoa::@14: scope:[utoa]  from utoa::@11
  utoa::digit_values#10 = phi( utoa::@11/utoa::digit_values#5 )
  utoa::max_digits#10 = phi( utoa::@11/utoa::max_digits#8 )
  utoa::digit#6 = phi( utoa::@11/utoa::digit#3 )
  utoa::digit_value#1 = phi( utoa::@11/utoa::digit_value#0 )
  utoa::value#4 = phi( utoa::@11/utoa::value#2 )
  utoa::buffer#8 = phi( utoa::@11/utoa::buffer#12 )
  utoa_append::buffer#0 = utoa::buffer#8
  utoa_append::value#0 = utoa::value#4
  utoa_append::sub#0 = utoa::digit_value#1
  call utoa_append 
  utoa_append::return#0 = utoa_append::return#2
  to:utoa::@15
utoa::@15: scope:[utoa]  from utoa::@14
  utoa::digit_values#9 = phi( utoa::@14/utoa::digit_values#10 )
  utoa::max_digits#9 = phi( utoa::@14/utoa::max_digits#10 )
  utoa::digit#5 = phi( utoa::@14/utoa::digit#6 )
  utoa::buffer#9 = phi( utoa::@14/utoa::buffer#8 )
  utoa_append::return#3 = phi( utoa::@14/utoa_append::return#0 )
  utoa::$9 = utoa_append::return#3
  utoa::value#0 = utoa::$9
  utoa::buffer#4 = ++ utoa::buffer#9
  utoa::started#1 = 1
  to:utoa::@13

void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@3
  ultoa::buffer#21 = phi( printf_ulong::@3/ultoa::buffer#5 )
  ultoa::value#12 = phi( printf_ulong::@3/ultoa::value#1 )
  ultoa::radix#1 = phi( printf_ulong::@3/ultoa::radix#0 )
  ultoa::max_digits#0 = 0
  ultoa::digit_values#0 = (dword*) 0
  ultoa::$0 = ultoa::radix#1 == DECIMAL
  if(ultoa::$0) goto ultoa::@1
  to:ultoa::@6
ultoa::@1: scope:[ultoa]  from ultoa
  ultoa::buffer#17 = phi( ultoa/ultoa::buffer#21 )
  ultoa::value#8 = phi( ultoa/ultoa::value#12 )
  ultoa::max_digits#1 = $a
  ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@6: scope:[ultoa]  from ultoa
  ultoa::value#13 = phi( ultoa/ultoa::value#12 )
  ultoa::buffer#16 = phi( ultoa/ultoa::buffer#21 )
  ultoa::radix#2 = phi( ultoa/ultoa::radix#1 )
  ultoa::$1 = ultoa::radix#2 == HEXADECIMAL
  if(ultoa::$1) goto ultoa::@2
  to:ultoa::@7
ultoa::@2: scope:[ultoa]  from ultoa::@6
  ultoa::buffer#18 = phi( ultoa::@6/ultoa::buffer#16 )
  ultoa::value#9 = phi( ultoa::@6/ultoa::value#13 )
  ultoa::max_digits#2 = 8
  ultoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_LONG
  to:ultoa::@5
ultoa::@7: scope:[ultoa]  from ultoa::@6
  ultoa::value#14 = phi( ultoa::@6/ultoa::value#13 )
  ultoa::buffer#13 = phi( ultoa::@6/ultoa::buffer#16 )
  ultoa::radix#3 = phi( ultoa::@6/ultoa::radix#2 )
  ultoa::$2 = ultoa::radix#3 == OCTAL
  if(ultoa::$2) goto ultoa::@3
  to:ultoa::@8
ultoa::@3: scope:[ultoa]  from ultoa::@7
  ultoa::buffer#19 = phi( ultoa::@7/ultoa::buffer#13 )
  ultoa::value#10 = phi( ultoa::@7/ultoa::value#14 )
  ultoa::max_digits#3 = $b
  ultoa::digit_values#3 = RADIX_OCTAL_VALUES_LONG
  to:ultoa::@5
ultoa::@8: scope:[ultoa]  from ultoa::@7
  ultoa::value#15 = phi( ultoa::@7/ultoa::value#14 )
  ultoa::buffer#10 = phi( ultoa::@7/ultoa::buffer#13 )
  ultoa::radix#4 = phi( ultoa::@7/ultoa::radix#3 )
  ultoa::$3 = ultoa::radix#4 == BINARY
  if(ultoa::$3) goto ultoa::@4
  to:ultoa::@9
ultoa::@4: scope:[ultoa]  from ultoa::@8
  ultoa::buffer#20 = phi( ultoa::@8/ultoa::buffer#10 )
  ultoa::value#11 = phi( ultoa::@8/ultoa::value#15 )
  ultoa::max_digits#4 = $20
  ultoa::digit_values#4 = RADIX_BINARY_VALUES_LONG
  to:ultoa::@5
ultoa::@9: scope:[ultoa]  from ultoa::@8
  ultoa::buffer#6 = phi( ultoa::@8/ultoa::buffer#10 )
  *ultoa::buffer#6 = 'e'
  ultoa::buffer#0 = ++ ultoa::buffer#6
  *ultoa::buffer#0 = 'r'
  ultoa::buffer#1 = ++ ultoa::buffer#0
  *ultoa::buffer#1 = 'r'
  ultoa::buffer#2 = ++ ultoa::buffer#1
  *ultoa::buffer#2 = 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@12 ultoa::@9
  return 
  to:@return
ultoa::@5: scope:[ultoa]  from ultoa::@1 ultoa::@2 ultoa::@3 ultoa::@4
  ultoa::buffer#15 = phi( ultoa::@1/ultoa::buffer#17, ultoa::@2/ultoa::buffer#18, ultoa::@3/ultoa::buffer#19, ultoa::@4/ultoa::buffer#20 )
  ultoa::value#7 = phi( ultoa::@1/ultoa::value#8, ultoa::@2/ultoa::value#9, ultoa::@3/ultoa::value#10, ultoa::@4/ultoa::value#11 )
  ultoa::digit_values#8 = phi( ultoa::@1/ultoa::digit_values#1, ultoa::@2/ultoa::digit_values#2, ultoa::@3/ultoa::digit_values#3, ultoa::@4/ultoa::digit_values#4 )
  ultoa::max_digits#7 = phi( ultoa::@1/ultoa::max_digits#1, ultoa::@2/ultoa::max_digits#2, ultoa::@3/ultoa::max_digits#3, ultoa::@4/ultoa::max_digits#4 )
  ultoa::started#0 = 0
  ultoa::digit#0 = 0
  to:ultoa::@10
ultoa::@10: scope:[ultoa]  from ultoa::@13 ultoa::@5
  ultoa::buffer#11 = phi( ultoa::@13/ultoa::buffer#14, ultoa::@5/ultoa::buffer#15 )
  ultoa::started#3 = phi( ultoa::@13/ultoa::started#4, ultoa::@5/ultoa::started#0 )
  ultoa::value#5 = phi( ultoa::@13/ultoa::value#6, ultoa::@5/ultoa::value#7 )
  ultoa::digit_values#6 = phi( ultoa::@13/ultoa::digit_values#7, ultoa::@5/ultoa::digit_values#8 )
  ultoa::digit#2 = phi( ultoa::@13/ultoa::digit#1, ultoa::@5/ultoa::digit#0 )
  ultoa::max_digits#5 = phi( ultoa::@13/ultoa::max_digits#6, ultoa::@5/ultoa::max_digits#7 )
  ultoa::$4 = ultoa::max_digits#5 - 1
  ultoa::$5 = ultoa::digit#2 < ultoa::$4
  if(ultoa::$5) goto ultoa::@11
  to:ultoa::@12
ultoa::@11: scope:[ultoa]  from ultoa::@10
  ultoa::max_digits#8 = phi( ultoa::@10/ultoa::max_digits#5 )
  ultoa::buffer#12 = phi( ultoa::@10/ultoa::buffer#11 )
  ultoa::started#2 = phi( ultoa::@10/ultoa::started#3 )
  ultoa::value#2 = phi( ultoa::@10/ultoa::value#5 )
  ultoa::digit_values#5 = phi( ultoa::@10/ultoa::digit_values#6 )
  ultoa::digit#3 = phi( ultoa::@10/ultoa::digit#2 )
  ultoa::$10 = ultoa::digit#3 * SIZEOF_DWORD
  ultoa::digit_value#0 = ultoa::digit_values#5[ultoa::$10]
  ultoa::$6 = ultoa::value#2 >= ultoa::digit_value#0
  ultoa::$7 = ultoa::started#2 || ultoa::$6
  ultoa::$8 = ! ultoa::$7
  if(ultoa::$8) goto ultoa::@13
  to:ultoa::@14
ultoa::@12: scope:[ultoa]  from ultoa::@10
  ultoa::buffer#7 = phi( ultoa::@10/ultoa::buffer#11 )
  ultoa::value#3 = phi( ultoa::@10/ultoa::value#5 )
  ultoa::$11 = (byte)ultoa::value#3
  *ultoa::buffer#7 = DIGITS[ultoa::$11]
  ultoa::buffer#3 = ++ ultoa::buffer#7
  *ultoa::buffer#3 = 0
  to:ultoa::@return
ultoa::@13: scope:[ultoa]  from ultoa::@11 ultoa::@15
  ultoa::buffer#14 = phi( ultoa::@11/ultoa::buffer#12, ultoa::@15/ultoa::buffer#4 )
  ultoa::started#4 = phi( ultoa::@11/ultoa::started#2, ultoa::@15/ultoa::started#1 )
  ultoa::value#6 = phi( ultoa::@11/ultoa::value#2, ultoa::@15/ultoa::value#0 )
  ultoa::digit_values#7 = phi( ultoa::@11/ultoa::digit_values#5, ultoa::@15/ultoa::digit_values#9 )
  ultoa::max_digits#6 = phi( ultoa::@11/ultoa::max_digits#8, ultoa::@15/ultoa::max_digits#9 )
  ultoa::digit#4 = phi( ultoa::@11/ultoa::digit#3, ultoa::@15/ultoa::digit#5 )
  ultoa::digit#1 = ++ ultoa::digit#4
  to:ultoa::@10
ultoa::@14: scope:[ultoa]  from ultoa::@11
  ultoa::digit_values#10 = phi( ultoa::@11/ultoa::digit_values#5 )
  ultoa::max_digits#10 = phi( ultoa::@11/ultoa::max_digits#8 )
  ultoa::digit#6 = phi( ultoa::@11/ultoa::digit#3 )
  ultoa::digit_value#1 = phi( ultoa::@11/ultoa::digit_value#0 )
  ultoa::value#4 = phi( ultoa::@11/ultoa::value#2 )
  ultoa::buffer#8 = phi( ultoa::@11/ultoa::buffer#12 )
  ultoa_append::buffer#0 = ultoa::buffer#8
  ultoa_append::value#0 = ultoa::value#4
  ultoa_append::sub#0 = ultoa::digit_value#1
  call ultoa_append 
  ultoa_append::return#0 = ultoa_append::return#2
  to:ultoa::@15
ultoa::@15: scope:[ultoa]  from ultoa::@14
  ultoa::digit_values#9 = phi( ultoa::@14/ultoa::digit_values#10 )
  ultoa::max_digits#9 = phi( ultoa::@14/ultoa::max_digits#10 )
  ultoa::digit#5 = phi( ultoa::@14/ultoa::digit#6 )
  ultoa::buffer#9 = phi( ultoa::@14/ultoa::buffer#8 )
  ultoa_append::return#3 = phi( ultoa::@14/ultoa_append::return#0 )
  ultoa::$9 = ultoa_append::return#3
  ultoa::value#0 = ultoa::$9
  ultoa::buffer#4 = ++ ultoa::buffer#9
  ultoa::started#1 = 1
  to:ultoa::@13

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@14
  utoa_append::buffer#3 = phi( utoa::@14/utoa_append::buffer#0 )
  utoa_append::sub#3 = phi( utoa::@14/utoa_append::sub#0 )
  utoa_append::value#5 = phi( utoa::@14/utoa_append::value#0 )
  utoa_append::digit#0 = 0
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  utoa_append::buffer#2 = phi( utoa_append/utoa_append::buffer#3, utoa_append::@2/utoa_append::buffer#4 )
  utoa_append::digit#4 = phi( utoa_append/utoa_append::digit#0, utoa_append::@2/utoa_append::digit#1 )
  utoa_append::sub#1 = phi( utoa_append/utoa_append::sub#3, utoa_append::@2/utoa_append::sub#2 )
  utoa_append::value#2 = phi( utoa_append/utoa_append::value#5, utoa_append::@2/utoa_append::value#1 )
  utoa_append::$0 = utoa_append::value#2 >= utoa_append::sub#1
  if(utoa_append::$0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  utoa_append::buffer#4 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::sub#2 = phi( utoa_append::@1/utoa_append::sub#1 )
  utoa_append::value#3 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::digit#2 = phi( utoa_append::@1/utoa_append::digit#4 )
  utoa_append::digit#1 = ++ utoa_append::digit#2
  utoa_append::value#1 = utoa_append::value#3 - utoa_append::sub#2
  to:utoa_append::@1
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  utoa_append::value#4 = phi( utoa_append::@1/utoa_append::value#2 )
  utoa_append::buffer#1 = phi( utoa_append::@1/utoa_append::buffer#2 )
  utoa_append::digit#3 = phi( utoa_append::@1/utoa_append::digit#4 )
  *utoa_append::buffer#1 = DIGITS[utoa_append::digit#3]
  utoa_append::return#1 = utoa_append::value#4
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  utoa_append::return#4 = phi( utoa_append::@3/utoa_append::return#1 )
  utoa_append::return#2 = utoa_append::return#4
  return 
  to:@return

dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@14
  ultoa_append::buffer#3 = phi( ultoa::@14/ultoa_append::buffer#0 )
  ultoa_append::sub#3 = phi( ultoa::@14/ultoa_append::sub#0 )
  ultoa_append::value#5 = phi( ultoa::@14/ultoa_append::value#0 )
  ultoa_append::digit#0 = 0
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  ultoa_append::buffer#2 = phi( ultoa_append/ultoa_append::buffer#3, ultoa_append::@2/ultoa_append::buffer#4 )
  ultoa_append::digit#4 = phi( ultoa_append/ultoa_append::digit#0, ultoa_append::@2/ultoa_append::digit#1 )
  ultoa_append::sub#1 = phi( ultoa_append/ultoa_append::sub#3, ultoa_append::@2/ultoa_append::sub#2 )
  ultoa_append::value#2 = phi( ultoa_append/ultoa_append::value#5, ultoa_append::@2/ultoa_append::value#1 )
  ultoa_append::$0 = ultoa_append::value#2 >= ultoa_append::sub#1
  if(ultoa_append::$0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  ultoa_append::buffer#4 = phi( ultoa_append::@1/ultoa_append::buffer#2 )
  ultoa_append::sub#2 = phi( ultoa_append::@1/ultoa_append::sub#1 )
  ultoa_append::value#3 = phi( ultoa_append::@1/ultoa_append::value#2 )
  ultoa_append::digit#2 = phi( ultoa_append::@1/ultoa_append::digit#4 )
  ultoa_append::digit#1 = ++ ultoa_append::digit#2
  ultoa_append::value#1 = ultoa_append::value#3 - ultoa_append::sub#2
  to:ultoa_append::@1
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  ultoa_append::value#4 = phi( ultoa_append::@1/ultoa_append::value#2 )
  ultoa_append::buffer#1 = phi( ultoa_append::@1/ultoa_append::buffer#2 )
  ultoa_append::digit#3 = phi( ultoa_append::@1/ultoa_append::digit#4 )
  *ultoa_append::buffer#1 = DIGITS[ultoa_append::digit#3]
  ultoa_append::return#1 = ultoa_append::value#4
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  ultoa_append::return#4 = phi( ultoa_append::@3/ultoa_append::return#1 )
  ultoa_append::return#2 = ultoa_append::return#4
  return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  clrscr::line_text#0 = CONIO_SCREEN_TEXT
  clrscr::line_cols#0 = CONIO_SCREEN_COLORS
  clrscr::l#0 = 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  clrscr::line_cols#6 = phi( clrscr/clrscr::line_cols#0, clrscr::@6/clrscr::line_cols#1 )
  clrscr::line_text#6 = phi( clrscr/clrscr::line_text#0, clrscr::@6/clrscr::line_text#1 )
  clrscr::l#2 = phi( clrscr/clrscr::l#0, clrscr::@6/clrscr::l#1 )
  clrscr::$0 = clrscr::l#2 < $19
  if(clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  clrscr::l#5 = phi( clrscr::@1/clrscr::l#2 )
  clrscr::line_cols#5 = phi( clrscr::@1/clrscr::line_cols#6 )
  clrscr::line_text#5 = phi( clrscr::@1/clrscr::line_text#6 )
  clrscr::c#0 = 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  conio_cursor_x = 0
  conio_cursor_y = 0
  conio_line_text = CONIO_SCREEN_TEXT
  conio_line_color = CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  clrscr::l#4 = phi( clrscr::@2/clrscr::l#5, clrscr::@5/clrscr::l#6 )
  clrscr::line_cols#4 = phi( clrscr::@2/clrscr::line_cols#5, clrscr::@5/clrscr::line_cols#2 )
  clrscr::line_text#4 = phi( clrscr::@2/clrscr::line_text#5, clrscr::@5/clrscr::line_text#2 )
  clrscr::c#2 = phi( clrscr::@2/clrscr::c#0, clrscr::@5/clrscr::c#1 )
  clrscr::$1 = clrscr::c#2 < $28
  if(clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  clrscr::l#6 = phi( clrscr::@4/clrscr::l#4 )
  clrscr::line_cols#2 = phi( clrscr::@4/clrscr::line_cols#4 )
  clrscr::c#3 = phi( clrscr::@4/clrscr::c#2 )
  clrscr::line_text#2 = phi( clrscr::@4/clrscr::line_text#4 )
  clrscr::line_text#2[clrscr::c#3] = ' '
  clrscr::line_cols#2[clrscr::c#3] = conio_textcolor
  clrscr::c#1 = ++ clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  clrscr::l#3 = phi( clrscr::@4/clrscr::l#4 )
  clrscr::line_cols#3 = phi( clrscr::@4/clrscr::line_cols#4 )
  clrscr::line_text#3 = phi( clrscr::@4/clrscr::line_text#4 )
  clrscr::line_text#1 = clrscr::line_text#3 + $28
  clrscr::line_cols#1 = clrscr::line_cols#3 + $28
  clrscr::l#1 = ++ clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1 cscroll::@2 main::@3 main::@6
  gotoxy::x#7 = phi( conio_c64_init::@1/gotoxy::x#2, cscroll::@2/gotoxy::x#1, main::@3/gotoxy::x#3, main::@6/gotoxy::x#4 )
  gotoxy::y#5 = phi( conio_c64_init::@1/gotoxy::y#2, cscroll::@2/gotoxy::y#1, main::@3/gotoxy::y#3, main::@6/gotoxy::y#4 )
  gotoxy::$0 = gotoxy::y#5 > $19
  gotoxy::$1 = ! gotoxy::$0
  if(gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  gotoxy::y#7 = phi( gotoxy/gotoxy::y#5, gotoxy::@3/gotoxy::y#0 )
  gotoxy::x#5 = phi( gotoxy/gotoxy::x#7, gotoxy::@3/gotoxy::x#8 )
  gotoxy::$2 = gotoxy::x#5 >= $28
  gotoxy::$3 = ! gotoxy::$2
  if(gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  gotoxy::x#8 = phi( gotoxy/gotoxy::x#7 )
  gotoxy::y#0 = 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  gotoxy::y#6 = phi( gotoxy::@1/gotoxy::y#7, gotoxy::@4/gotoxy::y#8 )
  gotoxy::x#6 = phi( gotoxy::@1/gotoxy::x#5, gotoxy::@4/gotoxy::x#0 )
  conio_cursor_x = gotoxy::x#6
  conio_cursor_y = gotoxy::y#6
  gotoxy::$7 = (word)gotoxy::y#6
  gotoxy::$4 = gotoxy::$7 * $28
  gotoxy::line_offset#0 = gotoxy::$4
  gotoxy::$5 = CONIO_SCREEN_TEXT + gotoxy::line_offset#0
  conio_line_text = gotoxy::$5
  gotoxy::$6 = CONIO_SCREEN_COLORS + gotoxy::line_offset#0
  conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  gotoxy::y#8 = phi( gotoxy::@1/gotoxy::y#7 )
  gotoxy::x#0 = 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@9/cputc::c#2, printf_padding::@2/cputc::c#1 )
  cputc::$0 = cputc::c#3 == '
'
  if(cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  cputc::c#4 = phi( cputc/cputc::c#3 )
  conio_line_text[conio_cursor_x] = cputc::c#4
  conio_line_color[conio_cursor_x] = conio_textcolor
  conio_cursor_x = ++ conio_cursor_x
  cputc::$1 = conio_cursor_x == $28
  cputc::$2 = ! cputc::$1
  if(cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  call cputln 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  conio_line_text = conio_line_text + $28
  conio_line_color = conio_line_color + $28
  conio_cursor_x = 0
  conio_cursor_y = ++ conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

void cputs(const byte* cputs::s)
cputs: scope:[cputs]  from main::@15 main::@8 printf_number_buffer::@5
  cputs::s#5 = phi( main::@15/cputs::s#3, main::@8/cputs::s#2, printf_number_buffer::@5/cputs::s#1 )
  cputs::c#0 = 0
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@3
  cputs::s#4 = phi( cputs/cputs::s#5, cputs::@3/cputs::s#6 )
  cputs::c#1 = *cputs::s#4
  cputs::$0 = cputs::c#1
  cputs::s#0 = ++ cputs::s#4
  cputs::$2 = 0 != cputs::$0
  if(cputs::$2) goto cputs::@2
  to:cputs::@return
cputs::@2: scope:[cputs]  from cputs::@1
  cputs::s#7 = phi( cputs::@1/cputs::s#0 )
  cputs::c#2 = phi( cputs::@1/cputs::c#1 )
  cputc::c#0 = cputs::c#2
  call cputc 
  to:cputs::@3
cputs::@3: scope:[cputs]  from cputs::@2
  cputs::s#6 = phi( cputs::@2/cputs::s#7 )
  to:cputs::@1
cputs::@return: scope:[cputs]  from cputs::@1
  return 
  to:@return

byte textcolor(byte textcolor::color)
textcolor: scope:[textcolor]  from main::@10 main::@7
  textcolor::color#2 = phi( main::@10/textcolor::color#1, main::@7/textcolor::color#0 )
  textcolor::old#0 = conio_textcolor
  conio_textcolor = textcolor::color#2
  textcolor::return#0 = textcolor::old#0
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  textcolor::return#4 = phi( textcolor/textcolor::return#0 )
  textcolor::return#1 = textcolor::return#4
  return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  cscroll::$0 = conio_cursor_y == $19
  cscroll::$1 = ! cscroll::$0
  if(cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  cscroll::$7 = 0 != conio_scroll_enable
  if(cscroll::$7) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
  memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
  memcpy::num#0 = $19*$28-$28
  call memcpy 
  memcpy::return#2 = memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
  memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
  memcpy::num#1 = $19*$28-$28
  call memcpy 
  memcpy::return#3 = memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
  memset::c#0 = ' '
  memset::num#0 = $28
  call memset 
  memset::return#2 = memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
  memset::c#1 = conio_textcolor
  memset::num#1 = $28
  call memset 
  memset::return#3 = memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  conio_line_text = conio_line_text - $28
  conio_line_color = conio_line_color - $28
  conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  gotoxy::x#1 = 0
  gotoxy::y#1 = 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  conio_c64_init::$0 = conio_c64_init::line#0 >= $19
  conio_c64_init::$1 = ! conio_c64_init::$0
  if(conio_c64_init::$1) goto conio_c64_init::@1
  to:conio_c64_init::@2
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  conio_c64_init::line#2 = phi( conio_c64_init/conio_c64_init::line#0, conio_c64_init::@2/conio_c64_init::line#1 )
  gotoxy::x#2 = 0
  gotoxy::y#2 = conio_c64_init::line#2
  call gotoxy 
  to:conio_c64_init::@3
conio_c64_init::@3: scope:[conio_c64_init]  from conio_c64_init::@1
  to:conio_c64_init::@return
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  conio_c64_init::line#1 = $19-1
  to:conio_c64_init::@1
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@3
  return 
  to:@return

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  printf_padding::pad#5 = phi( printf_number_buffer::@10/printf_padding::pad#1, printf_number_buffer::@12/printf_padding::pad#2, printf_number_buffer::@8/printf_padding::pad#0 )
  printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  printf_padding::i#0 = 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  printf_padding::pad#4 = phi( printf_padding/printf_padding::pad#5, printf_padding::@3/printf_padding::pad#6 )
  printf_padding::length#3 = phi( printf_padding/printf_padding::length#4, printf_padding::@3/printf_padding::length#5 )
  printf_padding::i#2 = phi( printf_padding/printf_padding::i#0, printf_padding::@3/printf_padding::i#1 )
  printf_padding::$0 = printf_padding::i#2 < printf_padding::length#3
  if(printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  printf_padding::length#6 = phi( printf_padding::@1/printf_padding::length#3 )
  printf_padding::i#4 = phi( printf_padding::@1/printf_padding::i#2 )
  printf_padding::pad#3 = phi( printf_padding::@1/printf_padding::pad#4 )
  cputc::c#1 = printf_padding::pad#3
  call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  printf_padding::pad#6 = phi( printf_padding::@2/printf_padding::pad#3 )
  printf_padding::length#5 = phi( printf_padding::@2/printf_padding::length#6 )
  printf_padding::i#3 = phi( printf_padding::@2/printf_padding::i#4 )
  printf_padding::i#1 = ++ printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@16
  printf_ulong::format_upper_case#5 = phi( main::@16/printf_ulong::format_upper_case#0 )
  printf_ulong::format_zero_padding#5 = phi( main::@16/printf_ulong::format_zero_padding#0 )
  printf_ulong::format_justify_left#5 = phi( main::@16/printf_ulong::format_justify_left#0 )
  printf_ulong::format_min_length#5 = phi( main::@16/printf_ulong::format_min_length#0 )
  printf_ulong::format_radix#5 = phi( main::@16/printf_ulong::format_radix#0 )
  printf_ulong::uvalue#4 = phi( main::@16/printf_ulong::uvalue#0 )
  printf_ulong::format_sign_always#1 = phi( main::@16/printf_ulong::format_sign_always#0 )
  printf_ulong::$5 = 0 != printf_ulong::format_sign_always#1
  if(printf_ulong::$5) goto printf_ulong::@1
  to:printf_ulong::@2
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  printf_ulong::format_upper_case#3 = phi( printf_ulong/printf_ulong::format_upper_case#5 )
  printf_ulong::format_zero_padding#3 = phi( printf_ulong/printf_ulong::format_zero_padding#5 )
  printf_ulong::format_sign_always#4 = phi( printf_ulong/printf_ulong::format_sign_always#1 )
  printf_ulong::format_justify_left#3 = phi( printf_ulong/printf_ulong::format_justify_left#5 )
  printf_ulong::format_min_length#3 = phi( printf_ulong/printf_ulong::format_min_length#5 )
  printf_ulong::format_radix#3 = phi( printf_ulong/printf_ulong::format_radix#5 )
  printf_ulong::uvalue#2 = phi( printf_ulong/printf_ulong::uvalue#4 )
  printf_ulong::$1 = '+'
  to:printf_ulong::@3
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong
  printf_ulong::format_upper_case#4 = phi( printf_ulong/printf_ulong::format_upper_case#5 )
  printf_ulong::format_zero_padding#4 = phi( printf_ulong/printf_ulong::format_zero_padding#5 )
  printf_ulong::format_sign_always#5 = phi( printf_ulong/printf_ulong::format_sign_always#1 )
  printf_ulong::format_justify_left#4 = phi( printf_ulong/printf_ulong::format_justify_left#5 )
  printf_ulong::format_min_length#4 = phi( printf_ulong/printf_ulong::format_min_length#5 )
  printf_ulong::format_radix#4 = phi( printf_ulong/printf_ulong::format_radix#5 )
  printf_ulong::uvalue#3 = phi( printf_ulong/printf_ulong::uvalue#4 )
  printf_ulong::$0 = 0
  to:printf_ulong::@3
printf_ulong::@3: scope:[printf_ulong]  from printf_ulong::@1 printf_ulong::@2
  printf_ulong::format_upper_case#2 = phi( printf_ulong::@1/printf_ulong::format_upper_case#3, printf_ulong::@2/printf_ulong::format_upper_case#4 )
  printf_ulong::format_zero_padding#2 = phi( printf_ulong::@1/printf_ulong::format_zero_padding#3, printf_ulong::@2/printf_ulong::format_zero_padding#4 )
  printf_ulong::format_sign_always#3 = phi( printf_ulong::@1/printf_ulong::format_sign_always#4, printf_ulong::@2/printf_ulong::format_sign_always#5 )
  printf_ulong::format_justify_left#2 = phi( printf_ulong::@1/printf_ulong::format_justify_left#3, printf_ulong::@2/printf_ulong::format_justify_left#4 )
  printf_ulong::format_min_length#2 = phi( printf_ulong::@1/printf_ulong::format_min_length#3, printf_ulong::@2/printf_ulong::format_min_length#4 )
  printf_ulong::format_radix#1 = phi( printf_ulong::@1/printf_ulong::format_radix#3, printf_ulong::@2/printf_ulong::format_radix#4 )
  printf_ulong::uvalue#1 = phi( printf_ulong::@1/printf_ulong::uvalue#2, printf_ulong::@2/printf_ulong::uvalue#3 )
  printf_ulong::$2 = phi( printf_ulong::@1/printf_ulong::$1, printf_ulong::@2/printf_ulong::$0 )
  *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_ulong::$2
  ultoa::value#1 = printf_ulong::uvalue#1
  ultoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  ultoa::radix#0 = printf_ulong::format_radix#1
  call ultoa 
  to:printf_ulong::@4
printf_ulong::@4: scope:[printf_ulong]  from printf_ulong::@3
  printf_ulong::format_radix#2 = phi( printf_ulong::@3/printf_ulong::format_radix#1 )
  printf_ulong::format_upper_case#1 = phi( printf_ulong::@3/printf_ulong::format_upper_case#2 )
  printf_ulong::format_zero_padding#1 = phi( printf_ulong::@3/printf_ulong::format_zero_padding#2 )
  printf_ulong::format_sign_always#2 = phi( printf_ulong::@3/printf_ulong::format_sign_always#3 )
  printf_ulong::format_justify_left#1 = phi( printf_ulong::@3/printf_ulong::format_justify_left#2 )
  printf_ulong::format_min_length#1 = phi( printf_ulong::@3/printf_ulong::format_min_length#2 )
  printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  printf_number_buffer::format_min_length#0 = printf_ulong::format_min_length#1
  printf_number_buffer::format_justify_left#0 = printf_ulong::format_justify_left#1
  printf_number_buffer::format_sign_always#0 = printf_ulong::format_sign_always#2
  printf_number_buffer::format_zero_padding#0 = printf_ulong::format_zero_padding#1
  printf_number_buffer::format_upper_case#0 = printf_ulong::format_upper_case#1
  printf_number_buffer::format_radix#0 = printf_ulong::format_radix#2
  call printf_number_buffer 
  to:printf_ulong::@5
printf_ulong::@5: scope:[printf_ulong]  from printf_ulong::@4
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@5
  return 
  to:@return

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@13
  printf_uint::format_upper_case#5 = phi( main::@13/printf_uint::format_upper_case#0 )
  printf_uint::format_zero_padding#5 = phi( main::@13/printf_uint::format_zero_padding#0 )
  printf_uint::format_justify_left#5 = phi( main::@13/printf_uint::format_justify_left#0 )
  printf_uint::format_min_length#5 = phi( main::@13/printf_uint::format_min_length#0 )
  printf_uint::format_radix#5 = phi( main::@13/printf_uint::format_radix#0 )
  printf_uint::uvalue#4 = phi( main::@13/printf_uint::uvalue#0 )
  printf_uint::format_sign_always#1 = phi( main::@13/printf_uint::format_sign_always#0 )
  printf_uint::$5 = 0 != printf_uint::format_sign_always#1
  if(printf_uint::$5) goto printf_uint::@1
  to:printf_uint::@2
printf_uint::@1: scope:[printf_uint]  from printf_uint
  printf_uint::format_upper_case#3 = phi( printf_uint/printf_uint::format_upper_case#5 )
  printf_uint::format_zero_padding#3 = phi( printf_uint/printf_uint::format_zero_padding#5 )
  printf_uint::format_sign_always#4 = phi( printf_uint/printf_uint::format_sign_always#1 )
  printf_uint::format_justify_left#3 = phi( printf_uint/printf_uint::format_justify_left#5 )
  printf_uint::format_min_length#3 = phi( printf_uint/printf_uint::format_min_length#5 )
  printf_uint::format_radix#3 = phi( printf_uint/printf_uint::format_radix#5 )
  printf_uint::uvalue#2 = phi( printf_uint/printf_uint::uvalue#4 )
  printf_uint::$1 = '+'
  to:printf_uint::@3
printf_uint::@2: scope:[printf_uint]  from printf_uint
  printf_uint::format_upper_case#4 = phi( printf_uint/printf_uint::format_upper_case#5 )
  printf_uint::format_zero_padding#4 = phi( printf_uint/printf_uint::format_zero_padding#5 )
  printf_uint::format_sign_always#5 = phi( printf_uint/printf_uint::format_sign_always#1 )
  printf_uint::format_justify_left#4 = phi( printf_uint/printf_uint::format_justify_left#5 )
  printf_uint::format_min_length#4 = phi( printf_uint/printf_uint::format_min_length#5 )
  printf_uint::format_radix#4 = phi( printf_uint/printf_uint::format_radix#5 )
  printf_uint::uvalue#3 = phi( printf_uint/printf_uint::uvalue#4 )
  printf_uint::$0 = 0
  to:printf_uint::@3
printf_uint::@3: scope:[printf_uint]  from printf_uint::@1 printf_uint::@2
  printf_uint::format_upper_case#2 = phi( printf_uint::@1/printf_uint::format_upper_case#3, printf_uint::@2/printf_uint::format_upper_case#4 )
  printf_uint::format_zero_padding#2 = phi( printf_uint::@1/printf_uint::format_zero_padding#3, printf_uint::@2/printf_uint::format_zero_padding#4 )
  printf_uint::format_sign_always#3 = phi( printf_uint::@1/printf_uint::format_sign_always#4, printf_uint::@2/printf_uint::format_sign_always#5 )
  printf_uint::format_justify_left#2 = phi( printf_uint::@1/printf_uint::format_justify_left#3, printf_uint::@2/printf_uint::format_justify_left#4 )
  printf_uint::format_min_length#2 = phi( printf_uint::@1/printf_uint::format_min_length#3, printf_uint::@2/printf_uint::format_min_length#4 )
  printf_uint::format_radix#1 = phi( printf_uint::@1/printf_uint::format_radix#3, printf_uint::@2/printf_uint::format_radix#4 )
  printf_uint::uvalue#1 = phi( printf_uint::@1/printf_uint::uvalue#2, printf_uint::@2/printf_uint::uvalue#3 )
  printf_uint::$2 = phi( printf_uint::@1/printf_uint::$1, printf_uint::@2/printf_uint::$0 )
  *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_uint::$2
  utoa::value#1 = printf_uint::uvalue#1
  utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  utoa::radix#0 = printf_uint::format_radix#1
  call utoa 
  to:printf_uint::@4
printf_uint::@4: scope:[printf_uint]  from printf_uint::@3
  printf_uint::format_radix#2 = phi( printf_uint::@3/printf_uint::format_radix#1 )
  printf_uint::format_upper_case#1 = phi( printf_uint::@3/printf_uint::format_upper_case#2 )
  printf_uint::format_zero_padding#1 = phi( printf_uint::@3/printf_uint::format_zero_padding#2 )
  printf_uint::format_sign_always#2 = phi( printf_uint::@3/printf_uint::format_sign_always#3 )
  printf_uint::format_justify_left#1 = phi( printf_uint::@3/printf_uint::format_justify_left#2 )
  printf_uint::format_min_length#1 = phi( printf_uint::@3/printf_uint::format_min_length#2 )
  printf_number_buffer::buffer_sign#1 = *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
  printf_number_buffer::buffer_digits#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
  printf_number_buffer::format_min_length#1 = printf_uint::format_min_length#1
  printf_number_buffer::format_justify_left#1 = printf_uint::format_justify_left#1
  printf_number_buffer::format_sign_always#1 = printf_uint::format_sign_always#2
  printf_number_buffer::format_zero_padding#1 = printf_uint::format_zero_padding#1
  printf_number_buffer::format_upper_case#1 = printf_uint::format_upper_case#1
  printf_number_buffer::format_radix#1 = printf_uint::format_radix#2
  call printf_number_buffer 
  to:printf_uint::@5
printf_uint::@5: scope:[printf_uint]  from printf_uint::@4
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@5
  return 
  to:@return

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@4 printf_ulong::@4
  printf_number_buffer::format_upper_case#11 = phi( printf_uint::@4/printf_number_buffer::format_upper_case#1, printf_ulong::@4/printf_number_buffer::format_upper_case#0 )
  printf_number_buffer::buffer_sign#8 = phi( printf_uint::@4/printf_number_buffer::buffer_sign#1, printf_ulong::@4/printf_number_buffer::buffer_sign#0 )
  printf_number_buffer::buffer_digits#5 = phi( printf_uint::@4/printf_number_buffer::buffer_digits#1, printf_ulong::@4/printf_number_buffer::buffer_digits#0 )
  printf_number_buffer::format_zero_padding#5 = phi( printf_uint::@4/printf_number_buffer::format_zero_padding#1, printf_ulong::@4/printf_number_buffer::format_zero_padding#0 )
  printf_number_buffer::format_justify_left#4 = phi( printf_uint::@4/printf_number_buffer::format_justify_left#1, printf_ulong::@4/printf_number_buffer::format_justify_left#0 )
  printf_number_buffer::format_min_length#2 = phi( printf_uint::@4/printf_number_buffer::format_min_length#1, printf_ulong::@4/printf_number_buffer::format_min_length#0 )
  printf_number_buffer::padding#0 = 0
  printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#2
  printf_number_buffer::$0 = ! printf_number_buffer::$26
  if(printf_number_buffer::$0) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@14
  printf_number_buffer::buffer_digits#13 = phi( printf_number_buffer/printf_number_buffer::buffer_digits#5, printf_number_buffer::@13/printf_number_buffer::buffer_digits#16, printf_number_buffer::@14/printf_number_buffer::buffer_digits#17 )
  printf_number_buffer::format_upper_case#8 = phi( printf_number_buffer/printf_number_buffer::format_upper_case#11, printf_number_buffer::@13/printf_number_buffer::format_upper_case#12, printf_number_buffer::@14/printf_number_buffer::format_upper_case#13 )
  printf_number_buffer::buffer_sign#6 = phi( printf_number_buffer/printf_number_buffer::buffer_sign#8, printf_number_buffer::@13/printf_number_buffer::buffer_sign#9, printf_number_buffer::@14/printf_number_buffer::buffer_sign#10 )
  printf_number_buffer::padding#3 = phi( printf_number_buffer/printf_number_buffer::padding#0, printf_number_buffer::@13/printf_number_buffer::padding#1, printf_number_buffer::@14/printf_number_buffer::padding#2 )
  printf_number_buffer::format_zero_padding#2 = phi( printf_number_buffer/printf_number_buffer::format_zero_padding#5, printf_number_buffer::@13/printf_number_buffer::format_zero_padding#6, printf_number_buffer::@14/printf_number_buffer::format_zero_padding#7 )
  printf_number_buffer::format_justify_left#2 = phi( printf_number_buffer/printf_number_buffer::format_justify_left#4, printf_number_buffer::@13/printf_number_buffer::format_justify_left#5, printf_number_buffer::@14/printf_number_buffer::format_justify_left#6 )
  printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#2
  printf_number_buffer::$1 = ! printf_number_buffer::$27
  printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#2
  printf_number_buffer::$2 = ! printf_number_buffer::$28
  printf_number_buffer::$3 = printf_number_buffer::$1 && printf_number_buffer::$2
  printf_number_buffer::$4 = printf_number_buffer::$3 && printf_number_buffer::padding#3
  printf_number_buffer::$5 = ! printf_number_buffer::$4
  if(printf_number_buffer::$5) goto printf_number_buffer::@2
  to:printf_number_buffer::@8
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  printf_number_buffer::format_upper_case#17 = phi( printf_number_buffer/printf_number_buffer::format_upper_case#11 )
  printf_number_buffer::format_zero_padding#17 = phi( printf_number_buffer/printf_number_buffer::format_zero_padding#5 )
  printf_number_buffer::format_justify_left#12 = phi( printf_number_buffer/printf_number_buffer::format_justify_left#4 )
  printf_number_buffer::format_min_length#6 = phi( printf_number_buffer/printf_number_buffer::format_min_length#2 )
  printf_number_buffer::buffer_sign#5 = phi( printf_number_buffer/printf_number_buffer::buffer_sign#8 )
  printf_number_buffer::buffer_digits#2 = phi( printf_number_buffer/printf_number_buffer::buffer_digits#5 )
  strlen::str#1 = printf_number_buffer::buffer_digits#2
  call strlen 
  strlen::return#2 = strlen::return#1
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@6
  printf_number_buffer::buffer_digits#19 = phi( printf_number_buffer::@6/printf_number_buffer::buffer_digits#2 )
  printf_number_buffer::format_upper_case#15 = phi( printf_number_buffer::@6/printf_number_buffer::format_upper_case#17 )
  printf_number_buffer::format_zero_padding#11 = phi( printf_number_buffer::@6/printf_number_buffer::format_zero_padding#17 )
  printf_number_buffer::format_justify_left#8 = phi( printf_number_buffer::@6/printf_number_buffer::format_justify_left#12 )
  printf_number_buffer::format_min_length#4 = phi( printf_number_buffer::@6/printf_number_buffer::format_min_length#6 )
  printf_number_buffer::buffer_sign#2 = phi( printf_number_buffer::@6/printf_number_buffer::buffer_sign#5 )
  strlen::return#4 = phi( printf_number_buffer::@6/strlen::return#2 )
  printf_number_buffer::$19 = strlen::return#4
  printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#2
  printf_number_buffer::$20 = ! printf_number_buffer::$29
  if(printf_number_buffer::$20) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@15 printf_number_buffer::@7
  printf_number_buffer::buffer_digits#16 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_digits#19, printf_number_buffer::@7/printf_number_buffer::buffer_digits#20 )
  printf_number_buffer::format_upper_case#12 = phi( printf_number_buffer::@15/printf_number_buffer::format_upper_case#15, printf_number_buffer::@7/printf_number_buffer::format_upper_case#16 )
  printf_number_buffer::buffer_sign#9 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_sign#2, printf_number_buffer::@7/printf_number_buffer::buffer_sign#12 )
  printf_number_buffer::format_zero_padding#6 = phi( printf_number_buffer::@15/printf_number_buffer::format_zero_padding#11, printf_number_buffer::@7/printf_number_buffer::format_zero_padding#12 )
  printf_number_buffer::format_justify_left#5 = phi( printf_number_buffer::@15/printf_number_buffer::format_justify_left#8, printf_number_buffer::@7/printf_number_buffer::format_justify_left#9 )
  printf_number_buffer::len#2 = phi( printf_number_buffer::@15/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  printf_number_buffer::format_min_length#3 = phi( printf_number_buffer::@15/printf_number_buffer::format_min_length#4, printf_number_buffer::@7/printf_number_buffer::format_min_length#5 )
  printf_number_buffer::$25 = (signed byte)printf_number_buffer::format_min_length#3
  printf_number_buffer::$21 = printf_number_buffer::$25 - printf_number_buffer::len#2
  printf_number_buffer::padding#1 = printf_number_buffer::$21
  printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
  printf_number_buffer::$23 = ! printf_number_buffer::$22
  if(printf_number_buffer::$23) goto printf_number_buffer::@1
  to:printf_number_buffer::@14
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@15
  printf_number_buffer::buffer_digits#20 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_digits#19 )
  printf_number_buffer::format_upper_case#16 = phi( printf_number_buffer::@15/printf_number_buffer::format_upper_case#15 )
  printf_number_buffer::buffer_sign#12 = phi( printf_number_buffer::@15/printf_number_buffer::buffer_sign#2 )
  printf_number_buffer::format_zero_padding#12 = phi( printf_number_buffer::@15/printf_number_buffer::format_zero_padding#11 )
  printf_number_buffer::format_justify_left#9 = phi( printf_number_buffer::@15/printf_number_buffer::format_justify_left#8 )
  printf_number_buffer::format_min_length#5 = phi( printf_number_buffer::@15/printf_number_buffer::format_min_length#4 )
  printf_number_buffer::len#3 = phi( printf_number_buffer::@15/printf_number_buffer::len#0 )
  printf_number_buffer::len#1 = ++ printf_number_buffer::len#3
  to:printf_number_buffer::@13
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@13
  printf_number_buffer::buffer_digits#17 = phi( printf_number_buffer::@13/printf_number_buffer::buffer_digits#16 )
  printf_number_buffer::format_upper_case#13 = phi( printf_number_buffer::@13/printf_number_buffer::format_upper_case#12 )
  printf_number_buffer::buffer_sign#10 = phi( printf_number_buffer::@13/printf_number_buffer::buffer_sign#9 )
  printf_number_buffer::format_zero_padding#7 = phi( printf_number_buffer::@13/printf_number_buffer::format_zero_padding#6 )
  printf_number_buffer::format_justify_left#6 = phi( printf_number_buffer::@13/printf_number_buffer::format_justify_left#5 )
  printf_number_buffer::padding#2 = 0
  to:printf_number_buffer::@1
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16
  printf_number_buffer::format_justify_left#17 = phi( printf_number_buffer::@1/printf_number_buffer::format_justify_left#2, printf_number_buffer::@16/printf_number_buffer::format_justify_left#19 )
  printf_number_buffer::buffer_digits#11 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_digits#13, printf_number_buffer::@16/printf_number_buffer::buffer_digits#14 )
  printf_number_buffer::format_upper_case#6 = phi( printf_number_buffer::@1/printf_number_buffer::format_upper_case#8, printf_number_buffer::@16/printf_number_buffer::format_upper_case#9 )
  printf_number_buffer::padding#10 = phi( printf_number_buffer::@1/printf_number_buffer::padding#3, printf_number_buffer::@16/printf_number_buffer::padding#12 )
  printf_number_buffer::format_zero_padding#9 = phi( printf_number_buffer::@1/printf_number_buffer::format_zero_padding#2, printf_number_buffer::@16/printf_number_buffer::format_zero_padding#13 )
  printf_number_buffer::buffer_sign#3 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_sign#6, printf_number_buffer::@16/printf_number_buffer::buffer_sign#7 )
  printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#3
  printf_number_buffer::$7 = ! printf_number_buffer::$30
  if(printf_number_buffer::$7) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@1
  printf_number_buffer::format_justify_left#21 = phi( printf_number_buffer::@1/printf_number_buffer::format_justify_left#2 )
  printf_number_buffer::buffer_digits#18 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_digits#13 )
  printf_number_buffer::format_upper_case#14 = phi( printf_number_buffer::@1/printf_number_buffer::format_upper_case#8 )
  printf_number_buffer::format_zero_padding#18 = phi( printf_number_buffer::@1/printf_number_buffer::format_zero_padding#2 )
  printf_number_buffer::buffer_sign#11 = phi( printf_number_buffer::@1/printf_number_buffer::buffer_sign#6 )
  printf_number_buffer::padding#4 = phi( printf_number_buffer::@1/printf_number_buffer::padding#3 )
  printf_padding::pad#0 = ' '
  printf_padding::length#0 = (byte)printf_number_buffer::padding#4
  call printf_padding 
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@8
  printf_number_buffer::format_justify_left#19 = phi( printf_number_buffer::@8/printf_number_buffer::format_justify_left#21 )
  printf_number_buffer::buffer_digits#14 = phi( printf_number_buffer::@8/printf_number_buffer::buffer_digits#18 )
  printf_number_buffer::format_upper_case#9 = phi( printf_number_buffer::@8/printf_number_buffer::format_upper_case#14 )
  printf_number_buffer::padding#12 = phi( printf_number_buffer::@8/printf_number_buffer::padding#4 )
  printf_number_buffer::format_zero_padding#13 = phi( printf_number_buffer::@8/printf_number_buffer::format_zero_padding#18 )
  printf_number_buffer::buffer_sign#7 = phi( printf_number_buffer::@8/printf_number_buffer::buffer_sign#11 )
  to:printf_number_buffer::@2
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@17 printf_number_buffer::@2
  printf_number_buffer::format_justify_left#14 = phi( printf_number_buffer::@17/printf_number_buffer::format_justify_left#16, printf_number_buffer::@2/printf_number_buffer::format_justify_left#17 )
  printf_number_buffer::buffer_digits#9 = phi( printf_number_buffer::@17/printf_number_buffer::buffer_digits#10, printf_number_buffer::@2/printf_number_buffer::buffer_digits#11 )
  printf_number_buffer::format_upper_case#4 = phi( printf_number_buffer::@17/printf_number_buffer::format_upper_case#5, printf_number_buffer::@2/printf_number_buffer::format_upper_case#6 )
  printf_number_buffer::padding#5 = phi( printf_number_buffer::@17/printf_number_buffer::padding#9, printf_number_buffer::@2/printf_number_buffer::padding#10 )
  printf_number_buffer::format_zero_padding#3 = phi( printf_number_buffer::@17/printf_number_buffer::format_zero_padding#8, printf_number_buffer::@2/printf_number_buffer::format_zero_padding#9 )
  printf_number_buffer::$9 = printf_number_buffer::format_zero_padding#3 && printf_number_buffer::padding#5
  printf_number_buffer::$10 = ! printf_number_buffer::$9
  if(printf_number_buffer::$10) goto printf_number_buffer::@4
  to:printf_number_buffer::@10
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  printf_number_buffer::format_justify_left#20 = phi( printf_number_buffer::@2/printf_number_buffer::format_justify_left#17 )
  printf_number_buffer::buffer_digits#15 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_digits#11 )
  printf_number_buffer::format_upper_case#10 = phi( printf_number_buffer::@2/printf_number_buffer::format_upper_case#6 )
  printf_number_buffer::padding#13 = phi( printf_number_buffer::@2/printf_number_buffer::padding#10 )
  printf_number_buffer::format_zero_padding#14 = phi( printf_number_buffer::@2/printf_number_buffer::format_zero_padding#9 )
  printf_number_buffer::buffer_sign#4 = phi( printf_number_buffer::@2/printf_number_buffer::buffer_sign#3 )
  cputc::c#2 = printf_number_buffer::buffer_sign#4
  call cputc 
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@9
  printf_number_buffer::format_justify_left#16 = phi( printf_number_buffer::@9/printf_number_buffer::format_justify_left#20 )
  printf_number_buffer::buffer_digits#10 = phi( printf_number_buffer::@9/printf_number_buffer::buffer_digits#15 )
  printf_number_buffer::format_upper_case#5 = phi( printf_number_buffer::@9/printf_number_buffer::format_upper_case#10 )
  printf_number_buffer::padding#9 = phi( printf_number_buffer::@9/printf_number_buffer::padding#13 )
  printf_number_buffer::format_zero_padding#8 = phi( printf_number_buffer::@9/printf_number_buffer::format_zero_padding#14 )
  to:printf_number_buffer::@3
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@18 printf_number_buffer::@3
  printf_number_buffer::padding#15 = phi( printf_number_buffer::@18/printf_number_buffer::padding#16, printf_number_buffer::@3/printf_number_buffer::padding#5 )
  printf_number_buffer::format_justify_left#11 = phi( printf_number_buffer::@18/printf_number_buffer::format_justify_left#13, printf_number_buffer::@3/printf_number_buffer::format_justify_left#14 )
  printf_number_buffer::format_zero_padding#16 = phi( printf_number_buffer::@18/printf_number_buffer::format_zero_padding#19, printf_number_buffer::@3/printf_number_buffer::format_zero_padding#3 )
  printf_number_buffer::buffer_digits#7 = phi( printf_number_buffer::@18/printf_number_buffer::buffer_digits#8, printf_number_buffer::@3/printf_number_buffer::buffer_digits#9 )
  printf_number_buffer::format_upper_case#2 = phi( printf_number_buffer::@18/printf_number_buffer::format_upper_case#3, printf_number_buffer::@3/printf_number_buffer::format_upper_case#4 )
  printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#2
  printf_number_buffer::$12 = ! printf_number_buffer::$31
  if(printf_number_buffer::$12) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@3
  printf_number_buffer::format_justify_left#18 = phi( printf_number_buffer::@3/printf_number_buffer::format_justify_left#14 )
  printf_number_buffer::format_zero_padding#21 = phi( printf_number_buffer::@3/printf_number_buffer::format_zero_padding#3 )
  printf_number_buffer::buffer_digits#12 = phi( printf_number_buffer::@3/printf_number_buffer::buffer_digits#9 )
  printf_number_buffer::format_upper_case#7 = phi( printf_number_buffer::@3/printf_number_buffer::format_upper_case#4 )
  printf_number_buffer::padding#6 = phi( printf_number_buffer::@3/printf_number_buffer::padding#5 )
  printf_padding::pad#1 = '0'
  printf_padding::length#1 = (byte)printf_number_buffer::padding#6
  call printf_padding 
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@10
  printf_number_buffer::padding#16 = phi( printf_number_buffer::@10/printf_number_buffer::padding#6 )
  printf_number_buffer::format_justify_left#13 = phi( printf_number_buffer::@10/printf_number_buffer::format_justify_left#18 )
  printf_number_buffer::format_zero_padding#19 = phi( printf_number_buffer::@10/printf_number_buffer::format_zero_padding#21 )
  printf_number_buffer::buffer_digits#8 = phi( printf_number_buffer::@10/printf_number_buffer::buffer_digits#12 )
  printf_number_buffer::format_upper_case#3 = phi( printf_number_buffer::@10/printf_number_buffer::format_upper_case#7 )
  to:printf_number_buffer::@4
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@20 printf_number_buffer::@4
  printf_number_buffer::padding#11 = phi( printf_number_buffer::@20/printf_number_buffer::padding#14, printf_number_buffer::@4/printf_number_buffer::padding#15 )
  printf_number_buffer::format_justify_left#7 = phi( printf_number_buffer::@20/printf_number_buffer::format_justify_left#10, printf_number_buffer::@4/printf_number_buffer::format_justify_left#11 )
  printf_number_buffer::format_zero_padding#10 = phi( printf_number_buffer::@20/printf_number_buffer::format_zero_padding#15, printf_number_buffer::@4/printf_number_buffer::format_zero_padding#16 )
  printf_number_buffer::buffer_digits#3 = phi( printf_number_buffer::@20/printf_number_buffer::buffer_digits#6, printf_number_buffer::@4/printf_number_buffer::buffer_digits#7 )
  cputs::s#1 = printf_number_buffer::buffer_digits#3
  call cputs 
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@5
  printf_number_buffer::padding#7 = phi( printf_number_buffer::@5/printf_number_buffer::padding#11 )
  printf_number_buffer::format_justify_left#3 = phi( printf_number_buffer::@5/printf_number_buffer::format_justify_left#7 )
  printf_number_buffer::format_zero_padding#4 = phi( printf_number_buffer::@5/printf_number_buffer::format_zero_padding#10 )
  printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#4
  printf_number_buffer::$14 = ! printf_number_buffer::$32
  printf_number_buffer::$15 = printf_number_buffer::format_justify_left#3 && printf_number_buffer::$14
  printf_number_buffer::$16 = printf_number_buffer::$15 && printf_number_buffer::padding#7
  printf_number_buffer::$17 = ! printf_number_buffer::$16
  if(printf_number_buffer::$17) goto printf_number_buffer::@return
  to:printf_number_buffer::@12
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  printf_number_buffer::padding#17 = phi( printf_number_buffer::@4/printf_number_buffer::padding#15 )
  printf_number_buffer::format_justify_left#15 = phi( printf_number_buffer::@4/printf_number_buffer::format_justify_left#11 )
  printf_number_buffer::format_zero_padding#20 = phi( printf_number_buffer::@4/printf_number_buffer::format_zero_padding#16 )
  printf_number_buffer::buffer_digits#4 = phi( printf_number_buffer::@4/printf_number_buffer::buffer_digits#7 )
  strupr::str#0 = printf_number_buffer::buffer_digits#4
  call strupr 
  strupr::return#2 = strupr::return#1
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@11
  printf_number_buffer::padding#14 = phi( printf_number_buffer::@11/printf_number_buffer::padding#17 )
  printf_number_buffer::format_justify_left#10 = phi( printf_number_buffer::@11/printf_number_buffer::format_justify_left#15 )
  printf_number_buffer::format_zero_padding#15 = phi( printf_number_buffer::@11/printf_number_buffer::format_zero_padding#20 )
  printf_number_buffer::buffer_digits#6 = phi( printf_number_buffer::@11/printf_number_buffer::buffer_digits#4 )
  to:printf_number_buffer::@5
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  printf_number_buffer::padding#8 = phi( printf_number_buffer::@19/printf_number_buffer::padding#7 )
  printf_padding::pad#2 = ' '
  printf_padding::length#2 = (byte)printf_number_buffer::padding#8
  call printf_padding 
  to:printf_number_buffer::@21
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@19 printf_number_buffer::@21
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  _rand_state#32 = phi( __start::@1/_rand_state#20 )
  call clrscr 
  to:main::@7
main::@7: scope:[main]  from main
  _rand_state#28 = phi( main/_rand_state#32 )
  textcolor::color#0 = WHITE
  call textcolor 
  textcolor::return#2 = textcolor::return#1
  to:main::@8
main::@8: scope:[main]  from main::@7
  _rand_state#21 = phi( main::@7/_rand_state#28 )
  cputs::s#2 = main::s
  call cputs 
  to:main::@9
main::@9: scope:[main]  from main::@8
  _rand_state#17 = phi( main::@8/_rand_state#21 )
  call _rand 
  _rand::return#0 = _rand::return#3
  to:main::@10
main::@10: scope:[main]  from main::@9
  _rand_state#10 = phi( main::@9/_rand_state#6 )
  _rand::return#4 = phi( main::@9/_rand::return#0 )
  main::$3 = _rand::return#4
  _rand_state#0 = _rand_state#10
  main::first#0 = main::$3
  main::cnt#0 = 0
  textcolor::color#1 = LIGHT_BLUE
  call textcolor 
  textcolor::return#3 = textcolor::return#1
  to:main::@11
main::@11: scope:[main]  from main::@10
  _rand_state#29 = phi( main::@10/_rand_state#0 )
  main::cnt#4 = phi( main::@10/main::cnt#0 )
  main::first#1 = phi( main::@10/main::first#0 )
  main::col#0 = 3
  main::row#0 = 1
  main::rnd#0 = main::first#1
  to:main::@1
main::@1: scope:[main]  from main::@11 main::@12
  main::rnd#4 = phi( main::@11/main::rnd#0, main::@12/main::rnd#1 )
  main::first#4 = phi( main::@11/main::first#1, main::@12/main::first#2 )
  _rand_state#22 = phi( main::@11/_rand_state#29, main::@12/_rand_state#1 )
  main::row#5 = phi( main::@11/main::row#0, main::@12/main::row#7 )
  main::col#5 = phi( main::@11/main::col#0, main::@12/main::col#7 )
  main::cnt#2 = phi( main::@11/main::cnt#4, main::@12/main::cnt#5 )
  main::cnt#1 = ++ main::cnt#2
  main::$17 = (byte)main::cnt#1
  main::$7 = main::$17 == 0
  main::$8 = ! main::$7
  if(main::$8) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@14 main::@4 main::@5
  main::row#8 = phi( main::@1/main::row#5, main::@14/main::row#1, main::@4/main::row#2, main::@5/main::row#9 )
  main::col#9 = phi( main::@1/main::col#5, main::@14/main::col#6, main::@4/main::col#1, main::@5/main::col#2 )
  main::cnt#7 = phi( main::@1/main::cnt#1, main::@14/main::cnt#9, main::@4/main::cnt#10, main::@5/main::cnt#11 )
  main::first#3 = phi( main::@1/main::first#4, main::@14/main::first#5, main::@4/main::first#6, main::@5/main::first#7 )
  _rand_state#18 = phi( main::@1/_rand_state#22, main::@14/_rand_state#23, main::@4/_rand_state#24, main::@5/_rand_state#25 )
  call _rand 
  _rand::return#1 = _rand::return#3
  to:main::@12
main::@12: scope:[main]  from main::@2
  main::row#7 = phi( main::@2/main::row#8 )
  main::col#7 = phi( main::@2/main::col#9 )
  main::cnt#5 = phi( main::@2/main::cnt#7 )
  main::first#2 = phi( main::@2/main::first#3 )
  _rand_state#11 = phi( main::@2/_rand_state#6 )
  _rand::return#5 = phi( main::@2/_rand::return#1 )
  main::$15 = _rand::return#5
  _rand_state#1 = _rand_state#11
  main::rnd#1 = main::$15
  main::$16 = main::rnd#1 != main::first#2
  if(main::$16) goto main::@1
  to:main::@6
main::@3: scope:[main]  from main::@1
  main::cnt#13 = phi( main::@1/main::cnt#1 )
  main::first#9 = phi( main::@1/main::first#4 )
  _rand_state#33 = phi( main::@1/_rand_state#22 )
  main::rnd#3 = phi( main::@1/main::rnd#4 )
  main::row#3 = phi( main::@1/main::row#5 )
  main::col#3 = phi( main::@1/main::col#5 )
  gotoxy::x#3 = main::col#3
  gotoxy::y#3 = main::row#3
  call gotoxy 
  to:main::@13
main::@13: scope:[main]  from main::@3
  main::cnt#12 = phi( main::@3/main::cnt#13 )
  main::first#8 = phi( main::@3/main::first#9 )
  _rand_state#30 = phi( main::@3/_rand_state#33 )
  main::col#8 = phi( main::@3/main::col#3 )
  main::row#6 = phi( main::@3/main::row#3 )
  main::rnd#2 = phi( main::@3/main::rnd#3 )
  printf_uint::uvalue#0 = main::rnd#2
  printf_uint::format_min_length#0 = 5
  printf_uint::format_justify_left#0 = 0
  printf_uint::format_sign_always#0 = 0
  printf_uint::format_zero_padding#0 = 0
  printf_uint::format_upper_case#0 = 0
  printf_uint::format_radix#0 = DECIMAL
  call printf_uint 
  to:main::@14
main::@14: scope:[main]  from main::@13
  main::cnt#9 = phi( main::@13/main::cnt#12 )
  main::first#5 = phi( main::@13/main::first#8 )
  _rand_state#23 = phi( main::@13/_rand_state#30 )
  main::col#6 = phi( main::@13/main::col#8 )
  main::row#4 = phi( main::@13/main::row#6 )
  main::row#1 = ++ main::row#4
  main::$11 = main::row#1 == $19
  main::$12 = ! main::$11
  if(main::$12) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@14
  main::cnt#10 = phi( main::@14/main::cnt#9 )
  main::first#6 = phi( main::@14/main::first#5 )
  _rand_state#24 = phi( main::@14/_rand_state#23 )
  main::col#4 = phi( main::@14/main::col#6 )
  main::row#2 = 1
  main::col#1 = main::col#4 + 6
  main::$13 = main::col#1 > $28-5
  main::$14 = ! main::$13
  if(main::$14) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  main::row#9 = phi( main::@4/main::row#2 )
  main::cnt#11 = phi( main::@4/main::cnt#10 )
  main::first#7 = phi( main::@4/main::first#6 )
  _rand_state#25 = phi( main::@4/_rand_state#24 )
  main::col#2 = 3
  to:main::@2
main::@6: scope:[main]  from main::@12
  _rand_state#34 = phi( main::@12/_rand_state#1 )
  main::cnt#8 = phi( main::@12/main::cnt#5 )
  gotoxy::x#4 = $1c
  gotoxy::y#4 = 0
  call gotoxy 
  to:main::@15
main::@15: scope:[main]  from main::@6
  _rand_state#31 = phi( main::@6/_rand_state#34 )
  main::cnt#6 = phi( main::@6/main::cnt#8 )
  cputs::s#3 = main::s1
  call cputs 
  to:main::@16
main::@16: scope:[main]  from main::@15
  _rand_state#26 = phi( main::@15/_rand_state#31 )
  main::cnt#3 = phi( main::@15/main::cnt#6 )
  printf_ulong::uvalue#0 = main::cnt#3
  printf_ulong::format_min_length#0 = 0
  printf_ulong::format_justify_left#0 = 0
  printf_ulong::format_sign_always#0 = 0
  printf_ulong::format_zero_padding#0 = 0
  printf_ulong::format_upper_case#0 = 0
  printf_ulong::format_radix#0 = DECIMAL
  call printf_ulong 
  to:main::@17
main::@17: scope:[main]  from main::@16
  _rand_state#19 = phi( main::@16/_rand_state#26 )
  to:main::@return
main::@return: scope:[main]  from main::@17
  _rand_state#12 = phi( main::@17/_rand_state#19 )
  _rand_state#2 = _rand_state#12
  return 
  to:@return

word _rand()
_rand: scope:[_rand]  from main::@2 main::@9
  _rand_state#13 = phi( main::@2/_rand_state#18, main::@9/_rand_state#17 )
  _rand::$0 = _rand_state#13 << 7
  _rand_state#3 = _rand_state#13 ^ _rand::$0
  _rand::$1 = _rand_state#3 >> 9
  _rand_state#4 = _rand_state#3 ^ _rand::$1
  _rand::$2 = _rand_state#4 << 8
  _rand_state#5 = _rand_state#4 ^ _rand::$2
  _rand::return#2 = _rand_state#5
  to:_rand::@return
_rand::@return: scope:[_rand]  from _rand
  _rand_state#14 = phi( _rand/_rand_state#5 )
  _rand::return#6 = phi( _rand/_rand::return#2 )
  _rand::return#3 = _rand::return#6
  _rand_state#6 = _rand_state#14
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  conio_cursor_x = 0
  conio_cursor_y = 0
  conio_line_text = CONIO_SCREEN_TEXT
  conio_line_color = CONIO_SCREEN_COLORS
  conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
  conio_scroll_enable = 1
  _rand_state#7 = 1
  call conio_c64_init 
  to:__start::@2
__start::@2: scope:[__start]  from __start::__init1
  _rand_state#27 = phi( __start::__init1/_rand_state#7 )
  to:__start::@1
__start::@1: scope:[__start]  from __start::@2
  _rand_state#20 = phi( __start::@2/_rand_state#27 )
  call main 
  to:__start::@3
__start::@3: scope:[__start]  from __start::@1
  _rand_state#15 = phi( __start::@1/_rand_state#2 )
  _rand_state#8 = _rand_state#15
  to:__start::@return
__start::@return: scope:[__start]  from __start::@3
  _rand_state#16 = phi( __start::@3/_rand_state#8 )
  _rand_state#9 = _rand_state#16
  return 
  to:@return

SYMBOL TABLE SSA
constant byte BINARY = 2
constant byte* const COLORRAM = (byte*)$d800
constant byte* const CONIO_SCREEN_COLORS = COLORRAM
constant byte* const CONIO_SCREEN_TEXT = DEFAULT_SCREEN
constant const byte CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
constant byte DECIMAL = $a
constant byte* const DEFAULT_SCREEN = (byte*)$400
constant byte* DIGITS[]  = "0123456789abcdef"z
constant byte HEXADECIMAL = $10
constant const byte LIGHT_BLUE = $e
constant byte OCTAL = 8
constant byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
constant byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN = 0
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_BINARY_VALUES[]  = { $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
constant dword* RADIX_BINARY_VALUES_LONG[]  = { $80000000, $40000000, $20000000, $10000000, $8000000, $4000000, $2000000, $1000000, $800000, $400000, $200000, $100000, $80000, $40000, $20000, $10000, $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant dword* RADIX_DECIMAL_VALUES_LONG[]  = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
constant word* RADIX_HEXADECIMAL_VALUES[]  = { $1000, $100, $10 }
constant dword* RADIX_HEXADECIMAL_VALUES_LONG[]  = { $10000000, $1000000, $100000, $10000, $1000, $100, $10 }
constant word* RADIX_OCTAL_VALUES[]  = { $8000, $1000, $200, $40, 8 }
constant dword* RADIX_OCTAL_VALUES_LONG[]  = { $40000000, $8000000, $1000000, $200000, $40000, $8000, $1000, $200, $40, 8 }
constant byte SIZEOF_DWORD = 4
constant byte SIZEOF_WORD = 2
constant const byte WHITE = 1
void __start()
word _rand()
word~ _rand::$0
word~ _rand::$1
word~ _rand::$2
word _rand::return
word _rand::return#0
word _rand::return#1
word _rand::return#2
word _rand::return#3
word _rand::return#4
word _rand::return#5
word _rand::return#6
word _rand_state
word _rand_state#0
word _rand_state#1
word _rand_state#10
word _rand_state#11
word _rand_state#12
word _rand_state#13
word _rand_state#14
word _rand_state#15
word _rand_state#16
word _rand_state#17
word _rand_state#18
word _rand_state#19
word _rand_state#2
word _rand_state#20
word _rand_state#21
word _rand_state#22
word _rand_state#23
word _rand_state#24
word _rand_state#25
word _rand_state#26
word _rand_state#27
word _rand_state#28
word _rand_state#29
word _rand_state#3
word _rand_state#30
word _rand_state#31
word _rand_state#32
word _rand_state#33
word _rand_state#34
word _rand_state#4
word _rand_state#5
word _rand_state#6
word _rand_state#7
word _rand_state#8
word _rand_state#9
void clrscr()
bool~ clrscr::$0
bool~ clrscr::$1
byte clrscr::c
byte clrscr::c#0
byte clrscr::c#1
byte clrscr::c#2
byte clrscr::c#3
byte clrscr::l
byte clrscr::l#0
byte clrscr::l#1
byte clrscr::l#2
byte clrscr::l#3
byte clrscr::l#4
byte clrscr::l#5
byte clrscr::l#6
byte* clrscr::line_cols
byte* clrscr::line_cols#0
byte* clrscr::line_cols#1
byte* clrscr::line_cols#2
byte* clrscr::line_cols#3
byte* clrscr::line_cols#4
byte* clrscr::line_cols#5
byte* clrscr::line_cols#6
byte* clrscr::line_text
byte* clrscr::line_text#0
byte* clrscr::line_text#1
byte* clrscr::line_text#2
byte* clrscr::line_text#3
byte* clrscr::line_text#4
byte* clrscr::line_text#5
byte* clrscr::line_text#6
void conio_c64_init()
bool~ conio_c64_init::$0
bool~ conio_c64_init::$1
constant byte* const conio_c64_init::BASIC_CURSOR_LINE = (byte*)$d6
byte conio_c64_init::line
byte conio_c64_init::line#0
byte conio_c64_init::line#1
byte conio_c64_init::line#2
byte conio_cursor_x loadstore
byte conio_cursor_y loadstore
byte* conio_line_color loadstore
byte* conio_line_text loadstore
byte conio_scroll_enable loadstore
byte conio_textcolor loadstore
void cputc(byte cputc::c)
bool~ cputc::$0
bool~ cputc::$1
bool~ cputc::$2
byte cputc::c
byte cputc::c#0
byte cputc::c#1
byte cputc::c#2
byte cputc::c#3
byte cputc::c#4
void cputln()
void cputs(const byte* cputs::s)
byte~ cputs::$0
bool~ cputs::$2
byte cputs::c
byte cputs::c#0
byte cputs::c#1
byte cputs::c#2
const byte* cputs::s
const byte* cputs::s#0
const byte* cputs::s#1
const byte* cputs::s#2
const byte* cputs::s#3
const byte* cputs::s#4
const byte* cputs::s#5
const byte* cputs::s#6
const byte* cputs::s#7
void cscroll()
bool~ cscroll::$0
bool~ cscroll::$1
bool~ cscroll::$7
void gotoxy(byte gotoxy::x , byte gotoxy::y)
bool~ gotoxy::$0
bool~ gotoxy::$1
bool~ gotoxy::$2
bool~ gotoxy::$3
number~ gotoxy::$4
byte*~ gotoxy::$5
byte*~ gotoxy::$6
word~ gotoxy::$7
word gotoxy::line_offset
word gotoxy::line_offset#0
byte gotoxy::x
byte gotoxy::x#0
byte gotoxy::x#1
byte gotoxy::x#2
byte gotoxy::x#3
byte gotoxy::x#4
byte gotoxy::x#5
byte gotoxy::x#6
byte gotoxy::x#7
byte gotoxy::x#8
byte gotoxy::y
byte gotoxy::y#0
byte gotoxy::y#1
byte gotoxy::y#2
byte gotoxy::y#3
byte gotoxy::y#4
byte gotoxy::y#5
byte gotoxy::y#6
byte gotoxy::y#7
byte gotoxy::y#8
void main()
bool~ main::$11
bool~ main::$12
bool~ main::$13
bool~ main::$14
word~ main::$15
bool~ main::$16
byte~ main::$17
word~ main::$3
bool~ main::$7
bool~ main::$8
dword main::cnt
dword main::cnt#0
dword main::cnt#1
dword main::cnt#10
dword main::cnt#11
dword main::cnt#12
dword main::cnt#13
dword main::cnt#2
dword main::cnt#3
dword main::cnt#4
dword main::cnt#5
dword main::cnt#6
dword main::cnt#7
dword main::cnt#8
dword main::cnt#9
byte main::col
byte main::col#0
byte main::col#1
byte main::col#2
byte main::col#3
byte main::col#4
byte main::col#5
byte main::col#6
byte main::col#7
byte main::col#8
byte main::col#9
word main::first
word main::first#0
word main::first#1
word main::first#2
word main::first#3
word main::first#4
word main::first#5
word main::first#6
word main::first#7
word main::first#8
word main::first#9
word main::rnd
word main::rnd#0
word main::rnd#1
word main::rnd#2
word main::rnd#3
word main::rnd#4
byte main::row
byte main::row#0
byte main::row#1
byte main::row#2
byte main::row#3
byte main::row#4
byte main::row#5
byte main::row#6
byte main::row#7
byte main::row#8
byte main::row#9
constant byte* main::s[$1d]  = "generating unique randoms..."
constant byte* main::s1[7]  = "found "
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
byte*~ memcpy::$0
bool~ memcpy::$1
byte*~ memcpy::$2
void* memcpy::destination
void* memcpy::destination#0
void* memcpy::destination#1
void* memcpy::destination#2
void* memcpy::destination#3
void* memcpy::destination#4
void* memcpy::destination#5
byte* memcpy::dst
byte* memcpy::dst#0
byte* memcpy::dst#1
byte* memcpy::dst#2
byte* memcpy::dst#3
word memcpy::num
word memcpy::num#0
word memcpy::num#1
word memcpy::num#2
void* memcpy::return
void* memcpy::return#0
void* memcpy::return#1
void* memcpy::return#2
void* memcpy::return#3
void* memcpy::return#4
void* memcpy::source
void* memcpy::source#0
void* memcpy::source#1
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#0
byte* memcpy::src#1
byte* memcpy::src#2
byte* memcpy::src#3
byte* memcpy::src_end
byte* memcpy::src_end#0
byte* memcpy::src_end#1
byte* memcpy::src_end#2
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte memset::c#5
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
word memset::num#3
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::return#4
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void* memset::str#6
struct printf_buffer_number printf_buffer loadstore = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
bool~ printf_number_buffer::$0
bool~ printf_number_buffer::$1
bool~ printf_number_buffer::$10
bool~ printf_number_buffer::$12
bool~ printf_number_buffer::$14
bool~ printf_number_buffer::$15
bool~ printf_number_buffer::$16
bool~ printf_number_buffer::$17
word~ printf_number_buffer::$19
bool~ printf_number_buffer::$2
bool~ printf_number_buffer::$20
signed byte~ printf_number_buffer::$21
bool~ printf_number_buffer::$22
bool~ printf_number_buffer::$23
signed byte~ printf_number_buffer::$25
bool~ printf_number_buffer::$26
bool~ printf_number_buffer::$27
bool~ printf_number_buffer::$28
bool~ printf_number_buffer::$29
bool~ printf_number_buffer::$3
bool~ printf_number_buffer::$30
bool~ printf_number_buffer::$31
bool~ printf_number_buffer::$32
bool~ printf_number_buffer::$4
bool~ printf_number_buffer::$5
bool~ printf_number_buffer::$7
bool~ printf_number_buffer::$9
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte* printf_number_buffer::buffer_digits#0
byte* printf_number_buffer::buffer_digits#1
byte* printf_number_buffer::buffer_digits#10
byte* printf_number_buffer::buffer_digits#11
byte* printf_number_buffer::buffer_digits#12
byte* printf_number_buffer::buffer_digits#13
byte* printf_number_buffer::buffer_digits#14
byte* printf_number_buffer::buffer_digits#15
byte* printf_number_buffer::buffer_digits#16
byte* printf_number_buffer::buffer_digits#17
byte* printf_number_buffer::buffer_digits#18
byte* printf_number_buffer::buffer_digits#19
byte* printf_number_buffer::buffer_digits#2
byte* printf_number_buffer::buffer_digits#20
byte* printf_number_buffer::buffer_digits#3
byte* printf_number_buffer::buffer_digits#4
byte* printf_number_buffer::buffer_digits#5
byte* printf_number_buffer::buffer_digits#6
byte* printf_number_buffer::buffer_digits#7
byte* printf_number_buffer::buffer_digits#8
byte* printf_number_buffer::buffer_digits#9
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0
byte printf_number_buffer::buffer_sign#1
byte printf_number_buffer::buffer_sign#10
byte printf_number_buffer::buffer_sign#11
byte printf_number_buffer::buffer_sign#12
byte printf_number_buffer::buffer_sign#2
byte printf_number_buffer::buffer_sign#3
byte printf_number_buffer::buffer_sign#4
byte printf_number_buffer::buffer_sign#5
byte printf_number_buffer::buffer_sign#6
byte printf_number_buffer::buffer_sign#7
byte printf_number_buffer::buffer_sign#8
byte printf_number_buffer::buffer_sign#9
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_justify_left#0
byte printf_number_buffer::format_justify_left#1
byte printf_number_buffer::format_justify_left#10
byte printf_number_buffer::format_justify_left#11
byte printf_number_buffer::format_justify_left#12
byte printf_number_buffer::format_justify_left#13
byte printf_number_buffer::format_justify_left#14
byte printf_number_buffer::format_justify_left#15
byte printf_number_buffer::format_justify_left#16
byte printf_number_buffer::format_justify_left#17
byte printf_number_buffer::format_justify_left#18
byte printf_number_buffer::format_justify_left#19
byte printf_number_buffer::format_justify_left#2
byte printf_number_buffer::format_justify_left#20
byte printf_number_buffer::format_justify_left#21
byte printf_number_buffer::format_justify_left#3
byte printf_number_buffer::format_justify_left#4
byte printf_number_buffer::format_justify_left#5
byte printf_number_buffer::format_justify_left#6
byte printf_number_buffer::format_justify_left#7
byte printf_number_buffer::format_justify_left#8
byte printf_number_buffer::format_justify_left#9
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_min_length#0
byte printf_number_buffer::format_min_length#1
byte printf_number_buffer::format_min_length#2
byte printf_number_buffer::format_min_length#3
byte printf_number_buffer::format_min_length#4
byte printf_number_buffer::format_min_length#5
byte printf_number_buffer::format_min_length#6
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_radix#0
byte printf_number_buffer::format_radix#1
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_sign_always#0
byte printf_number_buffer::format_sign_always#1
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_upper_case#0
byte printf_number_buffer::format_upper_case#1
byte printf_number_buffer::format_upper_case#10
byte printf_number_buffer::format_upper_case#11
byte printf_number_buffer::format_upper_case#12
byte printf_number_buffer::format_upper_case#13
byte printf_number_buffer::format_upper_case#14
byte printf_number_buffer::format_upper_case#15
byte printf_number_buffer::format_upper_case#16
byte printf_number_buffer::format_upper_case#17
byte printf_number_buffer::format_upper_case#2
byte printf_number_buffer::format_upper_case#3
byte printf_number_buffer::format_upper_case#4
byte printf_number_buffer::format_upper_case#5
byte printf_number_buffer::format_upper_case#6
byte printf_number_buffer::format_upper_case#7
byte printf_number_buffer::format_upper_case#8
byte printf_number_buffer::format_upper_case#9
byte printf_number_buffer::format_zero_padding
byte printf_number_buffer::format_zero_padding#0
byte printf_number_buffer::format_zero_padding#1
byte printf_number_buffer::format_zero_padding#10
byte printf_number_buffer::format_zero_padding#11
byte printf_number_buffer::format_zero_padding#12
byte printf_number_buffer::format_zero_padding#13
byte printf_number_buffer::format_zero_padding#14
byte printf_number_buffer::format_zero_padding#15
byte printf_number_buffer::format_zero_padding#16
byte printf_number_buffer::format_zero_padding#17
byte printf_number_buffer::format_zero_padding#18
byte printf_number_buffer::format_zero_padding#19
byte printf_number_buffer::format_zero_padding#2
byte printf_number_buffer::format_zero_padding#20
byte printf_number_buffer::format_zero_padding#21
byte printf_number_buffer::format_zero_padding#3
byte printf_number_buffer::format_zero_padding#4
byte printf_number_buffer::format_zero_padding#5
byte printf_number_buffer::format_zero_padding#6
byte printf_number_buffer::format_zero_padding#7
byte printf_number_buffer::format_zero_padding#8
byte printf_number_buffer::format_zero_padding#9
signed byte printf_number_buffer::len
signed byte printf_number_buffer::len#0
signed byte printf_number_buffer::len#1
signed byte printf_number_buffer::len#2
signed byte printf_number_buffer::len#3
signed byte printf_number_buffer::padding
signed byte printf_number_buffer::padding#0
signed byte printf_number_buffer::padding#1
signed byte printf_number_buffer::padding#10
signed byte printf_number_buffer::padding#11
signed byte printf_number_buffer::padding#12
signed byte printf_number_buffer::padding#13
signed byte printf_number_buffer::padding#14
signed byte printf_number_buffer::padding#15
signed byte printf_number_buffer::padding#16
signed byte printf_number_buffer::padding#17
signed byte printf_number_buffer::padding#2
signed byte printf_number_buffer::padding#3
signed byte printf_number_buffer::padding#4
signed byte printf_number_buffer::padding#5
signed byte printf_number_buffer::padding#6
signed byte printf_number_buffer::padding#7
signed byte printf_number_buffer::padding#8
signed byte printf_number_buffer::padding#9
void printf_padding(byte printf_padding::pad , byte printf_padding::length)
bool~ printf_padding::$0
byte printf_padding::i
byte printf_padding::i#0
byte printf_padding::i#1
byte printf_padding::i#2
byte printf_padding::i#3
byte printf_padding::i#4
byte printf_padding::length
byte printf_padding::length#0
byte printf_padding::length#1
byte printf_padding::length#2
byte printf_padding::length#3
byte printf_padding::length#4
byte printf_padding::length#5
byte printf_padding::length#6
byte printf_padding::pad
byte printf_padding::pad#0
byte printf_padding::pad#1
byte printf_padding::pad#2
byte printf_padding::pad#3
byte printf_padding::pad#4
byte printf_padding::pad#5
byte printf_padding::pad#6
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
number~ printf_uint::$0
byte~ printf_uint::$1
number~ printf_uint::$2
bool~ printf_uint::$5
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_justify_left#0
byte printf_uint::format_justify_left#1
byte printf_uint::format_justify_left#2
byte printf_uint::format_justify_left#3
byte printf_uint::format_justify_left#4
byte printf_uint::format_justify_left#5
byte printf_uint::format_min_length
byte printf_uint::format_min_length#0
byte printf_uint::format_min_length#1
byte printf_uint::format_min_length#2
byte printf_uint::format_min_length#3
byte printf_uint::format_min_length#4
byte printf_uint::format_min_length#5
byte printf_uint::format_radix
byte printf_uint::format_radix#0
byte printf_uint::format_radix#1
byte printf_uint::format_radix#2
byte printf_uint::format_radix#3
byte printf_uint::format_radix#4
byte printf_uint::format_radix#5
byte printf_uint::format_sign_always
byte printf_uint::format_sign_always#0
byte printf_uint::format_sign_always#1
byte printf_uint::format_sign_always#2
byte printf_uint::format_sign_always#3
byte printf_uint::format_sign_always#4
byte printf_uint::format_sign_always#5
byte printf_uint::format_upper_case
byte printf_uint::format_upper_case#0
byte printf_uint::format_upper_case#1
byte printf_uint::format_upper_case#2
byte printf_uint::format_upper_case#3
byte printf_uint::format_upper_case#4
byte printf_uint::format_upper_case#5
byte printf_uint::format_zero_padding
byte printf_uint::format_zero_padding#0
byte printf_uint::format_zero_padding#1
byte printf_uint::format_zero_padding#2
byte printf_uint::format_zero_padding#3
byte printf_uint::format_zero_padding#4
byte printf_uint::format_zero_padding#5
word printf_uint::uvalue
word printf_uint::uvalue#0
word printf_uint::uvalue#1
word printf_uint::uvalue#2
word printf_uint::uvalue#3
word printf_uint::uvalue#4
void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
number~ printf_ulong::$0
byte~ printf_ulong::$1
number~ printf_ulong::$2
bool~ printf_ulong::$5
struct printf_format_number printf_ulong::format
byte printf_ulong::format_justify_left
byte printf_ulong::format_justify_left#0
byte printf_ulong::format_justify_left#1
byte printf_ulong::format_justify_left#2
byte printf_ulong::format_justify_left#3
byte printf_ulong::format_justify_left#4
byte printf_ulong::format_justify_left#5
byte printf_ulong::format_min_length
byte printf_ulong::format_min_length#0
byte printf_ulong::format_min_length#1
byte printf_ulong::format_min_length#2
byte printf_ulong::format_min_length#3
byte printf_ulong::format_min_length#4
byte printf_ulong::format_min_length#5
byte printf_ulong::format_radix
byte printf_ulong::format_radix#0
byte printf_ulong::format_radix#1
byte printf_ulong::format_radix#2
byte printf_ulong::format_radix#3
byte printf_ulong::format_radix#4
byte printf_ulong::format_radix#5
byte printf_ulong::format_sign_always
byte printf_ulong::format_sign_always#0
byte printf_ulong::format_sign_always#1
byte printf_ulong::format_sign_always#2
byte printf_ulong::format_sign_always#3
byte printf_ulong::format_sign_always#4
byte printf_ulong::format_sign_always#5
byte printf_ulong::format_upper_case
byte printf_ulong::format_upper_case#0
byte printf_ulong::format_upper_case#1
byte printf_ulong::format_upper_case#2
byte printf_ulong::format_upper_case#3
byte printf_ulong::format_upper_case#4
byte printf_ulong::format_upper_case#5
byte printf_ulong::format_zero_padding
byte printf_ulong::format_zero_padding#0
byte printf_ulong::format_zero_padding#1
byte printf_ulong::format_zero_padding#2
byte printf_ulong::format_zero_padding#3
byte printf_ulong::format_zero_padding#4
byte printf_ulong::format_zero_padding#5
dword printf_ulong::uvalue
dword printf_ulong::uvalue#0
dword printf_ulong::uvalue#1
dword printf_ulong::uvalue#2
dword printf_ulong::uvalue#3
dword printf_ulong::uvalue#4
word strlen(byte* strlen::str)
bool~ strlen::$0
word strlen::len
word strlen::len#0
word strlen::len#1
word strlen::len#2
word strlen::len#3
word strlen::len#4
word strlen::return
word strlen::return#0
word strlen::return#1
word strlen::return#2
word strlen::return#3
word strlen::return#4
byte* strlen::str
byte* strlen::str#0
byte* strlen::str#1
byte* strlen::str#2
byte* strlen::str#3
byte* strlen::str#4
byte* strupr(byte* strupr::str)
byte~ strupr::$0
bool~ strupr::$1
byte* strupr::return
byte* strupr::return#0
byte* strupr::return#1
byte* strupr::return#2
byte* strupr::return#3
byte* strupr::src
byte* strupr::src#0
byte* strupr::src#1
byte* strupr::src#2
byte* strupr::src#3
byte* strupr::src#4
byte* strupr::str
byte* strupr::str#0
byte* strupr::str#1
byte* strupr::str#2
byte* strupr::str#3
byte* strupr::str#4
byte* strupr::str#5
byte textcolor(byte textcolor::color)
byte textcolor::color
byte textcolor::color#0
byte textcolor::color#1
byte textcolor::color#2
byte textcolor::old
byte textcolor::old#0
byte textcolor::return
byte textcolor::return#0
byte textcolor::return#1
byte textcolor::return#2
byte textcolor::return#3
byte textcolor::return#4
byte toupper(byte toupper::ch)
bool~ toupper::$0
bool~ toupper::$1
bool~ toupper::$2
byte~ toupper::$3
byte toupper::ch
byte toupper::ch#0
byte toupper::ch#1
byte toupper::ch#2
byte toupper::ch#3
byte toupper::return
byte toupper::return#0
byte toupper::return#1
byte toupper::return#2
byte toupper::return#3
byte toupper::return#4
byte toupper::return#5
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
bool~ ultoa::$0
bool~ ultoa::$1
byte~ ultoa::$10
byte~ ultoa::$11
bool~ ultoa::$2
bool~ ultoa::$3
number~ ultoa::$4
bool~ ultoa::$5
bool~ ultoa::$6
bool~ ultoa::$7
bool~ ultoa::$8
dword~ ultoa::$9
byte* ultoa::buffer
byte* ultoa::buffer#0
byte* ultoa::buffer#1
byte* ultoa::buffer#10
byte* ultoa::buffer#11
byte* ultoa::buffer#12
byte* ultoa::buffer#13
byte* ultoa::buffer#14
byte* ultoa::buffer#15
byte* ultoa::buffer#16
byte* ultoa::buffer#17
byte* ultoa::buffer#18
byte* ultoa::buffer#19
byte* ultoa::buffer#2
byte* ultoa::buffer#20
byte* ultoa::buffer#21
byte* ultoa::buffer#3
byte* ultoa::buffer#4
byte* ultoa::buffer#5
byte* ultoa::buffer#6
byte* ultoa::buffer#7
byte* ultoa::buffer#8
byte* ultoa::buffer#9
byte ultoa::digit
byte ultoa::digit#0
byte ultoa::digit#1
byte ultoa::digit#2
byte ultoa::digit#3
byte ultoa::digit#4
byte ultoa::digit#5
byte ultoa::digit#6
dword ultoa::digit_value
dword ultoa::digit_value#0
dword ultoa::digit_value#1
dword* ultoa::digit_values
dword* ultoa::digit_values#0
dword* ultoa::digit_values#1
dword* ultoa::digit_values#10
dword* ultoa::digit_values#2
dword* ultoa::digit_values#3
dword* ultoa::digit_values#4
dword* ultoa::digit_values#5
dword* ultoa::digit_values#6
dword* ultoa::digit_values#7
dword* ultoa::digit_values#8
dword* ultoa::digit_values#9
byte ultoa::max_digits
byte ultoa::max_digits#0
byte ultoa::max_digits#1
byte ultoa::max_digits#10
byte ultoa::max_digits#2
byte ultoa::max_digits#3
byte ultoa::max_digits#4
byte ultoa::max_digits#5
byte ultoa::max_digits#6
byte ultoa::max_digits#7
byte ultoa::max_digits#8
byte ultoa::max_digits#9
byte ultoa::radix
byte ultoa::radix#0
byte ultoa::radix#1
byte ultoa::radix#2
byte ultoa::radix#3
byte ultoa::radix#4
byte ultoa::started
byte ultoa::started#0
byte ultoa::started#1
byte ultoa::started#2
byte ultoa::started#3
byte ultoa::started#4
dword ultoa::value
dword ultoa::value#0
dword ultoa::value#1
dword ultoa::value#10
dword ultoa::value#11
dword ultoa::value#12
dword ultoa::value#13
dword ultoa::value#14
dword ultoa::value#15
dword ultoa::value#2
dword ultoa::value#3
dword ultoa::value#4
dword ultoa::value#5
dword ultoa::value#6
dword ultoa::value#7
dword ultoa::value#8
dword ultoa::value#9
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
bool~ ultoa_append::$0
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0
byte* ultoa_append::buffer#1
byte* ultoa_append::buffer#2
byte* ultoa_append::buffer#3
byte* ultoa_append::buffer#4
byte ultoa_append::digit
byte ultoa_append::digit#0
byte ultoa_append::digit#1
byte ultoa_append::digit#2
byte ultoa_append::digit#3
byte ultoa_append::digit#4
dword ultoa_append::return
dword ultoa_append::return#0
dword ultoa_append::return#1
dword ultoa_append::return#2
dword ultoa_append::return#3
dword ultoa_append::return#4
dword ultoa_append::sub
dword ultoa_append::sub#0
dword ultoa_append::sub#1
dword ultoa_append::sub#2
dword ultoa_append::sub#3
dword ultoa_append::value
dword ultoa_append::value#0
dword ultoa_append::value#1
dword ultoa_append::value#2
dword ultoa_append::value#3
dword ultoa_append::value#4
dword ultoa_append::value#5
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
bool~ utoa::$0
bool~ utoa::$1
byte~ utoa::$10
byte~ utoa::$11
bool~ utoa::$2
bool~ utoa::$3
number~ utoa::$4
bool~ utoa::$5
bool~ utoa::$6
bool~ utoa::$7
bool~ utoa::$8
word~ utoa::$9
byte* utoa::buffer
byte* utoa::buffer#0
byte* utoa::buffer#1
byte* utoa::buffer#10
byte* utoa::buffer#11
byte* utoa::buffer#12
byte* utoa::buffer#13
byte* utoa::buffer#14
byte* utoa::buffer#15
byte* utoa::buffer#16
byte* utoa::buffer#17
byte* utoa::buffer#18
byte* utoa::buffer#19
byte* utoa::buffer#2
byte* utoa::buffer#20
byte* utoa::buffer#21
byte* utoa::buffer#3
byte* utoa::buffer#4
byte* utoa::buffer#5
byte* utoa::buffer#6
byte* utoa::buffer#7
byte* utoa::buffer#8
byte* utoa::buffer#9
byte utoa::digit
byte utoa::digit#0
byte utoa::digit#1
byte utoa::digit#2
byte utoa::digit#3
byte utoa::digit#4
byte utoa::digit#5
byte utoa::digit#6
word utoa::digit_value
word utoa::digit_value#0
word utoa::digit_value#1
word* utoa::digit_values
word* utoa::digit_values#0
word* utoa::digit_values#1
word* utoa::digit_values#10
word* utoa::digit_values#2
word* utoa::digit_values#3
word* utoa::digit_values#4
word* utoa::digit_values#5
word* utoa::digit_values#6
word* utoa::digit_values#7
word* utoa::digit_values#8
word* utoa::digit_values#9
byte utoa::max_digits
byte utoa::max_digits#0
byte utoa::max_digits#1
byte utoa::max_digits#10
byte utoa::max_digits#2
byte utoa::max_digits#3
byte utoa::max_digits#4
byte utoa::max_digits#5
byte utoa::max_digits#6
byte utoa::max_digits#7
byte utoa::max_digits#8
byte utoa::max_digits#9
byte utoa::radix
byte utoa::radix#0
byte utoa::radix#1
byte utoa::radix#2
byte utoa::radix#3
byte utoa::radix#4
byte utoa::started
byte utoa::started#0
byte utoa::started#1
byte utoa::started#2
byte utoa::started#3
byte utoa::started#4
word utoa::value
word utoa::value#0
word utoa::value#1
word utoa::value#10
word utoa::value#11
word utoa::value#12
word utoa::value#13
word utoa::value#14
word utoa::value#15
word utoa::value#2
word utoa::value#3
word utoa::value#4
word utoa::value#5
word utoa::value#6
word utoa::value#7
word utoa::value#8
word utoa::value#9
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
bool~ utoa_append::$0
byte* utoa_append::buffer
byte* utoa_append::buffer#0
byte* utoa_append::buffer#1
byte* utoa_append::buffer#2
byte* utoa_append::buffer#3
byte* utoa_append::buffer#4
byte utoa_append::digit
byte utoa_append::digit#0
byte utoa_append::digit#1
byte utoa_append::digit#2
byte utoa_append::digit#3
byte utoa_append::digit#4
word utoa_append::return
word utoa_append::return#0
word utoa_append::return#1
word utoa_append::return#2
word utoa_append::return#3
word utoa_append::return#4
word utoa_append::sub
word utoa_append::sub#0
word utoa_append::sub#1
word utoa_append::sub#2
word utoa_append::sub#3
word utoa_append::value
word utoa_append::value#0
word utoa_append::value#1
word utoa_append::value#2
word utoa_append::value#3
word utoa_append::value#4
word utoa_append::value#5

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#2 > 0
Adding number conversion cast (unumber) 0 in strlen::$0 = 0 != *strlen::str#2
Adding number conversion cast (unumber) 0 in strupr::$1 = 0 != *strupr::src#2
Adding number conversion cast (unumber) 5 in utoa::max_digits#1 = 5
Adding number conversion cast (unumber) 4 in utoa::max_digits#2 = 4
Adding number conversion cast (unumber) 6 in utoa::max_digits#3 = 6
Adding number conversion cast (unumber) $10 in utoa::max_digits#4 = $10
Adding number conversion cast (unumber) 0 in *utoa::buffer#2 = 0
Adding number conversion cast (unumber) 1 in utoa::$4 = utoa::max_digits#5 - 1
Adding number conversion cast (unumber) utoa::$4 in utoa::$4 = utoa::max_digits#5 - (unumber)1
Adding number conversion cast (unumber) 0 in *utoa::buffer#3 = 0
Adding number conversion cast (unumber) 1 in utoa::started#1 = 1
Adding number conversion cast (unumber) $a in ultoa::max_digits#1 = $a
Adding number conversion cast (unumber) 8 in ultoa::max_digits#2 = 8
Adding number conversion cast (unumber) $b in ultoa::max_digits#3 = $b
Adding number conversion cast (unumber) $20 in ultoa::max_digits#4 = $20
Adding number conversion cast (unumber) 0 in *ultoa::buffer#2 = 0
Adding number conversion cast (unumber) 1 in ultoa::$4 = ultoa::max_digits#5 - 1
Adding number conversion cast (unumber) ultoa::$4 in ultoa::$4 = ultoa::max_digits#5 - (unumber)1
Adding number conversion cast (unumber) 0 in *ultoa::buffer#3 = 0
Adding number conversion cast (unumber) 1 in ultoa::started#1 = 1
Adding number conversion cast (unumber) $19 in clrscr::$0 = clrscr::l#2 < $19
Adding number conversion cast (unumber) 0 in conio_cursor_x = 0
Adding number conversion cast (unumber) 0 in conio_cursor_y = 0
Adding number conversion cast (unumber) $28 in clrscr::$1 = clrscr::c#2 < $28
Adding number conversion cast (unumber) $28 in clrscr::line_text#1 = clrscr::line_text#3 + $28
Adding number conversion cast (unumber) $28 in clrscr::line_cols#1 = clrscr::line_cols#3 + $28
Adding number conversion cast (unumber) $19 in gotoxy::$0 = gotoxy::y#5 > $19
Adding number conversion cast (unumber) $28 in gotoxy::$2 = gotoxy::x#5 >= $28
Adding number conversion cast (unumber) 0 in gotoxy::y#0 = 0
Adding number conversion cast (unumber) $28 in gotoxy::$4 = gotoxy::$7 * $28
Adding number conversion cast (unumber) gotoxy::$4 in gotoxy::$4 = gotoxy::$7 * (unumber)$28
Adding number conversion cast (unumber) 0 in gotoxy::x#0 = 0
Adding number conversion cast (unumber) $28 in cputc::$1 = conio_cursor_x == $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text + $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color + $28
Adding number conversion cast (unumber) 0 in conio_cursor_x = 0
Adding number conversion cast (unumber) 0 in cputs::$2 = 0 != cputs::$0
Adding number conversion cast (unumber) $19 in cscroll::$0 = conio_cursor_y == $19
Adding number conversion cast (unumber) 0 in cscroll::$7 = 0 != conio_scroll_enable
Adding number conversion cast (unumber) $28 in memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#0 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#1 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#0 = $28
Adding number conversion cast (unumber) $28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#1 = $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text - $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color - $28
Adding number conversion cast (unumber) 0 in gotoxy::x#1 = 0
Adding number conversion cast (unumber) 0 in gotoxy::y#1 = 0
Adding number conversion cast (unumber) $19 in conio_c64_init::$0 = conio_c64_init::line#0 >= $19
Adding number conversion cast (unumber) 0 in gotoxy::x#2 = 0
Adding number conversion cast (unumber) $19-1 in conio_c64_init::line#1 = $19-1
Adding number conversion cast (unumber) 0 in printf_ulong::$5 = 0 != printf_ulong::format_sign_always#1
Adding number conversion cast (unumber) printf_ulong::$2 in printf_ulong::format_upper_case#2 = phi( printf_ulong::@1/printf_ulong::format_upper_case#3, printf_ulong::@2/printf_ulong::format_upper_case#4 )
  printf_ulong::format_zero_padding#2 = phi( printf_ulong::@1/printf_ulong::format_zero_padding#3, printf_ulong::@2/printf_ulong::format_zero_padding#4 )
  printf_ulong::format_sign_always#3 = phi( printf_ulong::@1/printf_ulong::format_sign_always#4, printf_ulong::@2/printf_ulong::format_sign_always#5 )
  printf_ulong::format_justify_left#2 = phi( printf_ulong::@1/printf_ulong::format_justify_left#3, printf_ulong::@2/printf_ulong::format_justify_left#4 )
  printf_ulong::format_min_length#2 = phi( printf_ulong::@1/printf_ulong::format_min_length#3, printf_ulong::@2/printf_ulong::format_min_length#4 )
  printf_ulong::format_radix#1 = phi( printf_ulong::@1/printf_ulong::format_radix#3, printf_ulong::@2/printf_ulong::format_radix#4 )
  printf_ulong::uvalue#1 = phi( printf_ulong::@1/printf_ulong::uvalue#2, printf_ulong::@2/printf_ulong::uvalue#3 )
  printf_ulong::$2 = phi( printf_ulong::@1/printf_ulong::$1, printf_ulong::@2/printf_ulong::$0 )
Adding number conversion cast (unumber) printf_ulong::$0 in printf_ulong::format_upper_case#2 = phi( printf_ulong::@1/printf_ulong::format_upper_case#3, printf_ulong::@2/printf_ulong::format_upper_case#4 )
  printf_ulong::format_zero_padding#2 = phi( printf_ulong::@1/printf_ulong::format_zero_padding#3, printf_ulong::@2/printf_ulong::format_zero_padding#4 )
  printf_ulong::format_sign_always#3 = phi( printf_ulong::@1/printf_ulong::format_sign_always#4, printf_ulong::@2/printf_ulong::format_sign_always#5 )
  printf_ulong::format_justify_left#2 = phi( printf_ulong::@1/printf_ulong::format_justify_left#3, printf_ulong::@2/printf_ulong::format_justify_left#4 )
  printf_ulong::format_min_length#2 = phi( printf_ulong::@1/printf_ulong::format_min_length#3, printf_ulong::@2/printf_ulong::format_min_length#4 )
  printf_ulong::format_radix#1 = phi( printf_ulong::@1/printf_ulong::format_radix#3, printf_ulong::@2/printf_ulong::format_radix#4 )
  printf_ulong::uvalue#1 = phi( printf_ulong::@1/printf_ulong::uvalue#2, printf_ulong::@2/printf_ulong::uvalue#3 )
  printf_ulong::$2 = phi( printf_ulong::@1/printf_ulong::$1, printf_ulong::@2/printf_ulong::$0 )
Adding number conversion cast (unumber) 0 in printf_uint::$5 = 0 != printf_uint::format_sign_always#1
Adding number conversion cast (unumber) printf_uint::$2 in printf_uint::format_upper_case#2 = phi( printf_uint::@1/printf_uint::format_upper_case#3, printf_uint::@2/printf_uint::format_upper_case#4 )
  printf_uint::format_zero_padding#2 = phi( printf_uint::@1/printf_uint::format_zero_padding#3, printf_uint::@2/printf_uint::format_zero_padding#4 )
  printf_uint::format_sign_always#3 = phi( printf_uint::@1/printf_uint::format_sign_always#4, printf_uint::@2/printf_uint::format_sign_always#5 )
  printf_uint::format_justify_left#2 = phi( printf_uint::@1/printf_uint::format_justify_left#3, printf_uint::@2/printf_uint::format_justify_left#4 )
  printf_uint::format_min_length#2 = phi( printf_uint::@1/printf_uint::format_min_length#3, printf_uint::@2/printf_uint::format_min_length#4 )
  printf_uint::format_radix#1 = phi( printf_uint::@1/printf_uint::format_radix#3, printf_uint::@2/printf_uint::format_radix#4 )
  printf_uint::uvalue#1 = phi( printf_uint::@1/printf_uint::uvalue#2, printf_uint::@2/printf_uint::uvalue#3 )
  printf_uint::$2 = phi( printf_uint::@1/printf_uint::$1, printf_uint::@2/printf_uint::$0 )
Adding number conversion cast (unumber) printf_uint::$0 in printf_uint::format_upper_case#2 = phi( printf_uint::@1/printf_uint::format_upper_case#3, printf_uint::@2/printf_uint::format_upper_case#4 )
  printf_uint::format_zero_padding#2 = phi( printf_uint::@1/printf_uint::format_zero_padding#3, printf_uint::@2/printf_uint::format_zero_padding#4 )
  printf_uint::format_sign_always#3 = phi( printf_uint::@1/printf_uint::format_sign_always#4, printf_uint::@2/printf_uint::format_sign_always#5 )
  printf_uint::format_justify_left#2 = phi( printf_uint::@1/printf_uint::format_justify_left#3, printf_uint::@2/printf_uint::format_justify_left#4 )
  printf_uint::format_min_length#2 = phi( printf_uint::@1/printf_uint::format_min_length#3, printf_uint::@2/printf_uint::format_min_length#4 )
  printf_uint::format_radix#1 = phi( printf_uint::@1/printf_uint::format_radix#3, printf_uint::@2/printf_uint::format_radix#4 )
  printf_uint::uvalue#1 = phi( printf_uint::@1/printf_uint::uvalue#2, printf_uint::@2/printf_uint::uvalue#3 )
  printf_uint::$2 = phi( printf_uint::@1/printf_uint::$1, printf_uint::@2/printf_uint::$0 )
Adding number conversion cast (unumber) 0 in printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#2
Adding number conversion cast (unumber) 0 in printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#2
Adding number conversion cast (unumber) 0 in printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#2
Adding number conversion cast (unumber) 0 in printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#2
Adding number conversion cast (snumber) 0 in printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
Adding number conversion cast (snumber) 0 in printf_number_buffer::padding#2 = 0
Adding number conversion cast (unumber) 0 in printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#3
Adding number conversion cast (unumber) 0 in printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#2
Adding number conversion cast (unumber) 0 in printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#4
Adding number conversion cast (unumber) 0 in main::$7 = main::$17 == 0
Adding number conversion cast (unumber) $19 in main::$11 = main::row#1 == $19
Adding number conversion cast (unumber) 1 in main::row#2 = 1
Adding number conversion cast (unumber) 6 in main::col#1 = main::col#4 + 6
Adding number conversion cast (unumber) $28-5 in main::$13 = main::col#1 > $28-5
Adding number conversion cast (unumber) 3 in main::col#2 = 3
Adding number conversion cast (unumber) $1c in gotoxy::x#4 = $1c
Adding number conversion cast (unumber) 0 in gotoxy::y#4 = 0
Adding number conversion cast (unumber) 7 in _rand::$0 = _rand_state#13 << 7
Adding number conversion cast (unumber) 9 in _rand::$1 = _rand_state#3 >> 9
Adding number conversion cast (unumber) 8 in _rand::$2 = _rand_state#4 << 8
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) 0 in printf_ulong::$0 = 0
Adding number conversion cast (unumber) 0 in printf_uint::$0 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memcpy::src#0 = (byte*)memcpy::source#2
Inlining cast memcpy::dst#0 = (byte*)memcpy::destination#2
Inlining cast memset::dst#0 = (byte*)memset::str#3
Inlining cast utoa::max_digits#1 = (unumber)5
Inlining cast utoa::max_digits#2 = (unumber)4
Inlining cast utoa::max_digits#3 = (unumber)6
Inlining cast utoa::max_digits#4 = (unumber)$10
Inlining cast *utoa::buffer#2 = (unumber)0
Inlining cast *utoa::buffer#3 = (unumber)0
Inlining cast utoa::started#1 = (unumber)1
Inlining cast ultoa::max_digits#1 = (unumber)$a
Inlining cast ultoa::max_digits#2 = (unumber)8
Inlining cast ultoa::max_digits#3 = (unumber)$b
Inlining cast ultoa::max_digits#4 = (unumber)$20
Inlining cast *ultoa::buffer#2 = (unumber)0
Inlining cast *ultoa::buffer#3 = (unumber)0
Inlining cast ultoa::started#1 = (unumber)1
Inlining cast conio_cursor_x = (unumber)0
Inlining cast conio_cursor_y = (unumber)0
Inlining cast gotoxy::y#0 = (unumber)0
Inlining cast gotoxy::x#0 = (unumber)0
Inlining cast conio_cursor_x = (unumber)0
Inlining cast memcpy::num#0 = (unumber)$19*$28-$28
Inlining cast memcpy::num#1 = (unumber)$19*$28-$28
Inlining cast memset::num#0 = (unumber)$28
Inlining cast memset::num#1 = (unumber)$28
Inlining cast gotoxy::x#1 = (unumber)0
Inlining cast gotoxy::y#1 = (unumber)0
Inlining cast gotoxy::x#2 = (unumber)0
Inlining cast conio_c64_init::line#1 = (unumber)$19-1
Inlining cast printf_ulong::$0 = (unumber)0
Inlining cast printf_uint::$0 = (unumber)0
Inlining cast printf_number_buffer::padding#2 = (snumber)0
Inlining cast main::row#2 = (unumber)1
Inlining cast main::col#2 = (unumber)3
Inlining cast gotoxy::x#4 = (unumber)$1c
Inlining cast gotoxy::y#4 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 214
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $a
Simplifying constant integer cast 8
Simplifying constant integer cast $b
Simplifying constant integer cast $20
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 1
Simplifying constant integer cast 6
Simplifying constant integer cast 3
Simplifying constant integer cast $1c
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 9
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $1c
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in utoa::$4 = utoa::max_digits#5 - 1
Inferred type updated to byte in ultoa::$4 = ultoa::max_digits#5 - 1
Inferred type updated to word in gotoxy::$4 = gotoxy::$7 * $28
Inferred type updated to byte in printf_ulong::$0 = 0
Inferred type updated to byte for printf_ulong::$2
Inferred type updated to byte in printf_uint::$0 = 0
Inferred type updated to byte for printf_uint::$2
Inversing boolean not [20] memset::$1 = memset::num#2 <= 0 from [19] memset::$0 = memset::num#2 > 0
Inversing boolean not [270] gotoxy::$1 = gotoxy::y#5 <= $19 from [269] gotoxy::$0 = gotoxy::y#5 > $19
Inversing boolean not [274] gotoxy::$3 = gotoxy::x#5 < $28 from [273] gotoxy::$2 = gotoxy::x#5 >= $28
Inversing boolean not [300] cputc::$2 = conio_cursor_x != $28 from [299] cputc::$1 = conio_cursor_x == $28
Inversing boolean not [331] cscroll::$1 = conio_cursor_y != $19 from [330] cscroll::$0 = conio_cursor_y == $19
Inversing boolean not [364] conio_c64_init::$1 = conio_c64_init::line#0 < $19 from [363] conio_c64_init::$0 = conio_c64_init::line#0 >= $19
Inversing boolean not [434] printf_number_buffer::$0 = 0 == printf_number_buffer::format_min_length#2 from [433] printf_number_buffer::$26 = 0 != printf_number_buffer::format_min_length#2
Inversing boolean not [438] printf_number_buffer::$1 = 0 == printf_number_buffer::format_justify_left#2 from [437] printf_number_buffer::$27 = 0 != printf_number_buffer::format_justify_left#2
Inversing boolean not [440] printf_number_buffer::$2 = 0 == printf_number_buffer::format_zero_padding#2 from [439] printf_number_buffer::$28 = 0 != printf_number_buffer::format_zero_padding#2
Inversing boolean not [453] printf_number_buffer::$20 = 0 == printf_number_buffer::buffer_sign#2 from [452] printf_number_buffer::$29 = 0 != printf_number_buffer::buffer_sign#2
Inversing boolean not [460] printf_number_buffer::$23 = printf_number_buffer::padding#1 >= 0 from [459] printf_number_buffer::$22 = printf_number_buffer::padding#1 < 0
Inversing boolean not [468] printf_number_buffer::$7 = 0 == printf_number_buffer::buffer_sign#3 from [467] printf_number_buffer::$30 = 0 != printf_number_buffer::buffer_sign#3
Inversing boolean not [485] printf_number_buffer::$12 = 0 == printf_number_buffer::format_upper_case#2 from [484] printf_number_buffer::$31 = 0 != printf_number_buffer::format_upper_case#2
Inversing boolean not [497] printf_number_buffer::$14 = 0 == printf_number_buffer::format_zero_padding#4 from [496] printf_number_buffer::$32 = 0 != printf_number_buffer::format_zero_padding#4
Inversing boolean not [540] main::$8 = main::$17 != 0 from [539] main::$7 = main::$17 == 0
Inversing boolean not [567] main::$12 = main::row#1 != $19 from [566] main::$11 = main::row#1 == $19
Inversing boolean not [573] main::$14 = main::col#1 <= (byte)$28-5 from [572] main::$13 = main::col#1 > (byte)$28-5
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias strupr::src#0 = strupr::str#1 
Alias strupr::src#2 = strupr::src#3 strupr::src#4 
Alias strupr::str#2 = strupr::str#5 strupr::str#3 strupr::str#4 strupr::return#0 strupr::return#3 strupr::return#1 
Alias toupper::return#3 = toupper::return#5 
Alias utoa::value#10 = utoa::value#8 utoa::value#12 utoa::value#13 utoa::value#9 utoa::value#14 utoa::value#15 utoa::value#11 
Alias utoa::buffer#10 = utoa::buffer#17 utoa::buffer#21 utoa::buffer#16 utoa::buffer#18 utoa::buffer#13 utoa::buffer#19 utoa::buffer#20 utoa::buffer#6 
Alias utoa::radix#1 = utoa::radix#2 utoa::radix#3 utoa::radix#4 
Alias utoa::digit#2 = utoa::digit#3 utoa::digit#6 utoa::digit#5 
Alias utoa::digit_values#10 = utoa::digit_values#5 utoa::digit_values#6 utoa::digit_values#9 
Alias utoa::value#2 = utoa::value#5 utoa::value#3 utoa::value#4 
Alias utoa::started#2 = utoa::started#3 
Alias utoa::buffer#11 = utoa::buffer#12 utoa::buffer#7 utoa::buffer#8 utoa::buffer#9 
Alias utoa::max_digits#10 = utoa::max_digits#8 utoa::max_digits#5 utoa::max_digits#9 
Alias utoa::digit_value#0 = utoa::digit_value#1 
Alias utoa_append::return#0 = utoa_append::return#3 
Alias utoa::value#0 = utoa::$9 
Alias ultoa::value#10 = ultoa::value#8 ultoa::value#12 ultoa::value#13 ultoa::value#9 ultoa::value#14 ultoa::value#15 ultoa::value#11 
Alias ultoa::buffer#10 = ultoa::buffer#17 ultoa::buffer#21 ultoa::buffer#16 ultoa::buffer#18 ultoa::buffer#13 ultoa::buffer#19 ultoa::buffer#20 ultoa::buffer#6 
Alias ultoa::radix#1 = ultoa::radix#2 ultoa::radix#3 ultoa::radix#4 
Alias ultoa::digit#2 = ultoa::digit#3 ultoa::digit#6 ultoa::digit#5 
Alias ultoa::digit_values#10 = ultoa::digit_values#5 ultoa::digit_values#6 ultoa::digit_values#9 
Alias ultoa::value#2 = ultoa::value#5 ultoa::value#3 ultoa::value#4 
Alias ultoa::started#2 = ultoa::started#3 
Alias ultoa::buffer#11 = ultoa::buffer#12 ultoa::buffer#7 ultoa::buffer#8 ultoa::buffer#9 
Alias ultoa::max_digits#10 = ultoa::max_digits#8 ultoa::max_digits#5 ultoa::max_digits#9 
Alias ultoa::digit_value#0 = ultoa::digit_value#1 
Alias ultoa_append::return#0 = ultoa_append::return#3 
Alias ultoa::value#0 = ultoa::$9 
Alias utoa_append::digit#2 = utoa_append::digit#4 utoa_append::digit#3 
Alias utoa_append::value#2 = utoa_append::value#3 utoa_append::value#4 utoa_append::return#1 utoa_append::return#4 utoa_append::return#2 
Alias utoa_append::sub#1 = utoa_append::sub#2 
Alias utoa_append::buffer#1 = utoa_append::buffer#4 utoa_append::buffer#2 
Alias ultoa_append::digit#2 = ultoa_append::digit#4 ultoa_append::digit#3 
Alias ultoa_append::value#2 = ultoa_append::value#3 ultoa_append::value#4 ultoa_append::return#1 ultoa_append::return#4 ultoa_append::return#2 
Alias ultoa_append::sub#1 = ultoa_append::sub#2 
Alias ultoa_append::buffer#1 = ultoa_append::buffer#4 ultoa_append::buffer#2 
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias gotoxy::x#7 = gotoxy::x#8 
Alias gotoxy::line_offset#0 = gotoxy::$4 
Alias gotoxy::y#7 = gotoxy::y#8 
Alias cputc::c#3 = cputc::c#4 
Alias cputs::c#1 = cputs::$0 cputs::c#2 
Alias cputs::s#0 = cputs::s#7 cputs::s#6 
Alias textcolor::return#0 = textcolor::old#0 textcolor::return#4 textcolor::return#1 
Alias printf_padding::pad#3 = printf_padding::pad#4 printf_padding::pad#6 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#3 = printf_padding::length#6 printf_padding::length#5 
Alias printf_ulong::uvalue#2 = printf_ulong::uvalue#4 printf_ulong::uvalue#3 
Alias printf_ulong::format_radix#3 = printf_ulong::format_radix#5 printf_ulong::format_radix#4 
Alias printf_ulong::format_min_length#3 = printf_ulong::format_min_length#5 printf_ulong::format_min_length#4 
Alias printf_ulong::format_justify_left#3 = printf_ulong::format_justify_left#5 printf_ulong::format_justify_left#4 
Alias printf_ulong::format_sign_always#1 = printf_ulong::format_sign_always#4 printf_ulong::format_sign_always#5 
Alias printf_ulong::format_zero_padding#3 = printf_ulong::format_zero_padding#5 printf_ulong::format_zero_padding#4 
Alias printf_ulong::format_upper_case#3 = printf_ulong::format_upper_case#5 printf_ulong::format_upper_case#4 
Alias printf_ulong::format_min_length#1 = printf_ulong::format_min_length#2 
Alias printf_ulong::format_justify_left#1 = printf_ulong::format_justify_left#2 
Alias printf_ulong::format_sign_always#2 = printf_ulong::format_sign_always#3 
Alias printf_ulong::format_zero_padding#1 = printf_ulong::format_zero_padding#2 
Alias printf_ulong::format_upper_case#1 = printf_ulong::format_upper_case#2 
Alias printf_ulong::format_radix#1 = printf_ulong::format_radix#2 
Alias printf_uint::uvalue#2 = printf_uint::uvalue#4 printf_uint::uvalue#3 
Alias printf_uint::format_radix#3 = printf_uint::format_radix#5 printf_uint::format_radix#4 
Alias printf_uint::format_min_length#3 = printf_uint::format_min_length#5 printf_uint::format_min_length#4 
Alias printf_uint::format_justify_left#3 = printf_uint::format_justify_left#5 printf_uint::format_justify_left#4 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#4 printf_uint::format_sign_always#5 
Alias printf_uint::format_zero_padding#3 = printf_uint::format_zero_padding#5 printf_uint::format_zero_padding#4 
Alias printf_uint::format_upper_case#3 = printf_uint::format_upper_case#5 printf_uint::format_upper_case#4 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#2 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#2 
Alias printf_uint::format_sign_always#2 = printf_uint::format_sign_always#3 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#2 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#2 
Alias printf_number_buffer::buffer_digits#19 = printf_number_buffer::buffer_digits#2 printf_number_buffer::buffer_digits#5 printf_number_buffer::buffer_digits#20 
Alias printf_number_buffer::buffer_sign#12 = printf_number_buffer::buffer_sign#5 printf_number_buffer::buffer_sign#8 printf_number_buffer::buffer_sign#2 
Alias printf_number_buffer::format_min_length#2 = printf_number_buffer::format_min_length#6 printf_number_buffer::format_min_length#4 printf_number_buffer::format_min_length#5 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#4 printf_number_buffer::format_justify_left#8 printf_number_buffer::format_justify_left#9 
Alias printf_number_buffer::format_zero_padding#11 = printf_number_buffer::format_zero_padding#17 printf_number_buffer::format_zero_padding#5 printf_number_buffer::format_zero_padding#12 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#17 printf_number_buffer::format_upper_case#15 printf_number_buffer::format_upper_case#16 
Alias strlen::return#2 = strlen::return#4 
Alias printf_number_buffer::padding#1 = printf_number_buffer::$21 
Alias printf_number_buffer::len#0 = printf_number_buffer::len#3 
Alias printf_number_buffer::format_justify_left#5 = printf_number_buffer::format_justify_left#6 
Alias printf_number_buffer::format_zero_padding#6 = printf_number_buffer::format_zero_padding#7 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#9 
Alias printf_number_buffer::format_upper_case#12 = printf_number_buffer::format_upper_case#13 
Alias printf_number_buffer::buffer_digits#16 = printf_number_buffer::buffer_digits#17 
Alias printf_number_buffer::padding#12 = printf_number_buffer::padding#4 printf_number_buffer::padding#3 
Alias printf_number_buffer::buffer_sign#11 = printf_number_buffer::buffer_sign#6 printf_number_buffer::buffer_sign#7 
Alias printf_number_buffer::format_zero_padding#13 = printf_number_buffer::format_zero_padding#18 printf_number_buffer::format_zero_padding#2 
Alias printf_number_buffer::format_upper_case#14 = printf_number_buffer::format_upper_case#8 printf_number_buffer::format_upper_case#9 
Alias printf_number_buffer::buffer_digits#13 = printf_number_buffer::buffer_digits#18 printf_number_buffer::buffer_digits#14 
Alias printf_number_buffer::format_justify_left#19 = printf_number_buffer::format_justify_left#21 printf_number_buffer::format_justify_left#2 
Alias printf_number_buffer::buffer_sign#3 = printf_number_buffer::buffer_sign#4 
Alias printf_number_buffer::format_zero_padding#14 = printf_number_buffer::format_zero_padding#9 printf_number_buffer::format_zero_padding#8 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#13 printf_number_buffer::padding#9 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#6 printf_number_buffer::format_upper_case#5 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#15 printf_number_buffer::buffer_digits#11 
Alias printf_number_buffer::format_justify_left#16 = printf_number_buffer::format_justify_left#20 printf_number_buffer::format_justify_left#17 
Alias printf_number_buffer::padding#16 = printf_number_buffer::padding#6 printf_number_buffer::padding#5 
Alias printf_number_buffer::format_upper_case#3 = printf_number_buffer::format_upper_case#7 printf_number_buffer::format_upper_case#4 
Alias printf_number_buffer::buffer_digits#12 = printf_number_buffer::buffer_digits#9 printf_number_buffer::buffer_digits#8 
Alias printf_number_buffer::format_zero_padding#19 = printf_number_buffer::format_zero_padding#21 printf_number_buffer::format_zero_padding#3 
Alias printf_number_buffer::format_justify_left#13 = printf_number_buffer::format_justify_left#18 printf_number_buffer::format_justify_left#14 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#4 
Alias printf_number_buffer::format_justify_left#3 = printf_number_buffer::format_justify_left#7 
Alias printf_number_buffer::padding#11 = printf_number_buffer::padding#7 printf_number_buffer::padding#8 
Alias printf_number_buffer::buffer_digits#4 = printf_number_buffer::buffer_digits#7 printf_number_buffer::buffer_digits#6 
Alias printf_number_buffer::format_zero_padding#15 = printf_number_buffer::format_zero_padding#20 printf_number_buffer::format_zero_padding#16 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#15 printf_number_buffer::format_justify_left#11 
Alias printf_number_buffer::padding#14 = printf_number_buffer::padding#17 printf_number_buffer::padding#15 
Alias _rand_state#17 = _rand_state#28 _rand_state#32 _rand_state#21 
Alias _rand::return#0 = _rand::return#4 
Alias _rand_state#0 = _rand_state#10 _rand_state#29 
Alias main::first#0 = main::$3 main::first#1 main::rnd#0 
Alias main::cnt#0 = main::cnt#4 
Alias _rand::return#1 = _rand::return#5 
Alias main::first#2 = main::first#3 
Alias main::cnt#3 = main::cnt#5 main::cnt#7 main::cnt#8 main::cnt#6 
Alias main::col#7 = main::col#9 
Alias main::row#7 = main::row#8 
Alias _rand_state#1 = _rand_state#11 _rand_state#34 _rand_state#31 _rand_state#26 _rand_state#19 _rand_state#12 _rand_state#2 
Alias main::rnd#1 = main::$15 
Alias main::col#3 = main::col#5 main::col#8 main::col#6 main::col#4 
Alias main::row#3 = main::row#5 main::row#6 main::row#4 
Alias main::rnd#2 = main::rnd#3 main::rnd#4 
Alias _rand_state#22 = _rand_state#33 _rand_state#30 _rand_state#23 _rand_state#24 _rand_state#25 
Alias main::first#4 = main::first#9 main::first#8 main::first#5 main::first#6 main::first#7 
Alias main::cnt#1 = main::cnt#13 main::cnt#12 main::cnt#9 main::cnt#10 main::cnt#11 
Alias main::row#2 = main::row#9 
Alias _rand::return#2 = _rand::return#6 _rand::return#3 
Alias _rand_state#14 = _rand_state#5 _rand_state#6 
Alias _rand_state#20 = _rand_state#27 _rand_state#7 
Alias _rand_state#15 = _rand_state#8 _rand_state#16 _rand_state#9 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias utoa::value#10 = utoa::value#7 
Alias utoa::buffer#10 = utoa::buffer#15 
Alias utoa::digit#2 = utoa::digit#4 
Alias utoa::max_digits#10 = utoa::max_digits#6 
Alias utoa::digit_values#10 = utoa::digit_values#7 
Alias ultoa::value#10 = ultoa::value#7 
Alias ultoa::buffer#10 = ultoa::buffer#15 
Alias ultoa::digit#2 = ultoa::digit#4 
Alias ultoa::max_digits#10 = ultoa::max_digits#6 
Alias ultoa::digit_values#10 = ultoa::digit_values#7 
Alias gotoxy::x#5 = gotoxy::x#7 
Alias gotoxy::y#6 = gotoxy::y#7 
Alias printf_ulong::uvalue#1 = printf_ulong::uvalue#2 
Alias printf_ulong::format_radix#1 = printf_ulong::format_radix#3 
Alias printf_ulong::format_min_length#1 = printf_ulong::format_min_length#3 
Alias printf_ulong::format_justify_left#1 = printf_ulong::format_justify_left#3 
Alias printf_ulong::format_sign_always#1 = printf_ulong::format_sign_always#2 
Alias printf_ulong::format_zero_padding#1 = printf_ulong::format_zero_padding#3 
Alias printf_ulong::format_upper_case#1 = printf_ulong::format_upper_case#3 
Alias printf_uint::uvalue#1 = printf_uint::uvalue#2 
Alias printf_uint::format_radix#1 = printf_uint::format_radix#3 
Alias printf_uint::format_min_length#1 = printf_uint::format_min_length#3 
Alias printf_uint::format_justify_left#1 = printf_uint::format_justify_left#3 
Alias printf_uint::format_sign_always#1 = printf_uint::format_sign_always#2 
Alias printf_uint::format_zero_padding#1 = printf_uint::format_zero_padding#3 
Alias printf_uint::format_upper_case#1 = printf_uint::format_upper_case#3 
Alias printf_number_buffer::format_min_length#2 = printf_number_buffer::format_min_length#3 
Alias printf_number_buffer::format_justify_left#12 = printf_number_buffer::format_justify_left#5 
Alias printf_number_buffer::format_zero_padding#11 = printf_number_buffer::format_zero_padding#6 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#12 
Alias printf_number_buffer::format_upper_case#11 = printf_number_buffer::format_upper_case#12 
Alias printf_number_buffer::buffer_digits#16 = printf_number_buffer::buffer_digits#19 
Alias printf_number_buffer::buffer_sign#11 = printf_number_buffer::buffer_sign#3 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#14 printf_number_buffer::format_zero_padding#13 printf_number_buffer::format_zero_padding#19 printf_number_buffer::format_zero_padding#15 
Alias printf_number_buffer::padding#10 = printf_number_buffer::padding#12 printf_number_buffer::padding#16 printf_number_buffer::padding#14 printf_number_buffer::padding#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#14 printf_number_buffer::format_upper_case#3 printf_number_buffer::format_upper_case#2 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#13 printf_number_buffer::buffer_digits#12 printf_number_buffer::buffer_digits#4 printf_number_buffer::buffer_digits#3 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#16 printf_number_buffer::format_justify_left#19 printf_number_buffer::format_justify_left#13 printf_number_buffer::format_justify_left#3 
Alias _rand_state#18 = _rand_state#22 
Alias main::first#2 = main::first#4 
Alias main::cnt#1 = main::cnt#3 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias printf_number_buffer::format_justify_left#10 = printf_number_buffer::format_justify_left#12 
Alias printf_number_buffer::format_zero_padding#10 = printf_number_buffer::format_zero_padding#11 
Alias printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#11 
Alias printf_number_buffer::format_upper_case#10 = printf_number_buffer::format_upper_case#11 
Alias printf_number_buffer::buffer_digits#10 = printf_number_buffer::buffer_digits#16 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values memcpy::src_end#1 memcpy::src_end#0
Identical Phi Values memcpy::destination#3 memcpy::destination#2
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#5 memset::str#3
Identical Phi Values memset::c#2 memset::c#4
Identical Phi Values strlen::str#4 strlen::str#1
Identical Phi Values toupper::ch#1 toupper::ch#0
Identical Phi Values strupr::src#0 strupr::str#0
Identical Phi Values strupr::str#2 strupr::src#0
Identical Phi Values utoa::radix#1 utoa::radix#0
Identical Phi Values utoa::value#10 utoa::value#1
Identical Phi Values utoa::buffer#10 utoa::buffer#5
Identical Phi Values utoa::max_digits#10 utoa::max_digits#7
Identical Phi Values utoa::digit_values#10 utoa::digit_values#8
Identical Phi Values ultoa::radix#1 ultoa::radix#0
Identical Phi Values ultoa::value#10 ultoa::value#1
Identical Phi Values ultoa::buffer#10 ultoa::buffer#5
Identical Phi Values ultoa::max_digits#10 ultoa::max_digits#7
Identical Phi Values ultoa::digit_values#10 ultoa::digit_values#8
Identical Phi Values utoa_append::value#5 utoa_append::value#0
Identical Phi Values utoa_append::sub#3 utoa_append::sub#0
Identical Phi Values utoa_append::buffer#3 utoa_append::buffer#0
Identical Phi Values utoa_append::sub#1 utoa_append::sub#3
Identical Phi Values utoa_append::buffer#1 utoa_append::buffer#3
Identical Phi Values ultoa_append::value#5 ultoa_append::value#0
Identical Phi Values ultoa_append::sub#3 ultoa_append::sub#0
Identical Phi Values ultoa_append::buffer#3 ultoa_append::buffer#0
Identical Phi Values ultoa_append::sub#1 ultoa_append::sub#3
Identical Phi Values ultoa_append::buffer#1 ultoa_append::buffer#3
Identical Phi Values clrscr::line_text#2 clrscr::line_text#5
Identical Phi Values clrscr::line_cols#2 clrscr::line_cols#5
Identical Phi Values clrscr::l#3 clrscr::l#2
Identical Phi Values printf_padding::length#3 printf_padding::length#4
Identical Phi Values printf_padding::pad#3 printf_padding::pad#5
Identical Phi Values printf_ulong::format_sign_always#1 printf_ulong::format_sign_always#0
Identical Phi Values printf_ulong::uvalue#1 printf_ulong::uvalue#0
Identical Phi Values printf_ulong::format_radix#1 printf_ulong::format_radix#0
Identical Phi Values printf_ulong::format_min_length#1 printf_ulong::format_min_length#0
Identical Phi Values printf_ulong::format_justify_left#1 printf_ulong::format_justify_left#0
Identical Phi Values printf_ulong::format_zero_padding#1 printf_ulong::format_zero_padding#0
Identical Phi Values printf_ulong::format_upper_case#1 printf_ulong::format_upper_case#0
Identical Phi Values printf_uint::format_sign_always#1 printf_uint::format_sign_always#0
Identical Phi Values printf_uint::uvalue#1 printf_uint::uvalue#0
Identical Phi Values printf_uint::format_radix#1 printf_uint::format_radix#0
Identical Phi Values printf_uint::format_min_length#1 printf_uint::format_min_length#0
Identical Phi Values printf_uint::format_justify_left#1 printf_uint::format_justify_left#0
Identical Phi Values printf_uint::format_zero_padding#1 printf_uint::format_zero_padding#0
Identical Phi Values printf_uint::format_upper_case#1 printf_uint::format_upper_case#0
Identical Phi Values _rand_state#17 _rand_state#20
Identical Phi Values _rand_state#0 _rand_state#14
Identical Phi Values main::first#2 main::first#0
Identical Phi Values _rand_state#1 _rand_state#14
Identical Phi Values _rand_state#15 _rand_state#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#3
Identical Phi Values _rand_state#18 _rand_state#14
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memcpy::$1 [7] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
Simple Condition memset::$1 [14] if(memset::num#2<=0) goto memset::@1
Simple Condition memset::$3 [21] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition strlen::$0 [29] if(0!=*strlen::str#2) goto strlen::@2
Simple Condition strupr::$1 [44] if(0!=*strupr::src#2) goto strupr::@2
Simple Condition utoa::$0 [56] if(utoa::radix#0==DECIMAL) goto utoa::@1
Simple Condition utoa::$1 [60] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
Simple Condition utoa::$2 [64] if(utoa::radix#0==OCTAL) goto utoa::@3
Simple Condition utoa::$3 [68] if(utoa::radix#0==BINARY) goto utoa::@4
Simple Condition utoa::$5 [85] if(utoa::digit#2<utoa::$4) goto utoa::@11
Simple Condition ultoa::$0 [110] if(ultoa::radix#0==DECIMAL) goto ultoa::@1
Simple Condition ultoa::$1 [114] if(ultoa::radix#0==HEXADECIMAL) goto ultoa::@2
Simple Condition ultoa::$2 [118] if(ultoa::radix#0==OCTAL) goto ultoa::@3
Simple Condition ultoa::$3 [122] if(ultoa::radix#0==BINARY) goto ultoa::@4
Simple Condition ultoa::$5 [139] if(ultoa::digit#2<ultoa::$4) goto ultoa::@11
Simple Condition utoa_append::$0 [164] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
Simple Condition ultoa_append::$0 [173] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2
Simple Condition clrscr::$0 [183] if(clrscr::l#2<$19) goto clrscr::@2
Simple Condition clrscr::$1 [191] if(clrscr::c#2<$28) goto clrscr::@5
Simple Condition gotoxy::$1 [201] if(gotoxy::y#5<=$19) goto gotoxy::@1
Simple Condition gotoxy::$3 [204] if(gotoxy::x#5<$28) goto gotoxy::@2
Simple Condition cputc::$0 [219] if(cputc::c#3=='
') goto cputc::@1
Simple Condition cputc::$2 [225] if(conio_cursor_x!=$28) goto cputc::@return
Simple Condition cputs::$2 [240] if(0!=cputs::c#1) goto cputs::@2
Simple Condition cscroll::$1 [249] if(conio_cursor_y!=$19) goto cscroll::@return
Simple Condition cscroll::$7 [251] if(0!=conio_scroll_enable) goto cscroll::@3
Simple Condition conio_c64_init::$1 [281] if(conio_c64_init::line#0<$19) goto conio_c64_init::@1
Simple Condition printf_padding::$0 [292] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
Simple Condition printf_ulong::$5 [299] if(0!=printf_ulong::format_sign_always#0) goto printf_ulong::@1
Simple Condition printf_uint::$5 [320] if(0!=printf_uint::format_sign_always#0) goto printf_uint::@1
Simple Condition printf_number_buffer::$0 [342] if(0==printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
Simple Condition printf_number_buffer::$20 [356] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
Simple Condition printf_number_buffer::$23 [361] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@1
Simple Condition printf_number_buffer::$7 [365] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
Simple Condition printf_number_buffer::$12 [375] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
Simple Condition main::$8 [414] if(main::$17!=0) goto main::@2
Simple Condition main::$16 [421] if(main::rnd#1!=main::first#0) goto main::@1
Simple Condition main::$12 [435] if(main::row#1!=$19) goto main::@2
Simple Condition main::$14 [439] if(main::col#1<=(byte)$28-5) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [36] toupper::$2 = toupper::$0 && toupper::$1
Rewriting ! if()-condition to reversed if() [90] utoa::$8 = ! utoa::$7
Rewriting || if()-condition to two if()s [89] utoa::$7 = utoa::started#2 || utoa::$6
Rewriting ! if()-condition to reversed if() [144] ultoa::$8 = ! ultoa::$7
Rewriting || if()-condition to two if()s [143] ultoa::$7 = ultoa::started#2 || ultoa::$6
Rewriting ! if()-condition to reversed if() [348] printf_number_buffer::$5 = ! printf_number_buffer::$4
Rewriting && if()-condition to two if()s [347] printf_number_buffer::$4 = printf_number_buffer::$3 && printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [346] printf_number_buffer::$3 = printf_number_buffer::$1 && printf_number_buffer::$2
Rewriting ! if()-condition to reversed if() [370] printf_number_buffer::$10 = ! printf_number_buffer::$9
Rewriting && if()-condition to two if()s [369] printf_number_buffer::$9 = printf_number_buffer::format_zero_padding#10 && printf_number_buffer::padding#10
Rewriting ! if()-condition to reversed if() [384] printf_number_buffer::$17 = ! printf_number_buffer::$16
Rewriting && if()-condition to two if()s [383] printf_number_buffer::$16 = printf_number_buffer::$15 && printf_number_buffer::padding#10
Rewriting && if()-condition to two if()s [382] printf_number_buffer::$15 = printf_number_buffer::format_justify_left#10 && printf_number_buffer::$14
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition utoa::started#2
Warning! Adding boolean cast to non-boolean condition ultoa::started#2
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::format_zero_padding#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::format_justify_left#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Warning! Adding boolean cast to non-boolean condition printf_number_buffer::padding#10
Constant right-side identified [254] memcpy::num#0 = (unumber)$19*$28-$28
Constant right-side identified [259] memcpy::num#1 = (unumber)$19*$28-$28
Constant right-side identified [286] conio_c64_init::line#1 = (unumber)$19-1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant strlen::len#0 = 0
Constant utoa::max_digits#0 = 0
Constant utoa::digit_values#0 = (word*) 0
Constant utoa::max_digits#1 = 5
Constant utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant utoa::max_digits#2 = 4
Constant utoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES
Constant utoa::max_digits#3 = 6
Constant utoa::digit_values#3 = RADIX_OCTAL_VALUES
Constant utoa::max_digits#4 = $10
Constant utoa::digit_values#4 = RADIX_BINARY_VALUES
Constant utoa::started#0 = 0
Constant utoa::digit#0 = 0
Constant utoa::started#1 = 1
Constant ultoa::max_digits#0 = 0
Constant ultoa::digit_values#0 = (dword*) 0
Constant ultoa::max_digits#1 = $a
Constant ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
Constant ultoa::max_digits#2 = 8
Constant ultoa::digit_values#2 = RADIX_HEXADECIMAL_VALUES_LONG
Constant ultoa::max_digits#3 = $b
Constant ultoa::digit_values#3 = RADIX_OCTAL_VALUES_LONG
Constant ultoa::max_digits#4 = $20
Constant ultoa::digit_values#4 = RADIX_BINARY_VALUES_LONG
Constant ultoa::started#0 = 0
Constant ultoa::digit#0 = 0
Constant ultoa::started#1 = 1
Constant utoa_append::digit#0 = 0
Constant ultoa_append::digit#0 = 0
Constant clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant clrscr::l#0 = 0
Constant clrscr::c#0 = 0
Constant gotoxy::y#0 = 0
Constant gotoxy::x#0 = 0
Constant cputs::c#0 = 0
Constant memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant memcpy::num#0 = (unumber)$19*$28-$28
Constant memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant memcpy::num#1 = (unumber)$19*$28-$28
Constant memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant memset::c#0 = ' '
Constant memset::num#0 = $28
Constant memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant memset::num#1 = $28
Constant gotoxy::x#1 = 0
Constant gotoxy::y#1 = 0
Constant gotoxy::x#2 = 0
Constant conio_c64_init::line#1 = (unumber)$19-1
Constant printf_padding::i#0 = 0
Constant printf_ulong::$1 = '+'
Constant printf_ulong::$0 = 0
Constant ultoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_uint::$1 = '+'
Constant printf_uint::$0 = 0
Constant utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_number_buffer::buffer_digits#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant printf_number_buffer::padding#0 = 0
Constant printf_number_buffer::padding#2 = 0
Constant printf_padding::pad#0 = ' '
Constant printf_padding::pad#1 = '0'
Constant printf_padding::pad#2 = ' '
Constant textcolor::color#0 = WHITE
Constant cputs::s#2 = main::s
Constant main::cnt#0 = 0
Constant textcolor::color#1 = LIGHT_BLUE
Constant main::col#0 = 3
Constant main::row#0 = 1
Constant printf_uint::format_min_length#0 = 5
Constant printf_uint::format_justify_left#0 = 0
Constant printf_uint::format_sign_always#0 = 0
Constant printf_uint::format_zero_padding#0 = 0
Constant printf_uint::format_upper_case#0 = 0
Constant printf_uint::format_radix#0 = DECIMAL
Constant main::row#2 = 1
Constant main::col#2 = 3
Constant gotoxy::x#4 = $1c
Constant gotoxy::y#4 = 0
Constant cputs::s#3 = main::s1
Constant printf_ulong::format_min_length#0 = 0
Constant printf_ulong::format_justify_left#0 = 0
Constant printf_ulong::format_sign_always#0 = 0
Constant printf_ulong::format_zero_padding#0 = 0
Constant printf_ulong::format_upper_case#0 = 0
Constant printf_ulong::format_radix#0 = DECIMAL
Constant _rand_state#20 = 1
Constant conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant ultoa::radix#0 = printf_ulong::format_radix#0
Constant printf_number_buffer::format_min_length#0 = printf_ulong::format_min_length#0
Constant printf_number_buffer::format_justify_left#0 = printf_ulong::format_justify_left#0
Constant printf_number_buffer::format_sign_always#0 = printf_ulong::format_sign_always#0
Constant printf_number_buffer::format_zero_padding#0 = printf_ulong::format_zero_padding#0
Constant printf_number_buffer::format_upper_case#0 = printf_ulong::format_upper_case#0
Constant printf_number_buffer::format_radix#0 = printf_ulong::format_radix#0
Constant utoa::radix#0 = printf_uint::format_radix#0
Constant printf_number_buffer::format_min_length#1 = printf_uint::format_min_length#0
Constant printf_number_buffer::format_justify_left#1 = printf_uint::format_justify_left#0
Constant printf_number_buffer::format_sign_always#1 = printf_uint::format_sign_always#0
Constant printf_number_buffer::format_zero_padding#1 = printf_uint::format_zero_padding#0
Constant printf_number_buffer::format_upper_case#1 = printf_uint::format_upper_case#0
Constant printf_number_buffer::format_radix#1 = printf_uint::format_radix#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [56] if(utoa::radix#0==DECIMAL) goto utoa::@1
if() condition always false - eliminating [60] if(utoa::radix#0==HEXADECIMAL) goto utoa::@2
if() condition always false - eliminating [64] if(utoa::radix#0==OCTAL) goto utoa::@3
if() condition always false - eliminating [68] if(utoa::radix#0==BINARY) goto utoa::@4
if() condition always true - replacing block destination [110] if(ultoa::radix#0==DECIMAL) goto ultoa::@1
if() condition always false - eliminating [114] if(ultoa::radix#0==HEXADECIMAL) goto ultoa::@2
if() condition always false - eliminating [118] if(ultoa::radix#0==OCTAL) goto ultoa::@3
if() condition always false - eliminating [122] if(ultoa::radix#0==BINARY) goto ultoa::@4
if() condition always true - replacing block destination [251] if(0!=conio_scroll_enable) goto cscroll::@3
if() condition always false - eliminating [299] if(0!=printf_ulong::format_sign_always#0) goto printf_ulong::@1
if() condition always false - eliminating [320] if(0!=printf_uint::format_sign_always#0) goto printf_uint::@1
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [201] if(gotoxy::y#5<=$19) goto gotoxy::@1
Rewriting conditional comparison [439] if(main::col#1<=(byte)$28-5) goto main::@2
Simplifying expression containing zero (byte*)&printf_buffer in [303] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_ulong::$2
Simplifying expression containing zero (byte*)&printf_buffer in [308] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Simplifying expression containing zero (byte*)&printf_buffer in [324] *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) = printf_uint::$2
Simplifying expression containing zero (byte*)&printf_buffer in [329] printf_number_buffer::buffer_sign#1 = *((byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating variable utoa::buffer#0 from unused block utoa::@9
Eliminating variable utoa::buffer#1 from unused block utoa::@9
Eliminating variable utoa::buffer#2 from unused block utoa::@9
Eliminating variable ultoa::buffer#0 from unused block ultoa::@9
Eliminating variable ultoa::buffer#1 from unused block ultoa::@9
Eliminating variable ultoa::buffer#2 from unused block ultoa::@9
Removing unused block utoa::@6
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing PHI-reference to removed block (utoa::@2) in block utoa::@5
Removing unused block utoa::@2
Removing unused block utoa::@7
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing PHI-reference to removed block (utoa::@3) in block utoa::@5
Removing unused block utoa::@3
Removing unused block utoa::@8
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing PHI-reference to removed block (utoa::@4) in block utoa::@5
Removing unused block utoa::@4
Removing unused block utoa::@9
Removing unused block ultoa::@6
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@2) in block ultoa::@5
Removing unused block ultoa::@2
Removing unused block ultoa::@7
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@3) in block ultoa::@5
Removing unused block ultoa::@3
Removing unused block ultoa::@8
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing PHI-reference to removed block (ultoa::@4) in block ultoa::@5
Removing unused block ultoa::@4
Removing unused block ultoa::@9
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Removing PHI-reference to removed block (printf_ulong::@1) in block printf_ulong::@3
Removing unused block printf_ulong::@1
Removing PHI-reference to removed block (printf_uint::@1) in block printf_uint::@3
Removing unused block printf_uint::@1
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable memcpy::return#2 and assignment [157] memcpy::return#2 = memcpy::destination#2
Eliminating unused variable memcpy::return#3 and assignment [159] memcpy::return#3 = memcpy::destination#2
Eliminating unused variable memset::return#2 and assignment [161] memset::return#2 = memset::str#3
Eliminating unused variable memset::return#3 and assignment [164] memset::return#3 = memset::str#3
Eliminating unused variable strupr::return#2 and assignment [230] strupr::return#2 = strupr::str#0
Eliminating unused variable textcolor::return#2 and assignment [236] textcolor::return#2 = textcolor::return#0
Eliminating unused variable textcolor::return#3 and assignment [242] textcolor::return#3 = textcolor::return#0
Eliminating unused constant BINARY
Eliminating unused constant OCTAL
Eliminating unused constant HEXADECIMAL
Eliminating unused constant utoa::max_digits#0
Eliminating unused constant utoa::digit_values#0
Eliminating unused constant utoa::max_digits#2
Eliminating unused constant utoa::digit_values#2
Eliminating unused constant utoa::max_digits#3
Eliminating unused constant utoa::digit_values#3
Eliminating unused constant utoa::max_digits#4
Eliminating unused constant utoa::digit_values#4
Eliminating unused constant utoa::radix#0
Eliminating unused constant ultoa::max_digits#0
Eliminating unused constant ultoa::digit_values#0
Eliminating unused constant ultoa::max_digits#2
Eliminating unused constant ultoa::digit_values#2
Eliminating unused constant ultoa::max_digits#3
Eliminating unused constant ultoa::digit_values#3
Eliminating unused constant ultoa::max_digits#4
Eliminating unused constant ultoa::digit_values#4
Eliminating unused constant ultoa::radix#0
Eliminating unused constant gotoxy::x#1
Eliminating unused constant gotoxy::y#1
Eliminating unused constant cputs::c#0
Eliminating unused constant printf_ulong::$1
Eliminating unused constant printf_uint::$1
Eliminating unused constant printf_number_buffer::format_sign_always#0
Eliminating unused constant printf_number_buffer::format_radix#0
Eliminating unused constant printf_number_buffer::format_sign_always#1
Eliminating unused constant printf_number_buffer::format_radix#1
Eliminating unused constant OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN
Eliminating unused constant conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable textcolor::return#0 and assignment [152] textcolor::return#0 = conio_textcolor
Eliminating unused constant RADIX_BINARY_VALUES
Eliminating unused constant RADIX_OCTAL_VALUES
Eliminating unused constant RADIX_HEXADECIMAL_VALUES
Eliminating unused constant RADIX_BINARY_VALUES_LONG
Eliminating unused constant RADIX_OCTAL_VALUES_LONG
Eliminating unused constant RADIX_HEXADECIMAL_VALUES_LONG
Eliminating unused constant printf_ulong::format_sign_always#0
Eliminating unused constant printf_ulong::format_radix#0
Eliminating unused constant printf_uint::format_sign_always#0
Eliminating unused constant printf_uint::format_radix#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant DECIMAL
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 0 in utoa::$12 = 0 != utoa::started#2
Adding number conversion cast (unumber) 0 in ultoa::$12 = 0 != ultoa::started#2
Adding number conversion cast (unumber) $19+1 in if(gotoxy::y#5<$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if(gotoxy::y#5<(unumber)$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in printf_number_buffer::$33 = 0 != printf_number_buffer::format_zero_padding#10
Adding number conversion cast (unumber) 0 in printf_number_buffer::$34 = 0 != printf_number_buffer::format_justify_left#10
Adding number conversion cast (unumber) (byte)$28-5+1 in if(main::col#1<(byte)$28-5+1) goto main::@2
Adding number conversion cast (unumber) 1 in if(main::col#1<(unumber)(byte)$28-5+1) goto main::@2
Adding number conversion cast (snumber) 0 in printf_number_buffer::$35 = 0 != printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in printf_number_buffer::$36 = 0 != printf_number_buffer::padding#10
Adding number conversion cast (snumber) 0 in printf_number_buffer::$37 = 0 != printf_number_buffer::padding#10
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $19+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast (byte)$28-5+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values utoa::max_digits#7 utoa::max_digits#1
Identical Phi Values utoa::digit_values#8 utoa::digit_values#1
Identical Phi Values ultoa::max_digits#7 ultoa::max_digits#1
Identical Phi Values ultoa::digit_values#8 ultoa::digit_values#1
Identical Phi Values printf_ulong::$2 printf_ulong::$0
Identical Phi Values printf_uint::$2 printf_uint::$0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition toupper::$0 [28] if(toupper::ch#0>='a') goto toupper::@3
Simple Condition utoa::$12 [50] if(0!=utoa::started#2) goto utoa::@14
Simple Condition ultoa::$12 [73] if(0!=ultoa::started#2) goto ultoa::@14
Simple Condition printf_number_buffer::$1 [196] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@23
Simple Condition printf_number_buffer::$33 [212] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@24
Simple Condition printf_number_buffer::$34 [222] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@26
Simple Condition toupper::$1 [275] if(toupper::ch#0<='z') goto toupper::@1
Simple Condition utoa::$6 [276] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@14
Simple Condition ultoa::$6 [277] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@14
Simple Condition printf_number_buffer::$35 [279] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8
Simple Condition printf_number_buffer::$2 [280] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@22
Simple Condition printf_number_buffer::$36 [282] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10
Simple Condition printf_number_buffer::$37 [284] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12
Simple Condition printf_number_buffer::$14 [285] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@25
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [28] if(toupper::ch#0<'a') goto toupper::@2
Negating conditional jump and destination [196] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
Negating conditional jump and destination [212] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
Negating conditional jump and destination [222] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
Negating conditional jump and destination [280] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
Negating conditional jump and destination [285] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [44] utoa::$4 = utoa::max_digits#1 - 1
Constant right-side identified [67] ultoa::$4 = ultoa::max_digits#1 - 1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant utoa::$4 = utoa::max_digits#1-1
Constant ultoa::$4 = ultoa::max_digits#1-1
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Inlining Noop Cast [1] memcpy::src#0 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [2] memcpy::dst#0 = (byte*)memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [3] memcpy::$2 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [13] memset::$4 = (byte*)memset::str#3 keeping memset::str#3
Inlining Noop Cast [15] memset::dst#0 = (byte*)memset::str#3 keeping memset::str#3
Inlining Noop Cast [190] printf_number_buffer::$25 = (signed byte)printf_number_buffer::format_min_length#2 keeping printf_number_buffer::format_min_length#2
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [42] utoa::$10 = utoa::digit#2 * SIZEOF_WORD
Rewriting multiplication to use shift [61] ultoa::$10 = ultoa::digit#2 * SIZEOF_DWORD
Rewriting multiplication to use shift and addition[112] gotoxy::line_offset#0 = gotoxy::$7 * $28
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings memcpy::destination#0
Inlining constant with var siblings memcpy::source#0
Inlining constant with var siblings memcpy::num#0
Inlining constant with var siblings memcpy::destination#1
Inlining constant with var siblings memcpy::source#1
Inlining constant with var siblings memcpy::num#1
Inlining constant with var siblings memset::str#0
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings strlen::len#0
Inlining constant with var siblings utoa::started#0
Inlining constant with var siblings utoa::digit#0
Inlining constant with var siblings utoa::started#1
Inlining constant with var siblings utoa::buffer#5
Inlining constant with var siblings ultoa::started#0
Inlining constant with var siblings ultoa::digit#0
Inlining constant with var siblings ultoa::started#1
Inlining constant with var siblings ultoa::buffer#5
Inlining constant with var siblings utoa_append::digit#0
Inlining constant with var siblings ultoa_append::digit#0
Inlining constant with var siblings clrscr::line_text#0
Inlining constant with var siblings clrscr::line_cols#0
Inlining constant with var siblings clrscr::l#0
Inlining constant with var siblings clrscr::c#0
Inlining constant with var siblings gotoxy::y#0
Inlining constant with var siblings gotoxy::x#0
Inlining constant with var siblings gotoxy::x#2
Inlining constant with var siblings gotoxy::x#4
Inlining constant with var siblings gotoxy::y#4
Inlining constant with var siblings cputs::s#2
Inlining constant with var siblings cputs::s#3
Inlining constant with var siblings textcolor::color#0
Inlining constant with var siblings textcolor::color#1
Inlining constant with var siblings conio_c64_init::line#1
Inlining constant with var siblings printf_padding::i#0
Inlining constant with var siblings printf_padding::pad#0
Inlining constant with var siblings printf_padding::pad#1
Inlining constant with var siblings printf_padding::pad#2
Inlining constant with var siblings printf_number_buffer::buffer_digits#0
Inlining constant with var siblings printf_number_buffer::buffer_digits#1
Inlining constant with var siblings printf_number_buffer::padding#0
Inlining constant with var siblings printf_number_buffer::padding#2
Inlining constant with var siblings printf_number_buffer::format_min_length#0
Inlining constant with var siblings printf_number_buffer::format_justify_left#0
Inlining constant with var siblings printf_number_buffer::format_zero_padding#0
Inlining constant with var siblings printf_number_buffer::format_upper_case#0
Inlining constant with var siblings printf_number_buffer::format_min_length#1
Inlining constant with var siblings printf_number_buffer::format_justify_left#1
Inlining constant with var siblings printf_number_buffer::format_zero_padding#1
Inlining constant with var siblings printf_number_buffer::format_upper_case#1
Inlining constant with var siblings main::cnt#0
Inlining constant with var siblings main::col#0
Inlining constant with var siblings main::row#0
Inlining constant with var siblings main::row#2
Inlining constant with var siblings main::col#2
Inlining constant with var siblings _rand_state#20
Constant inlined utoa::digit_values#1 = RADIX_DECIMAL_VALUES
Constant inlined cputs::s#3 = main::s1
Constant inlined printf_number_buffer::format_justify_left#0 = printf_ulong::format_justify_left#0
Constant inlined printf_number_buffer::buffer_digits#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::buffer_digits#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined main::col#0 = 3
Constant inlined cputs::s#2 = main::s
Constant inlined printf_number_buffer::format_justify_left#1 = printf_uint::format_justify_left#0
Constant inlined main::col#2 = 3
Constant inlined memset::num#1 = $28
Constant inlined memset::num#0 = $28
Constant inlined clrscr::l#0 = 0
Constant inlined strlen::len#0 = 0
Constant inlined main::row#0 = 1
Constant inlined main::row#2 = 1
Constant inlined CONIO_SCREEN_TEXT = DEFAULT_SCREEN
Constant inlined utoa::$4 = utoa::max_digits#1-1
Constant inlined printf_number_buffer::padding#2 = 0
Constant inlined clrscr::line_text#0 = DEFAULT_SCREEN
Constant inlined _rand_state#20 = 1
Constant inlined ultoa::started#1 = 1
Constant inlined memcpy::source#0 = (void*)DEFAULT_SCREEN+$28
Constant inlined main::cnt#0 = 0
Constant inlined gotoxy::x#4 = $1c
Constant inlined utoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined ultoa::digit#0 = 0
Constant inlined gotoxy::x#0 = 0
Constant inlined gotoxy::x#2 = 0
Constant inlined memset::c#0 = ' '
Constant inlined printf_number_buffer::padding#0 = 0
Constant inlined utoa_append::digit#0 = 0
Constant inlined memcpy::destination#0 = (void*)DEFAULT_SCREEN
Constant inlined memcpy::destination#1 = (void*)COLORRAM
Constant inlined conio_c64_init::line#1 = (byte)$19-1
Constant inlined memcpy::source#1 = (void*)COLORRAM+$28
Constant inlined ultoa::buffer#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined printf_number_buffer::format_upper_case#1 = printf_uint::format_upper_case#0
Constant inlined ultoa::started#0 = 0
Constant inlined printf_number_buffer::format_upper_case#0 = printf_ulong::format_upper_case#0
Constant inlined utoa::digit#0 = 0
Constant inlined textcolor::color#1 = LIGHT_BLUE
Constant inlined textcolor::color#0 = WHITE
Constant inlined printf_number_buffer::format_min_length#0 = printf_ulong::format_min_length#0
Constant inlined printf_number_buffer::format_zero_padding#0 = printf_ulong::format_zero_padding#0
Constant inlined printf_number_buffer::format_min_length#1 = printf_uint::format_min_length#0
Constant inlined CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
Constant inlined memset::str#1 = (void*)COLORRAM+(word)$19*$28-$28
Constant inlined printf_padding::pad#0 = ' '
Constant inlined printf_number_buffer::format_zero_padding#1 = printf_uint::format_zero_padding#0
Constant inlined memset::str#0 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28
Constant inlined printf_padding::i#0 = 0
Constant inlined printf_padding::pad#1 = '0'
Constant inlined CONIO_SCREEN_COLORS = COLORRAM
Constant inlined printf_padding::pad#2 = ' '
Constant inlined printf_uint::$0 = 0
Constant inlined printf_ulong::$0 = 0
Constant inlined utoa::started#1 = 1
Constant inlined utoa::started#0 = 0
Constant inlined ultoa::$4 = ultoa::max_digits#1-1
Constant inlined memcpy::num#1 = (word)$19*$28-$28
Constant inlined memcpy::num#0 = (word)$19*$28-$28
Constant inlined gotoxy::y#4 = 0
Constant inlined gotoxy::y#0 = 0
Constant inlined ultoa_append::digit#0 = 0
Constant inlined ultoa::digit_values#1 = RADIX_DECIMAL_VALUES_LONG
Constant inlined clrscr::c#0 = 0
Constant inlined clrscr::line_cols#0 = COLORRAM
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias gotoxy::line_offset#0 = gotoxy::$10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values memcpy::num#2 (word)$19*$28-$28
Identical Phi Values memset::num#2 $28
Identical Phi Values printf_number_buffer::buffer_digits#10 (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2IdenticalPhiElimination
Constant strlen::str#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant cputs::s#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant strupr::str#0 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [9] if($28<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant SIZEOF_WORD
Eliminating unused constant SIZEOF_DWORD
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with var siblings strlen::str#1
Inlining constant with var siblings cputs::s#1
Constant inlined cputs::s#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Constant inlined strlen::str#1 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying constant integer cast $19-1
Simplifying constant integer cast $28-5
Successful SSA optimization PassNCastSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Added new block during phi lifting utoa::@17(between utoa::@16 and utoa::@13)
Added new block during phi lifting ultoa::@17(between ultoa::@16 and ultoa::@13)
Added new block during phi lifting gotoxy::@5(between gotoxy and gotoxy::@1)
Added new block during phi lifting gotoxy::@6(between gotoxy::@1 and gotoxy::@2)
Added new block during phi lifting conio_c64_init::@4(between conio_c64_init and conio_c64_init::@1)
Added new block during phi lifting printf_number_buffer::@27(between printf_number_buffer::@13 and printf_number_buffer::@1)
Added new block during phi lifting printf_number_buffer::@28(between printf_number_buffer::@15 and printf_number_buffer::@13)
Added new block during phi lifting main::@18(between main::@12 and main::@1)
Added new block during phi lifting main::@19(between main::@1 and main::@2)
Added new block during phi lifting main::@20(between main::@14 and main::@2)
Added new block during phi lifting main::@21(between main::@4 and main::@2)
Fixing phi predecessor for main::row#7 to new block ( main::@4 -> main::@21 ) during phi lifting.
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@3
Adding NOP phi() at start of conio_c64_init::@2
Adding NOP phi() at start of conio_c64_init::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@15
Adding NOP phi() at start of main::@17
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of gotoxy::@4
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@2
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_uint::@2
Adding NOP phi() at start of printf_uint::@5
Adding NOP phi() at start of printf_ulong
Adding NOP phi() at start of printf_ulong::@2
Adding NOP phi() at start of printf_ulong::@5
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of utoa
Adding NOP phi() at start of utoa::@1
Adding NOP phi() at start of printf_number_buffer::@6
Adding NOP phi() at start of printf_number_buffer::@14
Adding NOP phi() at start of printf_number_buffer::@17
Adding NOP phi() at start of printf_number_buffer::@11
Adding NOP phi() at start of printf_number_buffer::@20
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@18
Adding NOP phi() at start of printf_number_buffer::@16
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of ultoa::@1
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of strlen
Adding NOP phi() at start of strlen::@3
Adding NOP phi() at start of strupr
Adding NOP phi() at start of strupr::@3
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [__start] to conio_c64_init:6 main:9 
Calls in [conio_c64_init] to gotoxy:18 
Calls in [main] to clrscr:23 textcolor:25 cputs:27 _rand:29 textcolor:32 gotoxy:42 printf_uint:44 _rand:52 gotoxy:57 cputs:59 printf_ulong:61 
Calls in [cputs] to cputc:126 
Calls in [printf_uint] to utoa:141 printf_number_buffer:144 
Calls in [printf_ulong] to ultoa:151 printf_number_buffer:154 
Calls in [cputc] to cputln:164 cputln:168 
Calls in [utoa] to utoa_append:196 
Calls in [printf_number_buffer] to strlen:205 cputc:223 strupr:229 cputs:232 printf_padding:239 printf_padding:243 printf_padding:247 
Calls in [ultoa] to ultoa_append:277 
Calls in [cputln] to cscroll:287 
Calls in [strupr] to toupper:314 
Calls in [printf_padding] to cputc:326 
Calls in [cscroll] to memcpy:341 memcpy:343 memset:345 memset:348 

Created 59 initial phi equivalence classes
Coalesced [17] gotoxy::y#9 = gotoxy::y#2
Coalesced [21] conio_c64_init::line#3 = conio_c64_init::line#0
Not coalescing [33] main::rnd#5 = main::first#0
Coalesced [40] gotoxy::y#10 = gotoxy::y#3
Coalesced [41] gotoxy::x#9 = gotoxy::x#3
Coalesced [51] _rand_state#35 = _rand_state#14
Coalesced [64] main::cnt#14 = main::cnt#1
Coalesced [65] main::col#10 = main::col#7
Coalesced [66] main::row#10 = main::row#7
Coalesced [67] main::rnd#6 = main::rnd#1
Coalesced [68] main::col#13 = main::col#1
Coalesced (already) [69] main::col#12 = main::col#3
Coalesced [70] main::row#12 = main::row#1
Coalesced (already) [71] main::col#11 = main::col#3
Coalesced (already) [72] main::row#11 = main::row#3
Coalesced [91] gotoxy::x#10 = gotoxy::x#5
Coalesced [92] gotoxy::y#11 = gotoxy::y#5
Coalesced [107] clrscr::l#7 = clrscr::l#1
Coalesced [108] clrscr::line_text#7 = clrscr::line_text#1
Coalesced [109] clrscr::line_cols#7 = clrscr::line_cols#1
Coalesced [113] clrscr::c#4 = clrscr::c#1
Coalesced [118] cputs::s#8 = cputs::s#5
Coalesced [125] cputc::c#5 = cputc::c#0
Coalesced [127] cputs::s#9 = cputs::s#0
Coalesced [143] printf_number_buffer::buffer_sign#13 = printf_number_buffer::buffer_sign#1
Coalesced [153] printf_number_buffer::buffer_sign#14 = printf_number_buffer::buffer_sign#0
Coalesced [172] utoa::value#17 = utoa::value#1
Coalesced [184] utoa::value#18 = utoa::value#2
Coalesced [185] utoa::started#6 = utoa::started#2
Coalesced [186] utoa::buffer#23 = utoa::buffer#11
Coalesced [189] utoa::digit#7 = utoa::digit#1
Coalesced (already) [190] utoa::value#16 = utoa::value#6
Coalesced (already) [191] utoa::started#5 = utoa::started#4
Coalesced (already) [192] utoa::buffer#22 = utoa::buffer#14
Coalesced [200] utoa::value#19 = utoa::value#0
Coalesced [201] utoa::buffer#24 = utoa::buffer#4
Coalesced [211] printf_number_buffer::len#5 = printf_number_buffer::len#1
Coalesced [222] cputc::c#6 = cputc::c#2
Coalesced [238] printf_padding::length#8 = printf_padding::length#2
Coalesced [242] printf_padding::length#7 = printf_padding::length#1
Coalesced [246] printf_padding::length#9 = printf_padding::length#0
Coalesced [249] printf_number_buffer::padding#18 = printf_number_buffer::padding#1
Coalesced [250] printf_number_buffer::len#4 = printf_number_buffer::len#0
Coalesced [253] ultoa::value#17 = ultoa::value#1
Coalesced [265] ultoa::value#18 = ultoa::value#2
Coalesced [266] ultoa::started#6 = ultoa::started#2
Coalesced [267] ultoa::buffer#23 = ultoa::buffer#11
Coalesced [270] ultoa::digit#7 = ultoa::digit#1
Coalesced (already) [271] ultoa::value#16 = ultoa::value#6
Coalesced (already) [272] ultoa::started#5 = ultoa::started#4
Coalesced (already) [273] ultoa::buffer#22 = ultoa::buffer#14
Coalesced [281] ultoa::value#19 = ultoa::value#0
Coalesced [282] ultoa::buffer#24 = ultoa::buffer#4
Coalesced [290] utoa_append::value#6 = utoa_append::value#0
Coalesced [297] utoa_append::value#7 = utoa_append::value#1
Coalesced [298] utoa_append::digit#5 = utoa_append::digit#1
Coalesced [306] strlen::str#5 = strlen::str#0
Coalesced [307] strlen::len#5 = strlen::len#1
Coalesced [319] strupr::src#5 = strupr::src#1
Coalesced [325] cputc::c#7 = cputc::c#1
Coalesced [328] printf_padding::i#5 = printf_padding::i#1
Coalesced [329] ultoa_append::value#6 = ultoa_append::value#0
Coalesced [336] ultoa_append::value#7 = ultoa_append::value#1
Coalesced [337] ultoa_append::digit#5 = ultoa_append::digit#1
Coalesced [347] memset::c#6 = memset::c#1
Coalesced [355] toupper::return#7 = toupper::ch#0
Coalesced [359] toupper::return#6 = toupper::return#0
Coalesced [371] memcpy::src#5 = memcpy::src#1
Coalesced [372] memcpy::dst#5 = memcpy::dst#1
Coalesced [382] memset::dst#5 = memset::dst#1
Coalesced down to 49 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label __start::@3
Culled Empty Block label conio_c64_init::@2
Culled Empty Block label conio_c64_init::@3
Culled Empty Block label main::@5
Culled Empty Block label main::@17
Culled Empty Block label main::@18
Culled Empty Block label main::@20
Culled Empty Block label main::@19
Culled Empty Block label gotoxy::@3
Culled Empty Block label gotoxy::@4
Culled Empty Block label clrscr::@2
Culled Empty Block label cputs::@3
Culled Empty Block label printf_uint::@2
Culled Empty Block label printf_uint::@5
Culled Empty Block label printf_ulong::@2
Culled Empty Block label printf_ulong::@5
Culled Empty Block label cputc::@5
Culled Empty Block label cputc::@4
Culled Empty Block label utoa::@1
Culled Empty Block label utoa::@5
Culled Empty Block label utoa::@17
Culled Empty Block label printf_number_buffer::@14
Culled Empty Block label printf_number_buffer::@17
Culled Empty Block label printf_number_buffer::@20
Culled Empty Block label printf_number_buffer::@21
Culled Empty Block label printf_number_buffer::@18
Culled Empty Block label printf_number_buffer::@16
Culled Empty Block label printf_number_buffer::@28
Culled Empty Block label ultoa::@1
Culled Empty Block label ultoa::@5
Culled Empty Block label ultoa::@17
Culled Empty Block label cputln::@1
Culled Empty Block label strlen::@3
Culled Empty Block label strupr::@3
Culled Empty Block label cscroll::@1
Culled Empty Block label toupper::@2
Culled Empty Block label memcpy::@3
Culled Empty Block label memset::@1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block toupper::@3 to toupper::@2
Renumbering block strupr::@4 to strupr::@3
Renumbering block utoa::@10 to utoa::@1
Renumbering block utoa::@11 to utoa::@2
Renumbering block utoa::@12 to utoa::@3
Renumbering block utoa::@13 to utoa::@4
Renumbering block utoa::@14 to utoa::@5
Renumbering block utoa::@15 to utoa::@6
Renumbering block utoa::@16 to utoa::@7
Renumbering block ultoa::@10 to ultoa::@1
Renumbering block ultoa::@11 to ultoa::@2
Renumbering block ultoa::@12 to ultoa::@3
Renumbering block ultoa::@13 to ultoa::@4
Renumbering block ultoa::@14 to ultoa::@5
Renumbering block ultoa::@15 to ultoa::@6
Renumbering block ultoa::@16 to ultoa::@7
Renumbering block clrscr::@3 to clrscr::@2
Renumbering block clrscr::@4 to clrscr::@3
Renumbering block clrscr::@5 to clrscr::@4
Renumbering block clrscr::@6 to clrscr::@5
Renumbering block gotoxy::@5 to gotoxy::@3
Renumbering block gotoxy::@6 to gotoxy::@4
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block conio_c64_init::@4 to conio_c64_init::@2
Renumbering block printf_ulong::@3 to printf_ulong::@1
Renumbering block printf_ulong::@4 to printf_ulong::@2
Renumbering block printf_uint::@3 to printf_uint::@1
Renumbering block printf_uint::@4 to printf_uint::@2
Renumbering block printf_number_buffer::@15 to printf_number_buffer::@14
Renumbering block printf_number_buffer::@19 to printf_number_buffer::@15
Renumbering block printf_number_buffer::@22 to printf_number_buffer::@16
Renumbering block printf_number_buffer::@23 to printf_number_buffer::@17
Renumbering block printf_number_buffer::@24 to printf_number_buffer::@18
Renumbering block printf_number_buffer::@25 to printf_number_buffer::@19
Renumbering block printf_number_buffer::@26 to printf_number_buffer::@20
Renumbering block printf_number_buffer::@27 to printf_number_buffer::@21
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Renumbering block main::@8 to main::@7
Renumbering block main::@9 to main::@8
Renumbering block main::@10 to main::@9
Renumbering block main::@11 to main::@10
Renumbering block main::@12 to main::@11
Renumbering block main::@13 to main::@12
Renumbering block main::@14 to main::@13
Renumbering block main::@15 to main::@14
Renumbering block main::@16 to main::@15
Renumbering block main::@21 to main::@16
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of conio_c64_init::@2
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@16
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@14
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of gotoxy::@4
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of printf_uint
Adding NOP phi() at start of printf_ulong
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of utoa
Adding NOP phi() at start of printf_number_buffer::@6
Adding NOP phi() at start of printf_number_buffer::@21
Adding NOP phi() at start of printf_number_buffer::@11
Adding NOP phi() at start of printf_number_buffer::@5
Adding NOP phi() at start of ultoa
Adding NOP phi() at start of utoa_append
Adding NOP phi() at start of strlen
Adding NOP phi() at start of strupr
Adding NOP phi() at start of ultoa_append
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] conio_textcolor = LIGHT_BLUE
  [6] call conio_c64_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [7] phi()
  [8] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [9] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [10] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [11] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [12] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [13] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [14] gotoxy::y#2 = conio_c64_init::line#2
  [15] call gotoxy 
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [16] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [17] phi()
  [18] call clrscr 
  to:main::@6
main::@6: scope:[main]  from main
  [19] phi()
  [20] call textcolor 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [21] phi()
  [22] call cputs 
  to:main::@8
main::@8: scope:[main]  from main::@7
  [23] phi()
  [24] call _rand 
  [25] _rand::return#0 = _rand::return#2
  to:main::@9
main::@9: scope:[main]  from main::@8
  [26] main::first#0 = _rand::return#0
  [27] call textcolor 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [28] main::rnd#5 = main::first#0
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@11
  [29] main::rnd#2 = phi( main::@10/main::rnd#5, main::@11/main::rnd#1 )
  [29] main::row#3 = phi( main::@10/1, main::@11/main::row#7 )
  [29] main::col#3 = phi( main::@10/3, main::@11/main::col#7 )
  [29] main::cnt#2 = phi( main::@10/0, main::@11/main::cnt#1 )
  [30] main::cnt#1 = ++ main::cnt#2
  [31] main::$17 = (byte)main::cnt#1
  [32] if(main::$17!=0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [33] gotoxy::x#3 = main::col#3
  [34] gotoxy::y#3 = main::row#3
  [35] call gotoxy 
  to:main::@12
main::@12: scope:[main]  from main::@3
  [36] printf_uint::uvalue#0 = main::rnd#2
  [37] call printf_uint 
  to:main::@13
main::@13: scope:[main]  from main::@12
  [38] main::row#1 = ++ main::row#3
  [39] if(main::row#1!=$19) goto main::@2
  to:main::@4
main::@4: scope:[main]  from main::@13
  [40] main::col#1 = main::col#3 + 6
  [41] if(main::col#1<$28-5+1) goto main::@16
  to:main::@2
main::@16: scope:[main]  from main::@4
  [42] phi()
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@13 main::@16 main::@4
  [43] main::row#7 = phi( main::@1/main::row#3, main::@13/main::row#1, main::@16/1, main::@4/1 )
  [43] main::col#7 = phi( main::@1/main::col#3, main::@13/main::col#3, main::@16/main::col#1, main::@4/3 )
  [44] call _rand 
  [45] _rand::return#1 = _rand::return#2
  to:main::@11
main::@11: scope:[main]  from main::@2
  [46] main::rnd#1 = _rand::return#1
  [47] if(main::rnd#1!=main::first#0) goto main::@1
  to:main::@5
main::@5: scope:[main]  from main::@11
  [48] phi()
  [49] call gotoxy 
  to:main::@14
main::@14: scope:[main]  from main::@5
  [50] phi()
  [51] call cputs 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [52] printf_ulong::uvalue#0 = main::cnt#1
  [53] call printf_ulong 
  to:main::@return
main::@return: scope:[main]  from main::@15
  [54] return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1 main::@3 main::@5
  [55] gotoxy::x#5 = phi( conio_c64_init::@1/0, main::@3/gotoxy::x#3, main::@5/$1c )
  [55] gotoxy::y#5 = phi( conio_c64_init::@1/gotoxy::y#2, main::@3/gotoxy::y#3, main::@5/0 )
  [56] if(gotoxy::y#5<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [57] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [58] gotoxy::y#6 = phi( gotoxy::@3/gotoxy::y#5, gotoxy/0 )
  [59] if(gotoxy::x#5<$28) goto gotoxy::@4
  to:gotoxy::@2
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  [60] phi()
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  [61] gotoxy::x#6 = phi( gotoxy::@4/gotoxy::x#5, gotoxy::@1/0 )
  [62] conio_cursor_x = gotoxy::x#6
  [63] conio_cursor_y = gotoxy::y#6
  [64] gotoxy::$7 = (word)gotoxy::y#6
  [65] gotoxy::$8 = gotoxy::$7 << 2
  [66] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [67] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [68] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [69] conio_line_text = gotoxy::$5
  [70] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [71] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [72] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [73] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [74] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [74] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [74] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [75] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [76] conio_cursor_x = 0
  [77] conio_cursor_y = 0
  [78] conio_line_text = DEFAULT_SCREEN
  [79] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [80] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [81] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [82] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [83] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [84] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [85] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [86] clrscr::line_text#5[clrscr::c#2] = ' '
  [87] clrscr::line_cols#5[clrscr::c#2] = conio_textcolor
  [88] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

byte textcolor(byte textcolor::color)
textcolor: scope:[textcolor]  from main::@6 main::@9
  [89] textcolor::color#2 = phi( main::@9/LIGHT_BLUE, main::@6/WHITE )
  [90] conio_textcolor = textcolor::color#2
  to:textcolor::@return
textcolor::@return: scope:[textcolor]  from textcolor
  [91] return 
  to:@return

void cputs(const byte* cputs::s)
cputs: scope:[cputs]  from main::@14 main::@7 printf_number_buffer::@5
  [92] cputs::s#5 = phi( main::@14/main::s1, main::@7/main::s, printf_number_buffer::@5/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [93] cputs::s#4 = phi( cputs/cputs::s#5, cputs::@2/cputs::s#0 )
  [94] cputs::c#1 = *cputs::s#4
  [95] cputs::s#0 = ++ cputs::s#4
  [96] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [97] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [98] cputc::c#0 = cputs::c#1
  [99] call cputc 
  to:cputs::@1

word _rand()
_rand: scope:[_rand]  from main::@2 main::@8
  [100] _rand_state#13 = phi( main::@2/_rand_state#14, main::@8/1 )
  [101] _rand::$0 = _rand_state#13 << 7
  [102] _rand_state#3 = _rand_state#13 ^ _rand::$0
  [103] _rand::$1 = _rand_state#3 >> 9
  [104] _rand_state#4 = _rand_state#3 ^ _rand::$1
  [105] _rand::$2 = _rand_state#4 << 8
  [106] _rand_state#14 = _rand_state#4 ^ _rand::$2
  [107] _rand::return#2 = _rand_state#14
  to:_rand::@return
_rand::@return: scope:[_rand]  from _rand
  [108] return 
  to:@return

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@12
  [109] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [110] *((byte*)&printf_buffer) = 0
  [111] utoa::value#1 = printf_uint::uvalue#0
  [112] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [113] printf_number_buffer::buffer_sign#1 = *((byte*)&printf_buffer)
  [114] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [115] return 
  to:@return

void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
printf_ulong: scope:[printf_ulong]  from main::@15
  [116] phi()
  to:printf_ulong::@1
printf_ulong::@1: scope:[printf_ulong]  from printf_ulong
  [117] *((byte*)&printf_buffer) = 0
  [118] ultoa::value#1 = printf_ulong::uvalue#0
  [119] call ultoa 
  to:printf_ulong::@2
printf_ulong::@2: scope:[printf_ulong]  from printf_ulong::@1
  [120] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [121] call printf_number_buffer 
  to:printf_ulong::@return
printf_ulong::@return: scope:[printf_ulong]  from printf_ulong::@2
  [122] return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@9 printf_padding::@2
  [123] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@9/cputc::c#2, printf_padding::@2/cputc::c#1 )
  [124] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [125] conio_line_text[conio_cursor_x] = cputc::c#3
  [126] conio_line_color[conio_cursor_x] = conio_textcolor
  [127] conio_cursor_x = ++ conio_cursor_x
  [128] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [129] phi()
  [130] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [131] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [132] phi()
  [133] call cputln 
  to:cputc::@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [134] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [135] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [135] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [135] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [135] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [136] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [137] utoa::$11 = (byte)utoa::value#2
  [138] *utoa::buffer#11 = DIGITS[utoa::$11]
  [139] utoa::buffer#3 = ++ utoa::buffer#11
  [140] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [141] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [142] utoa::$10 = utoa::digit#2 << 1
  [143] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [144] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [145] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [146] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [146] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [146] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [147] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [148] utoa_append::buffer#0 = utoa::buffer#11
  [149] utoa_append::value#0 = utoa::value#2
  [150] utoa_append::sub#0 = utoa::digit_value#0
  [151] call utoa_append 
  [152] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [153] utoa::value#0 = utoa_append::return#0
  [154] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2 printf_ulong::@2
  [155] printf_number_buffer::format_upper_case#10 = phi( printf_uint::@2/printf_uint::format_upper_case#0, printf_ulong::@2/printf_ulong::format_upper_case#0 )
  [155] printf_number_buffer::buffer_sign#10 = phi( printf_uint::@2/printf_number_buffer::buffer_sign#1, printf_ulong::@2/printf_number_buffer::buffer_sign#0 )
  [155] printf_number_buffer::format_zero_padding#10 = phi( printf_uint::@2/printf_uint::format_zero_padding#0, printf_ulong::@2/printf_ulong::format_zero_padding#0 )
  [155] printf_number_buffer::format_justify_left#10 = phi( printf_uint::@2/printf_uint::format_justify_left#0, printf_ulong::@2/printf_ulong::format_justify_left#0 )
  [155] printf_number_buffer::format_min_length#2 = phi( printf_uint::@2/printf_uint::format_min_length#0, printf_ulong::@2/printf_ulong::format_min_length#0 )
  [156] if(0==printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1
  to:printf_number_buffer::@6
printf_number_buffer::@6: scope:[printf_number_buffer]  from printf_number_buffer
  [157] phi()
  [158] call strlen 
  [159] strlen::return#2 = strlen::len#2
  to:printf_number_buffer::@14
printf_number_buffer::@14: scope:[printf_number_buffer]  from printf_number_buffer::@6
  [160] printf_number_buffer::$19 = strlen::return#2
  [161] printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19
  [162] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13
  to:printf_number_buffer::@7
printf_number_buffer::@7: scope:[printf_number_buffer]  from printf_number_buffer::@14
  [163] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0
  to:printf_number_buffer::@13
printf_number_buffer::@13: scope:[printf_number_buffer]  from printf_number_buffer::@14 printf_number_buffer::@7
  [164] printf_number_buffer::len#2 = phi( printf_number_buffer::@14/printf_number_buffer::len#0, printf_number_buffer::@7/printf_number_buffer::len#1 )
  [165] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#2 - printf_number_buffer::len#2
  [166] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@21
  to:printf_number_buffer::@1
printf_number_buffer::@21: scope:[printf_number_buffer]  from printf_number_buffer::@13
  [167] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer printf_number_buffer::@13 printf_number_buffer::@21
  [168] printf_number_buffer::padding#10 = phi( printf_number_buffer/0, printf_number_buffer::@21/printf_number_buffer::padding#1, printf_number_buffer::@13/0 )
  [169] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@17
printf_number_buffer::@17: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [170] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2
  to:printf_number_buffer::@16
printf_number_buffer::@16: scope:[printf_number_buffer]  from printf_number_buffer::@17
  [171] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8
  to:printf_number_buffer::@2
printf_number_buffer::@8: scope:[printf_number_buffer]  from printf_number_buffer::@16
  [172] printf_padding::length#0 = (byte)printf_number_buffer::padding#10
  [173] call printf_padding 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@16 printf_number_buffer::@17 printf_number_buffer::@8
  [174] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3
  to:printf_number_buffer::@9
printf_number_buffer::@9: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [175] cputc::c#2 = printf_number_buffer::buffer_sign#10
  [176] call cputc 
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@2 printf_number_buffer::@9
  [177] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4
  to:printf_number_buffer::@18
printf_number_buffer::@18: scope:[printf_number_buffer]  from printf_number_buffer::@3
  [178] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10
  to:printf_number_buffer::@4
printf_number_buffer::@10: scope:[printf_number_buffer]  from printf_number_buffer::@18
  [179] printf_padding::length#1 = (byte)printf_number_buffer::padding#10
  [180] call printf_padding 
  to:printf_number_buffer::@4
printf_number_buffer::@4: scope:[printf_number_buffer]  from printf_number_buffer::@10 printf_number_buffer::@18 printf_number_buffer::@3
  [181] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5
  to:printf_number_buffer::@11
printf_number_buffer::@11: scope:[printf_number_buffer]  from printf_number_buffer::@4
  [182] phi()
  [183] call strupr 
  to:printf_number_buffer::@5
printf_number_buffer::@5: scope:[printf_number_buffer]  from printf_number_buffer::@11 printf_number_buffer::@4
  [184] phi()
  [185] call cputs 
  to:printf_number_buffer::@15
printf_number_buffer::@15: scope:[printf_number_buffer]  from printf_number_buffer::@5
  [186] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@20
printf_number_buffer::@20: scope:[printf_number_buffer]  from printf_number_buffer::@15
  [187] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return
  to:printf_number_buffer::@19
printf_number_buffer::@19: scope:[printf_number_buffer]  from printf_number_buffer::@20
  [188] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12
  to:printf_number_buffer::@return
printf_number_buffer::@12: scope:[printf_number_buffer]  from printf_number_buffer::@19
  [189] printf_padding::length#2 = (byte)printf_number_buffer::padding#10
  [190] call printf_padding 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@12 printf_number_buffer::@15 printf_number_buffer::@19 printf_number_buffer::@20
  [191] return 
  to:@return

void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
ultoa: scope:[ultoa]  from printf_ulong::@1
  [192] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@4
  [193] ultoa::buffer#11 = phi( ultoa::@4/ultoa::buffer#14, ultoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [193] ultoa::started#2 = phi( ultoa::@4/ultoa::started#4, ultoa/0 )
  [193] ultoa::value#2 = phi( ultoa::@4/ultoa::value#6, ultoa/ultoa::value#1 )
  [193] ultoa::digit#2 = phi( ultoa::@4/ultoa::digit#1, ultoa/0 )
  [194] if(ultoa::digit#2<ultoa::max_digits#1-1) goto ultoa::@2
  to:ultoa::@3
ultoa::@3: scope:[ultoa]  from ultoa::@1
  [195] ultoa::$11 = (byte)ultoa::value#2
  [196] *ultoa::buffer#11 = DIGITS[ultoa::$11]
  [197] ultoa::buffer#3 = ++ ultoa::buffer#11
  [198] *ultoa::buffer#3 = 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@3
  [199] return 
  to:@return
ultoa::@2: scope:[ultoa]  from ultoa::@1
  [200] ultoa::$10 = ultoa::digit#2 << 2
  [201] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10]
  [202] if(0!=ultoa::started#2) goto ultoa::@5
  to:ultoa::@7
ultoa::@7: scope:[ultoa]  from ultoa::@2
  [203] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@6 ultoa::@7
  [204] ultoa::buffer#14 = phi( ultoa::@7/ultoa::buffer#11, ultoa::@6/ultoa::buffer#4 )
  [204] ultoa::started#4 = phi( ultoa::@7/ultoa::started#2, ultoa::@6/1 )
  [204] ultoa::value#6 = phi( ultoa::@7/ultoa::value#2, ultoa::@6/ultoa::value#0 )
  [205] ultoa::digit#1 = ++ ultoa::digit#2
  to:ultoa::@1
ultoa::@5: scope:[ultoa]  from ultoa::@2 ultoa::@7
  [206] ultoa_append::buffer#0 = ultoa::buffer#11
  [207] ultoa_append::value#0 = ultoa::value#2
  [208] ultoa_append::sub#0 = ultoa::digit_value#0
  [209] call ultoa_append 
  [210] ultoa_append::return#0 = ultoa_append::value#2
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@5
  [211] ultoa::value#0 = ultoa_append::return#0
  [212] ultoa::buffer#4 = ++ ultoa::buffer#11
  to:ultoa::@4

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [213] conio_line_text = conio_line_text + $28
  [214] conio_line_color = conio_line_color + $28
  [215] conio_cursor_x = 0
  [216] conio_cursor_y = ++ conio_cursor_y
  [217] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [218] return 
  to:@return

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [219] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [220] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [220] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [221] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [222] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [223] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [224] utoa_append::digit#1 = ++ utoa_append::digit#2
  [225] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

word strlen(byte* strlen::str)
strlen: scope:[strlen]  from printf_number_buffer::@6
  [226] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [227] strlen::len#2 = phi( strlen/0, strlen::@2/strlen::len#1 )
  [227] strlen::str#2 = phi( strlen/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS, strlen::@2/strlen::str#0 )
  [228] if(0!=*strlen::str#2) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [229] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [230] strlen::len#1 = ++ strlen::len#2
  [231] strlen::str#0 = ++ strlen::str#2
  to:strlen::@1

void printf_padding(byte printf_padding::pad , byte printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_number_buffer::@10 printf_number_buffer::@12 printf_number_buffer::@8
  [232] printf_padding::pad#5 = phi( printf_number_buffer::@10/'0', printf_number_buffer::@12/' ', printf_number_buffer::@8/' ' )
  [232] printf_padding::length#4 = phi( printf_number_buffer::@10/printf_padding::length#1, printf_number_buffer::@12/printf_padding::length#2, printf_number_buffer::@8/printf_padding::length#0 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [233] printf_padding::i#2 = phi( printf_padding/0, printf_padding::@3/printf_padding::i#1 )
  [234] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [235] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [236] cputc::c#1 = printf_padding::pad#5
  [237] call cputc 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [238] printf_padding::i#1 = ++ printf_padding::i#2
  to:printf_padding::@1

byte* strupr(byte* strupr::str)
strupr: scope:[strupr]  from printf_number_buffer::@11
  [239] phi()
  to:strupr::@1
strupr::@1: scope:[strupr]  from strupr strupr::@3
  [240] strupr::src#2 = phi( strupr/strupr::str#0, strupr::@3/strupr::src#1 )
  [241] if(0!=*strupr::src#2) goto strupr::@2
  to:strupr::@return
strupr::@return: scope:[strupr]  from strupr::@1
  [242] return 
  to:@return
strupr::@2: scope:[strupr]  from strupr::@1
  [243] toupper::ch#0 = *strupr::src#2
  [244] call toupper 
  [245] toupper::return#3 = toupper::return#2
  to:strupr::@3
strupr::@3: scope:[strupr]  from strupr::@2
  [246] strupr::$0 = toupper::return#3
  [247] *strupr::src#2 = strupr::$0
  [248] strupr::src#1 = ++ strupr::src#2
  to:strupr::@1

dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
ultoa_append: scope:[ultoa_append]  from ultoa::@5
  [249] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [250] ultoa_append::digit#2 = phi( ultoa_append/0, ultoa_append::@2/ultoa_append::digit#1 )
  [250] ultoa_append::value#2 = phi( ultoa_append/ultoa_append::value#0, ultoa_append::@2/ultoa_append::value#1 )
  [251] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [252] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2]
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [253] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [254] ultoa_append::digit#1 = ++ ultoa_append::digit#2
  [255] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0
  to:ultoa_append::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [256] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [257] phi()
  [258] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [259] phi()
  [260] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [261] phi()
  [262] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [263] memset::c#1 = conio_textcolor
  [264] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [265] conio_line_text = conio_line_text - $28
  [266] conio_line_color = conio_line_color - $28
  [267] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [268] return 
  to:@return

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from strupr::@2
  [269] if(toupper::ch#0<'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [270] if(toupper::ch#0<='z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [271] toupper::return#0 = toupper::ch#0 + 'A'-'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [272] toupper::return#2 = phi( toupper::@1/toupper::return#0, toupper/toupper::ch#0, toupper::@2/toupper::ch#0 )
  [273] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [274] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [274] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [275] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [276] memcpy::src#4 = (byte*)memcpy::source#2
  [277] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [278] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [278] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [279] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [280] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [281] *memcpy::dst#2 = *memcpy::src#2
  [282] memcpy::dst#1 = ++ memcpy::dst#2
  [283] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [284] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/memset::c#1 )
  [284] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [285] memset::end#0 = (byte*)memset::str#3 + $28
  [286] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [287] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [288] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [289] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [290] *memset::dst#2 = memset::c#4
  [291] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc
null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope cputc

VARIABLE REGISTER WEIGHTS
void __start()
word _rand()
word~ _rand::$0 2002.0
word~ _rand::$1 2002.0
word~ _rand::$2 2002.0
word _rand::return
word _rand::return#0 22.0
word _rand::return#1 202.0
word _rand::return#2 278.25
word _rand_state
word _rand_state#13 1051.5
word _rand_state#14 77.88888888888889
word _rand_state#3 1501.5
word _rand_state#4 1501.5
void clrscr()
byte clrscr::c
byte clrscr::c#1 20002.0
byte clrscr::c#2 12501.25
byte clrscr::l
byte clrscr::l#1 2002.0
byte clrscr::l#2 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 1001.0
byte* clrscr::line_cols#5 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 667.3333333333334
byte* clrscr::line_text#5 1714.7142857142858
void conio_c64_init()
byte conio_c64_init::line
byte conio_c64_init::line#0 11.0
byte conio_c64_init::line#2 22.0
byte conio_cursor_x loadstore 1.5151526363636363E7
byte conio_cursor_y loadstore 2.8070176411403507E8
byte* conio_line_color loadstore 2.1250001066346154E8
byte* conio_line_text loadstore 2.0654206643925232E8
byte conio_textcolor loadstore 7.26619432086331E7
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 2.0000002E7
byte cputc::c#1 2.0000002E7
byte cputc::c#2 20002.0
byte cputc::c#3 1.100050025E8
void cputln()
void cputs(const byte* cputs::s)
byte cputs::c
byte cputs::c#1 1.0000001E7
const byte* cputs::s
const byte* cputs::s#0 5000000.5
const byte* cputs::s#4 1.5050002E7
const byte* cputs::s#5 100001.0
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 2002.0
byte*~ gotoxy::$6 2002.0
word~ gotoxy::$7 1501.5
word~ gotoxy::$8 2002.0
word~ gotoxy::$9 2002.0
word gotoxy::line_offset
word gotoxy::line_offset#0 1001.0
byte gotoxy::x
byte gotoxy::x#3 101.0
byte gotoxy::x#5 350.5
byte gotoxy::x#6 2002.0
byte gotoxy::y
byte gotoxy::y#2 22.0
byte gotoxy::y#3 202.0
byte gotoxy::y#5 704.6666666666667
byte gotoxy::y#6 333.6666666666667
void main()
byte~ main::$17 202.0
dword main::cnt
dword main::cnt#1 9.681818181818182
dword main::cnt#2 202.0
byte main::col
byte main::col#1 101.0
byte main::col#3 45.90909090909091
byte main::col#7 80.8
word main::first
word main::first#0 5.590909090909091
word main::rnd
word main::rnd#1 151.5
word main::rnd#2 30.42857142857143
word main::rnd#5 22.0
byte main::row
byte main::row#1 151.5
byte main::row#3 44.888888888888886
byte main::row#7 60.599999999999994
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2
byte* memcpy::dst
byte* memcpy::dst#1 1.00000000000001E14
byte* memcpy::dst#2 1.0003333333333467E14
byte* memcpy::dst#4 2.00000000002E11
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#1 2.00000000000002E14
byte* memcpy::src#2 1.0002500000000125E14
byte* memcpy::src#4 1.00000000001E11
byte* memcpy::src_end
byte* memcpy::src_end#0 1.251250000000025E13
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#1 2.0000000002E10
byte memset::c#4 1.4287142857143143E13
byte* memset::dst
byte* memset::dst#1 2.00000000000002E14
byte* memset::dst#2 1.3336666666666834E14
byte* memset::dst#4 2.00000000002E11
byte* memset::end
byte* memset::end#0 1.6683333333333668E13
word memset::num
void* memset::return
void* memset::str
void* memset::str#3
struct printf_buffer_number printf_buffer loadstore = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
word~ printf_number_buffer::$19 10001.0
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 202.0
byte printf_number_buffer::buffer_sign#1 2002.0
byte printf_number_buffer::buffer_sign#10 1555.25
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_justify_left#10 645.2258064516129
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_min_length#2 1000.1
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_upper_case#10 384.65384615384613
byte printf_number_buffer::format_zero_padding
byte printf_number_buffer::format_zero_padding#10 937.59375
signed byte printf_number_buffer::len
signed byte printf_number_buffer::len#0 15001.5
signed byte printf_number_buffer::len#1 20002.0
signed byte printf_number_buffer::len#2 30003.0
signed byte printf_number_buffer::padding
signed byte printf_number_buffer::padding#1 10001.0
signed byte printf_number_buffer::padding#10 1904.952380952381
void printf_padding(byte printf_padding::pad , byte printf_padding::length)
byte printf_padding::i
byte printf_padding::i#1 2.0000002E7
byte printf_padding::i#2 7500000.75
byte printf_padding::length
byte printf_padding::length#0 20002.0
byte printf_padding::length#1 20002.0
byte printf_padding::length#2 20002.0
byte printf_padding::length#4 1671667.3333333333
byte printf_padding::pad
byte printf_padding::pad#5 1666666.8333333333
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
byte printf_uint::format_min_length
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
byte printf_uint::format_zero_padding
word printf_uint::uvalue
word printf_uint::uvalue#0 367.33333333333337
void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
struct printf_format_number printf_ulong::format
byte printf_ulong::format_justify_left
byte printf_ulong::format_min_length
byte printf_ulong::format_radix
byte printf_ulong::format_sign_always
byte printf_ulong::format_upper_case
byte printf_ulong::format_zero_padding
dword printf_ulong::uvalue
dword printf_ulong::uvalue#0 37.33333333333333
word strlen(byte* strlen::str)
word strlen::len
word strlen::len#1 1.0000001E7
word strlen::len#2 5002500.75
word strlen::return
word strlen::return#2 20002.0
byte* strlen::str
byte* strlen::str#0 2.0000002E7
byte* strlen::str#2 1.0000001E7
byte* strupr(byte* strupr::str)
byte~ strupr::$0 2.0000002E7
byte* strupr::return
byte* strupr::src
byte* strupr::src#1 2.0000002E7
byte* strupr::src#2 7142857.857142856
byte* strupr::str
byte textcolor(byte textcolor::color)
byte textcolor::color
byte textcolor::color#2 101.0
byte textcolor::old
byte textcolor::return
byte toupper(byte toupper::ch)
byte toupper::ch
byte toupper::ch#0 1.70000002E8
byte toupper::return
byte toupper::return#0 2.00000002E8
byte toupper::return#2 1.0333333466666667E8
byte toupper::return#3 2.0000002E7
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
byte~ ultoa::$10 20002.0
byte~ ultoa::$11 2002.0
byte* ultoa::buffer
byte* ultoa::buffer#11 3000.4285714285716
byte* ultoa::buffer#14 15001.5
byte* ultoa::buffer#3 2002.0
byte* ultoa::buffer#4 20002.0
byte ultoa::digit
byte ultoa::digit#1 20002.0
byte ultoa::digit#2 2857.4285714285716
dword ultoa::digit_value
dword ultoa::digit_value#0 6000.6
dword* ultoa::digit_values
byte ultoa::max_digits
byte ultoa::radix
byte ultoa::started
byte ultoa::started#2 5000.5
byte ultoa::started#4 10001.0
dword ultoa::value
dword ultoa::value#0 10001.0
dword ultoa::value#1 551.0
dword ultoa::value#2 5857.857142857143
dword ultoa::value#6 15001.5
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0 13750.25
byte ultoa_append::digit
byte ultoa_append::digit#1 1.0000001E7
byte ultoa_append::digit#2 1.00500015E7
dword ultoa_append::return
dword ultoa_append::return#0 20002.0
dword ultoa_append::sub
dword ultoa_append::sub#0 3335000.5
dword ultoa_append::value
dword ultoa_append::value#0 36667.33333333333
dword ultoa_append::value#1 2.0000002E7
dword ultoa_append::value#2 5018334.166666666
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 2000002.0
byte~ utoa::$11 20002.0
byte* utoa::buffer
byte* utoa::buffer#11 287143.2857142857
byte* utoa::buffer#14 1500001.5
byte* utoa::buffer#3 20002.0
byte* utoa::buffer#4 2000002.0
byte utoa::digit
byte utoa::digit#1 2000002.0
byte utoa::digit#2 285714.5714285714
word utoa::digit_value
word utoa::digit_value#0 600000.6000000001
word* utoa::digit_values
byte utoa::max_digits
byte utoa::radix
byte utoa::started
byte utoa::started#2 500000.5
byte utoa::started#4 1000001.0
word utoa::value
word utoa::value#0 1000001.0
word utoa::value#1 5501.0
word utoa::value#2 572857.857142857
word utoa::value#6 1500001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 1375000.25
byte utoa_append::digit
byte utoa_append::digit#1 1.0000000001E10
byte utoa_append::digit#2 1.00050000015E10
word utoa_append::return
word utoa_append::return#0 2000002.0
word utoa_append::sub
word utoa_append::sub#0 3.3335000005E9
word utoa_append::value
word utoa_append::value#0 3666667.333333333
word utoa_append::value#1 2.0000000002E10
word utoa_append::value#2 5.001833334166666E9

Initial phi equivalence classes
[ conio_c64_init::line#2 conio_c64_init::line#0 ]
[ main::cnt#2 main::cnt#1 ]
[ main::col#3 main::col#7 main::col#1 ]
[ main::row#3 main::row#7 main::row#1 ]
[ main::rnd#2 main::rnd#5 main::rnd#1 ]
[ gotoxy::y#6 gotoxy::y#5 gotoxy::y#2 gotoxy::y#3 ]
[ gotoxy::x#6 gotoxy::x#5 gotoxy::x#3 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ textcolor::color#2 ]
[ cputs::s#4 cputs::s#5 cputs::s#0 ]
[ _rand_state#13 _rand_state#14 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ printf_number_buffer::format_min_length#2 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ strlen::str#2 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#5 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ strupr::src#2 strupr::src#1 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 memset::c#1 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_line_text to live range equivalence class [ conio_line_text ]
Added variable conio_line_color to live range equivalence class [ conio_line_color ]
Added variable conio_textcolor to live range equivalence class [ conio_textcolor ]
Added variable _rand::return#0 to live range equivalence class [ _rand::return#0 ]
Added variable main::first#0 to live range equivalence class [ main::first#0 ]
Added variable main::$17 to live range equivalence class [ main::$17 ]
Added variable printf_uint::uvalue#0 to live range equivalence class [ printf_uint::uvalue#0 ]
Added variable _rand::return#1 to live range equivalence class [ _rand::return#1 ]
Added variable printf_ulong::uvalue#0 to live range equivalence class [ printf_ulong::uvalue#0 ]
Added variable gotoxy::$7 to live range equivalence class [ gotoxy::$7 ]
Added variable gotoxy::$8 to live range equivalence class [ gotoxy::$8 ]
Added variable gotoxy::$9 to live range equivalence class [ gotoxy::$9 ]
Added variable gotoxy::line_offset#0 to live range equivalence class [ gotoxy::line_offset#0 ]
Added variable gotoxy::$5 to live range equivalence class [ gotoxy::$5 ]
Added variable gotoxy::$6 to live range equivalence class [ gotoxy::$6 ]
Added variable cputs::c#1 to live range equivalence class [ cputs::c#1 ]
Added variable _rand::$0 to live range equivalence class [ _rand::$0 ]
Added variable _rand_state#3 to live range equivalence class [ _rand_state#3 ]
Added variable _rand::$1 to live range equivalence class [ _rand::$1 ]
Added variable _rand_state#4 to live range equivalence class [ _rand_state#4 ]
Added variable _rand::$2 to live range equivalence class [ _rand::$2 ]
Added variable _rand::return#2 to live range equivalence class [ _rand::return#2 ]
Added variable utoa::$11 to live range equivalence class [ utoa::$11 ]
Added variable utoa::buffer#3 to live range equivalence class [ utoa::buffer#3 ]
Added variable utoa::$10 to live range equivalence class [ utoa::$10 ]
Added variable utoa::digit_value#0 to live range equivalence class [ utoa::digit_value#0 ]
Added variable utoa_append::buffer#0 to live range equivalence class [ utoa_append::buffer#0 ]
Added variable utoa_append::sub#0 to live range equivalence class [ utoa_append::sub#0 ]
Added variable utoa_append::return#0 to live range equivalence class [ utoa_append::return#0 ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable printf_number_buffer::$19 to live range equivalence class [ printf_number_buffer::$19 ]
Added variable ultoa::$11 to live range equivalence class [ ultoa::$11 ]
Added variable ultoa::buffer#3 to live range equivalence class [ ultoa::buffer#3 ]
Added variable ultoa::$10 to live range equivalence class [ ultoa::$10 ]
Added variable ultoa::digit_value#0 to live range equivalence class [ ultoa::digit_value#0 ]
Added variable ultoa_append::buffer#0 to live range equivalence class [ ultoa_append::buffer#0 ]
Added variable ultoa_append::sub#0 to live range equivalence class [ ultoa_append::sub#0 ]
Added variable ultoa_append::return#0 to live range equivalence class [ ultoa_append::return#0 ]
Added variable toupper::return#3 to live range equivalence class [ toupper::return#3 ]
Added variable strupr::$0 to live range equivalence class [ strupr::$0 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Added variable printf_buffer to live range equivalence class [ printf_buffer ]
Complete equivalence classes
[ conio_c64_init::line#2 conio_c64_init::line#0 ]
[ main::cnt#2 main::cnt#1 ]
[ main::col#3 main::col#7 main::col#1 ]
[ main::row#3 main::row#7 main::row#1 ]
[ main::rnd#2 main::rnd#5 main::rnd#1 ]
[ gotoxy::y#6 gotoxy::y#5 gotoxy::y#2 gotoxy::y#3 ]
[ gotoxy::x#6 gotoxy::x#5 gotoxy::x#3 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ textcolor::color#2 ]
[ cputs::s#4 cputs::s#5 cputs::s#0 ]
[ _rand_state#13 _rand_state#14 ]
[ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
[ utoa::digit#2 utoa::digit#1 ]
[ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
[ utoa::started#2 utoa::started#4 ]
[ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
[ printf_number_buffer::format_min_length#2 ]
[ printf_number_buffer::format_justify_left#10 ]
[ printf_number_buffer::format_zero_padding#10 ]
[ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
[ printf_number_buffer::format_upper_case#10 ]
[ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
[ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
[ ultoa::digit#2 ultoa::digit#1 ]
[ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
[ ultoa::started#2 ultoa::started#4 ]
[ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
[ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
[ utoa_append::digit#2 utoa_append::digit#1 ]
[ strlen::str#2 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
[ printf_padding::pad#5 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ strupr::src#2 strupr::src#1 ]
[ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
[ ultoa_append::digit#2 ultoa_append::digit#1 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 memset::c#1 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_line_text ]
[ conio_line_color ]
[ conio_textcolor ]
[ _rand::return#0 ]
[ main::first#0 ]
[ main::$17 ]
[ printf_uint::uvalue#0 ]
[ _rand::return#1 ]
[ printf_ulong::uvalue#0 ]
[ gotoxy::$7 ]
[ gotoxy::$8 ]
[ gotoxy::$9 ]
[ gotoxy::line_offset#0 ]
[ gotoxy::$5 ]
[ gotoxy::$6 ]
[ cputs::c#1 ]
[ _rand::$0 ]
[ _rand_state#3 ]
[ _rand::$1 ]
[ _rand_state#4 ]
[ _rand::$2 ]
[ _rand::return#2 ]
[ utoa::$11 ]
[ utoa::buffer#3 ]
[ utoa::$10 ]
[ utoa::digit_value#0 ]
[ utoa_append::buffer#0 ]
[ utoa_append::sub#0 ]
[ utoa_append::return#0 ]
[ strlen::return#2 ]
[ printf_number_buffer::$19 ]
[ ultoa::$11 ]
[ ultoa::buffer#3 ]
[ ultoa::$10 ]
[ ultoa::digit_value#0 ]
[ ultoa_append::buffer#0 ]
[ ultoa_append::sub#0 ]
[ ultoa_append::return#0 ]
[ toupper::return#3 ]
[ strupr::$0 ]
[ memcpy::src_end#0 ]
[ memset::end#0 ]
[ printf_buffer ]
Allocated zp[1]:2 [ conio_c64_init::line#2 conio_c64_init::line#0 ]
Allocated zp[4]:3 [ main::cnt#2 main::cnt#1 ]
Allocated zp[1]:7 [ main::col#3 main::col#7 main::col#1 ]
Allocated zp[1]:8 [ main::row#3 main::row#7 main::row#1 ]
Allocated zp[2]:9 [ main::rnd#2 main::rnd#5 main::rnd#1 ]
Allocated zp[1]:11 [ gotoxy::y#6 gotoxy::y#5 gotoxy::y#2 gotoxy::y#3 ]
Allocated zp[1]:12 [ gotoxy::x#6 gotoxy::x#5 gotoxy::x#3 ]
Allocated zp[1]:13 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:16 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:18 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:19 [ textcolor::color#2 ]
Allocated zp[2]:20 [ cputs::s#4 cputs::s#5 cputs::s#0 ]
Allocated zp[2]:22 [ _rand_state#13 _rand_state#14 ]
Allocated zp[1]:24 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
Allocated zp[1]:25 [ utoa::digit#2 utoa::digit#1 ]
Allocated zp[2]:26 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ]
Allocated zp[1]:28 [ utoa::started#2 utoa::started#4 ]
Allocated zp[2]:29 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ]
Allocated zp[1]:31 [ printf_number_buffer::format_min_length#2 ]
Allocated zp[1]:32 [ printf_number_buffer::format_justify_left#10 ]
Allocated zp[1]:33 [ printf_number_buffer::format_zero_padding#10 ]
Allocated zp[1]:34 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated zp[1]:35 [ printf_number_buffer::format_upper_case#10 ]
Allocated zp[1]:36 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
Allocated zp[1]:37 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated zp[1]:38 [ ultoa::digit#2 ultoa::digit#1 ]
Allocated zp[4]:39 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ]
Allocated zp[1]:43 [ ultoa::started#2 ultoa::started#4 ]
Allocated zp[2]:44 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ]
Allocated zp[2]:46 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ]
Allocated zp[1]:48 [ utoa_append::digit#2 utoa_append::digit#1 ]
Allocated zp[2]:49 [ strlen::str#2 strlen::str#0 ]
Allocated zp[2]:51 [ strlen::len#2 strlen::len#1 ]
Allocated zp[1]:53 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated zp[1]:54 [ printf_padding::pad#5 ]
Allocated zp[1]:55 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated zp[2]:56 [ strupr::src#2 strupr::src#1 ]
Allocated zp[4]:58 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ]
Allocated zp[1]:62 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Allocated zp[1]:63 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Allocated zp[2]:64 [ memcpy::source#2 ]
Allocated zp[2]:66 [ memcpy::destination#2 ]
Allocated zp[2]:68 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:70 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:72 [ memset::str#3 ]
Allocated zp[1]:74 [ memset::c#4 memset::c#1 ]
Allocated zp[2]:75 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:77 [ conio_cursor_x ]
Allocated zp[1]:78 [ conio_cursor_y ]
Allocated zp[2]:79 [ conio_line_text ]
Allocated zp[2]:81 [ conio_line_color ]
Allocated zp[1]:83 [ conio_textcolor ]
Allocated zp[2]:84 [ _rand::return#0 ]
Allocated zp[2]:86 [ main::first#0 ]
Allocated zp[1]:88 [ main::$17 ]
Allocated zp[2]:89 [ printf_uint::uvalue#0 ]
Allocated zp[2]:91 [ _rand::return#1 ]
Allocated zp[4]:93 [ printf_ulong::uvalue#0 ]
Allocated zp[2]:97 [ gotoxy::$7 ]
Allocated zp[2]:99 [ gotoxy::$8 ]
Allocated zp[2]:101 [ gotoxy::$9 ]
Allocated zp[2]:103 [ gotoxy::line_offset#0 ]
Allocated zp[2]:105 [ gotoxy::$5 ]
Allocated zp[2]:107 [ gotoxy::$6 ]
Allocated zp[1]:109 [ cputs::c#1 ]
Allocated zp[2]:110 [ _rand::$0 ]
Allocated zp[2]:112 [ _rand_state#3 ]
Allocated zp[2]:114 [ _rand::$1 ]
Allocated zp[2]:116 [ _rand_state#4 ]
Allocated zp[2]:118 [ _rand::$2 ]
Allocated zp[2]:120 [ _rand::return#2 ]
Allocated zp[1]:122 [ utoa::$11 ]
Allocated zp[2]:123 [ utoa::buffer#3 ]
Allocated zp[1]:125 [ utoa::$10 ]
Allocated zp[2]:126 [ utoa::digit_value#0 ]
Allocated zp[2]:128 [ utoa_append::buffer#0 ]
Allocated zp[2]:130 [ utoa_append::sub#0 ]
Allocated zp[2]:132 [ utoa_append::return#0 ]
Allocated zp[2]:134 [ strlen::return#2 ]
Allocated zp[2]:136 [ printf_number_buffer::$19 ]
Allocated zp[1]:138 [ ultoa::$11 ]
Allocated zp[2]:139 [ ultoa::buffer#3 ]
Allocated zp[1]:141 [ ultoa::$10 ]
Allocated zp[4]:142 [ ultoa::digit_value#0 ]
Allocated zp[2]:146 [ ultoa_append::buffer#0 ]
Allocated zp[4]:148 [ ultoa_append::sub#0 ]
Allocated zp[4]:152 [ ultoa_append::return#0 ]
Allocated zp[1]:156 [ toupper::return#3 ]
Allocated zp[1]:157 [ strupr::$0 ]
Allocated zp[2]:158 [ memcpy::src_end#0 ]
Allocated zp[2]:160 [ memset::end#0 ]
Allocated mem[12] [ printf_buffer ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] conio_cursor_x = 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [5] conio_textcolor = LIGHT_BLUE [ conio_textcolor printf_buffer ] (  [ conio_textcolor printf_buffer ] { }  ) always clobbers reg byte a 
Statement [25] _rand::return#0 = _rand::return#2 [ _rand::return#0 _rand_state#14 printf_buffer ] ( main:8 [ _rand::return#0 _rand_state#14 printf_buffer ] { { _rand::return#0 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [26] main::first#0 = _rand::return#0 [ main::first#0 _rand_state#14 printf_buffer ] ( main:8 [ main::first#0 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [28] main::rnd#5 = main::first#0 [ conio_textcolor main::first#0 main::rnd#5 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::rnd#5 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [31] main::$17 = (byte)main::cnt#1 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 main::$17 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 main::$17 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::col#3 main::col#7 main::col#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::row#3 main::row#7 main::row#1 ]
Statement [36] printf_uint::uvalue#0 = main::rnd#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor main::first#0 main::col#3 main::row#3 main::cnt#1 printf_uint::uvalue#0 _rand_state#14 printf_buffer ] ( main:8 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor main::first#0 main::col#3 main::row#3 main::cnt#1 printf_uint::uvalue#0 _rand_state#14 printf_buffer ] { { printf_uint::uvalue#0 = main::rnd#2 } }  ) always clobbers reg byte a 
Statement [40] main::col#1 = main::col#3 + 6 [ conio_textcolor main::first#0 main::cnt#1 main::col#1 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::cnt#1 main::col#1 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [45] _rand::return#1 = _rand::return#2 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 _rand::return#1 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 _rand::return#1 _rand_state#14 printf_buffer ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [46] main::rnd#1 = _rand::return#1 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 main::rnd#1 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 main::rnd#1 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [47] if(main::rnd#1!=main::first#0) goto main::@1 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 main::rnd#1 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 main::rnd#1 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [52] printf_ulong::uvalue#0 = main::cnt#1 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] ( main:8 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = main::cnt#1 } }  ) always clobbers reg byte a 
Statement [64] gotoxy::$7 = (word)gotoxy::y#6 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [65] gotoxy::$8 = gotoxy::$7 << 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [66] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [67] gotoxy::line_offset#0 = gotoxy::$9 << 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [68] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [69] conio_line_text = gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [70] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [71] conio_line_color = gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [76] conio_cursor_x = 0 [ conio_cursor_x ] ( main:8::clrscr:18 [ printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [77] conio_cursor_y = 0 [ conio_cursor_x conio_cursor_y ] ( main:8::clrscr:18 [ printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [78] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:8::clrscr:18 [ printf_buffer conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [79] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:8::clrscr:18 [ printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [83] clrscr::line_text#1 = clrscr::line_text#5 + $28 [ conio_textcolor clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:8::clrscr:18 [ printf_buffer conio_textcolor clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:13 [ clrscr::l#2 clrscr::l#1 ]
Statement [84] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 [ conio_textcolor clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:8::clrscr:18 [ printf_buffer conio_textcolor clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [86] clrscr::line_text#5[clrscr::c#2] = ' ' [ conio_textcolor clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:8::clrscr:18 [ printf_buffer conio_textcolor clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ clrscr::c#2 clrscr::c#1 ]
Statement [87] clrscr::line_cols#5[clrscr::c#2] = conio_textcolor [ conio_textcolor clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:8::clrscr:18 [ printf_buffer conio_textcolor clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [94] cputs::c#1 = *cputs::s#4 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] ( main:8::cputs:22 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] { }  main:8::cputs:51 [ main::cnt#1 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] { }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:7 [ main::col#3 main::col#7 main::col#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:8 [ main::row#3 main::row#7 main::row#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:32 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:32 [ printf_number_buffer::format_justify_left#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:33 [ printf_number_buffer::format_zero_padding#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:37 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:37 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Statement [101] _rand::$0 = _rand_state#13 << 7 [ _rand_state#13 _rand::$0 ] ( main:8::_rand:24 [ printf_buffer _rand_state#13 _rand::$0 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#13 _rand::$0 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [102] _rand_state#3 = _rand_state#13 ^ _rand::$0 [ _rand_state#3 ] ( main:8::_rand:24 [ printf_buffer _rand_state#3 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#3 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [103] _rand::$1 = _rand_state#3 >> 9 [ _rand_state#3 _rand::$1 ] ( main:8::_rand:24 [ printf_buffer _rand_state#3 _rand::$1 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#3 _rand::$1 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [104] _rand_state#4 = _rand_state#3 ^ _rand::$1 [ _rand_state#4 ] ( main:8::_rand:24 [ printf_buffer _rand_state#4 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#4 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [105] _rand::$2 = _rand_state#4 << 8 [ _rand_state#4 _rand::$2 ] ( main:8::_rand:24 [ printf_buffer _rand_state#4 _rand::$2 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#4 _rand::$2 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [106] _rand_state#14 = _rand_state#4 ^ _rand::$2 [ _rand_state#14 ] ( main:8::_rand:24 [ printf_buffer _rand_state#14 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#14 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [107] _rand::return#2 = _rand_state#14 [ _rand::return#2 _rand_state#14 ] ( main:8::_rand:24 [ printf_buffer _rand::return#2 _rand_state#14 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand::return#2 _rand_state#14 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [110] *((byte*)&printf_buffer) = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_uint::uvalue#0 printf_buffer ] ( main:8::printf_uint:37 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [111] utoa::value#1 = printf_uint::uvalue#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::value#1 ] ( main:8::printf_uint:37 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::value#1 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [117] *((byte*)&printf_buffer) = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] ( main:8::printf_ulong:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [118] ultoa::value#1 = printf_ulong::uvalue#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::value#1 ] ( main:8::printf_ulong:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [125] conio_line_text[conio_cursor_x] = cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:35 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:34 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:53 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:54 [ printf_padding::pad#5 ]
Removing always clobbered register reg byte y as potential for zp[1]:55 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [126] conio_line_color[conio_cursor_x] = conio_textcolor [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:35 [ printf_number_buffer::format_upper_case#10 ]
Removing always clobbered register reg byte a as potential for zp[1]:34 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:53 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:54 [ printf_padding::pad#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:55 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [128] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [137] utoa::$11 = (byte)utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [138] *utoa::buffer#11 = DIGITS[utoa::$11] [ printf_buffer utoa::buffer#11 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [139] utoa::buffer#3 = ++ utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [140] *utoa::buffer#3 = 0 [ printf_buffer ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [142] utoa::$10 = utoa::digit#2 << 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:25 [ utoa::digit#2 utoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:28 [ utoa::started#2 utoa::started#4 ]
Statement [143] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [145] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [148] utoa_append::buffer#0 = utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [149] utoa_append::value#0 = utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [150] utoa_append::sub#0 = utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [152] utoa_append::return#0 = utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [153] utoa::value#0 = utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [159] strlen::return#2 = strlen::len#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:8::printf_uint:37::printf_number_buffer:114 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:8::printf_ulong:53::printf_number_buffer:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:31 [ printf_number_buffer::format_min_length#2 ]
Statement [160] printf_number_buffer::$19 = strlen::return#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:8::printf_uint:37::printf_number_buffer:114 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [165] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#2 - printf_number_buffer::len#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:8::printf_uint:37::printf_number_buffer:114 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [195] ultoa::$11 = (byte)ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [196] *ultoa::buffer#11 = DIGITS[ultoa::$11] [ printf_buffer ultoa::buffer#11 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [197] ultoa::buffer#3 = ++ ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [198] *ultoa::buffer#3 = 0 [ printf_buffer ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [200] ultoa::$10 = ultoa::digit#2 << 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:38 [ ultoa::digit#2 ultoa::digit#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:43 [ ultoa::started#2 ultoa::started#4 ]
Statement [201] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10] [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [203] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [206] ultoa_append::buffer#0 = ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [207] ultoa_append::value#0 = ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [208] ultoa_append::sub#0 = ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [210] ultoa_append::return#0 = ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [211] ultoa::value#0 = ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [213] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [214] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [215] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [221] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:8::printf_uint:37::utoa:112::utoa_append:151 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:48 [ utoa_append::digit#2 utoa_append::digit#1 ]
Statement [222] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( main:8::printf_uint:37::utoa:112::utoa_append:151 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:25 [ utoa::digit#2 utoa::digit#1 ]
Statement [225] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:8::printf_uint:37::utoa:112::utoa_append:151 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [228] if(0!=*strlen::str#2) goto strlen::@2 [ printf_buffer strlen::len#2 strlen::str#2 ] ( main:8::printf_uint:37::printf_number_buffer:114::strlen:158 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:8::printf_ulong:53::printf_number_buffer:121::strlen:158 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:31 [ printf_number_buffer::format_min_length#2 ]
Statement [241] if(0!=*strupr::src#2) goto strupr::@2 [ strupr::src#2 ] ( main:8::printf_uint:37::printf_number_buffer:114::strupr:183 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121::strupr:183 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Statement [243] toupper::ch#0 = *strupr::src#2 [ strupr::src#2 toupper::ch#0 ] ( main:8::printf_uint:37::printf_number_buffer:114::strupr:183 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:8::printf_ulong:53::printf_number_buffer:121::strupr:183 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [247] *strupr::src#2 = strupr::$0 [ strupr::src#2 ] ( main:8::printf_uint:37::printf_number_buffer:114::strupr:183 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121::strupr:183 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte y 
Statement [251] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:8::printf_ulong:53::ultoa:119::ultoa_append:209 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:62 [ ultoa_append::digit#2 ultoa_append::digit#1 ]
Statement [252] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2] [ ultoa_append::value#2 ] ( main:8::printf_ulong:53::ultoa:119::ultoa_append:209 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:38 [ ultoa::digit#2 ultoa::digit#1 ]
Statement [255] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:8::printf_ulong:53::ultoa:119::ultoa_append:209 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [256] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [265] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [266] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [271] toupper::return#0 = toupper::ch#0 + 'A'-'a' [ toupper::return#0 ] ( main:8::printf_uint:37::printf_number_buffer:114::strupr:183::toupper:244 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:8::printf_ulong:53::printf_number_buffer:121::strupr:183::toupper:244 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [275] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [276] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [277] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [279] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [281] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a reg byte y 
Statement [285] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:74 [ memset::c#4 memset::c#1 ]
Statement [286] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  ) always clobbers reg byte a 
Statement [288] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  ) always clobbers reg byte a 
Statement [290] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:74 [ memset::c#4 memset::c#1 ]
Statement [1] conio_cursor_x = 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ printf_buffer ] (  [ printf_buffer ] { }  ) always clobbers reg byte a 
Statement [5] conio_textcolor = LIGHT_BLUE [ conio_textcolor printf_buffer ] (  [ conio_textcolor printf_buffer ] { }  ) always clobbers reg byte a 
Statement [25] _rand::return#0 = _rand::return#2 [ _rand::return#0 _rand_state#14 printf_buffer ] ( main:8 [ _rand::return#0 _rand_state#14 printf_buffer ] { { _rand::return#0 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [26] main::first#0 = _rand::return#0 [ main::first#0 _rand_state#14 printf_buffer ] ( main:8 [ main::first#0 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [28] main::rnd#5 = main::first#0 [ conio_textcolor main::first#0 main::rnd#5 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::rnd#5 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [31] main::$17 = (byte)main::cnt#1 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 main::$17 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 main::$17 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [36] printf_uint::uvalue#0 = main::rnd#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor main::first#0 main::col#3 main::row#3 main::cnt#1 printf_uint::uvalue#0 _rand_state#14 printf_buffer ] ( main:8 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor main::first#0 main::col#3 main::row#3 main::cnt#1 printf_uint::uvalue#0 _rand_state#14 printf_buffer ] { { printf_uint::uvalue#0 = main::rnd#2 } }  ) always clobbers reg byte a 
Statement [40] main::col#1 = main::col#3 + 6 [ conio_textcolor main::first#0 main::cnt#1 main::col#1 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::cnt#1 main::col#1 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a reg byte x 
Statement [45] _rand::return#1 = _rand::return#2 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 _rand::return#1 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 _rand::return#1 _rand_state#14 printf_buffer ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [46] main::rnd#1 = _rand::return#1 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 main::rnd#1 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 main::rnd#1 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [47] if(main::rnd#1!=main::first#0) goto main::@1 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 main::rnd#1 _rand_state#14 printf_buffer ] ( main:8 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 main::rnd#1 _rand_state#14 printf_buffer ] { }  ) always clobbers reg byte a 
Statement [52] printf_ulong::uvalue#0 = main::cnt#1 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] ( main:8 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = main::cnt#1 } }  ) always clobbers reg byte a 
Statement [64] gotoxy::$7 = (word)gotoxy::y#6 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [65] gotoxy::$8 = gotoxy::$7 << 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [66] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [67] gotoxy::line_offset#0 = gotoxy::$9 << 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [68] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [69] conio_line_text = gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [70] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [71] conio_line_color = gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( gotoxy:15 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  conio_c64_init:6::gotoxy:15 [ conio_textcolor printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { gotoxy::y#2 = gotoxy::y#5 conio_c64_init::line#2 } }  main:8::gotoxy:35 [ conio_textcolor main::first#0 main::col#3 main::row#3 main::rnd#2 main::cnt#1 _rand_state#14 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { gotoxy::y#3 = gotoxy::y#5 main::row#3 } { gotoxy::x#3 = gotoxy::x#5 main::col#3 } }  main:8::gotoxy:49 [ conio_textcolor main::cnt#1 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [76] conio_cursor_x = 0 [ conio_cursor_x ] ( main:8::clrscr:18 [ printf_buffer conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [77] conio_cursor_y = 0 [ conio_cursor_x conio_cursor_y ] ( main:8::clrscr:18 [ printf_buffer conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [78] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:8::clrscr:18 [ printf_buffer conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [79] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:8::clrscr:18 [ printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [83] clrscr::line_text#1 = clrscr::line_text#5 + $28 [ conio_textcolor clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:8::clrscr:18 [ printf_buffer conio_textcolor clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [84] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 [ conio_textcolor clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:8::clrscr:18 [ printf_buffer conio_textcolor clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [86] clrscr::line_text#5[clrscr::c#2] = ' ' [ conio_textcolor clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:8::clrscr:18 [ printf_buffer conio_textcolor clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [87] clrscr::line_cols#5[clrscr::c#2] = conio_textcolor [ conio_textcolor clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:8::clrscr:18 [ printf_buffer conio_textcolor clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [94] cputs::c#1 = *cputs::s#4 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] ( main:8::cputs:22 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] { }  main:8::cputs:51 [ main::cnt#1 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] { }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor cputs::s#4 cputs::c#1 printf_buffer ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Statement [101] _rand::$0 = _rand_state#13 << 7 [ _rand_state#13 _rand::$0 ] ( main:8::_rand:24 [ printf_buffer _rand_state#13 _rand::$0 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#13 _rand::$0 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [102] _rand_state#3 = _rand_state#13 ^ _rand::$0 [ _rand_state#3 ] ( main:8::_rand:24 [ printf_buffer _rand_state#3 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#3 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [103] _rand::$1 = _rand_state#3 >> 9 [ _rand_state#3 _rand::$1 ] ( main:8::_rand:24 [ printf_buffer _rand_state#3 _rand::$1 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#3 _rand::$1 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [104] _rand_state#4 = _rand_state#3 ^ _rand::$1 [ _rand_state#4 ] ( main:8::_rand:24 [ printf_buffer _rand_state#4 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#4 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [105] _rand::$2 = _rand_state#4 << 8 [ _rand_state#4 _rand::$2 ] ( main:8::_rand:24 [ printf_buffer _rand_state#4 _rand::$2 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#4 _rand::$2 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [106] _rand_state#14 = _rand_state#4 ^ _rand::$2 [ _rand_state#14 ] ( main:8::_rand:24 [ printf_buffer _rand_state#14 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand_state#14 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [107] _rand::return#2 = _rand_state#14 [ _rand::return#2 _rand_state#14 ] ( main:8::_rand:24 [ printf_buffer _rand::return#2 _rand_state#14 ] { { _rand::return#0 = _rand::return#2 } }  main:8::_rand:44 [ conio_textcolor main::first#0 main::cnt#1 main::col#7 main::row#7 printf_buffer _rand::return#2 _rand_state#14 ] { { _rand_state#13 = _rand_state#14 } { _rand::return#1 = _rand::return#2 } }  ) always clobbers reg byte a 
Statement [110] *((byte*)&printf_buffer) = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_uint::uvalue#0 printf_buffer ] ( main:8::printf_uint:37 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_uint::uvalue#0 printf_buffer ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [111] utoa::value#1 = printf_uint::uvalue#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::value#1 ] ( main:8::printf_uint:37 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::value#1 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [117] *((byte*)&printf_buffer) = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] ( main:8::printf_ulong:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_ulong::uvalue#0 printf_buffer ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [118] ultoa::value#1 = printf_ulong::uvalue#0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::value#1 ] ( main:8::printf_ulong:53 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::value#1 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [125] conio_line_text[conio_cursor_x] = cputc::c#3 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte y 
Statement [126] conio_line_color[conio_cursor_x] = conio_textcolor [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a reg byte y 
Statement [128] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [137] utoa::$11 = (byte)utoa::value#2 [ printf_buffer utoa::buffer#11 utoa::$11 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::buffer#11 utoa::$11 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [138] *utoa::buffer#11 = DIGITS[utoa::$11] [ printf_buffer utoa::buffer#11 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::buffer#11 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [139] utoa::buffer#3 = ++ utoa::buffer#11 [ printf_buffer utoa::buffer#3 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::buffer#3 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [140] *utoa::buffer#3 = 0 [ printf_buffer ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [142] utoa::$10 = utoa::digit#2 << 1 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::$10 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [143] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [145] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::value#2 utoa::started#2 utoa::buffer#11 utoa::digit_value#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [148] utoa_append::buffer#0 = utoa::buffer#11 [ printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::value#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [149] utoa_append::value#0 = utoa::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa::digit_value#0 utoa_append::buffer#0 utoa_append::value#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [150] utoa_append::sub#0 = utoa::digit_value#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::value#0 utoa_append::sub#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [152] utoa_append::return#0 = utoa_append::value#2 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::return#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [153] utoa::value#0 = utoa_append::return#0 [ printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] ( main:8::printf_uint:37::utoa:112 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa::value#0 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } }  ) always clobbers reg byte a 
Statement [159] strlen::return#2 = strlen::len#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] ( main:8::printf_uint:37::printf_number_buffer:114 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:8::printf_ulong:53::printf_number_buffer:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 strlen::return#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [160] printf_number_buffer::$19 = strlen::return#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] ( main:8::printf_uint:37::printf_number_buffer:114 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::$19 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [165] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#2 - printf_number_buffer::len#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] ( main:8::printf_uint:37::printf_number_buffer:114 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#1 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a 
Statement [195] ultoa::$11 = (byte)ultoa::value#2 [ printf_buffer ultoa::buffer#11 ultoa::$11 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::buffer#11 ultoa::$11 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [196] *ultoa::buffer#11 = DIGITS[ultoa::$11] [ printf_buffer ultoa::buffer#11 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::buffer#11 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [197] ultoa::buffer#3 = ++ ultoa::buffer#11 [ printf_buffer ultoa::buffer#3 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::buffer#3 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [198] *ultoa::buffer#3 = 0 [ printf_buffer ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a reg byte y 
Statement [200] ultoa::$10 = ultoa::digit#2 << 2 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::$10 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [201] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10] [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [203] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::started#2 ultoa::buffer#11 ultoa::digit_value#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [206] ultoa_append::buffer#0 = ultoa::buffer#11 [ printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::value#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [207] ultoa_append::value#0 = ultoa::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::digit_value#0 ultoa_append::buffer#0 ultoa_append::value#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [208] ultoa_append::sub#0 = ultoa::digit_value#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::value#0 ultoa_append::sub#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [210] ultoa_append::return#0 = ultoa_append::value#2 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::return#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [211] ultoa::value#0 = ultoa_append::return#0 [ printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] ( main:8::printf_ulong:53::ultoa:119 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa::value#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } }  ) always clobbers reg byte a 
Statement [213] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [214] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133 [ cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [215] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [221] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] ( main:8::printf_uint:37::utoa:112::utoa_append:151 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#2 utoa_append::digit#2 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [222] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] [ utoa_append::value#2 ] ( main:8::printf_uint:37::utoa:112::utoa_append:151 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::value#2 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [225] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 [ utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] ( main:8::printf_uint:37::utoa:112::utoa_append:151 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer utoa::digit#2 utoa::buffer#11 utoa_append::buffer#0 utoa_append::sub#0 utoa_append::value#1 utoa_append::digit#1 ] { { printf_uint::uvalue#0 = main::rnd#2 utoa::value#1 } { utoa_append::buffer#0 = utoa::buffer#11 } { utoa_append::value#0 = utoa::value#2 } { utoa_append::sub#0 = utoa::digit_value#0 } { utoa_append::return#0 = utoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [228] if(0!=*strlen::str#2) goto strlen::@2 [ printf_buffer strlen::len#2 strlen::str#2 ] ( main:8::printf_uint:37::printf_number_buffer:114::strlen:158 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  main:8::printf_ulong:53::printf_number_buffer:121::strlen:158 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_number_buffer::format_min_length#2 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_buffer strlen::len#2 strlen::str#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [241] if(0!=*strupr::src#2) goto strupr::@2 [ strupr::src#2 ] ( main:8::printf_uint:37::printf_number_buffer:114::strupr:183 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121::strupr:183 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte a reg byte y 
Statement [243] toupper::ch#0 = *strupr::src#2 [ strupr::src#2 toupper::ch#0 ] ( main:8::printf_uint:37::printf_number_buffer:114::strupr:183 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:8::printf_ulong:53::printf_number_buffer:121::strupr:183 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::ch#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [247] *strupr::src#2 = strupr::$0 [ strupr::src#2 ] ( main:8::printf_uint:37::printf_number_buffer:114::strupr:183 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } }  main:8::printf_ulong:53::printf_number_buffer:121::strupr:183 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } }  ) always clobbers reg byte y 
Statement [251] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] ( main:8::printf_ulong:53::ultoa:119::ultoa_append:209 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#2 ultoa_append::digit#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [252] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2] [ ultoa_append::value#2 ] ( main:8::printf_ulong:53::ultoa:119::ultoa_append:209 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::value#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a reg byte y 
Statement [255] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0 [ ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] ( main:8::printf_ulong:53::ultoa:119::ultoa_append:209 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer ultoa::digit#2 ultoa::buffer#11 ultoa_append::buffer#0 ultoa_append::sub#0 ultoa_append::value#1 ultoa_append::digit#1 ] { { printf_ulong::uvalue#0 = main::cnt#1 ultoa::value#1 } { ultoa_append::buffer#0 = ultoa::buffer#11 } { ultoa_append::value#0 = ultoa::value#2 } { ultoa_append::sub#0 = ultoa::digit_value#0 } { ultoa_append::return#0 = ultoa_append::value#2 } }  ) always clobbers reg byte a 
Statement [256] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [265] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [266] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color conio_textcolor ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [271] toupper::return#0 = toupper::ch#0 + 'A'-'a' [ toupper::return#0 ] ( main:8::printf_uint:37::printf_number_buffer:114::strupr:183::toupper:244 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  main:8::printf_ulong:53::printf_number_buffer:121::strupr:183::toupper:244 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 strupr::src#2 toupper::return#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [275] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [276] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [277] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [279] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a 
Statement [281] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:258 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:258 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:258 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memcpy:260 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memcpy:260 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memcpy:260 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  ) always clobbers reg byte a reg byte y 
Statement [285] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::str#3 memset::c#4 memset::end#0 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  ) always clobbers reg byte a 
Statement [286] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  ) always clobbers reg byte a 
Statement [288] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  ) always clobbers reg byte a 
Statement [290] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:262 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:262 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:262 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:262 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } }  main:8::cputs:22::cputc:99::cputln:130::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:130::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:130::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:130::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:22::cputc:99::cputln:133::cscroll:217::memset:264 [ cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::cputs:51::cputc:99::cputln:133::cscroll:217::memset:264 [ main::cnt#1 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputs:185::cputc:99::cputln:133::cscroll:217::memset:264 [ printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::padding#10 cputs::s#0 printf_buffer conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { cputc::c#0 = cputc::c#3 cputs::c#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::cputc:176::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::cputc:176::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { cputc::c#2 = cputc::c#3 printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:173::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::buffer_sign#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#0 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:180::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_number_buffer::format_justify_left#10 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_upper_case#10 printf_number_buffer::padding#10 printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#1 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_uint:37::printf_number_buffer:114::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ main::first#0 main::col#3 main::row#3 main::cnt#1 _rand_state#14 printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_uint::uvalue#0 = main::rnd#2 } { printf_number_buffer::buffer_sign#1 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  main:8::printf_ulong:53::printf_number_buffer:121::printf_padding:190::cputc:237::cputln:133::cscroll:217::memset:264 [ printf_buffer printf_padding::length#4 printf_padding::pad#5 printf_padding::i#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color conio_textcolor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_ulong::uvalue#0 = main::cnt#1 } { printf_number_buffer::buffer_sign#0 = printf_number_buffer::buffer_sign#10 } { printf_padding::length#2 = printf_padding::length#4 } { cputc::c#1 = cputc::c#3 printf_padding::pad#5 } { memset::c#1 = memset::c#4 conio_textcolor } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ conio_c64_init::line#2 conio_c64_init::line#0 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:3 [ main::cnt#2 main::cnt#1 ] : zp[4]:3 , 
Potential registers zp[1]:7 [ main::col#3 main::col#7 main::col#1 ] : zp[1]:7 , reg byte x , 
Potential registers zp[1]:8 [ main::row#3 main::row#7 main::row#1 ] : zp[1]:8 , reg byte x , 
Potential registers zp[2]:9 [ main::rnd#2 main::rnd#5 main::rnd#1 ] : zp[2]:9 , 
Potential registers zp[1]:11 [ gotoxy::y#6 gotoxy::y#5 gotoxy::y#2 gotoxy::y#3 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ gotoxy::x#6 gotoxy::x#5 gotoxy::x#3 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:13 , reg byte x , reg byte y , 
Potential registers zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:14 , 
Potential registers zp[2]:16 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:16 , 
Potential registers zp[1]:18 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:18 , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ textcolor::color#2 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:20 [ cputs::s#4 cputs::s#5 cputs::s#0 ] : zp[2]:20 , 
Potential registers zp[2]:22 [ _rand_state#13 _rand_state#14 ] : zp[2]:22 , 
Potential registers zp[1]:24 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ utoa::digit#2 utoa::digit#1 ] : zp[1]:25 , reg byte x , 
Potential registers zp[2]:26 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] : zp[2]:26 , 
Potential registers zp[1]:28 [ utoa::started#2 utoa::started#4 ] : zp[1]:28 , reg byte x , reg byte y , 
Potential registers zp[2]:29 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] : zp[2]:29 , 
Potential registers zp[1]:31 [ printf_number_buffer::format_min_length#2 ] : zp[1]:31 , reg byte x , 
Potential registers zp[1]:32 [ printf_number_buffer::format_justify_left#10 ] : zp[1]:32 , reg byte x , 
Potential registers zp[1]:33 [ printf_number_buffer::format_zero_padding#10 ] : zp[1]:33 , reg byte x , 
Potential registers zp[1]:34 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] : zp[1]:34 , reg byte x , 
Potential registers zp[1]:35 [ printf_number_buffer::format_upper_case#10 ] : zp[1]:35 , reg byte x , 
Potential registers zp[1]:36 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] : zp[1]:36 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:37 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] : zp[1]:37 , reg byte x , 
Potential registers zp[1]:38 [ ultoa::digit#2 ultoa::digit#1 ] : zp[1]:38 , reg byte x , 
Potential registers zp[4]:39 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] : zp[4]:39 , 
Potential registers zp[1]:43 [ ultoa::started#2 ultoa::started#4 ] : zp[1]:43 , reg byte x , reg byte y , 
Potential registers zp[2]:44 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] : zp[2]:46 , 
Potential registers zp[1]:48 [ utoa_append::digit#2 utoa_append::digit#1 ] : zp[1]:48 , reg byte x , reg byte y , 
Potential registers zp[2]:49 [ strlen::str#2 strlen::str#0 ] : zp[2]:49 , 
Potential registers zp[2]:51 [ strlen::len#2 strlen::len#1 ] : zp[2]:51 , 
Potential registers zp[1]:53 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] : zp[1]:53 , reg byte x , 
Potential registers zp[1]:54 [ printf_padding::pad#5 ] : zp[1]:54 , reg byte x , 
Potential registers zp[1]:55 [ printf_padding::i#2 printf_padding::i#1 ] : zp[1]:55 , reg byte x , 
Potential registers zp[2]:56 [ strupr::src#2 strupr::src#1 ] : zp[2]:56 , 
Potential registers zp[4]:58 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] : zp[4]:58 , 
Potential registers zp[1]:62 [ ultoa_append::digit#2 ultoa_append::digit#1 ] : zp[1]:62 , reg byte x , reg byte y , 
Potential registers zp[1]:63 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] : zp[1]:63 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:64 [ memcpy::source#2 ] : zp[2]:64 , 
Potential registers zp[2]:66 [ memcpy::destination#2 ] : zp[2]:66 , 
Potential registers zp[2]:68 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:68 , 
Potential registers zp[2]:70 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:70 , 
Potential registers zp[2]:72 [ memset::str#3 ] : zp[2]:72 , 
Potential registers zp[1]:74 [ memset::c#4 memset::c#1 ] : zp[1]:74 , reg byte x , 
Potential registers zp[2]:75 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:75 , 
Potential registers zp[1]:77 [ conio_cursor_x ] : zp[1]:77 , 
Potential registers zp[1]:78 [ conio_cursor_y ] : zp[1]:78 , 
Potential registers zp[2]:79 [ conio_line_text ] : zp[2]:79 , 
Potential registers zp[2]:81 [ conio_line_color ] : zp[2]:81 , 
Potential registers zp[1]:83 [ conio_textcolor ] : zp[1]:83 , 
Potential registers zp[2]:84 [ _rand::return#0 ] : zp[2]:84 , 
Potential registers zp[2]:86 [ main::first#0 ] : zp[2]:86 , 
Potential registers zp[1]:88 [ main::$17 ] : zp[1]:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:89 [ printf_uint::uvalue#0 ] : zp[2]:89 , 
Potential registers zp[2]:91 [ _rand::return#1 ] : zp[2]:91 , 
Potential registers zp[4]:93 [ printf_ulong::uvalue#0 ] : zp[4]:93 , 
Potential registers zp[2]:97 [ gotoxy::$7 ] : zp[2]:97 , 
Potential registers zp[2]:99 [ gotoxy::$8 ] : zp[2]:99 , 
Potential registers zp[2]:101 [ gotoxy::$9 ] : zp[2]:101 , 
Potential registers zp[2]:103 [ gotoxy::line_offset#0 ] : zp[2]:103 , 
Potential registers zp[2]:105 [ gotoxy::$5 ] : zp[2]:105 , 
Potential registers zp[2]:107 [ gotoxy::$6 ] : zp[2]:107 , 
Potential registers zp[1]:109 [ cputs::c#1 ] : zp[1]:109 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:110 [ _rand::$0 ] : zp[2]:110 , 
Potential registers zp[2]:112 [ _rand_state#3 ] : zp[2]:112 , 
Potential registers zp[2]:114 [ _rand::$1 ] : zp[2]:114 , 
Potential registers zp[2]:116 [ _rand_state#4 ] : zp[2]:116 , 
Potential registers zp[2]:118 [ _rand::$2 ] : zp[2]:118 , 
Potential registers zp[2]:120 [ _rand::return#2 ] : zp[2]:120 , 
Potential registers zp[1]:122 [ utoa::$11 ] : zp[1]:122 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:123 [ utoa::buffer#3 ] : zp[2]:123 , 
Potential registers zp[1]:125 [ utoa::$10 ] : zp[1]:125 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:126 [ utoa::digit_value#0 ] : zp[2]:126 , 
Potential registers zp[2]:128 [ utoa_append::buffer#0 ] : zp[2]:128 , 
Potential registers zp[2]:130 [ utoa_append::sub#0 ] : zp[2]:130 , 
Potential registers zp[2]:132 [ utoa_append::return#0 ] : zp[2]:132 , 
Potential registers zp[2]:134 [ strlen::return#2 ] : zp[2]:134 , 
Potential registers zp[2]:136 [ printf_number_buffer::$19 ] : zp[2]:136 , 
Potential registers zp[1]:138 [ ultoa::$11 ] : zp[1]:138 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:139 [ ultoa::buffer#3 ] : zp[2]:139 , 
Potential registers zp[1]:141 [ ultoa::$10 ] : zp[1]:141 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:142 [ ultoa::digit_value#0 ] : zp[4]:142 , 
Potential registers zp[2]:146 [ ultoa_append::buffer#0 ] : zp[2]:146 , 
Potential registers zp[4]:148 [ ultoa_append::sub#0 ] : zp[4]:148 , 
Potential registers zp[4]:152 [ ultoa_append::return#0 ] : zp[4]:152 , 
Potential registers zp[1]:156 [ toupper::return#3 ] : zp[1]:156 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:157 [ strupr::$0 ] : zp[1]:157 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:158 [ memcpy::src_end#0 ] : zp[2]:158 , 
Potential registers zp[2]:160 [ memset::end#0 ] : zp[2]:160 , 
Potential registers mem[12] [ printf_buffer ] : mem[12] , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 300,125,000,000,004.25: zp[2]:68 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 200,233,333,333,337.7: zp[2]:70 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 12,512,500,000,000.25: zp[2]:158 [ memcpy::src_end#0 ] 0: zp[2]:64 [ memcpy::source#2 ] 0: zp[2]:66 [ memcpy::destination#2 ] 
Uplift Scope [memset] 333,566,666,666,672.4: zp[2]:75 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,683,333,333,333.67: zp[2]:160 [ memset::end#0 ] 14,307,142,857,145.14: zp[1]:74 [ memset::c#4 memset::c#1 ] 0: zp[2]:72 [ memset::str#3 ] 
Uplift Scope [utoa_append] 25,005,500,003.5: zp[2]:46 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] 20,005,000,002.5: zp[1]:48 [ utoa_append::digit#2 utoa_append::digit#1 ] 3,333,500,000.5: zp[2]:130 [ utoa_append::sub#0 ] 2,000,002: zp[2]:132 [ utoa_append::return#0 ] 1,375,000.25: zp[2]:128 [ utoa_append::buffer#0 ] 
Uplift Scope [] 280,701,764.11: zp[1]:78 [ conio_cursor_y ] 212,500,010.66: zp[2]:81 [ conio_line_color ] 206,542,066.44: zp[2]:79 [ conio_line_text ] 72,661,943.21: zp[1]:83 [ conio_textcolor ] 15,151,526.36: zp[1]:77 [ conio_cursor_x ] 1,501.5: zp[2]:112 [ _rand_state#3 ] 1,501.5: zp[2]:116 [ _rand_state#4 ] 1,129.39: zp[2]:22 [ _rand_state#13 _rand_state#14 ] 0: mem[12] [ printf_buffer ] 
Uplift Scope [toupper] 473,333,338.67: zp[1]:63 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] 20,000,002: zp[1]:156 [ toupper::return#3 ] 
Uplift Scope [cputc] 150,025,008.5: zp[1]:24 [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] 
Uplift Scope [ultoa_append] 25,055,003.5: zp[4]:58 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] 20,050,002.5: zp[1]:62 [ ultoa_append::digit#2 ultoa_append::digit#1 ] 3,335,000.5: zp[4]:148 [ ultoa_append::sub#0 ] 20,002: zp[4]:152 [ ultoa_append::return#0 ] 13,750.25: zp[2]:146 [ ultoa_append::buffer#0 ] 
Uplift Scope [strupr] 27,142,859.86: zp[2]:56 [ strupr::src#2 strupr::src#1 ] 20,000,002: zp[1]:157 [ strupr::$0 ] 
Uplift Scope [strlen] 30,000,003: zp[2]:49 [ strlen::str#2 strlen::str#0 ] 15,002,501.75: zp[2]:51 [ strlen::len#2 strlen::len#1 ] 20,002: zp[2]:134 [ strlen::return#2 ] 
Uplift Scope [printf_padding] 27,500,002.75: zp[1]:55 [ printf_padding::i#2 printf_padding::i#1 ] 1,731,673.33: zp[1]:53 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 1,666,666.83: zp[1]:54 [ printf_padding::pad#5 ] 
Uplift Scope [cputs] 20,150,003.5: zp[2]:20 [ cputs::s#4 cputs::s#5 cputs::s#0 ] 10,000,001: zp[1]:109 [ cputs::c#1 ] 
Uplift Scope [utoa] 3,787,146.79: zp[2]:29 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] 3,078,361.36: zp[2]:26 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] 2,285,716.57: zp[1]:25 [ utoa::digit#2 utoa::digit#1 ] 2,000,002: zp[1]:125 [ utoa::$10 ] 1,500,001.5: zp[1]:28 [ utoa::started#2 utoa::started#4 ] 600,000.6: zp[2]:126 [ utoa::digit_value#0 ] 20,002: zp[1]:122 [ utoa::$11 ] 20,002: zp[2]:123 [ utoa::buffer#3 ] 
Uplift Scope [ultoa] 38,003.93: zp[2]:44 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] 31,411.36: zp[4]:39 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] 22,859.43: zp[1]:38 [ ultoa::digit#2 ultoa::digit#1 ] 20,002: zp[1]:141 [ ultoa::$10 ] 15,001.5: zp[1]:43 [ ultoa::started#2 ultoa::started#4 ] 6,000.6: zp[4]:142 [ ultoa::digit_value#0 ] 2,002: zp[1]:138 [ ultoa::$11 ] 2,002: zp[2]:139 [ ultoa::buffer#3 ] 
Uplift Scope [printf_number_buffer] 65,006.5: zp[1]:36 [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] 11,905.95: zp[1]:37 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 10,001: zp[2]:136 [ printf_number_buffer::$19 ] 3,759.25: zp[1]:34 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 1,000.1: zp[1]:31 [ printf_number_buffer::format_min_length#2 ] 937.59: zp[1]:33 [ printf_number_buffer::format_zero_padding#10 ] 645.23: zp[1]:32 [ printf_number_buffer::format_justify_left#10 ] 384.65: zp[1]:35 [ printf_number_buffer::format_upper_case#10 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:18 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:16 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:13 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [gotoxy] 2,453.5: zp[1]:12 [ gotoxy::x#6 gotoxy::x#5 gotoxy::x#3 ] 2,002: zp[2]:99 [ gotoxy::$8 ] 2,002: zp[2]:101 [ gotoxy::$9 ] 2,002: zp[2]:105 [ gotoxy::$5 ] 2,002: zp[2]:107 [ gotoxy::$6 ] 1,501.5: zp[2]:97 [ gotoxy::$7 ] 1,262.33: zp[1]:11 [ gotoxy::y#6 gotoxy::y#5 gotoxy::y#2 gotoxy::y#3 ] 1,001: zp[2]:103 [ gotoxy::line_offset#0 ] 
Uplift Scope [_rand] 2,002: zp[2]:110 [ _rand::$0 ] 2,002: zp[2]:114 [ _rand::$1 ] 2,002: zp[2]:118 [ _rand::$2 ] 278.25: zp[2]:120 [ _rand::return#2 ] 202: zp[2]:91 [ _rand::return#1 ] 22: zp[2]:84 [ _rand::return#0 ] 
Uplift Scope [main] 256.99: zp[1]:8 [ main::row#3 main::row#7 main::row#1 ] 227.71: zp[1]:7 [ main::col#3 main::col#7 main::col#1 ] 211.68: zp[4]:3 [ main::cnt#2 main::cnt#1 ] 203.93: zp[2]:9 [ main::rnd#2 main::rnd#5 main::rnd#1 ] 202: zp[1]:88 [ main::$17 ] 5.59: zp[2]:86 [ main::first#0 ] 
Uplift Scope [printf_uint] 367.33: zp[2]:89 [ printf_uint::uvalue#0 ] 
Uplift Scope [textcolor] 101: zp[1]:19 [ textcolor::color#2 ] 
Uplift Scope [printf_ulong] 37.33: zp[4]:93 [ printf_ulong::uvalue#0 ] 
Uplift Scope [conio_c64_init] 33: zp[1]:2 [ conio_c64_init::line#2 conio_c64_init::line#0 ] 
Uplift Scope [RADIX] 
Uplift Scope [cputln] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [cscroll] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [__start] 

Uplifting [memcpy] best 237563 combination zp[2]:68 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:70 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:158 [ memcpy::src_end#0 ] zp[2]:64 [ memcpy::source#2 ] zp[2]:66 [ memcpy::destination#2 ] 
Uplifting [memset] best 236557 combination zp[2]:75 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:160 [ memset::end#0 ] reg byte x [ memset::c#4 memset::c#1 ] zp[2]:72 [ memset::str#3 ] 
Uplifting [utoa_append] best 230554 combination zp[2]:46 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ] zp[2]:130 [ utoa_append::sub#0 ] zp[2]:132 [ utoa_append::return#0 ] zp[2]:128 [ utoa_append::buffer#0 ] 
Uplifting [] best 230554 combination zp[1]:78 [ conio_cursor_y ] zp[2]:81 [ conio_line_color ] zp[2]:79 [ conio_line_text ] zp[1]:83 [ conio_textcolor ] zp[1]:77 [ conio_cursor_x ] zp[2]:112 [ _rand_state#3 ] zp[2]:116 [ _rand_state#4 ] zp[2]:22 [ _rand_state#13 _rand_state#14 ] mem[12] [ printf_buffer ] 
Uplifting [toupper] best 229347 combination reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ] reg byte a [ toupper::return#3 ] 
Uplifting [cputc] best 228738 combination reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ] 
Uplifting [ultoa_append] best 228135 combination zp[4]:58 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ] zp[4]:148 [ ultoa_append::sub#0 ] zp[4]:152 [ ultoa_append::return#0 ] zp[2]:146 [ ultoa_append::buffer#0 ] 
Uplifting [strupr] best 227535 combination zp[2]:56 [ strupr::src#2 strupr::src#1 ] reg byte a [ strupr::$0 ] 
Uplifting [strlen] best 227535 combination zp[2]:49 [ strlen::str#2 strlen::str#0 ] zp[2]:51 [ strlen::len#2 strlen::len#1 ] zp[2]:134 [ strlen::return#2 ] 
Uplifting [printf_padding] best 227535 combination zp[1]:55 [ printf_padding::i#2 printf_padding::i#1 ] zp[1]:53 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] zp[1]:54 [ printf_padding::pad#5 ] 
Uplifting [cputs] best 226835 combination zp[2]:20 [ cputs::s#4 cputs::s#5 cputs::s#0 ] reg byte a [ cputs::c#1 ] 
Uplifting [utoa] best 225731 combination zp[2]:29 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] zp[2]:26 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] zp[1]:25 [ utoa::digit#2 utoa::digit#1 ] reg byte a [ utoa::$10 ] reg byte x [ utoa::started#2 utoa::started#4 ] zp[2]:126 [ utoa::digit_value#0 ] reg byte a [ utoa::$11 ] zp[2]:123 [ utoa::buffer#3 ] 
Uplifting [ultoa] best 225617 combination zp[2]:44 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] zp[4]:39 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] zp[1]:38 [ ultoa::digit#2 ultoa::digit#1 ] reg byte a [ ultoa::$10 ] reg byte x [ ultoa::started#2 ultoa::started#4 ] zp[4]:142 [ ultoa::digit_value#0 ] reg byte a [ ultoa::$11 ] zp[2]:139 [ ultoa::buffer#3 ] 
Uplifting [printf_number_buffer] best 225606 combination reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ] zp[1]:37 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] zp[2]:136 [ printf_number_buffer::$19 ] zp[1]:34 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] reg byte x [ printf_number_buffer::format_min_length#2 ] zp[1]:33 [ printf_number_buffer::format_zero_padding#10 ] zp[1]:32 [ printf_number_buffer::format_justify_left#10 ] zp[1]:35 [ printf_number_buffer::format_upper_case#10 ] 
Limited combination testing to 100 combinations of 256 possible.
Uplifting [clrscr] best 224016 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:16 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [gotoxy] best 223923 combination reg byte x [ gotoxy::x#6 gotoxy::x#5 gotoxy::x#3 ] zp[2]:99 [ gotoxy::$8 ] zp[2]:101 [ gotoxy::$9 ] zp[2]:105 [ gotoxy::$5 ] zp[2]:107 [ gotoxy::$6 ] zp[2]:97 [ gotoxy::$7 ] reg byte a [ gotoxy::y#6 gotoxy::y#5 gotoxy::y#2 gotoxy::y#3 ] zp[2]:103 [ gotoxy::line_offset#0 ] 
Uplifting [_rand] best 223923 combination zp[2]:110 [ _rand::$0 ] zp[2]:114 [ _rand::$1 ] zp[2]:118 [ _rand::$2 ] zp[2]:120 [ _rand::return#2 ] zp[2]:91 [ _rand::return#1 ] zp[2]:84 [ _rand::return#0 ] 
Uplifting [main] best 223883 combination zp[1]:8 [ main::row#3 main::row#7 main::row#1 ] zp[1]:7 [ main::col#3 main::col#7 main::col#1 ] zp[4]:3 [ main::cnt#2 main::cnt#1 ] zp[2]:9 [ main::rnd#2 main::rnd#5 main::rnd#1 ] reg byte a [ main::$17 ] zp[2]:86 [ main::first#0 ] 
Uplifting [printf_uint] best 223883 combination zp[2]:89 [ printf_uint::uvalue#0 ] 
Uplifting [textcolor] best 223874 combination reg byte a [ textcolor::color#2 ] 
Uplifting [printf_ulong] best 223874 combination zp[4]:93 [ printf_ulong::uvalue#0 ] 
Uplifting [conio_c64_init] best 223862 combination reg byte a [ conio_c64_init::line#2 conio_c64_init::line#0 ] 
Uplifting [RADIX] best 223862 combination 
Uplifting [cputln] best 223862 combination 
Uplifting [MOS6526_CIA] best 223862 combination 
Uplifting [MOS6569_VICII] best 223862 combination 
Uplifting [MOS6581_SID] best 223862 combination 
Uplifting [cscroll] best 223862 combination 
Uplifting [printf_format_number] best 223862 combination 
Uplifting [printf_buffer_number] best 223862 combination 
Uplifting [printf_format_string] best 223862 combination 
Uplifting [__start] best 223862 combination 
Attempting to uplift remaining variables inzp[1]:78 [ conio_cursor_y ]
Uplifting [] best 223862 combination zp[1]:78 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:83 [ conio_textcolor ]
Uplifting [] best 223862 combination zp[1]:83 [ conio_textcolor ] 
Attempting to uplift remaining variables inzp[1]:55 [ printf_padding::i#2 printf_padding::i#1 ]
Uplifting [printf_padding] best 223862 combination zp[1]:55 [ printf_padding::i#2 printf_padding::i#1 ] 
Attempting to uplift remaining variables inzp[1]:77 [ conio_cursor_x ]
Uplifting [] best 223862 combination zp[1]:77 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:25 [ utoa::digit#2 utoa::digit#1 ]
Uplifting [utoa] best 223862 combination zp[1]:25 [ utoa::digit#2 utoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:53 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Uplifting [printf_padding] best 223862 combination zp[1]:53 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ] 
Attempting to uplift remaining variables inzp[1]:54 [ printf_padding::pad#5 ]
Uplifting [printf_padding] best 223862 combination zp[1]:54 [ printf_padding::pad#5 ] 
Attempting to uplift remaining variables inzp[1]:38 [ ultoa::digit#2 ultoa::digit#1 ]
Uplifting [ultoa] best 223862 combination zp[1]:38 [ ultoa::digit#2 ultoa::digit#1 ] 
Attempting to uplift remaining variables inzp[1]:37 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Uplifting [printf_number_buffer] best 223862 combination zp[1]:37 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ] 
Attempting to uplift remaining variables inzp[1]:34 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Uplifting [printf_number_buffer] best 223862 combination zp[1]:34 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ] 
Attempting to uplift remaining variables inzp[1]:33 [ printf_number_buffer::format_zero_padding#10 ]
Uplifting [printf_number_buffer] best 223862 combination zp[1]:33 [ printf_number_buffer::format_zero_padding#10 ] 
Attempting to uplift remaining variables inzp[1]:32 [ printf_number_buffer::format_justify_left#10 ]
Uplifting [printf_number_buffer] best 223862 combination zp[1]:32 [ printf_number_buffer::format_justify_left#10 ] 
Attempting to uplift remaining variables inzp[1]:35 [ printf_number_buffer::format_upper_case#10 ]
Uplifting [printf_number_buffer] best 223862 combination zp[1]:35 [ printf_number_buffer::format_upper_case#10 ] 
Attempting to uplift remaining variables inzp[1]:8 [ main::row#3 main::row#7 main::row#1 ]
Uplifting [main] best 223862 combination zp[1]:8 [ main::row#3 main::row#7 main::row#1 ] 
Attempting to uplift remaining variables inzp[1]:7 [ main::col#3 main::col#7 main::col#1 ]
Uplifting [main] best 223862 combination zp[1]:7 [ main::col#3 main::col#7 main::col#1 ] 
Coalescing zero page register [ zp[4]:3 [ main::cnt#2 main::cnt#1 ] ] with [ zp[4]:93 [ printf_ulong::uvalue#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ main::rnd#2 main::rnd#5 main::rnd#1 ] ] with [ zp[2]:89 [ printf_uint::uvalue#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ main::rnd#2 main::rnd#5 main::rnd#1 printf_uint::uvalue#0 ] ] with [ zp[2]:91 [ _rand::return#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ _rand_state#13 _rand_state#14 ] ] with [ zp[2]:112 [ _rand_state#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:22 [ _rand_state#13 _rand_state#14 _rand_state#3 ] ] with [ zp[2]:116 [ _rand_state#4 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 ] ] with [ zp[2]:46 [ utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:26 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 ] ] with [ zp[2]:132 [ utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:29 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 ] ] with [ zp[2]:123 [ utoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:29 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 ] ] with [ zp[2]:128 [ utoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:39 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ] ] with [ zp[4]:58 [ ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] - score: 1
Coalescing zero page register [ zp[4]:39 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ] ] with [ zp[4]:152 [ ultoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:44 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ] ] with [ zp[2]:139 [ ultoa::buffer#3 ] ] - score: 1
Coalescing zero page register [ zp[2]:44 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ] ] with [ zp[2]:146 [ ultoa_append::buffer#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:134 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ memcpy::source#2 ] ] with [ zp[2]:68 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:66 [ memcpy::destination#2 ] ] with [ zp[2]:70 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:72 [ memset::str#3 ] ] with [ zp[2]:75 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:84 [ _rand::return#0 ] ] with [ zp[2]:86 [ main::first#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:97 [ gotoxy::$7 ] ] with [ zp[2]:101 [ gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:103 [ gotoxy::line_offset#0 ] ] with [ zp[2]:107 [ gotoxy::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:126 [ utoa::digit_value#0 ] ] with [ zp[2]:130 [ utoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:142 [ ultoa::digit_value#0 ] ] with [ zp[4]:148 [ ultoa_append::sub#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:3 [ main::cnt#2 main::cnt#1 printf_ulong::uvalue#0 ] ] with [ zp[4]:39 [ ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ main::rnd#2 main::rnd#5 main::rnd#1 printf_uint::uvalue#0 _rand::return#1 ] ] with [ zp[2]:26 [ utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:9 [ main::rnd#2 main::rnd#5 main::rnd#1 printf_uint::uvalue#0 _rand::return#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 ] ] with [ zp[2]:120 [ _rand::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:51 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:136 [ printf_number_buffer::$19 ] ] - score: 1
Coalescing zero page register [ zp[2]:97 [ gotoxy::$7 gotoxy::$9 ] ] with [ zp[2]:103 [ gotoxy::line_offset#0 gotoxy::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:20 [ cputs::s#4 cputs::s#5 cputs::s#0 ] ] with [ zp[2]:14 [ clrscr::line_text#5 clrscr::line_text#1 ] ]
Coalescing zero page register [ zp[2]:29 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 ] ] with [ zp[2]:16 [ clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[1]:32 [ printf_number_buffer::format_justify_left#10 ] ] with [ zp[1]:25 [ utoa::digit#2 utoa::digit#1 ] ]
Coalescing zero page register [ zp[1]:38 [ ultoa::digit#2 ultoa::digit#1 ] ] with [ zp[1]:33 [ printf_number_buffer::format_zero_padding#10 ] ]
Coalescing zero page register [ zp[2]:49 [ strlen::str#2 strlen::str#0 ] ] with [ zp[2]:44 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 ] ]
Coalescing zero page register [ zp[2]:64 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:56 [ strupr::src#2 strupr::src#1 ] ]
Coalescing zero page register [ zp[2]:72 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:66 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[2]:110 [ _rand::$0 ] ] with [ zp[2]:51 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ]
Coalescing zero page register [ zp[2]:126 [ utoa::digit_value#0 utoa_append::sub#0 ] ] with [ zp[2]:114 [ _rand::$1 ] ]
Coalescing zero page register [ zp[2]:158 [ memcpy::src_end#0 ] ] with [ zp[2]:118 [ _rand::$2 ] ]
Coalescing zero page register [ zp[2]:49 [ strlen::str#2 strlen::str#0 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 ] ] with [ zp[2]:20 [ cputs::s#4 cputs::s#5 cputs::s#0 clrscr::line_text#5 clrscr::line_text#1 ] ]
Coalescing zero page register [ zp[2]:64 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 strupr::src#2 strupr::src#1 ] ] with [ zp[2]:29 [ utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[2]:110 [ _rand::$0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 ] ] with [ zp[2]:72 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ]
Coalescing zero page register [ zp[2]:160 [ memset::end#0 ] ] with [ zp[2]:126 [ utoa::digit_value#0 utoa_append::sub#0 _rand::$1 ] ]
Allocated (was zp[4]:3) zp[4]:2 [ main::cnt#2 main::cnt#1 printf_ulong::uvalue#0 ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
Allocated (was zp[1]:7) zp[1]:6 [ main::col#3 main::col#7 main::col#1 ]
Allocated (was zp[1]:8) zp[1]:7 [ main::row#3 main::row#7 main::row#1 ]
Allocated (was zp[2]:9) zp[2]:8 [ main::rnd#2 main::rnd#5 main::rnd#1 printf_uint::uvalue#0 _rand::return#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 _rand::return#2 ]
Allocated (was zp[2]:22) zp[2]:10 [ _rand_state#13 _rand_state#14 _rand_state#3 _rand_state#4 ]
Allocated (was zp[1]:32) zp[1]:12 [ printf_number_buffer::format_justify_left#10 utoa::digit#2 utoa::digit#1 ]
Allocated (was zp[1]:34) zp[1]:13 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
Allocated (was zp[1]:35) zp[1]:14 [ printf_number_buffer::format_upper_case#10 ]
Allocated (was zp[1]:37) zp[1]:15 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
Allocated (was zp[1]:38) zp[1]:16 [ ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_zero_padding#10 ]
Allocated (was zp[2]:49) zp[2]:17 [ strlen::str#2 strlen::str#0 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 cputs::s#4 cputs::s#5 cputs::s#0 clrscr::line_text#5 clrscr::line_text#1 ]
Allocated (was zp[1]:53) zp[1]:19 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
Allocated (was zp[1]:54) zp[1]:20 [ printf_padding::pad#5 ]
Allocated (was zp[1]:55) zp[1]:21 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated (was zp[2]:64) zp[2]:22 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 strupr::src#2 strupr::src#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[1]:77) zp[1]:24 [ conio_cursor_x ]
Allocated (was zp[1]:78) zp[1]:25 [ conio_cursor_y ]
Allocated (was zp[2]:79) zp[2]:26 [ conio_line_text ]
Allocated (was zp[2]:81) zp[2]:28 [ conio_line_color ]
Allocated (was zp[1]:83) zp[1]:30 [ conio_textcolor ]
Allocated (was zp[2]:84) zp[2]:31 [ _rand::return#0 main::first#0 ]
Allocated (was zp[2]:97) zp[2]:33 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
Allocated (was zp[2]:99) zp[2]:35 [ gotoxy::$8 ]
Allocated (was zp[2]:105) zp[2]:37 [ gotoxy::$5 ]
Allocated (was zp[2]:110) zp[2]:39 [ _rand::$0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated (was zp[4]:142) zp[4]:41 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
Allocated (was zp[2]:158) zp[2]:45 [ memcpy::src_end#0 _rand::$2 ]
Allocated (was zp[2]:160) zp[2]:47 [ memset::end#0 utoa::digit_value#0 utoa_append::sub#0 _rand::$1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test the xorshift pseudorandom number generator
// Source http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html
// Information https://en.wikipedia.org/wiki/Xorshift
  // Upstart
  // Commodore 64 PRG executable file
.file [name="prng-xorshift.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const WHITE = 1
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = $18
  // The current cursor y-position
  .label conio_cursor_y = $19
  // The current text cursor line start
  .label conio_line_text = $1a
  // The current color cursor line start
  .label conio_line_color = $1c
  // The current text color
  .label conio_textcolor = $1e
  // The maximal random value
  // The random state variable
  .label _rand_state = $a
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] conio_textcolor = LIGHT_BLUE -- vbuz1=vbuc1 
    lda #LIGHT_BLUE
    sta.z conio_textcolor
    // [6] call conio_c64_init 
    jsr conio_c64_init
    // [7] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [8] call main 
    // [17] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [9] return 
    rts
}
  // conio_c64_init
// Set initial cursor position
conio_c64_init: {
    // Position cursor at current line
    .label BASIC_CURSOR_LINE = $d6
    // [10] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE -- vbuaa=_deref_pbuc1 
    lda BASIC_CURSOR_LINE
    // [11] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2 -- vbuaa_lt_vbuc1_then_la1 
    cmp #$19
    bcc __b2_from_conio_c64_init
    // [13] phi from conio_c64_init to conio_c64_init::@1 [phi:conio_c64_init->conio_c64_init::@1]
  __b1_from_conio_c64_init:
    // [13] phi conio_c64_init::line#2 = $19-1 [phi:conio_c64_init->conio_c64_init::@1#0] -- vbuaa=vbuc1 
    lda #$19-1
    jmp __b1
    // [12] phi from conio_c64_init to conio_c64_init::@2 [phi:conio_c64_init->conio_c64_init::@2]
  __b2_from_conio_c64_init:
    jmp __b2
    // conio_c64_init::@2
  __b2:
    // [13] phi from conio_c64_init::@2 to conio_c64_init::@1 [phi:conio_c64_init::@2->conio_c64_init::@1]
  __b1_from___b2:
    // [13] phi conio_c64_init::line#2 = conio_c64_init::line#0 [phi:conio_c64_init::@2->conio_c64_init::@1#0] -- register_copy 
    jmp __b1
    // conio_c64_init::@1
  __b1:
    // [14] gotoxy::y#2 = conio_c64_init::line#2
    // [15] call gotoxy 
    // [55] phi from conio_c64_init::@1 to gotoxy [phi:conio_c64_init::@1->gotoxy]
  gotoxy_from___b1:
    // [55] phi gotoxy::x#5 = 0 [phi:conio_c64_init::@1->gotoxy#0] -- vbuxx=vbuc1 
    ldx #0
    // [55] phi gotoxy::y#5 = gotoxy::y#2 [phi:conio_c64_init::@1->gotoxy#1] -- register_copy 
    jsr gotoxy
    jmp __breturn
    // conio_c64_init::@return
  __breturn:
    // [16] return 
    rts
}
  // main
main: {
    .label first = $1f
    .label cnt = 2
    .label rnd = 8
    .label row = 7
    .label col = 6
    // [18] call clrscr 
    // [73] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [19] phi from main to main::@6 [phi:main->main::@6]
  __b6_from_main:
    jmp __b6
    // main::@6
  __b6:
    // [20] call textcolor 
    // [89] phi from main::@6 to textcolor [phi:main::@6->textcolor]
  textcolor_from___b6:
    // [89] phi textcolor::color#2 = WHITE [phi:main::@6->textcolor#0] -- vbuaa=vbuc1 
    lda #WHITE
    jsr textcolor
    // [21] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [22] call cputs 
    // [92] phi from main::@7 to cputs [phi:main::@7->cputs]
  cputs_from___b7:
    // [92] phi cputs::s#5 = main::s [phi:main::@7->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [23] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
  __b8_from___b7:
    jmp __b8
    // main::@8
  __b8:
    // [24] call _rand 
    // [100] phi from main::@8 to _rand [phi:main::@8->_rand]
  _rand_from___b8:
    // [100] phi _rand_state#13 = 1 [phi:main::@8->_rand#0] -- vwuz1=vwuc1 
    lda #<1
    sta.z _rand_state
    lda #>1
    sta.z _rand_state+1
    jsr _rand
    // [25] _rand::return#0 = _rand::return#2 -- vwuz1=vwuz2 
    lda.z _rand.return_1
    sta.z _rand.return
    lda.z _rand.return_1+1
    sta.z _rand.return+1
    jmp __b9
    // main::@9
  __b9:
    // [26] main::first#0 = _rand::return#0
    // [27] call textcolor 
    // [89] phi from main::@9 to textcolor [phi:main::@9->textcolor]
  textcolor_from___b9:
    // [89] phi textcolor::color#2 = LIGHT_BLUE [phi:main::@9->textcolor#0] -- vbuaa=vbuc1 
    lda #LIGHT_BLUE
    jsr textcolor
    jmp __b10
    // main::@10
  __b10:
    // [28] main::rnd#5 = main::first#0 -- vwuz1=vwuz2 
    lda.z first
    sta.z rnd
    lda.z first+1
    sta.z rnd+1
    // [29] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
  __b1_from___b10:
    // [29] phi main::rnd#2 = main::rnd#5 [phi:main::@10->main::@1#0] -- register_copy 
    // [29] phi main::row#3 = 1 [phi:main::@10->main::@1#1] -- vbuz1=vbuc1 
    lda #1
    sta.z row
    // [29] phi main::col#3 = 3 [phi:main::@10->main::@1#2] -- vbuz1=vbuc1 
    lda #3
    sta.z col
    // [29] phi main::cnt#2 = 0 [phi:main::@10->main::@1#3] -- vduz1=vduc1 
    lda #<0
    sta.z cnt
    lda #>0
    sta.z cnt+1
    lda #<0>>$10
    sta.z cnt+2
    lda #>0>>$10
    sta.z cnt+3
    jmp __b1
    // [29] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
  __b1_from___b11:
    // [29] phi main::rnd#2 = main::rnd#1 [phi:main::@11->main::@1#0] -- register_copy 
    // [29] phi main::row#3 = main::row#7 [phi:main::@11->main::@1#1] -- register_copy 
    // [29] phi main::col#3 = main::col#7 [phi:main::@11->main::@1#2] -- register_copy 
    // [29] phi main::cnt#2 = main::cnt#1 [phi:main::@11->main::@1#3] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [30] main::cnt#1 = ++ main::cnt#2 -- vduz1=_inc_vduz1 
    inc.z cnt
    bne !+
    inc.z cnt+1
    bne !+
    inc.z cnt+2
    bne !+
    inc.z cnt+3
  !:
    // [31] main::$17 = (byte)main::cnt#1 -- vbuaa=_byte_vduz1 
    lda.z cnt
    // [32] if(main::$17!=0) goto main::@2 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b2_from___b1
    jmp __b3
    // main::@3
  __b3:
    // [33] gotoxy::x#3 = main::col#3 -- vbuxx=vbuz1 
    ldx.z col
    // [34] gotoxy::y#3 = main::row#3 -- vbuaa=vbuz1 
    lda.z row
    // [35] call gotoxy 
    // [55] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
  gotoxy_from___b3:
    // [55] phi gotoxy::x#5 = gotoxy::x#3 [phi:main::@3->gotoxy#0] -- register_copy 
    // [55] phi gotoxy::y#5 = gotoxy::y#3 [phi:main::@3->gotoxy#1] -- register_copy 
    jsr gotoxy
    jmp __b12
    // main::@12
  __b12:
    // [36] printf_uint::uvalue#0 = main::rnd#2
    // [37] call printf_uint 
    // [109] phi from main::@12 to printf_uint [phi:main::@12->printf_uint]
  printf_uint_from___b12:
    jsr printf_uint
    jmp __b13
    // main::@13
  __b13:
    // [38] main::row#1 = ++ main::row#3 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [39] if(main::row#1!=$19) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z row
    bne __b2_from___b13
    jmp __b4
    // main::@4
  __b4:
    // [40] main::col#1 = main::col#3 + 6 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z col
    axs #-[6]
    stx.z col
    // [41] if(main::col#1<$28-5+1) goto main::@16 -- vbuz1_lt_vbuc1_then_la1 
    lda.z col
    cmp #$28-5+1
    bcc __b16_from___b4
    // [43] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    // [43] phi main::row#7 = 1 [phi:main::@4->main::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z row
    // [43] phi main::col#7 = 3 [phi:main::@4->main::@2#1] -- vbuz1=vbuc1 
    lda #3
    sta.z col
    jmp __b2
    // [42] phi from main::@4 to main::@16 [phi:main::@4->main::@16]
  __b16_from___b4:
    jmp __b16
    // main::@16
  __b16:
    // [43] phi from main::@16 to main::@2 [phi:main::@16->main::@2]
  __b2_from___b16:
    // [43] phi main::row#7 = 1 [phi:main::@16->main::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z row
    // [43] phi main::col#7 = main::col#1 [phi:main::@16->main::@2#1] -- register_copy 
    jmp __b2
    // [43] phi from main::@1 main::@13 to main::@2 [phi:main::@1/main::@13->main::@2]
  __b2_from___b1:
  __b2_from___b13:
    // [43] phi main::row#7 = main::row#3 [phi:main::@1/main::@13->main::@2#0] -- register_copy 
    // [43] phi main::col#7 = main::col#3 [phi:main::@1/main::@13->main::@2#1] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [44] call _rand 
    // [100] phi from main::@2 to _rand [phi:main::@2->_rand]
  _rand_from___b2:
    // [100] phi _rand_state#13 = _rand_state#14 [phi:main::@2->_rand#0] -- register_copy 
    jsr _rand
    // [45] _rand::return#1 = _rand::return#2
    jmp __b11
    // main::@11
  __b11:
    // [46] main::rnd#1 = _rand::return#1
    // [47] if(main::rnd#1!=main::first#0) goto main::@1 -- vwuz1_neq_vwuz2_then_la1 
    lda.z rnd+1
    cmp.z first+1
    bne __b1_from___b11
    lda.z rnd
    cmp.z first
    bne __b1_from___b11
    // [48] phi from main::@11 to main::@5 [phi:main::@11->main::@5]
  __b5_from___b11:
    jmp __b5
    // main::@5
  __b5:
    // [49] call gotoxy 
    // [55] phi from main::@5 to gotoxy [phi:main::@5->gotoxy]
  gotoxy_from___b5:
    // [55] phi gotoxy::x#5 = $1c [phi:main::@5->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$1c
    // [55] phi gotoxy::y#5 = 0 [phi:main::@5->gotoxy#1] -- vbuaa=vbuc1 
    lda #0
    jsr gotoxy
    // [50] phi from main::@5 to main::@14 [phi:main::@5->main::@14]
  __b14_from___b5:
    jmp __b14
    // main::@14
  __b14:
    // [51] call cputs 
    // [92] phi from main::@14 to cputs [phi:main::@14->cputs]
  cputs_from___b14:
    // [92] phi cputs::s#5 = main::s1 [phi:main::@14->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // main::@15
  __b15:
    // [52] printf_ulong::uvalue#0 = main::cnt#1
    // [53] call printf_ulong 
    // [116] phi from main::@15 to printf_ulong [phi:main::@15->printf_ulong]
  printf_ulong_from___b15:
    jsr printf_ulong
    jmp __breturn
    // main::@return
  __breturn:
    // [54] return 
    rts
  .segment Data
    s: .text "generating unique randoms..."
    .byte 0
    s1: .text "found "
    .byte 0
}
.segment Code
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) x, byte register(A) y)
gotoxy: {
    .label __5 = $25
    .label __6 = $21
    .label __7 = $21
    .label line_offset = $21
    .label __8 = $23
    .label __9 = $21
    // [56] if(gotoxy::y#5<$19+1) goto gotoxy::@3 -- vbuaa_lt_vbuc1_then_la1 
    cmp #$19+1
    bcc __b3_from_gotoxy
    // [58] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [58] phi gotoxy::y#6 = 0 [phi:gotoxy->gotoxy::@1#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b1
    // [57] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [58] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [58] phi gotoxy::y#6 = gotoxy::y#5 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    // [59] if(gotoxy::x#5<$28) goto gotoxy::@4 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b4_from___b1
    // [61] phi from gotoxy::@1 to gotoxy::@2 [phi:gotoxy::@1->gotoxy::@2]
  __b2_from___b1:
    // [61] phi gotoxy::x#6 = 0 [phi:gotoxy::@1->gotoxy::@2#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [60] phi from gotoxy::@1 to gotoxy::@4 [phi:gotoxy::@1->gotoxy::@4]
  __b4_from___b1:
    jmp __b4
    // gotoxy::@4
  __b4:
    // [61] phi from gotoxy::@4 to gotoxy::@2 [phi:gotoxy::@4->gotoxy::@2]
  __b2_from___b4:
    // [61] phi gotoxy::x#6 = gotoxy::x#5 [phi:gotoxy::@4->gotoxy::@2#0] -- register_copy 
    jmp __b2
    // gotoxy::@2
  __b2:
    // [62] conio_cursor_x = gotoxy::x#6 -- vbuz1=vbuxx 
    stx.z conio_cursor_x
    // [63] conio_cursor_y = gotoxy::y#6 -- vbuz1=vbuaa 
    sta.z conio_cursor_y
    // [64] gotoxy::$7 = (word)gotoxy::y#6 -- vwuz1=_word_vbuaa 
    sta.z __7
    lda #0
    sta.z __7+1
    // [65] gotoxy::$8 = gotoxy::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [66] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [67] gotoxy::line_offset#0 = gotoxy::$9 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // [68] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z line_offset
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // [69] conio_line_text = gotoxy::$5 -- pbuz1=pbuz2 
    lda.z __5
    sta.z conio_line_text
    lda.z __5+1
    sta.z conio_line_text+1
    // [70] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // [71] conio_line_color = gotoxy::$6 -- pbuz1=pbuz2 
    lda.z __6
    sta.z conio_line_color
    lda.z __6+1
    sta.z conio_line_color+1
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [72] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = $11
    .label line_cols = $16
    // [74] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [74] phi clrscr::line_cols#5 = COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [74] phi clrscr::line_text#5 = DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [74] phi clrscr::l#2 = 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [75] if(clrscr::l#2<$19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [76] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [77] conio_cursor_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [78] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [79] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [80] return 
    rts
    // [81] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [81] phi clrscr::c#2 = 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // clrscr::@3
  __b3:
    // [82] if(clrscr::c#2<$28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [83] clrscr::line_text#1 = clrscr::line_text#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [84] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [85] clrscr::l#1 = ++ clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [74] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [74] phi clrscr::line_cols#5 = clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [74] phi clrscr::line_text#5 = clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [74] phi clrscr::l#2 = clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [86] clrscr::line_text#5[clrscr::c#2] = ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [87] clrscr::line_cols#5[clrscr::c#2] = conio_textcolor -- pbuz1_derefidx_vbuyy=vbuz2 
    lda.z conio_textcolor
    sta (line_cols),y
    // [88] clrscr::c#1 = ++ clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [81] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [81] phi clrscr::c#2 = clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // textcolor
// Set the color for text output. The old color setting is returned.
// textcolor(byte register(A) color)
textcolor: {
    // [90] conio_textcolor = textcolor::color#2 -- vbuz1=vbuaa 
    sta.z conio_textcolor
    jmp __breturn
    // textcolor::@return
  __breturn:
    // [91] return 
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(const byte* zp($11) s)
cputs: {
    .label s = $11
    // [93] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
  __b1_from_cputs:
  __b1_from___b2:
    // [93] phi cputs::s#4 = cputs::s#5 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    jmp __b1
    // cputs::@1
  __b1:
    // [94] cputs::c#1 = *cputs::s#4 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [95] cputs::s#0 = ++ cputs::s#4 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [96] if(0!=cputs::c#1) goto cputs::@2 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    jmp __breturn
    // cputs::@return
  __breturn:
    // [97] return 
    rts
    // cputs::@2
  __b2:
    // [98] cputc::c#0 = cputs::c#1
    // [99] call cputc 
    // [123] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
  cputc_from___b2:
    // [123] phi cputc::c#3 = cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1_from___b2
}
  // _rand
// Returns a pseudo-random number in the range of 0 to RAND_MAX (65535)
_rand: {
    .label __0 = $27
    .label __1 = $2f
    .label __2 = $2d
    .label return = $1f
    .label return_1 = 8
    // [101] _rand::$0 = _rand_state#13 << 7 -- vwuz1=vwuz2_rol_7 
    lda.z _rand_state+1
    lsr
    lda.z _rand_state
    ror
    sta.z __0+1
    lda #0
    ror
    sta.z __0
    // [102] _rand_state#3 = _rand_state#13 ^ _rand::$0 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z _rand_state
    eor.z __0
    sta.z _rand_state
    lda.z _rand_state+1
    eor.z __0+1
    sta.z _rand_state+1
    // [103] _rand::$1 = _rand_state#3 >> 9 -- vwuz1=vwuz2_ror_9 
    lda.z _rand_state+1
    lsr
    sta.z __1
    lda #0
    sta.z __1+1
    // [104] _rand_state#4 = _rand_state#3 ^ _rand::$1 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z _rand_state
    eor.z __1
    sta.z _rand_state
    lda.z _rand_state+1
    eor.z __1+1
    sta.z _rand_state+1
    // [105] _rand::$2 = _rand_state#4 << 8 -- vwuz1=vwuz2_rol_8 
    lda.z _rand_state
    sta.z __2+1
    lda #0
    sta.z __2
    // [106] _rand_state#14 = _rand_state#4 ^ _rand::$2 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z _rand_state
    eor.z __2
    sta.z _rand_state
    lda.z _rand_state+1
    eor.z __2+1
    sta.z _rand_state+1
    // [107] _rand::return#2 = _rand_state#14 -- vwuz1=vwuz2 
    lda.z _rand_state
    sta.z return_1
    lda.z _rand_state+1
    sta.z return_1+1
    jmp __breturn
    // _rand::@return
  __breturn:
    // [108] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
// printf_uint(word zp(8) uvalue)
printf_uint: {
    .const format_min_length = 5
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    jmp __b1
    // printf_uint::@1
  __b1:
    // [110] *((byte*)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [111] utoa::value#1 = printf_uint::uvalue#0
    // [112] call utoa 
  // Format number into buffer
    // [134] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
  utoa_from___b1:
    jsr utoa
    jmp __b2
    // printf_uint::@2
  __b2:
    // [113] printf_number_buffer::buffer_sign#1 = *((byte*)&printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [114] call printf_number_buffer 
  // Print using format
    // [155] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [155] phi printf_number_buffer::format_upper_case#10 = printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [155] phi printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [155] phi printf_number_buffer::format_zero_padding#10 = printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [155] phi printf_number_buffer::format_justify_left#10 = printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [155] phi printf_number_buffer::format_min_length#2 = printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_uint::@return
  __breturn:
    // [115] return 
    rts
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp(2) uvalue)
printf_ulong: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 2
    jmp __b1
    // printf_ulong::@1
  __b1:
    // [117] *((byte*)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // [118] ultoa::value#1 = printf_ulong::uvalue#0
    // [119] call ultoa 
  // Format number into buffer
    // [192] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
  ultoa_from___b1:
    jsr ultoa
    jmp __b2
    // printf_ulong::@2
  __b2:
    // [120] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [121] call printf_number_buffer 
  // Print using format
    // [155] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
  printf_number_buffer_from___b2:
    // [155] phi printf_number_buffer::format_upper_case#10 = printf_ulong::format_upper_case#0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [155] phi printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [155] phi printf_number_buffer::format_zero_padding#10 = printf_ulong::format_zero_padding#0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [155] phi printf_number_buffer::format_justify_left#10 = printf_ulong::format_justify_left#0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [155] phi printf_number_buffer::format_min_length#2 = printf_ulong::format_min_length#0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    jmp __breturn
    // printf_ulong::@return
  __breturn:
    // [122] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [124] if(cputc::c#3==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [125] conio_line_text[conio_cursor_x] = cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [126] conio_line_color[conio_cursor_x] = conio_textcolor -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z conio_textcolor
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [127] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [128] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [129] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [130] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [131] return 
    rts
    // [132] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [133] call cputln 
    jsr cputln
    jmp __breturn
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp(8) value, byte* zp($16) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $2f
    .label buffer = $16
    .label digit = $c
    .label value = 8
    // [135] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
  __b1_from_utoa:
    // [135] phi utoa::buffer#11 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [135] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [135] phi utoa::value#2 = utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [135] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // utoa::@1
  __b1:
    // [136] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // utoa::@3
  __b3:
    // [137] utoa::$11 = (byte)utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [138] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [139] utoa::buffer#3 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [140] *utoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa::@return
  __breturn:
    // [141] return 
    rts
    // utoa::@2
  __b2:
    // [142] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [143] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // [144] if(0!=utoa::started#2) goto utoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // utoa::@7
  __b7:
    // [145] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    lda.z digit_value+1
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [146] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
  __b4_from___b7:
    // [146] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [146] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [146] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    jmp __b4
    // utoa::@4
  __b4:
    // [147] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [135] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
  __b1_from___b4:
    // [135] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [135] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [135] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [135] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // [148] utoa_append::buffer#0 = utoa::buffer#11
    // [149] utoa_append::value#0 = utoa::value#2
    // [150] utoa_append::sub#0 = utoa::digit_value#0
    // [151] call utoa_append 
    // [219] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
  utoa_append_from___b5:
    jsr utoa_append
    // [152] utoa_append::return#0 = utoa_append::value#2
    jmp __b6
    // utoa::@6
  __b6:
    // [153] utoa::value#0 = utoa_append::return#0
    // [154] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [146] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
  __b4_from___b6:
    // [146] phi utoa::buffer#14 = utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [146] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [146] phi utoa::value#6 = utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($d) buffer_sign, byte register(X) format_min_length, byte zp($c) format_justify_left, byte zp($10) format_zero_padding, byte zp($e) format_upper_case)
printf_number_buffer: {
    .label __19 = $27
    .label buffer_sign = $d
    .label padding = $f
    .label format_zero_padding = $10
    .label format_justify_left = $c
    .label format_upper_case = $e
    // [156] if(0==printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1 -- 0_eq_vbuxx_then_la1 
    cpx #0
    beq __b1_from_printf_number_buffer
    // [157] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
  __b6_from_printf_number_buffer:
    jmp __b6
    // printf_number_buffer::@6
  __b6:
    // [158] call strlen 
    // [226] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
  strlen_from___b6:
    jsr strlen
    // [159] strlen::return#2 = strlen::len#2
    jmp __b14
    // printf_number_buffer::@14
  __b14:
    // [160] printf_number_buffer::$19 = strlen::return#2
    // [161] printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19 -- vbsyy=_sbyte_vwuz1 
    // There is a minimum length - work out the padding
    ldy.z __19
    // [162] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- 0_eq_vbuz1_then_la1 
    lda.z buffer_sign
    beq __b13_from___b14
    jmp __b7
    // printf_number_buffer::@7
  __b7:
    // [163] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0 -- vbsyy=_inc_vbsyy 
    iny
    // [164] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
  __b13_from___b14:
  __b13_from___b7:
    // [164] phi printf_number_buffer::len#2 = printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    jmp __b13
    // printf_number_buffer::@13
  __b13:
    // [165] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#2 - printf_number_buffer::len#2 -- vbsz1=vbsxx_minus_vbsyy 
    txa
    sty.z $ff
    sec
    sbc.z $ff
    sta.z padding
    // [166] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b21_from___b13
    // [168] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b1_from_printf_number_buffer:
  __b1_from___b13:
    // [168] phi printf_number_buffer::padding#10 = 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [167] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
  __b21_from___b13:
    jmp __b21
    // printf_number_buffer::@21
  __b21:
    // [168] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
  __b1_from___b21:
    // [168] phi printf_number_buffer::padding#10 = printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    jmp __b1
    // printf_number_buffer::@1
  __b1:
    // [169] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- 0_neq_vbuz1_then_la1 
    lda.z format_justify_left
    bne __b2
    jmp __b17
    // printf_number_buffer::@17
  __b17:
    // [170] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- 0_neq_vbuz1_then_la1 
    lda.z format_zero_padding
    bne __b2
    jmp __b16
    // printf_number_buffer::@16
  __b16:
    // [171] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- 0_neq_vbsz1_then_la1 
    lda.z padding
    cmp #0
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // [172] printf_padding::length#0 = (byte)printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [173] call printf_padding 
    // [232] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
  printf_padding_from___b8:
    // [232] phi printf_padding::pad#5 = ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [232] phi printf_padding::length#4 = printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_number_buffer::@2
  __b2:
    // [174] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- 0_eq_vbuz1_then_la1 
    lda.z buffer_sign
    beq __b3
    jmp __b9
    // printf_number_buffer::@9
  __b9:
    // [175] cputc::c#2 = printf_number_buffer::buffer_sign#10 -- vbuaa=vbuz1 
    lda.z buffer_sign
    // [176] call cputc 
    // [123] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
  cputc_from___b9:
    // [123] phi cputc::c#3 = cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_number_buffer::@3
  __b3:
    // [177] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- 0_eq_vbuz1_then_la1 
    lda.z format_zero_padding
    beq __b4
    jmp __b18
    // printf_number_buffer::@18
  __b18:
    // [178] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- 0_neq_vbsz1_then_la1 
    lda.z padding
    cmp #0
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // [179] printf_padding::length#1 = (byte)printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [180] call printf_padding 
    // [232] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
  printf_padding_from___b10:
    // [232] phi printf_padding::pad#5 = '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [232] phi printf_padding::length#4 = printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b4
    // printf_number_buffer::@4
  __b4:
    // [181] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- 0_eq_vbuz1_then_la1 
    lda.z format_upper_case
    beq __b5_from___b4
    // [182] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
  __b11_from___b4:
    jmp __b11
    // printf_number_buffer::@11
  __b11:
    // [183] call strupr 
    // [239] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
  strupr_from___b11:
    jsr strupr
    // [184] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
  __b5_from___b11:
  __b5_from___b4:
    jmp __b5
    // printf_number_buffer::@5
  __b5:
    // [185] call cputs 
    // [92] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
  cputs_from___b5:
    // [92] phi cputs::s#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    jmp __b15
    // printf_number_buffer::@15
  __b15:
    // [186] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- 0_eq_vbuz1_then_la1 
    lda.z format_justify_left
    beq __breturn
    jmp __b20
    // printf_number_buffer::@20
  __b20:
    // [187] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- 0_neq_vbuz1_then_la1 
    lda.z format_zero_padding
    bne __breturn
    jmp __b19
    // printf_number_buffer::@19
  __b19:
    // [188] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- 0_neq_vbsz1_then_la1 
    lda.z padding
    cmp #0
    bne __b12
    jmp __breturn
    // printf_number_buffer::@12
  __b12:
    // [189] printf_padding::length#2 = (byte)printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [190] call printf_padding 
    // [232] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
  printf_padding_from___b12:
    // [232] phi printf_padding::pad#5 = ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [232] phi printf_padding::length#4 = printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_number_buffer::@return
  __breturn:
    // [191] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp(2) value, byte* zp($11) buffer)
ultoa: {
    .const max_digits = $a
    .label digit_value = $29
    .label buffer = $11
    .label digit = $10
    .label value = 2
    // [193] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
  __b1_from_ultoa:
    // [193] phi ultoa::buffer#11 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [193] phi ultoa::started#2 = 0 [phi:ultoa->ultoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [193] phi ultoa::value#2 = ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [193] phi ultoa::digit#2 = 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta.z digit
    jmp __b1
    // ultoa::@1
  __b1:
    // [194] if(ultoa::digit#2<ultoa::max_digits#1-1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    jmp __b3
    // ultoa::@3
  __b3:
    // [195] ultoa::$11 = (byte)ultoa::value#2 -- vbuaa=_byte_vduz1 
    lda.z value
    // [196] *ultoa::buffer#11 = DIGITS[ultoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // [197] ultoa::buffer#3 = ++ ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [198] *ultoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa::@return
  __breturn:
    // [199] return 
    rts
    // ultoa::@2
  __b2:
    // [200] ultoa::$10 = ultoa::digit#2 << 2 -- vbuaa=vbuz1_rol_2 
    lda.z digit
    asl
    asl
    // [201] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10] -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // [202] if(0!=ultoa::started#2) goto ultoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    jmp __b7
    // ultoa::@7
  __b7:
    // [203] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [204] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
  __b4_from___b7:
    // [204] phi ultoa::buffer#14 = ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [204] phi ultoa::started#4 = ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [204] phi ultoa::value#6 = ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    jmp __b4
    // ultoa::@4
  __b4:
    // [205] ultoa::digit#1 = ++ ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [193] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
  __b1_from___b4:
    // [193] phi ultoa::buffer#11 = ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [193] phi ultoa::started#2 = ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [193] phi ultoa::value#2 = ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [193] phi ultoa::digit#2 = ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // [206] ultoa_append::buffer#0 = ultoa::buffer#11
    // [207] ultoa_append::value#0 = ultoa::value#2
    // [208] ultoa_append::sub#0 = ultoa::digit_value#0
    // [209] call ultoa_append 
    // [249] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
  ultoa_append_from___b5:
    jsr ultoa_append
    // [210] ultoa_append::return#0 = ultoa_append::value#2
    jmp __b6
    // ultoa::@6
  __b6:
    // [211] ultoa::value#0 = ultoa_append::return#0
    // [212] ultoa::buffer#4 = ++ ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [204] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
  __b4_from___b6:
    // [204] phi ultoa::buffer#14 = ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [204] phi ultoa::started#4 = 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [204] phi ultoa::value#6 = ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // cputln
// Print a newline
cputln: {
    // [213] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [214] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [215] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [216] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [217] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [218] return 
    rts
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($16) buffer, word zp(8) value, word zp($2f) sub)
utoa_append: {
    .label buffer = $16
    .label value = 8
    .label sub = $2f
    .label return = 8
    // [220] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
  __b1_from_utoa_append:
    // [220] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [220] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    jmp __b1
    // utoa_append::@1
  __b1:
    // [221] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    jmp __b3
    // utoa_append::@3
  __b3:
    // [222] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // utoa_append::@return
  __breturn:
    // [223] return 
    rts
    // utoa_append::@2
  __b2:
    // [224] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [225] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [220] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
  __b1_from___b2:
    // [220] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [220] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($11) str)
strlen: {
    .label len = $27
    .label str = $11
    .label return = $27
    // [227] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [227] phi strlen::len#2 = 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [227] phi strlen::str#2 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    jmp __b1
    // strlen::@1
  __b1:
    // [228] if(0!=*strlen::str#2) goto strlen::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [229] return 
    rts
    // strlen::@2
  __b2:
    // [230] strlen::len#1 = ++ strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [231] strlen::str#0 = ++ strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [227] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [227] phi strlen::len#2 = strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [227] phi strlen::str#2 = strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($14) pad, byte zp($13) length)
printf_padding: {
    .label i = $15
    .label length = $13
    .label pad = $14
    // [233] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [233] phi printf_padding::i#2 = 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [234] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [235] return 
    rts
    // printf_padding::@2
  __b2:
    // [236] cputc::c#1 = printf_padding::pad#5 -- vbuaa=vbuz1 
    lda.z pad
    // [237] call cputc 
    // [123] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
  cputc_from___b2:
    // [123] phi cputc::c#3 = cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b3
    // printf_padding::@3
  __b3:
    // [238] printf_padding::i#1 = ++ printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [233] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [233] phi printf_padding::i#2 = printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label src = $16
    // [240] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
  __b1_from_strupr:
    // [240] phi strupr::src#2 = strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    jmp __b1
    // strupr::@1
  __b1:
    // [241] if(0!=*strupr::src#2) goto strupr::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    jmp __breturn
    // strupr::@return
  __breturn:
    // [242] return 
    rts
    // strupr::@2
  __b2:
    // [243] toupper::ch#0 = *strupr::src#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (src),y
    // [244] call toupper 
    jsr toupper
    // [245] toupper::return#3 = toupper::return#2
    jmp __b3
    // strupr::@3
  __b3:
    // [246] strupr::$0 = toupper::return#3
    // [247] *strupr::src#2 = strupr::$0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (src),y
    // [248] strupr::src#1 = ++ strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [240] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
  __b1_from___b3:
    // [240] phi strupr::src#2 = strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($11) buffer, dword zp(2) value, dword zp($29) sub)
ultoa_append: {
    .label buffer = $11
    .label value = 2
    .label sub = $29
    .label return = 2
    // [250] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
  __b1_from_ultoa_append:
    // [250] phi ultoa_append::digit#2 = 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [250] phi ultoa_append::value#2 = ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    jmp __b1
    // ultoa_append::@1
  __b1:
    // [251] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    jmp __b3
    // ultoa_append::@3
  __b3:
    // [252] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    jmp __breturn
    // ultoa_append::@return
  __breturn:
    // [253] return 
    rts
    // ultoa_append::@2
  __b2:
    // [254] ultoa_append::digit#1 = ++ ultoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // [255] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [250] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
  __b1_from___b2:
    // [250] phi ultoa_append::digit#2 = ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [250] phi ultoa_append::value#2 = ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [256] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [257] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [258] call memcpy 
    // [274] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [274] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [274] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [259] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [260] call memcpy 
    // [274] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [274] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [274] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [261] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [262] call memset 
    // [284] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [284] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [284] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b4
    // cscroll::@4
  __b4:
    // [263] memset::c#1 = conio_textcolor -- vbuxx=vbuz1 
    ldx.z conio_textcolor
    // [264] call memset 
    // [284] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [284] phi memset::c#4 = memset::c#1 [phi:cscroll::@4->memset#0] -- register_copy 
    // [284] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [265] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [266] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [267] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [268] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // [269] if(toupper::ch#0<'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [270] if(toupper::ch#0<='z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [272] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [272] phi toupper::return#2 = toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [271] toupper::return#0 = toupper::ch#0 + 'A'-'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [273] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($27) destination, void* zp($16) source)
memcpy: {
    .label src_end = $2d
    .label dst = $27
    .label src = $16
    .label source = $16
    .label destination = $27
    // [275] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    clc
    lda.z source
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [276] memcpy::src#4 = (byte*)memcpy::source#2
    // [277] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [278] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [278] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [278] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [279] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [280] return 
    rts
    // memcpy::@2
  __b2:
    // [281] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [282] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [283] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($27) str, byte register(X) c)
memset: {
    .label end = $2f
    .label dst = $27
    .label str = $27
    jmp __b1
    // memset::@1
  __b1:
    // [285] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [286] memset::dst#4 = (byte*)memset::str#3
    // [287] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [287] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [288] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [289] return 
    rts
    // memset::@3
  __b3:
    // [290] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [291] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b4
Removing instruction jmp __b16
Removing instruction jmp __b2
Removing instruction jmp __b11
Removing instruction jmp __b5
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __b7
Removing instruction jmp __b13
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b17
Removing instruction jmp __b16
Removing instruction jmp __b2
Removing instruction jmp __b9
Removing instruction jmp __b3
Removing instruction jmp __b18
Removing instruction jmp __b4
Removing instruction jmp __b11
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b20
Removing instruction jmp __b19
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #>0
Replacing instruction lda.z col with TXA
Removing instruction lda #0
Removing instruction lda.z _rand_state+1
Removing instruction ldy.z conio_cursor_x
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction lda.z padding
Replacing instruction lda #0 with TXA
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b2_from_conio_c64_init with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b2_from___b13 with __b2
Replacing label __b16_from___b4 with __b16
Replacing label __b1_from___b11 with __b1
Replacing label __b1_from___b11 with __b1
Replacing label __b3_from_gotoxy with __b1
Replacing label __b4_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from_cputc with __b1
Replacing label __b1_from_printf_number_buffer with __b1_from___b13
Replacing label __b13_from___b14 with __b13
Replacing label __b21_from___b13 with __b1
Replacing label __b5_from___b4 with __b5
Replacing label __breturn_from_toupper with __breturn_from___b2
Replacing label __breturn_from___b1 with __breturn_from___b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b3 with __b2
Removing instruction __b1_from___init1:
Removing instruction main_from___b1:
Removing instruction __b2_from_conio_c64_init:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction gotoxy_from___b1:
Removing instruction __b6_from_main:
Removing instruction textcolor_from___b6:
Removing instruction __b7_from___b6:
Removing instruction cputs_from___b7:
Removing instruction __b8_from___b7:
Removing instruction _rand_from___b8:
Removing instruction textcolor_from___b9:
Removing instruction __b1_from___b11:
Removing instruction printf_uint_from___b12:
Removing instruction __b16_from___b4:
Removing instruction __b2_from___b16:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b13:
Removing instruction _rand_from___b2:
Removing instruction __b5_from___b11:
Removing instruction gotoxy_from___b5:
Removing instruction __b14_from___b5:
Removing instruction cputs_from___b14:
Removing instruction printf_ulong_from___b15:
Removing instruction __b3_from_gotoxy:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b4_from___b1:
Removing instruction __b4:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_cputs:
Removing instruction __b1_from___b2:
Removing instruction cputc_from___b2:
Removing instruction __b3_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b4_from___b7:
Removing instruction utoa_append_from___b5:
Removing instruction __b6_from_printf_number_buffer:
Removing instruction strlen_from___b6:
Removing instruction __b13_from___b14:
Removing instruction __b13_from___b7:
Removing instruction __b1_from_printf_number_buffer:
Removing instruction __b21_from___b13:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction __b11_from___b4:
Removing instruction strupr_from___b11:
Removing instruction __b5_from___b11:
Removing instruction __b5_from___b4:
Removing instruction cputs_from___b5:
Removing instruction __b4_from___b7:
Removing instruction ultoa_append_from___b5:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __breturn_from_toupper:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_conio_c64_init:
Removing instruction __breturn:
Removing instruction clrscr_from_main:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b1_from___b10:
Removing instruction __b3:
Removing instruction gotoxy_from___b3:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b4:
Removing instruction __b2_from___b4:
Removing instruction __b11:
Removing instruction __b5:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __breturn:
Removing instruction __b1_from_gotoxy:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Removing instruction __b1_from_clrscr:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction utoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction ultoa_from___b1:
Removing instruction __b2:
Removing instruction printf_number_buffer_from___b2:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from_utoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __b6:
Removing instruction __b14:
Removing instruction __b7:
Removing instruction __b17:
Removing instruction __b16:
Removing instruction printf_padding_from___b8:
Removing instruction __b9:
Removing instruction cputc_from___b9:
Removing instruction __b18:
Removing instruction printf_padding_from___b10:
Removing instruction __b11:
Removing instruction __b15:
Removing instruction __b20:
Removing instruction __b19:
Removing instruction printf_padding_from___b12:
Removing instruction __b1_from_ultoa:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b1_from___b4:
Removing instruction __b6:
Removing instruction __b4_from___b6:
Removing instruction __breturn:
Removing instruction __b1_from_utoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_printf_padding:
Removing instruction __breturn:
Removing instruction cputc_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_strupr:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_ultoa_append:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction memset_from___b4:
Removing instruction __b5:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in bcc __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b2
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b3_from___b1 to __b2
Relabelling long label __b1_from___b13 to __b6
Relabelling long label __breturn_from___b2 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z digit_value+1
Removing instruction lda.z buffer_sign
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
constant byte* const COLORRAM = (byte*) 55296
constant byte* const DEFAULT_SCREEN = (byte*) 1024
constant byte* DIGITS[]  = "0123456789abcdef"z
constant const byte LIGHT_BLUE = $e
constant byte OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant dword* RADIX_DECIMAL_VALUES_LONG[]  = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
constant byte SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
constant const byte WHITE = 1
void __start()
word _rand()
word~ _rand::$0 zp[2]:39 2002.0
word~ _rand::$1 zp[2]:47 2002.0
word~ _rand::$2 zp[2]:45 2002.0
word _rand::return
word _rand::return#0 return zp[2]:31 22.0
word _rand::return#1 return_1 zp[2]:8 202.0
word _rand::return#2 return_1 zp[2]:8 278.25
word _rand_state
word _rand_state#13 _rand_state zp[2]:10 1051.5
word _rand_state#14 _rand_state zp[2]:10 77.88888888888889
word _rand_state#3 _rand_state zp[2]:10 1501.5
word _rand_state#4 _rand_state zp[2]:10 1501.5
void clrscr()
byte clrscr::c
byte clrscr::c#1 reg byte y 20002.0
byte clrscr::c#2 reg byte y 12501.25
byte clrscr::l
byte clrscr::l#1 reg byte x 2002.0
byte clrscr::l#2 reg byte x 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 line_cols zp[2]:22 1001.0
byte* clrscr::line_cols#5 line_cols zp[2]:22 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 line_text zp[2]:17 667.3333333333334
byte* clrscr::line_text#5 line_text zp[2]:17 1714.7142857142858
void conio_c64_init()
constant byte* const conio_c64_init::BASIC_CURSOR_LINE = (byte*) 214
byte conio_c64_init::line
byte conio_c64_init::line#0 reg byte a 11.0
byte conio_c64_init::line#2 reg byte a 22.0
byte conio_cursor_x loadstore zp[1]:24 1.5151526363636363E7
byte conio_cursor_y loadstore zp[1]:25 2.8070176411403507E8
byte* conio_line_color loadstore zp[2]:28 2.1250001066346154E8
byte* conio_line_text loadstore zp[2]:26 2.0654206643925232E8
byte conio_textcolor loadstore zp[1]:30 7.26619432086331E7
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 2.0000002E7
byte cputc::c#1 reg byte a 2.0000002E7
byte cputc::c#2 reg byte a 20002.0
byte cputc::c#3 reg byte a 1.100050025E8
void cputln()
void cputs(const byte* cputs::s)
byte cputs::c
byte cputs::c#1 reg byte a 1.0000001E7
const byte* cputs::s
const byte* cputs::s#0 s zp[2]:17 5000000.5
const byte* cputs::s#4 s zp[2]:17 1.5050002E7
const byte* cputs::s#5 s zp[2]:17 100001.0
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:37 2002.0
byte*~ gotoxy::$6 zp[2]:33 2002.0
word~ gotoxy::$7 zp[2]:33 1501.5
word~ gotoxy::$8 zp[2]:35 2002.0
word~ gotoxy::$9 zp[2]:33 2002.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:33 1001.0
byte gotoxy::x
byte gotoxy::x#3 reg byte x 101.0
byte gotoxy::x#5 reg byte x 350.5
byte gotoxy::x#6 reg byte x 2002.0
byte gotoxy::y
byte gotoxy::y#2 reg byte a 22.0
byte gotoxy::y#3 reg byte a 202.0
byte gotoxy::y#5 reg byte a 704.6666666666667
byte gotoxy::y#6 reg byte a 333.6666666666667
void main()
byte~ main::$17 reg byte a 202.0
dword main::cnt
dword main::cnt#1 cnt zp[4]:2 9.681818181818182
dword main::cnt#2 cnt zp[4]:2 202.0
byte main::col
byte main::col#1 col zp[1]:6 101.0
byte main::col#3 col zp[1]:6 45.90909090909091
byte main::col#7 col zp[1]:6 80.8
word main::first
word main::first#0 first zp[2]:31 5.590909090909091
word main::rnd
word main::rnd#1 rnd zp[2]:8 151.5
word main::rnd#2 rnd zp[2]:8 30.42857142857143
word main::rnd#5 rnd zp[2]:8 22.0
byte main::row
byte main::row#1 row zp[1]:7 151.5
byte main::row#3 row zp[1]:7 44.888888888888886
byte main::row#7 row zp[1]:7 60.599999999999994
constant byte* main::s[$1d]  = "generating unique randoms..."
constant byte* main::s1[7]  = "found "
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:39
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:39 1.00000000000001E14
byte* memcpy::dst#2 dst zp[2]:39 1.0003333333333467E14
byte* memcpy::dst#4 dst zp[2]:39 2.00000000002E11
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:22
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:22 2.00000000000002E14
byte* memcpy::src#2 src zp[2]:22 1.0002500000000125E14
byte* memcpy::src#4 src zp[2]:22 1.00000000001E11
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:45 1.251250000000025E13
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#1 reg byte x 2.0000000002E10
byte memset::c#4 reg byte x 1.4287142857143143E13
byte* memset::dst
byte* memset::dst#1 dst zp[2]:39 2.00000000000002E14
byte* memset::dst#2 dst zp[2]:39 1.3336666666666834E14
byte* memset::dst#4 dst zp[2]:39 2.00000000002E11
byte* memset::end
byte* memset::end#0 end zp[2]:47 1.6683333333333668E13
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:39
struct printf_buffer_number printf_buffer loadstore mem[12] = {}
void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
word~ printf_number_buffer::$19 zp[2]:39 10001.0
struct printf_buffer_number printf_number_buffer::buffer
byte* printf_number_buffer::buffer_digits
byte printf_number_buffer::buffer_sign
byte printf_number_buffer::buffer_sign#0 buffer_sign zp[1]:13 202.0
byte printf_number_buffer::buffer_sign#1 buffer_sign zp[1]:13 2002.0
byte printf_number_buffer::buffer_sign#10 buffer_sign zp[1]:13 1555.25
struct printf_format_number printf_number_buffer::format
byte printf_number_buffer::format_justify_left
byte printf_number_buffer::format_justify_left#10 format_justify_left zp[1]:12 645.2258064516129
byte printf_number_buffer::format_min_length
byte printf_number_buffer::format_min_length#2 reg byte x 1000.1
byte printf_number_buffer::format_radix
byte printf_number_buffer::format_sign_always
byte printf_number_buffer::format_upper_case
byte printf_number_buffer::format_upper_case#10 format_upper_case zp[1]:14 384.65384615384613
byte printf_number_buffer::format_zero_padding
byte printf_number_buffer::format_zero_padding#10 format_zero_padding zp[1]:16 937.59375
signed byte printf_number_buffer::len
signed byte printf_number_buffer::len#0 reg byte y 15001.5
signed byte printf_number_buffer::len#1 reg byte y 20002.0
signed byte printf_number_buffer::len#2 reg byte y 30003.0
signed byte printf_number_buffer::padding
signed byte printf_number_buffer::padding#1 padding zp[1]:15 10001.0
signed byte printf_number_buffer::padding#10 padding zp[1]:15 1904.952380952381
void printf_padding(byte printf_padding::pad , byte printf_padding::length)
byte printf_padding::i
byte printf_padding::i#1 i zp[1]:21 2.0000002E7
byte printf_padding::i#2 i zp[1]:21 7500000.75
byte printf_padding::length
byte printf_padding::length#0 length zp[1]:19 20002.0
byte printf_padding::length#1 length zp[1]:19 20002.0
byte printf_padding::length#2 length zp[1]:19 20002.0
byte printf_padding::length#4 length zp[1]:19 1671667.3333333333
byte printf_padding::pad
byte printf_padding::pad#5 pad zp[1]:20 1666666.8333333333
void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
struct printf_format_number printf_uint::format
byte printf_uint::format_justify_left
constant byte printf_uint::format_justify_left#0 format_justify_left = 0
byte printf_uint::format_min_length
constant byte printf_uint::format_min_length#0 format_min_length = 5
byte printf_uint::format_radix
byte printf_uint::format_sign_always
byte printf_uint::format_upper_case
constant byte printf_uint::format_upper_case#0 format_upper_case = 0
byte printf_uint::format_zero_padding
constant byte printf_uint::format_zero_padding#0 format_zero_padding = 0
word printf_uint::uvalue
word printf_uint::uvalue#0 uvalue zp[2]:8 367.33333333333337
void printf_ulong(dword printf_ulong::uvalue , byte printf_ulong::format_min_length , byte printf_ulong::format_justify_left , byte printf_ulong::format_sign_always , byte printf_ulong::format_zero_padding , byte printf_ulong::format_upper_case , byte printf_ulong::format_radix)
struct printf_format_number printf_ulong::format
byte printf_ulong::format_justify_left
constant byte printf_ulong::format_justify_left#0 format_justify_left = 0
byte printf_ulong::format_min_length
constant byte printf_ulong::format_min_length#0 format_min_length = 0
byte printf_ulong::format_radix
byte printf_ulong::format_sign_always
byte printf_ulong::format_upper_case
constant byte printf_ulong::format_upper_case#0 format_upper_case = 0
byte printf_ulong::format_zero_padding
constant byte printf_ulong::format_zero_padding#0 format_zero_padding = 0
dword printf_ulong::uvalue
dword printf_ulong::uvalue#0 uvalue zp[4]:2 37.33333333333333
word strlen(byte* strlen::str)
word strlen::len
word strlen::len#1 len zp[2]:39 1.0000001E7
word strlen::len#2 len zp[2]:39 5002500.75
word strlen::return
word strlen::return#2 return zp[2]:39 20002.0
byte* strlen::str
byte* strlen::str#0 str zp[2]:17 2.0000002E7
byte* strlen::str#2 str zp[2]:17 1.0000001E7
byte* strupr(byte* strupr::str)
byte~ strupr::$0 reg byte a 2.0000002E7
byte* strupr::return
byte* strupr::src
byte* strupr::src#1 src zp[2]:22 2.0000002E7
byte* strupr::src#2 src zp[2]:22 7142857.857142856
byte* strupr::str
constant byte* strupr::str#0 str = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
byte textcolor(byte textcolor::color)
byte textcolor::color
byte textcolor::color#2 reg byte a 101.0
byte textcolor::old
byte textcolor::return
byte toupper(byte toupper::ch)
byte toupper::ch
byte toupper::ch#0 reg byte a 1.70000002E8
byte toupper::return
byte toupper::return#0 reg byte a 2.00000002E8
byte toupper::return#2 reg byte a 1.0333333466666667E8
byte toupper::return#3 reg byte a 2.0000002E7
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
byte~ ultoa::$10 reg byte a 20002.0
byte~ ultoa::$11 reg byte a 2002.0
byte* ultoa::buffer
byte* ultoa::buffer#11 buffer zp[2]:17 3000.4285714285716
byte* ultoa::buffer#14 buffer zp[2]:17 15001.5
byte* ultoa::buffer#3 buffer zp[2]:17 2002.0
byte* ultoa::buffer#4 buffer zp[2]:17 20002.0
byte ultoa::digit
byte ultoa::digit#1 digit zp[1]:16 20002.0
byte ultoa::digit#2 digit zp[1]:16 2857.4285714285716
dword ultoa::digit_value
dword ultoa::digit_value#0 digit_value zp[4]:41 6000.6
dword* ultoa::digit_values
byte ultoa::max_digits
constant byte ultoa::max_digits#1 max_digits = $a
byte ultoa::radix
byte ultoa::started
byte ultoa::started#2 reg byte x 5000.5
byte ultoa::started#4 reg byte x 10001.0
dword ultoa::value
dword ultoa::value#0 value zp[4]:2 10001.0
dword ultoa::value#1 value zp[4]:2 551.0
dword ultoa::value#2 value zp[4]:2 5857.857142857143
dword ultoa::value#6 value zp[4]:2 15001.5
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0 buffer zp[2]:17 13750.25
byte ultoa_append::digit
byte ultoa_append::digit#1 reg byte x 1.0000001E7
byte ultoa_append::digit#2 reg byte x 1.00500015E7
dword ultoa_append::return
dword ultoa_append::return#0 return zp[4]:2 20002.0
dword ultoa_append::sub
dword ultoa_append::sub#0 sub zp[4]:41 3335000.5
dword ultoa_append::value
dword ultoa_append::value#0 value zp[4]:2 36667.33333333333
dword ultoa_append::value#1 value zp[4]:2 2.0000002E7
dword ultoa_append::value#2 value zp[4]:2 5018334.166666666
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 2000002.0
byte~ utoa::$11 reg byte a 20002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:22 287143.2857142857
byte* utoa::buffer#14 buffer zp[2]:22 1500001.5
byte* utoa::buffer#3 buffer zp[2]:22 20002.0
byte* utoa::buffer#4 buffer zp[2]:22 2000002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:12 2000002.0
byte utoa::digit#2 digit zp[1]:12 285714.5714285714
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:47 600000.6000000001
word* utoa::digit_values
byte utoa::max_digits
constant byte utoa::max_digits#1 max_digits = 5
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 500000.5
byte utoa::started#4 reg byte x 1000001.0
word utoa::value
word utoa::value#0 value zp[2]:8 1000001.0
word utoa::value#1 value zp[2]:8 5501.0
word utoa::value#2 value zp[2]:8 572857.857142857
word utoa::value#6 value zp[2]:8 1500001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:22 1375000.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.0000000001E10
byte utoa_append::digit#2 reg byte x 1.00050000015E10
word utoa_append::return
word utoa_append::return#0 return zp[2]:8 2000002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:47 3.3335000005E9
word utoa_append::value
word utoa_append::value#0 value zp[2]:8 3666667.333333333
word utoa_append::value#1 value zp[2]:8 2.0000000002E10
word utoa_append::value#2 value zp[2]:8 5.001833334166666E9

reg byte a [ conio_c64_init::line#2 conio_c64_init::line#0 ]
zp[4]:2 [ main::cnt#2 main::cnt#1 printf_ulong::uvalue#0 ultoa::value#2 ultoa::value#6 ultoa::value#1 ultoa::value#0 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 ultoa_append::return#0 ]
zp[1]:6 [ main::col#3 main::col#7 main::col#1 ]
zp[1]:7 [ main::row#3 main::row#7 main::row#1 ]
zp[2]:8 [ main::rnd#2 main::rnd#5 main::rnd#1 printf_uint::uvalue#0 _rand::return#1 utoa::value#2 utoa::value#6 utoa::value#1 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 _rand::return#2 ]
reg byte a [ gotoxy::y#6 gotoxy::y#5 gotoxy::y#2 gotoxy::y#3 ]
reg byte x [ gotoxy::x#6 gotoxy::x#5 gotoxy::x#3 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
reg byte a [ textcolor::color#2 ]
zp[2]:10 [ _rand_state#13 _rand_state#14 _rand_state#3 _rand_state#4 ]
reg byte a [ cputc::c#3 cputc::c#0 cputc::c#2 cputc::c#1 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
reg byte x [ printf_number_buffer::format_min_length#2 ]
zp[1]:12 [ printf_number_buffer::format_justify_left#10 utoa::digit#2 utoa::digit#1 ]
zp[1]:13 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#1 printf_number_buffer::buffer_sign#0 ]
zp[1]:14 [ printf_number_buffer::format_upper_case#10 ]
reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
zp[1]:15 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
zp[1]:16 [ ultoa::digit#2 ultoa::digit#1 printf_number_buffer::format_zero_padding#10 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
zp[2]:17 [ strlen::str#2 strlen::str#0 ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#4 ultoa::buffer#3 ultoa_append::buffer#0 cputs::s#4 cputs::s#5 cputs::s#0 clrscr::line_text#5 clrscr::line_text#1 ]
zp[1]:19 [ printf_padding::length#4 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 ]
zp[1]:20 [ printf_padding::pad#5 ]
zp[1]:21 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[2]:22 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 strupr::src#2 strupr::src#1 utoa::buffer#11 utoa::buffer#14 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 clrscr::line_cols#5 clrscr::line_cols#1 ]
reg byte x [ memset::c#4 memset::c#1 ]
zp[1]:24 [ conio_cursor_x ]
zp[1]:25 [ conio_cursor_y ]
zp[2]:26 [ conio_line_text ]
zp[2]:28 [ conio_line_color ]
zp[1]:30 [ conio_textcolor ]
zp[2]:31 [ _rand::return#0 main::first#0 ]
reg byte a [ main::$17 ]
zp[2]:33 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:35 [ gotoxy::$8 ]
zp[2]:37 [ gotoxy::$5 ]
reg byte a [ cputs::c#1 ]
zp[2]:39 [ _rand::$0 strlen::len#2 strlen::len#1 strlen::return#2 printf_number_buffer::$19 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte a [ utoa::$11 ]
reg byte a [ utoa::$10 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:41 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
reg byte a [ toupper::return#3 ]
reg byte a [ strupr::$0 ]
zp[2]:45 [ memcpy::src_end#0 _rand::$2 ]
zp[2]:47 [ memset::end#0 utoa::digit_value#0 utoa_append::sub#0 _rand::$1 ]
mem[12] [ printf_buffer ]


FINAL ASSEMBLER
Score: 189558

  // File Comments
// Test the xorshift pseudorandom number generator
// Source http://www.retroprogramming.com/2017/07/xorshift-pseudorandom-numbers-in-z80.html
// Information https://en.wikipedia.org/wiki/Xorshift
  // Upstart
  // Commodore 64 PRG executable file
.file [name="prng-xorshift.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(__start)
  // Global Constants & labels
  .const WHITE = 1
  .const LIGHT_BLUE = $e
  .const OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
  .const SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = $18
  // The current cursor y-position
  .label conio_cursor_y = $19
  // The current text cursor line start
  .label conio_line_text = $1a
  // The current color cursor line start
  .label conio_line_color = $1c
  // The current text color
  .label conio_textcolor = $1e
  // The maximal random value
  // The random state variable
  .label _rand_state = $a
.segment Code
  // __start
__start: {
    // __start::__init1
    // __ma char conio_cursor_x = 0
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // __ma char conio_cursor_y = 0
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // __ma char *conio_line_text = CONIO_SCREEN_TEXT
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // __ma char *conio_line_color = CONIO_SCREEN_COLORS
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // __ma char conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
    // [5] conio_textcolor = LIGHT_BLUE -- vbuz1=vbuc1 
    lda #LIGHT_BLUE
    sta.z conio_textcolor
    // #pragma constructor_for(conio_c64_init, cputc, clrscr, cscroll)
    // [6] call conio_c64_init 
    jsr conio_c64_init
    // [7] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [8] call main 
    // [17] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [9] return 
    rts
}
  // conio_c64_init
// Set initial cursor position
conio_c64_init: {
    // Position cursor at current line
    .label BASIC_CURSOR_LINE = $d6
    // char line = *BASIC_CURSOR_LINE
    // [10] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE -- vbuaa=_deref_pbuc1 
    lda BASIC_CURSOR_LINE
    // if(line>=CONIO_HEIGHT)
    // [11] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2 -- vbuaa_lt_vbuc1_then_la1 
    cmp #$19
    bcc __b1
    // [13] phi from conio_c64_init to conio_c64_init::@1 [phi:conio_c64_init->conio_c64_init::@1]
    // [13] phi conio_c64_init::line#2 = $19-1 [phi:conio_c64_init->conio_c64_init::@1#0] -- vbuaa=vbuc1 
    lda #$19-1
    // [12] phi from conio_c64_init to conio_c64_init::@2 [phi:conio_c64_init->conio_c64_init::@2]
    // conio_c64_init::@2
    // [13] phi from conio_c64_init::@2 to conio_c64_init::@1 [phi:conio_c64_init::@2->conio_c64_init::@1]
    // [13] phi conio_c64_init::line#2 = conio_c64_init::line#0 [phi:conio_c64_init::@2->conio_c64_init::@1#0] -- register_copy 
    // conio_c64_init::@1
  __b1:
    // gotoxy(0, line)
    // [14] gotoxy::y#2 = conio_c64_init::line#2
    // [15] call gotoxy 
    // [55] phi from conio_c64_init::@1 to gotoxy [phi:conio_c64_init::@1->gotoxy]
    // [55] phi gotoxy::x#5 = 0 [phi:conio_c64_init::@1->gotoxy#0] -- vbuxx=vbuc1 
    ldx #0
    // [55] phi gotoxy::y#5 = gotoxy::y#2 [phi:conio_c64_init::@1->gotoxy#1] -- register_copy 
    jsr gotoxy
    // conio_c64_init::@return
    // }
    // [16] return 
    rts
}
  // main
main: {
    .label first = $1f
    .label cnt = 2
    .label rnd = 8
    .label row = 7
    .label col = 6
    // clrscr()
    // [18] call clrscr 
    // [73] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [19] phi from main to main::@6 [phi:main->main::@6]
    // main::@6
    // textcolor(WHITE)
    // [20] call textcolor 
    // [89] phi from main::@6 to textcolor [phi:main::@6->textcolor]
    // [89] phi textcolor::color#2 = WHITE [phi:main::@6->textcolor#0] -- vbuaa=vbuc1 
    lda #WHITE
    jsr textcolor
    // [21] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // printf("generating unique randoms...")
    // [22] call cputs 
    // [92] phi from main::@7 to cputs [phi:main::@7->cputs]
    // [92] phi cputs::s#5 = main::s [phi:main::@7->cputs#0] -- pbuz1=pbuc1 
    lda #<s
    sta.z cputs.s
    lda #>s
    sta.z cputs.s+1
    jsr cputs
    // [23] phi from main::@7 to main::@8 [phi:main::@7->main::@8]
    // main::@8
    // _rand()
    // [24] call _rand 
    // [100] phi from main::@8 to _rand [phi:main::@8->_rand]
    // [100] phi _rand_state#13 = 1 [phi:main::@8->_rand#0] -- vwuz1=vwuc1 
    lda #<1
    sta.z _rand_state
    lda #>1
    sta.z _rand_state+1
    jsr _rand
    // _rand()
    // [25] _rand::return#0 = _rand::return#2 -- vwuz1=vwuz2 
    lda.z _rand.return_1
    sta.z _rand.return
    lda.z _rand.return_1+1
    sta.z _rand.return+1
    // main::@9
    // [26] main::first#0 = _rand::return#0
    // textcolor(LIGHT_BLUE)
    // [27] call textcolor 
    // [89] phi from main::@9 to textcolor [phi:main::@9->textcolor]
    // [89] phi textcolor::color#2 = LIGHT_BLUE [phi:main::@9->textcolor#0] -- vbuaa=vbuc1 
    lda #LIGHT_BLUE
    jsr textcolor
    // main::@10
    // [28] main::rnd#5 = main::first#0 -- vwuz1=vwuz2 
    lda.z first
    sta.z rnd
    lda.z first+1
    sta.z rnd+1
    // [29] phi from main::@10 to main::@1 [phi:main::@10->main::@1]
    // [29] phi main::rnd#2 = main::rnd#5 [phi:main::@10->main::@1#0] -- register_copy 
    // [29] phi main::row#3 = 1 [phi:main::@10->main::@1#1] -- vbuz1=vbuc1 
    lda #1
    sta.z row
    // [29] phi main::col#3 = 3 [phi:main::@10->main::@1#2] -- vbuz1=vbuc1 
    lda #3
    sta.z col
    // [29] phi main::cnt#2 = 0 [phi:main::@10->main::@1#3] -- vduz1=vduc1 
    lda #<0
    sta.z cnt
    sta.z cnt+1
    lda #<0>>$10
    sta.z cnt+2
    lda #>0>>$10
    sta.z cnt+3
    // [29] phi from main::@11 to main::@1 [phi:main::@11->main::@1]
    // [29] phi main::rnd#2 = main::rnd#1 [phi:main::@11->main::@1#0] -- register_copy 
    // [29] phi main::row#3 = main::row#7 [phi:main::@11->main::@1#1] -- register_copy 
    // [29] phi main::col#3 = main::col#7 [phi:main::@11->main::@1#2] -- register_copy 
    // [29] phi main::cnt#2 = main::cnt#1 [phi:main::@11->main::@1#3] -- register_copy 
    // main::@1
  __b1:
    // cnt++;
    // [30] main::cnt#1 = ++ main::cnt#2 -- vduz1=_inc_vduz1 
    inc.z cnt
    bne !+
    inc.z cnt+1
    bne !+
    inc.z cnt+2
    bne !+
    inc.z cnt+3
  !:
    // (char)cnt==0
    // [31] main::$17 = (byte)main::cnt#1 -- vbuaa=_byte_vduz1 
    lda.z cnt
    // if((char)cnt==0)
    // [32] if(main::$17!=0) goto main::@2 -- vbuaa_neq_0_then_la1 
    cmp #0
    bne __b2
    // main::@3
    // gotoxy(col,row)
    // [33] gotoxy::x#3 = main::col#3 -- vbuxx=vbuz1 
    ldx.z col
    // [34] gotoxy::y#3 = main::row#3 -- vbuaa=vbuz1 
    lda.z row
    // [35] call gotoxy 
    // [55] phi from main::@3 to gotoxy [phi:main::@3->gotoxy]
    // [55] phi gotoxy::x#5 = gotoxy::x#3 [phi:main::@3->gotoxy#0] -- register_copy 
    // [55] phi gotoxy::y#5 = gotoxy::y#3 [phi:main::@3->gotoxy#1] -- register_copy 
    jsr gotoxy
    // main::@12
    // printf("%5u",rnd)
    // [36] printf_uint::uvalue#0 = main::rnd#2
    // [37] call printf_uint 
    // [109] phi from main::@12 to printf_uint [phi:main::@12->printf_uint]
    jsr printf_uint
    // main::@13
    // if(++row==25)
    // [38] main::row#1 = ++ main::row#3 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [39] if(main::row#1!=$19) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z row
    bne __b2
    // main::@4
    // col+=6
    // [40] main::col#1 = main::col#3 + 6 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z col
    axs #-[6]
    stx.z col
    // if(col>40-5)
    // [41] if(main::col#1<$28-5+1) goto main::@16 -- vbuz1_lt_vbuc1_then_la1 
    txa
    cmp #$28-5+1
    bcc __b16
    // [43] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
    // [43] phi main::row#7 = 1 [phi:main::@4->main::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z row
    // [43] phi main::col#7 = 3 [phi:main::@4->main::@2#1] -- vbuz1=vbuc1 
    lda #3
    sta.z col
    jmp __b2
    // [42] phi from main::@4 to main::@16 [phi:main::@4->main::@16]
    // main::@16
  __b16:
    // [43] phi from main::@16 to main::@2 [phi:main::@16->main::@2]
    // [43] phi main::row#7 = 1 [phi:main::@16->main::@2#0] -- vbuz1=vbuc1 
    lda #1
    sta.z row
    // [43] phi main::col#7 = main::col#1 [phi:main::@16->main::@2#1] -- register_copy 
    // [43] phi from main::@1 main::@13 to main::@2 [phi:main::@1/main::@13->main::@2]
    // [43] phi main::row#7 = main::row#3 [phi:main::@1/main::@13->main::@2#0] -- register_copy 
    // [43] phi main::col#7 = main::col#3 [phi:main::@1/main::@13->main::@2#1] -- register_copy 
    // main::@2
  __b2:
    // _rand()
    // [44] call _rand 
    // [100] phi from main::@2 to _rand [phi:main::@2->_rand]
    // [100] phi _rand_state#13 = _rand_state#14 [phi:main::@2->_rand#0] -- register_copy 
    jsr _rand
    // _rand()
    // [45] _rand::return#1 = _rand::return#2
    // main::@11
    // rnd = _rand()
    // [46] main::rnd#1 = _rand::return#1
    // while(rnd!=first)
    // [47] if(main::rnd#1!=main::first#0) goto main::@1 -- vwuz1_neq_vwuz2_then_la1 
    lda.z rnd+1
    cmp.z first+1
    bne __b1
    lda.z rnd
    cmp.z first
    bne __b1
    // [48] phi from main::@11 to main::@5 [phi:main::@11->main::@5]
    // main::@5
    // gotoxy(28,0)
    // [49] call gotoxy 
    // [55] phi from main::@5 to gotoxy [phi:main::@5->gotoxy]
    // [55] phi gotoxy::x#5 = $1c [phi:main::@5->gotoxy#0] -- vbuxx=vbuc1 
    ldx #$1c
    // [55] phi gotoxy::y#5 = 0 [phi:main::@5->gotoxy#1] -- vbuaa=vbuc1 
    lda #0
    jsr gotoxy
    // [50] phi from main::@5 to main::@14 [phi:main::@5->main::@14]
    // main::@14
    // printf("found %lu",cnt)
    // [51] call cputs 
    // [92] phi from main::@14 to cputs [phi:main::@14->cputs]
    // [92] phi cputs::s#5 = main::s1 [phi:main::@14->cputs#0] -- pbuz1=pbuc1 
    lda #<s1
    sta.z cputs.s
    lda #>s1
    sta.z cputs.s+1
    jsr cputs
    // main::@15
    // printf("found %lu",cnt)
    // [52] printf_ulong::uvalue#0 = main::cnt#1
    // [53] call printf_ulong 
    // [116] phi from main::@15 to printf_ulong [phi:main::@15->printf_ulong]
    jsr printf_ulong
    // main::@return
    // }
    // [54] return 
    rts
  .segment Data
    s: .text "generating unique randoms..."
    .byte 0
    s1: .text "found "
    .byte 0
}
.segment Code
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) x, byte register(A) y)
gotoxy: {
    .label __5 = $25
    .label __6 = $21
    .label __7 = $21
    .label line_offset = $21
    .label __8 = $23
    .label __9 = $21
    // if(y>CONIO_HEIGHT)
    // [56] if(gotoxy::y#5<$19+1) goto gotoxy::@3 -- vbuaa_lt_vbuc1_then_la1 
    cmp #$19+1
    bcc __b1
    // [58] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
    // [58] phi gotoxy::y#6 = 0 [phi:gotoxy->gotoxy::@1#0] -- vbuaa=vbuc1 
    lda #0
    // [57] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
    // gotoxy::@3
    // [58] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
    // [58] phi gotoxy::y#6 = gotoxy::y#5 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    // gotoxy::@1
  __b1:
    // if(x>=CONIO_WIDTH)
    // [59] if(gotoxy::x#5<$28) goto gotoxy::@4 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b2
    // [61] phi from gotoxy::@1 to gotoxy::@2 [phi:gotoxy::@1->gotoxy::@2]
    // [61] phi gotoxy::x#6 = 0 [phi:gotoxy::@1->gotoxy::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [60] phi from gotoxy::@1 to gotoxy::@4 [phi:gotoxy::@1->gotoxy::@4]
    // gotoxy::@4
    // [61] phi from gotoxy::@4 to gotoxy::@2 [phi:gotoxy::@4->gotoxy::@2]
    // [61] phi gotoxy::x#6 = gotoxy::x#5 [phi:gotoxy::@4->gotoxy::@2#0] -- register_copy 
    // gotoxy::@2
  __b2:
    // conio_cursor_x = x
    // [62] conio_cursor_x = gotoxy::x#6 -- vbuz1=vbuxx 
    stx.z conio_cursor_x
    // conio_cursor_y = y
    // [63] conio_cursor_y = gotoxy::y#6 -- vbuz1=vbuaa 
    sta.z conio_cursor_y
    // (unsigned int)y*CONIO_WIDTH
    // [64] gotoxy::$7 = (word)gotoxy::y#6 -- vwuz1=_word_vbuaa 
    sta.z __7
    lda #0
    sta.z __7+1
    // unsigned int line_offset = (unsigned int)y*CONIO_WIDTH
    // [65] gotoxy::$8 = gotoxy::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [66] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [67] gotoxy::line_offset#0 = gotoxy::$9 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // CONIO_SCREEN_TEXT + line_offset
    // [68] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    clc
    lda.z line_offset
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // conio_line_text = CONIO_SCREEN_TEXT + line_offset
    // [69] conio_line_text = gotoxy::$5 -- pbuz1=pbuz2 
    lda.z __5
    sta.z conio_line_text
    lda.z __5+1
    sta.z conio_line_text+1
    // CONIO_SCREEN_COLORS + line_offset
    // [70] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // conio_line_color = CONIO_SCREEN_COLORS + line_offset
    // [71] conio_line_color = gotoxy::$6 -- pbuz1=pbuz2 
    lda.z __6
    sta.z conio_line_color
    lda.z __6+1
    sta.z conio_line_color+1
    // gotoxy::@return
    // }
    // [72] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = $11
    .label line_cols = $16
    // [74] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [74] phi clrscr::line_cols#5 = COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [74] phi clrscr::line_text#5 = DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [74] phi clrscr::l#2 = 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [75] if(clrscr::l#2<$19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b2
    // clrscr::@2
    // conio_cursor_x = 0
    // [76] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [77] conio_cursor_y = 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [78] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [79] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // clrscr::@return
    // }
    // [80] return 
    rts
    // [81] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b2:
    // [81] phi clrscr::c#2 = 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@3
  __b3:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [82] if(clrscr::c#2<$28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    // clrscr::@5
    // line_text += CONIO_WIDTH
    // [83] clrscr::line_text#1 = clrscr::line_text#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [84] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [85] clrscr::l#1 = ++ clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [74] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
    // [74] phi clrscr::line_cols#5 = clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [74] phi clrscr::line_text#5 = clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [74] phi clrscr::l#2 = clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // line_text[c] = ' '
    // [86] clrscr::line_text#5[clrscr::c#2] = ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [87] clrscr::line_cols#5[clrscr::c#2] = conio_textcolor -- pbuz1_derefidx_vbuyy=vbuz2 
    lda.z conio_textcolor
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [88] clrscr::c#1 = ++ clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [81] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
    // [81] phi clrscr::c#2 = clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // textcolor
// Set the color for text output. The old color setting is returned.
// textcolor(byte register(A) color)
textcolor: {
    // conio_textcolor = color
    // [90] conio_textcolor = textcolor::color#2 -- vbuz1=vbuaa 
    sta.z conio_textcolor
    // textcolor::@return
    // }
    // [91] return 
    rts
}
  // cputs
// Output a NUL-terminated string at the current cursor position
// cputs(const byte* zp($11) s)
cputs: {
    .label s = $11
    // [93] phi from cputs cputs::@2 to cputs::@1 [phi:cputs/cputs::@2->cputs::@1]
    // [93] phi cputs::s#4 = cputs::s#5 [phi:cputs/cputs::@2->cputs::@1#0] -- register_copy 
    // cputs::@1
  __b1:
    // while(c=*s++)
    // [94] cputs::c#1 = *cputs::s#4 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (s),y
    // [95] cputs::s#0 = ++ cputs::s#4 -- pbuz1=_inc_pbuz1 
    inc.z s
    bne !+
    inc.z s+1
  !:
    // [96] if(0!=cputs::c#1) goto cputs::@2 -- 0_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // cputs::@return
    // }
    // [97] return 
    rts
    // cputs::@2
  __b2:
    // cputc(c)
    // [98] cputc::c#0 = cputs::c#1
    // [99] call cputc 
    // [123] phi from cputs::@2 to cputc [phi:cputs::@2->cputc]
    // [123] phi cputc::c#3 = cputc::c#0 [phi:cputs::@2->cputc#0] -- register_copy 
    jsr cputc
    jmp __b1
}
  // _rand
// Returns a pseudo-random number in the range of 0 to RAND_MAX (65535)
_rand: {
    .label __0 = $27
    .label __1 = $2f
    .label __2 = $2d
    .label return = $1f
    .label return_1 = 8
    // _rand_state << 7
    // [101] _rand::$0 = _rand_state#13 << 7 -- vwuz1=vwuz2_rol_7 
    lda.z _rand_state+1
    lsr
    lda.z _rand_state
    ror
    sta.z __0+1
    lda #0
    ror
    sta.z __0
    // _rand_state ^= _rand_state << 7
    // [102] _rand_state#3 = _rand_state#13 ^ _rand::$0 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z _rand_state
    eor.z __0
    sta.z _rand_state
    lda.z _rand_state+1
    eor.z __0+1
    sta.z _rand_state+1
    // _rand_state >> 9
    // [103] _rand::$1 = _rand_state#3 >> 9 -- vwuz1=vwuz2_ror_9 
    lsr
    sta.z __1
    lda #0
    sta.z __1+1
    // _rand_state ^= _rand_state >> 9
    // [104] _rand_state#4 = _rand_state#3 ^ _rand::$1 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z _rand_state
    eor.z __1
    sta.z _rand_state
    lda.z _rand_state+1
    eor.z __1+1
    sta.z _rand_state+1
    // _rand_state << 8
    // [105] _rand::$2 = _rand_state#4 << 8 -- vwuz1=vwuz2_rol_8 
    lda.z _rand_state
    sta.z __2+1
    lda #0
    sta.z __2
    // _rand_state ^= _rand_state << 8
    // [106] _rand_state#14 = _rand_state#4 ^ _rand::$2 -- vwuz1=vwuz1_bxor_vwuz2 
    lda.z _rand_state
    eor.z __2
    sta.z _rand_state
    lda.z _rand_state+1
    eor.z __2+1
    sta.z _rand_state+1
    // return _rand_state;
    // [107] _rand::return#2 = _rand_state#14 -- vwuz1=vwuz2 
    lda.z _rand_state
    sta.z return_1
    lda.z _rand_state+1
    sta.z return_1+1
    // _rand::@return
    // }
    // [108] return 
    rts
}
  // printf_uint
// Print an unsigned int using a specific format
// printf_uint(word zp(8) uvalue)
printf_uint: {
    .const format_min_length = 5
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 8
    // printf_uint::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [110] *((byte*)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // utoa(uvalue, printf_buffer.digits, format.radix)
    // [111] utoa::value#1 = printf_uint::uvalue#0
    // [112] call utoa 
  // Format number into buffer
    // [134] phi from printf_uint::@1 to utoa [phi:printf_uint::@1->utoa]
    jsr utoa
    // printf_uint::@2
    // printf_number_buffer(printf_buffer, format)
    // [113] printf_number_buffer::buffer_sign#1 = *((byte*)&printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [114] call printf_number_buffer 
  // Print using format
    // [155] phi from printf_uint::@2 to printf_number_buffer [phi:printf_uint::@2->printf_number_buffer]
    // [155] phi printf_number_buffer::format_upper_case#10 = printf_uint::format_upper_case#0 [phi:printf_uint::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [155] phi printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#1 [phi:printf_uint::@2->printf_number_buffer#1] -- register_copy 
    // [155] phi printf_number_buffer::format_zero_padding#10 = printf_uint::format_zero_padding#0 [phi:printf_uint::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [155] phi printf_number_buffer::format_justify_left#10 = printf_uint::format_justify_left#0 [phi:printf_uint::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [155] phi printf_number_buffer::format_min_length#2 = printf_uint::format_min_length#0 [phi:printf_uint::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    // printf_uint::@return
    // }
    // [115] return 
    rts
}
  // printf_ulong
// Print an unsigned int using a specific format
// printf_ulong(dword zp(2) uvalue)
printf_ulong: {
    .const format_min_length = 0
    .const format_justify_left = 0
    .const format_zero_padding = 0
    .const format_upper_case = 0
    .label uvalue = 2
    // printf_ulong::@1
    // printf_buffer.sign = format.sign_always?'+':0
    // [117] *((byte*)&printf_buffer) = 0 -- _deref_pbuc1=vbuc2 
    // Handle any sign
    lda #0
    sta printf_buffer
    // ultoa(uvalue, printf_buffer.digits, format.radix)
    // [118] ultoa::value#1 = printf_ulong::uvalue#0
    // [119] call ultoa 
  // Format number into buffer
    // [192] phi from printf_ulong::@1 to ultoa [phi:printf_ulong::@1->ultoa]
    jsr ultoa
    // printf_ulong::@2
    // printf_number_buffer(printf_buffer, format)
    // [120] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer) -- vbuz1=_deref_pbuc1 
    lda printf_buffer
    sta.z printf_number_buffer.buffer_sign
    // [121] call printf_number_buffer 
  // Print using format
    // [155] phi from printf_ulong::@2 to printf_number_buffer [phi:printf_ulong::@2->printf_number_buffer]
    // [155] phi printf_number_buffer::format_upper_case#10 = printf_ulong::format_upper_case#0 [phi:printf_ulong::@2->printf_number_buffer#0] -- vbuz1=vbuc1 
    lda #format_upper_case
    sta.z printf_number_buffer.format_upper_case
    // [155] phi printf_number_buffer::buffer_sign#10 = printf_number_buffer::buffer_sign#0 [phi:printf_ulong::@2->printf_number_buffer#1] -- register_copy 
    // [155] phi printf_number_buffer::format_zero_padding#10 = printf_ulong::format_zero_padding#0 [phi:printf_ulong::@2->printf_number_buffer#2] -- vbuz1=vbuc1 
    lda #format_zero_padding
    sta.z printf_number_buffer.format_zero_padding
    // [155] phi printf_number_buffer::format_justify_left#10 = printf_ulong::format_justify_left#0 [phi:printf_ulong::@2->printf_number_buffer#3] -- vbuz1=vbuc1 
    lda #format_justify_left
    sta.z printf_number_buffer.format_justify_left
    // [155] phi printf_number_buffer::format_min_length#2 = printf_ulong::format_min_length#0 [phi:printf_ulong::@2->printf_number_buffer#4] -- vbuxx=vbuc1 
    ldx #format_min_length
    jsr printf_number_buffer
    // printf_ulong::@return
    // }
    // [122] return 
    rts
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [124] if(cputc::c#3==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // conio_line_text[conio_cursor_x] = c
    // [125] conio_line_text[conio_cursor_x] = cputc::c#3 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // conio_line_color[conio_cursor_x] = conio_textcolor
    // [126] conio_line_color[conio_cursor_x] = conio_textcolor -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z conio_textcolor
    sta (conio_line_color),y
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [127] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [128] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [129] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
    // cputc::@3
    // cputln()
    // [130] call cputln 
    jsr cputln
    // cputc::@return
  __breturn:
    // }
    // [131] return 
    rts
    // [132] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [133] call cputln 
    jsr cputln
    rts
}
  // utoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// utoa(word zp(8) value, byte* zp($16) buffer)
utoa: {
    .const max_digits = 5
    .label digit_value = $2f
    .label buffer = $16
    .label digit = $c
    .label value = 8
    // [135] phi from utoa to utoa::@1 [phi:utoa->utoa::@1]
    // [135] phi utoa::buffer#11 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:utoa->utoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [135] phi utoa::started#2 = 0 [phi:utoa->utoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [135] phi utoa::value#2 = utoa::value#1 [phi:utoa->utoa::@1#2] -- register_copy 
    // [135] phi utoa::digit#2 = 0 [phi:utoa->utoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // utoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [136] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // utoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [137] utoa::$11 = (byte)utoa::value#2 -- vbuaa=_byte_vwuz1 
    lda.z value
    // [138] *utoa::buffer#11 = DIGITS[utoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [139] utoa::buffer#3 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [140] *utoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // utoa::@return
    // }
    // [141] return 
    rts
    // utoa::@2
  __b2:
    // unsigned int digit_value = digit_values[digit]
    // [142] utoa::$10 = utoa::digit#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z digit
    asl
    // [143] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10] -- vwuz1=pwuc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES+1,y
    sta.z digit_value+1
    // if (started || value >= digit_value)
    // [144] if(0!=utoa::started#2) goto utoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // utoa::@7
    // [145] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5 -- vwuz1_ge_vwuz2_then_la1 
    cmp.z value+1
    bne !+
    lda.z digit_value
    cmp.z value
    beq __b5
  !:
    bcc __b5
    // [146] phi from utoa::@7 to utoa::@4 [phi:utoa::@7->utoa::@4]
    // [146] phi utoa::buffer#14 = utoa::buffer#11 [phi:utoa::@7->utoa::@4#0] -- register_copy 
    // [146] phi utoa::started#4 = utoa::started#2 [phi:utoa::@7->utoa::@4#1] -- register_copy 
    // [146] phi utoa::value#6 = utoa::value#2 [phi:utoa::@7->utoa::@4#2] -- register_copy 
    // utoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [147] utoa::digit#1 = ++ utoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [135] phi from utoa::@4 to utoa::@1 [phi:utoa::@4->utoa::@1]
    // [135] phi utoa::buffer#11 = utoa::buffer#14 [phi:utoa::@4->utoa::@1#0] -- register_copy 
    // [135] phi utoa::started#2 = utoa::started#4 [phi:utoa::@4->utoa::@1#1] -- register_copy 
    // [135] phi utoa::value#2 = utoa::value#6 [phi:utoa::@4->utoa::@1#2] -- register_copy 
    // [135] phi utoa::digit#2 = utoa::digit#1 [phi:utoa::@4->utoa::@1#3] -- register_copy 
    jmp __b1
    // utoa::@5
  __b5:
    // utoa_append(buffer++, value, digit_value)
    // [148] utoa_append::buffer#0 = utoa::buffer#11
    // [149] utoa_append::value#0 = utoa::value#2
    // [150] utoa_append::sub#0 = utoa::digit_value#0
    // [151] call utoa_append 
    // [219] phi from utoa::@5 to utoa_append [phi:utoa::@5->utoa_append]
    jsr utoa_append
    // utoa_append(buffer++, value, digit_value)
    // [152] utoa_append::return#0 = utoa_append::value#2
    // utoa::@6
    // value = utoa_append(buffer++, value, digit_value)
    // [153] utoa::value#0 = utoa_append::return#0
    // value = utoa_append(buffer++, value, digit_value);
    // [154] utoa::buffer#4 = ++ utoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [146] phi from utoa::@6 to utoa::@4 [phi:utoa::@6->utoa::@4]
    // [146] phi utoa::buffer#14 = utoa::buffer#4 [phi:utoa::@6->utoa::@4#0] -- register_copy 
    // [146] phi utoa::started#4 = 1 [phi:utoa::@6->utoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [146] phi utoa::value#6 = utoa::value#0 [phi:utoa::@6->utoa::@4#2] -- register_copy 
    jmp __b4
}
  // printf_number_buffer
// Print the contents of the number buffer using a specific format.
// This handles minimum length, zero-filling, and left/right justification from the format
// printf_number_buffer(byte zp($d) buffer_sign, byte register(X) format_min_length, byte zp($c) format_justify_left, byte zp($10) format_zero_padding, byte zp($e) format_upper_case)
printf_number_buffer: {
    .label __19 = $27
    .label buffer_sign = $d
    .label padding = $f
    .label format_zero_padding = $10
    .label format_justify_left = $c
    .label format_upper_case = $e
    // if(format.min_length)
    // [156] if(0==printf_number_buffer::format_min_length#2) goto printf_number_buffer::@1 -- 0_eq_vbuxx_then_la1 
    cpx #0
    beq __b6
    // [157] phi from printf_number_buffer to printf_number_buffer::@6 [phi:printf_number_buffer->printf_number_buffer::@6]
    // printf_number_buffer::@6
    // strlen(buffer.digits)
    // [158] call strlen 
    // [226] phi from printf_number_buffer::@6 to strlen [phi:printf_number_buffer::@6->strlen]
    jsr strlen
    // strlen(buffer.digits)
    // [159] strlen::return#2 = strlen::len#2
    // printf_number_buffer::@14
    // [160] printf_number_buffer::$19 = strlen::return#2
    // signed char len = (signed char)strlen(buffer.digits)
    // [161] printf_number_buffer::len#0 = (signed byte)printf_number_buffer::$19 -- vbsyy=_sbyte_vwuz1 
    // There is a minimum length - work out the padding
    ldy.z __19
    // if(buffer.sign)
    // [162] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@13 -- 0_eq_vbuz1_then_la1 
    lda.z buffer_sign
    beq __b13
    // printf_number_buffer::@7
    // len++;
    // [163] printf_number_buffer::len#1 = ++ printf_number_buffer::len#0 -- vbsyy=_inc_vbsyy 
    iny
    // [164] phi from printf_number_buffer::@14 printf_number_buffer::@7 to printf_number_buffer::@13 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13]
    // [164] phi printf_number_buffer::len#2 = printf_number_buffer::len#0 [phi:printf_number_buffer::@14/printf_number_buffer::@7->printf_number_buffer::@13#0] -- register_copy 
    // printf_number_buffer::@13
  __b13:
    // padding = (signed char)format.min_length - len
    // [165] printf_number_buffer::padding#1 = (signed byte)printf_number_buffer::format_min_length#2 - printf_number_buffer::len#2 -- vbsz1=vbsxx_minus_vbsyy 
    txa
    sty.z $ff
    sec
    sbc.z $ff
    sta.z padding
    // if(padding<0)
    // [166] if(printf_number_buffer::padding#1>=0) goto printf_number_buffer::@21 -- vbsz1_ge_0_then_la1 
    cmp #0
    bpl __b1
    // [168] phi from printf_number_buffer printf_number_buffer::@13 to printf_number_buffer::@1 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1]
  __b6:
    // [168] phi printf_number_buffer::padding#10 = 0 [phi:printf_number_buffer/printf_number_buffer::@13->printf_number_buffer::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    // [167] phi from printf_number_buffer::@13 to printf_number_buffer::@21 [phi:printf_number_buffer::@13->printf_number_buffer::@21]
    // printf_number_buffer::@21
    // [168] phi from printf_number_buffer::@21 to printf_number_buffer::@1 [phi:printf_number_buffer::@21->printf_number_buffer::@1]
    // [168] phi printf_number_buffer::padding#10 = printf_number_buffer::padding#1 [phi:printf_number_buffer::@21->printf_number_buffer::@1#0] -- register_copy 
    // printf_number_buffer::@1
  __b1:
    // if(!format.justify_left && !format.zero_padding && padding)
    // [169] if(0!=printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@2 -- 0_neq_vbuz1_then_la1 
    lda.z format_justify_left
    bne __b2
    // printf_number_buffer::@17
    // [170] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@2 -- 0_neq_vbuz1_then_la1 
    lda.z format_zero_padding
    bne __b2
    // printf_number_buffer::@16
    // [171] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@8 -- 0_neq_vbsz1_then_la1 
    lda.z padding
    cmp #0
    bne __b8
    jmp __b2
    // printf_number_buffer::@8
  __b8:
    // printf_padding(' ',(char)padding)
    // [172] printf_padding::length#0 = (byte)printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [173] call printf_padding 
    // [232] phi from printf_number_buffer::@8 to printf_padding [phi:printf_number_buffer::@8->printf_padding]
    // [232] phi printf_padding::pad#5 = ' ' [phi:printf_number_buffer::@8->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [232] phi printf_padding::length#4 = printf_padding::length#0 [phi:printf_number_buffer::@8->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@2
  __b2:
    // if(buffer.sign)
    // [174] if(0==printf_number_buffer::buffer_sign#10) goto printf_number_buffer::@3 -- 0_eq_vbuz1_then_la1 
    lda.z buffer_sign
    beq __b3
    // printf_number_buffer::@9
    // cputc(buffer.sign)
    // [175] cputc::c#2 = printf_number_buffer::buffer_sign#10 -- vbuaa=vbuz1 
    // [176] call cputc 
    // [123] phi from printf_number_buffer::@9 to cputc [phi:printf_number_buffer::@9->cputc]
    // [123] phi cputc::c#3 = cputc::c#2 [phi:printf_number_buffer::@9->cputc#0] -- register_copy 
    jsr cputc
    // printf_number_buffer::@3
  __b3:
    // if(format.zero_padding && padding)
    // [177] if(0==printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@4 -- 0_eq_vbuz1_then_la1 
    lda.z format_zero_padding
    beq __b4
    // printf_number_buffer::@18
    // [178] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@10 -- 0_neq_vbsz1_then_la1 
    lda.z padding
    cmp #0
    bne __b10
    jmp __b4
    // printf_number_buffer::@10
  __b10:
    // printf_padding('0',(char)padding)
    // [179] printf_padding::length#1 = (byte)printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [180] call printf_padding 
    // [232] phi from printf_number_buffer::@10 to printf_padding [phi:printf_number_buffer::@10->printf_padding]
    // [232] phi printf_padding::pad#5 = '0' [phi:printf_number_buffer::@10->printf_padding#0] -- vbuz1=vbuc1 
    lda #'0'
    sta.z printf_padding.pad
    // [232] phi printf_padding::length#4 = printf_padding::length#1 [phi:printf_number_buffer::@10->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@4
  __b4:
    // if(format.upper_case)
    // [181] if(0==printf_number_buffer::format_upper_case#10) goto printf_number_buffer::@5 -- 0_eq_vbuz1_then_la1 
    lda.z format_upper_case
    beq __b5
    // [182] phi from printf_number_buffer::@4 to printf_number_buffer::@11 [phi:printf_number_buffer::@4->printf_number_buffer::@11]
    // printf_number_buffer::@11
    // strupr(buffer.digits)
    // [183] call strupr 
    // [239] phi from printf_number_buffer::@11 to strupr [phi:printf_number_buffer::@11->strupr]
    jsr strupr
    // [184] phi from printf_number_buffer::@11 printf_number_buffer::@4 to printf_number_buffer::@5 [phi:printf_number_buffer::@11/printf_number_buffer::@4->printf_number_buffer::@5]
    // printf_number_buffer::@5
  __b5:
    // cputs(buffer.digits)
    // [185] call cputs 
    // [92] phi from printf_number_buffer::@5 to cputs [phi:printf_number_buffer::@5->cputs]
    // [92] phi cputs::s#5 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:printf_number_buffer::@5->cputs#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z cputs.s+1
    jsr cputs
    // printf_number_buffer::@15
    // if(format.justify_left && !format.zero_padding && padding)
    // [186] if(0==printf_number_buffer::format_justify_left#10) goto printf_number_buffer::@return -- 0_eq_vbuz1_then_la1 
    lda.z format_justify_left
    beq __breturn
    // printf_number_buffer::@20
    // [187] if(0!=printf_number_buffer::format_zero_padding#10) goto printf_number_buffer::@return -- 0_neq_vbuz1_then_la1 
    lda.z format_zero_padding
    bne __breturn
    // printf_number_buffer::@19
    // [188] if(0!=printf_number_buffer::padding#10) goto printf_number_buffer::@12 -- 0_neq_vbsz1_then_la1 
    lda.z padding
    cmp #0
    bne __b12
    rts
    // printf_number_buffer::@12
  __b12:
    // printf_padding(' ',(char)padding)
    // [189] printf_padding::length#2 = (byte)printf_number_buffer::padding#10 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [190] call printf_padding 
    // [232] phi from printf_number_buffer::@12 to printf_padding [phi:printf_number_buffer::@12->printf_padding]
    // [232] phi printf_padding::pad#5 = ' ' [phi:printf_number_buffer::@12->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [232] phi printf_padding::length#4 = printf_padding::length#2 [phi:printf_number_buffer::@12->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_number_buffer::@return
  __breturn:
    // }
    // [191] return 
    rts
}
  // ultoa
// Converts unsigned number value to a string representing it in RADIX format.
// If the leading digits are zero they are not included in the string.
// - value : The number to be converted to RADIX
// - buffer : receives the string representing the number and zero-termination.
// - radix : The radix to convert the number to (from the enum RADIX)
// ultoa(dword zp(2) value, byte* zp($11) buffer)
ultoa: {
    .const max_digits = $a
    .label digit_value = $29
    .label buffer = $11
    .label digit = $10
    .label value = 2
    // [193] phi from ultoa to ultoa::@1 [phi:ultoa->ultoa::@1]
    // [193] phi ultoa::buffer#11 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:ultoa->ultoa::@1#0] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z buffer+1
    // [193] phi ultoa::started#2 = 0 [phi:ultoa->ultoa::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [193] phi ultoa::value#2 = ultoa::value#1 [phi:ultoa->ultoa::@1#2] -- register_copy 
    // [193] phi ultoa::digit#2 = 0 [phi:ultoa->ultoa::@1#3] -- vbuz1=vbuc1 
    txa
    sta.z digit
    // ultoa::@1
  __b1:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [194] if(ultoa::digit#2<ultoa::max_digits#1-1) goto ultoa::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z digit
    cmp #max_digits-1
    bcc __b2
    // ultoa::@3
    // *buffer++ = DIGITS[(char)value]
    // [195] ultoa::$11 = (byte)ultoa::value#2 -- vbuaa=_byte_vduz1 
    lda.z value
    // [196] *ultoa::buffer#11 = DIGITS[ultoa::$11] -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda DIGITS,y
    ldy #0
    sta (buffer),y
    // *buffer++ = DIGITS[(char)value];
    // [197] ultoa::buffer#3 = ++ ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // *buffer = 0
    // [198] *ultoa::buffer#3 = 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (buffer),y
    // ultoa::@return
    // }
    // [199] return 
    rts
    // ultoa::@2
  __b2:
    // unsigned long digit_value = digit_values[digit]
    // [200] ultoa::$10 = ultoa::digit#2 << 2 -- vbuaa=vbuz1_rol_2 
    lda.z digit
    asl
    asl
    // [201] ultoa::digit_value#0 = RADIX_DECIMAL_VALUES_LONG[ultoa::$10] -- vduz1=pduc1_derefidx_vbuaa 
    tay
    lda RADIX_DECIMAL_VALUES_LONG,y
    sta.z digit_value
    lda RADIX_DECIMAL_VALUES_LONG+1,y
    sta.z digit_value+1
    lda RADIX_DECIMAL_VALUES_LONG+2,y
    sta.z digit_value+2
    lda RADIX_DECIMAL_VALUES_LONG+3,y
    sta.z digit_value+3
    // if (started || value >= digit_value)
    // [202] if(0!=ultoa::started#2) goto ultoa::@5 -- 0_neq_vbuxx_then_la1 
    cpx #0
    bne __b5
    // ultoa::@7
    // [203] if(ultoa::value#2>=ultoa::digit_value#0) goto ultoa::@5 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z digit_value+3
    bcc !+
    bne __b5
    lda.z value+2
    cmp.z digit_value+2
    bcc !+
    bne __b5
    lda.z value+1
    cmp.z digit_value+1
    bcc !+
    bne __b5
    lda.z value
    cmp.z digit_value
    bcs __b5
  !:
    // [204] phi from ultoa::@7 to ultoa::@4 [phi:ultoa::@7->ultoa::@4]
    // [204] phi ultoa::buffer#14 = ultoa::buffer#11 [phi:ultoa::@7->ultoa::@4#0] -- register_copy 
    // [204] phi ultoa::started#4 = ultoa::started#2 [phi:ultoa::@7->ultoa::@4#1] -- register_copy 
    // [204] phi ultoa::value#6 = ultoa::value#2 [phi:ultoa::@7->ultoa::@4#2] -- register_copy 
    // ultoa::@4
  __b4:
    // for( char digit=0; digit<max_digits-1; digit++ )
    // [205] ultoa::digit#1 = ++ ultoa::digit#2 -- vbuz1=_inc_vbuz1 
    inc.z digit
    // [193] phi from ultoa::@4 to ultoa::@1 [phi:ultoa::@4->ultoa::@1]
    // [193] phi ultoa::buffer#11 = ultoa::buffer#14 [phi:ultoa::@4->ultoa::@1#0] -- register_copy 
    // [193] phi ultoa::started#2 = ultoa::started#4 [phi:ultoa::@4->ultoa::@1#1] -- register_copy 
    // [193] phi ultoa::value#2 = ultoa::value#6 [phi:ultoa::@4->ultoa::@1#2] -- register_copy 
    // [193] phi ultoa::digit#2 = ultoa::digit#1 [phi:ultoa::@4->ultoa::@1#3] -- register_copy 
    jmp __b1
    // ultoa::@5
  __b5:
    // ultoa_append(buffer++, value, digit_value)
    // [206] ultoa_append::buffer#0 = ultoa::buffer#11
    // [207] ultoa_append::value#0 = ultoa::value#2
    // [208] ultoa_append::sub#0 = ultoa::digit_value#0
    // [209] call ultoa_append 
    // [249] phi from ultoa::@5 to ultoa_append [phi:ultoa::@5->ultoa_append]
    jsr ultoa_append
    // ultoa_append(buffer++, value, digit_value)
    // [210] ultoa_append::return#0 = ultoa_append::value#2
    // ultoa::@6
    // value = ultoa_append(buffer++, value, digit_value)
    // [211] ultoa::value#0 = ultoa_append::return#0
    // value = ultoa_append(buffer++, value, digit_value);
    // [212] ultoa::buffer#4 = ++ ultoa::buffer#11 -- pbuz1=_inc_pbuz1 
    inc.z buffer
    bne !+
    inc.z buffer+1
  !:
    // [204] phi from ultoa::@6 to ultoa::@4 [phi:ultoa::@6->ultoa::@4]
    // [204] phi ultoa::buffer#14 = ultoa::buffer#4 [phi:ultoa::@6->ultoa::@4#0] -- register_copy 
    // [204] phi ultoa::started#4 = 1 [phi:ultoa::@6->ultoa::@4#1] -- vbuxx=vbuc1 
    ldx #1
    // [204] phi ultoa::value#6 = ultoa::value#0 [phi:ultoa::@6->ultoa::@4#2] -- register_copy 
    jmp __b4
}
  // cputln
// Print a newline
cputln: {
    // conio_line_text +=  CONIO_WIDTH
    // [213] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // conio_line_color += CONIO_WIDTH
    // [214] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // conio_cursor_x = 0
    // [215] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [216] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [217] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [218] return 
    rts
}
  // utoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// utoa_append(byte* zp($16) buffer, word zp(8) value, word zp($2f) sub)
utoa_append: {
    .label buffer = $16
    .label value = 8
    .label sub = $2f
    .label return = 8
    // [220] phi from utoa_append to utoa_append::@1 [phi:utoa_append->utoa_append::@1]
    // [220] phi utoa_append::digit#2 = 0 [phi:utoa_append->utoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [220] phi utoa_append::value#2 = utoa_append::value#0 [phi:utoa_append->utoa_append::@1#1] -- register_copy 
    // utoa_append::@1
  __b1:
    // while (value >= sub)
    // [221] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2 -- vwuz1_ge_vwuz2_then_la1 
    lda.z sub+1
    cmp.z value+1
    bne !+
    lda.z sub
    cmp.z value
    beq __b2
  !:
    bcc __b2
    // utoa_append::@3
    // *buffer = DIGITS[digit]
    // [222] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // utoa_append::@return
    // }
    // [223] return 
    rts
    // utoa_append::@2
  __b2:
    // digit++;
    // [224] utoa_append::digit#1 = ++ utoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [225] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0 -- vwuz1=vwuz1_minus_vwuz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    // [220] phi from utoa_append::@2 to utoa_append::@1 [phi:utoa_append::@2->utoa_append::@1]
    // [220] phi utoa_append::digit#2 = utoa_append::digit#1 [phi:utoa_append::@2->utoa_append::@1#0] -- register_copy 
    // [220] phi utoa_append::value#2 = utoa_append::value#1 [phi:utoa_append::@2->utoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($11) str)
strlen: {
    .label len = $27
    .label str = $11
    .label return = $27
    // [227] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [227] phi strlen::len#2 = 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [227] phi strlen::str#2 = (byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS [phi:strlen->strlen::@1#1] -- pbuz1=pbuc1 
    lda #<printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str
    lda #>printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    sta.z str+1
    // strlen::@1
  __b1:
    // while(*str)
    // [228] if(0!=*strlen::str#2) goto strlen::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [229] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [230] strlen::len#1 = ++ strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [231] strlen::str#0 = ++ strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [227] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [227] phi strlen::len#2 = strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [227] phi strlen::str#2 = strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp($14) pad, byte zp($13) length)
printf_padding: {
    .label i = $15
    .label length = $13
    .label pad = $14
    // [233] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
    // [233] phi printf_padding::i#2 = 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // printf_padding::@1
  __b1:
    // for(char i=0;i<length; i++)
    // [234] if(printf_padding::i#2<printf_padding::length#4) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    // printf_padding::@return
    // }
    // [235] return 
    rts
    // printf_padding::@2
  __b2:
    // cputc(pad)
    // [236] cputc::c#1 = printf_padding::pad#5 -- vbuaa=vbuz1 
    lda.z pad
    // [237] call cputc 
    // [123] phi from printf_padding::@2 to cputc [phi:printf_padding::@2->cputc]
    // [123] phi cputc::c#3 = cputc::c#1 [phi:printf_padding::@2->cputc#0] -- register_copy 
    jsr cputc
    // printf_padding::@3
    // for(char i=0;i<length; i++)
    // [238] printf_padding::i#1 = ++ printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [233] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
    // [233] phi printf_padding::i#2 = printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // strupr
// Converts a string to uppercase.
strupr: {
    .label str = printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
    .label src = $16
    // [240] phi from strupr to strupr::@1 [phi:strupr->strupr::@1]
    // [240] phi strupr::src#2 = strupr::str#0 [phi:strupr->strupr::@1#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z src
    lda #>str
    sta.z src+1
    // strupr::@1
  __b1:
    // while(*src)
    // [241] if(0!=*strupr::src#2) goto strupr::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (src),y
    cmp #0
    bne __b2
    // strupr::@return
    // }
    // [242] return 
    rts
    // strupr::@2
  __b2:
    // toupper(*src)
    // [243] toupper::ch#0 = *strupr::src#2 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (src),y
    // [244] call toupper 
    jsr toupper
    // [245] toupper::return#3 = toupper::return#2
    // strupr::@3
    // [246] strupr::$0 = toupper::return#3
    // *src = toupper(*src)
    // [247] *strupr::src#2 = strupr::$0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (src),y
    // src++;
    // [248] strupr::src#1 = ++ strupr::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [240] phi from strupr::@3 to strupr::@1 [phi:strupr::@3->strupr::@1]
    // [240] phi strupr::src#2 = strupr::src#1 [phi:strupr::@3->strupr::@1#0] -- register_copy 
    jmp __b1
}
  // ultoa_append
// Used to convert a single digit of an unsigned number value to a string representation
// Counts a single digit up from '0' as long as the value is larger than sub.
// Each time the digit is increased sub is subtracted from value.
// - buffer : pointer to the char that receives the digit
// - value : The value where the digit will be derived from
// - sub : the value of a '1' in the digit. Subtracted continually while the digit is increased.
//        (For decimal the subs used are 10000, 1000, 100, 10, 1)
// returns : the value reduced by sub * digit so that it is less than sub.
// ultoa_append(byte* zp($11) buffer, dword zp(2) value, dword zp($29) sub)
ultoa_append: {
    .label buffer = $11
    .label value = 2
    .label sub = $29
    .label return = 2
    // [250] phi from ultoa_append to ultoa_append::@1 [phi:ultoa_append->ultoa_append::@1]
    // [250] phi ultoa_append::digit#2 = 0 [phi:ultoa_append->ultoa_append::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [250] phi ultoa_append::value#2 = ultoa_append::value#0 [phi:ultoa_append->ultoa_append::@1#1] -- register_copy 
    // ultoa_append::@1
  __b1:
    // while (value >= sub)
    // [251] if(ultoa_append::value#2>=ultoa_append::sub#0) goto ultoa_append::@2 -- vduz1_ge_vduz2_then_la1 
    lda.z value+3
    cmp.z sub+3
    bcc !+
    bne __b2
    lda.z value+2
    cmp.z sub+2
    bcc !+
    bne __b2
    lda.z value+1
    cmp.z sub+1
    bcc !+
    bne __b2
    lda.z value
    cmp.z sub
    bcs __b2
  !:
    // ultoa_append::@3
    // *buffer = DIGITS[digit]
    // [252] *ultoa_append::buffer#0 = DIGITS[ultoa_append::digit#2] -- _deref_pbuz1=pbuc1_derefidx_vbuxx 
    lda DIGITS,x
    ldy #0
    sta (buffer),y
    // ultoa_append::@return
    // }
    // [253] return 
    rts
    // ultoa_append::@2
  __b2:
    // digit++;
    // [254] ultoa_append::digit#1 = ++ ultoa_append::digit#2 -- vbuxx=_inc_vbuxx 
    inx
    // value -= sub
    // [255] ultoa_append::value#1 = ultoa_append::value#2 - ultoa_append::sub#0 -- vduz1=vduz1_minus_vduz2 
    lda.z value
    sec
    sbc.z sub
    sta.z value
    lda.z value+1
    sbc.z sub+1
    sta.z value+1
    lda.z value+2
    sbc.z sub+2
    sta.z value+2
    lda.z value+3
    sbc.z sub+3
    sta.z value+3
    // [250] phi from ultoa_append::@2 to ultoa_append::@1 [phi:ultoa_append::@2->ultoa_append::@1]
    // [250] phi ultoa_append::digit#2 = ultoa_append::digit#1 [phi:ultoa_append::@2->ultoa_append::@1#0] -- register_copy 
    // [250] phi ultoa_append::value#2 = ultoa_append::value#1 [phi:ultoa_append::@2->ultoa_append::@1#1] -- register_copy 
    jmp __b1
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [256] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [257] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [258] call memcpy 
    // [274] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [274] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [274] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [259] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [260] call memcpy 
    // [274] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [274] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [274] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [261] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [262] call memset 
    // [284] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [284] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [284] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [263] memset::c#1 = conio_textcolor -- vbuxx=vbuz1 
    ldx.z conio_textcolor
    // [264] call memset 
    // [284] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [284] phi memset::c#4 = memset::c#1 [phi:cscroll::@4->memset#0] -- register_copy 
    // [284] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_line_text -= CONIO_WIDTH
    // [265] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // conio_line_color -= CONIO_WIDTH
    // [266] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // conio_cursor_y--;
    // [267] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [268] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // if(ch>='a' && ch<='z')
    // [269] if(toupper::ch#0<'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn
    // toupper::@2
    // [270] if(toupper::ch#0<='z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [272] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
    // [272] phi toupper::return#2 = toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    rts
    // toupper::@1
  __b1:
    // return ch + ('A'-'a');
    // [271] toupper::return#0 = toupper::ch#0 + 'A'-'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    // toupper::@return
  __breturn:
    // }
    // [273] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp($27) destination, void* zp($16) source)
memcpy: {
    .label src_end = $2d
    .label dst = $27
    .label src = $16
    .label source = $16
    .label destination = $27
    // char* src_end = (char*)source+num
    // [275] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    clc
    lda.z source
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [276] memcpy::src#4 = (byte*)memcpy::source#2
    // [277] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [278] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [278] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [278] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [279] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [280] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [281] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [282] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [283] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($27) str, byte register(X) c)
memset: {
    .label end = $2f
    .label dst = $27
    .label str = $27
    // memset::@1
    // char* end = (char*)str + num
    // [285] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [286] memset::dst#4 = (byte*)memset::str#3
    // [287] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [287] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [288] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [289] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [290] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [291] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // File Data
.segment Data
  // The digits used for numbers
  DIGITS: .text "0123456789abcdef"
  // Values of decimal digits
  RADIX_DECIMAL_VALUES: .word $2710, $3e8, $64, $a
  // Values of decimal digits
  RADIX_DECIMAL_VALUES_LONG: .dword $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a
  // Buffer used for stringified number being printed
  printf_buffer: .fill SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER, 0

