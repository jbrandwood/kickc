@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::toD0181
main::toD0181: scope:[main]  from main
  [5] phi()
  to:main::@13
main::@13: scope:[main]  from main::toD0181
  [6] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [7] call print_cls 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [8] phi()
  [9] call print_str 
  to:main::@15
main::@15: scope:[main]  from main::@14
  [10] phi()
  [11] call print_ln 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [12] (byte*~) print_char_cursor#89 ← (byte*) print_line_cursor#1
  [13] call print_str 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [14] phi()
  [15] call print_word_decimal 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [16] phi()
  [17] call print_ln 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [18] phi()
  [19] call memset 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [20] phi()
  [21] call clock_start 
  to:main::@1
main::@1: scope:[main]  from main::@20 main::@4
  [22] (byte*) main::sieve_i#2 ← phi( main::@20/(const byte*) sieve#0+(byte) 2 main::@4/(byte*) main::sieve_i#1 )
  [22] (word) main::i#11 ← phi( main::@20/(byte) 2 main::@4/(word) main::i#2 )
  [23] if((word) main::i#11<(const byte) SQRT_COUNT#0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [24] phi()
  [25] call clock 
  [26] (dword) clock::return#2 ← (dword) clock::return#0
  to:main::@21
main::@21: scope:[main]  from main::@3
  [27] (dword~) main::$10 ← (dword) clock::return#2
  [28] (dword) main::cyclecount#0 ← (dword~) main::$10 - (const dword) CLOCKS_PER_INIT#0
  [29] (dword) div32u16u::dividend#0 ← (dword) main::cyclecount#0
  [30] call div32u16u 
  [31] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:main::@22
main::@22: scope:[main]  from main::@21
  [32] (dword~) main::$14 ← (dword) div32u16u::return#2
  [33] (word) main::sec100s#0 ← (word)(dword~) main::$14
  [34] (byte*~) print_char_cursor#90 ← (byte*) print_line_cursor#1
  [35] call print_str 
  to:main::@23
main::@23: scope:[main]  from main::@22
  [36] (word) print_word_decimal::w#1 ← (word) main::sec100s#0
  [37] call print_word_decimal 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [38] phi()
  [39] call print_str 
  to:main::@25
main::@25: scope:[main]  from main::@24
  [40] (dword) print_dword_decimal::w#0 ← (dword) main::cyclecount#0
  [41] call print_dword_decimal 
  to:main::@26
main::@26: scope:[main]  from main::@25
  [42] phi()
  [43] call print_ln 
  to:main::@8
main::@8: scope:[main]  from main::@26 main::@28
  [44] (byte*) print_char_cursor#62 ← phi( main::@28/(byte*~) print_char_cursor#99 main::@26/(byte*) print_line_cursor#1 )
  [44] (word) main::i#10 ← phi( main::@28/(word) main::i#3 main::@26/(byte) 2 )
  [45] (byte*~) main::$38 ← (const byte*) sieve#0 + (word) main::i#10
  [46] if((byte) 0!=*((byte*~) main::$38)) goto main::@29
  to:main::@10
main::@10: scope:[main]  from main::@8
  [47] (word) print_word_decimal::w#2 ← (word) main::i#10
  [48] (byte*~) print_char_cursor#96 ← (byte*) print_char_cursor#62
  [49] call print_word_decimal 
  to:main::@27
main::@27: scope:[main]  from main::@10
  [50] phi()
  [51] call print_char 
  to:main::@9
main::@9: scope:[main]  from main::@27 main::@29
  [52] (byte*) print_char_cursor#63 ← phi( main::@29/(byte*~) print_char_cursor#101 main::@27/(byte*) print_char_cursor#10 )
  [53] (word) main::i#3 ← ++ (word) main::i#10
  [54] if((word) main::i#3<(word) $514) goto main::@28
  to:main::@11
main::@11: scope:[main]  from main::@9
  [55] phi()
  [56] call print_str 
  to:main::@12
main::@12: scope:[main]  from main::@11 main::@12
  [57] *((const byte*) SCREEN#0+(word) $3e7) ← ++ *((const byte*) SCREEN#0+(word) $3e7)
  to:main::@12
main::@28: scope:[main]  from main::@9
  [58] (byte*~) print_char_cursor#99 ← (byte*) print_char_cursor#63
  to:main::@8
main::@29: scope:[main]  from main::@8
  [59] (byte*~) print_char_cursor#101 ← (byte*) print_char_cursor#62
  to:main::@9
main::@2: scope:[main]  from main::@1
  [60] if((byte) 0!=*((byte*) main::sieve_i#2)) goto main::@4
  to:main::@7
main::@7: scope:[main]  from main::@2
  [61] (word) main::j#0 ← (word) main::i#11 << (byte) 1
  [62] (byte*) main::s#0 ← (const byte*) sieve#0 + (word) main::j#0
  to:main::@5
main::@5: scope:[main]  from main::@6 main::@7
  [63] (byte*) main::s#2 ← phi( main::@7/(byte*) main::s#0 main::@6/(byte*) main::s#1 )
  [63] (word) main::j#2 ← phi( main::@7/(word) main::j#0 main::@6/(word) main::j#1 )
  [64] if((word) main::j#2<(const word) COUNT#0) goto main::@6
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [65] (word) main::i#2 ← ++ (word) main::i#11
  [66] (byte*) main::sieve_i#1 ← ++ (byte*) main::sieve_i#2
  to:main::@1
main::@6: scope:[main]  from main::@5
  [67] *((byte*) main::s#2) ← (byte) 1
  [68] (byte*) main::s#1 ← (byte*) main::s#2 + (word) main::i#11
  [69] (word) main::j#1 ← (word) main::j#2 + (word) main::i#11
  to:main::@5
print_str: scope:[print_str]  from main::@11 main::@14 main::@16 main::@22 main::@24 print_dword_decimal::@1 print_word_decimal::@1
  [70] (byte*) print_char_cursor#66 ← phi( main::@11/(byte*) print_char_cursor#63 main::@14/(byte*) 1024 main::@16/(byte*~) print_char_cursor#89 main::@22/(byte*~) print_char_cursor#90 main::@24/(byte*) print_char_cursor#2 print_dword_decimal::@1/(byte*) print_char_cursor#2 print_word_decimal::@1/(byte*) print_char_cursor#58 )
  [70] (byte*) print_str::str#10 ← phi( main::@11/(const string) main::str4 main::@14/(const string) main::str main::@16/(const string) main::str1 main::@22/(const string) main::str2 main::@24/(const string) main::str3 print_dword_decimal::@1/(const byte[$b]) decimal_digits_long#0 print_word_decimal::@1/(const byte[6]) decimal_digits#0 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [71] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#66 print_str::@2/(byte*) print_char_cursor#1 )
  [71] (byte*) print_str::str#8 ← phi( print_str/(byte*) print_str::str#10 print_str::@2/(byte*) print_str::str#0 )
  [72] if(*((byte*) print_str::str#8)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [73] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [74] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#8)
  [75] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [76] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#8
  to:print_str::@1
print_char: scope:[print_char]  from main::@27
  [77] *((byte*) print_char_cursor#2) ← (const byte) print_char::ch#0
  [78] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#2
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [79] return 
  to:@return
print_word_decimal: scope:[print_word_decimal]  from main::@10 main::@17 main::@23
  [80] (byte*) print_char_cursor#58 ← phi( main::@10/(byte*~) print_char_cursor#96 main::@17/(byte*) print_char_cursor#2 main::@23/(byte*) print_char_cursor#2 )
  [80] (word) print_word_decimal::w#3 ← phi( main::@10/(word) print_word_decimal::w#2 main::@17/(const word) COUNT#0 main::@23/(word) print_word_decimal::w#1 )
  [81] (word) utoa::value#1 ← (word) print_word_decimal::w#3
  [82] call utoa 
  to:print_word_decimal::@1
print_word_decimal::@1: scope:[print_word_decimal]  from print_word_decimal
  [83] phi()
  [84] call print_str 
  to:print_word_decimal::@return
print_word_decimal::@return: scope:[print_word_decimal]  from print_word_decimal::@1
  [85] return 
  to:@return
utoa: scope:[utoa]  from print_word_decimal
  [86] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@2
  [87] (byte*) utoa::buffer#11 ← phi( utoa::@2/(byte*) utoa::buffer#12 utoa/(const byte[6]) decimal_digits#0 )
  [87] (byte) utoa::started#2 ← phi( utoa::@2/(byte) utoa::started#3 utoa/(byte) 0 )
  [87] (word) utoa::value#2 ← phi( utoa::@2/(word) utoa::value#4 utoa/(word) utoa::value#1 )
  [87] (byte) utoa::digit#2 ← phi( utoa::@2/(byte) utoa::digit#1 utoa/(byte) 0 )
  [88] (byte~) utoa::$11 ← (byte) utoa::digit#2 << (byte) 1
  [89] (word) utoa::digit_value#0 ← *((const word[]) RADIX_DECIMAL_VALUES#0 + (byte~) utoa::$11)
  [90] if((byte) 0!=(byte) utoa::started#2) goto utoa::@3
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@1
  [91] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@3
  to:utoa::@2
utoa::@2: scope:[utoa]  from utoa::@5 utoa::@6
  [92] (byte*) utoa::buffer#12 ← phi( utoa::@6/(byte*) utoa::buffer#11 utoa::@5/(byte*) utoa::buffer#3 )
  [92] (byte) utoa::started#3 ← phi( utoa::@6/(byte) utoa::started#2 utoa::@5/(byte) 1 )
  [92] (word) utoa::value#4 ← phi( utoa::@6/(word) utoa::value#2 utoa::@5/(word) utoa::value#0 )
  [93] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  [94] if((byte) utoa::digit#1<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@1
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@2
  [95] (byte~) utoa::$4 ← (byte)(word) utoa::value#4
  [96] *((byte*) utoa::buffer#12) ← *((const byte[]) DIGITS#0 + (byte~) utoa::$4)
  [97] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#12
  [98] *((byte*) utoa::buffer#4) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@4
  [99] return 
  to:@return
utoa::@3: scope:[utoa]  from utoa::@1 utoa::@6
  [100] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [101] (word) utoa_append::value#0 ← (word) utoa::value#2
  [102] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [103] call utoa_append 
  [104] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@5
utoa::@5: scope:[utoa]  from utoa::@3
  [105] (word) utoa::value#0 ← (word) utoa_append::return#0
  [106] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  to:utoa::@2
utoa_append: scope:[utoa_append]  from utoa::@3
  [107] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [108] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [108] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [109] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [110] *((byte*) utoa_append::buffer#0) ← *((const byte[]) DIGITS#0 + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [111] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [112] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [113] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1
print_ln: scope:[print_ln]  from main::@15 main::@18 main::@26
  [114] (byte*) print_line_cursor#21 ← phi( main::@15/(byte*) 1024 main::@18/(byte*) print_line_cursor#1 main::@26/(byte*) print_line_cursor#1 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [115] (byte*) print_line_cursor#11 ← phi( print_ln/(byte*) print_line_cursor#21 print_ln::@1/(byte*) print_line_cursor#1 )
  [116] (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#11 + (byte) $28
  [117] if((byte*) print_line_cursor#1<(byte*) print_char_cursor#2) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [118] return 
  to:@return
print_dword_decimal: scope:[print_dword_decimal]  from main::@25
  [119] (dword) ultoa::value#1 ← (dword) print_dword_decimal::w#0
  [120] call ultoa 
  to:print_dword_decimal::@1
print_dword_decimal::@1: scope:[print_dword_decimal]  from print_dword_decimal
  [121] phi()
  [122] call print_str 
  to:print_dword_decimal::@return
print_dword_decimal::@return: scope:[print_dword_decimal]  from print_dword_decimal::@1
  [123] return 
  to:@return
ultoa: scope:[ultoa]  from print_dword_decimal
  [124] phi()
  to:ultoa::@1
ultoa::@1: scope:[ultoa]  from ultoa ultoa::@2
  [125] (byte*) ultoa::buffer#11 ← phi( ultoa::@2/(byte*) ultoa::buffer#12 ultoa/(const byte[$b]) decimal_digits_long#0 )
  [125] (byte) ultoa::started#2 ← phi( ultoa::@2/(byte) ultoa::started#3 ultoa/(byte) 0 )
  [125] (dword) ultoa::value#2 ← phi( ultoa::@2/(dword) ultoa::value#4 ultoa/(dword) ultoa::value#1 )
  [125] (byte) ultoa::digit#2 ← phi( ultoa::@2/(byte) ultoa::digit#1 ultoa/(byte) 0 )
  [126] (byte~) ultoa::$11 ← (byte) ultoa::digit#2 << (byte) 2
  [127] (dword) ultoa::digit_value#0 ← *((const dword[]) RADIX_DECIMAL_VALUES_LONG#0 + (byte~) ultoa::$11)
  [128] if((byte) 0!=(byte) ultoa::started#2) goto ultoa::@3
  to:ultoa::@6
ultoa::@6: scope:[ultoa]  from ultoa::@1
  [129] if((dword) ultoa::value#2>=(dword) ultoa::digit_value#0) goto ultoa::@3
  to:ultoa::@2
ultoa::@2: scope:[ultoa]  from ultoa::@5 ultoa::@6
  [130] (byte*) ultoa::buffer#12 ← phi( ultoa::@6/(byte*) ultoa::buffer#11 ultoa::@5/(byte*) ultoa::buffer#3 )
  [130] (byte) ultoa::started#3 ← phi( ultoa::@6/(byte) ultoa::started#2 ultoa::@5/(byte) 1 )
  [130] (dword) ultoa::value#4 ← phi( ultoa::@6/(dword) ultoa::value#2 ultoa::@5/(dword) ultoa::value#0 )
  [131] (byte) ultoa::digit#1 ← ++ (byte) ultoa::digit#2
  [132] if((byte) ultoa::digit#1<(const byte) ultoa::max_digits#1-(byte) 1) goto ultoa::@1
  to:ultoa::@4
ultoa::@4: scope:[ultoa]  from ultoa::@2
  [133] (byte~) ultoa::$4 ← (byte)(dword) ultoa::value#4
  [134] *((byte*) ultoa::buffer#12) ← *((const byte[]) DIGITS#0 + (byte~) ultoa::$4)
  [135] (byte*) ultoa::buffer#4 ← ++ (byte*) ultoa::buffer#12
  [136] *((byte*) ultoa::buffer#4) ← (byte) 0
  to:ultoa::@return
ultoa::@return: scope:[ultoa]  from ultoa::@4
  [137] return 
  to:@return
ultoa::@3: scope:[ultoa]  from ultoa::@1 ultoa::@6
  [138] (byte*) ultoa_append::buffer#0 ← (byte*) ultoa::buffer#11
  [139] (dword) ultoa_append::value#0 ← (dword) ultoa::value#2
  [140] (dword) ultoa_append::sub#0 ← (dword) ultoa::digit_value#0
  [141] call ultoa_append 
  [142] (dword) ultoa_append::return#0 ← (dword) ultoa_append::value#2
  to:ultoa::@5
ultoa::@5: scope:[ultoa]  from ultoa::@3
  [143] (dword) ultoa::value#0 ← (dword) ultoa_append::return#0
  [144] (byte*) ultoa::buffer#3 ← ++ (byte*) ultoa::buffer#11
  to:ultoa::@2
ultoa_append: scope:[ultoa_append]  from ultoa::@3
  [145] phi()
  to:ultoa_append::@1
ultoa_append::@1: scope:[ultoa_append]  from ultoa_append ultoa_append::@2
  [146] (byte) ultoa_append::digit#2 ← phi( ultoa_append/(byte) 0 ultoa_append::@2/(byte) ultoa_append::digit#1 )
  [146] (dword) ultoa_append::value#2 ← phi( ultoa_append/(dword) ultoa_append::value#0 ultoa_append::@2/(dword) ultoa_append::value#1 )
  [147] if((dword) ultoa_append::value#2>=(dword) ultoa_append::sub#0) goto ultoa_append::@2
  to:ultoa_append::@3
ultoa_append::@3: scope:[ultoa_append]  from ultoa_append::@1
  [148] *((byte*) ultoa_append::buffer#0) ← *((const byte[]) DIGITS#0 + (byte) ultoa_append::digit#2)
  to:ultoa_append::@return
ultoa_append::@return: scope:[ultoa_append]  from ultoa_append::@3
  [149] return 
  to:@return
ultoa_append::@2: scope:[ultoa_append]  from ultoa_append::@1
  [150] (byte) ultoa_append::digit#1 ← ++ (byte) ultoa_append::digit#2
  [151] (dword) ultoa_append::value#1 ← (dword) ultoa_append::value#2 - (dword) ultoa_append::sub#0
  to:ultoa_append::@1
div32u16u: scope:[div32u16u]  from main::@21
  [152] (word) divr16u::dividend#1 ← > (dword) div32u16u::dividend#0
  [153] call divr16u 
  [154] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [155] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [156] (word) divr16u::dividend#2 ← < (dword) div32u16u::dividend#0
  [157] (word) divr16u::rem#4 ← (word) rem16u#1
  [158] call divr16u 
  [159] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [160] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [161] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [162] return 
  to:@return
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [163] (word) divr16u::dividend#5 ← phi( div32u16u/(word) divr16u::dividend#1 div32u16u::@1/(word) divr16u::dividend#2 )
  [163] (word) divr16u::rem#10 ← phi( div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [164] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [164] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [164] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [164] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [165] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [166] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [167] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [168] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [169] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [170] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [171] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [172] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [173] if((word) divr16u::rem#6<(const word) div32u16u::divisor#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [174] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [175] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) div32u16u::divisor#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [176] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [176] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [177] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [178] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [179] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [180] return 
  to:@return
clock: scope:[clock]  from main::@3
  [181] (dword) clock::return#0 ← (dword) $ffffffff - *((const dword*) CIA2_TIMER_AB#0)
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [182] return 
  to:@return
clock_start: scope:[clock_start]  from main::@20
  [183] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_CONTINUOUS#0
  [184] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
  [185] *((const dword*) CIA2_TIMER_AB#0) ← (dword) $ffffffff
  [186] *((const byte*) CIA2_TIMER_B_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0|(const byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A#0
  [187] *((const byte*) CIA2_TIMER_A_CONTROL#0) ← (const byte) CIA_TIMER_CONTROL_START#0
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [188] return 
  to:@return
memset: scope:[memset]  from main::@19 print_cls
  [189] (byte) memset::c#3 ← phi( main::@19/(byte) 0 print_cls/(byte) ' ' )
  [189] (void*) memset::str#3 ← phi( main::@19/(void*)(const byte*) sieve#0 print_cls/(void*)(byte*) 1024 )
  [189] (word) memset::num#2 ← phi( main::@19/(const word) COUNT#0 print_cls/(word) $3e8 )
  [190] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [191] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [192] (byte*~) memset::dst#3 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@2
  [193] (byte*) memset::dst#2 ← phi( memset::@1/(byte*~) memset::dst#3 memset::@2/(byte*) memset::dst#1 )
  [194] *((byte*) memset::dst#2) ← (byte) memset::c#3
  [195] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  [196] if((byte*) memset::dst#1!=(byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [197] return 
  to:@return
print_cls: scope:[print_cls]  from main::@13
  [198] phi()
  [199] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [200] return 
  to:@return
