// Tests procedures using global variables (should not fail)
byte* SCREEN = $0400;
main();
void main() {
   *SCREEN = 1;
}
PROGRAM
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  proc (void()) main()
  *((byte*) SCREEN) ← (byte) 1
main::@return:
  return 
  endproc // main()

SYMBOLS
(void~) $0
(byte*) SCREEN
(void()) main()
(label) main::@return

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@1
main: scope:[main]  from
  *((byte*) SCREEN) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  to:@end
@end: scope:[]  from @1

Removing empty block @1
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  (void~) $0 ← call main 
  to:@end
main: scope:[main]  from
  *((byte*) SCREEN) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@end: scope:[]  from @begin

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  *((byte*) SCREEN) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@end: scope:[]  from @2

Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#1 ← phi( @begin/(byte*) SCREEN#0 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@2
@2: scope:[]  from @begin
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#1 ← phi( @begin/(byte*) SCREEN#0 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@end: scope:[]  from @2

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#1 ← phi( @begin/(byte*) SCREEN#0 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@end: scope:[]  from @begin

Constant (byte*) SCREEN#0 (word) 1024
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  (byte*) SCREEN#1 ← phi( @begin/(word) 1024 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@end: scope:[]  from @begin

Redundant Phi (byte*) SCREEN#1 (word) 1024
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  call main param-assignment
  to:@end
main: scope:[main]  from @begin
  *((word) 1024) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@end: scope:[]  from @begin

Block Sequence Planned @begin @end main main::@return 
Block Sequence Planned @begin @end main main::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  call main param-assignment
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  *((word) 1024) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] *((word) 1024) ← (byte) 1 [ ]
  to:main::@return
main::@return: scope:[main]  from main
  [2] return  [ ]
  to:@return

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Block Sequence Planned @begin @end main main::@return 
Propagating live ranges...
CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @begin
main: scope:[main]  from @begin
  [1] *((word) 1024) ← (byte) 1 [ ]
  to:main::@return
main::@return: scope:[main]  from main
  [2] return  [ ]
  to:@return

CALL GRAPH
Calls in [] to 0:main 

DOMINATORS
@begin dominated by  @begin 
@end dominated by  @end @begin 
main dominated by  @begin main 
main::@return dominated by  main::@return @begin main 

NATURAL LOOPS

Found 0 loops in scope []
Found 0 loops in scope [main]
NATURAL LOOPS WITH DEPTH


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()

Initial phi equivalence classes
Complete equivalence classes
INITIAL ASM
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
  jmp bend
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] *((word) 1024) ← (byte) 1 [ ] -- _star_cowo1=coby2 
    lda #$1
    sta $400
    jmp breturn
  //SEG5 main::@return
  breturn:
  //SEG6 [2] return  [ ]
    rts
}

Statement [1] *((word) 1024) ← (byte) 1 [ ] always clobbers reg byte a 
Statement [1] *((word) 1024) ← (byte) 1 [ ] always clobbers reg byte a 
REGISTER UPLIFT POTENTIAL REGISTERS

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 24 combination 
Uplifting [] best 24 combination 
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass6NextJumpElimination
ASSEMBLER
//SEG0 @begin
bbegin:
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
bend:
//SEG3 main
main: {
  //SEG4 [1] *((word) 1024) ← (byte) 1 [ ] -- _star_cowo1=coby2 
    lda #$1
    sta $400
  //SEG5 main::@return
  breturn:
  //SEG6 [2] return  [ ]
    rts
}

Removing instruction bbegin:
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass6UnusedLabelElimination
ASSEMBLER
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] *((word) 1024) ← (byte) 1 [ ] -- _star_cowo1=coby2 
    lda #$1
    sta $400
  //SEG5 main::@return
  //SEG6 [2] return  [ ]
    rts
}

FINAL SYMBOL TABLE
(label) @begin
(label) @end
(byte*) SCREEN
(void()) main()
(label) main::@return


FINAL CODE
//SEG0 @begin
//SEG1 [0] call main param-assignment [ ]
  jsr main
//SEG2 @end
//SEG3 main
main: {
  //SEG4 [1] *((word) 1024) ← (byte) 1 [ ] -- _star_cowo1=coby2 
    lda #$1
    sta $400
  //SEG5 main::@return
  //SEG6 [2] return  [ ]
    rts
}

