Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::j#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::j#3 = phi( main/main::j#0, main::@2/main::j#4 )
  SCREEN[main::i#2] = TXT[main::j#3]
  main::j#1 = ++ main::j#3
  main::$0 = main::j#1 == 8
  main::$1 = ! main::$0
  if(main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  main::j#4 = phi( main::@1/main::j#1, main::@3/main::j#2 )
  main::i#3 = phi( main::@1/main::i#2, main::@3/main::i#4 )
  main::i#1 = main::i#3 + rangenext(0,$64)
  main::$2 = main::i#1 != rangelast(0,$64)
  if(main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  main::i#4 = phi( main::@1/main::i#2 )
  main::j#2 = 0
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte* SCREEN = (byte*)$400
const byte* TXT[]  = { 3, 1, $d, 5, $c, $f, $14, $20 }
void __start()
void main()
bool~ main::$0
bool~ main::$1
bool~ main::$2
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
byte main::j
byte main::j#0
byte main::j#1
byte main::j#2
byte main::j#3
byte main::j#4

Adding number conversion cast (unumber) 8 in main::$0 = main::j#1 == 8
Adding number conversion cast (unumber) 0 in main::j#2 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::j#2 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [6] main::$1 = main::j#1 != 8 from [5] main::$0 = main::j#1 == 8
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::i#2 = main::i#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [6] if(main::j#1!=8) goto main::@2
Simple Condition main::$2 [10] if(main::i#1!=rangelast(0,$64)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::j#0 = 0
Constant main::i#0 = 0
Constant main::j#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,$64)) goto main::@1 to $65
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) $65 in [6] if(main::i#1!=$65) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $65
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $65
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::j#0
Inlining constant with var siblings main::i#0
Inlining constant with var siblings main::j#2
Constant inlined main::i#0 = 0
Constant inlined main::j#0 = 0
Constant inlined main::j#2 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@2 and main::@1)
Added new block during phi lifting main::@5(between main::@1 and main::@2)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [10] main::j#5 = main::j#4
Coalesced [11] main::i#5 = main::i#1
Coalesced [12] main::j#6 = main::j#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label main::@4
Renumbering block main::@5 to main::@3
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@3

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  [1] main::j#3 = phi( main/0, main::@2/main::j#4 )
  [2] SCREEN[main::i#2] = TXT[main::j#3]
  [3] main::j#1 = ++ main::j#3
  [4] if(main::j#1!=8) goto main::@3
  to:main::@2
main::@3: scope:[main]  from main::@1
  [5] phi()
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [6] main::j#4 = phi( main::@3/main::j#1, main::@1/0 )
  [7] main::i#1 = ++ main::i#2
  [8] if(main::i#1!=$65) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 5.5
byte main::j
byte main::j#1 11.0
byte main::j#3 16.5
byte main::j#4 7.333333333333333

Initial phi equivalence classes
[ main::j#3 main::j#4 main::j#1 ]
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::j#3 main::j#4 main::j#1 ]
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::j#3 main::j#4 main::j#1 ]
Allocated zp[1]:3 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] SCREEN[main::i#2] = TXT[main::j#3] [ main::j#3 main::i#2 ] (  [ main::j#3 main::i#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::j#3 main::j#4 main::j#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i#2 main::i#1 ]
Statement [2] SCREEN[main::i#2] = TXT[main::j#3] [ main::j#3 main::i#2 ] (  [ main::j#3 main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::j#3 main::j#4 main::j#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i#2 main::i#1 ] : zp[1]:3 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 34.83: zp[1]:2 [ main::j#3 main::j#4 main::j#1 ] 22: zp[1]:3 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 471 combination reg byte y [ main::j#3 main::j#4 main::j#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 471 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inmemarray.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::j#3 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::j#3 = main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] SCREEN[main::i#2] = TXT[main::j#3] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda TXT,y
    sta SCREEN,x
    // [3] main::j#1 = ++ main::j#3 -- vbuyy=_inc_vbuyy 
    iny
    // [4] if(main::j#1!=8) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b3_from___b1
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [6] phi main::j#4 = 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  __b3_from___b1:
    jmp __b3
    // main::@3
  __b3:
    // [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [6] phi main::j#4 = main::j#1 [phi:main::@3->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [7] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::i#1!=$65) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // File Data
.segment Data
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b3_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Removing instruction __b1_from___b2:
Removing instruction __b3_from___b1:
Removing instruction __b3:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte* SCREEN = (byte*) 1024
const byte* TXT[]  = { 3, 1, $d, 5, $c, $f, $14, $20 }
void main()
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 5.5
byte main::j
byte main::j#1 reg byte y 11.0
byte main::j#3 reg byte y 16.5
byte main::j#4 reg byte y 7.333333333333333

reg byte y [ main::j#3 main::j#4 main::j#1 ]
reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 291

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="inmemarray.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::j#3 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::j#3 = main::j#4 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // SCREEN[i] = TXT[j]
    // [2] SCREEN[main::i#2] = TXT[main::j#3] -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuyy 
    lda TXT,y
    sta SCREEN,x
    // if(++j==8)
    // [3] main::j#1 = ++ main::j#3 -- vbuyy=_inc_vbuyy 
    iny
    // [4] if(main::j#1!=8) goto main::@3 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b2
    // [6] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [6] phi main::j#4 = 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // [5] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
    // main::@3
    // [6] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [6] phi main::j#4 = main::j#1 [phi:main::@3->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // for(byte i : 0..100)
    // [7] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [8] if(main::i#1!=$65) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$65
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
}
  // File Data
.segment Data
  TXT: .byte 3, 1, $d, 5, $c, $f, $14, $20

