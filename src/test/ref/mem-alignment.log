
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte[$100]) bs#0 ← { fill( $100, 0) }
  to:@1
main: scope:[main]  from @1
  (byte[$100]) main::cs#0 ← { fill( $100, 0) }
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *((byte[$100]) bs#0 + (byte) main::i#2) ← (byte) main::i#2
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$ff)
  (bool~) main::$0 ← (byte) main::i#1 != rangelast(0,$ff)
  if((bool~) main::$0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::j#0 ← (byte/word/signed word/dword/signed dword) $ff
  (byte) main::i1#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::i1#2 ← phi( main::@2/(byte) main::i1#0 main::@3/(byte) main::i1#1 )
  (byte) main::j#2 ← phi( main::@2/(byte) main::j#0 main::@3/(byte) main::j#1 )
  *((byte[$100]) main::cs#0 + (byte) main::i1#2) ← *((byte[$100]) bs#0 + (byte) main::j#2)
  (byte) main::j#1 ← -- (byte) main::j#2
  (byte) main::i1#1 ← (byte) main::i1#2 + rangenext(0,$ff)
  (bool~) main::$1 ← (byte) main::i1#1 != rangelast(0,$ff)
  if((bool~) main::$1) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte[$100]) bs
(byte[$100]) bs#0
(void()) main()
(bool~) main::$0
(bool~) main::$1
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte[$100]) main::cs
(byte[$100]) main::cs#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i1
(byte) main::i1#0
(byte) main::i1#1
(byte) main::i1#2
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2

Culled Empty Block (label) @2
Successful SSA optimization Pass2CullEmptyBlocks
Simple Condition (bool~) main::$0 [7] if((byte) main::i#1!=rangelast(0,$ff)) goto main::@1
Simple Condition (bool~) main::$1 [15] if((byte) main::i1#1!=rangelast(0,$ff)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte[$100]) bs#0 = { fill( $100, 0) }
Constant (const byte[$100]) main::cs#0 = { fill( $100, 0) }
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#0 = $ff
Constant (const byte) main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value if(main::i#1!=rangelast(0,$ff)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) 0
Resolved ranged next value main::i1#1 ← ++ main::i1#2 to ++
Resolved ranged comparison value if(main::i1#1!=rangelast(0,$ff)) goto main::@3 to (byte/signed byte/word/signed word/dword/signed dword) 0
Culled Empty Block (label) main::@2
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::i1#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::i1#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::j#0 = (byte/word/signed word/dword/signed dword) $ff
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@5(between main::@1 and main::@1)
Added new block during phi lifting main::@6(between main::@3 and main::@3)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 3 initial phi equivalence classes
Coalesced [15] main::j#3 ← main::j#1
Coalesced [16] main::i1#3 ← main::i1#1
Coalesced [17] main::i#3 ← main::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@5
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte[$100]) bs#0 + (byte) main::i#2) ← (byte) main::i#2
  [7] (byte) main::i#1 ← ++ (byte) main::i#2
  [8] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@3
  [9] (byte) main::i1#2 ← phi( main::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@3/(byte) main::i1#1 )
  [9] (byte) main::j#2 ← phi( main::@1/(byte/word/signed word/dword/signed dword) $ff main::@3/(byte) main::j#1 )
  [10] *((const byte[$100]) main::cs#0 + (byte) main::i1#2) ← *((const byte[$100]) bs#0 + (byte) main::j#2)
  [11] (byte) main::j#1 ← -- (byte) main::j#2
  [12] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [13] if((byte) main::i1#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte[$100]) bs
(void()) main()
(byte[$100]) main::cs
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 22.0
(byte) main::i1
(byte) main::i1#1 16.5
(byte) main::i1#2 11.0
(byte) main::j
(byte) main::j#1 7.333333333333333
(byte) main::j#2 16.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::i1#2 main::i1#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::i1#2 main::i1#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Allocated zp ZP_BYTE:4 [ main::i1#2 main::i1#1 ]

INITIAL ASM
//SEG0 File Comments
// Test that memory alignment of arrays work
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label i = 2
    .label j = 3
    .label i1 = 4
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] *((const byte[$100]) bs#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy i
    tya
    sta bs,y
  //SEG17 [7] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG18 [8] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda i
    cmp #0
    bne b1_from_b1
  //SEG19 [9] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
  //SEG20 [9] phi (byte) main::i1#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@1->main::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta i1
  //SEG21 [9] phi (byte) main::j#2 = (byte/word/signed word/dword/signed dword) $ff [phi:main::@1->main::@3#1] -- vbuz1=vbuc1 
    lda #$ff
    sta j
    jmp b3
  //SEG22 [9] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG23 [9] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@3->main::@3#0] -- register_copy 
  //SEG24 [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@3->main::@3#1] -- register_copy 
    jmp b3
  //SEG25 main::@3
  b3:
  //SEG26 [10] *((const byte[$100]) main::cs#0 + (byte) main::i1#2) ← *((const byte[$100]) bs#0 + (byte) main::j#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy j
    lda bs,y
    ldy i1
    sta cs,y
  //SEG27 [11] (byte) main::j#1 ← -- (byte) main::j#2 -- vbuz1=_dec_vbuz1 
    dec j
  //SEG28 [12] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc i1
  //SEG29 [13] if((byte) main::i1#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@3 -- vbuz1_neq_0_then_la1 
    lda i1
    cmp #0
    bne b3_from_b3
    jmp breturn
  //SEG30 main::@return
  breturn:
  //SEG31 [14] return 
    rts
    .align $100
    cs: .fill $100, 0
}
  .align $100
  bs: .fill $100, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [10] *((const byte[$100]) main::cs#0 + (byte) main::i1#2) ← *((const byte[$100]) bs#0 + (byte) main::j#2) [ main::j#2 main::i1#2 ] ( main:2 [ main::j#2 main::i1#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::i1#2 main::i1#1 ]
Statement [10] *((const byte[$100]) main::cs#0 + (byte) main::i1#2) ← *((const byte[$100]) bs#0 + (byte) main::j#2) [ main::j#2 main::i1#2 ] ( main:2 [ main::j#2 main::i1#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::j#2 main::j#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::i1#2 main::i1#1 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 27.5: zp ZP_BYTE:4 [ main::i1#2 main::i1#1 ] 23.83: zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 
Uplift Scope [] 

Uplifting [main] best 543 combination reg byte x [ main::i#2 main::i#1 ] reg byte y [ main::i1#2 main::i1#1 ] reg byte x [ main::j#2 main::j#1 ] 
Uplifting [] best 543 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Test that memory alignment of arrays work
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG15 main::@1
  b1:
  //SEG16 [6] *((const byte[$100]) bs#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta bs,x
  //SEG17 [7] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG18 [8] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1_from_b1
  //SEG19 [9] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  b3_from_b1:
  //SEG20 [9] phi (byte) main::i1#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@1->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG21 [9] phi (byte) main::j#2 = (byte/word/signed word/dword/signed dword) $ff [phi:main::@1->main::@3#1] -- vbuxx=vbuc1 
    ldx #$ff
    jmp b3
  //SEG22 [9] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  b3_from_b3:
  //SEG23 [9] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@3->main::@3#0] -- register_copy 
  //SEG24 [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@3->main::@3#1] -- register_copy 
    jmp b3
  //SEG25 main::@3
  b3:
  //SEG26 [10] *((const byte[$100]) main::cs#0 + (byte) main::i1#2) ← *((const byte[$100]) bs#0 + (byte) main::j#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda bs,x
    sta cs,y
  //SEG27 [11] (byte) main::j#1 ← -- (byte) main::j#2 -- vbuxx=_dec_vbuxx 
    dex
  //SEG28 [12] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG29 [13] if((byte) main::i1#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@3 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b3_from_b3
    jmp breturn
  //SEG30 main::@return
  breturn:
  //SEG31 [14] return 
    rts
    .align $100
    cs: .fill $100, 0
}
  .align $100
  bs: .fill $100, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Replacing label b3_from_b3 with b3
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Removing instruction b3_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3_from_b1:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte[$100]) bs
(const byte[$100]) bs#0 bs = { fill( $100, 0) }
(void()) main()
(label) main::@1
(label) main::@3
(label) main::@return
(byte[$100]) main::cs
(const byte[$100]) main::cs#0 cs = { fill( $100, 0) }
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 22.0
(byte) main::i1
(byte) main::i1#1 reg byte y 16.5
(byte) main::i1#2 reg byte y 11.0
(byte) main::j
(byte) main::j#1 reg byte x 7.333333333333333
(byte) main::j#2 reg byte x 16.5

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ main::j#2 main::j#1 ]
reg byte y [ main::i1#2 main::i1#1 ]


FINAL ASSEMBLER
Score: 381

//SEG0 File Comments
// Test that memory alignment of arrays work
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG13 [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG14 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG15 main::@1
  b1:
  //SEG16 [6] *((const byte[$100]) bs#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta bs,x
  //SEG17 [7] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG18 [8] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne b1
  //SEG19 [9] phi from main::@1 to main::@3 [phi:main::@1->main::@3]
  //SEG20 [9] phi (byte) main::i1#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@1->main::@3#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG21 [9] phi (byte) main::j#2 = (byte/word/signed word/dword/signed dword) $ff [phi:main::@1->main::@3#1] -- vbuxx=vbuc1 
    ldx #$ff
  //SEG22 [9] phi from main::@3 to main::@3 [phi:main::@3->main::@3]
  //SEG23 [9] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@3->main::@3#0] -- register_copy 
  //SEG24 [9] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@3->main::@3#1] -- register_copy 
  //SEG25 main::@3
  b3:
  //SEG26 [10] *((const byte[$100]) main::cs#0 + (byte) main::i1#2) ← *((const byte[$100]) bs#0 + (byte) main::j#2) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda bs,x
    sta cs,y
  //SEG27 [11] (byte) main::j#1 ← -- (byte) main::j#2 -- vbuxx=_dec_vbuxx 
    dex
  //SEG28 [12] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG29 [13] if((byte) main::i1#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@3 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b3
  //SEG30 main::@return
  //SEG31 [14] return 
    rts
    .align $100
    cs: .fill $100, 0
}
  .align $100
  bs: .fill $100, 0

