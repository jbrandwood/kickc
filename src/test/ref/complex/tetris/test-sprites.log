Resolved forward reference sprites_irq to interrupt(HARDWARE_CLOBBER) void sprites_irq()
Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call __init::$0 = call toSpritePtr PLAYFIELD_SPRITES 
Inlined call sprites_irq::$5 = call toSpritePtr PLAYFIELD_SPRITES 
Inlined call call vicSelectGfxBank PLAYFIELD_SCREEN_1 
Inlined call main::$1 = call toD018 PLAYFIELD_SCREEN_1 PLAYFIELD_CHARSET 
Inlined call main::$7 = call toSpritePtr SIN_SPRITE 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

void sprites_init()
sprites_init: scope:[sprites_init]  from main::@4
  *SPRITES_ENABLE = $f
  *SPRITES_MC = 0
  *SPRITES_EXPAND_Y = *SPRITES_MC
  *SPRITES_EXPAND_X = *SPRITES_EXPAND_Y
  sprites_init::xpos#0 = (byte)$18+$f*8
  sprites_init::s#0 = 0
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  sprites_init::xpos#2 = phi( sprites_init/sprites_init::xpos#0, sprites_init::@1/sprites_init::xpos#1 )
  sprites_init::s#2 = phi( sprites_init/sprites_init::s#0, sprites_init::@1/sprites_init::s#1 )
  sprites_init::$0 = sprites_init::s#2 * 2
  sprites_init::s2#0 = sprites_init::$0
  SPRITES_XPOS[sprites_init::s2#0] = sprites_init::xpos#2
  SPRITES_COLOR[sprites_init::s#2] = BLACK
  sprites_init::$1 = sprites_init::xpos#2 + $18
  sprites_init::xpos#1 = sprites_init::$1
  sprites_init::s#1 = sprites_init::s#2 + rangenext(0,3)
  sprites_init::$2 = sprites_init::s#1 != rangelast(0,3)
  if(sprites_init::$2) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  return 
  to:@return

void sprites_irq_init()
sprites_irq_init: scope:[sprites_irq_init]  from main::@2
  asm { sei  }
  *IRQ_STATUS = IRQ_RASTER
  asm { ldaCIA1_INTERRUPT  }
  *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  *PROCPORT = PROCPORT_RAM_IO
  *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  *VIC_CONTROL = *VIC_CONTROL & $7f
  *RASTER = IRQ_RASTER_FIRST
  *IRQ_ENABLE = IRQ_RASTER
  *HARDWARE_IRQ = &sprites_irq
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  return 
  to:@return

interrupt(HARDWARE_CLOBBER) void sprites_irq()
sprites_irq: scope:[sprites_irq]  from
  asm { cld  }
  sprites_irq::ypos#0 = irq_sprite_ypos
  SPRITES_YPOS[0] = sprites_irq::ypos#0
  SPRITES_YPOS[2] = sprites_irq::ypos#0
  SPRITES_YPOS[4] = sprites_irq::ypos#0
  SPRITES_YPOS[6] = sprites_irq::ypos#0
  sprites_irq::$0 = irq_raster_next + 1
  sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq sprites_irq::@8
  sprites_irq::$4 = *RASTER < sprites_irq::raster_sprite_gfx_modify
  if(sprites_irq::$4) goto sprites_irq::@8
  to:sprites_irq::@9
sprites_irq::@9: scope:[sprites_irq]  from sprites_irq::@8
  sprites_irq::ptr#0 = irq_sprite_ptr
  sprites_irq::$1 = render_screen_showing == 0
  if(sprites_irq::$1) goto sprites_irq::@1
  to:sprites_irq::@10
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq::@9
  sprites_irq::ptr#5 = phi( sprites_irq::@9/sprites_irq::ptr#0 )
  PLAYFIELD_SPRITE_PTRS_1[0] = sprites_irq::ptr#5
  sprites_irq::ptr#1 = ++ sprites_irq::ptr#5
  PLAYFIELD_SPRITE_PTRS_1[1] = sprites_irq::ptr#1
  PLAYFIELD_SPRITE_PTRS_1[2] = sprites_irq::ptr#1
  sprites_irq::ptr#2 = ++ sprites_irq::ptr#1
  PLAYFIELD_SPRITE_PTRS_1[3] = sprites_irq::ptr#2
  to:sprites_irq::@2
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@9
  sprites_irq::ptr#6 = phi( sprites_irq::@9/sprites_irq::ptr#0 )
  PLAYFIELD_SPRITE_PTRS_2[0] = sprites_irq::ptr#6
  sprites_irq::ptr#3 = ++ sprites_irq::ptr#6
  PLAYFIELD_SPRITE_PTRS_2[1] = sprites_irq::ptr#3
  PLAYFIELD_SPRITE_PTRS_2[2] = sprites_irq::ptr#3
  sprites_irq::ptr#4 = ++ sprites_irq::ptr#3
  PLAYFIELD_SPRITE_PTRS_2[3] = sprites_irq::ptr#4
  to:sprites_irq::@2
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@1 sprites_irq::@10
  irq_cnt = ++ irq_cnt
  sprites_irq::$2 = irq_cnt == 9
  if(sprites_irq::$2) goto sprites_irq::@3
  to:sprites_irq::@6
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2
  irq_raster_next = irq_raster_next + $15
  irq_sprite_ypos = SPRITES_FIRST_YPOS
  sprites_irq::toSpritePtr1_sprite#0 = PLAYFIELD_SPRITES
  to:sprites_irq::toSpritePtr1
sprites_irq::toSpritePtr1: scope:[sprites_irq]  from sprites_irq::@3
  sprites_irq::toSpritePtr1_sprite#1 = phi( sprites_irq::@3/sprites_irq::toSpritePtr1_sprite#0 )
  sprites_irq::toSpritePtr1_$1 = (word)sprites_irq::toSpritePtr1_sprite#1
  sprites_irq::toSpritePtr1_$0 = sprites_irq::toSpritePtr1_$1 / $40
  sprites_irq::toSpritePtr1_return#0 = (byte)sprites_irq::toSpritePtr1_$0
  to:sprites_irq::toSpritePtr1_@return
sprites_irq::toSpritePtr1_@return: scope:[sprites_irq]  from sprites_irq::toSpritePtr1
  sprites_irq::toSpritePtr1_return#2 = phi( sprites_irq::toSpritePtr1/sprites_irq::toSpritePtr1_return#0 )
  sprites_irq::toSpritePtr1_return#1 = sprites_irq::toSpritePtr1_return#2
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq::toSpritePtr1_@return
  sprites_irq::toSpritePtr1_return#3 = phi( sprites_irq::toSpritePtr1_@return/sprites_irq::toSpritePtr1_return#1 )
  sprites_irq::$5 = sprites_irq::toSpritePtr1_return#3
  irq_sprite_ptr = sprites_irq::$5
  to:sprites_irq::@5
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@2
  sprites_irq::$3 = irq_cnt == $a
  if(sprites_irq::$3) goto sprites_irq::@4
  to:sprites_irq::@7
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@6
  irq_cnt = 0
  irq_raster_next = IRQ_RASTER_FIRST
  irq_sprite_ypos = irq_sprite_ypos + $15
  irq_sprite_ptr = irq_sprite_ptr + 3
  to:sprites_irq::@5
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@6
  irq_raster_next = irq_raster_next + $14
  irq_sprite_ypos = irq_sprite_ypos + $15
  irq_sprite_ptr = irq_sprite_ptr + 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7
  *RASTER = irq_raster_next
  *IRQ_STATUS = IRQ_RASTER
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@5
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  sin_idx#34 = phi( __start::@1/sin_idx#18 )
  main::vicSelectGfxBank1_gfx#0 = PLAYFIELD_SCREEN_1
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  sin_idx#33 = phi( main/sin_idx#34 )
  main::vicSelectGfxBank1_gfx#1 = phi( main/main::vicSelectGfxBank1_gfx#0 )
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  main::vicSelectGfxBank1_toDd001_gfx#0 = main::vicSelectGfxBank1_gfx#1
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  sin_idx#32 = phi( main::vicSelectGfxBank1/sin_idx#33 )
  main::vicSelectGfxBank1_toDd001_gfx#1 = phi( main::vicSelectGfxBank1/main::vicSelectGfxBank1_toDd001_gfx#0 )
  main::vicSelectGfxBank1_toDd001_$0 = > (word)main::vicSelectGfxBank1_toDd001_gfx#1
  main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
  main::vicSelectGfxBank1_toDd001_$2 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
  main::vicSelectGfxBank1_toDd001_return#0 = main::vicSelectGfxBank1_toDd001_$2
  to:main::vicSelectGfxBank1_toDd001_@return
main::vicSelectGfxBank1_toDd001_@return: scope:[main]  from main::vicSelectGfxBank1_toDd001
  sin_idx#31 = phi( main::vicSelectGfxBank1_toDd001/sin_idx#32 )
  main::vicSelectGfxBank1_toDd001_return#2 = phi( main::vicSelectGfxBank1_toDd001/main::vicSelectGfxBank1_toDd001_return#0 )
  main::vicSelectGfxBank1_toDd001_return#1 = main::vicSelectGfxBank1_toDd001_return#2
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001_@return
  sin_idx#30 = phi( main::vicSelectGfxBank1_toDd001_@return/sin_idx#31 )
  main::vicSelectGfxBank1_toDd001_return#3 = phi( main::vicSelectGfxBank1_toDd001_@return/main::vicSelectGfxBank1_toDd001_return#1 )
  main::vicSelectGfxBank1_$0 = main::vicSelectGfxBank1_toDd001_return#3
  *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = main::vicSelectGfxBank1_$0
  to:main::@3
main::@3: scope:[main]  from main::vicSelectGfxBank1_@1
  sin_idx#29 = phi( main::vicSelectGfxBank1_@1/sin_idx#30 )
  main::toD0181_screen#0 = PLAYFIELD_SCREEN_1
  main::toD0181_gfx#0 = PLAYFIELD_CHARSET
  to:main::toD0181
main::toD0181: scope:[main]  from main::@3
  sin_idx#28 = phi( main::@3/sin_idx#29 )
  main::toD0181_gfx#1 = phi( main::@3/main::toD0181_gfx#0 )
  main::toD0181_screen#1 = phi( main::@3/main::toD0181_screen#0 )
  main::toD0181_$7 = (word)main::toD0181_screen#1
  main::toD0181_$0 = main::toD0181_$7 & $3fff
  main::toD0181_$1 = main::toD0181_$0 * 4
  main::toD0181_$2 = > main::toD0181_$1
  main::toD0181_$3 = > (word)main::toD0181_gfx#1
  main::toD0181_$4 = main::toD0181_$3 / 4
  main::toD0181_$5 = main::toD0181_$4 & $f
  main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
  main::toD0181_return#0 = main::toD0181_$6
  to:main::toD0181_@return
main::toD0181_@return: scope:[main]  from main::toD0181
  sin_idx#27 = phi( main::toD0181/sin_idx#28 )
  main::toD0181_return#2 = phi( main::toD0181/main::toD0181_return#0 )
  main::toD0181_return#1 = main::toD0181_return#2
  to:main::@4
main::@4: scope:[main]  from main::toD0181_@return
  sin_idx#26 = phi( main::toD0181_@return/sin_idx#27 )
  main::toD0181_return#3 = phi( main::toD0181_@return/main::toD0181_return#1 )
  main::$1 = main::toD0181_return#3
  *D018 = main::$1
  call sprites_init 
  to:main::@6
main::@6: scope:[main]  from main::@4
  sin_idx#25 = phi( main::@4/sin_idx#26 )
  *SPRITES_ENABLE = $ff
  main::xpos#0 = $18
  main::ypos#0 = $32
  main::s#0 = 4
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@6
  sin_idx#24 = phi( main::@5/sin_idx#21, main::@6/sin_idx#25 )
  main::ypos#2 = phi( main::@5/main::ypos#1, main::@6/main::ypos#0 )
  main::xpos#2 = phi( main::@5/main::xpos#1, main::@6/main::xpos#0 )
  main::s#2 = phi( main::@5/main::s#1, main::@6/main::s#0 )
  main::$5 = main::s#2 * 2
  main::s2#0 = main::$5
  SPRITES_XPOS[main::s2#0] = main::xpos#2
  SPRITES_YPOS[main::s2#0] = main::ypos#2
  main::$6 = main::s#2 - 3
  SPRITES_COLOR[main::s#2] = main::$6
  main::toSpritePtr1_sprite#0 = SIN_SPRITE
  to:main::toSpritePtr1
main::toSpritePtr1: scope:[main]  from main::@1
  sin_idx#23 = phi( main::@1/sin_idx#24 )
  main::ypos#5 = phi( main::@1/main::ypos#2 )
  main::xpos#5 = phi( main::@1/main::xpos#2 )
  main::s#5 = phi( main::@1/main::s#2 )
  main::toSpritePtr1_sprite#1 = phi( main::@1/main::toSpritePtr1_sprite#0 )
  main::toSpritePtr1_$1 = (word)main::toSpritePtr1_sprite#1
  main::toSpritePtr1_$0 = main::toSpritePtr1_$1 / $40
  main::toSpritePtr1_return#0 = (byte)main::toSpritePtr1_$0
  to:main::toSpritePtr1_@return
main::toSpritePtr1_@return: scope:[main]  from main::toSpritePtr1
  sin_idx#22 = phi( main::toSpritePtr1/sin_idx#23 )
  main::ypos#4 = phi( main::toSpritePtr1/main::ypos#5 )
  main::xpos#4 = phi( main::toSpritePtr1/main::xpos#5 )
  main::s#4 = phi( main::toSpritePtr1/main::s#5 )
  main::toSpritePtr1_return#2 = phi( main::toSpritePtr1/main::toSpritePtr1_return#0 )
  main::toSpritePtr1_return#1 = main::toSpritePtr1_return#2
  to:main::@5
main::@5: scope:[main]  from main::toSpritePtr1_@return
  sin_idx#21 = phi( main::toSpritePtr1_@return/sin_idx#22 )
  main::ypos#3 = phi( main::toSpritePtr1_@return/main::ypos#4 )
  main::xpos#3 = phi( main::toSpritePtr1_@return/main::xpos#4 )
  main::s#3 = phi( main::toSpritePtr1_@return/main::s#4 )
  main::toSpritePtr1_return#3 = phi( main::toSpritePtr1_@return/main::toSpritePtr1_return#1 )
  main::$7 = main::toSpritePtr1_return#3
  PLAYFIELD_SPRITE_PTRS_1[main::s#3] = main::$7
  main::xpos#1 = main::xpos#3 + $18
  main::ypos#1 = main::ypos#3 + $18
  main::s#1 = main::s#3 + rangenext(4,7)
  main::$8 = main::s#1 != rangelast(4,7)
  if(main::$8) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@5
  sin_idx#19 = phi( main::@5/sin_idx#21 )
  call sprites_irq_init 
  to:main::@7
main::@7: scope:[main]  from main::@2
  sin_idx#14 = phi( main::@2/sin_idx#19 )
  call loop 
  to:main::@8
main::@8: scope:[main]  from main::@7
  sin_idx#7 = phi( main::@7/sin_idx#3 )
  sin_idx#0 = sin_idx#7
  to:main::@return
main::@return: scope:[main]  from main::@8
  sin_idx#8 = phi( main::@8/sin_idx#0 )
  sin_idx#1 = sin_idx#8
  return 
  to:@return

void loop()
loop: scope:[loop]  from main::@7
  sin_idx#20 = phi( main::@7/sin_idx#14 )
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@5
  sin_idx#17 = phi( loop/sin_idx#20, loop::@5/sin_idx#2 )
  if(true) goto loop::@2
  to:loop::@return
loop::@2: scope:[loop]  from loop::@1 loop::@2
  sin_idx#15 = phi( loop::@1/sin_idx#17, loop::@2/sin_idx#15 )
  loop::$0 = *RASTER != $ff
  if(loop::$0) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  sin_idx#9 = phi( loop::@2/sin_idx#15 )
  loop::idx#0 = sin_idx#9
  loop::s#0 = 4
  to:loop::@4
loop::@4: scope:[loop]  from loop::@3 loop::@4
  sin_idx#16 = phi( loop::@3/sin_idx#9, loop::@4/sin_idx#16 )
  loop::idx#2 = phi( loop::@3/loop::idx#0, loop::@4/loop::idx#1 )
  loop::s#2 = phi( loop::@3/loop::s#0, loop::@4/loop::s#1 )
  loop::$1 = loop::s#2 * 2
  SPRITES_YPOS[loop::$1] = SIN[loop::idx#2]
  loop::idx#1 = loop::idx#2 + $a
  loop::s#1 = loop::s#2 + rangenext(4,7)
  loop::$2 = loop::s#1 != rangelast(4,7)
  if(loop::$2) goto loop::@4
  to:loop::@5
loop::@5: scope:[loop]  from loop::@4
  sin_idx#10 = phi( loop::@4/sin_idx#16 )
  sin_idx#2 = ++ sin_idx#10
  to:loop::@1
loop::@return: scope:[loop]  from loop::@1
  sin_idx#11 = phi( loop::@1/sin_idx#17 )
  sin_idx#3 = sin_idx#11
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  render_screen_showing = 0
  irq_raster_next = IRQ_RASTER_FIRST
  irq_sprite_ypos = (byte)SPRITES_FIRST_YPOS+$15
  __start::__init1_toSpritePtr1_sprite#0 = PLAYFIELD_SPRITES
  to:__start::__init1_toSpritePtr1
__start::__init1_toSpritePtr1: scope:[__start]  from __start::__init1
  __start::__init1_toSpritePtr1_sprite#1 = phi( __start::__init1/__start::__init1_toSpritePtr1_sprite#0 )
  __start::__init1_toSpritePtr1_$1 = (word)__start::__init1_toSpritePtr1_sprite#1
  __start::__init1_toSpritePtr1_$0 = __start::__init1_toSpritePtr1_$1 / $40
  __start::__init1_toSpritePtr1_return#0 = (byte)__start::__init1_toSpritePtr1_$0
  to:__start::__init1_toSpritePtr1_@return
__start::__init1_toSpritePtr1_@return: scope:[__start]  from __start::__init1_toSpritePtr1
  __start::__init1_toSpritePtr1_return#2 = phi( __start::__init1_toSpritePtr1/__start::__init1_toSpritePtr1_return#0 )
  __start::__init1_toSpritePtr1_return#1 = __start::__init1_toSpritePtr1_return#2
  to:__start::__init1_@1
__start::__init1_@1: scope:[__start]  from __start::__init1_toSpritePtr1_@return
  __start::__init1_toSpritePtr1_return#3 = phi( __start::__init1_toSpritePtr1_@return/__start::__init1_toSpritePtr1_return#1 )
  __start::__init1_$0 = __start::__init1_toSpritePtr1_return#3
  __start::__init1_$1 = __start::__init1_$0 + 3
  irq_sprite_ptr = __start::__init1_$1
  irq_cnt = 0
  sin_idx#4 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1_@1
  sin_idx#18 = phi( __start::__init1_@1/sin_idx#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  sin_idx#12 = phi( __start::@1/sin_idx#1 )
  sin_idx#5 = sin_idx#12
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  sin_idx#13 = phi( __start::@2/sin_idx#5 )
  sin_idx#6 = sin_idx#13
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte BLACK = 0
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*)$dc00
const nomodify byte* CIA1_INTERRUPT = (byte*)$dc0d
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*)$dd00
const nomodify byte CIA_INTERRUPT_CLEAR = $7f
const nomodify byte* D018 = (byte*)$d018
const nomodify void()** HARDWARE_IRQ = (void()**)$fffe
const nomodify byte* IRQ_ENABLE = (byte*)$d01a
const nomodify byte IRQ_RASTER = 1
const nomodify byte IRQ_RASTER_FIRST = (byte)SPRITES_FIRST_YPOS+$13
const nomodify byte* IRQ_STATUS = (byte*)$d019
const byte OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A = 0
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte* PLAYFIELD_CHARSET[]  = kickasm {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"
 }}
const nomodify byte* PLAYFIELD_SCREEN_1 = (byte*)$400
const nomodify byte* PLAYFIELD_SCREEN_2 = (byte*)$2c00
const byte* PLAYFIELD_SPRITES[$1e*$40]  = kickasm {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
const nomodify byte* PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
const nomodify byte* PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
const nomodify byte* PROCPORT = (byte*)1
const nomodify byte* PROCPORT_DDR = (byte*)0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_IO = 5
const nomodify byte* RASTER = (byte*)$d012
const byte* SIN[$100]  = kickasm {{ .var AMPL = 200-21
    .for(var i=0; i<256; i++) {
  	  .byte 51+AMPL/2+sin(toRadians([i*360]/256))*AMPL/2
    }
 }}
const byte* SIN_SPRITE[$40]  = kickasm {{ .fill $40, $ff
 }}
const nomodify byte* SPRITES_COLOR = (byte*)$d027
const nomodify byte* SPRITES_ENABLE = (byte*)$d015
const nomodify byte* SPRITES_EXPAND_X = (byte*)$d01d
const nomodify byte* SPRITES_EXPAND_Y = (byte*)$d017
const nomodify byte SPRITES_FIRST_YPOS = $31
const nomodify byte* SPRITES_MC = (byte*)$d01c
const nomodify byte* SPRITES_XPOS = (byte*)$d000
const nomodify byte* SPRITES_YPOS = (byte*)$d001
const nomodify word SPRITE_PTRS = $3f8
const nomodify byte* VIC_CONTROL = (byte*)$d011
void __start()
byte~ __start::__init1_$0
number~ __start::__init1_$1
number~ __start::__init1_toSpritePtr1_$0
word~ __start::__init1_toSpritePtr1_$1
byte __start::__init1_toSpritePtr1_return
byte __start::__init1_toSpritePtr1_return#0
byte __start::__init1_toSpritePtr1_return#1
byte __start::__init1_toSpritePtr1_return#2
byte __start::__init1_toSpritePtr1_return#3
byte* __start::__init1_toSpritePtr1_sprite
byte* __start::__init1_toSpritePtr1_sprite#0
byte* __start::__init1_toSpritePtr1_sprite#1
volatile byte irq_cnt loadstore
volatile byte irq_raster_next loadstore
volatile byte irq_sprite_ptr loadstore
volatile byte irq_sprite_ypos loadstore
void loop()
bool~ loop::$0
number~ loop::$1
bool~ loop::$2
byte loop::idx
byte loop::idx#0
byte loop::idx#1
byte loop::idx#2
byte loop::s
byte loop::s#0
byte loop::s#1
byte loop::s#2
void main()
byte~ main::$1
number~ main::$5
number~ main::$6
byte~ main::$7
bool~ main::$8
byte main::s
byte main::s#0
byte main::s#1
byte main::s#2
byte main::s#3
byte main::s#4
byte main::s#5
byte main::s2
byte main::s2#0
number~ main::toD0181_$0
number~ main::toD0181_$1
number~ main::toD0181_$2
byte~ main::toD0181_$3
number~ main::toD0181_$4
number~ main::toD0181_$5
number~ main::toD0181_$6
word~ main::toD0181_$7
byte* main::toD0181_gfx
byte* main::toD0181_gfx#0
byte* main::toD0181_gfx#1
byte main::toD0181_return
byte main::toD0181_return#0
byte main::toD0181_return#1
byte main::toD0181_return#2
byte main::toD0181_return#3
byte* main::toD0181_screen
byte* main::toD0181_screen#0
byte* main::toD0181_screen#1
number~ main::toSpritePtr1_$0
word~ main::toSpritePtr1_$1
byte main::toSpritePtr1_return
byte main::toSpritePtr1_return#0
byte main::toSpritePtr1_return#1
byte main::toSpritePtr1_return#2
byte main::toSpritePtr1_return#3
byte* main::toSpritePtr1_sprite
byte* main::toSpritePtr1_sprite#0
byte* main::toSpritePtr1_sprite#1
byte~ main::vicSelectGfxBank1_$0
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_gfx#0
byte* main::vicSelectGfxBank1_gfx#1
byte~ main::vicSelectGfxBank1_toDd001_$0
number~ main::vicSelectGfxBank1_toDd001_$1
number~ main::vicSelectGfxBank1_toDd001_$2
byte* main::vicSelectGfxBank1_toDd001_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx#0
byte* main::vicSelectGfxBank1_toDd001_gfx#1
byte main::vicSelectGfxBank1_toDd001_return
byte main::vicSelectGfxBank1_toDd001_return#0
byte main::vicSelectGfxBank1_toDd001_return#1
byte main::vicSelectGfxBank1_toDd001_return#2
byte main::vicSelectGfxBank1_toDd001_return#3
byte main::xpos
byte main::xpos#0
byte main::xpos#1
byte main::xpos#2
byte main::xpos#3
byte main::xpos#4
byte main::xpos#5
byte main::ypos
byte main::ypos#0
byte main::ypos#1
byte main::ypos#2
byte main::ypos#3
byte main::ypos#4
byte main::ypos#5
volatile byte render_screen_showing loadstore
byte sin_idx
byte sin_idx#0
byte sin_idx#1
byte sin_idx#10
byte sin_idx#11
byte sin_idx#12
byte sin_idx#13
byte sin_idx#14
byte sin_idx#15
byte sin_idx#16
byte sin_idx#17
byte sin_idx#18
byte sin_idx#19
byte sin_idx#2
byte sin_idx#20
byte sin_idx#21
byte sin_idx#22
byte sin_idx#23
byte sin_idx#24
byte sin_idx#25
byte sin_idx#26
byte sin_idx#27
byte sin_idx#28
byte sin_idx#29
byte sin_idx#3
byte sin_idx#30
byte sin_idx#31
byte sin_idx#32
byte sin_idx#33
byte sin_idx#34
byte sin_idx#4
byte sin_idx#5
byte sin_idx#6
byte sin_idx#7
byte sin_idx#8
byte sin_idx#9
void sprites_init()
number~ sprites_init::$0
number~ sprites_init::$1
bool~ sprites_init::$2
byte sprites_init::s
byte sprites_init::s#0
byte sprites_init::s#1
byte sprites_init::s#2
byte sprites_init::s2
byte sprites_init::s2#0
byte sprites_init::xpos
byte sprites_init::xpos#0
byte sprites_init::xpos#1
byte sprites_init::xpos#2
interrupt(HARDWARE_CLOBBER) void sprites_irq()
number~ sprites_irq::$0
bool~ sprites_irq::$1
bool~ sprites_irq::$2
bool~ sprites_irq::$3
bool~ sprites_irq::$4
byte~ sprites_irq::$5
byte sprites_irq::ptr
byte sprites_irq::ptr#0
byte sprites_irq::ptr#1
byte sprites_irq::ptr#2
byte sprites_irq::ptr#3
byte sprites_irq::ptr#4
byte sprites_irq::ptr#5
byte sprites_irq::ptr#6
volatile byte sprites_irq::raster_sprite_gfx_modify loadstore
number~ sprites_irq::toSpritePtr1_$0
word~ sprites_irq::toSpritePtr1_$1
byte sprites_irq::toSpritePtr1_return
byte sprites_irq::toSpritePtr1_return#0
byte sprites_irq::toSpritePtr1_return#1
byte sprites_irq::toSpritePtr1_return#2
byte sprites_irq::toSpritePtr1_return#3
byte* sprites_irq::toSpritePtr1_sprite
byte* sprites_irq::toSpritePtr1_sprite#0
byte* sprites_irq::toSpritePtr1_sprite#1
byte sprites_irq::ypos
byte sprites_irq::ypos#0
void sprites_irq_init()

Adding number conversion cast (unumber) $13 in 
Adding number conversion cast (unumber) $f in *SPRITES_ENABLE = $f
Adding number conversion cast (unumber) 0 in *SPRITES_MC = 0
Adding number conversion cast (unumber) 2 in sprites_init::$0 = sprites_init::s#2 * 2
Adding number conversion cast (unumber) sprites_init::$0 in sprites_init::$0 = sprites_init::s#2 * (unumber)2
Adding number conversion cast (unumber) $18 in sprites_init::$1 = sprites_init::xpos#2 + $18
Adding number conversion cast (unumber) sprites_init::$1 in sprites_init::$1 = sprites_init::xpos#2 + (unumber)$18
Adding number conversion cast (unumber) $7f in *VIC_CONTROL = *VIC_CONTROL & $7f
Adding number conversion cast (unumber) 0 in SPRITES_YPOS[0] = sprites_irq::ypos#0
Adding number conversion cast (unumber) 2 in SPRITES_YPOS[2] = sprites_irq::ypos#0
Adding number conversion cast (unumber) 4 in SPRITES_YPOS[4] = sprites_irq::ypos#0
Adding number conversion cast (unumber) 6 in SPRITES_YPOS[6] = sprites_irq::ypos#0
Adding number conversion cast (unumber) 1 in sprites_irq::$0 = irq_raster_next + 1
Adding number conversion cast (unumber) sprites_irq::$0 in sprites_irq::$0 = irq_raster_next + (unumber)1
Adding number conversion cast (unumber) 0 in sprites_irq::$1 = render_screen_showing == 0
Adding number conversion cast (unumber) 0 in PLAYFIELD_SPRITE_PTRS_1[0] = sprites_irq::ptr#5
Adding number conversion cast (unumber) 1 in PLAYFIELD_SPRITE_PTRS_1[1] = sprites_irq::ptr#1
Adding number conversion cast (unumber) 2 in PLAYFIELD_SPRITE_PTRS_1[2] = sprites_irq::ptr#1
Adding number conversion cast (unumber) 3 in PLAYFIELD_SPRITE_PTRS_1[3] = sprites_irq::ptr#2
Adding number conversion cast (unumber) 0 in PLAYFIELD_SPRITE_PTRS_2[0] = sprites_irq::ptr#6
Adding number conversion cast (unumber) 1 in PLAYFIELD_SPRITE_PTRS_2[1] = sprites_irq::ptr#3
Adding number conversion cast (unumber) 2 in PLAYFIELD_SPRITE_PTRS_2[2] = sprites_irq::ptr#3
Adding number conversion cast (unumber) 3 in PLAYFIELD_SPRITE_PTRS_2[3] = sprites_irq::ptr#4
Adding number conversion cast (unumber) 9 in sprites_irq::$2 = irq_cnt == 9
Adding number conversion cast (unumber) $15 in irq_raster_next = irq_raster_next + $15
Adding number conversion cast (unumber) $40 in sprites_irq::toSpritePtr1_$0 = sprites_irq::toSpritePtr1_$1 / $40
Adding number conversion cast (unumber) sprites_irq::toSpritePtr1_$0 in sprites_irq::toSpritePtr1_$0 = sprites_irq::toSpritePtr1_$1 / (unumber)$40
Adding number conversion cast (unumber) $a in sprites_irq::$3 = irq_cnt == $a
Adding number conversion cast (unumber) 0 in irq_cnt = 0
Adding number conversion cast (unumber) $15 in irq_sprite_ypos = irq_sprite_ypos + $15
Adding number conversion cast (unumber) 3 in irq_sprite_ptr = irq_sprite_ptr + 3
Adding number conversion cast (unumber) $14 in irq_raster_next = irq_raster_next + $14
Adding number conversion cast (unumber) $15 in irq_sprite_ypos = irq_sprite_ypos + $15
Adding number conversion cast (unumber) 3 in irq_sprite_ptr = irq_sprite_ptr + 3
Adding number conversion cast (unumber) 3 in *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
Adding number conversion cast (unumber) $40 in main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$1 in main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / (unumber)$40
Adding number conversion cast (unumber) 3 in main::vicSelectGfxBank1_toDd001_$2 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) main::vicSelectGfxBank1_toDd001_$2 in main::vicSelectGfxBank1_toDd001_$2 = (unumber)3 ^ main::vicSelectGfxBank1_toDd001_$1
Adding number conversion cast (unumber) $3fff in main::toD0181_$0 = main::toD0181_$7 & $3fff
Adding number conversion cast (unumber) main::toD0181_$0 in main::toD0181_$0 = main::toD0181_$7 & (unumber)$3fff
Adding number conversion cast (unumber) 4 in main::toD0181_$1 = main::toD0181_$0 * 4
Adding number conversion cast (unumber) main::toD0181_$1 in main::toD0181_$1 = main::toD0181_$0 * (unumber)4
Adding number conversion cast (unumber) main::toD0181_$2 in main::toD0181_$2 = > main::toD0181_$1
Adding number conversion cast (unumber) 4 in main::toD0181_$4 = main::toD0181_$3 / 4
Adding number conversion cast (unumber) main::toD0181_$4 in main::toD0181_$4 = main::toD0181_$3 / (unumber)4
Adding number conversion cast (unumber) $f in main::toD0181_$5 = main::toD0181_$4 & $f
Adding number conversion cast (unumber) main::toD0181_$5 in main::toD0181_$5 = main::toD0181_$4 & (unumber)$f
Adding number conversion cast (unumber) main::toD0181_$6 in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Adding number conversion cast (unumber) $ff in *SPRITES_ENABLE = $ff
Adding number conversion cast (unumber) 2 in main::$5 = main::s#2 * 2
Adding number conversion cast (unumber) main::$5 in main::$5 = main::s#2 * (unumber)2
Adding number conversion cast (unumber) 3 in main::$6 = main::s#2 - 3
Adding number conversion cast (unumber) main::$6 in main::$6 = main::s#2 - (unumber)3
Adding number conversion cast (unumber) $40 in main::toSpritePtr1_$0 = main::toSpritePtr1_$1 / $40
Adding number conversion cast (unumber) main::toSpritePtr1_$0 in main::toSpritePtr1_$0 = main::toSpritePtr1_$1 / (unumber)$40
Adding number conversion cast (unumber) $18 in main::xpos#1 = main::xpos#3 + $18
Adding number conversion cast (unumber) $18 in main::ypos#1 = main::ypos#3 + $18
Adding number conversion cast (unumber) $ff in loop::$0 = *RASTER != $ff
Adding number conversion cast (unumber) 2 in loop::$1 = loop::s#2 * 2
Adding number conversion cast (unumber) loop::$1 in loop::$1 = loop::s#2 * (unumber)2
Adding number conversion cast (unumber) $a in loop::idx#1 = loop::idx#2 + $a
Adding number conversion cast (unumber) $15 in irq_sprite_ypos = (byte)SPRITES_FIRST_YPOS+$15
Adding number conversion cast (unumber) $40 in __start::__init1_toSpritePtr1_$0 = __start::__init1_toSpritePtr1_$1 / $40
Adding number conversion cast (unumber) __start::__init1_toSpritePtr1_$0 in __start::__init1_toSpritePtr1_$0 = __start::__init1_toSpritePtr1_$1 / (unumber)$40
Adding number conversion cast (unumber) 3 in __start::__init1_$1 = __start::__init1_$0 + 3
Adding number conversion cast (unumber) __start::__init1_$1 in __start::__init1_$1 = __start::__init1_$0 + (unumber)3
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *SPRITES_ENABLE = (unumber)$f
Inlining cast *SPRITES_MC = (unumber)0
Inlining cast irq_cnt = (unumber)0
Inlining cast *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = (unumber)3
Inlining cast *SPRITES_ENABLE = (unumber)$ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53249
Simplifying constant pointer cast (byte*) 53287
Simplifying constant pointer cast (byte*) 53269
Simplifying constant pointer cast (byte*) 53271
Simplifying constant pointer cast (byte*) 53276
Simplifying constant pointer cast (byte*) 53277
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 53273
Simplifying constant pointer cast (byte*) 53274
Simplifying constant pointer cast (byte*) 0
Simplifying constant pointer cast (byte*) 1
Simplifying constant pointer cast (struct MOS6526_CIA*) 56320
Simplifying constant pointer cast (struct MOS6526_CIA*) 56576
Simplifying constant pointer cast (byte*) 56333
Simplifying constant pointer cast (void()**) 65534
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 11264
Simplifying constant integer cast $13
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $18
Simplifying constant integer cast $7f
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 9
Simplifying constant integer cast $15
Simplifying constant integer cast $40
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast $15
Simplifying constant integer cast 3
Simplifying constant integer cast $14
Simplifying constant integer cast $15
Simplifying constant integer cast 3
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $40
Simplifying constant integer cast $18
Simplifying constant integer cast $18
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast $a
Simplifying constant integer cast $15
Simplifying constant integer cast $40
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type $13
Finalized unsigned number type $f
Finalized unsigned number type 0
Finalized unsigned number type 2
Finalized unsigned number type $18
Finalized unsigned number type $7f
Finalized unsigned number type 0
Finalized unsigned number type 2
Finalized unsigned number type 4
Finalized unsigned number type 6
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 2
Finalized unsigned number type 3
Finalized unsigned number type 0
Finalized unsigned number type 1
Finalized unsigned number type 2
Finalized unsigned number type 3
Finalized unsigned number type 9
Finalized unsigned number type $15
Finalized unsigned number type $40
Finalized unsigned number type $a
Finalized unsigned number type 0
Finalized unsigned number type $15
Finalized unsigned number type 3
Finalized unsigned number type $14
Finalized unsigned number type $15
Finalized unsigned number type 3
Finalized unsigned number type 3
Finalized unsigned number type $40
Finalized unsigned number type 3
Finalized unsigned number type $3fff
Finalized unsigned number type 4
Finalized unsigned number type 4
Finalized unsigned number type $f
Finalized unsigned number type $ff
Finalized unsigned number type 2
Finalized unsigned number type 3
Finalized unsigned number type $40
Finalized unsigned number type $18
Finalized unsigned number type $18
Finalized unsigned number type $ff
Finalized unsigned number type 2
Finalized unsigned number type $a
Finalized unsigned number type $15
Finalized unsigned number type $40
Finalized unsigned number type 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in sprites_init::$0 = sprites_init::s#2 * 2
Inferred type updated to byte in sprites_init::$1 = sprites_init::xpos#2 + $18
Inferred type updated to byte in sprites_irq::$0 = irq_raster_next + 1
Inferred type updated to word in sprites_irq::toSpritePtr1_$0 = sprites_irq::toSpritePtr1_$1 / $40
Inferred type updated to byte in main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
Inferred type updated to byte in main::vicSelectGfxBank1_toDd001_$2 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
Inferred type updated to word in main::toD0181_$0 = main::toD0181_$7 & $3fff
Inferred type updated to word in main::toD0181_$1 = main::toD0181_$0 * 4
Inferred type updated to byte in main::toD0181_$2 = > main::toD0181_$1
Inferred type updated to byte in main::toD0181_$4 = main::toD0181_$3 / 4
Inferred type updated to byte in main::toD0181_$5 = main::toD0181_$4 & $f
Inferred type updated to byte in main::toD0181_$6 = main::toD0181_$2 | main::toD0181_$5
Inferred type updated to byte in main::$5 = main::s#2 * 2
Inferred type updated to byte in main::$6 = main::s#2 - 3
Inferred type updated to word in main::toSpritePtr1_$0 = main::toSpritePtr1_$1 / $40
Inferred type updated to byte in loop::$1 = loop::s#2 * 2
Inferred type updated to word in __start::__init1_toSpritePtr1_$0 = __start::__init1_toSpritePtr1_$1 / $40
Inferred type updated to byte in __start::__init1_$1 = __start::__init1_$0 + 3
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Alias candidate removed (volatile)sprites_irq::toSpritePtr1_return#0 = sprites_irq::toSpritePtr1_return#2 sprites_irq::toSpritePtr1_return#1 sprites_irq::toSpritePtr1_return#3 sprites_irq::$5 irq_sprite_ptr __start::__init1_$1 
Alias sprites_init::s2#0 = sprites_init::$0 
Alias sprites_init::xpos#1 = sprites_init::$1 
Alias sprites_irq::ptr#0 = sprites_irq::ptr#5 sprites_irq::ptr#6 
Alias sprites_irq::toSpritePtr1_sprite#0 = sprites_irq::toSpritePtr1_sprite#1 
Alias main::vicSelectGfxBank1_gfx#0 = main::vicSelectGfxBank1_gfx#1 main::vicSelectGfxBank1_toDd001_gfx#0 main::vicSelectGfxBank1_toDd001_gfx#1 
Alias sin_idx#25 = sin_idx#33 sin_idx#34 sin_idx#32 sin_idx#31 sin_idx#30 sin_idx#29 sin_idx#28 sin_idx#27 sin_idx#26 
Alias main::vicSelectGfxBank1_toDd001_return#0 = main::vicSelectGfxBank1_toDd001_$2 main::vicSelectGfxBank1_toDd001_return#2 main::vicSelectGfxBank1_toDd001_return#1 main::vicSelectGfxBank1_toDd001_return#3 main::vicSelectGfxBank1_$0 
Alias main::toD0181_screen#0 = main::toD0181_screen#1 
Alias main::toD0181_gfx#0 = main::toD0181_gfx#1 
Alias main::toD0181_return#0 = main::toD0181_$6 main::toD0181_return#2 main::toD0181_return#1 main::toD0181_return#3 main::$1 
Alias main::s2#0 = main::$5 
Alias main::toSpritePtr1_sprite#0 = main::toSpritePtr1_sprite#1 
Alias main::s#2 = main::s#5 main::s#4 main::s#3 
Alias main::xpos#2 = main::xpos#5 main::xpos#4 main::xpos#3 
Alias main::ypos#2 = main::ypos#5 main::ypos#4 main::ypos#3 
Alias sin_idx#14 = sin_idx#23 sin_idx#24 sin_idx#22 sin_idx#21 sin_idx#19 
Alias main::toSpritePtr1_return#0 = main::toSpritePtr1_return#2 main::toSpritePtr1_return#1 main::toSpritePtr1_return#3 main::$7 
Alias sin_idx#0 = sin_idx#7 sin_idx#8 sin_idx#1 
Alias sin_idx#15 = sin_idx#9 
Alias sin_idx#10 = sin_idx#16 
Alias sin_idx#11 = sin_idx#17 sin_idx#3 
Alias __start::__init1_toSpritePtr1_sprite#0 = __start::__init1_toSpritePtr1_sprite#1 
Alias __start::__init1_toSpritePtr1_return#0 = __start::__init1_toSpritePtr1_return#2 __start::__init1_toSpritePtr1_return#1 __start::__init1_toSpritePtr1_return#3 __start::__init1_$0 
Alias sin_idx#18 = sin_idx#4 
Alias sin_idx#12 = sin_idx#5 sin_idx#13 sin_idx#6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Alias candidate removed (volatile)sprites_irq::toSpritePtr1_return#0 = sprites_irq::toSpritePtr1_return#2 sprites_irq::toSpritePtr1_return#1 sprites_irq::toSpritePtr1_return#3 sprites_irq::$5 irq_sprite_ptr __start::__init1_$1 
Identical Phi Values sprites_irq::toSpritePtr1_return#2 sprites_irq::toSpritePtr1_return#0
Identical Phi Values sprites_irq::toSpritePtr1_return#3 sprites_irq::toSpritePtr1_return#1
Identical Phi Values sin_idx#25 sin_idx#18
Identical Phi Values sin_idx#14 sin_idx#25
Identical Phi Values sin_idx#0 sin_idx#11
Identical Phi Values sin_idx#20 sin_idx#14
Identical Phi Values sin_idx#15 sin_idx#11
Identical Phi Values sin_idx#10 sin_idx#15
Identical Phi Values sin_idx#12 sin_idx#0
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition sprites_init::$2 [13] if(sprites_init::s#1!=rangelast(0,3)) goto sprites_init::@1
Simple Condition sprites_irq::$4 [36] if(*RASTER<sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8
Simple Condition sprites_irq::$1 [39] if(render_screen_showing==0) goto sprites_irq::@1
Simple Condition sprites_irq::$2 [54] if(irq_cnt==9) goto sprites_irq::@3
Simple Condition sprites_irq::$3 [67] if(irq_cnt==$a) goto sprites_irq::@4
Simple Condition main::$8 [116] if(main::s#1!=rangelast(4,7)) goto main::@1
Simple Condition loop::$0 [126] if(*RASTER!=$ff) goto loop::@2
Simple Condition loop::$2 [135] if(loop::s#1!=rangelast(4,7)) goto loop::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant sprites_init::xpos#0 = (byte)$18+$f*8
Constant sprites_init::s#0 = 0
Constant sprites_irq::toSpritePtr1_sprite#0 = PLAYFIELD_SPRITES
Constant main::vicSelectGfxBank1_gfx#0 = PLAYFIELD_SCREEN_1
Constant main::toD0181_screen#0 = PLAYFIELD_SCREEN_1
Constant main::toD0181_gfx#0 = PLAYFIELD_CHARSET
Constant main::xpos#0 = $18
Constant main::ypos#0 = $32
Constant main::s#0 = 4
Constant main::toSpritePtr1_sprite#0 = SIN_SPRITE
Constant loop::s#0 = 4
Constant __start::__init1_toSpritePtr1_sprite#0 = PLAYFIELD_SPRITES
Constant sin_idx#18 = 0
Successful SSA optimization Pass2ConstantIdentification
Constant sprites_irq::toSpritePtr1_$1 = (word)sprites_irq::toSpritePtr1_sprite#0
Constant main::toD0181_$7 = (word)main::toD0181_screen#0
Constant main::toSpritePtr1_$1 = (word)main::toSpritePtr1_sprite#0
Constant __start::__init1_toSpritePtr1_$1 = (word)__start::__init1_toSpritePtr1_sprite#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (word)main::vicSelectGfxBank1_gfx#0 in [81] main::vicSelectGfxBank1_toDd001_$0 = > (word)main::vicSelectGfxBank1_gfx#0
Constant value identified (word)main::toD0181_gfx#0 in [91] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Successful SSA optimization Pass2ConstantValues
if() condition always true - replacing block destination [123] if(true) goto loop::@2
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [11] sprites_init::s#1 = ++ sprites_init::s#2 to ++
Resolved ranged comparison value [13] if(sprites_init::s#1!=rangelast(0,3)) goto sprites_init::@1 to 4
Resolved ranged next value [114] main::s#1 = ++ main::s#2 to ++
Resolved ranged comparison value [116] if(main::s#1!=rangelast(4,7)) goto main::@1 to 8
Resolved ranged next value [133] loop::s#1 = ++ loop::s#2 to ++
Resolved ranged comparison value [135] if(loop::s#1!=rangelast(4,7)) goto loop::@4 to 8
Simplifying expression containing zero SPRITES_YPOS in [29] SPRITES_YPOS[0] = sprites_irq::ypos#0
Simplifying expression containing zero PLAYFIELD_SPRITE_PTRS_1 in [40] PLAYFIELD_SPRITE_PTRS_1[0] = sprites_irq::ptr#0
Simplifying expression containing zero PLAYFIELD_SPRITE_PTRS_2 in [46] PLAYFIELD_SPRITE_PTRS_2[0] = sprites_irq::ptr#0
Simplifying expression containing zero (byte*)CIA2 in [84] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A) = main::vicSelectGfxBank1_toDd001_return#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_MOS6526_CIA_PORT_A
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block loop::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 4 in if(sprites_init::s#1!=4) goto sprites_init::@1
Adding number conversion cast (unumber) 8 in if(main::s#1!=8) goto main::@1
Adding number conversion cast (unumber) 8 in if(loop::s#1!=8) goto loop::@4
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast SPRITES_FIRST_YPOS+$13
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast SPRITES_FIRST_YPOS+$15
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 4
Finalized unsigned number type 8
Finalized unsigned number type 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Alias candidate removed (volatile)sprites_irq::toSpritePtr1_return#0 = sprites_irq::toSpritePtr1_return#1 sprites_irq::$5 irq_sprite_ptr __start::__init1_$1 
Constant right-side identified [51] sprites_irq::toSpritePtr1_$0 = sprites_irq::toSpritePtr1_$1 / $40
Constant right-side identified [68] main::vicSelectGfxBank1_toDd001_$0 = > (word)main::vicSelectGfxBank1_gfx#0
Constant right-side identified [72] main::toD0181_$0 = main::toD0181_$7 & $3fff
Constant right-side identified [75] main::toD0181_$3 = > (word)main::toD0181_gfx#0
Constant right-side identified [88] main::toSpritePtr1_$0 = main::toSpritePtr1_$1 / $40
Constant right-side identified [111] __start::__init1_toSpritePtr1_$0 = __start::__init1_toSpritePtr1_$1 / $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant sprites_irq::toSpritePtr1_$0 = sprites_irq::toSpritePtr1_$1/$40
Constant main::vicSelectGfxBank1_toDd001_$0 = >(word)main::vicSelectGfxBank1_gfx#0
Constant main::toD0181_$0 = main::toD0181_$7&$3fff
Constant main::toD0181_$3 = >(word)main::toD0181_gfx#0
Constant main::toSpritePtr1_$0 = main::toSpritePtr1_$1/$40
Constant __start::__init1_toSpritePtr1_$0 = __start::__init1_toSpritePtr1_$1/$40
Successful SSA optimization Pass2ConstantIdentification
Constant sprites_irq::toSpritePtr1_return#0 = (byte)sprites_irq::toSpritePtr1_$0
Constant main::toSpritePtr1_return#0 = (byte)main::toSpritePtr1_$0
Constant __start::__init1_toSpritePtr1_return#0 = (byte)__start::__init1_toSpritePtr1_$0
Successful SSA optimization Pass2ConstantIdentification
Constant sprites_irq::toSpritePtr1_return#1 = sprites_irq::toSpritePtr1_return#0
Successful SSA optimization Pass2ConstantIdentification
Constant sprites_irq::$5 = sprites_irq::toSpritePtr1_return#1
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Alias candidate removed (volatile)irq_sprite_ptr = __start::__init1_$1 
Constant right-side identified [64] main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0 / $40
Constant right-side identified [67] main::toD0181_$1 = main::toD0181_$0 * 4
Constant right-side identified [69] main::toD0181_$4 = main::toD0181_$3 / 4
Constant right-side identified [102] __start::__init1_$1 = __start::__init1_toSpritePtr1_return#0 + 3
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::vicSelectGfxBank1_toDd001_$1 = main::vicSelectGfxBank1_toDd001_$0/$40
Constant main::toD0181_$1 = main::toD0181_$0*4
Constant main::toD0181_$4 = main::toD0181_$3/4
Constant __start::__init1_$1 = __start::__init1_toSpritePtr1_return#0+3
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero main::vicSelectGfxBank1_toDd001_$0/$40 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero 3 in [65] main::vicSelectGfxBank1_toDd001_return#0 = 3 ^ main::vicSelectGfxBank1_toDd001_$1
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant main::vicSelectGfxBank1_toDd001_$0
Eliminating unused constant main::vicSelectGfxBank1_toDd001_$1
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant main::vicSelectGfxBank1_gfx#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Constant right-side identified [66] main::toD0181_$2 = > main::toD0181_$1
Constant right-side identified [67] main::toD0181_$5 = main::toD0181_$4 & $f
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::vicSelectGfxBank1_toDd001_return#0 = 3
Constant main::toD0181_$2 = >main::toD0181_$1
Constant main::toD0181_$5 = main::toD0181_$4&$f
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Constant right-side identified [65] main::toD0181_return#0 = main::toD0181_$2 | main::toD0181_$5
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::toD0181_return#0 = main::toD0181_$2|main::toD0181_$5
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Rewriting multiplication to use shift [5] sprites_init::s2#0 = sprites_init::s#2 * 2
Rewriting multiplication to use shift [69] main::s2#0 = main::s#2 * 2
Rewriting multiplication to use shift [86] loop::$1 = loop::s#2 * 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings sprites_init::xpos#0
Inlining constant with var siblings sprites_init::s#0
Inlining constant with different constant siblings sprites_irq::toSpritePtr1_return#1
Inlining constant with var siblings main::xpos#0
Inlining constant with var siblings main::ypos#0
Inlining constant with var siblings main::s#0
Inlining constant with var siblings loop::s#0
Inlining constant with var siblings sin_idx#18
Constant inlined main::toD0181_screen#0 = PLAYFIELD_SCREEN_1
Constant inlined main::toD0181_gfx#0 = PLAYFIELD_CHARSET
Constant inlined main::toSpritePtr1_$0 = (word)SIN_SPRITE/$40
Constant inlined sprites_irq::toSpritePtr1_sprite#0 = PLAYFIELD_SPRITES
Constant inlined sprites_irq::$5 = sprites_irq::toSpritePtr1_return#0
Constant inlined sprites_init::xpos#0 = (byte)$18+$f*8
Constant inlined sin_idx#18 = 0
Constant inlined main::toSpritePtr1_$1 = (word)SIN_SPRITE
Constant inlined __start::__init1_toSpritePtr1_sprite#0 = PLAYFIELD_SPRITES
Constant inlined sprites_irq::toSpritePtr1_return#1 = sprites_irq::toSpritePtr1_return#0
Constant inlined main::toSpritePtr1_sprite#0 = SIN_SPRITE
Constant inlined sprites_init::s#0 = 0
Constant inlined main::xpos#0 = $18
Constant inlined main::s#0 = 4
Constant inlined main::toD0181_$7 = (word)PLAYFIELD_SCREEN_1
Constant inlined __start::__init1_toSpritePtr1_$0 = (word)PLAYFIELD_SPRITES/$40
Constant inlined __start::__init1_toSpritePtr1_$1 = (word)PLAYFIELD_SPRITES
Constant inlined main::toD0181_$2 = >(word)PLAYFIELD_SCREEN_1&$3fff*4
Constant inlined sprites_irq::toSpritePtr1_$1 = (word)PLAYFIELD_SPRITES
Constant inlined main::toD0181_$1 = (word)PLAYFIELD_SCREEN_1&$3fff*4
Constant inlined sprites_irq::toSpritePtr1_$0 = (word)PLAYFIELD_SPRITES/$40
Constant inlined main::toD0181_$0 = (word)PLAYFIELD_SCREEN_1&$3fff
Constant inlined main::toD0181_$5 = >(word)PLAYFIELD_CHARSET/4&$f
Constant inlined main::toD0181_$4 = >(word)PLAYFIELD_CHARSET/4
Constant inlined main::toD0181_$3 = >(word)PLAYFIELD_CHARSET
Constant inlined main::ypos#0 = $32
Constant inlined __start::__init1_$1 = __start::__init1_toSpritePtr1_return#0+3
Constant inlined loop::s#0 = 4
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SPRITES_YPOS+2)
Consolidated array index constant in *(SPRITES_YPOS+4)
Consolidated array index constant in *(SPRITES_YPOS+6)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1+1)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1+2)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_1+3)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2+1)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2+2)
Consolidated array index constant in *(PLAYFIELD_SPRITE_PTRS_2+3)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Finalized unsigned number type $1e
Finalized unsigned number type $40
Finalized unsigned number type $100
Finalized unsigned number type $40
Finalized unsigned number type $18
Finalized unsigned number type $f
Finalized unsigned number type 8
Successful SSA optimization Pass2FinalizeAllNumbers
Simplifying constant integer cast $18+$f*8
Successful SSA optimization PassNCastSimplification
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Alias candidate removed (volatile)sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 
Added new block during phi lifting sprites_init::@2(between sprites_init::@1 and sprites_init::@1)
Added new block during phi lifting main::@9(between main::@5 and main::@1)
Added new block during phi lifting loop::@6(between loop::@4 and loop::@4)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1_toSpritePtr1
Adding NOP phi() at start of __start::__init1_toSpritePtr1_@return
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of sprites_irq::toSpritePtr1
Adding NOP phi() at start of sprites_irq::toSpritePtr1_@return
Adding NOP phi() at start of main
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001_@return
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toD0181_@return
Adding NOP phi() at start of main::toSpritePtr1
Adding NOP phi() at start of main::toSpritePtr1_@return
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of loop
CALL GRAPH
Calls in [__start] to main:9 
Calls in [main] to sprites_init:62 sprites_irq_init:78 loop:80 

Created 8 initial phi equivalence classes
Coalesced [83] main::s#6 = main::s#1
Coalesced [84] main::xpos#6 = main::xpos#1
Coalesced [85] main::ypos#6 = main::ypos#1
Coalesced [98] sprites_init::s#3 = sprites_init::s#1
Coalesced [99] sprites_init::xpos#3 = sprites_init::xpos#1
Coalesced [116] loop::idx#3 = loop::idx#0
Coalesced [124] sin_idx#35 = sin_idx#2
Coalesced [125] loop::s#3 = loop::s#1
Coalesced [126] loop::idx#4 = loop::idx#1
Coalesced down to 8 phi equivalence classes
Culled Empty Block label __start::__init1_toSpritePtr1_@return
Culled Empty Block label __start::@2
Culled Empty Block label sprites_irq::toSpritePtr1_@return
Culled Empty Block label main::vicSelectGfxBank1_toDd001_@return
Culled Empty Block label main::@3
Culled Empty Block label main::toD0181_@return
Culled Empty Block label main::toSpritePtr1_@return
Culled Empty Block label main::@8
Culled Empty Block label main::@9
Culled Empty Block label sprites_init::@2
Culled Empty Block label loop::@6
Renumbering block main::@4 to main::@3
Renumbering block main::@5 to main::@4
Renumbering block main::@6 to main::@5
Renumbering block main::@7 to main::@6
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::__init1_toSpritePtr1
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of sprites_irq::toSpritePtr1
Adding NOP phi() at start of main
Adding NOP phi() at start of main::vicSelectGfxBank1_toDd001
Adding NOP phi() at start of main::toD0181
Adding NOP phi() at start of main::toSpritePtr1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of loop

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] render_screen_showing = 0
  [2] irq_raster_next = IRQ_RASTER_FIRST
  [3] irq_sprite_ypos = SPRITES_FIRST_YPOS+$15
  to:__start::__init1_toSpritePtr1
__start::__init1_toSpritePtr1: scope:[__start]  from __start::__init1
  [4] phi()
  to:__start::__init1_@1
__start::__init1_@1: scope:[__start]  from __start::__init1_toSpritePtr1
  [5] irq_sprite_ptr = __start::__init1_toSpritePtr1_return#0+3
  [6] irq_cnt = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1_@1
  [7] phi()
  [8] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [9] return 
  to:@return

interrupt(HARDWARE_CLOBBER) void sprites_irq()
sprites_irq: scope:[sprites_irq]  from
  asm { cld  }
  [11] sprites_irq::ypos#0 = irq_sprite_ypos
  [12] *SPRITES_YPOS = sprites_irq::ypos#0
  [13] *(SPRITES_YPOS+2) = sprites_irq::ypos#0
  [14] *(SPRITES_YPOS+4) = sprites_irq::ypos#0
  [15] *(SPRITES_YPOS+6) = sprites_irq::ypos#0
  [16] sprites_irq::$0 = irq_raster_next + 1
  [17] sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0
  to:sprites_irq::@8
sprites_irq::@8: scope:[sprites_irq]  from sprites_irq sprites_irq::@8
  [18] if(*RASTER<sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8
  to:sprites_irq::@9
sprites_irq::@9: scope:[sprites_irq]  from sprites_irq::@8
  [19] sprites_irq::ptr#0 = irq_sprite_ptr
  [20] if(render_screen_showing==0) goto sprites_irq::@1
  to:sprites_irq::@10
sprites_irq::@10: scope:[sprites_irq]  from sprites_irq::@9
  [21] *PLAYFIELD_SPRITE_PTRS_2 = sprites_irq::ptr#0
  [22] sprites_irq::ptr#3 = ++ sprites_irq::ptr#0
  [23] *(PLAYFIELD_SPRITE_PTRS_2+1) = sprites_irq::ptr#3
  [24] *(PLAYFIELD_SPRITE_PTRS_2+2) = sprites_irq::ptr#3
  [25] sprites_irq::ptr#4 = ++ sprites_irq::ptr#3
  [26] *(PLAYFIELD_SPRITE_PTRS_2+3) = sprites_irq::ptr#4
  to:sprites_irq::@2
sprites_irq::@2: scope:[sprites_irq]  from sprites_irq::@1 sprites_irq::@10
  [27] irq_cnt = ++ irq_cnt
  [28] if(irq_cnt==9) goto sprites_irq::@3
  to:sprites_irq::@6
sprites_irq::@6: scope:[sprites_irq]  from sprites_irq::@2
  [29] if(irq_cnt==$a) goto sprites_irq::@4
  to:sprites_irq::@7
sprites_irq::@7: scope:[sprites_irq]  from sprites_irq::@6
  [30] irq_raster_next = irq_raster_next + $14
  [31] irq_sprite_ypos = irq_sprite_ypos + $15
  [32] irq_sprite_ptr = irq_sprite_ptr + 3
  to:sprites_irq::@5
sprites_irq::@5: scope:[sprites_irq]  from sprites_irq::@11 sprites_irq::@4 sprites_irq::@7
  [33] *RASTER = irq_raster_next
  [34] *IRQ_STATUS = IRQ_RASTER
  to:sprites_irq::@return
sprites_irq::@return: scope:[sprites_irq]  from sprites_irq::@5
  [35] return 
  to:@return
sprites_irq::@4: scope:[sprites_irq]  from sprites_irq::@6
  [36] irq_cnt = 0
  [37] irq_raster_next = IRQ_RASTER_FIRST
  [38] irq_sprite_ypos = irq_sprite_ypos + $15
  [39] irq_sprite_ptr = irq_sprite_ptr + 3
  to:sprites_irq::@5
sprites_irq::@3: scope:[sprites_irq]  from sprites_irq::@2
  [40] irq_raster_next = irq_raster_next + $15
  [41] irq_sprite_ypos = SPRITES_FIRST_YPOS
  to:sprites_irq::toSpritePtr1
sprites_irq::toSpritePtr1: scope:[sprites_irq]  from sprites_irq::@3
  [42] phi()
  to:sprites_irq::@11
sprites_irq::@11: scope:[sprites_irq]  from sprites_irq::toSpritePtr1
  [43] irq_sprite_ptr = sprites_irq::toSpritePtr1_return#0
  to:sprites_irq::@5
sprites_irq::@1: scope:[sprites_irq]  from sprites_irq::@9
  [44] *PLAYFIELD_SPRITE_PTRS_1 = sprites_irq::ptr#0
  [45] sprites_irq::ptr#1 = ++ sprites_irq::ptr#0
  [46] *(PLAYFIELD_SPRITE_PTRS_1+1) = sprites_irq::ptr#1
  [47] *(PLAYFIELD_SPRITE_PTRS_1+2) = sprites_irq::ptr#1
  [48] sprites_irq::ptr#2 = ++ sprites_irq::ptr#1
  [49] *(PLAYFIELD_SPRITE_PTRS_1+3) = sprites_irq::ptr#2
  to:sprites_irq::@2

void main()
main: scope:[main]  from __start::@1
  [50] phi()
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [52] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [53] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [54] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [55] *D018 = main::toD0181_return#0
  [56] call sprites_init 
  to:main::@5
main::@5: scope:[main]  from main::@3
  [57] *SPRITES_ENABLE = $ff
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  [58] main::ypos#2 = phi( main::@4/main::ypos#1, main::@5/$32 )
  [58] main::xpos#2 = phi( main::@4/main::xpos#1, main::@5/$18 )
  [58] main::s#2 = phi( main::@4/main::s#1, main::@5/4 )
  [59] main::s2#0 = main::s#2 << 1
  [60] SPRITES_XPOS[main::s2#0] = main::xpos#2
  [61] SPRITES_YPOS[main::s2#0] = main::ypos#2
  [62] main::$6 = main::s#2 - 3
  [63] SPRITES_COLOR[main::s#2] = main::$6
  to:main::toSpritePtr1
main::toSpritePtr1: scope:[main]  from main::@1
  [64] phi()
  to:main::@4
main::@4: scope:[main]  from main::toSpritePtr1
  [65] PLAYFIELD_SPRITE_PTRS_1[main::s#2] = main::toSpritePtr1_return#0
  [66] main::xpos#1 = main::xpos#2 + $18
  [67] main::ypos#1 = main::ypos#2 + $18
  [68] main::s#1 = ++ main::s#2
  [69] if(main::s#1!=8) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@4
  [70] phi()
  [71] call sprites_irq_init 
  to:main::@6
main::@6: scope:[main]  from main::@2
  [72] phi()
  [73] call loop 
  to:main::@return
main::@return: scope:[main]  from main::@6
  [74] return 
  to:@return

void sprites_init()
sprites_init: scope:[sprites_init]  from main::@3
  [75] *SPRITES_ENABLE = $f
  [76] *SPRITES_MC = 0
  [77] *SPRITES_EXPAND_Y = *SPRITES_MC
  [78] *SPRITES_EXPAND_X = *SPRITES_EXPAND_Y
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [79] sprites_init::xpos#2 = phi( sprites_init/$18+$f*8, sprites_init::@1/sprites_init::xpos#1 )
  [79] sprites_init::s#2 = phi( sprites_init/0, sprites_init::@1/sprites_init::s#1 )
  [80] sprites_init::s2#0 = sprites_init::s#2 << 1
  [81] SPRITES_XPOS[sprites_init::s2#0] = sprites_init::xpos#2
  [82] SPRITES_COLOR[sprites_init::s#2] = BLACK
  [83] sprites_init::xpos#1 = sprites_init::xpos#2 + $18
  [84] sprites_init::s#1 = ++ sprites_init::s#2
  [85] if(sprites_init::s#1!=4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [86] return 
  to:@return

void sprites_irq_init()
sprites_irq_init: scope:[sprites_irq_init]  from main::@2
  asm { sei  }
  [88] *IRQ_STATUS = IRQ_RASTER
  asm { ldaCIA1_INTERRUPT  }
  [90] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
  [91] *PROCPORT = PROCPORT_RAM_IO
  [92] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR
  [93] *VIC_CONTROL = *VIC_CONTROL & $7f
  [94] *RASTER = IRQ_RASTER_FIRST
  [95] *IRQ_ENABLE = IRQ_RASTER
  [96] *HARDWARE_IRQ = &sprites_irq
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [98] return 
  to:@return

void loop()
loop: scope:[loop]  from main::@6
  [99] phi()
  to:loop::@1
loop::@1: scope:[loop]  from loop loop::@5
  [100] sin_idx#11 = phi( loop/0, loop::@5/sin_idx#2 )
  to:loop::@2
loop::@2: scope:[loop]  from loop::@1 loop::@2
  [101] if(*RASTER!=$ff) goto loop::@2
  to:loop::@3
loop::@3: scope:[loop]  from loop::@2
  [102] loop::idx#0 = sin_idx#11
  to:loop::@4
loop::@4: scope:[loop]  from loop::@3 loop::@4
  [103] loop::idx#2 = phi( loop::@3/loop::idx#0, loop::@4/loop::idx#1 )
  [103] loop::s#2 = phi( loop::@3/4, loop::@4/loop::s#1 )
  [104] loop::$1 = loop::s#2 << 1
  [105] SPRITES_YPOS[loop::$1] = SIN[loop::idx#2]
  [106] loop::idx#1 = loop::idx#2 + $a
  [107] loop::s#1 = ++ loop::s#2
  [108] if(loop::s#1!=8) goto loop::@4
  to:loop::@5
loop::@5: scope:[loop]  from loop::@4
  [109] sin_idx#2 = ++ sin_idx#11
  to:loop::@1


VARIABLE REGISTER WEIGHTS
void __start()
byte __start::__init1_toSpritePtr1_return
byte* __start::__init1_toSpritePtr1_sprite
volatile byte irq_cnt loadstore 0.48000000000000004
volatile byte irq_raster_next loadstore 0.44444444444444453
volatile byte irq_sprite_ptr loadstore 0.45161290322580644
volatile byte irq_sprite_ypos loadstore 0.48275862068965525
void loop()
byte~ loop::$1 20002.0
byte loop::idx
byte loop::idx#0 2002.0
byte loop::idx#1 6667.333333333333
byte loop::idx#2 10334.666666666666
byte loop::s
byte loop::s#1 15001.5
byte loop::s#2 7500.75
void main()
byte~ main::$6 202.0
byte main::s
byte main::s#1 151.5
byte main::s#2 60.6
byte main::s2
byte main::s2#0 151.5
byte* main::toD0181_gfx
byte main::toD0181_return
byte* main::toD0181_screen
byte main::toSpritePtr1_return
byte* main::toSpritePtr1_sprite
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx
byte main::vicSelectGfxBank1_toDd001_return
byte main::xpos
byte main::xpos#1 50.5
byte main::xpos#2 37.875
byte main::ypos
byte main::ypos#1 67.33333333333333
byte main::ypos#2 33.666666666666664
volatile byte render_screen_showing loadstore 0.4
byte sin_idx
byte sin_idx#11 333.6666666666667
byte sin_idx#2 2002.0
void sprites_init()
byte sprites_init::s
byte sprites_init::s#1 1501.5
byte sprites_init::s#2 800.8
byte sprites_init::s2
byte sprites_init::s2#0 2002.0
byte sprites_init::xpos
byte sprites_init::xpos#1 667.3333333333334
byte sprites_init::xpos#2 750.75
interrupt(HARDWARE_CLOBBER) void sprites_irq()
byte~ sprites_irq::$0 4.0
byte sprites_irq::ptr
byte sprites_irq::ptr#0 2.5
byte sprites_irq::ptr#1 2.6666666666666665
byte sprites_irq::ptr#2 4.0
byte sprites_irq::ptr#3 2.6666666666666665
byte sprites_irq::ptr#4 4.0
volatile byte sprites_irq::raster_sprite_gfx_modify loadstore 6.5
byte sprites_irq::toSpritePtr1_return
byte* sprites_irq::toSpritePtr1_sprite
byte sprites_irq::ypos
byte sprites_irq::ypos#0 2.5
void sprites_irq_init()

Initial phi equivalence classes
[ main::s#2 main::s#1 ]
[ main::xpos#2 main::xpos#1 ]
[ main::ypos#2 main::ypos#1 ]
[ sprites_init::s#2 sprites_init::s#1 ]
[ sprites_init::xpos#2 sprites_init::xpos#1 ]
[ sin_idx#11 sin_idx#2 ]
[ loop::s#2 loop::s#1 ]
[ loop::idx#2 loop::idx#0 loop::idx#1 ]
Added variable render_screen_showing to live range equivalence class [ render_screen_showing ]
Added variable irq_raster_next to live range equivalence class [ irq_raster_next ]
Added variable irq_sprite_ypos to live range equivalence class [ irq_sprite_ypos ]
Added variable irq_sprite_ptr to live range equivalence class [ irq_sprite_ptr ]
Added variable irq_cnt to live range equivalence class [ irq_cnt ]
Added variable sprites_irq::ypos#0 to live range equivalence class [ sprites_irq::ypos#0 ]
Added variable sprites_irq::$0 to live range equivalence class [ sprites_irq::$0 ]
Added variable sprites_irq::raster_sprite_gfx_modify to live range equivalence class [ sprites_irq::raster_sprite_gfx_modify ]
Added variable sprites_irq::ptr#0 to live range equivalence class [ sprites_irq::ptr#0 ]
Added variable sprites_irq::ptr#3 to live range equivalence class [ sprites_irq::ptr#3 ]
Added variable sprites_irq::ptr#4 to live range equivalence class [ sprites_irq::ptr#4 ]
Added variable sprites_irq::ptr#1 to live range equivalence class [ sprites_irq::ptr#1 ]
Added variable sprites_irq::ptr#2 to live range equivalence class [ sprites_irq::ptr#2 ]
Added variable main::s2#0 to live range equivalence class [ main::s2#0 ]
Added variable main::$6 to live range equivalence class [ main::$6 ]
Added variable sprites_init::s2#0 to live range equivalence class [ sprites_init::s2#0 ]
Added variable loop::$1 to live range equivalence class [ loop::$1 ]
Complete equivalence classes
[ main::s#2 main::s#1 ]
[ main::xpos#2 main::xpos#1 ]
[ main::ypos#2 main::ypos#1 ]
[ sprites_init::s#2 sprites_init::s#1 ]
[ sprites_init::xpos#2 sprites_init::xpos#1 ]
[ sin_idx#11 sin_idx#2 ]
[ loop::s#2 loop::s#1 ]
[ loop::idx#2 loop::idx#0 loop::idx#1 ]
[ render_screen_showing ]
[ irq_raster_next ]
[ irq_sprite_ypos ]
[ irq_sprite_ptr ]
[ irq_cnt ]
[ sprites_irq::ypos#0 ]
[ sprites_irq::$0 ]
[ sprites_irq::raster_sprite_gfx_modify ]
[ sprites_irq::ptr#0 ]
[ sprites_irq::ptr#3 ]
[ sprites_irq::ptr#4 ]
[ sprites_irq::ptr#1 ]
[ sprites_irq::ptr#2 ]
[ main::s2#0 ]
[ main::$6 ]
[ sprites_init::s2#0 ]
[ loop::$1 ]
Allocated zp[1]:2 [ main::s#2 main::s#1 ]
Allocated zp[1]:3 [ main::xpos#2 main::xpos#1 ]
Allocated zp[1]:4 [ main::ypos#2 main::ypos#1 ]
Allocated zp[1]:5 [ sprites_init::s#2 sprites_init::s#1 ]
Allocated zp[1]:6 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Allocated zp[1]:7 [ sin_idx#11 sin_idx#2 ]
Allocated zp[1]:8 [ loop::s#2 loop::s#1 ]
Allocated zp[1]:9 [ loop::idx#2 loop::idx#0 loop::idx#1 ]
Allocated zp[1]:10 [ render_screen_showing ]
Allocated zp[1]:11 [ irq_raster_next ]
Allocated zp[1]:12 [ irq_sprite_ypos ]
Allocated zp[1]:13 [ irq_sprite_ptr ]
Allocated zp[1]:14 [ irq_cnt ]
Allocated zp[1]:15 [ sprites_irq::ypos#0 ]
Allocated zp[1]:16 [ sprites_irq::$0 ]
Allocated zp[1]:17 [ sprites_irq::raster_sprite_gfx_modify ]
Allocated zp[1]:18 [ sprites_irq::ptr#0 ]
Allocated zp[1]:19 [ sprites_irq::ptr#3 ]
Allocated zp[1]:20 [ sprites_irq::ptr#4 ]
Allocated zp[1]:21 [ sprites_irq::ptr#1 ]
Allocated zp[1]:22 [ sprites_irq::ptr#2 ]
Allocated zp[1]:23 [ main::s2#0 ]
Allocated zp[1]:24 [ main::$6 ]
Allocated zp[1]:25 [ sprites_init::s2#0 ]
Allocated zp[1]:26 [ loop::$1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] render_screen_showing = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] irq_raster_next = IRQ_RASTER_FIRST [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] irq_sprite_ypos = SPRITES_FIRST_YPOS+$15 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] irq_sprite_ptr = __start::__init1_toSpritePtr1_return#0+3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] irq_cnt = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [18] if(*RASTER<sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] (  [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] { }  ) always clobbers reg byte a 
Statement [20] if(render_screen_showing==0) goto sprites_irq::@1 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:18 [ sprites_irq::ptr#0 ]
Statement [28] if(irq_cnt==9) goto sprites_irq::@3 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] { }  ) always clobbers reg byte a 
Statement [29] if(irq_cnt==$a) goto sprites_irq::@4 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [30] irq_raster_next = irq_raster_next + $14 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [31] irq_sprite_ypos = irq_sprite_ypos + $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [32] irq_sprite_ptr = irq_sprite_ptr + 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [33] *RASTER = irq_raster_next [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [34] *IRQ_STATUS = IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [35] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [36] irq_cnt = 0 [ irq_sprite_ypos irq_sprite_ptr ] (  [ irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [37] irq_raster_next = IRQ_RASTER_FIRST [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [38] irq_sprite_ypos = irq_sprite_ypos + $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [39] irq_sprite_ptr = irq_sprite_ptr + 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [40] irq_raster_next = irq_raster_next + $15 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [41] irq_sprite_ypos = SPRITES_FIRST_YPOS [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [43] irq_sprite_ptr = sprites_irq::toSpritePtr1_return#0 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( main:8 [ ] { }  ) always clobbers reg byte a 
Statement [53] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:8 [ ] { }  ) always clobbers reg byte a 
Statement [55] *D018 = main::toD0181_return#0 [ ] ( main:8 [ ] { }  ) always clobbers reg byte a 
Statement [57] *SPRITES_ENABLE = $ff [ ] ( main:8 [ ] { }  ) always clobbers reg byte a 
Statement [59] main::s2#0 = main::s#2 << 1 [ main::s#2 main::xpos#2 main::ypos#2 main::s2#0 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 main::s2#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::s#2 main::s#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::xpos#2 main::xpos#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::ypos#2 main::ypos#1 ]
Statement [60] SPRITES_XPOS[main::s2#0] = main::xpos#2 [ main::s#2 main::xpos#2 main::ypos#2 main::s2#0 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 main::s2#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ main::s2#0 ]
Statement [61] SPRITES_YPOS[main::s2#0] = main::ypos#2 [ main::s#2 main::xpos#2 main::ypos#2 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 ] { }  ) always clobbers reg byte a 
Statement [62] main::$6 = main::s#2 - 3 [ main::s#2 main::xpos#2 main::ypos#2 main::$6 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 main::$6 ] { }  ) always clobbers reg byte a 
Statement [65] PLAYFIELD_SPRITE_PTRS_1[main::s#2] = main::toSpritePtr1_return#0 [ main::s#2 main::xpos#2 main::ypos#2 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 ] { }  ) always clobbers reg byte a 
Statement [66] main::xpos#1 = main::xpos#2 + $18 [ main::s#2 main::ypos#2 main::xpos#1 ] ( main:8 [ main::s#2 main::ypos#2 main::xpos#1 ] { }  ) always clobbers reg byte a 
Statement [67] main::ypos#1 = main::ypos#2 + $18 [ main::s#2 main::xpos#1 main::ypos#1 ] ( main:8 [ main::s#2 main::xpos#1 main::ypos#1 ] { }  ) always clobbers reg byte a 
Statement [75] *SPRITES_ENABLE = $f [ ] ( main:8::sprites_init:56 [ ] { }  ) always clobbers reg byte a 
Statement [76] *SPRITES_MC = 0 [ ] ( main:8::sprites_init:56 [ ] { }  ) always clobbers reg byte a 
Statement [77] *SPRITES_EXPAND_Y = *SPRITES_MC [ ] ( main:8::sprites_init:56 [ ] { }  ) always clobbers reg byte a 
Statement [78] *SPRITES_EXPAND_X = *SPRITES_EXPAND_Y [ ] ( main:8::sprites_init:56 [ ] { }  ) always clobbers reg byte a 
Statement [80] sprites_init::s2#0 = sprites_init::s#2 << 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:8::sprites_init:56 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ sprites_init::s#2 sprites_init::s#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:6 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Statement [81] SPRITES_XPOS[sprites_init::s2#0] = sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:8::sprites_init:56 [ sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [82] SPRITES_COLOR[sprites_init::s#2] = BLACK [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:8::sprites_init:56 [ sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [83] sprites_init::xpos#1 = sprites_init::xpos#2 + $18 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:8::sprites_init:56 [ sprites_init::s#2 sprites_init::xpos#1 ] { }  ) always clobbers reg byte a 
Statement [88] *IRQ_STATUS = IRQ_RASTER [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [90] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [91] *PROCPORT = PROCPORT_RAM_IO [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [92] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [93] *VIC_CONTROL = *VIC_CONTROL & $7f [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [94] *RASTER = IRQ_RASTER_FIRST [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [95] *IRQ_ENABLE = IRQ_RASTER [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [96] *HARDWARE_IRQ = &sprites_irq [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [101] if(*RASTER!=$ff) goto loop::@2 [ sin_idx#11 ] ( main:8::loop:73 [ sin_idx#11 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:7 [ sin_idx#11 sin_idx#2 ]
Statement [104] loop::$1 = loop::s#2 << 1 [ sin_idx#11 loop::s#2 loop::idx#2 loop::$1 ] ( main:8::loop:73 [ sin_idx#11 loop::s#2 loop::idx#2 loop::$1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ loop::s#2 loop::s#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:9 [ loop::idx#2 loop::idx#0 loop::idx#1 ]
Statement [105] SPRITES_YPOS[loop::$1] = SIN[loop::idx#2] [ sin_idx#11 loop::s#2 loop::idx#2 ] ( main:8::loop:73 [ sin_idx#11 loop::s#2 loop::idx#2 ] { }  ) always clobbers reg byte a 
Statement [106] loop::idx#1 = loop::idx#2 + $a [ sin_idx#11 loop::s#2 loop::idx#1 ] ( main:8::loop:73 [ sin_idx#11 loop::s#2 loop::idx#1 ] { }  ) always clobbers reg byte a 
Statement [1] render_screen_showing = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] irq_raster_next = IRQ_RASTER_FIRST [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] irq_sprite_ypos = SPRITES_FIRST_YPOS+$15 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] irq_sprite_ptr = __start::__init1_toSpritePtr1_return#0+3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [6] irq_cnt = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [18] if(*RASTER<sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] (  [ render_screen_showing irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::raster_sprite_gfx_modify ] { }  ) always clobbers reg byte a 
Statement [20] if(render_screen_showing==0) goto sprites_irq::@1 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt sprites_irq::ptr#0 ] { }  ) always clobbers reg byte a 
Statement [28] if(irq_cnt==9) goto sprites_irq::@3 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr irq_cnt ] { }  ) always clobbers reg byte a 
Statement [29] if(irq_cnt==$a) goto sprites_irq::@4 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [30] irq_raster_next = irq_raster_next + $14 [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [31] irq_sprite_ypos = irq_sprite_ypos + $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [32] irq_sprite_ptr = irq_sprite_ptr + 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [33] *RASTER = irq_raster_next [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [34] *IRQ_STATUS = IRQ_RASTER [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [35] return  [ ] (  [ ] { }  ) always clobbers reg byte a reg byte x reg byte y 
Statement [36] irq_cnt = 0 [ irq_sprite_ypos irq_sprite_ptr ] (  [ irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [37] irq_raster_next = IRQ_RASTER_FIRST [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ypos irq_sprite_ptr ] { }  ) always clobbers reg byte a 
Statement [38] irq_sprite_ypos = irq_sprite_ypos + $15 [ irq_raster_next irq_sprite_ptr ] (  [ irq_raster_next irq_sprite_ptr ] { }  ) always clobbers reg byte a reg byte x 
Statement [39] irq_sprite_ptr = irq_sprite_ptr + 3 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [40] irq_raster_next = irq_raster_next + $15 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a reg byte x 
Statement [41] irq_sprite_ypos = SPRITES_FIRST_YPOS [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [43] irq_sprite_ptr = sprites_irq::toSpritePtr1_return#0 [ irq_raster_next ] (  [ irq_raster_next ] { }  ) always clobbers reg byte a 
Statement [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 [ ] ( main:8 [ ] { }  ) always clobbers reg byte a 
Statement [53] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 [ ] ( main:8 [ ] { }  ) always clobbers reg byte a 
Statement [55] *D018 = main::toD0181_return#0 [ ] ( main:8 [ ] { }  ) always clobbers reg byte a 
Statement [57] *SPRITES_ENABLE = $ff [ ] ( main:8 [ ] { }  ) always clobbers reg byte a 
Statement [59] main::s2#0 = main::s#2 << 1 [ main::s#2 main::xpos#2 main::ypos#2 main::s2#0 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 main::s2#0 ] { }  ) always clobbers reg byte a 
Statement [60] SPRITES_XPOS[main::s2#0] = main::xpos#2 [ main::s#2 main::xpos#2 main::ypos#2 main::s2#0 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 main::s2#0 ] { }  ) always clobbers reg byte a 
Statement [61] SPRITES_YPOS[main::s2#0] = main::ypos#2 [ main::s#2 main::xpos#2 main::ypos#2 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 ] { }  ) always clobbers reg byte a 
Statement [62] main::$6 = main::s#2 - 3 [ main::s#2 main::xpos#2 main::ypos#2 main::$6 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 main::$6 ] { }  ) always clobbers reg byte a 
Statement [65] PLAYFIELD_SPRITE_PTRS_1[main::s#2] = main::toSpritePtr1_return#0 [ main::s#2 main::xpos#2 main::ypos#2 ] ( main:8 [ main::s#2 main::xpos#2 main::ypos#2 ] { }  ) always clobbers reg byte a 
Statement [66] main::xpos#1 = main::xpos#2 + $18 [ main::s#2 main::ypos#2 main::xpos#1 ] ( main:8 [ main::s#2 main::ypos#2 main::xpos#1 ] { }  ) always clobbers reg byte a 
Statement [67] main::ypos#1 = main::ypos#2 + $18 [ main::s#2 main::xpos#1 main::ypos#1 ] ( main:8 [ main::s#2 main::xpos#1 main::ypos#1 ] { }  ) always clobbers reg byte a 
Statement [75] *SPRITES_ENABLE = $f [ ] ( main:8::sprites_init:56 [ ] { }  ) always clobbers reg byte a 
Statement [76] *SPRITES_MC = 0 [ ] ( main:8::sprites_init:56 [ ] { }  ) always clobbers reg byte a 
Statement [77] *SPRITES_EXPAND_Y = *SPRITES_MC [ ] ( main:8::sprites_init:56 [ ] { }  ) always clobbers reg byte a 
Statement [78] *SPRITES_EXPAND_X = *SPRITES_EXPAND_Y [ ] ( main:8::sprites_init:56 [ ] { }  ) always clobbers reg byte a 
Statement [80] sprites_init::s2#0 = sprites_init::s#2 << 1 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] ( main:8::sprites_init:56 [ sprites_init::s#2 sprites_init::xpos#2 sprites_init::s2#0 ] { }  ) always clobbers reg byte a 
Statement [81] SPRITES_XPOS[sprites_init::s2#0] = sprites_init::xpos#2 [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:8::sprites_init:56 [ sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [82] SPRITES_COLOR[sprites_init::s#2] = BLACK [ sprites_init::s#2 sprites_init::xpos#2 ] ( main:8::sprites_init:56 [ sprites_init::s#2 sprites_init::xpos#2 ] { }  ) always clobbers reg byte a 
Statement [83] sprites_init::xpos#1 = sprites_init::xpos#2 + $18 [ sprites_init::s#2 sprites_init::xpos#1 ] ( main:8::sprites_init:56 [ sprites_init::s#2 sprites_init::xpos#1 ] { }  ) always clobbers reg byte a 
Statement [88] *IRQ_STATUS = IRQ_RASTER [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement asm { ldaCIA1_INTERRUPT  } always clobbers reg byte a 
Statement [90] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [91] *PROCPORT = PROCPORT_RAM_IO [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [92] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [93] *VIC_CONTROL = *VIC_CONTROL & $7f [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [94] *RASTER = IRQ_RASTER_FIRST [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [95] *IRQ_ENABLE = IRQ_RASTER [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [96] *HARDWARE_IRQ = &sprites_irq [ ] ( main:8::sprites_irq_init:71 [ ] { }  ) always clobbers reg byte a 
Statement [101] if(*RASTER!=$ff) goto loop::@2 [ sin_idx#11 ] ( main:8::loop:73 [ sin_idx#11 ] { }  ) always clobbers reg byte a 
Statement [104] loop::$1 = loop::s#2 << 1 [ sin_idx#11 loop::s#2 loop::idx#2 loop::$1 ] ( main:8::loop:73 [ sin_idx#11 loop::s#2 loop::idx#2 loop::$1 ] { }  ) always clobbers reg byte a 
Statement [105] SPRITES_YPOS[loop::$1] = SIN[loop::idx#2] [ sin_idx#11 loop::s#2 loop::idx#2 ] ( main:8::loop:73 [ sin_idx#11 loop::s#2 loop::idx#2 ] { }  ) always clobbers reg byte a 
Statement [106] loop::idx#1 = loop::idx#2 + $a [ sin_idx#11 loop::s#2 loop::idx#1 ] ( main:8::loop:73 [ sin_idx#11 loop::s#2 loop::idx#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::s#2 main::s#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::xpos#2 main::xpos#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::ypos#2 main::ypos#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ sprites_init::s#2 sprites_init::s#1 ] : zp[1]:5 , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ sprites_init::xpos#2 sprites_init::xpos#1 ] : zp[1]:6 , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ sin_idx#11 sin_idx#2 ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ loop::s#2 loop::s#1 ] : zp[1]:8 , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ loop::idx#2 loop::idx#0 loop::idx#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ render_screen_showing ] : zp[1]:10 , 
Potential registers zp[1]:11 [ irq_raster_next ] : zp[1]:11 , 
Potential registers zp[1]:12 [ irq_sprite_ypos ] : zp[1]:12 , 
Potential registers zp[1]:13 [ irq_sprite_ptr ] : zp[1]:13 , 
Potential registers zp[1]:14 [ irq_cnt ] : zp[1]:14 , 
Potential registers zp[1]:15 [ sprites_irq::ypos#0 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ sprites_irq::$0 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ sprites_irq::raster_sprite_gfx_modify ] : zp[1]:17 , 
Potential registers zp[1]:18 [ sprites_irq::ptr#0 ] : zp[1]:18 , reg byte x , reg byte y , 
Potential registers zp[1]:19 [ sprites_irq::ptr#3 ] : zp[1]:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ sprites_irq::ptr#4 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:21 [ sprites_irq::ptr#1 ] : zp[1]:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:22 [ sprites_irq::ptr#2 ] : zp[1]:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:23 [ main::s2#0 ] : zp[1]:23 , reg byte x , reg byte y , 
Potential registers zp[1]:24 [ main::$6 ] : zp[1]:24 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:25 [ sprites_init::s2#0 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:26 [ loop::$1 ] : zp[1]:26 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [loop] 22,502.25: zp[1]:8 [ loop::s#2 loop::s#1 ] 20,002: zp[1]:26 [ loop::$1 ] 19,004: zp[1]:9 [ loop::idx#2 loop::idx#0 loop::idx#1 ] 
Uplift Scope [sprites_init] 2,302.3: zp[1]:5 [ sprites_init::s#2 sprites_init::s#1 ] 2,002: zp[1]:25 [ sprites_init::s2#0 ] 1,418.08: zp[1]:6 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Uplift Scope [] 2,335.67: zp[1]:7 [ sin_idx#11 sin_idx#2 ] 0.48: zp[1]:12 [ irq_sprite_ypos ] 0.48: zp[1]:14 [ irq_cnt ] 0.45: zp[1]:13 [ irq_sprite_ptr ] 0.44: zp[1]:11 [ irq_raster_next ] 0.4: zp[1]:10 [ render_screen_showing ] 
Uplift Scope [main] 212.1: zp[1]:2 [ main::s#2 main::s#1 ] 202: zp[1]:24 [ main::$6 ] 151.5: zp[1]:23 [ main::s2#0 ] 101: zp[1]:4 [ main::ypos#2 main::ypos#1 ] 88.38: zp[1]:3 [ main::xpos#2 main::xpos#1 ] 
Uplift Scope [sprites_irq] 6.5: zp[1]:17 [ sprites_irq::raster_sprite_gfx_modify ] 4: zp[1]:16 [ sprites_irq::$0 ] 4: zp[1]:20 [ sprites_irq::ptr#4 ] 4: zp[1]:22 [ sprites_irq::ptr#2 ] 2.67: zp[1]:19 [ sprites_irq::ptr#3 ] 2.67: zp[1]:21 [ sprites_irq::ptr#1 ] 2.5: zp[1]:15 [ sprites_irq::ypos#0 ] 2.5: zp[1]:18 [ sprites_irq::ptr#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [sprites_irq_init] 
Uplift Scope [__start] 

Uplifting [loop] best 8842 combination zp[1]:8 [ loop::s#2 loop::s#1 ] reg byte a [ loop::$1 ] reg byte x [ loop::idx#2 loop::idx#0 loop::idx#1 ] 
Uplifting [sprites_init] best 8672 combination reg byte y [ sprites_init::s#2 sprites_init::s#1 ] reg byte x [ sprites_init::s2#0 ] zp[1]:6 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Uplifting [] best 8672 combination zp[1]:7 [ sin_idx#11 sin_idx#2 ] zp[1]:12 [ irq_sprite_ypos ] zp[1]:14 [ irq_cnt ] zp[1]:13 [ irq_sprite_ptr ] zp[1]:11 [ irq_raster_next ] zp[1]:10 [ render_screen_showing ] 
Uplifting [main] best 8392 combination reg byte y [ main::s#2 main::s#1 ] reg byte a [ main::$6 ] reg byte x [ main::s2#0 ] zp[1]:4 [ main::ypos#2 main::ypos#1 ] zp[1]:3 [ main::xpos#2 main::xpos#1 ] 
Limited combination testing to 100 combinations of 324 possible.
Uplifting [sprites_irq] best 8368 combination zp[1]:17 [ sprites_irq::raster_sprite_gfx_modify ] reg byte x [ sprites_irq::$0 ] reg byte a [ sprites_irq::ptr#4 ] reg byte a [ sprites_irq::ptr#2 ] reg byte a [ sprites_irq::ptr#3 ] zp[1]:21 [ sprites_irq::ptr#1 ] zp[1]:15 [ sprites_irq::ypos#0 ] zp[1]:18 [ sprites_irq::ptr#0 ] 
Limited combination testing to 100 combinations of 12288 possible.
Uplifting [MOS6526_CIA] best 8368 combination 
Uplifting [MOS6569_VICII] best 8368 combination 
Uplifting [MOS6581_SID] best 8368 combination 
Uplifting [sprites_irq_init] best 8368 combination 
Uplifting [__start] best 8368 combination 
Attempting to uplift remaining variables inzp[1]:8 [ loop::s#2 loop::s#1 ]
Uplifting [loop] best 8368 combination zp[1]:8 [ loop::s#2 loop::s#1 ] 
Attempting to uplift remaining variables inzp[1]:7 [ sin_idx#11 sin_idx#2 ]
Uplifting [] best 8368 combination zp[1]:7 [ sin_idx#11 sin_idx#2 ] 
Attempting to uplift remaining variables inzp[1]:6 [ sprites_init::xpos#2 sprites_init::xpos#1 ]
Uplifting [sprites_init] best 8368 combination zp[1]:6 [ sprites_init::xpos#2 sprites_init::xpos#1 ] 
Attempting to uplift remaining variables inzp[1]:4 [ main::ypos#2 main::ypos#1 ]
Uplifting [main] best 8368 combination zp[1]:4 [ main::ypos#2 main::ypos#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::xpos#2 main::xpos#1 ]
Uplifting [main] best 8368 combination zp[1]:3 [ main::xpos#2 main::xpos#1 ] 
Attempting to uplift remaining variables inzp[1]:17 [ sprites_irq::raster_sprite_gfx_modify ]
Uplifting [sprites_irq] best 8368 combination zp[1]:17 [ sprites_irq::raster_sprite_gfx_modify ] 
Attempting to uplift remaining variables inzp[1]:21 [ sprites_irq::ptr#1 ]
Uplifting [sprites_irq] best 8356 combination reg byte x [ sprites_irq::ptr#1 ] 
Attempting to uplift remaining variables inzp[1]:15 [ sprites_irq::ypos#0 ]
Uplifting [sprites_irq] best 8341 combination reg byte a [ sprites_irq::ypos#0 ] 
Attempting to uplift remaining variables inzp[1]:18 [ sprites_irq::ptr#0 ]
Uplifting [sprites_irq] best 8326 combination reg byte x [ sprites_irq::ptr#0 ] 
Attempting to uplift remaining variables inzp[1]:12 [ irq_sprite_ypos ]
Uplifting [] best 8326 combination zp[1]:12 [ irq_sprite_ypos ] 
Attempting to uplift remaining variables inzp[1]:14 [ irq_cnt ]
Uplifting [] best 8326 combination zp[1]:14 [ irq_cnt ] 
Attempting to uplift remaining variables inzp[1]:13 [ irq_sprite_ptr ]
Uplifting [] best 8326 combination zp[1]:13 [ irq_sprite_ptr ] 
Attempting to uplift remaining variables inzp[1]:11 [ irq_raster_next ]
Uplifting [] best 8326 combination zp[1]:11 [ irq_raster_next ] 
Attempting to uplift remaining variables inzp[1]:10 [ render_screen_showing ]
Uplifting [] best 8326 combination zp[1]:10 [ render_screen_showing ] 
Coalescing zero page register [ zp[1]:8 [ loop::s#2 loop::s#1 ] ] with [ zp[1]:6 [ sprites_init::xpos#2 sprites_init::xpos#1 ] ]
Allocated (was zp[1]:3) zp[1]:2 [ main::xpos#2 main::xpos#1 ]
Allocated (was zp[1]:4) zp[1]:3 [ main::ypos#2 main::ypos#1 ]
Allocated (was zp[1]:7) zp[1]:4 [ sin_idx#11 sin_idx#2 ]
Allocated (was zp[1]:8) zp[1]:5 [ loop::s#2 loop::s#1 sprites_init::xpos#2 sprites_init::xpos#1 ]
Allocated (was zp[1]:10) zp[1]:6 [ render_screen_showing ]
Allocated (was zp[1]:11) zp[1]:7 [ irq_raster_next ]
Allocated (was zp[1]:12) zp[1]:8 [ irq_sprite_ypos ]
Allocated (was zp[1]:13) zp[1]:9 [ irq_sprite_ptr ]
Allocated (was zp[1]:14) zp[1]:10 [ irq_cnt ]
Allocated (was zp[1]:17) zp[1]:11 [ sprites_irq::raster_sprite_gfx_modify ]
Interrupt procedure sprites_irq clobbers AXcnzvdP
Removing interrupt register storage sty regy+1 in 20 entry interrupt(HARDWARE_CLOBBER)
Removing interrupt register storage regy: in 54 [35] return  - exit interrupt(HARDWARE_CLOBBER)
Removing interrupt register storage ldy #00 in 54 [35] return  - exit interrupt(HARDWARE_CLOBBER)

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tetris Game for the Commodore 64
// A sprite multiplexer covering the playfield with a black layer to allow for 3 single-pixel colors
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // The colors of the C64
  .const BLACK = 0
  // The Y-position of the first sprite row
  .const SPRITES_FIRST_YPOS = $31
  // The line of the first IRQ
  .const IRQ_RASTER_FIRST = SPRITES_FIRST_YPOS+$13
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_COLOR = $d027
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  .label D018 = $d018
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#1 Interrupt for reading in ASM
  .label CIA1_INTERRUPT = $dc0d
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // Address of the first screen
  .label PLAYFIELD_SCREEN_1 = $400
  // Address of the second screen
  .label PLAYFIELD_SCREEN_2 = $2c00
  // Screen Sprite pointers on screen 1
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  // Screen Sprite pointers on screen 2
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  // The screen currently being showed to the user. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_showing = 6
  // The raster line of the next IRQ
  .label irq_raster_next = 7
  // Y-pos of the sprites on the next IRQ
  .label irq_sprite_ypos = 8
  // Index of the sprites to show on the next IRQ
  .label irq_sprite_ptr = 9
  // Counting the 10 IRQs
  .label irq_cnt = $a
  .label sin_idx = 4
  // __start
__start: {
    .const __init1_toSpritePtr1_return = $ff&PLAYFIELD_SPRITES/$40
    jmp __init1
    // __start::__init1
  __init1:
    // [1] render_screen_showing = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z render_screen_showing
    // [2] irq_raster_next = IRQ_RASTER_FIRST -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // [3] irq_sprite_ypos = SPRITES_FIRST_YPOS+$15 -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS+$15
    sta.z irq_sprite_ypos
    // [4] phi from __start::__init1 to __start::__init1_toSpritePtr1 [phi:__start::__init1->__start::__init1_toSpritePtr1]
  __init1_toSpritePtr1_from___init1:
    jmp __init1_toSpritePtr1
    // __start::__init1_toSpritePtr1
  __init1_toSpritePtr1:
    jmp __init1___b1
    // __start::__init1_@1
  __init1___b1:
    // [5] irq_sprite_ptr = __start::__init1_toSpritePtr1_return#0+3 -- vbuz1=vbuc1 
    lda #__init1_toSpritePtr1_return+3
    sta.z irq_sprite_ptr
    // [6] irq_cnt = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // [7] phi from __start::__init1_@1 to __start::@1 [phi:__start::__init1_@1->__start::@1]
  __b1_from___init1___b1:
    jmp __b1
    // __start::@1
  __b1:
    // [8] call main 
    // [50] phi from __start::@1 to main [phi:__start::@1->main]
  main_from___b1:
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [9] return 
    rts
}
  // sprites_irq
// Raster Interrupt Routine - sets up the sprites covering the playfield
// Repeats 10 timers every 2 lines from line IRQ_RASTER_FIRST
// Utilizes duplicated gfx in the sprites to allow for some leeway in updating the sprite pointers
sprites_irq: {
    .const toSpritePtr1_return = $ff&PLAYFIELD_SPRITES/$40
    .label raster_sprite_gfx_modify = $b
    // entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
    // asm { cld  }
    //(*BG_COLOR)++;
    // Clear decimal flag (because it is used by the score algorithm)
    cld
    // [11] sprites_irq::ypos#0 = irq_sprite_ypos -- vbuaa=vbuz1 
    // Place the sprites
    lda.z irq_sprite_ypos
    // [12] *SPRITES_YPOS = sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
    // [13] *(SPRITES_YPOS+2) = sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+2
    // [14] *(SPRITES_YPOS+4) = sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+4
    // [15] *(SPRITES_YPOS+6) = sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+6
    // [16] sprites_irq::$0 = irq_raster_next + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z irq_raster_next
    inx
    // [17] sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 -- vbuz1=vbuxx 
    // Wait for the y-position before changing sprite pointers
    stx.z raster_sprite_gfx_modify
    jmp __b8
    // sprites_irq::@8
  __b8:
    // [18] if(*RASTER<sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z raster_sprite_gfx_modify
    bcc __b8
    jmp __b9
    // sprites_irq::@9
  __b9:
    // [19] sprites_irq::ptr#0 = irq_sprite_ptr -- vbuxx=vbuz1 
    ldx.z irq_sprite_ptr
    // [20] if(render_screen_showing==0) goto sprites_irq::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_showing
    cmp #0
    beq __b1
    jmp __b10
    // sprites_irq::@10
  __b10:
    // [21] *PLAYFIELD_SPRITE_PTRS_2 = sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2
    // [22] sprites_irq::ptr#3 = ++ sprites_irq::ptr#0 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // [23] *(PLAYFIELD_SPRITE_PTRS_2+1) = sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+1
    // [24] *(PLAYFIELD_SPRITE_PTRS_2+2) = sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+2
    // [25] sprites_irq::ptr#4 = ++ sprites_irq::ptr#3 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // [26] *(PLAYFIELD_SPRITE_PTRS_2+3) = sprites_irq::ptr#4 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+3
    jmp __b2
    // sprites_irq::@2
  __b2:
    // [27] irq_cnt = ++ irq_cnt -- vbuz1=_inc_vbuz1 
    inc.z irq_cnt
    // [28] if(irq_cnt==9) goto sprites_irq::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z irq_cnt
    beq __b3
    jmp __b6
    // sprites_irq::@6
  __b6:
    // [29] if(irq_cnt==$a) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z irq_cnt
    beq __b4
    jmp __b7
    // sprites_irq::@7
  __b7:
    // [30] irq_raster_next = irq_raster_next + $14 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$14]
    stx.z irq_raster_next
    // [31] irq_sprite_ypos = irq_sprite_ypos + $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [32] irq_sprite_ptr = irq_sprite_ptr + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@5
  __b5:
    // [33] *RASTER = irq_raster_next -- _deref_pbuc1=vbuz1 
    // Setup next interrupt
    lda.z irq_raster_next
    sta RASTER
    // [34] *IRQ_STATUS = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    jmp __breturn
    // sprites_irq::@return
  __breturn:
    // [35] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
    rti
    // sprites_irq::@4
  __b4:
    // [36] irq_cnt = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // [37] irq_raster_next = IRQ_RASTER_FIRST -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // [38] irq_sprite_ypos = irq_sprite_ypos + $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // [39] irq_sprite_ptr = irq_sprite_ptr + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@3
  __b3:
    // [40] irq_raster_next = irq_raster_next + $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // [41] irq_sprite_ypos = SPRITES_FIRST_YPOS -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS
    sta.z irq_sprite_ypos
    // [42] phi from sprites_irq::@3 to sprites_irq::toSpritePtr1 [phi:sprites_irq::@3->sprites_irq::toSpritePtr1]
  toSpritePtr1_from___b3:
    jmp toSpritePtr1
    // sprites_irq::toSpritePtr1
  toSpritePtr1:
    jmp __b11
    // sprites_irq::@11
  __b11:
    // [43] irq_sprite_ptr = sprites_irq::toSpritePtr1_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr1_return
    sta.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@1
  __b1:
    // [44] *PLAYFIELD_SPRITE_PTRS_1 = sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1
    // [45] sprites_irq::ptr#1 = ++ sprites_irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
    // [46] *(PLAYFIELD_SPRITE_PTRS_1+1) = sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+1
    // [47] *(PLAYFIELD_SPRITE_PTRS_1+2) = sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+2
    // [48] sprites_irq::ptr#2 = ++ sprites_irq::ptr#1 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // [49] *(PLAYFIELD_SPRITE_PTRS_1+3) = sprites_irq::ptr#2 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp __b2
}
  // main
main: {
    .const toSpritePtr1_return = $ff&SIN_SPRITE/$40
    .const vicSelectGfxBank1_toDd001_return = 3
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .label xpos = 2
    .label ypos = 3
    jmp vicSelectGfxBank1
    // main::vicSelectGfxBank1
  vicSelectGfxBank1:
    // [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [52] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
  vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
    jmp vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_toDd001
  vicSelectGfxBank1_toDd001:
    jmp vicSelectGfxBank1___b1
    // main::vicSelectGfxBank1_@1
  vicSelectGfxBank1___b1:
    // [53] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    // [54] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
  toD0181_from_vicSelectGfxBank1___b1:
    jmp toD0181
    // main::toD0181
  toD0181:
    jmp __b3
    // main::@3
  __b3:
    // [55] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // [56] call sprites_init 
    jsr sprites_init
    jmp __b5
    // main::@5
  __b5:
    // [57] *SPRITES_ENABLE = $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
    // [58] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
  __b1_from___b5:
    // [58] phi main::ypos#2 = $32 [phi:main::@5->main::@1#0] -- vbuz1=vbuc1 
    lda #$32
    sta.z ypos
    // [58] phi main::xpos#2 = $18 [phi:main::@5->main::@1#1] -- vbuz1=vbuc1 
    lda #$18
    sta.z xpos
    // [58] phi main::s#2 = 4 [phi:main::@5->main::@1#2] -- vbuyy=vbuc1 
    ldy #4
    jmp __b1
    // [58] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [58] phi main::ypos#2 = main::ypos#1 [phi:main::@4->main::@1#0] -- register_copy 
    // [58] phi main::xpos#2 = main::xpos#1 [phi:main::@4->main::@1#1] -- register_copy 
    // [58] phi main::s#2 = main::s#1 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [59] main::s2#0 = main::s#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [60] SPRITES_XPOS[main::s2#0] = main::xpos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z xpos
    sta SPRITES_XPOS,x
    // [61] SPRITES_YPOS[main::s2#0] = main::ypos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS,x
    // [62] main::$6 = main::s#2 - 3 -- vbuaa=vbuyy_minus_vbuc1 
    tya
    sec
    sbc #3
    // [63] SPRITES_COLOR[main::s#2] = main::$6 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SPRITES_COLOR,y
    // [64] phi from main::@1 to main::toSpritePtr1 [phi:main::@1->main::toSpritePtr1]
  toSpritePtr1_from___b1:
    jmp toSpritePtr1
    // main::toSpritePtr1
  toSpritePtr1:
    jmp __b4
    // main::@4
  __b4:
    // [65] PLAYFIELD_SPRITE_PTRS_1[main::s#2] = main::toSpritePtr1_return#0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #toSpritePtr1_return
    sta PLAYFIELD_SPRITE_PTRS_1,y
    // [66] main::xpos#1 = main::xpos#2 + $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // [67] main::ypos#1 = main::ypos#2 + $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z ypos
    axs #-[$18]
    stx.z ypos
    // [68] main::s#1 = ++ main::s#2 -- vbuyy=_inc_vbuyy 
    iny
    // [69] if(main::s#1!=8) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b1_from___b4
    // [70] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
  __b2_from___b4:
    jmp __b2
    // main::@2
  __b2:
    // [71] call sprites_irq_init 
    jsr sprites_irq_init
    // [72] phi from main::@2 to main::@6 [phi:main::@2->main::@6]
  __b6_from___b2:
    jmp __b6
    // main::@6
  __b6:
    // [73] call loop 
    // [99] phi from main::@6 to loop [phi:main::@6->loop]
  loop_from___b6:
    jsr loop
    jmp __breturn
    // main::@return
  __breturn:
    // [74] return 
    rts
}
  // sprites_init
// Setup the sprites
sprites_init: {
    .label xpos = 5
    // [75] *SPRITES_ENABLE = $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
    // [76] *SPRITES_MC = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    // [77] *SPRITES_EXPAND_Y = *SPRITES_MC -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_MC
    sta SPRITES_EXPAND_Y
    // [78] *SPRITES_EXPAND_X = *SPRITES_EXPAND_Y -- _deref_pbuc1=_deref_pbuc2 
    lda SPRITES_EXPAND_Y
    sta SPRITES_EXPAND_X
    // [79] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
  __b1_from_sprites_init:
    // [79] phi sprites_init::xpos#2 = $18+$f*8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta.z xpos
    // [79] phi sprites_init::s#2 = 0 [phi:sprites_init->sprites_init::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [79] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
  __b1_from___b1:
    // [79] phi sprites_init::xpos#2 = sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    // [79] phi sprites_init::s#2 = sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    jmp __b1
    // sprites_init::@1
  __b1:
    // [80] sprites_init::s2#0 = sprites_init::s#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [81] SPRITES_XPOS[sprites_init::s2#0] = sprites_init::xpos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z xpos
    sta SPRITES_XPOS,x
    // [82] SPRITES_COLOR[sprites_init::s#2] = BLACK -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #BLACK
    sta SPRITES_COLOR,y
    // [83] sprites_init::xpos#1 = sprites_init::xpos#2 + $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // [84] sprites_init::s#1 = ++ sprites_init::s#2 -- vbuyy=_inc_vbuyy 
    iny
    // [85] if(sprites_init::s#1!=4) goto sprites_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne __b1_from___b1
    jmp __breturn
    // sprites_init::@return
  __breturn:
    // [86] return 
    rts
}
  // sprites_irq_init
// Setup the IRQ
sprites_irq_init: {
    // asm { sei  }
    sei
    // [88] *IRQ_STATUS = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
    // [90] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [91] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [92] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // [93] *VIC_CONTROL = *VIC_CONTROL & $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // [94] *RASTER = IRQ_RASTER_FIRST -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
    // [95] *IRQ_ENABLE = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [96] *HARDWARE_IRQ = &sprites_irq -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
    // asm { cli  }
    cli
    jmp __breturn
    // sprites_irq_init::@return
  __breturn:
    // [98] return 
    rts
}
  // loop
loop: {
    .label s = 5
    // [100] phi from loop to loop::@1 [phi:loop->loop::@1]
  __b1_from_loop:
    // [100] phi sin_idx#11 = 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sin_idx
    jmp __b1
    // loop::@1
  __b1:
    jmp __b2
    // loop::@2
  __b2:
    // [101] if(*RASTER!=$ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    jmp __b3
    // loop::@3
  __b3:
    // [102] loop::idx#0 = sin_idx#11 -- vbuxx=vbuz1 
    ldx.z sin_idx
    // [103] phi from loop::@3 to loop::@4 [phi:loop::@3->loop::@4]
  __b4_from___b3:
    // [103] phi loop::idx#2 = loop::idx#0 [phi:loop::@3->loop::@4#0] -- register_copy 
    // [103] phi loop::s#2 = 4 [phi:loop::@3->loop::@4#1] -- vbuz1=vbuc1 
    lda #4
    sta.z s
    jmp __b4
    // [103] phi from loop::@4 to loop::@4 [phi:loop::@4->loop::@4]
  __b4_from___b4:
    // [103] phi loop::idx#2 = loop::idx#1 [phi:loop::@4->loop::@4#0] -- register_copy 
    // [103] phi loop::s#2 = loop::s#1 [phi:loop::@4->loop::@4#1] -- register_copy 
    jmp __b4
    // loop::@4
  __b4:
    // [104] loop::$1 = loop::s#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z s
    asl
    // [105] SPRITES_YPOS[loop::$1] = SIN[loop::idx#2] -- pbuc1_derefidx_vbuaa=pbuc2_derefidx_vbuxx 
    tay
    lda SIN,x
    sta SPRITES_YPOS,y
    // [106] loop::idx#1 = loop::idx#2 + $a -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[$a]
    // [107] loop::s#1 = ++ loop::s#2 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [108] if(loop::s#1!=8) goto loop::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z s
    bne __b4_from___b4
    jmp __b5
    // loop::@5
  __b5:
    // [109] sin_idx#2 = ++ sin_idx#11 -- vbuz1=_inc_vbuz1 
    inc.z sin_idx
    // [100] phi from loop::@5 to loop::@1 [phi:loop::@5->loop::@1]
  __b1_from___b5:
    // [100] phi sin_idx#11 = sin_idx#2 [phi:loop::@5->loop::@1#0] -- register_copy 
    jmp __b1
}
  // File Data
SIN:
.var AMPL = 200-21
    .for(var i=0; i<256; i++) {
  	  .byte 51+AMPL/2+sin(toRadians([i*360]/256))*AMPL/2
    }

.pc = $3000 "PLAYFIELD_SPRITES"
// Sprites covering the playfield
PLAYFIELD_SPRITES:
.var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}

.pc = $2800 "PLAYFIELD_CHARSET"
// Address of the charset
PLAYFIELD_CHARSET:
.fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"

.pc = $3800 "SIN_SPRITE"
SIN_SPRITE:
.fill $40, $ff


ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __init1_toSpritePtr1
Removing instruction jmp __init1___b1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b2
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp toSpritePtr1
Removing instruction jmp __b11
Removing instruction jmp vicSelectGfxBank1
Removing instruction jmp vicSelectGfxBank1_toDd001
Removing instruction jmp vicSelectGfxBank1___b1
Removing instruction jmp toD0181
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp toSpritePtr1
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda SPRITES_MC
Removing instruction lda SPRITES_EXPAND_Y
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b4_from___b4 with __b4
Replacing label __b1 with __b2
Removing instruction __init1_toSpritePtr1_from___init1:
Removing instruction __init1_toSpritePtr1:
Removing instruction __b1_from___init1___b1:
Removing instruction main_from___b1:
Removing instruction __breturn:
Removing instruction toSpritePtr1_from___b3:
Removing instruction toSpritePtr1:
Removing instruction vicSelectGfxBank1_toDd001_from_vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1_toDd001:
Removing instruction toD0181_from_vicSelectGfxBank1___b1:
Removing instruction toD0181:
Removing instruction __b1_from___b4:
Removing instruction toSpritePtr1_from___b1:
Removing instruction toSpritePtr1:
Removing instruction __b2_from___b4:
Removing instruction __b6_from___b2:
Removing instruction loop_from___b6:
Removing instruction __b1_from___b1:
Removing instruction __b1:
Removing instruction __b4_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __init1___b1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b11:
Removing instruction vicSelectGfxBank1:
Removing instruction vicSelectGfxBank1___b1:
Removing instruction __b3:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b4:
Removing instruction __b2:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __b1_from_sprites_init:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b1_from_loop:
Removing instruction __b3:
Removing instruction __b4_from___b3:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte BLACK = 0
const nomodify struct MOS6526_CIA* CIA1 = (struct MOS6526_CIA*) 56320
const nomodify byte* CIA1_INTERRUPT = (byte*) 56333
const nomodify struct MOS6526_CIA* CIA2 = (struct MOS6526_CIA*) 56576
const nomodify byte CIA_INTERRUPT_CLEAR = $7f
const nomodify byte* D018 = (byte*) 53272
const nomodify void()** HARDWARE_IRQ = (void()**) 65534
const nomodify byte* IRQ_ENABLE = (byte*) 53274
const nomodify byte IRQ_RASTER = 1
const nomodify byte IRQ_RASTER_FIRST = SPRITES_FIRST_YPOS+$13
const nomodify byte* IRQ_STATUS = (byte*) 53273
const byte OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
const byte OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
const byte* PLAYFIELD_CHARSET[]  = kickasm {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"
 }}
const nomodify byte* PLAYFIELD_SCREEN_1 = (byte*) 1024
const nomodify byte* PLAYFIELD_SCREEN_2 = (byte*) 11264
const byte* PLAYFIELD_SPRITES[$1e*$40]  = kickasm {{ .var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
const nomodify byte* PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
const nomodify byte* PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
const nomodify byte* PROCPORT = (byte*) 1
const nomodify byte* PROCPORT_DDR = (byte*) 0
const nomodify byte PROCPORT_DDR_MEMORY_MASK = 7
const nomodify byte PROCPORT_RAM_IO = 5
const nomodify byte* RASTER = (byte*) 53266
const byte* SIN[$100]  = kickasm {{ .var AMPL = 200-21
    .for(var i=0; i<256; i++) {
  	  .byte 51+AMPL/2+sin(toRadians([i*360]/256))*AMPL/2
    }
 }}
const byte* SIN_SPRITE[$40]  = kickasm {{ .fill $40, $ff
 }}
const nomodify byte* SPRITES_COLOR = (byte*) 53287
const nomodify byte* SPRITES_ENABLE = (byte*) 53269
const nomodify byte* SPRITES_EXPAND_X = (byte*) 53277
const nomodify byte* SPRITES_EXPAND_Y = (byte*) 53271
const nomodify byte SPRITES_FIRST_YPOS = $31
const nomodify byte* SPRITES_MC = (byte*) 53276
const nomodify byte* SPRITES_XPOS = (byte*) 53248
const nomodify byte* SPRITES_YPOS = (byte*) 53249
const nomodify word SPRITE_PTRS = $3f8
const nomodify byte* VIC_CONTROL = (byte*) 53265
void __start()
byte __start::__init1_toSpritePtr1_return
const byte __start::__init1_toSpritePtr1_return#0 __init1_toSpritePtr1_return = (byte)(word)PLAYFIELD_SPRITES/$40
byte* __start::__init1_toSpritePtr1_sprite
volatile byte irq_cnt loadstore zp[1]:10 0.48000000000000004
volatile byte irq_raster_next loadstore zp[1]:7 0.44444444444444453
volatile byte irq_sprite_ptr loadstore zp[1]:9 0.45161290322580644
volatile byte irq_sprite_ypos loadstore zp[1]:8 0.48275862068965525
void loop()
byte~ loop::$1 reg byte a 20002.0
byte loop::idx
byte loop::idx#0 reg byte x 2002.0
byte loop::idx#1 reg byte x 6667.333333333333
byte loop::idx#2 reg byte x 10334.666666666666
byte loop::s
byte loop::s#1 s zp[1]:5 15001.5
byte loop::s#2 s zp[1]:5 7500.75
void main()
byte~ main::$6 reg byte a 202.0
byte main::s
byte main::s#1 reg byte y 151.5
byte main::s#2 reg byte y 60.6
byte main::s2
byte main::s2#0 reg byte x 151.5
byte* main::toD0181_gfx
byte main::toD0181_return
const byte main::toD0181_return#0 toD0181_return = >(word)PLAYFIELD_SCREEN_1&$3fff*4|>(word)PLAYFIELD_CHARSET/4&$f
byte* main::toD0181_screen
byte main::toSpritePtr1_return
const byte main::toSpritePtr1_return#0 toSpritePtr1_return = (byte)(word)SIN_SPRITE/$40
byte* main::toSpritePtr1_sprite
byte* main::vicSelectGfxBank1_gfx
byte* main::vicSelectGfxBank1_toDd001_gfx
byte main::vicSelectGfxBank1_toDd001_return
const byte main::vicSelectGfxBank1_toDd001_return#0 vicSelectGfxBank1_toDd001_return = 3
byte main::xpos
byte main::xpos#1 xpos zp[1]:2 50.5
byte main::xpos#2 xpos zp[1]:2 37.875
byte main::ypos
byte main::ypos#1 ypos zp[1]:3 67.33333333333333
byte main::ypos#2 ypos zp[1]:3 33.666666666666664
volatile byte render_screen_showing loadstore zp[1]:6 0.4
byte sin_idx
byte sin_idx#11 sin_idx zp[1]:4 333.6666666666667
byte sin_idx#2 sin_idx zp[1]:4 2002.0
void sprites_init()
byte sprites_init::s
byte sprites_init::s#1 reg byte y 1501.5
byte sprites_init::s#2 reg byte y 800.8
byte sprites_init::s2
byte sprites_init::s2#0 reg byte x 2002.0
byte sprites_init::xpos
byte sprites_init::xpos#1 xpos zp[1]:5 667.3333333333334
byte sprites_init::xpos#2 xpos zp[1]:5 750.75
interrupt(HARDWARE_CLOBBER) void sprites_irq()
byte~ sprites_irq::$0 reg byte x 4.0
byte sprites_irq::ptr
byte sprites_irq::ptr#0 reg byte x 2.5
byte sprites_irq::ptr#1 reg byte x 2.6666666666666665
byte sprites_irq::ptr#2 reg byte a 4.0
byte sprites_irq::ptr#3 reg byte a 2.6666666666666665
byte sprites_irq::ptr#4 reg byte a 4.0
volatile byte sprites_irq::raster_sprite_gfx_modify loadstore zp[1]:11 6.5
byte sprites_irq::toSpritePtr1_return
const byte sprites_irq::toSpritePtr1_return#0 toSpritePtr1_return = (byte)(word)PLAYFIELD_SPRITES/$40
byte* sprites_irq::toSpritePtr1_sprite
byte sprites_irq::ypos
byte sprites_irq::ypos#0 reg byte a 2.5
void sprites_irq_init()

reg byte y [ main::s#2 main::s#1 ]
zp[1]:2 [ main::xpos#2 main::xpos#1 ]
zp[1]:3 [ main::ypos#2 main::ypos#1 ]
reg byte y [ sprites_init::s#2 sprites_init::s#1 ]
zp[1]:4 [ sin_idx#11 sin_idx#2 ]
zp[1]:5 [ loop::s#2 loop::s#1 sprites_init::xpos#2 sprites_init::xpos#1 ]
reg byte x [ loop::idx#2 loop::idx#0 loop::idx#1 ]
zp[1]:6 [ render_screen_showing ]
zp[1]:7 [ irq_raster_next ]
zp[1]:8 [ irq_sprite_ypos ]
zp[1]:9 [ irq_sprite_ptr ]
zp[1]:10 [ irq_cnt ]
reg byte a [ sprites_irq::ypos#0 ]
reg byte x [ sprites_irq::$0 ]
zp[1]:11 [ sprites_irq::raster_sprite_gfx_modify ]
reg byte x [ sprites_irq::ptr#0 ]
reg byte a [ sprites_irq::ptr#3 ]
reg byte a [ sprites_irq::ptr#4 ]
reg byte x [ sprites_irq::ptr#1 ]
reg byte a [ sprites_irq::ptr#2 ]
reg byte x [ main::s2#0 ]
reg byte a [ main::$6 ]
reg byte x [ sprites_init::s2#0 ]
reg byte a [ loop::$1 ]


FINAL ASSEMBLER
Score: 6542

  // File Comments
// Tetris Game for the Commodore 64
// A sprite multiplexer covering the playfield with a black layer to allow for 3 single-pixel colors
// Commodore 64 Registers and Constants
// The MOS 6526 Complex Interface Adapter (CIA)
// http://archive.6502.org/datasheets/mos_6526_cia_recreated.pdf
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  // Value that disables all CIA interrupts when stored to the CIA Interrupt registers
  .const CIA_INTERRUPT_CLEAR = $7f
  // The offset of the sprite pointers from the screen start address
  .const SPRITE_PTRS = $3f8
  // Bits for the VICII IRQ Status/Enable Registers
  .const IRQ_RASTER = 1
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // RAM in 0xA000, 0xE000 I/O in 0xD000
  .const PROCPORT_RAM_IO = 5
  // The colors of the C64
  .const BLACK = 0
  // The Y-position of the first sprite row
  .const SPRITES_FIRST_YPOS = $31
  // The line of the first IRQ
  .const IRQ_RASTER_FIRST = SPRITES_FIRST_YPOS+$13
  .const OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR = 2
  .const OFFSET_STRUCT_MOS6526_CIA_INTERRUPT = $d
  .label SPRITES_XPOS = $d000
  .label SPRITES_YPOS = $d001
  .label SPRITES_COLOR = $d027
  .label SPRITES_ENABLE = $d015
  .label SPRITES_EXPAND_Y = $d017
  .label SPRITES_MC = $d01c
  .label SPRITES_EXPAND_X = $d01d
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  .label D018 = $d018
  // VIC II IRQ Status Register
  .label IRQ_STATUS = $d019
  // VIC II IRQ Enable Register
  .label IRQ_ENABLE = $d01a
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // The CIA#1: keyboard matrix, joystick #1/#2
  .label CIA1 = $dc00
  // The CIA#2: Serial bus, RS-232, VIC memory bank
  .label CIA2 = $dd00
  // CIA#1 Interrupt for reading in ASM
  .label CIA1_INTERRUPT = $dc0d
  // The vector used when the HARDWARE serves IRQ interrupts
  .label HARDWARE_IRQ = $fffe
  // Address of the first screen
  .label PLAYFIELD_SCREEN_1 = $400
  // Address of the second screen
  .label PLAYFIELD_SCREEN_2 = $2c00
  // Screen Sprite pointers on screen 1
  .label PLAYFIELD_SPRITE_PTRS_1 = PLAYFIELD_SCREEN_1+SPRITE_PTRS
  // Screen Sprite pointers on screen 2
  .label PLAYFIELD_SPRITE_PTRS_2 = PLAYFIELD_SCREEN_2+SPRITE_PTRS
  // The screen currently being showed to the user. 0x00 for screen 1 / 0x20 for screen 2.
  .label render_screen_showing = 6
  // The raster line of the next IRQ
  .label irq_raster_next = 7
  // Y-pos of the sprites on the next IRQ
  .label irq_sprite_ypos = 8
  // Index of the sprites to show on the next IRQ
  .label irq_sprite_ptr = 9
  // Counting the 10 IRQs
  .label irq_cnt = $a
  .label sin_idx = 4
  // __start
__start: {
    .const __init1_toSpritePtr1_return = $ff&PLAYFIELD_SPRITES/$40
    // __start::__init1
    // render_screen_showing = 0
    // [1] render_screen_showing = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z render_screen_showing
    // irq_raster_next = IRQ_RASTER_FIRST
    // [2] irq_raster_next = IRQ_RASTER_FIRST -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // irq_sprite_ypos = SPRITES_FIRST_YPOS + 21
    // [3] irq_sprite_ypos = SPRITES_FIRST_YPOS+$15 -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS+$15
    sta.z irq_sprite_ypos
    // [4] phi from __start::__init1 to __start::__init1_toSpritePtr1 [phi:__start::__init1->__start::__init1_toSpritePtr1]
    // __start::__init1_toSpritePtr1
    // __start::__init1_@1
    // irq_sprite_ptr = toSpritePtr(PLAYFIELD_SPRITES) + 3
    // [5] irq_sprite_ptr = __start::__init1_toSpritePtr1_return#0+3 -- vbuz1=vbuc1 
    lda #__init1_toSpritePtr1_return+3
    sta.z irq_sprite_ptr
    // irq_cnt = 0
    // [6] irq_cnt = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // [7] phi from __start::__init1_@1 to __start::@1 [phi:__start::__init1_@1->__start::@1]
    // __start::@1
    // [8] call main 
    // [50] phi from __start::@1 to main [phi:__start::@1->main]
    jsr main
    // __start::@return
    // [9] return 
    rts
}
  // sprites_irq
// Raster Interrupt Routine - sets up the sprites covering the playfield
// Repeats 10 timers every 2 lines from line IRQ_RASTER_FIRST
// Utilizes duplicated gfx in the sprites to allow for some leeway in updating the sprite pointers
sprites_irq: {
    .const toSpritePtr1_return = $ff&PLAYFIELD_SPRITES/$40
    .label raster_sprite_gfx_modify = $b
    // entry interrupt(HARDWARE_CLOBBER)
    sta rega+1
    stx regx+1
    // asm
    // asm { cld  }
    //(*BG_COLOR)++;
    // Clear decimal flag (because it is used by the score algorithm)
    cld
    // ypos = irq_sprite_ypos
    // [11] sprites_irq::ypos#0 = irq_sprite_ypos -- vbuaa=vbuz1 
    // Place the sprites
    lda.z irq_sprite_ypos
    // SPRITES_YPOS[0] = ypos
    // [12] *SPRITES_YPOS = sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS
    // SPRITES_YPOS[2] = ypos
    // [13] *(SPRITES_YPOS+2) = sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+2
    // SPRITES_YPOS[4] = ypos
    // [14] *(SPRITES_YPOS+4) = sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+4
    // SPRITES_YPOS[6] = ypos
    // [15] *(SPRITES_YPOS+6) = sprites_irq::ypos#0 -- _deref_pbuc1=vbuaa 
    sta SPRITES_YPOS+6
    // irq_raster_next+1
    // [16] sprites_irq::$0 = irq_raster_next + 1 -- vbuxx=vbuz1_plus_1 
    ldx.z irq_raster_next
    inx
    // raster_sprite_gfx_modify = irq_raster_next+1
    // [17] sprites_irq::raster_sprite_gfx_modify = sprites_irq::$0 -- vbuz1=vbuxx 
    // Wait for the y-position before changing sprite pointers
    stx.z raster_sprite_gfx_modify
    // sprites_irq::@8
  __b8:
    // while(*RASTER<raster_sprite_gfx_modify)
    // [18] if(*RASTER<sprites_irq::raster_sprite_gfx_modify) goto sprites_irq::@8 -- _deref_pbuc1_lt_vbuz1_then_la1 
    lda RASTER
    cmp.z raster_sprite_gfx_modify
    bcc __b8
    // sprites_irq::@9
    // ptr = irq_sprite_ptr
    // [19] sprites_irq::ptr#0 = irq_sprite_ptr -- vbuxx=vbuz1 
    ldx.z irq_sprite_ptr
    // if(render_screen_showing==0)
    // [20] if(render_screen_showing==0) goto sprites_irq::@1 -- vbuz1_eq_0_then_la1 
    lda.z render_screen_showing
    cmp #0
    beq __b1
    // sprites_irq::@10
    // PLAYFIELD_SPRITE_PTRS_2[0] = ptr++
    // [21] *PLAYFIELD_SPRITE_PTRS_2 = sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_2
    // PLAYFIELD_SPRITE_PTRS_2[0] = ptr++;
    // [22] sprites_irq::ptr#3 = ++ sprites_irq::ptr#0 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // PLAYFIELD_SPRITE_PTRS_2[1] = ptr
    // [23] *(PLAYFIELD_SPRITE_PTRS_2+1) = sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+1
    // PLAYFIELD_SPRITE_PTRS_2[2] = ptr++
    // [24] *(PLAYFIELD_SPRITE_PTRS_2+2) = sprites_irq::ptr#3 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+2
    // PLAYFIELD_SPRITE_PTRS_2[2] = ptr++;
    // [25] sprites_irq::ptr#4 = ++ sprites_irq::ptr#3 -- vbuaa=_inc_vbuaa 
    clc
    adc #1
    // PLAYFIELD_SPRITE_PTRS_2[3] = ptr
    // [26] *(PLAYFIELD_SPRITE_PTRS_2+3) = sprites_irq::ptr#4 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_2+3
    // sprites_irq::@2
  __b2:
    // ++irq_cnt;
    // [27] irq_cnt = ++ irq_cnt -- vbuz1=_inc_vbuz1 
    inc.z irq_cnt
    // if(irq_cnt==9)
    // [28] if(irq_cnt==9) goto sprites_irq::@3 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z irq_cnt
    beq __b3
    // sprites_irq::@6
    // if(irq_cnt==10)
    // [29] if(irq_cnt==$a) goto sprites_irq::@4 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z irq_cnt
    beq __b4
    // sprites_irq::@7
    // irq_raster_next += 20
    // [30] irq_raster_next = irq_raster_next + $14 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$14]
    stx.z irq_raster_next
    // irq_sprite_ypos += 21
    // [31] irq_sprite_ypos = irq_sprite_ypos + $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // irq_sprite_ptr += 3
    // [32] irq_sprite_ptr = irq_sprite_ptr + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    // sprites_irq::@5
  __b5:
    // *RASTER = irq_raster_next
    // [33] *RASTER = irq_raster_next -- _deref_pbuc1=vbuz1 
    // Setup next interrupt
    lda.z irq_raster_next
    sta RASTER
    // *IRQ_STATUS = IRQ_RASTER
    // [34] *IRQ_STATUS = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge the IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // sprites_irq::@return
    // }
    // [35] return  - exit interrupt(HARDWARE_CLOBBER)
  rega:
    lda #00
  regx:
    ldx #00
    rti
    // sprites_irq::@4
  __b4:
    // irq_cnt = 0
    // [36] irq_cnt = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z irq_cnt
    // irq_raster_next = IRQ_RASTER_FIRST
    // [37] irq_raster_next = IRQ_RASTER_FIRST -- vbuz1=vbuc1 
    lda #IRQ_RASTER_FIRST
    sta.z irq_raster_next
    // irq_sprite_ypos += 21
    // [38] irq_sprite_ypos = irq_sprite_ypos + $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ypos
    axs #-[$15]
    stx.z irq_sprite_ypos
    // irq_sprite_ptr += 3
    // [39] irq_sprite_ptr = irq_sprite_ptr + 3 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_sprite_ptr
    axs #-[3]
    stx.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@3
  __b3:
    // irq_raster_next += 21
    // [40] irq_raster_next = irq_raster_next + $15 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z irq_raster_next
    axs #-[$15]
    stx.z irq_raster_next
    // irq_sprite_ypos = SPRITES_FIRST_YPOS
    // [41] irq_sprite_ypos = SPRITES_FIRST_YPOS -- vbuz1=vbuc1 
    lda #SPRITES_FIRST_YPOS
    sta.z irq_sprite_ypos
    // [42] phi from sprites_irq::@3 to sprites_irq::toSpritePtr1 [phi:sprites_irq::@3->sprites_irq::toSpritePtr1]
    // sprites_irq::toSpritePtr1
    // sprites_irq::@11
    // irq_sprite_ptr = toSpritePtr(PLAYFIELD_SPRITES)
    // [43] irq_sprite_ptr = sprites_irq::toSpritePtr1_return#0 -- vbuz1=vbuc1 
    lda #toSpritePtr1_return
    sta.z irq_sprite_ptr
    jmp __b5
    // sprites_irq::@1
  __b1:
    // PLAYFIELD_SPRITE_PTRS_1[0] = ptr++
    // [44] *PLAYFIELD_SPRITE_PTRS_1 = sprites_irq::ptr#0 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1
    // PLAYFIELD_SPRITE_PTRS_1[0] = ptr++;
    // [45] sprites_irq::ptr#1 = ++ sprites_irq::ptr#0 -- vbuxx=_inc_vbuxx 
    inx
    // PLAYFIELD_SPRITE_PTRS_1[1] = ptr
    // [46] *(PLAYFIELD_SPRITE_PTRS_1+1) = sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+1
    // PLAYFIELD_SPRITE_PTRS_1[2] = ptr++
    // [47] *(PLAYFIELD_SPRITE_PTRS_1+2) = sprites_irq::ptr#1 -- _deref_pbuc1=vbuxx 
    stx PLAYFIELD_SPRITE_PTRS_1+2
    // PLAYFIELD_SPRITE_PTRS_1[2] = ptr++;
    // [48] sprites_irq::ptr#2 = ++ sprites_irq::ptr#1 -- vbuaa=_inc_vbuxx 
    inx
    txa
    // PLAYFIELD_SPRITE_PTRS_1[3] = ptr
    // [49] *(PLAYFIELD_SPRITE_PTRS_1+3) = sprites_irq::ptr#2 -- _deref_pbuc1=vbuaa 
    sta PLAYFIELD_SPRITE_PTRS_1+3
    jmp __b2
}
  // main
main: {
    .const toSpritePtr1_return = $ff&SIN_SPRITE/$40
    .const vicSelectGfxBank1_toDd001_return = 3
    .const toD0181_return = (>(PLAYFIELD_SCREEN_1&$3fff)*4)|(>PLAYFIELD_CHARSET)/4&$f
    .label xpos = 2
    .label ypos = 3
    // main::vicSelectGfxBank1
    // CIA2->PORT_A_DDR = %00000011
    // [51] *((byte*)CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2+OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR
    // [52] phi from main::vicSelectGfxBank1 to main::vicSelectGfxBank1_toDd001 [phi:main::vicSelectGfxBank1->main::vicSelectGfxBank1_toDd001]
    // main::vicSelectGfxBank1_toDd001
    // main::vicSelectGfxBank1_@1
    // CIA2->PORT_A = toDd00(gfx)
    // [53] *((byte*)CIA2) = main::vicSelectGfxBank1_toDd001_return#0 -- _deref_pbuc1=vbuc2 
    lda #vicSelectGfxBank1_toDd001_return
    sta CIA2
    // [54] phi from main::vicSelectGfxBank1_@1 to main::toD0181 [phi:main::vicSelectGfxBank1_@1->main::toD0181]
    // main::toD0181
    // main::@3
    // *D018 = toD018(PLAYFIELD_SCREEN_1, PLAYFIELD_CHARSET)
    // [55] *D018 = main::toD0181_return#0 -- _deref_pbuc1=vbuc2 
    lda #toD0181_return
    sta D018
    // sprites_init()
    // [56] call sprites_init 
    jsr sprites_init
    // main::@5
    // *SPRITES_ENABLE = 0xff
    // [57] *SPRITES_ENABLE = $ff -- _deref_pbuc1=vbuc2 
    lda #$ff
    sta SPRITES_ENABLE
    // [58] phi from main::@5 to main::@1 [phi:main::@5->main::@1]
    // [58] phi main::ypos#2 = $32 [phi:main::@5->main::@1#0] -- vbuz1=vbuc1 
    lda #$32
    sta.z ypos
    // [58] phi main::xpos#2 = $18 [phi:main::@5->main::@1#1] -- vbuz1=vbuc1 
    lda #$18
    sta.z xpos
    // [58] phi main::s#2 = 4 [phi:main::@5->main::@1#2] -- vbuyy=vbuc1 
    ldy #4
    // [58] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [58] phi main::ypos#2 = main::ypos#1 [phi:main::@4->main::@1#0] -- register_copy 
    // [58] phi main::xpos#2 = main::xpos#1 [phi:main::@4->main::@1#1] -- register_copy 
    // [58] phi main::s#2 = main::s#1 [phi:main::@4->main::@1#2] -- register_copy 
    // main::@1
  __b1:
    // s2 = s*2
    // [59] main::s2#0 = main::s#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // SPRITES_XPOS[s2] = xpos
    // [60] SPRITES_XPOS[main::s2#0] = main::xpos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z xpos
    sta SPRITES_XPOS,x
    // SPRITES_YPOS[s2] = ypos
    // [61] SPRITES_YPOS[main::s2#0] = main::ypos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z ypos
    sta SPRITES_YPOS,x
    // s-3
    // [62] main::$6 = main::s#2 - 3 -- vbuaa=vbuyy_minus_vbuc1 
    tya
    sec
    sbc #3
    // SPRITES_COLOR[s] = s-3
    // [63] SPRITES_COLOR[main::s#2] = main::$6 -- pbuc1_derefidx_vbuyy=vbuaa 
    sta SPRITES_COLOR,y
    // [64] phi from main::@1 to main::toSpritePtr1 [phi:main::@1->main::toSpritePtr1]
    // main::toSpritePtr1
    // main::@4
    // PLAYFIELD_SPRITE_PTRS_1[s] = toSpritePtr(SIN_SPRITE)
    // [65] PLAYFIELD_SPRITE_PTRS_1[main::s#2] = main::toSpritePtr1_return#0 -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #toSpritePtr1_return
    sta PLAYFIELD_SPRITE_PTRS_1,y
    // xpos +=  24
    // [66] main::xpos#1 = main::xpos#2 + $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // ypos +=  24
    // [67] main::ypos#1 = main::ypos#2 + $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z ypos
    axs #-[$18]
    stx.z ypos
    // for(char s:4..7)
    // [68] main::s#1 = ++ main::s#2 -- vbuyy=_inc_vbuyy 
    iny
    // [69] if(main::s#1!=8) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne __b1
    // [70] phi from main::@4 to main::@2 [phi:main::@4->main::@2]
    // main::@2
    // sprites_irq_init()
    // [71] call sprites_irq_init 
    jsr sprites_irq_init
    // [72] phi from main::@2 to main::@6 [phi:main::@2->main::@6]
    // main::@6
    // loop()
    // [73] call loop 
    // [99] phi from main::@6 to loop [phi:main::@6->loop]
    jsr loop
    // main::@return
    // }
    // [74] return 
    rts
}
  // sprites_init
// Setup the sprites
sprites_init: {
    .label xpos = 5
    // *SPRITES_ENABLE = %00001111
    // [75] *SPRITES_ENABLE = $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta SPRITES_ENABLE
    // *SPRITES_MC = 0
    // [76] *SPRITES_MC = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SPRITES_MC
    // *SPRITES_EXPAND_Y = *SPRITES_MC = 0
    // [77] *SPRITES_EXPAND_Y = *SPRITES_MC -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_Y
    // *SPRITES_EXPAND_X = *SPRITES_EXPAND_Y = *SPRITES_MC = 0
    // [78] *SPRITES_EXPAND_X = *SPRITES_EXPAND_Y -- _deref_pbuc1=_deref_pbuc2 
    sta SPRITES_EXPAND_X
    // [79] phi from sprites_init to sprites_init::@1 [phi:sprites_init->sprites_init::@1]
    // [79] phi sprites_init::xpos#2 = $18+$f*8 [phi:sprites_init->sprites_init::@1#0] -- vbuz1=vbuc1 
    lda #$18+$f*8
    sta.z xpos
    // [79] phi sprites_init::s#2 = 0 [phi:sprites_init->sprites_init::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [79] phi from sprites_init::@1 to sprites_init::@1 [phi:sprites_init::@1->sprites_init::@1]
    // [79] phi sprites_init::xpos#2 = sprites_init::xpos#1 [phi:sprites_init::@1->sprites_init::@1#0] -- register_copy 
    // [79] phi sprites_init::s#2 = sprites_init::s#1 [phi:sprites_init::@1->sprites_init::@1#1] -- register_copy 
    // sprites_init::@1
  __b1:
    // s2 = s*2
    // [80] sprites_init::s2#0 = sprites_init::s#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // SPRITES_XPOS[s2] = xpos
    // [81] SPRITES_XPOS[sprites_init::s2#0] = sprites_init::xpos#2 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z xpos
    sta SPRITES_XPOS,x
    // SPRITES_COLOR[s] = BLACK
    // [82] SPRITES_COLOR[sprites_init::s#2] = BLACK -- pbuc1_derefidx_vbuyy=vbuc2 
    lda #BLACK
    sta SPRITES_COLOR,y
    // xpos = xpos+24
    // [83] sprites_init::xpos#1 = sprites_init::xpos#2 + $18 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z xpos
    axs #-[$18]
    stx.z xpos
    // for(char s:0..3)
    // [84] sprites_init::s#1 = ++ sprites_init::s#2 -- vbuyy=_inc_vbuyy 
    iny
    // [85] if(sprites_init::s#1!=4) goto sprites_init::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne __b1
    // sprites_init::@return
    // }
    // [86] return 
    rts
}
  // sprites_irq_init
// Setup the IRQ
sprites_irq_init: {
    // asm
    // asm { sei  }
    sei
    // *IRQ_STATUS = IRQ_RASTER
    // [88] *IRQ_STATUS = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Acknowledge any IRQ and setup the next one
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // asm
    // asm { ldaCIA1_INTERRUPT  }
    lda CIA1_INTERRUPT
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [90] *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [91] *PROCPORT = PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // CIA1->INTERRUPT = CIA_INTERRUPT_CLEAR
    // [92] *((byte*)CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT) = CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1+OFFSET_STRUCT_MOS6526_CIA_INTERRUPT
    // *VIC_CONTROL &=0x7f
    // [93] *VIC_CONTROL = *VIC_CONTROL & $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // *RASTER = IRQ_RASTER_FIRST
    // [94] *RASTER = IRQ_RASTER_FIRST -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER_FIRST
    sta RASTER
    // *IRQ_ENABLE = IRQ_RASTER
    // [95] *IRQ_ENABLE = IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // *HARDWARE_IRQ = &sprites_irq
    // [96] *HARDWARE_IRQ = &sprites_irq -- _deref_qprc1=pprc2 
    // Set the IRQ routine
    lda #<sprites_irq
    sta HARDWARE_IRQ
    lda #>sprites_irq
    sta HARDWARE_IRQ+1
    // asm
    // asm { cli  }
    cli
    // sprites_irq_init::@return
    // }
    // [98] return 
    rts
}
  // loop
loop: {
    .label s = 5
    // [100] phi from loop to loop::@1 [phi:loop->loop::@1]
    // [100] phi sin_idx#11 = 0 [phi:loop->loop::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z sin_idx
    // loop::@1
    // loop::@2
  __b2:
    // while (*RASTER!=0xff)
    // [101] if(*RASTER!=$ff) goto loop::@2 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b2
    // loop::@3
    // idx = sin_idx
    // [102] loop::idx#0 = sin_idx#11 -- vbuxx=vbuz1 
    ldx.z sin_idx
    // [103] phi from loop::@3 to loop::@4 [phi:loop::@3->loop::@4]
    // [103] phi loop::idx#2 = loop::idx#0 [phi:loop::@3->loop::@4#0] -- register_copy 
    // [103] phi loop::s#2 = 4 [phi:loop::@3->loop::@4#1] -- vbuz1=vbuc1 
    lda #4
    sta.z s
    // [103] phi from loop::@4 to loop::@4 [phi:loop::@4->loop::@4]
    // [103] phi loop::idx#2 = loop::idx#1 [phi:loop::@4->loop::@4#0] -- register_copy 
    // [103] phi loop::s#2 = loop::s#1 [phi:loop::@4->loop::@4#1] -- register_copy 
    // loop::@4
  __b4:
    // s*2
    // [104] loop::$1 = loop::s#2 << 1 -- vbuaa=vbuz1_rol_1 
    lda.z s
    asl
    // SPRITES_YPOS[s*2] = SIN[idx]
    // [105] SPRITES_YPOS[loop::$1] = SIN[loop::idx#2] -- pbuc1_derefidx_vbuaa=pbuc2_derefidx_vbuxx 
    tay
    lda SIN,x
    sta SPRITES_YPOS,y
    // idx += 10
    // [106] loop::idx#1 = loop::idx#2 + $a -- vbuxx=vbuxx_plus_vbuc1 
    txa
    axs #-[$a]
    // for(char s:4..7)
    // [107] loop::s#1 = ++ loop::s#2 -- vbuz1=_inc_vbuz1 
    inc.z s
    // [108] if(loop::s#1!=8) goto loop::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z s
    bne __b4
    // loop::@5
    // sin_idx++;
    // [109] sin_idx#2 = ++ sin_idx#11 -- vbuz1=_inc_vbuz1 
    inc.z sin_idx
    // [100] phi from loop::@5 to loop::@1 [phi:loop::@5->loop::@1]
    // [100] phi sin_idx#11 = sin_idx#2 [phi:loop::@5->loop::@1#0] -- register_copy 
    jmp __b2
}
  // File Data
SIN:
.var AMPL = 200-21
    .for(var i=0; i<256; i++) {
  	  .byte 51+AMPL/2+sin(toRadians([i*360]/256))*AMPL/2
    }

.pc = $3000 "PLAYFIELD_SPRITES"
// Sprites covering the playfield
PLAYFIELD_SPRITES:
.var sprites = LoadPicture("playfield-sprites.png", List().add($010101, $000000))
	// Put the sprites into memory
	.for(var sy=0;sy<10;sy++) {
	    .var sprite_gfx_y = sy*20
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
	    	    .var gfx_y =  sprite_gfx_y + mod(2100+y-sprite_gfx_y,21)
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,gfx_y)
	            }
	        }
	    	.byte 0
	  	}
	}

.pc = $2800 "PLAYFIELD_CHARSET"
// Address of the charset
PLAYFIELD_CHARSET:
.fill 8,$00 // Place a filled char at the start of the charset
    .import binary "playfield-screen.imap"

.pc = $3800 "SIN_SPRITE"
SIN_SPRITE:
.fill $40, $ff


