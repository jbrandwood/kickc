Inlined call call __init
Calling convention STACK_CALL adding prepare/execute/finalize for call *funcPointer 
Calling convention STACK_CALL adding prepare/execute/finalize for call *funcPointer 

CONTROL FLOW GRAPH SSA

void myFunc()
myFunc: scope:[myFunc]  from
  *myFunc::BORDER_COLOR = ++ *myFunc::BORDER_COLOR
  to:myFunc::@return
myFunc::@return: scope:[myFunc]  from myFunc
  return 
  to:@return

void myFunc2()
myFunc2: scope:[myFunc2]  from
  *myFunc2::BG_COLOR = ++ *myFunc2::BG_COLOR
  to:myFunc2::@return
myFunc2::@return: scope:[myFunc2]  from myFunc2
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  funcPointer#0 = &myFunc
  callexecute *funcPointer#0 
  to:main::@1
main::@1: scope:[main]  from main
  funcPointer#1 = &myFunc2
  callexecute *funcPointer#1 
  to:main::@return
main::@return: scope:[main]  from main::@1
  funcPointer#6 = phi( main::@1/funcPointer#1 )
  funcPointer#2 = funcPointer#6
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  funcPointer#3 = (void (*)()) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  funcPointer#9 = phi( __start::__init1/funcPointer#3 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  funcPointer#7 = phi( __start::@1/funcPointer#2 )
  funcPointer#4 = funcPointer#7
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  funcPointer#8 = phi( __start::@2/funcPointer#4 )
  funcPointer#5 = funcPointer#8
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void (*funcPointer)()
void (*funcPointer#0)()
void (*funcPointer#1)()
void (*funcPointer#2)()
void (*funcPointer#3)()
void (*funcPointer#4)()
void (*funcPointer#5)()
void (*funcPointer#6)()
void (*funcPointer#7)()
void (*funcPointer#8)()
void (*funcPointer#9)()
void main()
void myFunc()
__constant char * const myFunc::BORDER_COLOR = (char *)$d020
void myFunc2()
__constant char * const myFunc2::BG_COLOR = (char *)$d021

Simplifying constant pointer cast (char *) 53280
Simplifying constant pointer cast (char *) 53281
Successful SSA optimization PassNCastSimplification
Alias funcPointer#1 = funcPointer#6 funcPointer#2 
Alias funcPointer#3 = funcPointer#9 
Alias funcPointer#4 = funcPointer#7 funcPointer#8 funcPointer#5 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values funcPointer#4 funcPointer#1
Successful SSA optimization Pass2IdenticalPhiElimination
Constant funcPointer#0 = &myFunc
Constant funcPointer#1 = &myFunc2
Constant funcPointer#3 = (void (*)()) 0
Successful SSA optimization Pass2ConstantIdentification
Replacing constant pointer function [5] callexecute myFunc 
Replacing constant pointer function [7] callexecute myFunc2 
Successful SSA optimization Pass2ConstantCallPointerIdentification
Eliminating unused constant funcPointer#0
Eliminating unused constant funcPointer#1
Eliminating unused constant funcPointer#3
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
CALL GRAPH
Calls in [main] to myFunc:1 myFunc2:3 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] callexecute myFunc 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] callexecute myFunc2 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

__stackcall void myFunc2()
myFunc2: scope:[myFunc2]  from main::@1
  [5] *myFunc2::BG_COLOR = ++ *myFunc2::BG_COLOR
  to:myFunc2::@return
myFunc2::@return: scope:[myFunc2]  from myFunc2
  [6] return 
  to:@return

__stackcall void myFunc()
myFunc: scope:[myFunc]  from main
  [7] *myFunc::BORDER_COLOR = ++ *myFunc::BORDER_COLOR
  to:myFunc::@return
myFunc::@return: scope:[myFunc]  from myFunc
  [8] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void (*funcPointer)()
void main()
__stackcall void myFunc()
__stackcall void myFunc2()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS

REGISTER UPLIFT SCOPES
Uplift Scope [myFunc] 
Uplift Scope [myFunc2] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [myFunc] best 54 combination 
Uplifting [myFunc2] best 54 combination 
Uplifting [main] best 54 combination 
Uplifting [] best 54 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests calling through pointers to non-args no-return functions
  // Upstart
  // Commodore 64 PRG executable file
.file [name="function-pointer-noarg-call-11.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // [1] callexecute myFunc  -- call_vprc1 
    jsr myFunc
    // [2] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [3] callexecute myFunc2  -- call_vprc1 
    jsr myFunc2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // myFunc2
myFunc2: {
    .label BG_COLOR = $d021
    // [5] *myFunc2::BG_COLOR = ++ *myFunc2::BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    jmp __breturn
    // myFunc2::@return
  __breturn:
    // [6] return 
    rts
}
  // myFunc
myFunc: {
    .label BORDER_COLOR = $d020
    // [7] *myFunc::BORDER_COLOR = ++ *myFunc::BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    jmp __breturn
    // myFunc::@return
  __breturn:
    // [8] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from_main:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void (*funcPointer)()
void main()
__stackcall void myFunc()
__constant char * const myFunc::BORDER_COLOR = (char *) 53280
__stackcall void myFunc2()
__constant char * const myFunc2::BG_COLOR = (char *) 53281



FINAL ASSEMBLER
Score: 42

  // File Comments
// Tests calling through pointers to non-args no-return functions
  // Upstart
  // Commodore 64 PRG executable file
.file [name="function-pointer-noarg-call-11.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // (*funcPointer)()
    // [1] callexecute myFunc  -- call_vprc1 
    jsr myFunc
    // [2] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // (*funcPointer)()
    // [3] callexecute myFunc2  -- call_vprc1 
    jsr myFunc2
    // main::@return
    // }
    // [4] return 
    rts
}
  // myFunc2
myFunc2: {
    .label BG_COLOR = $d021
    // (*BG_COLOR)++;
    // [5] *myFunc2::BG_COLOR = ++ *myFunc2::BG_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BG_COLOR
    // myFunc2::@return
    // }
    // [6] return 
    rts
}
  // myFunc
myFunc: {
    .label BORDER_COLOR = $d020
    // (*BORDER_COLOR)++;
    // [7] *myFunc::BORDER_COLOR = ++ *myFunc::BORDER_COLOR -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDER_COLOR
    // myFunc::@return
    // }
    // [8] return 
    rts
}
  // File Data

