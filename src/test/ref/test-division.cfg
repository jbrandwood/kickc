
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call test_8u 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [4] phi()
  [5] call test_16u 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [6] phi()
  [7] call test_8s 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [8] phi()
  [9] call test_16s 
  to:main::@return
main::@return: scope:[main]  from main::@4
  [10] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from main
  [11] phi()
  [12] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [13] return 
  to:@return

(void()) test_8u()
test_8u: scope:[test_8u]  from main::@1
  [14] phi()
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  [15] (byte*) print_line_cursor#43 ← phi( test_8u/(const byte*) print_screen#0 test_8u::@11/(byte*) print_line_cursor#0 )
  [15] (byte*) print_char_cursor#144 ← phi( test_8u/(const byte*) print_screen#0 test_8u::@11/(byte*) print_char_cursor#187 )
  [15] (byte) test_8u::i#10 ← phi( test_8u/(byte) 0 test_8u::@11/(byte) test_8u::i#1 )
  [16] (byte) test_8u::dividend#0 ← *((const byte*) test_8u::dividends + (byte) test_8u::i#10)
  [17] (byte) test_8u::divisor#0 ← *((const byte*) test_8u::divisors + (byte) test_8u::i#10)
  [18] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0
  [19] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0
  [20] call div8u 
  [21] (byte) div8u::return#3 ← (byte) div8u::return#0
  to:test_8u::@2
test_8u::@2: scope:[test_8u]  from test_8u::@1
  [22] (byte) test_8u::res#0 ← (byte) div8u::return#3
  [23] (byte) print_uchar::b#3 ← (byte) test_8u::dividend#0
  [24] call print_uchar 
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@2
  [25] phi()
  [26] call print_str 
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  [27] (byte) print_uchar::b#4 ← (byte) test_8u::divisor#0
  [28] call print_uchar 
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  [29] phi()
  [30] call print_str 
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  [31] (byte) print_uchar::b#5 ← (byte) test_8u::res#0
  [32] call print_uchar 
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  [33] phi()
  [34] call print_str 
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  [35] (byte) print_uchar::b#6 ← (byte) rem8u#18
  [36] call print_uchar 
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  [37] phi()
  [38] call print_ln 
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  [39] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10
  [40] if((byte) test_8u::i#1!=(byte) 6) goto test_8u::@11
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@10
  [41] return 
  to:@return
test_8u::@11: scope:[test_8u]  from test_8u::@10
  [42] (byte*) print_char_cursor#187 ← (byte*) print_line_cursor#0
  to:test_8u::@1

(void()) test_16u()
test_16u: scope:[test_16u]  from main::@2
  [43] phi()
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@10
  [44] (byte) test_16u::i#10 ← phi( test_16u/(byte) 0 test_16u::@10/(byte) test_16u::i#1 )
  [45] (byte~) test_16u::$11 ← (byte) test_16u::i#10 << (byte) 1
  [46] (word) test_16u::dividend#0 ← *((const word*) test_16u::dividends + (byte~) test_16u::$11)
  [47] (word) test_16u::divisor#0 ← *((const word*) test_16u::divisors + (byte~) test_16u::$11)
  [48] (word) div16u::dividend#0 ← (word) test_16u::dividend#0
  [49] (word) div16u::divisor#0 ← (word) test_16u::divisor#0
  [50] call div16u 
  [51] (word) div16u::return#2 ← (word) div16u::return#0
  to:test_16u::@2
test_16u::@2: scope:[test_16u]  from test_16u::@1
  [52] (word) test_16u::res#0 ← (word) div16u::return#2
  [53] (word) print_uint::w#1 ← (word) test_16u::dividend#0
  [54] (byte*) print_char_cursor#169 ← (byte*) print_line_cursor#0
  [55] call print_uint 
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@2
  [56] phi()
  [57] call print_str 
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  [58] (word) print_uint::w#2 ← (word) test_16u::divisor#0
  [59] call print_uint 
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  [60] phi()
  [61] call print_str 
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  [62] (word) print_uint::w#3 ← (word) test_16u::res#0
  [63] call print_uint 
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  [64] phi()
  [65] call print_str 
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  [66] (word) print_uint::w#4 ← (word) rem16u#0
  [67] call print_uint 
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  [68] phi()
  [69] call print_ln 
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  [70] (byte) test_16u::i#1 ← ++ (byte) test_16u::i#10
  [71] if((byte) test_16u::i#1!=(byte) 6) goto test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@10
  [72] return 
  to:@return

(void()) test_8s()
test_8s: scope:[test_8s]  from main::@3
  [73] phi()
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@10
  [74] (byte) test_8s::i#10 ← phi( test_8s/(byte) 0 test_8s::@10/(byte) test_8s::i#1 )
  [75] (signed byte) test_8s::dividend#0 ← *((const signed byte*) test_8s::dividends + (byte) test_8s::i#10)
  [76] (signed byte) test_8s::divisor#0 ← *((const signed byte*) test_8s::divisors + (byte) test_8s::i#10)
  [77] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0
  [78] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0
  [79] call div8s 
  [80] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  to:test_8s::@2
test_8s::@2: scope:[test_8s]  from test_8s::@1
  [81] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3
  [82] (signed byte) print_schar::b#1 ← (signed byte) test_8s::dividend#0
  [83] (byte*) print_char_cursor#164 ← (byte*) print_line_cursor#0
  [84] call print_schar 
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@2
  [85] phi()
  [86] call print_str 
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  [87] (signed byte) print_schar::b#2 ← (signed byte) test_8s::divisor#0
  [88] call print_schar 
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  [89] phi()
  [90] call print_str 
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  [91] (signed byte) print_schar::b#3 ← (signed byte) test_8s::res#0
  [92] call print_schar 
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  [93] phi()
  [94] call print_str 
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  [95] (signed byte) print_schar::b#4 ← (signed byte) rem8s#10
  [96] call print_schar 
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  [97] phi()
  [98] call print_ln 
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  [99] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10
  [100] if((byte) test_8s::i#1!=(byte) 6) goto test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@10
  [101] return 
  to:@return

(void()) test_16s()
test_16s: scope:[test_16s]  from main::@4
  [102] phi()
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@10
  [103] (byte) test_16s::i#10 ← phi( test_16s/(byte) 0 test_16s::@10/(byte) test_16s::i#1 )
  [104] (byte~) test_16s::$11 ← (byte) test_16s::i#10 << (byte) 1
  [105] (signed word) test_16s::dividend#0 ← *((const signed word*) test_16s::dividends + (byte~) test_16s::$11)
  [106] (signed word) test_16s::divisor#0 ← *((const signed word*) test_16s::divisors + (byte~) test_16s::$11)
  [107] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  [108] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  [109] call div16s 
  [110] (signed word) div16s::return#2 ← (signed word) div16s::return#0
  to:test_16s::@2
test_16s::@2: scope:[test_16s]  from test_16s::@1
  [111] (signed word) test_16s::res#0 ← (signed word) div16s::return#2
  [112] (signed word) print_sint::w#1 ← (signed word) test_16s::dividend#0
  [113] (byte*) print_char_cursor#160 ← (byte*) print_line_cursor#0
  [114] call print_sint 
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@2
  [115] phi()
  [116] call print_str 
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  [117] (signed word) print_sint::w#2 ← (signed word) test_16s::divisor#0
  [118] call print_sint 
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  [119] phi()
  [120] call print_str 
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  [121] (signed word) print_sint::w#3 ← (signed word) test_16s::res#0
  [122] call print_sint 
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  [123] phi()
  [124] call print_str 
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  [125] (signed word) print_sint::w#4 ← (signed word) rem16s#12
  [126] call print_sint 
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  [127] phi()
  [128] call print_ln 
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  [129] (byte) test_16s::i#1 ← ++ (byte) test_16s::i#10
  [130] if((byte) test_16s::i#1!=(byte) 6) goto test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@10
  [131] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [132] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [133] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [134] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [135] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [136] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [137] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  [138] (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 )
  [138] (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 )
  [139] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2
  [140] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2
  [141] call divr8u 
  [142] (byte) divr8u::return#0 ← (byte) divr8u::return#1
  to:div8u::@1
div8u::@1: scope:[div8u]  from div8u
  [143] (byte) div8u::return#0 ← (byte) divr8u::return#0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@1
  [144] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_schar::@2 print_uint print_uint::@1 test_8u::@2 test_8u::@4 test_8u::@6 test_8u::@8
  [145] (byte*) print_char_cursor#142 ← phi( print_schar::@2/(byte*) print_char_cursor#18 print_uint/(byte*) print_char_cursor#141 print_uint::@1/(byte*) print_char_cursor#18 test_8u::@2/(byte*) print_char_cursor#144 test_8u::@4/(byte*) print_char_cursor#18 test_8u::@6/(byte*) print_char_cursor#18 test_8u::@8/(byte*) print_char_cursor#18 )
  [145] (byte) print_uchar::b#7 ← phi( print_schar::@2/(byte) print_uchar::b#0 print_uint/(byte) print_uchar::b#1 print_uint::@1/(byte) print_uchar::b#2 test_8u::@2/(byte) print_uchar::b#3 test_8u::@4/(byte) print_uchar::b#4 test_8u::@6/(byte) print_uchar::b#5 test_8u::@8/(byte) print_uchar::b#6 )
  [146] (byte~) print_uchar::$0 ← (byte) print_uchar::b#7 >> (byte) 4
  [147] (byte) print_char::ch#5 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [148] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [149] (byte~) print_uchar::$2 ← (byte) print_uchar::b#7 & (byte) $f
  [150] (byte) print_char::ch#6 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [151] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [152] return 
  to:@return

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16u::@3 test_16u::@5 test_16u::@7 test_8s::@3 test_8s::@5 test_8s::@7 test_8u::@3 test_8u::@5 test_8u::@7
  [153] (byte*) print_str::str#16 ← phi( test_16s::@3/(const byte*) str test_16s::@5/(const byte*) str1 test_16s::@7/(const byte*) str2 test_16u::@3/(const byte*) str test_16u::@5/(const byte*) str1 test_16u::@7/(const byte*) str2 test_8s::@3/(const byte*) str test_8s::@5/(const byte*) str1 test_8s::@7/(const byte*) str2 test_8u::@3/(const byte*) str test_8u::@5/(const byte*) str1 test_8u::@7/(const byte*) str2 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [154] (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#16 print_str::@3/(byte*) print_str::str#0 )
  [155] if((byte) 0!=*((byte*) print_str::str#13)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [156] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [157] (byte) print_char::ch#0 ← *((byte*) print_str::str#13)
  [158] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [159] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13
  to:print_str::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from test_16s::@9 test_16u::@9 test_8s::@9 test_8u::@9
  [160] (byte*) print_line_cursor#41 ← phi( test_16s::@9/(byte*) print_line_cursor#0 test_16u::@9/(byte*) print_line_cursor#0 test_8s::@9/(byte*) print_line_cursor#0 test_8u::@9/(byte*) print_line_cursor#43 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [161] (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#41 print_ln::@1/(byte*) print_line_cursor#0 )
  [162] (byte*) print_line_cursor#0 ← (byte*) print_line_cursor#21 + (byte) $28
  [163] if((byte*) print_line_cursor#0<(byte*) print_char_cursor#18) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [164] return 
  to:@return

(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
div16u: scope:[div16u]  from test_16u::@1
  [165] (word) divr16u::dividend#1 ← (word) div16u::dividend#0
  [166] (word) divr16u::divisor#0 ← (word) div16u::divisor#0
  [167] call divr16u 
  [168] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div16u::@1
div16u::@1: scope:[div16u]  from div16u
  [169] (word) div16u::return#0 ← (word) divr16u::return#2
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@1
  [170] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_sint::@2 test_16u::@2 test_16u::@4 test_16u::@6 test_16u::@8
  [171] (byte*) print_char_cursor#141 ← phi( print_sint::@2/(byte*) print_char_cursor#18 test_16u::@2/(byte*) print_char_cursor#169 test_16u::@4/(byte*) print_char_cursor#18 test_16u::@6/(byte*) print_char_cursor#18 test_16u::@8/(byte*) print_char_cursor#18 )
  [171] (word) print_uint::w#5 ← phi( print_sint::@2/(word) print_uint::w#0 test_16u::@2/(word) print_uint::w#1 test_16u::@4/(word) print_uint::w#2 test_16u::@6/(word) print_uint::w#3 test_16u::@8/(word) print_uint::w#4 )
  [172] (byte) print_uchar::b#1 ← > (word) print_uint::w#5
  [173] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [174] (byte) print_uchar::b#2 ← < (word) print_uint::w#5
  [175] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [176] return 
  to:@return

(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
div8s: scope:[div8s]  from test_8s::@1
  [177] if((signed byte) div8s::dividend#0<(signed byte) 0) goto div8s::@1
  to:div8s::@6
div8s::@6: scope:[div8s]  from div8s
  [178] (byte) div8s::dividendu#8 ← (byte)(signed byte) div8s::dividend#0
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@6
  [179] (byte) div8s::dividendu#3 ← phi( div8s::@1/(byte) div8s::dividendu#7 div8s::@6/(byte) div8s::dividendu#8 )
  [179] (byte) div8s::neg#3 ← phi( div8s::@1/(byte) 1 div8s::@6/(byte) 0 )
  [180] if((signed byte) div8s::divisor#0<(signed byte) 0) goto div8s::@3
  to:div8s::@7
div8s::@7: scope:[div8s]  from div8s::@2
  [181] (byte) div8s::divisoru#5 ← (byte)(signed byte) div8s::divisor#0
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@7
  [182] (byte) div8s::neg#4 ← phi( div8s::@3/(byte) div8s::neg#2 div8s::@7/(byte) div8s::neg#3 )
  [182] (byte) div8s::divisoru#3 ← phi( div8s::@3/(byte) div8s::divisoru#4 div8s::@7/(byte) div8s::divisoru#5 )
  [183] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
  [184] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  [185] call div8u 
  [186] (byte) div8u::return#2 ← (byte) div8u::return#0
  to:div8s::@9
div8s::@9: scope:[div8s]  from div8s::@4
  [187] (byte) div8s::resultu#0 ← (byte) div8u::return#2
  [188] if((byte) div8s::neg#4==(byte) 0) goto div8s::@5
  to:div8s::@8
div8s::@8: scope:[div8s]  from div8s::@9
  [189] (signed byte) rem8s#1 ← - (signed byte)(byte) rem8u#18
  [190] (signed byte) div8s::return#1 ← - (signed byte)(byte) div8s::resultu#0
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@5 div8s::@8
  [191] (signed byte) rem8s#10 ← phi( div8s::@5/(signed byte) rem8s#33 div8s::@8/(signed byte) rem8s#1 )
  [191] (signed byte) div8s::return#2 ← phi( div8s::@5/(signed byte) div8s::return#6 div8s::@8/(signed byte) div8s::return#1 )
  [192] return 
  to:@return
div8s::@5: scope:[div8s]  from div8s::@9
  [193] (signed byte) div8s::return#6 ← (signed byte)(byte) div8s::resultu#0
  [194] (signed byte) rem8s#33 ← (signed byte)(byte) rem8u#18
  to:div8s::@return
div8s::@3: scope:[div8s]  from div8s::@2
  [195] (signed byte) div8s::divisoru#1 ← - (signed byte) div8s::divisor#0
  [196] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte) 1
  [197] (byte) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisoru#1
  to:div8s::@4
div8s::@1: scope:[div8s]  from div8s
  [198] (signed byte) div8s::dividendu#1 ← - (signed byte) div8s::dividend#0
  [199] (byte) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividendu#1
  to:div8s::@2

(void()) print_schar((signed byte) print_schar::b)
print_schar: scope:[print_schar]  from test_8s::@2 test_8s::@4 test_8s::@6 test_8s::@8
  [200] (byte*) print_char_cursor#138 ← phi( test_8s::@2/(byte*) print_char_cursor#164 test_8s::@4/(byte*) print_char_cursor#18 test_8s::@6/(byte*) print_char_cursor#18 test_8s::@8/(byte*) print_char_cursor#18 )
  [200] (signed byte) print_schar::b#10 ← phi( test_8s::@2/(signed byte) print_schar::b#1 test_8s::@4/(signed byte) print_schar::b#2 test_8s::@6/(signed byte) print_schar::b#3 test_8s::@8/(signed byte) print_schar::b#4 )
  [201] if((signed byte) print_schar::b#10<(signed byte) 0) goto print_schar::@1
  to:print_schar::@3
print_schar::@3: scope:[print_schar]  from print_schar
  [202] phi()
  [203] call print_char 
  to:print_schar::@2
print_schar::@2: scope:[print_schar]  from print_schar::@3 print_schar::@4
  [204] (signed byte) print_schar::b#7 ← phi( print_schar::@4/(signed byte) print_schar::b#0 print_schar::@3/(signed byte) print_schar::b#10 )
  [205] (byte) print_uchar::b#0 ← (byte)(signed byte) print_schar::b#7
  [206] call print_uchar 
  to:print_schar::@return
print_schar::@return: scope:[print_schar]  from print_schar::@2
  [207] return 
  to:@return
print_schar::@1: scope:[print_schar]  from print_schar
  [208] phi()
  [209] call print_char 
  to:print_schar::@4
print_schar::@4: scope:[print_schar]  from print_schar::@1
  [210] (signed byte) print_schar::b#0 ← - (signed byte) print_schar::b#10
  to:print_schar::@2

(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
div16s: scope:[div16s]  from test_16s::@1
  [211] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0
  [212] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0
  [213] call divr16s 
  [214] (signed word) divr16s::return#3 ← (signed word) divr16s::return#2
  to:div16s::@1
div16s::@1: scope:[div16s]  from div16s
  [215] (signed word) div16s::return#0 ← (signed word) divr16s::return#3
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@1
  [216] return 
  to:@return

(void()) print_sint((signed word) print_sint::w)
print_sint: scope:[print_sint]  from test_16s::@2 test_16s::@4 test_16s::@6 test_16s::@8
  [217] (byte*) print_char_cursor#135 ← phi( test_16s::@2/(byte*) print_char_cursor#160 test_16s::@4/(byte*) print_char_cursor#18 test_16s::@6/(byte*) print_char_cursor#18 test_16s::@8/(byte*) print_char_cursor#18 )
  [217] (signed word) print_sint::w#10 ← phi( test_16s::@2/(signed word) print_sint::w#1 test_16s::@4/(signed word) print_sint::w#2 test_16s::@6/(signed word) print_sint::w#3 test_16s::@8/(signed word) print_sint::w#4 )
  [218] if((signed word) print_sint::w#10<(signed byte) 0) goto print_sint::@1
  to:print_sint::@3
print_sint::@3: scope:[print_sint]  from print_sint
  [219] phi()
  [220] call print_char 
  to:print_sint::@2
print_sint::@2: scope:[print_sint]  from print_sint::@3 print_sint::@4
  [221] (signed word) print_sint::w#7 ← phi( print_sint::@4/(signed word) print_sint::w#0 print_sint::@3/(signed word) print_sint::w#10 )
  [222] (word) print_uint::w#0 ← (word)(signed word) print_sint::w#7
  [223] call print_uint 
  to:print_sint::@return
print_sint::@return: scope:[print_sint]  from print_sint::@2
  [224] return 
  to:@return
print_sint::@1: scope:[print_sint]  from print_sint
  [225] phi()
  [226] call print_char 
  to:print_sint::@4
print_sint::@4: scope:[print_sint]  from print_sint::@1
  [227] (signed word) print_sint::w#0 ← - (signed word) print_sint::w#10
  to:print_sint::@2

(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
divr8u: scope:[divr8u]  from div8u
  [228] phi()
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  [229] (byte) divr8u::i#2 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::i#1 )
  [229] (byte) divr8u::quotient#3 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::return#1 )
  [229] (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#0 divr8u::@3/(byte) divr8u::dividend#1 )
  [229] (byte) divr8u::rem#4 ← phi( divr8u/(byte) 0 divr8u::@3/(byte) divr8u::rem#10 )
  [230] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte) 1
  [231] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte) $80
  [232] if((byte~) divr8u::$1==(byte) 0) goto divr8u::@2
  to:divr8u::@4
divr8u::@4: scope:[divr8u]  from divr8u::@1
  [233] (byte) divr8u::rem#2 ← (byte) divr8u::rem#1 | (byte) 1
  to:divr8u::@2
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  [234] (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 )
  [235] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte) 1
  [236] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte) 1
  [237] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3
  to:divr8u::@5
divr8u::@5: scope:[divr8u]  from divr8u::@2
  [238] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1
  [239] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0
  to:divr8u::@3
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  [240] (byte) divr8u::return#1 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  [240] (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 )
  [241] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2
  [242] if((byte) divr8u::i#1!=(byte) 8) goto divr8u::@1
  to:divr8u::@6
divr8u::@6: scope:[divr8u]  from divr8u::@3
  [243] (byte) rem8u#18 ← (byte) divr8u::rem#10
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  [244] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_schar::@1 print_schar::@3 print_sint::@1 print_sint::@3 print_str::@2 print_uchar print_uchar::@1
  [245] (byte*) print_char_cursor#85 ← phi( print_schar::@1/(byte*) print_char_cursor#138 print_schar::@3/(byte*) print_char_cursor#138 print_sint::@1/(byte*) print_char_cursor#135 print_sint::@3/(byte*) print_char_cursor#135 print_str::@2/(byte*) print_char_cursor#18 print_uchar/(byte*) print_char_cursor#142 print_uchar::@1/(byte*) print_char_cursor#18 )
  [245] (byte) print_char::ch#7 ← phi( print_schar::@1/(byte) '-' print_schar::@3/(byte) ' ' print_sint::@1/(byte) '-' print_sint::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 print_uchar/(byte) print_char::ch#5 print_uchar::@1/(byte) print_char::ch#6 )
  [246] *((byte*) print_char_cursor#85) ← (byte) print_char::ch#7
  [247] (byte*) print_char_cursor#18 ← ++ (byte*) print_char_cursor#85
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [248] return 
  to:@return

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from div16u divr16s::@4
  [249] (word) divr16u::divisor#6 ← phi( div16u/(word) divr16u::divisor#0 divr16s::@4/(word) divr16u::divisor#1 )
  [249] (word) divr16u::dividend#5 ← phi( div16u/(word) divr16u::dividend#1 divr16s::@4/(word) divr16u::dividend#2 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [250] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [250] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [250] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [250] (word) divr16u::rem#5 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::rem#11 )
  [251] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [252] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [253] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [254] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [255] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [256] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [257] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [258] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [259] if((word) divr16u::rem#6<(word) divr16u::divisor#6) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [260] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [261] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (word) divr16u::divisor#6
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [262] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [262] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [263] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [264] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [265] (word) rem16u#0 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [266] return 
  to:@return

(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
divr16s: scope:[divr16s]  from div16s
  [267] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1
  to:divr16s::@6
divr16s::@6: scope:[divr16s]  from divr16s
  [268] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  [269] (word) divr16s::dividendu#3 ← phi( divr16s::@1/(word) divr16s::dividendu#7 divr16s::@6/(word) divr16s::dividendu#8 )
  [269] (byte) divr16s::neg#3 ← phi( divr16s::@1/(byte) 1 divr16s::@6/(byte) 0 )
  [270] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
  to:divr16s::@7
divr16s::@7: scope:[divr16s]  from divr16s::@2
  [271] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  [272] (byte) divr16s::neg#4 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@7/(byte) divr16s::neg#3 )
  [272] (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word) divr16s::divisoru#4 divr16s::@7/(word) divr16s::divisoru#5 )
  [273] (word) divr16u::dividend#2 ← (word) divr16s::dividendu#3
  [274] (word) divr16u::divisor#1 ← (word) divr16s::divisoru#3
  [275] call divr16u 
  [276] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  [277] (word) divr16s::resultu#0 ← (word) divr16u::return#3
  [278] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
  to:divr16s::@8
divr16s::@8: scope:[divr16s]  from divr16s::@9
  [279] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0
  [280] (signed word) divr16s::return#1 ← - (signed word)(word) divr16s::resultu#0
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  [281] (signed word) rem16s#12 ← phi( divr16s::@5/(signed word) rem16s#38 divr16s::@8/(signed word) rem16s#1 )
  [281] (signed word) divr16s::return#2 ← phi( divr16s::@5/(signed word) divr16s::return#6 divr16s::@8/(signed word) divr16s::return#1 )
  [282] return 
  to:@return
divr16s::@5: scope:[divr16s]  from divr16s::@9
  [283] (signed word) divr16s::return#6 ← (signed word)(word) divr16s::resultu#0
  [284] (signed word) rem16s#38 ← (signed word)(word) rem16u#0
  to:divr16s::@return
divr16s::@3: scope:[divr16s]  from divr16s::@2
  [285] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0
  [286] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1
  [287] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
  to:divr16s::@4
divr16s::@1: scope:[divr16s]  from divr16s
  [288] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0
  [289] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
  to:divr16s::@2
