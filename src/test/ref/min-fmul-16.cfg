
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call mulf_init 
  to:main::@4
main::@4: scope:[main]  from main
  asm { sei  }
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  [3] (byte*) print_char_cursor#15 ← phi( main::@4/(byte*) 1024 main::@5/(const byte*) SCREEN )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [4] if(*((const byte*) RASTER)!=(byte) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [5] *((const byte*) BORDER_COLOR) ← ++ *((const byte*) BORDER_COLOR)
  [6] call mulf16u 
  [7] (dword) mulf16u::return#0 ← (dword) mulf16u::return#1
  to:main::@5
main::@5: scope:[main]  from main::@3
  [8] (dword) main::r#0 ← (dword) mulf16u::return#0
  [9] *((const byte*) BORDER_COLOR) ← -- *((const byte*) BORDER_COLOR)
  [10] (dword) print_ulong::dw#0 ← (dword) main::r#0
  [11] call print_ulong 
  to:main::@1

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from main
  [12] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [13] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::x_2#2 )
  [13] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte*) mulf_sqr1_hi+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_hi#1 )
  [13] (word) mulf_init::sqr#4 ← phi( mulf_init/(word) 0 mulf_init::@3/(word) mulf_init::sqr#1 )
  [13] (byte) mulf_init::c#2 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::c#1 )
  [13] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte*) mulf_sqr1_lo+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_lo#1 )
  [14] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [15] (byte) mulf_init::dir#2 ← phi( mulf_init::@1/(byte) $ff mulf_init::@8/(byte) mulf_init::dir#4 )
  [15] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_hi mulf_init::@8/(byte*) mulf_init::sqr2_hi#1 )
  [15] (byte) mulf_init::x_255#2 ← phi( mulf_init::@1/(byte) -1 mulf_init::@8/(byte) mulf_init::x_255#1 )
  [15] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_lo mulf_init::@8/(byte*) mulf_init::sqr2_lo#1 )
  [16] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [17] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100)
  [18] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [19] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [20] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2)
  [21] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2)
  [22] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  [23] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  [24] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [25] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [26] (byte) mulf_init::dir#4 ← phi( mulf_init::@6/(byte) 1 mulf_init::@9/(byte) mulf_init::dir#2 )
  [27] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [28] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  [29] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1
  [30] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [31] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  [32] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [33] (byte) mulf_init::x_2#2 ← phi( mulf_init::@2/(byte) mulf_init::x_2#3 mulf_init::@4/(byte) mulf_init::x_2#1 )
  [33] (word) mulf_init::sqr#3 ← phi( mulf_init::@2/(word) mulf_init::sqr#4 mulf_init::@4/(word) mulf_init::sqr#2 )
  [34] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3
  [35] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4
  [36] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3
  [37] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5
  [38] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  [39] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  [40] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  to:mulf_init::@1

(dword()) mulf16u((word) mulf16u::a , (word) mulf16u::b)
mulf16u: scope:[mulf16u]  from main::@3
  [41] *((const nomodify word*) mulf16u::memA) ← (const word) main::a
  [42] *((const nomodify word*) mulf16u::memB) ← (const word) main::b
  asm { ldamemA stasm1a+1 stasm3a+1 stasm5a+1 stasm7a+1 eor#$ff stasm2a+1 stasm4a+1 stasm6a+1 stasm8a+1 ldamemA+1 stasm1b+1 stasm3b+1 stasm5b+1 stasm7b+1 eor#$ff stasm2b+1 stasm4b+1 stasm6b+1 stasm8b+1 ldxmemB sec sm1a: ldamulf_sqr1_lo,x sm2a: sbcmulf_sqr2_lo,x stamemR+0 sm3a: ldamulf_sqr1_hi,x sm4a: sbcmulf_sqr2_hi,x sta_AA+1 sec sm1b: ldamulf_sqr1_lo,x sm2b: sbcmulf_sqr2_lo,x sta_cc+1 sm3b: ldamulf_sqr1_hi,x sm4b: sbcmulf_sqr2_hi,x sta_CC+1 ldxmemB+1 sec sm5a: ldamulf_sqr1_lo,x sm6a: sbcmulf_sqr2_lo,x sta_bb+1 sm7a: ldamulf_sqr1_hi,x sm8a: sbcmulf_sqr2_hi,x sta_BB+1 sec sm5b: ldamulf_sqr1_lo,x sm6b: sbcmulf_sqr2_lo,x sta_dd+1 sm7b: ldamulf_sqr1_hi,x sm8b: sbcmulf_sqr2_hi,x stamemR+3 clc _AA: lda#0 _bb: adc#0 stamemR+1 _BB: lda#0 _CC: adc#0 stamemR+2 bcc!+ incmemR+3 clc !: _cc: lda#0 adcmemR+1 stamemR+1 _dd: lda#0 adcmemR+2 stamemR+2 bcc!+ incmemR+3 !:  }
  [44] (dword) mulf16u::return#1 ← *((const nomodify dword*) mulf16u::memR)
  to:mulf16u::@return
mulf16u::@return: scope:[mulf16u]  from mulf16u
  [45] return 
  to:@return

(void()) print_ulong((dword) print_ulong::dw)
print_ulong: scope:[print_ulong]  from main::@5
  [46] (word) print_uint::w#0 ← > (dword) print_ulong::dw#0
  [47] call print_uint 
  to:print_ulong::@1
print_ulong::@1: scope:[print_ulong]  from print_ulong
  [48] (word) print_uint::w#1 ← < (dword) print_ulong::dw#0
  [49] call print_uint 
  to:print_ulong::@return
print_ulong::@return: scope:[print_ulong]  from print_ulong::@1
  [50] return 
  to:@return

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from print_ulong print_ulong::@1
  [51] (byte*) print_char_cursor#36 ← phi( print_ulong/(byte*) print_char_cursor#15 print_ulong::@1/(byte*) print_char_cursor#10 )
  [51] (word) print_uint::w#2 ← phi( print_ulong/(word) print_uint::w#0 print_ulong::@1/(word) print_uint::w#1 )
  [52] (byte) print_uchar::b#0 ← > (word) print_uint::w#2
  [53] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [54] (byte) print_uchar::b#1 ← < (word) print_uint::w#2
  [55] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [56] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [57] (byte*) print_char_cursor#38 ← phi( print_uint/(byte*) print_char_cursor#36 print_uint::@1/(byte*) print_char_cursor#10 )
  [57] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [58] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [59] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [60] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [61] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [62] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [63] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [64] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from print_uchar print_uchar::@1
  [65] (byte*) print_char_cursor#28 ← phi( print_uchar/(byte*) print_char_cursor#38 print_uchar::@1/(byte*) print_char_cursor#10 )
  [65] (byte) print_char::ch#2 ← phi( print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  [66] *((byte*) print_char_cursor#28) ← (byte) print_char::ch#2
  [67] (byte*) print_char_cursor#10 ← ++ (byte*) print_char_cursor#28
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [68] return 
  to:@return
