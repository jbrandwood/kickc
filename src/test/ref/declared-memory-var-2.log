Culled Empty Block (label) main::@2
Adding memory variable constant pointer (const byte**) cursor_ptr
Updating memory variable reference *((const byte**) cursor_ptr)
Updating memory variable reference *((const byte**) cursor_ptr)
Updating memory variable reference *((const byte**) cursor_ptr)
Updating memory variable reference *((const byte**) cursor_ptr)
Updating memory variable reference *((const byte**) cursor_ptr)
Updating memory variable reference *((const byte**) cursor_ptr)
Updating memory variable reference *((const byte**) cursor_ptr)
Updating memory variable reference *((const byte**) cursor_ptr)

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (number) $400
  *((const byte**) cursor_ptr) ← (byte*) SCREEN
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  *(*((const byte**) cursor_ptr)) ← (byte) '*'
  *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) + (number) $29
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$18)
  (bool~) main::$0 ← (byte) main::i#1 != rangelast(0,$18)
  if((bool~) main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr)
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr)
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) cursor memory
(const byte**) cursor_ptr = &(byte*) cursor
(void()) main()
(bool~) main::$0
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2

Adding number conversion cast (unumber) $29 in *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) + (number) $29
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) SCREEN ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $29
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $29
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simple Condition (bool~) main::$0 [8] if((byte) main::i#1!=rangelast(0,$18)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN = (byte*) 1024
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [6] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [8] if(main::i#1!=rangelast(0,$18)) goto main::@1 to (number) $19
Adding number conversion cast (unumber) $19 in if((byte) main::i#1!=(number) $19) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $19
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [13] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] *((const byte**) cursor_ptr) ← (const byte*) SCREEN
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@2
@2: scope:[]  from @1
  [3] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr)
  to:@end
@end: scope:[]  from @2
  [4] phi()

(void()) main()
main: scope:[main]  from @1
  [5] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [7] *(*((const byte**) cursor_ptr)) ← (byte) '*'
  [8] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) + (byte) $29
  [9] (byte) main::i#1 ← ++ (byte) main::i#2
  [10] if((byte) main::i#1!=(byte) $19) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [11] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr)
  [12] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) cursor memory
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 7.333333333333333

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable containing a pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label cursor_ptr = cursor
  .label SCREEN = $400
  // @begin
bbegin:
  // [0] *((const byte**) cursor_ptr) ← (const byte*) SCREEN -- _deref_pptc1=pbuc2 
  lda #<SCREEN
  sta cursor_ptr
  lda #>SCREEN
  sta cursor_ptr+1
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [5] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  jmp b2
  // @2
b2:
  // [3] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) -- _deref_pptc1=_deref_pptc1 
  // [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
  // @end
bend:
  // main
main: {
    .label i = 2
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [7] *(*((const byte**) cursor_ptr)) ← (byte) '*' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'*'
    ldy cursor_ptr
    sty.z $fe
    ldy cursor_ptr+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [8] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) + (byte) $29 -- _deref_pptc1=_deref_pptc1_plus_vbuc2 
    lda cursor_ptr
    clc
    adc #$29
    sta cursor_ptr
    lda cursor_ptr+1
    adc #0
    sta cursor_ptr+1
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [10] if((byte) main::i#1!=(byte) $19) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z i
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [11] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) -- _deref_pptc1=_deref_pptc1 
    // [12] return 
    rts
}
  // File Data
  cursor: .word 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte**) cursor_ptr) ← (const byte*) SCREEN [ ] (  [ ] ) always clobbers reg byte a 
Statement [7] *(*((const byte**) cursor_ptr)) ← (byte) '*' [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [8] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) + (byte) $29 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [0] *((const byte**) cursor_ptr) ← (const byte*) SCREEN [ ] (  [ ] ) always clobbers reg byte a 
Statement [7] *(*((const byte**) cursor_ptr)) ← (byte) '*' [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a reg byte y 
Statement [8] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) + (byte) $29 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 23.83: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 668 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 668 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable containing a pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label cursor_ptr = cursor
  .label SCREEN = $400
  // @begin
bbegin:
  // [0] *((const byte**) cursor_ptr) ← (const byte*) SCREEN -- _deref_pptc1=pbuc2 
  lda #<SCREEN
  sta cursor_ptr
  lda #>SCREEN
  sta cursor_ptr+1
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [5] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  jmp b2
  // @2
b2:
  // [3] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) -- _deref_pptc1=_deref_pptc1 
  // [4] phi from @2 to @end [phi:@2->@end]
bend_from_b2:
  jmp bend
  // @end
bend:
  // main
main: {
    // [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [7] *(*((const byte**) cursor_ptr)) ← (byte) '*' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'*'
    ldy cursor_ptr
    sty.z $fe
    ldy cursor_ptr+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // [8] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) + (byte) $29 -- _deref_pptc1=_deref_pptc1_plus_vbuc2 
    lda cursor_ptr
    clc
    adc #$29
    sta cursor_ptr
    lda cursor_ptr+1
    adc #0
    sta cursor_ptr+1
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::i#1!=(byte) $19) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [11] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) -- _deref_pptc1=_deref_pptc1 
    // [12] return 
    rts
}
  // File Data
  cursor: .word 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b2:
Removing instruction bend:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction b2:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) SCREEN SCREEN = (byte*) 1024
(byte*) cursor memory
(const byte**) cursor_ptr cursor_ptr = &(byte*) cursor
(void()) main()
(label) main::@1
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 7.333333333333333

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 575

  // File Comments
// Test declaring a variable as "memory", meaning it will be stored in memory and accessed through an implicit pointer (using load/store)
// Test a memory variable containing a pointer
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label cursor_ptr = cursor
  .label SCREEN = $400
  // @begin
bbegin:
  // cursor = SCREEN
  // [0] *((const byte**) cursor_ptr) ← (const byte*) SCREEN -- _deref_pptc1=pbuc2 
  lda #<SCREEN
  sta cursor_ptr
  lda #>SCREEN
  sta cursor_ptr+1
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [5] phi from @1 to main [phi:@1->main]
  jsr main
  rts
  // @2
  // [3] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) -- _deref_pptc1=_deref_pptc1 
  // [4] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // [6] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [6] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // *cursor = '*'
    // [7] *(*((const byte**) cursor_ptr)) ← (byte) '*' -- _deref_(_deref_pptc1)=vbuc2 
    lda #'*'
    ldy cursor_ptr
    sty.z $fe
    ldy cursor_ptr+1
    sty.z $ff
    ldy #0
    sta ($fe),y
    // cursor += 41
    // [8] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) + (byte) $29 -- _deref_pptc1=_deref_pptc1_plus_vbuc2 
    lda cursor_ptr
    clc
    adc #$29
    sta cursor_ptr
    lda cursor_ptr+1
    adc #0
    sta cursor_ptr+1
    // for( char i: 0..24 )
    // [9] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [10] if((byte) main::i#1!=(byte) $19) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne b1
    // main::@return
    // }
    // [11] *((const byte**) cursor_ptr) ← *((const byte**) cursor_ptr) -- _deref_pptc1=_deref_pptc1 
    // [12] return 
    rts
}
  // File Data
  cursor: .word 0

