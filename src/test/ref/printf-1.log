Fixing struct type size struct printf_buffer_number to 12
Fixing struct type size struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing struct type SIZE_OF struct printf_buffer_number to 12
Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Created struct value member variable (byte) printf_slong::format_min_length
Created struct value member variable (byte) printf_slong::format_justify_left
Created struct value member variable (byte) printf_slong::format_sign_always
Created struct value member variable (byte) printf_slong::format_zero_padding
Created struct value member variable (byte) printf_slong::format_radix
Converted struct value to member variables (struct printf_format_number) printf_slong::format
Created struct value member variable (byte) printf_ulong::format_min_length
Created struct value member variable (byte) printf_ulong::format_justify_left
Created struct value member variable (byte) printf_ulong::format_sign_always
Created struct value member variable (byte) printf_ulong::format_zero_padding
Created struct value member variable (byte) printf_ulong::format_radix
Converted struct value to member variables (struct printf_format_number) printf_ulong::format
Created struct value member variable (byte) printf_sint::format_min_length
Created struct value member variable (byte) printf_sint::format_justify_left
Created struct value member variable (byte) printf_sint::format_sign_always
Created struct value member variable (byte) printf_sint::format_zero_padding
Created struct value member variable (byte) printf_sint::format_radix
Converted struct value to member variables (struct printf_format_number) printf_sint::format
Created struct value member variable (byte) printf_uint::format_min_length
Created struct value member variable (byte) printf_uint::format_justify_left
Created struct value member variable (byte) printf_uint::format_sign_always
Created struct value member variable (byte) printf_uint::format_zero_padding
Created struct value member variable (byte) printf_uint::format_radix
Converted struct value to member variables (struct printf_format_number) printf_uint::format
Created struct value member variable (byte) printf_schar::format_min_length
Created struct value member variable (byte) printf_schar::format_justify_left
Created struct value member variable (byte) printf_schar::format_sign_always
Created struct value member variable (byte) printf_schar::format_zero_padding
Created struct value member variable (byte) printf_schar::format_radix
Converted struct value to member variables (struct printf_format_number) printf_schar::format
Created struct value member variable (byte) printf_uchar::format_min_length
Created struct value member variable (byte) printf_uchar::format_justify_left
Created struct value member variable (byte) printf_uchar::format_sign_always
Created struct value member variable (byte) printf_uchar::format_zero_padding
Created struct value member variable (byte) printf_uchar::format_radix
Converted struct value to member variables (struct printf_format_number) printf_uchar::format
Created struct value member variable (byte) printf_number_buffer::buffer_sign
Created struct value member variable (byte*) printf_number_buffer::buffer_digits
Converted struct value to member variables (struct printf_buffer_number) printf_number_buffer::buffer
Created struct value member variable (byte) printf_number_buffer::format_min_length
Created struct value member variable (byte) printf_number_buffer::format_justify_left
Created struct value member variable (byte) printf_number_buffer::format_sign_always
Created struct value member variable (byte) printf_number_buffer::format_zero_padding
Created struct value member variable (byte) printf_number_buffer::format_radix
Converted struct value to member variables (struct printf_format_number) printf_number_buffer::format
Created struct value member variable (byte) printf_string::format_min_length
Created struct value member variable (byte) printf_string::format_justify_left
Converted struct value to member variables (struct printf_format_string) printf_string::format
Created struct value member variable (byte) main::format_min_length
Created struct value member variable (byte) main::format_justify_left
Converted struct value to member variables (struct printf_format_string) main::format
Converted procedure struct value parameter to member unwinding (void()) printf_slong((signed dword) printf_slong::value , (byte) printf_slong::format_min_length , (byte) printf_slong::format_justify_left , (byte) printf_slong::format_sign_always , (byte) printf_slong::format_zero_padding , (byte) printf_slong::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_ulong((dword) printf_ulong::uvalue , (byte) printf_ulong::format_min_length , (byte) printf_ulong::format_justify_left , (byte) printf_ulong::format_sign_always , (byte) printf_ulong::format_zero_padding , (byte) printf_ulong::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_sint((signed word) printf_sint::value , (byte) printf_sint::format_min_length , (byte) printf_sint::format_justify_left , (byte) printf_sint::format_sign_always , (byte) printf_sint::format_zero_padding , (byte) printf_sint::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_uint((word) printf_uint::uvalue , (byte) printf_uint::format_min_length , (byte) printf_uint::format_justify_left , (byte) printf_uint::format_sign_always , (byte) printf_uint::format_zero_padding , (byte) printf_uint::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_schar((signed byte) printf_schar::value , (byte) printf_schar::format_min_length , (byte) printf_schar::format_justify_left , (byte) printf_schar::format_sign_always , (byte) printf_schar::format_zero_padding , (byte) printf_schar::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_uchar((byte) printf_uchar::uvalue , (byte) printf_uchar::format_min_length , (byte) printf_uchar::format_justify_left , (byte) printf_uchar::format_sign_always , (byte) printf_uchar::format_zero_padding , (byte) printf_uchar::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_number_buffer((byte) printf_number_buffer::buffer_sign , (byte*) printf_number_buffer::buffer_digits , (byte) printf_number_buffer::format_min_length , (byte) printf_number_buffer::format_justify_left , (byte) printf_number_buffer::format_sign_always , (byte) printf_number_buffer::format_zero_padding , (byte) printf_number_buffer::format_radix)
Converted procedure struct value parameter to member unwinding (void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
Converted procedure struct value parameter to member unwinding in call (void~) printf_slong::$3 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_slong::format_min_length (byte) printf_slong::format_justify_left (byte) printf_slong::format_sign_always (byte) printf_slong::format_zero_padding (byte) printf_slong::format_radix 
Converted procedure struct value parameter to member unwinding in call (void~) printf_ulong::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_ulong::format_min_length (byte) printf_ulong::format_justify_left (byte) printf_ulong::format_sign_always (byte) printf_ulong::format_zero_padding (byte) printf_ulong::format_radix 
Converted procedure struct value parameter to member unwinding in call (void~) printf_sint::$3 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_sint::format_min_length (byte) printf_sint::format_justify_left (byte) printf_sint::format_sign_always (byte) printf_sint::format_zero_padding (byte) printf_sint::format_radix 
Converted procedure struct value parameter to member unwinding in call (void~) printf_uint::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_uint::format_min_length (byte) printf_uint::format_justify_left (byte) printf_uint::format_sign_always (byte) printf_uint::format_zero_padding (byte) printf_uint::format_radix 
Converted procedure struct value parameter to member unwinding in call (void~) printf_schar::$3 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_schar::format_min_length (byte) printf_schar::format_justify_left (byte) printf_schar::format_sign_always (byte) printf_schar::format_zero_padding (byte) printf_schar::format_radix 
Converted procedure struct value parameter to member unwinding in call (void~) printf_uchar::$4 ← call printf_number_buffer *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN) (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS (byte) printf_uchar::format_min_length (byte) printf_uchar::format_justify_left (byte) printf_uchar::format_sign_always (byte) printf_uchar::format_zero_padding (byte) printf_uchar::format_radix 
Unwinding value copy (struct printf_format_string) main::format ← {}
Adding value simple copy (byte) main::format_min_length ← (byte) 0
Adding value simple copy (byte) main::format_justify_left ← (byte) 0
Converted procedure struct value parameter to member unwinding in call (void~) main::$1 ← call printf_string (byte*) "cml" (byte) main::format_min_length (byte) main::format_justify_left 
Converted procedure struct value parameter to member unwinding in call (void~) main::$3 ← call printf_string (byte*) "rules" (byte) main::format_min_length (byte) main::format_justify_left 
Converted procedure struct value parameter to member unwinding in call (void~) main::$5 ← call printf_string (byte*) "cml" (byte) main::format_min_length (byte) main::format_justify_left 
Converted procedure struct value parameter to member unwinding in call (void~) main::$7 ← call printf_string (byte*) "rules" (byte) main::format_min_length (byte) main::format_justify_left 
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_slong::format.sign_always with member unwinding reference (byte) printf_slong::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_slong::format.radix with member unwinding reference (byte) printf_slong::format_radix
Replacing struct member reference (struct printf_format_number) printf_ulong::format.sign_always with member unwinding reference (byte) printf_ulong::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_ulong::format.radix with member unwinding reference (byte) printf_ulong::format_radix
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_sint::format.sign_always with member unwinding reference (byte) printf_sint::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_sint::format.radix with member unwinding reference (byte) printf_sint::format_radix
Replacing struct member reference (struct printf_format_number) printf_uint::format.sign_always with member unwinding reference (byte) printf_uint::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_uint::format.radix with member unwinding reference (byte) printf_uint::format_radix
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_format_number) printf_schar::format.sign_always with member unwinding reference (byte) printf_schar::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_schar::format.radix with member unwinding reference (byte) printf_schar::format_radix
Replacing struct member reference (struct printf_format_number) printf_uchar::format.sign_always with member unwinding reference (byte) printf_uchar::format_sign_always
Replacing struct member reference (struct printf_buffer_number) printf_buffer.sign with member unwinding reference *((byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_SIGN)
Replacing struct member reference (struct printf_buffer_number) printf_buffer.digits with member unwinding reference (byte*)&(struct printf_buffer_number) printf_buffer+(const byte) OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS
Replacing struct member reference (struct printf_format_number) printf_uchar::format.radix with member unwinding reference (byte) printf_uchar::format_radix
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.min_length with member unwinding reference (byte) printf_number_buffer::format_min_length
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.justify_left with member unwinding reference (byte) printf_number_buffer::format_justify_left
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.min_length with member unwinding reference (byte) printf_number_buffer::format_min_length
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.sign with member unwinding reference (byte) printf_number_buffer::buffer_sign
Replacing struct member reference (struct printf_buffer_number) printf_number_buffer::buffer.digits with member unwinding reference (byte*) printf_number_buffer::buffer_digits
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.zero_padding with member unwinding reference (byte) printf_number_buffer::format_zero_padding
Replacing struct member reference (struct printf_format_number) printf_number_buffer::format.justify_left with member unwinding reference (byte) printf_number_buffer::format_justify_left
Replacing struct member reference (struct printf_format_string) printf_string::format.min_length with member unwinding reference (byte) printf_string::format_min_length
Replacing struct member reference (struct printf_format_string) printf_string::format.justify_left with member unwinding reference (byte) printf_string::format_justify_left
Replacing struct member reference (struct printf_format_string) printf_string::format.min_length with member unwinding reference (byte) printf_string::format_min_length
Replacing struct member reference (struct printf_format_string) printf_string::format.justify_left with member unwinding reference (byte) printf_string::format_justify_left
Replacing struct member reference (struct printf_format_string) main::format.min_length with member unwinding reference (byte) main::format_min_length
Replacing struct member reference (struct printf_format_string) main::format.justify_left with member unwinding reference (byte) main::format_justify_left
Replacing struct member reference (struct printf_format_string) main::format.justify_left with member unwinding reference (byte) main::format_justify_left
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) strlen::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) printf_str::str)
Warning! Adding boolean cast to non-boolean condition (byte) printf_ulong::format_sign_always
Warning! Adding boolean cast to non-boolean condition (byte) printf_uint::format_sign_always
Warning! Adding boolean cast to non-boolean condition (byte) printf_uchar::format_sign_always
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_slong::format_sign_always
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_sint::format_sign_always
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_schar::format_sign_always
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_number_buffer::format_min_length
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_number_buffer::format_justify_left
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_number_buffer::format_zero_padding
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_number_buffer::buffer_sign
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_number_buffer::buffer_sign
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_number_buffer::format_zero_padding
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_string::format_min_length
Warning! Adding boolean cast to non-boolean sub-expression (byte) printf_string::format_justify_left
Identified constant variable (byte*) HEAP_TOP
Identified constant variable (byte*) printf_screen
Eliminating unused variable with no statement (struct printf_buffer_number) printf_buffer
Culled Empty Block (label) memcpy::@4
Culled Empty Block (label) memcpy::@5
Culled Empty Block (label) memcpy::@6
Culled Empty Block (label) memcpy::@7
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) strlen::@4
Culled Empty Block (label) strlen::@5
Culled Empty Block (label) strlen::@6
Culled Empty Block (label) strlen::@7
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @16
Culled Empty Block (label) printf_char::@1
Culled Empty Block (label) @17
Culled Empty Block (label) @18
Culled Empty Block (label) printf_padding::@4
Culled Empty Block (label) printf_padding::@3
Culled Empty Block (label) printf_padding::@5
Culled Empty Block (label) printf_padding::@6
Culled Empty Block (label) @19
Culled Empty Block (label) printf_str::@4
Culled Empty Block (label) printf_str::@3
Culled Empty Block (label) printf_str::@5
Culled Empty Block (label) printf_str::@6
Culled Empty Block (label) @20
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) printf_string::@8
Culled Empty Block (label) printf_string::@3
Culled Empty Block (label) @28

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@15

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_char::@2
  (word) memcpy::num#1 ← phi( printf_char::@2/(word) memcpy::num#0 )
  (void*) memcpy::destination#1 ← phi( printf_char::@2/(void*) memcpy::destination#0 )
  (void*) memcpy::source#1 ← phi( printf_char::@2/(void*) memcpy::source#0 )
  (byte*) memcpy::src#0 ← ((byte*)) (void*) memcpy::source#1
  (byte*) memcpy::dst#0 ← ((byte*)) (void*) memcpy::destination#1
  (byte*~) memcpy::$0 ← ((byte*)) (void*) memcpy::source#1
  (byte*~) memcpy::$1 ← (byte*~) memcpy::$0 + (word) memcpy::num#1
  (byte*) memcpy::src_end#0 ← (byte*~) memcpy::$1
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  (void*) memcpy::destination#3 ← phi( memcpy/(void*) memcpy::destination#1 memcpy::@2/(void*) memcpy::destination#4 )
  (byte*) memcpy::dst#3 ← phi( memcpy/(byte*) memcpy::dst#0 memcpy::@2/(byte*) memcpy::dst#1 )
  (byte*) memcpy::src_end#1 ← phi( memcpy/(byte*) memcpy::src_end#0 memcpy::@2/(byte*) memcpy::src_end#2 )
  (byte*) memcpy::src#2 ← phi( memcpy/(byte*) memcpy::src#0 memcpy::@2/(byte*) memcpy::src#1 )
  (bool~) memcpy::$2 ← (byte*) memcpy::src#2 != (byte*) memcpy::src_end#1
  if((bool~) memcpy::$2) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#4 ← phi( memcpy::@1/(void*) memcpy::destination#3 )
  (byte*) memcpy::src_end#2 ← phi( memcpy::@1/(byte*) memcpy::src_end#1 )
  (byte*) memcpy::dst#2 ← phi( memcpy::@1/(byte*) memcpy::dst#3 )
  (byte*) memcpy::src#3 ← phi( memcpy::@1/(byte*) memcpy::src#2 )
  *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#3)
  (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  (void*) memcpy::destination#2 ← phi( memcpy::@1/(void*) memcpy::destination#3 )
  (void*) memcpy::return#0 ← (void*) memcpy::destination#2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  (void*) memcpy::return#3 ← phi( memcpy::@3/(void*) memcpy::return#0 )
  (void*) memcpy::return#1 ← (void*) memcpy::return#3
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_char::@3 printf_cls
  (byte) memset::c#5 ← phi( printf_char::@3/(byte) memset::c#1 printf_cls/(byte) memset::c#0 )
  (void*) memset::str#4 ← phi( printf_char::@3/(void*) memset::str#1 printf_cls/(void*) memset::str#0 )
  (word) memset::num#2 ← phi( printf_char::@3/(word) memset::num#1 printf_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#4 memset::@4/(void*) memset::str#5 )
  (void*) memset::return#0 ← (void*) memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#4 ← phi( memset/(byte) memset::c#5 )
  (word) memset::num#3 ← phi( memset/(word) memset::num#2 )
  (void*) memset::str#3 ← phi( memset/(void*) memset::str#4 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#3
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#3
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#3
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#3 ← phi( memset::@2/(byte) memset::c#4 memset::@5/(byte) memset::c#2 )
  (void*) memset::str#5 ← phi( memset::@2/(void*) memset::str#3 memset::@5/(void*) memset::str#6 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#6 ← phi( memset::@4/(void*) memset::str#5 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#2 ← phi( memset::@4/(byte) memset::c#3 )
  *((byte*) memset::dst#3) ← (byte) memset::c#2
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#4 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#4
  return 
  to:@return

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_string::@4
  (byte*) strlen::str#4 ← phi( printf_string::@4/(byte*) strlen::str#1 )
  (word) strlen::len#0 ← (word) 0
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  (word) strlen::len#4 ← phi( strlen/(word) strlen::len#0 strlen::@2/(word) strlen::len#1 )
  (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#4 strlen::@2/(byte*) strlen::str#0 )
  (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
  if((bool~) strlen::$0) goto strlen::@2
  to:strlen::@3
strlen::@2: scope:[strlen]  from strlen::@1
  (byte*) strlen::str#3 ← phi( strlen::@1/(byte*) strlen::str#2 )
  (word) strlen::len#2 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::len#1 ← ++ (word) strlen::len#2
  (byte*) strlen::str#0 ← ++ (byte*) strlen::str#3
  to:strlen::@1
strlen::@3: scope:[strlen]  from strlen::@1
  (word) strlen::len#3 ← phi( strlen::@1/(word) strlen::len#4 )
  (word) strlen::return#0 ← (word) strlen::len#3
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@3
  (word) strlen::return#3 ← phi( strlen::@3/(word) strlen::return#0 )
  (word) strlen::return#1 ← (word) strlen::return#3
  return 
  to:@return
@15: scope:[]  from @begin
  (byte*) printf_line_cursor ← (byte*)(number) $400
  (byte*) printf_char_cursor ← (byte*)(number) $400
  to:@29

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  (void*) memset::str#0 ← (void*)(const byte*) printf_screen
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $28*(number) $19
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  (byte*) printf_line_cursor ← (const byte*) printf_screen
  (byte*) printf_char_cursor ← (byte*) printf_line_cursor
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  return 
  to:@return

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_padding::@2 printf_str::@2
  (byte) printf_char::ch#2 ← phi( printf_padding::@2/(byte) printf_char::ch#0 printf_str::@2/(byte) printf_char::ch#1 )
  *((byte*) printf_char_cursor) ← (byte) printf_char::ch#2
  (byte*) printf_char_cursor ← ++ (byte*) printf_char_cursor
  (byte*~) printf_char::$0 ← (const byte*) printf_screen + (number) $28*(number) $19
  (bool~) printf_char::$1 ← (byte*) printf_char_cursor == (byte*~) printf_char::$0
  (bool~) printf_char::$2 ← ! (bool~) printf_char::$1
  if((bool~) printf_char::$2) goto printf_char::@return
  to:printf_char::@2
printf_char::@2: scope:[printf_char]  from printf_char
  (byte*~) printf_char::$3 ← (const byte*) printf_screen + (number) $28
  (void*) memcpy::destination#0 ← (void*)(const byte*) printf_screen
  (void*) memcpy::source#0 ← (void*)(byte*~) printf_char::$3
  (word) memcpy::num#0 ← (number) $28*(number) $19-(number) $28
  call memcpy 
  (void*) memcpy::return#2 ← (void*) memcpy::return#1
  to:printf_char::@3
printf_char::@3: scope:[printf_char]  from printf_char::@2
  (byte*~) printf_char::$5 ← (const byte*) printf_screen + (number) $28*(number) $19
  (byte*~) printf_char::$6 ← (byte*~) printf_char::$5 - (number) $28
  (void*) memset::str#1 ← (void*)(byte*~) printf_char::$6
  (byte) memset::c#1 ← (byte) ' '
  (word) memset::num#1 ← (number) $28
  call memset 
  (void*) memset::return#3 ← (void*) memset::return#1
  to:printf_char::@4
printf_char::@4: scope:[printf_char]  from printf_char::@3
  (byte*~) printf_char::$8 ← (byte*) printf_char_cursor - (number) $28
  (byte*) printf_char_cursor ← (byte*~) printf_char::$8
  (byte*) printf_line_cursor ← (byte*) printf_char_cursor
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@4
  return 
  to:@return

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from main::@2 main::@4 main::@6
  to:printf_ln::@1
printf_ln::@1: scope:[printf_ln]  from printf_ln printf_ln::@1
  (byte*) printf_line_cursor ← (byte*) printf_line_cursor + (number) $28
  (bool~) printf_ln::$0 ← (byte*) printf_line_cursor < (byte*) printf_char_cursor
  if((bool~) printf_ln::$0) goto printf_ln::@1
  to:printf_ln::@2
printf_ln::@2: scope:[printf_ln]  from printf_ln::@1
  (byte*) printf_char_cursor ← (byte*) printf_line_cursor
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln::@2
  return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_string::@6 printf_string::@7
  (byte) printf_padding::pad#4 ← phi( printf_string::@6/(byte) printf_padding::pad#0 printf_string::@7/(byte) printf_padding::pad#1 )
  (byte) printf_padding::length#3 ← phi( printf_string::@6/(byte) printf_padding::length#0 printf_string::@7/(byte) printf_padding::length#1 )
  (byte) printf_padding::i#0 ← (byte) 0
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@7
  (byte) printf_padding::pad#3 ← phi( printf_padding/(byte) printf_padding::pad#4 printf_padding::@7/(byte) printf_padding::pad#5 )
  (byte) printf_padding::length#2 ← phi( printf_padding/(byte) printf_padding::length#3 printf_padding::@7/(byte) printf_padding::length#4 )
  (byte) printf_padding::i#2 ← phi( printf_padding/(byte) printf_padding::i#0 printf_padding::@7/(byte) printf_padding::i#1 )
  (bool~) printf_padding::$0 ← (byte) printf_padding::i#2 < (byte) printf_padding::length#2
  if((bool~) printf_padding::$0) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  (byte) printf_padding::length#5 ← phi( printf_padding::@1/(byte) printf_padding::length#2 )
  (byte) printf_padding::i#4 ← phi( printf_padding::@1/(byte) printf_padding::i#2 )
  (byte) printf_padding::pad#2 ← phi( printf_padding::@1/(byte) printf_padding::pad#3 )
  (byte) printf_char::ch#0 ← (byte) printf_padding::pad#2
  call printf_char 
  to:printf_padding::@7
printf_padding::@7: scope:[printf_padding]  from printf_padding::@2
  (byte) printf_padding::pad#5 ← phi( printf_padding::@2/(byte) printf_padding::pad#2 )
  (byte) printf_padding::length#4 ← phi( printf_padding::@2/(byte) printf_padding::length#5 )
  (byte) printf_padding::i#3 ← phi( printf_padding::@2/(byte) printf_padding::i#4 )
  (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#3
  to:printf_padding::@1
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  return 
  to:@return

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from printf_string::@2
  (byte*) printf_str::str#5 ← phi( printf_string::@2/(byte*) printf_str::str#1 )
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@7
  (byte*) printf_str::str#2 ← phi( printf_str/(byte*) printf_str::str#5 printf_str::@7/(byte*) printf_str::str#0 )
  (bool~) printf_str::$1 ← (number) 0 != *((byte*) printf_str::str#2)
  if((bool~) printf_str::$1) goto printf_str::@2
  to:printf_str::@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  (byte*) printf_str::str#3 ← phi( printf_str::@1/(byte*) printf_str::str#2 )
  (byte) printf_char::ch#1 ← *((byte*) printf_str::str#3)
  call printf_char 
  to:printf_str::@7
printf_str::@7: scope:[printf_str]  from printf_str::@2
  (byte*) printf_str::str#4 ← phi( printf_str::@2/(byte*) printf_str::str#3 )
  (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#4
  to:printf_str::@1
printf_str::@return: scope:[printf_str]  from printf_str::@1
  return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@1 main::@3 main::@5 main::@7
  (byte*) printf_string::str#6 ← phi( main::@1/(byte*) printf_string::str#0 main::@3/(byte*) printf_string::str#1 main::@5/(byte*) printf_string::str#2 main::@7/(byte*) printf_string::str#3 )
  (byte) printf_string::format_justify_left#6 ← phi( main::@1/(byte) printf_string::format_justify_left#0 main::@3/(byte) printf_string::format_justify_left#1 main::@5/(byte) printf_string::format_justify_left#2 main::@7/(byte) printf_string::format_justify_left#3 )
  (byte) printf_string::format_min_length#4 ← phi( main::@1/(byte) printf_string::format_min_length#0 main::@3/(byte) printf_string::format_min_length#1 main::@5/(byte) printf_string::format_min_length#2 main::@7/(byte) printf_string::format_min_length#3 )
  (signed byte) printf_string::padding#0 ← (signed byte) 0
  (bool~) printf_string::$17 ← (number) 0 != (byte) printf_string::format_min_length#4
  (bool~) printf_string::$0 ← ! (bool~) printf_string::$17
  if((bool~) printf_string::$0) goto printf_string::@1
  to:printf_string::@4
printf_string::@1: scope:[printf_string]  from printf_string printf_string::@5 printf_string::@9
  (byte*) printf_string::str#7 ← phi( printf_string/(byte*) printf_string::str#6 printf_string::@5/(byte*) printf_string::str#9 printf_string::@9/(byte*) printf_string::str#10 )
  (signed byte) printf_string::padding#3 ← phi( printf_string/(signed byte) printf_string::padding#0 printf_string::@5/(signed byte) printf_string::padding#2 printf_string::@9/(signed byte) printf_string::padding#1 )
  (byte) printf_string::format_justify_left#4 ← phi( printf_string/(byte) printf_string::format_justify_left#6 printf_string::@5/(byte) printf_string::format_justify_left#7 printf_string::@9/(byte) printf_string::format_justify_left#8 )
  (bool~) printf_string::$18 ← (number) 0 != (byte) printf_string::format_justify_left#4
  (bool~) printf_string::$1 ← ! (bool~) printf_string::$18
  (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
  (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
  if((bool~) printf_string::$3) goto printf_string::@2
  to:printf_string::@6
printf_string::@4: scope:[printf_string]  from printf_string
  (byte) printf_string::format_justify_left#10 ← phi( printf_string/(byte) printf_string::format_justify_left#6 )
  (byte) printf_string::format_min_length#6 ← phi( printf_string/(byte) printf_string::format_min_length#4 )
  (byte*) printf_string::str#4 ← phi( printf_string/(byte*) printf_string::str#6 )
  (byte*) strlen::str#1 ← (byte*) printf_string::str#4
  call strlen 
  (word) strlen::return#2 ← (word) strlen::return#1
  to:printf_string::@9
printf_string::@9: scope:[printf_string]  from printf_string::@4
  (byte*) printf_string::str#10 ← phi( printf_string::@4/(byte*) printf_string::str#4 )
  (byte) printf_string::format_justify_left#8 ← phi( printf_string::@4/(byte) printf_string::format_justify_left#10 )
  (byte) printf_string::format_min_length#5 ← phi( printf_string::@4/(byte) printf_string::format_min_length#6 )
  (word) strlen::return#4 ← phi( printf_string::@4/(word) strlen::return#2 )
  (word~) printf_string::$11 ← (word) strlen::return#4
  (signed byte~) printf_string::$12 ← ((signed byte)) (word~) printf_string::$11
  (signed byte) printf_string::len#0 ← (signed byte~) printf_string::$12
  (signed byte~) printf_string::$13 ← ((signed byte)) (byte) printf_string::format_min_length#5
  (signed byte~) printf_string::$14 ← (signed byte~) printf_string::$13 - (signed byte) printf_string::len#0
  (signed byte) printf_string::padding#1 ← (signed byte~) printf_string::$14
  (bool~) printf_string::$15 ← (signed byte) printf_string::padding#1 < (number) 0
  (bool~) printf_string::$16 ← ! (bool~) printf_string::$15
  if((bool~) printf_string::$16) goto printf_string::@1
  to:printf_string::@5
printf_string::@5: scope:[printf_string]  from printf_string::@9
  (byte*) printf_string::str#9 ← phi( printf_string::@9/(byte*) printf_string::str#10 )
  (byte) printf_string::format_justify_left#7 ← phi( printf_string::@9/(byte) printf_string::format_justify_left#8 )
  (signed byte) printf_string::padding#2 ← (number) 0
  to:printf_string::@1
printf_string::@2: scope:[printf_string]  from printf_string::@1 printf_string::@11
  (signed byte) printf_string::padding#7 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 printf_string::@11/(signed byte) printf_string::padding#8 )
  (byte) printf_string::format_justify_left#9 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#4 printf_string::@11/(byte) printf_string::format_justify_left#11 )
  (byte*) printf_string::str#5 ← phi( printf_string::@1/(byte*) printf_string::str#7 printf_string::@11/(byte*) printf_string::str#8 )
  (byte*) printf_str::str#1 ← (byte*) printf_string::str#5
  call printf_str 
  to:printf_string::@10
printf_string::@10: scope:[printf_string]  from printf_string::@2
  (signed byte) printf_string::padding#4 ← phi( printf_string::@2/(signed byte) printf_string::padding#7 )
  (byte) printf_string::format_justify_left#5 ← phi( printf_string::@2/(byte) printf_string::format_justify_left#9 )
  (bool~) printf_string::$7 ← (byte) printf_string::format_justify_left#5 && (signed byte) printf_string::padding#4
  (bool~) printf_string::$8 ← ! (bool~) printf_string::$7
  if((bool~) printf_string::$8) goto printf_string::@return
  to:printf_string::@7
printf_string::@6: scope:[printf_string]  from printf_string::@1
  (byte) printf_string::format_justify_left#12 ← phi( printf_string::@1/(byte) printf_string::format_justify_left#4 )
  (byte*) printf_string::str#11 ← phi( printf_string::@1/(byte*) printf_string::str#7 )
  (signed byte) printf_string::padding#5 ← phi( printf_string::@1/(signed byte) printf_string::padding#3 )
  (byte~) printf_string::$4 ← ((byte)) (signed byte) printf_string::padding#5
  (byte) printf_padding::pad#0 ← (byte) ' '
  (byte) printf_padding::length#0 ← (byte~) printf_string::$4
  call printf_padding 
  to:printf_string::@11
printf_string::@11: scope:[printf_string]  from printf_string::@6
  (signed byte) printf_string::padding#8 ← phi( printf_string::@6/(signed byte) printf_string::padding#5 )
  (byte) printf_string::format_justify_left#11 ← phi( printf_string::@6/(byte) printf_string::format_justify_left#12 )
  (byte*) printf_string::str#8 ← phi( printf_string::@6/(byte*) printf_string::str#11 )
  to:printf_string::@2
printf_string::@7: scope:[printf_string]  from printf_string::@10
  (signed byte) printf_string::padding#6 ← phi( printf_string::@10/(signed byte) printf_string::padding#4 )
  (byte~) printf_string::$9 ← ((byte)) (signed byte) printf_string::padding#6
  (byte) printf_padding::pad#1 ← (byte) ' '
  (byte) printf_padding::length#1 ← (byte~) printf_string::$9
  call printf_padding 
  to:printf_string::@12
printf_string::@12: scope:[printf_string]  from printf_string::@7
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@10 printf_string::@12
  return 
  to:@return

(void()) main()
main: scope:[main]  from @29
  call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  (byte) main::format_min_length#0 ← (byte) 0
  (byte) main::format_justify_left#0 ← (byte) 0
  (byte) main::format_min_length#1 ← (number) $a
  (byte) main::format_justify_left#1 ← (number) 0
  (byte*) printf_string::str#0 ← (const byte*) main::str
  (byte) printf_string::format_min_length#0 ← (byte) main::format_min_length#1
  (byte) printf_string::format_justify_left#0 ← (byte) main::format_justify_left#1
  call printf_string 
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::format_justify_left#5 ← phi( main::@1/(byte) main::format_justify_left#1 )
  (byte) main::format_min_length#5 ← phi( main::@1/(byte) main::format_min_length#1 )
  call printf_ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  (byte) main::format_justify_left#3 ← phi( main::@2/(byte) main::format_justify_left#5 )
  (byte) main::format_min_length#2 ← phi( main::@2/(byte) main::format_min_length#5 )
  (byte*) printf_string::str#1 ← (const byte*) main::str1
  (byte) printf_string::format_min_length#1 ← (byte) main::format_min_length#2
  (byte) printf_string::format_justify_left#1 ← (byte) main::format_justify_left#3
  call printf_string 
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte) main::format_min_length#6 ← phi( main::@3/(byte) main::format_min_length#2 )
  call printf_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  (byte) main::format_min_length#3 ← phi( main::@4/(byte) main::format_min_length#6 )
  (byte) main::format_justify_left#2 ← (number) 1
  (byte*) printf_string::str#2 ← (const byte*) main::str2
  (byte) printf_string::format_min_length#2 ← (byte) main::format_min_length#3
  (byte) printf_string::format_justify_left#2 ← (byte) main::format_justify_left#2
  call printf_string 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte) main::format_justify_left#6 ← phi( main::@5/(byte) main::format_justify_left#2 )
  (byte) main::format_min_length#7 ← phi( main::@5/(byte) main::format_min_length#3 )
  call printf_ln 
  to:main::@7
main::@7: scope:[main]  from main::@6
  (byte) main::format_justify_left#4 ← phi( main::@6/(byte) main::format_justify_left#6 )
  (byte) main::format_min_length#4 ← phi( main::@6/(byte) main::format_min_length#7 )
  (byte*) printf_string::str#3 ← (const byte*) main::str3
  (byte) printf_string::format_min_length#3 ← (byte) main::format_min_length#4
  (byte) printf_string::format_justify_left#3 ← (byte) main::format_justify_left#4
  call printf_string 
  to:main::@8
main::@8: scope:[main]  from main::@7
  to:main::@return
main::@return: scope:[main]  from main::@8
  return 
  to:@return
@29: scope:[]  from @15
  call main 
  to:@30
@30: scope:[]  from @29
  to:@end
@end: scope:[]  from @30

SYMBOL TABLE SSA
(label) @15
(label) @29
(label) @30
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) main::format_justify_left
(byte) main::format_justify_left#0
(byte) main::format_justify_left#1
(byte) main::format_justify_left#2
(byte) main::format_justify_left#3
(byte) main::format_justify_left#4
(byte) main::format_justify_left#5
(byte) main::format_justify_left#6
(byte) main::format_min_length
(byte) main::format_min_length#0
(byte) main::format_min_length#1
(byte) main::format_min_length#2
(byte) main::format_min_length#3
(byte) main::format_min_length#4
(byte) main::format_min_length#5
(byte) main::format_min_length#6
(byte) main::format_min_length#7
(const byte*) main::str[(byte) 4]  = (byte*) "cml"
(const byte*) main::str1[(byte) 6]  = (byte*) "rules"
(const byte*) main::str2[(byte) 4]  = (byte*) "cml"
(const byte*) main::str3[(byte) 6]  = (byte*) "rules"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(byte*~) memcpy::$0
(byte*~) memcpy::$1
(bool~) memcpy::$2
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@3
(label) memcpy::@return
(void*) memcpy::destination
(void*) memcpy::destination#0
(void*) memcpy::destination#1
(void*) memcpy::destination#2
(void*) memcpy::destination#3
(void*) memcpy::destination#4
(byte*) memcpy::dst
(byte*) memcpy::dst#0
(byte*) memcpy::dst#1
(byte*) memcpy::dst#2
(byte*) memcpy::dst#3
(word) memcpy::num
(word) memcpy::num#0
(word) memcpy::num#1
(void*) memcpy::return
(void*) memcpy::return#0
(void*) memcpy::return#1
(void*) memcpy::return#2
(void*) memcpy::return#3
(void*) memcpy::source
(void*) memcpy::source#0
(void*) memcpy::source#1
(byte*) memcpy::src
(byte*) memcpy::src#0
(byte*) memcpy::src#1
(byte*) memcpy::src#2
(byte*) memcpy::src#3
(byte*) memcpy::src_end
(byte*) memcpy::src_end#0
(byte*) memcpy::src_end#1
(byte*) memcpy::src_end#2
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte) memset::c#5
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(word) memset::num#3
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::return#4
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(void*) memset::str#6
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(byte*~) printf_char::$0
(bool~) printf_char::$1
(bool~) printf_char::$2
(byte*~) printf_char::$3
(byte*~) printf_char::$5
(byte*~) printf_char::$6
(byte*~) printf_char::$8
(label) printf_char::@2
(label) printf_char::@3
(label) printf_char::@4
(label) printf_char::@return
(byte) printf_char::ch
(byte) printf_char::ch#0
(byte) printf_char::ch#1
(byte) printf_char::ch#2
(byte*) printf_char_cursor loadstore
(void()) printf_cls()
(label) printf_cls::@1
(label) printf_cls::@return
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(byte*) printf_line_cursor loadstore
(void()) printf_ln()
(bool~) printf_ln::$0
(label) printf_ln::@1
(label) printf_ln::@2
(label) printf_ln::@return
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(bool~) printf_padding::$0
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@7
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#0
(byte) printf_padding::i#1
(byte) printf_padding::i#2
(byte) printf_padding::i#3
(byte) printf_padding::i#4
(byte) printf_padding::length
(byte) printf_padding::length#0
(byte) printf_padding::length#1
(byte) printf_padding::length#2
(byte) printf_padding::length#3
(byte) printf_padding::length#4
(byte) printf_padding::length#5
(byte) printf_padding::pad
(byte) printf_padding::pad#0
(byte) printf_padding::pad#1
(byte) printf_padding::pad#2
(byte) printf_padding::pad#3
(byte) printf_padding::pad#4
(byte) printf_padding::pad#5
(const byte*) printf_screen = (byte*)(number) $400
(void()) printf_str((byte*) printf_str::str)
(bool~) printf_str::$1
(label) printf_str::@1
(label) printf_str::@2
(label) printf_str::@7
(label) printf_str::@return
(byte*) printf_str::str
(byte*) printf_str::str#0
(byte*) printf_str::str#1
(byte*) printf_str::str#2
(byte*) printf_str::str#3
(byte*) printf_str::str#4
(byte*) printf_str::str#5
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(bool~) printf_string::$0
(bool~) printf_string::$1
(word~) printf_string::$11
(signed byte~) printf_string::$12
(signed byte~) printf_string::$13
(signed byte~) printf_string::$14
(bool~) printf_string::$15
(bool~) printf_string::$16
(bool~) printf_string::$17
(bool~) printf_string::$18
(bool~) printf_string::$2
(bool~) printf_string::$3
(byte~) printf_string::$4
(bool~) printf_string::$7
(bool~) printf_string::$8
(byte~) printf_string::$9
(label) printf_string::@1
(label) printf_string::@10
(label) printf_string::@11
(label) printf_string::@12
(label) printf_string::@2
(label) printf_string::@4
(label) printf_string::@5
(label) printf_string::@6
(label) printf_string::@7
(label) printf_string::@9
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#0
(byte) printf_string::format_justify_left#1
(byte) printf_string::format_justify_left#10
(byte) printf_string::format_justify_left#11
(byte) printf_string::format_justify_left#12
(byte) printf_string::format_justify_left#2
(byte) printf_string::format_justify_left#3
(byte) printf_string::format_justify_left#4
(byte) printf_string::format_justify_left#5
(byte) printf_string::format_justify_left#6
(byte) printf_string::format_justify_left#7
(byte) printf_string::format_justify_left#8
(byte) printf_string::format_justify_left#9
(byte) printf_string::format_min_length
(byte) printf_string::format_min_length#0
(byte) printf_string::format_min_length#1
(byte) printf_string::format_min_length#2
(byte) printf_string::format_min_length#3
(byte) printf_string::format_min_length#4
(byte) printf_string::format_min_length#5
(byte) printf_string::format_min_length#6
(signed byte) printf_string::len
(signed byte) printf_string::len#0
(signed byte) printf_string::padding
(signed byte) printf_string::padding#0
(signed byte) printf_string::padding#1
(signed byte) printf_string::padding#2
(signed byte) printf_string::padding#3
(signed byte) printf_string::padding#4
(signed byte) printf_string::padding#5
(signed byte) printf_string::padding#6
(signed byte) printf_string::padding#7
(signed byte) printf_string::padding#8
(byte*) printf_string::str
(byte*) printf_string::str#0
(byte*) printf_string::str#1
(byte*) printf_string::str#10
(byte*) printf_string::str#11
(byte*) printf_string::str#2
(byte*) printf_string::str#3
(byte*) printf_string::str#4
(byte*) printf_string::str#5
(byte*) printf_string::str#6
(byte*) printf_string::str#7
(byte*) printf_string::str#8
(byte*) printf_string::str#9
(word()) strlen((byte*) strlen::str)
(bool~) strlen::$0
(label) strlen::@1
(label) strlen::@2
(label) strlen::@3
(label) strlen::@return
(word) strlen::len
(word) strlen::len#0
(word) strlen::len#1
(word) strlen::len#2
(word) strlen::len#3
(word) strlen::len#4
(word) strlen::return
(word) strlen::return#0
(word) strlen::return#1
(word) strlen::return#2
(word) strlen::return#3
(word) strlen::return#4
(byte*) strlen::str
(byte*) strlen::str#0
(byte*) strlen::str#1
(byte*) strlen::str#2
(byte*) strlen::str#3
(byte*) strlen::str#4

Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#2 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) strlen::$0 ← (number) 0 != *((byte*) strlen::str#2)
Adding number conversion cast (unumber) $28*$19 in (word) memset::num#0 ← (number) $28*(number) $19
Adding number conversion cast (unumber) $28*$19 in (byte*~) printf_char::$0 ← (const byte*) printf_screen + (number) $28*(number) $19
Adding number conversion cast (unumber) $28 in (byte*~) printf_char::$3 ← (const byte*) printf_screen + (number) $28
Adding number conversion cast (unumber) $28*$19-$28 in (word) memcpy::num#0 ← (number) $28*(number) $19-(number) $28
Adding number conversion cast (unumber) $28*$19 in (byte*~) printf_char::$5 ← (const byte*) printf_screen + (number) $28*(number) $19
Adding number conversion cast (unumber) $28 in (byte*~) printf_char::$6 ← (byte*~) printf_char::$5 - (number) $28
Adding number conversion cast (unumber) $28 in (word) memset::num#1 ← (number) $28
Adding number conversion cast (unumber) $28 in (byte*~) printf_char::$8 ← (byte*) printf_char_cursor - (number) $28
Adding number conversion cast (unumber) $28 in (byte*) printf_line_cursor ← (byte*) printf_line_cursor + (number) $28
Adding number conversion cast (unumber) 0 in (bool~) printf_str::$1 ← (number) 0 != *((byte*) printf_str::str#2)
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$17 ← (number) 0 != (byte) printf_string::format_min_length#4
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$18 ← (number) 0 != (byte) printf_string::format_justify_left#4
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$15 ← (signed byte) printf_string::padding#1 < (number) 0
Adding number conversion cast (snumber) 0 in (signed byte) printf_string::padding#2 ← (number) 0
Adding number conversion cast (unumber) $a in (byte) main::format_min_length#1 ← (number) $a
Adding number conversion cast (unumber) 0 in (byte) main::format_justify_left#1 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) main::format_justify_left#2 ← (number) 1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) memcpy::src#0 ← (byte*)(void*) memcpy::source#1
Inlining cast (byte*) memcpy::dst#0 ← (byte*)(void*) memcpy::destination#1
Inlining cast (byte*~) memcpy::$0 ← (byte*)(void*) memcpy::source#1
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#3
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3
Inlining cast (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Inlining cast (word) memcpy::num#0 ← (unumber)(number) $28*(number) $19-(number) $28
Inlining cast (word) memset::num#1 ← (unumber)(number) $28
Inlining cast (signed byte~) printf_string::$12 ← (signed byte)(word~) printf_string::$11
Inlining cast (signed byte~) printf_string::$13 ← (signed byte)(byte) printf_string::format_min_length#5
Inlining cast (signed byte) printf_string::padding#2 ← (snumber)(number) 0
Inlining cast (byte~) printf_string::$4 ← (byte)(signed byte) printf_string::padding#5
Inlining cast (byte~) printf_string::$9 ← (byte)(signed byte) printf_string::padding#6
Inlining cast (byte) main::format_min_length#1 ← (unumber)(number) $a
Inlining cast (byte) main::format_justify_left#1 ← (unumber)(number) 0
Inlining cast (byte) main::format_justify_left#2 ← (unumber)(number) 1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [20] (bool~) memset::$1 ← (word) memset::num#2 <= (byte) 0 from [19] (bool~) memset::$0 ← (word) memset::num#2 > (byte) 0
Inversing boolean not [66] (bool~) printf_char::$2 ← (byte*) printf_char_cursor != (byte*~) printf_char::$0 from [65] (bool~) printf_char::$1 ← (byte*) printf_char_cursor == (byte*~) printf_char::$0
Inversing boolean not [114] (bool~) printf_string::$0 ← (byte) 0 == (byte) printf_string::format_min_length#4 from [113] (bool~) printf_string::$17 ← (byte) 0 != (byte) printf_string::format_min_length#4
Inversing boolean not [118] (bool~) printf_string::$1 ← (byte) 0 == (byte) printf_string::format_justify_left#4 from [117] (bool~) printf_string::$18 ← (byte) 0 != (byte) printf_string::format_justify_left#4
Inversing boolean not [134] (bool~) printf_string::$16 ← (signed byte) printf_string::padding#1 >= (signed byte) 0 from [133] (bool~) printf_string::$15 ← (signed byte) printf_string::padding#1 < (signed byte) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)printf_char_cursor = printf_char::$8 
Alias memcpy::src_end#0 = memcpy::$1 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#2 = memcpy::destination#4 memcpy::destination#3 memcpy::return#0 memcpy::return#3 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$3 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias strlen::len#2 = strlen::len#4 strlen::len#3 strlen::return#0 strlen::return#3 strlen::return#1 
Alias strlen::str#2 = strlen::str#3 
Alias printf_padding::pad#2 = printf_padding::pad#3 printf_padding::pad#5 
Alias printf_padding::i#2 = printf_padding::i#4 printf_padding::i#3 
Alias printf_padding::length#2 = printf_padding::length#5 printf_padding::length#4 
Alias printf_str::str#2 = printf_str::str#3 printf_str::str#4 
Alias printf_string::str#10 = printf_string::str#4 printf_string::str#6 printf_string::str#9 
Alias printf_string::format_min_length#4 = printf_string::format_min_length#6 printf_string::format_min_length#5 
Alias printf_string::format_justify_left#10 = printf_string::format_justify_left#6 printf_string::format_justify_left#8 printf_string::format_justify_left#7 
Alias strlen::return#2 = strlen::return#4 
Alias printf_string::len#0 = printf_string::$12 
Alias printf_string::padding#1 = printf_string::$14 
Alias printf_string::format_justify_left#5 = printf_string::format_justify_left#9 
Alias printf_string::padding#4 = printf_string::padding#7 printf_string::padding#6 
Alias printf_string::padding#3 = printf_string::padding#5 printf_string::padding#8 
Alias printf_string::str#11 = printf_string::str#7 printf_string::str#8 
Alias printf_string::format_justify_left#11 = printf_string::format_justify_left#12 printf_string::format_justify_left#4 
Alias printf_padding::length#0 = printf_string::$4 
Alias printf_padding::length#1 = printf_string::$9 
Alias main::format_min_length#1 = main::format_min_length#5 main::format_min_length#2 main::format_min_length#6 main::format_min_length#3 main::format_min_length#7 main::format_min_length#4 
Alias main::format_justify_left#1 = main::format_justify_left#5 main::format_justify_left#3 
Alias main::format_justify_left#2 = main::format_justify_left#6 main::format_justify_left#4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_char_cursor = printf_char::$8 
Alias printf_string::format_justify_left#10 = printf_string::format_justify_left#11 printf_string::format_justify_left#5 
Alias printf_string::str#10 = printf_string::str#11 printf_string::str#5 
Alias printf_string::padding#3 = printf_string::padding#4 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)printf_char_cursor = printf_char::$8 
Identical Phi Values (void*) memcpy::source#1 (void*) memcpy::source#0
Identical Phi Values (void*) memcpy::destination#1 (void*) memcpy::destination#0
Identical Phi Values (word) memcpy::num#1 (word) memcpy::num#0
Identical Phi Values (byte*) memcpy::src_end#1 (byte*) memcpy::src_end#0
Identical Phi Values (void*) memcpy::destination#2 (void*) memcpy::destination#1
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#5 (void*) memset::str#3
Identical Phi Values (byte) memset::c#2 (byte) memset::c#4
Identical Phi Values (byte*) strlen::str#4 (byte*) strlen::str#1
Identical Phi Values (byte) printf_padding::length#2 (byte) printf_padding::length#3
Identical Phi Values (byte) printf_padding::pad#2 (byte) printf_padding::pad#4
Identical Phi Values (byte*) printf_str::str#5 (byte*) printf_str::str#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) memcpy::$2 [7] if((byte*) memcpy::src#2!=(byte*) memcpy::src_end#0) goto memcpy::@2
Simple Condition (bool~) memset::$1 [14] if((word) memset::num#2<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [21] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) strlen::$0 [29] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
Simple Condition (bool~) printf_char::$2 [48] if((byte*) printf_char_cursor!=(byte*~) printf_char::$0) goto printf_char::@return
Simple Condition (bool~) printf_ln::$0 [68] if((byte*) printf_line_cursor<(byte*) printf_char_cursor) goto printf_ln::@1
Simple Condition (bool~) printf_padding::$0 [75] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2
Simple Condition (bool~) printf_str::$1 [83] if((byte) 0!=*((byte*) printf_str::str#2)) goto printf_str::@2
Simple Condition (bool~) printf_string::$0 [91] if((byte) 0==(byte) printf_string::format_min_length#4) goto printf_string::@1
Simple Condition (bool~) printf_string::$16 [105] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting ! if()-condition to reversed if() [95] (bool~) printf_string::$3 ← ! (bool~) printf_string::$2
Rewriting && if()-condition to two if()s [94] (bool~) printf_string::$2 ← (bool~) printf_string::$1 && (signed byte) printf_string::padding#3
Rewriting ! if()-condition to reversed if() [110] (bool~) printf_string::$8 ← ! (bool~) printf_string::$7
Rewriting && if()-condition to two if()s [109] (bool~) printf_string::$7 ← (byte) printf_string::format_justify_left#10 && (signed byte) printf_string::padding#3
Successful SSA optimization Pass2ConditionalAndOrRewriting
Warning! Adding boolean cast to non-boolean condition (byte) printf_string::format_justify_left#10
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Warning! Adding boolean cast to non-boolean condition (signed byte) printf_string::padding#3
Constant right-side identified [35] (void*) memset::str#0 ← (void*)(const byte*) printf_screen
Constant right-side identified [37] (word) memset::num#0 ← (unumber)(number) $28*(number) $19
Constant right-side identified [46] (byte*~) printf_char::$0 ← (const byte*) printf_screen + (word)(number) $28*(number) $19
Constant right-side identified [49] (byte*~) printf_char::$3 ← (const byte*) printf_screen + (byte) $28
Constant right-side identified [50] (void*) memcpy::destination#0 ← (void*)(const byte*) printf_screen
Constant right-side identified [52] (word) memcpy::num#0 ← (unumber)(number) $28*(number) $19-(number) $28
Constant right-side identified [55] (byte*~) printf_char::$5 ← (const byte*) printf_screen + (word)(number) $28*(number) $19
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const word) strlen::len#0 = 0
Constant (const void*) memset::str#0 = (void*)printf_screen
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = (unumber)$28*$19
Constant (const byte*) printf_char::$0 = printf_screen+(word)$28*$19
Constant (const byte*) printf_char::$3 = printf_screen+$28
Constant (const void*) memcpy::destination#0 = (void*)printf_screen
Constant (const word) memcpy::num#0 = (unumber)$28*$19-$28
Constant (const byte*) printf_char::$5 = printf_screen+(word)$28*$19
Constant (const byte) memset::c#1 = ' '
Constant (const word) memset::num#1 = $28
Constant (const byte) printf_padding::i#0 = 0
Constant (const signed byte) printf_string::padding#0 = 0
Constant (const signed byte) printf_string::padding#2 = 0
Constant (const byte) printf_padding::pad#0 = ' '
Constant (const byte) printf_padding::pad#1 = ' '
Constant (const byte) main::format_min_length#0 = 0
Constant (const byte) main::format_justify_left#0 = 0
Constant (const byte) main::format_min_length#1 = $a
Constant (const byte) main::format_justify_left#1 = 0
Constant (const byte*) printf_string::str#0 = main::str
Constant (const byte*) printf_string::str#1 = main::str1
Constant (const byte) main::format_justify_left#2 = 1
Constant (const byte*) printf_string::str#2 = main::str2
Constant (const byte*) printf_string::str#3 = main::str3
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memcpy::dst#0 = (byte*)memcpy::destination#0
Constant (const void*) memcpy::source#0 = (void*)printf_char::$3
Constant (const void*) memcpy::return#2 = memcpy::destination#0
Constant (const byte) printf_string::format_min_length#0 = main::format_min_length#1
Constant (const byte) printf_string::format_justify_left#0 = main::format_justify_left#1
Constant (const byte) printf_string::format_min_length#1 = main::format_min_length#1
Constant (const byte) printf_string::format_justify_left#1 = main::format_justify_left#1
Constant (const byte) printf_string::format_min_length#2 = main::format_min_length#1
Constant (const byte) printf_string::format_justify_left#2 = main::format_justify_left#2
Constant (const byte) printf_string::format_min_length#3 = main::format_min_length#1
Constant (const byte) printf_string::format_justify_left#3 = main::format_justify_left#2
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) memcpy::src#0 = (byte*)memcpy::source#0
Constant (const byte*) memcpy::$0 = (byte*)memcpy::source#0
Successful SSA optimization Pass2ConstantIdentification
Consolidated constant strings into (const byte*) main::str
Consolidated constant strings into (const byte*) main::str1
Successful SSA optimization Pass2ConstantStringConsolidation
Eliminating unused variable (void*) memset::return#2 and assignment [25] (void*) memset::return#2 ← (void*) memset::str#3
Eliminating unused variable (void*) memset::return#3 and assignment [37] (void*) memset::return#3 ← (void*) memset::str#3
Eliminating unused constant (const void*) memcpy::return#2
Eliminating unused constant (const byte) main::format_min_length#0
Eliminating unused constant (const byte) main::format_justify_left#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) 0 in (bool~) printf_string::$19 ← (number) 0 != (byte) printf_string::format_justify_left#10
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$20 ← (number) 0 != (signed byte) printf_string::padding#3
Adding number conversion cast (snumber) 0 in (bool~) printf_string::$21 ← (number) 0 != (signed byte) printf_string::padding#3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)printf_char_cursor = printf_char::$8 
Simple Condition (bool~) printf_string::$1 [61] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@13
Simple Condition (bool~) printf_string::$19 [73] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@14
Simple Condition (bool~) printf_string::$20 [90] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@6
Simple Condition (bool~) printf_string::$21 [92] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@7
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [61] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2
Negating conditional jump and destination [73] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [0] (byte*) memcpy::src_end#0 ← (const byte*) memcpy::$0 + (const word) memcpy::num#0
Constant right-side identified [33] (byte*~) printf_char::$6 ← (const byte*) printf_char::$5 - (byte) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) memcpy::src_end#0 = memcpy::$0+memcpy::num#0
Constant (const byte*) printf_char::$6 = printf_char::$5-$28
Successful SSA optimization Pass2ConstantIdentification
Constant (const void*) memset::str#1 = (void*)printf_char::$6
Successful SSA optimization Pass2ConstantIdentification
Alias candidate removed (volatile)printf_char_cursor = printf_char::$8 
Inlining Noop Cast [8] (byte*~) memset::$2 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [10] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#3 keeping memset::str#3
Inlining Noop Cast [63] (signed byte~) printf_string::$13 ← (signed byte)(byte) printf_string::format_min_length#4 keeping printf_string::format_min_length#4
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings (const byte*) memcpy::dst#0
Inlining constant with var siblings (const byte*) memcpy::src#0
Inlining constant with var siblings (const void*) memset::str#0
Inlining constant with var siblings (const byte) memset::c#0
Inlining constant with var siblings (const word) memset::num#0
Inlining constant with var siblings (const byte) memset::c#1
Inlining constant with var siblings (const word) memset::num#1
Inlining constant with var siblings (const void*) memset::str#1
Inlining constant with var siblings (const word) strlen::len#0
Inlining constant with var siblings (const byte) printf_padding::i#0
Inlining constant with var siblings (const byte) printf_padding::pad#0
Inlining constant with var siblings (const byte) printf_padding::pad#1
Inlining constant with var siblings (const signed byte) printf_string::padding#0
Inlining constant with var siblings (const signed byte) printf_string::padding#2
Inlining constant with var siblings (const byte*) printf_string::str#0
Inlining constant with var siblings (const byte*) printf_string::str#1
Inlining constant with var siblings (const byte*) printf_string::str#2
Inlining constant with var siblings (const byte*) printf_string::str#3
Inlining constant with var siblings (const byte) printf_string::format_min_length#0
Inlining constant with var siblings (const byte) printf_string::format_justify_left#0
Inlining constant with var siblings (const byte) printf_string::format_min_length#1
Inlining constant with var siblings (const byte) printf_string::format_justify_left#1
Inlining constant with var siblings (const byte) printf_string::format_min_length#2
Inlining constant with var siblings (const byte) printf_string::format_justify_left#2
Inlining constant with var siblings (const byte) printf_string::format_min_length#3
Inlining constant with var siblings (const byte) printf_string::format_justify_left#3
Inlining constant with different constant siblings (const byte) main::format_justify_left#1
Inlining constant with different constant siblings (const byte) main::format_justify_left#2
Constant inlined memcpy::dst#0 = (byte*)(const void*) memcpy::destination#0
Constant inlined main::str2 = (const byte*) main::str
Constant inlined main::str3 = (const byte*) main::str1
Constant inlined printf_string::format_min_length#3 = (const byte) main::format_min_length#1
Constant inlined memset::num#1 = (byte) $28
Constant inlined memcpy::src#0 = (byte*)(const void*) memcpy::source#0
Constant inlined memset::num#0 = (word)(number) $28*(number) $19
Constant inlined printf_string::format_min_length#0 = (const byte) main::format_min_length#1
Constant inlined strlen::len#0 = (word) 0
Constant inlined printf_string::format_min_length#1 = (const byte) main::format_min_length#1
Constant inlined printf_string::format_min_length#2 = (const byte) main::format_min_length#1
Constant inlined memcpy::$0 = (byte*)(const void*) memcpy::source#0
Constant inlined printf_string::str#0 = (const byte*) main::str
Constant inlined printf_string::str#3 = (const byte*) main::str1
Constant inlined printf_string::str#2 = (const byte*) main::str
Constant inlined printf_string::str#1 = (const byte*) main::str1
Constant inlined memset::str#1 = (void*)(const byte*) printf_screen+(word)(number) $28*(number) $19-(byte) $28
Constant inlined printf_padding::pad#0 = (byte) ' '
Constant inlined memset::str#0 = (void*)(const byte*) printf_screen
Constant inlined printf_padding::i#0 = (byte) 0
Constant inlined printf_padding::pad#1 = (byte) ' '
Constant inlined printf_char::$3 = (const byte*) printf_screen+(byte) $28
Constant inlined printf_char::$0 = (const byte*) printf_screen+(word)(number) $28*(number) $19
Constant inlined printf_char::$6 = (const byte*) printf_screen+(word)(number) $28*(number) $19-(byte) $28
Constant inlined printf_char::$5 = (const byte*) printf_screen+(word)(number) $28*(number) $19
Constant inlined printf_string::padding#0 = (signed byte) 0
Constant inlined printf_string::padding#2 = (signed byte) 0
Constant inlined memset::c#0 = (byte) ' '
Constant inlined main::format_justify_left#2 = (byte) 1
Constant inlined printf_string::format_justify_left#1 = (byte) 0
Constant inlined memset::c#1 = (byte) ' '
Constant inlined main::format_justify_left#1 = (byte) 0
Constant inlined printf_string::format_justify_left#0 = (byte) 0
Constant inlined printf_string::format_justify_left#3 = (byte) 1
Constant inlined printf_string::format_justify_left#2 = (byte) 1
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)printf_char_cursor = printf_char::$8 
Identical Phi Values (byte) printf_string::format_min_length#4 (const byte) main::format_min_length#1
Successful SSA optimization Pass2IdenticalPhiElimination
Constant value identified (signed byte)main::format_min_length#1 in [61] (signed byte) printf_string::padding#1 ← (signed byte)(const byte) main::format_min_length#1 - (signed byte) printf_string::len#0
Successful SSA optimization Pass2ConstantValues
Removing PHI-reference to removed block (printf_string) in block printf_string::@1
if() condition always false - eliminating [53] if((byte) 0==(const byte) main::format_min_length#1) goto printf_string::@1
Successful SSA optimization Pass2ConstantIfs
Alias candidate removed (volatile)printf_char_cursor = printf_char::$8 
Added new block during phi lifting printf_string::@15(between printf_string::@9 and printf_string::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @29
Adding NOP phi() at start of @30
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of printf_string::@5
Adding NOP phi() at start of printf_string::@12
Adding NOP phi() at start of printf_string::@11
Adding NOP phi() at start of printf_char::@2
Adding NOP phi() at start of printf_char::@3
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of memcpy
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of strlen::@3
Adding NOP phi() at start of printf_ln
Adding NOP phi() at start of printf_cls
CALL GRAPH
Calls in [] to main:4 
Calls in [main] to printf_cls:8 printf_string:10 printf_ln:12 printf_string:14 printf_ln:16 printf_string:18 printf_ln:20 printf_string:22 
Calls in [printf_string] to strlen:27 printf_str:38 printf_padding:44 printf_padding:48 
Calls in [printf_padding] to printf_char:57 
Calls in [printf_char] to memcpy:65 memset:67 
Calls in [printf_str] to printf_char:99 
Calls in [printf_cls] to memset:117 

Created 16 initial phi equivalence classes
Coalesced [43] printf_padding::length#7 ← printf_padding::length#1
Coalesced [47] printf_padding::length#6 ← printf_padding::length#0
Coalesced [50] printf_string::padding#9 ← printf_string::padding#1
Coalesced [56] printf_char::ch#3 ← printf_char::ch#0
Coalesced [59] printf_padding::i#5 ← printf_padding::i#1
Coalesced [82] memset::dst#5 ← memset::dst#1
Coalesced [91] memcpy::src#4 ← memcpy::src#1
Coalesced [92] memcpy::dst#4 ← memcpy::dst#1
Coalesced [93] printf_str::str#6 ← printf_str::str#1
Coalesced [98] printf_char::ch#4 ← printf_char::ch#1
Coalesced [101] printf_str::str#7 ← printf_str::str#0
Coalesced [102] strlen::str#5 ← strlen::str#1
Coalesced [109] strlen::str#6 ← strlen::str#0
Coalesced [110] strlen::len#5 ← strlen::len#1
Coalesced down to 16 phi equivalence classes
Culled Empty Block (label) @30
Culled Empty Block (label) main::@8
Culled Empty Block (label) printf_string::@5
Culled Empty Block (label) printf_string::@12
Culled Empty Block (label) printf_string::@11
Culled Empty Block (label) memset::@1
Culled Empty Block (label) memcpy::@3
Culled Empty Block (label) strlen::@3
Renumbering block @15 to @1
Renumbering block @29 to @2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block memset::@5 to memset::@3
Renumbering block printf_char::@2 to printf_char::@1
Renumbering block printf_char::@3 to printf_char::@2
Renumbering block printf_char::@4 to printf_char::@3
Renumbering block printf_padding::@7 to printf_padding::@3
Renumbering block printf_str::@7 to printf_str::@3
Renumbering block printf_string::@4 to printf_string::@3
Renumbering block printf_string::@6 to printf_string::@4
Renumbering block printf_string::@7 to printf_string::@5
Renumbering block printf_string::@9 to printf_string::@6
Renumbering block printf_string::@10 to printf_string::@7
Renumbering block printf_string::@13 to printf_string::@8
Renumbering block printf_string::@14 to printf_string::@9
Renumbering block printf_string::@15 to printf_string::@10
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of printf_string::@10
Adding NOP phi() at start of printf_char::@1
Adding NOP phi() at start of printf_char::@2
Adding NOP phi() at start of memcpy
Adding NOP phi() at start of printf_str
Adding NOP phi() at start of strlen
Adding NOP phi() at start of printf_ln
Adding NOP phi() at start of printf_cls

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (byte*) printf_line_cursor ← (byte*) 1024
  [2] (byte*) printf_char_cursor ← (byte*) 1024
  to:@2
@2: scope:[]  from @1
  [3] phi()
  [4] call main 
  to:@end
@end: scope:[]  from @2
  [5] phi()

(void()) main()
main: scope:[main]  from @2
  [6] phi()
  [7] call printf_cls 
  to:main::@1
main::@1: scope:[main]  from main
  [8] phi()
  [9] call printf_string 
  to:main::@2
main::@2: scope:[main]  from main::@1
  [10] phi()
  [11] call printf_ln 
  to:main::@3
main::@3: scope:[main]  from main::@2
  [12] phi()
  [13] call printf_string 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [14] phi()
  [15] call printf_ln 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [16] phi()
  [17] call printf_string 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [18] phi()
  [19] call printf_ln 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [20] phi()
  [21] call printf_string 
  to:main::@return
main::@return: scope:[main]  from main::@7
  [22] return 
  to:@return

(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
printf_string: scope:[printf_string]  from main::@1 main::@3 main::@5 main::@7
  [23] (byte*) printf_string::str#10 ← phi( main::@1/(const byte*) main::str main::@3/(const byte*) main::str1 main::@5/(const byte*) main::str main::@7/(const byte*) main::str1 )
  [23] (byte) printf_string::format_justify_left#10 ← phi( main::@1/(byte) 0 main::@3/(byte) 0 main::@5/(byte) 1 main::@7/(byte) 1 )
  to:printf_string::@3
printf_string::@3: scope:[printf_string]  from printf_string
  [24] (byte*) strlen::str#1 ← (byte*) printf_string::str#10
  [25] call strlen 
  [26] (word) strlen::return#2 ← (word) strlen::len#2
  to:printf_string::@6
printf_string::@6: scope:[printf_string]  from printf_string::@3
  [27] (word~) printf_string::$11 ← (word) strlen::return#2
  [28] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$11
  [29] (signed byte) printf_string::padding#1 ← (signed byte)(const byte) main::format_min_length#1 - (signed byte) printf_string::len#0
  [30] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@10
  to:printf_string::@1
printf_string::@10: scope:[printf_string]  from printf_string::@6
  [31] phi()
  to:printf_string::@1
printf_string::@1: scope:[printf_string]  from printf_string::@10 printf_string::@6
  [32] (signed byte) printf_string::padding#3 ← phi( printf_string::@6/(signed byte) 0 printf_string::@10/(signed byte) printf_string::padding#1 )
  [33] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2
  to:printf_string::@8
printf_string::@8: scope:[printf_string]  from printf_string::@1
  [34] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@4
  to:printf_string::@2
printf_string::@4: scope:[printf_string]  from printf_string::@8
  [35] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_string::padding#3
  [36] call printf_padding 
  to:printf_string::@2
printf_string::@2: scope:[printf_string]  from printf_string::@1 printf_string::@4 printf_string::@8
  [37] (byte*) printf_str::str#1 ← (byte*) printf_string::str#10
  [38] call printf_str 
  to:printf_string::@7
printf_string::@7: scope:[printf_string]  from printf_string::@2
  [39] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return
  to:printf_string::@9
printf_string::@9: scope:[printf_string]  from printf_string::@7
  [40] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@5
  to:printf_string::@return
printf_string::@5: scope:[printf_string]  from printf_string::@9
  [41] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_string::padding#3
  [42] call printf_padding 
  to:printf_string::@return
printf_string::@return: scope:[printf_string]  from printf_string::@5 printf_string::@7 printf_string::@9
  [43] return 
  to:@return

(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
printf_padding: scope:[printf_padding]  from printf_string::@4 printf_string::@5
  [44] (byte) printf_padding::pad#4 ← phi( printf_string::@4/(byte) ' ' printf_string::@5/(byte) ' ' )
  [44] (byte) printf_padding::length#3 ← phi( printf_string::@4/(byte) printf_padding::length#0 printf_string::@5/(byte) printf_padding::length#1 )
  to:printf_padding::@1
printf_padding::@1: scope:[printf_padding]  from printf_padding printf_padding::@3
  [45] (byte) printf_padding::i#2 ← phi( printf_padding/(byte) 0 printf_padding::@3/(byte) printf_padding::i#1 )
  [46] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2
  to:printf_padding::@return
printf_padding::@return: scope:[printf_padding]  from printf_padding::@1
  [47] return 
  to:@return
printf_padding::@2: scope:[printf_padding]  from printf_padding::@1
  [48] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#4
  [49] call printf_char 
  to:printf_padding::@3
printf_padding::@3: scope:[printf_padding]  from printf_padding::@2
  [50] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2
  to:printf_padding::@1

(void()) printf_char((byte) printf_char::ch)
printf_char: scope:[printf_char]  from printf_padding::@2 printf_str::@2
  [51] (byte) printf_char::ch#2 ← phi( printf_padding::@2/(byte) printf_char::ch#0 printf_str::@2/(byte) printf_char::ch#1 )
  [52] *((byte*) printf_char_cursor) ← (byte) printf_char::ch#2
  [53] (byte*) printf_char_cursor ← ++ (byte*) printf_char_cursor
  [54] if((byte*) printf_char_cursor!=(const byte*) printf_screen+(word)(number) $28*(number) $19) goto printf_char::@return
  to:printf_char::@1
printf_char::@1: scope:[printf_char]  from printf_char
  [55] phi()
  [56] call memcpy 
  to:printf_char::@2
printf_char::@2: scope:[printf_char]  from printf_char::@1
  [57] phi()
  [58] call memset 
  to:printf_char::@3
printf_char::@3: scope:[printf_char]  from printf_char::@2
  [59] (byte*~) printf_char::$8 ← (byte*) printf_char_cursor - (byte) $28
  [60] (byte*) printf_char_cursor ← (byte*~) printf_char::$8
  [61] (byte*) printf_line_cursor ← (byte*) printf_char_cursor
  to:printf_char::@return
printf_char::@return: scope:[printf_char]  from printf_char printf_char::@3
  [62] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from printf_char::@2 printf_cls
  [63] (byte) memset::c#4 ← phi( printf_char::@2/(byte) ' ' printf_cls/(byte) ' ' )
  [63] (void*) memset::str#3 ← phi( printf_char::@2/(void*)(const byte*) printf_screen+(word)(number) $28*(number) $19-(byte) $28 printf_cls/(void*)(const byte*) printf_screen )
  [63] (word) memset::num#2 ← phi( printf_char::@2/(byte) $28 printf_cls/(word)(number) $28*(number) $19 )
  [64] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [65] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [66] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [67] (byte*) memset::dst#2 ← phi( memset::@1/(byte*) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [68] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [69] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [70] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [71] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
memcpy: scope:[memcpy]  from printf_char::@1
  [72] phi()
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [73] (byte*) memcpy::dst#2 ← phi( memcpy/(byte*)(const void*) memcpy::destination#0 memcpy::@2/(byte*) memcpy::dst#1 )
  [73] (byte*) memcpy::src#2 ← phi( memcpy/(byte*)(const void*) memcpy::source#0 memcpy::@2/(byte*) memcpy::src#1 )
  [74] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [75] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [76] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2)
  [77] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2
  [78] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2
  to:memcpy::@1

(void()) printf_str((byte*) printf_str::str)
printf_str: scope:[printf_str]  from printf_string::@2
  [79] phi()
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@3
  [80] (byte*) printf_str::str#2 ← phi( printf_str/(byte*) printf_str::str#1 printf_str::@3/(byte*) printf_str::str#0 )
  [81] if((byte) 0!=*((byte*) printf_str::str#2)) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [82] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [83] (byte) printf_char::ch#1 ← *((byte*) printf_str::str#2)
  [84] call printf_char 
  to:printf_str::@3
printf_str::@3: scope:[printf_str]  from printf_str::@2
  [85] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2
  to:printf_str::@1

(word()) strlen((byte*) strlen::str)
strlen: scope:[strlen]  from printf_string::@3
  [86] phi()
  to:strlen::@1
strlen::@1: scope:[strlen]  from strlen strlen::@2
  [87] (word) strlen::len#2 ← phi( strlen/(word) 0 strlen::@2/(word) strlen::len#1 )
  [87] (byte*) strlen::str#2 ← phi( strlen/(byte*) strlen::str#1 strlen::@2/(byte*) strlen::str#0 )
  [88] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2
  to:strlen::@return
strlen::@return: scope:[strlen]  from strlen::@1
  [89] return 
  to:@return
strlen::@2: scope:[strlen]  from strlen::@1
  [90] (word) strlen::len#1 ← ++ (word) strlen::len#2
  [91] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2
  to:strlen::@1

(void()) printf_ln()
printf_ln: scope:[printf_ln]  from main::@2 main::@4 main::@6
  [92] phi()
  to:printf_ln::@1
printf_ln::@1: scope:[printf_ln]  from printf_ln printf_ln::@1
  [93] (byte*) printf_line_cursor ← (byte*) printf_line_cursor + (byte) $28
  [94] if((byte*) printf_line_cursor<(byte*) printf_char_cursor) goto printf_ln::@1
  to:printf_ln::@2
printf_ln::@2: scope:[printf_ln]  from printf_ln::@1
  [95] (byte*) printf_char_cursor ← (byte*) printf_line_cursor
  to:printf_ln::@return
printf_ln::@return: scope:[printf_ln]  from printf_ln::@2
  [96] return 
  to:@return

(void()) printf_cls()
printf_cls: scope:[printf_cls]  from main
  [97] phi()
  [98] call memset 
  to:printf_cls::@1
printf_cls::@1: scope:[printf_cls]  from printf_cls
  [99] (byte*) printf_line_cursor ← (const byte*) printf_screen
  [100] (byte*) printf_char_cursor ← (byte*) printf_line_cursor
  to:printf_cls::@return
printf_cls::@return: scope:[printf_cls]  from printf_cls::@1
  [101] return 
  to:@return

null depth in calling loop Loop head: printf_padding::@1 tails: printf_padding::@3 blocks: printf_padding::@3 printf_padding::@2 printf_padding::@1  in scope printf_char
null depth in calling loop Loop head: printf_str::@1 tails: printf_str::@3 blocks: printf_str::@3 printf_str::@2 printf_str::@1  in scope printf_char

VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::format_justify_left
(byte) main::format_min_length
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(void*) memcpy::destination
(byte*) memcpy::dst
(byte*) memcpy::dst#1 1.00000001E8
(byte*) memcpy::dst#2 1.00000001E8
(word) memcpy::num
(void*) memcpy::return
(void*) memcpy::source
(byte*) memcpy::src
(byte*) memcpy::src#1 2.00000002E8
(byte*) memcpy::src#2 1.00000001E8
(byte*) memcpy::src_end
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte) memset::c#4 1250000.125
(byte*) memset::dst
(byte*) memset::dst#1 2.0000002E7
(byte*) memset::dst#2 1.3666668333333332E7
(byte*) memset::dst#4 2000002.0
(byte*) memset::end
(byte*) memset::end#0 1833333.6666666665
(word) memset::num
(word) memset::num#2 1000001.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(byte*~) printf_char::$8 200002.0
(byte) printf_char::ch
(byte) printf_char::ch#0 20002.0
(byte) printf_char::ch#1 20002.0
(byte) printf_char::ch#2 120003.0
(byte*) printf_char_cursor loadstore 10465.85074626866
(void()) printf_cls()
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(byte*) printf_line_cursor loadstore 1639.825396825397
(void()) printf_ln()
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(byte) printf_padding::i
(byte) printf_padding::i#1 20002.0
(byte) printf_padding::i#2 7500.75
(byte) printf_padding::length
(byte) printf_padding::length#0 202.0
(byte) printf_padding::length#1 202.0
(byte) printf_padding::length#3 1700.5
(byte) printf_padding::pad
(byte) printf_padding::pad#4 1666.8333333333333
(void()) printf_str((byte*) printf_str::str)
(byte*) printf_str::str
(byte*) printf_str::str#0 20002.0
(byte*) printf_str::str#1 551.0
(byte*) printf_str::str#2 10251.25
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(word~) printf_string::$11 101.0
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#10 12.625
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::len#0 202.0
(signed byte) printf_string::padding
(signed byte) printf_string::padding#1 101.0
(signed byte) printf_string::padding#3 33.666666666666664
(byte*) printf_string::str
(byte*) printf_string::str#10 14.428571428571429
(word()) strlen((byte*) strlen::str)
(word) strlen::len
(word) strlen::len#1 10001.0
(word) strlen::len#2 5025.75
(word) strlen::return
(word) strlen::return#2 202.0
(byte*) strlen::str
(byte*) strlen::str#0 20002.0
(byte*) strlen::str#1 551.0
(byte*) strlen::str#2 10334.666666666666

Initial phi equivalence classes
[ printf_string::format_justify_left#10 ]
[ printf_string::str#10 ]
[ printf_string::padding#3 printf_string::padding#1 ]
[ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
[ printf_padding::pad#4 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
[ printf_str::str#2 printf_str::str#1 printf_str::str#0 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
Added variable printf_line_cursor to live range equivalence class [ printf_line_cursor ]
Added variable printf_char_cursor to live range equivalence class [ printf_char_cursor ]
Added variable strlen::return#2 to live range equivalence class [ strlen::return#2 ]
Added variable printf_string::$11 to live range equivalence class [ printf_string::$11 ]
Added variable printf_string::len#0 to live range equivalence class [ printf_string::len#0 ]
Added variable printf_char::$8 to live range equivalence class [ printf_char::$8 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Complete equivalence classes
[ printf_string::format_justify_left#10 ]
[ printf_string::str#10 ]
[ printf_string::padding#3 printf_string::padding#1 ]
[ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
[ printf_padding::pad#4 ]
[ printf_padding::i#2 printf_padding::i#1 ]
[ printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
[ memset::num#2 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ memcpy::src#2 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#1 ]
[ printf_str::str#2 printf_str::str#1 printf_str::str#0 ]
[ strlen::str#2 strlen::str#1 strlen::str#0 ]
[ strlen::len#2 strlen::len#1 ]
[ printf_line_cursor ]
[ printf_char_cursor ]
[ strlen::return#2 ]
[ printf_string::$11 ]
[ printf_string::len#0 ]
[ printf_char::$8 ]
[ memset::end#0 ]
Allocated zp[1]:2 [ printf_string::format_justify_left#10 ]
Allocated zp[2]:3 [ printf_string::str#10 ]
Allocated zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ]
Allocated zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
Allocated zp[1]:7 [ printf_padding::pad#4 ]
Allocated zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ]
Allocated zp[1]:9 [ printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
Allocated zp[2]:10 [ memset::num#2 ]
Allocated zp[2]:12 [ memset::str#3 ]
Allocated zp[1]:14 [ memset::c#4 ]
Allocated zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[2]:17 [ memcpy::src#2 memcpy::src#1 ]
Allocated zp[2]:19 [ memcpy::dst#2 memcpy::dst#1 ]
Allocated zp[2]:21 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ]
Allocated zp[2]:23 [ strlen::str#2 strlen::str#1 strlen::str#0 ]
Allocated zp[2]:25 [ strlen::len#2 strlen::len#1 ]
Allocated zp[2]:27 [ printf_line_cursor ]
Allocated zp[2]:29 [ printf_char_cursor ]
Allocated zp[2]:31 [ strlen::return#2 ]
Allocated zp[2]:33 [ printf_string::$11 ]
Allocated zp[1]:35 [ printf_string::len#0 ]
Allocated zp[2]:36 [ printf_char::$8 ]
Allocated zp[2]:38 [ memset::end#0 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests printf implementation
// Format a string
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label printf_screen = $400
  .label printf_line_cursor = $1b
  .label printf_char_cursor = $1d
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte*) printf_line_cursor ← (byte*) 1024 -- pbuz1=pbuc1 
  lda #<$400
  sta.z printf_line_cursor
  lda #>$400
  sta.z printf_line_cursor+1
  // [2] (byte*) printf_char_cursor ← (byte*) 1024 -- pbuz1=pbuc1 
  lda #<$400
  sta.z printf_char_cursor
  lda #>$400
  sta.z printf_char_cursor+1
  // [3] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [4] call main 
  // [6] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [5] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label format_min_length = $a
    // [7] call printf_cls 
    // [97] phi from main to printf_cls [phi:main->printf_cls]
  printf_cls_from_main:
    jsr printf_cls
    // [8] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [9] call printf_string 
    // [23] phi from main::@1 to printf_string [phi:main::@1->printf_string]
  printf_string_from___b1:
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@1->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@1->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [11] call printf_ln 
    // [92] phi from main::@2 to printf_ln [phi:main::@2->printf_ln]
  printf_ln_from___b2:
    jsr printf_ln
    // [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [13] call printf_string 
    // [23] phi from main::@3 to printf_string [phi:main::@3->printf_string]
  printf_string_from___b3:
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@3->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@3->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [14] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [15] call printf_ln 
    // [92] phi from main::@4 to printf_ln [phi:main::@4->printf_ln]
  printf_ln_from___b4:
    jsr printf_ln
    // [16] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [17] call printf_string 
    // [23] phi from main::@5 to printf_string [phi:main::@5->printf_string]
  printf_string_from___b5:
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@5->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@5->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [18] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [19] call printf_ln 
    // [92] phi from main::@6 to printf_ln [phi:main::@6->printf_ln]
  printf_ln_from___b6:
    jsr printf_ln
    // [20] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [21] call printf_string 
    // [23] phi from main::@7 to printf_string [phi:main::@7->printf_string]
  printf_string_from___b7:
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@7->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@7->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    jmp __breturn
    // main::@return
  __breturn:
    // [22] return 
    rts
    str: .text "cml"
    .byte 0
    str1: .text "rules"
    .byte 0
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
// printf_string(byte* zp(3) str, byte zp(2) format_justify_left)
printf_string: {
    .label __11 = $21
    .label len = $23
    .label padding = 5
    .label str = 3
    .label format_justify_left = 2
    jmp __b3
    // printf_string::@3
  __b3:
    // [24] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 -- pbuz1=pbuz2 
    lda.z str
    sta.z strlen.str
    lda.z str+1
    sta.z strlen.str+1
    // [25] call strlen 
    // [86] phi from printf_string::@3 to strlen [phi:printf_string::@3->strlen]
  strlen_from___b3:
    jsr strlen
    // [26] (word) strlen::return#2 ← (word) strlen::len#2 -- vwuz1=vwuz2 
    lda.z strlen.len
    sta.z strlen.return
    lda.z strlen.len+1
    sta.z strlen.return+1
    jmp __b6
    // printf_string::@6
  __b6:
    // [27] (word~) printf_string::$11 ← (word) strlen::return#2 -- vwuz1=vwuz2 
    lda.z strlen.return
    sta.z __11
    lda.z strlen.return+1
    sta.z __11+1
    // [28] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$11 -- vbsz1=_sbyte_vwuz2 
    lda.z __11
    sta.z len
    // [29] (signed byte) printf_string::padding#1 ← (signed byte)(const byte) main::format_min_length#1 - (signed byte) printf_string::len#0 -- vbsz1=vbsc1_minus_vbsz2 
    lda #main.format_min_length
    sec
    sbc.z len
    sta.z padding
    // [30] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@10 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b10_from___b6
    // [32] phi from printf_string::@6 to printf_string::@1 [phi:printf_string::@6->printf_string::@1]
  __b1_from___b6:
    // [32] phi (signed byte) printf_string::padding#3 = (signed byte) 0 [phi:printf_string::@6->printf_string::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [31] phi from printf_string::@6 to printf_string::@10 [phi:printf_string::@6->printf_string::@10]
  __b10_from___b6:
    jmp __b10
    // printf_string::@10
  __b10:
    // [32] phi from printf_string::@10 to printf_string::@1 [phi:printf_string::@10->printf_string::@1]
  __b1_from___b10:
    // [32] phi (signed byte) printf_string::padding#3 = (signed byte) printf_string::padding#1 [phi:printf_string::@10->printf_string::@1#0] -- register_copy 
    jmp __b1
    // printf_string::@1
  __b1:
    // [33] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b8
    // printf_string::@8
  __b8:
    // [34] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@4 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b4
    jmp __b2
    // printf_string::@4
  __b4:
    // [35] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [36] call printf_padding 
    // [44] phi from printf_string::@4 to printf_padding [phi:printf_string::@4->printf_padding]
  printf_padding_from___b4:
    // [44] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@4->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [44] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#0 [phi:printf_string::@4->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_string::@2
  __b2:
    // [37] (byte*) printf_str::str#1 ← (byte*) printf_string::str#10 -- pbuz1=pbuz2 
    lda.z str
    sta.z printf_str.str
    lda.z str+1
    sta.z printf_str.str+1
    // [38] call printf_str 
    // [79] phi from printf_string::@2 to printf_str [phi:printf_string::@2->printf_str]
  printf_str_from___b2:
    jsr printf_str
    jmp __b7
    // printf_string::@7
  __b7:
    // [39] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b9
    // printf_string::@9
  __b9:
    // [40] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@5 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b5
    jmp __breturn
    // printf_string::@5
  __b5:
    // [41] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [42] call printf_padding 
    // [44] phi from printf_string::@5 to printf_padding [phi:printf_string::@5->printf_padding]
  printf_padding_from___b5:
    // [44] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@5->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [44] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#1 [phi:printf_string::@5->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [43] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp(7) pad, byte zp(6) length)
printf_padding: {
    .label i = 8
    .label length = 6
    .label pad = 7
    // [45] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [45] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [46] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [47] return 
    rts
    // printf_padding::@2
  __b2:
    // [48] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#4 -- vbuz1=vbuz2 
    lda.z pad
    sta.z printf_char.ch
    // [49] call printf_char 
    // [51] phi from printf_padding::@2 to printf_char [phi:printf_padding::@2->printf_char]
  printf_char_from___b2:
    // [51] phi (byte) printf_char::ch#2 = (byte) printf_char::ch#0 [phi:printf_padding::@2->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_padding::@3
  __b3:
    // [50] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [45] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [45] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte zp(9) ch)
printf_char: {
    .label __8 = $24
    .label ch = 9
    // [52] *((byte*) printf_char_cursor) ← (byte) printf_char::ch#2 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (printf_char_cursor),y
    // [53] (byte*) printf_char_cursor ← ++ (byte*) printf_char_cursor -- pbuz1=_inc_pbuz1 
    inc.z printf_char_cursor
    bne !+
    inc.z printf_char_cursor+1
  !:
    // [54] if((byte*) printf_char_cursor!=(const byte*) printf_screen+(word)(number) $28*(number) $19) goto printf_char::@return -- pbuz1_neq_pbuc1_then_la1 
    lda.z printf_char_cursor+1
    cmp #>printf_screen+$28*$19
    bne __breturn
    lda.z printf_char_cursor
    cmp #<printf_screen+$28*$19
    bne __breturn
    // [55] phi from printf_char to printf_char::@1 [phi:printf_char->printf_char::@1]
  __b1_from_printf_char:
    jmp __b1
    // printf_char::@1
  __b1:
    // [56] call memcpy 
    // [72] phi from printf_char::@1 to memcpy [phi:printf_char::@1->memcpy]
  memcpy_from___b1:
    jsr memcpy
    // [57] phi from printf_char::@1 to printf_char::@2 [phi:printf_char::@1->printf_char::@2]
  __b2_from___b1:
    jmp __b2
    // printf_char::@2
  __b2:
    // [58] call memset 
    // [63] phi from printf_char::@2 to memset [phi:printf_char::@2->memset]
  memset_from___b2:
    // [63] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_char::@2->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [63] phi (void*) memset::str#3 = (void*)(const byte*) printf_screen+(word)(number) $28*(number) $19-(byte) $28 [phi:printf_char::@2->memset#1] -- pvoz1=pvoc1 
    lda #<printf_screen+$28*$19-$28
    sta.z memset.str
    lda #>printf_screen+$28*$19-$28
    sta.z memset.str+1
    // [63] phi (word) memset::num#2 = (byte) $28 [phi:printf_char::@2->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b3
    // printf_char::@3
  __b3:
    // [59] (byte*~) printf_char::$8 ← (byte*) printf_char_cursor - (byte) $28 -- pbuz1=pbuz2_minus_vwuc1 
    lda.z printf_char_cursor
    sec
    sbc #<$28
    sta.z __8
    lda.z printf_char_cursor+1
    sbc #>$28
    sta.z __8+1
    // [60] (byte*) printf_char_cursor ← (byte*~) printf_char::$8 -- pbuz1=pbuz2 
    lda.z __8
    sta.z printf_char_cursor
    lda.z __8+1
    sta.z printf_char_cursor+1
    // [61] (byte*) printf_line_cursor ← (byte*) printf_char_cursor -- pbuz1=pbuz2 
    lda.z printf_char_cursor
    sta.z printf_line_cursor
    lda.z printf_char_cursor+1
    sta.z printf_line_cursor+1
    jmp __breturn
    // printf_char::@return
  __breturn:
    // [62] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($c) str, byte zp($e) c, word zp($a) num)
memset: {
    .label end = $26
    .label dst = $f
    .label num = $a
    .label str = $c
    .label c = $e
    // [64] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [65] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz3 
    lda.z str
    clc
    adc.z num
    sta.z end
    lda.z str+1
    adc.z num+1
    sta.z end+1
    // [66] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [67] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [67] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [68] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [69] return 
    rts
    // memset::@3
  __b3:
    // [70] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (dst),y
    // [71] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = printf_screen
    .const num = $28*$19-$28
    .label source = printf_screen+$28
    .label src_end = source+num
    .label dst = $13
    .label src = $11
    // [73] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
  __b1_from_memcpy:
    // [73] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [73] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    jmp __b1
    // memcpy::@1
  __b1:
    // [74] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [75] return 
    rts
    // memcpy::@2
  __b2:
    // [76] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [77] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [78] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [73] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
  __b1_from___b2:
    // [73] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [73] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_str
// Print a zero-terminated string
// printf_str(byte* zp($15) str)
printf_str: {
    .label str = $15
    // [80] phi from printf_str printf_str::@3 to printf_str::@1 [phi:printf_str/printf_str::@3->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b3:
    // [80] phi (byte*) printf_str::str#2 = (byte*) printf_str::str#1 [phi:printf_str/printf_str::@3->printf_str::@1#0] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    // [81] if((byte) 0!=*((byte*) printf_str::str#2)) goto printf_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [82] return 
    rts
    // printf_str::@2
  __b2:
    // [83] (byte) printf_char::ch#1 ← *((byte*) printf_str::str#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z printf_char.ch
    // [84] call printf_char 
    // [51] phi from printf_str::@2 to printf_char [phi:printf_str::@2->printf_char]
  printf_char_from___b2:
    // [51] phi (byte) printf_char::ch#2 = (byte) printf_char::ch#1 [phi:printf_str::@2->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_str::@3
  __b3:
    // [85] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp($17) str)
strlen: {
    .label len = $19
    .label str = $17
    .label return = $1f
    // [87] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [87] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [87] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [88] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [89] return 
    rts
    // strlen::@2
  __b2:
    // [90] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [91] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [87] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [87] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [87] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // printf_ln
// Print a newline
printf_ln: {
    jmp __b1
    // printf_ln::@1
  __b1:
    // [93] (byte*) printf_line_cursor ← (byte*) printf_line_cursor + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z printf_line_cursor
    sta.z printf_line_cursor
    bcc !+
    inc.z printf_line_cursor+1
  !:
    // [94] if((byte*) printf_line_cursor<(byte*) printf_char_cursor) goto printf_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z printf_line_cursor+1
    cmp.z printf_char_cursor+1
    bcc __b1
    bne !+
    lda.z printf_line_cursor
    cmp.z printf_char_cursor
    bcc __b1
  !:
    jmp __b2
    // printf_ln::@2
  __b2:
    // [95] (byte*) printf_char_cursor ← (byte*) printf_line_cursor -- pbuz1=pbuz2 
    lda.z printf_line_cursor
    sta.z printf_char_cursor
    lda.z printf_line_cursor+1
    sta.z printf_char_cursor+1
    jmp __breturn
    // printf_ln::@return
  __breturn:
    // [96] return 
    rts
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // [98] call memset 
    // [63] phi from printf_cls to memset [phi:printf_cls->memset]
  memset_from_printf_cls:
    // [63] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z memset.c
    // [63] phi (void*) memset::str#3 = (void*)(const byte*) printf_screen [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<printf_screen
    sta.z memset.str
    lda #>printf_screen
    sta.z memset.str+1
    // [63] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    jmp __b1
    // printf_cls::@1
  __b1:
    // [99] (byte*) printf_line_cursor ← (const byte*) printf_screen -- pbuz1=pbuc1 
    lda #<printf_screen
    sta.z printf_line_cursor
    lda #>printf_screen
    sta.z printf_line_cursor+1
    // [100] (byte*) printf_char_cursor ← (byte*) printf_line_cursor -- pbuz1=pbuz2 
    lda.z printf_line_cursor
    sta.z printf_char_cursor
    lda.z printf_line_cursor+1
    sta.z printf_char_cursor+1
    jmp __breturn
    // printf_cls::@return
  __breturn:
    // [101] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte*) printf_line_cursor ← (byte*) 1024 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (byte*) printf_char_cursor ← (byte*) 1024 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [24] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ printf_string::format_justify_left#10 ]
Statement [26] (word) strlen::return#2 ← (word) strlen::len#2 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [27] (word~) printf_string::$11 ← (word) strlen::return#2 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] { }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] { }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] { }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] { }  ) always clobbers reg byte a 
Statement [28] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$11 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  ) always clobbers reg byte a 
Statement [29] (signed byte) printf_string::padding#1 ← (signed byte)(const byte) main::format_min_length#1 - (signed byte) printf_string::len#0 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  ) always clobbers reg byte a 
Statement [37] (byte*) printf_str::str#1 ← (byte*) printf_string::str#10 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] { { printf_str::str#1 = printf_string::str#10 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ]
Statement [52] *((byte*) printf_char_cursor) ← (byte) printf_char::ch#2 [ printf_line_cursor printf_char_cursor ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ printf_string::format_justify_left#10 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:7 [ printf_padding::pad#4 ]
Removing always clobbered register reg byte y as potential for zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [54] if((byte*) printf_char_cursor!=(const byte*) printf_screen+(word)(number) $28*(number) $19) goto printf_char::@return [ printf_line_cursor printf_char_cursor ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ printf_padding::pad#4 ]
Removing always clobbered register reg byte a as potential for zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ]
Statement [59] (byte*~) printf_char::$8 ← (byte*) printf_char_cursor - (byte) $28 [ printf_char::$8 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char::$8 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char::$8 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char::$8 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char::$8 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Statement [60] (byte*) printf_char_cursor ← (byte*~) printf_char::$8 [ printf_char_cursor ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Statement [61] (byte*) printf_line_cursor ← (byte*) printf_char_cursor [ printf_line_cursor printf_char_cursor ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Statement [64] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ memset::c#4 ]
Statement [65] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [66] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [68] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:14 [ memset::c#4 ]
Statement [74] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Statement [76] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src#2 memcpy::dst#2 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a reg byte y 
Statement [81] if((byte) 0!=*((byte*) printf_str::str#2)) goto printf_str::@2 [ printf_line_cursor printf_char_cursor printf_str::str#2 ] ( main:4::printf_string:9::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:13::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:17::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:21::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } }  ) always clobbers reg byte a reg byte y 
Statement [83] (byte) printf_char::ch#1 ← *((byte*) printf_str::str#2) [ printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] ( main:4::printf_string:9::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a reg byte y 
Statement [88] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:4::printf_string:9::strlen:25 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:13::strlen:25 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:17::strlen:25 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:21::strlen:25 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [93] (byte*) printf_line_cursor ← (byte*) printf_line_cursor + (byte) $28 [ printf_line_cursor printf_char_cursor ] ( main:4::printf_ln:11 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:15 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:19 [ printf_line_cursor printf_char_cursor ] { }  ) always clobbers reg byte a 
Statement [94] if((byte*) printf_line_cursor<(byte*) printf_char_cursor) goto printf_ln::@1 [ printf_line_cursor printf_char_cursor ] ( main:4::printf_ln:11 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:15 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:19 [ printf_line_cursor printf_char_cursor ] { }  ) always clobbers reg byte a 
Statement [95] (byte*) printf_char_cursor ← (byte*) printf_line_cursor [ printf_line_cursor printf_char_cursor ] ( main:4::printf_ln:11 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:15 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:19 [ printf_line_cursor printf_char_cursor ] { }  ) always clobbers reg byte a 
Statement [99] (byte*) printf_line_cursor ← (const byte*) printf_screen [ printf_line_cursor ] ( main:4::printf_cls:7 [ printf_line_cursor ] { }  ) always clobbers reg byte a 
Statement [100] (byte*) printf_char_cursor ← (byte*) printf_line_cursor [ printf_line_cursor printf_char_cursor ] ( main:4::printf_cls:7 [ printf_line_cursor printf_char_cursor ] { }  ) always clobbers reg byte a 
Statement [1] (byte*) printf_line_cursor ← (byte*) 1024 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] (byte*) printf_char_cursor ← (byte*) 1024 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [24] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::str#1 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [26] (word) strlen::return#2 ← (word) strlen::len#2 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::return#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a 
Statement [27] (word~) printf_string::$11 ← (word) strlen::return#2 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] { }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] { }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] { }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::$11 ] { }  ) always clobbers reg byte a 
Statement [28] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$11 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::len#0 ] { }  ) always clobbers reg byte a 
Statement [29] (signed byte) printf_string::padding#1 ← (signed byte)(const byte) main::format_min_length#1 - (signed byte) printf_string::len#0 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#1 ] { }  ) always clobbers reg byte a 
Statement [37] (byte*) printf_str::str#1 ← (byte*) printf_string::str#10 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] ( main:4::printf_string:9 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:13 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:17 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:21 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#1 ] { { printf_str::str#1 = printf_string::str#10 } }  ) always clobbers reg byte a 
Statement [52] *((byte*) printf_char_cursor) ← (byte) printf_char::ch#2 [ printf_line_cursor printf_char_cursor ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte y 
Statement [54] if((byte*) printf_char_cursor!=(const byte*) printf_screen+(word)(number) $28*(number) $19) goto printf_char::@return [ printf_line_cursor printf_char_cursor ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Statement [59] (byte*~) printf_char::$8 ← (byte*) printf_char_cursor - (byte) $28 [ printf_char::$8 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char::$8 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char::$8 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char::$8 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char::$8 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char::$8 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Statement [60] (byte*) printf_char_cursor ← (byte*~) printf_char::$8 [ printf_char_cursor ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Statement [61] (byte*) printf_line_cursor ← (byte*) printf_char_cursor [ printf_line_cursor printf_char_cursor ] ( main:4::printf_string:9::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_line_cursor printf_char_cursor ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_line_cursor printf_char_cursor ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Statement [64] if((word) memset::num#2<=(byte) 0) goto memset::@return [ memset::num#2 memset::str#3 memset::c#4 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::num#2 memset::str#3 memset::c#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::num#2 memset::str#3 memset::c#4 ] { }  ) always clobbers reg byte a 
Statement [65] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::str#3 memset::c#4 memset::end#0 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::str#3 memset::c#4 memset::end#0 ] { }  ) always clobbers reg byte a 
Statement [66] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#4 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::c#4 memset::end#0 memset::dst#4 ] { }  ) always clobbers reg byte a 
Statement [68] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a 
Statement [70] *((byte*) memset::dst#2) ← (byte) memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memset:58 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memset:58 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memset:58 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memset::c#4 memset::end#0 memset::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_cls:7::memset:98 [ memset::c#4 memset::end#0 memset::dst#2 ] { }  ) always clobbers reg byte a reg byte y 
Statement [74] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 [ memcpy::src#2 memcpy::dst#2 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a 
Statement [76] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) [ memcpy::src#2 memcpy::dst#2 ] ( main:4::printf_string:9::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:36::printf_char:49::memcpy:56 [ printf_string::format_justify_left#10 printf_string::str#10 printf_string::padding#3 printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#0 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:13::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:17::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:21::printf_padding:42::printf_char:49::memcpy:56 [ printf_padding::length#3 printf_padding::pad#4 printf_padding::i#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_padding::length#1 = printf_padding::length#3 } { printf_char::ch#0 = printf_char::ch#2 printf_padding::pad#4 } }  main:4::printf_string:9::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38::printf_char:84::memcpy:56 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_str::str#2 printf_char_cursor memcpy::src#2 memcpy::dst#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a reg byte y 
Statement [81] if((byte) 0!=*((byte*) printf_str::str#2)) goto printf_str::@2 [ printf_line_cursor printf_char_cursor printf_str::str#2 ] ( main:4::printf_string:9::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:13::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:17::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } }  main:4::printf_string:21::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } }  ) always clobbers reg byte a reg byte y 
Statement [83] (byte) printf_char::ch#1 ← *((byte*) printf_str::str#2) [ printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] ( main:4::printf_string:9::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:13::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:17::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  main:4::printf_string:21::printf_str:38 [ printf_string::format_justify_left#10 printf_string::padding#3 printf_line_cursor printf_char_cursor printf_char::ch#1 printf_str::str#2 ] { { printf_str::str#1 = printf_string::str#10 } { printf_char::ch#1 = printf_char::ch#2 } }  ) always clobbers reg byte a reg byte y 
Statement [88] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 [ strlen::len#2 strlen::str#2 ] ( main:4::printf_string:9::strlen:25 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:13::strlen:25 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:17::strlen:25 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  main:4::printf_string:21::strlen:25 [ printf_line_cursor printf_char_cursor printf_string::format_justify_left#10 printf_string::str#10 strlen::len#2 strlen::str#2 ] { { strlen::str#1 = printf_string::str#10 } { strlen::return#2 = strlen::len#2 } }  ) always clobbers reg byte a reg byte y 
Statement [93] (byte*) printf_line_cursor ← (byte*) printf_line_cursor + (byte) $28 [ printf_line_cursor printf_char_cursor ] ( main:4::printf_ln:11 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:15 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:19 [ printf_line_cursor printf_char_cursor ] { }  ) always clobbers reg byte a 
Statement [94] if((byte*) printf_line_cursor<(byte*) printf_char_cursor) goto printf_ln::@1 [ printf_line_cursor printf_char_cursor ] ( main:4::printf_ln:11 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:15 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:19 [ printf_line_cursor printf_char_cursor ] { }  ) always clobbers reg byte a 
Statement [95] (byte*) printf_char_cursor ← (byte*) printf_line_cursor [ printf_line_cursor printf_char_cursor ] ( main:4::printf_ln:11 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:15 [ printf_line_cursor printf_char_cursor ] { }  main:4::printf_ln:19 [ printf_line_cursor printf_char_cursor ] { }  ) always clobbers reg byte a 
Statement [99] (byte*) printf_line_cursor ← (const byte*) printf_screen [ printf_line_cursor ] ( main:4::printf_cls:7 [ printf_line_cursor ] { }  ) always clobbers reg byte a 
Statement [100] (byte*) printf_char_cursor ← (byte*) printf_line_cursor [ printf_line_cursor printf_char_cursor ] ( main:4::printf_cls:7 [ printf_line_cursor printf_char_cursor ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ printf_string::format_justify_left#10 ] : zp[1]:2 , reg byte x , 
Potential registers zp[2]:3 [ printf_string::str#10 ] : zp[2]:3 , 
Potential registers zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ] : zp[1]:6 , reg byte x , 
Potential registers zp[1]:7 [ printf_padding::pad#4 ] : zp[1]:7 , reg byte x , 
Potential registers zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ] : zp[1]:8 , reg byte x , 
Potential registers zp[1]:9 [ printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:10 [ memset::num#2 ] : zp[2]:10 , 
Potential registers zp[2]:12 [ memset::str#3 ] : zp[2]:12 , 
Potential registers zp[1]:14 [ memset::c#4 ] : zp[1]:14 , reg byte x , 
Potential registers zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ memcpy::src#2 memcpy::src#1 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ memcpy::dst#2 memcpy::dst#1 ] : zp[2]:19 , 
Potential registers zp[2]:21 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ strlen::str#2 strlen::str#1 strlen::str#0 ] : zp[2]:23 , 
Potential registers zp[2]:25 [ strlen::len#2 strlen::len#1 ] : zp[2]:25 , 
Potential registers zp[2]:27 [ printf_line_cursor ] : zp[2]:27 , 
Potential registers zp[2]:29 [ printf_char_cursor ] : zp[2]:29 , 
Potential registers zp[2]:31 [ strlen::return#2 ] : zp[2]:31 , 
Potential registers zp[2]:33 [ printf_string::$11 ] : zp[2]:33 , 
Potential registers zp[1]:35 [ printf_string::len#0 ] : zp[1]:35 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:36 [ printf_char::$8 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ memset::end#0 ] : zp[2]:38 , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 300,000,003: zp[2]:17 [ memcpy::src#2 memcpy::src#1 ] 200,000,002: zp[2]:19 [ memcpy::dst#2 memcpy::dst#1 ] 
Uplift Scope [memset] 35,666,672.33: zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 1,833,333.67: zp[2]:38 [ memset::end#0 ] 1,250,000.12: zp[1]:14 [ memset::c#4 ] 1,000,001: zp[2]:10 [ memset::num#2 ] 0: zp[2]:12 [ memset::str#3 ] 
Uplift Scope [printf_char] 200,002: zp[2]:36 [ printf_char::$8 ] 160,007: zp[1]:9 [ printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] 
Uplift Scope [strlen] 30,887.67: zp[2]:23 [ strlen::str#2 strlen::str#1 strlen::str#0 ] 15,026.75: zp[2]:25 [ strlen::len#2 strlen::len#1 ] 202: zp[2]:31 [ strlen::return#2 ] 
Uplift Scope [printf_padding] 27,502.75: zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ] 2,104.5: zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ] 1,666.83: zp[1]:7 [ printf_padding::pad#4 ] 
Uplift Scope [printf_str] 30,804.25: zp[2]:21 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ] 
Uplift Scope [] 10,465.85: zp[2]:29 [ printf_char_cursor ] 1,639.83: zp[2]:27 [ printf_line_cursor ] 
Uplift Scope [printf_string] 202: zp[1]:35 [ printf_string::len#0 ] 134.67: zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ] 101: zp[2]:33 [ printf_string::$11 ] 14.43: zp[2]:3 [ printf_string::str#10 ] 12.62: zp[1]:2 [ printf_string::format_justify_left#10 ] 
Uplift Scope [RADIX] 
Uplift Scope [printf_format_number] 
Uplift Scope [printf_buffer_number] 
Uplift Scope [printf_format_string] 
Uplift Scope [printf_cls] 
Uplift Scope [printf_ln] 
Uplift Scope [main] 

Uplifting [memcpy] best 11444 combination zp[2]:17 [ memcpy::src#2 memcpy::src#1 ] zp[2]:19 [ memcpy::dst#2 memcpy::dst#1 ] 
Uplifting [memset] best 11428 combination zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:38 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:10 [ memset::num#2 ] zp[2]:12 [ memset::str#3 ] 
Uplifting [printf_char] best 11365 combination zp[2]:36 [ printf_char::$8 ] reg byte a [ printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ] 
Uplifting [strlen] best 11365 combination zp[2]:23 [ strlen::str#2 strlen::str#1 strlen::str#0 ] zp[2]:25 [ strlen::len#2 strlen::len#1 ] zp[2]:31 [ strlen::return#2 ] 
Uplifting [printf_padding] best 11365 combination zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ] zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ] zp[1]:7 [ printf_padding::pad#4 ] 
Uplifting [printf_str] best 11365 combination zp[2]:21 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ] 
Uplifting [] best 11365 combination zp[2]:29 [ printf_char_cursor ] zp[2]:27 [ printf_line_cursor ] 
Uplifting [printf_string] best 11361 combination reg byte a [ printf_string::len#0 ] zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ] zp[2]:33 [ printf_string::$11 ] zp[2]:3 [ printf_string::str#10 ] zp[1]:2 [ printf_string::format_justify_left#10 ] 
Uplifting [RADIX] best 11361 combination 
Uplifting [printf_format_number] best 11361 combination 
Uplifting [printf_buffer_number] best 11361 combination 
Uplifting [printf_format_string] best 11361 combination 
Uplifting [printf_cls] best 11361 combination 
Uplifting [printf_ln] best 11361 combination 
Uplifting [main] best 11361 combination 
Attempting to uplift remaining variables inzp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ]
Uplifting [printf_padding] best 11361 combination zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ] 
Attempting to uplift remaining variables inzp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
Uplifting [printf_padding] best 11361 combination zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ] 
Attempting to uplift remaining variables inzp[1]:7 [ printf_padding::pad#4 ]
Uplifting [printf_padding] best 11361 combination zp[1]:7 [ printf_padding::pad#4 ] 
Attempting to uplift remaining variables inzp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ]
Uplifting [printf_string] best 11361 combination zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ printf_string::format_justify_left#10 ]
Uplifting [printf_string] best 11361 combination zp[1]:2 [ printf_string::format_justify_left#10 ] 
Coalescing zero page register [ zp[2]:29 [ printf_char_cursor ] ] with [ zp[2]:36 [ printf_char::$8 ] ] - score: 2
Coalescing zero page register [ zp[2]:3 [ printf_string::str#10 ] ] with [ zp[2]:21 [ printf_str::str#2 printf_str::str#1 printf_str::str#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:10 [ memset::num#2 ] ] with [ zp[2]:38 [ memset::end#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:12 [ memset::str#3 ] ] with [ zp[2]:15 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ strlen::len#2 strlen::len#1 ] ] with [ zp[2]:31 [ strlen::return#2 ] ] - score: 1
Coalescing zero page register [ zp[2]:25 [ strlen::len#2 strlen::len#1 strlen::return#2 ] ] with [ zp[2]:33 [ printf_string::$11 ] ] - score: 1
Coalescing zero page register [ zp[2]:17 [ memcpy::src#2 memcpy::src#1 ] ] with [ zp[2]:10 [ memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:19 [ memcpy::dst#2 memcpy::dst#1 ] ] with [ zp[2]:12 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:23 [ strlen::str#2 strlen::str#1 strlen::str#0 ] ] with [ zp[2]:17 [ memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ] ]
Coalescing zero page register [ zp[2]:25 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_string::$11 ] ] with [ zp[2]:19 [ memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Allocated (was zp[2]:23) zp[2]:9 [ strlen::str#2 strlen::str#1 strlen::str#0 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ]
Allocated (was zp[2]:25) zp[2]:11 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_string::$11 memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated (was zp[2]:27) zp[2]:13 [ printf_line_cursor ]
Allocated (was zp[2]:29) zp[2]:15 [ printf_char_cursor printf_char::$8 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests printf implementation
// Format a string
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label printf_screen = $400
  .label printf_line_cursor = $d
  .label printf_char_cursor = $f
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (byte*) printf_line_cursor ← (byte*) 1024 -- pbuz1=pbuc1 
  lda #<$400
  sta.z printf_line_cursor
  lda #>$400
  sta.z printf_line_cursor+1
  // [2] (byte*) printf_char_cursor ← (byte*) 1024 -- pbuz1=pbuc1 
  lda #<$400
  sta.z printf_char_cursor
  lda #>$400
  sta.z printf_char_cursor+1
  // [3] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [4] call main 
  // [6] phi from @2 to main [phi:@2->main]
main_from___b2:
  jsr main
  // [5] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    .label format_min_length = $a
    // [7] call printf_cls 
    // [97] phi from main to printf_cls [phi:main->printf_cls]
  printf_cls_from_main:
    jsr printf_cls
    // [8] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [9] call printf_string 
    // [23] phi from main::@1 to printf_string [phi:main::@1->printf_string]
  printf_string_from___b1:
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@1->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@1->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [11] call printf_ln 
    // [92] phi from main::@2 to printf_ln [phi:main::@2->printf_ln]
  printf_ln_from___b2:
    jsr printf_ln
    // [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  __b3_from___b2:
    jmp __b3
    // main::@3
  __b3:
    // [13] call printf_string 
    // [23] phi from main::@3 to printf_string [phi:main::@3->printf_string]
  printf_string_from___b3:
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@3->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@3->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [14] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  __b4_from___b3:
    jmp __b4
    // main::@4
  __b4:
    // [15] call printf_ln 
    // [92] phi from main::@4 to printf_ln [phi:main::@4->printf_ln]
  printf_ln_from___b4:
    jsr printf_ln
    // [16] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
  __b5_from___b4:
    jmp __b5
    // main::@5
  __b5:
    // [17] call printf_string 
    // [23] phi from main::@5 to printf_string [phi:main::@5->printf_string]
  printf_string_from___b5:
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@5->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@5->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [18] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    jmp __b6
    // main::@6
  __b6:
    // [19] call printf_ln 
    // [92] phi from main::@6 to printf_ln [phi:main::@6->printf_ln]
  printf_ln_from___b6:
    jsr printf_ln
    // [20] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
  __b7_from___b6:
    jmp __b7
    // main::@7
  __b7:
    // [21] call printf_string 
    // [23] phi from main::@7 to printf_string [phi:main::@7->printf_string]
  printf_string_from___b7:
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@7->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@7->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    jmp __breturn
    // main::@return
  __breturn:
    // [22] return 
    rts
    str: .text "cml"
    .byte 0
    str1: .text "rules"
    .byte 0
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
// printf_string(byte* zp(3) str, byte zp(2) format_justify_left)
printf_string: {
    .label __11 = $b
    .label padding = 5
    .label str = 3
    .label format_justify_left = 2
    jmp __b3
    // printf_string::@3
  __b3:
    // [24] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 -- pbuz1=pbuz2 
    lda.z str
    sta.z strlen.str
    lda.z str+1
    sta.z strlen.str+1
    // [25] call strlen 
    // [86] phi from printf_string::@3 to strlen [phi:printf_string::@3->strlen]
  strlen_from___b3:
    jsr strlen
    // [26] (word) strlen::return#2 ← (word) strlen::len#2
    jmp __b6
    // printf_string::@6
  __b6:
    // [27] (word~) printf_string::$11 ← (word) strlen::return#2
    // [28] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$11 -- vbsaa=_sbyte_vwuz1 
    lda.z __11
    // [29] (signed byte) printf_string::padding#1 ← (signed byte)(const byte) main::format_min_length#1 - (signed byte) printf_string::len#0 -- vbsz1=vbsc1_minus_vbsaa 
    eor #$ff
    clc
    adc #main.format_min_length+1
    sta.z padding
    // [30] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@10 -- vbsz1_ge_0_then_la1 
    lda.z padding
    cmp #0
    bpl __b10_from___b6
    // [32] phi from printf_string::@6 to printf_string::@1 [phi:printf_string::@6->printf_string::@1]
  __b1_from___b6:
    // [32] phi (signed byte) printf_string::padding#3 = (signed byte) 0 [phi:printf_string::@6->printf_string::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    jmp __b1
    // [31] phi from printf_string::@6 to printf_string::@10 [phi:printf_string::@6->printf_string::@10]
  __b10_from___b6:
    jmp __b10
    // printf_string::@10
  __b10:
    // [32] phi from printf_string::@10 to printf_string::@1 [phi:printf_string::@10->printf_string::@1]
  __b1_from___b10:
    // [32] phi (signed byte) printf_string::padding#3 = (signed byte) printf_string::padding#1 [phi:printf_string::@10->printf_string::@1#0] -- register_copy 
    jmp __b1
    // printf_string::@1
  __b1:
    // [33] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    jmp __b8
    // printf_string::@8
  __b8:
    // [34] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@4 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b4
    jmp __b2
    // printf_string::@4
  __b4:
    // [35] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [36] call printf_padding 
    // [44] phi from printf_string::@4 to printf_padding [phi:printf_string::@4->printf_padding]
  printf_padding_from___b4:
    // [44] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@4->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [44] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#0 [phi:printf_string::@4->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __b2
    // printf_string::@2
  __b2:
    // [37] (byte*) printf_str::str#1 ← (byte*) printf_string::str#10
    // [38] call printf_str 
    // [79] phi from printf_string::@2 to printf_str [phi:printf_string::@2->printf_str]
  printf_str_from___b2:
    jsr printf_str
    jmp __b7
    // printf_string::@7
  __b7:
    // [39] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    jmp __b9
    // printf_string::@9
  __b9:
    // [40] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@5 -- vbsc1_neq_vbsz1_then_la1 
    lda #0
    cmp.z padding
    bne __b5
    jmp __breturn
    // printf_string::@5
  __b5:
    // [41] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [42] call printf_padding 
    // [44] phi from printf_string::@5 to printf_padding [phi:printf_string::@5->printf_padding]
  printf_padding_from___b5:
    // [44] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@5->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [44] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#1 [phi:printf_string::@5->printf_padding#1] -- register_copy 
    jsr printf_padding
    jmp __breturn
    // printf_string::@return
  __breturn:
    // [43] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp(7) pad, byte zp(6) length)
printf_padding: {
    .label i = 8
    .label length = 6
    .label pad = 7
    // [45] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
  __b1_from_printf_padding:
    // [45] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // printf_padding::@1
  __b1:
    // [46] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    jmp __breturn
    // printf_padding::@return
  __breturn:
    // [47] return 
    rts
    // printf_padding::@2
  __b2:
    // [48] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#4 -- vbuaa=vbuz1 
    lda.z pad
    // [49] call printf_char 
    // [51] phi from printf_padding::@2 to printf_char [phi:printf_padding::@2->printf_char]
  printf_char_from___b2:
    // [51] phi (byte) printf_char::ch#2 = (byte) printf_char::ch#0 [phi:printf_padding::@2->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_padding::@3
  __b3:
    // [50] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [45] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
  __b1_from___b3:
    // [45] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte register(A) ch)
printf_char: {
    .label __8 = $f
    // [52] *((byte*) printf_char_cursor) ← (byte) printf_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (printf_char_cursor),y
    // [53] (byte*) printf_char_cursor ← ++ (byte*) printf_char_cursor -- pbuz1=_inc_pbuz1 
    inc.z printf_char_cursor
    bne !+
    inc.z printf_char_cursor+1
  !:
    // [54] if((byte*) printf_char_cursor!=(const byte*) printf_screen+(word)(number) $28*(number) $19) goto printf_char::@return -- pbuz1_neq_pbuc1_then_la1 
    lda.z printf_char_cursor+1
    cmp #>printf_screen+$28*$19
    bne __breturn
    lda.z printf_char_cursor
    cmp #<printf_screen+$28*$19
    bne __breturn
    // [55] phi from printf_char to printf_char::@1 [phi:printf_char->printf_char::@1]
  __b1_from_printf_char:
    jmp __b1
    // printf_char::@1
  __b1:
    // [56] call memcpy 
    // [72] phi from printf_char::@1 to memcpy [phi:printf_char::@1->memcpy]
  memcpy_from___b1:
    jsr memcpy
    // [57] phi from printf_char::@1 to printf_char::@2 [phi:printf_char::@1->printf_char::@2]
  __b2_from___b1:
    jmp __b2
    // printf_char::@2
  __b2:
    // [58] call memset 
    // [63] phi from printf_char::@2 to memset [phi:printf_char::@2->memset]
  memset_from___b2:
    // [63] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_char::@2->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [63] phi (void*) memset::str#3 = (void*)(const byte*) printf_screen+(word)(number) $28*(number) $19-(byte) $28 [phi:printf_char::@2->memset#1] -- pvoz1=pvoc1 
    lda #<printf_screen+$28*$19-$28
    sta.z memset.str
    lda #>printf_screen+$28*$19-$28
    sta.z memset.str+1
    // [63] phi (word) memset::num#2 = (byte) $28 [phi:printf_char::@2->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    jmp __b3
    // printf_char::@3
  __b3:
    // [59] (byte*~) printf_char::$8 ← (byte*) printf_char_cursor - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // [60] (byte*) printf_char_cursor ← (byte*~) printf_char::$8
    // [61] (byte*) printf_line_cursor ← (byte*) printf_char_cursor -- pbuz1=pbuz2 
    lda.z printf_char_cursor
    sta.z printf_line_cursor
    lda.z printf_char_cursor+1
    sta.z printf_line_cursor+1
    jmp __breturn
    // printf_char::@return
  __breturn:
    // [62] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($b) str, byte register(X) c, word zp(9) num)
memset: {
    .label end = 9
    .label dst = $b
    .label num = 9
    .label str = $b
    // [64] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    jmp __b1
    // memset::@1
  __b1:
    // [65] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [66] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [67] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [67] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [68] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [69] return 
    rts
    // memset::@3
  __b3:
    // [70] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [71] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = printf_screen
    .const num = $28*$19-$28
    .label source = printf_screen+$28
    .label src_end = source+num
    .label dst = $b
    .label src = 9
    // [73] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
  __b1_from_memcpy:
    // [73] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [73] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    jmp __b1
    // memcpy::@1
  __b1:
    // [74] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [75] return 
    rts
    // memcpy::@2
  __b2:
    // [76] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [77] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [78] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [73] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
  __b1_from___b2:
    // [73] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [73] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_str
// Print a zero-terminated string
// printf_str(byte* zp(3) str)
printf_str: {
    .label str = 3
    // [80] phi from printf_str printf_str::@3 to printf_str::@1 [phi:printf_str/printf_str::@3->printf_str::@1]
  __b1_from_printf_str:
  __b1_from___b3:
    // [80] phi (byte*) printf_str::str#2 = (byte*) printf_str::str#1 [phi:printf_str/printf_str::@3->printf_str::@1#0] -- register_copy 
    jmp __b1
    // printf_str::@1
  __b1:
    // [81] if((byte) 0!=*((byte*) printf_str::str#2)) goto printf_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // printf_str::@return
  __breturn:
    // [82] return 
    rts
    // printf_str::@2
  __b2:
    // [83] (byte) printf_char::ch#1 ← *((byte*) printf_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [84] call printf_char 
    // [51] phi from printf_str::@2 to printf_char [phi:printf_str::@2->printf_char]
  printf_char_from___b2:
    // [51] phi (byte) printf_char::ch#2 = (byte) printf_char::ch#1 [phi:printf_str::@2->printf_char#0] -- register_copy 
    jsr printf_char
    jmp __b3
    // printf_str::@3
  __b3:
    // [85] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp(9) str)
strlen: {
    .label len = $b
    .label str = 9
    .label return = $b
    // [87] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
  __b1_from_strlen:
    // [87] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    lda #>0
    sta.z len+1
    // [87] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    jmp __b1
    // strlen::@1
  __b1:
    // [88] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // strlen::@return
  __breturn:
    // [89] return 
    rts
    // strlen::@2
  __b2:
    // [90] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // [91] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [87] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
  __b1_from___b2:
    // [87] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [87] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // printf_ln
// Print a newline
printf_ln: {
    jmp __b1
    // printf_ln::@1
  __b1:
    // [93] (byte*) printf_line_cursor ← (byte*) printf_line_cursor + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z printf_line_cursor
    sta.z printf_line_cursor
    bcc !+
    inc.z printf_line_cursor+1
  !:
    // [94] if((byte*) printf_line_cursor<(byte*) printf_char_cursor) goto printf_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z printf_line_cursor+1
    cmp.z printf_char_cursor+1
    bcc __b1
    bne !+
    lda.z printf_line_cursor
    cmp.z printf_char_cursor
    bcc __b1
  !:
    jmp __b2
    // printf_ln::@2
  __b2:
    // [95] (byte*) printf_char_cursor ← (byte*) printf_line_cursor -- pbuz1=pbuz2 
    lda.z printf_line_cursor
    sta.z printf_char_cursor
    lda.z printf_line_cursor+1
    sta.z printf_char_cursor+1
    jmp __breturn
    // printf_ln::@return
  __breturn:
    // [96] return 
    rts
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // [98] call memset 
    // [63] phi from printf_cls to memset [phi:printf_cls->memset]
  memset_from_printf_cls:
    // [63] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [63] phi (void*) memset::str#3 = (void*)(const byte*) printf_screen [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<printf_screen
    sta.z memset.str
    lda #>printf_screen
    sta.z memset.str+1
    // [63] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    jmp __b1
    // printf_cls::@1
  __b1:
    // [99] (byte*) printf_line_cursor ← (const byte*) printf_screen -- pbuz1=pbuc1 
    lda #<printf_screen
    sta.z printf_line_cursor
    lda #>printf_screen
    sta.z printf_line_cursor+1
    // [100] (byte*) printf_char_cursor ← (byte*) printf_line_cursor -- pbuz1=pbuz2 
    lda.z printf_line_cursor
    sta.z printf_char_cursor
    lda.z printf_line_cursor+1
    sta.z printf_char_cursor+1
    jmp __breturn
    // printf_cls::@return
  __breturn:
    // [101] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b6
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b8
Removing instruction jmp __b2
Removing instruction jmp __b7
Removing instruction jmp __b9
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda.z padding
Removing instruction ldy #0
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b10_from___b6 with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction main_from___b2:
Removing instruction __bend_from___b2:
Removing instruction __b1_from_main:
Removing instruction printf_string_from___b1:
Removing instruction __b2_from___b1:
Removing instruction printf_ln_from___b2:
Removing instruction __b3_from___b2:
Removing instruction printf_string_from___b3:
Removing instruction __b4_from___b3:
Removing instruction printf_ln_from___b4:
Removing instruction __b5_from___b4:
Removing instruction printf_string_from___b5:
Removing instruction __b6_from___b5:
Removing instruction printf_ln_from___b6:
Removing instruction __b7_from___b6:
Removing instruction printf_string_from___b7:
Removing instruction __b10_from___b6:
Removing instruction __b10:
Removing instruction __b1_from___b10:
Removing instruction printf_str_from___b2:
Removing instruction __b1_from_printf_char:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memset_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_printf_str:
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction printf_cls_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction strlen_from___b3:
Removing instruction __b6:
Removing instruction __b1_from___b6:
Removing instruction __b8:
Removing instruction printf_padding_from___b4:
Removing instruction __b7:
Removing instruction __b9:
Removing instruction printf_padding_from___b5:
Removing instruction __b1_from_printf_padding:
Removing instruction __breturn:
Removing instruction printf_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1:
Removing instruction __b1_from_memcpy:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __breturn:
Removing instruction printf_char_from___b2:
Removing instruction __b3:
Removing instruction __b1_from_strlen:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction memset_from_printf_cls:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@return
(byte) main::format_justify_left
(byte) main::format_min_length
(const byte) main::format_min_length#1 format_min_length = (byte) $a
(const byte*) main::str[(byte) 4]  = (byte*) "cml"
(const byte*) main::str1[(byte) 6]  = (byte*) "rules"
(void*()) memcpy((void*) memcpy::destination , (void*) memcpy::source , (word) memcpy::num)
(label) memcpy::@1
(label) memcpy::@2
(label) memcpy::@return
(void*) memcpy::destination
(const void*) memcpy::destination#0 destination = (void*)(const byte*) printf_screen
(byte*) memcpy::dst
(byte*) memcpy::dst#1 dst zp[2]:11 1.00000001E8
(byte*) memcpy::dst#2 dst zp[2]:11 1.00000001E8
(word) memcpy::num
(const word) memcpy::num#0 num = (word)(number) $28*(number) $19-(number) $28
(void*) memcpy::return
(void*) memcpy::source
(const void*) memcpy::source#0 source = (void*)(const byte*) printf_screen+(byte) $28
(byte*) memcpy::src
(byte*) memcpy::src#1 src zp[2]:9 2.00000002E8
(byte*) memcpy::src#2 src zp[2]:9 1.00000001E8
(byte*) memcpy::src_end
(const byte*) memcpy::src_end#0 src_end = (byte*)(const void*) memcpy::source#0+(const word) memcpy::num#0
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(byte) memset::c#4 reg byte x 1250000.125
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:11 2.0000002E7
(byte*) memset::dst#2 dst zp[2]:11 1.3666668333333332E7
(byte*) memset::dst#4 dst zp[2]:11 2000002.0
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:9 1833333.6666666665
(word) memset::num
(word) memset::num#2 num zp[2]:9 1000001.0
(void*) memset::return
(void*) memset::str
(void*) memset::str#3 str zp[2]:11
(const byte*) printf_buffer_number::digits[(number) $b]  = { fill( $b, 0) }
(byte) printf_buffer_number::sign
(void()) printf_char((byte) printf_char::ch)
(byte*~) printf_char::$8 zp[2]:15 200002.0
(label) printf_char::@1
(label) printf_char::@2
(label) printf_char::@3
(label) printf_char::@return
(byte) printf_char::ch
(byte) printf_char::ch#0 reg byte a 20002.0
(byte) printf_char::ch#1 reg byte a 20002.0
(byte) printf_char::ch#2 reg byte a 120003.0
(byte*) printf_char_cursor loadstore zp[2]:15 10465.85074626866
(void()) printf_cls()
(label) printf_cls::@1
(label) printf_cls::@return
(byte) printf_format_number::justify_left
(byte) printf_format_number::min_length
(byte) printf_format_number::radix
(byte) printf_format_number::sign_always
(byte) printf_format_number::zero_padding
(byte) printf_format_string::justify_left
(byte) printf_format_string::min_length
(byte*) printf_line_cursor loadstore zp[2]:13 1639.825396825397
(void()) printf_ln()
(label) printf_ln::@1
(label) printf_ln::@2
(label) printf_ln::@return
(void()) printf_padding((byte) printf_padding::pad , (byte) printf_padding::length)
(label) printf_padding::@1
(label) printf_padding::@2
(label) printf_padding::@3
(label) printf_padding::@return
(byte) printf_padding::i
(byte) printf_padding::i#1 i zp[1]:8 20002.0
(byte) printf_padding::i#2 i zp[1]:8 7500.75
(byte) printf_padding::length
(byte) printf_padding::length#0 length zp[1]:6 202.0
(byte) printf_padding::length#1 length zp[1]:6 202.0
(byte) printf_padding::length#3 length zp[1]:6 1700.5
(byte) printf_padding::pad
(byte) printf_padding::pad#4 pad zp[1]:7 1666.8333333333333
(const byte*) printf_screen = (byte*) 1024
(void()) printf_str((byte*) printf_str::str)
(label) printf_str::@1
(label) printf_str::@2
(label) printf_str::@3
(label) printf_str::@return
(byte*) printf_str::str
(byte*) printf_str::str#0 str zp[2]:3 20002.0
(byte*) printf_str::str#1 str zp[2]:3 551.0
(byte*) printf_str::str#2 str zp[2]:3 10251.25
(void()) printf_string((byte*) printf_string::str , (byte) printf_string::format_min_length , (byte) printf_string::format_justify_left)
(word~) printf_string::$11 zp[2]:11 101.0
(label) printf_string::@1
(label) printf_string::@10
(label) printf_string::@2
(label) printf_string::@3
(label) printf_string::@4
(label) printf_string::@5
(label) printf_string::@6
(label) printf_string::@7
(label) printf_string::@8
(label) printf_string::@9
(label) printf_string::@return
(struct printf_format_string) printf_string::format
(byte) printf_string::format_justify_left
(byte) printf_string::format_justify_left#10 format_justify_left zp[1]:2 12.625
(byte) printf_string::format_min_length
(signed byte) printf_string::len
(signed byte) printf_string::len#0 reg byte a 202.0
(signed byte) printf_string::padding
(signed byte) printf_string::padding#1 padding zp[1]:5 101.0
(signed byte) printf_string::padding#3 padding zp[1]:5 33.666666666666664
(byte*) printf_string::str
(byte*) printf_string::str#10 str zp[2]:3 14.428571428571429
(word()) strlen((byte*) strlen::str)
(label) strlen::@1
(label) strlen::@2
(label) strlen::@return
(word) strlen::len
(word) strlen::len#1 len zp[2]:11 10001.0
(word) strlen::len#2 len zp[2]:11 5025.75
(word) strlen::return
(word) strlen::return#2 return zp[2]:11 202.0
(byte*) strlen::str
(byte*) strlen::str#0 str zp[2]:9 20002.0
(byte*) strlen::str#1 str zp[2]:9 551.0
(byte*) strlen::str#2 str zp[2]:9 10334.666666666666

zp[1]:2 [ printf_string::format_justify_left#10 ]
zp[2]:3 [ printf_string::str#10 printf_str::str#2 printf_str::str#1 printf_str::str#0 ]
zp[1]:5 [ printf_string::padding#3 printf_string::padding#1 ]
zp[1]:6 [ printf_padding::length#3 printf_padding::length#0 printf_padding::length#1 ]
zp[1]:7 [ printf_padding::pad#4 ]
zp[1]:8 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte a [ printf_char::ch#2 printf_char::ch#0 printf_char::ch#1 ]
reg byte x [ memset::c#4 ]
zp[2]:9 [ strlen::str#2 strlen::str#1 strlen::str#0 memcpy::src#2 memcpy::src#1 memset::num#2 memset::end#0 ]
zp[2]:11 [ strlen::len#2 strlen::len#1 strlen::return#2 printf_string::$11 memcpy::dst#2 memcpy::dst#1 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
zp[2]:13 [ printf_line_cursor ]
zp[2]:15 [ printf_char_cursor printf_char::$8 ]
reg byte a [ printf_string::len#0 ]


FINAL ASSEMBLER
Score: 10036

  // File Comments
// Tests printf implementation
// Format a string
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label printf_screen = $400
  .label printf_line_cursor = $d
  .label printf_char_cursor = $f
  // @begin
__bbegin:
  // @1
  // printf_line_cursor = PRINTF_SCREEN_ADDRESS
  // [1] (byte*) printf_line_cursor ← (byte*) 1024 -- pbuz1=pbuc1 
  lda #<$400
  sta.z printf_line_cursor
  lda #>$400
  sta.z printf_line_cursor+1
  // printf_char_cursor = PRINTF_SCREEN_ADDRESS
  // [2] (byte*) printf_char_cursor ← (byte*) 1024 -- pbuz1=pbuc1 
  lda #<$400
  sta.z printf_char_cursor
  lda #>$400
  sta.z printf_char_cursor+1
  // [3] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [4] call main 
  // [6] phi from @2 to main [phi:@2->main]
  jsr main
  rts
  // [5] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    .label format_min_length = $a
    // printf_cls()
    // [7] call printf_cls 
    // [97] phi from main to printf_cls [phi:main->printf_cls]
    jsr printf_cls
    // [8] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // printf_string( "cml", format)
    // [9] call printf_string 
    // [23] phi from main::@1 to printf_string [phi:main::@1->printf_string]
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@1->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@1->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [10] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
    // printf_ln()
    // [11] call printf_ln 
    // [92] phi from main::@2 to printf_ln [phi:main::@2->printf_ln]
    jsr printf_ln
    // [12] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
    // main::@3
    // printf_string( "rules", format)
    // [13] call printf_string 
    // [23] phi from main::@3 to printf_string [phi:main::@3->printf_string]
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@3->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 0 [phi:main::@3->printf_string#1] -- vbuz1=vbuc1 
    lda #0
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [14] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
    // main::@4
    // printf_ln()
    // [15] call printf_ln 
    // [92] phi from main::@4 to printf_ln [phi:main::@4->printf_ln]
    jsr printf_ln
    // [16] phi from main::@4 to main::@5 [phi:main::@4->main::@5]
    // main::@5
    // printf_string( "cml", format)
    // [17] call printf_string 
    // [23] phi from main::@5 to printf_string [phi:main::@5->printf_string]
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str [phi:main::@5->printf_string#0] -- pbuz1=pbuc1 
    lda #<str
    sta.z printf_string.str
    lda #>str
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@5->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    // [18] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // main::@6
    // printf_ln()
    // [19] call printf_ln 
    // [92] phi from main::@6 to printf_ln [phi:main::@6->printf_ln]
    jsr printf_ln
    // [20] phi from main::@6 to main::@7 [phi:main::@6->main::@7]
    // main::@7
    // printf_string( "rules", format)
    // [21] call printf_string 
    // [23] phi from main::@7 to printf_string [phi:main::@7->printf_string]
    // [23] phi (byte*) printf_string::str#10 = (const byte*) main::str1 [phi:main::@7->printf_string#0] -- pbuz1=pbuc1 
    lda #<str1
    sta.z printf_string.str
    lda #>str1
    sta.z printf_string.str+1
    // [23] phi (byte) printf_string::format_justify_left#10 = (byte) 1 [phi:main::@7->printf_string#1] -- vbuz1=vbuc1 
    lda #1
    sta.z printf_string.format_justify_left
    jsr printf_string
    // main::@return
    // }
    // [22] return 
    rts
    str: .text "cml"
    .byte 0
    str1: .text "rules"
    .byte 0
}
  // printf_string
// Print a string value using a specific format
// Handles justification and min length 
// printf_string(byte* zp(3) str, byte zp(2) format_justify_left)
printf_string: {
    .label __11 = $b
    .label padding = 5
    .label str = 3
    .label format_justify_left = 2
    // printf_string::@3
    // strlen(str)
    // [24] (byte*) strlen::str#1 ← (byte*) printf_string::str#10 -- pbuz1=pbuz2 
    lda.z str
    sta.z strlen.str
    lda.z str+1
    sta.z strlen.str+1
    // [25] call strlen 
    // [86] phi from printf_string::@3 to strlen [phi:printf_string::@3->strlen]
    jsr strlen
    // strlen(str)
    // [26] (word) strlen::return#2 ← (word) strlen::len#2
    // printf_string::@6
    // [27] (word~) printf_string::$11 ← (word) strlen::return#2
    // len = (signed char)strlen(str)
    // [28] (signed byte) printf_string::len#0 ← (signed byte)(word~) printf_string::$11 -- vbsaa=_sbyte_vwuz1 
    lda.z __11
    // padding = (signed char)format.min_length  - len
    // [29] (signed byte) printf_string::padding#1 ← (signed byte)(const byte) main::format_min_length#1 - (signed byte) printf_string::len#0 -- vbsz1=vbsc1_minus_vbsaa 
    eor #$ff
    clc
    adc #main.format_min_length+1
    sta.z padding
    // if(padding<0)
    // [30] if((signed byte) printf_string::padding#1>=(signed byte) 0) goto printf_string::@10 -- vbsz1_ge_0_then_la1 
    cmp #0
    bpl __b1
    // [32] phi from printf_string::@6 to printf_string::@1 [phi:printf_string::@6->printf_string::@1]
    // [32] phi (signed byte) printf_string::padding#3 = (signed byte) 0 [phi:printf_string::@6->printf_string::@1#0] -- vbsz1=vbsc1 
    lda #0
    sta.z padding
    // [31] phi from printf_string::@6 to printf_string::@10 [phi:printf_string::@6->printf_string::@10]
    // printf_string::@10
    // [32] phi from printf_string::@10 to printf_string::@1 [phi:printf_string::@10->printf_string::@1]
    // [32] phi (signed byte) printf_string::padding#3 = (signed byte) printf_string::padding#1 [phi:printf_string::@10->printf_string::@1#0] -- register_copy 
    // printf_string::@1
  __b1:
    // if(!format.justify_left && padding)
    // [33] if((byte) 0!=(byte) printf_string::format_justify_left#10) goto printf_string::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    bne __b2
    // printf_string::@8
    // [34] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@4 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b4
    jmp __b2
    // printf_string::@4
  __b4:
    // printf_padding(' ',(char)padding)
    // [35] (byte) printf_padding::length#0 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [36] call printf_padding 
    // [44] phi from printf_string::@4 to printf_padding [phi:printf_string::@4->printf_padding]
    // [44] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@4->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [44] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#0 [phi:printf_string::@4->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_string::@2
  __b2:
    // printf_str(str)
    // [37] (byte*) printf_str::str#1 ← (byte*) printf_string::str#10
    // [38] call printf_str 
    // [79] phi from printf_string::@2 to printf_str [phi:printf_string::@2->printf_str]
    jsr printf_str
    // printf_string::@7
    // if(format.justify_left && padding)
    // [39] if((byte) 0==(byte) printf_string::format_justify_left#10) goto printf_string::@return -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z format_justify_left
    beq __breturn
    // printf_string::@9
    // [40] if((signed byte) 0!=(signed byte) printf_string::padding#3) goto printf_string::@5 -- vbsc1_neq_vbsz1_then_la1 
    cmp.z padding
    bne __b5
    rts
    // printf_string::@5
  __b5:
    // printf_padding(' ',(char)padding)
    // [41] (byte) printf_padding::length#1 ← (byte)(signed byte) printf_string::padding#3 -- vbuz1=vbuz2 
    lda.z padding
    sta.z printf_padding.length
    // [42] call printf_padding 
    // [44] phi from printf_string::@5 to printf_padding [phi:printf_string::@5->printf_padding]
    // [44] phi (byte) printf_padding::pad#4 = (byte) ' ' [phi:printf_string::@5->printf_padding#0] -- vbuz1=vbuc1 
    lda #' '
    sta.z printf_padding.pad
    // [44] phi (byte) printf_padding::length#3 = (byte) printf_padding::length#1 [phi:printf_string::@5->printf_padding#1] -- register_copy 
    jsr printf_padding
    // printf_string::@return
  __breturn:
    // }
    // [43] return 
    rts
}
  // printf_padding
// Print a padding char a number of times
// printf_padding(byte zp(7) pad, byte zp(6) length)
printf_padding: {
    .label i = 8
    .label length = 6
    .label pad = 7
    // [45] phi from printf_padding to printf_padding::@1 [phi:printf_padding->printf_padding::@1]
    // [45] phi (byte) printf_padding::i#2 = (byte) 0 [phi:printf_padding->printf_padding::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // printf_padding::@1
  __b1:
    // for(char i=0;i<length; i++)
    // [46] if((byte) printf_padding::i#2<(byte) printf_padding::length#3) goto printf_padding::@2 -- vbuz1_lt_vbuz2_then_la1 
    lda.z i
    cmp.z length
    bcc __b2
    // printf_padding::@return
    // }
    // [47] return 
    rts
    // printf_padding::@2
  __b2:
    // printf_char(pad)
    // [48] (byte) printf_char::ch#0 ← (byte) printf_padding::pad#4 -- vbuaa=vbuz1 
    lda.z pad
    // [49] call printf_char 
    // [51] phi from printf_padding::@2 to printf_char [phi:printf_padding::@2->printf_char]
    // [51] phi (byte) printf_char::ch#2 = (byte) printf_char::ch#0 [phi:printf_padding::@2->printf_char#0] -- register_copy 
    jsr printf_char
    // printf_padding::@3
    // for(char i=0;i<length; i++)
    // [50] (byte) printf_padding::i#1 ← ++ (byte) printf_padding::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [45] phi from printf_padding::@3 to printf_padding::@1 [phi:printf_padding::@3->printf_padding::@1]
    // [45] phi (byte) printf_padding::i#2 = (byte) printf_padding::i#1 [phi:printf_padding::@3->printf_padding::@1#0] -- register_copy 
    jmp __b1
}
  // printf_char
// Print a single char
// If the end of the screen is reached scroll it up one char and place the cursor at the
// printf_char(byte register(A) ch)
printf_char: {
    .label __8 = $f
    // *(printf_char_cursor++) = ch
    // [52] *((byte*) printf_char_cursor) ← (byte) printf_char::ch#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (printf_char_cursor),y
    // *(printf_char_cursor++) = ch;
    // [53] (byte*) printf_char_cursor ← ++ (byte*) printf_char_cursor -- pbuz1=_inc_pbuz1 
    inc.z printf_char_cursor
    bne !+
    inc.z printf_char_cursor+1
  !:
    // if(printf_char_cursor==printf_screen+PRINTF_SCREEN_BYTES)
    // [54] if((byte*) printf_char_cursor!=(const byte*) printf_screen+(word)(number) $28*(number) $19) goto printf_char::@return -- pbuz1_neq_pbuc1_then_la1 
    lda.z printf_char_cursor+1
    cmp #>printf_screen+$28*$19
    bne __breturn
    lda.z printf_char_cursor
    cmp #<printf_screen+$28*$19
    bne __breturn
    // [55] phi from printf_char to printf_char::@1 [phi:printf_char->printf_char::@1]
    // printf_char::@1
    // memcpy(printf_screen, printf_screen+PRINTF_SCREEN_WIDTH, PRINTF_SCREEN_BYTES-PRINTF_SCREEN_WIDTH)
    // [56] call memcpy 
    // [72] phi from printf_char::@1 to memcpy [phi:printf_char::@1->memcpy]
    jsr memcpy
    // [57] phi from printf_char::@1 to printf_char::@2 [phi:printf_char::@1->printf_char::@2]
    // printf_char::@2
    // memset(printf_screen+PRINTF_SCREEN_BYTES-PRINTF_SCREEN_WIDTH, ' ', PRINTF_SCREEN_WIDTH)
    // [58] call memset 
    // [63] phi from printf_char::@2 to memset [phi:printf_char::@2->memset]
    // [63] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_char::@2->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [63] phi (void*) memset::str#3 = (void*)(const byte*) printf_screen+(word)(number) $28*(number) $19-(byte) $28 [phi:printf_char::@2->memset#1] -- pvoz1=pvoc1 
    lda #<printf_screen+$28*$19-$28
    sta.z memset.str
    lda #>printf_screen+$28*$19-$28
    sta.z memset.str+1
    // [63] phi (word) memset::num#2 = (byte) $28 [phi:printf_char::@2->memset#2] -- vwuz1=vbuc1 
    lda #<$28
    sta.z memset.num
    lda #>$28
    sta.z memset.num+1
    jsr memset
    // printf_char::@3
    // printf_char_cursor-PRINTF_SCREEN_WIDTH
    // [59] (byte*~) printf_char::$8 ← (byte*) printf_char_cursor - (byte) $28 -- pbuz1=pbuz1_minus_vwuc1 
    lda.z __8
    sec
    sbc #<$28
    sta.z __8
    lda.z __8+1
    sbc #>$28
    sta.z __8+1
    // printf_char_cursor = printf_char_cursor-PRINTF_SCREEN_WIDTH
    // [60] (byte*) printf_char_cursor ← (byte*~) printf_char::$8
    // printf_line_cursor = printf_char_cursor
    // [61] (byte*) printf_line_cursor ← (byte*) printf_char_cursor -- pbuz1=pbuz2 
    lda.z printf_char_cursor
    sta.z printf_line_cursor
    lda.z printf_char_cursor+1
    sta.z printf_line_cursor+1
    // printf_char::@return
  __breturn:
    // }
    // [62] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($b) str, byte register(X) c, word zp(9) num)
memset: {
    .label end = 9
    .label dst = $b
    .label num = 9
    .label str = $b
    // if(num>0)
    // [64] if((word) memset::num#2<=(byte) 0) goto memset::@return -- vwuz1_le_0_then_la1 
    lda.z num
    bne !+
    lda.z num+1
    beq __breturn
  !:
    // memset::@1
    // end = (char*)str + num
    // [65] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2 -- pbuz1=pbuz2_plus_vwuz1 
    lda.z end
    clc
    adc.z str
    sta.z end
    lda.z end+1
    adc.z str+1
    sta.z end+1
    // [66] (byte*) memset::dst#4 ← (byte*)(void*) memset::str#3
    // [67] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [67] phi (byte*) memset::dst#2 = (byte*) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [68] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
  __breturn:
    // }
    // [69] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [70] *((byte*) memset::dst#2) ← (byte) memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [71] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
memcpy: {
    .label destination = printf_screen
    .const num = $28*$19-$28
    .label source = printf_screen+$28
    .label src_end = source+num
    .label dst = $b
    .label src = 9
    // [73] phi from memcpy to memcpy::@1 [phi:memcpy->memcpy::@1]
    // [73] phi (byte*) memcpy::dst#2 = (byte*)(const void*) memcpy::destination#0 [phi:memcpy->memcpy::@1#0] -- pbuz1=pbuc1 
    lda #<destination
    sta.z dst
    lda #>destination
    sta.z dst+1
    // [73] phi (byte*) memcpy::src#2 = (byte*)(const void*) memcpy::source#0 [phi:memcpy->memcpy::@1#1] -- pbuz1=pbuc1 
    lda #<source
    sta.z src
    lda #>source
    sta.z src+1
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [74] if((byte*) memcpy::src#2!=(const byte*) memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuc1_then_la1 
    lda.z src+1
    cmp #>src_end
    bne __b2
    lda.z src
    cmp #<src_end
    bne __b2
    // memcpy::@return
    // }
    // [75] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [76] *((byte*) memcpy::dst#2) ← *((byte*) memcpy::src#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [77] (byte*) memcpy::dst#1 ← ++ (byte*) memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [78] (byte*) memcpy::src#1 ← ++ (byte*) memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    // [73] phi from memcpy::@2 to memcpy::@1 [phi:memcpy::@2->memcpy::@1]
    // [73] phi (byte*) memcpy::dst#2 = (byte*) memcpy::dst#1 [phi:memcpy::@2->memcpy::@1#0] -- register_copy 
    // [73] phi (byte*) memcpy::src#2 = (byte*) memcpy::src#1 [phi:memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
}
  // printf_str
// Print a zero-terminated string
// printf_str(byte* zp(3) str)
printf_str: {
    .label str = 3
    // [80] phi from printf_str printf_str::@3 to printf_str::@1 [phi:printf_str/printf_str::@3->printf_str::@1]
    // [80] phi (byte*) printf_str::str#2 = (byte*) printf_str::str#1 [phi:printf_str/printf_str::@3->printf_str::@1#0] -- register_copy 
    // printf_str::@1
  __b1:
    // while(*str)
    // [81] if((byte) 0!=*((byte*) printf_str::str#2)) goto printf_str::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // printf_str::@return
    // }
    // [82] return 
    rts
    // printf_str::@2
  __b2:
    // printf_char(*str++)
    // [83] (byte) printf_char::ch#1 ← *((byte*) printf_str::str#2) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [84] call printf_char 
    // [51] phi from printf_str::@2 to printf_char [phi:printf_str::@2->printf_char]
    // [51] phi (byte) printf_char::ch#2 = (byte) printf_char::ch#1 [phi:printf_str::@2->printf_char#0] -- register_copy 
    jsr printf_char
    // printf_str::@3
    // printf_char(*str++);
    // [85] (byte*) printf_str::str#0 ← ++ (byte*) printf_str::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // strlen
// Computes the length of the string str up to but not including the terminating null character.
// strlen(byte* zp(9) str)
strlen: {
    .label len = $b
    .label str = 9
    .label return = $b
    // [87] phi from strlen to strlen::@1 [phi:strlen->strlen::@1]
    // [87] phi (word) strlen::len#2 = (word) 0 [phi:strlen->strlen::@1#0] -- vwuz1=vwuc1 
    lda #<0
    sta.z len
    sta.z len+1
    // [87] phi (byte*) strlen::str#2 = (byte*) strlen::str#1 [phi:strlen->strlen::@1#1] -- register_copy 
    // strlen::@1
  __b1:
    // while(*str)
    // [88] if((byte) 0!=*((byte*) strlen::str#2)) goto strlen::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // strlen::@return
    // }
    // [89] return 
    rts
    // strlen::@2
  __b2:
    // len++;
    // [90] (word) strlen::len#1 ← ++ (word) strlen::len#2 -- vwuz1=_inc_vwuz1 
    inc.z len
    bne !+
    inc.z len+1
  !:
    // str++;
    // [91] (byte*) strlen::str#0 ← ++ (byte*) strlen::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [87] phi from strlen::@2 to strlen::@1 [phi:strlen::@2->strlen::@1]
    // [87] phi (word) strlen::len#2 = (word) strlen::len#1 [phi:strlen::@2->strlen::@1#0] -- register_copy 
    // [87] phi (byte*) strlen::str#2 = (byte*) strlen::str#0 [phi:strlen::@2->strlen::@1#1] -- register_copy 
    jmp __b1
}
  // printf_ln
// Print a newline
printf_ln: {
    // printf_ln::@1
  __b1:
    // printf_line_cursor +=  PRINTF_SCREEN_WIDTH
    // [93] (byte*) printf_line_cursor ← (byte*) printf_line_cursor + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z printf_line_cursor
    sta.z printf_line_cursor
    bcc !+
    inc.z printf_line_cursor+1
  !:
    // while (printf_line_cursor<printf_char_cursor)
    // [94] if((byte*) printf_line_cursor<(byte*) printf_char_cursor) goto printf_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z printf_line_cursor+1
    cmp.z printf_char_cursor+1
    bcc __b1
    bne !+
    lda.z printf_line_cursor
    cmp.z printf_char_cursor
    bcc __b1
  !:
    // printf_ln::@2
    // printf_char_cursor = printf_line_cursor
    // [95] (byte*) printf_char_cursor ← (byte*) printf_line_cursor -- pbuz1=pbuz2 
    lda.z printf_line_cursor
    sta.z printf_char_cursor
    lda.z printf_line_cursor+1
    sta.z printf_char_cursor+1
    // printf_ln::@return
    // }
    // [96] return 
    rts
}
  // printf_cls
// Clear the screen. Also resets current line/char cursor.
printf_cls: {
    // memset(printf_screen, ' ', PRINTF_SCREEN_BYTES)
    // [98] call memset 
    // [63] phi from printf_cls to memset [phi:printf_cls->memset]
    // [63] phi (byte) memset::c#4 = (byte) ' ' [phi:printf_cls->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [63] phi (void*) memset::str#3 = (void*)(const byte*) printf_screen [phi:printf_cls->memset#1] -- pvoz1=pvoc1 
    lda #<printf_screen
    sta.z memset.str
    lda #>printf_screen
    sta.z memset.str+1
    // [63] phi (word) memset::num#2 = (word)(number) $28*(number) $19 [phi:printf_cls->memset#2] -- vwuz1=vwuc1 
    lda #<$28*$19
    sta.z memset.num
    lda #>$28*$19
    sta.z memset.num+1
    jsr memset
    // printf_cls::@1
    // printf_line_cursor = printf_screen
    // [99] (byte*) printf_line_cursor ← (const byte*) printf_screen -- pbuz1=pbuc1 
    lda #<printf_screen
    sta.z printf_line_cursor
    lda #>printf_screen
    sta.z printf_line_cursor+1
    // printf_char_cursor = printf_line_cursor
    // [100] (byte*) printf_char_cursor ← (byte*) printf_line_cursor -- pbuz1=pbuz2 
    lda.z printf_line_cursor
    sta.z printf_char_cursor
    lda.z printf_line_cursor+1
    sta.z printf_char_cursor+1
    // printf_cls::@return
    // }
    // [101] return 
    rts
}
  // File Data

