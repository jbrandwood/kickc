
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte*~) main::$1 ← (byte*){ (number) 4, (number) 0 }
  (word~) main::$2 ← (word){ (number) 0, (number) $28 }
  (byte*~) main::$0 ← (byte*~) main::$1 + (word~) main::$2
  (byte*) main::screen#0 ← (byte*~) main::$0
  *((byte*) main::screen#0) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(word~) main::$2
(label) main::@return
(byte*) main::screen
(byte*) main::screen#0

Fixing inline constructor with main::$3 ← (byte)4 w= (byte)0
Fixing inline constructor with main::$4 ← (byte)0 w= (byte)$28
Successful SSA optimization Pass2FixInlineConstructors
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Adding pointer type conversion cast (byte*) main::$3 in (byte*~) main::$3 ← (byte) 4 w= (byte) 0
Successful SSA optimization PassNAddTypeConversionAssignment
Alias main::$1 = main::$3 
Alias main::$2 = main::$4 
Alias main::screen#0 = main::$0 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [0] (word~) main::$5 ← (byte) 4 w= (byte) 0
Constant right-side identified [2] (word~) main::$2 ← (byte) 0 w= (byte) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Simplifying constant evaluating to zero (byte) 0*(number) $100 in [2] (word~) main::$2 ← (byte) 0*(number) $100+(byte) $28
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero 4*$100 in [0] (word~) main::$5 ← (byte) 4*(number) $100+(byte) 0
Simplifying expression containing zero $28 in [2] (word~) main::$2 ← (number) 0+(byte) $28
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 4*$100 in [0] (word~) main::$5 ← (byte) 4*(number) $100
Adding number conversion cast (unumber) $100 in [0] (word~) main::$5 ← ((unumber)) (byte) 4*(number) $100
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast [0] (word~) main::$5 ← (unumber)(byte) 4*(unumber)(number) $100
Inlining cast [1] (byte*~) main::$1 ← (byte*)(word~) main::$5
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast (byte) 4*(unumber)(number) $100
Simplifying constant integer cast $100
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $100
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant (const word) main::$5 = 4*$100
Constant (const word) main::$2 = $28
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte*) main::$1 = (byte*)main::$5
Successful SSA optimization Pass2ConstantIdentification
Constant right-side identified [0] (byte*) main::screen#0 ← (const byte*) main::$1 + (const word) main::$2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::screen#0 = main::$1+main::$2
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$5 = (byte) 4*(word) $100
Constant inlined main::$1 = (byte*)(byte) 4*(word) $100
Constant inlined main::$2 = (byte) $28
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] *((const byte*) main::screen#0) ← (byte) 'a'
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte*) main::screen

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Tests creating a literal pointer from two bytes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = 4*$100+$28
    // [0] *((const byte*) main::screen#0) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((const byte*) main::screen#0) ← (byte) 'a' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests creating a literal pointer from two bytes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = 4*$100+$28
    // [0] *((const byte*) main::screen#0) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(void()) main()
(label) main::@return
(byte*) main::screen
(const byte*) main::screen#0 screen = (byte*)(byte) 4*(word) $100+(byte) $28



FINAL ASSEMBLER
Score: 12

  // File Comments
// Tests creating a literal pointer from two bytes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label screen = 4*$100+$28
    // *screen = 'a'
    // [0] *((const byte*) main::screen#0) ← (byte) 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta screen
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

