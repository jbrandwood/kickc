PARSING src/test/java/dk/camelot64/kickc/test/kc/test-division.kc
// Test the binary division library
import "print.kc"
import "division.kc"

void main() {
    print_cls();
    test_8u();
    test_16u();
    test_8s();
    test_16s();
}

void test_8u() {
    byte[] dividends = { 255, 255, 255, 255, 255, 255};
    byte[] divisors = { 5, 7, 11, 13, 17, 19 };
    byte rem = 0;
    for( byte i: 0..5 ) {
        byte dividend = dividends[i];
        byte divisor = divisors[i];
        byte res = div8u(dividend, divisor);
        print_byte(dividend);
        print_str(" / @");
        print_byte(divisor);
        print_str(" = @");
        print_byte(res);
        print_str(" @");
        print_byte(rem8u);
        print_ln();
    }
}

void test_16u() {
    word[] dividends = { $ffff, $ffff, $ffff, $ffff, $ffff, $ffff};
    word[] divisors = { 5, 7, 11, 13, 17, 19 };
    for( byte i=0;i!=12;i=i+2) {
        word dividend = dividends[i];
        word divisor = divisors[i];
        word res = div16u(dividend, divisor);
        print_word(dividend);
        print_str(" / @");
        print_word(divisor);
        print_str(" = @");
        print_word(res);
        print_str(" @");
        print_word(rem16u);
        print_ln();
    }
}

void test_8s() {
    signed byte[] dividends = { 127, -127, -127, 127, 127, 127};
    signed byte[] divisors = { 5, 7, -11, -13, 17, 19 };
    for( byte i: 0..5 ) {
        signed byte dividend = dividends[i];
        signed byte divisor = divisors[i];
        signed byte res = div8s(dividend, divisor);
        print_sbyte(dividend);
        print_str(" / @");
        print_sbyte(divisor);
        print_str(" = @");
        print_sbyte(res);
        print_str(" @");
        print_sbyte(rem8s);
        print_ln();
    }
}

void test_16s() {
    signed word[] dividends = { $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff};
    signed word[] divisors = { 5, -7, 11, -13, -17, 19 };
    for( byte i=0;i!=12;i=i+2) {
        signed word dividend = dividends[i];
        signed word divisor = divisors[i];
        signed word res = div16s(dividend, divisor);
        print_sword(dividend);
        print_str(" / @");
        print_sword(divisor);
        print_str(" = @");
        print_sword(res);
        print_str(" @");
        print_sword(rem16s);
        print_ln();
    }
}

Importing print.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/print.kc

const byte* SCREEN = $0400;

byte* line_cursor = SCREEN;
byte* char_cursor = line_cursor;

// Print a zero-terminated string
void print_str(byte* str) {
    while(*str!='@') {
        *(char_cursor++) = *(str++);
    }
}

// Print a newline
void print_ln() {
    do {
        line_cursor = line_cursor + $28;
    } while (line_cursor<char_cursor);
    char_cursor = line_cursor;
}

// Print a signed word as HEX
void print_sword(signed word w) {
    if(w<0) {
        print_char('-');
        w = -w;
    }
    print_word((word)w);
}

// Print a signed byte as HEX
void print_sbyte(signed byte b) {
    if(b<0) {
        print_char('-');
        b = -b;
    }
    print_byte((byte)b);
}

// Print a word as HEX
void print_word(word w) {
    print_byte(>w);
    print_byte(<w);
}

// Print a dword as HEX
void print_dword(dword dw) {
    print_word(>dw);
    print_word(<dw);
}

// Print a signed dword as HEX
void print_sdword(signed dword dw) {
    if(dw<0) {
        print_char('-');
        dw = -dw;
    }
    print_dword((dword)dw);
}

// Print a byte as HEX
void print_byte(byte b) {
    // Table of hexadecimal digits
    const byte[] hextab = "0123456789abcdef";
    print_char(hextab[b>>4]);
    print_char(hextab[b&$f]);
}

// Print a single char
void print_char(byte ch) {
    *(char_cursor++) = ch;
}

// Clear the screen
void print_cls() {
    for(byte* sc=SCREEN; sc!=SCREEN+1000; sc++) {
        *sc = ' ';
    }
    line_cursor = SCREEN;
    char_cursor = line_cursor;
}



Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_str::str ← ++ (byte*) print_str::str
Adding pre/post-modifier (byte*) char_cursor ← ++ (byte*) char_cursor
Adding pre/post-modifier (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
Importing division.kc
PARSING src/test/java/dk/camelot64/kickc/test/kc/division.kc
// Simple binary division implementation
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5

// Remainder after signed 8 bit division
byte rem8u =0;

// Performs division on two 8 bit unsigned bytes
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8u
// Implemented using simple binary division
byte div8u(byte dividend, byte divisor) {
    return divr8u(dividend, divisor, 0);
}

// Performs division on two 8 bit unsigned bytes and an initial remainder
// Returns dividend/divisor.
// The final remainder will be set into the global variable rem8u
// Implemented using simple binary division
byte divr8u(byte dividend, byte divisor, byte rem) {
    byte quotient = 0;
    for( byte i : 0..7) {
        rem = rem << 1;
        if( (dividend & $80) != 0 ) {
            rem++;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem8u = rem;
    return quotient;
}

// Remainder after unsigned 16-bit division
word rem16u = 0;

// Performs division on two 16 bit unsigned words
// Returns the quotient dividend/divisor.
// The remainder will be set into the global variable rem16u
// Implemented using simple binary division
word div16u(word dividend, word divisor) {
    return divr16u(dividend, divisor, 0);
}

// Performs division on two 16 bit unsigned words and an initial remainder
// Returns the quotient dividend/divisor.
// The final remainder will be set into the global variable rem16u
// Implemented using simple binary division
word divr16u(word dividend, word divisor, word rem) {
    word quotient = 0;
    for( byte i : 0..15) {
        rem = rem << 1;
        if( (>dividend & $80) != 0 ) {
            rem++;
        }
        dividend = dividend << 1;
        quotient = quotient << 1;
        if(rem>=divisor) {
            quotient++;
            rem = rem - divisor;
        }
    }
    rem16u = rem;
    return quotient;
}

// Remainder after signed 8 bit division
signed byte rem8s = 0;

// Perform division on two signed 8-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem8s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed byte div8s(signed byte dividend, signed byte divisor) {
    byte neg = 0;
    byte dividendu = 0;
    if(dividend<0) {
      dividendu = (byte)-dividend;
      neg = 1;
    } else {
      dividendu = (byte)dividend;
    }
    byte divisoru = 0;
    if(divisor<0) {
        divisoru = (byte)-divisor;
        neg = neg ^ 1;
    } else {
        divisoru = (byte)divisor;
    }
    byte resultu = div8u(dividendu, divisoru);
    if(neg==0) {
        rem8s = (signed byte)rem8u;
        return (signed byte)resultu;
    } else {
        rem8s = -(signed byte)rem8u;
        return -(signed byte)resultu;
    }
}

// Remainder after signed 16 bit division
signed word rem16s = 0;

// Perform division on two signed 16-bit numbers
// Returns dividend/divisor.
// The remainder will be set into the global variable rem16s.
// Implemented using simple binary division
// Follows the C99 standard by truncating toward zero on negative results.
// See http://www.open-std.org/jtc1/sc22/wg14/www/docs/n1124.pdf section 6.5.5
signed word div16s(signed word dividend, signed word divisor) {
    byte neg = 0;
    word dividendu = 0;
    if(dividend<0) {
      dividendu = (word)-dividend;
      neg = 1;
    } else {
      dividendu = (word)dividend;
    }
    word divisoru = 0;
    if(divisor<0) {
        divisoru = (word)-divisor;
        neg = neg ^ 1;
    } else {
        divisoru = (word)divisor;
    }
    word resultu = div16u(dividendu, divisoru);
    if(neg==0) {
        rem16s = (signed word)rem16u;
        return (signed word)resultu;
    } else {
        rem16s = -(signed word)rem16u;
        return -(signed word)resultu;
    }
}

Adding pre/post-modifier (byte) divr8u::rem ← ++ (byte) divr8u::rem
Adding pre/post-modifier (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
Adding pre/post-modifier (word) divr16u::rem ← ++ (word) divr16u::rem
Adding pre/post-modifier (word) divr16u::quotient ← ++ (word) divr16u::quotient

STATEMENTS
  (byte*) SCREEN ← (word/signed word/dword/signed dword) 1024
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
proc (void()) print_str((byte*) print_str::str)
print_str::@1:
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  goto print_str::@3
print_str::@2:
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  goto print_str::@1
print_str::@3:
print_str::@return:
  return 
endproc // print_str()
proc (void()) print_ln()
print_ln::@1:
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
print_ln::@return:
  return 
endproc // print_ln()
proc (void()) print_sword((signed word) print_sword::w)
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
print_sword::@1:
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
print_sword::@return:
  return 
endproc // print_sword()
proc (void()) print_sbyte((signed byte) print_sbyte::b)
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
print_sbyte::@1:
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
print_sbyte::@return:
  return 
endproc // print_sbyte()
proc (void()) print_word((word) print_word::w)
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
print_word::@return:
  return 
endproc // print_word()
proc (void()) print_dword((dword) print_dword::dw)
  (word~) print_dword::$0 ← > (dword) print_dword::dw
  (void~) print_dword::$1 ← call print_word (word~) print_dword::$0 
  (word~) print_dword::$2 ← < (dword) print_dword::dw
  (void~) print_dword::$3 ← call print_word (word~) print_dword::$2 
print_dword::@return:
  return 
endproc // print_dword()
proc (void()) print_sdword((signed dword) print_sdword::dw)
  (boolean~) print_sdword::$0 ← (signed dword) print_sdword::dw < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sdword::$1 ← ! (boolean~) print_sdword::$0
  if((boolean~) print_sdword::$1) goto print_sdword::@1
  (void~) print_sdword::$2 ← call print_char (byte) '-' 
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw
  (signed dword) print_sdword::dw ← (signed dword~) print_sdword::$3
print_sdword::@1:
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw
  (void~) print_sdword::$5 ← call print_dword (dword~) print_sdword::$4 
print_sdword::@return:
  return 
endproc // print_sdword()
proc (void()) print_byte((byte) print_byte::b)
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
print_byte::@return:
  return 
endproc // print_byte()
proc (void()) print_char((byte) print_char::ch)
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
print_char::@return:
  return 
endproc // print_char()
proc (void()) print_cls()
  (byte*) print_cls::sc ← (byte*) SCREEN
print_cls::@1:
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) SCREEN + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
print_cls::@return:
  return 
endproc // print_cls()
  (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
  (byte~) div8u::$0 ← call divr8u (byte) div8u::dividend (byte) div8u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) div8u::return ← (byte~) div8u::$0
  goto div8u::@return
div8u::@return:
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
endproc // div8u()
proc (byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
  (byte) divr8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
divr8u::@1:
  (byte~) divr8u::$0 ← (byte) divr8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte~) divr8u::$0
  (byte~) divr8u::$1 ← (byte) divr8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr8u::$3 ← ! (boolean~) divr8u::$2
  if((boolean~) divr8u::$3) goto divr8u::@2
  (byte) divr8u::rem ← ++ (byte) divr8u::rem
divr8u::@2:
  (byte~) divr8u::$4 ← (byte) divr8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::dividend ← (byte~) divr8u::$4
  (byte~) divr8u::$5 ← (byte) divr8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::quotient ← (byte~) divr8u::$5
  (boolean~) divr8u::$6 ← (byte) divr8u::rem >= (byte) divr8u::divisor
  (boolean~) divr8u::$7 ← ! (boolean~) divr8u::$6
  if((boolean~) divr8u::$7) goto divr8u::@3
  (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
  (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$8 ← (byte) divr8u::rem - (byte) divr8u::divisor
  (byte) divr8u::rem ← (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$8
divr8u::@3:
  (byte) divr8u::i ← ++ (byte) divr8u::i
  (boolean~) divr8u::$9 ← (byte) divr8u::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) divr8u::$9) goto divr8u::@1
  (byte) rem8u ← (byte) divr8u::rem
  (byte) divr8u::return ← (byte) divr8u::quotient
  goto divr8u::@return
divr8u::@return:
  (byte) divr8u::return ← (byte) divr8u::return
  return (byte) divr8u::return
endproc // divr8u()
  (word) rem16u ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (word()) div16u((word) div16u::dividend , (word) div16u::divisor)
  (word~) div16u::$0 ← call divr16u (word) div16u::dividend (word) div16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div16u::return ← (word~) div16u::$0
  goto div16u::@return
div16u::@return:
  (word) div16u::return ← (word) div16u::return
  return (word) div16u::return
endproc // div16u()
proc (word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
  (word) divr16u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
divr16u::@1:
  (word~) divr16u::$0 ← (word) divr16u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr16u::$4 ← ! (boolean~) divr16u::$3
  if((boolean~) divr16u::$4) goto divr16u::@2
  (word) divr16u::rem ← ++ (word) divr16u::rem
divr16u::@2:
  (word~) divr16u::$5 ← (word) divr16u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend ← (word~) divr16u::$5
  (word~) divr16u::$6 ← (word) divr16u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient ← (word~) divr16u::$6
  (boolean~) divr16u::$7 ← (word) divr16u::rem >= (word) divr16u::divisor
  (boolean~) divr16u::$8 ← ! (boolean~) divr16u::$7
  if((boolean~) divr16u::$8) goto divr16u::@3
  (word) divr16u::quotient ← ++ (word) divr16u::quotient
  (word~) divr16u::$9 ← (word) divr16u::rem - (word) divr16u::divisor
  (word) divr16u::rem ← (word~) divr16u::$9
divr16u::@3:
  (byte) divr16u::i ← ++ (byte) divr16u::i
  (boolean~) divr16u::$10 ← (byte) divr16u::i != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) divr16u::$10) goto divr16u::@1
  (word) rem16u ← (word) divr16u::rem
  (word) divr16u::return ← (word) divr16u::quotient
  goto divr16u::@return
divr16u::@return:
  (word) divr16u::return ← (word) divr16u::return
  return (word) divr16u::return
endproc // divr16u()
  (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$1 ← ! (boolean~) div8s::$0
  if((boolean~) div8s::$1) goto div8s::@1
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendu ← (byte~) div8s::$3
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  goto div8s::@2
div8s::@1:
  (byte~) div8s::$4 ← ((byte)) (signed byte) div8s::dividend
  (byte) div8s::dividendu ← (byte~) div8s::$4
div8s::@2:
  (byte) div8s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$5 ← (signed byte) div8s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$6 ← ! (boolean~) div8s::$5
  if((boolean~) div8s::$6) goto div8s::@3
  (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor
  (byte~) div8s::$8 ← ((byte)) (signed byte~) div8s::$7
  (byte) div8s::divisoru ← (byte~) div8s::$8
  (byte~) div8s::$9 ← (byte) div8s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg ← (byte~) div8s::$9
  goto div8s::@4
div8s::@3:
  (byte~) div8s::$10 ← ((byte)) (signed byte) div8s::divisor
  (byte) div8s::divisoru ← (byte~) div8s::$10
div8s::@4:
  (byte~) div8s::$11 ← call div8u (byte) div8s::dividendu (byte) div8s::divisoru 
  (byte) div8s::resultu ← (byte~) div8s::$11
  (boolean~) div8s::$12 ← (byte) div8s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$13 ← ! (boolean~) div8s::$12
  if((boolean~) div8s::$13) goto div8s::@5
  (signed byte~) div8s::$14 ← ((signed byte)) (byte) rem8u
  (signed byte) rem8s ← (signed byte~) div8s::$14
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) div8s::resultu
  (signed byte) div8s::return ← (signed byte~) div8s::$15
  goto div8s::@return
  goto div8s::@6
div8s::@5:
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u
  (signed byte~) div8s::$17 ← - (signed byte~) div8s::$16
  (signed byte) rem8s ← (signed byte~) div8s::$17
  (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultu
  (signed byte~) div8s::$19 ← - (signed byte~) div8s::$18
  (signed byte) div8s::return ← (signed byte~) div8s::$19
  goto div8s::@return
div8s::@6:
div8s::@return:
  (signed byte) div8s::return ← (signed byte) div8s::return
  return (signed byte) div8s::return
endproc // div8s()
  (signed word) rem16s ← (byte/signed byte/word/signed word/dword/signed dword) 0
proc (signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$0 ← (signed word) div16s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$1 ← ! (boolean~) div16s::$0
  if((boolean~) div16s::$1) goto div16s::@1
  (signed word~) div16s::$2 ← - (signed word) div16s::dividend
  (word~) div16s::$3 ← ((word)) (signed word~) div16s::$2
  (word) div16s::dividendu ← (word~) div16s::$3
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  goto div16s::@2
div16s::@1:
  (word~) div16s::$4 ← ((word)) (signed word) div16s::dividend
  (word) div16s::dividendu ← (word~) div16s::$4
div16s::@2:
  (word) div16s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$5 ← (signed word) div16s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$6 ← ! (boolean~) div16s::$5
  if((boolean~) div16s::$6) goto div16s::@3
  (signed word~) div16s::$7 ← - (signed word) div16s::divisor
  (word~) div16s::$8 ← ((word)) (signed word~) div16s::$7
  (word) div16s::divisoru ← (word~) div16s::$8
  (byte~) div16s::$9 ← (byte) div16s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div16s::neg ← (byte~) div16s::$9
  goto div16s::@4
div16s::@3:
  (word~) div16s::$10 ← ((word)) (signed word) div16s::divisor
  (word) div16s::divisoru ← (word~) div16s::$10
div16s::@4:
  (word~) div16s::$11 ← call div16u (word) div16s::dividendu (word) div16s::divisoru 
  (word) div16s::resultu ← (word~) div16s::$11
  (boolean~) div16s::$12 ← (byte) div16s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$13 ← ! (boolean~) div16s::$12
  if((boolean~) div16s::$13) goto div16s::@5
  (signed word~) div16s::$14 ← ((signed word)) (word) rem16u
  (signed word) rem16s ← (signed word~) div16s::$14
  (signed word~) div16s::$15 ← ((signed word)) (word) div16s::resultu
  (signed word) div16s::return ← (signed word~) div16s::$15
  goto div16s::@return
  goto div16s::@6
div16s::@5:
  (signed word~) div16s::$16 ← ((signed word)) (word) rem16u
  (signed word~) div16s::$17 ← - (signed word~) div16s::$16
  (signed word) rem16s ← (signed word~) div16s::$17
  (signed word~) div16s::$18 ← ((signed word)) (word) div16s::resultu
  (signed word~) div16s::$19 ← - (signed word~) div16s::$18
  (signed word) div16s::return ← (signed word~) div16s::$19
  goto div16s::@return
div16s::@6:
div16s::@return:
  (signed word) div16s::return ← (signed word) div16s::return
  return (signed word) div16s::return
endproc // div16s()
proc (void()) main()
  (void~) main::$0 ← call print_cls 
  (void~) main::$1 ← call test_8u 
  (void~) main::$2 ← call test_16u 
  (void~) main::$3 ← call test_8s 
  (void~) main::$4 ← call test_16s 
main::@return:
  return 
endproc // main()
proc (void()) test_8u()
  (byte[]) test_8u::dividends ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) test_8u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) test_8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
test_8u::@1:
  (byte) test_8u::dividend ← *((byte[]) test_8u::dividends + (byte) test_8u::i)
  (byte) test_8u::divisor ← *((byte[]) test_8u::divisors + (byte) test_8u::i)
  (byte~) test_8u::$0 ← call div8u (byte) test_8u::dividend (byte) test_8u::divisor 
  (byte) test_8u::res ← (byte~) test_8u::$0
  (void~) test_8u::$1 ← call print_byte (byte) test_8u::dividend 
  (void~) test_8u::$2 ← call print_str (string) " / @" 
  (void~) test_8u::$3 ← call print_byte (byte) test_8u::divisor 
  (void~) test_8u::$4 ← call print_str (string) " = @" 
  (void~) test_8u::$5 ← call print_byte (byte) test_8u::res 
  (void~) test_8u::$6 ← call print_str (string) " @" 
  (void~) test_8u::$7 ← call print_byte (byte) rem8u 
  (void~) test_8u::$8 ← call print_ln 
  (byte) test_8u::i ← ++ (byte) test_8u::i
  (boolean~) test_8u::$9 ← (byte) test_8u::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8u::$9) goto test_8u::@1
test_8u::@return:
  return 
endproc // test_8u()
proc (void()) test_16u()
  (word[]) test_16u::dividends ← { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
  (word[]) test_16u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
test_16u::@1:
  (word) test_16u::dividend ← *((word[]) test_16u::dividends + (byte) test_16u::i)
  (word) test_16u::divisor ← *((word[]) test_16u::divisors + (byte) test_16u::i)
  (word~) test_16u::$0 ← call div16u (word) test_16u::dividend (word) test_16u::divisor 
  (word) test_16u::res ← (word~) test_16u::$0
  (void~) test_16u::$1 ← call print_word (word) test_16u::dividend 
  (void~) test_16u::$2 ← call print_str (string) " / @" 
  (void~) test_16u::$3 ← call print_word (word) test_16u::divisor 
  (void~) test_16u::$4 ← call print_str (string) " = @" 
  (void~) test_16u::$5 ← call print_word (word) test_16u::res 
  (void~) test_16u::$6 ← call print_str (string) " @" 
  (void~) test_16u::$7 ← call print_word (word) rem16u 
  (void~) test_16u::$8 ← call print_ln 
  (byte/word~) test_16u::$9 ← (byte) test_16u::i + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16u::i ← (byte/word~) test_16u::$9
  (boolean~) test_16u::$10 ← (byte) test_16u::i != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16u::$10) goto test_16u::@1
test_16u::@return:
  return 
endproc // test_16u()
proc (void()) test_8s()
  (signed byte/signed word/signed dword~) test_8s::$0 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte/signed word/signed dword~) test_8s::$1 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte[]) test_8s::dividends ← { (byte/signed byte/word/signed word/dword/signed dword) 127, (signed byte/signed word/signed dword~) test_8s::$0, (signed byte/signed word/signed dword~) test_8s::$1, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (signed byte/signed word/signed dword~) test_8s::$2 ← - (byte/signed byte/word/signed word/dword/signed dword) 11
  (signed byte/signed word/signed dword~) test_8s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte[]) test_8s::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (signed byte/signed word/signed dword~) test_8s::$2, (signed byte/signed word/signed dword~) test_8s::$3, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8s::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
test_8s::@1:
  (signed byte) test_8s::dividend ← *((signed byte[]) test_8s::dividends + (byte) test_8s::i)
  (signed byte) test_8s::divisor ← *((signed byte[]) test_8s::divisors + (byte) test_8s::i)
  (signed byte~) test_8s::$4 ← call div8s (signed byte) test_8s::dividend (signed byte) test_8s::divisor 
  (signed byte) test_8s::res ← (signed byte~) test_8s::$4
  (void~) test_8s::$5 ← call print_sbyte (signed byte) test_8s::dividend 
  (void~) test_8s::$6 ← call print_str (string) " / @" 
  (void~) test_8s::$7 ← call print_sbyte (signed byte) test_8s::divisor 
  (void~) test_8s::$8 ← call print_str (string) " = @" 
  (void~) test_8s::$9 ← call print_sbyte (signed byte) test_8s::res 
  (void~) test_8s::$10 ← call print_str (string) " @" 
  (void~) test_8s::$11 ← call print_sbyte (signed byte) rem8s 
  (void~) test_8s::$12 ← call print_ln 
  (byte) test_8s::i ← ++ (byte) test_8s::i
  (boolean~) test_8s::$13 ← (byte) test_8s::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8s::$13) goto test_8s::@1
test_8s::@return:
  return 
endproc // test_8s()
proc (void()) test_16s()
  (signed word/signed dword~) test_16s::$0 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$1 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$2 ← - (word/signed word/dword/signed dword) 32767
  (signed word[]) test_16s::dividends ← { (word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$0, (signed word/signed dword~) test_16s::$1, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$2 }
  (signed byte/signed word/signed dword~) test_16s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 7
  (signed byte/signed word/signed dword~) test_16s::$4 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte/signed word/signed dword~) test_16s::$5 ← - (byte/signed byte/word/signed word/dword/signed dword) 17
  (signed word[]) test_16s::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (signed byte/signed word/signed dword~) test_16s::$3, (byte/signed byte/word/signed word/dword/signed dword) 11, (signed byte/signed word/signed dword~) test_16s::$4, (signed byte/signed word/signed dword~) test_16s::$5, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16s::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
test_16s::@1:
  (signed word) test_16s::dividend ← *((signed word[]) test_16s::dividends + (byte) test_16s::i)
  (signed word) test_16s::divisor ← *((signed word[]) test_16s::divisors + (byte) test_16s::i)
  (signed word~) test_16s::$6 ← call div16s (signed word) test_16s::dividend (signed word) test_16s::divisor 
  (signed word) test_16s::res ← (signed word~) test_16s::$6
  (void~) test_16s::$7 ← call print_sword (signed word) test_16s::dividend 
  (void~) test_16s::$8 ← call print_str (string) " / @" 
  (void~) test_16s::$9 ← call print_sword (signed word) test_16s::divisor 
  (void~) test_16s::$10 ← call print_str (string) " = @" 
  (void~) test_16s::$11 ← call print_sword (signed word) test_16s::res 
  (void~) test_16s::$12 ← call print_str (string) " @" 
  (void~) test_16s::$13 ← call print_sword (signed word) rem16s 
  (void~) test_16s::$14 ← call print_ln 
  (byte/word~) test_16s::$15 ← (byte) test_16s::i + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16s::i ← (byte/word~) test_16s::$15
  (boolean~) test_16s::$16 ← (byte) test_16s::i != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16s::$16) goto test_16s::@1
test_16s::@return:
  return 
endproc // test_16s()
  call main 

SYMBOLS
(byte*) SCREEN
(byte*) char_cursor
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(boolean~) div16s::$0
(boolean~) div16s::$1
(word~) div16s::$10
(word~) div16s::$11
(boolean~) div16s::$12
(boolean~) div16s::$13
(signed word~) div16s::$14
(signed word~) div16s::$15
(signed word~) div16s::$16
(signed word~) div16s::$17
(signed word~) div16s::$18
(signed word~) div16s::$19
(signed word~) div16s::$2
(word~) div16s::$3
(word~) div16s::$4
(boolean~) div16s::$5
(boolean~) div16s::$6
(signed word~) div16s::$7
(word~) div16s::$8
(byte~) div16s::$9
(label) div16s::@1
(label) div16s::@2
(label) div16s::@3
(label) div16s::@4
(label) div16s::@5
(label) div16s::@6
(label) div16s::@return
(signed word) div16s::dividend
(word) div16s::dividendu
(signed word) div16s::divisor
(word) div16s::divisoru
(byte) div16s::neg
(word) div16s::resultu
(signed word) div16s::return
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@return
(word) div16u::dividend
(word) div16u::divisor
(word) div16u::return
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(boolean~) div8s::$0
(boolean~) div8s::$1
(byte~) div8s::$10
(byte~) div8s::$11
(boolean~) div8s::$12
(boolean~) div8s::$13
(signed byte~) div8s::$14
(signed byte~) div8s::$15
(signed byte~) div8s::$16
(signed byte~) div8s::$17
(signed byte~) div8s::$18
(signed byte~) div8s::$19
(signed byte~) div8s::$2
(byte~) div8s::$3
(byte~) div8s::$4
(boolean~) div8s::$5
(boolean~) div8s::$6
(signed byte~) div8s::$7
(byte~) div8s::$8
(byte~) div8s::$9
(label) div8s::@1
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@6
(label) div8s::@return
(signed byte) div8s::dividend
(byte) div8s::dividendu
(signed byte) div8s::divisor
(byte) div8s::divisoru
(byte) div8s::neg
(byte) div8s::resultu
(signed byte) div8s::return
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::divisor
(byte) div8u::return
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(boolean~) divr16u::$10
(byte~) divr16u::$2
(boolean~) divr16u::$3
(boolean~) divr16u::$4
(word~) divr16u::$5
(word~) divr16u::$6
(boolean~) divr16u::$7
(boolean~) divr16u::$8
(word~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::divisor
(byte) divr16u::i
(word) divr16u::quotient
(word) divr16u::rem
(word) divr16u::return
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$0
(byte~) divr8u::$1
(boolean~) divr8u::$2
(boolean~) divr8u::$3
(byte~) divr8u::$4
(byte~) divr8u::$5
(boolean~) divr8u::$6
(boolean~) divr8u::$7
(byte/signed byte/word/signed word/dword/signed dword~) divr8u::$8
(boolean~) divr8u::$9
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::divisor
(byte) divr8u::i
(byte) divr8u::quotient
(byte) divr8u::rem
(byte) divr8u::return
(byte*) line_cursor
(void()) main()
(void~) main::$0
(void~) main::$1
(void~) main::$2
(void~) main::$3
(void~) main::$4
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(void~) print_byte::$1
(byte~) print_byte::$2
(void~) print_byte::$3
(label) print_byte::@return
(byte) print_byte::b
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(void()) print_dword((dword) print_dword::dw)
(word~) print_dword::$0
(void~) print_dword::$1
(word~) print_dword::$2
(void~) print_dword::$3
(label) print_dword::@return
(dword) print_dword::dw
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(void~) print_sbyte::$2
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(void~) print_sbyte::$5
(label) print_sbyte::@1
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(void()) print_sdword((signed dword) print_sdword::dw)
(boolean~) print_sdword::$0
(boolean~) print_sdword::$1
(void~) print_sdword::$2
(signed dword~) print_sdword::$3
(dword~) print_sdword::$4
(void~) print_sdword::$5
(label) print_sdword::@1
(label) print_sdword::@return
(signed dword) print_sdword::dw
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@3
(label) print_str::@return
(byte*) print_str::str
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(void~) print_sword::$2
(signed word~) print_sword::$3
(word~) print_sword::$4
(void~) print_sword::$5
(label) print_sword::@1
(label) print_sword::@return
(signed word) print_sword::w
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(void~) print_word::$1
(byte~) print_word::$2
(void~) print_word::$3
(label) print_word::@return
(word) print_word::w
(signed word) rem16s
(word) rem16u
(signed byte) rem8s
(byte) rem8u
(void()) test_16s()
(signed word/signed dword~) test_16s::$0
(signed word/signed dword~) test_16s::$1
(void~) test_16s::$10
(void~) test_16s::$11
(void~) test_16s::$12
(void~) test_16s::$13
(void~) test_16s::$14
(byte/word~) test_16s::$15
(boolean~) test_16s::$16
(signed word/signed dword~) test_16s::$2
(signed byte/signed word/signed dword~) test_16s::$3
(signed byte/signed word/signed dword~) test_16s::$4
(signed byte/signed word/signed dword~) test_16s::$5
(signed word~) test_16s::$6
(void~) test_16s::$7
(void~) test_16s::$8
(void~) test_16s::$9
(label) test_16s::@1
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word[]) test_16s::dividends
(signed word) test_16s::divisor
(signed word[]) test_16s::divisors
(byte) test_16s::i
(signed word) test_16s::res
(void()) test_16u()
(word~) test_16u::$0
(void~) test_16u::$1
(boolean~) test_16u::$10
(void~) test_16u::$2
(void~) test_16u::$3
(void~) test_16u::$4
(void~) test_16u::$5
(void~) test_16u::$6
(void~) test_16u::$7
(void~) test_16u::$8
(byte/word~) test_16u::$9
(label) test_16u::@1
(label) test_16u::@return
(word) test_16u::dividend
(word[]) test_16u::dividends
(word) test_16u::divisor
(word[]) test_16u::divisors
(byte) test_16u::i
(word) test_16u::res
(void()) test_8s()
(signed byte/signed word/signed dword~) test_8s::$0
(signed byte/signed word/signed dword~) test_8s::$1
(void~) test_8s::$10
(void~) test_8s::$11
(void~) test_8s::$12
(boolean~) test_8s::$13
(signed byte/signed word/signed dword~) test_8s::$2
(signed byte/signed word/signed dword~) test_8s::$3
(signed byte~) test_8s::$4
(void~) test_8s::$5
(void~) test_8s::$6
(void~) test_8s::$7
(void~) test_8s::$8
(void~) test_8s::$9
(label) test_8s::@1
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte[]) test_8s::dividends
(signed byte) test_8s::divisor
(signed byte[]) test_8s::divisors
(byte) test_8s::i
(signed byte) test_8s::res
(void()) test_8u()
(byte~) test_8u::$0
(void~) test_8u::$1
(void~) test_8u::$2
(void~) test_8u::$3
(void~) test_8u::$4
(void~) test_8u::$5
(void~) test_8u::$6
(void~) test_8u::$7
(void~) test_8u::$8
(boolean~) test_8u::$9
(label) test_8u::@1
(label) test_8u::@return
(byte) test_8u::dividend
(byte[]) test_8u::dividends
(byte) test_8u::divisor
(byte[]) test_8u::divisors
(byte) test_8u::i
(byte) test_8u::rem
(byte) test_8u::res

Promoting word/signed word/dword/signed dword to byte* in SCREEN ← ((byte*)) 1024
INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
  to:@1
print_str: scope:[print_str]  from
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (boolean~) print_str::$0 ← *((byte*) print_str::str) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@4
print_str::@2: scope:[print_str]  from print_str::@1 print_str::@5
  *((byte*) char_cursor) ← *((byte*) print_str::str)
  (byte*) char_cursor ← ++ (byte*) char_cursor
  (byte*) print_str::str ← ++ (byte*) print_str::str
  to:print_str::@1
print_str::@4: scope:[print_str]  from print_str::@1
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@4 print_str::@6
  to:print_str::@return
print_str::@5: scope:[print_str]  from
  to:print_str::@2
print_str::@6: scope:[print_str]  from
  to:print_str::@3
print_str::@return: scope:[print_str]  from print_str::@3
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
print_ln: scope:[print_ln]  from
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*~) print_ln::$0 ← (byte*) line_cursor + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor < (byte*) char_cursor
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) char_cursor ← (byte*) line_cursor
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  return 
  to:@return
@2: scope:[]  from @1
  to:@3
print_sword: scope:[print_sword]  from
  (boolean~) print_sword::$0 ← (signed word) print_sword::w < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@2
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w
  (void~) print_sword::$5 ← call print_word (word~) print_sword::$4 
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (void~) print_sword::$2 ← call print_char (byte) '-' 
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w
  (signed word) print_sword::w ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@1
  return 
  to:@return
@3: scope:[]  from @2
  to:@4
print_sbyte: scope:[print_sbyte]  from
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@2
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b
  (void~) print_sbyte::$5 ← call print_byte (byte~) print_sbyte::$4 
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (void~) print_sbyte::$2 ← call print_char (byte) '-' 
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b
  (signed byte) print_sbyte::b ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  return 
  to:@return
@4: scope:[]  from @3
  to:@5
print_word: scope:[print_word]  from
  (byte~) print_word::$0 ← > (word) print_word::w
  (void~) print_word::$1 ← call print_byte (byte~) print_word::$0 
  (byte~) print_word::$2 ← < (word) print_word::w
  (void~) print_word::$3 ← call print_byte (byte~) print_word::$2 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word
  return 
  to:@return
@5: scope:[]  from @4
  to:@6
print_dword: scope:[print_dword]  from
  (word~) print_dword::$0 ← > (dword) print_dword::dw
  (void~) print_dword::$1 ← call print_word (word~) print_dword::$0 
  (word~) print_dword::$2 ← < (dword) print_dword::dw
  (void~) print_dword::$3 ← call print_word (word~) print_dword::$2 
  to:print_dword::@return
print_dword::@return: scope:[print_dword]  from print_dword
  return 
  to:@return
@6: scope:[]  from @5
  to:@7
print_sdword: scope:[print_sdword]  from
  (boolean~) print_sdword::$0 ← (signed dword) print_sdword::dw < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sdword::$1 ← ! (boolean~) print_sdword::$0
  if((boolean~) print_sdword::$1) goto print_sdword::@1
  to:print_sdword::@2
print_sdword::@1: scope:[print_sdword]  from print_sdword print_sdword::@2
  (dword~) print_sdword::$4 ← ((dword)) (signed dword) print_sdword::dw
  (void~) print_sdword::$5 ← call print_dword (dword~) print_sdword::$4 
  to:print_sdword::@return
print_sdword::@2: scope:[print_sdword]  from print_sdword
  (void~) print_sdword::$2 ← call print_char (byte) '-' 
  (signed dword~) print_sdword::$3 ← - (signed dword) print_sdword::dw
  (signed dword) print_sdword::dw ← (signed dword~) print_sdword::$3
  to:print_sdword::@1
print_sdword::@return: scope:[print_sdword]  from print_sdword::@1
  return 
  to:@return
@7: scope:[]  from @6
  to:@8
print_byte: scope:[print_byte]  from
  (byte[]) print_byte::hextab ← (string) "0123456789abcdef"
  (byte~) print_byte::$0 ← (byte) print_byte::b >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (void~) print_byte::$1 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$0) 
  (byte~) print_byte::$2 ← (byte) print_byte::b & (byte/signed byte/word/signed word/dword/signed dword) 15
  (void~) print_byte::$3 ← call print_char *((byte[]) print_byte::hextab + (byte~) print_byte::$2) 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte
  return 
  to:@return
@8: scope:[]  from @7
  to:@9
print_char: scope:[print_char]  from
  *((byte*) char_cursor) ← (byte) print_char::ch
  (byte*) char_cursor ← ++ (byte*) char_cursor
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  return 
  to:@return
@9: scope:[]  from @8
  to:@10
print_cls: scope:[print_cls]  from
  (byte*) print_cls::sc ← (byte*) SCREEN
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  *((byte*) print_cls::sc) ← (byte) ' '
  (byte*) print_cls::sc ← ++ (byte*) print_cls::sc
  (byte*~) print_cls::$0 ← (byte*) SCREEN + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) line_cursor ← (byte*) SCREEN
  (byte*) char_cursor ← (byte*) line_cursor
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  return 
  to:@return
@10: scope:[]  from @9
  (byte) rem8u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@11
div8u: scope:[div8u]  from
  (byte~) div8u::$0 ← call divr8u (byte) div8u::dividend (byte) div8u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (byte) div8u::return ← (byte~) div8u::$0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u div8u::@1
  (byte) div8u::return ← (byte) div8u::return
  return (byte) div8u::return
  to:@return
div8u::@1: scope:[div8u]  from
  to:div8u::@return
@11: scope:[]  from @10
  to:@12
divr8u: scope:[divr8u]  from
  (byte) divr8u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  (byte~) divr8u::$0 ← (byte) divr8u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem ← (byte~) divr8u::$0
  (byte~) divr8u::$1 ← (byte) divr8u::dividend & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr8u::$3 ← ! (boolean~) divr8u::$2
  if((boolean~) divr8u::$3) goto divr8u::@2
  to:divr8u::@4
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  (byte~) divr8u::$4 ← (byte) divr8u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::dividend ← (byte~) divr8u::$4
  (byte~) divr8u::$5 ← (byte) divr8u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::quotient ← (byte~) divr8u::$5
  (boolean~) divr8u::$6 ← (byte) divr8u::rem >= (byte) divr8u::divisor
  (boolean~) divr8u::$7 ← ! (boolean~) divr8u::$6
  if((boolean~) divr8u::$7) goto divr8u::@3
  to:divr8u::@5
divr8u::@4: scope:[divr8u]  from divr8u::@1
  (byte) divr8u::rem ← ++ (byte) divr8u::rem
  to:divr8u::@2
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  (byte) divr8u::i ← ++ (byte) divr8u::i
  (boolean~) divr8u::$9 ← (byte) divr8u::i != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) divr8u::$9) goto divr8u::@1
  to:divr8u::@6
divr8u::@5: scope:[divr8u]  from divr8u::@2
  (byte) divr8u::quotient ← ++ (byte) divr8u::quotient
  (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$8 ← (byte) divr8u::rem - (byte) divr8u::divisor
  (byte) divr8u::rem ← (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$8
  to:divr8u::@3
divr8u::@6: scope:[divr8u]  from divr8u::@3
  (byte) rem8u ← (byte) divr8u::rem
  (byte) divr8u::return ← (byte) divr8u::quotient
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6 divr8u::@7
  (byte) divr8u::return ← (byte) divr8u::return
  return (byte) divr8u::return
  to:@return
divr8u::@7: scope:[divr8u]  from
  to:divr8u::@return
@12: scope:[]  from @11
  (word) rem16u ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@13
div16u: scope:[div16u]  from
  (word~) div16u::$0 ← call divr16u (word) div16u::dividend (word) div16u::divisor (byte/signed byte/word/signed word/dword/signed dword) 0 
  (word) div16u::return ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u div16u::@1
  (word) div16u::return ← (word) div16u::return
  return (word) div16u::return
  to:@return
div16u::@1: scope:[div16u]  from
  to:div16u::@return
@13: scope:[]  from @12
  to:@14
divr16u: scope:[divr16u]  from
  (word) divr16u::quotient ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (word~) divr16u::$0 ← (word) divr16u::rem << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr16u::$4 ← ! (boolean~) divr16u::$3
  if((boolean~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (word~) divr16u::$5 ← (word) divr16u::dividend << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend ← (word~) divr16u::$5
  (word~) divr16u::$6 ← (word) divr16u::quotient << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient ← (word~) divr16u::$6
  (boolean~) divr16u::$7 ← (word) divr16u::rem >= (word) divr16u::divisor
  (boolean~) divr16u::$8 ← ! (boolean~) divr16u::$7
  if((boolean~) divr16u::$8) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (word) divr16u::rem ← ++ (word) divr16u::rem
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (byte) divr16u::i ← ++ (byte) divr16u::i
  (boolean~) divr16u::$10 ← (byte) divr16u::i != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) divr16u::$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::quotient ← ++ (word) divr16u::quotient
  (word~) divr16u::$9 ← (word) divr16u::rem - (word) divr16u::divisor
  (word) divr16u::rem ← (word~) divr16u::$9
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) rem16u ← (word) divr16u::rem
  (word) divr16u::return ← (word) divr16u::quotient
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6 divr16u::@7
  (word) divr16u::return ← (word) divr16u::return
  return (word) divr16u::return
  to:@return
divr16u::@7: scope:[divr16u]  from
  to:divr16u::@return
@14: scope:[]  from @13
  (signed byte) rem8s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@15
div8s: scope:[div8s]  from
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$1 ← ! (boolean~) div8s::$0
  if((boolean~) div8s::$1) goto div8s::@1
  to:div8s::@7
div8s::@1: scope:[div8s]  from div8s div8s::@8
  (byte~) div8s::$4 ← ((byte)) (signed byte) div8s::dividend
  (byte) div8s::dividendu ← (byte~) div8s::$4
  to:div8s::@2
div8s::@7: scope:[div8s]  from div8s
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendu ← (byte~) div8s::$3
  (byte) div8s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@7
  (byte) div8s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$5 ← (signed byte) div8s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$6 ← ! (boolean~) div8s::$5
  if((boolean~) div8s::$6) goto div8s::@3
  to:div8s::@9
div8s::@8: scope:[div8s]  from
  to:div8s::@1
div8s::@3: scope:[div8s]  from div8s::@10 div8s::@2
  (byte~) div8s::$10 ← ((byte)) (signed byte) div8s::divisor
  (byte) div8s::divisoru ← (byte~) div8s::$10
  to:div8s::@4
div8s::@9: scope:[div8s]  from div8s::@2
  (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor
  (byte~) div8s::$8 ← ((byte)) (signed byte~) div8s::$7
  (byte) div8s::divisoru ← (byte~) div8s::$8
  (byte~) div8s::$9 ← (byte) div8s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg ← (byte~) div8s::$9
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@9
  (byte~) div8s::$11 ← call div8u (byte) div8s::dividendu (byte) div8s::divisoru 
  (byte) div8s::resultu ← (byte~) div8s::$11
  (boolean~) div8s::$12 ← (byte) div8s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$13 ← ! (boolean~) div8s::$12
  if((boolean~) div8s::$13) goto div8s::@5
  to:div8s::@11
div8s::@10: scope:[div8s]  from
  to:div8s::@3
div8s::@5: scope:[div8s]  from div8s::@13 div8s::@4
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u
  (signed byte~) div8s::$17 ← - (signed byte~) div8s::$16
  (signed byte) rem8s ← (signed byte~) div8s::$17
  (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultu
  (signed byte~) div8s::$19 ← - (signed byte~) div8s::$18
  (signed byte) div8s::return ← (signed byte~) div8s::$19
  to:div8s::@return
div8s::@11: scope:[div8s]  from div8s::@4
  (signed byte~) div8s::$14 ← ((signed byte)) (byte) rem8u
  (signed byte) rem8s ← (signed byte~) div8s::$14
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) div8s::resultu
  (signed byte) div8s::return ← (signed byte~) div8s::$15
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@5 div8s::@6
  (signed byte) div8s::return ← (signed byte) div8s::return
  return (signed byte) div8s::return
  to:@return
div8s::@12: scope:[div8s]  from
  to:div8s::@6
div8s::@6: scope:[div8s]  from div8s::@12 div8s::@14
  to:div8s::@return
div8s::@13: scope:[div8s]  from
  to:div8s::@5
div8s::@14: scope:[div8s]  from
  to:div8s::@6
@15: scope:[]  from @14
  (signed word) rem16s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@16
div16s: scope:[div16s]  from
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16s::dividendu ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$0 ← (signed word) div16s::dividend < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$1 ← ! (boolean~) div16s::$0
  if((boolean~) div16s::$1) goto div16s::@1
  to:div16s::@7
div16s::@1: scope:[div16s]  from div16s div16s::@8
  (word~) div16s::$4 ← ((word)) (signed word) div16s::dividend
  (word) div16s::dividendu ← (word~) div16s::$4
  to:div16s::@2
div16s::@7: scope:[div16s]  from div16s
  (signed word~) div16s::$2 ← - (signed word) div16s::dividend
  (word~) div16s::$3 ← ((word)) (signed word~) div16s::$2
  (word) div16s::dividendu ← (word~) div16s::$3
  (byte) div16s::neg ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div16s::@2
div16s::@2: scope:[div16s]  from div16s::@1 div16s::@7
  (word) div16s::divisoru ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$5 ← (signed word) div16s::divisor < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$6 ← ! (boolean~) div16s::$5
  if((boolean~) div16s::$6) goto div16s::@3
  to:div16s::@9
div16s::@8: scope:[div16s]  from
  to:div16s::@1
div16s::@3: scope:[div16s]  from div16s::@10 div16s::@2
  (word~) div16s::$10 ← ((word)) (signed word) div16s::divisor
  (word) div16s::divisoru ← (word~) div16s::$10
  to:div16s::@4
div16s::@9: scope:[div16s]  from div16s::@2
  (signed word~) div16s::$7 ← - (signed word) div16s::divisor
  (word~) div16s::$8 ← ((word)) (signed word~) div16s::$7
  (word) div16s::divisoru ← (word~) div16s::$8
  (byte~) div16s::$9 ← (byte) div16s::neg ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div16s::neg ← (byte~) div16s::$9
  to:div16s::@4
div16s::@4: scope:[div16s]  from div16s::@3 div16s::@9
  (word~) div16s::$11 ← call div16u (word) div16s::dividendu (word) div16s::divisoru 
  (word) div16s::resultu ← (word~) div16s::$11
  (boolean~) div16s::$12 ← (byte) div16s::neg == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$13 ← ! (boolean~) div16s::$12
  if((boolean~) div16s::$13) goto div16s::@5
  to:div16s::@11
div16s::@10: scope:[div16s]  from
  to:div16s::@3
div16s::@5: scope:[div16s]  from div16s::@13 div16s::@4
  (signed word~) div16s::$16 ← ((signed word)) (word) rem16u
  (signed word~) div16s::$17 ← - (signed word~) div16s::$16
  (signed word) rem16s ← (signed word~) div16s::$17
  (signed word~) div16s::$18 ← ((signed word)) (word) div16s::resultu
  (signed word~) div16s::$19 ← - (signed word~) div16s::$18
  (signed word) div16s::return ← (signed word~) div16s::$19
  to:div16s::@return
div16s::@11: scope:[div16s]  from div16s::@4
  (signed word~) div16s::$14 ← ((signed word)) (word) rem16u
  (signed word) rem16s ← (signed word~) div16s::$14
  (signed word~) div16s::$15 ← ((signed word)) (word) div16s::resultu
  (signed word) div16s::return ← (signed word~) div16s::$15
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@11 div16s::@5 div16s::@6
  (signed word) div16s::return ← (signed word) div16s::return
  return (signed word) div16s::return
  to:@return
div16s::@12: scope:[div16s]  from
  to:div16s::@6
div16s::@6: scope:[div16s]  from div16s::@12 div16s::@14
  to:div16s::@return
div16s::@13: scope:[div16s]  from
  to:div16s::@5
div16s::@14: scope:[div16s]  from
  to:div16s::@6
@16: scope:[]  from @15
  to:@17
main: scope:[main]  from
  (void~) main::$0 ← call print_cls 
  (void~) main::$1 ← call test_8u 
  (void~) main::$2 ← call test_16u 
  (void~) main::$3 ← call test_8s 
  (void~) main::$4 ← call test_16s 
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@17: scope:[]  from @16
  to:@18
test_8u: scope:[test_8u]  from
  (byte[]) test_8u::dividends ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) test_8u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) test_8u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@1
  (byte) test_8u::dividend ← *((byte[]) test_8u::dividends + (byte) test_8u::i)
  (byte) test_8u::divisor ← *((byte[]) test_8u::divisors + (byte) test_8u::i)
  (byte~) test_8u::$0 ← call div8u (byte) test_8u::dividend (byte) test_8u::divisor 
  (byte) test_8u::res ← (byte~) test_8u::$0
  (void~) test_8u::$1 ← call print_byte (byte) test_8u::dividend 
  (void~) test_8u::$2 ← call print_str (string) " / @" 
  (void~) test_8u::$3 ← call print_byte (byte) test_8u::divisor 
  (void~) test_8u::$4 ← call print_str (string) " = @" 
  (void~) test_8u::$5 ← call print_byte (byte) test_8u::res 
  (void~) test_8u::$6 ← call print_str (string) " @" 
  (void~) test_8u::$7 ← call print_byte (byte) rem8u 
  (void~) test_8u::$8 ← call print_ln 
  (byte) test_8u::i ← ++ (byte) test_8u::i
  (boolean~) test_8u::$9 ← (byte) test_8u::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8u::$9) goto test_8u::@1
  to:test_8u::@2
test_8u::@2: scope:[test_8u]  from test_8u::@1
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@2
  return 
  to:@return
@18: scope:[]  from @17
  to:@19
test_16u: scope:[test_16u]  from
  (word[]) test_16u::dividends ← { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
  (word[]) test_16u::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16u::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@1
  (word) test_16u::dividend ← *((word[]) test_16u::dividends + (byte) test_16u::i)
  (word) test_16u::divisor ← *((word[]) test_16u::divisors + (byte) test_16u::i)
  (word~) test_16u::$0 ← call div16u (word) test_16u::dividend (word) test_16u::divisor 
  (word) test_16u::res ← (word~) test_16u::$0
  (void~) test_16u::$1 ← call print_word (word) test_16u::dividend 
  (void~) test_16u::$2 ← call print_str (string) " / @" 
  (void~) test_16u::$3 ← call print_word (word) test_16u::divisor 
  (void~) test_16u::$4 ← call print_str (string) " = @" 
  (void~) test_16u::$5 ← call print_word (word) test_16u::res 
  (void~) test_16u::$6 ← call print_str (string) " @" 
  (void~) test_16u::$7 ← call print_word (word) rem16u 
  (void~) test_16u::$8 ← call print_ln 
  (byte/word~) test_16u::$9 ← (byte) test_16u::i + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16u::i ← (byte/word~) test_16u::$9
  (boolean~) test_16u::$10 ← (byte) test_16u::i != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16u::$10) goto test_16u::@1
  to:test_16u::@2
test_16u::@2: scope:[test_16u]  from test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@2
  return 
  to:@return
@19: scope:[]  from @18
  to:@20
test_8s: scope:[test_8s]  from
  (signed byte/signed word/signed dword~) test_8s::$0 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte/signed word/signed dword~) test_8s::$1 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte[]) test_8s::dividends ← { (byte/signed byte/word/signed word/dword/signed dword) 127, (signed byte/signed word/signed dword~) test_8s::$0, (signed byte/signed word/signed dword~) test_8s::$1, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (signed byte/signed word/signed dword~) test_8s::$2 ← - (byte/signed byte/word/signed word/dword/signed dword) 11
  (signed byte/signed word/signed dword~) test_8s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte[]) test_8s::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (signed byte/signed word/signed dword~) test_8s::$2, (signed byte/signed word/signed dword~) test_8s::$3, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8s::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@1
  (signed byte) test_8s::dividend ← *((signed byte[]) test_8s::dividends + (byte) test_8s::i)
  (signed byte) test_8s::divisor ← *((signed byte[]) test_8s::divisors + (byte) test_8s::i)
  (signed byte~) test_8s::$4 ← call div8s (signed byte) test_8s::dividend (signed byte) test_8s::divisor 
  (signed byte) test_8s::res ← (signed byte~) test_8s::$4
  (void~) test_8s::$5 ← call print_sbyte (signed byte) test_8s::dividend 
  (void~) test_8s::$6 ← call print_str (string) " / @" 
  (void~) test_8s::$7 ← call print_sbyte (signed byte) test_8s::divisor 
  (void~) test_8s::$8 ← call print_str (string) " = @" 
  (void~) test_8s::$9 ← call print_sbyte (signed byte) test_8s::res 
  (void~) test_8s::$10 ← call print_str (string) " @" 
  (void~) test_8s::$11 ← call print_sbyte (signed byte) rem8s 
  (void~) test_8s::$12 ← call print_ln 
  (byte) test_8s::i ← ++ (byte) test_8s::i
  (boolean~) test_8s::$13 ← (byte) test_8s::i != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8s::$13) goto test_8s::@1
  to:test_8s::@2
test_8s::@2: scope:[test_8s]  from test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@2
  return 
  to:@return
@20: scope:[]  from @19
  to:@21
test_16s: scope:[test_16s]  from
  (signed word/signed dword~) test_16s::$0 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$1 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$2 ← - (word/signed word/dword/signed dword) 32767
  (signed word[]) test_16s::dividends ← { (word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$0, (signed word/signed dword~) test_16s::$1, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$2 }
  (signed byte/signed word/signed dword~) test_16s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 7
  (signed byte/signed word/signed dword~) test_16s::$4 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte/signed word/signed dword~) test_16s::$5 ← - (byte/signed byte/word/signed word/dword/signed dword) 17
  (signed word[]) test_16s::divisors ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (signed byte/signed word/signed dword~) test_16s::$3, (byte/signed byte/word/signed word/dword/signed dword) 11, (signed byte/signed word/signed dword~) test_16s::$4, (signed byte/signed word/signed dword~) test_16s::$5, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16s::i ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@1
  (signed word) test_16s::dividend ← *((signed word[]) test_16s::dividends + (byte) test_16s::i)
  (signed word) test_16s::divisor ← *((signed word[]) test_16s::divisors + (byte) test_16s::i)
  (signed word~) test_16s::$6 ← call div16s (signed word) test_16s::dividend (signed word) test_16s::divisor 
  (signed word) test_16s::res ← (signed word~) test_16s::$6
  (void~) test_16s::$7 ← call print_sword (signed word) test_16s::dividend 
  (void~) test_16s::$8 ← call print_str (string) " / @" 
  (void~) test_16s::$9 ← call print_sword (signed word) test_16s::divisor 
  (void~) test_16s::$10 ← call print_str (string) " = @" 
  (void~) test_16s::$11 ← call print_sword (signed word) test_16s::res 
  (void~) test_16s::$12 ← call print_str (string) " @" 
  (void~) test_16s::$13 ← call print_sword (signed word) rem16s 
  (void~) test_16s::$14 ← call print_ln 
  (byte/word~) test_16s::$15 ← (byte) test_16s::i + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16s::i ← (byte/word~) test_16s::$15
  (boolean~) test_16s::$16 ← (byte) test_16s::i != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16s::$16) goto test_16s::@1
  to:test_16s::@2
test_16s::@2: scope:[test_16s]  from test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@2
  return 
  to:@return
@21: scope:[]  from @20
  call main 
  to:@end
@end: scope:[]  from @21

Removing unused procedure print_sdword
Removing unused procedure print_dword
Eliminating unused variable - keeping the call (void~) print_sword::$5
Eliminating unused variable - keeping the call (void~) print_sword::$2
Eliminating unused variable - keeping the call (void~) print_sbyte::$5
Eliminating unused variable - keeping the call (void~) print_sbyte::$2
Eliminating unused variable - keeping the call (void~) print_word::$1
Eliminating unused variable - keeping the call (void~) print_word::$3
Eliminating unused variable - keeping the call (void~) print_byte::$1
Eliminating unused variable - keeping the call (void~) print_byte::$3
Eliminating unused variable - keeping the call (void~) main::$0
Eliminating unused variable - keeping the call (void~) main::$1
Eliminating unused variable - keeping the call (void~) main::$2
Eliminating unused variable - keeping the call (void~) main::$3
Eliminating unused variable - keeping the call (void~) main::$4
Eliminating unused variable (byte) test_8u::rem and assignment [207] (byte) test_8u::rem ← (byte/signed byte/word/signed word/dword/signed dword) 0
Eliminating unused variable - keeping the call (void~) test_8u::$1
Eliminating unused variable - keeping the call (void~) test_8u::$2
Eliminating unused variable - keeping the call (void~) test_8u::$3
Eliminating unused variable - keeping the call (void~) test_8u::$4
Eliminating unused variable - keeping the call (void~) test_8u::$5
Eliminating unused variable - keeping the call (void~) test_8u::$6
Eliminating unused variable - keeping the call (void~) test_8u::$7
Eliminating unused variable - keeping the call (void~) test_8u::$8
Eliminating unused variable - keeping the call (void~) test_16u::$1
Eliminating unused variable - keeping the call (void~) test_16u::$2
Eliminating unused variable - keeping the call (void~) test_16u::$3
Eliminating unused variable - keeping the call (void~) test_16u::$4
Eliminating unused variable - keeping the call (void~) test_16u::$5
Eliminating unused variable - keeping the call (void~) test_16u::$6
Eliminating unused variable - keeping the call (void~) test_16u::$7
Eliminating unused variable - keeping the call (void~) test_16u::$8
Eliminating unused variable - keeping the call (void~) test_8s::$5
Eliminating unused variable - keeping the call (void~) test_8s::$6
Eliminating unused variable - keeping the call (void~) test_8s::$7
Eliminating unused variable - keeping the call (void~) test_8s::$8
Eliminating unused variable - keeping the call (void~) test_8s::$9
Eliminating unused variable - keeping the call (void~) test_8s::$10
Eliminating unused variable - keeping the call (void~) test_8s::$11
Eliminating unused variable - keeping the call (void~) test_8s::$12
Eliminating unused variable - keeping the call (void~) test_16s::$7
Eliminating unused variable - keeping the call (void~) test_16s::$8
Eliminating unused variable - keeping the call (void~) test_16s::$9
Eliminating unused variable - keeping the call (void~) test_16s::$10
Eliminating unused variable - keeping the call (void~) test_16s::$11
Eliminating unused variable - keeping the call (void~) test_16s::$12
Eliminating unused variable - keeping the call (void~) test_16s::$13
Eliminating unused variable - keeping the call (void~) test_16s::$14
Creating constant string variable for inline (const string) print_byte::$4 "0123456789abcdef"
Creating constant string variable for inline (const string) test_8u::str " / @"
Creating constant string variable for inline (const string) test_8u::str1 " = @"
Creating constant string variable for inline (const string) test_8u::str2 " @"
Creating constant string variable for inline (const string) test_16u::str " / @"
Creating constant string variable for inline (const string) test_16u::str1 " = @"
Creating constant string variable for inline (const string) test_16u::str2 " @"
Creating constant string variable for inline (const string) test_8s::str " / @"
Creating constant string variable for inline (const string) test_8s::str1 " = @"
Creating constant string variable for inline (const string) test_8s::str2 " @"
Creating constant string variable for inline (const string) test_16s::str " / @"
Creating constant string variable for inline (const string) test_16s::str1 " = @"
Creating constant string variable for inline (const string) test_16s::str2 " @"
Removing empty block print_str::@4
Removing empty block print_str::@3
Removing empty block print_str::@5
Removing empty block print_str::@6
Removing empty block @1
Removing empty block @2
Removing empty block @3
Removing empty block @4
Removing empty block @5
Removing empty block @6
Removing empty block @7
Removing empty block @8
Removing empty block @9
Removing empty block div8u::@1
Removing empty block @11
Removing empty block divr8u::@7
Removing empty block div16u::@1
Removing empty block @13
Removing empty block divr16u::@7
Removing empty block div8s::@8
Removing empty block div8s::@10
Removing empty block div8s::@12
Removing empty block div8s::@6
Removing empty block div8s::@13
Removing empty block div8s::@14
Removing empty block div16s::@8
Removing empty block div16s::@10
Removing empty block div16s::@12
Removing empty block div16s::@6
Removing empty block div16s::@13
Removing empty block div16s::@14
Removing empty block @16
Removing empty block @17
Removing empty block test_8u::@2
Removing empty block @18
Removing empty block test_16u::@2
Removing empty block @19
Removing empty block test_8s::@2
Removing empty block @20
Removing empty block test_16s::@2
PROCEDURE MODIFY VARIABLE ANALYSIS
print_str modifies char_cursor
print_ln modifies line_cursor
print_ln modifies char_cursor
print_sword modifies char_cursor
print_sbyte modifies char_cursor
print_word modifies char_cursor
print_byte modifies char_cursor
print_char modifies char_cursor
print_cls modifies line_cursor
print_cls modifies char_cursor
div8u modifies rem8u
divr8u modifies rem8u
div16u modifies rem16u
divr16u modifies rem16u
div8s modifies rem8u
div8s modifies rem8s
div16s modifies rem16u
div16s modifies rem16s
main modifies line_cursor
main modifies char_cursor
main modifies rem8u
main modifies rem16u
main modifies rem8s
main modifies rem16s
test_8u modifies rem8u
test_8u modifies char_cursor
test_8u modifies line_cursor
test_16u modifies rem16u
test_16u modifies char_cursor
test_16u modifies line_cursor
test_8s modifies rem8u
test_8s modifies rem8s
test_8s modifies char_cursor
test_8s modifies line_cursor
test_16s modifies rem16u
test_16s modifies rem16s
test_16s modifies char_cursor
test_16s modifies line_cursor

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 1024
  (byte*) line_cursor#0 ← (byte*) SCREEN#0
  (byte*) char_cursor#0 ← (byte*) line_cursor#0
  to:@10
print_str: scope:[print_str]  from test_16s::@4 test_16s::@6 test_16s::@8 test_16u::@4 test_16u::@6 test_16u::@8 test_8s::@4 test_8s::@6 test_8s::@8 test_8u::@4 test_8u::@6 test_8u::@8
  (byte*) char_cursor#140 ← phi( test_16s::@4/(byte*) char_cursor#54 test_16s::@6/(byte*) char_cursor#56 test_16s::@8/(byte*) char_cursor#58 test_16u::@4/(byte*) char_cursor#36 test_16u::@6/(byte*) char_cursor#38 test_16u::@8/(byte*) char_cursor#40 test_8s::@4/(byte*) char_cursor#45 test_8s::@6/(byte*) char_cursor#47 test_8s::@8/(byte*) char_cursor#49 test_8u::@4/(byte*) char_cursor#27 test_8u::@6/(byte*) char_cursor#29 test_8u::@8/(byte*) char_cursor#31 )
  (byte*) print_str::str#15 ← phi( test_16s::@4/(byte*) print_str::str#10 test_16s::@6/(byte*) print_str::str#11 test_16s::@8/(byte*) print_str::str#12 test_16u::@4/(byte*) print_str::str#4 test_16u::@6/(byte*) print_str::str#5 test_16u::@8/(byte*) print_str::str#6 test_8s::@4/(byte*) print_str::str#7 test_8s::@6/(byte*) print_str::str#8 test_8s::@8/(byte*) print_str::str#9 test_8u::@4/(byte*) print_str::str#1 test_8u::@6/(byte*) print_str::str#2 test_8u::@8/(byte*) print_str::str#3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  (byte*) char_cursor#126 ← phi( print_str/(byte*) char_cursor#140 print_str::@2/(byte*) char_cursor#1 )
  (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#15 print_str::@2/(byte*) print_str::str#0 )
  (boolean~) print_str::$0 ← *((byte*) print_str::str#13) != (byte) '@'
  if((boolean~) print_str::$0) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  (byte*) char_cursor#64 ← phi( print_str::@1/(byte*) char_cursor#126 )
  (byte*) print_str::str#14 ← phi( print_str::@1/(byte*) print_str::str#13 )
  *((byte*) char_cursor#64) ← *((byte*) print_str::str#14)
  (byte*) char_cursor#1 ← ++ (byte*) char_cursor#64
  (byte*) print_str::str#0 ← ++ (byte*) print_str::str#14
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  (byte*) char_cursor#65 ← phi( print_str::@1/(byte*) char_cursor#126 )
  (byte*) char_cursor#2 ← (byte*) char_cursor#65
  return 
  to:@return
print_ln: scope:[print_ln]  from test_16s::@10 test_16u::@10 test_8s::@10 test_8u::@10
  (byte*) char_cursor#127 ← phi( test_16s::@10/(byte*) char_cursor#60 test_16u::@10/(byte*) char_cursor#42 test_8s::@10/(byte*) char_cursor#51 test_8u::@10/(byte*) char_cursor#33 )
  (byte*) line_cursor#39 ← phi( test_16s::@10/(byte*) line_cursor#44 test_16u::@10/(byte*) line_cursor#42 test_8s::@10/(byte*) line_cursor#43 test_8u::@10/(byte*) line_cursor#41 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) char_cursor#66 ← phi( print_ln/(byte*) char_cursor#127 print_ln::@1/(byte*) char_cursor#66 )
  (byte*) line_cursor#20 ← phi( print_ln/(byte*) line_cursor#39 print_ln::@1/(byte*) line_cursor#1 )
  (byte*~) print_ln::$0 ← (byte*) line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40
  (byte*) line_cursor#1 ← (byte*~) print_ln::$0
  (boolean~) print_ln::$1 ← (byte*) line_cursor#1 < (byte*) char_cursor#66
  if((boolean~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) line_cursor#21 ← phi( print_ln::@1/(byte*) line_cursor#1 )
  (byte*) char_cursor#3 ← (byte*) line_cursor#21
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) char_cursor#67 ← phi( print_ln::@2/(byte*) char_cursor#3 )
  (byte*) line_cursor#22 ← phi( print_ln::@2/(byte*) line_cursor#21 )
  (byte*) line_cursor#2 ← (byte*) line_cursor#22
  (byte*) char_cursor#4 ← (byte*) char_cursor#67
  return 
  to:@return
print_sword: scope:[print_sword]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16s::@9
  (byte*) char_cursor#141 ← phi( test_16s::@3/(byte*) char_cursor#138 test_16s::@5/(byte*) char_cursor#55 test_16s::@7/(byte*) char_cursor#57 test_16s::@9/(byte*) char_cursor#59 )
  (signed word) print_sword::w#5 ← phi( test_16s::@3/(signed word) print_sword::w#1 test_16s::@5/(signed word) print_sword::w#2 test_16s::@7/(signed word) print_sword::w#3 test_16s::@9/(signed word) print_sword::w#4 )
  (boolean~) print_sword::$0 ← (signed word) print_sword::w#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sword::$1 ← ! (boolean~) print_sword::$0
  if((boolean~) print_sword::$1) goto print_sword::@1
  to:print_sword::@2
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  (byte*) char_cursor#128 ← phi( print_sword/(byte*) char_cursor#141 print_sword::@4/(byte*) char_cursor#6 )
  (signed word) print_sword::w#6 ← phi( print_sword/(signed word) print_sword::w#5 print_sword::@4/(signed word) print_sword::w#0 )
  (word~) print_sword::$4 ← ((word)) (signed word) print_sword::w#6
  (word) print_word::w#0 ← (word~) print_sword::$4
  call print_word param-assignment
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@1
  (byte*) char_cursor#68 ← phi( print_sword::@1/(byte*) char_cursor#13 )
  (byte*) char_cursor#5 ← (byte*) char_cursor#68
  to:print_sword::@return
print_sword::@2: scope:[print_sword]  from print_sword
  (signed word) print_sword::w#8 ← phi( print_sword/(signed word) print_sword::w#5 )
  (byte*) char_cursor#129 ← phi( print_sword/(byte*) char_cursor#141 )
  (byte) print_char::ch#0 ← (byte) '-'
  call print_char param-assignment
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  (signed word) print_sword::w#7 ← phi( print_sword::@2/(signed word) print_sword::w#8 )
  (byte*) char_cursor#69 ← phi( print_sword::@2/(byte*) char_cursor#18 )
  (byte*) char_cursor#6 ← (byte*) char_cursor#69
  (signed word~) print_sword::$3 ← - (signed word) print_sword::w#7
  (signed word) print_sword::w#0 ← (signed word~) print_sword::$3
  to:print_sword::@1
print_sword::@return: scope:[print_sword]  from print_sword::@3
  (byte*) char_cursor#70 ← phi( print_sword::@3/(byte*) char_cursor#5 )
  (byte*) char_cursor#7 ← (byte*) char_cursor#70
  return 
  to:@return
print_sbyte: scope:[print_sbyte]  from test_8s::@3 test_8s::@5 test_8s::@7 test_8s::@9
  (byte*) char_cursor#142 ← phi( test_8s::@3/(byte*) char_cursor#137 test_8s::@5/(byte*) char_cursor#46 test_8s::@7/(byte*) char_cursor#48 test_8s::@9/(byte*) char_cursor#50 )
  (signed byte) print_sbyte::b#5 ← phi( test_8s::@3/(signed byte) print_sbyte::b#1 test_8s::@5/(signed byte) print_sbyte::b#2 test_8s::@7/(signed byte) print_sbyte::b#3 test_8s::@9/(signed byte) print_sbyte::b#4 )
  (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) print_sbyte::$1 ← ! (boolean~) print_sbyte::$0
  if((boolean~) print_sbyte::$1) goto print_sbyte::@1
  to:print_sbyte::@2
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@4
  (byte*) char_cursor#130 ← phi( print_sbyte/(byte*) char_cursor#142 print_sbyte::@4/(byte*) char_cursor#9 )
  (signed byte) print_sbyte::b#6 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 print_sbyte::@4/(signed byte) print_sbyte::b#0 )
  (byte~) print_sbyte::$4 ← ((byte)) (signed byte) print_sbyte::b#6
  (byte) print_byte::b#0 ← (byte~) print_sbyte::$4
  call print_byte param-assignment
  to:print_sbyte::@3
print_sbyte::@3: scope:[print_sbyte]  from print_sbyte::@1
  (byte*) char_cursor#71 ← phi( print_sbyte::@1/(byte*) char_cursor#16 )
  (byte*) char_cursor#8 ← (byte*) char_cursor#71
  to:print_sbyte::@return
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  (signed byte) print_sbyte::b#8 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 )
  (byte*) char_cursor#131 ← phi( print_sbyte/(byte*) char_cursor#142 )
  (byte) print_char::ch#1 ← (byte) '-'
  call print_char param-assignment
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@2
  (signed byte) print_sbyte::b#7 ← phi( print_sbyte::@2/(signed byte) print_sbyte::b#8 )
  (byte*) char_cursor#72 ← phi( print_sbyte::@2/(byte*) char_cursor#18 )
  (byte*) char_cursor#9 ← (byte*) char_cursor#72
  (signed byte~) print_sbyte::$3 ← - (signed byte) print_sbyte::b#7
  (signed byte) print_sbyte::b#0 ← (signed byte~) print_sbyte::$3
  to:print_sbyte::@1
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@3
  (byte*) char_cursor#73 ← phi( print_sbyte::@3/(byte*) char_cursor#8 )
  (byte*) char_cursor#10 ← (byte*) char_cursor#73
  return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1 test_16u::@3 test_16u::@5 test_16u::@7 test_16u::@9
  (byte*) char_cursor#132 ← phi( print_sword::@1/(byte*) char_cursor#128 test_16u::@3/(byte*) char_cursor#136 test_16u::@5/(byte*) char_cursor#37 test_16u::@7/(byte*) char_cursor#39 test_16u::@9/(byte*) char_cursor#41 )
  (word) print_word::w#5 ← phi( print_sword::@1/(word) print_word::w#0 test_16u::@3/(word) print_word::w#1 test_16u::@5/(word) print_word::w#2 test_16u::@7/(word) print_word::w#3 test_16u::@9/(word) print_word::w#4 )
  (byte~) print_word::$0 ← > (word) print_word::w#5
  (byte) print_byte::b#1 ← (byte~) print_word::$0
  call print_byte param-assignment
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  (word) print_word::w#6 ← phi( print_word/(word) print_word::w#5 )
  (byte*) char_cursor#74 ← phi( print_word/(byte*) char_cursor#16 )
  (byte*) char_cursor#11 ← (byte*) char_cursor#74
  (byte~) print_word::$2 ← < (word) print_word::w#6
  (byte) print_byte::b#2 ← (byte~) print_word::$2
  call print_byte param-assignment
  to:print_word::@2
print_word::@2: scope:[print_word]  from print_word::@1
  (byte*) char_cursor#75 ← phi( print_word::@1/(byte*) char_cursor#16 )
  (byte*) char_cursor#12 ← (byte*) char_cursor#75
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@2
  (byte*) char_cursor#76 ← phi( print_word::@2/(byte*) char_cursor#12 )
  (byte*) char_cursor#13 ← (byte*) char_cursor#76
  return 
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@1 print_word print_word::@1 test_8u::@3 test_8u::@5 test_8u::@7 test_8u::@9
  (byte*) char_cursor#133 ← phi( print_sbyte::@1/(byte*) char_cursor#130 print_word/(byte*) char_cursor#132 print_word::@1/(byte*) char_cursor#11 test_8u::@3/(byte*) char_cursor#135 test_8u::@5/(byte*) char_cursor#28 test_8u::@7/(byte*) char_cursor#30 test_8u::@9/(byte*) char_cursor#32 )
  (byte) print_byte::b#7 ← phi( print_sbyte::@1/(byte) print_byte::b#0 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 test_8u::@3/(byte) print_byte::b#3 test_8u::@5/(byte) print_byte::b#4 test_8u::@7/(byte) print_byte::b#5 test_8u::@9/(byte) print_byte::b#6 )
  (byte[]) print_byte::hextab#0 ← (const string) print_byte::$4
  (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) print_char::ch#2 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$0)
  call print_char param-assignment
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  (byte) print_byte::b#8 ← phi( print_byte/(byte) print_byte::b#7 )
  (byte*) char_cursor#77 ← phi( print_byte/(byte*) char_cursor#18 )
  (byte*) char_cursor#14 ← (byte*) char_cursor#77
  (byte~) print_byte::$2 ← (byte) print_byte::b#8 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte) print_char::ch#3 ← *((byte[]) print_byte::hextab#0 + (byte~) print_byte::$2)
  call print_char param-assignment
  to:print_byte::@2
print_byte::@2: scope:[print_byte]  from print_byte::@1
  (byte*) char_cursor#78 ← phi( print_byte::@1/(byte*) char_cursor#18 )
  (byte*) char_cursor#15 ← (byte*) char_cursor#78
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@2
  (byte*) char_cursor#79 ← phi( print_byte::@2/(byte*) char_cursor#15 )
  (byte*) char_cursor#16 ← (byte*) char_cursor#79
  return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@2 print_sword::@2
  (byte*) char_cursor#80 ← phi( print_byte/(byte*) char_cursor#133 print_byte::@1/(byte*) char_cursor#14 print_sbyte::@2/(byte*) char_cursor#131 print_sword::@2/(byte*) char_cursor#129 )
  (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sbyte::@2/(byte) print_char::ch#1 print_sword::@2/(byte) print_char::ch#0 )
  *((byte*) char_cursor#80) ← (byte) print_char::ch#4
  (byte*) char_cursor#17 ← ++ (byte*) char_cursor#80
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  (byte*) char_cursor#81 ← phi( print_char/(byte*) char_cursor#17 )
  (byte*) char_cursor#18 ← (byte*) char_cursor#81
  return 
  to:@return
print_cls: scope:[print_cls]  from main
  (byte*) print_cls::sc#0 ← (byte*) SCREEN#0
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  (byte*) print_cls::sc#2 ← phi( print_cls/(byte*) print_cls::sc#0 print_cls::@1/(byte*) print_cls::sc#1 )
  *((byte*) print_cls::sc#2) ← (byte) ' '
  (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  (byte*~) print_cls::$0 ← (byte*) SCREEN#0 + (word/signed word/dword/signed dword) 1000
  (boolean~) print_cls::$1 ← (byte*) print_cls::sc#1 != (byte*~) print_cls::$0
  if((boolean~) print_cls::$1) goto print_cls::@1
  to:print_cls::@2
print_cls::@2: scope:[print_cls]  from print_cls::@1
  (byte*) line_cursor#3 ← (byte*) SCREEN#0
  (byte*) char_cursor#19 ← (byte*) line_cursor#3
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@2
  (byte*) char_cursor#82 ← phi( print_cls::@2/(byte*) char_cursor#19 )
  (byte*) line_cursor#23 ← phi( print_cls::@2/(byte*) line_cursor#3 )
  (byte*) line_cursor#4 ← (byte*) line_cursor#23
  (byte*) char_cursor#20 ← (byte*) char_cursor#82
  return 
  to:@return
@10: scope:[]  from @begin
  (byte*) char_cursor#154 ← phi( @begin/(byte*) char_cursor#0 )
  (byte*) line_cursor#61 ← phi( @begin/(byte*) line_cursor#0 )
  (byte) rem8u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@12
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  (byte) rem8u#31 ← phi( div8s::@4/(byte) rem8u#32 test_8u::@1/(byte) rem8u#36 )
  (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 )
  (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 )
  (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2
  (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2
  (byte) divr8u::rem#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call divr8u param-assignment
  (byte) divr8u::return#0 ← (byte) divr8u::return#2
  to:div8u::@2
div8u::@2: scope:[div8u]  from div8u
  (byte) rem8u#15 ← phi( div8u/(byte) rem8u#4 )
  (byte) divr8u::return#3 ← phi( div8u/(byte) divr8u::return#0 )
  (byte~) div8u::$0 ← (byte) divr8u::return#3
  (byte) rem8u#1 ← (byte) rem8u#15
  (byte) div8u::return#0 ← (byte~) div8u::$0
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@2
  (byte) rem8u#16 ← phi( div8u::@2/(byte) rem8u#1 )
  (byte) div8u::return#4 ← phi( div8u::@2/(byte) div8u::return#0 )
  (byte) div8u::return#1 ← (byte) div8u::return#4
  (byte) rem8u#2 ← (byte) rem8u#16
  return 
  to:@return
divr8u: scope:[divr8u]  from div8u
  (byte) divr8u::divisor#5 ← phi( div8u/(byte) divr8u::divisor#0 )
  (byte) divr8u::dividend#4 ← phi( div8u/(byte) divr8u::dividend#0 )
  (byte) divr8u::rem#9 ← phi( div8u/(byte) divr8u::rem#0 )
  (byte) divr8u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr8u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  (byte) divr8u::i#5 ← phi( divr8u/(byte) divr8u::i#0 divr8u::@3/(byte) divr8u::i#1 )
  (byte) divr8u::divisor#3 ← phi( divr8u/(byte) divr8u::divisor#5 divr8u::@3/(byte) divr8u::divisor#6 )
  (byte) divr8u::quotient#6 ← phi( divr8u/(byte) divr8u::quotient#0 divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#4 divr8u::@3/(byte) divr8u::dividend#5 )
  (byte) divr8u::rem#4 ← phi( divr8u/(byte) divr8u::rem#9 divr8u::@3/(byte) divr8u::rem#10 )
  (byte~) divr8u::$0 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::rem#1 ← (byte~) divr8u::$0
  (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr8u::$3 ← ! (boolean~) divr8u::$2
  if((boolean~) divr8u::$3) goto divr8u::@2
  to:divr8u::@4
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  (byte) divr8u::i#3 ← phi( divr8u::@1/(byte) divr8u::i#5 divr8u::@4/(byte) divr8u::i#6 )
  (byte) divr8u::divisor#1 ← phi( divr8u::@1/(byte) divr8u::divisor#3 divr8u::@4/(byte) divr8u::divisor#4 )
  (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 )
  (byte) divr8u::quotient#3 ← phi( divr8u::@1/(byte) divr8u::quotient#6 divr8u::@4/(byte) divr8u::quotient#7 )
  (byte) divr8u::dividend#3 ← phi( divr8u::@1/(byte) divr8u::dividend#2 divr8u::@4/(byte) divr8u::dividend#6 )
  (byte~) divr8u::$4 ← (byte) divr8u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::dividend#1 ← (byte~) divr8u::$4
  (byte~) divr8u::$5 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) divr8u::quotient#1 ← (byte~) divr8u::$5
  (boolean~) divr8u::$6 ← (byte) divr8u::rem#5 >= (byte) divr8u::divisor#1
  (boolean~) divr8u::$7 ← ! (boolean~) divr8u::$6
  if((boolean~) divr8u::$7) goto divr8u::@3
  to:divr8u::@5
divr8u::@4: scope:[divr8u]  from divr8u::@1
  (byte) divr8u::i#6 ← phi( divr8u::@1/(byte) divr8u::i#5 )
  (byte) divr8u::divisor#4 ← phi( divr8u::@1/(byte) divr8u::divisor#3 )
  (byte) divr8u::quotient#7 ← phi( divr8u::@1/(byte) divr8u::quotient#6 )
  (byte) divr8u::dividend#6 ← phi( divr8u::@1/(byte) divr8u::dividend#2 )
  (byte) divr8u::rem#6 ← phi( divr8u::@1/(byte) divr8u::rem#1 )
  (byte) divr8u::rem#2 ← ++ (byte) divr8u::rem#6
  to:divr8u::@2
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  (byte) divr8u::divisor#6 ← phi( divr8u::@2/(byte) divr8u::divisor#1 divr8u::@5/(byte) divr8u::divisor#2 )
  (byte) divr8u::quotient#8 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 )
  (byte) divr8u::dividend#5 ← phi( divr8u::@2/(byte) divr8u::dividend#1 divr8u::@5/(byte) divr8u::dividend#7 )
  (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 )
  (byte) divr8u::i#2 ← phi( divr8u::@2/(byte) divr8u::i#3 divr8u::@5/(byte) divr8u::i#4 )
  (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2
  (boolean~) divr8u::$9 ← (byte) divr8u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 8
  if((boolean~) divr8u::$9) goto divr8u::@1
  to:divr8u::@6
divr8u::@5: scope:[divr8u]  from divr8u::@2
  (byte) divr8u::dividend#7 ← phi( divr8u::@2/(byte) divr8u::dividend#1 )
  (byte) divr8u::i#4 ← phi( divr8u::@2/(byte) divr8u::i#3 )
  (byte) divr8u::divisor#2 ← phi( divr8u::@2/(byte) divr8u::divisor#1 )
  (byte) divr8u::rem#7 ← phi( divr8u::@2/(byte) divr8u::rem#5 )
  (byte) divr8u::quotient#4 ← phi( divr8u::@2/(byte) divr8u::quotient#1 )
  (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#4
  (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$8 ← (byte) divr8u::rem#7 - (byte) divr8u::divisor#2
  (byte) divr8u::rem#3 ← (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$8
  to:divr8u::@3
divr8u::@6: scope:[divr8u]  from divr8u::@3
  (byte) divr8u::quotient#5 ← phi( divr8u::@3/(byte) divr8u::quotient#8 )
  (byte) divr8u::rem#8 ← phi( divr8u::@3/(byte) divr8u::rem#10 )
  (byte) rem8u#3 ← (byte) divr8u::rem#8
  (byte) divr8u::return#1 ← (byte) divr8u::quotient#5
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@6
  (byte) rem8u#17 ← phi( divr8u::@6/(byte) rem8u#3 )
  (byte) divr8u::return#4 ← phi( divr8u::@6/(byte) divr8u::return#1 )
  (byte) divr8u::return#2 ← (byte) divr8u::return#4
  (byte) rem8u#4 ← (byte) rem8u#17
  return 
  to:@return
@12: scope:[]  from @10
  (byte) rem8u#55 ← phi( @10/(byte) rem8u#0 )
  (byte*) char_cursor#153 ← phi( @10/(byte*) char_cursor#154 )
  (byte*) line_cursor#56 ← phi( @10/(byte*) line_cursor#61 )
  (word) rem16u#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@14
div16u: scope:[div16u]  from div16s::@4 test_16u::@1
  (word) rem16u#31 ← phi( div16s::@4/(word) rem16u#32 test_16u::@1/(word) rem16u#35 )
  (word) div16u::divisor#2 ← phi( div16s::@4/(word) div16u::divisor#0 test_16u::@1/(word) div16u::divisor#1 )
  (word) div16u::dividend#2 ← phi( div16s::@4/(word) div16u::dividend#0 test_16u::@1/(word) div16u::dividend#1 )
  (word) divr16u::dividend#0 ← (word) div16u::dividend#2
  (word) divr16u::divisor#0 ← (word) div16u::divisor#2
  (word) divr16u::rem#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  call divr16u param-assignment
  (word) divr16u::return#0 ← (word) divr16u::return#2
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  (word) rem16u#15 ← phi( div16u/(word) rem16u#4 )
  (word) divr16u::return#3 ← phi( div16u/(word) divr16u::return#0 )
  (word~) div16u::$0 ← (word) divr16u::return#3
  (word) rem16u#1 ← (word) rem16u#15
  (word) div16u::return#0 ← (word~) div16u::$0
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  (word) rem16u#16 ← phi( div16u::@2/(word) rem16u#1 )
  (word) div16u::return#4 ← phi( div16u::@2/(word) div16u::return#0 )
  (word) div16u::return#1 ← (word) div16u::return#4
  (word) rem16u#2 ← (word) rem16u#16
  return 
  to:@return
divr16u: scope:[divr16u]  from div16u
  (word) divr16u::divisor#5 ← phi( div16u/(word) divr16u::divisor#0 )
  (word) divr16u::dividend#4 ← phi( div16u/(word) divr16u::dividend#0 )
  (word) divr16u::rem#9 ← phi( div16u/(word) divr16u::rem#0 )
  (word) divr16u::quotient#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) divr16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  (byte) divr16u::i#5 ← phi( divr16u/(byte) divr16u::i#0 divr16u::@3/(byte) divr16u::i#1 )
  (word) divr16u::divisor#3 ← phi( divr16u/(word) divr16u::divisor#5 divr16u::@3/(word) divr16u::divisor#6 )
  (word) divr16u::quotient#6 ← phi( divr16u/(word) divr16u::quotient#0 divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#4 divr16u::@3/(word) divr16u::dividend#5 )
  (word) divr16u::rem#4 ← phi( divr16u/(word) divr16u::rem#9 divr16u::@3/(word) divr16u::rem#10 )
  (word~) divr16u::$0 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::rem#1 ← (word~) divr16u::$0
  (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128
  (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) divr16u::$4 ← ! (boolean~) divr16u::$3
  if((boolean~) divr16u::$4) goto divr16u::@2
  to:divr16u::@4
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  (byte) divr16u::i#3 ← phi( divr16u::@1/(byte) divr16u::i#5 divr16u::@4/(byte) divr16u::i#6 )
  (word) divr16u::divisor#1 ← phi( divr16u::@1/(word) divr16u::divisor#3 divr16u::@4/(word) divr16u::divisor#4 )
  (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#1 divr16u::@4/(word) divr16u::rem#2 )
  (word) divr16u::quotient#3 ← phi( divr16u::@1/(word) divr16u::quotient#6 divr16u::@4/(word) divr16u::quotient#7 )
  (word) divr16u::dividend#3 ← phi( divr16u::@1/(word) divr16u::dividend#2 divr16u::@4/(word) divr16u::dividend#6 )
  (word~) divr16u::$5 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::dividend#1 ← (word~) divr16u::$5
  (word~) divr16u::$6 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (word) divr16u::quotient#1 ← (word~) divr16u::$6
  (boolean~) divr16u::$7 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
  (boolean~) divr16u::$8 ← ! (boolean~) divr16u::$7
  if((boolean~) divr16u::$8) goto divr16u::@3
  to:divr16u::@5
divr16u::@4: scope:[divr16u]  from divr16u::@1
  (byte) divr16u::i#6 ← phi( divr16u::@1/(byte) divr16u::i#5 )
  (word) divr16u::divisor#4 ← phi( divr16u::@1/(word) divr16u::divisor#3 )
  (word) divr16u::quotient#7 ← phi( divr16u::@1/(word) divr16u::quotient#6 )
  (word) divr16u::dividend#6 ← phi( divr16u::@1/(word) divr16u::dividend#2 )
  (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#1 )
  (word) divr16u::rem#2 ← ++ (word) divr16u::rem#6
  to:divr16u::@2
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  (word) divr16u::divisor#6 ← phi( divr16u::@2/(word) divr16u::divisor#1 divr16u::@5/(word) divr16u::divisor#2 )
  (word) divr16u::quotient#8 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  (word) divr16u::dividend#5 ← phi( divr16u::@2/(word) divr16u::dividend#1 divr16u::@5/(word) divr16u::dividend#7 )
  (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#3 )
  (byte) divr16u::i#2 ← phi( divr16u::@2/(byte) divr16u::i#3 divr16u::@5/(byte) divr16u::i#4 )
  (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  (boolean~) divr16u::$10 ← (byte) divr16u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 16
  if((boolean~) divr16u::$10) goto divr16u::@1
  to:divr16u::@6
divr16u::@5: scope:[divr16u]  from divr16u::@2
  (word) divr16u::dividend#7 ← phi( divr16u::@2/(word) divr16u::dividend#1 )
  (byte) divr16u::i#4 ← phi( divr16u::@2/(byte) divr16u::i#3 )
  (word) divr16u::divisor#2 ← phi( divr16u::@2/(word) divr16u::divisor#1 )
  (word) divr16u::rem#7 ← phi( divr16u::@2/(word) divr16u::rem#5 )
  (word) divr16u::quotient#4 ← phi( divr16u::@2/(word) divr16u::quotient#1 )
  (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#4
  (word~) divr16u::$9 ← (word) divr16u::rem#7 - (word) divr16u::divisor#2
  (word) divr16u::rem#3 ← (word~) divr16u::$9
  to:divr16u::@3
divr16u::@6: scope:[divr16u]  from divr16u::@3
  (word) divr16u::quotient#5 ← phi( divr16u::@3/(word) divr16u::quotient#8 )
  (word) divr16u::rem#8 ← phi( divr16u::@3/(word) divr16u::rem#10 )
  (word) rem16u#3 ← (word) divr16u::rem#8
  (word) divr16u::return#1 ← (word) divr16u::quotient#5
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  (word) rem16u#17 ← phi( divr16u::@6/(word) rem16u#3 )
  (word) divr16u::return#4 ← phi( divr16u::@6/(word) divr16u::return#1 )
  (word) divr16u::return#2 ← (word) divr16u::return#4
  (word) rem16u#4 ← (word) rem16u#17
  return 
  to:@return
@14: scope:[]  from @12
  (word) rem16u#50 ← phi( @12/(word) rem16u#0 )
  (byte) rem8u#52 ← phi( @12/(byte) rem8u#55 )
  (byte*) char_cursor#148 ← phi( @12/(byte*) char_cursor#153 )
  (byte*) line_cursor#51 ← phi( @12/(byte*) line_cursor#56 )
  (signed byte) rem8s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@15
div8s: scope:[div8s]  from test_8s::@1
  (byte) rem8u#60 ← phi( test_8s::@1/(byte) rem8u#39 )
  (signed byte) div8s::divisor#6 ← phi( test_8s::@1/(signed byte) div8s::divisor#0 )
  (signed byte) div8s::dividend#1 ← phi( test_8s::@1/(signed byte) div8s::dividend#0 )
  (byte) div8s::neg#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) div8s::dividendu#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$0 ← (signed byte) div8s::dividend#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$1 ← ! (boolean~) div8s::$0
  if((boolean~) div8s::$1) goto div8s::@1
  to:div8s::@7
div8s::@1: scope:[div8s]  from div8s
  (byte) rem8u#56 ← phi( div8s/(byte) rem8u#60 )
  (byte) div8s::neg#7 ← phi( div8s/(byte) div8s::neg#0 )
  (signed byte) div8s::divisor#4 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#2 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (byte~) div8s::$4 ← ((byte)) (signed byte) div8s::dividend#2
  (byte) div8s::dividendu#1 ← (byte~) div8s::$4
  to:div8s::@2
div8s::@7: scope:[div8s]  from div8s
  (byte) rem8u#57 ← phi( div8s/(byte) rem8u#60 )
  (signed byte) div8s::divisor#5 ← phi( div8s/(signed byte) div8s::divisor#6 )
  (signed byte) div8s::dividend#3 ← phi( div8s/(signed byte) div8s::dividend#1 )
  (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#3
  (byte~) div8s::$3 ← ((byte)) (signed byte~) div8s::$2
  (byte) div8s::dividendu#2 ← (byte~) div8s::$3
  (byte) div8s::neg#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@1 div8s::@7
  (byte) rem8u#51 ← phi( div8s::@1/(byte) rem8u#56 div8s::@7/(byte) rem8u#57 )
  (byte) div8s::dividendu#6 ← phi( div8s::@1/(byte) div8s::dividendu#1 div8s::@7/(byte) div8s::dividendu#2 )
  (byte) div8s::neg#5 ← phi( div8s::@1/(byte) div8s::neg#7 div8s::@7/(byte) div8s::neg#1 )
  (signed byte) div8s::divisor#1 ← phi( div8s::@1/(signed byte) div8s::divisor#4 div8s::@7/(signed byte) div8s::divisor#5 )
  (byte) div8s::divisoru#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$5 ← (signed byte) div8s::divisor#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$6 ← ! (boolean~) div8s::$5
  if((boolean~) div8s::$6) goto div8s::@3
  to:div8s::@9
div8s::@3: scope:[div8s]  from div8s::@2
  (byte) div8s::neg#8 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (byte) rem8u#42 ← phi( div8s::@2/(byte) rem8u#51 )
  (byte) div8s::dividendu#4 ← phi( div8s::@2/(byte) div8s::dividendu#6 )
  (signed byte) div8s::divisor#2 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (byte~) div8s::$10 ← ((byte)) (signed byte) div8s::divisor#2
  (byte) div8s::divisoru#1 ← (byte~) div8s::$10
  to:div8s::@4
div8s::@9: scope:[div8s]  from div8s::@2
  (byte) rem8u#43 ← phi( div8s::@2/(byte) rem8u#51 )
  (byte) div8s::dividendu#5 ← phi( div8s::@2/(byte) div8s::dividendu#6 )
  (byte) div8s::neg#3 ← phi( div8s::@2/(byte) div8s::neg#5 )
  (signed byte) div8s::divisor#3 ← phi( div8s::@2/(signed byte) div8s::divisor#1 )
  (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#3
  (byte~) div8s::$8 ← ((byte)) (signed byte~) div8s::$7
  (byte) div8s::divisoru#2 ← (byte~) div8s::$8
  (byte~) div8s::$9 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div8s::neg#2 ← (byte~) div8s::$9
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@3 div8s::@9
  (byte) div8s::neg#6 ← phi( div8s::@3/(byte) div8s::neg#8 div8s::@9/(byte) div8s::neg#2 )
  (byte) rem8u#32 ← phi( div8s::@3/(byte) rem8u#42 div8s::@9/(byte) rem8u#43 )
  (byte) div8s::divisoru#3 ← phi( div8s::@3/(byte) div8s::divisoru#1 div8s::@9/(byte) div8s::divisoru#2 )
  (byte) div8s::dividendu#3 ← phi( div8s::@3/(byte) div8s::dividendu#4 div8s::@9/(byte) div8s::dividendu#5 )
  (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3
  (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3
  call div8u param-assignment
  (byte) div8u::return#2 ← (byte) div8u::return#1
  to:div8s::@15
div8s::@15: scope:[div8s]  from div8s::@4
  (byte) div8s::neg#4 ← phi( div8s::@4/(byte) div8s::neg#6 )
  (byte) rem8u#18 ← phi( div8s::@4/(byte) rem8u#2 )
  (byte) div8u::return#5 ← phi( div8s::@4/(byte) div8u::return#2 )
  (byte~) div8s::$11 ← (byte) div8u::return#5
  (byte) rem8u#5 ← (byte) rem8u#18
  (byte) div8s::resultu#0 ← (byte~) div8s::$11
  (boolean~) div8s::$12 ← (byte) div8s::neg#4 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div8s::$13 ← ! (boolean~) div8s::$12
  if((boolean~) div8s::$13) goto div8s::@5
  to:div8s::@11
div8s::@5: scope:[div8s]  from div8s::@15
  (byte) div8s::resultu#1 ← phi( div8s::@15/(byte) div8s::resultu#0 )
  (byte) rem8u#19 ← phi( div8s::@15/(byte) rem8u#5 )
  (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u#19
  (signed byte~) div8s::$17 ← - (signed byte~) div8s::$16
  (signed byte) rem8s#1 ← (signed byte~) div8s::$17
  (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultu#1
  (signed byte~) div8s::$19 ← - (signed byte~) div8s::$18
  (signed byte) div8s::return#0 ← (signed byte~) div8s::$19
  to:div8s::@return
div8s::@11: scope:[div8s]  from div8s::@15
  (byte) div8s::resultu#2 ← phi( div8s::@15/(byte) div8s::resultu#0 )
  (byte) rem8u#20 ← phi( div8s::@15/(byte) rem8u#5 )
  (signed byte~) div8s::$14 ← ((signed byte)) (byte) rem8u#20
  (signed byte) rem8s#2 ← (signed byte~) div8s::$14
  (signed byte~) div8s::$15 ← ((signed byte)) (byte) div8s::resultu#2
  (signed byte) div8s::return#1 ← (signed byte~) div8s::$15
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@11 div8s::@5
  (signed byte) rem8s#9 ← phi( div8s::@11/(signed byte) rem8s#2 div8s::@5/(signed byte) rem8s#1 )
  (byte) rem8u#21 ← phi( div8s::@11/(byte) rem8u#20 div8s::@5/(byte) rem8u#19 )
  (signed byte) div8s::return#4 ← phi( div8s::@11/(signed byte) div8s::return#1 div8s::@5/(signed byte) div8s::return#0 )
  (signed byte) div8s::return#2 ← (signed byte) div8s::return#4
  (byte) rem8u#6 ← (byte) rem8u#21
  (signed byte) rem8s#3 ← (signed byte) rem8s#9
  return 
  to:@return
@15: scope:[]  from @14
  (signed byte) rem8s#26 ← phi( @14/(signed byte) rem8s#0 )
  (word) rem16u#49 ← phi( @14/(word) rem16u#50 )
  (byte) rem8u#50 ← phi( @14/(byte) rem8u#52 )
  (byte*) char_cursor#147 ← phi( @14/(byte*) char_cursor#148 )
  (byte*) line_cursor#50 ← phi( @14/(byte*) line_cursor#51 )
  (signed word) rem16s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@21
div16s: scope:[div16s]  from test_16s::@1
  (word) rem16u#59 ← phi( test_16s::@1/(word) rem16u#38 )
  (signed word) div16s::divisor#6 ← phi( test_16s::@1/(signed word) div16s::divisor#0 )
  (signed word) div16s::dividend#1 ← phi( test_16s::@1/(signed word) div16s::dividend#0 )
  (byte) div16s::neg#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (word) div16s::dividendu#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$0 ← (signed word) div16s::dividend#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$1 ← ! (boolean~) div16s::$0
  if((boolean~) div16s::$1) goto div16s::@1
  to:div16s::@7
div16s::@1: scope:[div16s]  from div16s
  (word) rem16u#55 ← phi( div16s/(word) rem16u#59 )
  (byte) div16s::neg#7 ← phi( div16s/(byte) div16s::neg#0 )
  (signed word) div16s::divisor#4 ← phi( div16s/(signed word) div16s::divisor#6 )
  (signed word) div16s::dividend#2 ← phi( div16s/(signed word) div16s::dividend#1 )
  (word~) div16s::$4 ← ((word)) (signed word) div16s::dividend#2
  (word) div16s::dividendu#1 ← (word~) div16s::$4
  to:div16s::@2
div16s::@7: scope:[div16s]  from div16s
  (word) rem16u#56 ← phi( div16s/(word) rem16u#59 )
  (signed word) div16s::divisor#5 ← phi( div16s/(signed word) div16s::divisor#6 )
  (signed word) div16s::dividend#3 ← phi( div16s/(signed word) div16s::dividend#1 )
  (signed word~) div16s::$2 ← - (signed word) div16s::dividend#3
  (word~) div16s::$3 ← ((word)) (signed word~) div16s::$2
  (word) div16s::dividendu#2 ← (word~) div16s::$3
  (byte) div16s::neg#1 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  to:div16s::@2
div16s::@2: scope:[div16s]  from div16s::@1 div16s::@7
  (word) rem16u#51 ← phi( div16s::@1/(word) rem16u#55 div16s::@7/(word) rem16u#56 )
  (word) div16s::dividendu#6 ← phi( div16s::@1/(word) div16s::dividendu#1 div16s::@7/(word) div16s::dividendu#2 )
  (byte) div16s::neg#5 ← phi( div16s::@1/(byte) div16s::neg#7 div16s::@7/(byte) div16s::neg#1 )
  (signed word) div16s::divisor#1 ← phi( div16s::@1/(signed word) div16s::divisor#4 div16s::@7/(signed word) div16s::divisor#5 )
  (word) div16s::divisoru#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$5 ← (signed word) div16s::divisor#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$6 ← ! (boolean~) div16s::$5
  if((boolean~) div16s::$6) goto div16s::@3
  to:div16s::@9
div16s::@3: scope:[div16s]  from div16s::@2
  (byte) div16s::neg#8 ← phi( div16s::@2/(byte) div16s::neg#5 )
  (word) rem16u#41 ← phi( div16s::@2/(word) rem16u#51 )
  (word) div16s::dividendu#4 ← phi( div16s::@2/(word) div16s::dividendu#6 )
  (signed word) div16s::divisor#2 ← phi( div16s::@2/(signed word) div16s::divisor#1 )
  (word~) div16s::$10 ← ((word)) (signed word) div16s::divisor#2
  (word) div16s::divisoru#1 ← (word~) div16s::$10
  to:div16s::@4
div16s::@9: scope:[div16s]  from div16s::@2
  (word) rem16u#42 ← phi( div16s::@2/(word) rem16u#51 )
  (word) div16s::dividendu#5 ← phi( div16s::@2/(word) div16s::dividendu#6 )
  (byte) div16s::neg#3 ← phi( div16s::@2/(byte) div16s::neg#5 )
  (signed word) div16s::divisor#3 ← phi( div16s::@2/(signed word) div16s::divisor#1 )
  (signed word~) div16s::$7 ← - (signed word) div16s::divisor#3
  (word~) div16s::$8 ← ((word)) (signed word~) div16s::$7
  (word) div16s::divisoru#2 ← (word~) div16s::$8
  (byte~) div16s::$9 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) div16s::neg#2 ← (byte~) div16s::$9
  to:div16s::@4
div16s::@4: scope:[div16s]  from div16s::@3 div16s::@9
  (byte) div16s::neg#6 ← phi( div16s::@3/(byte) div16s::neg#8 div16s::@9/(byte) div16s::neg#2 )
  (word) rem16u#32 ← phi( div16s::@3/(word) rem16u#41 div16s::@9/(word) rem16u#42 )
  (word) div16s::divisoru#3 ← phi( div16s::@3/(word) div16s::divisoru#1 div16s::@9/(word) div16s::divisoru#2 )
  (word) div16s::dividendu#3 ← phi( div16s::@3/(word) div16s::dividendu#4 div16s::@9/(word) div16s::dividendu#5 )
  (word) div16u::dividend#0 ← (word) div16s::dividendu#3
  (word) div16u::divisor#0 ← (word) div16s::divisoru#3
  call div16u param-assignment
  (word) div16u::return#2 ← (word) div16u::return#1
  to:div16s::@15
div16s::@15: scope:[div16s]  from div16s::@4
  (byte) div16s::neg#4 ← phi( div16s::@4/(byte) div16s::neg#6 )
  (word) rem16u#18 ← phi( div16s::@4/(word) rem16u#2 )
  (word) div16u::return#5 ← phi( div16s::@4/(word) div16u::return#2 )
  (word~) div16s::$11 ← (word) div16u::return#5
  (word) rem16u#5 ← (word) rem16u#18
  (word) div16s::resultu#0 ← (word~) div16s::$11
  (boolean~) div16s::$12 ← (byte) div16s::neg#4 == (byte/signed byte/word/signed word/dword/signed dword) 0
  (boolean~) div16s::$13 ← ! (boolean~) div16s::$12
  if((boolean~) div16s::$13) goto div16s::@5
  to:div16s::@11
div16s::@5: scope:[div16s]  from div16s::@15
  (word) div16s::resultu#1 ← phi( div16s::@15/(word) div16s::resultu#0 )
  (word) rem16u#19 ← phi( div16s::@15/(word) rem16u#5 )
  (signed word~) div16s::$16 ← ((signed word)) (word) rem16u#19
  (signed word~) div16s::$17 ← - (signed word~) div16s::$16
  (signed word) rem16s#1 ← (signed word~) div16s::$17
  (signed word~) div16s::$18 ← ((signed word)) (word) div16s::resultu#1
  (signed word~) div16s::$19 ← - (signed word~) div16s::$18
  (signed word) div16s::return#0 ← (signed word~) div16s::$19
  to:div16s::@return
div16s::@11: scope:[div16s]  from div16s::@15
  (word) div16s::resultu#2 ← phi( div16s::@15/(word) div16s::resultu#0 )
  (word) rem16u#20 ← phi( div16s::@15/(word) rem16u#5 )
  (signed word~) div16s::$14 ← ((signed word)) (word) rem16u#20
  (signed word) rem16s#2 ← (signed word~) div16s::$14
  (signed word~) div16s::$15 ← ((signed word)) (word) div16s::resultu#2
  (signed word) div16s::return#1 ← (signed word~) div16s::$15
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@11 div16s::@5
  (signed word) rem16s#9 ← phi( div16s::@11/(signed word) rem16s#2 div16s::@5/(signed word) rem16s#1 )
  (word) rem16u#21 ← phi( div16s::@11/(word) rem16u#20 div16s::@5/(word) rem16u#19 )
  (signed word) div16s::return#4 ← phi( div16s::@11/(signed word) div16s::return#1 div16s::@5/(signed word) div16s::return#0 )
  (signed word) div16s::return#2 ← (signed word) div16s::return#4
  (word) rem16u#6 ← (word) rem16u#21
  (signed word) rem16s#3 ← (signed word) rem16s#9
  return 
  to:@return
main: scope:[main]  from @21
  (signed word) rem16s#29 ← phi( @21/(signed word) rem16s#20 )
  (signed byte) rem8s#29 ← phi( @21/(signed byte) rem8s#21 )
  (word) rem16u#52 ← phi( @21/(word) rem16u#40 )
  (byte) rem8u#44 ← phi( @21/(byte) rem8u#41 )
  (byte*) char_cursor#134 ← phi( @21/(byte*) char_cursor#139 )
  (byte*) line_cursor#40 ← phi( @21/(byte*) line_cursor#45 )
  call print_cls param-assignment
  to:main::@1
main::@1: scope:[main]  from main
  (signed word) rem16s#27 ← phi( main/(signed word) rem16s#29 )
  (signed byte) rem8s#27 ← phi( main/(signed byte) rem8s#29 )
  (word) rem16u#43 ← phi( main/(word) rem16u#52 )
  (byte) rem8u#33 ← phi( main/(byte) rem8u#44 )
  (byte*) char_cursor#83 ← phi( main/(byte*) char_cursor#20 )
  (byte*) line_cursor#24 ← phi( main/(byte*) line_cursor#4 )
  (byte*) line_cursor#5 ← (byte*) line_cursor#24
  (byte*) char_cursor#21 ← (byte*) char_cursor#83
  call test_8u param-assignment
  to:main::@2
main::@2: scope:[main]  from main::@1
  (signed word) rem16s#25 ← phi( main::@1/(signed word) rem16s#27 )
  (signed byte) rem8s#22 ← phi( main::@1/(signed byte) rem8s#27 )
  (word) rem16u#33 ← phi( main::@1/(word) rem16u#43 )
  (byte*) line_cursor#25 ← phi( main::@1/(byte*) line_cursor#12 )
  (byte*) char_cursor#84 ← phi( main::@1/(byte*) char_cursor#35 )
  (byte) rem8u#22 ← phi( main::@1/(byte) rem8u#11 )
  (byte) rem8u#7 ← (byte) rem8u#22
  (byte*) char_cursor#22 ← (byte*) char_cursor#84
  (byte*) line_cursor#6 ← (byte*) line_cursor#25
  call test_16u param-assignment
  to:main::@3
main::@3: scope:[main]  from main::@2
  (signed word) rem16s#21 ← phi( main::@2/(signed word) rem16s#25 )
  (signed byte) rem8s#16 ← phi( main::@2/(signed byte) rem8s#22 )
  (byte) rem8u#34 ← phi( main::@2/(byte) rem8u#7 )
  (byte*) line_cursor#26 ← phi( main::@2/(byte*) line_cursor#14 )
  (byte*) char_cursor#85 ← phi( main::@2/(byte*) char_cursor#44 )
  (word) rem16u#22 ← phi( main::@2/(word) rem16u#11 )
  (word) rem16u#7 ← (word) rem16u#22
  (byte*) char_cursor#23 ← (byte*) char_cursor#85
  (byte*) line_cursor#7 ← (byte*) line_cursor#26
  call test_8s param-assignment
  to:main::@4
main::@4: scope:[main]  from main::@3
  (signed word) rem16s#16 ← phi( main::@3/(signed word) rem16s#21 )
  (word) rem16u#34 ← phi( main::@3/(word) rem16u#7 )
  (byte*) line_cursor#27 ← phi( main::@3/(byte*) line_cursor#16 )
  (byte*) char_cursor#86 ← phi( main::@3/(byte*) char_cursor#53 )
  (signed byte) rem8s#10 ← phi( main::@3/(signed byte) rem8s#7 )
  (byte) rem8u#23 ← phi( main::@3/(byte) rem8u#13 )
  (byte) rem8u#8 ← (byte) rem8u#23
  (signed byte) rem8s#4 ← (signed byte) rem8s#10
  (byte*) char_cursor#24 ← (byte*) char_cursor#86
  (byte*) line_cursor#8 ← (byte*) line_cursor#27
  call test_16s param-assignment
  to:main::@5
main::@5: scope:[main]  from main::@4
  (signed byte) rem8s#17 ← phi( main::@4/(signed byte) rem8s#4 )
  (byte) rem8u#35 ← phi( main::@4/(byte) rem8u#8 )
  (byte*) line_cursor#28 ← phi( main::@4/(byte*) line_cursor#18 )
  (byte*) char_cursor#87 ← phi( main::@4/(byte*) char_cursor#62 )
  (signed word) rem16s#10 ← phi( main::@4/(signed word) rem16s#7 )
  (word) rem16u#23 ← phi( main::@4/(word) rem16u#13 )
  (word) rem16u#8 ← (word) rem16u#23
  (signed word) rem16s#4 ← (signed word) rem16s#10
  (byte*) char_cursor#25 ← (byte*) char_cursor#87
  (byte*) line_cursor#9 ← (byte*) line_cursor#28
  to:main::@return
main::@return: scope:[main]  from main::@5
  (signed word) rem16s#11 ← phi( main::@5/(signed word) rem16s#4 )
  (signed byte) rem8s#11 ← phi( main::@5/(signed byte) rem8s#17 )
  (word) rem16u#24 ← phi( main::@5/(word) rem16u#8 )
  (byte) rem8u#24 ← phi( main::@5/(byte) rem8u#35 )
  (byte*) char_cursor#88 ← phi( main::@5/(byte*) char_cursor#25 )
  (byte*) line_cursor#29 ← phi( main::@5/(byte*) line_cursor#9 )
  (byte*) line_cursor#10 ← (byte*) line_cursor#29
  (byte*) char_cursor#26 ← (byte*) char_cursor#88
  (byte) rem8u#9 ← (byte) rem8u#24
  (word) rem16u#9 ← (word) rem16u#24
  (signed byte) rem8s#5 ← (signed byte) rem8s#11
  (signed word) rem16s#5 ← (signed word) rem16s#11
  return 
  to:@return
test_8u: scope:[test_8u]  from main::@1
  (byte*) line_cursor#82 ← phi( main::@1/(byte*) line_cursor#5 )
  (byte*) char_cursor#149 ← phi( main::@1/(byte*) char_cursor#21 )
  (byte) rem8u#45 ← phi( main::@1/(byte) rem8u#33 )
  (byte[]) test_8u::dividends#0 ← { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
  (byte[]) test_8u::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@11
  (byte*) line_cursor#78 ← phi( test_8u/(byte*) line_cursor#82 test_8u::@11/(byte*) line_cursor#11 )
  (byte*) char_cursor#143 ← phi( test_8u/(byte*) char_cursor#149 test_8u::@11/(byte*) char_cursor#34 )
  (byte) rem8u#36 ← phi( test_8u/(byte) rem8u#45 test_8u::@11/(byte) rem8u#38 )
  (byte) test_8u::i#2 ← phi( test_8u/(byte) test_8u::i#0 test_8u::@11/(byte) test_8u::i#1 )
  (byte) test_8u::dividend#0 ← *((byte[]) test_8u::dividends#0 + (byte) test_8u::i#2)
  (byte) test_8u::divisor#0 ← *((byte[]) test_8u::divisors#0 + (byte) test_8u::i#2)
  (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0
  (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0
  call div8u param-assignment
  (byte) div8u::return#3 ← (byte) div8u::return#1
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@1
  (byte) test_8u::i#11 ← phi( test_8u::@1/(byte) test_8u::i#2 )
  (byte*) line_cursor#74 ← phi( test_8u::@1/(byte*) line_cursor#78 )
  (byte) test_8u::divisor#3 ← phi( test_8u::@1/(byte) test_8u::divisor#0 )
  (byte*) char_cursor#135 ← phi( test_8u::@1/(byte*) char_cursor#143 )
  (byte) test_8u::dividend#1 ← phi( test_8u::@1/(byte) test_8u::dividend#0 )
  (byte) rem8u#25 ← phi( test_8u::@1/(byte) rem8u#2 )
  (byte) div8u::return#6 ← phi( test_8u::@1/(byte) div8u::return#3 )
  (byte~) test_8u::$0 ← (byte) div8u::return#6
  (byte) rem8u#10 ← (byte) rem8u#25
  (byte) test_8u::res#0 ← (byte~) test_8u::$0
  (byte) print_byte::b#3 ← (byte) test_8u::dividend#1
  call print_byte param-assignment
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  (byte) test_8u::i#10 ← phi( test_8u::@3/(byte) test_8u::i#11 )
  (byte*) line_cursor#70 ← phi( test_8u::@3/(byte*) line_cursor#74 )
  (byte) rem8u#61 ← phi( test_8u::@3/(byte) rem8u#10 )
  (byte) test_8u::res#4 ← phi( test_8u::@3/(byte) test_8u::res#0 )
  (byte) test_8u::divisor#2 ← phi( test_8u::@3/(byte) test_8u::divisor#3 )
  (byte*) char_cursor#89 ← phi( test_8u::@3/(byte*) char_cursor#16 )
  (byte*) char_cursor#27 ← (byte*) char_cursor#89
  (byte*) print_str::str#1 ← (const string) test_8u::str
  call print_str param-assignment
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  (byte) test_8u::i#9 ← phi( test_8u::@4/(byte) test_8u::i#10 )
  (byte*) line_cursor#66 ← phi( test_8u::@4/(byte*) line_cursor#70 )
  (byte) rem8u#58 ← phi( test_8u::@4/(byte) rem8u#61 )
  (byte) test_8u::res#3 ← phi( test_8u::@4/(byte) test_8u::res#4 )
  (byte) test_8u::divisor#1 ← phi( test_8u::@4/(byte) test_8u::divisor#2 )
  (byte*) char_cursor#90 ← phi( test_8u::@4/(byte*) char_cursor#2 )
  (byte*) char_cursor#28 ← (byte*) char_cursor#90
  (byte) print_byte::b#4 ← (byte) test_8u::divisor#1
  call print_byte param-assignment
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  (byte) test_8u::i#8 ← phi( test_8u::@5/(byte) test_8u::i#9 )
  (byte*) line_cursor#62 ← phi( test_8u::@5/(byte*) line_cursor#66 )
  (byte) rem8u#53 ← phi( test_8u::@5/(byte) rem8u#58 )
  (byte) test_8u::res#2 ← phi( test_8u::@5/(byte) test_8u::res#3 )
  (byte*) char_cursor#91 ← phi( test_8u::@5/(byte*) char_cursor#16 )
  (byte*) char_cursor#29 ← (byte*) char_cursor#91
  (byte*) print_str::str#2 ← (const string) test_8u::str1
  call print_str param-assignment
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  (byte) test_8u::i#7 ← phi( test_8u::@6/(byte) test_8u::i#8 )
  (byte*) line_cursor#57 ← phi( test_8u::@6/(byte*) line_cursor#62 )
  (byte) rem8u#46 ← phi( test_8u::@6/(byte) rem8u#53 )
  (byte) test_8u::res#1 ← phi( test_8u::@6/(byte) test_8u::res#2 )
  (byte*) char_cursor#92 ← phi( test_8u::@6/(byte*) char_cursor#2 )
  (byte*) char_cursor#30 ← (byte*) char_cursor#92
  (byte) print_byte::b#5 ← (byte) test_8u::res#1
  call print_byte param-assignment
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  (byte) test_8u::i#6 ← phi( test_8u::@7/(byte) test_8u::i#7 )
  (byte*) line_cursor#52 ← phi( test_8u::@7/(byte*) line_cursor#57 )
  (byte) rem8u#37 ← phi( test_8u::@7/(byte) rem8u#46 )
  (byte*) char_cursor#93 ← phi( test_8u::@7/(byte*) char_cursor#16 )
  (byte*) char_cursor#31 ← (byte*) char_cursor#93
  (byte*) print_str::str#3 ← (const string) test_8u::str2
  call print_str param-assignment
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  (byte) test_8u::i#5 ← phi( test_8u::@8/(byte) test_8u::i#6 )
  (byte*) line_cursor#46 ← phi( test_8u::@8/(byte*) line_cursor#52 )
  (byte) rem8u#26 ← phi( test_8u::@8/(byte) rem8u#37 )
  (byte*) char_cursor#94 ← phi( test_8u::@8/(byte*) char_cursor#2 )
  (byte*) char_cursor#32 ← (byte*) char_cursor#94
  (byte) print_byte::b#6 ← (byte) rem8u#26
  call print_byte param-assignment
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  (byte) rem8u#47 ← phi( test_8u::@9/(byte) rem8u#26 )
  (byte) test_8u::i#4 ← phi( test_8u::@9/(byte) test_8u::i#5 )
  (byte*) line_cursor#41 ← phi( test_8u::@9/(byte*) line_cursor#46 )
  (byte*) char_cursor#95 ← phi( test_8u::@9/(byte*) char_cursor#16 )
  (byte*) char_cursor#33 ← (byte*) char_cursor#95
  call print_ln param-assignment
  to:test_8u::@11
test_8u::@11: scope:[test_8u]  from test_8u::@10
  (byte) rem8u#38 ← phi( test_8u::@10/(byte) rem8u#47 )
  (byte) test_8u::i#3 ← phi( test_8u::@10/(byte) test_8u::i#4 )
  (byte*) char_cursor#96 ← phi( test_8u::@10/(byte*) char_cursor#4 )
  (byte*) line_cursor#30 ← phi( test_8u::@10/(byte*) line_cursor#2 )
  (byte*) line_cursor#11 ← (byte*) line_cursor#30
  (byte*) char_cursor#34 ← (byte*) char_cursor#96
  (byte) test_8u::i#1 ← ++ (byte) test_8u::i#3
  (boolean~) test_8u::$9 ← (byte) test_8u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8u::$9) goto test_8u::@1
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@11
  (byte*) line_cursor#31 ← phi( test_8u::@11/(byte*) line_cursor#11 )
  (byte*) char_cursor#97 ← phi( test_8u::@11/(byte*) char_cursor#34 )
  (byte) rem8u#27 ← phi( test_8u::@11/(byte) rem8u#38 )
  (byte) rem8u#11 ← (byte) rem8u#27
  (byte*) char_cursor#35 ← (byte*) char_cursor#97
  (byte*) line_cursor#12 ← (byte*) line_cursor#31
  return 
  to:@return
test_16u: scope:[test_16u]  from main::@2
  (byte*) line_cursor#83 ← phi( main::@2/(byte*) line_cursor#6 )
  (byte*) char_cursor#150 ← phi( main::@2/(byte*) char_cursor#22 )
  (word) rem16u#44 ← phi( main::@2/(word) rem16u#33 )
  (word[]) test_16u::dividends#0 ← { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
  (word[]) test_16u::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16u::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@11
  (byte*) line_cursor#79 ← phi( test_16u/(byte*) line_cursor#83 test_16u::@11/(byte*) line_cursor#13 )
  (byte*) char_cursor#144 ← phi( test_16u/(byte*) char_cursor#150 test_16u::@11/(byte*) char_cursor#43 )
  (word) rem16u#35 ← phi( test_16u/(word) rem16u#44 test_16u::@11/(word) rem16u#37 )
  (byte) test_16u::i#2 ← phi( test_16u/(byte) test_16u::i#0 test_16u::@11/(byte) test_16u::i#1 )
  (word) test_16u::dividend#0 ← *((word[]) test_16u::dividends#0 + (byte) test_16u::i#2)
  (word) test_16u::divisor#0 ← *((word[]) test_16u::divisors#0 + (byte) test_16u::i#2)
  (word) div16u::dividend#1 ← (word) test_16u::dividend#0
  (word) div16u::divisor#1 ← (word) test_16u::divisor#0
  call div16u param-assignment
  (word) div16u::return#3 ← (word) div16u::return#1
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@1
  (byte) test_16u::i#11 ← phi( test_16u::@1/(byte) test_16u::i#2 )
  (byte*) line_cursor#75 ← phi( test_16u::@1/(byte*) line_cursor#79 )
  (word) test_16u::divisor#3 ← phi( test_16u::@1/(word) test_16u::divisor#0 )
  (byte*) char_cursor#136 ← phi( test_16u::@1/(byte*) char_cursor#144 )
  (word) test_16u::dividend#1 ← phi( test_16u::@1/(word) test_16u::dividend#0 )
  (word) rem16u#25 ← phi( test_16u::@1/(word) rem16u#2 )
  (word) div16u::return#6 ← phi( test_16u::@1/(word) div16u::return#3 )
  (word~) test_16u::$0 ← (word) div16u::return#6
  (word) rem16u#10 ← (word) rem16u#25
  (word) test_16u::res#0 ← (word~) test_16u::$0
  (word) print_word::w#1 ← (word) test_16u::dividend#1
  call print_word param-assignment
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  (byte) test_16u::i#10 ← phi( test_16u::@3/(byte) test_16u::i#11 )
  (byte*) line_cursor#71 ← phi( test_16u::@3/(byte*) line_cursor#75 )
  (word) rem16u#60 ← phi( test_16u::@3/(word) rem16u#10 )
  (word) test_16u::res#4 ← phi( test_16u::@3/(word) test_16u::res#0 )
  (word) test_16u::divisor#2 ← phi( test_16u::@3/(word) test_16u::divisor#3 )
  (byte*) char_cursor#98 ← phi( test_16u::@3/(byte*) char_cursor#13 )
  (byte*) char_cursor#36 ← (byte*) char_cursor#98
  (byte*) print_str::str#4 ← (const string) test_16u::str
  call print_str param-assignment
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  (byte) test_16u::i#9 ← phi( test_16u::@4/(byte) test_16u::i#10 )
  (byte*) line_cursor#67 ← phi( test_16u::@4/(byte*) line_cursor#71 )
  (word) rem16u#57 ← phi( test_16u::@4/(word) rem16u#60 )
  (word) test_16u::res#3 ← phi( test_16u::@4/(word) test_16u::res#4 )
  (word) test_16u::divisor#1 ← phi( test_16u::@4/(word) test_16u::divisor#2 )
  (byte*) char_cursor#99 ← phi( test_16u::@4/(byte*) char_cursor#2 )
  (byte*) char_cursor#37 ← (byte*) char_cursor#99
  (word) print_word::w#2 ← (word) test_16u::divisor#1
  call print_word param-assignment
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  (byte) test_16u::i#8 ← phi( test_16u::@5/(byte) test_16u::i#9 )
  (byte*) line_cursor#63 ← phi( test_16u::@5/(byte*) line_cursor#67 )
  (word) rem16u#53 ← phi( test_16u::@5/(word) rem16u#57 )
  (word) test_16u::res#2 ← phi( test_16u::@5/(word) test_16u::res#3 )
  (byte*) char_cursor#100 ← phi( test_16u::@5/(byte*) char_cursor#13 )
  (byte*) char_cursor#38 ← (byte*) char_cursor#100
  (byte*) print_str::str#5 ← (const string) test_16u::str1
  call print_str param-assignment
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  (byte) test_16u::i#7 ← phi( test_16u::@6/(byte) test_16u::i#8 )
  (byte*) line_cursor#58 ← phi( test_16u::@6/(byte*) line_cursor#63 )
  (word) rem16u#45 ← phi( test_16u::@6/(word) rem16u#53 )
  (word) test_16u::res#1 ← phi( test_16u::@6/(word) test_16u::res#2 )
  (byte*) char_cursor#101 ← phi( test_16u::@6/(byte*) char_cursor#2 )
  (byte*) char_cursor#39 ← (byte*) char_cursor#101
  (word) print_word::w#3 ← (word) test_16u::res#1
  call print_word param-assignment
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  (byte) test_16u::i#6 ← phi( test_16u::@7/(byte) test_16u::i#7 )
  (byte*) line_cursor#53 ← phi( test_16u::@7/(byte*) line_cursor#58 )
  (word) rem16u#36 ← phi( test_16u::@7/(word) rem16u#45 )
  (byte*) char_cursor#102 ← phi( test_16u::@7/(byte*) char_cursor#13 )
  (byte*) char_cursor#40 ← (byte*) char_cursor#102
  (byte*) print_str::str#6 ← (const string) test_16u::str2
  call print_str param-assignment
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  (byte) test_16u::i#5 ← phi( test_16u::@8/(byte) test_16u::i#6 )
  (byte*) line_cursor#47 ← phi( test_16u::@8/(byte*) line_cursor#53 )
  (word) rem16u#26 ← phi( test_16u::@8/(word) rem16u#36 )
  (byte*) char_cursor#103 ← phi( test_16u::@8/(byte*) char_cursor#2 )
  (byte*) char_cursor#41 ← (byte*) char_cursor#103
  (word) print_word::w#4 ← (word) rem16u#26
  call print_word param-assignment
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  (word) rem16u#46 ← phi( test_16u::@9/(word) rem16u#26 )
  (byte) test_16u::i#4 ← phi( test_16u::@9/(byte) test_16u::i#5 )
  (byte*) line_cursor#42 ← phi( test_16u::@9/(byte*) line_cursor#47 )
  (byte*) char_cursor#104 ← phi( test_16u::@9/(byte*) char_cursor#13 )
  (byte*) char_cursor#42 ← (byte*) char_cursor#104
  call print_ln param-assignment
  to:test_16u::@11
test_16u::@11: scope:[test_16u]  from test_16u::@10
  (word) rem16u#37 ← phi( test_16u::@10/(word) rem16u#46 )
  (byte) test_16u::i#3 ← phi( test_16u::@10/(byte) test_16u::i#4 )
  (byte*) char_cursor#105 ← phi( test_16u::@10/(byte*) char_cursor#4 )
  (byte*) line_cursor#32 ← phi( test_16u::@10/(byte*) line_cursor#2 )
  (byte*) line_cursor#13 ← (byte*) line_cursor#32
  (byte*) char_cursor#43 ← (byte*) char_cursor#105
  (byte/word~) test_16u::$9 ← (byte) test_16u::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16u::i#1 ← (byte/word~) test_16u::$9
  (boolean~) test_16u::$10 ← (byte) test_16u::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16u::$10) goto test_16u::@1
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@11
  (byte*) line_cursor#33 ← phi( test_16u::@11/(byte*) line_cursor#13 )
  (byte*) char_cursor#106 ← phi( test_16u::@11/(byte*) char_cursor#43 )
  (word) rem16u#27 ← phi( test_16u::@11/(word) rem16u#37 )
  (word) rem16u#11 ← (word) rem16u#27
  (byte*) char_cursor#44 ← (byte*) char_cursor#106
  (byte*) line_cursor#14 ← (byte*) line_cursor#33
  return 
  to:@return
test_8s: scope:[test_8s]  from main::@3
  (byte*) line_cursor#84 ← phi( main::@3/(byte*) line_cursor#7 )
  (byte*) char_cursor#151 ← phi( main::@3/(byte*) char_cursor#23 )
  (signed byte) rem8s#23 ← phi( main::@3/(signed byte) rem8s#16 )
  (byte) rem8u#48 ← phi( main::@3/(byte) rem8u#34 )
  (signed byte/signed word/signed dword~) test_8s::$0 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte/signed word/signed dword~) test_8s::$1 ← - (byte/signed byte/word/signed word/dword/signed dword) 127
  (signed byte[]) test_8s::dividends#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 127, (signed byte/signed word/signed dword~) test_8s::$0, (signed byte/signed word/signed dword~) test_8s::$1, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
  (signed byte/signed word/signed dword~) test_8s::$2 ← - (byte/signed byte/word/signed word/dword/signed dword) 11
  (signed byte/signed word/signed dword~) test_8s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte[]) test_8s::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (signed byte/signed word/signed dword~) test_8s::$2, (signed byte/signed word/signed dword~) test_8s::$3, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_8s::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@11
  (byte*) line_cursor#80 ← phi( test_8s/(byte*) line_cursor#84 test_8s::@11/(byte*) line_cursor#15 )
  (byte*) char_cursor#145 ← phi( test_8s/(byte*) char_cursor#151 test_8s::@11/(byte*) char_cursor#52 )
  (signed byte) rem8s#18 ← phi( test_8s/(signed byte) rem8s#23 test_8s::@11/(signed byte) rem8s#20 )
  (byte) rem8u#39 ← phi( test_8s/(byte) rem8u#48 test_8s::@11/(byte) rem8u#40 )
  (byte) test_8s::i#2 ← phi( test_8s/(byte) test_8s::i#0 test_8s::@11/(byte) test_8s::i#1 )
  (signed byte) test_8s::dividend#0 ← *((signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#2)
  (signed byte) test_8s::divisor#0 ← *((signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#2)
  (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0
  (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0
  call div8s param-assignment
  (signed byte) div8s::return#3 ← (signed byte) div8s::return#2
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@1
  (byte) test_8s::i#11 ← phi( test_8s::@1/(byte) test_8s::i#2 )
  (byte*) line_cursor#76 ← phi( test_8s::@1/(byte*) line_cursor#80 )
  (signed byte) test_8s::divisor#3 ← phi( test_8s::@1/(signed byte) test_8s::divisor#0 )
  (byte*) char_cursor#137 ← phi( test_8s::@1/(byte*) char_cursor#145 )
  (signed byte) test_8s::dividend#1 ← phi( test_8s::@1/(signed byte) test_8s::dividend#0 )
  (signed byte) rem8s#12 ← phi( test_8s::@1/(signed byte) rem8s#3 )
  (byte) rem8u#28 ← phi( test_8s::@1/(byte) rem8u#6 )
  (signed byte) div8s::return#5 ← phi( test_8s::@1/(signed byte) div8s::return#3 )
  (signed byte~) test_8s::$4 ← (signed byte) div8s::return#5
  (byte) rem8u#12 ← (byte) rem8u#28
  (signed byte) rem8s#6 ← (signed byte) rem8s#12
  (signed byte) test_8s::res#0 ← (signed byte~) test_8s::$4
  (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#1
  call print_sbyte param-assignment
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  (byte) rem8u#65 ← phi( test_8s::@3/(byte) rem8u#12 )
  (byte) test_8s::i#10 ← phi( test_8s::@3/(byte) test_8s::i#11 )
  (byte*) line_cursor#72 ← phi( test_8s::@3/(byte*) line_cursor#76 )
  (signed byte) rem8s#31 ← phi( test_8s::@3/(signed byte) rem8s#6 )
  (signed byte) test_8s::res#4 ← phi( test_8s::@3/(signed byte) test_8s::res#0 )
  (signed byte) test_8s::divisor#2 ← phi( test_8s::@3/(signed byte) test_8s::divisor#3 )
  (byte*) char_cursor#107 ← phi( test_8s::@3/(byte*) char_cursor#10 )
  (byte*) char_cursor#45 ← (byte*) char_cursor#107
  (byte*) print_str::str#7 ← (const string) test_8s::str
  call print_str param-assignment
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  (byte) rem8u#64 ← phi( test_8s::@4/(byte) rem8u#65 )
  (byte) test_8s::i#9 ← phi( test_8s::@4/(byte) test_8s::i#10 )
  (byte*) line_cursor#68 ← phi( test_8s::@4/(byte*) line_cursor#72 )
  (signed byte) rem8s#30 ← phi( test_8s::@4/(signed byte) rem8s#31 )
  (signed byte) test_8s::res#3 ← phi( test_8s::@4/(signed byte) test_8s::res#4 )
  (signed byte) test_8s::divisor#1 ← phi( test_8s::@4/(signed byte) test_8s::divisor#2 )
  (byte*) char_cursor#108 ← phi( test_8s::@4/(byte*) char_cursor#2 )
  (byte*) char_cursor#46 ← (byte*) char_cursor#108
  (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#1
  call print_sbyte param-assignment
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  (byte) rem8u#63 ← phi( test_8s::@5/(byte) rem8u#64 )
  (byte) test_8s::i#8 ← phi( test_8s::@5/(byte) test_8s::i#9 )
  (byte*) line_cursor#64 ← phi( test_8s::@5/(byte*) line_cursor#68 )
  (signed byte) rem8s#28 ← phi( test_8s::@5/(signed byte) rem8s#30 )
  (signed byte) test_8s::res#2 ← phi( test_8s::@5/(signed byte) test_8s::res#3 )
  (byte*) char_cursor#109 ← phi( test_8s::@5/(byte*) char_cursor#10 )
  (byte*) char_cursor#47 ← (byte*) char_cursor#109
  (byte*) print_str::str#8 ← (const string) test_8s::str1
  call print_str param-assignment
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  (byte) rem8u#62 ← phi( test_8s::@6/(byte) rem8u#63 )
  (byte) test_8s::i#7 ← phi( test_8s::@6/(byte) test_8s::i#8 )
  (byte*) line_cursor#59 ← phi( test_8s::@6/(byte*) line_cursor#64 )
  (signed byte) rem8s#24 ← phi( test_8s::@6/(signed byte) rem8s#28 )
  (signed byte) test_8s::res#1 ← phi( test_8s::@6/(signed byte) test_8s::res#2 )
  (byte*) char_cursor#110 ← phi( test_8s::@6/(byte*) char_cursor#2 )
  (byte*) char_cursor#48 ← (byte*) char_cursor#110
  (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#1
  call print_sbyte param-assignment
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  (byte) rem8u#59 ← phi( test_8s::@7/(byte) rem8u#62 )
  (byte) test_8s::i#6 ← phi( test_8s::@7/(byte) test_8s::i#7 )
  (byte*) line_cursor#54 ← phi( test_8s::@7/(byte*) line_cursor#59 )
  (signed byte) rem8s#19 ← phi( test_8s::@7/(signed byte) rem8s#24 )
  (byte*) char_cursor#111 ← phi( test_8s::@7/(byte*) char_cursor#10 )
  (byte*) char_cursor#49 ← (byte*) char_cursor#111
  (byte*) print_str::str#9 ← (const string) test_8s::str2
  call print_str param-assignment
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  (byte) rem8u#54 ← phi( test_8s::@8/(byte) rem8u#59 )
  (byte) test_8s::i#5 ← phi( test_8s::@8/(byte) test_8s::i#6 )
  (byte*) line_cursor#48 ← phi( test_8s::@8/(byte*) line_cursor#54 )
  (signed byte) rem8s#13 ← phi( test_8s::@8/(signed byte) rem8s#19 )
  (byte*) char_cursor#112 ← phi( test_8s::@8/(byte*) char_cursor#2 )
  (byte*) char_cursor#50 ← (byte*) char_cursor#112
  (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#13
  call print_sbyte param-assignment
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  (signed byte) rem8s#25 ← phi( test_8s::@9/(signed byte) rem8s#13 )
  (byte) rem8u#49 ← phi( test_8s::@9/(byte) rem8u#54 )
  (byte) test_8s::i#4 ← phi( test_8s::@9/(byte) test_8s::i#5 )
  (byte*) line_cursor#43 ← phi( test_8s::@9/(byte*) line_cursor#48 )
  (byte*) char_cursor#113 ← phi( test_8s::@9/(byte*) char_cursor#10 )
  (byte*) char_cursor#51 ← (byte*) char_cursor#113
  call print_ln param-assignment
  to:test_8s::@11
test_8s::@11: scope:[test_8s]  from test_8s::@10
  (signed byte) rem8s#20 ← phi( test_8s::@10/(signed byte) rem8s#25 )
  (byte) rem8u#40 ← phi( test_8s::@10/(byte) rem8u#49 )
  (byte) test_8s::i#3 ← phi( test_8s::@10/(byte) test_8s::i#4 )
  (byte*) char_cursor#114 ← phi( test_8s::@10/(byte*) char_cursor#4 )
  (byte*) line_cursor#34 ← phi( test_8s::@10/(byte*) line_cursor#2 )
  (byte*) line_cursor#15 ← (byte*) line_cursor#34
  (byte*) char_cursor#52 ← (byte*) char_cursor#114
  (byte) test_8s::i#1 ← ++ (byte) test_8s::i#3
  (boolean~) test_8s::$13 ← (byte) test_8s::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 6
  if((boolean~) test_8s::$13) goto test_8s::@1
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@11
  (byte*) line_cursor#35 ← phi( test_8s::@11/(byte*) line_cursor#15 )
  (byte*) char_cursor#115 ← phi( test_8s::@11/(byte*) char_cursor#52 )
  (signed byte) rem8s#14 ← phi( test_8s::@11/(signed byte) rem8s#20 )
  (byte) rem8u#29 ← phi( test_8s::@11/(byte) rem8u#40 )
  (byte) rem8u#13 ← (byte) rem8u#29
  (signed byte) rem8s#7 ← (signed byte) rem8s#14
  (byte*) char_cursor#53 ← (byte*) char_cursor#115
  (byte*) line_cursor#16 ← (byte*) line_cursor#35
  return 
  to:@return
test_16s: scope:[test_16s]  from main::@4
  (byte*) line_cursor#85 ← phi( main::@4/(byte*) line_cursor#8 )
  (byte*) char_cursor#152 ← phi( main::@4/(byte*) char_cursor#24 )
  (signed word) rem16s#22 ← phi( main::@4/(signed word) rem16s#16 )
  (word) rem16u#47 ← phi( main::@4/(word) rem16u#34 )
  (signed word/signed dword~) test_16s::$0 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$1 ← - (word/signed word/dword/signed dword) 32767
  (signed word/signed dword~) test_16s::$2 ← - (word/signed word/dword/signed dword) 32767
  (signed word[]) test_16s::dividends#0 ← { (word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$0, (signed word/signed dword~) test_16s::$1, (word/signed word/dword/signed dword) 32767, (signed word/signed dword~) test_16s::$2 }
  (signed byte/signed word/signed dword~) test_16s::$3 ← - (byte/signed byte/word/signed word/dword/signed dword) 7
  (signed byte/signed word/signed dword~) test_16s::$4 ← - (byte/signed byte/word/signed word/dword/signed dword) 13
  (signed byte/signed word/signed dword~) test_16s::$5 ← - (byte/signed byte/word/signed word/dword/signed dword) 17
  (signed word[]) test_16s::divisors#0 ← { (byte/signed byte/word/signed word/dword/signed dword) 5, (signed byte/signed word/signed dword~) test_16s::$3, (byte/signed byte/word/signed word/dword/signed dword) 11, (signed byte/signed word/signed dword~) test_16s::$4, (signed byte/signed word/signed dword~) test_16s::$5, (byte/signed byte/word/signed word/dword/signed dword) 19 }
  (byte) test_16s::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@11
  (byte*) line_cursor#81 ← phi( test_16s/(byte*) line_cursor#85 test_16s::@11/(byte*) line_cursor#17 )
  (byte*) char_cursor#146 ← phi( test_16s/(byte*) char_cursor#152 test_16s::@11/(byte*) char_cursor#61 )
  (signed word) rem16s#17 ← phi( test_16s/(signed word) rem16s#22 test_16s::@11/(signed word) rem16s#19 )
  (word) rem16u#38 ← phi( test_16s/(word) rem16u#47 test_16s::@11/(word) rem16u#39 )
  (byte) test_16s::i#2 ← phi( test_16s/(byte) test_16s::i#0 test_16s::@11/(byte) test_16s::i#1 )
  (signed word) test_16s::dividend#0 ← *((signed word[]) test_16s::dividends#0 + (byte) test_16s::i#2)
  (signed word) test_16s::divisor#0 ← *((signed word[]) test_16s::divisors#0 + (byte) test_16s::i#2)
  (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0
  (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0
  call div16s param-assignment
  (signed word) div16s::return#3 ← (signed word) div16s::return#2
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@1
  (byte) test_16s::i#11 ← phi( test_16s::@1/(byte) test_16s::i#2 )
  (byte*) line_cursor#77 ← phi( test_16s::@1/(byte*) line_cursor#81 )
  (signed word) test_16s::divisor#3 ← phi( test_16s::@1/(signed word) test_16s::divisor#0 )
  (byte*) char_cursor#138 ← phi( test_16s::@1/(byte*) char_cursor#146 )
  (signed word) test_16s::dividend#1 ← phi( test_16s::@1/(signed word) test_16s::dividend#0 )
  (signed word) rem16s#12 ← phi( test_16s::@1/(signed word) rem16s#3 )
  (word) rem16u#28 ← phi( test_16s::@1/(word) rem16u#6 )
  (signed word) div16s::return#5 ← phi( test_16s::@1/(signed word) div16s::return#3 )
  (signed word~) test_16s::$6 ← (signed word) div16s::return#5
  (word) rem16u#12 ← (word) rem16u#28
  (signed word) rem16s#6 ← (signed word) rem16s#12
  (signed word) test_16s::res#0 ← (signed word~) test_16s::$6
  (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#1
  call print_sword param-assignment
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  (word) rem16u#64 ← phi( test_16s::@3/(word) rem16u#12 )
  (byte) test_16s::i#10 ← phi( test_16s::@3/(byte) test_16s::i#11 )
  (byte*) line_cursor#73 ← phi( test_16s::@3/(byte*) line_cursor#77 )
  (signed word) rem16s#30 ← phi( test_16s::@3/(signed word) rem16s#6 )
  (signed word) test_16s::res#4 ← phi( test_16s::@3/(signed word) test_16s::res#0 )
  (signed word) test_16s::divisor#2 ← phi( test_16s::@3/(signed word) test_16s::divisor#3 )
  (byte*) char_cursor#116 ← phi( test_16s::@3/(byte*) char_cursor#7 )
  (byte*) char_cursor#54 ← (byte*) char_cursor#116
  (byte*) print_str::str#10 ← (const string) test_16s::str
  call print_str param-assignment
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  (word) rem16u#63 ← phi( test_16s::@4/(word) rem16u#64 )
  (byte) test_16s::i#9 ← phi( test_16s::@4/(byte) test_16s::i#10 )
  (byte*) line_cursor#69 ← phi( test_16s::@4/(byte*) line_cursor#73 )
  (signed word) rem16s#28 ← phi( test_16s::@4/(signed word) rem16s#30 )
  (signed word) test_16s::res#3 ← phi( test_16s::@4/(signed word) test_16s::res#4 )
  (signed word) test_16s::divisor#1 ← phi( test_16s::@4/(signed word) test_16s::divisor#2 )
  (byte*) char_cursor#117 ← phi( test_16s::@4/(byte*) char_cursor#2 )
  (byte*) char_cursor#55 ← (byte*) char_cursor#117
  (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#1
  call print_sword param-assignment
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  (word) rem16u#62 ← phi( test_16s::@5/(word) rem16u#63 )
  (byte) test_16s::i#8 ← phi( test_16s::@5/(byte) test_16s::i#9 )
  (byte*) line_cursor#65 ← phi( test_16s::@5/(byte*) line_cursor#69 )
  (signed word) rem16s#26 ← phi( test_16s::@5/(signed word) rem16s#28 )
  (signed word) test_16s::res#2 ← phi( test_16s::@5/(signed word) test_16s::res#3 )
  (byte*) char_cursor#118 ← phi( test_16s::@5/(byte*) char_cursor#7 )
  (byte*) char_cursor#56 ← (byte*) char_cursor#118
  (byte*) print_str::str#11 ← (const string) test_16s::str1
  call print_str param-assignment
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  (word) rem16u#61 ← phi( test_16s::@6/(word) rem16u#62 )
  (byte) test_16s::i#7 ← phi( test_16s::@6/(byte) test_16s::i#8 )
  (byte*) line_cursor#60 ← phi( test_16s::@6/(byte*) line_cursor#65 )
  (signed word) rem16s#23 ← phi( test_16s::@6/(signed word) rem16s#26 )
  (signed word) test_16s::res#1 ← phi( test_16s::@6/(signed word) test_16s::res#2 )
  (byte*) char_cursor#119 ← phi( test_16s::@6/(byte*) char_cursor#2 )
  (byte*) char_cursor#57 ← (byte*) char_cursor#119
  (signed word) print_sword::w#3 ← (signed word) test_16s::res#1
  call print_sword param-assignment
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  (word) rem16u#58 ← phi( test_16s::@7/(word) rem16u#61 )
  (byte) test_16s::i#6 ← phi( test_16s::@7/(byte) test_16s::i#7 )
  (byte*) line_cursor#55 ← phi( test_16s::@7/(byte*) line_cursor#60 )
  (signed word) rem16s#18 ← phi( test_16s::@7/(signed word) rem16s#23 )
  (byte*) char_cursor#120 ← phi( test_16s::@7/(byte*) char_cursor#7 )
  (byte*) char_cursor#58 ← (byte*) char_cursor#120
  (byte*) print_str::str#12 ← (const string) test_16s::str2
  call print_str param-assignment
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  (word) rem16u#54 ← phi( test_16s::@8/(word) rem16u#58 )
  (byte) test_16s::i#5 ← phi( test_16s::@8/(byte) test_16s::i#6 )
  (byte*) line_cursor#49 ← phi( test_16s::@8/(byte*) line_cursor#55 )
  (signed word) rem16s#13 ← phi( test_16s::@8/(signed word) rem16s#18 )
  (byte*) char_cursor#121 ← phi( test_16s::@8/(byte*) char_cursor#2 )
  (byte*) char_cursor#59 ← (byte*) char_cursor#121
  (signed word) print_sword::w#4 ← (signed word) rem16s#13
  call print_sword param-assignment
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  (signed word) rem16s#24 ← phi( test_16s::@9/(signed word) rem16s#13 )
  (word) rem16u#48 ← phi( test_16s::@9/(word) rem16u#54 )
  (byte) test_16s::i#4 ← phi( test_16s::@9/(byte) test_16s::i#5 )
  (byte*) line_cursor#44 ← phi( test_16s::@9/(byte*) line_cursor#49 )
  (byte*) char_cursor#122 ← phi( test_16s::@9/(byte*) char_cursor#7 )
  (byte*) char_cursor#60 ← (byte*) char_cursor#122
  call print_ln param-assignment
  to:test_16s::@11
test_16s::@11: scope:[test_16s]  from test_16s::@10
  (signed word) rem16s#19 ← phi( test_16s::@10/(signed word) rem16s#24 )
  (word) rem16u#39 ← phi( test_16s::@10/(word) rem16u#48 )
  (byte) test_16s::i#3 ← phi( test_16s::@10/(byte) test_16s::i#4 )
  (byte*) char_cursor#123 ← phi( test_16s::@10/(byte*) char_cursor#4 )
  (byte*) line_cursor#36 ← phi( test_16s::@10/(byte*) line_cursor#2 )
  (byte*) line_cursor#17 ← (byte*) line_cursor#36
  (byte*) char_cursor#61 ← (byte*) char_cursor#123
  (byte/word~) test_16s::$15 ← (byte) test_16s::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte) test_16s::i#1 ← (byte/word~) test_16s::$15
  (boolean~) test_16s::$16 ← (byte) test_16s::i#1 != (byte/signed byte/word/signed word/dword/signed dword) 12
  if((boolean~) test_16s::$16) goto test_16s::@1
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@11
  (byte*) line_cursor#37 ← phi( test_16s::@11/(byte*) line_cursor#17 )
  (byte*) char_cursor#124 ← phi( test_16s::@11/(byte*) char_cursor#61 )
  (signed word) rem16s#14 ← phi( test_16s::@11/(signed word) rem16s#19 )
  (word) rem16u#29 ← phi( test_16s::@11/(word) rem16u#39 )
  (word) rem16u#13 ← (word) rem16u#29
  (signed word) rem16s#7 ← (signed word) rem16s#14
  (byte*) char_cursor#62 ← (byte*) char_cursor#124
  (byte*) line_cursor#18 ← (byte*) line_cursor#37
  return 
  to:@return
@21: scope:[]  from @15
  (signed word) rem16s#20 ← phi( @15/(signed word) rem16s#0 )
  (signed byte) rem8s#21 ← phi( @15/(signed byte) rem8s#26 )
  (word) rem16u#40 ← phi( @15/(word) rem16u#49 )
  (byte) rem8u#41 ← phi( @15/(byte) rem8u#50 )
  (byte*) char_cursor#139 ← phi( @15/(byte*) char_cursor#147 )
  (byte*) line_cursor#45 ← phi( @15/(byte*) line_cursor#50 )
  call main param-assignment
  to:@22
@22: scope:[]  from @21
  (signed word) rem16s#15 ← phi( @21/(signed word) rem16s#5 )
  (signed byte) rem8s#15 ← phi( @21/(signed byte) rem8s#5 )
  (word) rem16u#30 ← phi( @21/(word) rem16u#9 )
  (byte) rem8u#30 ← phi( @21/(byte) rem8u#9 )
  (byte*) char_cursor#125 ← phi( @21/(byte*) char_cursor#26 )
  (byte*) line_cursor#38 ← phi( @21/(byte*) line_cursor#10 )
  (byte*) line_cursor#19 ← (byte*) line_cursor#38
  (byte*) char_cursor#63 ← (byte*) char_cursor#125
  (byte) rem8u#14 ← (byte) rem8u#30
  (word) rem16u#14 ← (word) rem16u#30
  (signed byte) rem8s#8 ← (signed byte) rem8s#15
  (signed word) rem16s#8 ← (signed word) rem16s#15
  to:@end
@end: scope:[]  from @22

SYMBOL TABLE SSA
(label) @10
(label) @12
(label) @14
(label) @15
(label) @21
(label) @22
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) char_cursor
(byte*) char_cursor#0
(byte*) char_cursor#1
(byte*) char_cursor#10
(byte*) char_cursor#100
(byte*) char_cursor#101
(byte*) char_cursor#102
(byte*) char_cursor#103
(byte*) char_cursor#104
(byte*) char_cursor#105
(byte*) char_cursor#106
(byte*) char_cursor#107
(byte*) char_cursor#108
(byte*) char_cursor#109
(byte*) char_cursor#11
(byte*) char_cursor#110
(byte*) char_cursor#111
(byte*) char_cursor#112
(byte*) char_cursor#113
(byte*) char_cursor#114
(byte*) char_cursor#115
(byte*) char_cursor#116
(byte*) char_cursor#117
(byte*) char_cursor#118
(byte*) char_cursor#119
(byte*) char_cursor#12
(byte*) char_cursor#120
(byte*) char_cursor#121
(byte*) char_cursor#122
(byte*) char_cursor#123
(byte*) char_cursor#124
(byte*) char_cursor#125
(byte*) char_cursor#126
(byte*) char_cursor#127
(byte*) char_cursor#128
(byte*) char_cursor#129
(byte*) char_cursor#13
(byte*) char_cursor#130
(byte*) char_cursor#131
(byte*) char_cursor#132
(byte*) char_cursor#133
(byte*) char_cursor#134
(byte*) char_cursor#135
(byte*) char_cursor#136
(byte*) char_cursor#137
(byte*) char_cursor#138
(byte*) char_cursor#139
(byte*) char_cursor#14
(byte*) char_cursor#140
(byte*) char_cursor#141
(byte*) char_cursor#142
(byte*) char_cursor#143
(byte*) char_cursor#144
(byte*) char_cursor#145
(byte*) char_cursor#146
(byte*) char_cursor#147
(byte*) char_cursor#148
(byte*) char_cursor#149
(byte*) char_cursor#15
(byte*) char_cursor#150
(byte*) char_cursor#151
(byte*) char_cursor#152
(byte*) char_cursor#153
(byte*) char_cursor#154
(byte*) char_cursor#16
(byte*) char_cursor#17
(byte*) char_cursor#18
(byte*) char_cursor#19
(byte*) char_cursor#2
(byte*) char_cursor#20
(byte*) char_cursor#21
(byte*) char_cursor#22
(byte*) char_cursor#23
(byte*) char_cursor#24
(byte*) char_cursor#25
(byte*) char_cursor#26
(byte*) char_cursor#27
(byte*) char_cursor#28
(byte*) char_cursor#29
(byte*) char_cursor#3
(byte*) char_cursor#30
(byte*) char_cursor#31
(byte*) char_cursor#32
(byte*) char_cursor#33
(byte*) char_cursor#34
(byte*) char_cursor#35
(byte*) char_cursor#36
(byte*) char_cursor#37
(byte*) char_cursor#38
(byte*) char_cursor#39
(byte*) char_cursor#4
(byte*) char_cursor#40
(byte*) char_cursor#41
(byte*) char_cursor#42
(byte*) char_cursor#43
(byte*) char_cursor#44
(byte*) char_cursor#45
(byte*) char_cursor#46
(byte*) char_cursor#47
(byte*) char_cursor#48
(byte*) char_cursor#49
(byte*) char_cursor#5
(byte*) char_cursor#50
(byte*) char_cursor#51
(byte*) char_cursor#52
(byte*) char_cursor#53
(byte*) char_cursor#54
(byte*) char_cursor#55
(byte*) char_cursor#56
(byte*) char_cursor#57
(byte*) char_cursor#58
(byte*) char_cursor#59
(byte*) char_cursor#6
(byte*) char_cursor#60
(byte*) char_cursor#61
(byte*) char_cursor#62
(byte*) char_cursor#63
(byte*) char_cursor#64
(byte*) char_cursor#65
(byte*) char_cursor#66
(byte*) char_cursor#67
(byte*) char_cursor#68
(byte*) char_cursor#69
(byte*) char_cursor#7
(byte*) char_cursor#70
(byte*) char_cursor#71
(byte*) char_cursor#72
(byte*) char_cursor#73
(byte*) char_cursor#74
(byte*) char_cursor#75
(byte*) char_cursor#76
(byte*) char_cursor#77
(byte*) char_cursor#78
(byte*) char_cursor#79
(byte*) char_cursor#8
(byte*) char_cursor#80
(byte*) char_cursor#81
(byte*) char_cursor#82
(byte*) char_cursor#83
(byte*) char_cursor#84
(byte*) char_cursor#85
(byte*) char_cursor#86
(byte*) char_cursor#87
(byte*) char_cursor#88
(byte*) char_cursor#89
(byte*) char_cursor#9
(byte*) char_cursor#90
(byte*) char_cursor#91
(byte*) char_cursor#92
(byte*) char_cursor#93
(byte*) char_cursor#94
(byte*) char_cursor#95
(byte*) char_cursor#96
(byte*) char_cursor#97
(byte*) char_cursor#98
(byte*) char_cursor#99
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(boolean~) div16s::$0
(boolean~) div16s::$1
(word~) div16s::$10
(word~) div16s::$11
(boolean~) div16s::$12
(boolean~) div16s::$13
(signed word~) div16s::$14
(signed word~) div16s::$15
(signed word~) div16s::$16
(signed word~) div16s::$17
(signed word~) div16s::$18
(signed word~) div16s::$19
(signed word~) div16s::$2
(word~) div16s::$3
(word~) div16s::$4
(boolean~) div16s::$5
(boolean~) div16s::$6
(signed word~) div16s::$7
(word~) div16s::$8
(byte~) div16s::$9
(label) div16s::@1
(label) div16s::@11
(label) div16s::@15
(label) div16s::@2
(label) div16s::@3
(label) div16s::@4
(label) div16s::@5
(label) div16s::@7
(label) div16s::@9
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0
(signed word) div16s::dividend#1
(signed word) div16s::dividend#2
(signed word) div16s::dividend#3
(word) div16s::dividendu
(word) div16s::dividendu#0
(word) div16s::dividendu#1
(word) div16s::dividendu#2
(word) div16s::dividendu#3
(word) div16s::dividendu#4
(word) div16s::dividendu#5
(word) div16s::dividendu#6
(signed word) div16s::divisor
(signed word) div16s::divisor#0
(signed word) div16s::divisor#1
(signed word) div16s::divisor#2
(signed word) div16s::divisor#3
(signed word) div16s::divisor#4
(signed word) div16s::divisor#5
(signed word) div16s::divisor#6
(word) div16s::divisoru
(word) div16s::divisoru#0
(word) div16s::divisoru#1
(word) div16s::divisoru#2
(word) div16s::divisoru#3
(byte) div16s::neg
(byte) div16s::neg#0
(byte) div16s::neg#1
(byte) div16s::neg#2
(byte) div16s::neg#3
(byte) div16s::neg#4
(byte) div16s::neg#5
(byte) div16s::neg#6
(byte) div16s::neg#7
(byte) div16s::neg#8
(word) div16s::resultu
(word) div16s::resultu#0
(word) div16s::resultu#1
(word) div16s::resultu#2
(signed word) div16s::return
(signed word) div16s::return#0
(signed word) div16s::return#1
(signed word) div16s::return#2
(signed word) div16s::return#3
(signed word) div16s::return#4
(signed word) div16s::return#5
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word~) div16u::$0
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0
(word) div16u::dividend#1
(word) div16u::dividend#2
(word) div16u::divisor
(word) div16u::divisor#0
(word) div16u::divisor#1
(word) div16u::divisor#2
(word) div16u::return
(word) div16u::return#0
(word) div16u::return#1
(word) div16u::return#2
(word) div16u::return#3
(word) div16u::return#4
(word) div16u::return#5
(word) div16u::return#6
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(boolean~) div8s::$0
(boolean~) div8s::$1
(byte~) div8s::$10
(byte~) div8s::$11
(boolean~) div8s::$12
(boolean~) div8s::$13
(signed byte~) div8s::$14
(signed byte~) div8s::$15
(signed byte~) div8s::$16
(signed byte~) div8s::$17
(signed byte~) div8s::$18
(signed byte~) div8s::$19
(signed byte~) div8s::$2
(byte~) div8s::$3
(byte~) div8s::$4
(boolean~) div8s::$5
(boolean~) div8s::$6
(signed byte~) div8s::$7
(byte~) div8s::$8
(byte~) div8s::$9
(label) div8s::@1
(label) div8s::@11
(label) div8s::@15
(label) div8s::@2
(label) div8s::@3
(label) div8s::@4
(label) div8s::@5
(label) div8s::@7
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0
(signed byte) div8s::dividend#1
(signed byte) div8s::dividend#2
(signed byte) div8s::dividend#3
(byte) div8s::dividendu
(byte) div8s::dividendu#0
(byte) div8s::dividendu#1
(byte) div8s::dividendu#2
(byte) div8s::dividendu#3
(byte) div8s::dividendu#4
(byte) div8s::dividendu#5
(byte) div8s::dividendu#6
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0
(signed byte) div8s::divisor#1
(signed byte) div8s::divisor#2
(signed byte) div8s::divisor#3
(signed byte) div8s::divisor#4
(signed byte) div8s::divisor#5
(signed byte) div8s::divisor#6
(byte) div8s::divisoru
(byte) div8s::divisoru#0
(byte) div8s::divisoru#1
(byte) div8s::divisoru#2
(byte) div8s::divisoru#3
(byte) div8s::neg
(byte) div8s::neg#0
(byte) div8s::neg#1
(byte) div8s::neg#2
(byte) div8s::neg#3
(byte) div8s::neg#4
(byte) div8s::neg#5
(byte) div8s::neg#6
(byte) div8s::neg#7
(byte) div8s::neg#8
(byte) div8s::resultu
(byte) div8s::resultu#0
(byte) div8s::resultu#1
(byte) div8s::resultu#2
(signed byte) div8s::return
(signed byte) div8s::return#0
(signed byte) div8s::return#1
(signed byte) div8s::return#2
(signed byte) div8s::return#3
(signed byte) div8s::return#4
(signed byte) div8s::return#5
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte~) div8u::$0
(label) div8u::@2
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0
(byte) div8u::dividend#1
(byte) div8u::dividend#2
(byte) div8u::divisor
(byte) div8u::divisor#0
(byte) div8u::divisor#1
(byte) div8u::divisor#2
(byte) div8u::return
(byte) div8u::return#0
(byte) div8u::return#1
(byte) div8u::return#2
(byte) div8u::return#3
(byte) div8u::return#4
(byte) div8u::return#5
(byte) div8u::return#6
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(word~) divr16u::$0
(byte~) divr16u::$1
(boolean~) divr16u::$10
(byte~) divr16u::$2
(boolean~) divr16u::$3
(boolean~) divr16u::$4
(word~) divr16u::$5
(word~) divr16u::$6
(boolean~) divr16u::$7
(boolean~) divr16u::$8
(word~) divr16u::$9
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@6
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0
(word) divr16u::dividend#1
(word) divr16u::dividend#2
(word) divr16u::dividend#3
(word) divr16u::dividend#4
(word) divr16u::dividend#5
(word) divr16u::dividend#6
(word) divr16u::dividend#7
(word) divr16u::divisor
(word) divr16u::divisor#0
(word) divr16u::divisor#1
(word) divr16u::divisor#2
(word) divr16u::divisor#3
(word) divr16u::divisor#4
(word) divr16u::divisor#5
(word) divr16u::divisor#6
(byte) divr16u::i
(byte) divr16u::i#0
(byte) divr16u::i#1
(byte) divr16u::i#2
(byte) divr16u::i#3
(byte) divr16u::i#4
(byte) divr16u::i#5
(byte) divr16u::i#6
(word) divr16u::quotient
(word) divr16u::quotient#0
(word) divr16u::quotient#1
(word) divr16u::quotient#2
(word) divr16u::quotient#3
(word) divr16u::quotient#4
(word) divr16u::quotient#5
(word) divr16u::quotient#6
(word) divr16u::quotient#7
(word) divr16u::quotient#8
(word) divr16u::rem
(word) divr16u::rem#0
(word) divr16u::rem#1
(word) divr16u::rem#10
(word) divr16u::rem#2
(word) divr16u::rem#3
(word) divr16u::rem#4
(word) divr16u::rem#5
(word) divr16u::rem#6
(word) divr16u::rem#7
(word) divr16u::rem#8
(word) divr16u::rem#9
(word) divr16u::return
(word) divr16u::return#0
(word) divr16u::return#1
(word) divr16u::return#2
(word) divr16u::return#3
(word) divr16u::return#4
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$0
(byte~) divr8u::$1
(boolean~) divr8u::$2
(boolean~) divr8u::$3
(byte~) divr8u::$4
(byte~) divr8u::$5
(boolean~) divr8u::$6
(boolean~) divr8u::$7
(byte/signed byte/word/signed word/dword/signed dword~) divr8u::$8
(boolean~) divr8u::$9
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@6
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0
(byte) divr8u::dividend#1
(byte) divr8u::dividend#2
(byte) divr8u::dividend#3
(byte) divr8u::dividend#4
(byte) divr8u::dividend#5
(byte) divr8u::dividend#6
(byte) divr8u::dividend#7
(byte) divr8u::divisor
(byte) divr8u::divisor#0
(byte) divr8u::divisor#1
(byte) divr8u::divisor#2
(byte) divr8u::divisor#3
(byte) divr8u::divisor#4
(byte) divr8u::divisor#5
(byte) divr8u::divisor#6
(byte) divr8u::i
(byte) divr8u::i#0
(byte) divr8u::i#1
(byte) divr8u::i#2
(byte) divr8u::i#3
(byte) divr8u::i#4
(byte) divr8u::i#5
(byte) divr8u::i#6
(byte) divr8u::quotient
(byte) divr8u::quotient#0
(byte) divr8u::quotient#1
(byte) divr8u::quotient#2
(byte) divr8u::quotient#3
(byte) divr8u::quotient#4
(byte) divr8u::quotient#5
(byte) divr8u::quotient#6
(byte) divr8u::quotient#7
(byte) divr8u::quotient#8
(byte) divr8u::rem
(byte) divr8u::rem#0
(byte) divr8u::rem#1
(byte) divr8u::rem#10
(byte) divr8u::rem#2
(byte) divr8u::rem#3
(byte) divr8u::rem#4
(byte) divr8u::rem#5
(byte) divr8u::rem#6
(byte) divr8u::rem#7
(byte) divr8u::rem#8
(byte) divr8u::rem#9
(byte) divr8u::return
(byte) divr8u::return#0
(byte) divr8u::return#1
(byte) divr8u::return#2
(byte) divr8u::return#3
(byte) divr8u::return#4
(byte*) line_cursor
(byte*) line_cursor#0
(byte*) line_cursor#1
(byte*) line_cursor#10
(byte*) line_cursor#11
(byte*) line_cursor#12
(byte*) line_cursor#13
(byte*) line_cursor#14
(byte*) line_cursor#15
(byte*) line_cursor#16
(byte*) line_cursor#17
(byte*) line_cursor#18
(byte*) line_cursor#19
(byte*) line_cursor#2
(byte*) line_cursor#20
(byte*) line_cursor#21
(byte*) line_cursor#22
(byte*) line_cursor#23
(byte*) line_cursor#24
(byte*) line_cursor#25
(byte*) line_cursor#26
(byte*) line_cursor#27
(byte*) line_cursor#28
(byte*) line_cursor#29
(byte*) line_cursor#3
(byte*) line_cursor#30
(byte*) line_cursor#31
(byte*) line_cursor#32
(byte*) line_cursor#33
(byte*) line_cursor#34
(byte*) line_cursor#35
(byte*) line_cursor#36
(byte*) line_cursor#37
(byte*) line_cursor#38
(byte*) line_cursor#39
(byte*) line_cursor#4
(byte*) line_cursor#40
(byte*) line_cursor#41
(byte*) line_cursor#42
(byte*) line_cursor#43
(byte*) line_cursor#44
(byte*) line_cursor#45
(byte*) line_cursor#46
(byte*) line_cursor#47
(byte*) line_cursor#48
(byte*) line_cursor#49
(byte*) line_cursor#5
(byte*) line_cursor#50
(byte*) line_cursor#51
(byte*) line_cursor#52
(byte*) line_cursor#53
(byte*) line_cursor#54
(byte*) line_cursor#55
(byte*) line_cursor#56
(byte*) line_cursor#57
(byte*) line_cursor#58
(byte*) line_cursor#59
(byte*) line_cursor#6
(byte*) line_cursor#60
(byte*) line_cursor#61
(byte*) line_cursor#62
(byte*) line_cursor#63
(byte*) line_cursor#64
(byte*) line_cursor#65
(byte*) line_cursor#66
(byte*) line_cursor#67
(byte*) line_cursor#68
(byte*) line_cursor#69
(byte*) line_cursor#7
(byte*) line_cursor#70
(byte*) line_cursor#71
(byte*) line_cursor#72
(byte*) line_cursor#73
(byte*) line_cursor#74
(byte*) line_cursor#75
(byte*) line_cursor#76
(byte*) line_cursor#77
(byte*) line_cursor#78
(byte*) line_cursor#79
(byte*) line_cursor#8
(byte*) line_cursor#80
(byte*) line_cursor#81
(byte*) line_cursor#82
(byte*) line_cursor#83
(byte*) line_cursor#84
(byte*) line_cursor#85
(byte*) line_cursor#9
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0
(byte~) print_byte::$2
(const string) print_byte::$4 = (string) "0123456789abcdef"
(label) print_byte::@1
(label) print_byte::@2
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#0
(byte) print_byte::b#1
(byte) print_byte::b#2
(byte) print_byte::b#3
(byte) print_byte::b#4
(byte) print_byte::b#5
(byte) print_byte::b#6
(byte) print_byte::b#7
(byte) print_byte::b#8
(byte[]) print_byte::hextab
(byte[]) print_byte::hextab#0
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#0
(byte) print_char::ch#1
(byte) print_char::ch#2
(byte) print_char::ch#3
(byte) print_char::ch#4
(void()) print_cls()
(byte*~) print_cls::$0
(boolean~) print_cls::$1
(label) print_cls::@1
(label) print_cls::@2
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#0
(byte*) print_cls::sc#1
(byte*) print_cls::sc#2
(void()) print_ln()
(byte*~) print_ln::$0
(boolean~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(boolean~) print_sbyte::$0
(boolean~) print_sbyte::$1
(signed byte~) print_sbyte::$3
(byte~) print_sbyte::$4
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@3
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0
(signed byte) print_sbyte::b#1
(signed byte) print_sbyte::b#2
(signed byte) print_sbyte::b#3
(signed byte) print_sbyte::b#4
(signed byte) print_sbyte::b#5
(signed byte) print_sbyte::b#6
(signed byte) print_sbyte::b#7
(signed byte) print_sbyte::b#8
(void()) print_str((byte*) print_str::str)
(boolean~) print_str::$0
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0
(byte*) print_str::str#1
(byte*) print_str::str#10
(byte*) print_str::str#11
(byte*) print_str::str#12
(byte*) print_str::str#13
(byte*) print_str::str#14
(byte*) print_str::str#15
(byte*) print_str::str#2
(byte*) print_str::str#3
(byte*) print_str::str#4
(byte*) print_str::str#5
(byte*) print_str::str#6
(byte*) print_str::str#7
(byte*) print_str::str#8
(byte*) print_str::str#9
(void()) print_sword((signed word) print_sword::w)
(boolean~) print_sword::$0
(boolean~) print_sword::$1
(signed word~) print_sword::$3
(word~) print_sword::$4
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@3
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0
(signed word) print_sword::w#1
(signed word) print_sword::w#2
(signed word) print_sword::w#3
(signed word) print_sword::w#4
(signed word) print_sword::w#5
(signed word) print_sword::w#6
(signed word) print_sword::w#7
(signed word) print_sword::w#8
(void()) print_word((word) print_word::w)
(byte~) print_word::$0
(byte~) print_word::$2
(label) print_word::@1
(label) print_word::@2
(label) print_word::@return
(word) print_word::w
(word) print_word::w#0
(word) print_word::w#1
(word) print_word::w#2
(word) print_word::w#3
(word) print_word::w#4
(word) print_word::w#5
(word) print_word::w#6
(signed word) rem16s
(signed word) rem16s#0
(signed word) rem16s#1
(signed word) rem16s#10
(signed word) rem16s#11
(signed word) rem16s#12
(signed word) rem16s#13
(signed word) rem16s#14
(signed word) rem16s#15
(signed word) rem16s#16
(signed word) rem16s#17
(signed word) rem16s#18
(signed word) rem16s#19
(signed word) rem16s#2
(signed word) rem16s#20
(signed word) rem16s#21
(signed word) rem16s#22
(signed word) rem16s#23
(signed word) rem16s#24
(signed word) rem16s#25
(signed word) rem16s#26
(signed word) rem16s#27
(signed word) rem16s#28
(signed word) rem16s#29
(signed word) rem16s#3
(signed word) rem16s#30
(signed word) rem16s#4
(signed word) rem16s#5
(signed word) rem16s#6
(signed word) rem16s#7
(signed word) rem16s#8
(signed word) rem16s#9
(word) rem16u
(word) rem16u#0
(word) rem16u#1
(word) rem16u#10
(word) rem16u#11
(word) rem16u#12
(word) rem16u#13
(word) rem16u#14
(word) rem16u#15
(word) rem16u#16
(word) rem16u#17
(word) rem16u#18
(word) rem16u#19
(word) rem16u#2
(word) rem16u#20
(word) rem16u#21
(word) rem16u#22
(word) rem16u#23
(word) rem16u#24
(word) rem16u#25
(word) rem16u#26
(word) rem16u#27
(word) rem16u#28
(word) rem16u#29
(word) rem16u#3
(word) rem16u#30
(word) rem16u#31
(word) rem16u#32
(word) rem16u#33
(word) rem16u#34
(word) rem16u#35
(word) rem16u#36
(word) rem16u#37
(word) rem16u#38
(word) rem16u#39
(word) rem16u#4
(word) rem16u#40
(word) rem16u#41
(word) rem16u#42
(word) rem16u#43
(word) rem16u#44
(word) rem16u#45
(word) rem16u#46
(word) rem16u#47
(word) rem16u#48
(word) rem16u#49
(word) rem16u#5
(word) rem16u#50
(word) rem16u#51
(word) rem16u#52
(word) rem16u#53
(word) rem16u#54
(word) rem16u#55
(word) rem16u#56
(word) rem16u#57
(word) rem16u#58
(word) rem16u#59
(word) rem16u#6
(word) rem16u#60
(word) rem16u#61
(word) rem16u#62
(word) rem16u#63
(word) rem16u#64
(word) rem16u#7
(word) rem16u#8
(word) rem16u#9
(signed byte) rem8s
(signed byte) rem8s#0
(signed byte) rem8s#1
(signed byte) rem8s#10
(signed byte) rem8s#11
(signed byte) rem8s#12
(signed byte) rem8s#13
(signed byte) rem8s#14
(signed byte) rem8s#15
(signed byte) rem8s#16
(signed byte) rem8s#17
(signed byte) rem8s#18
(signed byte) rem8s#19
(signed byte) rem8s#2
(signed byte) rem8s#20
(signed byte) rem8s#21
(signed byte) rem8s#22
(signed byte) rem8s#23
(signed byte) rem8s#24
(signed byte) rem8s#25
(signed byte) rem8s#26
(signed byte) rem8s#27
(signed byte) rem8s#28
(signed byte) rem8s#29
(signed byte) rem8s#3
(signed byte) rem8s#30
(signed byte) rem8s#31
(signed byte) rem8s#4
(signed byte) rem8s#5
(signed byte) rem8s#6
(signed byte) rem8s#7
(signed byte) rem8s#8
(signed byte) rem8s#9
(byte) rem8u
(byte) rem8u#0
(byte) rem8u#1
(byte) rem8u#10
(byte) rem8u#11
(byte) rem8u#12
(byte) rem8u#13
(byte) rem8u#14
(byte) rem8u#15
(byte) rem8u#16
(byte) rem8u#17
(byte) rem8u#18
(byte) rem8u#19
(byte) rem8u#2
(byte) rem8u#20
(byte) rem8u#21
(byte) rem8u#22
(byte) rem8u#23
(byte) rem8u#24
(byte) rem8u#25
(byte) rem8u#26
(byte) rem8u#27
(byte) rem8u#28
(byte) rem8u#29
(byte) rem8u#3
(byte) rem8u#30
(byte) rem8u#31
(byte) rem8u#32
(byte) rem8u#33
(byte) rem8u#34
(byte) rem8u#35
(byte) rem8u#36
(byte) rem8u#37
(byte) rem8u#38
(byte) rem8u#39
(byte) rem8u#4
(byte) rem8u#40
(byte) rem8u#41
(byte) rem8u#42
(byte) rem8u#43
(byte) rem8u#44
(byte) rem8u#45
(byte) rem8u#46
(byte) rem8u#47
(byte) rem8u#48
(byte) rem8u#49
(byte) rem8u#5
(byte) rem8u#50
(byte) rem8u#51
(byte) rem8u#52
(byte) rem8u#53
(byte) rem8u#54
(byte) rem8u#55
(byte) rem8u#56
(byte) rem8u#57
(byte) rem8u#58
(byte) rem8u#59
(byte) rem8u#6
(byte) rem8u#60
(byte) rem8u#61
(byte) rem8u#62
(byte) rem8u#63
(byte) rem8u#64
(byte) rem8u#65
(byte) rem8u#7
(byte) rem8u#8
(byte) rem8u#9
(void()) test_16s()
(signed word/signed dword~) test_16s::$0
(signed word/signed dword~) test_16s::$1
(byte/word~) test_16s::$15
(boolean~) test_16s::$16
(signed word/signed dword~) test_16s::$2
(signed byte/signed word/signed dword~) test_16s::$3
(signed byte/signed word/signed dword~) test_16s::$4
(signed byte/signed word/signed dword~) test_16s::$5
(signed word~) test_16s::$6
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@11
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0
(signed word) test_16s::dividend#1
(signed word[]) test_16s::dividends
(signed word[]) test_16s::dividends#0
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0
(signed word) test_16s::divisor#1
(signed word) test_16s::divisor#2
(signed word) test_16s::divisor#3
(signed word[]) test_16s::divisors
(signed word[]) test_16s::divisors#0
(byte) test_16s::i
(byte) test_16s::i#0
(byte) test_16s::i#1
(byte) test_16s::i#10
(byte) test_16s::i#11
(byte) test_16s::i#2
(byte) test_16s::i#3
(byte) test_16s::i#4
(byte) test_16s::i#5
(byte) test_16s::i#6
(byte) test_16s::i#7
(byte) test_16s::i#8
(byte) test_16s::i#9
(signed word) test_16s::res
(signed word) test_16s::res#0
(signed word) test_16s::res#1
(signed word) test_16s::res#2
(signed word) test_16s::res#3
(signed word) test_16s::res#4
(const string) test_16s::str = (string) " / @"
(const string) test_16s::str1 = (string) " = @"
(const string) test_16s::str2 = (string) " @"
(void()) test_16u()
(word~) test_16u::$0
(boolean~) test_16u::$10
(byte/word~) test_16u::$9
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@11
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0
(word) test_16u::dividend#1
(word[]) test_16u::dividends
(word[]) test_16u::dividends#0
(word) test_16u::divisor
(word) test_16u::divisor#0
(word) test_16u::divisor#1
(word) test_16u::divisor#2
(word) test_16u::divisor#3
(word[]) test_16u::divisors
(word[]) test_16u::divisors#0
(byte) test_16u::i
(byte) test_16u::i#0
(byte) test_16u::i#1
(byte) test_16u::i#10
(byte) test_16u::i#11
(byte) test_16u::i#2
(byte) test_16u::i#3
(byte) test_16u::i#4
(byte) test_16u::i#5
(byte) test_16u::i#6
(byte) test_16u::i#7
(byte) test_16u::i#8
(byte) test_16u::i#9
(word) test_16u::res
(word) test_16u::res#0
(word) test_16u::res#1
(word) test_16u::res#2
(word) test_16u::res#3
(word) test_16u::res#4
(const string) test_16u::str = (string) " / @"
(const string) test_16u::str1 = (string) " = @"
(const string) test_16u::str2 = (string) " @"
(void()) test_8s()
(signed byte/signed word/signed dword~) test_8s::$0
(signed byte/signed word/signed dword~) test_8s::$1
(boolean~) test_8s::$13
(signed byte/signed word/signed dword~) test_8s::$2
(signed byte/signed word/signed dword~) test_8s::$3
(signed byte~) test_8s::$4
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@11
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0
(signed byte) test_8s::dividend#1
(signed byte[]) test_8s::dividends
(signed byte[]) test_8s::dividends#0
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0
(signed byte) test_8s::divisor#1
(signed byte) test_8s::divisor#2
(signed byte) test_8s::divisor#3
(signed byte[]) test_8s::divisors
(signed byte[]) test_8s::divisors#0
(byte) test_8s::i
(byte) test_8s::i#0
(byte) test_8s::i#1
(byte) test_8s::i#10
(byte) test_8s::i#11
(byte) test_8s::i#2
(byte) test_8s::i#3
(byte) test_8s::i#4
(byte) test_8s::i#5
(byte) test_8s::i#6
(byte) test_8s::i#7
(byte) test_8s::i#8
(byte) test_8s::i#9
(signed byte) test_8s::res
(signed byte) test_8s::res#0
(signed byte) test_8s::res#1
(signed byte) test_8s::res#2
(signed byte) test_8s::res#3
(signed byte) test_8s::res#4
(const string) test_8s::str = (string) " / @"
(const string) test_8s::str1 = (string) " = @"
(const string) test_8s::str2 = (string) " @"
(void()) test_8u()
(byte~) test_8u::$0
(boolean~) test_8u::$9
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0
(byte) test_8u::dividend#1
(byte[]) test_8u::dividends
(byte[]) test_8u::dividends#0
(byte) test_8u::divisor
(byte) test_8u::divisor#0
(byte) test_8u::divisor#1
(byte) test_8u::divisor#2
(byte) test_8u::divisor#3
(byte[]) test_8u::divisors
(byte[]) test_8u::divisors#0
(byte) test_8u::i
(byte) test_8u::i#0
(byte) test_8u::i#1
(byte) test_8u::i#10
(byte) test_8u::i#11
(byte) test_8u::i#2
(byte) test_8u::i#3
(byte) test_8u::i#4
(byte) test_8u::i#5
(byte) test_8u::i#6
(byte) test_8u::i#7
(byte) test_8u::i#8
(byte) test_8u::i#9
(byte) test_8u::res
(byte) test_8u::res#0
(byte) test_8u::res#1
(byte) test_8u::res#2
(byte) test_8u::res#3
(byte) test_8u::res#4
(const string) test_8u::str = (string) " / @"
(const string) test_8u::str1 = (string) " = @"
(const string) test_8u::str2 = (string) " @"

OPTIMIZING CONTROL FLOW GRAPH
Inversing boolean not (boolean~) print_sword::$1 ← (signed word) print_sword::w#5 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) print_sword::$0 ← (signed word) print_sword::w#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) print_sbyte::$1 ← (signed byte) print_sbyte::b#5 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) print_sbyte::$0 ← (signed byte) print_sbyte::b#5 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) divr8u::$3 ← (byte~) divr8u::$1 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) divr8u::$2 ← (byte~) divr8u::$1 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) divr8u::$7 ← (byte) divr8u::rem#5 < (byte) divr8u::divisor#1 from (boolean~) divr8u::$6 ← (byte) divr8u::rem#5 >= (byte) divr8u::divisor#1
Inversing boolean not (boolean~) divr16u::$4 ← (byte~) divr16u::$2 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) divr16u::$3 ← (byte~) divr16u::$2 != (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) divr16u::$8 ← (word) divr16u::rem#5 < (word) divr16u::divisor#1 from (boolean~) divr16u::$7 ← (word) divr16u::rem#5 >= (word) divr16u::divisor#1
Inversing boolean not (boolean~) div8s::$1 ← (signed byte) div8s::dividend#1 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div8s::$0 ← (signed byte) div8s::dividend#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div8s::$6 ← (signed byte) div8s::divisor#1 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div8s::$5 ← (signed byte) div8s::divisor#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div8s::$13 ← (byte) div8s::neg#4 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div8s::$12 ← (byte) div8s::neg#4 == (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div16s::$1 ← (signed word) div16s::dividend#1 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div16s::$0 ← (signed word) div16s::dividend#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div16s::$6 ← (signed word) div16s::divisor#1 >= (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div16s::$5 ← (signed word) div16s::divisor#1 < (byte/signed byte/word/signed word/dword/signed dword) 0
Inversing boolean not (boolean~) div16s::$13 ← (byte) div16s::neg#4 != (byte/signed byte/word/signed word/dword/signed dword) 0 from (boolean~) div16s::$12 ← (byte) div16s::neg#4 == (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2UnaryNotSimplification
Not aliassing across scopes: print_str::str#15 print_str::str#10
Not aliassing across scopes: char_cursor#140 char_cursor#54
Not aliassing across scopes: line_cursor#39 line_cursor#44
Not aliassing across scopes: char_cursor#127 char_cursor#60
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: char_cursor#141 char_cursor#138
Not aliassing across scopes: char_cursor#68 char_cursor#13
Not aliassing across scopes: char_cursor#69 char_cursor#18
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#142 char_cursor#137
Not aliassing across scopes: char_cursor#71 char_cursor#16
Not aliassing across scopes: char_cursor#72 char_cursor#18
Not aliassing across scopes: print_word::w#5 print_word::w#0
Not aliassing across scopes: char_cursor#132 char_cursor#128
Not aliassing across scopes: char_cursor#74 char_cursor#16
Not aliassing across scopes: char_cursor#75 char_cursor#16
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#133 char_cursor#130
Not aliassing across scopes: char_cursor#77 char_cursor#18
Not aliassing across scopes: char_cursor#78 char_cursor#18
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: char_cursor#80 char_cursor#133
Not aliassing across scopes: print_cls::sc#0 SCREEN#0
Not aliassing across scopes: line_cursor#3 SCREEN#0
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: rem8u#31 rem8u#32
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#2
Not aliassing across scopes: rem8u#15 rem8u#4
Not aliassing across scopes: div8u::$0 divr8u::return#3
Not aliassing across scopes: divr8u::rem#9 divr8u::rem#0
Not aliassing across scopes: divr8u::dividend#4 divr8u::dividend#0
Not aliassing across scopes: divr8u::divisor#5 divr8u::divisor#0
Not aliassing across scopes: rem8u#3 divr8u::rem#8
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: rem16u#31 rem16u#32
Not aliassing across scopes: divr16u::dividend#0 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#0 divr16u::return#2
Not aliassing across scopes: rem16u#15 rem16u#4
Not aliassing across scopes: div16u::$0 divr16u::return#3
Not aliassing across scopes: divr16u::rem#9 divr16u::rem#0
Not aliassing across scopes: divr16u::dividend#4 divr16u::dividend#0
Not aliassing across scopes: divr16u::divisor#5 divr16u::divisor#0
Not aliassing across scopes: rem16u#3 divr16u::rem#8
Not aliassing across scopes: div8s::dividend#1 div8s::dividend#0
Not aliassing across scopes: div8s::divisor#6 div8s::divisor#0
Not aliassing across scopes: rem8u#60 rem8u#39
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#1
Not aliassing across scopes: rem8u#18 rem8u#2
Not aliassing across scopes: div8s::$11 div8u::return#5
Not aliassing across scopes: div16s::dividend#1 div16s::dividend#0
Not aliassing across scopes: div16s::divisor#6 div16s::divisor#0
Not aliassing across scopes: rem16u#59 rem16u#38
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#1
Not aliassing across scopes: rem16u#18 rem16u#2
Not aliassing across scopes: div16s::$11 div16u::return#5
Not aliassing across scopes: line_cursor#40 line_cursor#45
Not aliassing across scopes: char_cursor#134 char_cursor#139
Not aliassing across scopes: rem8u#44 rem8u#41
Not aliassing across scopes: rem16u#52 rem16u#40
Not aliassing across scopes: rem8s#29 rem8s#21
Not aliassing across scopes: rem16s#29 rem16s#20
Not aliassing across scopes: line_cursor#24 line_cursor#4
Not aliassing across scopes: char_cursor#83 char_cursor#20
Not aliassing across scopes: rem8u#22 rem8u#11
Not aliassing across scopes: char_cursor#84 char_cursor#35
Not aliassing across scopes: line_cursor#25 line_cursor#12
Not aliassing across scopes: rem16u#22 rem16u#11
Not aliassing across scopes: char_cursor#85 char_cursor#44
Not aliassing across scopes: line_cursor#26 line_cursor#14
Not aliassing across scopes: rem8u#23 rem8u#13
Not aliassing across scopes: rem8s#10 rem8s#7
Not aliassing across scopes: char_cursor#86 char_cursor#53
Not aliassing across scopes: line_cursor#27 line_cursor#16
Not aliassing across scopes: rem16u#23 rem16u#13
Not aliassing across scopes: rem16s#10 rem16s#7
Not aliassing across scopes: char_cursor#87 char_cursor#62
Not aliassing across scopes: line_cursor#28 line_cursor#18
Not aliassing across scopes: rem8u#45 rem8u#33
Not aliassing across scopes: char_cursor#149 char_cursor#21
Not aliassing across scopes: line_cursor#82 line_cursor#5
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#1
Not aliassing across scopes: rem8u#25 rem8u#2
Not aliassing across scopes: test_8u::$0 div8u::return#6
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#1
Not aliassing across scopes: char_cursor#89 char_cursor#16
Not aliassing across scopes: char_cursor#90 char_cursor#2
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#1
Not aliassing across scopes: char_cursor#91 char_cursor#16
Not aliassing across scopes: char_cursor#92 char_cursor#2
Not aliassing across scopes: print_byte::b#5 test_8u::res#1
Not aliassing across scopes: char_cursor#93 char_cursor#16
Not aliassing across scopes: char_cursor#94 char_cursor#2
Not aliassing across scopes: print_byte::b#6 rem8u#26
Not aliassing across scopes: char_cursor#95 char_cursor#16
Not aliassing across scopes: line_cursor#30 line_cursor#2
Not aliassing across scopes: char_cursor#96 char_cursor#4
Not aliassing across scopes: rem16u#44 rem16u#33
Not aliassing across scopes: char_cursor#150 char_cursor#22
Not aliassing across scopes: line_cursor#83 line_cursor#6
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#1
Not aliassing across scopes: rem16u#25 rem16u#2
Not aliassing across scopes: test_16u::$0 div16u::return#6
Not aliassing across scopes: print_word::w#1 test_16u::dividend#1
Not aliassing across scopes: char_cursor#98 char_cursor#13
Not aliassing across scopes: char_cursor#99 char_cursor#2
Not aliassing across scopes: print_word::w#2 test_16u::divisor#1
Not aliassing across scopes: char_cursor#100 char_cursor#13
Not aliassing across scopes: char_cursor#101 char_cursor#2
Not aliassing across scopes: print_word::w#3 test_16u::res#1
Not aliassing across scopes: char_cursor#102 char_cursor#13
Not aliassing across scopes: char_cursor#103 char_cursor#2
Not aliassing across scopes: print_word::w#4 rem16u#26
Not aliassing across scopes: char_cursor#104 char_cursor#13
Not aliassing across scopes: line_cursor#32 line_cursor#2
Not aliassing across scopes: char_cursor#105 char_cursor#4
Not aliassing across scopes: rem8u#48 rem8u#34
Not aliassing across scopes: rem8s#23 rem8s#16
Not aliassing across scopes: char_cursor#151 char_cursor#23
Not aliassing across scopes: line_cursor#84 line_cursor#7
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: rem8u#28 rem8u#6
Not aliassing across scopes: rem8s#12 rem8s#3
Not aliassing across scopes: test_8s::$4 div8s::return#5
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#1
Not aliassing across scopes: char_cursor#107 char_cursor#10
Not aliassing across scopes: char_cursor#108 char_cursor#2
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#1
Not aliassing across scopes: char_cursor#109 char_cursor#10
Not aliassing across scopes: char_cursor#110 char_cursor#2
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#1
Not aliassing across scopes: char_cursor#111 char_cursor#10
Not aliassing across scopes: char_cursor#112 char_cursor#2
Not aliassing across scopes: print_sbyte::b#4 rem8s#13
Not aliassing across scopes: char_cursor#113 char_cursor#10
Not aliassing across scopes: line_cursor#34 line_cursor#2
Not aliassing across scopes: char_cursor#114 char_cursor#4
Not aliassing across scopes: rem16u#47 rem16u#34
Not aliassing across scopes: rem16s#22 rem16s#16
Not aliassing across scopes: char_cursor#152 char_cursor#24
Not aliassing across scopes: line_cursor#85 line_cursor#8
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: rem16u#28 rem16u#6
Not aliassing across scopes: rem16s#12 rem16s#3
Not aliassing across scopes: test_16s::$6 div16s::return#5
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#1
Not aliassing across scopes: char_cursor#116 char_cursor#7
Not aliassing across scopes: char_cursor#117 char_cursor#2
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#1
Not aliassing across scopes: char_cursor#118 char_cursor#7
Not aliassing across scopes: char_cursor#119 char_cursor#2
Not aliassing across scopes: print_sword::w#3 test_16s::res#1
Not aliassing across scopes: char_cursor#120 char_cursor#7
Not aliassing across scopes: char_cursor#121 char_cursor#2
Not aliassing across scopes: print_sword::w#4 rem16s#13
Not aliassing across scopes: char_cursor#122 char_cursor#7
Not aliassing across scopes: line_cursor#36 line_cursor#2
Not aliassing across scopes: char_cursor#123 char_cursor#4
Not aliassing across scopes: line_cursor#38 line_cursor#10
Not aliassing across scopes: char_cursor#125 char_cursor#26
Not aliassing across scopes: rem8u#30 rem8u#9
Not aliassing across scopes: rem16u#30 rem16u#9
Not aliassing across scopes: rem8s#15 rem8s#5
Not aliassing across scopes: rem16s#15 rem16s#5
Alias (byte*) SCREEN#0 = (byte*) line_cursor#0 (byte*) char_cursor#0 (byte*) line_cursor#61 (byte*) char_cursor#154 (byte*) line_cursor#56 (byte*) char_cursor#153 (byte*) line_cursor#51 (byte*) char_cursor#148 (byte*) line_cursor#50 (byte*) char_cursor#147 (byte*) line_cursor#45 (byte*) char_cursor#139 
Alias (byte*) print_str::str#13 = (byte*) print_str::str#14 
Alias (byte*) char_cursor#126 = (byte*) char_cursor#64 (byte*) char_cursor#65 (byte*) char_cursor#2 
Alias (byte*) line_cursor#1 = (byte*~) print_ln::$0 (byte*) line_cursor#21 (byte*) char_cursor#3 (byte*) line_cursor#22 (byte*) char_cursor#67 (byte*) line_cursor#2 (byte*) char_cursor#4 
Alias (word) print_word::w#0 = (word~) print_sword::$4 
Alias (byte*) char_cursor#5 = (byte*) char_cursor#68 (byte*) char_cursor#70 (byte*) char_cursor#7 
Alias (byte*) char_cursor#129 = (byte*) char_cursor#141 
Alias (signed word) print_sword::w#5 = (signed word) print_sword::w#8 (signed word) print_sword::w#7 
Alias (byte*) char_cursor#6 = (byte*) char_cursor#69 
Alias (signed word) print_sword::w#0 = (signed word~) print_sword::$3 
Alias (byte) print_byte::b#0 = (byte~) print_sbyte::$4 
Alias (byte*) char_cursor#10 = (byte*) char_cursor#8 (byte*) char_cursor#71 (byte*) char_cursor#73 
Alias (byte*) char_cursor#131 = (byte*) char_cursor#142 
Alias (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#8 (signed byte) print_sbyte::b#7 
Alias (byte*) char_cursor#72 = (byte*) char_cursor#9 
Alias (signed byte) print_sbyte::b#0 = (signed byte~) print_sbyte::$3 
Alias (byte) print_byte::b#1 = (byte~) print_word::$0 
Alias (word) print_word::w#5 = (word) print_word::w#6 
Alias (byte*) char_cursor#11 = (byte*) char_cursor#74 
Alias (byte) print_byte::b#2 = (byte~) print_word::$2 
Alias (byte*) char_cursor#12 = (byte*) char_cursor#75 (byte*) char_cursor#76 (byte*) char_cursor#13 
Alias (byte) print_byte::b#7 = (byte) print_byte::b#8 
Alias (byte*) char_cursor#14 = (byte*) char_cursor#77 
Alias (byte*) char_cursor#15 = (byte*) char_cursor#78 (byte*) char_cursor#79 (byte*) char_cursor#16 
Alias (byte*) char_cursor#17 = (byte*) char_cursor#81 (byte*) char_cursor#18 
Alias (byte*) line_cursor#23 = (byte*) char_cursor#19 (byte*) line_cursor#3 (byte*) char_cursor#82 (byte*) line_cursor#4 (byte*) char_cursor#20 
Alias (byte) divr8u::return#0 = (byte) divr8u::return#3 
Alias (byte) rem8u#1 = (byte) rem8u#15 (byte) rem8u#16 (byte) rem8u#2 
Alias (byte) div8u::return#0 = (byte~) div8u::$0 (byte) div8u::return#4 (byte) div8u::return#1 
Alias (byte) divr8u::rem#1 = (byte~) divr8u::$0 (byte) divr8u::rem#6 
Alias (byte) divr8u::dividend#1 = (byte~) divr8u::$4 (byte) divr8u::dividend#7 
Alias (byte) divr8u::quotient#1 = (byte~) divr8u::$5 (byte) divr8u::quotient#4 
Alias (byte) divr8u::dividend#2 = (byte) divr8u::dividend#6 
Alias (byte) divr8u::quotient#6 = (byte) divr8u::quotient#7 
Alias (byte) divr8u::divisor#3 = (byte) divr8u::divisor#4 
Alias (byte) divr8u::i#5 = (byte) divr8u::i#6 
Alias (byte) divr8u::rem#5 = (byte) divr8u::rem#7 
Alias (byte) divr8u::divisor#1 = (byte) divr8u::divisor#2 
Alias (byte) divr8u::i#3 = (byte) divr8u::i#4 
Alias (byte) divr8u::rem#3 = (byte/signed byte/word/signed word/dword/signed dword~) divr8u::$8 
Alias (byte) divr8u::rem#10 = (byte) divr8u::rem#8 
Alias (byte) divr8u::return#1 = (byte) divr8u::quotient#5 (byte) divr8u::quotient#8 (byte) divr8u::return#4 (byte) divr8u::return#2 
Alias (byte) rem8u#17 = (byte) rem8u#3 (byte) rem8u#4 
Alias (byte) rem8u#0 = (byte) rem8u#55 (byte) rem8u#52 (byte) rem8u#50 (byte) rem8u#41 
Alias (word) divr16u::return#0 = (word) divr16u::return#3 
Alias (word) rem16u#1 = (word) rem16u#15 (word) rem16u#16 (word) rem16u#2 
Alias (word) div16u::return#0 = (word~) div16u::$0 (word) div16u::return#4 (word) div16u::return#1 
Alias (word) divr16u::rem#1 = (word~) divr16u::$0 (word) divr16u::rem#6 
Alias (word) divr16u::dividend#1 = (word~) divr16u::$5 (word) divr16u::dividend#7 
Alias (word) divr16u::quotient#1 = (word~) divr16u::$6 (word) divr16u::quotient#4 
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#6 
Alias (word) divr16u::quotient#6 = (word) divr16u::quotient#7 
Alias (word) divr16u::divisor#3 = (word) divr16u::divisor#4 
Alias (byte) divr16u::i#5 = (byte) divr16u::i#6 
Alias (word) divr16u::rem#5 = (word) divr16u::rem#7 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#2 
Alias (byte) divr16u::i#3 = (byte) divr16u::i#4 
Alias (word) divr16u::rem#3 = (word~) divr16u::$9 
Alias (word) divr16u::rem#10 = (word) divr16u::rem#8 
Alias (word) divr16u::return#1 = (word) divr16u::quotient#5 (word) divr16u::quotient#8 (word) divr16u::return#4 (word) divr16u::return#2 
Alias (word) rem16u#17 = (word) rem16u#3 (word) rem16u#4 
Alias (word) rem16u#0 = (word) rem16u#50 (word) rem16u#49 (word) rem16u#40 
Alias (signed byte) div8s::dividend#1 = (signed byte) div8s::dividend#2 (signed byte) div8s::dividend#3 
Alias (signed byte) div8s::divisor#4 = (signed byte) div8s::divisor#6 (signed byte) div8s::divisor#5 
Alias (byte) div8s::neg#0 = (byte) div8s::neg#7 
Alias (byte) rem8u#56 = (byte) rem8u#60 (byte) rem8u#57 
Alias (byte) div8s::dividendu#1 = (byte~) div8s::$4 
Alias (byte) div8s::dividendu#2 = (byte~) div8s::$3 
Alias (signed byte) div8s::divisor#1 = (signed byte) div8s::divisor#2 (signed byte) div8s::divisor#3 
Alias (byte) div8s::dividendu#4 = (byte) div8s::dividendu#6 (byte) div8s::dividendu#5 
Alias (byte) rem8u#42 = (byte) rem8u#51 (byte) rem8u#43 
Alias (byte) div8s::neg#3 = (byte) div8s::neg#8 (byte) div8s::neg#5 
Alias (byte) div8s::divisoru#1 = (byte~) div8s::$10 
Alias (byte) div8s::divisoru#2 = (byte~) div8s::$8 
Alias (byte) div8s::neg#2 = (byte~) div8s::$9 
Alias (byte) div8u::return#2 = (byte) div8u::return#5 
Alias (byte) div8s::neg#4 = (byte) div8s::neg#6 
Alias (byte) rem8u#18 = (byte) rem8u#5 (byte) rem8u#19 (byte) rem8u#20 
Alias (byte) div8s::resultu#0 = (byte~) div8s::$11 (byte) div8s::resultu#1 (byte) div8s::resultu#2 
Alias (signed byte) rem8s#1 = (signed byte~) div8s::$17 
Alias (signed byte) div8s::return#0 = (signed byte~) div8s::$19 
Alias (signed byte) rem8s#2 = (signed byte~) div8s::$14 
Alias (signed byte) div8s::return#1 = (signed byte~) div8s::$15 
Alias (signed byte) div8s::return#2 = (signed byte) div8s::return#4 
Alias (byte) rem8u#21 = (byte) rem8u#6 
Alias (signed byte) rem8s#3 = (signed byte) rem8s#9 
Alias (signed byte) rem8s#0 = (signed byte) rem8s#26 (signed byte) rem8s#21 
Alias (signed word) div16s::dividend#1 = (signed word) div16s::dividend#2 (signed word) div16s::dividend#3 
Alias (signed word) div16s::divisor#4 = (signed word) div16s::divisor#6 (signed word) div16s::divisor#5 
Alias (byte) div16s::neg#0 = (byte) div16s::neg#7 
Alias (word) rem16u#55 = (word) rem16u#59 (word) rem16u#56 
Alias (word) div16s::dividendu#1 = (word~) div16s::$4 
Alias (word) div16s::dividendu#2 = (word~) div16s::$3 
Alias (signed word) div16s::divisor#1 = (signed word) div16s::divisor#2 (signed word) div16s::divisor#3 
Alias (word) div16s::dividendu#4 = (word) div16s::dividendu#6 (word) div16s::dividendu#5 
Alias (word) rem16u#41 = (word) rem16u#51 (word) rem16u#42 
Alias (byte) div16s::neg#3 = (byte) div16s::neg#8 (byte) div16s::neg#5 
Alias (word) div16s::divisoru#1 = (word~) div16s::$10 
Alias (word) div16s::divisoru#2 = (word~) div16s::$8 
Alias (byte) div16s::neg#2 = (byte~) div16s::$9 
Alias (word) div16u::return#2 = (word) div16u::return#5 
Alias (byte) div16s::neg#4 = (byte) div16s::neg#6 
Alias (word) rem16u#18 = (word) rem16u#5 (word) rem16u#19 (word) rem16u#20 
Alias (word) div16s::resultu#0 = (word~) div16s::$11 (word) div16s::resultu#1 (word) div16s::resultu#2 
Alias (signed word) rem16s#1 = (signed word~) div16s::$17 
Alias (signed word) div16s::return#0 = (signed word~) div16s::$19 
Alias (signed word) rem16s#2 = (signed word~) div16s::$14 
Alias (signed word) div16s::return#1 = (signed word~) div16s::$15 
Alias (signed word) div16s::return#2 = (signed word) div16s::return#4 
Alias (word) rem16u#21 = (word) rem16u#6 
Alias (signed word) rem16s#3 = (signed word) rem16s#9 
Alias (byte) rem8u#33 = (byte) rem8u#44 
Alias (word) rem16u#33 = (word) rem16u#43 (word) rem16u#52 
Alias (signed byte) rem8s#16 = (signed byte) rem8s#27 (signed byte) rem8s#29 (signed byte) rem8s#22 
Alias (signed word) rem16s#16 = (signed word) rem16s#27 (signed word) rem16s#29 (signed word) rem16s#25 (signed word) rem16s#21 
Alias (byte*) line_cursor#24 = (byte*) line_cursor#5 
Alias (byte*) char_cursor#21 = (byte*) char_cursor#83 
Alias (byte) rem8u#22 = (byte) rem8u#7 (byte) rem8u#34 
Alias (byte*) char_cursor#22 = (byte*) char_cursor#84 
Alias (byte*) line_cursor#25 = (byte*) line_cursor#6 
Alias (word) rem16u#22 = (word) rem16u#7 (word) rem16u#34 
Alias (byte*) char_cursor#23 = (byte*) char_cursor#85 
Alias (byte*) line_cursor#26 = (byte*) line_cursor#7 
Alias (byte) rem8u#23 = (byte) rem8u#8 (byte) rem8u#35 (byte) rem8u#24 (byte) rem8u#9 
Alias (signed byte) rem8s#10 = (signed byte) rem8s#4 (signed byte) rem8s#17 (signed byte) rem8s#11 (signed byte) rem8s#5 
Alias (byte*) char_cursor#24 = (byte*) char_cursor#86 
Alias (byte*) line_cursor#27 = (byte*) line_cursor#8 
Alias (word) rem16u#23 = (word) rem16u#8 (word) rem16u#24 (word) rem16u#9 
Alias (signed word) rem16s#10 = (signed word) rem16s#4 (signed word) rem16s#11 (signed word) rem16s#5 
Alias (byte*) char_cursor#25 = (byte*) char_cursor#87 (byte*) char_cursor#88 (byte*) char_cursor#26 
Alias (byte*) line_cursor#10 = (byte*) line_cursor#9 (byte*) line_cursor#28 (byte*) line_cursor#29 
Alias (byte) div8u::return#3 = (byte) div8u::return#6 
Alias (byte) test_8u::dividend#0 = (byte) test_8u::dividend#1 
Alias (byte*) char_cursor#135 = (byte*) char_cursor#143 
Alias (byte) test_8u::divisor#0 = (byte) test_8u::divisor#3 (byte) test_8u::divisor#2 (byte) test_8u::divisor#1 
Alias (byte*) line_cursor#41 = (byte*) line_cursor#74 (byte*) line_cursor#78 (byte*) line_cursor#70 (byte*) line_cursor#66 (byte*) line_cursor#62 (byte*) line_cursor#57 (byte*) line_cursor#52 (byte*) line_cursor#46 
Alias (byte) test_8u::i#10 = (byte) test_8u::i#11 (byte) test_8u::i#2 (byte) test_8u::i#9 (byte) test_8u::i#8 (byte) test_8u::i#7 (byte) test_8u::i#6 (byte) test_8u::i#5 (byte) test_8u::i#4 (byte) test_8u::i#3 
Alias (byte) rem8u#10 = (byte) rem8u#25 (byte) rem8u#61 (byte) rem8u#58 (byte) rem8u#53 (byte) rem8u#46 (byte) rem8u#37 (byte) rem8u#26 (byte) rem8u#47 (byte) rem8u#38 (byte) rem8u#27 (byte) rem8u#11 
Alias (byte) test_8u::res#0 = (byte~) test_8u::$0 (byte) test_8u::res#4 (byte) test_8u::res#3 (byte) test_8u::res#2 (byte) test_8u::res#1 
Alias (byte*) char_cursor#27 = (byte*) char_cursor#89 
Alias (byte*) char_cursor#28 = (byte*) char_cursor#90 
Alias (byte*) char_cursor#29 = (byte*) char_cursor#91 
Alias (byte*) char_cursor#30 = (byte*) char_cursor#92 
Alias (byte*) char_cursor#31 = (byte*) char_cursor#93 
Alias (byte*) char_cursor#32 = (byte*) char_cursor#94 
Alias (byte*) char_cursor#33 = (byte*) char_cursor#95 
Alias (byte*) line_cursor#11 = (byte*) line_cursor#30 (byte*) line_cursor#31 (byte*) line_cursor#12 
Alias (byte*) char_cursor#34 = (byte*) char_cursor#96 (byte*) char_cursor#97 (byte*) char_cursor#35 
Alias (word) div16u::return#3 = (word) div16u::return#6 
Alias (word) test_16u::dividend#0 = (word) test_16u::dividend#1 
Alias (byte*) char_cursor#136 = (byte*) char_cursor#144 
Alias (word) test_16u::divisor#0 = (word) test_16u::divisor#3 (word) test_16u::divisor#2 (word) test_16u::divisor#1 
Alias (byte*) line_cursor#42 = (byte*) line_cursor#75 (byte*) line_cursor#79 (byte*) line_cursor#71 (byte*) line_cursor#67 (byte*) line_cursor#63 (byte*) line_cursor#58 (byte*) line_cursor#53 (byte*) line_cursor#47 
Alias (byte) test_16u::i#10 = (byte) test_16u::i#11 (byte) test_16u::i#2 (byte) test_16u::i#9 (byte) test_16u::i#8 (byte) test_16u::i#7 (byte) test_16u::i#6 (byte) test_16u::i#5 (byte) test_16u::i#4 (byte) test_16u::i#3 
Alias (word) rem16u#10 = (word) rem16u#25 (word) rem16u#60 (word) rem16u#57 (word) rem16u#53 (word) rem16u#45 (word) rem16u#36 (word) rem16u#26 (word) rem16u#46 (word) rem16u#37 (word) rem16u#27 (word) rem16u#11 
Alias (word) test_16u::res#0 = (word~) test_16u::$0 (word) test_16u::res#4 (word) test_16u::res#3 (word) test_16u::res#2 (word) test_16u::res#1 
Alias (byte*) char_cursor#36 = (byte*) char_cursor#98 
Alias (byte*) char_cursor#37 = (byte*) char_cursor#99 
Alias (byte*) char_cursor#100 = (byte*) char_cursor#38 
Alias (byte*) char_cursor#101 = (byte*) char_cursor#39 
Alias (byte*) char_cursor#102 = (byte*) char_cursor#40 
Alias (byte*) char_cursor#103 = (byte*) char_cursor#41 
Alias (byte*) char_cursor#104 = (byte*) char_cursor#42 
Alias (byte*) line_cursor#13 = (byte*) line_cursor#32 (byte*) line_cursor#33 (byte*) line_cursor#14 
Alias (byte*) char_cursor#105 = (byte*) char_cursor#43 (byte*) char_cursor#106 (byte*) char_cursor#44 
Alias (byte) test_16u::i#1 = (byte/word~) test_16u::$9 
Alias (signed byte) div8s::return#3 = (signed byte) div8s::return#5 
Alias (signed byte) test_8s::dividend#0 = (signed byte) test_8s::dividend#1 
Alias (byte*) char_cursor#137 = (byte*) char_cursor#145 
Alias (signed byte) test_8s::divisor#0 = (signed byte) test_8s::divisor#3 (signed byte) test_8s::divisor#2 (signed byte) test_8s::divisor#1 
Alias (byte*) line_cursor#43 = (byte*) line_cursor#76 (byte*) line_cursor#80 (byte*) line_cursor#72 (byte*) line_cursor#68 (byte*) line_cursor#64 (byte*) line_cursor#59 (byte*) line_cursor#54 (byte*) line_cursor#48 
Alias (byte) test_8s::i#10 = (byte) test_8s::i#11 (byte) test_8s::i#2 (byte) test_8s::i#9 (byte) test_8s::i#8 (byte) test_8s::i#7 (byte) test_8s::i#6 (byte) test_8s::i#5 (byte) test_8s::i#4 (byte) test_8s::i#3 
Alias (byte) rem8u#12 = (byte) rem8u#28 (byte) rem8u#65 (byte) rem8u#64 (byte) rem8u#63 (byte) rem8u#62 (byte) rem8u#59 (byte) rem8u#54 (byte) rem8u#49 (byte) rem8u#40 (byte) rem8u#29 (byte) rem8u#13 
Alias (signed byte) rem8s#12 = (signed byte) rem8s#6 (signed byte) rem8s#31 (signed byte) rem8s#30 (signed byte) rem8s#28 (signed byte) rem8s#24 (signed byte) rem8s#19 (signed byte) rem8s#13 (signed byte) rem8s#25 (signed byte) rem8s#20 (signed byte) rem8s#14 (signed byte) rem8s#7 
Alias (signed byte) test_8s::res#0 = (signed byte~) test_8s::$4 (signed byte) test_8s::res#4 (signed byte) test_8s::res#3 (signed byte) test_8s::res#2 (signed byte) test_8s::res#1 
Alias (byte*) char_cursor#107 = (byte*) char_cursor#45 
Alias (byte*) char_cursor#108 = (byte*) char_cursor#46 
Alias (byte*) char_cursor#109 = (byte*) char_cursor#47 
Alias (byte*) char_cursor#110 = (byte*) char_cursor#48 
Alias (byte*) char_cursor#111 = (byte*) char_cursor#49 
Alias (byte*) char_cursor#112 = (byte*) char_cursor#50 
Alias (byte*) char_cursor#113 = (byte*) char_cursor#51 
Alias (byte*) line_cursor#15 = (byte*) line_cursor#34 (byte*) line_cursor#35 (byte*) line_cursor#16 
Alias (byte*) char_cursor#114 = (byte*) char_cursor#52 (byte*) char_cursor#115 (byte*) char_cursor#53 
Alias (signed word) div16s::return#3 = (signed word) div16s::return#5 
Alias (signed word) test_16s::dividend#0 = (signed word) test_16s::dividend#1 
Alias (byte*) char_cursor#138 = (byte*) char_cursor#146 
Alias (signed word) test_16s::divisor#0 = (signed word) test_16s::divisor#3 (signed word) test_16s::divisor#2 (signed word) test_16s::divisor#1 
Alias (byte*) line_cursor#44 = (byte*) line_cursor#77 (byte*) line_cursor#81 (byte*) line_cursor#73 (byte*) line_cursor#69 (byte*) line_cursor#65 (byte*) line_cursor#60 (byte*) line_cursor#55 (byte*) line_cursor#49 
Alias (byte) test_16s::i#10 = (byte) test_16s::i#11 (byte) test_16s::i#2 (byte) test_16s::i#9 (byte) test_16s::i#8 (byte) test_16s::i#7 (byte) test_16s::i#6 (byte) test_16s::i#5 (byte) test_16s::i#4 (byte) test_16s::i#3 
Alias (word) rem16u#12 = (word) rem16u#28 (word) rem16u#64 (word) rem16u#63 (word) rem16u#62 (word) rem16u#61 (word) rem16u#58 (word) rem16u#54 (word) rem16u#48 (word) rem16u#39 (word) rem16u#29 (word) rem16u#13 
Alias (signed word) rem16s#12 = (signed word) rem16s#6 (signed word) rem16s#30 (signed word) rem16s#28 (signed word) rem16s#26 (signed word) rem16s#23 (signed word) rem16s#18 (signed word) rem16s#13 (signed word) rem16s#24 (signed word) rem16s#19 (signed word) rem16s#14 (signed word) rem16s#7 
Alias (signed word) test_16s::res#0 = (signed word~) test_16s::$6 (signed word) test_16s::res#4 (signed word) test_16s::res#3 (signed word) test_16s::res#2 (signed word) test_16s::res#1 
Alias (byte*) char_cursor#116 = (byte*) char_cursor#54 
Alias (byte*) char_cursor#117 = (byte*) char_cursor#55 
Alias (byte*) char_cursor#118 = (byte*) char_cursor#56 
Alias (byte*) char_cursor#119 = (byte*) char_cursor#57 
Alias (byte*) char_cursor#120 = (byte*) char_cursor#58 
Alias (byte*) char_cursor#121 = (byte*) char_cursor#59 
Alias (byte*) char_cursor#122 = (byte*) char_cursor#60 
Alias (byte*) line_cursor#17 = (byte*) line_cursor#36 (byte*) line_cursor#37 (byte*) line_cursor#18 
Alias (byte*) char_cursor#123 = (byte*) char_cursor#61 (byte*) char_cursor#124 (byte*) char_cursor#62 
Alias (byte) test_16s::i#1 = (byte/word~) test_16s::$15 
Alias (signed word) rem16s#0 = (signed word) rem16s#20 
Alias (byte*) line_cursor#19 = (byte*) line_cursor#38 
Alias (byte*) char_cursor#125 = (byte*) char_cursor#63 
Alias (byte) rem8u#14 = (byte) rem8u#30 
Alias (word) rem16u#14 = (word) rem16u#30 
Alias (signed byte) rem8s#15 = (signed byte) rem8s#8 
Alias (signed word) rem16s#15 = (signed word) rem16s#8 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str::str#15 print_str::str#10
Not aliassing across scopes: char_cursor#140 char_cursor#116
Not aliassing across scopes: line_cursor#39 line_cursor#44
Not aliassing across scopes: char_cursor#127 char_cursor#122
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: char_cursor#129 char_cursor#138
Not aliassing across scopes: char_cursor#5 char_cursor#12
Not aliassing across scopes: char_cursor#6 char_cursor#17
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#131 char_cursor#137
Not aliassing across scopes: char_cursor#10 char_cursor#15
Not aliassing across scopes: char_cursor#72 char_cursor#17
Not aliassing across scopes: print_word::w#5 print_word::w#0
Not aliassing across scopes: char_cursor#132 char_cursor#128
Not aliassing across scopes: char_cursor#11 char_cursor#15
Not aliassing across scopes: char_cursor#12 char_cursor#15
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#133 char_cursor#130
Not aliassing across scopes: char_cursor#14 char_cursor#17
Not aliassing across scopes: char_cursor#15 char_cursor#17
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: char_cursor#80 char_cursor#133
Not aliassing across scopes: print_cls::sc#0 SCREEN#0
Not aliassing across scopes: line_cursor#23 SCREEN#0
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: rem8u#31 rem8u#32
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#1
Not aliassing across scopes: rem8u#1 rem8u#17
Not aliassing across scopes: div8u::return#0 divr8u::return#0
Not aliassing across scopes: divr8u::rem#9 divr8u::rem#0
Not aliassing across scopes: divr8u::dividend#4 divr8u::dividend#0
Not aliassing across scopes: divr8u::divisor#5 divr8u::divisor#0
Not aliassing across scopes: rem8u#17 divr8u::rem#10
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: rem16u#31 rem16u#32
Not aliassing across scopes: divr16u::dividend#0 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#0 divr16u::return#1
Not aliassing across scopes: rem16u#1 rem16u#17
Not aliassing across scopes: div16u::return#0 divr16u::return#0
Not aliassing across scopes: divr16u::rem#9 divr16u::rem#0
Not aliassing across scopes: divr16u::dividend#4 divr16u::dividend#0
Not aliassing across scopes: divr16u::divisor#5 divr16u::divisor#0
Not aliassing across scopes: rem16u#17 divr16u::rem#10
Not aliassing across scopes: div8s::dividend#1 div8s::dividend#0
Not aliassing across scopes: div8s::divisor#4 div8s::divisor#0
Not aliassing across scopes: rem8u#56 rem8u#39
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: rem8u#18 rem8u#1
Not aliassing across scopes: div8s::resultu#0 div8u::return#2
Not aliassing across scopes: div16s::dividend#1 div16s::dividend#0
Not aliassing across scopes: div16s::divisor#4 div16s::divisor#0
Not aliassing across scopes: rem16u#55 rem16u#38
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: rem16u#18 rem16u#1
Not aliassing across scopes: div16s::resultu#0 div16u::return#2
Not aliassing across scopes: line_cursor#40 SCREEN#0
Not aliassing across scopes: char_cursor#134 SCREEN#0
Not aliassing across scopes: rem8u#33 rem8u#0
Not aliassing across scopes: rem16u#33 rem16u#0
Not aliassing across scopes: rem8s#16 rem8s#0
Not aliassing across scopes: rem16s#16 rem16s#0
Not aliassing across scopes: line_cursor#24 line_cursor#23
Not aliassing across scopes: char_cursor#21 line_cursor#23
Not aliassing across scopes: rem8u#22 rem8u#10
Not aliassing across scopes: char_cursor#22 char_cursor#34
Not aliassing across scopes: line_cursor#25 line_cursor#11
Not aliassing across scopes: rem16u#22 rem16u#10
Not aliassing across scopes: char_cursor#23 char_cursor#105
Not aliassing across scopes: line_cursor#26 line_cursor#13
Not aliassing across scopes: rem8u#23 rem8u#12
Not aliassing across scopes: rem8s#10 rem8s#12
Not aliassing across scopes: char_cursor#24 char_cursor#114
Not aliassing across scopes: line_cursor#27 line_cursor#15
Not aliassing across scopes: rem16u#23 rem16u#12
Not aliassing across scopes: rem16s#10 rem16s#12
Not aliassing across scopes: char_cursor#25 char_cursor#123
Not aliassing across scopes: line_cursor#10 line_cursor#17
Not aliassing across scopes: rem8u#45 rem8u#33
Not aliassing across scopes: char_cursor#149 char_cursor#21
Not aliassing across scopes: line_cursor#82 line_cursor#24
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: rem8u#10 rem8u#1
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: char_cursor#27 char_cursor#15
Not aliassing across scopes: char_cursor#28 char_cursor#126
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: char_cursor#29 char_cursor#15
Not aliassing across scopes: char_cursor#30 char_cursor#126
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: char_cursor#31 char_cursor#15
Not aliassing across scopes: char_cursor#32 char_cursor#126
Not aliassing across scopes: print_byte::b#6 rem8u#10
Not aliassing across scopes: char_cursor#33 char_cursor#15
Not aliassing across scopes: line_cursor#11 line_cursor#1
Not aliassing across scopes: char_cursor#34 line_cursor#1
Not aliassing across scopes: rem16u#44 rem16u#33
Not aliassing across scopes: char_cursor#150 char_cursor#22
Not aliassing across scopes: line_cursor#83 line_cursor#25
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#0
Not aliassing across scopes: rem16u#10 rem16u#1
Not aliassing across scopes: test_16u::res#0 div16u::return#3
Not aliassing across scopes: print_word::w#1 test_16u::dividend#0
Not aliassing across scopes: char_cursor#36 char_cursor#12
Not aliassing across scopes: char_cursor#37 char_cursor#126
Not aliassing across scopes: print_word::w#2 test_16u::divisor#0
Not aliassing across scopes: char_cursor#100 char_cursor#12
Not aliassing across scopes: char_cursor#101 char_cursor#126
Not aliassing across scopes: print_word::w#3 test_16u::res#0
Not aliassing across scopes: char_cursor#102 char_cursor#12
Not aliassing across scopes: char_cursor#103 char_cursor#126
Not aliassing across scopes: print_word::w#4 rem16u#10
Not aliassing across scopes: char_cursor#104 char_cursor#12
Not aliassing across scopes: line_cursor#13 line_cursor#1
Not aliassing across scopes: char_cursor#105 line_cursor#1
Not aliassing across scopes: rem8u#48 rem8u#22
Not aliassing across scopes: rem8s#23 rem8s#16
Not aliassing across scopes: char_cursor#151 char_cursor#23
Not aliassing across scopes: line_cursor#84 line_cursor#26
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: rem8u#12 rem8u#21
Not aliassing across scopes: rem8s#12 rem8s#3
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: char_cursor#107 char_cursor#10
Not aliassing across scopes: char_cursor#108 char_cursor#126
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: char_cursor#109 char_cursor#10
Not aliassing across scopes: char_cursor#110 char_cursor#126
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: char_cursor#111 char_cursor#10
Not aliassing across scopes: char_cursor#112 char_cursor#126
Not aliassing across scopes: print_sbyte::b#4 rem8s#12
Not aliassing across scopes: char_cursor#113 char_cursor#10
Not aliassing across scopes: line_cursor#15 line_cursor#1
Not aliassing across scopes: char_cursor#114 line_cursor#1
Not aliassing across scopes: rem16u#47 rem16u#22
Not aliassing across scopes: rem16s#22 rem16s#16
Not aliassing across scopes: char_cursor#152 char_cursor#24
Not aliassing across scopes: line_cursor#85 line_cursor#27
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: rem16u#12 rem16u#21
Not aliassing across scopes: rem16s#12 rem16s#3
Not aliassing across scopes: test_16s::res#0 div16s::return#3
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#0
Not aliassing across scopes: char_cursor#116 char_cursor#5
Not aliassing across scopes: char_cursor#117 char_cursor#126
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#0
Not aliassing across scopes: char_cursor#118 char_cursor#5
Not aliassing across scopes: char_cursor#119 char_cursor#126
Not aliassing across scopes: print_sword::w#3 test_16s::res#0
Not aliassing across scopes: char_cursor#120 char_cursor#5
Not aliassing across scopes: char_cursor#121 char_cursor#126
Not aliassing across scopes: print_sword::w#4 rem16s#12
Not aliassing across scopes: char_cursor#122 char_cursor#5
Not aliassing across scopes: line_cursor#17 line_cursor#1
Not aliassing across scopes: char_cursor#123 line_cursor#1
Not aliassing across scopes: line_cursor#19 line_cursor#10
Not aliassing across scopes: char_cursor#125 char_cursor#25
Not aliassing across scopes: rem8u#14 rem8u#23
Not aliassing across scopes: rem16u#14 rem16u#23
Not aliassing across scopes: rem8s#15 rem8s#10
Not aliassing across scopes: rem16s#15 rem16s#10
Alias (byte) divr8u::dividend#2 = (byte) divr8u::dividend#3 
Alias (byte) divr8u::quotient#3 = (byte) divr8u::quotient#6 
Alias (byte) divr8u::divisor#1 = (byte) divr8u::divisor#3 (byte) divr8u::divisor#6 
Alias (byte) divr8u::i#2 = (byte) divr8u::i#3 (byte) divr8u::i#5 
Alias (byte) divr8u::dividend#1 = (byte) divr8u::dividend#5 
Alias (word) divr16u::dividend#2 = (word) divr16u::dividend#3 
Alias (word) divr16u::quotient#3 = (word) divr16u::quotient#6 
Alias (word) divr16u::divisor#1 = (word) divr16u::divisor#3 (word) divr16u::divisor#6 
Alias (byte) divr16u::i#2 = (byte) divr16u::i#3 (byte) divr16u::i#5 
Alias (word) divr16u::dividend#1 = (word) divr16u::dividend#5 
Alias (signed byte) div8s::divisor#1 = (signed byte) div8s::divisor#4 
Alias (byte) rem8u#32 = (byte) rem8u#42 (byte) rem8u#56 
Alias (byte) div8s::dividendu#3 = (byte) div8s::dividendu#4 
Alias (byte) rem8u#18 = (byte) rem8u#21 
Alias (signed word) div16s::divisor#1 = (signed word) div16s::divisor#4 
Alias (word) rem16u#32 = (word) rem16u#41 (word) rem16u#55 
Alias (word) div16s::dividendu#3 = (word) div16s::dividendu#4 
Alias (word) rem16u#18 = (word) rem16u#21 
Succesful SSA optimization Pass2AliasElimination
Not aliassing across scopes: print_str::str#15 print_str::str#10
Not aliassing across scopes: char_cursor#140 char_cursor#116
Not aliassing across scopes: line_cursor#39 line_cursor#44
Not aliassing across scopes: char_cursor#127 char_cursor#122
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: char_cursor#129 char_cursor#138
Not aliassing across scopes: char_cursor#5 char_cursor#12
Not aliassing across scopes: char_cursor#6 char_cursor#17
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#131 char_cursor#137
Not aliassing across scopes: char_cursor#10 char_cursor#15
Not aliassing across scopes: char_cursor#72 char_cursor#17
Not aliassing across scopes: print_word::w#5 print_word::w#0
Not aliassing across scopes: char_cursor#132 char_cursor#128
Not aliassing across scopes: char_cursor#11 char_cursor#15
Not aliassing across scopes: char_cursor#12 char_cursor#15
Not aliassing across scopes: print_byte::b#7 print_byte::b#0
Not aliassing across scopes: char_cursor#133 char_cursor#130
Not aliassing across scopes: char_cursor#14 char_cursor#17
Not aliassing across scopes: char_cursor#15 char_cursor#17
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: char_cursor#80 char_cursor#133
Not aliassing across scopes: print_cls::sc#0 SCREEN#0
Not aliassing across scopes: line_cursor#23 SCREEN#0
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: rem8u#31 rem8u#32
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#1
Not aliassing across scopes: rem8u#1 rem8u#17
Not aliassing across scopes: div8u::return#0 divr8u::return#0
Not aliassing across scopes: divr8u::rem#9 divr8u::rem#0
Not aliassing across scopes: divr8u::dividend#4 divr8u::dividend#0
Not aliassing across scopes: divr8u::divisor#5 divr8u::divisor#0
Not aliassing across scopes: rem8u#17 divr8u::rem#10
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: rem16u#31 rem16u#32
Not aliassing across scopes: divr16u::dividend#0 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#0 divr16u::return#1
Not aliassing across scopes: rem16u#1 rem16u#17
Not aliassing across scopes: div16u::return#0 divr16u::return#0
Not aliassing across scopes: divr16u::rem#9 divr16u::rem#0
Not aliassing across scopes: divr16u::dividend#4 divr16u::dividend#0
Not aliassing across scopes: divr16u::divisor#5 divr16u::divisor#0
Not aliassing across scopes: rem16u#17 divr16u::rem#10
Not aliassing across scopes: div8s::dividend#1 div8s::dividend#0
Not aliassing across scopes: div8s::divisor#1 div8s::divisor#0
Not aliassing across scopes: rem8u#32 rem8u#39
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: rem8u#18 rem8u#1
Not aliassing across scopes: div8s::resultu#0 div8u::return#2
Not aliassing across scopes: div16s::dividend#1 div16s::dividend#0
Not aliassing across scopes: div16s::divisor#1 div16s::divisor#0
Not aliassing across scopes: rem16u#32 rem16u#38
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: rem16u#18 rem16u#1
Not aliassing across scopes: div16s::resultu#0 div16u::return#2
Not aliassing across scopes: line_cursor#40 SCREEN#0
Not aliassing across scopes: char_cursor#134 SCREEN#0
Not aliassing across scopes: rem8u#33 rem8u#0
Not aliassing across scopes: rem16u#33 rem16u#0
Not aliassing across scopes: rem8s#16 rem8s#0
Not aliassing across scopes: rem16s#16 rem16s#0
Not aliassing across scopes: line_cursor#24 line_cursor#23
Not aliassing across scopes: char_cursor#21 line_cursor#23
Not aliassing across scopes: rem8u#22 rem8u#10
Not aliassing across scopes: char_cursor#22 char_cursor#34
Not aliassing across scopes: line_cursor#25 line_cursor#11
Not aliassing across scopes: rem16u#22 rem16u#10
Not aliassing across scopes: char_cursor#23 char_cursor#105
Not aliassing across scopes: line_cursor#26 line_cursor#13
Not aliassing across scopes: rem8u#23 rem8u#12
Not aliassing across scopes: rem8s#10 rem8s#12
Not aliassing across scopes: char_cursor#24 char_cursor#114
Not aliassing across scopes: line_cursor#27 line_cursor#15
Not aliassing across scopes: rem16u#23 rem16u#12
Not aliassing across scopes: rem16s#10 rem16s#12
Not aliassing across scopes: char_cursor#25 char_cursor#123
Not aliassing across scopes: line_cursor#10 line_cursor#17
Not aliassing across scopes: rem8u#45 rem8u#33
Not aliassing across scopes: char_cursor#149 char_cursor#21
Not aliassing across scopes: line_cursor#82 line_cursor#24
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: rem8u#10 rem8u#1
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: char_cursor#27 char_cursor#15
Not aliassing across scopes: char_cursor#28 char_cursor#126
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: char_cursor#29 char_cursor#15
Not aliassing across scopes: char_cursor#30 char_cursor#126
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: char_cursor#31 char_cursor#15
Not aliassing across scopes: char_cursor#32 char_cursor#126
Not aliassing across scopes: print_byte::b#6 rem8u#10
Not aliassing across scopes: char_cursor#33 char_cursor#15
Not aliassing across scopes: line_cursor#11 line_cursor#1
Not aliassing across scopes: char_cursor#34 line_cursor#1
Not aliassing across scopes: rem16u#44 rem16u#33
Not aliassing across scopes: char_cursor#150 char_cursor#22
Not aliassing across scopes: line_cursor#83 line_cursor#25
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#0
Not aliassing across scopes: rem16u#10 rem16u#1
Not aliassing across scopes: test_16u::res#0 div16u::return#3
Not aliassing across scopes: print_word::w#1 test_16u::dividend#0
Not aliassing across scopes: char_cursor#36 char_cursor#12
Not aliassing across scopes: char_cursor#37 char_cursor#126
Not aliassing across scopes: print_word::w#2 test_16u::divisor#0
Not aliassing across scopes: char_cursor#100 char_cursor#12
Not aliassing across scopes: char_cursor#101 char_cursor#126
Not aliassing across scopes: print_word::w#3 test_16u::res#0
Not aliassing across scopes: char_cursor#102 char_cursor#12
Not aliassing across scopes: char_cursor#103 char_cursor#126
Not aliassing across scopes: print_word::w#4 rem16u#10
Not aliassing across scopes: char_cursor#104 char_cursor#12
Not aliassing across scopes: line_cursor#13 line_cursor#1
Not aliassing across scopes: char_cursor#105 line_cursor#1
Not aliassing across scopes: rem8u#48 rem8u#22
Not aliassing across scopes: rem8s#23 rem8s#16
Not aliassing across scopes: char_cursor#151 char_cursor#23
Not aliassing across scopes: line_cursor#84 line_cursor#26
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: rem8u#12 rem8u#18
Not aliassing across scopes: rem8s#12 rem8s#3
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: char_cursor#107 char_cursor#10
Not aliassing across scopes: char_cursor#108 char_cursor#126
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: char_cursor#109 char_cursor#10
Not aliassing across scopes: char_cursor#110 char_cursor#126
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: char_cursor#111 char_cursor#10
Not aliassing across scopes: char_cursor#112 char_cursor#126
Not aliassing across scopes: print_sbyte::b#4 rem8s#12
Not aliassing across scopes: char_cursor#113 char_cursor#10
Not aliassing across scopes: line_cursor#15 line_cursor#1
Not aliassing across scopes: char_cursor#114 line_cursor#1
Not aliassing across scopes: rem16u#47 rem16u#22
Not aliassing across scopes: rem16s#22 rem16s#16
Not aliassing across scopes: char_cursor#152 char_cursor#24
Not aliassing across scopes: line_cursor#85 line_cursor#27
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: rem16u#12 rem16u#18
Not aliassing across scopes: rem16s#12 rem16s#3
Not aliassing across scopes: test_16s::res#0 div16s::return#3
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#0
Not aliassing across scopes: char_cursor#116 char_cursor#5
Not aliassing across scopes: char_cursor#117 char_cursor#126
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#0
Not aliassing across scopes: char_cursor#118 char_cursor#5
Not aliassing across scopes: char_cursor#119 char_cursor#126
Not aliassing across scopes: print_sword::w#3 test_16s::res#0
Not aliassing across scopes: char_cursor#120 char_cursor#5
Not aliassing across scopes: char_cursor#121 char_cursor#126
Not aliassing across scopes: print_sword::w#4 rem16s#12
Not aliassing across scopes: char_cursor#122 char_cursor#5
Not aliassing across scopes: line_cursor#17 line_cursor#1
Not aliassing across scopes: char_cursor#123 line_cursor#1
Not aliassing across scopes: line_cursor#19 line_cursor#10
Not aliassing across scopes: char_cursor#125 char_cursor#25
Not aliassing across scopes: rem8u#14 rem8u#23
Not aliassing across scopes: rem16u#14 rem16u#23
Not aliassing across scopes: rem8s#15 rem8s#10
Not aliassing across scopes: rem16s#15 rem16s#10
Self Phi Eliminated (byte*) char_cursor#66
Self Phi Eliminated (byte) divr8u::divisor#1
Self Phi Eliminated (word) divr16u::divisor#1
Succesful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte*) char_cursor#66 (byte*) char_cursor#127
Redundant Phi (byte*) char_cursor#5 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#6 (byte*) char_cursor#17
Redundant Phi (byte*) char_cursor#10 (byte*) char_cursor#15
Redundant Phi (byte*) char_cursor#72 (byte*) char_cursor#17
Redundant Phi (byte*) char_cursor#11 (byte*) char_cursor#15
Redundant Phi (byte*) char_cursor#12 (byte*) char_cursor#15
Redundant Phi (byte*) char_cursor#14 (byte*) char_cursor#17
Redundant Phi (byte*) char_cursor#15 (byte*) char_cursor#17
Redundant Phi (byte) rem8u#1 (byte) rem8u#17
Redundant Phi (byte) divr8u::rem#9 (byte) divr8u::rem#0
Redundant Phi (byte) divr8u::dividend#4 (byte) divr8u::dividend#0
Redundant Phi (byte) divr8u::divisor#5 (byte) divr8u::divisor#0
Redundant Phi (byte) divr8u::divisor#1 (byte) divr8u::divisor#5
Redundant Phi (word) rem16u#1 (word) rem16u#17
Redundant Phi (word) divr16u::rem#9 (word) divr16u::rem#0
Redundant Phi (word) divr16u::dividend#4 (word) divr16u::dividend#0
Redundant Phi (word) divr16u::divisor#5 (word) divr16u::divisor#0
Redundant Phi (word) divr16u::divisor#1 (word) divr16u::divisor#5
Redundant Phi (signed byte) div8s::dividend#1 (signed byte) div8s::dividend#0
Redundant Phi (signed byte) div8s::divisor#1 (signed byte) div8s::divisor#0
Redundant Phi (byte) rem8u#32 (byte) rem8u#39
Redundant Phi (byte) rem8u#18 (byte) rem8u#1
Redundant Phi (signed word) div16s::dividend#1 (signed word) div16s::dividend#0
Redundant Phi (signed word) div16s::divisor#1 (signed word) div16s::divisor#0
Redundant Phi (word) rem16u#32 (word) rem16u#38
Redundant Phi (word) rem16u#18 (word) rem16u#1
Redundant Phi (byte*) line_cursor#40 (byte*) SCREEN#0
Redundant Phi (byte*) char_cursor#134 (byte*) SCREEN#0
Redundant Phi (byte) rem8u#33 (byte) rem8u#0
Redundant Phi (word) rem16u#33 (word) rem16u#0
Redundant Phi (signed byte) rem8s#16 (signed byte) rem8s#0
Redundant Phi (signed word) rem16s#16 (signed word) rem16s#0
Redundant Phi (byte*) line_cursor#24 (byte*) line_cursor#23
Redundant Phi (byte*) char_cursor#21 (byte*) line_cursor#23
Redundant Phi (byte) rem8u#22 (byte) rem8u#10
Redundant Phi (byte*) char_cursor#22 (byte*) char_cursor#34
Redundant Phi (byte*) line_cursor#25 (byte*) line_cursor#11
Redundant Phi (word) rem16u#22 (word) rem16u#10
Redundant Phi (byte*) char_cursor#23 (byte*) char_cursor#105
Redundant Phi (byte*) line_cursor#26 (byte*) line_cursor#13
Redundant Phi (byte) rem8u#23 (byte) rem8u#12
Redundant Phi (signed byte) rem8s#10 (signed byte) rem8s#12
Redundant Phi (byte*) char_cursor#24 (byte*) char_cursor#114
Redundant Phi (byte*) line_cursor#27 (byte*) line_cursor#15
Redundant Phi (word) rem16u#23 (word) rem16u#12
Redundant Phi (signed word) rem16s#10 (signed word) rem16s#12
Redundant Phi (byte*) char_cursor#25 (byte*) char_cursor#123
Redundant Phi (byte*) line_cursor#10 (byte*) line_cursor#17
Redundant Phi (byte) rem8u#45 (byte) rem8u#33
Redundant Phi (byte*) char_cursor#149 (byte*) char_cursor#21
Redundant Phi (byte*) line_cursor#82 (byte*) line_cursor#24
Redundant Phi (byte) rem8u#10 (byte) rem8u#1
Redundant Phi (byte*) char_cursor#27 (byte*) char_cursor#15
Redundant Phi (byte*) char_cursor#28 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#29 (byte*) char_cursor#15
Redundant Phi (byte*) char_cursor#30 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#31 (byte*) char_cursor#15
Redundant Phi (byte*) char_cursor#32 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#33 (byte*) char_cursor#15
Redundant Phi (byte*) line_cursor#11 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#34 (byte*) line_cursor#1
Redundant Phi (word) rem16u#44 (word) rem16u#33
Redundant Phi (byte*) char_cursor#150 (byte*) char_cursor#22
Redundant Phi (byte*) line_cursor#83 (byte*) line_cursor#25
Redundant Phi (word) rem16u#10 (word) rem16u#1
Redundant Phi (byte*) char_cursor#36 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#37 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#100 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#101 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#102 (byte*) char_cursor#12
Redundant Phi (byte*) char_cursor#103 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#104 (byte*) char_cursor#12
Redundant Phi (byte*) line_cursor#13 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#105 (byte*) line_cursor#1
Redundant Phi (byte) rem8u#48 (byte) rem8u#22
Redundant Phi (signed byte) rem8s#23 (signed byte) rem8s#16
Redundant Phi (byte*) char_cursor#151 (byte*) char_cursor#23
Redundant Phi (byte*) line_cursor#84 (byte*) line_cursor#26
Redundant Phi (byte) rem8u#12 (byte) rem8u#18
Redundant Phi (signed byte) rem8s#12 (signed byte) rem8s#3
Redundant Phi (byte*) char_cursor#107 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#108 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#109 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#110 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#111 (byte*) char_cursor#10
Redundant Phi (byte*) char_cursor#112 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#113 (byte*) char_cursor#10
Redundant Phi (byte*) line_cursor#15 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#114 (byte*) line_cursor#1
Redundant Phi (word) rem16u#47 (word) rem16u#22
Redundant Phi (signed word) rem16s#22 (signed word) rem16s#16
Redundant Phi (byte*) char_cursor#152 (byte*) char_cursor#24
Redundant Phi (byte*) line_cursor#85 (byte*) line_cursor#27
Redundant Phi (word) rem16u#12 (word) rem16u#18
Redundant Phi (signed word) rem16s#12 (signed word) rem16s#3
Redundant Phi (byte*) char_cursor#116 (byte*) char_cursor#5
Redundant Phi (byte*) char_cursor#117 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#118 (byte*) char_cursor#5
Redundant Phi (byte*) char_cursor#119 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#120 (byte*) char_cursor#5
Redundant Phi (byte*) char_cursor#121 (byte*) char_cursor#126
Redundant Phi (byte*) char_cursor#122 (byte*) char_cursor#5
Redundant Phi (byte*) line_cursor#17 (byte*) line_cursor#1
Redundant Phi (byte*) char_cursor#123 (byte*) line_cursor#1
Redundant Phi (byte*) line_cursor#19 (byte*) line_cursor#10
Redundant Phi (byte*) char_cursor#125 (byte*) char_cursor#25
Redundant Phi (byte) rem8u#14 (byte) rem8u#23
Redundant Phi (word) rem16u#14 (word) rem16u#23
Redundant Phi (signed byte) rem8s#15 (signed byte) rem8s#10
Redundant Phi (signed word) rem16s#15 (signed word) rem16s#10
Succesful SSA optimization Pass2RedundantPhiElimination
Redundant Phi (byte*) char_cursor#140 (byte*) char_cursor#17
Redundant Phi (byte*) char_cursor#127 (byte*) char_cursor#17
Redundant Phi (byte*) char_cursor#136 (byte*) line_cursor#1
Redundant Phi (byte*) line_cursor#42 (byte*) line_cursor#1
Redundant Phi (byte) rem8u#39 (byte) rem8u#17
Redundant Phi (byte*) char_cursor#137 (byte*) line_cursor#1
Redundant Phi (byte*) line_cursor#43 (byte*) line_cursor#1
Redundant Phi (word) rem16u#38 (word) rem16u#17
Redundant Phi (byte*) char_cursor#138 (byte*) line_cursor#1
Redundant Phi (byte*) line_cursor#44 (byte*) line_cursor#1
Succesful SSA optimization Pass2RedundantPhiElimination
Simple Condition (boolean~) print_str::$0 if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2
Simple Condition (boolean~) print_ln::$1 if((byte*) line_cursor#1<(byte*) char_cursor#17) goto print_ln::@1
Simple Condition (boolean~) print_sword::$1 if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1
Simple Condition (boolean~) print_sbyte::$1 if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1
Simple Condition (boolean~) print_cls::$1 if((byte*) print_cls::sc#1!=(byte*~) print_cls::$0) goto print_cls::@1
Simple Condition (boolean~) divr8u::$3 if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2
Simple Condition (boolean~) divr8u::$7 if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3
Simple Condition (boolean~) divr8u::$9 if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1
Simple Condition (boolean~) divr16u::$4 if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
Simple Condition (boolean~) divr16u::$8 if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
Simple Condition (boolean~) divr16u::$10 if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1
Simple Condition (boolean~) div8s::$1 if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@1
Simple Condition (boolean~) div8s::$6 if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@3
Simple Condition (boolean~) div8s::$13 if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5
Simple Condition (boolean~) div16s::$1 if((signed word) div16s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@1
Simple Condition (boolean~) div16s::$6 if((signed word) div16s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@3
Simple Condition (boolean~) div16s::$13 if((byte) div16s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@5
Simple Condition (boolean~) test_8u::$9 if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@1
Simple Condition (boolean~) test_16u::$10 if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1
Simple Condition (boolean~) test_8s::$13 if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1
Simple Condition (boolean~) test_16s::$16 if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) SCREEN#0 = ((byte*))1024
Constant (const byte) print_char::ch#0 = '-'
Constant (const byte) print_char::ch#1 = '-'
Constant (const string) print_byte::hextab#0 = print_byte::$4
Constant (const byte) rem8u#0 = 0
Constant (const byte) divr8u::rem#0 = 0
Constant (const byte) divr8u::quotient#0 = 0
Constant (const byte) divr8u::i#0 = 0
Constant (const word) rem16u#0 = 0
Constant (const word) divr16u::rem#0 = 0
Constant (const word) divr16u::quotient#0 = 0
Constant (const byte) divr16u::i#0 = 0
Constant (const signed byte) rem8s#0 = 0
Constant (const byte) div8s::neg#0 = 0
Constant (const byte) div8s::dividendu#0 = 0
Constant (const byte) div8s::neg#1 = 1
Constant (const byte) div8s::divisoru#0 = 0
Constant (const signed word) rem16s#0 = 0
Constant (const byte) div16s::neg#0 = 0
Constant (const word) div16s::dividendu#0 = 0
Constant (const byte) div16s::neg#1 = 1
Constant (const word) div16s::divisoru#0 = 0
Constant (const byte[]) test_8u::dividends#0 = { 255, 255, 255, 255, 255, 255 }
Constant (const byte[]) test_8u::divisors#0 = { 5, 7, 11, 13, 17, 19 }
Constant (const byte) test_8u::i#0 = 0
Constant (const string) print_str::str#1 = test_8u::str
Constant (const string) print_str::str#2 = test_8u::str1
Constant (const string) print_str::str#3 = test_8u::str2
Constant (const word[]) test_16u::dividends#0 = { 65535, 65535, 65535, 65535, 65535, 65535 }
Constant (const word[]) test_16u::divisors#0 = { 5, 7, 11, 13, 17, 19 }
Constant (const byte) test_16u::i#0 = 0
Constant (const string) print_str::str#4 = test_16u::str
Constant (const string) print_str::str#5 = test_16u::str1
Constant (const string) print_str::str#6 = test_16u::str2
Constant (const signed byte/signed word/signed dword) test_8s::$0 = -127
Constant (const signed byte/signed word/signed dword) test_8s::$1 = -127
Constant (const signed byte/signed word/signed dword) test_8s::$2 = -11
Constant (const signed byte/signed word/signed dword) test_8s::$3 = -13
Constant (const byte) test_8s::i#0 = 0
Constant (const string) print_str::str#7 = test_8s::str
Constant (const string) print_str::str#8 = test_8s::str1
Constant (const string) print_str::str#9 = test_8s::str2
Constant (const signed word/signed dword) test_16s::$0 = -32767
Constant (const signed word/signed dword) test_16s::$1 = -32767
Constant (const signed word/signed dword) test_16s::$2 = -32767
Constant (const signed byte/signed word/signed dword) test_16s::$3 = -7
Constant (const signed byte/signed word/signed dword) test_16s::$4 = -13
Constant (const signed byte/signed word/signed dword) test_16s::$5 = -17
Constant (const byte) test_16s::i#0 = 0
Constant (const string) print_str::str#10 = test_16s::str
Constant (const string) print_str::str#11 = test_16s::str1
Constant (const string) print_str::str#12 = test_16s::str2
Succesful SSA optimization Pass2ConstantIdentification
Constant (const byte*) print_cls::sc#0 = SCREEN#0
Constant (const byte*) print_cls::$0 = SCREEN#0+1000
Constant (const byte*) line_cursor#23 = SCREEN#0
Constant (const signed byte[]) test_8s::dividends#0 = { 127, test_8s::$0, test_8s::$1, 127, 127, 127 }
Constant (const signed byte[]) test_8s::divisors#0 = { 5, 7, test_8s::$2, test_8s::$3, 17, 19 }
Constant (const signed word[]) test_16s::dividends#0 = { 32767, 32767, test_16s::$0, test_16s::$1, 32767, test_16s::$2 }
Constant (const signed word[]) test_16s::divisors#0 = { 5, test_16s::$3, 11, test_16s::$4, test_16s::$5, 19 }
Succesful SSA optimization Pass2ConstantIdentification
Eliminating unused constant (const byte) div8s::dividendu#0
Eliminating unused constant (const byte) div8s::divisoru#0
Eliminating unused constant (const word) div16s::dividendu#0
Eliminating unused constant (const word) div16s::divisoru#0
Succesful SSA optimization PassNEliminateUnusedVars
Eliminating Noop Cast (word) print_word::w#0 ← ((word)) (signed word) print_sword::w#6
Eliminating Noop Cast (byte) print_byte::b#0 ← ((byte)) (signed byte) print_sbyte::b#6
Eliminating Noop Cast (byte) div8s::dividendu#1 ← ((byte)) (signed byte) div8s::dividend#0
Eliminating Noop Cast (byte) div8s::dividendu#2 ← ((byte)) (signed byte~) div8s::$2
Eliminating Noop Cast (byte) div8s::divisoru#1 ← ((byte)) (signed byte) div8s::divisor#0
Eliminating Noop Cast (byte) div8s::divisoru#2 ← ((byte)) (signed byte~) div8s::$7
Eliminating Noop Cast (signed byte~) div8s::$16 ← ((signed byte)) (byte) rem8u#17
Eliminating Noop Cast (signed byte~) div8s::$18 ← ((signed byte)) (byte) div8s::resultu#0
Eliminating Noop Cast (signed byte) rem8s#2 ← ((signed byte)) (byte) rem8u#17
Eliminating Noop Cast (signed byte) div8s::return#1 ← ((signed byte)) (byte) div8s::resultu#0
Eliminating Noop Cast (word) div16s::dividendu#1 ← ((word)) (signed word) div16s::dividend#0
Eliminating Noop Cast (word) div16s::dividendu#2 ← ((word)) (signed word~) div16s::$2
Eliminating Noop Cast (word) div16s::divisoru#1 ← ((word)) (signed word) div16s::divisor#0
Eliminating Noop Cast (word) div16s::divisoru#2 ← ((word)) (signed word~) div16s::$7
Eliminating Noop Cast (signed word~) div16s::$16 ← ((signed word)) (word) rem16u#17
Eliminating Noop Cast (signed word~) div16s::$18 ← ((signed word)) (word) div16s::resultu#0
Eliminating Noop Cast (signed word) rem16s#2 ← ((signed word)) (word) rem16u#17
Eliminating Noop Cast (signed word) div16s::return#1 ← ((signed word)) (word) div16s::resultu#0
Succesful SSA optimization Pass2NopCastElimination
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_sword::@3
Culled Empty Block (label) print_sbyte::@3
Culled Empty Block (label) print_word::@2
Culled Empty Block (label) print_byte::@2
Culled Empty Block (label) print_cls::@2
Culled Empty Block (label) @10
Culled Empty Block (label) @12
Culled Empty Block (label) @14
Culled Empty Block (label) div8s::@1
Culled Empty Block (label) div8s::@3
Culled Empty Block (label) div8s::@11
Culled Empty Block (label) @15
Culled Empty Block (label) div16s::@1
Culled Empty Block (label) div16s::@3
Culled Empty Block (label) div16s::@11
Culled Empty Block (label) main::@5
Culled Empty Block (label) @22
Succesful SSA optimization Pass2CullEmptyBlocks
Not aliassing across scopes: char_cursor#126 char_cursor#17
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: char_cursor#129 line_cursor#1
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#131 line_cursor#1
Not aliassing across scopes: char_cursor#132 char_cursor#128
Not aliassing across scopes: char_cursor#133 char_cursor#130
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: char_cursor#80 char_cursor#133
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: rem8u#31 rem8u#17
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#1
Not aliassing across scopes: div8u::return#0 divr8u::return#0
Not aliassing across scopes: divr8u::dividend#2 divr8u::dividend#0
Not aliassing across scopes: rem8u#17 divr8u::rem#10
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: rem16u#31 rem16u#17
Not aliassing across scopes: divr16u::dividend#0 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#0 divr16u::return#1
Not aliassing across scopes: div16u::return#0 divr16u::return#0
Not aliassing across scopes: divr16u::dividend#2 divr16u::dividend#0
Not aliassing across scopes: rem16u#17 divr16u::rem#10
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: div8s::resultu#0 div8u::return#2
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: div16s::resultu#0 div16u::return#2
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: print_byte::b#6 rem8u#17
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#0
Not aliassing across scopes: test_16u::res#0 div16u::return#3
Not aliassing across scopes: print_word::w#1 test_16u::dividend#0
Not aliassing across scopes: print_word::w#2 test_16u::divisor#0
Not aliassing across scopes: print_word::w#3 test_16u::res#0
Not aliassing across scopes: print_word::w#4 rem16u#17
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: print_sbyte::b#4 rem8s#3
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: test_16s::res#0 div16s::return#3
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#0
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#0
Not aliassing across scopes: print_sword::w#3 test_16s::res#0
Not aliassing across scopes: print_sword::w#4 rem16s#3
Not aliassing across scopes: char_cursor#126 char_cursor#17
Not aliassing across scopes: print_sword::w#5 print_sword::w#1
Not aliassing across scopes: char_cursor#129 line_cursor#1
Not aliassing across scopes: print_sbyte::b#5 print_sbyte::b#1
Not aliassing across scopes: char_cursor#131 line_cursor#1
Not aliassing across scopes: char_cursor#132 char_cursor#128
Not aliassing across scopes: char_cursor#133 char_cursor#130
Not aliassing across scopes: print_char::ch#4 print_char::ch#2
Not aliassing across scopes: char_cursor#80 char_cursor#133
Not aliassing across scopes: div8u::dividend#2 div8u::dividend#0
Not aliassing across scopes: div8u::divisor#2 div8u::divisor#0
Not aliassing across scopes: rem8u#31 rem8u#17
Not aliassing across scopes: divr8u::dividend#0 div8u::dividend#2
Not aliassing across scopes: divr8u::divisor#0 div8u::divisor#2
Not aliassing across scopes: divr8u::return#0 divr8u::return#1
Not aliassing across scopes: div8u::return#0 divr8u::return#0
Not aliassing across scopes: divr8u::dividend#2 divr8u::dividend#0
Not aliassing across scopes: rem8u#17 divr8u::rem#10
Not aliassing across scopes: div16u::dividend#2 div16u::dividend#0
Not aliassing across scopes: div16u::divisor#2 div16u::divisor#0
Not aliassing across scopes: rem16u#31 rem16u#17
Not aliassing across scopes: divr16u::dividend#0 div16u::dividend#2
Not aliassing across scopes: divr16u::divisor#0 div16u::divisor#2
Not aliassing across scopes: divr16u::return#0 divr16u::return#1
Not aliassing across scopes: div16u::return#0 divr16u::return#0
Not aliassing across scopes: divr16u::dividend#2 divr16u::dividend#0
Not aliassing across scopes: rem16u#17 divr16u::rem#10
Not aliassing across scopes: div8u::dividend#0 div8s::dividendu#3
Not aliassing across scopes: div8u::divisor#0 div8s::divisoru#3
Not aliassing across scopes: div8u::return#2 div8u::return#0
Not aliassing across scopes: div8s::resultu#0 div8u::return#2
Not aliassing across scopes: div16u::dividend#0 div16s::dividendu#3
Not aliassing across scopes: div16u::divisor#0 div16s::divisoru#3
Not aliassing across scopes: div16u::return#2 div16u::return#0
Not aliassing across scopes: div16s::resultu#0 div16u::return#2
Not aliassing across scopes: div8u::dividend#1 test_8u::dividend#0
Not aliassing across scopes: div8u::divisor#1 test_8u::divisor#0
Not aliassing across scopes: div8u::return#3 div8u::return#0
Not aliassing across scopes: test_8u::res#0 div8u::return#3
Not aliassing across scopes: print_byte::b#3 test_8u::dividend#0
Not aliassing across scopes: print_byte::b#4 test_8u::divisor#0
Not aliassing across scopes: print_byte::b#5 test_8u::res#0
Not aliassing across scopes: print_byte::b#6 rem8u#17
Not aliassing across scopes: div16u::dividend#1 test_16u::dividend#0
Not aliassing across scopes: div16u::divisor#1 test_16u::divisor#0
Not aliassing across scopes: div16u::return#3 div16u::return#0
Not aliassing across scopes: test_16u::res#0 div16u::return#3
Not aliassing across scopes: print_word::w#1 test_16u::dividend#0
Not aliassing across scopes: print_word::w#2 test_16u::divisor#0
Not aliassing across scopes: print_word::w#3 test_16u::res#0
Not aliassing across scopes: print_word::w#4 rem16u#17
Not aliassing across scopes: div8s::dividend#0 test_8s::dividend#0
Not aliassing across scopes: div8s::divisor#0 test_8s::divisor#0
Not aliassing across scopes: div8s::return#3 div8s::return#2
Not aliassing across scopes: test_8s::res#0 div8s::return#3
Not aliassing across scopes: print_sbyte::b#1 test_8s::dividend#0
Not aliassing across scopes: print_sbyte::b#2 test_8s::divisor#0
Not aliassing across scopes: print_sbyte::b#3 test_8s::res#0
Not aliassing across scopes: print_sbyte::b#4 rem8s#3
Not aliassing across scopes: div16s::dividend#0 test_16s::dividend#0
Not aliassing across scopes: div16s::divisor#0 test_16s::divisor#0
Not aliassing across scopes: div16s::return#3 div16s::return#2
Not aliassing across scopes: test_16s::res#0 div16s::return#3
Not aliassing across scopes: print_sword::w#1 test_16s::dividend#0
Not aliassing across scopes: print_sword::w#2 test_16s::divisor#0
Not aliassing across scopes: print_sword::w#3 test_16s::res#0
Not aliassing across scopes: print_sword::w#4 rem16s#3
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#1
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#2
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#3
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#4
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#5
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#6
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#7
Inlining constant with var siblings (const string) print_str::str#8
Inlining constant with var siblings (const string) print_str::str#8
Inlining constant with var siblings (const string) print_str::str#8
Inlining constant with var siblings (const string) print_str::str#9
Inlining constant with var siblings (const string) print_str::str#9
Inlining constant with var siblings (const string) print_str::str#9
Inlining constant with var siblings (const string) print_str::str#10
Inlining constant with var siblings (const string) print_str::str#10
Inlining constant with var siblings (const string) print_str::str#10
Inlining constant with var siblings (const string) print_str::str#11
Inlining constant with var siblings (const string) print_str::str#11
Inlining constant with var siblings (const string) print_str::str#11
Inlining constant with var siblings (const string) print_str::str#12
Inlining constant with var siblings (const string) print_str::str#12
Inlining constant with var siblings (const string) print_str::str#12
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#0
Inlining constant with different constant siblings (const byte) print_char::ch#0
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte) print_char::ch#1
Inlining constant with different constant siblings (const byte) print_char::ch#1
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte*) print_cls::sc#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::rem#0
Inlining constant with var siblings (const byte) divr8u::quotient#0
Inlining constant with var siblings (const byte) divr8u::quotient#0
Inlining constant with var siblings (const byte) divr8u::quotient#0
Inlining constant with var siblings (const byte) divr8u::i#0
Inlining constant with var siblings (const byte) divr8u::i#0
Inlining constant with var siblings (const word) divr16u::rem#0
Inlining constant with var siblings (const word) divr16u::rem#0
Inlining constant with var siblings (const word) divr16u::rem#0
Inlining constant with var siblings (const word) divr16u::rem#0
Inlining constant with var siblings (const word) divr16u::rem#0
Inlining constant with var siblings (const word) divr16u::rem#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const word) divr16u::quotient#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const byte) divr16u::i#0
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#0
Inlining constant with different constant siblings (const byte) div8s::neg#0
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) div8s::neg#1
Inlining constant with different constant siblings (const byte) div8s::neg#1
Inlining constant with var siblings (const byte) div16s::neg#0
Inlining constant with var siblings (const byte) div16s::neg#0
Inlining constant with var siblings (const byte) div16s::neg#0
Inlining constant with different constant siblings (const byte) div16s::neg#0
Inlining constant with var siblings (const byte) div16s::neg#1
Inlining constant with var siblings (const byte) div16s::neg#1
Inlining constant with var siblings (const byte) div16s::neg#1
Inlining constant with different constant siblings (const byte) div16s::neg#1
Inlining constant with var siblings (const byte) test_8u::i#0
Inlining constant with var siblings (const byte) test_8u::i#0
Inlining constant with var siblings (const byte) test_16u::i#0
Inlining constant with var siblings (const byte) test_16u::i#0
Inlining constant with var siblings (const byte) test_8s::i#0
Inlining constant with var siblings (const byte) test_8s::i#0
Inlining constant with var siblings (const byte) test_16s::i#0
Inlining constant with var siblings (const byte) test_16s::i#0
Inlining constant with var siblings (const byte) rem8u#0
Inlining constant with var siblings (const byte) rem8u#0
Inlining constant with var siblings (const byte) rem8u#0
Inlining constant with var siblings (const word) rem16u#0
Inlining constant with var siblings (const word) rem16u#0
Inlining constant with var siblings (const word) rem16u#0
Inlining constant with var siblings (const signed byte) rem8s#0
Inlining constant with var siblings (const signed byte) rem8s#0
Inlining constant with var siblings (const signed byte) rem8s#0
Inlining constant with var siblings (const signed word) rem16s#0
Inlining constant with var siblings (const signed word) rem16s#0
Inlining constant with var siblings (const signed word) rem16s#0
Inlining constant with var siblings (const byte*) line_cursor#23
Inlining constant with var siblings (const byte*) line_cursor#23
Inlining constant with var siblings (const byte*) line_cursor#23
Inlining constant with var siblings (const byte*) line_cursor#23
Constant inlined divr16u::rem#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::$0 = (const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000
Constant inlined divr16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#12 = (const string) test_16s::str2
Constant inlined print_str::str#11 = (const string) test_16s::str1
Constant inlined print_str::str#10 = (const string) test_16s::str
Constant inlined divr8u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_16u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined line_cursor#23 = (const byte*) SCREEN#0
Constant inlined divr16u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_8u::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_8s::$3 = -(byte/signed byte/word/signed word/dword/signed dword) 13
Constant inlined test_8s::$2 = -(byte/signed byte/word/signed word/dword/signed dword) 11
Constant inlined test_8s::$1 = -(byte/signed byte/word/signed word/dword/signed dword) 127
Constant inlined div16s::neg#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined test_8s::$0 = -(byte/signed byte/word/signed word/dword/signed dword) 127
Constant inlined div16s::neg#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_16s::$3 = -(byte/signed byte/word/signed word/dword/signed dword) 7
Constant inlined test_16s::$4 = -(byte/signed byte/word/signed word/dword/signed dword) 13
Constant inlined test_16s::$5 = -(byte/signed byte/word/signed word/dword/signed dword) 17
Constant inlined test_16s::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rem16s#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined rem16u#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_cls::sc#0 = (const byte*) SCREEN#0
Constant inlined divr8u::rem#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined divr8u::quotient#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#9 = (const string) test_8s::str2
Constant inlined print_char::ch#1 = (byte) '-'
Constant inlined print_char::ch#0 = (byte) '-'
Constant inlined print_str::str#4 = (const string) test_16u::str
Constant inlined print_str::str#3 = (const string) test_8u::str2
Constant inlined div8s::neg#1 = (byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined rem8s#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#2 = (const string) test_8u::str1
Constant inlined div8s::neg#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined print_str::str#1 = (const string) test_8u::str
Constant inlined print_byte::$4 = (const string) print_byte::hextab#0
Constant inlined print_str::str#8 = (const string) test_8s::str1
Constant inlined test_16s::$0 = -(word/signed word/dword/signed dword) 32767
Constant inlined print_str::str#7 = (const string) test_8s::str
Constant inlined test_16s::$1 = -(word/signed word/dword/signed dword) 32767
Constant inlined print_str::str#6 = (const string) test_16u::str2
Constant inlined test_8s::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined test_16s::$2 = -(word/signed word/dword/signed dword) 32767
Constant inlined print_str::str#5 = (const string) test_16u::str1
Constant inlined rem8u#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @21 @end main main::@1 main::@2 main::@3 main::@4 main::@return test_16s test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 test_16s::@9 test_16s::@10 test_16s::@11 test_16s::@return print_ln print_ln::@1 print_ln::@return print_sword print_sword::@2 print_sword::@4 print_sword::@1 print_sword::@return print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div16s div16s::@7 div16s::@2 div16s::@9 div16s::@4 div16s::@15 div16s::@return div16s::@5 div16u div16u::@2 div16u::@return divr16u divr16u::@1 divr16u::@4 divr16u::@2 divr16u::@5 divr16u::@3 divr16u::@6 divr16u::@return test_8s test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 test_8s::@8 test_8s::@9 test_8s::@10 test_8s::@11 test_8s::@return print_sbyte print_sbyte::@2 print_sbyte::@4 print_sbyte::@1 print_sbyte::@return div8s div8s::@7 div8s::@2 div8s::@9 div8s::@4 div8s::@15 div8s::@return div8s::@5 div8u div8u::@2 div8u::@return divr8u divr8u::@1 divr8u::@4 divr8u::@2 divr8u::@5 divr8u::@3 divr8u::@6 divr8u::@return test_16u test_16u::@1 test_16u::@3 test_16u::@4 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@9 test_16u::@10 test_16u::@11 test_16u::@return test_8u test_8u::@1 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@return print_cls print_cls::@1 print_cls::@return 
Added new block during phi lifting test_16s::@12(between test_16s::@11 and test_16s::@1)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting print_sword::@5(between print_sword and print_sword::@1)
Added new block during phi lifting div16s::@16(between div16s and div16s::@2)
Fixing phi predecessor for div16s::neg#3 to new block ( div16s -> div16s::@16 ) during phi lifting.
Added new block during phi lifting div16s::@17(between div16s::@2 and div16s::@4)
Added new block during phi lifting div16s::@18(between div16s::@15 and div16s::@return)
Added new block during phi lifting divr16u::@8(between divr16u::@3 and divr16u::@1)
Added new block during phi lifting divr16u::@9(between divr16u::@1 and divr16u::@2)
Added new block during phi lifting divr16u::@10(between divr16u::@2 and divr16u::@3)
Added new block during phi lifting test_8s::@12(between test_8s::@11 and test_8s::@1)
Added new block during phi lifting print_sbyte::@5(between print_sbyte and print_sbyte::@1)
Added new block during phi lifting div8s::@16(between div8s and div8s::@2)
Fixing phi predecessor for div8s::neg#3 to new block ( div8s -> div8s::@16 ) during phi lifting.
Added new block during phi lifting div8s::@17(between div8s::@2 and div8s::@4)
Added new block during phi lifting div8s::@18(between div8s::@15 and div8s::@return)
Added new block during phi lifting divr8u::@8(between divr8u::@3 and divr8u::@1)
Added new block during phi lifting divr8u::@9(between divr8u::@1 and divr8u::@2)
Added new block during phi lifting divr8u::@10(between divr8u::@2 and divr8u::@3)
Added new block during phi lifting test_16u::@12(between test_16u::@11 and test_16u::@1)
Added new block during phi lifting test_8u::@12(between test_8u::@11 and test_8u::@1)
Added new block during phi lifting print_cls::@3(between print_cls::@1 and print_cls::@1)
Block Sequence Planned @begin @21 @end main main::@1 main::@2 main::@3 main::@4 main::@return test_16s test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 test_16s::@9 test_16s::@10 test_16s::@11 test_16s::@return test_16s::@12 print_ln print_ln::@1 print_ln::@return print_ln::@3 print_sword print_sword::@2 print_sword::@4 print_sword::@1 print_sword::@return print_sword::@5 print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div16s div16s::@7 div16s::@2 div16s::@9 div16s::@4 div16s::@15 div16s::@18 div16s::@return div16s::@5 div16s::@17 div16s::@16 div16u div16u::@2 div16u::@return divr16u divr16u::@1 divr16u::@4 divr16u::@2 divr16u::@5 divr16u::@3 divr16u::@6 divr16u::@return divr16u::@8 divr16u::@10 divr16u::@9 test_8s test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 test_8s::@8 test_8s::@9 test_8s::@10 test_8s::@11 test_8s::@return test_8s::@12 print_sbyte print_sbyte::@2 print_sbyte::@4 print_sbyte::@1 print_sbyte::@return print_sbyte::@5 div8s div8s::@7 div8s::@2 div8s::@9 div8s::@4 div8s::@15 div8s::@18 div8s::@return div8s::@5 div8s::@17 div8s::@16 div8u div8u::@2 div8u::@return divr8u divr8u::@1 divr8u::@4 divr8u::@2 divr8u::@5 divr8u::@3 divr8u::@6 divr8u::@return divr8u::@8 divr8u::@10 divr8u::@9 test_16u test_16u::@1 test_16u::@3 test_16u::@4 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@9 test_16u::@10 test_16u::@11 test_16u::@return test_16u::@12 test_8u test_8u::@1 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@return test_8u::@12 print_cls print_cls::@1 print_cls::@return print_cls::@3 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @21
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of test_16s
Adding NOP phi() at start of test_16s::@4
Adding NOP phi() at start of test_16s::@6
Adding NOP phi() at start of test_16s::@8
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@4
Adding NOP phi() at start of test_8s::@6
Adding NOP phi() at start of test_8s::@8
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@4
Adding NOP phi() at start of test_16u::@6
Adding NOP phi() at start of test_16u::@8
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@4
Adding NOP phi() at start of test_8u::@6
Adding NOP phi() at start of test_8u::@8
Adding NOP phi() at start of print_cls
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to print_cls:5 test_8u:7 test_16u:9 test_8s:11 test_16s:13 
Calls in [test_16s] to div16s:21 print_sword:27 print_str:29 print_sword:33 print_str:35 print_sword:39 print_str:41 print_sword:45 print_ln:47 
Calls in [print_sword] to print_char:63 print_word:70 
Calls in [print_word] to print_byte:78 print_byte:82 
Calls in [print_byte] to print_char:89 print_char:94 
Calls in [div16s] to div16u:126 
Calls in [div16u] to divr16u:144 
Calls in [test_8s] to div8s:182 print_sbyte:188 print_str:190 print_sbyte:194 print_str:196 print_sbyte:200 print_str:202 print_sbyte:206 print_ln:208 
Calls in [print_sbyte] to print_char:217 print_byte:224 
Calls in [div8s] to div8u:243 
Calls in [div8u] to divr8u:261 
Calls in [test_16u] to div16u:301 print_word:307 print_str:309 print_word:313 print_str:315 print_word:319 print_str:321 print_word:325 print_ln:327 
Calls in [test_8u] to div8u:342 print_byte:348 print_str:350 print_byte:354 print_str:356 print_byte:360 print_str:362 print_byte:366 print_ln:368 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 62 initial phi equivalence classes
Coalesced [25] print_sword::w#9 ← print_sword::w#1
Not coalescing [26] char_cursor#155 ← line_cursor#1
Coalesced [31] print_sword::w#10 ← print_sword::w#2
Coalesced [32] char_cursor#156 ← char_cursor#126
Coalesced [37] print_sword::w#11 ← print_sword::w#3
Coalesced (already) [38] char_cursor#157 ← char_cursor#126
Coalesced [43] print_sword::w#12 ← print_sword::w#4
Coalesced (already) [44] char_cursor#158 ← char_cursor#126
Coalesced [46] line_cursor#86 ← line_cursor#1
Coalesced [51] test_16s::i#12 ← test_16s::i#1
Coalesced [52] rem16s#31 ← rem16s#3
Coalesced [54] line_cursor#90 ← line_cursor#39
Coalesced (already) [59] line_cursor#91 ← line_cursor#1
Coalesced [62] char_cursor#176 ← char_cursor#129
Coalesced [65] print_sword::w#14 ← print_sword::w#0
Coalesced [66] char_cursor#160 ← char_cursor#17
Coalesced [69] char_cursor#161 ← char_cursor#128
Coalesced [72] print_sword::w#13 ← print_sword::w#5
Coalesced [73] char_cursor#159 ← char_cursor#129
Coalesced [76] print_byte::b#10 ← print_byte::b#1
Coalesced [77] char_cursor#167 ← char_cursor#132
Coalesced [80] print_byte::b#11 ← print_byte::b#2
Coalesced (already) [81] char_cursor#168 ← char_cursor#17
Coalesced [87] print_char::ch#5 ← print_char::ch#2
Coalesced (already) [88] char_cursor#173 ← char_cursor#133
Coalesced [92] print_char::ch#6 ← print_char::ch#3
Coalesced (already) [93] char_cursor#174 ← char_cursor#17
Coalesced [101] print_str::str#16 ← print_str::str#15
Coalesced (already) [102] char_cursor#177 ← char_cursor#17
Coalesced [109] print_str::str#17 ← print_str::str#0
Coalesced [110] char_cursor#178 ← char_cursor#1
Coalesced [119] div16s::neg#10 ← div16s::neg#2
Coalesced [123] div16u::dividend#3 ← div16u::dividend#0
Coalesced [124] div16u::divisor#3 ← div16u::divisor#0
Coalesced [125] rem16u#65 ← rem16u#17
Coalesced [136] div16s::return#7 ← div16s::return#0
Coalesced [137] rem16s#33 ← rem16s#1
Coalesced [139] div16s::neg#9 ← div16s::neg#3
Coalesced [148] divr16u::dividend#8 ← divr16u::dividend#0
Coalesced [155] divr16u::rem#13 ← divr16u::rem#2
Coalesced [162] divr16u::rem#15 ← divr16u::rem#3
Coalesced [163] divr16u::return#6 ← divr16u::quotient#2
Coalesced [167] rem16u#17 ← divr16u::rem#10
Coalesced [169] divr16u::rem#11 ← divr16u::rem#10
Coalesced [170] divr16u::dividend#9 ← divr16u::dividend#1
Coalesced [171] divr16u::quotient#9 ← divr16u::return#1
Coalesced [172] divr16u::i#7 ← divr16u::i#1
Coalesced [173] divr16u::rem#14 ← divr16u::rem#5
Coalesced [174] divr16u::return#5 ← divr16u::quotient#1
Coalesced [175] divr16u::rem#12 ← divr16u::rem#1
Coalesced [186] print_sbyte::b#9 ← print_sbyte::b#1
Not coalescing [187] char_cursor#179 ← line_cursor#1
Coalesced [192] print_sbyte::b#10 ← print_sbyte::b#2
Coalesced [193] char_cursor#180 ← char_cursor#126
Coalesced [198] print_sbyte::b#11 ← print_sbyte::b#3
Coalesced (already) [199] char_cursor#181 ← char_cursor#126
Coalesced [204] print_sbyte::b#12 ← print_sbyte::b#4
Coalesced (already) [205] char_cursor#182 ← char_cursor#126
Coalesced (already) [207] line_cursor#88 ← line_cursor#1
Coalesced [212] test_8s::i#12 ← test_8s::i#1
Coalesced [213] rem8s#32 ← rem8s#3
Coalesced (already) [216] char_cursor#175 ← char_cursor#131
Coalesced [219] print_sbyte::b#14 ← print_sbyte::b#0
Coalesced [220] char_cursor#184 ← char_cursor#17
Coalesced (already) [223] char_cursor#166 ← char_cursor#130
Coalesced [226] print_sbyte::b#13 ← print_sbyte::b#5
Coalesced (already) [227] char_cursor#183 ← char_cursor#131
Coalesced [236] div8s::neg#10 ← div8s::neg#2
Coalesced [240] div8u::dividend#3 ← div8u::dividend#0
Coalesced [241] div8u::divisor#3 ← div8u::divisor#0
Coalesced [242] rem8u#66 ← rem8u#17
Coalesced [253] div8s::return#7 ← div8s::return#0
Coalesced [254] rem8s#34 ← rem8s#1
Coalesced [256] div8s::neg#9 ← div8s::neg#3
Coalesced [265] divr8u::dividend#8 ← divr8u::dividend#0
Coalesced [271] divr8u::rem#13 ← divr8u::rem#2
Coalesced [278] divr8u::rem#15 ← divr8u::rem#3
Coalesced [279] divr8u::return#6 ← divr8u::quotient#2
Coalesced [283] rem8u#17 ← divr8u::rem#10
Coalesced [285] divr8u::rem#11 ← divr8u::rem#10
Coalesced [286] divr8u::dividend#9 ← divr8u::dividend#1
Coalesced [287] divr8u::quotient#9 ← divr8u::return#1
Coalesced [288] divr8u::i#7 ← divr8u::i#1
Coalesced [289] divr8u::rem#14 ← divr8u::rem#5
Coalesced [290] divr8u::return#5 ← divr8u::quotient#1
Coalesced [291] divr8u::rem#12 ← divr8u::rem#1
Coalesced [298] div16u::dividend#4 ← div16u::dividend#1
Coalesced [299] div16u::divisor#4 ← div16u::divisor#1
Coalesced [300] rem16u#66 ← rem16u#35
Coalesced [305] print_word::w#8 ← print_word::w#1
Not coalescing [306] char_cursor#162 ← line_cursor#1
Coalesced [311] print_word::w#9 ← print_word::w#2
Coalesced (already) [312] char_cursor#163 ← char_cursor#126
Coalesced [317] print_word::w#10 ← print_word::w#3
Coalesced (already) [318] char_cursor#164 ← char_cursor#126
Coalesced [323] print_word::w#11 ← print_word::w#4
Coalesced (already) [324] char_cursor#165 ← char_cursor#126
Coalesced (already) [326] line_cursor#87 ← line_cursor#1
Coalesced [331] test_16u::i#12 ← test_16u::i#1
Coalesced (already) [332] rem16u#67 ← rem16u#17
Coalesced [339] div8u::dividend#4 ← div8u::dividend#1
Coalesced [340] div8u::divisor#4 ← div8u::divisor#1
Coalesced [341] rem8u#67 ← rem8u#36
Coalesced [346] print_byte::b#12 ← print_byte::b#3
Coalesced [347] char_cursor#169 ← char_cursor#135
Coalesced [352] print_byte::b#13 ← print_byte::b#4
Coalesced (already) [353] char_cursor#170 ← char_cursor#126
Coalesced [358] print_byte::b#14 ← print_byte::b#5
Coalesced (already) [359] char_cursor#171 ← char_cursor#126
Coalesced [364] print_byte::b#15 ← print_byte::b#6
Coalesced (already) [365] char_cursor#172 ← char_cursor#126
Coalesced [367] line_cursor#89 ← line_cursor#41
Coalesced [372] test_8u::i#12 ← test_8u::i#1
Coalesced (already) [373] rem8u#68 ← rem8u#17
Not coalescing [374] char_cursor#185 ← line_cursor#1
Coalesced (already) [375] line_cursor#92 ← line_cursor#1
Coalesced [382] print_cls::sc#3 ← print_cls::sc#1
Coalesced down to 35 phi equivalence classes
Culled Empty Block (label) test_16s::@12
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_sword::@5
Culled Empty Block (label) divr16u::@6
Culled Empty Block (label) divr16u::@8
Culled Empty Block (label) divr16u::@10
Culled Empty Block (label) divr16u::@9
Culled Empty Block (label) test_8s::@12
Culled Empty Block (label) print_sbyte::@5
Culled Empty Block (label) divr8u::@6
Culled Empty Block (label) divr8u::@8
Culled Empty Block (label) divr8u::@10
Culled Empty Block (label) divr8u::@9
Culled Empty Block (label) test_16u::@12
Culled Empty Block (label) print_cls::@3
Block Sequence Planned @begin @21 @end main main::@1 main::@2 main::@3 main::@4 main::@return test_16s test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 test_16s::@9 test_16s::@10 test_16s::@11 test_16s::@return print_ln print_ln::@1 print_ln::@return print_sword print_sword::@2 print_sword::@4 print_sword::@1 print_sword::@return print_word print_word::@1 print_word::@return print_byte print_byte::@1 print_byte::@return print_char print_char::@return print_str print_str::@1 print_str::@return print_str::@2 div16s div16s::@7 div16s::@2 div16s::@9 div16s::@4 div16s::@15 div16s::@18 div16s::@return div16s::@5 div16s::@17 div16s::@16 div16u div16u::@2 div16u::@return divr16u divr16u::@1 divr16u::@4 divr16u::@2 divr16u::@5 divr16u::@3 divr16u::@return test_8s test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 test_8s::@8 test_8s::@9 test_8s::@10 test_8s::@11 test_8s::@return print_sbyte print_sbyte::@2 print_sbyte::@4 print_sbyte::@1 print_sbyte::@return div8s div8s::@7 div8s::@2 div8s::@9 div8s::@4 div8s::@15 div8s::@18 div8s::@return div8s::@5 div8s::@17 div8s::@16 div8u div8u::@2 div8u::@return divr8u divr8u::@1 divr8u::@4 divr8u::@2 divr8u::@5 divr8u::@3 divr8u::@return test_16u test_16u::@1 test_16u::@3 test_16u::@4 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@9 test_16u::@10 test_16u::@11 test_16u::@return test_8u test_8u::@1 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@return test_8u::@12 print_cls print_cls::@1 print_cls::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @21
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of test_16s
Adding NOP phi() at start of test_16s::@4
Adding NOP phi() at start of test_16s::@6
Adding NOP phi() at start of test_16s::@8
Adding NOP phi() at start of test_16s::@10
Adding NOP phi() at start of print_sword::@2
Adding NOP phi() at start of divr16u
Adding NOP phi() at start of test_8s
Adding NOP phi() at start of test_8s::@4
Adding NOP phi() at start of test_8s::@6
Adding NOP phi() at start of test_8s::@8
Adding NOP phi() at start of test_8s::@10
Adding NOP phi() at start of print_sbyte::@2
Adding NOP phi() at start of divr8u
Adding NOP phi() at start of test_16u
Adding NOP phi() at start of test_16u::@4
Adding NOP phi() at start of test_16u::@6
Adding NOP phi() at start of test_16u::@8
Adding NOP phi() at start of test_16u::@10
Adding NOP phi() at start of test_8u
Adding NOP phi() at start of test_8u::@4
Adding NOP phi() at start of test_8u::@6
Adding NOP phi() at start of test_8u::@8
Adding NOP phi() at start of test_8u::@10
Adding NOP phi() at start of print_cls
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@21
@21: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @21
  [3] phi() [ ] ( )
main: scope:[main]  from @21
  [4] phi() [ ] ( main:2 [ ] )
  [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main
  [6] phi() [ ] ( main:2 [ ] )
  [7] call test_8u param-assignment [ line_cursor#1 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr8u::rem#10 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [8] phi() [ line_cursor#1 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr8u::rem#10 ] )
  [9] call test_16u param-assignment [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] )
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] phi() [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] )
  [11] call test_8s param-assignment [ line_cursor#1 divr16u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 ] )
  to:main::@4
main::@4: scope:[main]  from main::@3
  [12] phi() [ line_cursor#1 divr16u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 ] )
  [13] call test_16s param-assignment [ ] ( main:2 [ ] )
  to:main::@return
main::@return: scope:[main]  from main::@4
  [14] return  [ ] ( main:2 [ ] )
  to:@return
test_16s: scope:[test_16s]  from main::@4
  [15] phi() [ line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ line_cursor#1 divr16u::rem#10 ] )
  to:test_16s::@1
test_16s::@1: scope:[test_16s]  from test_16s test_16s::@11
  [16] (signed word) rem16s#17 ← phi( test_16s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16s::@11/(signed word) rem16s#3 ) [ test_16s::i#10 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 line_cursor#1 divr16u::rem#10 ] )
  [16] (byte) test_16s::i#10 ← phi( test_16s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16s::@11/(byte) test_16s::i#1 ) [ test_16s::i#10 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 line_cursor#1 divr16u::rem#10 ] )
  [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] )
  [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] )
  [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] )
  [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] )
  [21] call div16s param-assignment [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 line_cursor#1 divr16u::rem#10 ] )
  [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] )
  to:test_16s::@3
test_16s::@3: scope:[test_16s]  from test_16s::@1
  [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] )
  [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] )
  [25] (byte*~) char_cursor#155 ← (byte*) line_cursor#1 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] )
  [26] call print_sword param-assignment [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  to:test_16s::@4
test_16s::@4: scope:[test_16s]  from test_16s::@3
  [27] phi() [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  [28] call print_str param-assignment [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  to:test_16s::@5
test_16s::@5: scope:[test_16s]  from test_16s::@4
  [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] )
  [30] call print_sword param-assignment [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  to:test_16s::@6
test_16s::@6: scope:[test_16s]  from test_16s::@5
  [31] phi() [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  [32] call print_str param-assignment [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  to:test_16s::@7
test_16s::@7: scope:[test_16s]  from test_16s::@6
  [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] )
  [34] call print_sword param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  to:test_16s::@8
test_16s::@8: scope:[test_16s]  from test_16s::@7
  [35] phi() [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  [36] call print_str param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  to:test_16s::@9
test_16s::@9: scope:[test_16s]  from test_16s::@8
  [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] )
  [38] call print_sword param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  to:test_16s::@10
test_16s::@10: scope:[test_16s]  from test_16s::@9
  [39] phi() [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  [40] call print_ln param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 ] )
  to:test_16s::@11
test_16s::@11: scope:[test_16s]  from test_16s::@10
  [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] )
  [42] if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] )
  to:test_16s::@return
test_16s::@return: scope:[test_16s]  from test_16s::@11
  [43] return  [ ] ( main:2::test_16s:13 [ ] )
  to:@return
print_ln: scope:[print_ln]  from test_16s::@10 test_16u::@10 test_8s::@10 test_8u::@10
  [44] (byte*) line_cursor#39 ← phi( test_16s::@10/(byte*) line_cursor#1 test_16u::@10/(byte*) line_cursor#1 test_8s::@10/(byte*) line_cursor#1 test_8u::@10/(byte*) line_cursor#41 ) [ line_cursor#39 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#39 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#39 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#39 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#39 char_cursor#17 ] )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [45] (byte*) line_cursor#20 ← phi( print_ln/(byte*) line_cursor#39 print_ln::@1/(byte*) line_cursor#1 ) [ line_cursor#20 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#20 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#20 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#20 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#20 char_cursor#17 ] )
  [46] (byte*) line_cursor#1 ← (byte*) line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] )
  [47] if((byte*) line_cursor#1<(byte*) char_cursor#17) goto print_ln::@1 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] )
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [48] return  [ line_cursor#1 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 ] )
  to:@return
print_sword: scope:[print_sword]  from test_16s::@3 test_16s::@5 test_16s::@7 test_16s::@9
  [49] (byte*) char_cursor#129 ← phi( test_16s::@3/(byte*~) char_cursor#155 test_16s::@5/(byte*) char_cursor#126 test_16s::@7/(byte*) char_cursor#126 test_16s::@9/(byte*) char_cursor#126 ) [ print_sword::w#5 char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] )
  [49] (signed word) print_sword::w#5 ← phi( test_16s::@3/(signed word) print_sword::w#1 test_16s::@5/(signed word) print_sword::w#2 test_16s::@7/(signed word) print_sword::w#3 test_16s::@9/(signed word) print_sword::w#4 ) [ print_sword::w#5 char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] )
  [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] )
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [51] phi() [ print_sword::w#5 char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] )
  [52] call print_char param-assignment [ char_cursor#17 print_sword::w#5 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] )
  to:print_sword::@4
print_sword::@4: scope:[print_sword]  from print_sword::@2
  [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] )
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@4
  [54] (byte*) char_cursor#128 ← phi( print_sword/(byte*) char_cursor#129 print_sword::@4/(byte*) char_cursor#17 ) [ print_sword::w#6 char_cursor#128 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#6 char_cursor#128 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#6 char_cursor#128 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#6 char_cursor#128 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#6 char_cursor#128 ] )
  [54] (signed word) print_sword::w#6 ← phi( print_sword/(signed word) print_sword::w#5 print_sword::@4/(signed word) print_sword::w#0 ) [ print_sword::w#6 char_cursor#128 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#6 char_cursor#128 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#6 char_cursor#128 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#6 char_cursor#128 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#6 char_cursor#128 ] )
  [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] )
  [56] call print_word param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] )
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [57] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] )
  to:@return
print_word: scope:[print_word]  from print_sword::@1 test_16u::@3 test_16u::@5 test_16u::@7 test_16u::@9
  [58] (byte*) char_cursor#132 ← phi( print_sword::@1/(byte*) char_cursor#128 test_16u::@3/(byte*~) char_cursor#162 test_16u::@5/(byte*) char_cursor#126 test_16u::@7/(byte*) char_cursor#126 test_16u::@9/(byte*) char_cursor#126 ) [ print_word::w#5 char_cursor#132 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#132 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#132 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 ] )
  [58] (word) print_word::w#5 ← phi( print_sword::@1/(word~) print_word::w#7 test_16u::@3/(word) print_word::w#1 test_16u::@5/(word) print_word::w#2 test_16u::@7/(word) print_word::w#3 test_16u::@9/(word) print_word::w#4 ) [ print_word::w#5 char_cursor#132 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#132 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#132 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 ] )
  [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] )
  [60] call print_byte param-assignment [ char_cursor#17 print_word::w#5 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_word::w#5 ] )
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] )
  [62] call print_byte param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] )
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [63] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] )
  to:@return
print_byte: scope:[print_byte]  from print_sbyte::@1 print_word print_word::@1 test_8u::@3 test_8u::@5 test_8u::@7 test_8u::@9
  [64] (byte*) char_cursor#133 ← phi( print_sbyte::@1/(byte*) char_cursor#130 print_word/(byte*) char_cursor#132 print_word::@1/(byte*) char_cursor#17 test_8u::@3/(byte*) char_cursor#135 test_8u::@5/(byte*) char_cursor#126 test_8u::@7/(byte*) char_cursor#126 test_8u::@9/(byte*) char_cursor#126 ) [ print_byte::b#7 char_cursor#133 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 ] )
  [64] (byte) print_byte::b#7 ← phi( print_sbyte::@1/(byte~) print_byte::b#9 print_word/(byte) print_byte::b#1 print_word::@1/(byte) print_byte::b#2 test_8u::@3/(byte) print_byte::b#3 test_8u::@5/(byte) print_byte::b#4 test_8u::@7/(byte) print_byte::b#5 test_8u::@9/(byte) print_byte::b#6 ) [ print_byte::b#7 char_cursor#133 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 ] )
  [65] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#133 print_byte::$0 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] )
  [66] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#133 print_char::ch#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] )
  [67] call print_char param-assignment [ char_cursor#17 print_byte::b#7 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::b#7 ] )
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] )
  [69] (byte) print_char::ch#3 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#17 print_char::ch#3 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_char::ch#3 ] )
  [70] call print_char param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] )
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [71] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] )
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sbyte::@2 print_sword::@2
  [72] (byte*) char_cursor#80 ← phi( print_byte/(byte*) char_cursor#133 print_byte::@1/(byte*) char_cursor#17 print_sbyte::@2/(byte*) char_cursor#131 print_sword::@2/(byte*) char_cursor#129 ) [ print_char::ch#4 char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 print_char::ch#4 char_cursor#80 ] )
  [72] (byte) print_char::ch#4 ← phi( print_byte/(byte) print_char::ch#2 print_byte::@1/(byte) print_char::ch#3 print_sbyte::@2/(byte) '-' print_sword::@2/(byte) '-' ) [ print_char::ch#4 char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_char::ch#4 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_char::ch#4 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 print_char::ch#4 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 print_char::ch#4 char_cursor#80 ] )
  [73] *((byte*) char_cursor#80) ← (byte) print_char::ch#4 [ char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] )
  [74] (byte*) char_cursor#17 ← ++ (byte*) char_cursor#80 [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] )
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [75] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] )
  to:@return
print_str: scope:[print_str]  from test_16s::@4 test_16s::@6 test_16s::@8 test_16u::@4 test_16u::@6 test_16u::@8 test_8s::@4 test_8s::@6 test_8s::@8 test_8u::@4 test_8u::@6 test_8u::@8
  [76] (byte*) print_str::str#15 ← phi( test_16s::@4/(const string) test_16s::str test_16s::@6/(const string) test_16s::str1 test_16s::@8/(const string) test_16s::str2 test_16u::@4/(const string) test_16u::str test_16u::@6/(const string) test_16u::str1 test_16u::@8/(const string) test_16u::str2 test_8s::@4/(const string) test_8s::str test_8s::@6/(const string) test_8s::str1 test_8s::@8/(const string) test_8s::str2 test_8u::@4/(const string) test_8u::str test_8u::@6/(const string) test_8u::str1 test_8u::@8/(const string) test_8u::str2 ) [ char_cursor#17 print_str::str#15 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_str::str#15 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_str::str#15 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_str::str#15 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_str::str#15 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_str::str#15 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_str::str#15 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_str::str#15 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_str::str#15 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_str::str#15 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_str::str#15 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_str::str#15 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_str::str#15 ] )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [77] (byte*) char_cursor#126 ← phi( print_str/(byte*) char_cursor#17 print_str::@2/(byte*) char_cursor#1 ) [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] )
  [77] (byte*) print_str::str#13 ← phi( print_str/(byte*) print_str::str#15 print_str::@2/(byte*) print_str::str#0 ) [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] )
  [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] )
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [79] return  [ char_cursor#126 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 ] )
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [80] *((byte*) char_cursor#126) ← *((byte*) print_str::str#13) [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] )
  [81] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#126 [ print_str::str#13 char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_str::str#13 char_cursor#1 ] )
  [82] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 [ print_str::str#0 char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_str::str#0 char_cursor#1 ] )
  to:print_str::@1
div16s: scope:[div16s]  from test_16s::@1
  [83] if((signed word) div16s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@16 [ div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] )
  to:div16s::@7
div16s::@7: scope:[div16s]  from div16s
  [84] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::$2 divr16u::rem#10 ] )
  [85] (word~) div16s::dividendu#8 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] )
  to:div16s::@2
div16s::@2: scope:[div16s]  from div16s::@16 div16s::@7
  [86] (word) div16s::dividendu#3 ← phi( div16s::@16/(word~) div16s::dividendu#7 div16s::@7/(word~) div16s::dividendu#8 ) [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] )
  [86] (byte) div16s::neg#3 ← phi( div16s::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 div16s::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] )
  [87] if((signed word) div16s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@17 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] )
  to:div16s::@9
div16s::@9: scope:[div16s]  from div16s::@2
  [88] (signed word~) div16s::$7 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] )
  [89] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] )
  [90] (word~) div16s::divisoru#5 ← (word)(signed word~) div16s::$7 [ div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] )
  to:div16s::@4
div16s::@4: scope:[div16s]  from div16s::@17 div16s::@9
  [91] (byte) div16s::neg#4 ← phi( div16s::@17/(byte) div16s::neg#3 div16s::@9/(byte) div16s::neg#2 ) [ div16s::dividendu#3 div16s::divisoru#3 div16s::neg#4 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::divisoru#3 div16s::neg#4 divr16u::rem#10 ] )
  [91] (word) div16s::divisoru#3 ← phi( div16s::@17/(word~) div16s::divisoru#4 div16s::@9/(word~) div16s::divisoru#5 ) [ div16s::dividendu#3 div16s::divisoru#3 div16s::neg#4 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::divisoru#3 div16s::neg#4 divr16u::rem#10 ] )
  [92] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] )
  [93] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] )
  [94] call div16u param-assignment [ div16s::neg#4 div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] )
  [95] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#2 divr16u::rem#10 ] )
  to:div16s::@15
div16s::@15: scope:[div16s]  from div16s::@4
  [96] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] )
  [97] if((byte) div16s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@5 [ div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 ] )
  to:div16s::@18
div16s::@18: scope:[div16s]  from div16s::@15
  [98] (signed word~) div16s::return#6 ← (signed word)(word) div16s::resultu#0 [ div16s::return#6 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 divr16u::rem#10 ] )
  [99] (signed word~) rem16s#32 ← (signed word)(word) divr16u::rem#10 [ div16s::return#6 rem16s#32 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 rem16s#32 divr16u::rem#10 ] )
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s::@18 div16s::@5
  [100] (signed word) rem16s#3 ← phi( div16s::@18/(signed word~) rem16s#32 div16s::@5/(signed word) rem16s#1 ) [ rem16s#3 div16s::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 rem16s#3 div16s::return#2 divr16u::rem#10 ] )
  [100] (signed word) div16s::return#2 ← phi( div16s::@18/(signed word~) div16s::return#6 div16s::@5/(signed word) div16s::return#0 ) [ rem16s#3 div16s::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 rem16s#3 div16s::return#2 divr16u::rem#10 ] )
  [101] return  [ rem16s#3 div16s::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 rem16s#3 div16s::return#2 divr16u::rem#10 ] )
  to:@return
div16s::@5: scope:[div16s]  from div16s::@15
  [102] (signed word) rem16s#1 ← - (signed word)(word) divr16u::rem#10 [ div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 rem16s#1 ] )
  [103] (signed word) div16s::return#0 ← - (signed word)(word) div16s::resultu#0 [ divr16u::rem#10 div16s::return#0 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 div16s::return#0 rem16s#1 ] )
  to:div16s::@return
div16s::@17: scope:[div16s]  from div16s::@2
  [104] (word~) div16s::divisoru#4 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] )
  to:div16s::@4
div16s::@16: scope:[div16s]  from div16s
  [105] (word~) div16s::dividendu#7 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] )
  to:div16s::@2
div16u: scope:[div16u]  from div16s::@4 test_16u::@1
  [106] (word) rem16u#31 ← phi( div16s::@4/(word) divr16u::rem#10 test_16u::@1/(word) rem16u#35 ) [ div16u::dividend#2 div16u::divisor#2 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::dividend#2 div16u::divisor#2 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#2 div16u::divisor#2 ] )
  [106] (word) div16u::divisor#2 ← phi( div16s::@4/(word) div16u::divisor#0 test_16u::@1/(word) div16u::divisor#1 ) [ div16u::dividend#2 div16u::divisor#2 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::dividend#2 div16u::divisor#2 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#2 div16u::divisor#2 ] )
  [106] (word) div16u::dividend#2 ← phi( div16s::@4/(word) div16u::dividend#0 test_16u::@1/(word) div16u::dividend#1 ) [ div16u::dividend#2 div16u::divisor#2 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::dividend#2 div16u::divisor#2 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::dividend#2 div16u::divisor#2 ] )
  [107] (word) divr16u::dividend#0 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#0 ] )
  [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#0 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::dividend#0 divr16u::divisor#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#0 divr16u::divisor#0 ] )
  [109] call divr16u param-assignment [ divr16u::rem#10 divr16u::return#1 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#1 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#1 ] )
  [110] (word) divr16u::return#0 ← (word) divr16u::return#1 [ divr16u::rem#10 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#0 ] )
  to:div16u::@2
div16u::@2: scope:[div16u]  from div16u
  [111] (word) div16u::return#0 ← (word) divr16u::return#0 [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] )
  to:div16u::@return
div16u::@return: scope:[div16u]  from div16u::@2
  [112] return  [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] )
  to:@return
divr16u: scope:[divr16u]  from div16u
  [113] phi() [ divr16u::dividend#0 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::dividend#0 divr16u::divisor#0 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#0 divr16u::divisor#0 ] )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [114] (byte) divr16u::i#2 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(byte) divr16u::i#1 ) [ divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [114] (word) divr16u::quotient#3 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::return#1 ) [ divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [114] (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#0 divr16u::@3/(word) divr16u::dividend#1 ) [ divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [114] (word) divr16u::rem#4 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::rem#10 ) [ divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::rem#4 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 ] )
  [115] (word) divr16u::rem#1 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] )
  [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] )
  [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] )
  [118] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] )
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [119] (word) divr16u::rem#2 ← ++ (word) divr16u::rem#1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] )
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [120] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#1 divr16u::@4/(word) divr16u::rem#2 ) [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#5 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#5 ] )
  [121] (word) divr16u::dividend#1 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] )
  [122] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] )
  [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] )
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [124] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] )
  [125] (word) divr16u::rem#3 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] )
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [126] (word) divr16u::return#1 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 ) [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::i#2 divr16u::dividend#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::i#2 divr16u::dividend#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::i#2 divr16u::dividend#1 ] )
  [126] (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#3 ) [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::i#2 divr16u::dividend#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::i#2 divr16u::dividend#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::i#2 divr16u::dividend#1 ] )
  [127] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] )
  [128] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] )
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@3
  [129] return  [ divr16u::rem#10 divr16u::return#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#1 ] )
  to:@return
test_8s: scope:[test_8s]  from main::@3
  [130] phi() [ line_cursor#1 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 divr8u::rem#10 ] )
  to:test_8s::@1
test_8s::@1: scope:[test_8s]  from test_8s test_8s::@11
  [131] (signed byte) rem8s#18 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@11/(signed byte) rem8s#3 ) [ line_cursor#1 test_8s::i#10 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 divr8u::rem#10 ] )
  [131] (byte) test_8s::i#10 ← phi( test_8s/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8s::@11/(byte) test_8s::i#1 ) [ line_cursor#1 test_8s::i#10 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 divr8u::rem#10 ] )
  [132] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 divr8u::rem#10 ] )
  [133] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] )
  [134] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 divr8u::rem#10 ] )
  [135] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] )
  [136] call div8s param-assignment [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 divr8u::rem#10 ] )
  [137] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 divr8u::rem#10 ] )
  to:test_8s::@3
test_8s::@3: scope:[test_8s]  from test_8s::@1
  [138] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  [139] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 divr8u::rem#10 ] )
  [140] (byte*~) char_cursor#179 ← (byte*) line_cursor#1 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] )
  [141] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  to:test_8s::@4
test_8s::@4: scope:[test_8s]  from test_8s::@3
  [142] phi() [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  [143] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  to:test_8s::@5
test_8s::@5: scope:[test_8s]  from test_8s::@4
  [144] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 divr8u::rem#10 ] )
  [145] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] )
  to:test_8s::@6
test_8s::@6: scope:[test_8s]  from test_8s::@5
  [146] phi() [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] )
  [147] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] )
  to:test_8s::@7
test_8s::@7: scope:[test_8s]  from test_8s::@6
  [148] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#3 divr8u::rem#10 ] )
  [149] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  to:test_8s::@8
test_8s::@8: scope:[test_8s]  from test_8s::@7
  [150] phi() [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  [151] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  to:test_8s::@9
test_8s::@9: scope:[test_8s]  from test_8s::@8
  [152] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#4 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#4 divr8u::rem#10 ] )
  [153] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  to:test_8s::@10
test_8s::@10: scope:[test_8s]  from test_8s::@9
  [154] phi() [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  [155] call print_ln param-assignment [ line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  to:test_8s::@11
test_8s::@11: scope:[test_8s]  from test_8s::@10
  [156] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] )
  [157] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1 [ line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] )
  to:test_8s::@return
test_8s::@return: scope:[test_8s]  from test_8s::@11
  [158] return  [ line_cursor#1 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 ] )
  to:@return
print_sbyte: scope:[print_sbyte]  from test_8s::@3 test_8s::@5 test_8s::@7 test_8s::@9
  [159] (byte*) char_cursor#131 ← phi( test_8s::@3/(byte*~) char_cursor#179 test_8s::@5/(byte*) char_cursor#126 test_8s::@7/(byte*) char_cursor#126 test_8s::@9/(byte*) char_cursor#126 ) [ char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] )
  [159] (signed byte) print_sbyte::b#5 ← phi( test_8s::@3/(signed byte) print_sbyte::b#1 test_8s::@5/(signed byte) print_sbyte::b#2 test_8s::@7/(signed byte) print_sbyte::b#3 test_8s::@9/(signed byte) print_sbyte::b#4 ) [ char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] )
  [160] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] )
  to:print_sbyte::@2
print_sbyte::@2: scope:[print_sbyte]  from print_sbyte
  [161] phi() [ char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] )
  [162] call print_char param-assignment [ char_cursor#17 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] )
  to:print_sbyte::@4
print_sbyte::@4: scope:[print_sbyte]  from print_sbyte::@2
  [163] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] )
  to:print_sbyte::@1
print_sbyte::@1: scope:[print_sbyte]  from print_sbyte print_sbyte::@4
  [164] (byte*) char_cursor#130 ← phi( print_sbyte/(byte*) char_cursor#131 print_sbyte::@4/(byte*) char_cursor#17 ) [ char_cursor#130 print_sbyte::b#6 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#130 print_sbyte::b#6 ] )
  [164] (signed byte) print_sbyte::b#6 ← phi( print_sbyte/(signed byte) print_sbyte::b#5 print_sbyte::@4/(signed byte) print_sbyte::b#0 ) [ char_cursor#130 print_sbyte::b#6 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#130 print_sbyte::b#6 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#130 print_sbyte::b#6 ] )
  [165] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 char_cursor#130 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] )
  [166] call print_byte param-assignment [ char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] )
  to:print_sbyte::@return
print_sbyte::@return: scope:[print_sbyte]  from print_sbyte::@1
  [167] return  [ char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] )
  to:@return
div8s: scope:[div8s]  from test_8s::@1
  [168] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] )
  to:div8s::@7
div8s::@7: scope:[div8s]  from div8s
  [169] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 divr8u::rem#10 ] )
  [170] (byte~) div8s::dividendu#8 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendu#8 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#8 divr8u::rem#10 ] )
  to:div8s::@2
div8s::@2: scope:[div8s]  from div8s::@16 div8s::@7
  [171] (byte) div8s::dividendu#3 ← phi( div8s::@16/(byte~) div8s::dividendu#7 div8s::@7/(byte~) div8s::dividendu#8 ) [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] )
  [171] (byte) div8s::neg#3 ← phi( div8s::@16/(byte/signed byte/word/signed word/dword/signed dword) 0 div8s::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 ) [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] )
  [172] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] )
  to:div8s::@9
div8s::@9: scope:[div8s]  from div8s::@2
  [173] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] )
  [174] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] )
  [175] (byte~) div8s::divisoru#5 ← (byte)(signed byte~) div8s::$7 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#5 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#5 divr8u::rem#10 ] )
  to:div8s::@4
div8s::@4: scope:[div8s]  from div8s::@17 div8s::@9
  [176] (byte) div8s::neg#4 ← phi( div8s::@17/(byte) div8s::neg#3 div8s::@9/(byte) div8s::neg#2 ) [ div8s::dividendu#3 div8s::divisoru#3 div8s::neg#4 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::divisoru#3 div8s::neg#4 divr8u::rem#10 ] )
  [176] (byte) div8s::divisoru#3 ← phi( div8s::@17/(byte~) div8s::divisoru#4 div8s::@9/(byte~) div8s::divisoru#5 ) [ div8s::dividendu#3 div8s::divisoru#3 div8s::neg#4 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::divisoru#3 div8s::neg#4 divr8u::rem#10 ] )
  [177] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 [ div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 divr8u::rem#10 ] )
  [178] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 [ div8s::neg#4 div8u::dividend#0 div8u::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#0 div8u::divisor#0 divr8u::rem#10 ] )
  [179] call div8u param-assignment [ div8s::neg#4 div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] )
  [180] (byte) div8u::return#2 ← (byte) div8u::return#0 [ div8s::neg#4 div8u::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#2 divr8u::rem#10 ] )
  to:div8s::@15
div8s::@15: scope:[div8s]  from div8s::@4
  [181] (byte) div8s::resultu#0 ← (byte) div8u::return#2 [ div8s::neg#4 div8s::resultu#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8s::resultu#0 divr8u::rem#10 ] )
  [182] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ div8s::resultu#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 ] )
  to:div8s::@18
div8s::@18: scope:[div8s]  from div8s::@15
  [183] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultu#0 [ div8s::return#6 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#6 divr8u::rem#10 ] )
  [184] (signed byte~) rem8s#33 ← (signed byte)(byte) divr8u::rem#10 [ div8s::return#6 rem8s#33 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#6 rem8s#33 divr8u::rem#10 ] )
  to:div8s::@return
div8s::@return: scope:[div8s]  from div8s::@18 div8s::@5
  [185] (signed byte) rem8s#3 ← phi( div8s::@18/(signed byte~) rem8s#33 div8s::@5/(signed byte) rem8s#1 ) [ rem8s#3 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#3 div8s::return#2 divr8u::rem#10 ] )
  [185] (signed byte) div8s::return#2 ← phi( div8s::@18/(signed byte~) div8s::return#6 div8s::@5/(signed byte) div8s::return#0 ) [ rem8s#3 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#3 div8s::return#2 divr8u::rem#10 ] )
  [186] return  [ rem8s#3 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#3 div8s::return#2 divr8u::rem#10 ] )
  to:@return
div8s::@5: scope:[div8s]  from div8s::@15
  [187] (signed byte) rem8s#1 ← - (signed byte)(byte) divr8u::rem#10 [ div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 rem8s#1 ] )
  [188] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultu#0 [ divr8u::rem#10 div8s::return#0 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 div8s::return#0 rem8s#1 ] )
  to:div8s::@return
div8s::@17: scope:[div8s]  from div8s::@2
  [189] (byte~) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#4 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#4 divr8u::rem#10 ] )
  to:div8s::@4
div8s::@16: scope:[div8s]  from div8s
  [190] (byte~) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#7 divr8u::rem#10 ] )
  to:div8s::@2
div8u: scope:[div8u]  from div8s::@4 test_8u::@1
  [191] (byte) rem8u#31 ← phi( div8s::@4/(byte) divr8u::rem#10 test_8u::@1/(byte) rem8u#36 ) [ div8u::dividend#2 div8u::divisor#2 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#2 div8u::divisor#2 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#2 ] )
  [191] (byte) div8u::divisor#2 ← phi( div8s::@4/(byte) div8u::divisor#0 test_8u::@1/(byte) div8u::divisor#1 ) [ div8u::dividend#2 div8u::divisor#2 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#2 div8u::divisor#2 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#2 ] )
  [191] (byte) div8u::dividend#2 ← phi( div8s::@4/(byte) div8u::dividend#0 test_8u::@1/(byte) div8u::dividend#1 ) [ div8u::dividend#2 div8u::divisor#2 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#2 div8u::divisor#2 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::dividend#2 div8u::divisor#2 ] )
  [192] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 [ div8u::divisor#2 divr8u::dividend#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#2 divr8u::dividend#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#2 divr8u::dividend#0 ] )
  [193] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] )
  [194] call divr8u param-assignment [ divr8u::rem#10 divr8u::return#1 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#1 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#1 ] )
  [195] (byte) divr8u::return#0 ← (byte) divr8u::return#1 [ divr8u::rem#10 divr8u::return#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#0 ] )
  to:div8u::@2
div8u::@2: scope:[div8u]  from div8u
  [196] (byte) div8u::return#0 ← (byte) divr8u::return#0 [ div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 divr8u::rem#10 ] )
  to:div8u::@return
div8u::@return: scope:[div8u]  from div8u::@2
  [197] return  [ div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 divr8u::rem#10 ] )
  to:@return
divr8u: scope:[divr8u]  from div8u
  [198] phi() [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] )
  to:divr8u::@1
divr8u::@1: scope:[divr8u]  from divr8u divr8u::@3
  [199] (byte) divr8u::i#2 ← phi( divr8u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr8u::@3/(byte) divr8u::i#1 ) [ divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] )
  [199] (byte) divr8u::quotient#3 ← phi( divr8u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr8u::@3/(byte) divr8u::return#1 ) [ divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] )
  [199] (byte) divr8u::dividend#2 ← phi( divr8u/(byte) divr8u::dividend#0 divr8u::@3/(byte) divr8u::dividend#1 ) [ divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] )
  [199] (byte) divr8u::rem#4 ← phi( divr8u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr8u::@3/(byte) divr8u::rem#10 ) [ divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::rem#4 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 ] )
  [200] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] )
  [201] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] )
  [202] if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] )
  to:divr8u::@4
divr8u::@4: scope:[divr8u]  from divr8u::@1
  [203] (byte) divr8u::rem#2 ← ++ (byte) divr8u::rem#1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] )
  to:divr8u::@2
divr8u::@2: scope:[divr8u]  from divr8u::@1 divr8u::@4
  [204] (byte) divr8u::rem#5 ← phi( divr8u::@1/(byte) divr8u::rem#1 divr8u::@4/(byte) divr8u::rem#2 ) [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#5 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#5 ] )
  [205] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] )
  [206] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] )
  [207] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] )
  to:divr8u::@5
divr8u::@5: scope:[divr8u]  from divr8u::@2
  [208] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] )
  [209] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] )
  to:divr8u::@3
divr8u::@3: scope:[divr8u]  from divr8u::@2 divr8u::@5
  [210] (byte) divr8u::return#1 ← phi( divr8u::@2/(byte) divr8u::quotient#1 divr8u::@5/(byte) divr8u::quotient#2 ) [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::dividend#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::dividend#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::dividend#1 ] )
  [210] (byte) divr8u::rem#10 ← phi( divr8u::@2/(byte) divr8u::rem#5 divr8u::@5/(byte) divr8u::rem#3 ) [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::dividend#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::dividend#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::i#2 divr8u::dividend#1 ] )
  [211] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] )
  [212] if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1 [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] )
  to:divr8u::@return
divr8u::@return: scope:[divr8u]  from divr8u::@3
  [213] return  [ divr8u::rem#10 divr8u::return#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#1 ] )
  to:@return
test_16u: scope:[test_16u]  from main::@2
  [214] phi() [ line_cursor#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 ] )
  to:test_16u::@1
test_16u::@1: scope:[test_16u]  from test_16u test_16u::@11
  [215] (word) rem16u#35 ← phi( test_16u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16u::@11/(word) divr16u::rem#10 ) [ line_cursor#1 rem16u#35 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 ] )
  [215] (byte) test_16u::i#10 ← phi( test_16u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_16u::@11/(byte) test_16u::i#1 ) [ line_cursor#1 rem16u#35 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 ] )
  [216] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] )
  [217] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  [218] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  [219] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  [220] call div16u param-assignment [ line_cursor#1 div16u::return#0 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::return#0 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  [221] (word) div16u::return#3 ← (word) div16u::return#0 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] )
  to:test_16u::@3
test_16u::@3: scope:[test_16u]  from test_16u::@1
  [222] (word) test_16u::res#0 ← (word) div16u::return#3 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] )
  [223] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  [224] (byte*~) char_cursor#162 ← (byte*) line_cursor#1 [ line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  [225] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  to:test_16u::@4
test_16u::@4: scope:[test_16u]  from test_16u::@3
  [226] phi() [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  [227] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  to:test_16u::@5
test_16u::@5: scope:[test_16u]  from test_16u::@4
  [228] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  [229] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  to:test_16u::@6
test_16u::@6: scope:[test_16u]  from test_16u::@5
  [230] phi() [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  [231] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  to:test_16u::@7
test_16u::@7: scope:[test_16u]  from test_16u::@6
  [232] (word) print_word::w#3 ← (word) test_16u::res#0 [ line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] )
  [233] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  to:test_16u::@8
test_16u::@8: scope:[test_16u]  from test_16u::@7
  [234] phi() [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  [235] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 ] )
  to:test_16u::@9
test_16u::@9: scope:[test_16u]  from test_16u::@8
  [236] (word) print_word::w#4 ← (word) divr16u::rem#10 [ line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] )
  [237] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  to:test_16u::@10
test_16u::@10: scope:[test_16u]  from test_16u::@9
  [238] phi() [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  [239] call print_ln param-assignment [ line_cursor#1 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 ] )
  to:test_16u::@11
test_16u::@11: scope:[test_16u]  from test_16u::@10
  [240] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] )
  [241] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] )
  to:test_16u::@return
test_16u::@return: scope:[test_16u]  from test_16u::@11
  [242] return  [ line_cursor#1 divr16u::rem#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 ] )
  to:@return
test_8u: scope:[test_8u]  from main::@1
  [243] phi() [ ] ( main:2::test_8u:7 [ ] )
  to:test_8u::@1
test_8u::@1: scope:[test_8u]  from test_8u test_8u::@12
  [244] (byte*) line_cursor#41 ← phi( test_8u/(const byte*) SCREEN#0 test_8u::@12/(byte*) line_cursor#1 ) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 ] )
  [244] (byte*) char_cursor#135 ← phi( test_8u/(const byte*) SCREEN#0 test_8u::@12/(byte*~) char_cursor#185 ) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 ] )
  [244] (byte) rem8u#36 ← phi( test_8u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8u::@12/(byte) divr8u::rem#10 ) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 ] )
  [244] (byte) test_8u::i#10 ← phi( test_8u/(byte/signed byte/word/signed word/dword/signed dword) 0 test_8u::@12/(byte) test_8u::i#1 ) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 ] )
  [245] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 ] )
  [246] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [247] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 [ line_cursor#41 char_cursor#135 div8u::dividend#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::dividend#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [248] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ line_cursor#41 char_cursor#135 div8u::dividend#1 div8u::divisor#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::dividend#1 div8u::divisor#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [249] call div8u param-assignment [ line_cursor#41 char_cursor#135 div8u::return#0 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::return#0 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  [250] (byte) div8u::return#3 ← (byte) div8u::return#0 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] )
  to:test_8u::@3
test_8u::@3: scope:[test_8u]  from test_8u::@1
  [251] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] )
  [252] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ line_cursor#41 print_byte::b#3 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 print_byte::b#3 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  [253] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  to:test_8u::@4
test_8u::@4: scope:[test_8u]  from test_8u::@3
  [254] phi() [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  [255] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  to:test_8u::@5
test_8u::@5: scope:[test_8u]  from test_8u::@4
  [256] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ line_cursor#41 char_cursor#126 print_byte::b#4 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#4 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  [257] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  to:test_8u::@6
test_8u::@6: scope:[test_8u]  from test_8u::@5
  [258] phi() [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  [259] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  to:test_8u::@7
test_8u::@7: scope:[test_8u]  from test_8u::@6
  [260] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ line_cursor#41 char_cursor#126 print_byte::b#5 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#5 divr8u::rem#10 test_8u::i#10 ] )
  [261] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  to:test_8u::@8
test_8u::@8: scope:[test_8u]  from test_8u::@7
  [262] phi() [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  [263] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 ] )
  to:test_8u::@9
test_8u::@9: scope:[test_8u]  from test_8u::@8
  [264] (byte) print_byte::b#6 ← (byte) divr8u::rem#10 [ line_cursor#41 char_cursor#126 print_byte::b#6 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#6 divr8u::rem#10 test_8u::i#10 ] )
  [265] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  to:test_8u::@10
test_8u::@10: scope:[test_8u]  from test_8u::@9
  [266] phi() [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  [267] call print_ln param-assignment [ line_cursor#1 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#10 ] )
  to:test_8u::@11
test_8u::@11: scope:[test_8u]  from test_8u::@10
  [268] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] )
  [269] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@12 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] )
  to:test_8u::@return
test_8u::@return: scope:[test_8u]  from test_8u::@11
  [270] return  [ line_cursor#1 divr8u::rem#10 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 ] )
  to:@return
test_8u::@12: scope:[test_8u]  from test_8u::@11
  [271] (byte*~) char_cursor#185 ← (byte*) line_cursor#1 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] )
  to:test_8u::@1
print_cls: scope:[print_cls]  from main
  [272] phi() [ ] ( main:2::print_cls:5 [ ] )
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [273] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) SCREEN#0 print_cls::@1/(byte*) print_cls::sc#1 ) [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [274] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] )
  [275] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  [276] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] )
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [277] return  [ ] ( main:2::print_cls:5 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@21 dominated by  @21 @begin 
@end dominated by  @21 @end @begin 
main dominated by  @21 main @begin 
main::@1 dominated by  main::@1 @21 main @begin 
main::@2 dominated by  main::@1 main::@2 @21 main @begin 
main::@3 dominated by  main::@1 main::@2 main::@3 @21 main @begin 
main::@4 dominated by  main::@1 main::@2 main::@3 main::@4 @21 main @begin 
main::@return dominated by  main::@1 main::@2 main::@3 main::@4 main::@return @21 main @begin 
test_16s dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 main @begin 
test_16s::@1 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 main @begin 
test_16s::@3 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 test_16s::@3 main @begin 
test_16s::@4 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 test_16s::@3 test_16s::@4 main @begin 
test_16s::@5 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 main @begin 
test_16s::@6 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 main @begin 
test_16s::@7 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 main @begin 
test_16s::@8 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main @begin 
test_16s::@9 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main test_16s::@9 @begin 
test_16s::@10 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main test_16s::@9 @begin test_16s::@10 
test_16s::@11 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s @21 test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main test_16s::@9 @begin test_16s::@11 test_16s::@10 
test_16s::@return dominated by  main::@1 main::@2 main::@3 main::@4 test_16s::@return test_16s @21 test_16s::@1 test_16s::@3 test_16s::@4 test_16s::@5 test_16s::@6 test_16s::@7 test_16s::@8 main test_16s::@9 @begin test_16s::@11 test_16s::@10 
print_ln dominated by  main::@1 print_ln @21 main @begin 
print_ln::@1 dominated by  main::@1 print_ln @21 print_ln::@1 main @begin 
print_ln::@return dominated by  print_ln::@return main::@1 print_ln @21 print_ln::@1 main @begin 
print_sword dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword @21 test_16s::@1 test_16s::@3 main @begin 
print_sword::@2 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword @21 test_16s::@1 test_16s::@3 print_sword::@2 main @begin 
print_sword::@4 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword @21 test_16s::@1 test_16s::@3 print_sword::@2 print_sword::@4 main @begin 
print_sword::@1 dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword @21 test_16s::@1 test_16s::@3 print_sword::@1 main @begin 
print_sword::@return dominated by  main::@1 main::@2 main::@3 main::@4 test_16s print_sword @21 test_16s::@1 test_16s::@3 print_sword::@1 main @begin print_sword::@return 
print_word dominated by  print_word main::@1 main::@2 @21 main @begin 
print_word::@1 dominated by  print_word main::@1 main::@2 print_word::@1 @21 main @begin 
print_word::@return dominated by  print_word main::@1 main::@2 print_word::@return print_word::@1 @21 main @begin 
print_byte dominated by  main::@1 print_byte @21 main @begin 
print_byte::@1 dominated by  main::@1 print_byte::@1 print_byte @21 main @begin 
print_byte::@return dominated by  main::@1 print_byte::@1 print_byte @21 main @begin print_byte::@return 
print_char dominated by  main::@1 @21 main print_char @begin 
print_char::@return dominated by  main::@1 @21 main print_char print_char::@return @begin 
print_str dominated by  main::@1 print_str @21 main @begin 
print_str::@1 dominated by  main::@1 print_str::@1 print_str @21 main @begin 
print_str::@return dominated by  main::@1 print_str::@return print_str::@1 print_str @21 main @begin 
print_str::@2 dominated by  main::@1 print_str::@1 print_str::@2 print_str @21 main @begin 
div16s dominated by  main::@1 main::@2 main::@3 main::@4 div16s test_16s @21 test_16s::@1 main @begin 
div16s::@7 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@7 test_16s @21 test_16s::@1 main @begin 
div16s::@2 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@2 test_16s @21 test_16s::@1 main @begin 
div16s::@9 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@9 div16s::@2 test_16s @21 test_16s::@1 main @begin 
div16s::@4 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@4 div16s::@2 test_16s @21 test_16s::@1 main @begin 
div16s::@15 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@4 div16s::@2 test_16s @21 test_16s::@1 main @begin div16s::@15 
div16s::@18 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@4 div16s::@2 test_16s @21 test_16s::@1 main @begin div16s::@15 div16s::@18 
div16s::@return dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@4 div16s::@2 test_16s @21 test_16s::@1 main @begin div16s::@return div16s::@15 
div16s::@5 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@5 div16s::@4 div16s::@2 test_16s @21 test_16s::@1 main @begin div16s::@15 
div16s::@17 dominated by  main::@1 main::@2 main::@3 main::@4 div16s div16s::@2 test_16s @21 test_16s::@1 main @begin div16s::@17 
div16s::@16 dominated by  main::@1 main::@2 main::@3 main::@4 div16s test_16s @21 test_16s::@1 main @begin div16s::@16 
div16u dominated by  main::@1 main::@2 div16u @21 main @begin 
div16u::@2 dominated by  main::@1 main::@2 div16u div16u::@2 @21 main @begin 
div16u::@return dominated by  div16u::@return main::@1 main::@2 div16u div16u::@2 @21 main @begin 
divr16u dominated by  main::@1 main::@2 div16u @21 divr16u main @begin 
divr16u::@1 dominated by  divr16u::@1 main::@1 main::@2 div16u @21 divr16u main @begin 
divr16u::@4 dominated by  divr16u::@1 divr16u::@4 main::@1 main::@2 div16u @21 divr16u main @begin 
divr16u::@2 dominated by  divr16u::@2 divr16u::@1 main::@1 main::@2 div16u @21 divr16u main @begin 
divr16u::@5 dominated by  divr16u::@2 divr16u::@1 divr16u::@5 main::@1 main::@2 div16u @21 divr16u main @begin 
divr16u::@3 dominated by  divr16u::@2 divr16u::@1 divr16u::@3 main::@1 main::@2 div16u @21 divr16u main @begin 
divr16u::@return dominated by  divr16u::@2 divr16u::@1 divr16u::@3 main::@1 main::@2 div16u @21 divr16u::@return divr16u main @begin 
test_8s dominated by  main::@1 main::@2 main::@3 test_8s @21 main @begin 
test_8s::@1 dominated by  main::@1 main::@2 main::@3 test_8s @21 main @begin test_8s::@1 
test_8s::@3 dominated by  main::@1 main::@2 main::@3 test_8s @21 main @begin test_8s::@1 test_8s::@3 
test_8s::@4 dominated by  main::@1 main::@2 main::@3 test_8s @21 main @begin test_8s::@1 test_8s::@3 test_8s::@4 
test_8s::@5 dominated by  main::@1 main::@2 main::@3 test_8s @21 main @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 
test_8s::@6 dominated by  main::@1 main::@2 main::@3 test_8s @21 main @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 
test_8s::@7 dominated by  main::@1 main::@2 main::@3 test_8s @21 main @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@8 dominated by  main::@1 main::@2 main::@3 test_8s @21 main test_8s::@8 @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@9 dominated by  main::@1 main::@2 main::@3 test_8s @21 main test_8s::@8 test_8s::@9 @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@10 dominated by  main::@1 main::@2 main::@3 test_8s::@10 test_8s @21 main test_8s::@8 test_8s::@9 @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@11 dominated by  main::@1 main::@2 main::@3 test_8s::@10 test_8s::@11 test_8s @21 main test_8s::@8 test_8s::@9 @begin test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
test_8s::@return dominated by  main::@1 main::@2 main::@3 test_8s::@10 test_8s::@11 test_8s @21 main test_8s::@8 test_8s::@9 @begin test_8s::@return test_8s::@1 test_8s::@3 test_8s::@4 test_8s::@5 test_8s::@6 test_8s::@7 
print_sbyte dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @21 main @begin test_8s::@1 test_8s::@3 
print_sbyte::@2 dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @21 main print_sbyte::@2 @begin test_8s::@1 test_8s::@3 
print_sbyte::@4 dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @21 main print_sbyte::@4 print_sbyte::@2 @begin test_8s::@1 test_8s::@3 
print_sbyte::@1 dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @21 main print_sbyte::@1 @begin test_8s::@1 test_8s::@3 
print_sbyte::@return dominated by  main::@1 main::@2 main::@3 test_8s print_sbyte @21 main print_sbyte::@1 @begin print_sbyte::@return test_8s::@1 test_8s::@3 
div8s dominated by  main::@1 main::@2 main::@3 div8s test_8s @21 main @begin test_8s::@1 
div8s::@7 dominated by  main::@1 main::@2 main::@3 div8s test_8s @21 main @begin test_8s::@1 div8s::@7 
div8s::@2 dominated by  main::@1 main::@2 main::@3 div8s test_8s @21 main div8s::@2 @begin test_8s::@1 
div8s::@9 dominated by  main::@1 main::@2 main::@3 div8s test_8s @21 main div8s::@2 @begin test_8s::@1 div8s::@9 
div8s::@4 dominated by  main::@1 main::@2 main::@3 div8s test_8s @21 main div8s::@2 @begin test_8s::@1 div8s::@4 
div8s::@15 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@15 @21 main div8s::@2 @begin test_8s::@1 div8s::@4 
div8s::@18 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@18 div8s::@15 @21 main div8s::@2 @begin test_8s::@1 div8s::@4 
div8s::@return dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@15 @21 main div8s::@2 div8s::@return @begin test_8s::@1 div8s::@4 
div8s::@5 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@15 @21 main div8s::@2 @begin test_8s::@1 div8s::@5 div8s::@4 
div8s::@17 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@17 @21 main div8s::@2 @begin test_8s::@1 
div8s::@16 dominated by  main::@1 main::@2 main::@3 div8s test_8s div8s::@16 @21 main @begin test_8s::@1 
div8u dominated by  main::@1 div8u @21 main @begin 
div8u::@2 dominated by  main::@1 div8u @21 main div8u::@2 @begin 
div8u::@return dominated by  main::@1 div8u div8u::@return @21 main div8u::@2 @begin 
divr8u dominated by  main::@1 div8u divr8u @21 main @begin 
divr8u::@1 dominated by  divr8u::@1 main::@1 div8u divr8u @21 main @begin 
divr8u::@4 dominated by  divr8u::@1 main::@1 divr8u::@4 div8u divr8u @21 main @begin 
divr8u::@2 dominated by  divr8u::@1 main::@1 divr8u::@2 div8u divr8u @21 main @begin 
divr8u::@5 dominated by  divr8u::@1 main::@1 divr8u::@5 divr8u::@2 div8u divr8u @21 main @begin 
divr8u::@3 dominated by  divr8u::@1 main::@1 divr8u::@2 divr8u::@3 div8u divr8u @21 main @begin 
divr8u::@return dominated by  divr8u::@1 main::@1 divr8u::@2 divr8u::@3 div8u divr8u @21 main @begin divr8u::@return 
test_16u dominated by  main::@1 main::@2 test_16u @21 main @begin 
test_16u::@1 dominated by  main::@1 main::@2 test_16u test_16u::@1 @21 main @begin 
test_16u::@3 dominated by  main::@1 main::@2 test_16u test_16u::@1 test_16u::@3 @21 main @begin 
test_16u::@4 dominated by  main::@1 main::@2 test_16u test_16u::@1 test_16u::@3 test_16u::@4 @21 main @begin 
test_16u::@5 dominated by  main::@1 main::@2 test_16u test_16u::@5 test_16u::@1 test_16u::@3 test_16u::@4 @21 main @begin 
test_16u::@6 dominated by  main::@1 main::@2 test_16u test_16u::@5 test_16u::@6 test_16u::@1 test_16u::@3 test_16u::@4 @21 main @begin 
test_16u::@7 dominated by  main::@1 main::@2 test_16u test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@1 test_16u::@3 test_16u::@4 @21 main @begin 
test_16u::@8 dominated by  main::@1 main::@2 test_16u test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @21 main @begin 
test_16u::@9 dominated by  main::@1 main::@2 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @21 main @begin 
test_16u::@10 dominated by  main::@1 main::@2 test_16u::@10 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @21 main @begin 
test_16u::@11 dominated by  main::@1 main::@2 test_16u::@11 test_16u::@10 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @21 main @begin 
test_16u::@return dominated by  main::@1 main::@2 test_16u::@11 test_16u::@10 test_16u test_16u::@9 test_16u::@5 test_16u::@6 test_16u::@7 test_16u::@8 test_16u::@1 test_16u::@3 test_16u::@4 @21 main @begin test_16u::@return 
test_8u dominated by  main::@1 test_8u @21 main @begin 
test_8u::@1 dominated by  main::@1 test_8u @21 main @begin test_8u::@1 
test_8u::@3 dominated by  main::@1 test_8u @21 main @begin test_8u::@3 test_8u::@1 
test_8u::@4 dominated by  main::@1 test_8u @21 main @begin test_8u::@3 test_8u::@4 test_8u::@1 
test_8u::@5 dominated by  main::@1 test_8u @21 main @begin test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@6 dominated by  main::@1 test_8u @21 main @begin test_8u::@6 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@7 dominated by  main::@1 test_8u @21 main @begin test_8u::@6 test_8u::@7 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@8 dominated by  main::@1 test_8u @21 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@9 dominated by  main::@1 test_8u @21 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@10 dominated by  main::@1 test_8u @21 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@11 dominated by  main::@1 test_8u @21 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
test_8u::@return dominated by  main::@1 test_8u @21 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@11 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 test_8u::@return 
test_8u::@12 dominated by  main::@1 test_8u @21 main @begin test_8u::@6 test_8u::@7 test_8u::@8 test_8u::@9 test_8u::@10 test_8u::@12 test_8u::@11 test_8u::@3 test_8u::@4 test_8u::@5 test_8u::@1 
print_cls dominated by  print_cls @21 main @begin 
print_cls::@1 dominated by  print_cls @21 main @begin print_cls::@1 
print_cls::@return dominated by  print_cls @21 main @begin print_cls::@return print_cls::@1 

NATURAL LOOPS
Found back edge: Loop head: test_16s::@1 tails: test_16s::@11 blocks: null
Found back edge: Loop head: print_ln::@1 tails: print_ln::@1 blocks: null
Found back edge: Loop head: print_str::@1 tails: print_str::@2 blocks: null
Found back edge: Loop head: divr16u::@1 tails: divr16u::@3 blocks: null
Found back edge: Loop head: test_8s::@1 tails: test_8s::@11 blocks: null
Found back edge: Loop head: divr8u::@1 tails: divr8u::@3 blocks: null
Found back edge: Loop head: test_16u::@1 tails: test_16u::@11 blocks: null
Found back edge: Loop head: test_8u::@1 tails: test_8u::@12 blocks: null
Found back edge: Loop head: print_cls::@1 tails: print_cls::@1 blocks: null
Populated: Loop head: test_16s::@1 tails: test_16s::@11 blocks: test_16s::@11 test_16s::@10 test_16s::@9 test_16s::@8 test_16s::@7 test_16s::@6 test_16s::@5 test_16s::@4 test_16s::@3 test_16s::@1 
Populated: Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Populated: Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Populated: Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4 
Populated: Loop head: test_8s::@1 tails: test_8s::@11 blocks: test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1 
Populated: Loop head: divr8u::@1 tails: divr8u::@3 blocks: divr8u::@3 divr8u::@2 divr8u::@5 divr8u::@1 divr8u::@4 
Populated: Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1 
Populated: Loop head: test_8u::@1 tails: test_8u::@12 blocks: test_8u::@12 test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1 
Populated: Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Loop head: test_16s::@1 tails: test_16s::@11 blocks: test_16s::@11 test_16s::@10 test_16s::@9 test_16s::@8 test_16s::@7 test_16s::@6 test_16s::@5 test_16s::@4 test_16s::@3 test_16s::@1 
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4 
Loop head: test_8s::@1 tails: test_8s::@11 blocks: test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1 
Loop head: divr8u::@1 tails: divr8u::@3 blocks: divr8u::@3 divr8u::@2 divr8u::@5 divr8u::@1 divr8u::@4 
Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1 
Loop head: test_8u::@1 tails: test_8u::@12 blocks: test_8u::@12 test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1 
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 0 loops in scope [main]
Found 1 loops in scope [print_cls]
  Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1 
Found 1 loops in scope [test_8u]
  Loop head: test_8u::@1 tails: test_8u::@12 blocks: test_8u::@12 test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1 
Found 1 loops in scope [test_16u]
  Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1 
Found 1 loops in scope [test_8s]
  Loop head: test_8s::@1 tails: test_8s::@11 blocks: test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1 
Found 1 loops in scope [test_16s]
  Loop head: test_16s::@1 tails: test_16s::@11 blocks: test_16s::@11 test_16s::@10 test_16s::@9 test_16s::@8 test_16s::@7 test_16s::@6 test_16s::@5 test_16s::@4 test_16s::@3 test_16s::@1 
Found 0 loops in scope [div8u]
Found 0 loops in scope [print_byte]
Found 1 loops in scope [print_str]
  Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1 
Found 1 loops in scope [print_ln]
  Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1 
Found 0 loops in scope [div16u]
Found 0 loops in scope [print_word]
Found 0 loops in scope [div8s]
Found 0 loops in scope [print_sbyte]
Found 0 loops in scope [div16s]
Found 0 loops in scope [print_sword]
Found 1 loops in scope [divr8u]
  Loop head: divr8u::@1 tails: divr8u::@3 blocks: divr8u::@3 divr8u::@2 divr8u::@5 divr8u::@1 divr8u::@4 
Found 0 loops in scope [print_char]
Found 1 loops in scope [divr16u]
  Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4 
Loop head: test_16s::@1 tails: test_16s::@11 blocks: test_16s::@11 test_16s::@10 test_16s::@9 test_16s::@8 test_16s::@7 test_16s::@6 test_16s::@5 test_16s::@4 test_16s::@3 test_16s::@1  depth: 1
Loop head: print_ln::@1 tails: print_ln::@1 blocks: print_ln::@1  depth: 2
Loop head: print_str::@1 tails: print_str::@2 blocks: print_str::@2 print_str::@1  depth: 2
Loop head: divr16u::@1 tails: divr16u::@3 blocks: divr16u::@3 divr16u::@2 divr16u::@5 divr16u::@1 divr16u::@4  depth: 2
Loop head: test_8s::@1 tails: test_8s::@11 blocks: test_8s::@11 test_8s::@10 test_8s::@9 test_8s::@8 test_8s::@7 test_8s::@6 test_8s::@5 test_8s::@4 test_8s::@3 test_8s::@1  depth: 1
Loop head: divr8u::@1 tails: divr8u::@3 blocks: divr8u::@3 divr8u::@2 divr8u::@5 divr8u::@1 divr8u::@4  depth: 2
Loop head: test_16u::@1 tails: test_16u::@11 blocks: test_16u::@11 test_16u::@10 test_16u::@9 test_16u::@8 test_16u::@7 test_16u::@6 test_16u::@5 test_16u::@4 test_16u::@3 test_16u::@1  depth: 1
Loop head: test_8u::@1 tails: test_8u::@12 blocks: test_8u::@12 test_8u::@11 test_8u::@10 test_8u::@9 test_8u::@8 test_8u::@7 test_8u::@6 test_8u::@5 test_8u::@4 test_8u::@3 test_8u::@1  depth: 1
Loop head: print_cls::@1 tails: print_cls::@1 blocks: print_cls::@1  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(byte*) char_cursor
(byte*) char_cursor#1 101.0
(byte*) char_cursor#126 15.607142857142856
(byte*) char_cursor#128 3.0
(byte*) char_cursor#129 15.999999999999998
(byte*) char_cursor#130 3.0
(byte*) char_cursor#131 15.999999999999998
(byte*) char_cursor#132 24.0
(byte*) char_cursor#133 17.333333333333332
(byte*) char_cursor#135 2.4444444444444446
(byte*~) char_cursor#155 22.0
(byte*~) char_cursor#162 22.0
(byte*) char_cursor#17 2.0178571428571432
(byte*~) char_cursor#179 22.0
(byte*~) char_cursor#185 22.0
(byte*) char_cursor#80 6.0
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word~) div16s::$2 2.0
(signed word~) div16s::$7 1.0
(signed word) div16s::dividend
(signed word) div16s::dividend#0 5.0
(word) div16s::dividendu
(word) div16s::dividendu#3 0.8571428571428571
(word~) div16s::dividendu#7 4.0
(word~) div16s::dividendu#8 4.0
(signed word) div16s::divisor
(signed word) div16s::divisor#0 2.142857142857143
(word) div16s::divisoru
(word) div16s::divisoru#3 3.0
(word~) div16s::divisoru#4 4.0
(word~) div16s::divisoru#5 4.0
(byte) div16s::neg
(byte) div16s::neg#2 2.0
(byte) div16s::neg#3 1.0
(byte) div16s::neg#4 1.0
(word) div16s::resultu
(word) div16s::resultu#0 0.6666666666666666
(signed word) div16s::return
(signed word) div16s::return#0 4.0
(signed word) div16s::return#2 5.0
(signed word) div16s::return#3 22.0
(signed word~) div16s::return#6 2.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(word) div16u::dividend
(word) div16u::dividend#0 2.0
(word) div16u::dividend#1 11.0
(word) div16u::dividend#2 15.0
(word) div16u::divisor
(word) div16u::divisor#0 4.0
(word) div16u::divisor#1 22.0
(word) div16u::divisor#2 7.5
(word) div16u::return
(word) div16u::return#0 3.75
(word) div16u::return#2 4.0
(word) div16u::return#3 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$2 2.0
(signed byte~) div8s::$7 1.0
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 5.0
(byte) div8s::dividendu
(byte) div8s::dividendu#3 0.8571428571428571
(byte~) div8s::dividendu#7 4.0
(byte~) div8s::dividendu#8 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 2.142857142857143
(byte) div8s::divisoru
(byte) div8s::divisoru#3 3.0
(byte~) div8s::divisoru#4 4.0
(byte~) div8s::divisoru#5 4.0
(byte) div8s::neg
(byte) div8s::neg#2 2.0
(byte) div8s::neg#3 1.0
(byte) div8s::neg#4 1.0
(byte) div8s::resultu
(byte) div8s::resultu#0 0.6666666666666666
(signed byte) div8s::return
(signed byte) div8s::return#0 4.0
(signed byte) div8s::return#2 5.0
(signed byte) div8s::return#3 22.0
(signed byte~) div8s::return#6 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(byte) div8u::dividend
(byte) div8u::dividend#0 2.0
(byte) div8u::dividend#1 11.0
(byte) div8u::dividend#2 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 4.0
(byte) div8u::divisor#1 22.0
(byte) div8u::divisor#2 7.5
(byte) div8u::return
(byte) div8u::return#0 3.75
(byte) div8u::return#2 4.0
(byte) div8u::return#3 22.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 202.0
(byte~) divr16u::$2 202.0
(word) divr16u::dividend
(word) divr16u::dividend#0 1.3333333333333333
(word) divr16u::dividend#1 25.25
(word) divr16u::dividend#2 43.57142857142858
(word) divr16u::divisor
(word) divr16u::divisor#0 12.0
(byte) divr16u::i
(byte) divr16u::i#1 151.5
(byte) divr16u::i#2 15.538461538461538
(word) divr16u::quotient
(word) divr16u::quotient#1 151.5
(word) divr16u::quotient#2 101.0
(word) divr16u::quotient#3 25.25
(word) divr16u::rem
(word) divr16u::rem#1 75.75
(word) divr16u::rem#10 3.8023255813953494
(word) divr16u::rem#2 202.0
(word) divr16u::rem#3 202.0
(word) divr16u::rem#4 202.0
(word) divr16u::rem#5 101.0
(word) divr16u::return
(word) divr16u::return#0 4.0
(word) divr16u::return#1 61.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 202.0
(byte) divr8u::dividend
(byte) divr8u::dividend#0 1.3333333333333333
(byte) divr8u::dividend#1 25.25
(byte) divr8u::dividend#2 50.83333333333333
(byte) divr8u::divisor
(byte) divr8u::divisor#0 12.75
(byte) divr8u::i
(byte) divr8u::i#1 151.5
(byte) divr8u::i#2 16.833333333333332
(byte) divr8u::quotient
(byte) divr8u::quotient#1 151.5
(byte) divr8u::quotient#2 101.0
(byte) divr8u::quotient#3 28.857142857142858
(byte) divr8u::rem
(byte) divr8u::rem#1 101.0
(byte) divr8u::rem#10 3.8023255813953494
(byte) divr8u::rem#2 202.0
(byte) divr8u::rem#3 202.0
(byte) divr8u::rem#4 202.0
(byte) divr8u::rem#5 101.0
(byte) divr8u::return
(byte) divr8u::return#0 4.0
(byte) divr8u::return#1 61.0
(byte*) line_cursor
(byte*) line_cursor#1 3.9099999999999993
(byte*) line_cursor#20 204.0
(byte*) line_cursor#39 46.0
(byte*) line_cursor#41 0.9565217391304348
(void()) main()
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 4.0
(byte~) print_byte::$2 4.0
(byte) print_byte::b
(byte) print_byte::b#1 4.0
(byte) print_byte::b#2 4.0
(byte) print_byte::b#3 22.0
(byte) print_byte::b#4 22.0
(byte) print_byte::b#5 22.0
(byte) print_byte::b#6 22.0
(byte) print_byte::b#7 13.5
(byte~) print_byte::b#9 4.0
(byte[]) print_byte::hextab
(void()) print_char((byte) print_char::ch)
(byte) print_char::ch
(byte) print_char::ch#2 4.0
(byte) print_char::ch#3 4.0
(byte) print_char::ch#4 6.0
(void()) print_cls()
(byte*) print_cls::sc
(byte*) print_cls::sc#1 16.5
(byte*) print_cls::sc#2 16.5
(void()) print_ln()
(void()) print_sbyte((signed byte) print_sbyte::b)
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 4.0
(signed byte) print_sbyte::b#1 11.0
(signed byte) print_sbyte::b#2 22.0
(signed byte) print_sbyte::b#3 22.0
(signed byte) print_sbyte::b#4 22.0
(signed byte) print_sbyte::b#5 12.5
(signed byte) print_sbyte::b#6 4.0
(void()) print_str((byte*) print_str::str)
(byte*) print_str::str
(byte*) print_str::str#0 202.0
(byte*) print_str::str#13 101.5
(byte*) print_str::str#15 2.0
(void()) print_sword((signed word) print_sword::w)
(signed word) print_sword::w
(signed word) print_sword::w#0 4.0
(signed word) print_sword::w#1 11.0
(signed word) print_sword::w#2 22.0
(signed word) print_sword::w#3 22.0
(signed word) print_sword::w#4 22.0
(signed word) print_sword::w#5 12.5
(signed word) print_sword::w#6 4.0
(void()) print_word((word) print_word::w)
(word) print_word::w
(word) print_word::w#1 11.0
(word) print_word::w#2 22.0
(word) print_word::w#3 22.0
(word) print_word::w#4 22.0
(word) print_word::w#5 16.666666666666664
(word~) print_word::w#7 4.0
(signed word) rem16s
(signed word) rem16s#1 2.0
(signed word) rem16s#17 110.0
(signed word) rem16s#3 1.0833333333333333
(signed word~) rem16s#32 4.0
(word) rem16u
(word) rem16u#31 130.0
(word) rem16u#35 4.4
(signed byte) rem8s
(signed byte) rem8s#1 2.0
(signed byte) rem8s#18 110.0
(signed byte) rem8s#3 1.0833333333333333
(signed byte~) rem8s#33 4.0
(byte) rem8u
(byte) rem8u#31 130.0
(byte) rem8u#36 4.4
(void()) test_16s()
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 4.714285714285714
(signed word[]) test_16s::dividends
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 3.0
(signed word[]) test_16s::divisors
(byte) test_16s::i
(byte) test_16s::i#1 16.5
(byte) test_16s::i#10 1.76
(signed word) test_16s::res
(signed word) test_16s::res#0 2.2
(void()) test_16u()
(word) test_16u::dividend
(word) test_16u::dividend#0 4.714285714285714
(word[]) test_16u::dividends
(word) test_16u::divisor
(word) test_16u::divisor#0 3.0
(word[]) test_16u::divisors
(byte) test_16u::i
(byte) test_16u::i#1 16.5
(byte) test_16u::i#10 1.76
(word) test_16u::res
(word) test_16u::res#0 2.2
(void()) test_8s()
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 4.714285714285714
(signed byte[]) test_8s::dividends
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 3.0
(signed byte[]) test_8s::divisors
(byte) test_8s::i
(byte) test_8s::i#1 16.5
(byte) test_8s::i#10 1.76
(signed byte) test_8s::res
(signed byte) test_8s::res#0 2.2
(void()) test_8u()
(byte) test_8u::dividend
(byte) test_8u::dividend#0 4.714285714285714
(byte[]) test_8u::dividends
(byte) test_8u::divisor
(byte) test_8u::divisor#0 3.3000000000000003
(byte[]) test_8u::divisors
(byte) test_8u::i
(byte) test_8u::i#1 11.0
(byte) test_8u::i#10 1.8333333333333333
(byte) test_8u::res
(byte) test_8u::res#0 2.4444444444444446

Initial phi equivalence classes
[ test_16s::i#10 test_16s::i#1 ]
[ rem16s#17 rem16s#3 rem16s#32 rem16s#1 ]
[ line_cursor#20 line_cursor#39 line_cursor#1 line_cursor#41 ]
[ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ]
[ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ]
[ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ char_cursor#80 char_cursor#133 char_cursor#130 char_cursor#132 char_cursor#128 char_cursor#129 char_cursor#155 char_cursor#126 char_cursor#17 char_cursor#162 char_cursor#135 char_cursor#131 char_cursor#1 char_cursor#179 char_cursor#185 ]
[ print_str::str#13 print_str::str#15 print_str::str#0 ]
[ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ]
[ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ]
[ div16s::neg#4 div16s::neg#3 div16s::neg#2 ]
[ div16s::return#2 div16s::return#6 div16s::return#0 ]
[ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ]
[ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ]
[ divr16u::rem#4 rem16u#31 divr16u::rem#10 rem16u#35 divr16u::rem#5 divr16u::rem#1 divr16u::rem#2 divr16u::rem#3 ]
[ divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 ]
[ divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ]
[ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
[ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
[ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
[ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
[ div8s::return#2 div8s::return#6 div8s::return#0 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
[ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
[ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
[ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ test_16u::i#10 test_16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
Added variable test_16s::dividend#0 to zero page equivalence class [ test_16s::dividend#0 ]
Added variable test_16s::divisor#0 to zero page equivalence class [ test_16s::divisor#0 ]
Added variable div16s::dividend#0 to zero page equivalence class [ div16s::dividend#0 ]
Added variable div16s::divisor#0 to zero page equivalence class [ div16s::divisor#0 ]
Added variable div16s::return#3 to zero page equivalence class [ div16s::return#3 ]
Added variable test_16s::res#0 to zero page equivalence class [ test_16s::res#0 ]
Added variable print_byte::$0 to zero page equivalence class [ print_byte::$0 ]
Added variable print_byte::$2 to zero page equivalence class [ print_byte::$2 ]
Added variable div16s::$2 to zero page equivalence class [ div16s::$2 ]
Added variable div16s::$7 to zero page equivalence class [ div16s::$7 ]
Added variable div16u::return#2 to zero page equivalence class [ div16u::return#2 ]
Added variable div16s::resultu#0 to zero page equivalence class [ div16s::resultu#0 ]
Added variable divr16u::divisor#0 to zero page equivalence class [ divr16u::divisor#0 ]
Added variable divr16u::return#0 to zero page equivalence class [ divr16u::return#0 ]
Added variable div16u::return#0 to zero page equivalence class [ div16u::return#0 ]
Added variable divr16u::$1 to zero page equivalence class [ divr16u::$1 ]
Added variable divr16u::$2 to zero page equivalence class [ divr16u::$2 ]
Added variable test_8s::dividend#0 to zero page equivalence class [ test_8s::dividend#0 ]
Added variable test_8s::divisor#0 to zero page equivalence class [ test_8s::divisor#0 ]
Added variable div8s::dividend#0 to zero page equivalence class [ div8s::dividend#0 ]
Added variable div8s::divisor#0 to zero page equivalence class [ div8s::divisor#0 ]
Added variable div8s::return#3 to zero page equivalence class [ div8s::return#3 ]
Added variable test_8s::res#0 to zero page equivalence class [ test_8s::res#0 ]
Added variable div8s::$2 to zero page equivalence class [ div8s::$2 ]
Added variable div8s::$7 to zero page equivalence class [ div8s::$7 ]
Added variable div8u::return#2 to zero page equivalence class [ div8u::return#2 ]
Added variable div8s::resultu#0 to zero page equivalence class [ div8s::resultu#0 ]
Added variable divr8u::divisor#0 to zero page equivalence class [ divr8u::divisor#0 ]
Added variable divr8u::return#0 to zero page equivalence class [ divr8u::return#0 ]
Added variable div8u::return#0 to zero page equivalence class [ div8u::return#0 ]
Added variable divr8u::$1 to zero page equivalence class [ divr8u::$1 ]
Added variable test_16u::dividend#0 to zero page equivalence class [ test_16u::dividend#0 ]
Added variable test_16u::divisor#0 to zero page equivalence class [ test_16u::divisor#0 ]
Added variable div16u::return#3 to zero page equivalence class [ div16u::return#3 ]
Added variable test_16u::res#0 to zero page equivalence class [ test_16u::res#0 ]
Added variable test_8u::dividend#0 to zero page equivalence class [ test_8u::dividend#0 ]
Added variable test_8u::divisor#0 to zero page equivalence class [ test_8u::divisor#0 ]
Added variable div8u::return#3 to zero page equivalence class [ div8u::return#3 ]
Added variable test_8u::res#0 to zero page equivalence class [ test_8u::res#0 ]
Complete equivalence classes
[ test_16s::i#10 test_16s::i#1 ]
[ rem16s#17 rem16s#3 rem16s#32 rem16s#1 ]
[ line_cursor#20 line_cursor#39 line_cursor#1 line_cursor#41 ]
[ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ]
[ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ]
[ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
[ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
[ char_cursor#80 char_cursor#133 char_cursor#130 char_cursor#132 char_cursor#128 char_cursor#129 char_cursor#155 char_cursor#126 char_cursor#17 char_cursor#162 char_cursor#135 char_cursor#131 char_cursor#1 char_cursor#179 char_cursor#185 ]
[ print_str::str#13 print_str::str#15 print_str::str#0 ]
[ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ]
[ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ]
[ div16s::neg#4 div16s::neg#3 div16s::neg#2 ]
[ div16s::return#2 div16s::return#6 div16s::return#0 ]
[ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ]
[ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ]
[ divr16u::rem#4 rem16u#31 divr16u::rem#10 rem16u#35 divr16u::rem#5 divr16u::rem#1 divr16u::rem#2 divr16u::rem#3 ]
[ divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 ]
[ divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 ]
[ divr16u::i#2 divr16u::i#1 ]
[ test_8s::i#10 test_8s::i#1 ]
[ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ]
[ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
[ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
[ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
[ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
[ div8s::return#2 div8s::return#6 div8s::return#0 ]
[ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
[ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
[ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
[ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
[ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
[ divr8u::i#2 divr8u::i#1 ]
[ test_16u::i#10 test_16u::i#1 ]
[ test_8u::i#10 test_8u::i#1 ]
[ print_cls::sc#2 print_cls::sc#1 ]
[ test_16s::dividend#0 ]
[ test_16s::divisor#0 ]
[ div16s::dividend#0 ]
[ div16s::divisor#0 ]
[ div16s::return#3 ]
[ test_16s::res#0 ]
[ print_byte::$0 ]
[ print_byte::$2 ]
[ div16s::$2 ]
[ div16s::$7 ]
[ div16u::return#2 ]
[ div16s::resultu#0 ]
[ divr16u::divisor#0 ]
[ divr16u::return#0 ]
[ div16u::return#0 ]
[ divr16u::$1 ]
[ divr16u::$2 ]
[ test_8s::dividend#0 ]
[ test_8s::divisor#0 ]
[ div8s::dividend#0 ]
[ div8s::divisor#0 ]
[ div8s::return#3 ]
[ test_8s::res#0 ]
[ div8s::$2 ]
[ div8s::$7 ]
[ div8u::return#2 ]
[ div8s::resultu#0 ]
[ divr8u::divisor#0 ]
[ divr8u::return#0 ]
[ div8u::return#0 ]
[ divr8u::$1 ]
[ test_16u::dividend#0 ]
[ test_16u::divisor#0 ]
[ div16u::return#3 ]
[ test_16u::res#0 ]
[ test_8u::dividend#0 ]
[ test_8u::divisor#0 ]
[ div8u::return#3 ]
[ test_8u::res#0 ]
Allocated zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Allocated zp ZP_WORD:3 [ rem16s#17 rem16s#3 rem16s#32 rem16s#1 ]
Allocated zp ZP_WORD:5 [ line_cursor#20 line_cursor#39 line_cursor#1 line_cursor#41 ]
Allocated zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ]
Allocated zp ZP_WORD:9 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ]
Allocated zp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Allocated zp ZP_BYTE:12 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
Allocated zp ZP_WORD:13 [ char_cursor#80 char_cursor#133 char_cursor#130 char_cursor#132 char_cursor#128 char_cursor#129 char_cursor#155 char_cursor#126 char_cursor#17 char_cursor#162 char_cursor#135 char_cursor#131 char_cursor#1 char_cursor#179 char_cursor#185 ]
Allocated zp ZP_WORD:15 [ print_str::str#13 print_str::str#15 print_str::str#0 ]
Allocated zp ZP_WORD:17 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ]
Allocated zp ZP_WORD:19 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ]
Allocated zp ZP_BYTE:21 [ div16s::neg#4 div16s::neg#3 div16s::neg#2 ]
Allocated zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 ]
Allocated zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ]
Allocated zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ]
Allocated zp ZP_WORD:28 [ divr16u::rem#4 rem16u#31 divr16u::rem#10 rem16u#35 divr16u::rem#5 divr16u::rem#1 divr16u::rem#2 divr16u::rem#3 ]
Allocated zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 ]
Allocated zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 ]
Allocated zp ZP_BYTE:34 [ divr16u::i#2 divr16u::i#1 ]
Allocated zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ]
Allocated zp ZP_BYTE:36 [ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ]
Allocated zp ZP_BYTE:37 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Allocated zp ZP_BYTE:38 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Allocated zp ZP_BYTE:39 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
Allocated zp ZP_BYTE:40 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
Allocated zp ZP_BYTE:41 [ div8s::return#2 div8s::return#6 div8s::return#0 ]
Allocated zp ZP_BYTE:42 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
Allocated zp ZP_BYTE:43 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
Allocated zp ZP_BYTE:44 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Allocated zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Allocated zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Allocated zp ZP_BYTE:47 [ divr8u::i#2 divr8u::i#1 ]
Allocated zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ]
Allocated zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ]
Allocated zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ]
Allocated zp ZP_WORD:52 [ test_16s::dividend#0 ]
Allocated zp ZP_WORD:54 [ test_16s::divisor#0 ]
Allocated zp ZP_WORD:56 [ div16s::dividend#0 ]
Allocated zp ZP_WORD:58 [ div16s::divisor#0 ]
Allocated zp ZP_WORD:60 [ div16s::return#3 ]
Allocated zp ZP_WORD:62 [ test_16s::res#0 ]
Allocated zp ZP_BYTE:64 [ print_byte::$0 ]
Allocated zp ZP_BYTE:65 [ print_byte::$2 ]
Allocated zp ZP_WORD:66 [ div16s::$2 ]
Allocated zp ZP_WORD:68 [ div16s::$7 ]
Allocated zp ZP_WORD:70 [ div16u::return#2 ]
Allocated zp ZP_WORD:72 [ div16s::resultu#0 ]
Allocated zp ZP_WORD:74 [ divr16u::divisor#0 ]
Allocated zp ZP_WORD:76 [ divr16u::return#0 ]
Allocated zp ZP_WORD:78 [ div16u::return#0 ]
Allocated zp ZP_BYTE:80 [ divr16u::$1 ]
Allocated zp ZP_BYTE:81 [ divr16u::$2 ]
Allocated zp ZP_BYTE:82 [ test_8s::dividend#0 ]
Allocated zp ZP_BYTE:83 [ test_8s::divisor#0 ]
Allocated zp ZP_BYTE:84 [ div8s::dividend#0 ]
Allocated zp ZP_BYTE:85 [ div8s::divisor#0 ]
Allocated zp ZP_BYTE:86 [ div8s::return#3 ]
Allocated zp ZP_BYTE:87 [ test_8s::res#0 ]
Allocated zp ZP_BYTE:88 [ div8s::$2 ]
Allocated zp ZP_BYTE:89 [ div8s::$7 ]
Allocated zp ZP_BYTE:90 [ div8u::return#2 ]
Allocated zp ZP_BYTE:91 [ div8s::resultu#0 ]
Allocated zp ZP_BYTE:92 [ divr8u::divisor#0 ]
Allocated zp ZP_BYTE:93 [ divr8u::return#0 ]
Allocated zp ZP_BYTE:94 [ div8u::return#0 ]
Allocated zp ZP_BYTE:95 [ divr8u::$1 ]
Allocated zp ZP_WORD:96 [ test_16u::dividend#0 ]
Allocated zp ZP_WORD:98 [ test_16u::divisor#0 ]
Allocated zp ZP_WORD:100 [ div16u::return#3 ]
Allocated zp ZP_WORD:102 [ test_16u::res#0 ]
Allocated zp ZP_BYTE:104 [ test_8u::dividend#0 ]
Allocated zp ZP_BYTE:105 [ test_8u::divisor#0 ]
Allocated zp ZP_BYTE:106 [ div8u::return#3 ]
Allocated zp ZP_BYTE:107 [ test_8u::res#0 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
  .label char_cursor = $d
  .label line_cursor = 5
  .label rem8s = $24
  .label rem16s = 3
  .label rem8u = $2c
  .label rem16u = $1c
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @21 [phi:@begin->@21]
b21_from_bbegin:
  jmp b21
//SEG4 @21
b21:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @21 to main [phi:@21->main]
main_from_b21:
  jsr main
//SEG7 [3] phi from @21 to @end [phi:@21->@end]
bend_from_b21:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [272] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call test_8u param-assignment [ line_cursor#1 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr8u::rem#10 ] )
  //SEG15 [243] phi from main::@1 to test_8u [phi:main::@1->test_8u]
  test_8u_from_b1:
    jsr test_8u
  //SEG16 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [9] call test_16u param-assignment [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] )
  //SEG19 [214] phi from main::@2 to test_16u [phi:main::@2->test_16u]
  test_16u_from_b2:
    jsr test_16u
  //SEG20 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG21 main::@3
  b3:
  //SEG22 [11] call test_8s param-assignment [ line_cursor#1 divr16u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 ] )
  //SEG23 [130] phi from main::@3 to test_8s [phi:main::@3->test_8s]
  test_8s_from_b3:
    jsr test_8s
  //SEG24 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG25 main::@4
  b4:
  //SEG26 [13] call test_16s param-assignment [ ] ( main:2 [ ] )
  //SEG27 [15] phi from main::@4 to test_16s [phi:main::@4->test_16s]
  test_16s_from_b4:
    jsr test_16s
    jmp breturn
  //SEG28 main::@return
  breturn:
  //SEG29 [14] return  [ ] ( main:2 [ ] )
    rts
}
//SEG30 test_16s
test_16s: {
    .label dividend = $34
    .label divisor = $36
    .label res = $3e
    .label i = 2
  //SEG31 [16] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  b1_from_test_16s:
  //SEG32 [16] phi (signed word) rem16s#17 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16s->test_16s::@1#0] -- vwsz1=vbuc1 
    lda #<0
    sta rem16s
    lda #>0
    sta rem16s+1
  //SEG33 [16] phi (byte) test_16s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16s->test_16s::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG34 [16] phi from test_16s::@11 to test_16s::@1 [phi:test_16s::@11->test_16s::@1]
  b1_from_b11:
  //SEG35 [16] phi (signed word) rem16s#17 = (signed word) rem16s#3 [phi:test_16s::@11->test_16s::@1#0] -- register_copy 
  //SEG36 [16] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@11->test_16s::@1#1] -- register_copy 
    jmp b1
  //SEG37 test_16s::@1
  b1:
  //SEG38 [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG39 [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG40 [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda dividend
    sta div16s.dividend
    lda dividend+1
    sta div16s.dividend+1
  //SEG41 [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta div16s.divisor
    lda divisor+1
    sta div16s.divisor+1
  //SEG42 [21] call div16s param-assignment [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 line_cursor#1 divr16u::rem#10 ] )
    jsr div16s
  //SEG43 [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda div16s.return
    sta div16s.return_3
    lda div16s.return+1
    sta div16s.return_3+1
    jmp b3
  //SEG44 test_16s::@3
  b3:
  //SEG45 [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda div16s.return_3
    sta res
    lda div16s.return_3+1
    sta res+1
  //SEG46 [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda dividend
    sta print_sword.w
    lda dividend+1
    sta print_sword.w+1
  //SEG47 [25] (byte*~) char_cursor#155 ← (byte*) line_cursor#1 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG48 [26] call print_sword param-assignment [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG49 [49] phi from test_16s::@3 to print_sword [phi:test_16s::@3->print_sword]
  print_sword_from_b3:
  //SEG50 [49] phi (byte*) char_cursor#129 = (byte*~) char_cursor#155 [phi:test_16s::@3->print_sword#0] -- register_copy 
  //SEG51 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#1 [phi:test_16s::@3->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG52 [27] phi from test_16s::@3 to test_16s::@4 [phi:test_16s::@3->test_16s::@4]
  b4_from_b3:
    jmp b4
  //SEG53 test_16s::@4
  b4:
  //SEG54 [28] call print_str param-assignment [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  //SEG55 [76] phi from test_16s::@4 to print_str [phi:test_16s::@4->print_str]
  print_str_from_b4:
  //SEG56 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str [phi:test_16s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG57 test_16s::@5
  b5:
  //SEG58 [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta print_sword.w
    lda divisor+1
    sta print_sword.w+1
  //SEG59 [30] call print_sword param-assignment [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG60 [49] phi from test_16s::@5 to print_sword [phi:test_16s::@5->print_sword]
  print_sword_from_b5:
  //SEG61 [49] phi (byte*) char_cursor#129 = (byte*) char_cursor#126 [phi:test_16s::@5->print_sword#0] -- register_copy 
  //SEG62 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#2 [phi:test_16s::@5->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG63 [31] phi from test_16s::@5 to test_16s::@6 [phi:test_16s::@5->test_16s::@6]
  b6_from_b5:
    jmp b6
  //SEG64 test_16s::@6
  b6:
  //SEG65 [32] call print_str param-assignment [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  //SEG66 [76] phi from test_16s::@6 to print_str [phi:test_16s::@6->print_str]
  print_str_from_b6:
  //SEG67 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str1 [phi:test_16s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG68 test_16s::@7
  b7:
  //SEG69 [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda res
    sta print_sword.w
    lda res+1
    sta print_sword.w+1
  //SEG70 [34] call print_sword param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG71 [49] phi from test_16s::@7 to print_sword [phi:test_16s::@7->print_sword]
  print_sword_from_b7:
  //SEG72 [49] phi (byte*) char_cursor#129 = (byte*) char_cursor#126 [phi:test_16s::@7->print_sword#0] -- register_copy 
  //SEG73 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:test_16s::@7->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG74 [35] phi from test_16s::@7 to test_16s::@8 [phi:test_16s::@7->test_16s::@8]
  b8_from_b7:
    jmp b8
  //SEG75 test_16s::@8
  b8:
  //SEG76 [36] call print_str param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  //SEG77 [76] phi from test_16s::@8 to print_str [phi:test_16s::@8->print_str]
  print_str_from_b8:
  //SEG78 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str2 [phi:test_16s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG79 test_16s::@9
  b9:
  //SEG80 [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda rem16s
    sta print_sword.w
    lda rem16s+1
    sta print_sword.w+1
  //SEG81 [38] call print_sword param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG82 [49] phi from test_16s::@9 to print_sword [phi:test_16s::@9->print_sword]
  print_sword_from_b9:
  //SEG83 [49] phi (byte*) char_cursor#129 = (byte*) char_cursor#126 [phi:test_16s::@9->print_sword#0] -- register_copy 
  //SEG84 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#4 [phi:test_16s::@9->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG85 [39] phi from test_16s::@9 to test_16s::@10 [phi:test_16s::@9->test_16s::@10]
  b10_from_b9:
    jmp b10
  //SEG86 test_16s::@10
  b10:
  //SEG87 [40] call print_ln param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 ] )
  //SEG88 [44] phi from test_16s::@10 to print_ln [phi:test_16s::@10->print_ln]
  print_ln_from_b10:
  //SEG89 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#1 [phi:test_16s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG90 test_16s::@11
  b11:
  //SEG91 [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG92 [42] if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG93 test_16s::@return
  breturn:
  //SEG94 [43] return  [ ] ( main:2::test_16s:13 [ ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
//SEG95 print_ln
print_ln: {
  //SEG96 [45] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG97 [45] phi (byte*) line_cursor#20 = (byte*) line_cursor#39 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG98 print_ln::@1
  b1:
  //SEG99 [46] (byte*) line_cursor#1 ← (byte*) line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG100 [47] if((byte*) line_cursor#1<(byte*) char_cursor#17) goto print_ln::@1 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG101 print_ln::@return
  breturn:
  //SEG102 [48] return  [ line_cursor#1 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 ] )
    rts
}
//SEG103 print_sword
print_sword: {
    .label w = 7
  //SEG104 [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] ) -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG105 [51] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG106 print_sword::@2
  b2:
  //SEG107 [52] call print_char param-assignment [ char_cursor#17 print_sword::w#5 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] )
  //SEG108 [72] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG109 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#129 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG110 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG111 print_sword::@4
  b4:
  //SEG112 [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG113 [54] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  b1_from_print_sword:
  b1_from_b4:
  //SEG114 [54] phi (byte*) char_cursor#128 = (byte*) char_cursor#129 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG115 [54] phi (signed word) print_sword::w#6 = (signed word) print_sword::w#5 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG116 print_sword::@1
  b1:
  //SEG117 [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] ) -- vwuz1=vwuz2 
    lda w
    sta print_word.w
    lda w+1
    sta print_word.w+1
  //SEG118 [56] call print_word param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] )
  //SEG119 [58] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG120 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#128 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG121 [58] phi (word) print_word::w#5 = (word~) print_word::w#7 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG122 print_sword::@return
  breturn:
  //SEG123 [57] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] )
    rts
}
//SEG124 print_word
print_word: {
    .label w = 9
  //SEG125 [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG126 [60] call print_byte param-assignment [ char_cursor#17 print_word::w#5 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_word::w#5 ] )
  //SEG127 [64] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG128 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#132 [phi:print_word->print_byte#0] -- register_copy 
  //SEG129 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG130 print_word::@1
  b1:
  //SEG131 [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG132 [62] call print_byte param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] )
  //SEG133 [64] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG134 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#17 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG135 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG136 print_word::@return
  breturn:
  //SEG137 [63] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] )
    rts
}
//SEG138 print_byte
print_byte: {
    .label _0 = $40
    .label _2 = $41
    .label b = $b
  //SEG139 [65] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#133 print_byte::$0 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] ) -- vbuz1=vbuz2_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
    sta _0
  //SEG140 [66] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#133 print_char::ch#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _0
    lda hextab,y
    sta print_char.ch
  //SEG141 [67] call print_char param-assignment [ char_cursor#17 print_byte::b#7 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::b#7 ] )
  //SEG142 [72] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG143 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#133 [phi:print_byte->print_char#0] -- register_copy 
  //SEG144 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG145 print_byte::@1
  b1:
  //SEG146 [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and b
    sta _2
  //SEG147 [69] (byte) print_char::ch#3 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#17 print_char::ch#3 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_char::ch#3 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy _2
    lda hextab,y
    sta print_char.ch
  //SEG148 [70] call print_char param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] )
  //SEG149 [72] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG150 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#17 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG151 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG152 print_byte::@return
  breturn:
  //SEG153 [71] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG154 print_char
print_char: {
    .label ch = $c
  //SEG155 [73] *((byte*) char_cursor#80) ← (byte) print_char::ch#4 [ char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] ) -- _deref_pbuz1=vbuz2 
    lda ch
    ldy #0
    sta (char_cursor),y
  //SEG156 [74] (byte*) char_cursor#17 ← ++ (byte*) char_cursor#80 [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG157 print_char::@return
  breturn:
  //SEG158 [75] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] )
    rts
}
//SEG159 print_str
print_str: {
    .label str = $f
  //SEG160 [77] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG161 [77] phi (byte*) char_cursor#126 = (byte*) char_cursor#17 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG162 [77] phi (byte*) print_str::str#13 = (byte*) print_str::str#15 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG163 print_str::@1
  b1:
  //SEG164 [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG165 print_str::@return
  breturn:
  //SEG166 [79] return  [ char_cursor#126 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 ] )
    rts
  //SEG167 print_str::@2
  b2:
  //SEG168 [80] *((byte*) char_cursor#126) ← *((byte*) print_str::str#13) [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (char_cursor),y
  //SEG169 [81] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#126 [ print_str::str#13 char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_str::str#13 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG170 [82] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 [ print_str::str#0 char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG171 div16s
div16s: {
    .label _2 = $42
    .label _7 = $44
    .label neg = $15
    .label resultu = $48
    .label return = $16
    .label dividend = $38
    .label divisor = $3a
    .label return_3 = $3c
    .label dividendu = $11
    .label divisoru = $13
  //SEG172 [83] if((signed word) div16s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@16 [ div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ) -- vwsz1_ge_0_then_la1 
    lda dividend+1
    bpl b16
    jmp b7
  //SEG173 div16s::@7
  b7:
  //SEG174 [84] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda dividend
    eor #$ff
    adc #0
    sta _2
    lda dividend+1
    eor #$ff
    adc #0
    sta _2+1
  //SEG175 [85] (word~) div16s::dividendu#8 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda _2
    sta dividendu
    lda _2+1
    sta dividendu+1
  //SEG176 [86] phi from div16s::@7 to div16s::@2 [phi:div16s::@7->div16s::@2]
  b2_from_b7:
  //SEG177 [86] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#8 [phi:div16s::@7->div16s::@2#0] -- register_copy 
  //SEG178 [86] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div16s::@7->div16s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
  //SEG179 div16s::@2
  b2:
  //SEG180 [87] if((signed word) div16s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@17 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ) -- vwsz1_ge_0_then_la1 
    lda divisor+1
    bpl b17
    jmp b9
  //SEG181 div16s::@9
  b9:
  //SEG182 [88] (signed word~) div16s::$7 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda divisor
    eor #$ff
    adc #0
    sta _7
    lda divisor+1
    eor #$ff
    adc #0
    sta _7+1
  //SEG183 [89] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG184 [90] (word~) div16s::divisoru#5 ← (word)(signed word~) div16s::$7 [ div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda _7
    sta divisoru
    lda _7+1
    sta divisoru+1
  //SEG185 [91] phi from div16s::@17 div16s::@9 to div16s::@4 [phi:div16s::@17/div16s::@9->div16s::@4]
  b4_from_b17:
  b4_from_b9:
  //SEG186 [91] phi (byte) div16s::neg#4 = (byte) div16s::neg#3 [phi:div16s::@17/div16s::@9->div16s::@4#0] -- register_copy 
  //SEG187 [91] phi (word) div16s::divisoru#3 = (word~) div16s::divisoru#4 [phi:div16s::@17/div16s::@9->div16s::@4#1] -- register_copy 
    jmp b4
  //SEG188 div16s::@4
  b4:
  //SEG189 [92] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda dividendu
    sta div16u.dividend
    lda dividendu+1
    sta div16u.dividend+1
  //SEG190 [93] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda divisoru
    sta div16u.divisor
    lda divisoru+1
    sta div16u.divisor+1
  //SEG191 [94] call div16u param-assignment [ div16s::neg#4 div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] )
  //SEG192 [106] phi from div16s::@4 to div16u [phi:div16s::@4->div16u]
  div16u_from_b4:
  //SEG193 [106] phi (word) rem16u#31 = (word) divr16u::rem#10 [phi:div16s::@4->div16u#0] -- register_copy 
  //SEG194 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#0 [phi:div16s::@4->div16u#1] -- register_copy 
  //SEG195 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#0 [phi:div16s::@4->div16u#2] -- register_copy 
    jsr div16u
  //SEG196 [95] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#2 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda div16u.return
    sta div16u.return_2
    lda div16u.return+1
    sta div16u.return_2+1
    jmp b15
  //SEG197 div16s::@15
  b15:
  //SEG198 [96] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda div16u.return_2
    sta resultu
    lda div16u.return_2+1
    sta resultu+1
  //SEG199 [97] if((byte) div16s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@5 [ div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 ] ) -- vbuz1_neq_0_then_la1 
    lda neg
    bne b5
    jmp b18
  //SEG200 div16s::@18
  b18:
  //SEG201 [98] (signed word~) div16s::return#6 ← (signed word)(word) div16s::resultu#0 [ div16s::return#6 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda resultu
    sta return
    lda resultu+1
    sta return+1
  //SEG202 [99] (signed word~) rem16s#32 ← (signed word)(word) divr16u::rem#10 [ div16s::return#6 rem16s#32 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 rem16s#32 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda divr16u.rem
    sta rem16s
    lda divr16u.rem+1
    sta rem16s+1
  //SEG203 [100] phi from div16s::@18 div16s::@5 to div16s::@return [phi:div16s::@18/div16s::@5->div16s::@return]
  breturn_from_b18:
  breturn_from_b5:
  //SEG204 [100] phi (signed word) rem16s#3 = (signed word~) rem16s#32 [phi:div16s::@18/div16s::@5->div16s::@return#0] -- register_copy 
  //SEG205 [100] phi (signed word) div16s::return#2 = (signed word~) div16s::return#6 [phi:div16s::@18/div16s::@5->div16s::@return#1] -- register_copy 
    jmp breturn
  //SEG206 div16s::@return
  breturn:
  //SEG207 [101] return  [ rem16s#3 div16s::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 rem16s#3 div16s::return#2 divr16u::rem#10 ] )
    rts
  //SEG208 div16s::@5
  b5:
  //SEG209 [102] (signed word) rem16s#1 ← - (signed word)(word) divr16u::rem#10 [ div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda divr16u.rem
    eor #$ff
    adc #0
    sta rem16s
    lda divr16u.rem+1
    eor #$ff
    adc #0
    sta rem16s+1
  //SEG210 [103] (signed word) div16s::return#0 ← - (signed word)(word) div16s::resultu#0 [ divr16u::rem#10 div16s::return#0 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 div16s::return#0 rem16s#1 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda resultu
    eor #$ff
    adc #0
    sta return
    lda resultu+1
    eor #$ff
    adc #0
    sta return+1
    jmp breturn_from_b5
  //SEG211 div16s::@17
  b17:
  //SEG212 [104] (word~) div16s::divisoru#4 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta divisoru
    lda divisor+1
    sta divisoru+1
    jmp b4_from_b17
  //SEG213 div16s::@16
  b16:
  //SEG214 [105] (word~) div16s::dividendu#7 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta dividendu
    lda dividend+1
    sta dividendu+1
  //SEG215 [86] phi from div16s::@16 to div16s::@2 [phi:div16s::@16->div16s::@2]
  b2_from_b16:
  //SEG216 [86] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#7 [phi:div16s::@16->div16s::@2#0] -- register_copy 
  //SEG217 [86] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16s::@16->div16s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
}
//SEG218 div16u
div16u: {
    .label return = $4e
    .label dividend = $18
    .label divisor = $1a
    .label return_2 = $46
    .label return_3 = $64
  //SEG219 [107] (word) divr16u::dividend#0 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#0 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta divr16u.dividend
    lda dividend+1
    sta divr16u.dividend+1
  //SEG220 [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#0 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::dividend#0 divr16u::divisor#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#0 divr16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta divr16u.divisor
    lda divisor+1
    sta divr16u.divisor+1
  //SEG221 [109] call divr16u param-assignment [ divr16u::rem#10 divr16u::return#1 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#1 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#1 ] )
  //SEG222 [113] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
  //SEG223 [110] (word) divr16u::return#0 ← (word) divr16u::return#1 [ divr16u::rem#10 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#0 ] ) -- vwuz1=vwuz2 
    lda divr16u.return_1
    sta divr16u.return
    lda divr16u.return_1+1
    sta divr16u.return+1
    jmp b2
  //SEG224 div16u::@2
  b2:
  //SEG225 [111] (word) div16u::return#0 ← (word) divr16u::return#0 [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda divr16u.return
    sta return
    lda divr16u.return+1
    sta return+1
    jmp breturn
  //SEG226 div16u::@return
  breturn:
  //SEG227 [112] return  [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] )
    rts
}
//SEG228 divr16u
divr16u: {
    .label _1 = $50
    .label _2 = $51
    .label dividend = $1e
    .label divisor = $4a
    .label return = $4c
    .label rem = $1c
    .label quotient = $20
    .label i = $22
    .label return_1 = $20
  //SEG229 [114] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG230 [114] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG231 [114] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
  //SEG232 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG233 [114] phi (word) divr16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta rem
    lda #>0
    sta rem+1
    jmp b1
  //SEG234 [114] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG235 [114] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG236 [114] phi (word) divr16u::quotient#3 = (word) divr16u::return#1 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG237 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#1 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG238 [114] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG239 divr16u::@1
  b1:
  //SEG240 [115] (word) divr16u::rem#1 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG241 [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ) -- vbuz1=_hi_vwuz2 
    lda dividend+1
    sta _1
  //SEG242 [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and _1
    sta _2
  //SEG243 [118] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vbuz1_eq_0_then_la1 
    lda _2
    beq b2_from_b1
    jmp b4
  //SEG244 divr16u::@4
  b4:
  //SEG245 [119] (word) divr16u::rem#2 ← ++ (word) divr16u::rem#1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] ) -- vwuz1=_inc_vwuz1 
    inc rem
    bne !+
    inc rem+1
  !:
  //SEG246 [120] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG247 [120] phi (word) divr16u::rem#5 = (word) divr16u::rem#1 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG248 divr16u::@2
  b2:
  //SEG249 [121] (word) divr16u::dividend#1 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG250 [122] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG251 [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG252 divr16u::@5
  b5:
  //SEG253 [124] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG254 [125] (word) divr16u::rem#3 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ) -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG255 [126] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG256 [126] phi (word) divr16u::return#1 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG257 [126] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG258 divr16u::@3
  b3:
  //SEG259 [127] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG260 [128] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$10
    bne b1_from_b3
    jmp breturn
  //SEG261 divr16u::@return
  breturn:
  //SEG262 [129] return  [ divr16u::rem#10 divr16u::return#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#1 ] )
    rts
}
//SEG263 test_8s
test_8s: {
    .label dividend = $52
    .label divisor = $53
    .label res = $57
    .label i = $23
  //SEG264 [131] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  b1_from_test_8s:
  //SEG265 [131] phi (signed byte) rem8s#18 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#0] -- vbsz1=vbuc1 
    lda #0
    sta rem8s
  //SEG266 [131] phi (byte) test_8s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG267 [131] phi from test_8s::@11 to test_8s::@1 [phi:test_8s::@11->test_8s::@1]
  b1_from_b11:
  //SEG268 [131] phi (signed byte) rem8s#18 = (signed byte) rem8s#3 [phi:test_8s::@11->test_8s::@1#0] -- register_copy 
  //SEG269 [131] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@11->test_8s::@1#1] -- register_copy 
    jmp b1
  //SEG270 test_8s::@1
  b1:
  //SEG271 [132] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 divr8u::rem#10 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG272 [133] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG273 [134] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda dividend
    sta div8s.dividend
  //SEG274 [135] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta div8s.divisor
  //SEG275 [136] call div8s param-assignment [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 divr8u::rem#10 ] )
    jsr div8s
  //SEG276 [137] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda div8s.return
    sta div8s.return_3
    jmp b3
  //SEG277 test_8s::@3
  b3:
  //SEG278 [138] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda div8s.return_3
    sta res
  //SEG279 [139] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda dividend
    sta print_sbyte.b
  //SEG280 [140] (byte*~) char_cursor#179 ← (byte*) line_cursor#1 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG281 [141] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  //SEG282 [159] phi from test_8s::@3 to print_sbyte [phi:test_8s::@3->print_sbyte]
  print_sbyte_from_b3:
  //SEG283 [159] phi (byte*) char_cursor#131 = (byte*~) char_cursor#179 [phi:test_8s::@3->print_sbyte#0] -- register_copy 
  //SEG284 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#1 [phi:test_8s::@3->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG285 [142] phi from test_8s::@3 to test_8s::@4 [phi:test_8s::@3->test_8s::@4]
  b4_from_b3:
    jmp b4
  //SEG286 test_8s::@4
  b4:
  //SEG287 [143] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  //SEG288 [76] phi from test_8s::@4 to print_str [phi:test_8s::@4->print_str]
  print_str_from_b4:
  //SEG289 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str [phi:test_8s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG290 test_8s::@5
  b5:
  //SEG291 [144] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG292 [145] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] )
  //SEG293 [159] phi from test_8s::@5 to print_sbyte [phi:test_8s::@5->print_sbyte]
  print_sbyte_from_b5:
  //SEG294 [159] phi (byte*) char_cursor#131 = (byte*) char_cursor#126 [phi:test_8s::@5->print_sbyte#0] -- register_copy 
  //SEG295 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#2 [phi:test_8s::@5->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG296 [146] phi from test_8s::@5 to test_8s::@6 [phi:test_8s::@5->test_8s::@6]
  b6_from_b5:
    jmp b6
  //SEG297 test_8s::@6
  b6:
  //SEG298 [147] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] )
  //SEG299 [76] phi from test_8s::@6 to print_str [phi:test_8s::@6->print_str]
  print_str_from_b6:
  //SEG300 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str1 [phi:test_8s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG301 test_8s::@7
  b7:
  //SEG302 [148] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#3 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG303 [149] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG304 [159] phi from test_8s::@7 to print_sbyte [phi:test_8s::@7->print_sbyte]
  print_sbyte_from_b7:
  //SEG305 [159] phi (byte*) char_cursor#131 = (byte*) char_cursor#126 [phi:test_8s::@7->print_sbyte#0] -- register_copy 
  //SEG306 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#3 [phi:test_8s::@7->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG307 [150] phi from test_8s::@7 to test_8s::@8 [phi:test_8s::@7->test_8s::@8]
  b8_from_b7:
    jmp b8
  //SEG308 test_8s::@8
  b8:
  //SEG309 [151] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG310 [76] phi from test_8s::@8 to print_str [phi:test_8s::@8->print_str]
  print_str_from_b8:
  //SEG311 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str2 [phi:test_8s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG312 test_8s::@9
  b9:
  //SEG313 [152] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#4 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#4 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda rem8s
    sta print_sbyte.b
  //SEG314 [153] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG315 [159] phi from test_8s::@9 to print_sbyte [phi:test_8s::@9->print_sbyte]
  print_sbyte_from_b9:
  //SEG316 [159] phi (byte*) char_cursor#131 = (byte*) char_cursor#126 [phi:test_8s::@9->print_sbyte#0] -- register_copy 
  //SEG317 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#4 [phi:test_8s::@9->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG318 [154] phi from test_8s::@9 to test_8s::@10 [phi:test_8s::@9->test_8s::@10]
  b10_from_b9:
    jmp b10
  //SEG319 test_8s::@10
  b10:
  //SEG320 [155] call print_ln param-assignment [ line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG321 [44] phi from test_8s::@10 to print_ln [phi:test_8s::@10->print_ln]
  print_ln_from_b10:
  //SEG322 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#1 [phi:test_8s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG323 test_8s::@11
  b11:
  //SEG324 [156] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG325 [157] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1 [ line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b1_from_b11
    jmp breturn
  //SEG326 test_8s::@return
  breturn:
  //SEG327 [158] return  [ line_cursor#1 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG328 print_sbyte
print_sbyte: {
    .label b = $25
  //SEG329 [160] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1_from_print_sbyte
  //SEG330 [161] phi from print_sbyte to print_sbyte::@2 [phi:print_sbyte->print_sbyte::@2]
  b2_from_print_sbyte:
    jmp b2
  //SEG331 print_sbyte::@2
  b2:
  //SEG332 [162] call print_char param-assignment [ char_cursor#17 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] )
  //SEG333 [72] phi from print_sbyte::@2 to print_char [phi:print_sbyte::@2->print_char]
  print_char_from_b2:
  //SEG334 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#131 [phi:print_sbyte::@2->print_char#0] -- register_copy 
  //SEG335 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@2->print_char#1] -- vbuz1=vbuc1 
    lda #'-'
    sta print_char.ch
    jsr print_char
    jmp b4
  //SEG336 print_sbyte::@4
  b4:
  //SEG337 [163] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG338 [164] phi from print_sbyte print_sbyte::@4 to print_sbyte::@1 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1]
  b1_from_print_sbyte:
  b1_from_b4:
  //SEG339 [164] phi (byte*) char_cursor#130 = (byte*) char_cursor#131 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#0] -- register_copy 
  //SEG340 [164] phi (signed byte) print_sbyte::b#6 = (signed byte) print_sbyte::b#5 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#1] -- register_copy 
    jmp b1
  //SEG341 print_sbyte::@1
  b1:
  //SEG342 [165] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 char_cursor#130 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] ) -- vbuz1=vbuz2 
    lda b
    sta print_byte.b
  //SEG343 [166] call print_byte param-assignment [ char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] )
  //SEG344 [64] phi from print_sbyte::@1 to print_byte [phi:print_sbyte::@1->print_byte]
  print_byte_from_b1:
  //SEG345 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#130 [phi:print_sbyte::@1->print_byte#0] -- register_copy 
  //SEG346 [64] phi (byte) print_byte::b#7 = (byte~) print_byte::b#9 [phi:print_sbyte::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG347 print_sbyte::@return
  breturn:
  //SEG348 [167] return  [ char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] )
    rts
}
//SEG349 div8s
div8s: {
    .label _2 = $58
    .label _7 = $59
    .label neg = $28
    .label resultu = $5b
    .label return = $29
    .label dividend = $54
    .label divisor = $55
    .label return_3 = $56
    .label dividendu = $26
    .label divisoru = $27
  //SEG350 [168] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ) -- vbsz1_ge_0_then_la1 
    lda dividend
    cmp #0
    bpl b16
    jmp b7
  //SEG351 div8s::@7
  b7:
  //SEG352 [169] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ) -- vbsz1=_neg_vbsz2 
    lda dividend
    eor #$ff
    clc
    adc #1
    sta _2
  //SEG353 [170] (byte~) div8s::dividendu#8 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendu#8 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#8 divr8u::rem#10 ] ) -- vbuz1=vbuz2 
    lda _2
    sta dividendu
  //SEG354 [171] phi from div8s::@7 to div8s::@2 [phi:div8s::@7->div8s::@2]
  b2_from_b7:
  //SEG355 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#8 [phi:div8s::@7->div8s::@2#0] -- register_copy 
  //SEG356 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div8s::@7->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
  //SEG357 div8s::@2
  b2:
  //SEG358 [172] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] ) -- vbsz1_ge_0_then_la1 
    lda divisor
    cmp #0
    bpl b17
    jmp b9
  //SEG359 div8s::@9
  b9:
  //SEG360 [173] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ) -- vbsz1=_neg_vbsz2 
    lda divisor
    eor #$ff
    clc
    adc #1
    sta _7
  //SEG361 [174] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG362 [175] (byte~) div8s::divisoru#5 ← (byte)(signed byte~) div8s::$7 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#5 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#5 divr8u::rem#10 ] ) -- vbuz1=vbuz2 
    lda _7
    sta divisoru
  //SEG363 [176] phi from div8s::@17 div8s::@9 to div8s::@4 [phi:div8s::@17/div8s::@9->div8s::@4]
  b4_from_b17:
  b4_from_b9:
  //SEG364 [176] phi (byte) div8s::neg#4 = (byte) div8s::neg#3 [phi:div8s::@17/div8s::@9->div8s::@4#0] -- register_copy 
  //SEG365 [176] phi (byte) div8s::divisoru#3 = (byte~) div8s::divisoru#4 [phi:div8s::@17/div8s::@9->div8s::@4#1] -- register_copy 
    jmp b4
  //SEG366 div8s::@4
  b4:
  //SEG367 [177] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 [ div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 divr8u::rem#10 ] ) -- vbuz1=vbuz2 
    lda dividendu
    sta div8u.dividend
  //SEG368 [178] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 [ div8s::neg#4 div8u::dividend#0 div8u::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#0 div8u::divisor#0 divr8u::rem#10 ] ) -- vbuz1=vbuz2 
    lda divisoru
    sta div8u.divisor
  //SEG369 [179] call div8u param-assignment [ div8s::neg#4 div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] )
  //SEG370 [191] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from_b4:
  //SEG371 [191] phi (byte) rem8u#31 = (byte) divr8u::rem#10 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG372 [191] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#1] -- register_copy 
  //SEG373 [191] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#2] -- register_copy 
    jsr div8u
  //SEG374 [180] (byte) div8u::return#2 ← (byte) div8u::return#0 [ div8s::neg#4 div8u::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#2 divr8u::rem#10 ] ) -- vbuz1=vbuz2 
    lda div8u.return
    sta div8u.return_2
    jmp b15
  //SEG375 div8s::@15
  b15:
  //SEG376 [181] (byte) div8s::resultu#0 ← (byte) div8u::return#2 [ div8s::neg#4 div8s::resultu#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8s::resultu#0 divr8u::rem#10 ] ) -- vbuz1=vbuz2 
    lda div8u.return_2
    sta resultu
  //SEG377 [182] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ div8s::resultu#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 ] ) -- vbuz1_neq_0_then_la1 
    lda neg
    bne b5
    jmp b18
  //SEG378 div8s::@18
  b18:
  //SEG379 [183] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultu#0 [ div8s::return#6 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#6 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda resultu
    sta return
  //SEG380 [184] (signed byte~) rem8s#33 ← (signed byte)(byte) divr8u::rem#10 [ div8s::return#6 rem8s#33 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#6 rem8s#33 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda divr8u.rem
    sta rem8s
  //SEG381 [185] phi from div8s::@18 div8s::@5 to div8s::@return [phi:div8s::@18/div8s::@5->div8s::@return]
  breturn_from_b18:
  breturn_from_b5:
  //SEG382 [185] phi (signed byte) rem8s#3 = (signed byte~) rem8s#33 [phi:div8s::@18/div8s::@5->div8s::@return#0] -- register_copy 
  //SEG383 [185] phi (signed byte) div8s::return#2 = (signed byte~) div8s::return#6 [phi:div8s::@18/div8s::@5->div8s::@return#1] -- register_copy 
    jmp breturn
  //SEG384 div8s::@return
  breturn:
  //SEG385 [186] return  [ rem8s#3 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#3 div8s::return#2 divr8u::rem#10 ] )
    rts
  //SEG386 div8s::@5
  b5:
  //SEG387 [187] (signed byte) rem8s#1 ← - (signed byte)(byte) divr8u::rem#10 [ div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ) -- vbsz1=_neg_vbsz2 
    lda divr8u.rem
    eor #$ff
    clc
    adc #1
    sta rem8s
  //SEG388 [188] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultu#0 [ divr8u::rem#10 div8s::return#0 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 div8s::return#0 rem8s#1 ] ) -- vbsz1=_neg_vbsz2 
    lda resultu
    eor #$ff
    clc
    adc #1
    sta return
    jmp breturn_from_b5
  //SEG389 div8s::@17
  b17:
  //SEG390 [189] (byte~) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#4 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#4 divr8u::rem#10 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta divisoru
    jmp b4_from_b17
  //SEG391 div8s::@16
  b16:
  //SEG392 [190] (byte~) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#7 divr8u::rem#10 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta dividendu
  //SEG393 [171] phi from div8s::@16 to div8s::@2 [phi:div8s::@16->div8s::@2]
  b2_from_b16:
  //SEG394 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#7 [phi:div8s::@16->div8s::@2#0] -- register_copy 
  //SEG395 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8s::@16->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
}
//SEG396 div8u
div8u: {
    .label return = $5e
    .label dividend = $2a
    .label divisor = $2b
    .label return_2 = $5a
    .label return_3 = $6a
  //SEG397 [192] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 [ div8u::divisor#2 divr8u::dividend#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#2 divr8u::dividend#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#2 divr8u::dividend#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta divr8u.dividend
  //SEG398 [193] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta divr8u.divisor
  //SEG399 [194] call divr8u param-assignment [ divr8u::rem#10 divr8u::return#1 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#1 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#1 ] )
  //SEG400 [198] phi from div8u to divr8u [phi:div8u->divr8u]
  divr8u_from_div8u:
    jsr divr8u
  //SEG401 [195] (byte) divr8u::return#0 ← (byte) divr8u::return#1 [ divr8u::rem#10 divr8u::return#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#0 ] ) -- vbuz1=vbuz2 
    lda divr8u.return_1
    sta divr8u.return
    jmp b2
  //SEG402 div8u::@2
  b2:
  //SEG403 [196] (byte) div8u::return#0 ← (byte) divr8u::return#0 [ div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 divr8u::rem#10 ] ) -- vbuz1=vbuz2 
    lda divr8u.return
    sta return
    jmp breturn
  //SEG404 div8u::@return
  breturn:
  //SEG405 [197] return  [ div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 divr8u::rem#10 ] )
    rts
}
//SEG406 divr8u
divr8u: {
    .label _1 = $5f
    .label dividend = $2d
    .label divisor = $5c
    .label return = $5d
    .label rem = $2c
    .label quotient = $2e
    .label i = $2f
    .label return_1 = $2e
  //SEG407 [199] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  b1_from_divr8u:
  //SEG408 [199] phi (byte) divr8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
  //SEG409 [199] phi (byte) divr8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta quotient
  //SEG410 [199] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
  //SEG411 [199] phi (byte) divr8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta rem
    jmp b1
  //SEG412 [199] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  b1_from_b3:
  //SEG413 [199] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
  //SEG414 [199] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
  //SEG415 [199] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
  //SEG416 [199] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp b1
  //SEG417 divr8u::@1
  b1:
  //SEG418 [200] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl rem
  //SEG419 [201] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and dividend
    sta _1
  //SEG420 [202] if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuz1_eq_0_then_la1 
    lda _1
    beq b2_from_b1
    jmp b4
  //SEG421 divr8u::@4
  b4:
  //SEG422 [203] (byte) divr8u::rem#2 ← ++ (byte) divr8u::rem#1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) -- vbuz1=_inc_vbuz1 
    inc rem
  //SEG423 [204] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG424 [204] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp b2
  //SEG425 divr8u::@2
  b2:
  //SEG426 [205] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG427 [206] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl quotient
  //SEG428 [207] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuz1_lt_vbuz2_then_la1 
    lda rem
    cmp divisor
    bcc b3_from_b2
    jmp b5
  //SEG429 divr8u::@5
  b5:
  //SEG430 [208] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ) -- vbuz1=_inc_vbuz1 
    inc quotient
  //SEG431 [209] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) -- vbuz1=vbuz1_minus_vbuz2 
    lda rem
    sec
    sbc divisor
    sta rem
  //SEG432 [210] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG433 [210] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
  //SEG434 [210] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp b3
  //SEG435 divr8u::@3
  b3:
  //SEG436 [211] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG437 [212] if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1 [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #8
    bne b1_from_b3
    jmp breturn
  //SEG438 divr8u::@return
  breturn:
  //SEG439 [213] return  [ divr8u::rem#10 divr8u::return#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#1 ] )
    rts
}
//SEG440 test_16u
test_16u: {
    .label dividend = $60
    .label divisor = $62
    .label res = $66
    .label i = $30
  //SEG441 [215] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  b1_from_test_16u:
  //SEG442 [215] phi (word) rem16u#35 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta rem16u
    lda #>0
    sta rem16u+1
  //SEG443 [215] phi (byte) test_16u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG444 [215] phi from test_16u::@11 to test_16u::@1 [phi:test_16u::@11->test_16u::@1]
  b1_from_b11:
  //SEG445 [215] phi (word) rem16u#35 = (word) divr16u::rem#10 [phi:test_16u::@11->test_16u::@1#0] -- register_copy 
  //SEG446 [215] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@11->test_16u::@1#1] -- register_copy 
    jmp b1
  //SEG447 test_16u::@1
  b1:
  //SEG448 [216] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG449 [217] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG450 [218] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG451 [219] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta div16u.divisor
    lda divisor+1
    sta div16u.divisor+1
  //SEG452 [220] call div16u param-assignment [ line_cursor#1 div16u::return#0 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::return#0 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  //SEG453 [106] phi from test_16u::@1 to div16u [phi:test_16u::@1->div16u]
  div16u_from_b1:
  //SEG454 [106] phi (word) rem16u#31 = (word) rem16u#35 [phi:test_16u::@1->div16u#0] -- register_copy 
  //SEG455 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#1 [phi:test_16u::@1->div16u#1] -- register_copy 
  //SEG456 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#1 [phi:test_16u::@1->div16u#2] -- register_copy 
    jsr div16u
  //SEG457 [221] (word) div16u::return#3 ← (word) div16u::return#0 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ) -- vwuz1=vwuz2 
    lda div16u.return
    sta div16u.return_3
    lda div16u.return+1
    sta div16u.return_3+1
    jmp b3
  //SEG458 test_16u::@3
  b3:
  //SEG459 [222] (word) test_16u::res#0 ← (word) div16u::return#3 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda div16u.return_3
    sta res
    lda div16u.return_3+1
    sta res+1
  //SEG460 [223] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta print_word.w
    lda dividend+1
    sta print_word.w+1
  //SEG461 [224] (byte*~) char_cursor#162 ← (byte*) line_cursor#1 [ line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG462 [225] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG463 [58] phi from test_16u::@3 to print_word [phi:test_16u::@3->print_word]
  print_word_from_b3:
  //SEG464 [58] phi (byte*) char_cursor#132 = (byte*~) char_cursor#162 [phi:test_16u::@3->print_word#0] -- register_copy 
  //SEG465 [58] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:test_16u::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG466 [226] phi from test_16u::@3 to test_16u::@4 [phi:test_16u::@3->test_16u::@4]
  b4_from_b3:
    jmp b4
  //SEG467 test_16u::@4
  b4:
  //SEG468 [227] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG469 [76] phi from test_16u::@4 to print_str [phi:test_16u::@4->print_str]
  print_str_from_b4:
  //SEG470 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str [phi:test_16u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG471 test_16u::@5
  b5:
  //SEG472 [228] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG473 [229] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  //SEG474 [58] phi from test_16u::@5 to print_word [phi:test_16u::@5->print_word]
  print_word_from_b5:
  //SEG475 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#126 [phi:test_16u::@5->print_word#0] -- register_copy 
  //SEG476 [58] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:test_16u::@5->print_word#1] -- register_copy 
    jsr print_word
  //SEG477 [230] phi from test_16u::@5 to test_16u::@6 [phi:test_16u::@5->test_16u::@6]
  b6_from_b5:
    jmp b6
  //SEG478 test_16u::@6
  b6:
  //SEG479 [231] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  //SEG480 [76] phi from test_16u::@6 to print_str [phi:test_16u::@6->print_str]
  print_str_from_b6:
  //SEG481 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str1 [phi:test_16u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG482 test_16u::@7
  b7:
  //SEG483 [232] (word) print_word::w#3 ← (word) test_16u::res#0 [ line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG484 [233] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  //SEG485 [58] phi from test_16u::@7 to print_word [phi:test_16u::@7->print_word]
  print_word_from_b7:
  //SEG486 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#126 [phi:test_16u::@7->print_word#0] -- register_copy 
  //SEG487 [58] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:test_16u::@7->print_word#1] -- register_copy 
    jsr print_word
  //SEG488 [234] phi from test_16u::@7 to test_16u::@8 [phi:test_16u::@7->test_16u::@8]
  b8_from_b7:
    jmp b8
  //SEG489 test_16u::@8
  b8:
  //SEG490 [235] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 ] )
  //SEG491 [76] phi from test_16u::@8 to print_str [phi:test_16u::@8->print_str]
  print_str_from_b8:
  //SEG492 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str2 [phi:test_16u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG493 test_16u::@9
  b9:
  //SEG494 [236] (word) print_word::w#4 ← (word) divr16u::rem#10 [ line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda divr16u.rem
    sta print_word.w
    lda divr16u.rem+1
    sta print_word.w+1
  //SEG495 [237] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  //SEG496 [58] phi from test_16u::@9 to print_word [phi:test_16u::@9->print_word]
  print_word_from_b9:
  //SEG497 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#126 [phi:test_16u::@9->print_word#0] -- register_copy 
  //SEG498 [58] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:test_16u::@9->print_word#1] -- register_copy 
    jsr print_word
  //SEG499 [238] phi from test_16u::@9 to test_16u::@10 [phi:test_16u::@9->test_16u::@10]
  b10_from_b9:
    jmp b10
  //SEG500 test_16u::@10
  b10:
  //SEG501 [239] call print_ln param-assignment [ line_cursor#1 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 ] )
  //SEG502 [44] phi from test_16u::@10 to print_ln [phi:test_16u::@10->print_ln]
  print_ln_from_b10:
  //SEG503 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#1 [phi:test_16u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG504 test_16u::@11
  b11:
  //SEG505 [240] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG506 [241] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG507 test_16u::@return
  breturn:
  //SEG508 [242] return  [ line_cursor#1 divr16u::rem#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG509 test_8u
test_8u: {
    .label dividend = $68
    .label divisor = $69
    .label res = $6b
    .label i = $31
  //SEG510 [244] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  b1_from_test_8u:
  //SEG511 [244] phi (byte*) line_cursor#41 = (const byte*) SCREEN#0 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta line_cursor
    lda #>SCREEN
    sta line_cursor+1
  //SEG512 [244] phi (byte*) char_cursor#135 = (const byte*) SCREEN#0 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta char_cursor
    lda #>SCREEN
    sta char_cursor+1
  //SEG513 [244] phi (byte) rem8u#36 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta rem8u
  //SEG514 [244] phi (byte) test_8u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG515 test_8u::@1
  b1:
  //SEG516 [245] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG517 [246] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG518 [247] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 [ line_cursor#41 char_cursor#135 div8u::dividend#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::dividend#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta div8u.dividend
  //SEG519 [248] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ line_cursor#41 char_cursor#135 div8u::dividend#1 div8u::divisor#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::dividend#1 div8u::divisor#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta div8u.divisor
  //SEG520 [249] call div8u param-assignment [ line_cursor#41 char_cursor#135 div8u::return#0 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::return#0 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  //SEG521 [191] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from_b1:
  //SEG522 [191] phi (byte) rem8u#31 = (byte) rem8u#36 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG523 [191] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#1] -- register_copy 
  //SEG524 [191] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#2] -- register_copy 
    jsr div8u
  //SEG525 [250] (byte) div8u::return#3 ← (byte) div8u::return#0 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ) -- vbuz1=vbuz2 
    lda div8u.return
    sta div8u.return_3
    jmp b3
  //SEG526 test_8u::@3
  b3:
  //SEG527 [251] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda div8u.return_3
    sta res
  //SEG528 [252] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ line_cursor#41 print_byte::b#3 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 print_byte::b#3 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda dividend
    sta print_byte.b
  //SEG529 [253] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG530 [64] phi from test_8u::@3 to print_byte [phi:test_8u::@3->print_byte]
  print_byte_from_b3:
  //SEG531 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#135 [phi:test_8u::@3->print_byte#0] -- register_copy 
  //SEG532 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG533 [254] phi from test_8u::@3 to test_8u::@4 [phi:test_8u::@3->test_8u::@4]
  b4_from_b3:
    jmp b4
  //SEG534 test_8u::@4
  b4:
  //SEG535 [255] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG536 [76] phi from test_8u::@4 to print_str [phi:test_8u::@4->print_str]
  print_str_from_b4:
  //SEG537 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str [phi:test_8u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG538 test_8u::@5
  b5:
  //SEG539 [256] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ line_cursor#41 char_cursor#126 print_byte::b#4 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#4 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG540 [257] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  //SEG541 [64] phi from test_8u::@5 to print_byte [phi:test_8u::@5->print_byte]
  print_byte_from_b5:
  //SEG542 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#126 [phi:test_8u::@5->print_byte#0] -- register_copy 
  //SEG543 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@5->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG544 [258] phi from test_8u::@5 to test_8u::@6 [phi:test_8u::@5->test_8u::@6]
  b6_from_b5:
    jmp b6
  //SEG545 test_8u::@6
  b6:
  //SEG546 [259] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  //SEG547 [76] phi from test_8u::@6 to print_str [phi:test_8u::@6->print_str]
  print_str_from_b6:
  //SEG548 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str1 [phi:test_8u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG549 test_8u::@7
  b7:
  //SEG550 [260] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ line_cursor#41 char_cursor#126 print_byte::b#5 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#5 divr8u::rem#10 test_8u::i#10 ] ) -- vbuz1=vbuz2 
    lda res
    sta print_byte.b
  //SEG551 [261] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  //SEG552 [64] phi from test_8u::@7 to print_byte [phi:test_8u::@7->print_byte]
  print_byte_from_b7:
  //SEG553 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#126 [phi:test_8u::@7->print_byte#0] -- register_copy 
  //SEG554 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@7->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG555 [262] phi from test_8u::@7 to test_8u::@8 [phi:test_8u::@7->test_8u::@8]
  b8_from_b7:
    jmp b8
  //SEG556 test_8u::@8
  b8:
  //SEG557 [263] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 ] )
  //SEG558 [76] phi from test_8u::@8 to print_str [phi:test_8u::@8->print_str]
  print_str_from_b8:
  //SEG559 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str2 [phi:test_8u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG560 test_8u::@9
  b9:
  //SEG561 [264] (byte) print_byte::b#6 ← (byte) divr8u::rem#10 [ line_cursor#41 char_cursor#126 print_byte::b#6 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#6 divr8u::rem#10 test_8u::i#10 ] ) -- vbuz1=vbuz2 
    lda divr8u.rem
    sta print_byte.b
  //SEG562 [265] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  //SEG563 [64] phi from test_8u::@9 to print_byte [phi:test_8u::@9->print_byte]
  print_byte_from_b9:
  //SEG564 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#126 [phi:test_8u::@9->print_byte#0] -- register_copy 
  //SEG565 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@9->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG566 [266] phi from test_8u::@9 to test_8u::@10 [phi:test_8u::@9->test_8u::@10]
  b10_from_b9:
    jmp b10
  //SEG567 test_8u::@10
  b10:
  //SEG568 [267] call print_ln param-assignment [ line_cursor#1 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#10 ] )
  //SEG569 [44] phi from test_8u::@10 to print_ln [phi:test_8u::@10->print_ln]
  print_ln_from_b10:
  //SEG570 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#41 [phi:test_8u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG571 test_8u::@11
  b11:
  //SEG572 [268] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG573 [269] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@12 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b12
    jmp breturn
  //SEG574 test_8u::@return
  breturn:
  //SEG575 [270] return  [ line_cursor#1 divr8u::rem#10 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 ] )
    rts
  //SEG576 test_8u::@12
  b12:
  //SEG577 [271] (byte*~) char_cursor#185 ← (byte*) line_cursor#1 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG578 [244] phi from test_8u::@12 to test_8u::@1 [phi:test_8u::@12->test_8u::@1]
  b1_from_b12:
  //SEG579 [244] phi (byte*) line_cursor#41 = (byte*) line_cursor#1 [phi:test_8u::@12->test_8u::@1#0] -- register_copy 
  //SEG580 [244] phi (byte*) char_cursor#135 = (byte*~) char_cursor#185 [phi:test_8u::@12->test_8u::@1#1] -- register_copy 
  //SEG581 [244] phi (byte) rem8u#36 = (byte) divr8u::rem#10 [phi:test_8u::@12->test_8u::@1#2] -- register_copy 
  //SEG582 [244] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@12->test_8u::@1#3] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG583 print_cls
print_cls: {
    .label sc = $32
  //SEG584 [273] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG585 [273] phi (byte*) print_cls::sc#2 = (const byte*) SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
  //SEG586 [273] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG587 [273] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG588 print_cls::@1
  b1:
  //SEG589 [274] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG590 [275] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG591 [276] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG592 print_cls::@return
  breturn:
  //SEG593 [277] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Statement [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [25] (byte*~) char_cursor#155 ← (byte*) line_cursor#1 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [46] (byte*) line_cursor#1 ← (byte*) line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:36 [ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:44 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ]
Statement [47] if((byte*) line_cursor#1<(byte*) char_cursor#17) goto print_ln::@1 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) always clobbers reg byte a 
Statement [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] ) always clobbers reg byte a 
Statement [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] ) always clobbers reg byte a 
Statement [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:83 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:87 [ test_8s::res#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:105 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:107 [ test_8u::res#0 ]
Statement [73] *((byte*) char_cursor#80) ← (byte) print_char::ch#4 [ char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:44 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:36 [ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:83 [ test_8s::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:87 [ test_8s::res#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:105 [ test_8u::divisor#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:107 [ test_8u::res#0 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:37 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Statement [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [80] *((byte*) char_cursor#126) ← *((byte*) print_str::str#13) [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [83] if((signed word) div16s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@16 [ div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [84] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [85] (word~) div16s::dividendu#8 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [87] if((signed word) div16s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@17 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:21 [ div16s::neg#4 div16s::neg#3 div16s::neg#2 ]
Statement [88] (signed word~) div16s::$7 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [89] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [90] (word~) div16s::divisoru#5 ← (word)(signed word~) div16s::$7 [ div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [92] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [93] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [95] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#2 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [96] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [98] (signed word~) div16s::return#6 ← (signed word)(word) div16s::resultu#0 [ div16s::return#6 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [99] (signed word~) rem16s#32 ← (signed word)(word) divr16u::rem#10 [ div16s::return#6 rem16s#32 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 rem16s#32 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [102] (signed word) rem16s#1 ← - (signed word)(word) divr16u::rem#10 [ div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ) always clobbers reg byte a 
Statement [103] (signed word) div16s::return#0 ← - (signed word)(word) div16s::resultu#0 [ divr16u::rem#10 div16s::return#0 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 div16s::return#0 rem16s#1 ] ) always clobbers reg byte a 
Statement [104] (word~) div16s::divisoru#4 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [105] (word~) div16s::dividendu#7 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [107] (word) divr16u::dividend#0 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#0 ] ) always clobbers reg byte a 
Statement [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#0 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::dividend#0 divr16u::divisor#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#0 divr16u::divisor#0 ] ) always clobbers reg byte a 
Statement [110] (word) divr16u::return#0 ← (word) divr16u::return#1 [ divr16u::rem#10 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#0 ] ) always clobbers reg byte a 
Statement [111] (word) div16u::return#0 ← (word) divr16u::return#0 [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:34 [ divr16u::i#2 divr16u::i#1 ]
Statement [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ) always clobbers reg byte a 
Statement [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [125] (word) divr16u::rem#3 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ) always clobbers reg byte a 
Statement [133] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:82 [ test_8s::dividend#0 ]
Statement [140] (byte*~) char_cursor#179 ← (byte*) line_cursor#1 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:37 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Statement [163] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [169] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:85 [ div8s::divisor#0 ]
Statement [173] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:40 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:38 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
Statement [174] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:89 [ div8s::$7 ]
Statement [187] (signed byte) rem8s#1 ← - (signed byte)(byte) divr8u::rem#10 [ div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:91 [ div8s::resultu#0 ]
Statement [188] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultu#0 [ divr8u::rem#10 div8s::return#0 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 div8s::return#0 rem8s#1 ] ) always clobbers reg byte a 
Statement [201] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:92 [ divr8u::divisor#0 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:47 [ divr8u::i#2 divr8u::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:104 [ test_8u::dividend#0 ]
Statement [209] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) always clobbers reg byte a 
Statement [216] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ) always clobbers reg byte a 
Statement [217] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [218] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [219] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [221] (word) div16u::return#3 ← (word) div16u::return#0 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ) always clobbers reg byte a 
Statement [222] (word) test_16u::res#0 ← (word) div16u::return#3 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [223] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [224] (byte*~) char_cursor#162 ← (byte*) line_cursor#1 [ line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [228] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [232] (word) print_word::w#3 ← (word) test_16u::res#0 [ line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [236] (word) print_word::w#4 ← (word) divr16u::rem#10 [ line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [240] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ) always clobbers reg byte a 
Statement [246] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) always clobbers reg byte a 
Statement [271] (byte*~) char_cursor#185 ← (byte*) line_cursor#1 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ) always clobbers reg byte a 
Statement [274] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [276] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Statement [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [25] (byte*~) char_cursor#155 ← (byte*) line_cursor#1 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [46] (byte*) line_cursor#1 ← (byte*) line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) always clobbers reg byte a 
Statement [47] if((byte*) line_cursor#1<(byte*) char_cursor#17) goto print_ln::@1 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) always clobbers reg byte a 
Statement [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] ) always clobbers reg byte a 
Statement [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] ) always clobbers reg byte a 
Statement [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] ) always clobbers reg byte a 
Statement [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] ) always clobbers reg byte a 
Statement [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] ) always clobbers reg byte a 
Statement [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] ) always clobbers reg byte a 
Statement [73] *((byte*) char_cursor#80) ← (byte) print_char::ch#4 [ char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] ) always clobbers reg byte y 
Statement [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [80] *((byte*) char_cursor#126) ← *((byte*) print_str::str#13) [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) always clobbers reg byte a reg byte y 
Statement [83] if((signed word) div16s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@16 [ div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [84] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [85] (word~) div16s::dividendu#8 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [87] if((signed word) div16s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@17 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [88] (signed word~) div16s::$7 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [89] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [90] (word~) div16s::divisoru#5 ← (word)(signed word~) div16s::$7 [ div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [92] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [93] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [95] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#2 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [96] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [98] (signed word~) div16s::return#6 ← (signed word)(word) div16s::resultu#0 [ div16s::return#6 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [99] (signed word~) rem16s#32 ← (signed word)(word) divr16u::rem#10 [ div16s::return#6 rem16s#32 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 rem16s#32 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [102] (signed word) rem16s#1 ← - (signed word)(word) divr16u::rem#10 [ div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ) always clobbers reg byte a 
Statement [103] (signed word) div16s::return#0 ← - (signed word)(word) div16s::resultu#0 [ divr16u::rem#10 div16s::return#0 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 div16s::return#0 rem16s#1 ] ) always clobbers reg byte a 
Statement [104] (word~) div16s::divisoru#4 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [105] (word~) div16s::dividendu#7 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [107] (word) divr16u::dividend#0 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#0 ] ) always clobbers reg byte a 
Statement [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#0 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::dividend#0 divr16u::divisor#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#0 divr16u::divisor#0 ] ) always clobbers reg byte a 
Statement [110] (word) divr16u::return#0 ← (word) divr16u::return#1 [ divr16u::rem#10 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#0 ] ) always clobbers reg byte a 
Statement [111] (word) div16u::return#0 ← (word) divr16u::return#0 [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] ) always clobbers reg byte a 
Statement [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ) always clobbers reg byte a 
Statement [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ) always clobbers reg byte a 
Statement [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ) always clobbers reg byte a 
Statement [125] (word) divr16u::rem#3 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ) always clobbers reg byte a 
Statement [133] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ) always clobbers reg byte a 
Statement [140] (byte*~) char_cursor#179 ← (byte*) line_cursor#1 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ) always clobbers reg byte a 
Statement [163] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] ) always clobbers reg byte a 
Statement [169] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ) always clobbers reg byte a 
Statement [173] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ) always clobbers reg byte a 
Statement [174] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ) always clobbers reg byte a 
Statement [187] (signed byte) rem8s#1 ← - (signed byte)(byte) divr8u::rem#10 [ div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ) always clobbers reg byte a 
Statement [188] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultu#0 [ divr8u::rem#10 div8s::return#0 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 div8s::return#0 rem8s#1 ] ) always clobbers reg byte a 
Statement [201] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) always clobbers reg byte a 
Statement [209] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) always clobbers reg byte a 
Statement [216] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ) always clobbers reg byte a 
Statement [217] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [218] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [219] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) always clobbers reg byte a 
Statement [221] (word) div16u::return#3 ← (word) div16u::return#0 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ) always clobbers reg byte a 
Statement [222] (word) test_16u::res#0 ← (word) div16u::return#3 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [223] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [224] (byte*~) char_cursor#162 ← (byte*) line_cursor#1 [ line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [228] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ) always clobbers reg byte a 
Statement [232] (word) print_word::w#3 ← (word) test_16u::res#0 [ line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [236] (word) print_word::w#4 ← (word) divr16u::rem#10 [ line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ) always clobbers reg byte a 
Statement [240] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ) always clobbers reg byte a 
Statement [246] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) always clobbers reg byte a 
Statement [271] (byte*~) char_cursor#185 ← (byte*) line_cursor#1 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ) always clobbers reg byte a 
Statement [274] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) always clobbers reg byte a reg byte y 
Statement [276] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] : zp ZP_BYTE:2 , reg byte x , 
Potential registers zp ZP_WORD:3 [ rem16s#17 rem16s#3 rem16s#32 rem16s#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ line_cursor#20 line_cursor#39 line_cursor#1 line_cursor#41 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] : zp ZP_BYTE:11 , reg byte a , reg byte x , 
Potential registers zp ZP_BYTE:12 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:13 [ char_cursor#80 char_cursor#133 char_cursor#130 char_cursor#132 char_cursor#128 char_cursor#129 char_cursor#155 char_cursor#126 char_cursor#17 char_cursor#162 char_cursor#135 char_cursor#131 char_cursor#1 char_cursor#179 char_cursor#185 ] : zp ZP_WORD:13 , 
Potential registers zp ZP_WORD:15 [ print_str::str#13 print_str::str#15 print_str::str#0 ] : zp ZP_WORD:15 , 
Potential registers zp ZP_WORD:17 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ] : zp ZP_WORD:17 , 
Potential registers zp ZP_WORD:19 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ] : zp ZP_WORD:19 , 
Potential registers zp ZP_BYTE:21 [ div16s::neg#4 div16s::neg#3 div16s::neg#2 ] : zp ZP_BYTE:21 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 ] : zp ZP_WORD:22 , 
Potential registers zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] : zp ZP_WORD:24 , 
Potential registers zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] : zp ZP_WORD:26 , 
Potential registers zp ZP_WORD:28 [ divr16u::rem#4 rem16u#31 divr16u::rem#10 rem16u#35 divr16u::rem#5 divr16u::rem#1 divr16u::rem#2 divr16u::rem#3 ] : zp ZP_WORD:28 , 
Potential registers zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 ] : zp ZP_WORD:30 , 
Potential registers zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 ] : zp ZP_WORD:32 , 
Potential registers zp ZP_BYTE:34 [ divr16u::i#2 divr16u::i#1 ] : zp ZP_BYTE:34 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] : zp ZP_BYTE:35 , reg byte x , 
Potential registers zp ZP_BYTE:36 [ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ] : zp ZP_BYTE:36 , reg byte x , 
Potential registers zp ZP_BYTE:37 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] : zp ZP_BYTE:37 , reg byte x , 
Potential registers zp ZP_BYTE:38 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] : zp ZP_BYTE:38 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:39 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] : zp ZP_BYTE:39 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:40 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ] : zp ZP_BYTE:40 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:41 [ div8s::return#2 div8s::return#6 div8s::return#0 ] : zp ZP_BYTE:41 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:42 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] : zp ZP_BYTE:42 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:43 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] : zp ZP_BYTE:43 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:44 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] : zp ZP_BYTE:44 , reg byte x , 
Potential registers zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] : zp ZP_BYTE:45 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] : zp ZP_BYTE:46 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:47 [ divr8u::i#2 divr8u::i#1 ] : zp ZP_BYTE:47 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] : zp ZP_BYTE:48 , reg byte x , 
Potential registers zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] : zp ZP_BYTE:49 , reg byte x , 
Potential registers zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ] : zp ZP_WORD:50 , 
Potential registers zp ZP_WORD:52 [ test_16s::dividend#0 ] : zp ZP_WORD:52 , 
Potential registers zp ZP_WORD:54 [ test_16s::divisor#0 ] : zp ZP_WORD:54 , 
Potential registers zp ZP_WORD:56 [ div16s::dividend#0 ] : zp ZP_WORD:56 , 
Potential registers zp ZP_WORD:58 [ div16s::divisor#0 ] : zp ZP_WORD:58 , 
Potential registers zp ZP_WORD:60 [ div16s::return#3 ] : zp ZP_WORD:60 , 
Potential registers zp ZP_WORD:62 [ test_16s::res#0 ] : zp ZP_WORD:62 , 
Potential registers zp ZP_BYTE:64 [ print_byte::$0 ] : zp ZP_BYTE:64 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:65 [ print_byte::$2 ] : zp ZP_BYTE:65 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:66 [ div16s::$2 ] : zp ZP_WORD:66 , 
Potential registers zp ZP_WORD:68 [ div16s::$7 ] : zp ZP_WORD:68 , 
Potential registers zp ZP_WORD:70 [ div16u::return#2 ] : zp ZP_WORD:70 , 
Potential registers zp ZP_WORD:72 [ div16s::resultu#0 ] : zp ZP_WORD:72 , 
Potential registers zp ZP_WORD:74 [ divr16u::divisor#0 ] : zp ZP_WORD:74 , 
Potential registers zp ZP_WORD:76 [ divr16u::return#0 ] : zp ZP_WORD:76 , 
Potential registers zp ZP_WORD:78 [ div16u::return#0 ] : zp ZP_WORD:78 , 
Potential registers zp ZP_BYTE:80 [ divr16u::$1 ] : zp ZP_BYTE:80 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:81 [ divr16u::$2 ] : zp ZP_BYTE:81 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:82 [ test_8s::dividend#0 ] : zp ZP_BYTE:82 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:83 [ test_8s::divisor#0 ] : zp ZP_BYTE:83 , reg byte x , 
Potential registers zp ZP_BYTE:84 [ div8s::dividend#0 ] : zp ZP_BYTE:84 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:85 [ div8s::divisor#0 ] : zp ZP_BYTE:85 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:86 [ div8s::return#3 ] : zp ZP_BYTE:86 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:87 [ test_8s::res#0 ] : zp ZP_BYTE:87 , reg byte x , 
Potential registers zp ZP_BYTE:88 [ div8s::$2 ] : zp ZP_BYTE:88 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:89 [ div8s::$7 ] : zp ZP_BYTE:89 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:90 [ div8u::return#2 ] : zp ZP_BYTE:90 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:91 [ div8s::resultu#0 ] : zp ZP_BYTE:91 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:92 [ divr8u::divisor#0 ] : zp ZP_BYTE:92 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:93 [ divr8u::return#0 ] : zp ZP_BYTE:93 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:94 [ div8u::return#0 ] : zp ZP_BYTE:94 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:95 [ divr8u::$1 ] : zp ZP_BYTE:95 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:96 [ test_16u::dividend#0 ] : zp ZP_WORD:96 , 
Potential registers zp ZP_WORD:98 [ test_16u::divisor#0 ] : zp ZP_WORD:98 , 
Potential registers zp ZP_WORD:100 [ div16u::return#3 ] : zp ZP_WORD:100 , 
Potential registers zp ZP_WORD:102 [ test_16u::res#0 ] : zp ZP_WORD:102 , 
Potential registers zp ZP_BYTE:104 [ test_8u::dividend#0 ] : zp ZP_BYTE:104 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:105 [ test_8u::divisor#0 ] : zp ZP_BYTE:105 , reg byte x , 
Potential registers zp ZP_BYTE:106 [ div8u::return#3 ] : zp ZP_BYTE:106 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:107 [ test_8u::res#0 ] : zp ZP_BYTE:107 , reg byte x , 

REGISTER UPLIFT SCOPES
Uplift Scope [divr16u] 920.95: zp ZP_WORD:28 [ divr16u::rem#4 rem16u#31 divr16u::rem#10 rem16u#35 divr16u::rem#5 divr16u::rem#1 divr16u::rem#2 divr16u::rem#3 ] 338.75: zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 ] 202: zp ZP_BYTE:80 [ divr16u::$1 ] 202: zp ZP_BYTE:81 [ divr16u::$2 ] 167.04: zp ZP_BYTE:34 [ divr16u::i#2 divr16u::i#1 ] 70.15: zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 ] 12: zp ZP_WORD:74 [ divr16u::divisor#0 ] 4: zp ZP_WORD:76 [ divr16u::return#0 ] 
Uplift Scope [divr8u] 946.2: zp ZP_BYTE:44 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] 342.36: zp ZP_BYTE:46 [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] 202: zp ZP_BYTE:95 [ divr8u::$1 ] 168.33: zp ZP_BYTE:47 [ divr8u::i#2 divr8u::i#1 ] 77.42: zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] 12.75: zp ZP_BYTE:92 [ divr8u::divisor#0 ] 4: zp ZP_BYTE:93 [ divr8u::return#0 ] 
Uplift Scope [] 294.4: zp ZP_WORD:13 [ char_cursor#80 char_cursor#133 char_cursor#130 char_cursor#132 char_cursor#128 char_cursor#129 char_cursor#155 char_cursor#126 char_cursor#17 char_cursor#162 char_cursor#135 char_cursor#131 char_cursor#1 char_cursor#179 char_cursor#185 ] 254.87: zp ZP_WORD:5 [ line_cursor#20 line_cursor#39 line_cursor#1 line_cursor#41 ] 117.08: zp ZP_WORD:3 [ rem16s#17 rem16s#3 rem16s#32 rem16s#1 ] 117.08: zp ZP_BYTE:36 [ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ] 
Uplift Scope [print_str] 305.5: zp ZP_WORD:15 [ print_str::str#13 print_str::str#15 print_str::str#0 ] 
Uplift Scope [print_byte] 113.5: zp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] 4: zp ZP_BYTE:64 [ print_byte::$0 ] 4: zp ZP_BYTE:65 [ print_byte::$2 ] 
Uplift Scope [print_word] 97.67: zp ZP_WORD:9 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] 
Uplift Scope [print_sword] 97.5: zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ] 
Uplift Scope [print_sbyte] 97.5: zp ZP_BYTE:37 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] 
Uplift Scope [div8u] 33.5: zp ZP_BYTE:43 [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] 28: zp ZP_BYTE:42 [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] 22: zp ZP_BYTE:106 [ div8u::return#3 ] 4: zp ZP_BYTE:90 [ div8u::return#2 ] 3.75: zp ZP_BYTE:94 [ div8u::return#0 ] 
Uplift Scope [div16u] 33.5: zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] 28: zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] 22: zp ZP_WORD:100 [ div16u::return#3 ] 4: zp ZP_WORD:70 [ div16u::return#2 ] 3.75: zp ZP_WORD:78 [ div16u::return#0 ] 
Uplift Scope [div8s] 22: zp ZP_BYTE:86 [ div8s::return#3 ] 11: zp ZP_BYTE:39 [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] 11: zp ZP_BYTE:41 [ div8s::return#2 div8s::return#6 div8s::return#0 ] 8.86: zp ZP_BYTE:38 [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] 5: zp ZP_BYTE:84 [ div8s::dividend#0 ] 4: zp ZP_BYTE:40 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ] 2.14: zp ZP_BYTE:85 [ div8s::divisor#0 ] 2: zp ZP_BYTE:88 [ div8s::$2 ] 1: zp ZP_BYTE:89 [ div8s::$7 ] 0.67: zp ZP_BYTE:91 [ div8s::resultu#0 ] 
Uplift Scope [div16s] 22: zp ZP_WORD:60 [ div16s::return#3 ] 11: zp ZP_WORD:19 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ] 11: zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 ] 8.86: zp ZP_WORD:17 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ] 5: zp ZP_WORD:56 [ div16s::dividend#0 ] 4: zp ZP_BYTE:21 [ div16s::neg#4 div16s::neg#3 div16s::neg#2 ] 2.14: zp ZP_WORD:58 [ div16s::divisor#0 ] 2: zp ZP_WORD:66 [ div16s::$2 ] 1: zp ZP_WORD:68 [ div16s::$7 ] 0.67: zp ZP_WORD:72 [ div16s::resultu#0 ] 
Uplift Scope [print_cls] 33: zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplift Scope [test_16u] 18.26: zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] 4.71: zp ZP_WORD:96 [ test_16u::dividend#0 ] 3: zp ZP_WORD:98 [ test_16u::divisor#0 ] 2.2: zp ZP_WORD:102 [ test_16u::res#0 ] 
Uplift Scope [test_8s] 18.26: zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] 4.71: zp ZP_BYTE:82 [ test_8s::dividend#0 ] 3: zp ZP_BYTE:83 [ test_8s::divisor#0 ] 2.2: zp ZP_BYTE:87 [ test_8s::res#0 ] 
Uplift Scope [test_16s] 18.26: zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] 4.71: zp ZP_WORD:52 [ test_16s::dividend#0 ] 3: zp ZP_WORD:54 [ test_16s::divisor#0 ] 2.2: zp ZP_WORD:62 [ test_16s::res#0 ] 
Uplift Scope [test_8u] 12.83: zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] 4.71: zp ZP_BYTE:104 [ test_8u::dividend#0 ] 3.3: zp ZP_BYTE:105 [ test_8u::divisor#0 ] 2.44: zp ZP_BYTE:107 [ test_8u::res#0 ] 
Uplift Scope [print_char] 14: zp ZP_BYTE:12 [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplift Scope [print_ln] 
Uplift Scope [main] 

Uplifting [divr16u] best 45230 combination zp ZP_WORD:28 [ divr16u::rem#4 rem16u#31 divr16u::rem#10 rem16u#35 divr16u::rem#5 divr16u::rem#1 divr16u::rem#2 divr16u::rem#3 ] zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 ] reg byte a [ divr16u::$1 ] reg byte a [ divr16u::$2 ] reg byte x [ divr16u::i#2 divr16u::i#1 ] zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 ] zp ZP_WORD:74 [ divr16u::divisor#0 ] zp ZP_WORD:76 [ divr16u::return#0 ] 
Uplifting [divr8u] best 43421 combination zp ZP_BYTE:44 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] reg byte x [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ] reg byte a [ divr8u::$1 ] reg byte y [ divr8u::i#2 divr8u::i#1 ] zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] zp ZP_BYTE:92 [ divr8u::divisor#0 ] reg byte x [ divr8u::return#0 ] 
Uplifting [] best 43377 combination zp ZP_WORD:13 [ char_cursor#80 char_cursor#133 char_cursor#130 char_cursor#132 char_cursor#128 char_cursor#129 char_cursor#155 char_cursor#126 char_cursor#17 char_cursor#162 char_cursor#135 char_cursor#131 char_cursor#1 char_cursor#179 char_cursor#185 ] zp ZP_WORD:5 [ line_cursor#20 line_cursor#39 line_cursor#1 line_cursor#41 ] zp ZP_WORD:3 [ rem16s#17 rem16s#3 rem16s#32 rem16s#1 ] reg byte x [ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ] 
Uplifting [print_str] best 43377 combination zp ZP_WORD:15 [ print_str::str#13 print_str::str#15 print_str::str#0 ] 
Uplifting [print_byte] best 43369 combination zp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] reg byte a [ print_byte::$0 ] reg byte a [ print_byte::$2 ] 
Uplifting [print_word] best 43369 combination zp ZP_WORD:9 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] 
Uplifting [print_sword] best 43369 combination zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ] 
Uplifting [print_sbyte] best 43369 combination zp ZP_BYTE:37 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] 
Uplifting [div8u] best 43195 combination reg byte x [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ] reg byte a [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ] reg byte x [ div8u::return#3 ] reg byte x [ div8u::return#2 ] reg byte x [ div8u::return#0 ] 
Uplifting [div16u] best 43195 combination zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] zp ZP_WORD:100 [ div16u::return#3 ] zp ZP_WORD:70 [ div16u::return#2 ] zp ZP_WORD:78 [ div16u::return#0 ] 
Uplift attempts [div8s] 10000/248832 (limiting to 10000)
Uplifting [div8s] best 43005 combination reg byte a [ div8s::return#3 ] reg byte x [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ] reg byte a [ div8s::return#2 div8s::return#6 div8s::return#0 ] reg byte y [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ] reg byte a [ div8s::dividend#0 ] zp ZP_BYTE:40 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ] reg byte x [ div8s::divisor#0 ] reg byte a [ div8s::$2 ] zp ZP_BYTE:89 [ div8s::$7 ] zp ZP_BYTE:91 [ div8s::resultu#0 ] 
Limited combination testing to 10000 combinations of 248832 possible.
Uplifting [div16s] best 42996 combination zp ZP_WORD:60 [ div16s::return#3 ] zp ZP_WORD:19 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ] zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 ] zp ZP_WORD:17 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ] zp ZP_WORD:56 [ div16s::dividend#0 ] reg byte y [ div16s::neg#4 div16s::neg#3 div16s::neg#2 ] zp ZP_WORD:58 [ div16s::divisor#0 ] zp ZP_WORD:66 [ div16s::$2 ] zp ZP_WORD:68 [ div16s::$7 ] zp ZP_WORD:72 [ div16s::resultu#0 ] 
Uplifting [print_cls] best 42996 combination zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ] 
Uplifting [test_16u] best 42996 combination zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] zp ZP_WORD:96 [ test_16u::dividend#0 ] zp ZP_WORD:98 [ test_16u::divisor#0 ] zp ZP_WORD:102 [ test_16u::res#0 ] 
Uplifting [test_8s] best 42996 combination zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] zp ZP_BYTE:82 [ test_8s::dividend#0 ] zp ZP_BYTE:83 [ test_8s::divisor#0 ] zp ZP_BYTE:87 [ test_8s::res#0 ] 
Uplifting [test_16s] best 42996 combination zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] zp ZP_WORD:52 [ test_16s::dividend#0 ] zp ZP_WORD:54 [ test_16s::divisor#0 ] zp ZP_WORD:62 [ test_16s::res#0 ] 
Uplifting [test_8u] best 42936 combination zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] zp ZP_BYTE:104 [ test_8u::dividend#0 ] zp ZP_BYTE:105 [ test_8u::divisor#0 ] reg byte x [ test_8u::res#0 ] 
Uplifting [print_char] best 42921 combination reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ] 
Uplifting [print_ln] best 42921 combination 
Uplifting [main] best 42921 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:44 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Uplifting [divr8u] best 42921 combination zp ZP_BYTE:44 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ]
Uplifting [print_byte] best 42921 combination zp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:37 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ]
Uplifting [print_sbyte] best 42921 combination zp ZP_BYTE:37 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Uplifting [divr8u] best 42921 combination zp ZP_BYTE:45 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ]
Uplifting [test_16s] best 42921 combination zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ]
Uplifting [test_8s] best 42921 combination zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ]
Uplifting [test_16u] best 42921 combination zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ]
Uplifting [test_8u] best 42921 combination zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:92 [ divr8u::divisor#0 ]
Uplifting [divr8u] best 42921 combination zp ZP_BYTE:92 [ divr8u::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:82 [ test_8s::dividend#0 ]
Uplifting [test_8s] best 42921 combination zp ZP_BYTE:82 [ test_8s::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:104 [ test_8u::dividend#0 ]
Uplifting [test_8u] best 42921 combination zp ZP_BYTE:104 [ test_8u::dividend#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:40 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ]
Uplifting [div8s] best 42921 combination zp ZP_BYTE:40 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:105 [ test_8u::divisor#0 ]
Uplifting [test_8u] best 42921 combination zp ZP_BYTE:105 [ test_8u::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:83 [ test_8s::divisor#0 ]
Uplifting [test_8s] best 42921 combination zp ZP_BYTE:83 [ test_8s::divisor#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:87 [ test_8s::res#0 ]
Uplifting [test_8s] best 42921 combination zp ZP_BYTE:87 [ test_8s::res#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:89 [ div8s::$7 ]
Uplifting [div8s] best 42917 combination reg byte x [ div8s::$7 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:91 [ div8s::resultu#0 ]
Uplifting [div8s] best 42916 combination reg byte y [ div8s::resultu#0 ] 
Coalescing zero page register [ zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 ] ] with [ zp ZP_WORD:72 [ div16s::resultu#0 ] ]
Coalescing zero page register [ zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 ] ] with [ zp ZP_WORD:9 [ print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] ]
Coalescing zero page register [ zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 ] ] with [ zp ZP_WORD:52 [ test_16s::dividend#0 ] ]
Coalescing zero page register [ zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 ] ] with [ zp ZP_WORD:56 [ div16s::dividend#0 ] ]
Coalescing zero page register [ zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 div16s::dividend#0 ] ] with [ zp ZP_WORD:96 [ test_16u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 ] ] with [ zp ZP_BYTE:37 [ print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 ] ] with [ zp ZP_BYTE:82 [ test_8s::dividend#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:11 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8s::dividend#0 ] ] with [ zp ZP_BYTE:104 [ test_8u::dividend#0 ] ]
Coalescing zero page register [ zp ZP_WORD:17 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 ] ] with [ zp ZP_WORD:24 [ div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] ]
Coalescing zero page register [ zp ZP_WORD:17 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 ] ] with [ zp ZP_WORD:30 [ divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 ] ]
Coalescing zero page register [ zp ZP_WORD:17 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 ] ] with [ zp ZP_WORD:66 [ div16s::$2 ] ]
Coalescing zero page register [ zp ZP_WORD:19 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 ] ] with [ zp ZP_WORD:26 [ div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] ]
Coalescing zero page register [ zp ZP_WORD:19 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 ] ] with [ zp ZP_WORD:58 [ div16s::divisor#0 ] ]
Coalescing zero page register [ zp ZP_WORD:19 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 ] ] with [ zp ZP_WORD:68 [ div16s::$7 ] ]
Coalescing zero page register [ zp ZP_WORD:19 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 div16s::$7 ] ] with [ zp ZP_WORD:74 [ divr16u::divisor#0 ] ]
Coalescing zero page register [ zp ZP_WORD:19 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 div16s::$7 divr16u::divisor#0 ] ] with [ zp ZP_WORD:98 [ test_16u::divisor#0 ] ]
Coalescing zero page register [ zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 ] ] with [ zp ZP_WORD:60 [ div16s::return#3 ] ]
Coalescing zero page register [ zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 ] ] with [ zp ZP_WORD:62 [ test_16s::res#0 ] ]
Coalescing zero page register [ zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 test_16s::res#0 ] ] with [ zp ZP_WORD:70 [ div16u::return#2 ] ]
Coalescing zero page register [ zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 ] ] with [ zp ZP_WORD:78 [ div16u::return#0 ] ]
Coalescing zero page register [ zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 ] ] with [ zp ZP_WORD:76 [ divr16u::return#0 ] ]
Coalescing zero page register [ zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 divr16u::return#0 ] ] with [ zp ZP_WORD:32 [ divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 ] ]
Coalescing zero page register [ zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 divr16u::return#0 divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 ] ] with [ zp ZP_WORD:100 [ div16u::return#3 ] ]
Coalescing zero page register [ zp ZP_WORD:22 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 divr16u::return#0 divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 div16u::return#3 ] ] with [ zp ZP_WORD:102 [ test_16u::res#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 ] ] with [ zp ZP_BYTE:35 [ test_8s::i#10 test_8s::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 ] ] with [ zp ZP_BYTE:48 [ test_16u::i#10 test_16u::i#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 test_16u::i#10 test_16u::i#1 ] ] with [ zp ZP_BYTE:49 [ test_8u::i#10 test_8u::i#1 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ rem16s#17 rem16s#3 rem16s#32 rem16s#1 ] ] with [ zp ZP_WORD:17 [ div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 div16s::$2 ] ]
Coalescing zero page register [ zp ZP_WORD:3 [ rem16s#17 rem16s#3 rem16s#32 rem16s#1 div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 div16s::$2 ] ] with [ zp ZP_WORD:50 [ print_cls::sc#2 print_cls::sc#1 ] ]
Coalescing zero page register [ zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 div16s::dividend#0 test_16u::dividend#0 ] ] with [ zp ZP_WORD:15 [ print_str::str#13 print_str::str#15 print_str::str#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:40 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 ] ] with [ zp ZP_BYTE:87 [ test_8s::res#0 ] ]
Coalescing zero page register [ zp ZP_BYTE:40 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 test_8s::res#0 ] ] with [ zp ZP_BYTE:105 [ test_8u::divisor#0 ] ]
Allocated (was zp ZP_BYTE:11) zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8s::dividend#0 test_8u::dividend#0 ]
Allocated (was zp ZP_WORD:13) zp ZP_WORD:10 [ char_cursor#80 char_cursor#133 char_cursor#130 char_cursor#132 char_cursor#128 char_cursor#129 char_cursor#155 char_cursor#126 char_cursor#17 char_cursor#162 char_cursor#135 char_cursor#131 char_cursor#1 char_cursor#179 char_cursor#185 ]
Allocated (was zp ZP_WORD:19) zp ZP_WORD:12 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 div16s::$7 divr16u::divisor#0 test_16u::divisor#0 ]
Allocated (was zp ZP_WORD:22) zp ZP_WORD:14 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 divr16u::return#0 divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 div16u::return#3 test_16u::res#0 ]
Allocated (was zp ZP_WORD:28) zp ZP_WORD:16 [ divr16u::rem#4 rem16u#31 divr16u::rem#10 rem16u#35 divr16u::rem#5 divr16u::rem#1 divr16u::rem#2 divr16u::rem#3 ]
Allocated (was zp ZP_BYTE:40) zp ZP_BYTE:18 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 test_8s::res#0 test_8u::divisor#0 ]
Allocated (was zp ZP_BYTE:44) zp ZP_BYTE:19 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
Allocated (was zp ZP_BYTE:45) zp ZP_BYTE:20 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
Allocated (was zp ZP_WORD:54) zp ZP_WORD:21 [ test_16s::divisor#0 ]
Allocated (was zp ZP_BYTE:83) zp ZP_BYTE:23 [ test_8s::divisor#0 ]
Allocated (was zp ZP_BYTE:92) zp ZP_BYTE:24 [ divr8u::divisor#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
  .label char_cursor = $a
  .label line_cursor = 5
  .label rem16s = 3
  .label rem8u = $13
  .label rem16u = $10
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @21 [phi:@begin->@21]
b21_from_bbegin:
  jmp b21
//SEG4 @21
b21:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @21 to main [phi:@21->main]
main_from_b21:
  jsr main
//SEG7 [3] phi from @21 to @end [phi:@21->@end]
bend_from_b21:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [272] phi from main to print_cls [phi:main->print_cls]
  print_cls_from_main:
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    jmp b1
  //SEG13 main::@1
  b1:
  //SEG14 [7] call test_8u param-assignment [ line_cursor#1 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr8u::rem#10 ] )
  //SEG15 [243] phi from main::@1 to test_8u [phi:main::@1->test_8u]
  test_8u_from_b1:
    jsr test_8u
  //SEG16 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG17 main::@2
  b2:
  //SEG18 [9] call test_16u param-assignment [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] )
  //SEG19 [214] phi from main::@2 to test_16u [phi:main::@2->test_16u]
  test_16u_from_b2:
    jsr test_16u
  //SEG20 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  b3_from_b2:
    jmp b3
  //SEG21 main::@3
  b3:
  //SEG22 [11] call test_8s param-assignment [ line_cursor#1 divr16u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 ] )
  //SEG23 [130] phi from main::@3 to test_8s [phi:main::@3->test_8s]
  test_8s_from_b3:
    jsr test_8s
  //SEG24 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  b4_from_b3:
    jmp b4
  //SEG25 main::@4
  b4:
  //SEG26 [13] call test_16s param-assignment [ ] ( main:2 [ ] )
  //SEG27 [15] phi from main::@4 to test_16s [phi:main::@4->test_16s]
  test_16s_from_b4:
    jsr test_16s
    jmp breturn
  //SEG28 main::@return
  breturn:
  //SEG29 [14] return  [ ] ( main:2 [ ] )
    rts
}
//SEG30 test_16s
test_16s: {
    .label dividend = 7
    .label divisor = $15
    .label res = $e
    .label i = 2
  //SEG31 [16] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  b1_from_test_16s:
  //SEG32 [16] phi (signed word) rem16s#17 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16s->test_16s::@1#0] -- vwsz1=vbuc1 
    lda #<0
    sta rem16s
    lda #>0
    sta rem16s+1
  //SEG33 [16] phi (byte) test_16s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16s->test_16s::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG34 [16] phi from test_16s::@11 to test_16s::@1 [phi:test_16s::@11->test_16s::@1]
  b1_from_b11:
  //SEG35 [16] phi (signed word) rem16s#17 = (signed word) rem16s#3 [phi:test_16s::@11->test_16s::@1#0] -- register_copy 
  //SEG36 [16] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@11->test_16s::@1#1] -- register_copy 
    jmp b1
  //SEG37 test_16s::@1
  b1:
  //SEG38 [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG39 [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG40 [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] )
    // (signed word) div16s::dividend#0 = (signed word) test_16s::dividend#0  // register copy zp ZP_WORD:7
  //SEG41 [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta div16s.divisor
    lda divisor+1
    sta div16s.divisor+1
  //SEG42 [21] call div16s param-assignment [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 line_cursor#1 divr16u::rem#10 ] )
    jsr div16s
  //SEG43 [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] )
    // (signed word) div16s::return#3 = (signed word) div16s::return#2  // register copy zp ZP_WORD:14
    jmp b3
  //SEG44 test_16s::@3
  b3:
  //SEG45 [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] )
    // (signed word) test_16s::res#0 = (signed word) div16s::return#3  // register copy zp ZP_WORD:14
  //SEG46 [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] )
    // (signed word) print_sword::w#1 = (signed word) test_16s::dividend#0  // register copy zp ZP_WORD:7
  //SEG47 [25] (byte*~) char_cursor#155 ← (byte*) line_cursor#1 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG48 [26] call print_sword param-assignment [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG49 [49] phi from test_16s::@3 to print_sword [phi:test_16s::@3->print_sword]
  print_sword_from_b3:
  //SEG50 [49] phi (byte*) char_cursor#129 = (byte*~) char_cursor#155 [phi:test_16s::@3->print_sword#0] -- register_copy 
  //SEG51 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#1 [phi:test_16s::@3->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG52 [27] phi from test_16s::@3 to test_16s::@4 [phi:test_16s::@3->test_16s::@4]
  b4_from_b3:
    jmp b4
  //SEG53 test_16s::@4
  b4:
  //SEG54 [28] call print_str param-assignment [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  //SEG55 [76] phi from test_16s::@4 to print_str [phi:test_16s::@4->print_str]
  print_str_from_b4:
  //SEG56 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str [phi:test_16s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG57 test_16s::@5
  b5:
  //SEG58 [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta print_sword.w
    lda divisor+1
    sta print_sword.w+1
  //SEG59 [30] call print_sword param-assignment [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG60 [49] phi from test_16s::@5 to print_sword [phi:test_16s::@5->print_sword]
  print_sword_from_b5:
  //SEG61 [49] phi (byte*) char_cursor#129 = (byte*) char_cursor#126 [phi:test_16s::@5->print_sword#0] -- register_copy 
  //SEG62 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#2 [phi:test_16s::@5->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG63 [31] phi from test_16s::@5 to test_16s::@6 [phi:test_16s::@5->test_16s::@6]
  b6_from_b5:
    jmp b6
  //SEG64 test_16s::@6
  b6:
  //SEG65 [32] call print_str param-assignment [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  //SEG66 [76] phi from test_16s::@6 to print_str [phi:test_16s::@6->print_str]
  print_str_from_b6:
  //SEG67 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str1 [phi:test_16s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG68 test_16s::@7
  b7:
  //SEG69 [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda res
    sta print_sword.w
    lda res+1
    sta print_sword.w+1
  //SEG70 [34] call print_sword param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG71 [49] phi from test_16s::@7 to print_sword [phi:test_16s::@7->print_sword]
  print_sword_from_b7:
  //SEG72 [49] phi (byte*) char_cursor#129 = (byte*) char_cursor#126 [phi:test_16s::@7->print_sword#0] -- register_copy 
  //SEG73 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:test_16s::@7->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG74 [35] phi from test_16s::@7 to test_16s::@8 [phi:test_16s::@7->test_16s::@8]
  b8_from_b7:
    jmp b8
  //SEG75 test_16s::@8
  b8:
  //SEG76 [36] call print_str param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  //SEG77 [76] phi from test_16s::@8 to print_str [phi:test_16s::@8->print_str]
  print_str_from_b8:
  //SEG78 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str2 [phi:test_16s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG79 test_16s::@9
  b9:
  //SEG80 [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda rem16s
    sta print_sword.w
    lda rem16s+1
    sta print_sword.w+1
  //SEG81 [38] call print_sword param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG82 [49] phi from test_16s::@9 to print_sword [phi:test_16s::@9->print_sword]
  print_sword_from_b9:
  //SEG83 [49] phi (byte*) char_cursor#129 = (byte*) char_cursor#126 [phi:test_16s::@9->print_sword#0] -- register_copy 
  //SEG84 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#4 [phi:test_16s::@9->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG85 [39] phi from test_16s::@9 to test_16s::@10 [phi:test_16s::@9->test_16s::@10]
  b10_from_b9:
    jmp b10
  //SEG86 test_16s::@10
  b10:
  //SEG87 [40] call print_ln param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 ] )
  //SEG88 [44] phi from test_16s::@10 to print_ln [phi:test_16s::@10->print_ln]
  print_ln_from_b10:
  //SEG89 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#1 [phi:test_16s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG90 test_16s::@11
  b11:
  //SEG91 [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG92 [42] if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG93 test_16s::@return
  breturn:
  //SEG94 [43] return  [ ] ( main:2::test_16s:13 [ ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
//SEG95 print_ln
print_ln: {
  //SEG96 [45] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  b1_from_print_ln:
  b1_from_b1:
  //SEG97 [45] phi (byte*) line_cursor#20 = (byte*) line_cursor#39 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp b1
  //SEG98 print_ln::@1
  b1:
  //SEG99 [46] (byte*) line_cursor#1 ← (byte*) line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG100 [47] if((byte*) line_cursor#1<(byte*) char_cursor#17) goto print_ln::@1 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1_from_b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1_from_b1
  !:
    jmp breturn
  //SEG101 print_ln::@return
  breturn:
  //SEG102 [48] return  [ line_cursor#1 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 ] )
    rts
}
//SEG103 print_sword
print_sword: {
    .label w = 7
  //SEG104 [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] ) -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1_from_print_sword
  //SEG105 [51] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  b2_from_print_sword:
    jmp b2
  //SEG106 print_sword::@2
  b2:
  //SEG107 [52] call print_char param-assignment [ char_cursor#17 print_sword::w#5 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] )
  //SEG108 [72] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  print_char_from_b2:
  //SEG109 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#129 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG110 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG111 print_sword::@4
  b4:
  //SEG112 [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG113 [54] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  b1_from_print_sword:
  b1_from_b4:
  //SEG114 [54] phi (byte*) char_cursor#128 = (byte*) char_cursor#129 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG115 [54] phi (signed word) print_sword::w#6 = (signed word) print_sword::w#5 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
    jmp b1
  //SEG116 print_sword::@1
  b1:
  //SEG117 [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] )
    // (word~) print_word::w#7 = (word)(signed word) print_sword::w#6  // register copy zp ZP_WORD:7
  //SEG118 [56] call print_word param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] )
  //SEG119 [58] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  print_word_from_b1:
  //SEG120 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#128 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG121 [58] phi (word) print_word::w#5 = (word~) print_word::w#7 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
    jmp breturn
  //SEG122 print_sword::@return
  breturn:
  //SEG123 [57] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] )
    rts
}
//SEG124 print_word
print_word: {
    .label w = 7
  //SEG125 [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG126 [60] call print_byte param-assignment [ char_cursor#17 print_word::w#5 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_word::w#5 ] )
  //SEG127 [64] phi from print_word to print_byte [phi:print_word->print_byte]
  print_byte_from_print_word:
  //SEG128 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#132 [phi:print_word->print_byte#0] -- register_copy 
  //SEG129 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
    jmp b1
  //SEG130 print_word::@1
  b1:
  //SEG131 [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG132 [62] call print_byte param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] )
  //SEG133 [64] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  print_byte_from_b1:
  //SEG134 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#17 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG135 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG136 print_word::@return
  breturn:
  //SEG137 [63] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] )
    rts
}
//SEG138 print_byte
print_byte: {
    .label b = 9
  //SEG139 [65] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#133 print_byte::$0 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG140 [66] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#133 print_char::ch#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG141 [67] call print_char param-assignment [ char_cursor#17 print_byte::b#7 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::b#7 ] )
  //SEG142 [72] phi from print_byte to print_char [phi:print_byte->print_char]
  print_char_from_print_byte:
  //SEG143 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#133 [phi:print_byte->print_char#0] -- register_copy 
  //SEG144 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
    jmp b1
  //SEG145 print_byte::@1
  b1:
  //SEG146 [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG147 [69] (byte) print_char::ch#3 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#17 print_char::ch#3 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_char::ch#3 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG148 [70] call print_char param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] )
  //SEG149 [72] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  print_char_from_b1:
  //SEG150 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#17 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG151 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
    jmp breturn
  //SEG152 print_byte::@return
  breturn:
  //SEG153 [71] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG154 print_char
print_char: {
  //SEG155 [73] *((byte*) char_cursor#80) ← (byte) print_char::ch#4 [ char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG156 [74] (byte*) char_cursor#17 ← ++ (byte*) char_cursor#80 [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
    jmp breturn
  //SEG157 print_char::@return
  breturn:
  //SEG158 [75] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] )
    rts
}
//SEG159 print_str
print_str: {
    .label str = 7
  //SEG160 [77] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  b1_from_print_str:
  b1_from_b2:
  //SEG161 [77] phi (byte*) char_cursor#126 = (byte*) char_cursor#17 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG162 [77] phi (byte*) print_str::str#13 = (byte*) print_str::str#15 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
    jmp b1
  //SEG163 print_str::@1
  b1:
  //SEG164 [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
    jmp breturn
  //SEG165 print_str::@return
  breturn:
  //SEG166 [79] return  [ char_cursor#126 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 ] )
    rts
  //SEG167 print_str::@2
  b2:
  //SEG168 [80] *((byte*) char_cursor#126) ← *((byte*) print_str::str#13) [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (char_cursor),y
  //SEG169 [81] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#126 [ print_str::str#13 char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_str::str#13 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG170 [82] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 [ print_str::str#0 char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1_from_b2
}
//SEG171 div16s
div16s: {
    .label _2 = 3
    .label _7 = $c
    .label resultu = $e
    .label return = $e
    .label dividend = 7
    .label divisor = $c
    .label dividendu = 3
    .label divisoru = $c
  //SEG172 [83] if((signed word) div16s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@16 [ div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ) -- vwsz1_ge_0_then_la1 
    lda dividend+1
    bpl b16
    jmp b7
  //SEG173 div16s::@7
  b7:
  //SEG174 [84] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda dividend
    eor #$ff
    adc #0
    sta _2
    lda dividend+1
    eor #$ff
    adc #0
    sta _2+1
  //SEG175 [85] (word~) div16s::dividendu#8 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] )
    // (word~) div16s::dividendu#8 = (word)(signed word~) div16s::$2  // register copy zp ZP_WORD:3
  //SEG176 [86] phi from div16s::@7 to div16s::@2 [phi:div16s::@7->div16s::@2]
  b2_from_b7:
  //SEG177 [86] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#8 [phi:div16s::@7->div16s::@2#0] -- register_copy 
  //SEG178 [86] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div16s::@7->div16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
    jmp b2
  //SEG179 div16s::@2
  b2:
  //SEG180 [87] if((signed word) div16s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@17 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ) -- vwsz1_ge_0_then_la1 
    lda divisor+1
    bpl b17
    jmp b9
  //SEG181 div16s::@9
  b9:
  //SEG182 [88] (signed word~) div16s::$7 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda _7
    eor #$ff
    adc #0
    sta _7
    lda _7+1
    eor #$ff
    adc #0
    sta _7+1
  //SEG183 [89] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ) -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
  //SEG184 [90] (word~) div16s::divisoru#5 ← (word)(signed word~) div16s::$7 [ div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] )
    // (word~) div16s::divisoru#5 = (word)(signed word~) div16s::$7  // register copy zp ZP_WORD:12
  //SEG185 [91] phi from div16s::@17 div16s::@9 to div16s::@4 [phi:div16s::@17/div16s::@9->div16s::@4]
  b4_from_b17:
  b4_from_b9:
  //SEG186 [91] phi (byte) div16s::neg#4 = (byte) div16s::neg#3 [phi:div16s::@17/div16s::@9->div16s::@4#0] -- register_copy 
  //SEG187 [91] phi (word) div16s::divisoru#3 = (word~) div16s::divisoru#4 [phi:div16s::@17/div16s::@9->div16s::@4#1] -- register_copy 
    jmp b4
  //SEG188 div16s::@4
  b4:
  //SEG189 [92] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] )
    // (word) div16u::dividend#0 = (word) div16s::dividendu#3  // register copy zp ZP_WORD:3
  //SEG190 [93] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] )
    // (word) div16u::divisor#0 = (word) div16s::divisoru#3  // register copy zp ZP_WORD:12
  //SEG191 [94] call div16u param-assignment [ div16s::neg#4 div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] )
  //SEG192 [106] phi from div16s::@4 to div16u [phi:div16s::@4->div16u]
  div16u_from_b4:
  //SEG193 [106] phi (word) rem16u#31 = (word) divr16u::rem#10 [phi:div16s::@4->div16u#0] -- register_copy 
  //SEG194 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#0 [phi:div16s::@4->div16u#1] -- register_copy 
  //SEG195 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#0 [phi:div16s::@4->div16u#2] -- register_copy 
    jsr div16u
  //SEG196 [95] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#2 divr16u::rem#10 ] )
    // (word) div16u::return#2 = (word) div16u::return#0  // register copy zp ZP_WORD:14
    jmp b15
  //SEG197 div16s::@15
  b15:
  //SEG198 [96] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] )
    // (word) div16s::resultu#0 = (word) div16u::return#2  // register copy zp ZP_WORD:14
  //SEG199 [97] if((byte) div16s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@5 [ div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 ] ) -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b5
    jmp b18
  //SEG200 div16s::@18
  b18:
  //SEG201 [98] (signed word~) div16s::return#6 ← (signed word)(word) div16s::resultu#0 [ div16s::return#6 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 divr16u::rem#10 ] )
    // (signed word~) div16s::return#6 = (signed word)(word) div16s::resultu#0  // register copy zp ZP_WORD:14
  //SEG202 [99] (signed word~) rem16s#32 ← (signed word)(word) divr16u::rem#10 [ div16s::return#6 rem16s#32 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 rem16s#32 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda divr16u.rem
    sta rem16s
    lda divr16u.rem+1
    sta rem16s+1
  //SEG203 [100] phi from div16s::@18 div16s::@5 to div16s::@return [phi:div16s::@18/div16s::@5->div16s::@return]
  breturn_from_b18:
  breturn_from_b5:
  //SEG204 [100] phi (signed word) rem16s#3 = (signed word~) rem16s#32 [phi:div16s::@18/div16s::@5->div16s::@return#0] -- register_copy 
  //SEG205 [100] phi (signed word) div16s::return#2 = (signed word~) div16s::return#6 [phi:div16s::@18/div16s::@5->div16s::@return#1] -- register_copy 
    jmp breturn
  //SEG206 div16s::@return
  breturn:
  //SEG207 [101] return  [ rem16s#3 div16s::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 rem16s#3 div16s::return#2 divr16u::rem#10 ] )
    rts
  //SEG208 div16s::@5
  b5:
  //SEG209 [102] (signed word) rem16s#1 ← - (signed word)(word) divr16u::rem#10 [ div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda divr16u.rem
    eor #$ff
    adc #0
    sta rem16s
    lda divr16u.rem+1
    eor #$ff
    adc #0
    sta rem16s+1
  //SEG210 [103] (signed word) div16s::return#0 ← - (signed word)(word) div16s::resultu#0 [ divr16u::rem#10 div16s::return#0 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 div16s::return#0 rem16s#1 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda return
    eor #$ff
    adc #0
    sta return
    lda return+1
    eor #$ff
    adc #0
    sta return+1
    jmp breturn_from_b5
  //SEG211 div16s::@17
  b17:
  //SEG212 [104] (word~) div16s::divisoru#4 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] )
    // (word~) div16s::divisoru#4 = (word)(signed word) div16s::divisor#0  // register copy zp ZP_WORD:12
    jmp b4_from_b17
  //SEG213 div16s::@16
  b16:
  //SEG214 [105] (word~) div16s::dividendu#7 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta dividendu
    lda dividend+1
    sta dividendu+1
  //SEG215 [86] phi from div16s::@16 to div16s::@2 [phi:div16s::@16->div16s::@2]
  b2_from_b16:
  //SEG216 [86] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#7 [phi:div16s::@16->div16s::@2#0] -- register_copy 
  //SEG217 [86] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16s::@16->div16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp b2
}
//SEG218 div16u
div16u: {
    .label return = $e
    .label dividend = 3
    .label divisor = $c
  //SEG219 [107] (word) divr16u::dividend#0 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#0 ] )
    // (word) divr16u::dividend#0 = (word) div16u::dividend#2  // register copy zp ZP_WORD:3
  //SEG220 [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#0 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::dividend#0 divr16u::divisor#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#0 divr16u::divisor#0 ] )
    // (word) divr16u::divisor#0 = (word) div16u::divisor#2  // register copy zp ZP_WORD:12
  //SEG221 [109] call divr16u param-assignment [ divr16u::rem#10 divr16u::return#1 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#1 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#1 ] )
  //SEG222 [113] phi from div16u to divr16u [phi:div16u->divr16u]
  divr16u_from_div16u:
    jsr divr16u
  //SEG223 [110] (word) divr16u::return#0 ← (word) divr16u::return#1 [ divr16u::rem#10 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#0 ] )
    // (word) divr16u::return#0 = (word) divr16u::return#1  // register copy zp ZP_WORD:14
    jmp b2
  //SEG224 div16u::@2
  b2:
  //SEG225 [111] (word) div16u::return#0 ← (word) divr16u::return#0 [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] )
    // (word) div16u::return#0 = (word) divr16u::return#0  // register copy zp ZP_WORD:14
    jmp breturn
  //SEG226 div16u::@return
  breturn:
  //SEG227 [112] return  [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] )
    rts
}
//SEG228 divr16u
divr16u: {
    .label dividend = 3
    .label divisor = $c
    .label return = $e
    .label rem = $10
    .label quotient = $e
  //SEG229 [114] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  b1_from_divr16u:
  //SEG230 [114] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG231 [114] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    lda #<0
    sta quotient
    lda #>0
    sta quotient+1
  //SEG232 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG233 [114] phi (word) divr16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    lda #<0
    sta rem
    lda #>0
    sta rem+1
    jmp b1
  //SEG234 [114] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  b1_from_b3:
  //SEG235 [114] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG236 [114] phi (word) divr16u::quotient#3 = (word) divr16u::return#1 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG237 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#1 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG238 [114] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
    jmp b1
  //SEG239 divr16u::@1
  b1:
  //SEG240 [115] (word) divr16u::rem#1 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG241 [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ) -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG242 [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ) -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG243 [118] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG244 divr16u::@4
  b4:
  //SEG245 [119] (word) divr16u::rem#2 ← ++ (word) divr16u::rem#1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] ) -- vwuz1=_inc_vwuz1 
    inc rem
    bne !+
    inc rem+1
  !:
  //SEG246 [120] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG247 [120] phi (word) divr16u::rem#5 = (word) divr16u::rem#1 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
    jmp b2
  //SEG248 divr16u::@2
  b2:
  //SEG249 [121] (word) divr16u::dividend#1 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG250 [122] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG251 [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3_from_b2
    bne !+
    lda rem
    cmp divisor
    bcc b3_from_b2
  !:
    jmp b5
  //SEG252 divr16u::@5
  b5:
  //SEG253 [124] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG254 [125] (word) divr16u::rem#3 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ) -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG255 [126] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG256 [126] phi (word) divr16u::return#1 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG257 [126] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
    jmp b3
  //SEG258 divr16u::@3
  b3:
  //SEG259 [127] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG260 [128] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b3
    jmp breturn
  //SEG261 divr16u::@return
  breturn:
  //SEG262 [129] return  [ divr16u::rem#10 divr16u::return#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#1 ] )
    rts
}
//SEG263 test_8s
test_8s: {
    .label dividend = 9
    .label divisor = $17
    .label res = $12
    .label i = 2
  //SEG264 [131] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  b1_from_test_8s:
  //SEG265 [131] phi (signed byte) rem8s#18 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#0] -- vbsxx=vbuc1 
    lda #0
    tax
  //SEG266 [131] phi (byte) test_8s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG267 [131] phi from test_8s::@11 to test_8s::@1 [phi:test_8s::@11->test_8s::@1]
  b1_from_b11:
  //SEG268 [131] phi (signed byte) rem8s#18 = (signed byte) rem8s#3 [phi:test_8s::@11->test_8s::@1#0] -- register_copy 
  //SEG269 [131] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@11->test_8s::@1#1] -- register_copy 
    jmp b1
  //SEG270 test_8s::@1
  b1:
  //SEG271 [132] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 divr8u::rem#10 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG272 [133] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG273 [134] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 divr8u::rem#10 ] ) -- vbsaa=vbsz1 
    lda dividend
  //SEG274 [135] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ) -- vbsxx=vbsz1 
    ldx divisor
  //SEG275 [136] call div8s param-assignment [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 divr8u::rem#10 ] )
    jsr div8s
  //SEG276 [137] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 divr8u::rem#10 ] )
    // (signed byte) div8s::return#3 = (signed byte) div8s::return#2  // register copy reg byte a
    jmp b3
  //SEG277 test_8s::@3
  b3:
  //SEG278 [138] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ) -- vbsz1=vbsaa 
    sta res
  //SEG279 [139] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 divr8u::rem#10 ] )
    // (signed byte) print_sbyte::b#1 = (signed byte) test_8s::dividend#0  // register copy zp ZP_BYTE:9
  //SEG280 [140] (byte*~) char_cursor#179 ← (byte*) line_cursor#1 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG281 [141] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  //SEG282 [159] phi from test_8s::@3 to print_sbyte [phi:test_8s::@3->print_sbyte]
  print_sbyte_from_b3:
  //SEG283 [159] phi (byte*) char_cursor#131 = (byte*~) char_cursor#179 [phi:test_8s::@3->print_sbyte#0] -- register_copy 
  //SEG284 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#1 [phi:test_8s::@3->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG285 [142] phi from test_8s::@3 to test_8s::@4 [phi:test_8s::@3->test_8s::@4]
  b4_from_b3:
    jmp b4
  //SEG286 test_8s::@4
  b4:
  //SEG287 [143] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  //SEG288 [76] phi from test_8s::@4 to print_str [phi:test_8s::@4->print_str]
  print_str_from_b4:
  //SEG289 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str [phi:test_8s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG290 test_8s::@5
  b5:
  //SEG291 [144] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG292 [145] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] )
  //SEG293 [159] phi from test_8s::@5 to print_sbyte [phi:test_8s::@5->print_sbyte]
  print_sbyte_from_b5:
  //SEG294 [159] phi (byte*) char_cursor#131 = (byte*) char_cursor#126 [phi:test_8s::@5->print_sbyte#0] -- register_copy 
  //SEG295 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#2 [phi:test_8s::@5->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG296 [146] phi from test_8s::@5 to test_8s::@6 [phi:test_8s::@5->test_8s::@6]
  b6_from_b5:
    jmp b6
  //SEG297 test_8s::@6
  b6:
  //SEG298 [147] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] )
  //SEG299 [76] phi from test_8s::@6 to print_str [phi:test_8s::@6->print_str]
  print_str_from_b6:
  //SEG300 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str1 [phi:test_8s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG301 test_8s::@7
  b7:
  //SEG302 [148] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#3 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG303 [149] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG304 [159] phi from test_8s::@7 to print_sbyte [phi:test_8s::@7->print_sbyte]
  print_sbyte_from_b7:
  //SEG305 [159] phi (byte*) char_cursor#131 = (byte*) char_cursor#126 [phi:test_8s::@7->print_sbyte#0] -- register_copy 
  //SEG306 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#3 [phi:test_8s::@7->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG307 [150] phi from test_8s::@7 to test_8s::@8 [phi:test_8s::@7->test_8s::@8]
  b8_from_b7:
    jmp b8
  //SEG308 test_8s::@8
  b8:
  //SEG309 [151] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG310 [76] phi from test_8s::@8 to print_str [phi:test_8s::@8->print_str]
  print_str_from_b8:
  //SEG311 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str2 [phi:test_8s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG312 test_8s::@9
  b9:
  //SEG313 [152] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#4 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#4 divr8u::rem#10 ] ) -- vbsz1=vbsxx 
    stx print_sbyte.b
  //SEG314 [153] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG315 [159] phi from test_8s::@9 to print_sbyte [phi:test_8s::@9->print_sbyte]
  print_sbyte_from_b9:
  //SEG316 [159] phi (byte*) char_cursor#131 = (byte*) char_cursor#126 [phi:test_8s::@9->print_sbyte#0] -- register_copy 
  //SEG317 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#4 [phi:test_8s::@9->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG318 [154] phi from test_8s::@9 to test_8s::@10 [phi:test_8s::@9->test_8s::@10]
  b10_from_b9:
    jmp b10
  //SEG319 test_8s::@10
  b10:
  //SEG320 [155] call print_ln param-assignment [ line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG321 [44] phi from test_8s::@10 to print_ln [phi:test_8s::@10->print_ln]
  print_ln_from_b10:
  //SEG322 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#1 [phi:test_8s::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG323 test_8s::@11
  b11:
  //SEG324 [156] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG325 [157] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1 [ line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b1_from_b11
    jmp breturn
  //SEG326 test_8s::@return
  breturn:
  //SEG327 [158] return  [ line_cursor#1 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG328 print_sbyte
print_sbyte: {
    .label b = 9
  //SEG329 [160] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1_from_print_sbyte
  //SEG330 [161] phi from print_sbyte to print_sbyte::@2 [phi:print_sbyte->print_sbyte::@2]
  b2_from_print_sbyte:
    jmp b2
  //SEG331 print_sbyte::@2
  b2:
  //SEG332 [162] call print_char param-assignment [ char_cursor#17 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] )
  //SEG333 [72] phi from print_sbyte::@2 to print_char [phi:print_sbyte::@2->print_char]
  print_char_from_b2:
  //SEG334 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#131 [phi:print_sbyte::@2->print_char#0] -- register_copy 
  //SEG335 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
    jmp b4
  //SEG336 print_sbyte::@4
  b4:
  //SEG337 [163] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG338 [164] phi from print_sbyte print_sbyte::@4 to print_sbyte::@1 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1]
  b1_from_print_sbyte:
  b1_from_b4:
  //SEG339 [164] phi (byte*) char_cursor#130 = (byte*) char_cursor#131 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#0] -- register_copy 
  //SEG340 [164] phi (signed byte) print_sbyte::b#6 = (signed byte) print_sbyte::b#5 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#1] -- register_copy 
    jmp b1
  //SEG341 print_sbyte::@1
  b1:
  //SEG342 [165] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 char_cursor#130 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] )
    // (byte~) print_byte::b#9 = (byte)(signed byte) print_sbyte::b#6  // register copy zp ZP_BYTE:9
  //SEG343 [166] call print_byte param-assignment [ char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] )
  //SEG344 [64] phi from print_sbyte::@1 to print_byte [phi:print_sbyte::@1->print_byte]
  print_byte_from_b1:
  //SEG345 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#130 [phi:print_sbyte::@1->print_byte#0] -- register_copy 
  //SEG346 [64] phi (byte) print_byte::b#7 = (byte~) print_byte::b#9 [phi:print_sbyte::@1->print_byte#1] -- register_copy 
    jsr print_byte
    jmp breturn
  //SEG347 print_sbyte::@return
  breturn:
  //SEG348 [167] return  [ char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] )
    rts
}
//SEG349 div8s
div8s: {
    .label neg = $12
  //SEG350 [168] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ) -- vbsaa_ge_0_then_la1 
    cmp #0
    bpl b16
    jmp b7
  //SEG351 div8s::@7
  b7:
  //SEG352 [169] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ) -- vbsaa=_neg_vbsaa 
    eor #$ff
    clc
    adc #1
  //SEG353 [170] (byte~) div8s::dividendu#8 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendu#8 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#8 divr8u::rem#10 ] ) -- vbuyy=vbuaa 
    tay
  //SEG354 [171] phi from div8s::@7 to div8s::@2 [phi:div8s::@7->div8s::@2]
  b2_from_b7:
  //SEG355 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#8 [phi:div8s::@7->div8s::@2#0] -- register_copy 
  //SEG356 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div8s::@7->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
    jmp b2
  //SEG357 div8s::@2
  b2:
  //SEG358 [172] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] ) -- vbsxx_ge_0_then_la1 
    cpx #0
    bpl b17
    jmp b9
  //SEG359 div8s::@9
  b9:
  //SEG360 [173] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ) -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG361 [174] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG362 [175] (byte~) div8s::divisoru#5 ← (byte)(signed byte~) div8s::$7 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#5 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#5 divr8u::rem#10 ] )
    // (byte~) div8s::divisoru#5 = (byte)(signed byte~) div8s::$7  // register copy reg byte x
  //SEG363 [176] phi from div8s::@17 div8s::@9 to div8s::@4 [phi:div8s::@17/div8s::@9->div8s::@4]
  b4_from_b17:
  b4_from_b9:
  //SEG364 [176] phi (byte) div8s::neg#4 = (byte) div8s::neg#3 [phi:div8s::@17/div8s::@9->div8s::@4#0] -- register_copy 
  //SEG365 [176] phi (byte) div8s::divisoru#3 = (byte~) div8s::divisoru#4 [phi:div8s::@17/div8s::@9->div8s::@4#1] -- register_copy 
    jmp b4
  //SEG366 div8s::@4
  b4:
  //SEG367 [177] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 [ div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 divr8u::rem#10 ] ) -- vbuaa=vbuyy 
    tya
  //SEG368 [178] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 [ div8s::neg#4 div8u::dividend#0 div8u::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#0 div8u::divisor#0 divr8u::rem#10 ] )
    // (byte) div8u::divisor#0 = (byte) div8s::divisoru#3  // register copy reg byte x
  //SEG369 [179] call div8u param-assignment [ div8s::neg#4 div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] )
  //SEG370 [191] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  div8u_from_b4:
  //SEG371 [191] phi (byte) rem8u#31 = (byte) divr8u::rem#10 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG372 [191] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#1] -- register_copy 
  //SEG373 [191] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#2] -- register_copy 
    jsr div8u
  //SEG374 [180] (byte) div8u::return#2 ← (byte) div8u::return#0 [ div8s::neg#4 div8u::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#2 divr8u::rem#10 ] )
    // (byte) div8u::return#2 = (byte) div8u::return#0  // register copy reg byte x
    jmp b15
  //SEG375 div8s::@15
  b15:
  //SEG376 [181] (byte) div8s::resultu#0 ← (byte) div8u::return#2 [ div8s::neg#4 div8s::resultu#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8s::resultu#0 divr8u::rem#10 ] ) -- vbuyy=vbuxx 
    txa
    tay
  //SEG377 [182] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ div8s::resultu#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 ] ) -- vbuz1_neq_0_then_la1 
    lda neg
    bne b5
    jmp b18
  //SEG378 div8s::@18
  b18:
  //SEG379 [183] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultu#0 [ div8s::return#6 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#6 divr8u::rem#10 ] ) -- vbsaa=vbsyy 
    tya
  //SEG380 [184] (signed byte~) rem8s#33 ← (signed byte)(byte) divr8u::rem#10 [ div8s::return#6 rem8s#33 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#6 rem8s#33 divr8u::rem#10 ] ) -- vbsxx=vbsz1 
    ldx divr8u.rem
  //SEG381 [185] phi from div8s::@18 div8s::@5 to div8s::@return [phi:div8s::@18/div8s::@5->div8s::@return]
  breturn_from_b18:
  breturn_from_b5:
  //SEG382 [185] phi (signed byte) rem8s#3 = (signed byte~) rem8s#33 [phi:div8s::@18/div8s::@5->div8s::@return#0] -- register_copy 
  //SEG383 [185] phi (signed byte) div8s::return#2 = (signed byte~) div8s::return#6 [phi:div8s::@18/div8s::@5->div8s::@return#1] -- register_copy 
    jmp breturn
  //SEG384 div8s::@return
  breturn:
  //SEG385 [186] return  [ rem8s#3 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#3 div8s::return#2 divr8u::rem#10 ] )
    rts
  //SEG386 div8s::@5
  b5:
  //SEG387 [187] (signed byte) rem8s#1 ← - (signed byte)(byte) divr8u::rem#10 [ div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ) -- vbsxx=_neg_vbsz1 
    lda divr8u.rem
    eor #$ff
    clc
    adc #1
    tax
  //SEG388 [188] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultu#0 [ divr8u::rem#10 div8s::return#0 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 div8s::return#0 rem8s#1 ] ) -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
    jmp breturn_from_b5
  //SEG389 div8s::@17
  b17:
  //SEG390 [189] (byte~) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#4 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#4 divr8u::rem#10 ] )
    // (byte~) div8s::divisoru#4 = (byte)(signed byte) div8s::divisor#0  // register copy reg byte x
    jmp b4_from_b17
  //SEG391 div8s::@16
  b16:
  //SEG392 [190] (byte~) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#7 divr8u::rem#10 ] ) -- vbuyy=vbuaa 
    tay
  //SEG393 [171] phi from div8s::@16 to div8s::@2 [phi:div8s::@16->div8s::@2]
  b2_from_b16:
  //SEG394 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#7 [phi:div8s::@16->div8s::@2#0] -- register_copy 
  //SEG395 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8s::@16->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
}
//SEG396 div8u
div8u: {
  //SEG397 [192] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 [ div8u::divisor#2 divr8u::dividend#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#2 divr8u::dividend#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#2 divr8u::dividend#0 ] ) -- vbuz1=vbuaa 
    sta divr8u.dividend
  //SEG398 [193] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] ) -- vbuz1=vbuxx 
    stx divr8u.divisor
  //SEG399 [194] call divr8u param-assignment [ divr8u::rem#10 divr8u::return#1 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#1 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#1 ] )
  //SEG400 [198] phi from div8u to divr8u [phi:div8u->divr8u]
  divr8u_from_div8u:
    jsr divr8u
  //SEG401 [195] (byte) divr8u::return#0 ← (byte) divr8u::return#1 [ divr8u::rem#10 divr8u::return#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#0 ] )
    // (byte) divr8u::return#0 = (byte) divr8u::return#1  // register copy reg byte x
    jmp b2
  //SEG402 div8u::@2
  b2:
  //SEG403 [196] (byte) div8u::return#0 ← (byte) divr8u::return#0 [ div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 divr8u::rem#10 ] )
    // (byte) div8u::return#0 = (byte) divr8u::return#0  // register copy reg byte x
    jmp breturn
  //SEG404 div8u::@return
  breturn:
  //SEG405 [197] return  [ div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 divr8u::rem#10 ] )
    rts
}
//SEG406 divr8u
divr8u: {
    .label dividend = $14
    .label divisor = $18
    .label rem = $13
  //SEG407 [199] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  b1_from_divr8u:
  //SEG408 [199] phi (byte) divr8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG409 [199] phi (byte) divr8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG410 [199] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
  //SEG411 [199] phi (byte) divr8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta rem
    jmp b1
  //SEG412 [199] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  b1_from_b3:
  //SEG413 [199] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
  //SEG414 [199] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
  //SEG415 [199] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
  //SEG416 [199] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
    jmp b1
  //SEG417 divr8u::@1
  b1:
  //SEG418 [200] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl rem
  //SEG419 [201] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG420 [202] if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2_from_b1
    jmp b4
  //SEG421 divr8u::@4
  b4:
  //SEG422 [203] (byte) divr8u::rem#2 ← ++ (byte) divr8u::rem#1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) -- vbuz1=_inc_vbuz1 
    inc rem
  //SEG423 [204] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  b2_from_b1:
  b2_from_b4:
  //SEG424 [204] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
    jmp b2
  //SEG425 divr8u::@2
  b2:
  //SEG426 [205] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG427 [206] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuxx=vbuxx_rol_1 
    txa
    asl
    tax
  //SEG428 [207] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuz1_lt_vbuz2_then_la1 
    lda rem
    cmp divisor
    bcc b3_from_b2
    jmp b5
  //SEG429 divr8u::@5
  b5:
  //SEG430 [208] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG431 [209] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) -- vbuz1=vbuz1_minus_vbuz2 
    lda rem
    sec
    sbc divisor
    sta rem
  //SEG432 [210] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  b3_from_b2:
  b3_from_b5:
  //SEG433 [210] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
  //SEG434 [210] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
    jmp b3
  //SEG435 divr8u::@3
  b3:
  //SEG436 [211] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG437 [212] if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1 [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b1_from_b3
    jmp breturn
  //SEG438 divr8u::@return
  breturn:
  //SEG439 [213] return  [ divr8u::rem#10 divr8u::return#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#1 ] )
    rts
}
//SEG440 test_16u
test_16u: {
    .label dividend = 7
    .label divisor = $c
    .label res = $e
    .label i = 2
  //SEG441 [215] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  b1_from_test_16u:
  //SEG442 [215] phi (word) rem16u#35 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta rem16u
    lda #>0
    sta rem16u+1
  //SEG443 [215] phi (byte) test_16u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG444 [215] phi from test_16u::@11 to test_16u::@1 [phi:test_16u::@11->test_16u::@1]
  b1_from_b11:
  //SEG445 [215] phi (word) rem16u#35 = (word) divr16u::rem#10 [phi:test_16u::@11->test_16u::@1#0] -- register_copy 
  //SEG446 [215] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@11->test_16u::@1#1] -- register_copy 
    jmp b1
  //SEG447 test_16u::@1
  b1:
  //SEG448 [216] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG449 [217] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG450 [218] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG451 [219] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
    // (word) div16u::divisor#1 = (word) test_16u::divisor#0  // register copy zp ZP_WORD:12
  //SEG452 [220] call div16u param-assignment [ line_cursor#1 div16u::return#0 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::return#0 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  //SEG453 [106] phi from test_16u::@1 to div16u [phi:test_16u::@1->div16u]
  div16u_from_b1:
  //SEG454 [106] phi (word) rem16u#31 = (word) rem16u#35 [phi:test_16u::@1->div16u#0] -- register_copy 
  //SEG455 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#1 [phi:test_16u::@1->div16u#1] -- register_copy 
  //SEG456 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#1 [phi:test_16u::@1->div16u#2] -- register_copy 
    jsr div16u
  //SEG457 [221] (word) div16u::return#3 ← (word) div16u::return#0 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] )
    // (word) div16u::return#3 = (word) div16u::return#0  // register copy zp ZP_WORD:14
    jmp b3
  //SEG458 test_16u::@3
  b3:
  //SEG459 [222] (word) test_16u::res#0 ← (word) div16u::return#3 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] )
    // (word) test_16u::res#0 = (word) div16u::return#3  // register copy zp ZP_WORD:14
  //SEG460 [223] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
    // (word) print_word::w#1 = (word) test_16u::dividend#0  // register copy zp ZP_WORD:7
  //SEG461 [224] (byte*~) char_cursor#162 ← (byte*) line_cursor#1 [ line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG462 [225] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG463 [58] phi from test_16u::@3 to print_word [phi:test_16u::@3->print_word]
  print_word_from_b3:
  //SEG464 [58] phi (byte*) char_cursor#132 = (byte*~) char_cursor#162 [phi:test_16u::@3->print_word#0] -- register_copy 
  //SEG465 [58] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:test_16u::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG466 [226] phi from test_16u::@3 to test_16u::@4 [phi:test_16u::@3->test_16u::@4]
  b4_from_b3:
    jmp b4
  //SEG467 test_16u::@4
  b4:
  //SEG468 [227] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG469 [76] phi from test_16u::@4 to print_str [phi:test_16u::@4->print_str]
  print_str_from_b4:
  //SEG470 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str [phi:test_16u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG471 test_16u::@5
  b5:
  //SEG472 [228] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG473 [229] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  //SEG474 [58] phi from test_16u::@5 to print_word [phi:test_16u::@5->print_word]
  print_word_from_b5:
  //SEG475 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#126 [phi:test_16u::@5->print_word#0] -- register_copy 
  //SEG476 [58] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:test_16u::@5->print_word#1] -- register_copy 
    jsr print_word
  //SEG477 [230] phi from test_16u::@5 to test_16u::@6 [phi:test_16u::@5->test_16u::@6]
  b6_from_b5:
    jmp b6
  //SEG478 test_16u::@6
  b6:
  //SEG479 [231] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  //SEG480 [76] phi from test_16u::@6 to print_str [phi:test_16u::@6->print_str]
  print_str_from_b6:
  //SEG481 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str1 [phi:test_16u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG482 test_16u::@7
  b7:
  //SEG483 [232] (word) print_word::w#3 ← (word) test_16u::res#0 [ line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG484 [233] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  //SEG485 [58] phi from test_16u::@7 to print_word [phi:test_16u::@7->print_word]
  print_word_from_b7:
  //SEG486 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#126 [phi:test_16u::@7->print_word#0] -- register_copy 
  //SEG487 [58] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:test_16u::@7->print_word#1] -- register_copy 
    jsr print_word
  //SEG488 [234] phi from test_16u::@7 to test_16u::@8 [phi:test_16u::@7->test_16u::@8]
  b8_from_b7:
    jmp b8
  //SEG489 test_16u::@8
  b8:
  //SEG490 [235] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 ] )
  //SEG491 [76] phi from test_16u::@8 to print_str [phi:test_16u::@8->print_str]
  print_str_from_b8:
  //SEG492 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str2 [phi:test_16u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG493 test_16u::@9
  b9:
  //SEG494 [236] (word) print_word::w#4 ← (word) divr16u::rem#10 [ line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda divr16u.rem
    sta print_word.w
    lda divr16u.rem+1
    sta print_word.w+1
  //SEG495 [237] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  //SEG496 [58] phi from test_16u::@9 to print_word [phi:test_16u::@9->print_word]
  print_word_from_b9:
  //SEG497 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#126 [phi:test_16u::@9->print_word#0] -- register_copy 
  //SEG498 [58] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:test_16u::@9->print_word#1] -- register_copy 
    jsr print_word
  //SEG499 [238] phi from test_16u::@9 to test_16u::@10 [phi:test_16u::@9->test_16u::@10]
  b10_from_b9:
    jmp b10
  //SEG500 test_16u::@10
  b10:
  //SEG501 [239] call print_ln param-assignment [ line_cursor#1 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 ] )
  //SEG502 [44] phi from test_16u::@10 to print_ln [phi:test_16u::@10->print_ln]
  print_ln_from_b10:
  //SEG503 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#1 [phi:test_16u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG504 test_16u::@11
  b11:
  //SEG505 [240] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG506 [241] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #$c
    bne b1_from_b11
    jmp breturn
  //SEG507 test_16u::@return
  breturn:
  //SEG508 [242] return  [ line_cursor#1 divr16u::rem#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG509 test_8u
test_8u: {
    .label dividend = 9
    .label divisor = $12
    .label i = 2
  //SEG510 [244] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  b1_from_test_8u:
  //SEG511 [244] phi (byte*) line_cursor#41 = (const byte*) SCREEN#0 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta line_cursor
    lda #>SCREEN
    sta line_cursor+1
  //SEG512 [244] phi (byte*) char_cursor#135 = (const byte*) SCREEN#0 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta char_cursor
    lda #>SCREEN
    sta char_cursor+1
  //SEG513 [244] phi (byte) rem8u#36 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta rem8u
  //SEG514 [244] phi (byte) test_8u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#3] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG515 test_8u::@1
  b1:
  //SEG516 [245] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG517 [246] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda divisors,y
    sta divisor
  //SEG518 [247] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 [ line_cursor#41 char_cursor#135 div8u::dividend#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::dividend#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuaa=vbuz1 
    lda dividend
  //SEG519 [248] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ line_cursor#41 char_cursor#135 div8u::dividend#1 div8u::divisor#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::dividend#1 div8u::divisor#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuxx=vbuz1 
    ldx divisor
  //SEG520 [249] call div8u param-assignment [ line_cursor#41 char_cursor#135 div8u::return#0 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::return#0 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  //SEG521 [191] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  div8u_from_b1:
  //SEG522 [191] phi (byte) rem8u#31 = (byte) rem8u#36 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG523 [191] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#1] -- register_copy 
  //SEG524 [191] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#2] -- register_copy 
    jsr div8u
  //SEG525 [250] (byte) div8u::return#3 ← (byte) div8u::return#0 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] )
    // (byte) div8u::return#3 = (byte) div8u::return#0  // register copy reg byte x
    jmp b3
  //SEG526 test_8u::@3
  b3:
  //SEG527 [251] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] )
    // (byte) test_8u::res#0 = (byte) div8u::return#3  // register copy reg byte x
  //SEG528 [252] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ line_cursor#41 print_byte::b#3 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 print_byte::b#3 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
    // (byte) print_byte::b#3 = (byte) test_8u::dividend#0  // register copy zp ZP_BYTE:9
  //SEG529 [253] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG530 [64] phi from test_8u::@3 to print_byte [phi:test_8u::@3->print_byte]
  print_byte_from_b3:
  //SEG531 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#135 [phi:test_8u::@3->print_byte#0] -- register_copy 
  //SEG532 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG533 [254] phi from test_8u::@3 to test_8u::@4 [phi:test_8u::@3->test_8u::@4]
  b4_from_b3:
    jmp b4
  //SEG534 test_8u::@4
  b4:
  //SEG535 [255] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG536 [76] phi from test_8u::@4 to print_str [phi:test_8u::@4->print_str]
  print_str_from_b4:
  //SEG537 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str [phi:test_8u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
    jmp b5
  //SEG538 test_8u::@5
  b5:
  //SEG539 [256] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ line_cursor#41 char_cursor#126 print_byte::b#4 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#4 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG540 [257] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  //SEG541 [64] phi from test_8u::@5 to print_byte [phi:test_8u::@5->print_byte]
  print_byte_from_b5:
  //SEG542 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#126 [phi:test_8u::@5->print_byte#0] -- register_copy 
  //SEG543 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@5->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG544 [258] phi from test_8u::@5 to test_8u::@6 [phi:test_8u::@5->test_8u::@6]
  b6_from_b5:
    jmp b6
  //SEG545 test_8u::@6
  b6:
  //SEG546 [259] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  //SEG547 [76] phi from test_8u::@6 to print_str [phi:test_8u::@6->print_str]
  print_str_from_b6:
  //SEG548 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str1 [phi:test_8u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
    jmp b7
  //SEG549 test_8u::@7
  b7:
  //SEG550 [260] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ line_cursor#41 char_cursor#126 print_byte::b#5 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#5 divr8u::rem#10 test_8u::i#10 ] ) -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG551 [261] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  //SEG552 [64] phi from test_8u::@7 to print_byte [phi:test_8u::@7->print_byte]
  print_byte_from_b7:
  //SEG553 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#126 [phi:test_8u::@7->print_byte#0] -- register_copy 
  //SEG554 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@7->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG555 [262] phi from test_8u::@7 to test_8u::@8 [phi:test_8u::@7->test_8u::@8]
  b8_from_b7:
    jmp b8
  //SEG556 test_8u::@8
  b8:
  //SEG557 [263] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 ] )
  //SEG558 [76] phi from test_8u::@8 to print_str [phi:test_8u::@8->print_str]
  print_str_from_b8:
  //SEG559 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str2 [phi:test_8u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
    jmp b9
  //SEG560 test_8u::@9
  b9:
  //SEG561 [264] (byte) print_byte::b#6 ← (byte) divr8u::rem#10 [ line_cursor#41 char_cursor#126 print_byte::b#6 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#6 divr8u::rem#10 test_8u::i#10 ] ) -- vbuz1=vbuz2 
    lda divr8u.rem
    sta print_byte.b
  //SEG562 [265] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  //SEG563 [64] phi from test_8u::@9 to print_byte [phi:test_8u::@9->print_byte]
  print_byte_from_b9:
  //SEG564 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#126 [phi:test_8u::@9->print_byte#0] -- register_copy 
  //SEG565 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@9->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG566 [266] phi from test_8u::@9 to test_8u::@10 [phi:test_8u::@9->test_8u::@10]
  b10_from_b9:
    jmp b10
  //SEG567 test_8u::@10
  b10:
  //SEG568 [267] call print_ln param-assignment [ line_cursor#1 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#10 ] )
  //SEG569 [44] phi from test_8u::@10 to print_ln [phi:test_8u::@10->print_ln]
  print_ln_from_b10:
  //SEG570 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#41 [phi:test_8u::@10->print_ln#0] -- register_copy 
    jsr print_ln
    jmp b11
  //SEG571 test_8u::@11
  b11:
  //SEG572 [268] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG573 [269] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@12 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b12
    jmp breturn
  //SEG574 test_8u::@return
  breturn:
  //SEG575 [270] return  [ line_cursor#1 divr8u::rem#10 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 ] )
    rts
  //SEG576 test_8u::@12
  b12:
  //SEG577 [271] (byte*~) char_cursor#185 ← (byte*) line_cursor#1 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG578 [244] phi from test_8u::@12 to test_8u::@1 [phi:test_8u::@12->test_8u::@1]
  b1_from_b12:
  //SEG579 [244] phi (byte*) line_cursor#41 = (byte*) line_cursor#1 [phi:test_8u::@12->test_8u::@1#0] -- register_copy 
  //SEG580 [244] phi (byte*) char_cursor#135 = (byte*~) char_cursor#185 [phi:test_8u::@12->test_8u::@1#1] -- register_copy 
  //SEG581 [244] phi (byte) rem8u#36 = (byte) divr8u::rem#10 [phi:test_8u::@12->test_8u::@1#2] -- register_copy 
  //SEG582 [244] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@12->test_8u::@1#3] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG583 print_cls
print_cls: {
    .label sc = 3
  //SEG584 [273] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  b1_from_print_cls:
  //SEG585 [273] phi (byte*) print_cls::sc#2 = (const byte*) SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
    jmp b1
  //SEG586 [273] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  b1_from_b1:
  //SEG587 [273] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
    jmp b1
  //SEG588 print_cls::@1
  b1:
  //SEG589 [274] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG590 [275] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG591 [276] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bne b1_from_b1
    lda sc
    cmp #<SCREEN+$3e8
    bne b1_from_b1
    jmp breturn
  //SEG592 print_cls::@return
  breturn:
  //SEG593 [277] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b21
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b4
Removing instruction jmp b15
Removing instruction jmp b18
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b7
Removing instruction jmp b2
Removing instruction jmp b9
Removing instruction jmp b4
Removing instruction jmp b15
Removing instruction jmp b18
Removing instruction jmp breturn
Removing instruction jmp b2
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b4
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b3
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b9
Removing instruction jmp b10
Removing instruction jmp b11
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction ldy i
Removing instruction lda i
Removing instruction ldy #0
Replacing instruction lda #<0 with TXA
Removing instruction lda #>0
Removing instruction lda #<0
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction ldy i
Replacing instruction lda #0 with TXA
Removing instruction lda #>0
Removing instruction lda #0
Removing instruction ldy i
Removing instruction lda i
Removing instruction lda #0
Removing instruction ldy i
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b11 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_print_sword with b1
Replacing label b1_from_b2 with b1
Replacing label breturn_from_b5 with breturn
Replacing label b4_from_b17 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b11 with b1
Replacing label b1_from_print_sbyte with b1
Replacing label breturn_from_b5 with breturn
Replacing label b4_from_b17 with b4
Replacing label b2_from_b1 with b2
Replacing label b3_from_b2 with b3
Replacing label b1_from_b3 with b1
Replacing label b1_from_b11 with b1
Replacing label b1_from_b1 with b1
Replacing label b1_from_b1 with b1
Removing instruction bbegin:
Removing instruction b21_from_bbegin:
Removing instruction main_from_b21:
Removing instruction bend_from_b21:
Removing instruction b1_from_main:
Removing instruction test_8u_from_b1:
Removing instruction b2_from_b1:
Removing instruction test_16u_from_b2:
Removing instruction b3_from_b2:
Removing instruction test_8s_from_b3:
Removing instruction b4_from_b3:
Removing instruction test_16s_from_b4:
Removing instruction b1_from_b11:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b1_from_print_ln:
Removing instruction b1_from_b1:
Removing instruction b2_from_print_sword:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sword:
Removing instruction b1_from_b4:
Removing instruction b1_from_print_str:
Removing instruction b1_from_b2:
Removing instruction b4_from_b17:
Removing instruction b4_from_b9:
Removing instruction breturn_from_b18:
Removing instruction breturn_from_b5:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b1_from_b11:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b2_from_print_sbyte:
Removing instruction print_char_from_b2:
Removing instruction b1_from_print_sbyte:
Removing instruction b1_from_b4:
Removing instruction b4_from_b17:
Removing instruction b4_from_b9:
Removing instruction breturn_from_b18:
Removing instruction breturn_from_b5:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b4:
Removing instruction b3_from_b2:
Removing instruction b3_from_b5:
Removing instruction b1_from_b11:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b4_from_b3:
Removing instruction print_str_from_b4:
Removing instruction b6_from_b5:
Removing instruction print_str_from_b6:
Removing instruction b8_from_b7:
Removing instruction print_str_from_b8:
Removing instruction b10_from_b9:
Removing instruction print_ln_from_b10:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b21:
Removing instruction bend:
Removing instruction print_cls_from_main:
Removing instruction b1:
Removing instruction b2:
Removing instruction b3:
Removing instruction b4:
Removing instruction breturn:
Removing instruction b1_from_test_16s:
Removing instruction b3:
Removing instruction print_sword_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_sword_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_sword_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_sword_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b4:
Removing instruction print_word_from_b1:
Removing instruction breturn:
Removing instruction print_byte_from_print_word:
Removing instruction b1:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction print_char_from_print_byte:
Removing instruction b1:
Removing instruction print_char_from_b1:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b2_from_b7:
Removing instruction b9:
Removing instruction div16u_from_b4:
Removing instruction b15:
Removing instruction b18:
Removing instruction b2_from_b16:
Removing instruction divr16u_from_div16u:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_divr16u:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_test_8s:
Removing instruction b3:
Removing instruction print_sbyte_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_sbyte_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_sbyte_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_sbyte_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b2:
Removing instruction b4:
Removing instruction print_byte_from_b1:
Removing instruction breturn:
Removing instruction b7:
Removing instruction b2_from_b7:
Removing instruction b9:
Removing instruction div8u_from_b4:
Removing instruction b15:
Removing instruction b18:
Removing instruction b2_from_b16:
Removing instruction divr8u_from_div8u:
Removing instruction b2:
Removing instruction breturn:
Removing instruction b1_from_divr8u:
Removing instruction b4:
Removing instruction b5:
Removing instruction breturn:
Removing instruction b1_from_test_16u:
Removing instruction div16u_from_b1:
Removing instruction b3:
Removing instruction print_word_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_word_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_word_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_word_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b1_from_test_8u:
Removing instruction div8u_from_b1:
Removing instruction b3:
Removing instruction print_byte_from_b3:
Removing instruction b4:
Removing instruction b5:
Removing instruction print_byte_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction print_byte_from_b7:
Removing instruction b8:
Removing instruction b9:
Removing instruction print_byte_from_b9:
Removing instruction b10:
Removing instruction b11:
Removing instruction breturn:
Removing instruction b1_from_b12:
Removing instruction b1_from_print_cls:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to b4 in bpl b17
Skipping double jump to b4 in bpl b17
Succesful ASM optimization Pass5DoubleJumpElimination
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda rem
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction b17:
Removing instruction b17:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp b4
Removing unreachable instruction jmp b4
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [83] bne b1 to beq

FINAL SYMBOL TABLE
(label) @21
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 1024
(byte*) char_cursor
(byte*) char_cursor#1 char_cursor zp ZP_WORD:10 101.0
(byte*) char_cursor#126 char_cursor zp ZP_WORD:10 15.607142857142856
(byte*) char_cursor#128 char_cursor zp ZP_WORD:10 3.0
(byte*) char_cursor#129 char_cursor zp ZP_WORD:10 15.999999999999998
(byte*) char_cursor#130 char_cursor zp ZP_WORD:10 3.0
(byte*) char_cursor#131 char_cursor zp ZP_WORD:10 15.999999999999998
(byte*) char_cursor#132 char_cursor zp ZP_WORD:10 24.0
(byte*) char_cursor#133 char_cursor zp ZP_WORD:10 17.333333333333332
(byte*) char_cursor#135 char_cursor zp ZP_WORD:10 2.4444444444444446
(byte*~) char_cursor#155 char_cursor zp ZP_WORD:10 22.0
(byte*~) char_cursor#162 char_cursor zp ZP_WORD:10 22.0
(byte*) char_cursor#17 char_cursor zp ZP_WORD:10 2.0178571428571432
(byte*~) char_cursor#179 char_cursor zp ZP_WORD:10 22.0
(byte*~) char_cursor#185 char_cursor zp ZP_WORD:10 22.0
(byte*) char_cursor#80 char_cursor zp ZP_WORD:10 6.0
(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
(signed word~) div16s::$2 $2 zp ZP_WORD:3 2.0
(signed word~) div16s::$7 $7 zp ZP_WORD:12 1.0
(label) div16s::@15
(label) div16s::@16
(label) div16s::@17
(label) div16s::@18
(label) div16s::@2
(label) div16s::@4
(label) div16s::@5
(label) div16s::@7
(label) div16s::@9
(label) div16s::@return
(signed word) div16s::dividend
(signed word) div16s::dividend#0 dividend zp ZP_WORD:7 5.0
(word) div16s::dividendu
(word) div16s::dividendu#3 dividendu zp ZP_WORD:3 0.8571428571428571
(word~) div16s::dividendu#7 dividendu zp ZP_WORD:3 4.0
(word~) div16s::dividendu#8 dividendu zp ZP_WORD:3 4.0
(signed word) div16s::divisor
(signed word) div16s::divisor#0 divisor zp ZP_WORD:12 2.142857142857143
(word) div16s::divisoru
(word) div16s::divisoru#3 divisoru zp ZP_WORD:12 3.0
(word~) div16s::divisoru#4 divisoru zp ZP_WORD:12 4.0
(word~) div16s::divisoru#5 divisoru zp ZP_WORD:12 4.0
(byte) div16s::neg
(byte) div16s::neg#2 reg byte y 2.0
(byte) div16s::neg#3 reg byte y 1.0
(byte) div16s::neg#4 reg byte y 1.0
(word) div16s::resultu
(word) div16s::resultu#0 resultu zp ZP_WORD:14 0.6666666666666666
(signed word) div16s::return
(signed word) div16s::return#0 return zp ZP_WORD:14 4.0
(signed word) div16s::return#2 return zp ZP_WORD:14 5.0
(signed word) div16s::return#3 return zp ZP_WORD:14 22.0
(signed word~) div16s::return#6 return zp ZP_WORD:14 2.0
(word()) div16u((word) div16u::dividend , (word) div16u::divisor)
(label) div16u::@2
(label) div16u::@return
(word) div16u::dividend
(word) div16u::dividend#0 dividend zp ZP_WORD:3 2.0
(word) div16u::dividend#1 dividend zp ZP_WORD:3 11.0
(word) div16u::dividend#2 dividend zp ZP_WORD:3 15.0
(word) div16u::divisor
(word) div16u::divisor#0 divisor zp ZP_WORD:12 4.0
(word) div16u::divisor#1 divisor zp ZP_WORD:12 22.0
(word) div16u::divisor#2 divisor zp ZP_WORD:12 7.5
(word) div16u::return
(word) div16u::return#0 return zp ZP_WORD:14 3.75
(word) div16u::return#2 return zp ZP_WORD:14 4.0
(word) div16u::return#3 return zp ZP_WORD:14 22.0
(signed byte()) div8s((signed byte) div8s::dividend , (signed byte) div8s::divisor)
(signed byte~) div8s::$2 reg byte a 2.0
(signed byte~) div8s::$7 reg byte x 1.0
(label) div8s::@15
(label) div8s::@16
(label) div8s::@17
(label) div8s::@18
(label) div8s::@2
(label) div8s::@4
(label) div8s::@5
(label) div8s::@7
(label) div8s::@9
(label) div8s::@return
(signed byte) div8s::dividend
(signed byte) div8s::dividend#0 reg byte a 5.0
(byte) div8s::dividendu
(byte) div8s::dividendu#3 reg byte y 0.8571428571428571
(byte~) div8s::dividendu#7 reg byte y 4.0
(byte~) div8s::dividendu#8 reg byte y 4.0
(signed byte) div8s::divisor
(signed byte) div8s::divisor#0 reg byte x 2.142857142857143
(byte) div8s::divisoru
(byte) div8s::divisoru#3 reg byte x 3.0
(byte~) div8s::divisoru#4 reg byte x 4.0
(byte~) div8s::divisoru#5 reg byte x 4.0
(byte) div8s::neg
(byte) div8s::neg#2 neg zp ZP_BYTE:18 2.0
(byte) div8s::neg#3 neg zp ZP_BYTE:18 1.0
(byte) div8s::neg#4 neg zp ZP_BYTE:18 1.0
(byte) div8s::resultu
(byte) div8s::resultu#0 reg byte y 0.6666666666666666
(signed byte) div8s::return
(signed byte) div8s::return#0 reg byte a 4.0
(signed byte) div8s::return#2 reg byte a 5.0
(signed byte) div8s::return#3 reg byte a 22.0
(signed byte~) div8s::return#6 reg byte a 2.0
(byte()) div8u((byte) div8u::dividend , (byte) div8u::divisor)
(label) div8u::@2
(label) div8u::@return
(byte) div8u::dividend
(byte) div8u::dividend#0 reg byte a 2.0
(byte) div8u::dividend#1 reg byte a 11.0
(byte) div8u::dividend#2 reg byte a 15.0
(byte) div8u::divisor
(byte) div8u::divisor#0 reg byte x 4.0
(byte) div8u::divisor#1 reg byte x 22.0
(byte) div8u::divisor#2 reg byte x 7.5
(byte) div8u::return
(byte) div8u::return#0 reg byte x 3.75
(byte) div8u::return#2 reg byte x 4.0
(byte) div8u::return#3 reg byte x 22.0
(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
(byte~) divr16u::$1 reg byte a 202.0
(byte~) divr16u::$2 reg byte a 202.0
(label) divr16u::@1
(label) divr16u::@2
(label) divr16u::@3
(label) divr16u::@4
(label) divr16u::@5
(label) divr16u::@return
(word) divr16u::dividend
(word) divr16u::dividend#0 dividend zp ZP_WORD:3 1.3333333333333333
(word) divr16u::dividend#1 dividend zp ZP_WORD:3 25.25
(word) divr16u::dividend#2 dividend zp ZP_WORD:3 43.57142857142858
(word) divr16u::divisor
(word) divr16u::divisor#0 divisor zp ZP_WORD:12 12.0
(byte) divr16u::i
(byte) divr16u::i#1 reg byte x 151.5
(byte) divr16u::i#2 reg byte x 15.538461538461538
(word) divr16u::quotient
(word) divr16u::quotient#1 quotient zp ZP_WORD:14 151.5
(word) divr16u::quotient#2 quotient zp ZP_WORD:14 101.0
(word) divr16u::quotient#3 quotient zp ZP_WORD:14 25.25
(word) divr16u::rem
(word) divr16u::rem#1 rem zp ZP_WORD:16 75.75
(word) divr16u::rem#10 rem zp ZP_WORD:16 3.8023255813953494
(word) divr16u::rem#2 rem zp ZP_WORD:16 202.0
(word) divr16u::rem#3 rem zp ZP_WORD:16 202.0
(word) divr16u::rem#4 rem zp ZP_WORD:16 202.0
(word) divr16u::rem#5 rem zp ZP_WORD:16 101.0
(word) divr16u::return
(word) divr16u::return#0 return zp ZP_WORD:14 4.0
(word) divr16u::return#1 return zp ZP_WORD:14 61.0
(byte()) divr8u((byte) divr8u::dividend , (byte) divr8u::divisor , (byte) divr8u::rem)
(byte~) divr8u::$1 reg byte a 202.0
(label) divr8u::@1
(label) divr8u::@2
(label) divr8u::@3
(label) divr8u::@4
(label) divr8u::@5
(label) divr8u::@return
(byte) divr8u::dividend
(byte) divr8u::dividend#0 dividend zp ZP_BYTE:20 1.3333333333333333
(byte) divr8u::dividend#1 dividend zp ZP_BYTE:20 25.25
(byte) divr8u::dividend#2 dividend zp ZP_BYTE:20 50.83333333333333
(byte) divr8u::divisor
(byte) divr8u::divisor#0 divisor zp ZP_BYTE:24 12.75
(byte) divr8u::i
(byte) divr8u::i#1 reg byte y 151.5
(byte) divr8u::i#2 reg byte y 16.833333333333332
(byte) divr8u::quotient
(byte) divr8u::quotient#1 reg byte x 151.5
(byte) divr8u::quotient#2 reg byte x 101.0
(byte) divr8u::quotient#3 reg byte x 28.857142857142858
(byte) divr8u::rem
(byte) divr8u::rem#1 rem zp ZP_BYTE:19 101.0
(byte) divr8u::rem#10 rem zp ZP_BYTE:19 3.8023255813953494
(byte) divr8u::rem#2 rem zp ZP_BYTE:19 202.0
(byte) divr8u::rem#3 rem zp ZP_BYTE:19 202.0
(byte) divr8u::rem#4 rem zp ZP_BYTE:19 202.0
(byte) divr8u::rem#5 rem zp ZP_BYTE:19 101.0
(byte) divr8u::return
(byte) divr8u::return#0 reg byte x 4.0
(byte) divr8u::return#1 reg byte x 61.0
(byte*) line_cursor
(byte*) line_cursor#1 line_cursor zp ZP_WORD:5 3.9099999999999993
(byte*) line_cursor#20 line_cursor zp ZP_WORD:5 204.0
(byte*) line_cursor#39 line_cursor zp ZP_WORD:5 46.0
(byte*) line_cursor#41 line_cursor zp ZP_WORD:5 0.9565217391304348
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@return
(void()) print_byte((byte) print_byte::b)
(byte~) print_byte::$0 reg byte a 4.0
(byte~) print_byte::$2 reg byte a 4.0
(label) print_byte::@1
(label) print_byte::@return
(byte) print_byte::b
(byte) print_byte::b#1 b zp ZP_BYTE:9 4.0
(byte) print_byte::b#2 b zp ZP_BYTE:9 4.0
(byte) print_byte::b#3 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#4 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#5 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#6 b zp ZP_BYTE:9 22.0
(byte) print_byte::b#7 b zp ZP_BYTE:9 13.5
(byte~) print_byte::b#9 b zp ZP_BYTE:9 4.0
(byte[]) print_byte::hextab
(const string) print_byte::hextab#0 hextab = (string) "0123456789abcdef"
(void()) print_char((byte) print_char::ch)
(label) print_char::@return
(byte) print_char::ch
(byte) print_char::ch#2 reg byte a 4.0
(byte) print_char::ch#3 reg byte a 4.0
(byte) print_char::ch#4 reg byte a 6.0
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte*) print_cls::sc
(byte*) print_cls::sc#1 sc zp ZP_WORD:3 16.5
(byte*) print_cls::sc#2 sc zp ZP_WORD:3 16.5
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(void()) print_sbyte((signed byte) print_sbyte::b)
(label) print_sbyte::@1
(label) print_sbyte::@2
(label) print_sbyte::@4
(label) print_sbyte::@return
(signed byte) print_sbyte::b
(signed byte) print_sbyte::b#0 b zp ZP_BYTE:9 4.0
(signed byte) print_sbyte::b#1 b zp ZP_BYTE:9 11.0
(signed byte) print_sbyte::b#2 b zp ZP_BYTE:9 22.0
(signed byte) print_sbyte::b#3 b zp ZP_BYTE:9 22.0
(signed byte) print_sbyte::b#4 b zp ZP_BYTE:9 22.0
(signed byte) print_sbyte::b#5 b zp ZP_BYTE:9 12.5
(signed byte) print_sbyte::b#6 b zp ZP_BYTE:9 4.0
(void()) print_str((byte*) print_str::str)
(label) print_str::@1
(label) print_str::@2
(label) print_str::@return
(byte*) print_str::str
(byte*) print_str::str#0 str zp ZP_WORD:7 202.0
(byte*) print_str::str#13 str zp ZP_WORD:7 101.5
(byte*) print_str::str#15 str zp ZP_WORD:7 2.0
(void()) print_sword((signed word) print_sword::w)
(label) print_sword::@1
(label) print_sword::@2
(label) print_sword::@4
(label) print_sword::@return
(signed word) print_sword::w
(signed word) print_sword::w#0 w zp ZP_WORD:7 4.0
(signed word) print_sword::w#1 w zp ZP_WORD:7 11.0
(signed word) print_sword::w#2 w zp ZP_WORD:7 22.0
(signed word) print_sword::w#3 w zp ZP_WORD:7 22.0
(signed word) print_sword::w#4 w zp ZP_WORD:7 22.0
(signed word) print_sword::w#5 w zp ZP_WORD:7 12.5
(signed word) print_sword::w#6 w zp ZP_WORD:7 4.0
(void()) print_word((word) print_word::w)
(label) print_word::@1
(label) print_word::@return
(word) print_word::w
(word) print_word::w#1 w zp ZP_WORD:7 11.0
(word) print_word::w#2 w zp ZP_WORD:7 22.0
(word) print_word::w#3 w zp ZP_WORD:7 22.0
(word) print_word::w#4 w zp ZP_WORD:7 22.0
(word) print_word::w#5 w zp ZP_WORD:7 16.666666666666664
(word~) print_word::w#7 w zp ZP_WORD:7 4.0
(signed word) rem16s
(signed word) rem16s#1 rem16s zp ZP_WORD:3 2.0
(signed word) rem16s#17 rem16s zp ZP_WORD:3 110.0
(signed word) rem16s#3 rem16s zp ZP_WORD:3 1.0833333333333333
(signed word~) rem16s#32 rem16s zp ZP_WORD:3 4.0
(word) rem16u
(word) rem16u#31 rem16u zp ZP_WORD:16 130.0
(word) rem16u#35 rem16u zp ZP_WORD:16 4.4
(signed byte) rem8s
(signed byte) rem8s#1 reg byte x 2.0
(signed byte) rem8s#18 reg byte x 110.0
(signed byte) rem8s#3 reg byte x 1.0833333333333333
(signed byte~) rem8s#33 reg byte x 4.0
(byte) rem8u
(byte) rem8u#31 rem8u zp ZP_BYTE:19 130.0
(byte) rem8u#36 rem8u zp ZP_BYTE:19 4.4
(void()) test_16s()
(label) test_16s::@1
(label) test_16s::@10
(label) test_16s::@11
(label) test_16s::@3
(label) test_16s::@4
(label) test_16s::@5
(label) test_16s::@6
(label) test_16s::@7
(label) test_16s::@8
(label) test_16s::@9
(label) test_16s::@return
(signed word) test_16s::dividend
(signed word) test_16s::dividend#0 dividend zp ZP_WORD:7 4.714285714285714
(signed word[]) test_16s::dividends
(const signed word[]) test_16s::dividends#0 dividends = { (word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, -(word/signed word/dword/signed dword) 32767, -(word/signed word/dword/signed dword) 32767, (word/signed word/dword/signed dword) 32767, -(word/signed word/dword/signed dword) 32767 }
(signed word) test_16s::divisor
(signed word) test_16s::divisor#0 divisor zp ZP_WORD:21 3.0
(signed word[]) test_16s::divisors
(const signed word[]) test_16s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, -(byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, -(byte/signed byte/word/signed word/dword/signed dword) 13, -(byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_16s::i
(byte) test_16s::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16s::i#10 i zp ZP_BYTE:2 1.76
(signed word) test_16s::res
(signed word) test_16s::res#0 res zp ZP_WORD:14 2.2
(const string) test_16s::str str = (string) " / @"
(const string) test_16s::str1 str1 = (string) " = @"
(const string) test_16s::str2 str2 = (string) " @"
(void()) test_16u()
(label) test_16u::@1
(label) test_16u::@10
(label) test_16u::@11
(label) test_16u::@3
(label) test_16u::@4
(label) test_16u::@5
(label) test_16u::@6
(label) test_16u::@7
(label) test_16u::@8
(label) test_16u::@9
(label) test_16u::@return
(word) test_16u::dividend
(word) test_16u::dividend#0 dividend zp ZP_WORD:7 4.714285714285714
(word[]) test_16u::dividends
(const word[]) test_16u::dividends#0 dividends = { (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535, (word/dword/signed dword) 65535 }
(word) test_16u::divisor
(word) test_16u::divisor#0 divisor zp ZP_WORD:12 3.0
(word[]) test_16u::divisors
(const word[]) test_16u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_16u::i
(byte) test_16u::i#1 i zp ZP_BYTE:2 16.5
(byte) test_16u::i#10 i zp ZP_BYTE:2 1.76
(word) test_16u::res
(word) test_16u::res#0 res zp ZP_WORD:14 2.2
(const string) test_16u::str str = (string) " / @"
(const string) test_16u::str1 str1 = (string) " = @"
(const string) test_16u::str2 str2 = (string) " @"
(void()) test_8s()
(label) test_8s::@1
(label) test_8s::@10
(label) test_8s::@11
(label) test_8s::@3
(label) test_8s::@4
(label) test_8s::@5
(label) test_8s::@6
(label) test_8s::@7
(label) test_8s::@8
(label) test_8s::@9
(label) test_8s::@return
(signed byte) test_8s::dividend
(signed byte) test_8s::dividend#0 dividend zp ZP_BYTE:9 4.714285714285714
(signed byte[]) test_8s::dividends
(const signed byte[]) test_8s::dividends#0 dividends = { (byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, -(byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127, (byte/signed byte/word/signed word/dword/signed dword) 127 }
(signed byte) test_8s::divisor
(signed byte) test_8s::divisor#0 divisor zp ZP_BYTE:23 3.0
(signed byte[]) test_8s::divisors
(const signed byte[]) test_8s::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, -(byte/signed byte/word/signed word/dword/signed dword) 11, -(byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8s::i
(byte) test_8s::i#1 i zp ZP_BYTE:2 16.5
(byte) test_8s::i#10 i zp ZP_BYTE:2 1.76
(signed byte) test_8s::res
(signed byte) test_8s::res#0 res zp ZP_BYTE:18 2.2
(const string) test_8s::str str = (string) " / @"
(const string) test_8s::str1 str1 = (string) " = @"
(const string) test_8s::str2 str2 = (string) " @"
(void()) test_8u()
(label) test_8u::@1
(label) test_8u::@10
(label) test_8u::@11
(label) test_8u::@12
(label) test_8u::@3
(label) test_8u::@4
(label) test_8u::@5
(label) test_8u::@6
(label) test_8u::@7
(label) test_8u::@8
(label) test_8u::@9
(label) test_8u::@return
(byte) test_8u::dividend
(byte) test_8u::dividend#0 dividend zp ZP_BYTE:9 4.714285714285714
(byte[]) test_8u::dividends
(const byte[]) test_8u::dividends#0 dividends = { (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255, (byte/word/signed word/dword/signed dword) 255 }
(byte) test_8u::divisor
(byte) test_8u::divisor#0 divisor zp ZP_BYTE:18 3.3000000000000003
(byte[]) test_8u::divisors
(const byte[]) test_8u::divisors#0 divisors = { (byte/signed byte/word/signed word/dword/signed dword) 5, (byte/signed byte/word/signed word/dword/signed dword) 7, (byte/signed byte/word/signed word/dword/signed dword) 11, (byte/signed byte/word/signed word/dword/signed dword) 13, (byte/signed byte/word/signed word/dword/signed dword) 17, (byte/signed byte/word/signed word/dword/signed dword) 19 }
(byte) test_8u::i
(byte) test_8u::i#1 i zp ZP_BYTE:2 11.0
(byte) test_8u::i#10 i zp ZP_BYTE:2 1.8333333333333333
(byte) test_8u::res
(byte) test_8u::res#0 reg byte x 2.4444444444444446
(const string) test_8u::str str = (string) " / @"
(const string) test_8u::str1 str1 = (string) " = @"
(const string) test_8u::str2 str2 = (string) " @"

zp ZP_BYTE:2 [ test_16s::i#10 test_16s::i#1 test_8s::i#10 test_8s::i#1 test_16u::i#10 test_16u::i#1 test_8u::i#10 test_8u::i#1 ]
zp ZP_WORD:3 [ rem16s#17 rem16s#3 rem16s#32 rem16s#1 div16s::dividendu#3 div16s::dividendu#7 div16s::dividendu#8 div16u::dividend#2 div16u::dividend#0 div16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 divr16u::dividend#1 div16s::$2 print_cls::sc#2 print_cls::sc#1 ]
zp ZP_WORD:5 [ line_cursor#20 line_cursor#39 line_cursor#1 line_cursor#41 ]
zp ZP_WORD:7 [ print_sword::w#6 print_sword::w#5 print_sword::w#1 print_sword::w#2 print_sword::w#3 print_sword::w#4 print_sword::w#0 print_word::w#5 print_word::w#7 print_word::w#1 print_word::w#2 print_word::w#3 print_word::w#4 test_16s::dividend#0 div16s::dividend#0 test_16u::dividend#0 print_str::str#13 print_str::str#15 print_str::str#0 ]
zp ZP_BYTE:9 [ print_byte::b#7 print_byte::b#9 print_byte::b#1 print_byte::b#2 print_byte::b#3 print_byte::b#4 print_byte::b#5 print_byte::b#6 print_sbyte::b#6 print_sbyte::b#5 print_sbyte::b#1 print_sbyte::b#2 print_sbyte::b#3 print_sbyte::b#4 print_sbyte::b#0 test_8s::dividend#0 test_8u::dividend#0 ]
reg byte a [ print_char::ch#4 print_char::ch#2 print_char::ch#3 ]
zp ZP_WORD:10 [ char_cursor#80 char_cursor#133 char_cursor#130 char_cursor#132 char_cursor#128 char_cursor#129 char_cursor#155 char_cursor#126 char_cursor#17 char_cursor#162 char_cursor#135 char_cursor#131 char_cursor#1 char_cursor#179 char_cursor#185 ]
zp ZP_WORD:12 [ div16s::divisoru#3 div16s::divisoru#4 div16s::divisoru#5 div16u::divisor#2 div16u::divisor#0 div16u::divisor#1 div16s::divisor#0 div16s::$7 divr16u::divisor#0 test_16u::divisor#0 ]
reg byte y [ div16s::neg#4 div16s::neg#3 div16s::neg#2 ]
zp ZP_WORD:14 [ div16s::return#2 div16s::return#6 div16s::return#0 div16s::resultu#0 div16s::return#3 test_16s::res#0 div16u::return#2 div16u::return#0 divr16u::return#0 divr16u::quotient#3 divr16u::return#1 divr16u::quotient#1 divr16u::quotient#2 div16u::return#3 test_16u::res#0 ]
zp ZP_WORD:16 [ divr16u::rem#4 rem16u#31 divr16u::rem#10 rem16u#35 divr16u::rem#5 divr16u::rem#1 divr16u::rem#2 divr16u::rem#3 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
reg byte x [ rem8s#18 rem8s#3 rem8s#33 rem8s#1 ]
reg byte y [ div8s::dividendu#3 div8s::dividendu#7 div8s::dividendu#8 ]
reg byte x [ div8s::divisoru#3 div8s::divisoru#4 div8s::divisoru#5 ]
zp ZP_BYTE:18 [ div8s::neg#4 div8s::neg#3 div8s::neg#2 test_8s::res#0 test_8u::divisor#0 ]
reg byte a [ div8s::return#2 div8s::return#6 div8s::return#0 ]
reg byte a [ div8u::dividend#2 div8u::dividend#0 div8u::dividend#1 ]
reg byte x [ div8u::divisor#2 div8u::divisor#0 div8u::divisor#1 ]
zp ZP_BYTE:19 [ divr8u::rem#4 rem8u#31 divr8u::rem#10 rem8u#36 divr8u::rem#5 divr8u::rem#1 divr8u::rem#2 divr8u::rem#3 ]
zp ZP_BYTE:20 [ divr8u::dividend#2 divr8u::dividend#0 divr8u::dividend#1 ]
reg byte x [ divr8u::quotient#3 divr8u::return#1 divr8u::quotient#1 divr8u::quotient#2 ]
reg byte y [ divr8u::i#2 divr8u::i#1 ]
zp ZP_WORD:21 [ test_16s::divisor#0 ]
reg byte a [ print_byte::$0 ]
reg byte a [ print_byte::$2 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
zp ZP_BYTE:23 [ test_8s::divisor#0 ]
reg byte a [ div8s::dividend#0 ]
reg byte x [ div8s::divisor#0 ]
reg byte a [ div8s::return#3 ]
reg byte a [ div8s::$2 ]
reg byte x [ div8s::$7 ]
reg byte x [ div8u::return#2 ]
reg byte y [ div8s::resultu#0 ]
zp ZP_BYTE:24 [ divr8u::divisor#0 ]
reg byte x [ divr8u::return#0 ]
reg byte x [ div8u::return#0 ]
reg byte a [ divr8u::$1 ]
reg byte x [ div8u::return#3 ]
reg byte x [ test_8u::res#0 ]


FINAL ASSEMBLER
Score: 33716

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label SCREEN = $400
  .label char_cursor = $a
  .label line_cursor = 5
  .label rem16s = 3
  .label rem8u = $13
  .label rem16u = $10
//SEG2 @begin
//SEG3 [1] phi from @begin to @21 [phi:@begin->@21]
//SEG4 @21
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @21 to main [phi:@21->main]
  jsr main
//SEG7 [3] phi from @21 to @end [phi:@21->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] call print_cls param-assignment [ ] ( main:2 [ ] )
  //SEG11 [272] phi from main to print_cls [phi:main->print_cls]
    jsr print_cls
  //SEG12 [6] phi from main to main::@1 [phi:main->main::@1]
  //SEG13 main::@1
  //SEG14 [7] call test_8u param-assignment [ line_cursor#1 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr8u::rem#10 ] )
  //SEG15 [243] phi from main::@1 to test_8u [phi:main::@1->test_8u]
    jsr test_8u
  //SEG16 [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG17 main::@2
  //SEG18 [9] call test_16u param-assignment [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 divr8u::rem#10 ] )
  //SEG19 [214] phi from main::@2 to test_16u [phi:main::@2->test_16u]
    jsr test_16u
  //SEG20 [10] phi from main::@2 to main::@3 [phi:main::@2->main::@3]
  //SEG21 main::@3
  //SEG22 [11] call test_8s param-assignment [ line_cursor#1 divr16u::rem#10 ] ( main:2 [ line_cursor#1 divr16u::rem#10 ] )
  //SEG23 [130] phi from main::@3 to test_8s [phi:main::@3->test_8s]
    jsr test_8s
  //SEG24 [12] phi from main::@3 to main::@4 [phi:main::@3->main::@4]
  //SEG25 main::@4
  //SEG26 [13] call test_16s param-assignment [ ] ( main:2 [ ] )
  //SEG27 [15] phi from main::@4 to test_16s [phi:main::@4->test_16s]
    jsr test_16s
  //SEG28 main::@return
  //SEG29 [14] return  [ ] ( main:2 [ ] )
    rts
}
//SEG30 test_16s
test_16s: {
    .label dividend = 7
    .label divisor = $15
    .label res = $e
    .label i = 2
  //SEG31 [16] phi from test_16s to test_16s::@1 [phi:test_16s->test_16s::@1]
  //SEG32 [16] phi (signed word) rem16s#17 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16s->test_16s::@1#0] -- vwsz1=vbuc1 
    lda #<0
    sta rem16s
    sta rem16s+1
  //SEG33 [16] phi (byte) test_16s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16s->test_16s::@1#1] -- vbuz1=vbuc1 
    sta i
  //SEG34 [16] phi from test_16s::@11 to test_16s::@1 [phi:test_16s::@11->test_16s::@1]
  //SEG35 [16] phi (signed word) rem16s#17 = (signed word) rem16s#3 [phi:test_16s::@11->test_16s::@1#0] -- register_copy 
  //SEG36 [16] phi (byte) test_16s::i#10 = (byte) test_16s::i#1 [phi:test_16s::@11->test_16s::@1#1] -- register_copy 
  //SEG37 test_16s::@1
  b1:
  //SEG38 [17] (signed word) test_16s::dividend#0 ← *((const signed word[]) test_16s::dividends#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG39 [18] (signed word) test_16s::divisor#0 ← *((const signed word[]) test_16s::divisors#0 + (byte) test_16s::i#10) [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=pwsc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG40 [19] (signed word) div16s::dividend#0 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 line_cursor#1 divr16u::rem#10 ] )
    // (signed word) div16s::dividend#0 = (signed word) test_16s::dividend#0  // register copy zp ZP_WORD:7
  //SEG41 [20] (signed word) div16s::divisor#0 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 div16s::dividend#0 div16s::divisor#0 line_cursor#1 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta div16s.divisor
    lda divisor+1
    sta div16s.divisor+1
  //SEG42 [21] call div16s param-assignment [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#2 line_cursor#1 divr16u::rem#10 ] )
    jsr div16s
  //SEG43 [22] (signed word) div16s::return#3 ← (signed word) div16s::return#2 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 div16s::return#3 line_cursor#1 divr16u::rem#10 ] )
    // (signed word) div16s::return#3 = (signed word) div16s::return#2  // register copy zp ZP_WORD:14
  //SEG44 test_16s::@3
  //SEG45 [23] (signed word) test_16s::res#0 ← (signed word) div16s::return#3 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::dividend#0 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 ] )
    // (signed word) test_16s::res#0 = (signed word) div16s::return#3  // register copy zp ZP_WORD:14
  //SEG46 [24] (signed word) print_sword::w#1 ← (signed word) test_16s::dividend#0 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 line_cursor#1 divr16u::rem#10 ] )
    // (signed word) print_sword::w#1 = (signed word) test_16s::dividend#0  // register copy zp ZP_WORD:7
  //SEG47 [25] (byte*~) char_cursor#155 ← (byte*) line_cursor#1 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 print_sword::w#1 char_cursor#155 line_cursor#1 divr16u::rem#10 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG48 [26] call print_sword param-assignment [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG49 [49] phi from test_16s::@3 to print_sword [phi:test_16s::@3->print_sword]
  //SEG50 [49] phi (byte*) char_cursor#129 = (byte*~) char_cursor#155 [phi:test_16s::@3->print_sword#0] -- register_copy 
  //SEG51 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#1 [phi:test_16s::@3->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG52 [27] phi from test_16s::@3 to test_16s::@4 [phi:test_16s::@3->test_16s::@4]
  //SEG53 test_16s::@4
  //SEG54 [28] call print_str param-assignment [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  //SEG55 [76] phi from test_16s::@4 to print_str [phi:test_16s::@4->print_str]
  //SEG56 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str [phi:test_16s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG57 test_16s::@5
  //SEG58 [29] (signed word) print_sword::w#2 ← (signed word) test_16s::divisor#0 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 print_sword::w#2 char_cursor#126 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda divisor
    sta print_sword.w
    lda divisor+1
    sta print_sword.w+1
  //SEG59 [30] call print_sword param-assignment [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG60 [49] phi from test_16s::@5 to print_sword [phi:test_16s::@5->print_sword]
  //SEG61 [49] phi (byte*) char_cursor#129 = (byte*) char_cursor#126 [phi:test_16s::@5->print_sword#0] -- register_copy 
  //SEG62 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#2 [phi:test_16s::@5->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG63 [31] phi from test_16s::@5 to test_16s::@6 [phi:test_16s::@5->test_16s::@6]
  //SEG64 test_16s::@6
  //SEG65 [32] call print_str param-assignment [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  //SEG66 [76] phi from test_16s::@6 to print_str [phi:test_16s::@6->print_str]
  //SEG67 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str1 [phi:test_16s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG68 test_16s::@7
  //SEG69 [33] (signed word) print_sword::w#3 ← (signed word) test_16s::res#0 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#3 char_cursor#126 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda res
    sta print_sword.w
    lda res+1
    sta print_sword.w+1
  //SEG70 [34] call print_sword param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG71 [49] phi from test_16s::@7 to print_sword [phi:test_16s::@7->print_sword]
  //SEG72 [49] phi (byte*) char_cursor#129 = (byte*) char_cursor#126 [phi:test_16s::@7->print_sword#0] -- register_copy 
  //SEG73 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#3 [phi:test_16s::@7->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG74 [35] phi from test_16s::@7 to test_16s::@8 [phi:test_16s::@7->test_16s::@8]
  //SEG75 test_16s::@8
  //SEG76 [36] call print_str param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#126 divr16u::rem#10 ] )
  //SEG77 [76] phi from test_16s::@8 to print_str [phi:test_16s::@8->print_str]
  //SEG78 [76] phi (byte*) print_str::str#15 = (const string) test_16s::str2 [phi:test_16s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG79 test_16s::@9
  //SEG80 [37] (signed word) print_sword::w#4 ← (signed word) rem16s#3 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 print_sword::w#4 char_cursor#126 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda rem16s
    sta print_sword.w
    lda rem16s+1
    sta print_sword.w+1
  //SEG81 [38] call print_sword param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 char_cursor#17 divr16u::rem#10 ] )
  //SEG82 [49] phi from test_16s::@9 to print_sword [phi:test_16s::@9->print_sword]
  //SEG83 [49] phi (byte*) char_cursor#129 = (byte*) char_cursor#126 [phi:test_16s::@9->print_sword#0] -- register_copy 
  //SEG84 [49] phi (signed word) print_sword::w#5 = (signed word) print_sword::w#4 [phi:test_16s::@9->print_sword#1] -- register_copy 
    jsr print_sword
  //SEG85 [39] phi from test_16s::@9 to test_16s::@10 [phi:test_16s::@9->test_16s::@10]
  //SEG86 test_16s::@10
  //SEG87 [40] call print_ln param-assignment [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 ] )
  //SEG88 [44] phi from test_16s::@10 to print_ln [phi:test_16s::@10->print_ln]
  //SEG89 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#1 [phi:test_16s::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG90 test_16s::@11
  //SEG91 [41] (byte) test_16s::i#1 ← (byte) test_16s::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG92 [42] if((byte) test_16s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16s::@1 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ( main:2::test_16s:13 [ test_16s::i#1 rem16s#3 line_cursor#1 divr16u::rem#10 ] ) -- vbuz1_neq_vbuc1_then_la1 
    cmp #$c
    beq !b1+
    jmp b1
  !b1:
  //SEG93 test_16s::@return
  //SEG94 [43] return  [ ] ( main:2::test_16s:13 [ ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $7fff, $7fff, -$7fff, -$7fff, $7fff, -$7fff
    divisors: .word 5, -7, $b, -$d, -$11, $13
}
//SEG95 print_ln
print_ln: {
  //SEG96 [45] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  //SEG97 [45] phi (byte*) line_cursor#20 = (byte*) line_cursor#39 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
  //SEG98 print_ln::@1
  b1:
  //SEG99 [46] (byte*) line_cursor#1 ← (byte*) line_cursor#20 + (byte/signed byte/word/signed word/dword/signed dword) 40 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) -- pbuz1=pbuz1_plus_vbuc1 
    lda line_cursor
    clc
    adc #$28
    sta line_cursor
    bcc !+
    inc line_cursor+1
  !:
  //SEG100 [47] if((byte*) line_cursor#1<(byte*) char_cursor#17) goto print_ln::@1 [ line_cursor#1 char_cursor#17 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 char_cursor#17 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 char_cursor#17 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 char_cursor#17 ] ) -- pbuz1_lt_pbuz2_then_la1 
    lda line_cursor+1
    cmp char_cursor+1
    bcc b1
    bne !+
    lda line_cursor
    cmp char_cursor
    bcc b1
  !:
  //SEG101 print_ln::@return
  //SEG102 [48] return  [ line_cursor#1 ] ( main:2::test_16s:13::print_ln:40 [ test_16s::i#10 rem16s#3 divr16u::rem#10 line_cursor#1 ] main:2::test_8s:11::print_ln:155 [ divr16u::rem#10 test_8s::i#10 rem8s#3 divr8u::rem#10 line_cursor#1 ] main:2::test_16u:9::print_ln:239 [ divr8u::rem#10 divr16u::rem#10 test_16u::i#10 line_cursor#1 ] main:2::test_8u:7::print_ln:267 [ divr8u::rem#10 test_8u::i#10 line_cursor#1 ] )
    rts
}
//SEG103 print_sword
print_sword: {
    .label w = 7
  //SEG104 [50] if((signed word) print_sword::w#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sword::@1 [ print_sword::w#5 char_cursor#129 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#129 ] ) -- vwsz1_ge_0_then_la1 
    lda w+1
    bpl b1
  //SEG105 [51] phi from print_sword to print_sword::@2 [phi:print_sword->print_sword::@2]
  //SEG106 print_sword::@2
  //SEG107 [52] call print_char param-assignment [ char_cursor#17 print_sword::w#5 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#5 ] )
  //SEG108 [72] phi from print_sword::@2 to print_char [phi:print_sword::@2->print_char]
  //SEG109 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#129 [phi:print_sword::@2->print_char#0] -- register_copy 
  //SEG110 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sword::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG111 print_sword::@4
  //SEG112 [53] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#5 [ char_cursor#17 print_sword::w#0 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_sword::w#0 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda w
    eor #$ff
    adc #0
    sta w
    lda w+1
    eor #$ff
    adc #0
    sta w+1
  //SEG113 [54] phi from print_sword print_sword::@4 to print_sword::@1 [phi:print_sword/print_sword::@4->print_sword::@1]
  //SEG114 [54] phi (byte*) char_cursor#128 = (byte*) char_cursor#129 [phi:print_sword/print_sword::@4->print_sword::@1#0] -- register_copy 
  //SEG115 [54] phi (signed word) print_sword::w#6 = (signed word) print_sword::w#5 [phi:print_sword/print_sword::@4->print_sword::@1#1] -- register_copy 
  //SEG116 print_sword::@1
  b1:
  //SEG117 [55] (word~) print_word::w#7 ← (word)(signed word) print_sword::w#6 [ char_cursor#128 print_word::w#7 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#128 print_word::w#7 ] )
    // (word~) print_word::w#7 = (word)(signed word) print_sword::w#6  // register copy zp ZP_WORD:7
  //SEG118 [56] call print_word param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] )
  //SEG119 [58] phi from print_sword::@1 to print_word [phi:print_sword::@1->print_word]
  //SEG120 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#128 [phi:print_sword::@1->print_word#0] -- register_copy 
  //SEG121 [58] phi (word) print_word::w#5 = (word~) print_word::w#7 [phi:print_sword::@1->print_word#1] -- register_copy 
    jsr print_word
  //SEG122 print_sword::@return
  //SEG123 [57] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] )
    rts
}
//SEG124 print_word
print_word: {
    .label w = 7
  //SEG125 [59] (byte) print_byte::b#1 ← > (word) print_word::w#5 [ print_word::w#5 char_cursor#132 print_byte::b#1 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#132 print_byte::b#1 ] ) -- vbuz1=_hi_vwuz2 
    lda w+1
    sta print_byte.b
  //SEG126 [60] call print_byte param-assignment [ char_cursor#17 print_word::w#5 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_word::w#5 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_word::w#5 ] )
  //SEG127 [64] phi from print_word to print_byte [phi:print_word->print_byte]
  //SEG128 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#132 [phi:print_word->print_byte#0] -- register_copy 
  //SEG129 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#1 [phi:print_word->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG130 print_word::@1
  //SEG131 [61] (byte) print_byte::b#2 ← < (word) print_word::w#5 [ char_cursor#17 print_byte::b#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#2 ] ) -- vbuz1=_lo_vwuz2 
    lda w
    sta print_byte.b
  //SEG132 [62] call print_byte param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] )
  //SEG133 [64] phi from print_word::@1 to print_byte [phi:print_word::@1->print_byte]
  //SEG134 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#17 [phi:print_word::@1->print_byte#0] -- register_copy 
  //SEG135 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#2 [phi:print_word::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG136 print_word::@return
  //SEG137 [63] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] )
    rts
}
//SEG138 print_byte
print_byte: {
    .label b = 9
  //SEG139 [65] (byte~) print_byte::$0 ← (byte) print_byte::b#7 >> (byte/signed byte/word/signed word/dword/signed dword) 4 [ print_byte::b#7 char_cursor#133 print_byte::$0 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_byte::$0 ] ) -- vbuaa=vbuz1_ror_4 
    lda b
    lsr
    lsr
    lsr
    lsr
  //SEG140 [66] (byte) print_char::ch#2 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$0) [ print_byte::b#7 char_cursor#133 print_char::ch#2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#133 print_char::ch#2 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG141 [67] call print_char param-assignment [ char_cursor#17 print_byte::b#7 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::b#7 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::b#7 ] )
  //SEG142 [72] phi from print_byte to print_char [phi:print_byte->print_char]
  //SEG143 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#133 [phi:print_byte->print_char#0] -- register_copy 
  //SEG144 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#2 [phi:print_byte->print_char#1] -- register_copy 
    jsr print_char
  //SEG145 print_byte::@1
  //SEG146 [68] (byte~) print_byte::$2 ← (byte) print_byte::b#7 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ char_cursor#17 print_byte::$2 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_byte::$2 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and b
  //SEG147 [69] (byte) print_char::ch#3 ← *((const string) print_byte::hextab#0 + (byte~) print_byte::$2) [ char_cursor#17 print_char::ch#3 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_char::ch#3 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 print_char::ch#3 ] ) -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda hextab,y
  //SEG148 [70] call print_char param-assignment [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] )
  //SEG149 [72] phi from print_byte::@1 to print_char [phi:print_byte::@1->print_char]
  //SEG150 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#17 [phi:print_byte::@1->print_char#0] -- register_copy 
  //SEG151 [72] phi (byte) print_char::ch#4 = (byte) print_char::ch#3 [phi:print_byte::@1->print_char#1] -- register_copy 
    jsr print_char
  //SEG152 print_byte::@return
  //SEG153 [71] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] )
    rts
    hextab: .text "0123456789abcdef"
}
//SEG154 print_char
print_char: {
  //SEG155 [73] *((byte*) char_cursor#80) ← (byte) print_char::ch#4 [ char_cursor#80 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#80 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#80 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#80 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#80 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#80 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#80 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#80 ] ) -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (char_cursor),y
  //SEG156 [74] (byte*) char_cursor#17 ← ++ (byte*) char_cursor#80 [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG157 print_char::@return
  //SEG158 [75] return  [ char_cursor#17 ] ( main:2::test_16s:13::print_sword:26::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_char:52 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_char:52 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_sword::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:67 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:67 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:67 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:67 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_byte::b#7 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:60::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:60::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_word::w#5 char_cursor#17 ] main:2::test_16s:13::print_sword:26::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:30::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:34::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16s:13::print_sword:38::print_word:56::print_byte:62::print_char:70 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#17 ] main:2::test_16u:9::print_word:225::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:229::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#17 ] main:2::test_16u:9::print_word:233::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_16u:9::print_word:237::print_byte:62::print_char:70 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_byte:166::print_char:70 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8u:7::print_byte:253::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:257::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#17 ] main:2::test_8u:7::print_byte:261::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8u:7::print_byte:265::print_char:70 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:141::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153::print_char:162 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_sbyte::b#5 char_cursor#17 ] )
    rts
}
//SEG159 print_str
print_str: {
    .label str = 7
  //SEG160 [77] phi from print_str print_str::@2 to print_str::@1 [phi:print_str/print_str::@2->print_str::@1]
  //SEG161 [77] phi (byte*) char_cursor#126 = (byte*) char_cursor#17 [phi:print_str/print_str::@2->print_str::@1#0] -- register_copy 
  //SEG162 [77] phi (byte*) print_str::str#13 = (byte*) print_str::str#15 [phi:print_str/print_str::@2->print_str::@1#1] -- register_copy 
  //SEG163 print_str::@1
  b1:
  //SEG164 [78] if(*((byte*) print_str::str#13)!=(byte) '@') goto print_str::@2 [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1_neq_vbuc1_then_la1 
    ldy #0
    lda (str),y
    cmp #'@'
    bne b2
  //SEG165 print_str::@return
  //SEG166 [79] return  [ char_cursor#126 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 ] )
    rts
  //SEG167 print_str::@2
  b2:
  //SEG168 [80] *((byte*) char_cursor#126) ← *((byte*) print_str::str#13) [ char_cursor#126 print_str::str#13 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 char_cursor#126 print_str::str#13 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 char_cursor#126 print_str::str#13 ] ) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (char_cursor),y
  //SEG169 [81] (byte*) char_cursor#1 ← ++ (byte*) char_cursor#126 [ print_str::str#13 char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_str::str#13 char_cursor#1 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_str::str#13 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc char_cursor
    bne !+
    inc char_cursor+1
  !:
  //SEG170 [82] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#13 [ print_str::str#0 char_cursor#1 ] ( main:2::test_16s:13::print_str:28 [ test_16s::i#10 rem16s#3 test_16s::divisor#0 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16s:13::print_str:32 [ test_16s::i#10 rem16s#3 test_16s::res#0 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16s:13::print_str:36 [ test_16s::i#10 rem16s#3 line_cursor#1 divr16u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:143 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:147 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_8s:11::print_str:151 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:227 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:231 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_16u:9::print_str:235 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:255 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:259 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 test_8u::res#0 print_str::str#0 char_cursor#1 ] main:2::test_8u:7::print_str:263 [ line_cursor#41 divr8u::rem#10 test_8u::i#10 print_str::str#0 char_cursor#1 ] ) -- pbuz1=_inc_pbuz1 
    inc str
    bne !+
    inc str+1
  !:
    jmp b1
}
//SEG171 div16s
div16s: {
    .label _2 = 3
    .label _7 = $c
    .label resultu = $e
    .label return = $e
    .label dividend = 7
    .label divisor = $c
    .label dividendu = 3
    .label divisoru = $c
  //SEG172 [83] if((signed word) div16s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@16 [ div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividend#0 div16s::divisor#0 divr16u::rem#10 ] ) -- vwsz1_ge_0_then_la1 
    lda dividend+1
    bpl b16
  //SEG173 div16s::@7
  //SEG174 [84] (signed word~) div16s::$2 ← - (signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::$2 divr16u::rem#10 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda dividend
    eor #$ff
    adc #0
    sta _2
    lda dividend+1
    eor #$ff
    adc #0
    sta _2+1
  //SEG175 [85] (word~) div16s::dividendu#8 ← (word)(signed word~) div16s::$2 [ div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#8 divr16u::rem#10 ] )
    // (word~) div16s::dividendu#8 = (word)(signed word~) div16s::$2  // register copy zp ZP_WORD:3
  //SEG176 [86] phi from div16s::@7 to div16s::@2 [phi:div16s::@7->div16s::@2]
  //SEG177 [86] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#8 [phi:div16s::@7->div16s::@2#0] -- register_copy 
  //SEG178 [86] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div16s::@7->div16s::@2#1] -- vbuyy=vbuc1 
    ldy #1
  //SEG179 div16s::@2
  b2:
  //SEG180 [87] if((signed word) div16s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@17 [ div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::neg#3 div16s::dividendu#3 divr16u::rem#10 ] ) -- vwsz1_ge_0_then_la1 
    lda divisor+1
    bpl b4
  //SEG181 div16s::@9
  //SEG182 [88] (signed word~) div16s::$7 ← - (signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::$7 divr16u::rem#10 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda _7
    eor #$ff
    adc #0
    sta _7
    lda _7+1
    eor #$ff
    adc #0
    sta _7+1
  //SEG183 [89] (byte) div16s::neg#2 ← (byte) div16s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::$7 div16s::neg#2 divr16u::rem#10 ] ) -- vbuyy=vbuyy_bxor_vbuc1 
    tya
    eor #1
    tay
  //SEG184 [90] (word~) div16s::divisoru#5 ← (word)(signed word~) div16s::$7 [ div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::dividendu#3 div16s::neg#2 div16s::divisoru#5 divr16u::rem#10 ] )
    // (word~) div16s::divisoru#5 = (word)(signed word~) div16s::$7  // register copy zp ZP_WORD:12
  //SEG185 [91] phi from div16s::@17 div16s::@9 to div16s::@4 [phi:div16s::@17/div16s::@9->div16s::@4]
  //SEG186 [91] phi (byte) div16s::neg#4 = (byte) div16s::neg#3 [phi:div16s::@17/div16s::@9->div16s::@4#0] -- register_copy 
  //SEG187 [91] phi (word) div16s::divisoru#3 = (word~) div16s::divisoru#4 [phi:div16s::@17/div16s::@9->div16s::@4#1] -- register_copy 
  //SEG188 div16s::@4
  b4:
  //SEG189 [92] (word) div16u::dividend#0 ← (word) div16s::dividendu#3 [ div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisoru#3 div16s::neg#4 div16u::dividend#0 divr16u::rem#10 ] )
    // (word) div16u::dividend#0 = (word) div16s::dividendu#3  // register copy zp ZP_WORD:3
  //SEG190 [93] (word) div16u::divisor#0 ← (word) div16s::divisoru#3 [ div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::dividend#0 div16u::divisor#0 divr16u::rem#10 ] )
    // (word) div16u::divisor#0 = (word) div16s::divisoru#3  // register copy zp ZP_WORD:12
  //SEG191 [94] call div16u param-assignment [ div16s::neg#4 div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] )
  //SEG192 [106] phi from div16s::@4 to div16u [phi:div16s::@4->div16u]
  //SEG193 [106] phi (word) rem16u#31 = (word) divr16u::rem#10 [phi:div16s::@4->div16u#0] -- register_copy 
  //SEG194 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#0 [phi:div16s::@4->div16u#1] -- register_copy 
  //SEG195 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#0 [phi:div16s::@4->div16u#2] -- register_copy 
    jsr div16u
  //SEG196 [95] (word) div16u::return#2 ← (word) div16u::return#0 [ div16s::neg#4 div16u::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#2 divr16u::rem#10 ] )
    // (word) div16u::return#2 = (word) div16u::return#0  // register copy zp ZP_WORD:14
  //SEG197 div16s::@15
  //SEG198 [96] (word) div16s::resultu#0 ← (word) div16u::return#2 [ div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16s::resultu#0 divr16u::rem#10 ] )
    // (word) div16s::resultu#0 = (word) div16u::return#2  // register copy zp ZP_WORD:14
  //SEG199 [97] if((byte) div16s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div16s::@5 [ div16s::resultu#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 ] ) -- vbuyy_neq_0_then_la1 
    cpy #0
    bne b5
  //SEG200 div16s::@18
  //SEG201 [98] (signed word~) div16s::return#6 ← (signed word)(word) div16s::resultu#0 [ div16s::return#6 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 divr16u::rem#10 ] )
    // (signed word~) div16s::return#6 = (signed word)(word) div16s::resultu#0  // register copy zp ZP_WORD:14
  //SEG202 [99] (signed word~) rem16s#32 ← (signed word)(word) divr16u::rem#10 [ div16s::return#6 rem16s#32 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::return#6 rem16s#32 divr16u::rem#10 ] ) -- vwsz1=vwsz2 
    lda divr16u.rem
    sta rem16s
    lda divr16u.rem+1
    sta rem16s+1
  //SEG203 [100] phi from div16s::@18 div16s::@5 to div16s::@return [phi:div16s::@18/div16s::@5->div16s::@return]
  //SEG204 [100] phi (signed word) rem16s#3 = (signed word~) rem16s#32 [phi:div16s::@18/div16s::@5->div16s::@return#0] -- register_copy 
  //SEG205 [100] phi (signed word) div16s::return#2 = (signed word~) div16s::return#6 [phi:div16s::@18/div16s::@5->div16s::@return#1] -- register_copy 
  //SEG206 div16s::@return
  breturn:
  //SEG207 [101] return  [ rem16s#3 div16s::return#2 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 rem16s#3 div16s::return#2 divr16u::rem#10 ] )
    rts
  //SEG208 div16s::@5
  b5:
  //SEG209 [102] (signed word) rem16s#1 ← - (signed word)(word) divr16u::rem#10 [ div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::resultu#0 divr16u::rem#10 rem16s#1 ] ) -- vwsz1=_neg_vwsz2 
    sec
    lda divr16u.rem
    eor #$ff
    adc #0
    sta rem16s
    lda divr16u.rem+1
    eor #$ff
    adc #0
    sta rem16s+1
  //SEG210 [103] (signed word) div16s::return#0 ← - (signed word)(word) div16s::resultu#0 [ divr16u::rem#10 div16s::return#0 rem16s#1 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 divr16u::rem#10 div16s::return#0 rem16s#1 ] ) -- vwsz1=_neg_vwsz1 
    sec
    lda return
    eor #$ff
    adc #0
    sta return
    lda return+1
    eor #$ff
    adc #0
    sta return+1
    jmp breturn
  //SEG211 div16s::@17
  //SEG212 [104] (word~) div16s::divisoru#4 ← (word)(signed word) div16s::divisor#0 [ div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#3 div16s::dividendu#3 div16s::divisoru#4 divr16u::rem#10 ] )
    // (word~) div16s::divisoru#4 = (word)(signed word) div16s::divisor#0  // register copy zp ZP_WORD:12
  //SEG213 div16s::@16
  b16:
  //SEG214 [105] (word~) div16s::dividendu#7 ← (word)(signed word) div16s::dividend#0 [ div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::divisor#0 div16s::dividendu#7 divr16u::rem#10 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta dividendu
    lda dividend+1
    sta dividendu+1
  //SEG215 [86] phi from div16s::@16 to div16s::@2 [phi:div16s::@16->div16s::@2]
  //SEG216 [86] phi (word) div16s::dividendu#3 = (word~) div16s::dividendu#7 [phi:div16s::@16->div16s::@2#0] -- register_copy 
  //SEG217 [86] phi (byte) div16s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div16s::@16->div16s::@2#1] -- vbuyy=vbuc1 
    ldy #0
    jmp b2
}
//SEG218 div16u
div16u: {
    .label return = $e
    .label dividend = 3
    .label divisor = $c
  //SEG219 [107] (word) divr16u::dividend#0 ← (word) div16u::dividend#2 [ div16u::divisor#2 divr16u::dividend#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::divisor#2 divr16u::dividend#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::divisor#2 divr16u::dividend#0 ] )
    // (word) divr16u::dividend#0 = (word) div16u::dividend#2  // register copy zp ZP_WORD:3
  //SEG220 [108] (word) divr16u::divisor#0 ← (word) div16u::divisor#2 [ divr16u::dividend#0 divr16u::divisor#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::dividend#0 divr16u::divisor#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::dividend#0 divr16u::divisor#0 ] )
    // (word) divr16u::divisor#0 = (word) div16u::divisor#2  // register copy zp ZP_WORD:12
  //SEG221 [109] call divr16u param-assignment [ divr16u::rem#10 divr16u::return#1 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#1 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#1 ] )
  //SEG222 [113] phi from div16u to divr16u [phi:div16u->divr16u]
    jsr divr16u
  //SEG223 [110] (word) divr16u::return#0 ← (word) divr16u::return#1 [ divr16u::rem#10 divr16u::return#0 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#0 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#0 ] )
    // (word) divr16u::return#0 = (word) divr16u::return#1  // register copy zp ZP_WORD:14
  //SEG224 div16u::@2
  //SEG225 [111] (word) div16u::return#0 ← (word) divr16u::return#0 [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] )
    // (word) div16u::return#0 = (word) divr16u::return#0  // register copy zp ZP_WORD:14
  //SEG226 div16u::@return
  //SEG227 [112] return  [ div16u::return#0 divr16u::rem#10 ] ( main:2::test_16s:13::div16s:21::div16u:94 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 div16u::return#0 divr16u::rem#10 ] main:2::test_16u:9::div16u:220 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#0 divr16u::rem#10 ] )
    rts
}
//SEG228 divr16u
divr16u: {
    .label dividend = 3
    .label divisor = $c
    .label return = $e
    .label rem = $10
    .label quotient = $e
  //SEG229 [114] phi from divr16u to divr16u::@1 [phi:divr16u->divr16u::@1]
  //SEG230 [114] phi (byte) divr16u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG231 [114] phi (word) divr16u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#1] -- vwuz1=vbuc1 
    txa
    sta quotient
    sta quotient+1
  //SEG232 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#0 [phi:divr16u->divr16u::@1#2] -- register_copy 
  //SEG233 [114] phi (word) divr16u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr16u->divr16u::@1#3] -- vwuz1=vbuc1 
    sta rem
    sta rem+1
  //SEG234 [114] phi from divr16u::@3 to divr16u::@1 [phi:divr16u::@3->divr16u::@1]
  //SEG235 [114] phi (byte) divr16u::i#2 = (byte) divr16u::i#1 [phi:divr16u::@3->divr16u::@1#0] -- register_copy 
  //SEG236 [114] phi (word) divr16u::quotient#3 = (word) divr16u::return#1 [phi:divr16u::@3->divr16u::@1#1] -- register_copy 
  //SEG237 [114] phi (word) divr16u::dividend#2 = (word) divr16u::dividend#1 [phi:divr16u::@3->divr16u::@1#2] -- register_copy 
  //SEG238 [114] phi (word) divr16u::rem#4 = (word) divr16u::rem#10 [phi:divr16u::@3->divr16u::@1#3] -- register_copy 
  //SEG239 divr16u::@1
  b1:
  //SEG240 [115] (word) divr16u::rem#1 ← (word) divr16u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl rem
    rol rem+1
  //SEG241 [116] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$1 ] ) -- vbuaa=_hi_vwuz1 
    lda dividend+1
  //SEG242 [117] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) 128 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 divr16u::$2 ] ) -- vbuaa=vbuaa_band_vbuc1 
    and #$80
  //SEG243 [118] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG244 divr16u::@4
  //SEG245 [119] (word) divr16u::rem#2 ← ++ (word) divr16u::rem#1 [ divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::dividend#2 divr16u::quotient#3 divr16u::i#2 divr16u::rem#2 ] ) -- vwuz1=_inc_vwuz1 
    inc rem
    bne !+
    inc rem+1
  !:
  //SEG246 [120] phi from divr16u::@1 divr16u::@4 to divr16u::@2 [phi:divr16u::@1/divr16u::@4->divr16u::@2]
  //SEG247 [120] phi (word) divr16u::rem#5 = (word) divr16u::rem#1 [phi:divr16u::@1/divr16u::@4->divr16u::@2#0] -- register_copy 
  //SEG248 divr16u::@2
  b2:
  //SEG249 [121] (word) divr16u::dividend#1 ← (word) divr16u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::quotient#3 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 ] ) -- vwuz1=vwuz1_rol_1 
    asl dividend
    rol dividend+1
  //SEG250 [122] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1=vwuz1_rol_1 
    asl quotient
    rol quotient+1
  //SEG251 [123] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#1 ] ) -- vwuz1_lt_vwuz2_then_la1 
    lda rem+1
    cmp divisor+1
    bcc b3
    bne !+
    lda rem
    cmp divisor
    bcc b3
  !:
  //SEG252 divr16u::@5
  //SEG253 [124] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::rem#5 divr16u::quotient#2 ] ) -- vwuz1=_inc_vwuz1 
    inc quotient
    bne !+
    inc quotient+1
  !:
  //SEG254 [125] (word) divr16u::rem#3 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0 [ divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::divisor#0 divr16u::i#2 divr16u::dividend#1 divr16u::quotient#2 divr16u::rem#3 ] ) -- vwuz1=vwuz1_minus_vwuz2 
    lda rem
    sec
    sbc divisor
    sta rem
    lda rem+1
    sbc divisor+1
    sta rem+1
  //SEG255 [126] phi from divr16u::@2 divr16u::@5 to divr16u::@3 [phi:divr16u::@2/divr16u::@5->divr16u::@3]
  //SEG256 [126] phi (word) divr16u::return#1 = (word) divr16u::quotient#1 [phi:divr16u::@2/divr16u::@5->divr16u::@3#0] -- register_copy 
  //SEG257 [126] phi (word) divr16u::rem#10 = (word) divr16u::rem#5 [phi:divr16u::@2/divr16u::@5->divr16u::@3#1] -- register_copy 
  //SEG258 divr16u::@3
  b3:
  //SEG259 [127] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2 [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG260 [128] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto divr16u::@1 [ divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::divisor#0 divr16u::return#1 divr16u::dividend#1 divr16u::i#1 ] ) -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG261 divr16u::@return
  //SEG262 [129] return  [ divr16u::rem#10 divr16u::return#1 ] ( main:2::test_16s:13::div16s:21::div16u:94::divr16u:109 [ test_16s::i#10 test_16s::dividend#0 test_16s::divisor#0 line_cursor#1 div16s::neg#4 divr16u::rem#10 divr16u::return#1 ] main:2::test_16u:9::div16u:220::divr16u:109 [ divr8u::rem#10 line_cursor#1 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 divr16u::rem#10 divr16u::return#1 ] )
    rts
}
//SEG263 test_8s
test_8s: {
    .label dividend = 9
    .label divisor = $17
    .label res = $12
    .label i = 2
  //SEG264 [131] phi from test_8s to test_8s::@1 [phi:test_8s->test_8s::@1]
  //SEG265 [131] phi (signed byte) rem8s#18 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#0] -- vbsxx=vbuc1 
    lda #0
    tax
  //SEG266 [131] phi (byte) test_8s::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8s->test_8s::@1#1] -- vbuz1=vbuc1 
    sta i
  //SEG267 [131] phi from test_8s::@11 to test_8s::@1 [phi:test_8s::@11->test_8s::@1]
  //SEG268 [131] phi (signed byte) rem8s#18 = (signed byte) rem8s#3 [phi:test_8s::@11->test_8s::@1#0] -- register_copy 
  //SEG269 [131] phi (byte) test_8s::i#10 = (byte) test_8s::i#1 [phi:test_8s::@11->test_8s::@1#1] -- register_copy 
  //SEG270 test_8s::@1
  b1:
  //SEG271 [132] (signed byte) test_8s::dividend#0 ← *((const signed byte[]) test_8s::dividends#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 divr8u::rem#10 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG272 [133] (signed byte) test_8s::divisor#0 ← *((const signed byte[]) test_8s::divisors#0 + (byte) test_8s::i#10) [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 ] ) -- vbsz1=pbsc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
  //SEG273 [134] (signed byte) div8s::dividend#0 ← (signed byte) test_8s::dividend#0 [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 divr8u::rem#10 ] ) -- vbsaa=vbsz1 
    lda dividend
  //SEG274 [135] (signed byte) div8s::divisor#0 ← (signed byte) test_8s::divisor#0 [ line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ) -- vbsxx=vbsz1 
    ldx divisor
  //SEG275 [136] call div8s param-assignment [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#2 divr8u::rem#10 ] )
    jsr div8s
  //SEG276 [137] (signed byte) div8s::return#3 ← (signed byte) div8s::return#2 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 div8s::return#3 divr8u::rem#10 ] )
    // (signed byte) div8s::return#3 = (signed byte) div8s::return#2  // register copy reg byte a
  //SEG277 test_8s::@3
  //SEG278 [138] (signed byte) test_8s::res#0 ← (signed byte) div8s::return#3 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::dividend#0 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ) -- vbsz1=vbsaa 
    sta res
  //SEG279 [139] (signed byte) print_sbyte::b#1 ← (signed byte) test_8s::dividend#0 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 divr8u::rem#10 ] )
    // (signed byte) print_sbyte::b#1 = (signed byte) test_8s::dividend#0  // register copy zp ZP_BYTE:9
  //SEG280 [140] (byte*~) char_cursor#179 ← (byte*) line_cursor#1 [ line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 print_sbyte::b#1 char_cursor#179 divr8u::rem#10 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG281 [141] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  //SEG282 [159] phi from test_8s::@3 to print_sbyte [phi:test_8s::@3->print_sbyte]
  //SEG283 [159] phi (byte*) char_cursor#131 = (byte*~) char_cursor#179 [phi:test_8s::@3->print_sbyte#0] -- register_copy 
  //SEG284 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#1 [phi:test_8s::@3->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG285 [142] phi from test_8s::@3 to test_8s::@4 [phi:test_8s::@3->test_8s::@4]
  //SEG286 test_8s::@4
  //SEG287 [143] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 ] )
  //SEG288 [76] phi from test_8s::@4 to print_str [phi:test_8s::@4->print_str]
  //SEG289 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str [phi:test_8s::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG290 test_8s::@5
  //SEG291 [144] (signed byte) print_sbyte::b#2 ← (signed byte) test_8s::divisor#0 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 print_sbyte::b#2 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda divisor
    sta print_sbyte.b
  //SEG292 [145] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] )
  //SEG293 [159] phi from test_8s::@5 to print_sbyte [phi:test_8s::@5->print_sbyte]
  //SEG294 [159] phi (byte*) char_cursor#131 = (byte*) char_cursor#126 [phi:test_8s::@5->print_sbyte#0] -- register_copy 
  //SEG295 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#2 [phi:test_8s::@5->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG296 [146] phi from test_8s::@5 to test_8s::@6 [phi:test_8s::@5->test_8s::@6]
  //SEG297 test_8s::@6
  //SEG298 [147] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 ] )
  //SEG299 [76] phi from test_8s::@6 to print_str [phi:test_8s::@6->print_str]
  //SEG300 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str1 [phi:test_8s::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG301 test_8s::@7
  //SEG302 [148] (signed byte) print_sbyte::b#3 ← (signed byte) test_8s::res#0 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#3 divr8u::rem#10 ] ) -- vbsz1=vbsz2 
    lda res
    sta print_sbyte.b
  //SEG303 [149] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG304 [159] phi from test_8s::@7 to print_sbyte [phi:test_8s::@7->print_sbyte]
  //SEG305 [159] phi (byte*) char_cursor#131 = (byte*) char_cursor#126 [phi:test_8s::@7->print_sbyte#0] -- register_copy 
  //SEG306 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#3 [phi:test_8s::@7->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG307 [150] phi from test_8s::@7 to test_8s::@8 [phi:test_8s::@7->test_8s::@8]
  //SEG308 test_8s::@8
  //SEG309 [151] call print_str param-assignment [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG310 [76] phi from test_8s::@8 to print_str [phi:test_8s::@8->print_str]
  //SEG311 [76] phi (byte*) print_str::str#15 = (const string) test_8s::str2 [phi:test_8s::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG312 test_8s::@9
  //SEG313 [152] (signed byte) print_sbyte::b#4 ← (signed byte) rem8s#3 [ line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#4 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#126 test_8s::i#10 rem8s#3 print_sbyte::b#4 divr8u::rem#10 ] ) -- vbsz1=vbsxx 
    stx print_sbyte.b
  //SEG314 [153] call print_sbyte param-assignment [ line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 char_cursor#17 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG315 [159] phi from test_8s::@9 to print_sbyte [phi:test_8s::@9->print_sbyte]
  //SEG316 [159] phi (byte*) char_cursor#131 = (byte*) char_cursor#126 [phi:test_8s::@9->print_sbyte#0] -- register_copy 
  //SEG317 [159] phi (signed byte) print_sbyte::b#5 = (signed byte) print_sbyte::b#4 [phi:test_8s::@9->print_sbyte#1] -- register_copy 
    jsr print_sbyte
  //SEG318 [154] phi from test_8s::@9 to test_8s::@10 [phi:test_8s::@9->test_8s::@10]
  //SEG319 test_8s::@10
  //SEG320 [155] call print_ln param-assignment [ line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 ] )
  //SEG321 [44] phi from test_8s::@10 to print_ln [phi:test_8s::@10->print_ln]
  //SEG322 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#1 [phi:test_8s::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG323 test_8s::@11
  //SEG324 [156] (byte) test_8s::i#1 ← ++ (byte) test_8s::i#10 [ line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG325 [157] if((byte) test_8s::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8s::@1 [ line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 test_8s::i#1 rem8s#3 divr8u::rem#10 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b1
  //SEG326 test_8s::@return
  //SEG327 [158] return  [ line_cursor#1 ] ( main:2::test_8s:11 [ divr16u::rem#10 line_cursor#1 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $7f, -$7f, -$7f, $7f, $7f, $7f
    divisors: .byte 5, 7, -$b, -$d, $11, $13
}
//SEG328 print_sbyte
print_sbyte: {
    .label b = 9
  //SEG329 [160] if((signed byte) print_sbyte::b#5>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto print_sbyte::@1 [ char_cursor#131 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#131 print_sbyte::b#5 ] ) -- vbsz1_ge_0_then_la1 
    lda b
    cmp #0
    bpl b1
  //SEG330 [161] phi from print_sbyte to print_sbyte::@2 [phi:print_sbyte->print_sbyte::@2]
  //SEG331 print_sbyte::@2
  //SEG332 [162] call print_char param-assignment [ char_cursor#17 print_sbyte::b#5 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#5 ] )
  //SEG333 [72] phi from print_sbyte::@2 to print_char [phi:print_sbyte::@2->print_char]
  //SEG334 [72] phi (byte*) char_cursor#80 = (byte*) char_cursor#131 [phi:print_sbyte::@2->print_char#0] -- register_copy 
  //SEG335 [72] phi (byte) print_char::ch#4 = (byte) '-' [phi:print_sbyte::@2->print_char#1] -- vbuaa=vbuc1 
    lda #'-'
    jsr print_char
  //SEG336 print_sbyte::@4
  //SEG337 [163] (signed byte) print_sbyte::b#0 ← - (signed byte) print_sbyte::b#5 [ char_cursor#17 print_sbyte::b#0 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 print_sbyte::b#0 ] ) -- vbsz1=_neg_vbsz1 
    lda b
    eor #$ff
    clc
    adc #1
    sta b
  //SEG338 [164] phi from print_sbyte print_sbyte::@4 to print_sbyte::@1 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1]
  //SEG339 [164] phi (byte*) char_cursor#130 = (byte*) char_cursor#131 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#0] -- register_copy 
  //SEG340 [164] phi (signed byte) print_sbyte::b#6 = (signed byte) print_sbyte::b#5 [phi:print_sbyte/print_sbyte::@4->print_sbyte::@1#1] -- register_copy 
  //SEG341 print_sbyte::@1
  b1:
  //SEG342 [165] (byte~) print_byte::b#9 ← (byte)(signed byte) print_sbyte::b#6 [ print_byte::b#9 char_cursor#130 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 print_byte::b#9 char_cursor#130 ] )
    // (byte~) print_byte::b#9 = (byte)(signed byte) print_sbyte::b#6  // register copy zp ZP_BYTE:9
  //SEG343 [166] call print_byte param-assignment [ char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] )
  //SEG344 [64] phi from print_sbyte::@1 to print_byte [phi:print_sbyte::@1->print_byte]
  //SEG345 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#130 [phi:print_sbyte::@1->print_byte#0] -- register_copy 
  //SEG346 [64] phi (byte) print_byte::b#7 = (byte~) print_byte::b#9 [phi:print_sbyte::@1->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG347 print_sbyte::@return
  //SEG348 [167] return  [ char_cursor#17 ] ( main:2::test_8s:11::print_sbyte:141 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::divisor#0 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:145 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 test_8s::res#0 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:149 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] main:2::test_8s:11::print_sbyte:153 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 rem8s#3 divr8u::rem#10 char_cursor#17 ] )
    rts
}
//SEG349 div8s
div8s: {
    .label neg = $12
  //SEG350 [168] if((signed byte) div8s::dividend#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@16 [ div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividend#0 div8s::divisor#0 divr8u::rem#10 ] ) -- vbsaa_ge_0_then_la1 
    cmp #0
    bpl b16
  //SEG351 div8s::@7
  //SEG352 [169] (signed byte~) div8s::$2 ← - (signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::$2 divr8u::rem#10 ] ) -- vbsaa=_neg_vbsaa 
    eor #$ff
    clc
    adc #1
  //SEG353 [170] (byte~) div8s::dividendu#8 ← (byte)(signed byte~) div8s::$2 [ div8s::divisor#0 div8s::dividendu#8 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#8 divr8u::rem#10 ] ) -- vbuyy=vbuaa 
    tay
  //SEG354 [171] phi from div8s::@7 to div8s::@2 [phi:div8s::@7->div8s::@2]
  //SEG355 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#8 [phi:div8s::@7->div8s::@2#0] -- register_copy 
  //SEG356 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 1 [phi:div8s::@7->div8s::@2#1] -- vbuz1=vbuc1 
    lda #1
    sta neg
  //SEG357 div8s::@2
  b2:
  //SEG358 [172] if((signed byte) div8s::divisor#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@17 [ div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::neg#3 div8s::dividendu#3 divr8u::rem#10 ] ) -- vbsxx_ge_0_then_la1 
    cpx #0
    bpl b4
  //SEG359 div8s::@9
  //SEG360 [173] (signed byte~) div8s::$7 ← - (signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::$7 divr8u::rem#10 ] ) -- vbsxx=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    tax
  //SEG361 [174] (byte) div8s::neg#2 ← (byte) div8s::neg#3 ^ (byte/signed byte/word/signed word/dword/signed dword) 1 [ div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::$7 div8s::neg#2 divr8u::rem#10 ] ) -- vbuz1=vbuz1_bxor_vbuc1 
    lda neg
    eor #1
    sta neg
  //SEG362 [175] (byte~) div8s::divisoru#5 ← (byte)(signed byte~) div8s::$7 [ div8s::dividendu#3 div8s::neg#2 div8s::divisoru#5 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::dividendu#3 div8s::neg#2 div8s::divisoru#5 divr8u::rem#10 ] )
    // (byte~) div8s::divisoru#5 = (byte)(signed byte~) div8s::$7  // register copy reg byte x
  //SEG363 [176] phi from div8s::@17 div8s::@9 to div8s::@4 [phi:div8s::@17/div8s::@9->div8s::@4]
  //SEG364 [176] phi (byte) div8s::neg#4 = (byte) div8s::neg#3 [phi:div8s::@17/div8s::@9->div8s::@4#0] -- register_copy 
  //SEG365 [176] phi (byte) div8s::divisoru#3 = (byte~) div8s::divisoru#4 [phi:div8s::@17/div8s::@9->div8s::@4#1] -- register_copy 
  //SEG366 div8s::@4
  b4:
  //SEG367 [177] (byte) div8u::dividend#0 ← (byte) div8s::dividendu#3 [ div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisoru#3 div8s::neg#4 div8u::dividend#0 divr8u::rem#10 ] ) -- vbuaa=vbuyy 
    tya
  //SEG368 [178] (byte) div8u::divisor#0 ← (byte) div8s::divisoru#3 [ div8s::neg#4 div8u::dividend#0 div8u::divisor#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::dividend#0 div8u::divisor#0 divr8u::rem#10 ] )
    // (byte) div8u::divisor#0 = (byte) div8s::divisoru#3  // register copy reg byte x
  //SEG369 [179] call div8u param-assignment [ div8s::neg#4 div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] )
  //SEG370 [191] phi from div8s::@4 to div8u [phi:div8s::@4->div8u]
  //SEG371 [191] phi (byte) rem8u#31 = (byte) divr8u::rem#10 [phi:div8s::@4->div8u#0] -- register_copy 
  //SEG372 [191] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#0 [phi:div8s::@4->div8u#1] -- register_copy 
  //SEG373 [191] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#0 [phi:div8s::@4->div8u#2] -- register_copy 
    jsr div8u
  //SEG374 [180] (byte) div8u::return#2 ← (byte) div8u::return#0 [ div8s::neg#4 div8u::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#2 divr8u::rem#10 ] )
    // (byte) div8u::return#2 = (byte) div8u::return#0  // register copy reg byte x
  //SEG375 div8s::@15
  //SEG376 [181] (byte) div8s::resultu#0 ← (byte) div8u::return#2 [ div8s::neg#4 div8s::resultu#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8s::resultu#0 divr8u::rem#10 ] ) -- vbuyy=vbuxx 
    txa
    tay
  //SEG377 [182] if((byte) div8s::neg#4!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto div8s::@5 [ div8s::resultu#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 ] ) -- vbuz1_neq_0_then_la1 
    lda neg
    bne b5
  //SEG378 div8s::@18
  //SEG379 [183] (signed byte~) div8s::return#6 ← (signed byte)(byte) div8s::resultu#0 [ div8s::return#6 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#6 divr8u::rem#10 ] ) -- vbsaa=vbsyy 
    tya
  //SEG380 [184] (signed byte~) rem8s#33 ← (signed byte)(byte) divr8u::rem#10 [ div8s::return#6 rem8s#33 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::return#6 rem8s#33 divr8u::rem#10 ] ) -- vbsxx=vbsz1 
    ldx divr8u.rem
  //SEG381 [185] phi from div8s::@18 div8s::@5 to div8s::@return [phi:div8s::@18/div8s::@5->div8s::@return]
  //SEG382 [185] phi (signed byte) rem8s#3 = (signed byte~) rem8s#33 [phi:div8s::@18/div8s::@5->div8s::@return#0] -- register_copy 
  //SEG383 [185] phi (signed byte) div8s::return#2 = (signed byte~) div8s::return#6 [phi:div8s::@18/div8s::@5->div8s::@return#1] -- register_copy 
  //SEG384 div8s::@return
  breturn:
  //SEG385 [186] return  [ rem8s#3 div8s::return#2 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 rem8s#3 div8s::return#2 divr8u::rem#10 ] )
    rts
  //SEG386 div8s::@5
  b5:
  //SEG387 [187] (signed byte) rem8s#1 ← - (signed byte)(byte) divr8u::rem#10 [ div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::resultu#0 divr8u::rem#10 rem8s#1 ] ) -- vbsxx=_neg_vbsz1 
    lda divr8u.rem
    eor #$ff
    clc
    adc #1
    tax
  //SEG388 [188] (signed byte) div8s::return#0 ← - (signed byte)(byte) div8s::resultu#0 [ divr8u::rem#10 div8s::return#0 rem8s#1 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 divr8u::rem#10 div8s::return#0 rem8s#1 ] ) -- vbsaa=_neg_vbsyy 
    tya
    eor #$ff
    clc
    adc #1
    jmp breturn
  //SEG389 div8s::@17
  //SEG390 [189] (byte~) div8s::divisoru#4 ← (byte)(signed byte) div8s::divisor#0 [ div8s::neg#3 div8s::dividendu#3 div8s::divisoru#4 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#3 div8s::dividendu#3 div8s::divisoru#4 divr8u::rem#10 ] )
    // (byte~) div8s::divisoru#4 = (byte)(signed byte) div8s::divisor#0  // register copy reg byte x
  //SEG391 div8s::@16
  b16:
  //SEG392 [190] (byte~) div8s::dividendu#7 ← (byte)(signed byte) div8s::dividend#0 [ div8s::divisor#0 div8s::dividendu#7 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::divisor#0 div8s::dividendu#7 divr8u::rem#10 ] ) -- vbuyy=vbuaa 
    tay
  //SEG393 [171] phi from div8s::@16 to div8s::@2 [phi:div8s::@16->div8s::@2]
  //SEG394 [171] phi (byte) div8s::dividendu#3 = (byte~) div8s::dividendu#7 [phi:div8s::@16->div8s::@2#0] -- register_copy 
  //SEG395 [171] phi (byte) div8s::neg#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:div8s::@16->div8s::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta neg
    jmp b2
}
//SEG396 div8u
div8u: {
  //SEG397 [192] (byte) divr8u::dividend#0 ← (byte) div8u::dividend#2 [ div8u::divisor#2 divr8u::dividend#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::divisor#2 divr8u::dividend#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::divisor#2 divr8u::dividend#0 ] ) -- vbuz1=vbuaa 
    sta divr8u.dividend
  //SEG398 [193] (byte) divr8u::divisor#0 ← (byte) div8u::divisor#2 [ divr8u::dividend#0 divr8u::divisor#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::dividend#0 divr8u::divisor#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::dividend#0 divr8u::divisor#0 ] ) -- vbuz1=vbuxx 
    stx divr8u.divisor
  //SEG399 [194] call divr8u param-assignment [ divr8u::rem#10 divr8u::return#1 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#1 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#1 ] )
  //SEG400 [198] phi from div8u to divr8u [phi:div8u->divr8u]
    jsr divr8u
  //SEG401 [195] (byte) divr8u::return#0 ← (byte) divr8u::return#1 [ divr8u::rem#10 divr8u::return#0 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#0 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#0 ] )
    // (byte) divr8u::return#0 = (byte) divr8u::return#1  // register copy reg byte x
  //SEG402 div8u::@2
  //SEG403 [196] (byte) div8u::return#0 ← (byte) divr8u::return#0 [ div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 divr8u::rem#10 ] )
    // (byte) div8u::return#0 = (byte) divr8u::return#0  // register copy reg byte x
  //SEG404 div8u::@return
  //SEG405 [197] return  [ div8u::return#0 divr8u::rem#10 ] ( main:2::test_8s:11::div8s:136::div8u:179 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 div8u::return#0 divr8u::rem#10 ] main:2::test_8u:7::div8u:249 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#0 divr8u::rem#10 ] )
    rts
}
//SEG406 divr8u
divr8u: {
    .label dividend = $14
    .label divisor = $18
    .label rem = $13
  //SEG407 [199] phi from divr8u to divr8u::@1 [phi:divr8u->divr8u::@1]
  //SEG408 [199] phi (byte) divr8u::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG409 [199] phi (byte) divr8u::quotient#3 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG410 [199] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#0 [phi:divr8u->divr8u::@1#2] -- register_copy 
  //SEG411 [199] phi (byte) divr8u::rem#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:divr8u->divr8u::@1#3] -- vbuz1=vbuc1 
    txa
    sta rem
  //SEG412 [199] phi from divr8u::@3 to divr8u::@1 [phi:divr8u::@3->divr8u::@1]
  //SEG413 [199] phi (byte) divr8u::i#2 = (byte) divr8u::i#1 [phi:divr8u::@3->divr8u::@1#0] -- register_copy 
  //SEG414 [199] phi (byte) divr8u::quotient#3 = (byte) divr8u::return#1 [phi:divr8u::@3->divr8u::@1#1] -- register_copy 
  //SEG415 [199] phi (byte) divr8u::dividend#2 = (byte) divr8u::dividend#1 [phi:divr8u::@3->divr8u::@1#2] -- register_copy 
  //SEG416 [199] phi (byte) divr8u::rem#4 = (byte) divr8u::rem#10 [phi:divr8u::@3->divr8u::@1#3] -- register_copy 
  //SEG417 divr8u::@1
  b1:
  //SEG418 [200] (byte) divr8u::rem#1 ← (byte) divr8u::rem#4 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuz1=vbuz1_rol_1 
    asl rem
  //SEG419 [201] (byte~) divr8u::$1 ← (byte) divr8u::dividend#2 & (byte/word/signed word/dword/signed dword) 128 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 divr8u::$1 ] ) -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and dividend
  //SEG420 [202] if((byte~) divr8u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr8u::@2 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#1 ] ) -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b2
  //SEG421 divr8u::@4
  //SEG422 [203] (byte) divr8u::rem#2 ← ++ (byte) divr8u::rem#1 [ divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::dividend#2 divr8u::quotient#3 divr8u::i#2 divr8u::rem#2 ] ) -- vbuz1=_inc_vbuz1 
    inc rem
  //SEG423 [204] phi from divr8u::@1 divr8u::@4 to divr8u::@2 [phi:divr8u::@1/divr8u::@4->divr8u::@2]
  //SEG424 [204] phi (byte) divr8u::rem#5 = (byte) divr8u::rem#1 [phi:divr8u::@1/divr8u::@4->divr8u::@2#0] -- register_copy 
  //SEG425 divr8u::@2
  b2:
  //SEG426 [205] (byte) divr8u::dividend#1 ← (byte) divr8u::dividend#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::quotient#3 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 ] ) -- vbuz1=vbuz1_rol_1 
    asl dividend
  //SEG427 [206] (byte) divr8u::quotient#1 ← (byte) divr8u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuxx=vbuxx_rol_1 
    txa
    asl
    tax
  //SEG428 [207] if((byte) divr8u::rem#5<(byte) divr8u::divisor#0) goto divr8u::@3 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#1 ] ) -- vbuz1_lt_vbuz2_then_la1 
    lda rem
    cmp divisor
    bcc b3
  //SEG429 divr8u::@5
  //SEG430 [208] (byte) divr8u::quotient#2 ← ++ (byte) divr8u::quotient#1 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::rem#5 divr8u::quotient#2 ] ) -- vbuxx=_inc_vbuxx 
    inx
  //SEG431 [209] (byte) divr8u::rem#3 ← (byte) divr8u::rem#5 - (byte) divr8u::divisor#0 [ divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::divisor#0 divr8u::i#2 divr8u::dividend#1 divr8u::quotient#2 divr8u::rem#3 ] ) -- vbuz1=vbuz1_minus_vbuz2 
    sec
    sbc divisor
    sta rem
  //SEG432 [210] phi from divr8u::@2 divr8u::@5 to divr8u::@3 [phi:divr8u::@2/divr8u::@5->divr8u::@3]
  //SEG433 [210] phi (byte) divr8u::return#1 = (byte) divr8u::quotient#1 [phi:divr8u::@2/divr8u::@5->divr8u::@3#0] -- register_copy 
  //SEG434 [210] phi (byte) divr8u::rem#10 = (byte) divr8u::rem#5 [phi:divr8u::@2/divr8u::@5->divr8u::@3#1] -- register_copy 
  //SEG435 divr8u::@3
  b3:
  //SEG436 [211] (byte) divr8u::i#1 ← ++ (byte) divr8u::i#2 [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuyy=_inc_vbuyy 
    iny
  //SEG437 [212] if((byte) divr8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto divr8u::@1 [ divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::divisor#0 divr8u::return#1 divr8u::dividend#1 divr8u::i#1 ] ) -- vbuyy_neq_vbuc1_then_la1 
    cpy #8
    bne b1
  //SEG438 divr8u::@return
  //SEG439 [213] return  [ divr8u::rem#10 divr8u::return#1 ] ( main:2::test_8s:11::div8s:136::div8u:179::divr8u:194 [ divr16u::rem#10 line_cursor#1 test_8s::i#10 test_8s::dividend#0 test_8s::divisor#0 div8s::neg#4 divr8u::rem#10 divr8u::return#1 ] main:2::test_8u:7::div8u:249::divr8u:194 [ line_cursor#41 char_cursor#135 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 divr8u::rem#10 divr8u::return#1 ] )
    rts
}
//SEG440 test_16u
test_16u: {
    .label dividend = 7
    .label divisor = $c
    .label res = $e
    .label i = 2
  //SEG441 [215] phi from test_16u to test_16u::@1 [phi:test_16u->test_16u::@1]
  //SEG442 [215] phi (word) rem16u#35 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#0] -- vwuz1=vbuc1 
    lda #<0
    sta rem16u
    sta rem16u+1
  //SEG443 [215] phi (byte) test_16u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_16u->test_16u::@1#1] -- vbuz1=vbuc1 
    sta i
  //SEG444 [215] phi from test_16u::@11 to test_16u::@1 [phi:test_16u::@11->test_16u::@1]
  //SEG445 [215] phi (word) rem16u#35 = (word) divr16u::rem#10 [phi:test_16u::@11->test_16u::@1#0] -- register_copy 
  //SEG446 [215] phi (byte) test_16u::i#10 = (byte) test_16u::i#1 [phi:test_16u::@11->test_16u::@1#1] -- register_copy 
  //SEG447 test_16u::@1
  b1:
  //SEG448 [216] (word) test_16u::dividend#0 ← *((const word[]) test_16u::dividends#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
    lda dividends+1,y
    sta dividend+1
  //SEG449 [217] (word) test_16u::divisor#0 ← *((const word[]) test_16u::divisors#0 + (byte) test_16u::i#10) [ line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=pwuc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
    lda divisors+1,y
    sta divisor+1
  //SEG450 [218] (word) div16u::dividend#1 ← (word) test_16u::dividend#0 [ line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ) -- vwuz1=vwuz2 
    lda dividend
    sta div16u.dividend
    lda dividend+1
    sta div16u.dividend+1
  //SEG451 [219] (word) div16u::divisor#1 ← (word) test_16u::divisor#0 [ line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::dividend#1 div16u::divisor#1 rem16u#35 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
    // (word) div16u::divisor#1 = (word) test_16u::divisor#0  // register copy zp ZP_WORD:12
  //SEG452 [220] call div16u param-assignment [ line_cursor#1 div16u::return#0 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 div16u::return#0 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 ] )
  //SEG453 [106] phi from test_16u::@1 to div16u [phi:test_16u::@1->div16u]
  //SEG454 [106] phi (word) rem16u#31 = (word) rem16u#35 [phi:test_16u::@1->div16u#0] -- register_copy 
  //SEG455 [106] phi (word) div16u::divisor#2 = (word) div16u::divisor#1 [phi:test_16u::@1->div16u#1] -- register_copy 
  //SEG456 [106] phi (word) div16u::dividend#2 = (word) div16u::dividend#1 [phi:test_16u::@1->div16u#2] -- register_copy 
    jsr div16u
  //SEG457 [221] (word) div16u::return#3 ← (word) div16u::return#0 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 div16u::return#3 ] )
    // (word) div16u::return#3 = (word) div16u::return#0  // register copy zp ZP_WORD:14
  //SEG458 test_16u::@3
  //SEG459 [222] (word) test_16u::res#0 ← (word) div16u::return#3 [ line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 test_16u::dividend#0 test_16u::divisor#0 test_16u::res#0 ] )
    // (word) test_16u::res#0 = (word) div16u::return#3  // register copy zp ZP_WORD:14
  //SEG460 [223] (word) print_word::w#1 ← (word) test_16u::dividend#0 [ line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
    // (word) print_word::w#1 = (word) test_16u::dividend#0  // register copy zp ZP_WORD:7
  //SEG461 [224] (byte*~) char_cursor#162 ← (byte*) line_cursor#1 [ line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 print_word::w#1 char_cursor#162 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG462 [225] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG463 [58] phi from test_16u::@3 to print_word [phi:test_16u::@3->print_word]
  //SEG464 [58] phi (byte*) char_cursor#132 = (byte*~) char_cursor#162 [phi:test_16u::@3->print_word#0] -- register_copy 
  //SEG465 [58] phi (word) print_word::w#5 = (word) print_word::w#1 [phi:test_16u::@3->print_word#1] -- register_copy 
    jsr print_word
  //SEG466 [226] phi from test_16u::@3 to test_16u::@4 [phi:test_16u::@3->test_16u::@4]
  //SEG467 test_16u::@4
  //SEG468 [227] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::divisor#0 test_16u::res#0 ] )
  //SEG469 [76] phi from test_16u::@4 to print_str [phi:test_16u::@4->print_str]
  //SEG470 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str [phi:test_16u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG471 test_16u::@5
  //SEG472 [228] (word) print_word::w#2 ← (word) test_16u::divisor#0 [ line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#2 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ) -- vwuz1=vwuz2 
    lda divisor
    sta print_word.w
    lda divisor+1
    sta print_word.w+1
  //SEG473 [229] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  //SEG474 [58] phi from test_16u::@5 to print_word [phi:test_16u::@5->print_word]
  //SEG475 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#126 [phi:test_16u::@5->print_word#0] -- register_copy 
  //SEG476 [58] phi (word) print_word::w#5 = (word) print_word::w#2 [phi:test_16u::@5->print_word#1] -- register_copy 
    jsr print_word
  //SEG477 [230] phi from test_16u::@5 to test_16u::@6 [phi:test_16u::@5->test_16u::@6]
  //SEG478 test_16u::@6
  //SEG479 [231] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 test_16u::res#0 ] )
  //SEG480 [76] phi from test_16u::@6 to print_str [phi:test_16u::@6->print_str]
  //SEG481 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str1 [phi:test_16u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG482 test_16u::@7
  //SEG483 [232] (word) print_word::w#3 ← (word) test_16u::res#0 [ line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#3 divr16u::rem#10 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda res
    sta print_word.w
    lda res+1
    sta print_word.w+1
  //SEG484 [233] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  //SEG485 [58] phi from test_16u::@7 to print_word [phi:test_16u::@7->print_word]
  //SEG486 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#126 [phi:test_16u::@7->print_word#0] -- register_copy 
  //SEG487 [58] phi (word) print_word::w#5 = (word) print_word::w#3 [phi:test_16u::@7->print_word#1] -- register_copy 
    jsr print_word
  //SEG488 [234] phi from test_16u::@7 to test_16u::@8 [phi:test_16u::@7->test_16u::@8]
  //SEG489 test_16u::@8
  //SEG490 [235] call print_str param-assignment [ line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 divr16u::rem#10 test_16u::i#10 ] )
  //SEG491 [76] phi from test_16u::@8 to print_str [phi:test_16u::@8->print_str]
  //SEG492 [76] phi (byte*) print_str::str#15 = (const string) test_16u::str2 [phi:test_16u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG493 test_16u::@9
  //SEG494 [236] (word) print_word::w#4 ← (word) divr16u::rem#10 [ line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#126 print_word::w#4 divr16u::rem#10 test_16u::i#10 ] ) -- vwuz1=vwuz2 
    lda divr16u.rem
    sta print_word.w
    lda divr16u.rem+1
    sta print_word.w+1
  //SEG495 [237] call print_word param-assignment [ line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 char_cursor#17 divr16u::rem#10 test_16u::i#10 ] )
  //SEG496 [58] phi from test_16u::@9 to print_word [phi:test_16u::@9->print_word]
  //SEG497 [58] phi (byte*) char_cursor#132 = (byte*) char_cursor#126 [phi:test_16u::@9->print_word#0] -- register_copy 
  //SEG498 [58] phi (word) print_word::w#5 = (word) print_word::w#4 [phi:test_16u::@9->print_word#1] -- register_copy 
    jsr print_word
  //SEG499 [238] phi from test_16u::@9 to test_16u::@10 [phi:test_16u::@9->test_16u::@10]
  //SEG500 test_16u::@10
  //SEG501 [239] call print_ln param-assignment [ line_cursor#1 divr16u::rem#10 test_16u::i#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#10 ] )
  //SEG502 [44] phi from test_16u::@10 to print_ln [phi:test_16u::@10->print_ln]
  //SEG503 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#1 [phi:test_16u::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG504 test_16u::@11
  //SEG505 [240] (byte) test_16u::i#1 ← (byte) test_16u::i#10 + (byte/signed byte/word/signed word/dword/signed dword) 2 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ) -- vbuz1=vbuz1_plus_vbuc1 
    lda #2
    clc
    adc i
    sta i
  //SEG506 [241] if((byte) test_16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 12) goto test_16u::@1 [ line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 test_16u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    cmp #$c
    bne b1
  //SEG507 test_16u::@return
  //SEG508 [242] return  [ line_cursor#1 divr16u::rem#10 ] ( main:2::test_16u:9 [ divr8u::rem#10 line_cursor#1 divr16u::rem#10 ] )
    rts
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .word $ffff, $ffff, $ffff, $ffff, $ffff, $ffff
    divisors: .word 5, 7, $b, $d, $11, $13
}
//SEG509 test_8u
test_8u: {
    .label dividend = 9
    .label divisor = $12
    .label i = 2
  //SEG510 [244] phi from test_8u to test_8u::@1 [phi:test_8u->test_8u::@1]
  //SEG511 [244] phi (byte*) line_cursor#41 = (const byte*) SCREEN#0 [phi:test_8u->test_8u::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta line_cursor
    lda #>SCREEN
    sta line_cursor+1
  //SEG512 [244] phi (byte*) char_cursor#135 = (const byte*) SCREEN#0 [phi:test_8u->test_8u::@1#1] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta char_cursor
    lda #>SCREEN
    sta char_cursor+1
  //SEG513 [244] phi (byte) rem8u#36 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#2] -- vbuz1=vbuc1 
    lda #0
    sta rem8u
  //SEG514 [244] phi (byte) test_8u::i#10 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:test_8u->test_8u::@1#3] -- vbuz1=vbuc1 
    sta i
  //SEG515 test_8u::@1
  b1:
  //SEG516 [245] (byte) test_8u::dividend#0 ← *((const byte[]) test_8u::dividends#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy i
    lda dividends,y
    sta dividend
  //SEG517 [246] (byte) test_8u::divisor#0 ← *((const byte[]) test_8u::divisors#0 + (byte) test_8u::i#10) [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda divisors,y
    sta divisor
  //SEG518 [247] (byte) div8u::dividend#1 ← (byte) test_8u::dividend#0 [ line_cursor#41 char_cursor#135 div8u::dividend#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::dividend#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuaa=vbuz1 
    lda dividend
  //SEG519 [248] (byte) div8u::divisor#1 ← (byte) test_8u::divisor#0 [ line_cursor#41 char_cursor#135 div8u::dividend#1 div8u::divisor#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::dividend#1 div8u::divisor#1 rem8u#36 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ) -- vbuxx=vbuz1 
    ldx divisor
  //SEG520 [249] call div8u param-assignment [ line_cursor#41 char_cursor#135 div8u::return#0 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 div8u::return#0 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 ] )
  //SEG521 [191] phi from test_8u::@1 to div8u [phi:test_8u::@1->div8u]
  //SEG522 [191] phi (byte) rem8u#31 = (byte) rem8u#36 [phi:test_8u::@1->div8u#0] -- register_copy 
  //SEG523 [191] phi (byte) div8u::divisor#2 = (byte) div8u::divisor#1 [phi:test_8u::@1->div8u#1] -- register_copy 
  //SEG524 [191] phi (byte) div8u::dividend#2 = (byte) div8u::dividend#1 [phi:test_8u::@1->div8u#2] -- register_copy 
    jsr div8u
  //SEG525 [250] (byte) div8u::return#3 ← (byte) div8u::return#0 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 div8u::return#3 ] )
    // (byte) div8u::return#3 = (byte) div8u::return#0  // register copy reg byte x
  //SEG526 test_8u::@3
  //SEG527 [251] (byte) test_8u::res#0 ← (byte) div8u::return#3 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::dividend#0 test_8u::divisor#0 test_8u::res#0 ] )
    // (byte) test_8u::res#0 = (byte) div8u::return#3  // register copy reg byte x
  //SEG528 [252] (byte) print_byte::b#3 ← (byte) test_8u::dividend#0 [ line_cursor#41 print_byte::b#3 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 print_byte::b#3 char_cursor#135 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
    // (byte) print_byte::b#3 = (byte) test_8u::dividend#0  // register copy zp ZP_BYTE:9
  //SEG529 [253] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG530 [64] phi from test_8u::@3 to print_byte [phi:test_8u::@3->print_byte]
  //SEG531 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#135 [phi:test_8u::@3->print_byte#0] -- register_copy 
  //SEG532 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#3 [phi:test_8u::@3->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG533 [254] phi from test_8u::@3 to test_8u::@4 [phi:test_8u::@3->test_8u::@4]
  //SEG534 test_8u::@4
  //SEG535 [255] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::divisor#0 test_8u::res#0 ] )
  //SEG536 [76] phi from test_8u::@4 to print_str [phi:test_8u::@4->print_str]
  //SEG537 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str [phi:test_8u::@4->print_str#0] -- pbuz1=pbuc1 
    lda #<str
    sta print_str.str
    lda #>str
    sta print_str.str+1
    jsr print_str
  //SEG538 test_8u::@5
  //SEG539 [256] (byte) print_byte::b#4 ← (byte) test_8u::divisor#0 [ line_cursor#41 char_cursor#126 print_byte::b#4 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#4 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ) -- vbuz1=vbuz2 
    lda divisor
    sta print_byte.b
  //SEG540 [257] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  //SEG541 [64] phi from test_8u::@5 to print_byte [phi:test_8u::@5->print_byte]
  //SEG542 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#126 [phi:test_8u::@5->print_byte#0] -- register_copy 
  //SEG543 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#4 [phi:test_8u::@5->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG544 [258] phi from test_8u::@5 to test_8u::@6 [phi:test_8u::@5->test_8u::@6]
  //SEG545 test_8u::@6
  //SEG546 [259] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 test_8u::res#0 ] )
  //SEG547 [76] phi from test_8u::@6 to print_str [phi:test_8u::@6->print_str]
  //SEG548 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str1 [phi:test_8u::@6->print_str#0] -- pbuz1=pbuc1 
    lda #<str1
    sta print_str.str
    lda #>str1
    sta print_str.str+1
    jsr print_str
  //SEG549 test_8u::@7
  //SEG550 [260] (byte) print_byte::b#5 ← (byte) test_8u::res#0 [ line_cursor#41 char_cursor#126 print_byte::b#5 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#5 divr8u::rem#10 test_8u::i#10 ] ) -- vbuz1=vbuxx 
    stx print_byte.b
  //SEG551 [261] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  //SEG552 [64] phi from test_8u::@7 to print_byte [phi:test_8u::@7->print_byte]
  //SEG553 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#126 [phi:test_8u::@7->print_byte#0] -- register_copy 
  //SEG554 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#5 [phi:test_8u::@7->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG555 [262] phi from test_8u::@7 to test_8u::@8 [phi:test_8u::@7->test_8u::@8]
  //SEG556 test_8u::@8
  //SEG557 [263] call print_str param-assignment [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 divr8u::rem#10 test_8u::i#10 ] )
  //SEG558 [76] phi from test_8u::@8 to print_str [phi:test_8u::@8->print_str]
  //SEG559 [76] phi (byte*) print_str::str#15 = (const string) test_8u::str2 [phi:test_8u::@8->print_str#0] -- pbuz1=pbuc1 
    lda #<str2
    sta print_str.str
    lda #>str2
    sta print_str.str+1
    jsr print_str
  //SEG560 test_8u::@9
  //SEG561 [264] (byte) print_byte::b#6 ← (byte) divr8u::rem#10 [ line_cursor#41 char_cursor#126 print_byte::b#6 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#126 print_byte::b#6 divr8u::rem#10 test_8u::i#10 ] ) -- vbuz1=vbuz2 
    lda divr8u.rem
    sta print_byte.b
  //SEG562 [265] call print_byte param-assignment [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#41 char_cursor#17 divr8u::rem#10 test_8u::i#10 ] )
  //SEG563 [64] phi from test_8u::@9 to print_byte [phi:test_8u::@9->print_byte]
  //SEG564 [64] phi (byte*) char_cursor#133 = (byte*) char_cursor#126 [phi:test_8u::@9->print_byte#0] -- register_copy 
  //SEG565 [64] phi (byte) print_byte::b#7 = (byte) print_byte::b#6 [phi:test_8u::@9->print_byte#1] -- register_copy 
    jsr print_byte
  //SEG566 [266] phi from test_8u::@9 to test_8u::@10 [phi:test_8u::@9->test_8u::@10]
  //SEG567 test_8u::@10
  //SEG568 [267] call print_ln param-assignment [ line_cursor#1 divr8u::rem#10 test_8u::i#10 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#10 ] )
  //SEG569 [44] phi from test_8u::@10 to print_ln [phi:test_8u::@10->print_ln]
  //SEG570 [44] phi (byte*) line_cursor#39 = (byte*) line_cursor#41 [phi:test_8u::@10->print_ln#0] -- register_copy 
    jsr print_ln
  //SEG571 test_8u::@11
  //SEG572 [268] (byte) test_8u::i#1 ← ++ (byte) test_8u::i#10 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ) -- vbuz1=_inc_vbuz1 
    inc i
  //SEG573 [269] if((byte) test_8u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) 6) goto test_8u::@12 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 ] ) -- vbuz1_neq_vbuc1_then_la1 
    lda i
    cmp #6
    bne b12
  //SEG574 test_8u::@return
  //SEG575 [270] return  [ line_cursor#1 divr8u::rem#10 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 ] )
    rts
  //SEG576 test_8u::@12
  b12:
  //SEG577 [271] (byte*~) char_cursor#185 ← (byte*) line_cursor#1 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ( main:2::test_8u:7 [ line_cursor#1 divr8u::rem#10 test_8u::i#1 char_cursor#185 ] ) -- pbuz1=pbuz2 
    lda line_cursor
    sta char_cursor
    lda line_cursor+1
    sta char_cursor+1
  //SEG578 [244] phi from test_8u::@12 to test_8u::@1 [phi:test_8u::@12->test_8u::@1]
  //SEG579 [244] phi (byte*) line_cursor#41 = (byte*) line_cursor#1 [phi:test_8u::@12->test_8u::@1#0] -- register_copy 
  //SEG580 [244] phi (byte*) char_cursor#135 = (byte*~) char_cursor#185 [phi:test_8u::@12->test_8u::@1#1] -- register_copy 
  //SEG581 [244] phi (byte) rem8u#36 = (byte) divr8u::rem#10 [phi:test_8u::@12->test_8u::@1#2] -- register_copy 
  //SEG582 [244] phi (byte) test_8u::i#10 = (byte) test_8u::i#1 [phi:test_8u::@12->test_8u::@1#3] -- register_copy 
    jmp b1
    str: .text " / @"
    str1: .text " = @"
    str2: .text " @"
    dividends: .byte $ff, $ff, $ff, $ff, $ff, $ff
    divisors: .byte 5, 7, $b, $d, $11, $13
}
//SEG583 print_cls
print_cls: {
    .label sc = 3
  //SEG584 [273] phi from print_cls to print_cls::@1 [phi:print_cls->print_cls::@1]
  //SEG585 [273] phi (byte*) print_cls::sc#2 = (const byte*) SCREEN#0 [phi:print_cls->print_cls::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta sc
    lda #>SCREEN
    sta sc+1
  //SEG586 [273] phi from print_cls::@1 to print_cls::@1 [phi:print_cls::@1->print_cls::@1]
  //SEG587 [273] phi (byte*) print_cls::sc#2 = (byte*) print_cls::sc#1 [phi:print_cls::@1->print_cls::@1#0] -- register_copy 
  //SEG588 print_cls::@1
  b1:
  //SEG589 [274] *((byte*) print_cls::sc#2) ← (byte) ' ' [ print_cls::sc#2 ] ( main:2::print_cls:5 [ print_cls::sc#2 ] ) -- _deref_pbuz1=vbuc1 
    lda #' '
    ldy #0
    sta (sc),y
  //SEG590 [275] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1=_inc_pbuz1 
    inc sc
    bne !+
    inc sc+1
  !:
  //SEG591 [276] if((byte*) print_cls::sc#1!=(const byte*) SCREEN#0+(word/signed word/dword/signed dword) 1000) goto print_cls::@1 [ print_cls::sc#1 ] ( main:2::print_cls:5 [ print_cls::sc#1 ] ) -- pbuz1_neq_pbuc1_then_la1 
    lda sc+1
    cmp #>SCREEN+$3e8
    bne b1
    lda sc
    cmp #<SCREEN+$3e8
    bne b1
  //SEG592 print_cls::@return
  //SEG593 [277] return  [ ] ( main:2::print_cls:5 [ ] )
    rts
}

