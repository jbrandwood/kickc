
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) sum::a#0 ← (byte) 'a'
  (byte) sum::b#0 ← (number) 2
  call sum 
  (byte) sum::return#0 ← (byte) sum::return#3
  to:main::@1
main::@1: scope:[main]  from main
  (byte) sum::return#4 ← phi( main/(byte) sum::return#0 )
  (byte~) main::$0 ← (byte) sum::return#4
  *((const nomodify byte*) SCREEN + (number) 0) ← (byte~) main::$0
  (byte) sum::a#1 ← (byte) 'a'
  (byte) sum::b#1 ← (number) $c
  call sum 
  (byte) sum::return#1 ← (byte) sum::return#3
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) sum::return#5 ← phi( main::@1/(byte) sum::return#1 )
  (byte~) main::$1 ← (byte) sum::return#5
  *((const nomodify byte*) SCREEN + (number) 1) ← (byte~) main::$1
  to:main::@return
main::@return: scope:[main]  from main::@2
  return 
  to:@return

(byte()) sum((byte) sum::a , (byte) sum::b)
sum: scope:[sum]  from main main::@1
  (byte) sum::b#2 ← phi( main/(byte) sum::b#0 main::@1/(byte) sum::b#1 )
  (byte) sum::a#2 ← phi( main/(byte) sum::a#0 main::@1/(byte) sum::a#1 )
  (byte~) sum::$0 ← (byte) sum::a#2 + (byte) sum::b#2
  (byte) sum::return#2 ← (byte~) sum::$0
  to:sum::@return
sum::@return: scope:[sum]  from sum
  (byte) sum::return#6 ← phi( sum/(byte) sum::return#2 )
  (byte) sum::return#3 ← (byte) sum::return#6
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte*) SCREEN = (byte*)(number) $400
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(byte~) main::$0
(byte~) main::$1
(label) main::@1
(label) main::@2
(label) main::@return
(byte()) sum((byte) sum::a , (byte) sum::b)
(byte~) sum::$0
(label) sum::@return
(byte) sum::a
(byte) sum::a#0
(byte) sum::a#1
(byte) sum::a#2
(byte) sum::b
(byte) sum::b#0
(byte) sum::b#1
(byte) sum::b#2
(byte) sum::return
(byte) sum::return#0
(byte) sum::return#1
(byte) sum::return#2
(byte) sum::return#3
(byte) sum::return#4
(byte) sum::return#5
(byte) sum::return#6

Adding number conversion cast (unumber) 2 in (byte) sum::b#0 ← (number) 2
Adding number conversion cast (unumber) 0 in *((const nomodify byte*) SCREEN + (number) 0) ← (byte~) main::$0
Adding number conversion cast (unumber) $c in (byte) sum::b#1 ← (number) $c
Adding number conversion cast (unumber) 1 in *((const nomodify byte*) SCREEN + (number) 1) ← (byte~) main::$1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte) sum::b#0 ← (unumber)(number) 2
Inlining cast (byte) sum::b#1 ← (unumber)(number) $c
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast $c
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias sum::return#0 = sum::return#4 
Alias sum::return#1 = sum::return#5 
Alias sum::return#2 = sum::$0 sum::return#6 sum::return#3 
Successful SSA optimization Pass2AliasElimination
Constant (const byte) sum::a#0 = 'a'
Constant (const byte) sum::b#0 = 2
Constant (const byte) sum::a#1 = 'a'
Constant (const byte) sum::b#1 = $c
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [5] *((const nomodify byte*) SCREEN + (byte) 0) ← (byte~) main::$0
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings (const byte) sum::a#0
Inlining constant with var siblings (const byte) sum::b#0
Inlining constant with var siblings (const byte) sum::a#1
Inlining constant with var siblings (const byte) sum::b#1
Constant inlined sum::b#1 = (byte) $c
Constant inlined sum::b#0 = (byte) 2
Constant inlined sum::a#1 = (byte) 'a'
Constant inlined sum::a#0 = (byte) 'a'
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to sum:1 sum:5 

Created 2 initial phi equivalence classes
Coalesced down to 2 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call sum 
  [2] (byte) sum::return#0 ← (byte) sum::return#2
  to:main::@1
main::@1: scope:[main]  from main
  [3] (byte~) main::$0 ← (byte) sum::return#0
  [4] *((const nomodify byte*) SCREEN) ← (byte~) main::$0
  [5] call sum 
  [6] (byte) sum::return#1 ← (byte) sum::return#2
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] (byte~) main::$1 ← (byte) sum::return#1
  [8] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte~) main::$1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return

(byte()) sum((byte) sum::a , (byte) sum::b)
sum: scope:[sum]  from main main::@1
  [10] (byte) sum::b#2 ← phi( main/(byte) 2 main::@1/(byte) $c )
  [10] (byte) sum::a#2 ← phi( main/(byte) 'a' main::@1/(byte) 'a' )
  [11] (byte) sum::return#2 ← (byte) sum::a#2 + (byte) sum::b#2
  to:sum::@return
sum::@return: scope:[sum]  from sum
  [12] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$0 4.0
(byte~) main::$1 4.0
(byte()) sum((byte) sum::a , (byte) sum::b)
(byte) sum::a
(byte) sum::a#2 11.0
(byte) sum::b
(byte) sum::b#2 11.0
(byte) sum::return
(byte) sum::return#0 4.0
(byte) sum::return#1 4.0
(byte) sum::return#2 3.75

Initial phi equivalence classes
[ sum::a#2 ]
[ sum::b#2 ]
Added variable sum::return#0 to live range equivalence class [ sum::return#0 ]
Added variable main::$0 to live range equivalence class [ main::$0 ]
Added variable sum::return#1 to live range equivalence class [ sum::return#1 ]
Added variable main::$1 to live range equivalence class [ main::$1 ]
Added variable sum::return#2 to live range equivalence class [ sum::return#2 ]
Complete equivalence classes
[ sum::a#2 ]
[ sum::b#2 ]
[ sum::return#0 ]
[ main::$0 ]
[ sum::return#1 ]
[ main::$1 ]
[ sum::return#2 ]
Allocated zp[1]:2 [ sum::a#2 ]
Allocated zp[1]:3 [ sum::b#2 ]
Allocated zp[1]:4 [ sum::return#0 ]
Allocated zp[1]:5 [ main::$0 ]
Allocated zp[1]:6 [ sum::return#1 ]
Allocated zp[1]:7 [ main::$1 ]
Allocated zp[1]:8 [ sum::return#2 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Test declarations without body
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
// Definition of main()
main: {
    .label __0 = 5
    .label __1 = 7
    // [1] call sum 
    // [10] phi from main to sum [phi:main->sum]
  sum_from_main:
    // [10] phi (byte) sum::b#2 = (byte) 2 [phi:main->sum#0] -- vbuz1=vbuc1 
    lda #2
    sta.z sum.b
    // [10] phi (byte) sum::a#2 = (byte) 'a' [phi:main->sum#1] -- vbuz1=vbuc1 
    lda #'a'
    sta.z sum.a
    jsr sum
    // [2] (byte) sum::return#0 ← (byte) sum::return#2 -- vbuz1=vbuz2 
    lda.z sum.return_2
    sta.z sum.return
    jmp __b1
    // main::@1
  __b1:
    // [3] (byte~) main::$0 ← (byte) sum::return#0 -- vbuz1=vbuz2 
    lda.z sum.return
    sta.z __0
    // [4] *((const nomodify byte*) SCREEN) ← (byte~) main::$0 -- _deref_pbuc1=vbuz1 
    lda.z __0
    sta SCREEN
    // [5] call sum 
    // [10] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from___b1:
    // [10] phi (byte) sum::b#2 = (byte) $c [phi:main::@1->sum#0] -- vbuz1=vbuc1 
    lda #$c
    sta.z sum.b
    // [10] phi (byte) sum::a#2 = (byte) 'a' [phi:main::@1->sum#1] -- vbuz1=vbuc1 
    lda #'a'
    sta.z sum.a
    jsr sum
    // [6] (byte) sum::return#1 ← (byte) sum::return#2 -- vbuz1=vbuz2 
    lda.z sum.return_2
    sta.z sum.return_1
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte~) main::$1 ← (byte) sum::return#1 -- vbuz1=vbuz2 
    lda.z sum.return_1
    sta.z __1
    // [8] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuz1 
    lda.z __1
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // sum
// Definition of sum()
// sum(byte zp(2) a, byte zp(3) b)
sum: {
    .label return = 4
    .label return_1 = 6
    .label return_2 = 8
    .label a = 2
    .label b = 3
    // [11] (byte) sum::return#2 ← (byte) sum::a#2 + (byte) sum::b#2 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z a
    clc
    adc.z b
    sta.z return_2
    jmp __breturn
    // sum::@return
  __breturn:
    // [12] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [11] (byte) sum::return#2 ← (byte) sum::a#2 + (byte) sum::b#2 [ sum::return#2 ] ( sum:1 [ sum::return#2 ] { { sum::return#0 = sum::return#2 } }  sum:5 [ sum::return#2 ] { { sum::return#1 = sum::return#2 } }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ sum::a#2 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ sum::b#2 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ sum::return#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$0 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ sum::return#1 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$1 ] : zp[1]:7 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ sum::return#2 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [sum] 11: zp[1]:2 [ sum::a#2 ] 11: zp[1]:3 [ sum::b#2 ] 4: zp[1]:4 [ sum::return#0 ] 4: zp[1]:6 [ sum::return#1 ] 3.75: zp[1]:8 [ sum::return#2 ] 
Uplift Scope [main] 4: zp[1]:5 [ main::$0 ] 4: zp[1]:7 [ main::$1 ] 
Uplift Scope [] 

Uplifting [sum] best 81 combination reg byte x [ sum::a#2 ] reg byte a [ sum::b#2 ] reg byte a [ sum::return#0 ] reg byte a [ sum::return#1 ] zp[1]:8 [ sum::return#2 ] 
Limited combination testing to 100 combinations of 1024 possible.
Uplifting [main] best 69 combination reg byte a [ main::$0 ] reg byte a [ main::$1 ] 
Uplifting [] best 69 combination 
Attempting to uplift remaining variables inzp[1]:8 [ sum::return#2 ]
Uplifting [sum] best 60 combination reg byte a [ sum::return#2 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test declarations without body
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
// Definition of main()
main: {
    // [1] call sum 
    // [10] phi from main to sum [phi:main->sum]
  sum_from_main:
    // [10] phi (byte) sum::b#2 = (byte) 2 [phi:main->sum#0] -- vbuaa=vbuc1 
    lda #2
    // [10] phi (byte) sum::a#2 = (byte) 'a' [phi:main->sum#1] -- vbuxx=vbuc1 
    ldx #'a'
    jsr sum
    // [2] (byte) sum::return#0 ← (byte) sum::return#2
    jmp __b1
    // main::@1
  __b1:
    // [3] (byte~) main::$0 ← (byte) sum::return#0
    // [4] *((const nomodify byte*) SCREEN) ← (byte~) main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [5] call sum 
    // [10] phi from main::@1 to sum [phi:main::@1->sum]
  sum_from___b1:
    // [10] phi (byte) sum::b#2 = (byte) $c [phi:main::@1->sum#0] -- vbuaa=vbuc1 
    lda #$c
    // [10] phi (byte) sum::a#2 = (byte) 'a' [phi:main::@1->sum#1] -- vbuxx=vbuc1 
    ldx #'a'
    jsr sum
    // [6] (byte) sum::return#1 ← (byte) sum::return#2
    jmp __b2
    // main::@2
  __b2:
    // [7] (byte~) main::$1 ← (byte) sum::return#1
    // [8] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
}
  // sum
// Definition of sum()
// sum(byte register(X) a, byte register(A) b)
sum: {
    // [11] (byte) sum::return#2 ← (byte) sum::a#2 + (byte) sum::b#2 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    jmp __breturn
    // sum::@return
  __breturn:
    // [12] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction sum_from_main:
Removing instruction __b1:
Removing instruction sum_from___b1:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(const nomodify byte*) SCREEN = (byte*) 1024
(void()) main()
(byte~) main::$0 reg byte a 4.0
(byte~) main::$1 reg byte a 4.0
(label) main::@1
(label) main::@2
(label) main::@return
(byte()) sum((byte) sum::a , (byte) sum::b)
(label) sum::@return
(byte) sum::a
(byte) sum::a#2 reg byte x 11.0
(byte) sum::b
(byte) sum::b#2 reg byte a 11.0
(byte) sum::return
(byte) sum::return#0 reg byte a 4.0
(byte) sum::return#1 reg byte a 4.0
(byte) sum::return#2 reg byte a 3.75

reg byte x [ sum::a#2 ]
reg byte a [ sum::b#2 ]
reg byte a [ sum::return#0 ]
reg byte a [ main::$0 ]
reg byte a [ sum::return#1 ]
reg byte a [ main::$1 ]
reg byte a [ sum::return#2 ]


FINAL ASSEMBLER
Score: 48

  // File Comments
// Test declarations without body
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
// Definition of main()
main: {
    // sum('a', 2)
    // [1] call sum 
    // [10] phi from main to sum [phi:main->sum]
    // [10] phi (byte) sum::b#2 = (byte) 2 [phi:main->sum#0] -- vbuaa=vbuc1 
    lda #2
    // [10] phi (byte) sum::a#2 = (byte) 'a' [phi:main->sum#1] -- vbuxx=vbuc1 
    ldx #'a'
    jsr sum
    // sum('a', 2)
    // [2] (byte) sum::return#0 ← (byte) sum::return#2
    // main::@1
    // [3] (byte~) main::$0 ← (byte) sum::return#0
    // SCREEN[0] = sum('a', 2)
    // [4] *((const nomodify byte*) SCREEN) ← (byte~) main::$0 -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // sum('a', 12)
    // [5] call sum 
    // [10] phi from main::@1 to sum [phi:main::@1->sum]
    // [10] phi (byte) sum::b#2 = (byte) $c [phi:main::@1->sum#0] -- vbuaa=vbuc1 
    lda #$c
    // [10] phi (byte) sum::a#2 = (byte) 'a' [phi:main::@1->sum#1] -- vbuxx=vbuc1 
    ldx #'a'
    jsr sum
    // sum('a', 12)
    // [6] (byte) sum::return#1 ← (byte) sum::return#2
    // main::@2
    // [7] (byte~) main::$1 ← (byte) sum::return#1
    // SCREEN[1] = sum('a', 12)
    // [8] *((const nomodify byte*) SCREEN+(byte) 1) ← (byte~) main::$1 -- _deref_pbuc1=vbuaa 
    sta SCREEN+1
    // main::@return
    // }
    // [9] return 
    rts
}
  // sum
// Definition of sum()
// sum(byte register(X) a, byte register(A) b)
sum: {
    // a+b
    // [11] (byte) sum::return#2 ← (byte) sum::a#2 + (byte) sum::b#2 -- vbuaa=vbuxx_plus_vbuaa 
    stx.z $ff
    clc
    adc.z $ff
    // sum::@return
    // }
    // [12] return 
    rts
}
  // File Data

