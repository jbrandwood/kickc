Inlined call call __init 

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  v#12 = phi( __start::@1/v#13 )
  call set 
  to:main::@1
main::@1: scope:[main]  from main
  v#7 = phi( main/v#3 )
  v#0 = v#7
  SCREEN[0] = v#0
  to:main::@return
main::@return: scope:[main]  from main::@1
  v#8 = phi( main::@1/v#0 )
  v#1 = v#8
  return 
  to:@return

void set()
set: scope:[set]  from main
  v#2 = 7
  to:set::@return
set::@return: scope:[set]  from set
  v#9 = phi( set/v#2 )
  v#3 = v#9
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  v#4 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  v#13 = phi( __start::__init1/v#4 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  v#10 = phi( __start::@1/v#1 )
  v#5 = v#10
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  v#11 = phi( __start::@2/v#5 )
  v#6 = v#11
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
void main()
void set()
byte v
byte v#0
byte v#1
byte v#10
byte v#11
byte v#12
byte v#13
byte v#2
byte v#3
byte v#4
byte v#5
byte v#6
byte v#7
byte v#8
byte v#9

Adding number conversion cast (unumber) 0 in SCREEN[0] = v#0
Adding number conversion cast (unumber) 7 in v#2 = 7
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast v#2 = (unumber)7
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type 7
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias v#0 = v#7 v#8 v#1 
Alias v#2 = v#9 v#3 
Alias v#13 = v#4 
Alias v#10 = v#5 v#11 v#6 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values v#12 v#13
Identical Phi Values v#0 v#2
Identical Phi Values v#10 v#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant v#2 = 7
Constant v#13 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [3] SCREEN[0] = v#2
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant v#13
Successful SSA optimization PassNEliminateUnusedVars
Removing call to empty procedure [0] call set 
Removing unused procedure set
Removing unused procedure block set
Removing unused procedure block set::@return
Successful SSA optimization PassNEliminateEmptyProcedure
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding NOP phi() at start of main
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main
  [1] *SCREEN = v#2
  to:main::@return
main::@return: scope:[main]  from main::@1
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte v

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *SCREEN = v#2 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 45 combination 
Uplifting [] best 45 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test removal of empty function
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const v = 7
  .label SCREEN = $400
  // main
main: {
    jmp __b1
    // main::@1
  __b1:
    // [1] *SCREEN = v#2 -- _deref_pbuc1=vbuc2 
    lda #v
    sta SCREEN
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
byte v
const byte v#2 v = 7



FINAL ASSEMBLER
Score: 12

  // File Comments
// Test removal of empty function
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const v = 7
  .label SCREEN = $400
  // main
main: {
    // main::@1
    // SCREEN[0] = v
    // [1] *SCREEN = v#2 -- _deref_pbuc1=vbuc2 
    lda #v
    sta SCREEN
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

