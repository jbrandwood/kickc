Identified constant variable (byte*) sprite
Identified constant variable (byte*) SCREEN

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) sprite#0 ← ((byte*)) (number) $5000
  (byte*) SCREEN#0 ← ((byte*)) (number) $4400
  to:@1
main: scope:[main]  from @1
  (byte*~) main::$0 ← (byte*) SCREEN#0 + (number) $378
  (byte*) main::sprite_ptr#0 ← (byte*~) main::$0
  (byte*~) main::$1 ← (byte*) sprite#0 / (number) $40
  (byte~) main::$2 ← ((byte)) (byte*~) main::$1
  *((byte*) main::sprite_ptr#0 + (number) 0) ← (byte~) main::$2
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(byte~) main::$2
(label) main::@return
(byte*) main::sprite_ptr
(byte*) main::sprite_ptr#0
(byte*) sprite
(byte*) sprite#0

Adding number conversion cast (unumber) $378 in (byte*~) main::$0 ← (byte*) SCREEN#0 + (number) $378
Adding number conversion cast (unumber) $40 in (byte*~) main::$1 ← (byte*) sprite#0 / (number) $40
Adding number conversion cast (unumber) 0 in *((byte*) main::sprite_ptr#0 + (number) 0) ← (byte~) main::$2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) sprite#0 ← (byte*)(number) $5000
Inlining cast (byte*) SCREEN#0 ← (byte*)(number) $4400
Inlining cast (byte~) main::$2 ← (byte)(byte*~) main::$1
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 20480
Simplifying constant pointer cast (byte*) 17408
Simplifying constant integer cast $378
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (word) $378
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte*) main::sprite_ptr#0 = (byte*~) main::$0 
Successful SSA optimization Pass2AliasElimination
Constant (const byte*) sprite#0 = (byte*) 20480
Constant (const byte*) SCREEN#0 = (byte*) 17408
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero main::sprite_ptr#0 in [6] *((byte*) main::sprite_ptr#0 + (byte) 0) ← (byte~) main::$2
Successful SSA optimization PassNSimplifyExpressionWithZero
Constant right-side identified [0] (byte*) main::sprite_ptr#0 ← (const byte*) SCREEN#0 + (word) $378
Constant right-side identified [1] (byte*~) main::$1 ← (const byte*) sprite#0 / (byte) $40
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::sprite_ptr#0 = SCREEN#0+$378
Constant (const byte*) main::$1 = sprite#0/$40
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)main::$1 in [2] (byte~) main::$2 ← (byte)(const byte*) main::$1
Successful SSA optimization Pass2ConstantValues
Constant (const byte) main::$2 = (byte)main::$1
Successful SSA optimization Pass2ConstantIdentification
Constant inlined main::$1 = (const byte*) sprite#0/(byte) $40
Constant inlined main::$2 = (byte)(const byte*) sprite#0/(byte) $40
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite#0/(byte) $40
  to:main::@return
main::@return: scope:[main]  from main
  [5] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte*) main::sprite_ptr
(byte*) sprite

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
// File Comments
// Tests a cast that is not needed
// Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
// Global Constants & labels
  .label sprite = $5000
  .label SCREEN = $4400
// @begin
bbegin:
// [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
// @1
b1:
// [2] call main 
  jsr main
// [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
// @end
bend:
// main
main: {
    .label sprite_ptr = SCREEN+$378
  // [4] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite#0/(byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$ff&sprite/$40
    sta sprite_ptr
    jmp breturn
  // main::@return
  breturn:
  // [5] return 
    rts
}
// File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite#0/(byte) $40 [ ] ( main:2 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 27 combination 
Uplifting [] best 27 combination 

ASSEMBLER BEFORE OPTIMIZATION
// File Comments
// Tests a cast that is not needed
// Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
// Global Constants & labels
  .label sprite = $5000
  .label SCREEN = $4400
// @begin
bbegin:
// [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
// @1
b1:
// [2] call main 
  jsr main
// [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
// @end
bend:
// main
main: {
    .label sprite_ptr = SCREEN+$378
  // [4] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite#0/(byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$ff&sprite/$40
    sta sprite_ptr
    jmp breturn
  // main::@return
  breturn:
  // [5] return 
    rts
}
// File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction bend_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (byte*) 17408
(void()) main()
(label) main::@return
(byte*) main::sprite_ptr
(const byte*) main::sprite_ptr#0 sprite_ptr = (const byte*) SCREEN#0+(word) $378
(byte*) sprite
(const byte*) sprite#0 sprite = (byte*) 20480



FINAL ASSEMBLER
Score: 12

// File Comments
// Tests a cast that is not needed
// Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
// Global Constants & labels
  .label sprite = $5000
  .label SCREEN = $4400
// @begin
// [1] phi from @begin to @1 [phi:@begin->@1]
// @1
// [2] call main 
// [3] phi from @1 to @end [phi:@1->@end]
// @end
// main
main: {
    .label sprite_ptr = SCREEN+$378
  // [4] *((const byte*) main::sprite_ptr#0) ← (byte)(const byte*) sprite#0/(byte) $40 -- _deref_pbuc1=vbuc2 
    lda #$ff&sprite/$40
    sta sprite_ptr
  // main::@return
  // [5] return 
    rts
}
// File Data

