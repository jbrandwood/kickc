Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) PROCPORT_DDR_MEMORY_MASK#0 ← (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte*) PROCPORT#0 ← ((byte*)) (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) PROCPORT_RAM_IO#0 ← (byte/signed byte/word/signed word/dword/signed dword) 53
  (byte) PROCPORT_RAM_CHARROM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 49
  (byte*) CHARGEN#0 ← ((byte*)) (word/dword/signed dword) 53248
  (byte*) RASTER#0 ← ((byte*)) (word/dword/signed dword) 53266
  (byte*) BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) 53280
  (byte*) VIC_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 53265
  (byte) VIC_ECM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte) VIC_DEN#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_RSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_CONTROL2#0 ← ((byte*)) (word/dword/signed dword) 53270
  (byte) VIC_MCM#0 ← (byte/signed byte/word/signed word/dword/signed dword) 16
  (byte) VIC_CSEL#0 ← (byte/signed byte/word/signed word/dword/signed dword) 8
  (byte*) VIC_MEMORY#0 ← ((byte*)) (word/dword/signed dword) 53272
  (byte*) CIA2_PORT_A#0 ← ((byte*)) (word/dword/signed dword) 56576
  (byte*) CIA2_PORT_A_DDR#0 ← ((byte*)) (word/dword/signed dword) 56578
  to:@3
@3: scope:[]  from @begin
  (byte*) DTV_FEATURE#0 ← ((byte*)) (word/dword/signed dword) 53311
  (byte) DTV_FEATURE_ENABLE#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) DTV_CONTROL#0 ← ((byte*)) (word/dword/signed dword) 53308
  (byte) DTV_LINEAR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) DTV_HIGHCOLOR#0 ← (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte) DTV_BADLINE_OFF#0 ← (byte/signed byte/word/signed word/dword/signed dword) 32
  (byte) DTV_CHUNKY#0 ← (byte/signed byte/word/signed word/dword/signed dword) 64
  (byte*) DTV_PALETTE#0 ← ((byte*)) (word/dword/signed dword) 53760
  (byte*) DTV_PLANEA_START_LO#0 ← ((byte*)) (word/dword/signed dword) 53306
  (byte*) DTV_PLANEA_START_MI#0 ← ((byte*)) (word/dword/signed dword) 53307
  (byte*) DTV_PLANEA_START_HI#0 ← ((byte*)) (word/dword/signed dword) 53317
  (byte*) DTV_PLANEA_STEP#0 ← ((byte*)) (word/dword/signed dword) 53318
  (byte*) DTV_PLANEA_MODULO_LO#0 ← ((byte*)) (word/dword/signed dword) 53304
  (byte*) DTV_PLANEA_MODULO_HI#0 ← ((byte*)) (word/dword/signed dword) 53305
  (byte*) DTV_PLANEB_START_LO#0 ← ((byte*)) (word/dword/signed dword) 53321
  (byte*) DTV_PLANEB_START_MI#0 ← ((byte*)) (word/dword/signed dword) 53322
  (byte*) DTV_PLANEB_START_HI#0 ← ((byte*)) (word/dword/signed dword) 53323
  (byte*) DTV_PLANEB_STEP#0 ← ((byte*)) (word/dword/signed dword) 53324
  (byte*) DTV_PLANEB_MODULO_LO#0 ← ((byte*)) (word/dword/signed dword) 53319
  (byte*) DTV_PLANEB_MODULO_HI#0 ← ((byte*)) (word/dword/signed dword) 53320
  to:@4
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_charset8 gfx_init_plane_charset8::@8
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 ← phi( gfx_init_plane_charset8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#0 gfx_init_plane_charset8::@8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 )
  (byte*) dtvSetCpuBankSegment1::cpuBank#0 ← ((byte*)) (byte/word/signed word/dword/signed dword) 255
  *((byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#2
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  return 
  to:@return
@4: scope:[]  from @3
  (byte*) SCREEN#0 ← ((byte*)) (word/signed word/dword/signed dword) 31744
  (byte*) CHARSET8#0 ← ((byte*)) (word/dword/signed dword) 32768
  to:@8
main: scope:[main]  from @8
  asm { sei  }
  *((byte*) PROCPORT_DDR#0) ← (byte) PROCPORT_DDR_MEMORY_MASK#0
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  call gfx_init 
  to:main::@17
main::@17: scope:[main]  from main
  *((byte*) DTV_FEATURE#0) ← (byte) DTV_FEATURE_ENABLE#0
  (byte~) main::$1 ← (byte) DTV_HIGHCOLOR#0 | (byte) DTV_LINEAR#0
  (byte~) main::$2 ← (byte~) main::$1 | (byte) DTV_CHUNKY#0
  (byte~) main::$3 ← (byte~) main::$2 | (byte) DTV_BADLINE_OFF#0
  *((byte*) DTV_CONTROL#0) ← (byte~) main::$3
  (byte~) main::$4 ← (byte) VIC_DEN#0 | (byte) VIC_ECM#0
  (byte~) main::$5 ← (byte~) main::$4 | (byte) VIC_RSEL#0
  (byte/word/dword~) main::$6 ← (byte~) main::$5 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) main::$6
  (byte~) main::$7 ← (byte) VIC_MCM#0 | (byte) VIC_CSEL#0
  *((byte*) VIC_CONTROL2#0) ← (byte~) main::$7
  (byte~) main::$8 ← < (byte*) SCREEN#0
  *((byte*) DTV_PLANEA_START_LO#0) ← (byte~) main::$8
  (byte~) main::$9 ← > (byte*) SCREEN#0
  *((byte*) DTV_PLANEA_START_MI#0) ← (byte~) main::$9
  *((byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  *((byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) main::$10 ← < (byte*) CHARSET8#0
  *((byte*) DTV_PLANEB_START_LO#0) ← (byte~) main::$10
  (byte~) main::$11 ← > (byte*) CHARSET8#0
  *((byte*) DTV_PLANEB_START_MI#0) ← (byte~) main::$11
  *((byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  *((byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  (word~) main::$12 ← ((word)) (byte*) SCREEN#0
  (word/signed dword/dword~) main::$13 ← (word~) main::$12 / (word/signed word/dword/signed dword) 16384
  (byte~) main::$14 ← ((byte)) (word/signed dword/dword~) main::$13
  (byte/word/dword~) main::$15 ← (byte/signed byte/word/signed word/dword/signed dword) 3 ^ (byte~) main::$14
  *((byte*) CIA2_PORT_A#0) ← (byte/word/dword~) main::$15
  (word~) main::$16 ← ((word)) (byte*) SCREEN#0
  (word~) main::$17 ← (word~) main::$16 & (word/signed word/dword/signed dword) 16383
  (word~) main::$18 ← (word~) main::$17 >> (byte/signed byte/word/signed word/dword/signed dword) 6
  (byte~) main::$19 ← ((byte)) (word~) main::$18
  (word~) main::$20 ← ((word)) (byte*) SCREEN#0
  (word~) main::$21 ← (word~) main::$20 & (word/signed word/dword/signed dword) 16383
  (byte~) main::$22 ← > (word~) main::$21
  (byte~) main::$23 ← (byte~) main::$22 >> (byte/signed byte/word/signed word/dword/signed dword) 2
  (byte~) main::$24 ← (byte~) main::$19 | (byte~) main::$23
  *((byte*) VIC_MEMORY#0) ← (byte~) main::$24
  (byte) main::j#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@17
  (byte) main::j#2 ← phi( main::@1/(byte) main::j#1 main::@17/(byte) main::j#0 )
  *((byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2
  (byte) main::j#1 ← (byte) main::j#2 + rangenext(0,15)
  (bool~) main::$25 ← (byte) main::j#1 != rangelast(0,15)
  if((bool~) main::$25) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@8
  if(true) goto main::@3
  to:main::@return
main::@3: scope:[main]  from main::@2
  asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
  (byte~) main::$26 ← (byte) VIC_DEN#0 | (byte) VIC_ECM#0
  (byte~) main::$27 ← (byte~) main::$26 | (byte) VIC_RSEL#0
  (byte/word/dword~) main::$28 ← (byte~) main::$27 | (byte/signed byte/word/signed word/dword/signed dword) 3
  *((byte*) VIC_CONTROL#0) ← (byte/word/dword~) main::$28
  *((byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) main::rst#0 ← (byte/signed byte/word/signed word/dword/signed dword) 66
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@6
  (byte) main::rst#2 ← phi( main::@3/(byte) main::rst#0 main::@6/(byte) main::rst#3 )
  (bool~) main::$29 ← *((byte*) RASTER#0) != (byte) main::rst#2
  if((bool~) main::$29) goto main::@6
  to:main::@7
main::@6: scope:[main]  from main::@5
  (byte) main::rst#3 ← phi( main::@5/(byte) main::rst#2 )
  to:main::@5
main::@7: scope:[main]  from main::@5
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  (byte) main::rst#1 ← *((byte*) RASTER#0)
  (byte~) main::$30 ← (byte) VIC_DEN#0 | (byte) VIC_ECM#0
  (byte~) main::$31 ← (byte~) main::$30 | (byte) VIC_RSEL#0
  (byte~) main::$32 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7
  (byte~) main::$33 ← (byte~) main::$31 | (byte~) main::$32
  *((byte*) VIC_CONTROL#0) ← (byte~) main::$33
  (byte~) main::$34 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4
  *((byte*) BORDERCOL#0) ← (byte~) main::$34
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  (bool~) main::$35 ← (byte) main::rst#1 != (byte/word/signed word/dword/signed dword) 242
  if((bool~) main::$35) goto main::@8
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
gfx_init: scope:[gfx_init]  from main
  call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  call gfx_init_plane_charset8 
  to:gfx_init::@2
gfx_init::@2: scope:[gfx_init]  from gfx_init::@1
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@2
  return 
  to:@return
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  (byte*) gfx_init_screen0::ch#0 ← (byte*) SCREEN#0
  (byte) gfx_init_screen0::cy#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  (byte*) gfx_init_screen0::ch#3 ← phi( gfx_init_screen0/(byte*) gfx_init_screen0::ch#0 gfx_init_screen0::@3/(byte*) gfx_init_screen0::ch#4 )
  (byte) gfx_init_screen0::cy#4 ← phi( gfx_init_screen0/(byte) gfx_init_screen0::cy#0 gfx_init_screen0::@3/(byte) gfx_init_screen0::cy#1 )
  (byte) gfx_init_screen0::cx#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  (byte*) gfx_init_screen0::ch#2 ← phi( gfx_init_screen0::@1/(byte*) gfx_init_screen0::ch#3 gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  (byte) gfx_init_screen0::cx#2 ← phi( gfx_init_screen0::@1/(byte) gfx_init_screen0::cx#0 gfx_init_screen0::@2/(byte) gfx_init_screen0::cx#1 )
  (byte) gfx_init_screen0::cy#2 ← phi( gfx_init_screen0::@1/(byte) gfx_init_screen0::cy#4 gfx_init_screen0::@2/(byte) gfx_init_screen0::cy#2 )
  (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 15
  (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2
  *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3
  (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2
  (byte) gfx_init_screen0::cx#1 ← (byte) gfx_init_screen0::cx#2 + rangenext(0,39)
  (bool~) gfx_init_screen0::$4 ← (byte) gfx_init_screen0::cx#1 != rangelast(0,39)
  if((bool~) gfx_init_screen0::$4) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  (byte*) gfx_init_screen0::ch#4 ← phi( gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  (byte) gfx_init_screen0::cy#3 ← phi( gfx_init_screen0::@2/(byte) gfx_init_screen0::cy#2 )
  (byte) gfx_init_screen0::cy#1 ← (byte) gfx_init_screen0::cy#3 + rangenext(0,24)
  (bool~) gfx_init_screen0::$5 ← (byte) gfx_init_screen0::cy#1 != rangelast(0,24)
  if((bool~) gfx_init_screen0::$5) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  return 
  to:@return
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@1
  (byte*~) gfx_init_plane_charset8::$0 ← (byte*) CHARSET8#0 / (word/signed word/dword/signed dword) 16384
  (byte~) gfx_init_plane_charset8::$1 ← ((byte)) (byte*~) gfx_init_plane_charset8::$0
  (byte) gfx_init_plane_charset8::gfxbCpuBank#0 ← (byte~) gfx_init_plane_charset8::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#0 ← (byte) gfx_init_plane_charset8::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  (byte) gfx_init_plane_charset8::gfxbCpuBank#2 ← phi( gfx_init_plane_charset8/(byte) gfx_init_plane_charset8::gfxbCpuBank#0 )
  (byte) gfx_init_plane_charset8::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_charset8::gfxbCpuBank#2
  (word~) gfx_init_plane_charset8::$3 ← ((word)) (byte*) CHARSET8#0
  (word~) gfx_init_plane_charset8::$4 ← (word~) gfx_init_plane_charset8::$3 & (word/signed word/dword/signed dword) 16383
  (word/signed dword/dword~) gfx_init_plane_charset8::$5 ← (word/signed word/dword/signed dword) 16384 + (word~) gfx_init_plane_charset8::$4
  (byte*) gfx_init_plane_charset8::gfxa#0 ← ((byte*)) (word/signed dword/dword~) gfx_init_plane_charset8::$5
  (byte*~) gfx_init_plane_charset8::$6 ← (byte*) CHARGEN#0 + (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte*) gfx_init_plane_charset8::chargen#0 ← (byte*~) gfx_init_plane_charset8::$6
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_CHARROM#0
  (byte) gfx_init_plane_charset8::col#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte) gfx_init_plane_charset8::ch#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  (byte) gfx_init_plane_charset8::ch#8 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::ch#1 gfx_init_plane_charset8::@9/(byte) gfx_init_plane_charset8::ch#0 )
  (byte) gfx_init_plane_charset8::col#6 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::col#8 gfx_init_plane_charset8::@9/(byte) gfx_init_plane_charset8::col#0 )
  (byte*) gfx_init_plane_charset8::gfxa#6 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::gfxa#8 gfx_init_plane_charset8::@9/(byte*) gfx_init_plane_charset8::gfxa#0 )
  (byte*) gfx_init_plane_charset8::chargen#3 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::chargen#5 gfx_init_plane_charset8::@9/(byte*) gfx_init_plane_charset8::chargen#0 )
  (byte) gfx_init_plane_charset8::cr#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  (byte) gfx_init_plane_charset8::ch#7 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::ch#3 )
  (byte) gfx_init_plane_charset8::cr#6 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::cr#0 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::cr#1 )
  (byte) gfx_init_plane_charset8::col#5 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#7 )
  (byte*) gfx_init_plane_charset8::gfxa#5 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#7 )
  (byte*) gfx_init_plane_charset8::chargen#2 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#4 )
  (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2)
  (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2
  (byte) gfx_init_plane_charset8::cp#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  (byte) gfx_init_plane_charset8::ch#5 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::ch#7 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::ch#4 )
  (byte*) gfx_init_plane_charset8::chargen#7 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::chargen#6 )
  (byte) gfx_init_plane_charset8::cr#4 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cr#3 )
  (byte) gfx_init_plane_charset8::cp#3 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::cp#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cp#1 )
  (byte) gfx_init_plane_charset8::col#4 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  (byte*) gfx_init_plane_charset8::gfxa#3 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  (byte) gfx_init_plane_charset8::bits#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::bits#1 )
  (byte) gfx_init_plane_charset8::c#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) 128
  (bool~) gfx_init_plane_charset8::$8 ← (byte~) gfx_init_plane_charset8::$7 != (byte/signed byte/word/signed word/dword/signed dword) 0
  (bool~) gfx_init_plane_charset8::$9 ← ! (bool~) gfx_init_plane_charset8::$8
  if((bool~) gfx_init_plane_charset8::$9) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  (byte) gfx_init_plane_charset8::ch#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::ch#5 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::ch#6 )
  (byte*) gfx_init_plane_charset8::chargen#6 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::chargen#7 gfx_init_plane_charset8::@5/(byte*) gfx_init_plane_charset8::chargen#8 )
  (byte) gfx_init_plane_charset8::cr#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cr#4 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::cr#5 )
  (byte) gfx_init_plane_charset8::cp#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cp#3 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::cp#4 )
  (byte) gfx_init_plane_charset8::col#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::col#4 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::col#3 )
  (byte) gfx_init_plane_charset8::bits#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::bits#4 )
  (byte*) gfx_init_plane_charset8::gfxa#2 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::gfxa#3 gfx_init_plane_charset8::@5/(byte*) gfx_init_plane_charset8::gfxa#4 )
  (byte) gfx_init_plane_charset8::c#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::c#0 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::c#1 )
  *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2
  (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2
  (byte~) gfx_init_plane_charset8::$10 ← (byte) gfx_init_plane_charset8::bits#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  (byte) gfx_init_plane_charset8::bits#1 ← (byte~) gfx_init_plane_charset8::$10
  (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2
  (byte) gfx_init_plane_charset8::cp#1 ← (byte) gfx_init_plane_charset8::cp#2 + rangenext(0,7)
  (bool~) gfx_init_plane_charset8::$11 ← (byte) gfx_init_plane_charset8::cp#1 != rangelast(0,7)
  if((bool~) gfx_init_plane_charset8::$11) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  (byte) gfx_init_plane_charset8::ch#6 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::ch#5 )
  (byte*) gfx_init_plane_charset8::chargen#8 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::chargen#7 )
  (byte) gfx_init_plane_charset8::cr#5 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cr#4 )
  (byte) gfx_init_plane_charset8::cp#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cp#3 )
  (byte) gfx_init_plane_charset8::bits#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::bits#2 )
  (byte*) gfx_init_plane_charset8::gfxa#4 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::gfxa#3 )
  (byte) gfx_init_plane_charset8::col#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::col#4 )
  (byte) gfx_init_plane_charset8::c#1 ← (byte) gfx_init_plane_charset8::col#3
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  (byte) gfx_init_plane_charset8::col#7 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  (byte*) gfx_init_plane_charset8::gfxa#7 ← phi( gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  (byte) gfx_init_plane_charset8::ch#3 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::ch#4 )
  (byte*) gfx_init_plane_charset8::chargen#4 ← phi( gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::chargen#6 )
  (byte) gfx_init_plane_charset8::cr#2 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cr#3 )
  (byte) gfx_init_plane_charset8::cr#1 ← (byte) gfx_init_plane_charset8::cr#2 + rangenext(0,7)
  (bool~) gfx_init_plane_charset8::$12 ← (byte) gfx_init_plane_charset8::cr#1 != rangelast(0,7)
  if((bool~) gfx_init_plane_charset8::$12) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  (byte) gfx_init_plane_charset8::col#8 ← phi( gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#7 )
  (byte*) gfx_init_plane_charset8::gfxa#8 ← phi( gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#7 )
  (byte*) gfx_init_plane_charset8::chargen#5 ← phi( gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#4 )
  (byte) gfx_init_plane_charset8::ch#2 ← phi( gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::ch#3 )
  (byte) gfx_init_plane_charset8::ch#1 ← (byte) gfx_init_plane_charset8::ch#2 + rangenext(0,255)
  (bool~) gfx_init_plane_charset8::$13 ← (byte) gfx_init_plane_charset8::ch#1 != rangelast(0,255)
  if((bool~) gfx_init_plane_charset8::$13) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  *((byte*) PROCPORT#0) ← (byte) PROCPORT_RAM_IO#0
  (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_charset8::$14 ← (word/signed word/dword/signed dword) 16384 / (word/signed word/dword/signed dword) 16384
  (byte~) gfx_init_plane_charset8::$15 ← ((byte)) (byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_charset8::$14
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte~) gfx_init_plane_charset8::$15
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@10
gfx_init_plane_charset8::@10: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@10
  return 
  to:@return
@8: scope:[]  from @4
  call main 
  to:@9
@9: scope:[]  from @8
  to:@end
@end: scope:[]  from @9

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @8
(label) @9
(label) @begin
(label) @end
(byte*) BORDERCOL
(byte*) BORDERCOL#0
(byte*) CHARGEN
(byte*) CHARGEN#0
(byte*) CHARSET8
(byte*) CHARSET8#0
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A#0
(byte*) CIA2_PORT_A_DDR
(byte*) CIA2_PORT_A_DDR#0
(byte) DTV_BADLINE_OFF
(byte) DTV_BADLINE_OFF#0
(byte) DTV_CHUNKY
(byte) DTV_CHUNKY#0
(byte*) DTV_CONTROL
(byte*) DTV_CONTROL#0
(byte*) DTV_FEATURE
(byte*) DTV_FEATURE#0
(byte) DTV_FEATURE_ENABLE
(byte) DTV_FEATURE_ENABLE#0
(byte) DTV_HIGHCOLOR
(byte) DTV_HIGHCOLOR#0
(byte) DTV_LINEAR
(byte) DTV_LINEAR#0
(byte*) DTV_PALETTE
(byte*) DTV_PALETTE#0
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_HI#0
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_MODULO_LO#0
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_HI#0
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_LO#0
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_START_MI#0
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEA_STEP#0
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_HI#0
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_MODULO_LO#0
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_HI#0
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_LO#0
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_START_MI#0
(byte*) DTV_PLANEB_STEP
(byte*) DTV_PLANEB_STEP#0
(byte*) PROCPORT
(byte*) PROCPORT#0
(byte*) PROCPORT_DDR
(byte*) PROCPORT_DDR#0
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_DDR_MEMORY_MASK#0
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_CHARROM#0
(byte) PROCPORT_RAM_IO
(byte) PROCPORT_RAM_IO#0
(byte*) RASTER
(byte*) RASTER#0
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL#0
(byte*) VIC_CONTROL2
(byte*) VIC_CONTROL2#0
(byte) VIC_CSEL
(byte) VIC_CSEL#0
(byte) VIC_DEN
(byte) VIC_DEN#0
(byte) VIC_ECM
(byte) VIC_ECM#0
(byte) VIC_MCM
(byte) VIC_MCM#0
(byte*) VIC_MEMORY
(byte*) VIC_MEMORY#0
(byte) VIC_RSEL
(byte) VIC_RSEL#0
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte*) dtvSetCpuBankSegment1::cpuBank#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1
(byte) dtvSetCpuBankSegment1::cpuBankIdx#2
(void()) gfx_init()
(label) gfx_init::@1
(label) gfx_init::@2
(label) gfx_init::@return
(void()) gfx_init_plane_charset8()
(byte*~) gfx_init_plane_charset8::$0
(byte~) gfx_init_plane_charset8::$1
(byte~) gfx_init_plane_charset8::$10
(bool~) gfx_init_plane_charset8::$11
(bool~) gfx_init_plane_charset8::$12
(bool~) gfx_init_plane_charset8::$13
(byte/signed byte/word/signed word/dword/signed dword~) gfx_init_plane_charset8::$14
(byte~) gfx_init_plane_charset8::$15
(word~) gfx_init_plane_charset8::$3
(word~) gfx_init_plane_charset8::$4
(word/signed dword/dword~) gfx_init_plane_charset8::$5
(byte*~) gfx_init_plane_charset8::$6
(byte~) gfx_init_plane_charset8::$7
(bool~) gfx_init_plane_charset8::$8
(bool~) gfx_init_plane_charset8::$9
(label) gfx_init_plane_charset8::@1
(label) gfx_init_plane_charset8::@10
(label) gfx_init_plane_charset8::@2
(label) gfx_init_plane_charset8::@3
(label) gfx_init_plane_charset8::@4
(label) gfx_init_plane_charset8::@5
(label) gfx_init_plane_charset8::@6
(label) gfx_init_plane_charset8::@7
(label) gfx_init_plane_charset8::@8
(label) gfx_init_plane_charset8::@9
(label) gfx_init_plane_charset8::@return
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0
(byte) gfx_init_plane_charset8::bits#1
(byte) gfx_init_plane_charset8::bits#2
(byte) gfx_init_plane_charset8::bits#3
(byte) gfx_init_plane_charset8::bits#4
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#0
(byte) gfx_init_plane_charset8::c#1
(byte) gfx_init_plane_charset8::c#2
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#0
(byte) gfx_init_plane_charset8::ch#1
(byte) gfx_init_plane_charset8::ch#2
(byte) gfx_init_plane_charset8::ch#3
(byte) gfx_init_plane_charset8::ch#4
(byte) gfx_init_plane_charset8::ch#5
(byte) gfx_init_plane_charset8::ch#6
(byte) gfx_init_plane_charset8::ch#7
(byte) gfx_init_plane_charset8::ch#8
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#0
(byte*) gfx_init_plane_charset8::chargen#1
(byte*) gfx_init_plane_charset8::chargen#2
(byte*) gfx_init_plane_charset8::chargen#3
(byte*) gfx_init_plane_charset8::chargen#4
(byte*) gfx_init_plane_charset8::chargen#5
(byte*) gfx_init_plane_charset8::chargen#6
(byte*) gfx_init_plane_charset8::chargen#7
(byte*) gfx_init_plane_charset8::chargen#8
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#0
(byte) gfx_init_plane_charset8::col#1
(byte) gfx_init_plane_charset8::col#2
(byte) gfx_init_plane_charset8::col#3
(byte) gfx_init_plane_charset8::col#4
(byte) gfx_init_plane_charset8::col#5
(byte) gfx_init_plane_charset8::col#6
(byte) gfx_init_plane_charset8::col#7
(byte) gfx_init_plane_charset8::col#8
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#0
(byte) gfx_init_plane_charset8::cp#1
(byte) gfx_init_plane_charset8::cp#2
(byte) gfx_init_plane_charset8::cp#3
(byte) gfx_init_plane_charset8::cp#4
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#0
(byte) gfx_init_plane_charset8::cr#1
(byte) gfx_init_plane_charset8::cr#2
(byte) gfx_init_plane_charset8::cr#3
(byte) gfx_init_plane_charset8::cr#4
(byte) gfx_init_plane_charset8::cr#5
(byte) gfx_init_plane_charset8::cr#6
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#0
(byte*) gfx_init_plane_charset8::gfxa#1
(byte*) gfx_init_plane_charset8::gfxa#2
(byte*) gfx_init_plane_charset8::gfxa#3
(byte*) gfx_init_plane_charset8::gfxa#4
(byte*) gfx_init_plane_charset8::gfxa#5
(byte*) gfx_init_plane_charset8::gfxa#6
(byte*) gfx_init_plane_charset8::gfxa#7
(byte*) gfx_init_plane_charset8::gfxa#8
(byte) gfx_init_plane_charset8::gfxbCpuBank
(byte) gfx_init_plane_charset8::gfxbCpuBank#0
(byte) gfx_init_plane_charset8::gfxbCpuBank#1
(byte) gfx_init_plane_charset8::gfxbCpuBank#2
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0
(byte~) gfx_init_screen0::$1
(byte~) gfx_init_screen0::$2
(byte~) gfx_init_screen0::$3
(bool~) gfx_init_screen0::$4
(bool~) gfx_init_screen0::$5
(label) gfx_init_screen0::@1
(label) gfx_init_screen0::@2
(label) gfx_init_screen0::@3
(label) gfx_init_screen0::@return
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#0
(byte*) gfx_init_screen0::ch#1
(byte*) gfx_init_screen0::ch#2
(byte*) gfx_init_screen0::ch#3
(byte*) gfx_init_screen0::ch#4
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#0
(byte) gfx_init_screen0::cx#1
(byte) gfx_init_screen0::cx#2
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#0
(byte) gfx_init_screen0::cy#1
(byte) gfx_init_screen0::cy#2
(byte) gfx_init_screen0::cy#3
(byte) gfx_init_screen0::cy#4
(void()) main()
(byte~) main::$1
(byte~) main::$10
(byte~) main::$11
(word~) main::$12
(word/signed dword/dword~) main::$13
(byte~) main::$14
(byte/word/dword~) main::$15
(word~) main::$16
(word~) main::$17
(word~) main::$18
(byte~) main::$19
(byte~) main::$2
(word~) main::$20
(word~) main::$21
(byte~) main::$22
(byte~) main::$23
(byte~) main::$24
(bool~) main::$25
(byte~) main::$26
(byte~) main::$27
(byte/word/dword~) main::$28
(bool~) main::$29
(byte~) main::$3
(byte~) main::$30
(byte~) main::$31
(byte~) main::$32
(byte~) main::$33
(byte~) main::$34
(bool~) main::$35
(byte~) main::$4
(byte~) main::$5
(byte/word/dword~) main::$6
(byte~) main::$7
(byte~) main::$8
(byte~) main::$9
(label) main::@1
(label) main::@17
(label) main::@2
(label) main::@3
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@return
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::rst
(byte) main::rst#0
(byte) main::rst#1
(byte) main::rst#2
(byte) main::rst#3

Culled Empty Block (label) gfx_init::@2
Culled Empty Block (label) gfx_init_plane_charset8::@10
Culled Empty Block (label) @9
Successful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (bool~) gfx_init_plane_charset8::$9 ← (byte~) gfx_init_plane_charset8::$7 == (byte/signed byte/word/signed word/dword/signed dword) 0 from (bool~) gfx_init_plane_charset8::$8 ← (byte~) gfx_init_plane_charset8::$7 != (byte/signed byte/word/signed word/dword/signed dword) 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::rst#2 = (byte) main::rst#3 
Alias (byte) gfx_init_screen0::cy#2 = (byte) gfx_init_screen0::cy#3 
Alias (byte*) gfx_init_screen0::ch#1 = (byte*) gfx_init_screen0::ch#4 
Alias (byte) gfx_init_plane_charset8::gfxbCpuBank#0 = (byte~) gfx_init_plane_charset8::$1 (byte) gfx_init_plane_charset8::gfxbCpuBank#2 
Alias (byte*) gfx_init_plane_charset8::chargen#0 = (byte*~) gfx_init_plane_charset8::$6 
Alias (byte) gfx_init_plane_charset8::bits#1 = (byte~) gfx_init_plane_charset8::$10 
Alias (byte) gfx_init_plane_charset8::col#3 = (byte) gfx_init_plane_charset8::col#4 (byte) gfx_init_plane_charset8::c#1 
Alias (byte*) gfx_init_plane_charset8::gfxa#3 = (byte*) gfx_init_plane_charset8::gfxa#4 
Alias (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#4 
Alias (byte) gfx_init_plane_charset8::cp#3 = (byte) gfx_init_plane_charset8::cp#4 
Alias (byte) gfx_init_plane_charset8::cr#4 = (byte) gfx_init_plane_charset8::cr#5 
Alias (byte*) gfx_init_plane_charset8::chargen#7 = (byte*) gfx_init_plane_charset8::chargen#8 
Alias (byte) gfx_init_plane_charset8::ch#5 = (byte) gfx_init_plane_charset8::ch#6 
Alias (byte) gfx_init_plane_charset8::cr#2 = (byte) gfx_init_plane_charset8::cr#3 
Alias (byte*) gfx_init_plane_charset8::chargen#4 = (byte*) gfx_init_plane_charset8::chargen#6 (byte*) gfx_init_plane_charset8::chargen#5 
Alias (byte) gfx_init_plane_charset8::ch#2 = (byte) gfx_init_plane_charset8::ch#3 (byte) gfx_init_plane_charset8::ch#4 
Alias (byte*) gfx_init_plane_charset8::gfxa#1 = (byte*) gfx_init_plane_charset8::gfxa#7 (byte*) gfx_init_plane_charset8::gfxa#8 
Alias (byte) gfx_init_plane_charset8::col#1 = (byte) gfx_init_plane_charset8::col#7 (byte) gfx_init_plane_charset8::col#8 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 = (byte~) gfx_init_plane_charset8::$15 
Successful SSA optimization Pass2AliasElimination
Alias (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#3 
Alias (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#3 
Alias (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#3 
Alias (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#3 
Alias (byte) gfx_init_plane_charset8::cr#2 = (byte) gfx_init_plane_charset8::cr#4 
Alias (byte*) gfx_init_plane_charset8::chargen#4 = (byte*) gfx_init_plane_charset8::chargen#7 
Alias (byte) gfx_init_plane_charset8::ch#2 = (byte) gfx_init_plane_charset8::ch#5 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte) main::rst#2
Self Phi Eliminated (byte) gfx_init_screen0::cy#2
Self Phi Eliminated (byte) gfx_init_plane_charset8::cr#2
Self Phi Eliminated (byte*) gfx_init_plane_charset8::chargen#4
Self Phi Eliminated (byte) gfx_init_plane_charset8::ch#2
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) main::rst#2 (byte) main::rst#0
Redundant Phi (byte) gfx_init_screen0::cy#2 (byte) gfx_init_screen0::cy#4
Redundant Phi (byte) gfx_init_plane_charset8::cr#2 (byte) gfx_init_plane_charset8::cr#6
Redundant Phi (byte*) gfx_init_plane_charset8::chargen#4 (byte*) gfx_init_plane_charset8::chargen#1
Redundant Phi (byte) gfx_init_plane_charset8::ch#2 (byte) gfx_init_plane_charset8::ch#7
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) main::$25 if((byte) main::j#1!=rangelast(0,15)) goto main::@1
Simple Condition (bool~) main::$29 if(*((byte*) RASTER#0)!=(byte) main::rst#0) goto main::@6
Simple Condition (bool~) main::$35 if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8
Simple Condition (bool~) gfx_init_screen0::$4 if((byte) gfx_init_screen0::cx#1!=rangelast(0,39)) goto gfx_init_screen0::@2
Simple Condition (bool~) gfx_init_screen0::$5 if((byte) gfx_init_screen0::cy#1!=rangelast(0,24)) goto gfx_init_screen0::@1
Simple Condition (bool~) gfx_init_plane_charset8::$9 if((byte~) gfx_init_plane_charset8::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4
Simple Condition (bool~) gfx_init_plane_charset8::$11 if((byte) gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3
Simple Condition (bool~) gfx_init_plane_charset8::$12 if((byte) gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2
Simple Condition (bool~) gfx_init_plane_charset8::$13 if((byte) gfx_init_plane_charset8::ch#1!=rangelast(0,255)) goto gfx_init_plane_charset8::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) PROCPORT_DDR#0 = ((byte*))0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK#0 = 7
Constant (const byte*) PROCPORT#0 = ((byte*))1
Constant (const byte) PROCPORT_RAM_IO#0 = 53
Constant (const byte) PROCPORT_RAM_CHARROM#0 = 49
Constant (const byte*) CHARGEN#0 = ((byte*))53248
Constant (const byte*) RASTER#0 = ((byte*))53266
Constant (const byte*) BORDERCOL#0 = ((byte*))53280
Constant (const byte*) VIC_CONTROL#0 = ((byte*))53265
Constant (const byte) VIC_ECM#0 = 64
Constant (const byte) VIC_DEN#0 = 16
Constant (const byte) VIC_RSEL#0 = 8
Constant (const byte*) VIC_CONTROL2#0 = ((byte*))53270
Constant (const byte) VIC_MCM#0 = 16
Constant (const byte) VIC_CSEL#0 = 8
Constant (const byte*) VIC_MEMORY#0 = ((byte*))53272
Constant (const byte*) CIA2_PORT_A#0 = ((byte*))56576
Constant (const byte*) CIA2_PORT_A_DDR#0 = ((byte*))56578
Constant (const byte*) DTV_FEATURE#0 = ((byte*))53311
Constant (const byte) DTV_FEATURE_ENABLE#0 = 1
Constant (const byte*) DTV_CONTROL#0 = ((byte*))53308
Constant (const byte) DTV_LINEAR#0 = 1
Constant (const byte) DTV_HIGHCOLOR#0 = 4
Constant (const byte) DTV_BADLINE_OFF#0 = 32
Constant (const byte) DTV_CHUNKY#0 = 64
Constant (const byte*) DTV_PALETTE#0 = ((byte*))53760
Constant (const byte*) DTV_PLANEA_START_LO#0 = ((byte*))53306
Constant (const byte*) DTV_PLANEA_START_MI#0 = ((byte*))53307
Constant (const byte*) DTV_PLANEA_START_HI#0 = ((byte*))53317
Constant (const byte*) DTV_PLANEA_STEP#0 = ((byte*))53318
Constant (const byte*) DTV_PLANEA_MODULO_LO#0 = ((byte*))53304
Constant (const byte*) DTV_PLANEA_MODULO_HI#0 = ((byte*))53305
Constant (const byte*) DTV_PLANEB_START_LO#0 = ((byte*))53321
Constant (const byte*) DTV_PLANEB_START_MI#0 = ((byte*))53322
Constant (const byte*) DTV_PLANEB_START_HI#0 = ((byte*))53323
Constant (const byte*) DTV_PLANEB_STEP#0 = ((byte*))53324
Constant (const byte*) DTV_PLANEB_MODULO_LO#0 = ((byte*))53319
Constant (const byte*) DTV_PLANEB_MODULO_HI#0 = ((byte*))53320
Constant (const byte*) dtvSetCpuBankSegment1::cpuBank#0 = ((byte*))255
Constant (const byte*) SCREEN#0 = ((byte*))31744
Constant (const byte*) CHARSET8#0 = ((byte*))32768
Constant (const byte) main::j#0 = 0
Constant (const byte) main::rst#0 = 66
Constant (const byte) gfx_init_screen0::cy#0 = 0
Constant (const byte) gfx_init_screen0::cx#0 = 0
Constant (const byte) gfx_init_plane_charset8::col#0 = 0
Constant (const byte) gfx_init_plane_charset8::ch#0 = 0
Constant (const byte) gfx_init_plane_charset8::cr#0 = 0
Constant (const byte) gfx_init_plane_charset8::cp#0 = 0
Constant (const byte) gfx_init_plane_charset8::c#0 = 0
Constant (const byte/signed byte/word/signed word/dword/signed dword) gfx_init_plane_charset8::$14 = 16384/16384
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$1 = DTV_HIGHCOLOR#0|DTV_LINEAR#0
Constant (const byte) main::$4 = VIC_DEN#0|VIC_ECM#0
Constant (const byte) main::$7 = VIC_MCM#0|VIC_CSEL#0
Constant (const byte) main::$8 = <SCREEN#0
Constant (const byte) main::$9 = >SCREEN#0
Constant (const byte) main::$10 = <CHARSET8#0
Constant (const byte) main::$11 = >CHARSET8#0
Constant (const word) main::$12 = ((word))SCREEN#0
Constant (const word) main::$16 = ((word))SCREEN#0
Constant (const word) main::$20 = ((word))SCREEN#0
Constant (const byte) main::$26 = VIC_DEN#0|VIC_ECM#0
Constant (const byte) main::$30 = VIC_DEN#0|VIC_ECM#0
Constant (const byte*) gfx_init_screen0::ch#0 = SCREEN#0
Constant (const byte*) gfx_init_plane_charset8::$0 = CHARSET8#0/16384
Constant (const word) gfx_init_plane_charset8::$3 = ((word))CHARSET8#0
Constant (const byte*) gfx_init_plane_charset8::chargen#0 = CHARGEN#0+1
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#1 = ((byte))gfx_init_plane_charset8::$14
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$2 = main::$1|DTV_CHUNKY#0
Constant (const byte) main::$5 = main::$4|VIC_RSEL#0
Constant (const word/signed dword/dword) main::$13 = main::$12/16384
Constant (const word) main::$17 = main::$16&16383
Constant (const word) main::$21 = main::$20&16383
Constant (const byte) main::$27 = main::$26|VIC_RSEL#0
Constant (const byte) main::$31 = main::$30|VIC_RSEL#0
Constant (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 = ((byte))gfx_init_plane_charset8::$0
Constant (const word) gfx_init_plane_charset8::$4 = gfx_init_plane_charset8::$3&16383
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$3 = main::$2|DTV_BADLINE_OFF#0
Constant (const byte/word/dword) main::$6 = main::$5|3
Constant (const byte) main::$14 = ((byte))main::$13
Constant (const word) main::$18 = main::$17>>6
Constant (const byte) main::$22 = >main::$21
Constant (const byte/word/dword) main::$28 = main::$27|3
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0 = gfx_init_plane_charset8::gfxbCpuBank#0
Constant (const byte) gfx_init_plane_charset8::gfxbCpuBank#1 = ++gfx_init_plane_charset8::gfxbCpuBank#0
Constant (const word/signed dword/dword) gfx_init_plane_charset8::$5 = 16384+gfx_init_plane_charset8::$4
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte/word/dword) main::$15 = 3^main::$14
Constant (const byte) main::$19 = ((byte))main::$18
Constant (const byte) main::$23 = main::$22>>2
Constant (const byte*) gfx_init_plane_charset8::gfxa#0 = ((byte*))gfx_init_plane_charset8::$5
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) main::$24 = main::$19|main::$23
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination if(true) goto main::@3
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Resolved ranged next value main::j#1 ← ++ main::j#2 to ++
Resolved ranged comparison value if(main::j#1!=rangelast(0,15)) goto main::@1 to (byte/signed byte/word/signed word/dword/signed dword) 16
Resolved ranged next value gfx_init_screen0::cx#1 ← ++ gfx_init_screen0::cx#2 to ++
Resolved ranged comparison value if(gfx_init_screen0::cx#1!=rangelast(0,39)) goto gfx_init_screen0::@2 to (byte/signed byte/word/signed word/dword/signed dword) 40
Resolved ranged next value gfx_init_screen0::cy#1 ← ++ gfx_init_screen0::cy#4 to ++
Resolved ranged comparison value if(gfx_init_screen0::cy#1!=rangelast(0,24)) goto gfx_init_screen0::@1 to (byte/signed byte/word/signed word/dword/signed dword) 25
Resolved ranged next value gfx_init_plane_charset8::cp#1 ← ++ gfx_init_plane_charset8::cp#2 to ++
Resolved ranged comparison value if(gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value gfx_init_plane_charset8::cr#1 ← ++ gfx_init_plane_charset8::cr#6 to ++
Resolved ranged comparison value if(gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2 to (byte/signed byte/word/signed word/dword/signed dword) 8
Resolved ranged next value gfx_init_plane_charset8::ch#1 ← ++ gfx_init_plane_charset8::ch#7 to ++
Resolved ranged comparison value if(gfx_init_plane_charset8::ch#1!=rangelast(0,255)) goto gfx_init_plane_charset8::@1 to (byte/signed byte/word/signed word/dword/signed dword) 0
Culled Empty Block (label) @3
Culled Empty Block (label) @4
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@6
Successful SSA optimization Pass2CullEmptyBlocks
Self Phi Eliminated (byte) gfx_init_plane_charset8::ch#7
Successful SSA optimization Pass2SelfPhiElimination
Redundant Phi (byte) gfx_init_plane_charset8::ch#7 (byte) gfx_init_plane_charset8::ch#8
Successful SSA optimization Pass2RedundantPhiElimination
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#1
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::rst#0
Inlining constant with var siblings (const byte) gfx_init_screen0::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen0::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen0::ch#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::col#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::ch#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::cr#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::cp#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::c#0
Inlining constant with var siblings (const byte*) gfx_init_plane_charset8::chargen#0
Inlining constant with var siblings (const byte*) gfx_init_plane_charset8::gfxa#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#1 = ((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#0 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0
Constant inlined gfx_init_plane_charset8::gfxa#0 = ((byte*))(word/signed word/dword/signed dword) 16384+((word))(const byte*) CHARSET8#0&(word/signed word/dword/signed dword) 16383
Constant inlined main::rst#0 = (byte/signed byte/word/signed word/dword/signed dword) 66
Constant inlined gfx_init_plane_charset8::cp#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_charset8::cr#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$12 = ((word))(const byte*) SCREEN#0
Constant inlined main::$13 = ((word))(const byte*) SCREEN#0/(word/signed word/dword/signed dword) 16384
Constant inlined main::$14 = ((byte))((word))(const byte*) SCREEN#0/(word/signed word/dword/signed dword) 16384
Constant inlined main::$15 = (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) SCREEN#0/(word/signed word/dword/signed dword) 16384
Constant inlined gfx_init_plane_charset8::c#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$30 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0
Constant inlined main::$31 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0
Constant inlined main::$10 = <(const byte*) CHARSET8#0
Constant inlined main::$11 = >(const byte*) CHARSET8#0
Constant inlined gfx_init_plane_charset8::chargen#0 = (const byte*) CHARGEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1
Constant inlined main::$16 = ((word))(const byte*) SCREEN#0
Constant inlined main::$17 = ((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383
Constant inlined main::$18 = ((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined main::$19 = ((byte))((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6
Constant inlined gfx_init_plane_charset8::ch#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::j#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_plane_charset8::$14 = (word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384
Constant inlined gfx_init_screen0::cx#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined gfx_init_screen0::cy#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$23 = >((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::$24 = ((byte))((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2
Constant inlined main::$26 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0
Constant inlined main::$20 = ((word))(const byte*) SCREEN#0
Constant inlined main::$21 = ((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383
Constant inlined main::$22 = >((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383
Constant inlined gfx_init_plane_charset8::$4 = ((word))(const byte*) CHARSET8#0&(word/signed word/dword/signed dword) 16383
Constant inlined gfx_init_screen0::ch#0 = (const byte*) SCREEN#0
Constant inlined gfx_init_plane_charset8::$5 = (word/signed word/dword/signed dword) 16384+((word))(const byte*) CHARSET8#0&(word/signed word/dword/signed dword) 16383
Constant inlined main::$1 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0
Constant inlined main::$27 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0
Constant inlined main::$2 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0
Constant inlined main::$28 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined main::$5 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0
Constant inlined main::$6 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
Constant inlined main::$3 = (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0
Constant inlined gfx_init_plane_charset8::col#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined main::$4 = (const byte) VIC_DEN#0|(const byte) VIC_ECM#0
Constant inlined main::$9 = >(const byte*) SCREEN#0
Constant inlined gfx_init_plane_charset8::$0 = (const byte*) CHARSET8#0/(word/signed word/dword/signed dword) 16384
Constant inlined main::$7 = (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
Constant inlined main::$8 = <(const byte*) SCREEN#0
Constant inlined gfx_init_plane_charset8::$3 = ((word))(const byte*) CHARSET8#0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@18(between main::@1 and main::@1)
Added new block during phi lifting gfx_init_plane_charset8::@11(between gfx_init_plane_charset8::@7 and gfx_init_plane_charset8::@1)
Added new block during phi lifting gfx_init_plane_charset8::@12(between gfx_init_plane_charset8::@6 and gfx_init_plane_charset8::@2)
Added new block during phi lifting gfx_init_plane_charset8::@13(between gfx_init_plane_charset8::@4 and gfx_init_plane_charset8::@3)
Added new block during phi lifting gfx_init_screen0::@5(between gfx_init_screen0::@3 and gfx_init_screen0::@1)
Added new block during phi lifting gfx_init_screen0::@6(between gfx_init_screen0::@2 and gfx_init_screen0::@2)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @8
Adding NOP phi() at start of @end
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_screen0
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to gfx_init:7 
Calls in [gfx_init] to gfx_init_screen0:46 gfx_init_plane_charset8:48 
Calls in [gfx_init_plane_charset8] to dtvSetCpuBankSegment1:51 dtvSetCpuBankSegment1:79 

Created 19 initial phi equivalence classes
Coalesced [44] main::j#3 ← main::j#1
Coalesced [54] gfx_init_plane_charset8::chargen#10 ← gfx_init_plane_charset8::chargen#3
Coalesced [55] gfx_init_plane_charset8::gfxa#10 ← gfx_init_plane_charset8::gfxa#6
Coalesced [56] gfx_init_plane_charset8::col#10 ← gfx_init_plane_charset8::col#6
Coalesced [60] gfx_init_plane_charset8::bits#5 ← gfx_init_plane_charset8::bits#0
Coalesced [61] gfx_init_plane_charset8::gfxa#12 ← gfx_init_plane_charset8::gfxa#5
Coalesced [62] gfx_init_plane_charset8::col#12 ← gfx_init_plane_charset8::col#5
Not coalescing [66] gfx_init_plane_charset8::c#3 ← gfx_init_plane_charset8::col#2
Coalesced [81] gfx_init_plane_charset8::chargen#9 ← gfx_init_plane_charset8::chargen#1
Coalesced [82] gfx_init_plane_charset8::gfxa#9 ← gfx_init_plane_charset8::gfxa#1
Coalesced [83] gfx_init_plane_charset8::col#9 ← gfx_init_plane_charset8::col#1
Coalesced [84] gfx_init_plane_charset8::ch#9 ← gfx_init_plane_charset8::ch#1
Coalesced (already) [85] gfx_init_plane_charset8::chargen#11 ← gfx_init_plane_charset8::chargen#1
Coalesced (already) [86] gfx_init_plane_charset8::gfxa#11 ← gfx_init_plane_charset8::gfxa#1
Coalesced (already) [87] gfx_init_plane_charset8::col#11 ← gfx_init_plane_charset8::col#1
Coalesced [88] gfx_init_plane_charset8::cr#7 ← gfx_init_plane_charset8::cr#1
Coalesced [89] gfx_init_plane_charset8::bits#6 ← gfx_init_plane_charset8::bits#1
Coalesced (already) [90] gfx_init_plane_charset8::gfxa#13 ← gfx_init_plane_charset8::gfxa#1
Coalesced (already) [91] gfx_init_plane_charset8::col#13 ← gfx_init_plane_charset8::col#1
Coalesced [92] gfx_init_plane_charset8::cp#5 ← gfx_init_plane_charset8::cp#1
Coalesced [99] gfx_init_screen0::ch#6 ← gfx_init_screen0::ch#3
Coalesced [112] gfx_init_screen0::cy#5 ← gfx_init_screen0::cy#1
Coalesced [113] gfx_init_screen0::ch#5 ← gfx_init_screen0::ch#1
Coalesced [114] gfx_init_screen0::cx#3 ← gfx_init_screen0::cx#1
Coalesced (already) [115] gfx_init_screen0::ch#7 ← gfx_init_screen0::ch#1
Coalesced down to 13 phi equivalence classes
Culled Empty Block (label) main::@18
Culled Empty Block (label) gfx_init_plane_charset8::@11
Culled Empty Block (label) gfx_init_plane_charset8::@12
Culled Empty Block (label) gfx_init_plane_charset8::@13
Culled Empty Block (label) gfx_init_screen0::@5
Culled Empty Block (label) gfx_init_screen0::@6
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @8
Adding NOP phi() at start of @end
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_screen0

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@8
@8: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @8
  [3] phi()
main: scope:[main]  from @8
  asm { sei  }
  [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [7] call gfx_init 
  to:main::@17
main::@17: scope:[main]  from main
  [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0
  [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0
  [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
  [12] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) SCREEN#0
  [13] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) SCREEN#0
  [14] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [15] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1
  [16] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [17] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [18] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHARSET8#0
  [19] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHARSET8#0
  [20] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [21] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [22] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [23] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [24] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  [25] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) SCREEN#0/(word/signed word/dword/signed dword) 16384
  [26] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@17
  [27] (byte) main::j#2 ← phi( main::@1/(byte) main::j#1 main::@17/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [28] *((const byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2
  [29] (byte) main::j#1 ← ++ (byte) main::j#2
  [30] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@1 main::@8
  asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
  [32] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [33] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@5
main::@5: scope:[main]  from main::@3 main::@5
  [34] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5
  to:main::@7
main::@7: scope:[main]  from main::@5
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  to:main::@8
main::@8: scope:[main]  from main::@7 main::@8
  [36] (byte) main::rst#1 ← *((const byte*) RASTER#0)
  [37] (byte~) main::$32 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [38] (byte~) main::$33 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$32
  [39] *((const byte*) VIC_CONTROL#0) ← (byte~) main::$33
  [40] (byte~) main::$34 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [41] *((const byte*) BORDERCOL#0) ← (byte~) main::$34
  asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
  [43] if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8
  to:main::@3
gfx_init: scope:[gfx_init]  from main
  [44] phi()
  [45] call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  [46] phi()
  [47] call gfx_init_plane_charset8 
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@1
  [48] return 
  to:@return
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@1
  [49] phi()
  [50] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  [51] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  [52] (byte) gfx_init_plane_charset8::ch#8 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::ch#1 gfx_init_plane_charset8::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [52] (byte) gfx_init_plane_charset8::col#6 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::col#1 gfx_init_plane_charset8::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [52] (byte*) gfx_init_plane_charset8::gfxa#6 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::gfxa#1 gfx_init_plane_charset8::@9/((byte*))(word/signed word/dword/signed dword) 16384+((word))(const byte*) CHARSET8#0&(word/signed word/dword/signed dword) 16383 )
  [52] (byte*) gfx_init_plane_charset8::chargen#3 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::@9/(const byte*) CHARGEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1 )
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  [53] (byte) gfx_init_plane_charset8::cr#6 ← phi( gfx_init_plane_charset8::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::cr#1 )
  [53] (byte) gfx_init_plane_charset8::col#5 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#1 )
  [53] (byte*) gfx_init_plane_charset8::gfxa#5 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#1 )
  [53] (byte*) gfx_init_plane_charset8::chargen#2 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#1 )
  [54] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2)
  [55] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  [56] (byte) gfx_init_plane_charset8::cp#2 ← phi( gfx_init_plane_charset8::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cp#1 )
  [56] (byte) gfx_init_plane_charset8::col#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  [56] (byte*) gfx_init_plane_charset8::gfxa#2 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  [56] (byte) gfx_init_plane_charset8::bits#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::bits#1 )
  [57] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) 128
  [58] if((byte~) gfx_init_plane_charset8::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  [59] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  [60] (byte) gfx_init_plane_charset8::c#2 ← phi( gfx_init_plane_charset8::@3/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_plane_charset8::@5/(byte~) gfx_init_plane_charset8::c#3 )
  [61] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2
  [62] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2
  [63] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [64] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2
  [65] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2
  [66] if((byte) gfx_init_plane_charset8::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  [67] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6
  [68] if((byte) gfx_init_plane_charset8::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  [69] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8
  [70] if((byte) gfx_init_plane_charset8::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  [71] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [72] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  [73] return 
  to:@return
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_charset8 gfx_init_plane_charset8::@8
  [74] (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 ← phi( gfx_init_plane_charset8/(const byte) gfx_init_plane_charset8::gfxbCpuBank#0 gfx_init_plane_charset8::@8/((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384 )
  [75] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#2
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  [77] return 
  to:@return
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  [78] phi()
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  [79] (byte*) gfx_init_screen0::ch#3 ← phi( gfx_init_screen0/(const byte*) SCREEN#0 gfx_init_screen0::@3/(byte*) gfx_init_screen0::ch#1 )
  [79] (byte) gfx_init_screen0::cy#4 ← phi( gfx_init_screen0/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen0::@3/(byte) gfx_init_screen0::cy#1 )
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  [80] (byte*) gfx_init_screen0::ch#2 ← phi( gfx_init_screen0::@1/(byte*) gfx_init_screen0::ch#3 gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  [80] (byte) gfx_init_screen0::cx#2 ← phi( gfx_init_screen0::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 gfx_init_screen0::@2/(byte) gfx_init_screen0::cx#1 )
  [81] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 15
  [82] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4
  [83] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 15
  [84] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2
  [85] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3
  [86] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2
  [87] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2
  [88] if((byte) gfx_init_screen0::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  [89] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4
  [90] if((byte) gfx_init_screen0::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  [91] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) BORDERCOL
(byte*) CHARGEN
(byte*) CHARSET8
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte) DTV_BADLINE_OFF
(byte) DTV_CHUNKY
(byte*) DTV_CONTROL
(byte*) DTV_FEATURE
(byte) DTV_FEATURE_ENABLE
(byte) DTV_HIGHCOLOR
(byte) DTV_LINEAR
(byte*) DTV_PALETTE
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_STEP
(byte*) PROCPORT
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(byte*) RASTER
(byte*) SCREEN
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#2 2.0
(void()) gfx_init()
(void()) gfx_init_plane_charset8()
(byte~) gfx_init_plane_charset8::$7 2002.0
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0 101.0
(byte) gfx_init_plane_charset8::bits#1 500.5
(byte) gfx_init_plane_charset8::bits#2 443.42857142857144
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#2 2002.0
(byte~) gfx_init_plane_charset8::c#3 2002.0
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#1 16.5
(byte) gfx_init_plane_charset8::ch#8 1.2941176470588236
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#1 13.3125
(byte*) gfx_init_plane_charset8::chargen#2 157.0
(byte*) gfx_init_plane_charset8::chargen#3 22.0
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#1 302.0
(byte) gfx_init_plane_charset8::col#2 388.0
(byte) gfx_init_plane_charset8::col#5 71.0
(byte) gfx_init_plane_charset8::col#6 22.0
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#1 1501.5
(byte) gfx_init_plane_charset8::cp#2 222.44444444444446
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#1 151.5
(byte) gfx_init_plane_charset8::cr#6 14.428571428571429
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#1 234.8888888888889
(byte*) gfx_init_plane_charset8::gfxa#2 517.3333333333334
(byte*) gfx_init_plane_charset8::gfxa#5 71.0
(byte*) gfx_init_plane_charset8::gfxa#6 22.0
(byte) gfx_init_plane_charset8::gfxbCpuBank
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0 202.0
(byte~) gfx_init_screen0::$1 101.0
(byte~) gfx_init_screen0::$2 202.0
(byte~) gfx_init_screen0::$3 202.0
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#1 42.599999999999994
(byte*) gfx_init_screen0::ch#2 52.33333333333333
(byte*) gfx_init_screen0::ch#3 22.0
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#1 151.5
(byte) gfx_init_screen0::cx#2 43.285714285714285
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#1 16.5
(byte) gfx_init_screen0::cy#4 12.299999999999999
(void()) main()
(byte~) main::$32 202.0
(byte~) main::$33 202.0
(byte~) main::$34 202.0
(byte) main::j
(byte) main::j#1 16.5
(byte) main::j#2 22.0
(byte) main::rst
(byte) main::rst#1 57.714285714285715

Initial phi equivalence classes
[ main::j#2 main::j#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#2 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Added variable main::rst#1 to zero page equivalence class [ main::rst#1 ]
Added variable main::$32 to zero page equivalence class [ main::$32 ]
Added variable main::$33 to zero page equivalence class [ main::$33 ]
Added variable main::$34 to zero page equivalence class [ main::$34 ]
Added variable gfx_init_plane_charset8::$7 to zero page equivalence class [ gfx_init_plane_charset8::$7 ]
Added variable gfx_init_screen0::$0 to zero page equivalence class [ gfx_init_screen0::$0 ]
Added variable gfx_init_screen0::$1 to zero page equivalence class [ gfx_init_screen0::$1 ]
Added variable gfx_init_screen0::$2 to zero page equivalence class [ gfx_init_screen0::$2 ]
Added variable gfx_init_screen0::$3 to zero page equivalence class [ gfx_init_screen0::$3 ]
Complete equivalence classes
[ main::j#2 main::j#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#2 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
[ main::rst#1 ]
[ main::$32 ]
[ main::$33 ]
[ main::$34 ]
[ gfx_init_plane_charset8::$7 ]
[ gfx_init_screen0::$0 ]
[ gfx_init_screen0::$1 ]
[ gfx_init_screen0::$2 ]
[ gfx_init_screen0::$3 ]
Allocated zp ZP_BYTE:2 [ main::j#2 main::j#1 ]
Allocated zp ZP_BYTE:3 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Allocated zp ZP_WORD:4 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
Allocated zp ZP_BYTE:6 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Allocated zp ZP_BYTE:7 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Allocated zp ZP_WORD:8 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
Allocated zp ZP_BYTE:10 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Allocated zp ZP_BYTE:11 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Allocated zp ZP_BYTE:12 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
Allocated zp ZP_BYTE:13 [ dtvSetCpuBankSegment1::cpuBankIdx#2 ]
Allocated zp ZP_BYTE:14 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Allocated zp ZP_BYTE:15 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Allocated zp ZP_WORD:16 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Allocated zp ZP_BYTE:18 [ main::rst#1 ]
Allocated zp ZP_BYTE:19 [ main::$32 ]
Allocated zp ZP_BYTE:20 [ main::$33 ]
Allocated zp ZP_BYTE:21 [ main::$34 ]
Allocated zp ZP_BYTE:22 [ gfx_init_plane_charset8::$7 ]
Allocated zp ZP_BYTE:23 [ gfx_init_screen0::$0 ]
Allocated zp ZP_BYTE:24 [ gfx_init_screen0::$1 ]
Allocated zp ZP_BYTE:25 [ gfx_init_screen0::$2 ]
Allocated zp ZP_BYTE:26 [ gfx_init_screen0::$3 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .const PROCPORT_RAM_CHARROM = $31
  .label CHARGEN = $d000
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_HIGHCOLOR = 4
  .const DTV_BADLINE_OFF = $20
  .const DTV_CHUNKY = $40
  .label DTV_PALETTE = $d200
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  .label SCREEN = $7c00
  .label CHARSET8 = $8000
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @8 [phi:@begin->@8]
b8_from_bbegin:
  jmp b8
//SEG4 @8
b8:
//SEG5 [2] call main 
  jsr main
//SEG6 [3] phi from @8 to @end [phi:@8->@end]
bend_from_b8:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
    .label _32 = $13
    .label _33 = $14
    .label _34 = $15
    .label j = 2
    .label rst = $12
  //SEG9 asm { sei  }
    sei
  //SEG10 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG11 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG12 [7] call gfx_init 
  //SEG13 [44] phi from main to gfx_init [phi:main->gfx_init]
  gfx_init_from_main:
    jsr gfx_init
    jmp b17
  //SEG14 main::@17
  b17:
  //SEG15 [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG16 [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_BADLINE_OFF
    sta DTV_CONTROL
  //SEG17 [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG18 [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG19 [12] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) SCREEN#0 -- _deref_pbuc1=vbuc2 
    lda #<SCREEN
    sta DTV_PLANEA_START_LO
  //SEG20 [13] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) SCREEN#0 -- _deref_pbuc1=vbuc2 
    lda #>SCREEN
    sta DTV_PLANEA_START_MI
  //SEG21 [14] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG22 [15] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG23 [16] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG24 [17] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG25 [18] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHARSET8#0 -- _deref_pbuc1=vbuc2 
    lda #<CHARSET8
    sta DTV_PLANEB_START_LO
  //SEG26 [19] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHARSET8#0 -- _deref_pbuc1=vbuc2 
    lda #>CHARSET8
    sta DTV_PLANEB_START_MI
  //SEG27 [20] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG28 [21] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_STEP
  //SEG29 [22] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG30 [23] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG31 [24] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG32 [25] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) SCREEN#0/(word/signed word/dword/signed dword) 16384 -- _deref_pbuc1=vbuc2 
    lda #3^SCREEN/$4000
    sta CIA2_PORT_A
  //SEG33 [26] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #(SCREEN&$3fff)>>6|(>(SCREEN&$3fff))>>2
    sta VIC_MEMORY
  //SEG34 [27] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
  //SEG35 [27] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@17->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta j
    jmp b1
  //SEG36 [27] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG37 [27] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG38 main::@1
  b1:
  //SEG39 [28] *((const byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy j
    tya
    sta DTV_PALETTE,y
  //SEG40 [29] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuz1=_inc_vbuz1 
    inc j
  //SEG41 [30] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda j
    cmp #$10
    bne b1_from_b1
    jmp b3
  //SEG42 main::@3
  b3:
  //SEG43 asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
    ldx #$ff
  rff:
    cpx RASTER
    bne rff
  stabilize:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    cpx RASTER
    beq eat+0
  eat:
    inx
    cpx #8
    bne stabilize
  //SEG44 [32] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG45 [33] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
    jmp b5
  //SEG46 main::@5
  b5:
  //SEG47 [34] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$42
    bne b5
    jmp b7
  //SEG48 main::@7
  b7:
  //SEG49 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    jmp b8
  //SEG50 main::@8
  b8:
  //SEG51 [36] (byte) main::rst#1 ← *((const byte*) RASTER#0) -- vbuz1=_deref_pbuc1 
    lda RASTER
    sta rst
  //SEG52 [37] (byte~) main::$32 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and rst
    sta _32
  //SEG53 [38] (byte~) main::$33 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$32 -- vbuz1=vbuc1_bor_vbuz2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL
    ora _32
    sta _33
  //SEG54 [39] *((const byte*) VIC_CONTROL#0) ← (byte~) main::$33 -- _deref_pbuc1=vbuz1 
    lda _33
    sta VIC_CONTROL
  //SEG55 [40] (byte~) main::$34 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda rst
    asl
    asl
    asl
    asl
    sta _34
  //SEG56 [41] *((const byte*) BORDERCOL#0) ← (byte~) main::$34 -- _deref_pbuc1=vbuz1 
    lda _34
    sta BORDERCOL
  //SEG57 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
  //SEG58 [43] if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8 -- vbuz1_neq_vbuc1_then_la1 
    lda rst
    cmp #$f2
    bne b8
    jmp b3
}
//SEG59 gfx_init
gfx_init: {
  //SEG60 [45] call gfx_init_screen0 
  //SEG61 [78] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
  gfx_init_screen0_from_gfx_init:
    jsr gfx_init_screen0
  //SEG62 [46] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  b1_from_gfx_init:
    jmp b1
  //SEG63 gfx_init::@1
  b1:
  //SEG64 [47] call gfx_init_plane_charset8 
  //SEG65 [49] phi from gfx_init::@1 to gfx_init_plane_charset8 [phi:gfx_init::@1->gfx_init_plane_charset8]
  gfx_init_plane_charset8_from_b1:
    jsr gfx_init_plane_charset8
    jmp breturn
  //SEG66 gfx_init::@return
  breturn:
  //SEG67 [48] return 
    rts
}
//SEG68 gfx_init_plane_charset8
gfx_init_plane_charset8: {
    .const gfxbCpuBank = $ff&CHARSET8/$4000
    .label _7 = $16
    .label bits = 7
    .label chargen = 4
    .label gfxa = 8
    .label col = $a
    .label cp = $b
    .label cr = 6
    .label ch = 3
    .label c = $c
  //SEG69 [50] call dtvSetCpuBankSegment1 
  //SEG70 [74] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
  //SEG71 [74] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp b9
  //SEG72 gfx_init_plane_charset8::@9
  b9:
  //SEG73 [51] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG74 [52] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  b1_from_b9:
  //SEG75 [52] phi (byte) gfx_init_plane_charset8::ch#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
  //SEG76 [52] phi (byte) gfx_init_plane_charset8::col#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta col
  //SEG77 [52] phi (byte*) gfx_init_plane_charset8::gfxa#6 = ((byte*))(word/signed word/dword/signed dword) 16384+((word))(const byte*) CHARSET8#0&(word/signed word/dword/signed dword) 16383 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000+(CHARSET8&$3fff)
    sta gfxa
    lda #>$4000+(CHARSET8&$3fff)
    sta gfxa+1
  //SEG78 [52] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const byte*) CHARGEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN+1
    sta chargen
    lda #>CHARGEN+1
    sta chargen+1
    jmp b1
  //SEG79 [52] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  b1_from_b7:
  //SEG80 [52] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
  //SEG81 [52] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
  //SEG82 [52] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
  //SEG83 [52] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    jmp b1
  //SEG84 gfx_init_plane_charset8::@1
  b1:
  //SEG85 [53] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  b2_from_b1:
  //SEG86 [53] phi (byte) gfx_init_plane_charset8::cr#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta cr
  //SEG87 [53] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG88 [53] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG89 [53] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp b2
  //SEG90 [53] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  b2_from_b6:
  //SEG91 [53] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
  //SEG92 [53] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG93 [53] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG94 [53] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp b2
  //SEG95 gfx_init_plane_charset8::@2
  b2:
  //SEG96 [54] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta bits
  //SEG97 [55] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG98 [56] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  b3_from_b2:
  //SEG99 [56] phi (byte) gfx_init_plane_charset8::cp#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta cp
  //SEG100 [56] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG101 [56] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG102 [56] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp b3
  //SEG103 [56] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  b3_from_b4:
  //SEG104 [56] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
  //SEG105 [56] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG106 [56] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG107 [56] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp b3
  //SEG108 gfx_init_plane_charset8::@3
  b3:
  //SEG109 [57] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) 128 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and bits
    sta _7
  //SEG110 [58] if((byte~) gfx_init_plane_charset8::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4 -- vbuz1_eq_0_then_la1 
    lda _7
    beq b4_from_b3
    jmp b5
  //SEG111 gfx_init_plane_charset8::@5
  b5:
  //SEG112 [59] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuz1=vbuz2 
    lda col
    sta c
  //SEG113 [60] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  b4_from_b5:
  //SEG114 [60] phi (byte) gfx_init_plane_charset8::c#2 = (byte~) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp b4
  //SEG115 [60] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  b4_from_b3:
  //SEG116 [60] phi (byte) gfx_init_plane_charset8::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta c
    jmp b4
  //SEG117 gfx_init_plane_charset8::@4
  b4:
  //SEG118 [61] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuz2 
    lda c
    ldy #0
    sta (gfxa),y
  //SEG119 [62] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG120 [63] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG121 [64] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG122 [65] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuz1=_inc_vbuz1 
    inc cp
  //SEG123 [66] if((byte) gfx_init_plane_charset8::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda cp
    cmp #8
    bne b3_from_b4
    jmp b6
  //SEG124 gfx_init_plane_charset8::@6
  b6:
  //SEG125 [67] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc cr
  //SEG126 [68] if((byte) gfx_init_plane_charset8::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cr
    cmp #8
    bne b2_from_b6
    jmp b7
  //SEG127 gfx_init_plane_charset8::@7
  b7:
  //SEG128 [69] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc ch
  //SEG129 [70] if((byte) gfx_init_plane_charset8::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda ch
    bne b1_from_b7
    jmp b8
  //SEG130 gfx_init_plane_charset8::@8
  b8:
  //SEG131 [71] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG132 [72] call dtvSetCpuBankSegment1 
  //SEG133 [74] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b8:
  //SEG134 [74] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = ((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG135 gfx_init_plane_charset8::@return
  breturn:
  //SEG136 [73] return 
    rts
}
//SEG137 dtvSetCpuBankSegment1
dtvSetCpuBankSegment1: {
    .label cpuBank = $ff
    .label cpuBankIdx = $d
  //SEG138 [75] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 -- _deref_pbuc1=vbuz1 
    lda cpuBankIdx
    sta cpuBank
  //SEG139 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
    jmp breturn
  //SEG140 dtvSetCpuBankSegment1::@return
  breturn:
  //SEG141 [77] return 
    rts
}
//SEG142 gfx_init_screen0
gfx_init_screen0: {
    .label _0 = $17
    .label _1 = $18
    .label _2 = $19
    .label _3 = $1a
    .label ch = $10
    .label cx = $f
    .label cy = $e
  //SEG143 [79] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  b1_from_gfx_init_screen0:
  //SEG144 [79] phi (byte*) gfx_init_screen0::ch#3 = (const byte*) SCREEN#0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG145 [79] phi (byte) gfx_init_screen0::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG146 [79] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  b1_from_b3:
  //SEG147 [79] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
  //SEG148 [79] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    jmp b1
  //SEG149 gfx_init_screen0::@1
  b1:
  //SEG150 [80] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  b2_from_b1:
  //SEG151 [80] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
  //SEG152 [80] phi (byte) gfx_init_screen0::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta cx
    jmp b2
  //SEG153 [80] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  b2_from_b2:
  //SEG154 [80] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
  //SEG155 [80] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    jmp b2
  //SEG156 gfx_init_screen0::@2
  b2:
  //SEG157 [81] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cy
    sta _0
  //SEG158 [82] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuz2_rol_4 
    lda _0
    asl
    asl
    asl
    asl
    sta _1
  //SEG159 [83] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 15 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and cx
    sta _2
  //SEG160 [84] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuz1=vbuz2_bor_vbuz3 
    lda _1
    ora _2
    sta _3
  //SEG161 [85] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuz2 
    lda _3
    ldy #0
    sta (ch),y
  //SEG162 [86] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG163 [87] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuz1=_inc_vbuz1 
    inc cx
  //SEG164 [88] if((byte) gfx_init_screen0::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto gfx_init_screen0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cx
    cmp #$28
    bne b2_from_b2
    jmp b3
  //SEG165 gfx_init_screen0::@3
  b3:
  //SEG166 [89] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG167 [90] if((byte) gfx_init_screen0::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b1_from_b3
    jmp breturn
  //SEG168 gfx_init_screen0::@return
  breturn:
  //SEG169 [91] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) SCREEN#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) SCREEN#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHARSET8#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHARSET8#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [22] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [24] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [25] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) SCREEN#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [26] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  } always clobbers reg byte x 
Statement [32] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [33] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [34] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [37] (byte~) main::$32 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ main::rst#1 main::$32 ] ( main:2 [ main::rst#1 main::$32 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:18 [ main::rst#1 ]
Statement [38] (byte~) main::$33 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$32 [ main::rst#1 main::$33 ] ( main:2 [ main::rst#1 main::$33 ] ) always clobbers reg byte a 
Statement [40] (byte~) main::$34 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::rst#1 main::$34 ] ( main:2 [ main::rst#1 main::$34 ] ) always clobbers reg byte a 
Statement [51] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 [ ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ ] ) always clobbers reg byte a 
Statement [54] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:3 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:10 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:10 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:6 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Statement [57] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) 128 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::$7 ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::$7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:7 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:11 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Statement [61] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:7 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:11 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Statement [71] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ ] ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [81] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ( main:2::gfx_init:7::gfx_init_screen0:45 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:14 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:15 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [82] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( main:2::gfx_init:7::gfx_init_screen0:45 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ) always clobbers reg byte a 
Statement [83] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( main:2::gfx_init:7::gfx_init_screen0:45 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:24 [ gfx_init_screen0::$1 ]
Statement [85] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( main:2::gfx_init:7::gfx_init_screen0:45 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:14 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte y as potential for zp ZP_BYTE:15 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [12] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) SCREEN#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [13] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) SCREEN#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [14] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [15] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [17] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [18] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHARSET8#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [19] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHARSET8#0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [20] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [21] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [22] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [23] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [24] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [25] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) SCREEN#0/(word/signed word/dword/signed dword) 16384 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [26] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  } always clobbers reg byte x 
Statement [32] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [33] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [34] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [37] (byte~) main::$32 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 [ main::rst#1 main::$32 ] ( main:2 [ main::rst#1 main::$32 ] ) always clobbers reg byte a 
Statement [38] (byte~) main::$33 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$32 [ main::rst#1 main::$33 ] ( main:2 [ main::rst#1 main::$33 ] ) always clobbers reg byte a 
Statement [40] (byte~) main::$34 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ main::rst#1 main::$34 ] ( main:2 [ main::rst#1 main::$34 ] ) always clobbers reg byte a 
Statement [51] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 [ ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ ] ) always clobbers reg byte a 
Statement [54] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ) always clobbers reg byte a reg byte y 
Statement [57] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) 128 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::$7 ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::$7 ] ) always clobbers reg byte a 
Statement [61] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ) always clobbers reg byte y 
Statement [71] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 [ ] ( main:2::gfx_init:7::gfx_init_plane_charset8:47 [ ] ) always clobbers reg byte a 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [81] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ( main:2::gfx_init:7::gfx_init_screen0:45 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ) always clobbers reg byte a 
Statement [82] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( main:2::gfx_init:7::gfx_init_screen0:45 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ) always clobbers reg byte a 
Statement [83] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 15 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( main:2::gfx_init:7::gfx_init_screen0:45 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ) always clobbers reg byte a 
Statement [85] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( main:2::gfx_init:7::gfx_init_screen0:45 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ) always clobbers reg byte y 
Potential registers zp ZP_BYTE:2 [ main::j#2 main::j#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] : zp ZP_BYTE:3 , reg byte x , 
Potential registers zp ZP_WORD:4 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] : zp ZP_WORD:4 , 
Potential registers zp ZP_BYTE:6 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] : zp ZP_BYTE:6 , reg byte x , 
Potential registers zp ZP_BYTE:7 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] : zp ZP_BYTE:7 , reg byte x , 
Potential registers zp ZP_WORD:8 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] : zp ZP_BYTE:10 , reg byte x , 
Potential registers zp ZP_BYTE:11 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] : zp ZP_BYTE:11 , reg byte x , 
Potential registers zp ZP_BYTE:12 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] : zp ZP_BYTE:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:13 [ dtvSetCpuBankSegment1::cpuBankIdx#2 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:14 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] : zp ZP_BYTE:14 , reg byte x , 
Potential registers zp ZP_BYTE:15 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] : zp ZP_BYTE:15 , reg byte x , 
Potential registers zp ZP_WORD:16 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] : zp ZP_WORD:16 , 
Potential registers zp ZP_BYTE:18 [ main::rst#1 ] : zp ZP_BYTE:18 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:19 [ main::$32 ] : zp ZP_BYTE:19 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:20 [ main::$33 ] : zp ZP_BYTE:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:21 [ main::$34 ] : zp ZP_BYTE:21 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:22 [ gfx_init_plane_charset8::$7 ] : zp ZP_BYTE:22 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:23 [ gfx_init_screen0::$0 ] : zp ZP_BYTE:23 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:24 [ gfx_init_screen0::$1 ] : zp ZP_BYTE:24 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:25 [ gfx_init_screen0::$2 ] : zp ZP_BYTE:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:26 [ gfx_init_screen0::$3 ] : zp ZP_BYTE:26 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [gfx_init_plane_charset8] 4,004: zp ZP_BYTE:12 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] 2,002: zp ZP_BYTE:22 [ gfx_init_plane_charset8::$7 ] 1,723.94: zp ZP_BYTE:11 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] 1,044.93: zp ZP_BYTE:7 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 845.22: zp ZP_WORD:8 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] 783: zp ZP_BYTE:10 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 192.31: zp ZP_WORD:4 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] 165.93: zp ZP_BYTE:6 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 17.79: zp ZP_BYTE:3 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Uplift Scope [gfx_init_screen0] 202: zp ZP_BYTE:23 [ gfx_init_screen0::$0 ] 202: zp ZP_BYTE:25 [ gfx_init_screen0::$2 ] 202: zp ZP_BYTE:26 [ gfx_init_screen0::$3 ] 194.79: zp ZP_BYTE:15 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] 116.93: zp ZP_WORD:16 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] 101: zp ZP_BYTE:24 [ gfx_init_screen0::$1 ] 28.8: zp ZP_BYTE:14 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Uplift Scope [main] 202: zp ZP_BYTE:19 [ main::$32 ] 202: zp ZP_BYTE:20 [ main::$33 ] 202: zp ZP_BYTE:21 [ main::$34 ] 57.71: zp ZP_BYTE:18 [ main::rst#1 ] 38.5: zp ZP_BYTE:2 [ main::j#2 main::j#1 ] 
Uplift Scope [dtvSetCpuBankSegment1] 2: zp ZP_BYTE:13 [ dtvSetCpuBankSegment1::cpuBankIdx#2 ] 
Uplift Scope [gfx_init] 
Uplift Scope [] 

Uplifting [gfx_init_plane_charset8] best 98374 combination reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] reg byte a [ gfx_init_plane_charset8::$7 ] reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] zp ZP_BYTE:7 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] zp ZP_WORD:8 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] zp ZP_BYTE:10 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] zp ZP_WORD:4 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] zp ZP_BYTE:6 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] zp ZP_BYTE:3 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Limited combination testing to 100 combinations of 512 possible.
Uplifting [gfx_init_screen0] best 95574 combination reg byte a [ gfx_init_screen0::$0 ] reg byte a [ gfx_init_screen0::$2 ] reg byte a [ gfx_init_screen0::$3 ] reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] zp ZP_WORD:16 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] zp ZP_BYTE:24 [ gfx_init_screen0::$1 ] zp ZP_BYTE:14 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Limited combination testing to 100 combinations of 768 possible.
Uplifting [main] best 92974 combination reg byte a [ main::$32 ] reg byte a [ main::$33 ] reg byte a [ main::$34 ] reg byte x [ main::rst#1 ] zp ZP_BYTE:2 [ main::j#2 main::j#1 ] 
Limited combination testing to 100 combinations of 768 possible.
Uplifting [dtvSetCpuBankSegment1] best 92965 combination reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#2 ] 
Uplifting [gfx_init] best 92965 combination 
Uplifting [] best 92965 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Uplifting [gfx_init_plane_charset8] best 92965 combination zp ZP_BYTE:7 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:10 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Uplifting [gfx_init_plane_charset8] best 92965 combination zp ZP_BYTE:10 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Uplifting [gfx_init_plane_charset8] best 92965 combination zp ZP_BYTE:6 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:24 [ gfx_init_screen0::$1 ]
Uplifting [gfx_init_screen0] best 92965 combination zp ZP_BYTE:24 [ gfx_init_screen0::$1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::j#2 main::j#1 ]
Uplifting [main] best 92845 combination reg byte x [ main::j#2 main::j#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:14 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Uplifting [gfx_init_screen0] best 92845 combination zp ZP_BYTE:14 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:3 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Uplifting [gfx_init_plane_charset8] best 92845 combination zp ZP_BYTE:3 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Coalescing zero page register [ zp ZP_BYTE:3 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] ] with [ zp ZP_BYTE:14 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] ]
Coalescing zero page register [ zp ZP_WORD:4 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] ] with [ zp ZP_WORD:16 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] ]
Coalescing zero page register [ zp ZP_BYTE:6 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] ] with [ zp ZP_BYTE:24 [ gfx_init_screen0::$1 ] ]
Allocated (was zp ZP_BYTE:3) zp ZP_BYTE:2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Allocated (was zp ZP_WORD:4) zp ZP_WORD:3 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Allocated (was zp ZP_BYTE:6) zp ZP_BYTE:5 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 gfx_init_screen0::$1 ]
Allocated (was zp ZP_BYTE:7) zp ZP_BYTE:6 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Allocated (was zp ZP_WORD:8) zp ZP_WORD:7 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
Allocated (was zp ZP_BYTE:10) zp ZP_BYTE:9 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .const PROCPORT_RAM_CHARROM = $31
  .label CHARGEN = $d000
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_HIGHCOLOR = 4
  .const DTV_BADLINE_OFF = $20
  .const DTV_CHUNKY = $40
  .label DTV_PALETTE = $d200
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  .label SCREEN = $7c00
  .label CHARSET8 = $8000
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @8 [phi:@begin->@8]
b8_from_bbegin:
  jmp b8
//SEG4 @8
b8:
//SEG5 [2] call main 
  jsr main
//SEG6 [3] phi from @8 to @end [phi:@8->@end]
bend_from_b8:
  jmp bend
//SEG7 @end
bend:
//SEG8 main
main: {
  //SEG9 asm { sei  }
    sei
  //SEG10 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG11 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG12 [7] call gfx_init 
  //SEG13 [44] phi from main to gfx_init [phi:main->gfx_init]
  gfx_init_from_main:
    jsr gfx_init
    jmp b17
  //SEG14 main::@17
  b17:
  //SEG15 [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG16 [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_BADLINE_OFF
    sta DTV_CONTROL
  //SEG17 [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG18 [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG19 [12] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) SCREEN#0 -- _deref_pbuc1=vbuc2 
    lda #<SCREEN
    sta DTV_PLANEA_START_LO
  //SEG20 [13] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) SCREEN#0 -- _deref_pbuc1=vbuc2 
    lda #>SCREEN
    sta DTV_PLANEA_START_MI
  //SEG21 [14] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG22 [15] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG23 [16] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG24 [17] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
  //SEG25 [18] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHARSET8#0 -- _deref_pbuc1=vbuc2 
    lda #<CHARSET8
    sta DTV_PLANEB_START_LO
  //SEG26 [19] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHARSET8#0 -- _deref_pbuc1=vbuc2 
    lda #>CHARSET8
    sta DTV_PLANEB_START_MI
  //SEG27 [20] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG28 [21] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_STEP
  //SEG29 [22] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_LO
  //SEG30 [23] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
  //SEG31 [24] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG32 [25] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) SCREEN#0/(word/signed word/dword/signed dword) 16384 -- _deref_pbuc1=vbuc2 
    lda #3^SCREEN/$4000
    sta CIA2_PORT_A
  //SEG33 [26] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #(SCREEN&$3fff)>>6|(>(SCREEN&$3fff))>>2
    sta VIC_MEMORY
  //SEG34 [27] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  b1_from_b17:
  //SEG35 [27] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@17->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG36 [27] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG37 [27] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG38 main::@1
  b1:
  //SEG39 [28] *((const byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG40 [29] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG41 [30] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1_from_b1
    jmp b3
  //SEG42 main::@3
  b3:
  //SEG43 asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
    ldx #$ff
  rff:
    cpx RASTER
    bne rff
  stabilize:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    cpx RASTER
    beq eat+0
  eat:
    inx
    cpx #8
    bne stabilize
  //SEG44 [32] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG45 [33] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
    jmp b5
  //SEG46 main::@5
  b5:
  //SEG47 [34] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$42
    bne b5
    jmp b7
  //SEG48 main::@7
  b7:
  //SEG49 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    jmp b8
  //SEG50 main::@8
  b8:
  //SEG51 [36] (byte) main::rst#1 ← *((const byte*) RASTER#0) -- vbuxx=_deref_pbuc1 
    ldx RASTER
  //SEG52 [37] (byte~) main::$32 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG53 [38] (byte~) main::$33 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$32 -- vbuaa=vbuc1_bor_vbuaa 
    ora #VIC_DEN|VIC_ECM|VIC_RSEL
  //SEG54 [39] *((const byte*) VIC_CONTROL#0) ← (byte~) main::$33 -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL
  //SEG55 [40] (byte~) main::$34 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuxx_rol_4 
    txa
    asl
    asl
    asl
    asl
  //SEG56 [41] *((const byte*) BORDERCOL#0) ← (byte~) main::$34 -- _deref_pbuc1=vbuaa 
    sta BORDERCOL
  //SEG57 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
  //SEG58 [43] if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$f2
    bne b8
    jmp b3
}
//SEG59 gfx_init
gfx_init: {
  //SEG60 [45] call gfx_init_screen0 
  //SEG61 [78] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
  gfx_init_screen0_from_gfx_init:
    jsr gfx_init_screen0
  //SEG62 [46] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  b1_from_gfx_init:
    jmp b1
  //SEG63 gfx_init::@1
  b1:
  //SEG64 [47] call gfx_init_plane_charset8 
  //SEG65 [49] phi from gfx_init::@1 to gfx_init_plane_charset8 [phi:gfx_init::@1->gfx_init_plane_charset8]
  gfx_init_plane_charset8_from_b1:
    jsr gfx_init_plane_charset8
    jmp breturn
  //SEG66 gfx_init::@return
  breturn:
  //SEG67 [48] return 
    rts
}
//SEG68 gfx_init_plane_charset8
gfx_init_plane_charset8: {
    .const gfxbCpuBank = $ff&CHARSET8/$4000
    .label bits = 6
    .label chargen = 3
    .label gfxa = 7
    .label col = 9
    .label cr = 5
    .label ch = 2
  //SEG69 [50] call dtvSetCpuBankSegment1 
  //SEG70 [74] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
  //SEG71 [74] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    jmp b9
  //SEG72 gfx_init_plane_charset8::@9
  b9:
  //SEG73 [51] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG74 [52] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  b1_from_b9:
  //SEG75 [52] phi (byte) gfx_init_plane_charset8::ch#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
  //SEG76 [52] phi (byte) gfx_init_plane_charset8::col#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta col
  //SEG77 [52] phi (byte*) gfx_init_plane_charset8::gfxa#6 = ((byte*))(word/signed word/dword/signed dword) 16384+((word))(const byte*) CHARSET8#0&(word/signed word/dword/signed dword) 16383 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000+(CHARSET8&$3fff)
    sta gfxa
    lda #>$4000+(CHARSET8&$3fff)
    sta gfxa+1
  //SEG78 [52] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const byte*) CHARGEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN+1
    sta chargen
    lda #>CHARGEN+1
    sta chargen+1
    jmp b1
  //SEG79 [52] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  b1_from_b7:
  //SEG80 [52] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
  //SEG81 [52] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
  //SEG82 [52] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
  //SEG83 [52] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    jmp b1
  //SEG84 gfx_init_plane_charset8::@1
  b1:
  //SEG85 [53] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  b2_from_b1:
  //SEG86 [53] phi (byte) gfx_init_plane_charset8::cr#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta cr
  //SEG87 [53] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG88 [53] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG89 [53] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp b2
  //SEG90 [53] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  b2_from_b6:
  //SEG91 [53] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
  //SEG92 [53] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG93 [53] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG94 [53] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp b2
  //SEG95 gfx_init_plane_charset8::@2
  b2:
  //SEG96 [54] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta bits
  //SEG97 [55] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG98 [56] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  b3_from_b2:
  //SEG99 [56] phi (byte) gfx_init_plane_charset8::cp#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG100 [56] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG101 [56] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG102 [56] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp b3
  //SEG103 [56] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  b3_from_b4:
  //SEG104 [56] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
  //SEG105 [56] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG106 [56] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG107 [56] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp b3
  //SEG108 gfx_init_plane_charset8::@3
  b3:
  //SEG109 [57] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) 128 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
  //SEG110 [58] if((byte~) gfx_init_plane_charset8::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b4_from_b3
    jmp b5
  //SEG111 gfx_init_plane_charset8::@5
  b5:
  //SEG112 [59] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda col
  //SEG113 [60] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  b4_from_b5:
  //SEG114 [60] phi (byte) gfx_init_plane_charset8::c#2 = (byte~) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp b4
  //SEG115 [60] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  b4_from_b3:
  //SEG116 [60] phi (byte) gfx_init_plane_charset8::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp b4
  //SEG117 gfx_init_plane_charset8::@4
  b4:
  //SEG118 [61] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
  //SEG119 [62] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG120 [63] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG121 [64] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG122 [65] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG123 [66] if((byte) gfx_init_plane_charset8::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b3_from_b4
    jmp b6
  //SEG124 gfx_init_plane_charset8::@6
  b6:
  //SEG125 [67] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc cr
  //SEG126 [68] if((byte) gfx_init_plane_charset8::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cr
    cmp #8
    bne b2_from_b6
    jmp b7
  //SEG127 gfx_init_plane_charset8::@7
  b7:
  //SEG128 [69] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc ch
  //SEG129 [70] if((byte) gfx_init_plane_charset8::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda ch
    bne b1_from_b7
    jmp b8
  //SEG130 gfx_init_plane_charset8::@8
  b8:
  //SEG131 [71] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG132 [72] call dtvSetCpuBankSegment1 
  //SEG133 [74] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_b8:
  //SEG134 [74] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = ((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp breturn
  //SEG135 gfx_init_plane_charset8::@return
  breturn:
  //SEG136 [73] return 
    rts
}
//SEG137 dtvSetCpuBankSegment1
dtvSetCpuBankSegment1: {
    .label cpuBank = $ff
  //SEG138 [75] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 -- _deref_pbuc1=vbuaa 
    sta cpuBank
  //SEG139 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
    jmp breturn
  //SEG140 dtvSetCpuBankSegment1::@return
  breturn:
  //SEG141 [77] return 
    rts
}
//SEG142 gfx_init_screen0
gfx_init_screen0: {
    .label _1 = 5
    .label ch = 3
    .label cy = 2
  //SEG143 [79] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  b1_from_gfx_init_screen0:
  //SEG144 [79] phi (byte*) gfx_init_screen0::ch#3 = (const byte*) SCREEN#0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG145 [79] phi (byte) gfx_init_screen0::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
    jmp b1
  //SEG146 [79] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  b1_from_b3:
  //SEG147 [79] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
  //SEG148 [79] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    jmp b1
  //SEG149 gfx_init_screen0::@1
  b1:
  //SEG150 [80] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  b2_from_b1:
  //SEG151 [80] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
  //SEG152 [80] phi (byte) gfx_init_screen0::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp b2
  //SEG153 [80] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  b2_from_b2:
  //SEG154 [80] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
  //SEG155 [80] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    jmp b2
  //SEG156 gfx_init_screen0::@2
  b2:
  //SEG157 [81] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG158 [82] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _1
  //SEG159 [83] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 15 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG160 [84] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora _1
  //SEG161 [85] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG162 [86] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG163 [87] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG164 [88] if((byte) gfx_init_screen0::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2_from_b2
    jmp b3
  //SEG165 gfx_init_screen0::@3
  b3:
  //SEG166 [89] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG167 [90] if((byte) gfx_init_screen0::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b1_from_b3
    jmp breturn
  //SEG168 gfx_init_screen0::@return
  breturn:
  //SEG169 [91] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b8
Removing instruction jmp bend
Removing instruction jmp b17
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp b9
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b5
Removing instruction jmp b4
Removing instruction jmp b6
Removing instruction jmp b7
Removing instruction jmp b8
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Replacing label b3_from_b4 with b3
Replacing label b2_from_b6 with b2
Replacing label b1_from_b7 with b1
Replacing label b2_from_b2 with b2
Replacing label b1_from_b3 with b1
Removing instruction bbegin:
Removing instruction b8_from_bbegin:
Removing instruction bend_from_b8:
Removing instruction b1_from_b1:
Removing instruction b1_from_gfx_init:
Removing instruction gfx_init_plane_charset8_from_b1:
Removing instruction b1_from_b7:
Removing instruction b2_from_b1:
Removing instruction b2_from_b6:
Removing instruction b3_from_b4:
Removing instruction b1_from_b3:
Removing instruction b2_from_b1:
Removing instruction b2_from_b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b8:
Removing instruction bend:
Removing instruction gfx_init_from_main:
Removing instruction b17:
Removing instruction b1_from_b17:
Removing instruction b7:
Removing instruction gfx_init_screen0_from_gfx_init:
Removing instruction b1:
Removing instruction breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
Removing instruction b9:
Removing instruction b1_from_b9:
Removing instruction b3_from_b2:
Removing instruction b5:
Removing instruction b4_from_b5:
Removing instruction b6:
Removing instruction b7:
Removing instruction b8:
Removing instruction dtvSetCpuBankSegment1_from_b8:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction b1_from_gfx_init_screen0:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Relabelling long label b4_from_b3 to b5
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp b1
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @8
(label) @begin
(label) @end
(byte*) BORDERCOL
(const byte*) BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) 53280
(byte*) CHARGEN
(const byte*) CHARGEN#0 CHARGEN = ((byte*))(word/dword/signed dword) 53248
(byte*) CHARSET8
(const byte*) CHARSET8#0 CHARSET8 = ((byte*))(word/dword/signed dword) 32768
(byte*) CIA2_PORT_A
(const byte*) CIA2_PORT_A#0 CIA2_PORT_A = ((byte*))(word/dword/signed dword) 56576
(byte*) CIA2_PORT_A_DDR
(const byte*) CIA2_PORT_A_DDR#0 CIA2_PORT_A_DDR = ((byte*))(word/dword/signed dword) 56578
(byte) DTV_BADLINE_OFF
(const byte) DTV_BADLINE_OFF#0 DTV_BADLINE_OFF = (byte/signed byte/word/signed word/dword/signed dword) 32
(byte) DTV_CHUNKY
(const byte) DTV_CHUNKY#0 DTV_CHUNKY = (byte/signed byte/word/signed word/dword/signed dword) 64
(byte*) DTV_CONTROL
(const byte*) DTV_CONTROL#0 DTV_CONTROL = ((byte*))(word/dword/signed dword) 53308
(byte*) DTV_FEATURE
(const byte*) DTV_FEATURE#0 DTV_FEATURE = ((byte*))(word/dword/signed dword) 53311
(byte) DTV_FEATURE_ENABLE
(const byte) DTV_FEATURE_ENABLE#0 DTV_FEATURE_ENABLE = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte) DTV_HIGHCOLOR
(const byte) DTV_HIGHCOLOR#0 DTV_HIGHCOLOR = (byte/signed byte/word/signed word/dword/signed dword) 4
(byte) DTV_LINEAR
(const byte) DTV_LINEAR#0 DTV_LINEAR = (byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) DTV_PALETTE
(const byte*) DTV_PALETTE#0 DTV_PALETTE = ((byte*))(word/dword/signed dword) 53760
(byte*) DTV_PLANEA_MODULO_HI
(const byte*) DTV_PLANEA_MODULO_HI#0 DTV_PLANEA_MODULO_HI = ((byte*))(word/dword/signed dword) 53305
(byte*) DTV_PLANEA_MODULO_LO
(const byte*) DTV_PLANEA_MODULO_LO#0 DTV_PLANEA_MODULO_LO = ((byte*))(word/dword/signed dword) 53304
(byte*) DTV_PLANEA_START_HI
(const byte*) DTV_PLANEA_START_HI#0 DTV_PLANEA_START_HI = ((byte*))(word/dword/signed dword) 53317
(byte*) DTV_PLANEA_START_LO
(const byte*) DTV_PLANEA_START_LO#0 DTV_PLANEA_START_LO = ((byte*))(word/dword/signed dword) 53306
(byte*) DTV_PLANEA_START_MI
(const byte*) DTV_PLANEA_START_MI#0 DTV_PLANEA_START_MI = ((byte*))(word/dword/signed dword) 53307
(byte*) DTV_PLANEA_STEP
(const byte*) DTV_PLANEA_STEP#0 DTV_PLANEA_STEP = ((byte*))(word/dword/signed dword) 53318
(byte*) DTV_PLANEB_MODULO_HI
(const byte*) DTV_PLANEB_MODULO_HI#0 DTV_PLANEB_MODULO_HI = ((byte*))(word/dword/signed dword) 53320
(byte*) DTV_PLANEB_MODULO_LO
(const byte*) DTV_PLANEB_MODULO_LO#0 DTV_PLANEB_MODULO_LO = ((byte*))(word/dword/signed dword) 53319
(byte*) DTV_PLANEB_START_HI
(const byte*) DTV_PLANEB_START_HI#0 DTV_PLANEB_START_HI = ((byte*))(word/dword/signed dword) 53323
(byte*) DTV_PLANEB_START_LO
(const byte*) DTV_PLANEB_START_LO#0 DTV_PLANEB_START_LO = ((byte*))(word/dword/signed dword) 53321
(byte*) DTV_PLANEB_START_MI
(const byte*) DTV_PLANEB_START_MI#0 DTV_PLANEB_START_MI = ((byte*))(word/dword/signed dword) 53322
(byte*) DTV_PLANEB_STEP
(const byte*) DTV_PLANEB_STEP#0 DTV_PLANEB_STEP = ((byte*))(word/dword/signed dword) 53324
(byte*) PROCPORT
(const byte*) PROCPORT#0 PROCPORT = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 1
(byte*) PROCPORT_DDR
(const byte*) PROCPORT_DDR#0 PROCPORT_DDR = ((byte*))(byte/signed byte/word/signed word/dword/signed dword) 0
(byte) PROCPORT_DDR_MEMORY_MASK
(const byte) PROCPORT_DDR_MEMORY_MASK#0 PROCPORT_DDR_MEMORY_MASK = (byte/signed byte/word/signed word/dword/signed dword) 7
(byte) PROCPORT_RAM_CHARROM
(const byte) PROCPORT_RAM_CHARROM#0 PROCPORT_RAM_CHARROM = (byte/signed byte/word/signed word/dword/signed dword) 49
(byte) PROCPORT_RAM_IO
(const byte) PROCPORT_RAM_IO#0 PROCPORT_RAM_IO = (byte/signed byte/word/signed word/dword/signed dword) 53
(byte*) RASTER
(const byte*) RASTER#0 RASTER = ((byte*))(word/dword/signed dword) 53266
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = ((byte*))(word/signed word/dword/signed dword) 31744
(byte*) VIC_CONTROL
(const byte*) VIC_CONTROL#0 VIC_CONTROL = ((byte*))(word/dword/signed dword) 53265
(byte*) VIC_CONTROL2
(const byte*) VIC_CONTROL2#0 VIC_CONTROL2 = ((byte*))(word/dword/signed dword) 53270
(byte) VIC_CSEL
(const byte) VIC_CSEL#0 VIC_CSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(byte) VIC_DEN
(const byte) VIC_DEN#0 VIC_DEN = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte) VIC_ECM
(const byte) VIC_ECM#0 VIC_ECM = (byte/signed byte/word/signed word/dword/signed dword) 64
(byte) VIC_MCM
(const byte) VIC_MCM#0 VIC_MCM = (byte/signed byte/word/signed word/dword/signed dword) 16
(byte*) VIC_MEMORY
(const byte*) VIC_MEMORY#0 VIC_MEMORY = ((byte*))(word/dword/signed dword) 53272
(byte) VIC_RSEL
(const byte) VIC_RSEL#0 VIC_RSEL = (byte/signed byte/word/signed word/dword/signed dword) 8
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(const byte*) dtvSetCpuBankSegment1::cpuBank#0 cpuBank = ((byte*))(byte/word/signed word/dword/signed dword) 255
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#2 reg byte a 2.0
(void()) gfx_init()
(label) gfx_init::@1
(label) gfx_init::@return
(void()) gfx_init_plane_charset8()
(byte~) gfx_init_plane_charset8::$7 reg byte a 2002.0
(label) gfx_init_plane_charset8::@1
(label) gfx_init_plane_charset8::@2
(label) gfx_init_plane_charset8::@3
(label) gfx_init_plane_charset8::@4
(label) gfx_init_plane_charset8::@5
(label) gfx_init_plane_charset8::@6
(label) gfx_init_plane_charset8::@7
(label) gfx_init_plane_charset8::@8
(label) gfx_init_plane_charset8::@9
(label) gfx_init_plane_charset8::@return
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0 bits zp ZP_BYTE:6 101.0
(byte) gfx_init_plane_charset8::bits#1 bits zp ZP_BYTE:6 500.5
(byte) gfx_init_plane_charset8::bits#2 bits zp ZP_BYTE:6 443.42857142857144
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#2 reg byte a 2002.0
(byte~) gfx_init_plane_charset8::c#3 reg byte a 2002.0
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#1 ch zp ZP_BYTE:2 16.5
(byte) gfx_init_plane_charset8::ch#8 ch zp ZP_BYTE:2 1.2941176470588236
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#1 chargen zp ZP_WORD:3 13.3125
(byte*) gfx_init_plane_charset8::chargen#2 chargen zp ZP_WORD:3 157.0
(byte*) gfx_init_plane_charset8::chargen#3 chargen zp ZP_WORD:3 22.0
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#1 col zp ZP_BYTE:9 302.0
(byte) gfx_init_plane_charset8::col#2 col zp ZP_BYTE:9 388.0
(byte) gfx_init_plane_charset8::col#5 col zp ZP_BYTE:9 71.0
(byte) gfx_init_plane_charset8::col#6 col zp ZP_BYTE:9 22.0
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#1 reg byte x 1501.5
(byte) gfx_init_plane_charset8::cp#2 reg byte x 222.44444444444446
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#1 cr zp ZP_BYTE:5 151.5
(byte) gfx_init_plane_charset8::cr#6 cr zp ZP_BYTE:5 14.428571428571429
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#1 gfxa zp ZP_WORD:7 234.8888888888889
(byte*) gfx_init_plane_charset8::gfxa#2 gfxa zp ZP_WORD:7 517.3333333333334
(byte*) gfx_init_plane_charset8::gfxa#5 gfxa zp ZP_WORD:7 71.0
(byte*) gfx_init_plane_charset8::gfxa#6 gfxa zp ZP_WORD:7 22.0
(byte) gfx_init_plane_charset8::gfxbCpuBank
(const byte) gfx_init_plane_charset8::gfxbCpuBank#0 gfxbCpuBank = ((byte))(const byte*) CHARSET8#0/(word/signed word/dword/signed dword) 16384
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0 reg byte a 202.0
(byte~) gfx_init_screen0::$1 $1 zp ZP_BYTE:5 101.0
(byte~) gfx_init_screen0::$2 reg byte a 202.0
(byte~) gfx_init_screen0::$3 reg byte a 202.0
(label) gfx_init_screen0::@1
(label) gfx_init_screen0::@2
(label) gfx_init_screen0::@3
(label) gfx_init_screen0::@return
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#1 ch zp ZP_WORD:3 42.599999999999994
(byte*) gfx_init_screen0::ch#2 ch zp ZP_WORD:3 52.33333333333333
(byte*) gfx_init_screen0::ch#3 ch zp ZP_WORD:3 22.0
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#1 reg byte x 151.5
(byte) gfx_init_screen0::cx#2 reg byte x 43.285714285714285
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#1 cy zp ZP_BYTE:2 16.5
(byte) gfx_init_screen0::cy#4 cy zp ZP_BYTE:2 12.299999999999999
(void()) main()
(byte~) main::$32 reg byte a 202.0
(byte~) main::$33 reg byte a 202.0
(byte~) main::$34 reg byte a 202.0
(label) main::@1
(label) main::@17
(label) main::@3
(label) main::@5
(label) main::@7
(label) main::@8
(byte) main::j
(byte) main::j#1 reg byte x 16.5
(byte) main::j#2 reg byte x 22.0
(byte) main::rst
(byte) main::rst#1 reg byte x 57.714285714285715

reg byte x [ main::j#2 main::j#1 ]
zp ZP_BYTE:2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
zp ZP_WORD:3 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
zp ZP_BYTE:5 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 gfx_init_screen0::$1 ]
zp ZP_BYTE:6 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
zp ZP_WORD:7 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
zp ZP_BYTE:9 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#2 ]
reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
reg byte x [ main::rst#1 ]
reg byte a [ main::$32 ]
reg byte a [ main::$33 ]
reg byte a [ main::$34 ]
reg byte a [ gfx_init_plane_charset8::$7 ]
reg byte a [ gfx_init_screen0::$0 ]
reg byte a [ gfx_init_screen0::$2 ]
reg byte a [ gfx_init_screen0::$3 ]


FINAL ASSEMBLER
Score: 75363

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .label PROCPORT_DDR = 0
  .const PROCPORT_DDR_MEMORY_MASK = 7
  .label PROCPORT = 1
  .const PROCPORT_RAM_IO = $35
  .const PROCPORT_RAM_CHARROM = $31
  .label CHARGEN = $d000
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  .label CIA2_PORT_A = $dd00
  .label CIA2_PORT_A_DDR = $dd02
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_HIGHCOLOR = 4
  .const DTV_BADLINE_OFF = $20
  .const DTV_CHUNKY = $40
  .label DTV_PALETTE = $d200
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  .label SCREEN = $7c00
  .label CHARSET8 = $8000
//SEG2 @begin
//SEG3 [1] phi from @begin to @8 [phi:@begin->@8]
//SEG4 @8
//SEG5 [2] call main 
  jsr main
//SEG6 [3] phi from @8 to @end [phi:@8->@end]
//SEG7 @end
//SEG8 main
main: {
  //SEG9 asm { sei  }
    sei
  //SEG10 [5] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
  //SEG11 [6] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG12 [7] call gfx_init 
  //SEG13 [44] phi from main to gfx_init [phi:main->gfx_init]
    jsr gfx_init
  //SEG14 main::@17
  //SEG15 [8] *((const byte*) DTV_FEATURE#0) ← (const byte) DTV_FEATURE_ENABLE#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
  //SEG16 [9] *((const byte*) DTV_CONTROL#0) ← (const byte) DTV_HIGHCOLOR#0|(const byte) DTV_LINEAR#0|(const byte) DTV_CHUNKY#0|(const byte) DTV_BADLINE_OFF#0 -- _deref_pbuc1=vbuc2 
    lda #DTV_HIGHCOLOR|DTV_LINEAR|DTV_CHUNKY|DTV_BADLINE_OFF
    sta DTV_CONTROL
  //SEG17 [10] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG18 [11] *((const byte*) VIC_CONTROL2#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0 -- _deref_pbuc1=vbuc2 
    lda #VIC_MCM|VIC_CSEL
    sta VIC_CONTROL2
  //SEG19 [12] *((const byte*) DTV_PLANEA_START_LO#0) ← <(const byte*) SCREEN#0 -- _deref_pbuc1=vbuc2 
    lda #<SCREEN
    sta DTV_PLANEA_START_LO
  //SEG20 [13] *((const byte*) DTV_PLANEA_START_MI#0) ← >(const byte*) SCREEN#0 -- _deref_pbuc1=vbuc2 
    lda #>SCREEN
    sta DTV_PLANEA_START_MI
  //SEG21 [14] *((const byte*) DTV_PLANEA_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
  //SEG22 [15] *((const byte*) DTV_PLANEA_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 1 -- _deref_pbuc1=vbuc2 
    lda #1
    sta DTV_PLANEA_STEP
  //SEG23 [16] *((const byte*) DTV_PLANEA_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_LO
  //SEG24 [17] *((const byte*) DTV_PLANEA_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEA_MODULO_HI
  //SEG25 [18] *((const byte*) DTV_PLANEB_START_LO#0) ← <(const byte*) CHARSET8#0 -- _deref_pbuc1=vbuc2 
    lda #<CHARSET8
    sta DTV_PLANEB_START_LO
  //SEG26 [19] *((const byte*) DTV_PLANEB_START_MI#0) ← >(const byte*) CHARSET8#0 -- _deref_pbuc1=vbuc2 
    lda #>CHARSET8
    sta DTV_PLANEB_START_MI
  //SEG27 [20] *((const byte*) DTV_PLANEB_START_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_START_HI
  //SEG28 [21] *((const byte*) DTV_PLANEB_STEP#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_STEP
  //SEG29 [22] *((const byte*) DTV_PLANEB_MODULO_LO#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_LO
  //SEG30 [23] *((const byte*) DTV_PLANEB_MODULO_HI#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    sta DTV_PLANEB_MODULO_HI
  //SEG31 [24] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta CIA2_PORT_A_DDR
  //SEG32 [25] *((const byte*) CIA2_PORT_A#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3^((byte))((word))(const byte*) SCREEN#0/(word/signed word/dword/signed dword) 16384 -- _deref_pbuc1=vbuc2 
    lda #3^SCREEN/$4000
    sta CIA2_PORT_A
  //SEG33 [26] *((const byte*) VIC_MEMORY#0) ← ((byte))((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 6|>((word))(const byte*) SCREEN#0&(word/signed word/dword/signed dword) 16383>>(byte/signed byte/word/signed word/dword/signed dword) 2 -- _deref_pbuc1=vbuc2 
    lda #(SCREEN&$3fff)>>6|(>(SCREEN&$3fff))>>2
    sta VIC_MEMORY
  //SEG34 [27] phi from main::@17 to main::@1 [phi:main::@17->main::@1]
  //SEG35 [27] phi (byte) main::j#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main::@17->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG36 [27] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG37 [27] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG38 main::@1
  b1:
  //SEG39 [28] *((const byte*) DTV_PALETTE#0 + (byte) main::j#2) ← (byte) main::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
  //SEG40 [29] (byte) main::j#1 ← ++ (byte) main::j#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG41 [30] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) 16) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne b1
  //SEG42 main::@3
  b3:
  //SEG43 asm { ldx#$ff rff: cpxRASTER bnerff stabilize: nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop cpxRASTER beqeat+0 eat: inx cpx#$08 bnestabilize  }
    ldx #$ff
  rff:
    cpx RASTER
    bne rff
  stabilize:
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    cpx RASTER
    beq eat+0
  eat:
    inx
    cpx #8
    bne stabilize
  //SEG44 [32] *((const byte*) VIC_CONTROL#0) ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3 -- _deref_pbuc1=vbuc2 
    lda #VIC_DEN|VIC_ECM|VIC_RSEL|3
    sta VIC_CONTROL
  //SEG45 [33] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
  //SEG46 main::@5
  b5:
  //SEG47 [34] if(*((const byte*) RASTER#0)!=(byte/signed byte/word/signed word/dword/signed dword) 66) goto main::@5 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda RASTER
    cmp #$42
    bne b5
  //SEG48 main::@7
  //SEG49 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
  //SEG50 main::@8
  b8:
  //SEG51 [36] (byte) main::rst#1 ← *((const byte*) RASTER#0) -- vbuxx=_deref_pbuc1 
    ldx RASTER
  //SEG52 [37] (byte~) main::$32 ← (byte) main::rst#1 & (byte/signed byte/word/signed word/dword/signed dword) 7 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #7
  //SEG53 [38] (byte~) main::$33 ← (const byte) VIC_DEN#0|(const byte) VIC_ECM#0|(const byte) VIC_RSEL#0 | (byte~) main::$32 -- vbuaa=vbuc1_bor_vbuaa 
    ora #VIC_DEN|VIC_ECM|VIC_RSEL
  //SEG54 [39] *((const byte*) VIC_CONTROL#0) ← (byte~) main::$33 -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL
  //SEG55 [40] (byte~) main::$34 ← (byte) main::rst#1 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuaa=vbuxx_rol_4 
    txa
    asl
    asl
    asl
    asl
  //SEG56 [41] *((const byte*) BORDERCOL#0) ← (byte~) main::$34 -- _deref_pbuc1=vbuaa 
    sta BORDERCOL
  //SEG57 asm { nop nop nop nop nop nop nop nop nop nop nop nop nop nop nop  }
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
    nop
  //SEG58 [43] if((byte) main::rst#1!=(byte/word/signed word/dword/signed dword) 242) goto main::@8 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$f2
    bne b8
    jmp b3
}
//SEG59 gfx_init
gfx_init: {
  //SEG60 [45] call gfx_init_screen0 
  //SEG61 [78] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
    jsr gfx_init_screen0
  //SEG62 [46] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  //SEG63 gfx_init::@1
  //SEG64 [47] call gfx_init_plane_charset8 
  //SEG65 [49] phi from gfx_init::@1 to gfx_init_plane_charset8 [phi:gfx_init::@1->gfx_init_plane_charset8]
    jsr gfx_init_plane_charset8
  //SEG66 gfx_init::@return
  //SEG67 [48] return 
    rts
}
//SEG68 gfx_init_plane_charset8
gfx_init_plane_charset8: {
    .const gfxbCpuBank = $ff&CHARSET8/$4000
    .label bits = 6
    .label chargen = 3
    .label gfxa = 7
    .label col = 9
    .label cr = 5
    .label ch = 2
  //SEG69 [50] call dtvSetCpuBankSegment1 
  //SEG70 [74] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  //SEG71 [74] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
  //SEG72 gfx_init_plane_charset8::@9
  //SEG73 [51] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_CHARROM#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
  //SEG74 [52] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  //SEG75 [52] phi (byte) gfx_init_plane_charset8::ch#8 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta ch
  //SEG76 [52] phi (byte) gfx_init_plane_charset8::col#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    sta col
  //SEG77 [52] phi (byte*) gfx_init_plane_charset8::gfxa#6 = ((byte*))(word/signed word/dword/signed dword) 16384+((word))(const byte*) CHARSET8#0&(word/signed word/dword/signed dword) 16383 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000+(CHARSET8&$3fff)
    sta gfxa
    lda #>$4000+(CHARSET8&$3fff)
    sta gfxa+1
  //SEG78 [52] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const byte*) CHARGEN#0+(byte/signed byte/word/signed word/dword/signed dword) 1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN+1
    sta chargen
    lda #>CHARGEN+1
    sta chargen+1
  //SEG79 [52] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  //SEG80 [52] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
  //SEG81 [52] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
  //SEG82 [52] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
  //SEG83 [52] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
  //SEG84 gfx_init_plane_charset8::@1
  b1:
  //SEG85 [53] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  //SEG86 [53] phi (byte) gfx_init_plane_charset8::cr#6 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta cr
  //SEG87 [53] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG88 [53] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG89 [53] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
  //SEG90 [53] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  //SEG91 [53] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
  //SEG92 [53] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
  //SEG93 [53] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
  //SEG94 [53] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
  //SEG95 gfx_init_plane_charset8::@2
  b2:
  //SEG96 [54] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta bits
  //SEG97 [55] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc chargen
    bne !+
    inc chargen+1
  !:
  //SEG98 [56] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  //SEG99 [56] phi (byte) gfx_init_plane_charset8::cp#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG100 [56] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG101 [56] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG102 [56] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
  //SEG103 [56] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  //SEG104 [56] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
  //SEG105 [56] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
  //SEG106 [56] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
  //SEG107 [56] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
  //SEG108 gfx_init_plane_charset8::@3
  b3:
  //SEG109 [57] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte/word/signed word/dword/signed dword) 128 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and bits
  //SEG110 [58] if((byte~) gfx_init_plane_charset8::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b5
  //SEG111 gfx_init_plane_charset8::@5
  //SEG112 [59] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda col
  //SEG113 [60] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  //SEG114 [60] phi (byte) gfx_init_plane_charset8::c#2 = (byte~) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp b4
  //SEG115 [60] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  b5:
  //SEG116 [60] phi (byte) gfx_init_plane_charset8::c#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
  //SEG117 gfx_init_plane_charset8::@4
  b4:
  //SEG118 [61] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
  //SEG119 [62] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc gfxa
    bne !+
    inc gfxa+1
  !:
  //SEG120 [63] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz1_rol_1 
    asl bits
  //SEG121 [64] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc col
  //SEG122 [65] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG123 [66] if((byte) gfx_init_plane_charset8::cp#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne b3
  //SEG124 gfx_init_plane_charset8::@6
  //SEG125 [67] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc cr
  //SEG126 [68] if((byte) gfx_init_plane_charset8::cr#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda cr
    cmp #8
    bne b2
  //SEG127 gfx_init_plane_charset8::@7
  //SEG128 [69] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc ch
  //SEG129 [70] if((byte) gfx_init_plane_charset8::ch#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda ch
    bne b1
  //SEG130 gfx_init_plane_charset8::@8
  //SEG131 [71] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0 -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
  //SEG132 [72] call dtvSetCpuBankSegment1 
  //SEG133 [74] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  //SEG134 [74] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = ((byte))(word/signed word/dword/signed dword) 16384/(word/signed word/dword/signed dword) 16384 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
  //SEG135 gfx_init_plane_charset8::@return
  //SEG136 [73] return 
    rts
}
//SEG137 dtvSetCpuBankSegment1
dtvSetCpuBankSegment1: {
    .label cpuBank = $ff
  //SEG138 [75] *((const byte*) dtvSetCpuBankSegment1::cpuBank#0) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 -- _deref_pbuc1=vbuaa 
    sta cpuBank
  //SEG139 asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda $ff
    .byte $32, $00
  //SEG140 dtvSetCpuBankSegment1::@return
  //SEG141 [77] return 
    rts
}
//SEG142 gfx_init_screen0
gfx_init_screen0: {
    .label _1 = 5
    .label ch = 3
    .label cy = 2
  //SEG143 [79] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  //SEG144 [79] phi (byte*) gfx_init_screen0::ch#3 = (const byte*) SCREEN#0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<SCREEN
    sta ch
    lda #>SCREEN
    sta ch+1
  //SEG145 [79] phi (byte) gfx_init_screen0::cy#4 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta cy
  //SEG146 [79] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  //SEG147 [79] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
  //SEG148 [79] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
  //SEG149 gfx_init_screen0::@1
  b1:
  //SEG150 [80] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  //SEG151 [80] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
  //SEG152 [80] phi (byte) gfx_init_screen0::cx#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
  //SEG153 [80] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  //SEG154 [80] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
  //SEG155 [80] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
  //SEG156 gfx_init_screen0::@2
  b2:
  //SEG157 [81] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte/signed byte/word/signed word/dword/signed dword) 15 -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and cy
  //SEG158 [82] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte/signed byte/word/signed word/dword/signed dword) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta _1
  //SEG159 [83] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte/signed byte/word/signed word/dword/signed dword) 15 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
  //SEG160 [84] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora _1
  //SEG161 [85] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
  //SEG162 [86] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc ch
    bne !+
    inc ch+1
  !:
  //SEG163 [87] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG164 [88] if((byte) gfx_init_screen0::cx#1!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne b2
  //SEG165 gfx_init_screen0::@3
  //SEG166 [89] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc cy
  //SEG167 [90] if((byte) gfx_init_screen0::cy#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda cy
    cmp #$19
    bne b1
  //SEG168 gfx_init_screen0::@return
  //SEG169 [91] return 
    rts
}

