
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] phi()
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main
  [10] phi()
  [11] call printf_uchar 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [12] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [13] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [14] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [14] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [14] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [15] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [16] conio_cursor_x = 0
  [17] conio_cursor_y = 0
  [18] conio_line_text = DEFAULT_SCREEN
  [19] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [20] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [21] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [22] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [23] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [24] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [25] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [26] clrscr::line_text#5[clrscr::c#2] = ' '
  [27] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [28] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void printf_uchar(byte printf_uchar::uvalue , byte printf_uchar::format_min_length , byte printf_uchar::format_justify_left , byte printf_uchar::format_sign_always , byte printf_uchar::format_zero_padding , byte printf_uchar::format_upper_case , byte printf_uchar::format_radix)
printf_uchar: scope:[printf_uchar]  from main::@1
  [29] phi()
  to:printf_uchar::@1
printf_uchar::@1: scope:[printf_uchar]  from printf_uchar
  [30] *((byte*)&printf_buffer) = 0
  [31] call uctoa 
  to:printf_uchar::@2
printf_uchar::@2: scope:[printf_uchar]  from printf_uchar::@1
  [32] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [33] call printf_number_buffer 
  to:printf_uchar::@return
printf_uchar::@return: scope:[printf_uchar]  from printf_uchar::@2
  [34] return 
  to:@return

void uctoa(byte uctoa::value , byte* uctoa::buffer , byte uctoa::radix)
uctoa: scope:[uctoa]  from printf_uchar::@1
  [35] phi()
  to:uctoa::@1
uctoa::@1: scope:[uctoa]  from uctoa uctoa::@4
  [36] uctoa::buffer#11 = phi( uctoa::@4/uctoa::buffer#14, uctoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [36] uctoa::started#2 = phi( uctoa::@4/uctoa::started#4, uctoa/0 )
  [36] uctoa::value#2 = phi( uctoa::@4/uctoa::value#6, uctoa/main::c )
  [36] uctoa::digit#2 = phi( uctoa::@4/uctoa::digit#1, uctoa/0 )
  [37] if(uctoa::digit#2<uctoa::max_digits#1-1) goto uctoa::@2
  to:uctoa::@3
uctoa::@3: scope:[uctoa]  from uctoa::@1
  [38] *uctoa::buffer#11 = DIGITS[uctoa::value#2]
  [39] uctoa::buffer#3 = ++ uctoa::buffer#11
  [40] *uctoa::buffer#3 = 0
  to:uctoa::@return
uctoa::@return: scope:[uctoa]  from uctoa::@3
  [41] return 
  to:@return
uctoa::@2: scope:[uctoa]  from uctoa::@1
  [42] uctoa::digit_value#0 = RADIX_DECIMAL_VALUES_CHAR[uctoa::digit#2]
  [43] if(0!=uctoa::started#2) goto uctoa::@5
  to:uctoa::@7
uctoa::@7: scope:[uctoa]  from uctoa::@2
  [44] if(uctoa::value#2>=uctoa::digit_value#0) goto uctoa::@5
  to:uctoa::@4
uctoa::@4: scope:[uctoa]  from uctoa::@6 uctoa::@7
  [45] uctoa::buffer#14 = phi( uctoa::@7/uctoa::buffer#11, uctoa::@6/uctoa::buffer#4 )
  [45] uctoa::started#4 = phi( uctoa::@7/uctoa::started#2, uctoa::@6/1 )
  [45] uctoa::value#6 = phi( uctoa::@7/uctoa::value#2, uctoa::@6/uctoa::value#0 )
  [46] uctoa::digit#1 = ++ uctoa::digit#2
  to:uctoa::@1
uctoa::@5: scope:[uctoa]  from uctoa::@2 uctoa::@7
  [47] uctoa_append::buffer#0 = uctoa::buffer#11
  [48] uctoa_append::value#0 = uctoa::value#2
  [49] uctoa_append::sub#0 = uctoa::digit_value#0
  [50] call uctoa_append 
  [51] uctoa_append::return#0 = uctoa_append::value#2
  to:uctoa::@6
uctoa::@6: scope:[uctoa]  from uctoa::@5
  [52] uctoa::value#0 = uctoa_append::return#0
  [53] uctoa::buffer#4 = ++ uctoa::buffer#11
  to:uctoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uchar::@2
  [54] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [55] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [56] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [57] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [58] phi()
  [59] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [60] return 
  to:@return

byte uctoa_append(byte* uctoa_append::buffer , byte uctoa_append::value , byte uctoa_append::sub)
uctoa_append: scope:[uctoa_append]  from uctoa::@5
  [61] phi()
  to:uctoa_append::@1
uctoa_append::@1: scope:[uctoa_append]  from uctoa_append uctoa_append::@2
  [62] uctoa_append::digit#2 = phi( uctoa_append/0, uctoa_append::@2/uctoa_append::digit#1 )
  [62] uctoa_append::value#2 = phi( uctoa_append/uctoa_append::value#0, uctoa_append::@2/uctoa_append::value#1 )
  [63] if(uctoa_append::value#2>=uctoa_append::sub#0) goto uctoa_append::@2
  to:uctoa_append::@3
uctoa_append::@3: scope:[uctoa_append]  from uctoa_append::@1
  [64] *uctoa_append::buffer#0 = DIGITS[uctoa_append::digit#2]
  to:uctoa_append::@return
uctoa_append::@return: scope:[uctoa_append]  from uctoa_append::@3
  [65] return 
  to:@return
uctoa_append::@2: scope:[uctoa_append]  from uctoa_append::@1
  [66] uctoa_append::digit#1 = ++ uctoa_append::digit#2
  [67] uctoa_append::value#1 = uctoa_append::value#2 - uctoa_append::sub#0
  to:uctoa_append::@1

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [68] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@3/cputc::c#2 )
  [69] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [70] conio_line_text[conio_cursor_x] = cputc::c#3
  [71] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [72] conio_cursor_x = ++ conio_cursor_x
  [73] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [74] phi()
  [75] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [76] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [77] phi()
  [78] call cputln 
  to:cputc::@return

void cputs(to_nomodify byte* cputs::s)
cputs: scope:[cputs]  from printf_number_buffer::@2
  [79] phi()
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [80] cputs::s#2 = phi( cputs/printf_number_buffer::buffer_digits#0, cputs::@2/cputs::s#0 )
  [81] cputs::c#1 = *cputs::s#2
  [82] cputs::s#0 = ++ cputs::s#2
  [83] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [84] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [85] cputc::c#0 = cputs::c#1
  [86] call cputc 
  to:cputs::@1

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [87] conio_line_text = conio_line_text + $28
  [88] conio_line_color = conio_line_color + $28
  [89] conio_cursor_x = 0
  [90] conio_cursor_y = ++ conio_cursor_y
  [91] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [92] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [93] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [94] phi()
  [95] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [96] phi()
  [97] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [98] phi()
  [99] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [100] phi()
  [101] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [102] conio_line_text = conio_line_text - $28
  [103] conio_line_color = conio_line_color - $28
  [104] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [105] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [106] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [106] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [107] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [108] memcpy::src#4 = (byte*)memcpy::source#2
  [109] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [110] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [110] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [111] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [112] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [113] *memcpy::dst#2 = *memcpy::src#2
  [114] memcpy::dst#1 = ++ memcpy::dst#2
  [115] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [116] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [116] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [117] memset::end#0 = (byte*)memset::str#3 + $28
  [118] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [119] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [120] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [121] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [122] *memset::dst#2 = memset::c#4
  [123] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
