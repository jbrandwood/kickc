
CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from _start
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$0 ← (byte) main::i#2 * (const nomodify byte) SIZEOF_POINT
  (byte*~) main::$1 ← (byte*)(const struct Point*) points+(const nomodify byte) OFFS_X + (byte~) main::$0
  *((byte*~) main::$1) ← (byte) main::i#2
  (byte~) main::$2 ← (byte) main::i#2 * (const nomodify byte) SIZEOF_POINT
  (byte*~) main::$3 ← (byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$2
  (number~) main::$4 ← (byte) main::i#2 + (number) 4
  *((byte*~) main::$3) ← (number~) main::$4
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,3)
  (bool~) main::$5 ← (byte) main::i#1 != rangelast(0,3)
  if((bool~) main::$5) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte) main::i1#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@3
  (byte) main::i1#2 ← phi( main::@2/(byte) main::i1#0 main::@3/(byte) main::i1#1 )
  (byte~) main::$6 ← (byte) main::i1#2 * (const nomodify byte) SIZEOF_POINT
  (byte*~) main::$7 ← (byte*)(const struct Point*) points+(const nomodify byte) OFFS_X + (byte~) main::$6
  *((const nomodify byte*) main::SCREEN + (byte) main::i1#2) ← *((byte*~) main::$7)
  (byte~) main::$8 ← (byte) main::i1#2 * (const nomodify byte) SIZEOF_POINT
  (byte*~) main::$9 ← (byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$8
  *((const nomodify byte*) main::SCREEN+(number) $28 + (byte) main::i1#2) ← *((byte*~) main::$9)
  (byte) main::i1#1 ← (byte) main::i1#2 + rangenext(0,3)
  (bool~) main::$10 ← (byte) main::i1#1 != rangelast(0,3)
  if((bool~) main::$10) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

(void()) _start()
_start: scope:[_start]  from
  call main 
  to:_start::@1
_start::@1: scope:[_start]  from _start
  to:_start::@return
_start::@return: scope:[_start]  from _start::@1
  return 
  to:@return

SYMBOL TABLE SSA
(const nomodify byte) OFFS_X = (byte) 0
(const nomodify byte) OFFS_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(const nomodify byte) SIZEOF_POINT = (byte) 2
(void()) _start()
(label) _start::@1
(label) _start::@return
(void()) main()
(byte~) main::$0
(byte*~) main::$1
(bool~) main::$10
(byte~) main::$2
(byte*~) main::$3
(number~) main::$4
(bool~) main::$5
(byte~) main::$6
(byte*~) main::$7
(byte~) main::$8
(byte*~) main::$9
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*)(number) $400
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i1
(byte) main::i1#0
(byte) main::i1#1
(byte) main::i1#2
(const struct Point*) points[(number) 4]  = { fill( 4, 0) }

Adding number conversion cast (unumber) 4 in (number~) main::$4 ← (byte) main::i#2 + (number) 4
Adding number conversion cast (unumber) main::$4 in (number~) main::$4 ← (byte) main::i#2 + (unumber)(number) 4
Adding number conversion cast (unumber) $28 in *((const nomodify byte*) main::SCREEN+(number) $28 + (byte) main::i1#2) ← *((byte*~) main::$9)
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 4
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$4 ← (byte) main::i#2 + (byte) 4
Identified duplicate assignment right side [5] (byte~) main::$2 ← (byte) main::i#2 * (const nomodify byte) SIZEOF_POINT
Identified duplicate assignment right side [17] (byte~) main::$8 ← (byte) main::i1#2 * (const nomodify byte) SIZEOF_POINT
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) main::$5 [11] if((byte) main::i#1!=rangelast(0,3)) goto main::@1
Simple Condition (bool~) main::$10 [22] if((byte) main::i1#1!=rangelast(0,3)) goto main::@3
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Constant (const byte) main::i1#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [9] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [11] if(main::i#1!=rangelast(0,3)) goto main::@1 to (number) 4
Resolved ranged next value [20] main::i1#1 ← ++ main::i1#2 to ++
Resolved ranged comparison value [22] if(main::i1#1!=rangelast(0,3)) goto main::@3 to (number) 4
Converting *(pointer+n) to pointer[n] [4] *((byte*~) main::$1) ← (byte) main::i#2  -- *((byte*)points+OFFS_X + main::$0)
Converting *(pointer+n) to pointer[n] [8] *((byte*~) main::$3) ← (byte~) main::$4  -- *((byte*)points+OFFS_Y + main::$2)
Converting *(pointer+n) to pointer[n] [16] *((const nomodify byte*) main::SCREEN + (byte) main::i1#2) ← *((byte*~) main::$7)  -- *((byte*)points+OFFS_X + main::$6)
Converting *(pointer+n) to pointer[n] [19] *((const nomodify byte*) main::SCREEN+(byte) $28 + (byte) main::i1#2) ← *((byte*~) main::$9)  -- *((byte*)points+OFFS_Y + main::$8)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero (byte*)points in [3] (byte*~) main::$1 ← (byte*)(const struct Point*) points+(const nomodify byte) OFFS_X + (byte~) main::$0
Simplifying expression containing zero (byte*)points in [4] *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_X + (byte~) main::$0) ← (byte) main::i#2
Simplifying expression containing zero (byte*)points in [15] (byte*~) main::$7 ← (byte*)(const struct Point*) points+(const nomodify byte) OFFS_X + (byte~) main::$6
Simplifying expression containing zero (byte*)points in [16] *((const nomodify byte*) main::SCREEN + (byte) main::i1#2) ← *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_X + (byte~) main::$6)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*~) main::$1 and assignment [2] (byte*~) main::$1 ← (byte*)(const struct Point*) points + (byte~) main::$0
Eliminating unused variable (byte*~) main::$3 and assignment [5] (byte*~) main::$3 ← (byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$2
Eliminating unused variable (byte*~) main::$7 and assignment [12] (byte*~) main::$7 ← (byte*)(const struct Point*) points + (byte~) main::$6
Eliminating unused variable (byte*~) main::$9 and assignment [15] (byte*~) main::$9 ← (byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$8
Eliminating unused constant (const nomodify byte) OFFS_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure _start
Removing unused procedure block _start
Removing unused procedure block _start::@1
Removing unused procedure block _start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 4 in [7] if((byte) main::i#1!=(number) 4) goto main::@1
Adding number conversion cast (unumber) 4 in [14] if((byte) main::i1#1!=(number) 4) goto main::@3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 4
Simplifying constant integer cast 4
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 4
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$2 = main::$0 
Alias main::$8 = main::$6 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift [1] (byte~) main::$2 ← (byte) main::i#2 * (const nomodify byte) SIZEOF_POINT
Rewriting multiplication to use shift [8] (byte~) main::$8 ← (byte) main::i1#2 * (const nomodify byte) SIZEOF_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i1#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::i1#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const nomodify byte) SIZEOF_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@4(between main::@1 and main::@1)
Added new block during phi lifting main::@5(between main::@3 and main::@3)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
CALL GRAPH

Created 2 initial phi equivalence classes
Coalesced [16] main::i1#3 ← main::i1#1
Coalesced [17] main::i#3 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@2
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@4
Renumbering block main::@3 to main::@2
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

(void()) main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [1] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1
  [3] *((byte*)(const struct Point*) points + (byte~) main::$2) ← (byte) main::i#2
  [4] (byte~) main::$4 ← (byte) main::i#2 + (byte) 4
  [5] *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$2) ← (byte~) main::$4
  [6] (byte) main::i#1 ← ++ (byte) main::i#2
  [7] if((byte) main::i#1!=(byte) 4) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [8] (byte) main::i1#2 ← phi( main::@1/(byte) 0 main::@2/(byte) main::i1#1 )
  [9] (byte~) main::$8 ← (byte) main::i1#2 << (byte) 1
  [10] *((const nomodify byte*) main::SCREEN + (byte) main::i1#2) ← *((byte*)(const struct Point*) points + (byte~) main::$8)
  [11] *((const nomodify byte*) main::SCREEN+(byte) $28 + (byte) main::i1#2) ← *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$8)
  [12] (byte) main::i1#1 ← ++ (byte) main::i1#2
  [13] if((byte) main::i1#1!=(byte) 4) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@2
  [14] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) Point::x
(byte) Point::y
(void()) main()
(byte~) main::$2 11.0
(byte~) main::$4 22.0
(byte~) main::$8 16.5
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(byte) main::i1
(byte) main::i1#1 16.5
(byte) main::i1#2 13.75

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
Added variable main::$2 to live range equivalence class [ main::$2 ]
Added variable main::$4 to live range equivalence class [ main::$4 ]
Added variable main::$8 to live range equivalence class [ main::$8 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::i1#2 main::i1#1 ]
[ main::$2 ]
[ main::$4 ]
[ main::$8 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ main::i1#2 main::i1#1 ]
Allocated zp[1]:4 [ main::$2 ]
Allocated zp[1]:5 [ main::$4 ]
Allocated zp[1]:6 [ main::$8 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Minimal struct - array of struct - near pointer math indexing
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFS_Y = 1
  // main
main: {
    .label SCREEN = $400
    .label __2 = 4
    .label __4 = 5
    .label __8 = 6
    .label i = 2
    .label i1 = 3
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z __2
    // [3] *((byte*)(const struct Point*) points + (byte~) main::$2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z i
    ldy.z __2
    sta points,y
    // [4] (byte~) main::$4 ← (byte) main::i#2 + (byte) 4 -- vbuz1=vbuz2_plus_vbuc1 
    lax.z i
    axs #-[4]
    stx.z __4
    // [5] *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$2) ← (byte~) main::$4 -- pbuc1_derefidx_vbuz1=vbuz2 
    // points[i].x = i;
    lda.z __4
    ldy.z __2
    sta points+OFFS_Y,y
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [7] if((byte) main::i#1!=(byte) 4) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i
    bne __b1_from___b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [8] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i1
    jmp __b2
    // [8] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [8] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [9] (byte~) main::$8 ← (byte) main::i1#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i1
    asl
    sta.z __8
    // [10] *((const nomodify byte*) main::SCREEN + (byte) main::i1#2) ← *((byte*)(const struct Point*) points + (byte~) main::$8) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    ldy.z __8
    lda points,y
    ldy.z i1
    sta SCREEN,y
    // [11] *((const nomodify byte*) main::SCREEN+(byte) $28 + (byte) main::i1#2) ← *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$8) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz2 
    // SCREEN[i] = points[i].x;
    ldy.z __8
    lda points+OFFS_Y,y
    ldy.z i1
    sta SCREEN+$28,y
    // [12] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuz1=_inc_vbuz1 
    inc.z i1
    // [13] if((byte) main::i1#1!=(byte) 4) goto main::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z i1
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data
  points: .fill 2*4, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$2 ] (  [ main::i#2 main::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Statement [3] *((byte*)(const struct Point*) points + (byte~) main::$2) ← (byte) main::i#2 [ main::i#2 main::$2 ] (  [ main::i#2 main::$2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::$2 ]
Statement [4] (byte~) main::$4 ← (byte) main::i#2 + (byte) 4 [ main::i#2 main::$2 main::$4 ] (  [ main::i#2 main::$2 main::$4 ] { }  ) always clobbers reg byte a 
Statement [9] (byte~) main::$8 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::$8 ] (  [ main::i1#2 main::$8 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::i1#2 main::i1#1 ]
Statement [10] *((const nomodify byte*) main::SCREEN + (byte) main::i1#2) ← *((byte*)(const struct Point*) points + (byte~) main::$8) [ main::i1#2 main::$8 ] (  [ main::i1#2 main::$8 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::$8 ]
Statement [11] *((const nomodify byte*) main::SCREEN+(byte) $28 + (byte) main::i1#2) ← *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$8) [ main::i1#2 ] (  [ main::i1#2 ] { }  ) always clobbers reg byte a 
Statement [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$2 ] (  [ main::i#2 main::$2 ] { }  ) always clobbers reg byte a 
Statement [3] *((byte*)(const struct Point*) points + (byte~) main::$2) ← (byte) main::i#2 [ main::i#2 main::$2 ] (  [ main::i#2 main::$2 ] { }  ) always clobbers reg byte a 
Statement [4] (byte~) main::$4 ← (byte) main::i#2 + (byte) 4 [ main::i#2 main::$2 main::$4 ] (  [ main::i#2 main::$2 main::$4 ] { }  ) always clobbers reg byte a 
Statement [9] (byte~) main::$8 ← (byte) main::i1#2 << (byte) 1 [ main::i1#2 main::$8 ] (  [ main::i1#2 main::$8 ] { }  ) always clobbers reg byte a 
Statement [10] *((const nomodify byte*) main::SCREEN + (byte) main::i1#2) ← *((byte*)(const struct Point*) points + (byte~) main::$8) [ main::i1#2 main::$8 ] (  [ main::i1#2 main::$8 ] { }  ) always clobbers reg byte a 
Statement [11] *((const nomodify byte*) main::SCREEN+(byte) $28 + (byte) main::i1#2) ← *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$8) [ main::i1#2 ] (  [ main::i1#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::i1#2 main::i1#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::$2 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$4 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ main::$8 ] : zp[1]:6 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 30.25: zp[1]:3 [ main::i1#2 main::i1#1 ] 27.5: zp[1]:2 [ main::i#2 main::i#1 ] 22: zp[1]:5 [ main::$4 ] 16.5: zp[1]:6 [ main::$8 ] 11: zp[1]:4 [ main::$2 ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [main] best 886 combination reg byte y [ main::i1#2 main::i1#1 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$4 ] reg byte x [ main::$8 ] zp[1]:4 [ main::$2 ] 
Limited combination testing to 100 combinations of 324 possible.
Uplifting [Point] best 886 combination 
Uplifting [] best 886 combination 
Attempting to uplift remaining variables inzp[1]:4 [ main::$2 ]
Uplifting [main] best 816 combination reg byte y [ main::$2 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct - array of struct - near pointer math indexing
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFS_Y = 1
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
    // [3] *((byte*)(const struct Point*) points + (byte~) main::$2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta points,y
    // [4] (byte~) main::$4 ← (byte) main::i#2 + (byte) 4 -- vbuaa=vbuxx_plus_vbuc1 
    txa
    clc
    adc #4
    // [5] *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$2) ← (byte~) main::$4 -- pbuc1_derefidx_vbuyy=vbuaa 
    // points[i].x = i;
    sta points+OFFS_Y,y
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] if((byte) main::i#1!=(byte) 4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b1_from___b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    // [8] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b2
    // [8] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
  __b2_from___b2:
    // [8] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [9] (byte~) main::$8 ← (byte) main::i1#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [10] *((const nomodify byte*) main::SCREEN + (byte) main::i1#2) ← *((byte*)(const struct Point*) points + (byte~) main::$8) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda points,x
    sta SCREEN,y
    // [11] *((const nomodify byte*) main::SCREEN+(byte) $28 + (byte) main::i1#2) ← *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$8) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    // SCREEN[i] = points[i].x;
    lda points+OFFS_Y,x
    sta SCREEN+$28,y
    // [12] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuyy=_inc_vbuyy 
    iny
    // [13] if((byte) main::i1#1!=(byte) 4) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne __b2_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [14] return 
    rts
}
  // File Data
  points: .fill 2*4, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b2 with __b2
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b2_from___b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(const nomodify byte) OFFS_Y = (byte) 1
(byte) Point::x
(byte) Point::y
(void()) main()
(byte~) main::$2 reg byte y 11.0
(byte~) main::$4 reg byte a 22.0
(byte~) main::$8 reg byte x 16.5
(label) main::@1
(label) main::@2
(label) main::@return
(const nomodify byte*) main::SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 11.0
(byte) main::i1
(byte) main::i1#1 reg byte y 16.5
(byte) main::i1#2 reg byte y 13.75
(const struct Point*) points[(number) 4]  = { fill( 4, 0) }

reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::i1#2 main::i1#1 ]
reg byte y [ main::$2 ]
reg byte a [ main::$4 ]
reg byte x [ main::$8 ]


FINAL ASSEMBLER
Score: 666

  // File Comments
// Minimal struct - array of struct - near pointer math indexing
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFS_Y = 1
  // main
main: {
    .label SCREEN = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [1] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // i*SIZEOF_POINT
    // [2] (byte~) main::$2 ← (byte) main::i#2 << (byte) 1 -- vbuyy=vbuxx_rol_1 
    txa
    asl
    tay
    // *((byte*)points+OFFS_X+i*SIZEOF_POINT) = i
    // [3] *((byte*)(const struct Point*) points + (byte~) main::$2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuyy=vbuxx 
    txa
    sta points,y
    // i+4
    // [4] (byte~) main::$4 ← (byte) main::i#2 + (byte) 4 -- vbuaa=vbuxx_plus_vbuc1 
    txa
    clc
    adc #4
    // *((byte*)points+OFFS_Y+i*SIZEOF_POINT) = i+4
    // [5] *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$2) ← (byte~) main::$4 -- pbuc1_derefidx_vbuyy=vbuaa 
    // points[i].x = i;
    sta points+OFFS_Y,y
    // for( byte i: 0..3)
    // [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] if((byte) main::i#1!=(byte) 4) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #4
    bne __b1
    // [8] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // [8] phi (byte) main::i1#2 = (byte) 0 [phi:main::@1->main::@2#0] -- vbuyy=vbuc1 
    ldy #0
    // [8] phi from main::@2 to main::@2 [phi:main::@2->main::@2]
    // [8] phi (byte) main::i1#2 = (byte) main::i1#1 [phi:main::@2->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // i*SIZEOF_POINT
    // [9] (byte~) main::$8 ← (byte) main::i1#2 << (byte) 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // SCREEN[i] = *((byte*)points+OFFS_X+i*SIZEOF_POINT)
    // [10] *((const nomodify byte*) main::SCREEN + (byte) main::i1#2) ← *((byte*)(const struct Point*) points + (byte~) main::$8) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    lda points,x
    sta SCREEN,y
    // (SCREEN+40)[i] = *((byte*)points+OFFS_Y+i*SIZEOF_POINT)
    // [11] *((const nomodify byte*) main::SCREEN+(byte) $28 + (byte) main::i1#2) ← *((byte*)(const struct Point*) points+(const nomodify byte) OFFS_Y + (byte~) main::$8) -- pbuc1_derefidx_vbuyy=pbuc2_derefidx_vbuxx 
    // SCREEN[i] = points[i].x;
    lda points+OFFS_Y,x
    sta SCREEN+$28,y
    // for( byte i: 0..3)
    // [12] (byte) main::i1#1 ← ++ (byte) main::i1#2 -- vbuyy=_inc_vbuyy 
    iny
    // [13] if((byte) main::i1#1!=(byte) 4) goto main::@2 -- vbuyy_neq_vbuc1_then_la1 
    cpy #4
    bne __b2
    // main::@return
    // }
    // [14] return 
    rts
}
  // File Data
  points: .fill 2*4, 0

