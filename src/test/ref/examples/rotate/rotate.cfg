
(void()) main()
main: scope:[main]  from
  asm { sei  }
  [1] call init 
  to:main::@1
main::@1: scope:[main]  from main
  [2] phi()
  [3] call anim 
  to:main::@return
main::@return: scope:[main]  from main::@1
  [4] return 
  to:@return

(void()) anim()
anim: scope:[anim]  from main::@1
  [5] phi()
  to:anim::@1
anim::@1: scope:[anim]  from anim anim::@15
  [6] (byte) anim::angle#9 ← phi( anim/(byte) 0 anim::@15/(byte) anim::angle#1 )
  to:anim::@2
anim::@2: scope:[anim]  from anim::@1 anim::@2
  [7] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto anim::@2
  to:anim::@3
anim::@3: scope:[anim]  from anim::@2
  [8] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR)
  [9] call clock_start 
  to:anim::@4
anim::@4: scope:[anim]  from anim::@3 anim::@5
  [10] (byte) anim::sprite_msb#10 ← phi( anim::@3/(byte) 0 anim::@5/(byte) anim::sprite_msb#5 )
  [10] (byte) anim::i#10 ← phi( anim::@3/(byte) 0 anim::@5/(byte) anim::i#1 )
  [11] (signed byte) anim::x#0 ← *((const signed byte*) xs + (byte) anim::i#10)
  [12] (signed byte) anim::y#0 ← *((const signed byte*) ys + (byte) anim::i#10)
  to:anim::mulf8s_prepare1
anim::mulf8s_prepare1: scope:[anim]  from anim::@4
  [13] (byte) mulf8u_prepare::a#3 ← (byte)(signed byte)*((const byte*) COS + (byte) anim::angle#9)
  [14] call mulf8u_prepare 
  to:anim::@8
anim::@8: scope:[anim]  from anim::mulf8s_prepare1
  [15] (signed byte) mulf8s_prepared::b#0 ← (signed byte) anim::x#0
  [16] call mulf8s_prepared 
  to:anim::@10
anim::@10: scope:[anim]  from anim::@8
  [17] (signed word~) anim::$4 ← (signed word)(word) mulf8s_prepared::m#4
  [18] (signed word) anim::xr#0 ← (signed word~) anim::$4 << (byte) 1
  [19] (signed byte) mulf8s_prepared::b#1 ← (signed byte) anim::y#0
  [20] call mulf8s_prepared 
  to:anim::@11
anim::@11: scope:[anim]  from anim::@10
  [21] (signed word~) anim::$6 ← (signed word)(word) mulf8s_prepared::m#4
  [22] (signed word) anim::yr#0 ← (signed word~) anim::$6 << (byte) 1
  to:anim::mulf8s_prepare2
anim::mulf8s_prepare2: scope:[anim]  from anim::@11
  [23] (byte) mulf8u_prepare::a#4 ← (byte)(signed byte)*((const byte*) SIN + (byte) anim::angle#9)
  [24] call mulf8u_prepare 
  to:anim::@9
anim::@9: scope:[anim]  from anim::mulf8s_prepare2
  [25] (signed byte) mulf8s_prepared::b#2 ← (signed byte) anim::y#0
  [26] call mulf8s_prepared 
  to:anim::@12
anim::@12: scope:[anim]  from anim::@9
  [27] (signed word~) anim::$9 ← (signed word)(word) mulf8s_prepared::m#4
  [28] (signed word~) anim::$10 ← (signed word~) anim::$9 << (byte) 1
  [29] (signed word) anim::xr#1 ← (signed word) anim::xr#0 - (signed word~) anim::$10
  [30] (signed byte) mulf8s_prepared::b#3 ← (signed byte) anim::x#0
  [31] call mulf8s_prepared 
  to:anim::@13
anim::@13: scope:[anim]  from anim::@12
  [32] (signed word~) anim::$11 ← (signed word)(word) mulf8s_prepared::m#4
  [33] (signed word~) anim::$12 ← (signed word~) anim::$11 << (byte) 1
  [34] (signed word) anim::yr#1 ← (signed word) anim::yr#0 + (signed word~) anim::$12
  [35] (byte~) anim::$14 ← > (signed word) anim::xr#1
  [36] (signed word) anim::xpos#0 ← (signed byte)(byte~) anim::$14 + (signed byte) $18+(signed word) $95
  [37] (byte) anim::sprite_msb#1 ← (byte) anim::sprite_msb#10 >> (byte) 1
  [38] (byte~) anim::$17 ← > (signed word) anim::xpos#0
  [39] if((byte~) anim::$17==(byte) 0) goto anim::@5
  to:anim::@6
anim::@6: scope:[anim]  from anim::@13
  [40] (byte) anim::sprite_msb#2 ← (byte) anim::sprite_msb#1 | (byte) $80
  to:anim::@5
anim::@5: scope:[anim]  from anim::@13 anim::@6
  [41] (byte) anim::sprite_msb#5 ← phi( anim::@13/(byte) anim::sprite_msb#1 anim::@6/(byte) anim::sprite_msb#2 )
  [42] (byte~) anim::$21 ← > (signed word) anim::yr#1
  [43] (byte) anim::ypos#0 ← (byte~) anim::$21 + (byte) $59+(byte) $33
  [44] (byte) anim::i2#0 ← (byte) anim::i#10 << (byte) 1
  [45] (byte~) anim::$24 ← < (signed word) anim::xpos#0
  [46] *((const nomodify byte*) SPRITES_XPOS + (byte) anim::i2#0) ← (byte~) anim::$24
  [47] *((const nomodify byte*) SPRITES_YPOS + (byte) anim::i2#0) ← (byte) anim::ypos#0
  [48] (byte) anim::i#1 ← ++ (byte) anim::i#10
  [49] if((byte) anim::i#1!=(byte) 8) goto anim::@4
  to:anim::@7
anim::@7: scope:[anim]  from anim::@5
  [50] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_XMSB) ← (byte) anim::sprite_msb#5
  [51] (byte) anim::angle#1 ← ++ (byte) anim::angle#9
  [52] call clock 
  [53] (dword) clock::return#2 ← (dword) clock::return#0
  to:anim::@14
anim::@14: scope:[anim]  from anim::@7
  [54] (dword~) anim::$26 ← (dword) clock::return#2
  [55] (dword) anim::cyclecount#0 ← (dword~) anim::$26 - (const nomodify dword) CLOCKS_PER_INIT
  [56] (dword) print_ulong_at::dw#0 ← (dword) anim::cyclecount#0
  [57] call print_ulong_at 
  to:anim::@15
anim::@15: scope:[anim]  from anim::@14
  [58] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BORDER_COLOR) ← (const nomodify byte) LIGHT_BLUE
  to:anim::@1

(void()) print_ulong_at((dword) print_ulong_at::dw , (byte*) print_ulong_at::at)
print_ulong_at: scope:[print_ulong_at]  from anim::@14
  [59] (word) print_uint_at::w#0 ← > (dword) print_ulong_at::dw#0
  [60] call print_uint_at 
  to:print_ulong_at::@1
print_ulong_at::@1: scope:[print_ulong_at]  from print_ulong_at
  [61] (word) print_uint_at::w#1 ← < (dword) print_ulong_at::dw#0
  [62] call print_uint_at 
  to:print_ulong_at::@return
print_ulong_at::@return: scope:[print_ulong_at]  from print_ulong_at::@1
  [63] return 
  to:@return

(void()) print_uint_at((word) print_uint_at::w , (byte*) print_uint_at::at)
print_uint_at: scope:[print_uint_at]  from print_ulong_at print_ulong_at::@1
  [64] (byte*) print_uint_at::at#2 ← phi( print_ulong_at/(const byte*) SCREEN print_ulong_at::@1/(const byte*) SCREEN+(byte) 4 )
  [64] (word) print_uint_at::w#2 ← phi( print_ulong_at/(word) print_uint_at::w#0 print_ulong_at::@1/(word) print_uint_at::w#1 )
  [65] (byte) print_uchar_at::b#0 ← > (word) print_uint_at::w#2
  [66] (byte*) print_uchar_at::at#0 ← (byte*) print_uint_at::at#2
  [67] call print_uchar_at 
  to:print_uint_at::@1
print_uint_at::@1: scope:[print_uint_at]  from print_uint_at
  [68] (byte) print_uchar_at::b#1 ← < (word) print_uint_at::w#2
  [69] (byte*) print_uchar_at::at#1 ← (byte*) print_uint_at::at#2 + (byte) 2
  [70] call print_uchar_at 
  to:print_uint_at::@return
print_uint_at::@return: scope:[print_uint_at]  from print_uint_at::@1
  [71] return 
  to:@return

(void()) print_uchar_at((byte) print_uchar_at::b , (byte*) print_uchar_at::at)
print_uchar_at: scope:[print_uchar_at]  from print_uint_at print_uint_at::@1
  [72] (byte*) print_uchar_at::at#2 ← phi( print_uint_at/(byte*) print_uchar_at::at#0 print_uint_at::@1/(byte*) print_uchar_at::at#1 )
  [72] (byte) print_uchar_at::b#2 ← phi( print_uint_at/(byte) print_uchar_at::b#0 print_uint_at::@1/(byte) print_uchar_at::b#1 )
  [73] (byte~) print_uchar_at::$0 ← (byte) print_uchar_at::b#2 >> (byte) 4
  [74] (byte) print_char_at::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$0)
  [75] (byte*) print_char_at::at#0 ← (byte*) print_uchar_at::at#2
  [76] call print_char_at 
  to:print_uchar_at::@1
print_uchar_at::@1: scope:[print_uchar_at]  from print_uchar_at
  [77] (byte~) print_uchar_at::$2 ← (byte) print_uchar_at::b#2 & (byte) $f
  [78] (byte*) print_char_at::at#1 ← (byte*) print_uchar_at::at#2 + (byte) 1
  [79] (byte) print_char_at::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar_at::$2)
  [80] call print_char_at 
  to:print_uchar_at::@return
print_uchar_at::@return: scope:[print_uchar_at]  from print_uchar_at::@1
  [81] return 
  to:@return

(void()) print_char_at((byte) print_char_at::ch , (byte*) print_char_at::at)
print_char_at: scope:[print_char_at]  from print_uchar_at print_uchar_at::@1
  [82] (byte*) print_char_at::at#2 ← phi( print_uchar_at/(byte*) print_char_at::at#0 print_uchar_at::@1/(byte*) print_char_at::at#1 )
  [82] (byte) print_char_at::ch#2 ← phi( print_uchar_at/(byte) print_char_at::ch#0 print_uchar_at::@1/(byte) print_char_at::ch#1 )
  [83] *((byte*) print_char_at::at#2) ← (byte) print_char_at::ch#2
  to:print_char_at::@return
print_char_at::@return: scope:[print_char_at]  from print_char_at
  [84] return 
  to:@return

(dword()) clock()
clock: scope:[clock]  from anim::@7
  [85] (dword) clock::return#0 ← (dword) $ffffffff - *((const nomodify dword*) CIA2_TIMER_AB)
  to:clock::@return
clock::@return: scope:[clock]  from clock
  [86] return 
  to:@return

(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from anim::@10 anim::@12 anim::@8 anim::@9
  [87] (signed byte) mulf8s_prepared::b#4 ← phi( anim::@10/(signed byte) mulf8s_prepared::b#1 anim::@12/(signed byte) mulf8s_prepared::b#3 anim::@8/(signed byte) mulf8s_prepared::b#0 anim::@9/(signed byte) mulf8s_prepared::b#2 )
  [88] (byte) mulf8u_prepared::b#0 ← (byte)(signed byte) mulf8s_prepared::b#4
  [89] call mulf8u_prepared 
  [90] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  [91] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2
  [92] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  [93] (byte~) mulf8s_prepared::$6 ← > (word) mulf8s_prepared::m#0
  [94] (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$6 - (byte)(signed byte) mulf8s_prepared::b#4
  [95] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  [96] (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@5/(word) mulf8s_prepared::m#0 )
  [97] if((signed byte) mulf8s_prepared::b#4>=(signed byte) 0) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [98] (byte~) mulf8s_prepared::$9 ← > (word) mulf8s_prepared::m#5
  [99] (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$9 - (byte)*((const nomodify signed byte*) mulf8s_prepared::memA)
  [100] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [101] (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#5 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [102] return 
  to:@return

(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  [103] *((const nomodify byte*) mulf8u_prepared::memB) ← (byte) mulf8u_prepared::b#0
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [105] (word) mulf8u_prepared::return#0 ← *((const nomodify byte*) mulf8u_prepared::memB) w= *((const nomodify byte*) mulf8u_prepared::resL)
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [106] return 
  to:@return

(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from anim::mulf8s_prepare1 anim::mulf8s_prepare2
  [107] (byte) mulf8u_prepare::a#2 ← phi( anim::mulf8s_prepare1/(byte) mulf8u_prepare::a#3 anim::mulf8s_prepare2/(byte) mulf8u_prepare::a#4 )
  [108] *((const nomodify byte*) mulf8u_prepare::memA) ← (byte) mulf8u_prepare::a#2
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [110] return 
  to:@return

(void()) clock_start()
clock_start: scope:[clock_start]  from anim::@3
  [111] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (byte) 0
  [112] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [113] *((const nomodify dword*) CIA2_TIMER_AB) ← (dword) $ffffffff
  [114] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START|(const nomodify byte) CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A
  [115] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL) ← (const nomodify byte) CIA_TIMER_CONTROL_START
  to:clock_start::@return
clock_start::@return: scope:[clock_start]  from clock_start
  [116] return 
  to:@return

(void()) init()
init: scope:[init]  from main
  [117] phi()
  [118] call mulf_init 
  to:init::@2
init::@2: scope:[init]  from init
  [119] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_SPRITES_ENABLE) ← (byte) $ff
  to:init::@1
init::@1: scope:[init]  from init::@1 init::@2
  [120] (byte) init::i#2 ← phi( init::@1/(byte) init::i#1 init::@2/(byte) 0 )
  [121] *((const byte*) init::sprites_ptr#0 + (byte) init::i#2) ← (byte)(const byte*) SPRITE/(byte) $40
  [122] *((const nomodify byte*) SPRITES_COLOR + (byte) init::i#2) ← (const nomodify byte) GREEN
  [123] (byte) init::i#1 ← ++ (byte) init::i#2
  [124] if((byte) init::i#1!=(byte) 8) goto init::@1
  to:init::@return
init::@return: scope:[init]  from init::@1
  [125] return 
  to:@return

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from init
  [126] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [127] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::x_2#2 )
  [127] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte*) mulf_sqr1_hi+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_hi#1 )
  [127] (word) mulf_init::sqr#4 ← phi( mulf_init/(word) 0 mulf_init::@3/(word) mulf_init::sqr#1 )
  [127] (byte) mulf_init::c#2 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::c#1 )
  [127] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte*) mulf_sqr1_lo+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_lo#1 )
  [128] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [129] (byte) mulf_init::dir#2 ← phi( mulf_init::@1/(byte) $ff mulf_init::@8/(byte) mulf_init::dir#4 )
  [129] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_hi mulf_init::@8/(byte*) mulf_init::sqr2_hi#1 )
  [129] (byte) mulf_init::x_255#2 ← phi( mulf_init::@1/(byte) -1 mulf_init::@8/(byte) mulf_init::x_255#1 )
  [129] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_lo mulf_init::@8/(byte*) mulf_init::sqr2_lo#1 )
  [130] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [131] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100)
  [132] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [133] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [134] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2)
  [135] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2)
  [136] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  [137] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  [138] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [139] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [140] (byte) mulf_init::dir#4 ← phi( mulf_init::@6/(byte) 1 mulf_init::@9/(byte) mulf_init::dir#2 )
  [141] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [142] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  [143] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1
  [144] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [145] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  [146] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [147] (byte) mulf_init::x_2#2 ← phi( mulf_init::@2/(byte) mulf_init::x_2#3 mulf_init::@4/(byte) mulf_init::x_2#1 )
  [147] (word) mulf_init::sqr#3 ← phi( mulf_init::@2/(word) mulf_init::sqr#4 mulf_init::@4/(word) mulf_init::sqr#2 )
  [148] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3
  [149] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4
  [150] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3
  [151] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5
  [152] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  [153] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  [154] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  to:mulf_init::@1
