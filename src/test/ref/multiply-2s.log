Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte*~) main::$0 ← (byte*) main::SCREEN#0 + (number) 0*(number) $28
  (number~) main::$1 ← (byte) main::i#2 * (number) 1
  *((byte*~) main::$0 + (byte) main::i#2) ← (number~) main::$1
  (byte*~) main::$2 ← (byte*) main::SCREEN#0 + (number) 1*(number) $28
  (number~) main::$3 ← (byte) main::i#2 * (number) 2
  *((byte*~) main::$2 + (byte) main::i#2) ← (number~) main::$3
  (byte*~) main::$4 ← (byte*) main::SCREEN#0 + (number) 2*(number) $28
  (number~) main::$5 ← (byte) main::i#2 * (number) 4
  *((byte*~) main::$4 + (byte) main::i#2) ← (number~) main::$5
  (byte*~) main::$6 ← (byte*) main::SCREEN#0 + (number) 3*(number) $28
  (number~) main::$7 ← (byte) main::i#2 * (number) 8
  *((byte*~) main::$6 + (byte) main::i#2) ← (number~) main::$7
  (signed byte~) main::$8 ← ((signed byte)) (byte) main::i#2
  (signed byte~) main::$9 ← - (signed byte~) main::$8
  (signed byte) main::sb#0 ← (signed byte~) main::$9
  (byte*~) main::$10 ← (byte*) main::SCREEN#0 + (number) 5*(number) $28
  (number~) main::$11 ← (signed byte) main::sb#0 * (number) 2
  (byte~) main::$12 ← ((byte)) (number~) main::$11
  *((byte*~) main::$10 + (byte) main::i#2) ← (byte~) main::$12
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$a)
  (bool~) main::$13 ← (byte) main::i#1 != rangelast(0,$a)
  if((bool~) main::$13) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(byte*~) main::$0
(number~) main::$1
(byte*~) main::$10
(number~) main::$11
(byte~) main::$12
(bool~) main::$13
(byte*~) main::$2
(number~) main::$3
(byte*~) main::$4
(number~) main::$5
(byte*~) main::$6
(number~) main::$7
(signed byte~) main::$8
(signed byte~) main::$9
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(signed byte) main::sb
(signed byte) main::sb#0

Adding number conversion cast (unumber) 0*$28 in (byte*~) main::$0 ← (byte*) main::SCREEN#0 + (number) 0*(number) $28
Adding number conversion cast (unumber) 1 in (number~) main::$1 ← (byte) main::i#2 * (number) 1
Adding number conversion cast (unumber) main::$1 in (number~) main::$1 ← (byte) main::i#2 * (unumber)(number) 1
Adding number conversion cast (unumber) 1*$28 in (byte*~) main::$2 ← (byte*) main::SCREEN#0 + (number) 1*(number) $28
Adding number conversion cast (unumber) 2 in (number~) main::$3 ← (byte) main::i#2 * (number) 2
Adding number conversion cast (unumber) main::$3 in (number~) main::$3 ← (byte) main::i#2 * (unumber)(number) 2
Adding number conversion cast (unumber) 2*$28 in (byte*~) main::$4 ← (byte*) main::SCREEN#0 + (number) 2*(number) $28
Adding number conversion cast (unumber) 4 in (number~) main::$5 ← (byte) main::i#2 * (number) 4
Adding number conversion cast (unumber) main::$5 in (number~) main::$5 ← (byte) main::i#2 * (unumber)(number) 4
Adding number conversion cast (unumber) 3*$28 in (byte*~) main::$6 ← (byte*) main::SCREEN#0 + (number) 3*(number) $28
Adding number conversion cast (unumber) 8 in (number~) main::$7 ← (byte) main::i#2 * (number) 8
Adding number conversion cast (unumber) main::$7 in (number~) main::$7 ← (byte) main::i#2 * (unumber)(number) 8
Adding number conversion cast (unumber) 5*$28 in (byte*~) main::$10 ← (byte*) main::SCREEN#0 + (number) 5*(number) $28
Adding number conversion cast (snumber) 2 in (number~) main::$11 ← (signed byte) main::sb#0 * (number) 2
Adding number conversion cast (snumber) main::$11 in (number~) main::$11 ← (signed byte) main::sb#0 * (snumber)(number) 2
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Inlining cast (signed byte~) main::$8 ← (signed byte)(byte) main::i#2
Inlining cast (byte~) main::$12 ← (byte)(snumber~) main::$11
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized signed number type (signed byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$1 ← (byte) main::i#2 * (byte) 1
Inferred type updated to byte in (unumber~) main::$3 ← (byte) main::i#2 * (byte) 2
Inferred type updated to byte in (unumber~) main::$5 ← (byte) main::i#2 * (byte) 4
Inferred type updated to byte in (unumber~) main::$7 ← (byte) main::i#2 * (byte) 8
Inferred type updated to signed byte in (snumber~) main::$11 ← (signed byte) main::sb#0 * (signed byte) 2
Alias (signed byte) main::sb#0 = (signed byte~) main::$9 
Successful SSA optimization Pass2AliasElimination
Simple Condition (bool~) main::$13 [24] if((byte) main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [22] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [24] if(main::i#1!=rangelast(0,$a)) goto main::@1 to (number) $b
Simplifying constant evaluating to zero (byte)(number) 0*(number) $28 in [3] (byte*~) main::$0 ← (const byte*) main::SCREEN#0 + (byte)(number) 0*(number) $28
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero main::SCREEN#0 in [3] (byte*~) main::$0 ← (const byte*) main::SCREEN#0 + (byte) 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Adding number conversion cast (unumber) $b in if((byte) main::i#1!=(number) $b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant right-side identified [4] (byte*~) main::$2 ← (const byte*) main::SCREEN#0 + (byte)(number) 1*(number) $28
Constant right-side identified [7] (byte*~) main::$4 ← (const byte*) main::SCREEN#0 + (byte)(number) 2*(number) $28
Constant right-side identified [10] (byte*~) main::$6 ← (const byte*) main::SCREEN#0 + (byte)(number) 3*(number) $28
Constant right-side identified [15] (byte*~) main::$10 ← (const byte*) main::SCREEN#0 + (byte)(number) 5*(number) $28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) main::$0 = main::SCREEN#0
Constant (const byte*) main::$2 = main::SCREEN#0+(byte)1*$28
Constant (const byte*) main::$4 = main::SCREEN#0+(byte)2*$28
Constant (const byte*) main::$6 = main::SCREEN#0+(byte)3*$28
Constant (const byte*) main::$10 = main::SCREEN#0+(byte)5*$28
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [9] (signed byte~) main::$8 ← (signed byte)(byte) main::i#2 keeping main::i#2
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [12] (byte~) main::$12 ← (byte)(signed byte~) main::$11 keeping main::$12
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to remove identity multiply/divide [1] (byte~) main::$1 ← (byte) main::i#2 * (byte) 1
Rewriting multiplication to use shift [3] (byte~) main::$3 ← (byte) main::i#2 * (byte) 2
Rewriting multiplication to use shift [5] (byte~) main::$5 ← (byte) main::i#2 * (byte) 4
Rewriting multiplication to use shift [7] (byte~) main::$7 ← (byte) main::i#2 * (byte) 8
Rewriting multiplication to use shift [11] (signed byte~) main::$12 ← (signed byte) main::sb#0 * (signed byte) 2
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::$6 = (const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28
Constant inlined main::$4 = (const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28
Constant inlined main::$2 = (const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28
Constant inlined main::$10 = (const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28
Constant inlined main::$0 = (const byte*) main::SCREEN#0
Successful SSA optimization Pass2ConstantInlining
Alias (byte) main::i#2 = (byte~) main::$1 
Successful SSA optimization Pass2AliasElimination
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 1 initial phi equivalence classes
Coalesced [20] main::i#3 ← main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2
  [7] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1
  [8] *((const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28 + (byte) main::i#2) ← (byte~) main::$3
  [9] (byte~) main::$5 ← (byte) main::i#2 << (byte) 2
  [10] *((const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28 + (byte) main::i#2) ← (byte~) main::$5
  [11] (byte~) main::$7 ← (byte) main::i#2 << (byte) 3
  [12] *((const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28 + (byte) main::i#2) ← (byte~) main::$7
  [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2
  [14] (signed byte~) main::$12 ← (signed byte) main::sb#0 << (byte) 1
  [15] *((const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28 + (byte) main::i#2) ← (byte)(signed byte~) main::$12
  [16] (byte) main::i#1 ← ++ (byte) main::i#2
  [17] if((byte) main::i#1!=(byte) $b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [18] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(signed byte~) main::$12 11.0
(byte~) main::$3 22.0
(byte~) main::$5 22.0
(byte~) main::$7 22.0
(byte*) main::SCREEN
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(signed byte) main::sb
(signed byte) main::sb#0 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Added variable main::$3 to zero page equivalence class [ main::$3 ]
Added variable main::$5 to zero page equivalence class [ main::$5 ]
Added variable main::$7 to zero page equivalence class [ main::$7 ]
Added variable main::sb#0 to zero page equivalence class [ main::sb#0 ]
Added variable main::$12 to zero page equivalence class [ main::$12 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::$3 ]
[ main::$5 ]
[ main::$7 ]
[ main::sb#0 ]
[ main::$12 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::$3 ]
Allocated zp ZP_BYTE:4 [ main::$5 ]
Allocated zp ZP_BYTE:5 [ main::$7 ]
Allocated zp ZP_BYTE:6 [ main::sb#0 ]
Allocated zp ZP_BYTE:7 [ main::$12 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Check that multiplication by factors of 2 is converted to shifts
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label _3 = 3
    .label _5 = 4
    .label _7 = 5
    .label _12 = 7
    .label sb = 6
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z i
    tya
    sta SCREEN,y
    // [7] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z _3
    // [8] *((const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28 + (byte) main::i#2) ← (byte~) main::$3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _3
    ldy.z i
    sta SCREEN+1*$28,y
    // [9] (byte~) main::$5 ← (byte) main::i#2 << (byte) 2 -- vbuz1=vbuz2_rol_2 
    lda.z i
    asl
    asl
    sta.z _5
    // [10] *((const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28 + (byte) main::i#2) ← (byte~) main::$5 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _5
    ldy.z i
    sta SCREEN+2*$28,y
    // [11] (byte~) main::$7 ← (byte) main::i#2 << (byte) 3 -- vbuz1=vbuz2_rol_3 
    lda.z i
    asl
    asl
    asl
    sta.z _7
    // [12] *((const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28 + (byte) main::i#2) ← (byte~) main::$7 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _7
    ldy.z i
    sta SCREEN+3*$28,y
    // [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 -- vbsz1=_neg_vbsz2 
    lda.z i
    eor #$ff
    clc
    adc #1
    sta.z sb
    // [14] (signed byte~) main::$12 ← (signed byte) main::sb#0 << (byte) 1 -- vbsz1=vbsz2_rol_1 
    lda.z sb
    asl
    sta.z _12
    // [15] *((const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28 + (byte) main::i#2) ← (byte)(signed byte~) main::$12 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _12
    ldy.z i
    sta SCREEN+5*$28,y
    // [16] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [17] if((byte) main::i#1!=(byte) $b) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$b
    cmp.z i
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [18] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [7] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [9] (byte~) main::$5 ← (byte) main::i#2 << (byte) 2 [ main::i#2 main::$5 ] ( main:2 [ main::i#2 main::$5 ] ) always clobbers reg byte a 
Statement [11] (byte~) main::$7 ← (byte) main::i#2 << (byte) 3 [ main::i#2 main::$7 ] ( main:2 [ main::i#2 main::$7 ] ) always clobbers reg byte a 
Statement [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 [ main::i#2 main::sb#0 ] ( main:2 [ main::i#2 main::sb#0 ] ) always clobbers reg byte a 
Statement [14] (signed byte~) main::$12 ← (signed byte) main::sb#0 << (byte) 1 [ main::i#2 main::$12 ] ( main:2 [ main::i#2 main::$12 ] ) always clobbers reg byte a 
Statement [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::i#2 ] ( main:2 [ main::i#2 ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::$3 ] ( main:2 [ main::i#2 main::$3 ] ) always clobbers reg byte a 
Statement [9] (byte~) main::$5 ← (byte) main::i#2 << (byte) 2 [ main::i#2 main::$5 ] ( main:2 [ main::i#2 main::$5 ] ) always clobbers reg byte a 
Statement [11] (byte~) main::$7 ← (byte) main::i#2 << (byte) 3 [ main::i#2 main::$7 ] ( main:2 [ main::i#2 main::$7 ] ) always clobbers reg byte a 
Statement [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 [ main::i#2 main::sb#0 ] ( main:2 [ main::i#2 main::sb#0 ] ) always clobbers reg byte a 
Statement [14] (signed byte~) main::$12 ← (signed byte) main::sb#0 << (byte) 1 [ main::i#2 main::$12 ] ( main:2 [ main::i#2 main::$12 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::$3 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$5 ] : zp ZP_BYTE:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::$7 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::sb#0 ] : zp ZP_BYTE:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::$12 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:3 [ main::$3 ] 22: zp ZP_BYTE:4 [ main::$5 ] 22: zp ZP_BYTE:5 [ main::$7 ] 22: zp ZP_BYTE:6 [ main::sb#0 ] 11: zp ZP_BYTE:7 [ main::$12 ] 
Uplift Scope [] 

Uplifting [main] best 863 combination reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::$3 ] reg byte a [ main::$5 ] reg byte a [ main::$7 ] zp ZP_BYTE:6 [ main::sb#0 ] zp ZP_BYTE:7 [ main::$12 ] 
Limited combination testing to 100 combinations of 3072 possible.
Uplifting [] best 863 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::sb#0 ]
Uplifting [main] best 803 combination reg byte a [ main::sb#0 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:7 [ main::$12 ]
Uplifting [main] best 743 combination reg byte a [ main::$12 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Check that multiplication by factors of 2 is converted to shifts
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
    // [7] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // [8] *((const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28 + (byte) main::i#2) ← (byte~) main::$3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+1*$28,x
    // [9] (byte~) main::$5 ← (byte) main::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // [10] *((const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28 + (byte) main::i#2) ← (byte~) main::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+2*$28,x
    // [11] (byte~) main::$7 ← (byte) main::i#2 << (byte) 3 -- vbuaa=vbuxx_rol_3 
    txa
    asl
    asl
    asl
    // [12] *((const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28 + (byte) main::i#2) ← (byte~) main::$7 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+3*$28,x
    // [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // [14] (signed byte~) main::$12 ← (signed byte) main::sb#0 << (byte) 1 -- vbsaa=vbsaa_rol_1 
    asl
    // [15] *((const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28 + (byte) main::i#2) ← (byte)(signed byte~) main::$12 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+5*$28,x
    // [16] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [17] if((byte) main::i#1!=(byte) $b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [18] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(signed byte~) main::$12 reg byte a 11.0
(byte~) main::$3 reg byte a 22.0
(byte~) main::$5 reg byte a 22.0
(byte~) main::$7 reg byte a 22.0
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 11.0
(signed byte) main::sb
(signed byte) main::sb#0 reg byte a 22.0

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::$3 ]
reg byte a [ main::$5 ]
reg byte a [ main::$7 ]
reg byte a [ main::sb#0 ]
reg byte a [ main::$12 ]


FINAL ASSEMBLER
Score: 641

  // File Comments
// Check that multiplication by factors of 2 is converted to shifts
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // main::@1
  b1:
    // (SCREEN+0*40)[i] = i*1
    // [6] *((const byte*) main::SCREEN#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta SCREEN,x
    // i*2
    // [7] (byte~) main::$3 ← (byte) main::i#2 << (byte) 1 -- vbuaa=vbuxx_rol_1 
    txa
    asl
    // (SCREEN+1*40)[i] = i*2
    // [8] *((const byte*) main::SCREEN#0+(byte)(number) 1*(number) $28 + (byte) main::i#2) ← (byte~) main::$3 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+1*$28,x
    // i*4
    // [9] (byte~) main::$5 ← (byte) main::i#2 << (byte) 2 -- vbuaa=vbuxx_rol_2 
    txa
    asl
    asl
    // (SCREEN+2*40)[i] = i*4
    // [10] *((const byte*) main::SCREEN#0+(byte)(number) 2*(number) $28 + (byte) main::i#2) ← (byte~) main::$5 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+2*$28,x
    // i*8
    // [11] (byte~) main::$7 ← (byte) main::i#2 << (byte) 3 -- vbuaa=vbuxx_rol_3 
    txa
    asl
    asl
    asl
    // (SCREEN+3*40)[i] = i*8
    // [12] *((const byte*) main::SCREEN#0+(byte)(number) 3*(number) $28 + (byte) main::i#2) ← (byte~) main::$7 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+3*$28,x
    // sb = -(signed byte)i
    // [13] (signed byte) main::sb#0 ← - (signed byte)(byte) main::i#2 -- vbsaa=_neg_vbsxx 
    txa
    eor #$ff
    clc
    adc #1
    // sb*2
    // [14] (signed byte~) main::$12 ← (signed byte) main::sb#0 << (byte) 1 -- vbsaa=vbsaa_rol_1 
    asl
    // (SCREEN+5*40)[i] = (byte)(sb*2)
    // [15] *((const byte*) main::SCREEN#0+(byte)(number) 5*(number) $28 + (byte) main::i#2) ← (byte)(signed byte~) main::$12 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN+5*$28,x
    // for(byte i: 0..10)
    // [16] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [17] if((byte) main::i#1!=(byte) $b) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$b
    bne b1
    // main::@return
    // }
    // [18] return 
    rts
}
  // File Data

