__constant char BINARY = 2
__constant char * const COLORRAM = (char *) 55296
__constant char DECIMAL = $a
__constant char * const DEFAULT_SCREEN = (char *) 1024
__constant char DIGITS[] = "0123456789abcdef"z
__constant char HEXADECIMAL = $10
__constant const char LIGHT_BLUE = $e
__constant char OCTAL = 8
__constant char OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS = 1
__constant char RADIX::BINARY = 2
__constant char RADIX::DECIMAL = $a
__constant char RADIX::HEXADECIMAL = $10
__constant char RADIX::OCTAL = 8
__constant unsigned int RADIX_BINARY_VALUES[] = { $8000, $4000, $2000, $1000, $800, $400, $200, $100, $80, $40, $20, $10, 8, 4, 2 }
__constant unsigned int RADIX_DECIMAL_VALUES[] = { $2710, $3e8, $64, $a }
__constant unsigned int RADIX_HEXADECIMAL_VALUES[] = { $1000, $100, $10 }
__constant unsigned int RADIX_OCTAL_VALUES[] = { $8000, $1000, $200, $40, 8 }
__constant char SIZEOF_STRUCT_PRINTF_BUFFER_NUMBER = $c
__constant unsigned int STACK_BASE = $103
void __start()
void clrscr()
char clrscr::c
char clrscr::c#1 // reg byte y 20002.0
char clrscr::c#2 // reg byte y 12501.25
char clrscr::l
char clrscr::l#1 // reg byte x 2002.0
char clrscr::l#2 // reg byte x 333.6666666666667
char *clrscr::line_cols
char *clrscr::line_cols#1 // line_cols zp[2]:8 1001.0
char *clrscr::line_cols#5 // line_cols zp[2]:8 1500.375
char *clrscr::line_text
char *clrscr::line_text#1 // line_text zp[2]:16 667.3333333333334
char *clrscr::line_text#5 // line_text zp[2]:16 1714.7142857142858
void conio_c64_init()
__constant char * const conio_c64_init::BASIC_CURSOR_LINE = (char *) 214
char conio_c64_init::line
char conio_c64_init::line#0 // reg byte x 11.0
char conio_c64_init::line#2 // reg byte x 22.0
__loadstore char conio_cursor_x // zp[1]:20 50336.27516778524
__loadstore char conio_cursor_y // zp[1]:10 1019108.9458598725
__loadstore char *conio_line_color // zp[2]:11 708334.0032051282
__loadstore char *conio_line_text // zp[2]:13 706070.9552715656
__stackcall void cputc(char c)
__constant char cputc::OFFSET_STACK_C = 0
char cputc::c
char cputc::c#0 // reg byte a 1500001.5
void cputln()
void cscroll()
void gotoxy(char x , char y)
char *gotoxy::$5 // zp[2]:31 202.0
char *gotoxy::$6 // zp[2]:24 202.0
unsigned int gotoxy::$7 // zp[2]:24 151.5
unsigned int gotoxy::$8 // zp[2]:29 202.0
unsigned int gotoxy::$9 // zp[2]:24 202.0
unsigned int gotoxy::line_offset
unsigned int gotoxy::line_offset#0 // line_offset zp[2]:24 101.0
char gotoxy::x
__constant char gotoxy::x#2 = 0 // x
char gotoxy::y
char gotoxy::y#2 // reg byte x 71.0
char gotoxy::y#4 // reg byte x 67.33333333333333
void main()
__constant char main::s[6] = "3s  '"
__constant char main::s1[4] = "' '"
__constant char main::s10[6] = "3d  '"
__constant char main::s15[6] = "-3d '"
__constant char main::s20[7] = "+3d  '"
__constant char main::s25[6] = "03d '"
__constant char main::s30[6] = "o   '"
__constant char main::s35[6] = "x   '"
__constant char main::s4[3] = "'
"
__constant char main::s40[6] = "X   '"
__constant char main::s5[6] = "-3s '"
__constant char main::str[2] = "x"
__constant char main::str1[3] = "xx"
__constant char main::str2[4] = "xxx"
__constant char main::str3[5] = "xxxx"
void * memcpy(void *destination , void *source , unsigned int num)
void *memcpy::destination
void *memcpy::destination#2 // destination zp[2]:4
char *memcpy::dst
char *memcpy::dst#1 // dst zp[2]:4 1.00000000001E11
char *memcpy::dst#2 // dst zp[2]:4 1.0033333333466667E11
char *memcpy::dst#4 // dst zp[2]:4 2.000000002E9
unsigned int memcpy::num
void *memcpy::return
void *memcpy::source
void *memcpy::source#2 // source zp[2]:2
char *memcpy::src
char *memcpy::src#1 // src zp[2]:2 2.00000000002E11
char *memcpy::src#2 // src zp[2]:2 1.0025000000125E11
char *memcpy::src#4 // src zp[2]:2 1.000000001E9
char *memcpy::src_end
char *memcpy::src_end#0 // src_end zp[2]:6 1.262500000025E10
void * memset(void *str , char c , unsigned int num)
char memset::c
char memset::c#4 // reg byte x 1.4285714285857143E10
char *memset::dst
char *memset::dst#1 // dst zp[2]:2 2.00000000002E11
char *memset::dst#2 // dst zp[2]:2 1.3366666666833334E11
char *memset::dst#4 // dst zp[2]:2 2.000000002E9
char *memset::end
char *memset::end#0 // end zp[2]:4 1.6833333333666668E10
unsigned int memset::num
void *memset::return
void *memset::str
void *memset::str#3 // str zp[2]:2
__loadstore struct printf_buffer_number printf_buffer = {} // mem[12]
void printf_number_buffer(void (*putc)(char) , char buffer_sign , char *buffer_digits , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
unsigned int printf_number_buffer::$19 // zp[2]:18 1001.0
struct printf_buffer_number printf_number_buffer::buffer
char *printf_number_buffer::buffer_digits
char printf_number_buffer::buffer_sign
char printf_number_buffer::buffer_sign#0 // buffer_sign zp[1]:27 67.33333333333333
char printf_number_buffer::buffer_sign#1 // buffer_sign zp[1]:27 101.0
char printf_number_buffer::buffer_sign#10 // buffer_sign zp[1]:27 160.25
struct printf_format_number printf_number_buffer::format
char printf_number_buffer::format_justify_left
char printf_number_buffer::format_justify_left#0 // format_justify_left zp[1]:33 101.0
char printf_number_buffer::format_justify_left#10 // format_justify_left zp[1]:33 65.71875
char printf_number_buffer::format_min_length
char printf_number_buffer::format_min_length#2 // reg byte x 100.1
char printf_number_buffer::format_radix
char printf_number_buffer::format_sign_always
char printf_number_buffer::format_upper_case
char printf_number_buffer::format_upper_case#1 // format_upper_case zp[1]:28 202.0
char printf_number_buffer::format_upper_case#10 // format_upper_case zp[1]:28 40.81481481481482
char printf_number_buffer::format_zero_padding
char printf_number_buffer::format_zero_padding#0 // format_zero_padding zp[1]:26 202.0
char printf_number_buffer::format_zero_padding#10 // format_zero_padding zp[1]:26 94.06060606060605
signed char printf_number_buffer::len
signed char printf_number_buffer::len#0 // reg byte y 1501.5
signed char printf_number_buffer::len#1 // reg byte y 2002.0
signed char printf_number_buffer::len#2 // reg byte y 3003.0
signed char printf_number_buffer::padding
signed char printf_number_buffer::padding#1 // padding zp[1]:23 1001.0
signed char printf_number_buffer::padding#10 // padding zp[1]:23 182.0
void (*printf_number_buffer::putc)(char)
void printf_padding(void (*putc)(char) , char pad , char length)
char printf_padding::i
char printf_padding::i#1 // i zp[1]:15 200002.0
char printf_padding::i#2 // i zp[1]:15 60000.600000000006
char printf_padding::length
char printf_padding::length#0 // length zp[1]:22 2002.0
char printf_padding::length#1 // length zp[1]:22 2002.0
char printf_padding::length#2 // length zp[1]:22 2002.0
char printf_padding::length#3 // length zp[1]:22 202.0
char printf_padding::length#4 // length zp[1]:22 202.0
char printf_padding::length#6 // length zp[1]:22 14743.714285714286
char printf_padding::pad
char printf_padding::pad#7 // pad zp[1]:21 14285.857142857143
void (*printf_padding::putc)(char)
void printf_sint(void (*putc)(char) , int value , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_sint::format
char printf_sint::format_justify_left
char printf_sint::format_justify_left#16 // format_justify_left zp[1]:33 9.181818181818182
char printf_sint::format_min_length
char printf_sint::format_radix
char printf_sint::format_sign_always
char printf_sint::format_sign_always#16 // reg byte x 33.666666666666664
char printf_sint::format_upper_case
char printf_sint::format_zero_padding
char printf_sint::format_zero_padding#16 // format_zero_padding zp[1]:26 8.416666666666666
void (*printf_sint::putc)(char)
unsigned int printf_sint::uvalue
int printf_sint::value
int printf_sint::value#0 // value zp[2]:8 101.0
int printf_sint::value#17 // value zp[2]:8 80.8
int printf_sint::value#19 // value zp[2]:8 303.0
void printf_str(void (*putc)(char) , const char *s)
char printf_str::c
char printf_str::c#1 // reg byte a 100001.0
void (*printf_str::putc)(char)
const char *printf_str::s
const char *printf_str::s#0 // s zp[2]:16 40000.4
const char *printf_str::s#2 // s zp[2]:16 202.0
const char *printf_str::s#48 // s zp[2]:16 155002.0
const char *printf_str::s#49 // s zp[2]:16 10102.0
void printf_string(void (*putc)(char) , char *str , char format_min_length , char format_justify_left)
unsigned int printf_string::$9 // zp[2]:18 101.0
struct printf_format_string printf_string::format
char printf_string::format_justify_left
char printf_string::format_justify_left#10 // format_justify_left zp[1]:33 12.625
char printf_string::format_min_length
signed char printf_string::len
signed char printf_string::len#0 // reg byte a 202.0
signed char printf_string::padding
signed char printf_string::padding#1 // padding zp[1]:26 101.0
signed char printf_string::padding#3 // padding zp[1]:26 33.666666666666664
void (*printf_string::putc)(char)
char *printf_string::str
char *printf_string::str#10 // str zp[2]:16 14.428571428571429
void printf_uint(void (*putc)(char) , unsigned int uvalue , char format_min_length , char format_justify_left , char format_sign_always , char format_zero_padding , char format_upper_case , char format_radix)
struct printf_format_number printf_uint::format
char printf_uint::format_justify_left
char printf_uint::format_min_length
char printf_uint::format_radix
char printf_uint::format_radix#12 // reg byte x 33.666666666666664
char printf_uint::format_sign_always
char printf_uint::format_upper_case
char printf_uint::format_upper_case#12 // format_upper_case zp[1]:28 16.833333333333332
char printf_uint::format_zero_padding
void (*printf_uint::putc)(char)
unsigned int printf_uint::uvalue
unsigned int printf_uint::uvalue#12 // uvalue zp[2]:8 50.5
unsigned int strlen(char *str)
unsigned int strlen::len
unsigned int strlen::len#1 // len zp[2]:18 100001.0
unsigned int strlen::len#2 // len zp[2]:18 40220.8
unsigned int strlen::return
unsigned int strlen::return#2 // return zp[2]:18 2002.0
unsigned int strlen::return#3 // return zp[2]:18 202.0
char *strlen::str
char *strlen::str#0 // str zp[2]:2 200002.0
char *strlen::str#2 // str zp[2]:2 202.0
char *strlen::str#3 // str zp[2]:2 103334.66666666666
char *strlen::str#5 // str zp[2]:2 10102.0
char * strupr(char *str)
char strupr::$0 // reg byte a 200002.0
char *strupr::return
char *strupr::src
char *strupr::src#1 // src zp[2]:4 200002.0
char *strupr::src#2 // src zp[2]:4 71429.28571428571
char *strupr::str
__constant char *strupr::str#0 = (char *)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS // str
char toupper(char ch)
char toupper::ch
char toupper::ch#0 // reg byte a 1700002.0000000002
char toupper::return
char toupper::return#0 // reg byte a 2000002.0
char toupper::return#2 // reg byte a 1033334.6666666667
char toupper::return#3 // reg byte a 200002.0
void utoa(unsigned int value , char *buffer , char radix)
char utoa::$10 // reg byte a 20002.0
char utoa::$11 // reg byte x 2002.0
char utoa::$4 // reg byte a 20002.0
char *utoa::buffer
char *utoa::buffer#10 // buffer zp[2]:18 2800.4000000000005
char *utoa::buffer#15 // buffer zp[2]:18 15001.5
char *utoa::buffer#3 // buffer zp[2]:18 2002.0
char *utoa::buffer#4 // buffer zp[2]:18 20002.0
char utoa::digit
char utoa::digit#1 // digit zp[1]:21 20002.0
char utoa::digit#2 // digit zp[1]:21 2666.9333333333334
unsigned int utoa::digit_value
unsigned int utoa::digit_value#0 // digit_value zp[2]:6 6000.6
unsigned int *utoa::digit_values
unsigned int *utoa::digit_values#8 // digit_values zp[2]:2 588.2941176470588
char utoa::max_digits
char utoa::max_digits#7 // max_digits zp[1]:22 588.2941176470588
char utoa::radix
char utoa::radix#1 // reg byte x 202.0
char utoa::radix#2 // reg byte x 1026.25
char utoa::started
char utoa::started#2 // reg byte x 4286.142857142857
char utoa::started#4 // reg byte x 10001.0
unsigned int utoa::value
unsigned int utoa::value#0 // value zp[2]:8 10001.0
unsigned int utoa::value#1 // value zp[2]:8 202.0
unsigned int utoa::value#10 // value zp[2]:8 200.5
unsigned int utoa::value#2 // value zp[2]:8 101.0
unsigned int utoa::value#3 // value zp[2]:8 5125.625
unsigned int utoa::value#7 // value zp[2]:8 15001.5
unsigned int utoa_append(char *buffer , unsigned int value , unsigned int sub)
char *utoa_append::buffer
char *utoa_append::buffer#0 // buffer zp[2]:18 13750.25
char utoa_append::digit
char utoa_append::digit#1 // reg byte x 1.0000001E7
char utoa_append::digit#2 // reg byte x 1.00500015E7
unsigned int utoa_append::return
unsigned int utoa_append::return#0 // return zp[2]:8 20002.0
unsigned int utoa_append::sub
unsigned int utoa_append::sub#0 // sub zp[2]:6 3335000.5
unsigned int utoa_append::value
unsigned int utoa_append::value#0 // value zp[2]:8 36667.33333333333
unsigned int utoa_append::value#1 // value zp[2]:8 2.0000002E7
unsigned int utoa_append::value#2 // value zp[2]:8 5018334.166666666

reg byte x [ conio_c64_init::line#2 conio_c64_init::line#0 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
zp[2]:16 [ printf_str::s#48 printf_str::s#49 printf_str::s#2 printf_str::s#0 printf_string::str#10 clrscr::line_text#5 clrscr::line_text#1 ]
reg byte x [ printf_sint::format_sign_always#16 ]
zp[1]:33 [ printf_sint::format_justify_left#16 printf_number_buffer::format_justify_left#10 printf_number_buffer::format_justify_left#0 printf_string::format_justify_left#10 ]
zp[1]:26 [ printf_sint::format_zero_padding#16 printf_number_buffer::format_zero_padding#10 printf_number_buffer::format_zero_padding#0 printf_string::padding#3 printf_string::padding#1 ]
zp[2]:8 [ printf_sint::value#19 printf_sint::value#0 printf_sint::value#17 utoa::value#3 utoa::value#7 utoa::value#10 utoa::value#1 utoa::value#2 utoa::value#0 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 printf_uint::uvalue#12 clrscr::line_cols#5 clrscr::line_cols#1 ]
reg byte x [ printf_uint::format_radix#12 ]
zp[1]:28 [ printf_uint::format_upper_case#12 printf_number_buffer::format_upper_case#10 printf_number_buffer::format_upper_case#1 ]
zp[1]:15 [ printf_padding::i#2 printf_padding::i#1 ]
reg byte x [ utoa::radix#2 utoa::radix#1 ]
zp[1]:22 [ utoa::max_digits#7 printf_padding::length#6 printf_padding::length#1 printf_padding::length#2 printf_padding::length#0 printf_padding::length#3 printf_padding::length#4 ]
zp[1]:21 [ utoa::digit#2 utoa::digit#1 printf_padding::pad#7 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:18 [ utoa::buffer#10 utoa::buffer#15 utoa::buffer#4 utoa::buffer#3 utoa_append::buffer#0 strlen::len#2 strlen::len#1 strlen::return#3 strlen::return#2 printf_string::$9 printf_number_buffer::$19 ]
reg byte x [ printf_number_buffer::format_min_length#2 ]
zp[1]:27 [ printf_number_buffer::buffer_sign#10 printf_number_buffer::buffer_sign#0 printf_number_buffer::buffer_sign#1 ]
reg byte y [ printf_number_buffer::len#2 printf_number_buffer::len#0 printf_number_buffer::len#1 ]
zp[1]:23 [ printf_number_buffer::padding#10 printf_number_buffer::padding#1 ]
zp[2]:2 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 utoa::digit_values#8 strlen::str#3 strlen::str#5 strlen::str#2 strlen::str#0 ]
reg byte x [ memset::c#4 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[1]:20 [ conio_cursor_x ]
zp[1]:10 [ conio_cursor_y ]
zp[2]:13 [ conio_line_text ]
zp[2]:11 [ conio_line_color ]
reg byte a [ cputc::c#0 ]
zp[2]:24 [ gotoxy::$7 gotoxy::$9 gotoxy::line_offset#0 gotoxy::$6 ]
zp[2]:29 [ gotoxy::$8 ]
zp[2]:31 [ gotoxy::$5 ]
reg byte a [ printf_str::c#1 ]
reg byte a [ printf_string::len#0 ]
reg byte a [ utoa::$4 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:6 [ memcpy::src_end#0 utoa::digit_value#0 utoa_append::sub#0 ]
zp[2]:4 [ memset::end#0 strupr::src#2 strupr::src#1 memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
reg byte a [ toupper::return#3 ]
reg byte a [ strupr::$0 ]
mem[12] [ printf_buffer ]
