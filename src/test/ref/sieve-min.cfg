
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call memset 
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [2] (byte*) main::sieve_i#2 ← phi( main/(const byte*) sieve+(word) 2 main::@3/(byte*) main::sieve_i#1 )
  [2] (word) main::i#12 ← phi( main/(word) 2 main::@3/(word) main::i#2 )
  [3] if((word) main::i#12<(const nomodify byte) SQRT_COUNT) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@1 main::@9
  [4] (byte*) print_char_cursor#29 ← phi( main::@9/(byte*) print_char_cursor#35 main::@1/(const byte*) print_screen#0 )
  [4] (word) main::i#10 ← phi( main::@9/(word) main::i#3 main::@1/(byte) 2 )
  [5] if((word) main::i#10<(word) $4c7) goto main::@8
  to:main::@11
main::@11: scope:[main]  from main::@11 main::@7
  [6] *((const nomodify byte*) SCREEN+(word) $3e7) ← ++ *((const nomodify byte*) SCREEN+(word) $3e7)
  to:main::@11
main::@8: scope:[main]  from main::@7
  [7] (byte*~) main::$16 ← (const byte*) sieve + (word) main::i#10
  [8] if((byte) 0!=*((byte*~) main::$16)) goto main::@9
  to:main::@10
main::@10: scope:[main]  from main::@8
  [9] (word) print_uint::w#0 ← (word) main::i#10
  [10] call print_uint 
  to:main::@12
main::@12: scope:[main]  from main::@10
  [11] phi()
  [12] call print_char 
  to:main::@9
main::@9: scope:[main]  from main::@12 main::@8
  [13] (byte*) print_char_cursor#35 ← phi( main::@12/(byte*) print_char_cursor#21 main::@8/(byte*) print_char_cursor#29 )
  [14] (word) main::i#3 ← ++ (word) main::i#10
  to:main::@7
main::@2: scope:[main]  from main::@1
  [15] if((byte) 0!=*((byte*) main::sieve_i#2)) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@2
  [16] (word) main::j#0 ← (word) main::i#12 << (byte) 1
  [17] (byte*) main::s#0 ← (const byte*) sieve + (word) main::j#0
  to:main::@4
main::@4: scope:[main]  from main::@5 main::@6
  [18] (byte*) main::s#2 ← phi( main::@5/(byte*) main::s#1 main::@6/(byte*) main::s#0 )
  [18] (word) main::j#2 ← phi( main::@5/(word) main::j#1 main::@6/(word) main::j#0 )
  [19] if((word) main::j#2<(const nomodify word) COUNT) goto main::@5
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [20] (word) main::i#2 ← ++ (word) main::i#12
  [21] (byte*) main::sieve_i#1 ← ++ (byte*) main::sieve_i#2
  to:main::@1
main::@5: scope:[main]  from main::@4
  [22] *((byte*) main::s#2) ← (byte) 1
  [23] (byte*) main::s#1 ← (byte*) main::s#2 + (word) main::i#12
  [24] (word) main::j#1 ← (word) main::j#2 + (word) main::i#12
  to:main::@4

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main
  [25] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [26] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [27] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [28] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [29] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [30] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) print_uint((word) print_uint::w)
print_uint: scope:[print_uint]  from main::@10
  [31] (byte) print_uchar::b#0 ← > (word) print_uint::w#0
  [32] call print_uchar 
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [33] (byte) print_uchar::b#1 ← < (word) print_uint::w#0
  [34] call print_uchar 
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [35] return 
  to:@return

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@12 print_uchar print_uchar::@1
  [36] (byte*) print_char_cursor#20 ← phi( main::@12/(byte*) print_char_cursor#21 print_uchar/(byte*) print_char_cursor#28 print_uchar::@1/(byte*) print_char_cursor#21 )
  [36] (byte) print_char::ch#3 ← phi( main::@12/(byte) ' ' print_uchar/(byte) print_char::ch#0 print_uchar::@1/(byte) print_char::ch#1 )
  [37] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#3
  [38] (byte*) print_char_cursor#21 ← ++ (byte*) print_char_cursor#20
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [39] return 
  to:@return

(void()) print_uchar((byte) print_uchar::b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [40] (byte*) print_char_cursor#28 ← phi( print_uint/(byte*) print_char_cursor#29 print_uint::@1/(byte*) print_char_cursor#21 )
  [40] (byte) print_uchar::b#2 ← phi( print_uint/(byte) print_uchar::b#0 print_uint::@1/(byte) print_uchar::b#1 )
  [41] (byte~) print_uchar::$0 ← (byte) print_uchar::b#2 >> (byte) 4
  [42] (byte) print_char::ch#0 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$0)
  [43] call print_char 
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [44] (byte~) print_uchar::$2 ← (byte) print_uchar::b#2 & (byte) $f
  [45] (byte) print_char::ch#1 ← *((const to_nomodify byte*) print_hextab + (byte~) print_uchar::$2)
  [46] call print_char 
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [47] return 
  to:@return
