@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm() {{ ff:
    jmp (main.f)
 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()

(void()) main()
main: scope:[main]  from @2
  [5] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [6] (byte) main::i#2 ← phi( main/(byte) 0 main::@4/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] (byte) main::i#1 ← ++ (byte) main::i#2
  [8] (byte~) main::$0 ← (byte) main::i#1 & (byte) 1
  [9] if((byte~) main::$0==(byte) 0) goto main::@3
  to:main::@4
main::@3: scope:[main]  from main::@2
  [10] phi()
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@3
  [11] (void()*) main::f#3 ← phi( main::@3/&(void()) fn1() main::@2/&(void()) fn2() )
  kickasm( uses main::f#3) {{ jsr ff
         }}
  to:main::@1

(void()) fn2()
fn2: scope:[fn2]  from
  [13] *((const nomodify byte*) fn2::BGCOL) ← ++ *((const nomodify byte*) fn2::BGCOL)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [14] return 
  to:@return

(void()) fn1()
fn1: scope:[fn1]  from
  [15] *((const nomodify byte*) fn1::BORDERCOL) ← ++ *((const nomodify byte*) fn1::BORDERCOL)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [16] return 
  to:@return
