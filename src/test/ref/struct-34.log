Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  point_x#0 = 2
  point_y#0 = 3
  SCREEN[0] = point_x#0
  SCREEN[1] = point_y#0
  to:main::@return
main::@return: scope:[main]  from main
  point_y#5 = phi( main/point_y#0 )
  point_x#5 = phi( main/point_x#0 )
  point_x#1 = point_x#5
  point_y#1 = point_y#5
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  point_x#2 = 0
  point_y#2 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  point_y#8 = phi( __start::__init1/point_y#2 )
  point_x#8 = phi( __start::__init1/point_x#2 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  point_y#6 = phi( __start::@1/point_y#1 )
  point_x#6 = phi( __start::@1/point_x#1 )
  point_x#3 = point_x#6
  point_y#3 = point_y#6
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  point_y#7 = phi( __start::@2/point_y#3 )
  point_x#7 = phi( __start::@2/point_x#3 )
  point_x#4 = point_x#7
  point_y#4 = point_y#7
  return 
  to:@return

SYMBOL TABLE SSA
__constant char * const SCREEN = (char *)$400
void __start()
void main()
char point_x
char point_x#0
char point_x#1
char point_x#2
char point_x#3
char point_x#4
char point_x#5
char point_x#6
char point_x#7
char point_x#8
char point_y
char point_y#0
char point_y#1
char point_y#2
char point_y#3
char point_y#4
char point_y#5
char point_y#6
char point_y#7
char point_y#8

Adding number conversion cast (unumber) 2 in point_x#0 = 2
Adding number conversion cast (unumber) 3 in point_y#0 = 3
Adding number conversion cast (unumber) 0 in SCREEN[0] = point_x#0
Adding number conversion cast (unumber) 1 in SCREEN[1] = point_y#0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast point_x#0 = (unumber)2
Inlining cast point_y#0 = (unumber)3
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 2
Finalized unsigned number type (char) 3
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias point_x#0 = point_x#5 point_x#1 
Alias point_y#0 = point_y#5 point_y#1 
Alias point_x#2 = point_x#8 
Alias point_y#2 = point_y#8 
Alias point_x#3 = point_x#6 point_x#7 point_x#4 
Alias point_y#3 = point_y#6 point_y#7 point_y#4 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values point_x#3 point_x#0
Identical Phi Values point_y#3 point_y#0
Successful SSA optimization Pass2IdenticalPhiElimination
Constant point_x#0 = 2
Constant point_y#0 = 3
Constant point_x#2 = 0
Constant point_y#2 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [2] SCREEN[0] = point_x#0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant point_x#2
Eliminating unused constant point_y#2
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Consolidated array index constant in *(SCREEN+1)
Successful SSA optimization Pass2ConstantAdditionElimination
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *SCREEN = point_x#0
  [1] *(SCREEN+1) = point_y#0
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char point_x
char point_y

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *SCREEN = point_x#0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *(SCREEN+1) = point_y#0 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [Point] best 21 combination 
Uplifting [main] best 21 combination 
Uplifting [] best 21 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Struct - forced __ssa
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-34.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const point_x = 2
  .const point_y = 3
  .label SCREEN = $400
.segment Code
  // main
main: {
    // [0] *SCREEN = point_x#0 -- _deref_pbuc1=vbuc2 
    lda #point_x
    sta SCREEN
    // [1] *(SCREEN+1) = point_y#0 -- _deref_pbuc1=vbuc2 
    lda #point_y
    sta SCREEN+1
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant char * const SCREEN = (char *) 1024
void main()
char point_x
__constant char point_x#0 = 2 // point_x
char point_y
__constant char point_y#0 = 3 // point_y



FINAL ASSEMBLER
Score: 18

  // File Comments
// Struct - forced __ssa
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-34.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const point_x = 2
  .const point_y = 3
  .label SCREEN = $400
.segment Code
  // main
main: {
    // SCREEN[0] = point.x
    // [0] *SCREEN = point_x#0 -- _deref_pbuc1=vbuc2 
    lda #point_x
    sta SCREEN
    // SCREEN[1] = point.y
    // [1] *(SCREEN+1) = point_y#0 -- _deref_pbuc1=vbuc2 
    lda #point_y
    sta SCREEN+1
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

