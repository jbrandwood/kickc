
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::SCREEN[main::i#2] = 'a'
  main::i#1 = main::i#2 + rangenext(0,2)
  main::$0 = main::i#1 != rangelast(0,2)
  unroll if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool main::$0
__constant char *main::SCREEN = (char *)$400
char main::i
char main::i#0
char main::i#1
char main::i#2

Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Simple Condition main::$0 [5] unroll if(main::i#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [3] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [5] unroll if(main::i#1!=rangelast(0,2)) goto main::@1 to 3
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [3] unroll if(main::i#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Unrolling loop Loop head: main::@1 tails: main::@1 blocks: main::@1 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values main::i#2 main::i#0
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [3] if(main::i#1==3) goto main::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [2] main::i#1 = ++ main::i#0
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#1 = ++main::i#0
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [3] if(main::i#1==3) goto main::@return
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero main::SCREEN in [1] main::SCREEN[main::i#0] = 'a'
Successful SSA optimization PassNSimplifyExpressionWithZero
Unrolling loop Loop head: main::@1_1 tails: main::@1_1 blocks: main::@1_1 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values main::i#3 main::i#1
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [4] if(main::i#4==3) goto main::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [3] main::i#4 = ++ main::i#1
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#4 = ++main::i#1
Successful SSA optimization Pass2ConstantIdentification
if() condition always false - eliminating [4] if(main::i#4==3) goto main::@return
Successful SSA optimization Pass2ConstantIfs
Unrolling loop Loop head: main::@1_2 tails: main::@1_2 blocks: main::@1_2 
Successful SSA optimization Pass2LoopUnroll
Identical Phi Values main::i#5 main::i#4
Successful SSA optimization Pass2IdenticalPhiElimination
Negating conditional jump and destination [5] if(main::i#6==3) goto main::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [4] main::i#6 = ++ main::i#4
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::i#6 = ++main::i#4
Successful SSA optimization Pass2ConstantIdentification
Removing PHI-reference to removed block (main::@1_2) in block main::@1_3
if() condition always true - replacing block destination [5] if(main::i#6==3) goto main::@return
Successful SSA optimization Pass2ConstantIfs
Eliminating variable main::i#7 from unused block main::@1_3
Eliminating variable main::i#8 from unused block main::@1_3
Removing unused block main::@1_3
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused constant main::i#6
Successful SSA optimization PassNEliminateUnusedVars
Inlining constant with different constant siblings main::i#0
Inlining constant with different constant siblings main::i#1
Inlining constant with different constant siblings main::i#4
Constant inlined main::i#4 = ++++0
Constant inlined main::i#0 = 0
Constant inlined main::i#1 = ++0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::SCREEN+++0)
Consolidated array index constant in *(main::SCREEN+++++0)
Successful SSA optimization Pass2ConstantAdditionElimination
Simplifying constant integer increment ++0
Simplifying constant integer increment ++0
Successful SSA optimization Pass2ConstantSimplification
Simplifying constant integer increment ++1
Successful SSA optimization Pass2ConstantSimplification
Adding NOP phi() at start of main
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main
  [1] *main::SCREEN = 'a'
  to:main::@1_1
main::@1_1: scope:[main]  from main::@1
  [2] *(main::SCREEN+1) = 'a'
  to:main::@1_2
main::@1_2: scope:[main]  from main::@1_1
  [3] *(main::SCREEN+2) = 'a'
  to:main::@return
main::@return: scope:[main]  from main::@1_2
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
char main::i

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *main::SCREEN = 'a' [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *(main::SCREEN+1) = 'a' [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *(main::SCREEN+2) = 'a' [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 63 combination 
Uplifting [] best 63 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal unrolled ranged for() loop
  // Upstart
  // Commodore 64 PRG executable file
.file [name="unroll-for-min.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    jmp __b1
    // main::@1
  __b1:
    // [1] *main::SCREEN = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    jmp __b1_1
    // main::@1_1
  __b1_1:
    // [2] *(main::SCREEN+1) = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN+1
    jmp __b1_2
    // main::@1_2
  __b1_2:
    // [3] *(main::SCREEN+2) = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN+2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b1_1
Removing instruction jmp __b1_2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1:
Removing instruction __b1_1:
Removing instruction __b1_2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction lda #'a'
Removing instruction lda #'a'
Succesful ASM optimization Pass5UnnecesaryLoadElimination

FINAL SYMBOL TABLE
void main()
__constant char *main::SCREEN = (char *) 1024
char main::i



FINAL ASSEMBLER
Score: 20

  // File Comments
// Minimal unrolled ranged for() loop
  // Upstart
  // Commodore 64 PRG executable file
.file [name="unroll-for-min.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label SCREEN = $400
    // main::@1
    // SCREEN[i] = 'a'
    // [1] *main::SCREEN = 'a' -- _deref_pbuc1=vbuc2 
    lda #'a'
    sta SCREEN
    // main::@1_1
    // [2] *(main::SCREEN+1) = 'a' -- _deref_pbuc1=vbuc2 
    sta SCREEN+1
    // main::@1_2
    // [3] *(main::SCREEN+2) = 'a' -- _deref_pbuc1=vbuc2 
    sta SCREEN+2
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data

