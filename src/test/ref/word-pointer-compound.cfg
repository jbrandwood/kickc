@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$7 ← (byte) main::i#2 << (byte) 1
  [7] *((const word[]) main::words#0 + (byte~) main::$7) ← *((const word[]) main::words#0 + (byte~) main::$7) + (word) $101
  [8] (byte) main::i#1 ← ++ (byte) main::i#2
  [9] if((byte) main::i#1!=(byte) 3) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [10] (byte~) main::$0 ← > *((const word[]) main::words#0)
  [11] *((const byte*) main::SCREEN#0) ← (byte~) main::$0
  [12] (byte~) main::$1 ← < *((const word[]) main::words#0)
  [13] *((const byte*) main::SCREEN#0+(byte) 1) ← (byte~) main::$1
  [14] (byte~) main::$2 ← > *((const word[]) main::words#0+(byte) 1*(const byte) SIZEOF_WORD)
  [15] *((const byte*) main::SCREEN#0+(byte) 2) ← (byte~) main::$2
  [16] (byte~) main::$3 ← < *((const word[]) main::words#0+(byte) 1*(const byte) SIZEOF_WORD)
  [17] *((const byte*) main::SCREEN#0+(byte) 3) ← (byte~) main::$3
  [18] (byte~) main::$4 ← > *((const word[]) main::words#0+(byte) 2*(const byte) SIZEOF_WORD)
  [19] *((const byte*) main::SCREEN#0+(byte) 4) ← (byte~) main::$4
  [20] (byte~) main::$5 ← < *((const word[]) main::words#0+(byte) 2*(const byte) SIZEOF_WORD)
  [21] *((const byte*) main::SCREEN#0+(byte) 5) ← (byte~) main::$5
  to:main::@return
main::@return: scope:[main]  from main::@2
  [22] return 
  to:@return
