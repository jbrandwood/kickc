
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_mega65_init
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_mega65_init()
conio_mega65_init: scope:[conio_mega65_init]  from __start::__init1
  [9] phi()
  to:conio_mega65_init::SEI1
conio_mega65_init::SEI1: scope:[conio_mega65_init]  from conio_mega65_init
  asm { sei  }
  to:conio_mega65_init::@2
conio_mega65_init::@2: scope:[conio_mega65_init]  from conio_mega65_init::SEI1
  [11] phi()
  [12] call memoryRemap
  to:conio_mega65_init::@3
conio_mega65_init::@3: scope:[conio_mega65_init]  from conio_mega65_init::@2
  [13] *IO_KEY = $47
  [14] *IO_KEY = $53
  [15] *IO_BANK = *IO_BANK | CRAM2K
  [16] conio_mega65_init::line#0 = *conio_mega65_init::BASIC_CURSOR_LINE + 1
  [17] if(conio_mega65_init::line#0<$19) goto conio_mega65_init::@4
  to:conio_mega65_init::@1
conio_mega65_init::@4: scope:[conio_mega65_init]  from conio_mega65_init::@3
  [18] phi()
  to:conio_mega65_init::@1
conio_mega65_init::@1: scope:[conio_mega65_init]  from conio_mega65_init::@3 conio_mega65_init::@4
  [19] conio_mega65_init::line#2 = phi( conio_mega65_init::@3/$19-1, conio_mega65_init::@4/conio_mega65_init::line#0 )
  [20] gotoxy::y#2 = conio_mega65_init::line#2
  [21] call gotoxy
  to:conio_mega65_init::@return
conio_mega65_init::@return: scope:[conio_mega65_init]  from conio_mega65_init::@1
  [22] return 
  to:@return

__stackcall void cputc(char c)
cputc: scope:[cputc]  from printf_str::@2
  [23] cputc::c#0 = stackidx(char,cputc::OFFSET_STACK_C)
  [24] if(cputc::c#0=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [25] conio_line_text[conio_cursor_x] = cputc::c#0
  [26] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [27] conio_cursor_x = ++ conio_cursor_x
  [28] if(conio_cursor_x!=$50) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [29] phi()
  [30] call cputln
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [31] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [32] phi()
  [33] call cputln
  to:cputc::@return

void main()
main: scope:[main]  from __start::@1
  [34] phi()
  [35] call printf_str
  to:main::@return
main::@return: scope:[main]  from main
  [36] return 
  to:@return

void memoryRemap(char remapBlocks , unsigned int lowerPageOffset , unsigned int upperPageOffset)
memoryRemap: scope:[memoryRemap]  from conio_mega65_init::@2
  [37] memoryRemap::aVal = 0
  [38] memoryRemap::xVal = 0
  [39] memoryRemap::yVal = 0
  [40] memoryRemap::zVal = 0
  asm { ldaaVal ldxxVal ldyyVal ldzzVal map eom  }
  to:memoryRemap::@return
memoryRemap::@return: scope:[memoryRemap]  from memoryRemap
  [42] return 
  to:@return

void gotoxy(char x , char y)
gotoxy: scope:[gotoxy]  from conio_mega65_init::@1
  [43] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [44] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [45] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [46] conio_cursor_x = gotoxy::x#2
  [47] conio_cursor_y = gotoxy::y#4
  [48] gotoxy::$7 = (unsigned int)gotoxy::y#4
  [49] gotoxy::$8 = gotoxy::$7 << 2
  [50] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [51] gotoxy::line_offset#0 = gotoxy::$9 << 4
  [52] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [53] conio_line_text = gotoxy::$5
  [54] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [55] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [56] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [57] conio_line_text = conio_line_text + $50
  [58] conio_line_color = conio_line_color + $50
  [59] conio_cursor_x = 0
  [60] conio_cursor_y = ++ conio_cursor_y
  [61] call cscroll
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [62] return 
  to:@return

void printf_str(void (*putc)(char) , const char *s)
printf_str: scope:[printf_str]  from main
  [63] phi()
  to:printf_str::@1
printf_str::@1: scope:[printf_str]  from printf_str printf_str::@2
  [64] printf_str::s#2 = phi( printf_str/main::s, printf_str::@2/printf_str::s#0 )
  [65] printf_str::c#1 = *printf_str::s#2
  [66] printf_str::s#0 = ++ printf_str::s#2
  [67] if(0!=printf_str::c#1) goto printf_str::@2
  to:printf_str::@return
printf_str::@return: scope:[printf_str]  from printf_str::@1
  [68] return 
  to:@return
printf_str::@2: scope:[printf_str]  from printf_str::@1
  [69] stackpush(char) = printf_str::c#1
  [70] callexecute cputc 
  sideeffect stackpullpadding(1)
  to:printf_str::@1

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [72] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [73] phi()
  [74] call memcpy
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [75] phi()
  [76] call memcpy
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [77] phi()
  [78] call memset
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [79] phi()
  [80] call memset
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [81] conio_line_text = conio_line_text - $50
  [82] conio_line_color = conio_line_color - $50
  [83] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [84] return 
  to:@return

void * memcpy(void *destination , void *source , unsigned int num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [85] memcpy::destination#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN, cscroll::@2/(void *)COLORRAM )
  [85] memcpy::source#2 = phi( cscroll::@1/(void *)DEFAULT_SCREEN+$50, cscroll::@2/(void *)COLORRAM+$50 )
  [86] memcpy::src_end#0 = (char *)memcpy::source#2 + (unsigned int)$19*$50-$50
  [87] memcpy::src#4 = (char *)memcpy::source#2
  [88] memcpy::dst#4 = (char *)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [89] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [89] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [90] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [91] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [92] *memcpy::dst#2 = *memcpy::src#2
  [93] memcpy::dst#1 = ++ memcpy::dst#2
  [94] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void * memset(void *str , char c , unsigned int num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [95] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [95] memset::str#3 = phi( cscroll::@3/(void *)DEFAULT_SCREEN+(unsigned int)$19*$50-$50, cscroll::@4/(void *)COLORRAM+(unsigned int)$19*$50-$50 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [96] memset::end#0 = (char *)memset::str#3 + $50
  [97] memset::dst#4 = (char *)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [98] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [99] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [100] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [101] *memset::dst#2 = memset::c#4
  [102] memset::dst#1 = ++ memset::dst#2
  to:memset::@2
