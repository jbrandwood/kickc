Adding pointer type conversion cast (byte*) HEAP_START in (byte*) HEAP_START ← (number) $c000
Adding pointer type conversion cast (byte*) main::screen in (byte*) main::screen ← (number) $400
Identified constant variable (byte*) HEAP_START
Identified constant variable (byte*) main::screen
Culled Empty Block (label) malloc::@1
Culled Empty Block (label) @1
Culled Empty Block (label) @2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) HEAP_START#0 ← ((byte*)) (number) $c000
  (byte*) heap_head#0 ← (byte*) HEAP_START#0
  to:@3
malloc: scope:[malloc]  from main main::@3
  (word) malloc::size#2 ← phi( main/(word) malloc::size#0 main::@3/(word) malloc::size#1 )
  (byte*) heap_head#7 ← phi( main/(byte*) heap_head#13 main::@3/(byte*) heap_head#3 )
  (byte*) malloc::mem#0 ← (byte*) heap_head#7
  (byte*) heap_head#1 ← (byte*) heap_head#7 + (word) malloc::size#2
  (byte*) malloc::return#0 ← (byte*) malloc::mem#0
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  (byte*) heap_head#8 ← phi( malloc/(byte*) heap_head#1 )
  (byte*) malloc::return#4 ← phi( malloc/(byte*) malloc::return#0 )
  (byte*) malloc::return#1 ← (byte*) malloc::return#4
  (byte*) heap_head#2 ← (byte*) heap_head#8
  return 
  to:@return
free: scope:[free]  from main::@2 main::@5
  to:free::@return
free::@return: scope:[free]  from free
  return 
  to:@return
main: scope:[main]  from @3
  (byte*) heap_head#13 ← phi( @3/(byte*) heap_head#15 )
  (word) malloc::size#0 ← (number) $64
  call malloc 
  (byte*) malloc::return#2 ← (byte*) malloc::return#1
  to:main::@3
main::@3: scope:[main]  from main
  (byte*) heap_head#9 ← phi( main/(byte*) heap_head#2 )
  (byte*) malloc::return#5 ← phi( main/(byte*) malloc::return#2 )
  (byte*~) main::$0 ← (byte*) malloc::return#5
  (byte*) heap_head#3 ← (byte*) heap_head#9
  (byte*~) main::$1 ← ((byte*)) (byte*~) main::$0
  (byte*) main::buf1#0 ← (byte*~) main::$1
  (word) malloc::size#1 ← (number) $64
  call malloc 
  (byte*) malloc::return#3 ← (byte*) malloc::return#1
  to:main::@4
main::@4: scope:[main]  from main::@3
  (byte*) main::buf1#4 ← phi( main::@3/(byte*) main::buf1#0 )
  (byte*) heap_head#10 ← phi( main::@3/(byte*) heap_head#2 )
  (byte*) malloc::return#6 ← phi( main::@3/(byte*) malloc::return#3 )
  (byte*~) main::$2 ← (byte*) malloc::return#6
  (byte*) heap_head#4 ← (byte*) heap_head#10
  (byte*~) main::$3 ← ((byte*)) (byte*~) main::$2
  (byte*) main::buf2#0 ← (byte*~) main::$3
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@4
  (byte*) heap_head#18 ← phi( main::@1/(byte*) heap_head#18 main::@4/(byte*) heap_head#4 )
  (byte*) main::buf2#1 ← phi( main::@1/(byte*) main::buf2#1 main::@4/(byte*) main::buf2#0 )
  (byte*) main::buf1#1 ← phi( main::@1/(byte*) main::buf1#1 main::@4/(byte*) main::buf1#4 )
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#1 main::@4/(byte) main::i#0 )
  *((byte*) main::buf1#1 + (byte) main::i#2) ← (byte) main::i#2
  (number~) main::$6 ← (number) $ff - (byte) main::i#2
  *((byte*) main::buf2#1 + (byte) main::i#2) ← (number~) main::$6
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,$63)
  (bool~) main::$7 ← (byte) main::i#1 != rangelast(0,$63)
  if((bool~) main::$7) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  (byte*) heap_head#17 ← phi( main::@1/(byte*) heap_head#18 )
  (byte*) main::buf2#4 ← phi( main::@1/(byte*) main::buf2#1 )
  (byte*) main::buf1#2 ← phi( main::@1/(byte*) main::buf1#1 )
  (byte*) free::ptr#0 ← (byte*) main::buf1#2
  call free 
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte*) heap_head#16 ← phi( main::@2/(byte*) heap_head#17 )
  (byte*) main::buf1#5 ← phi( main::@2/(byte*) main::buf1#2 )
  (byte*) main::buf2#2 ← phi( main::@2/(byte*) main::buf2#4 )
  (byte*) free::ptr#1 ← (byte*) main::buf2#2
  call free 
  to:main::@6
main::@6: scope:[main]  from main::@5
  (byte*) heap_head#14 ← phi( main::@5/(byte*) heap_head#16 )
  (byte*) main::buf2#3 ← phi( main::@5/(byte*) main::buf2#2 )
  (byte*) main::buf1#3 ← phi( main::@5/(byte*) main::buf1#5 )
  (byte*) main::screen#0 ← ((byte*)) (number) $400
  *((byte*) main::screen#0 + (number) 0) ← *((byte*) main::buf1#3)
  *((byte*) main::screen#0 + (number) 1) ← *((byte*) main::buf2#3)
  to:main::@return
main::@return: scope:[main]  from main::@6
  (byte*) heap_head#11 ← phi( main::@6/(byte*) heap_head#14 )
  (byte*) heap_head#5 ← (byte*) heap_head#11
  return 
  to:@return
@3: scope:[]  from @begin
  (byte*) heap_head#15 ← phi( @begin/(byte*) heap_head#0 )
  call main 
  to:@4
@4: scope:[]  from @3
  (byte*) heap_head#12 ← phi( @3/(byte*) heap_head#5 )
  (byte*) heap_head#6 ← (byte*) heap_head#12
  to:@end
@end: scope:[]  from @4

SYMBOL TABLE SSA
(label) @3
(label) @4
(label) @begin
(label) @end
(byte*) HEAP_START
(byte*) HEAP_START#0
(void()) free((byte*) free::ptr)
(label) free::@return
(byte*) free::ptr
(byte*) free::ptr#0
(byte*) free::ptr#1
(byte*) heap_head
(byte*) heap_head#0
(byte*) heap_head#1
(byte*) heap_head#10
(byte*) heap_head#11
(byte*) heap_head#12
(byte*) heap_head#13
(byte*) heap_head#14
(byte*) heap_head#15
(byte*) heap_head#16
(byte*) heap_head#17
(byte*) heap_head#18
(byte*) heap_head#2
(byte*) heap_head#3
(byte*) heap_head#4
(byte*) heap_head#5
(byte*) heap_head#6
(byte*) heap_head#7
(byte*) heap_head#8
(byte*) heap_head#9
(void()) main()
(byte*~) main::$0
(byte*~) main::$1
(byte*~) main::$2
(byte*~) main::$3
(number~) main::$6
(bool~) main::$7
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte*) main::buf1
(byte*) main::buf1#0
(byte*) main::buf1#1
(byte*) main::buf1#2
(byte*) main::buf1#3
(byte*) main::buf1#4
(byte*) main::buf1#5
(byte*) main::buf2
(byte*) main::buf2#0
(byte*) main::buf2#1
(byte*) main::buf2#2
(byte*) main::buf2#3
(byte*) main::buf2#4
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte*) main::screen
(byte*) main::screen#0
(byte*()) malloc((word) malloc::size)
(label) malloc::@return
(byte*) malloc::mem
(byte*) malloc::mem#0
(byte*) malloc::return
(byte*) malloc::return#0
(byte*) malloc::return#1
(byte*) malloc::return#2
(byte*) malloc::return#3
(byte*) malloc::return#4
(byte*) malloc::return#5
(byte*) malloc::return#6
(word) malloc::size
(word) malloc::size#0
(word) malloc::size#1
(word) malloc::size#2

Adding number conversion cast (unumber) $64 in (word) malloc::size#0 ← (number) $64
Adding number conversion cast (unumber) $64 in (word) malloc::size#1 ← (number) $64
Adding number conversion cast (unumber) $ff in (number~) main::$6 ← (number) $ff - (byte) main::i#2
Adding number conversion cast (unumber) main::$6 in (number~) main::$6 ← (unumber)(number) $ff - (byte) main::i#2
Adding number conversion cast (unumber) 0 in *((byte*) main::screen#0 + (number) 0) ← *((byte*) main::buf1#3)
Adding number conversion cast (unumber) 1 in *((byte*) main::screen#0 + (number) 1) ← *((byte*) main::buf2#3)
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) HEAP_START#0 ← (byte*)(number) $c000
Inlining cast (word) malloc::size#0 ← (unumber)(number) $64
Inlining cast (byte*~) main::$1 ← (byte*)(byte*~) main::$0
Inlining cast (word) malloc::size#1 ← (unumber)(number) $64
Inlining cast (byte*~) main::$3 ← (byte*)(byte*~) main::$2
Inlining cast (byte*) main::screen#0 ← (byte*)(number) $400
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 49152
Simplifying constant integer cast $64
Simplifying constant integer cast (byte*~) main::$0
Simplifying constant integer cast $64
Simplifying constant integer cast (byte*~) main::$2
Simplifying constant integer cast $ff
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $64
Finalized unsigned number type (byte) $64
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) main::$6 ← (byte) $ff - (byte) main::i#2
Alias (byte*) HEAP_START#0 = (byte*) heap_head#0 (byte*) heap_head#15 
Alias (byte*) malloc::return#0 = (byte*) malloc::mem#0 (byte*) malloc::return#4 (byte*) malloc::return#1 
Alias (byte*) heap_head#1 = (byte*) heap_head#8 (byte*) heap_head#2 
Alias (byte*) malloc::return#2 = (byte*) malloc::return#5 
Alias (byte*) heap_head#3 = (byte*) heap_head#9 
Alias (byte*) main::buf1#0 = (byte*~) main::$1 (byte*~) main::$0 (byte*) main::buf1#4 
Alias (byte*) malloc::return#3 = (byte*) malloc::return#6 
Alias (byte*) heap_head#10 = (byte*) heap_head#4 
Alias (byte*) main::buf2#0 = (byte*~) main::$3 (byte*~) main::$2 
Alias (byte*) main::buf1#1 = (byte*) main::buf1#2 (byte*) main::buf1#5 (byte*) main::buf1#3 
Alias (byte*) main::buf2#1 = (byte*) main::buf2#4 (byte*) main::buf2#2 (byte*) main::buf2#3 
Alias (byte*) heap_head#11 = (byte*) heap_head#17 (byte*) heap_head#18 (byte*) heap_head#16 (byte*) heap_head#14 (byte*) heap_head#5 
Alias (byte*) heap_head#12 = (byte*) heap_head#6 
Successful SSA optimization Pass2AliasElimination
Self Phi Eliminated (byte*) main::buf1#1
Self Phi Eliminated (byte*) main::buf2#1
Self Phi Eliminated (byte*) heap_head#11
Successful SSA optimization Pass2SelfPhiElimination
Identical Phi Values (byte*) heap_head#13 (byte*) HEAP_START#0
Identical Phi Values (byte*) heap_head#3 (byte*) heap_head#1
Identical Phi Values (byte*) heap_head#10 (byte*) heap_head#1
Identical Phi Values (byte*) main::buf1#1 (byte*) main::buf1#0
Identical Phi Values (byte*) main::buf2#1 (byte*) main::buf2#0
Identical Phi Values (byte*) heap_head#11 (byte*) heap_head#10
Identical Phi Values (byte*) heap_head#12 (byte*) heap_head#11
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$7 [35] if((byte) main::i#1!=rangelast(0,$63)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte*) HEAP_START#0 = (byte*) 49152
Constant (const word) malloc::size#0 = $64
Constant (const word) malloc::size#1 = $64
Constant (const byte) main::i#0 = 0
Constant (const byte*) main::screen#0 = (byte*) 1024
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [33] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [35] if(main::i#1!=rangelast(0,$63)) goto main::@1 to (number) $64
Simplifying expression containing zero main::screen#0 in [44] *((const byte*) main::screen#0 + (byte) 0) ← *((byte*) main::buf1#0)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (byte*) free::ptr#0 and assignment [17] (byte*) free::ptr#0 ← (byte*) main::buf1#0
Eliminating unused variable (byte*) free::ptr#1 and assignment [19] (byte*) free::ptr#1 ← (byte*) main::buf2#0
Successful SSA optimization PassNEliminateUnusedVars
Adding number conversion cast (unumber) $64 in if((byte) main::i#1!=(number) $64) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $64
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $64
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings (const word) malloc::size#0
Inlining constant with var siblings (const word) malloc::size#1
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Constant inlined malloc::size#1 = (byte) $64
Constant inlined malloc::size#0 = (byte) $64
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(main::screen#0+1)
Successful SSA optimization Pass2ConstantAdditionElimination
Identical Phi Values (word) malloc::size#2 (byte) $64
Successful SSA optimization Pass2IdenticalPhiElimination
Added new block during phi lifting main::@7(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @3
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of free
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to malloc:6 malloc:10 free:20 free:22 

Created 2 initial phi equivalence classes
Coalesced [9] heap_head#19 ← heap_head#1
Coalesced [26] main::i#3 ← main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) main::@7
Renumbering block @3 to @1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@5
Adding NOP phi() at start of free

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call malloc 
  [6] (byte*) malloc::return#2 ← (byte*) malloc::return#0
  to:main::@3
main::@3: scope:[main]  from main
  [7] (byte*) main::buf1#0 ← (byte*) malloc::return#2
  [8] call malloc 
  [9] (byte*) malloc::return#3 ← (byte*) malloc::return#0
  to:main::@4
main::@4: scope:[main]  from main::@3
  [10] (byte*) main::buf2#0 ← (byte*) malloc::return#3
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@4
  [11] (byte) main::i#2 ← phi( main::@1/(byte) main::i#1 main::@4/(byte) 0 )
  [12] *((byte*) main::buf1#0 + (byte) main::i#2) ← (byte) main::i#2
  [13] (byte~) main::$6 ← (byte) $ff - (byte) main::i#2
  [14] *((byte*) main::buf2#0 + (byte) main::i#2) ← (byte~) main::$6
  [15] (byte) main::i#1 ← ++ (byte) main::i#2
  [16] if((byte) main::i#1!=(byte) $64) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [17] phi()
  [18] call free 
  to:main::@5
main::@5: scope:[main]  from main::@2
  [19] phi()
  [20] call free 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [21] *((const byte*) main::screen#0) ← *((byte*) main::buf1#0)
  [22] *((const byte*) main::screen#0+(byte) 1) ← *((byte*) main::buf2#0)
  to:main::@return
main::@return: scope:[main]  from main::@6
  [23] return 
  to:@return
free: scope:[free]  from main::@2 main::@5
  [24] phi()
  to:free::@return
free::@return: scope:[free]  from free
  [25] return 
  to:@return
malloc: scope:[malloc]  from main main::@3
  [26] (byte*) heap_head#7 ← phi( main/(const byte*) HEAP_START#0 main::@3/(byte*) heap_head#1 )
  [27] (byte*) malloc::return#0 ← (byte*) heap_head#7
  [28] (byte*) heap_head#1 ← (byte*) heap_head#7 + (byte) $64
  to:malloc::@return
malloc::@return: scope:[malloc]  from malloc
  [29] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte*) HEAP_START
(void()) free((byte*) free::ptr)
(byte*) free::ptr
(byte*) heap_head
(byte*) heap_head#1 0.8
(byte*) heap_head#7 3.0
(void()) main()
(byte~) main::$6 22.0
(byte*) main::buf1
(byte*) main::buf1#0 1.0714285714285714
(byte*) main::buf2
(byte*) main::buf2#0 1.25
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 16.5
(byte*) main::screen
(byte*()) malloc((word) malloc::size)
(byte*) malloc::mem
(byte*) malloc::return
(byte*) malloc::return#0 1.2000000000000002
(byte*) malloc::return#2 4.0
(byte*) malloc::return#3 4.0
(word) malloc::size

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ heap_head#7 heap_head#1 ]
Added variable malloc::return#2 to zero page equivalence class [ malloc::return#2 ]
Added variable main::buf1#0 to zero page equivalence class [ main::buf1#0 ]
Added variable malloc::return#3 to zero page equivalence class [ malloc::return#3 ]
Added variable main::buf2#0 to zero page equivalence class [ main::buf2#0 ]
Added variable main::$6 to zero page equivalence class [ main::$6 ]
Added variable malloc::return#0 to zero page equivalence class [ malloc::return#0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ heap_head#7 heap_head#1 ]
[ malloc::return#2 ]
[ main::buf1#0 ]
[ malloc::return#3 ]
[ main::buf2#0 ]
[ main::$6 ]
[ malloc::return#0 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:3 [ heap_head#7 heap_head#1 ]
Allocated zp ZP_WORD:5 [ malloc::return#2 ]
Allocated zp ZP_WORD:7 [ main::buf1#0 ]
Allocated zp ZP_WORD:9 [ malloc::return#3 ]
Allocated zp ZP_WORD:11 [ main::buf2#0 ]
Allocated zp ZP_BYTE:13 [ main::$6 ]
Allocated zp ZP_WORD:14 [ malloc::return#0 ]

INITIAL ASM
//SEG0 File Comments
// Experiments with malloc()
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Start of the heap used by malloc()
  .label HEAP_START = $c000
  .label heap_head = 3
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label screen = $400
    .label _6 = $d
    .label buf1 = 7
    .label buf2 = $b
    .label i = 2
  //SEG11 [5] call malloc 
  //SEG12 [26] phi from main to malloc [phi:main->malloc]
  malloc_from_main:
  //SEG13 [26] phi (byte*) heap_head#7 = (const byte*) HEAP_START#0 [phi:main->malloc#0] -- pbuz1=pbuc1 
    lda #<HEAP_START
    sta heap_head
    lda #>HEAP_START
    sta heap_head+1
    jsr malloc
  //SEG14 [6] (byte*) malloc::return#2 ← (byte*) malloc::return#0 -- pbuz1=pbuz2 
    lda malloc.return
    sta malloc.return_2
    lda malloc.return+1
    sta malloc.return_2+1
    jmp b3
  //SEG15 main::@3
  b3:
  //SEG16 [7] (byte*) main::buf1#0 ← (byte*) malloc::return#2 -- pbuz1=pbuz2 
    lda malloc.return_2
    sta buf1
    lda malloc.return_2+1
    sta buf1+1
  //SEG17 [8] call malloc 
  //SEG18 [26] phi from main::@3 to malloc [phi:main::@3->malloc]
  malloc_from_b3:
  //SEG19 [26] phi (byte*) heap_head#7 = (byte*) heap_head#1 [phi:main::@3->malloc#0] -- register_copy 
    jsr malloc
  //SEG20 [9] (byte*) malloc::return#3 ← (byte*) malloc::return#0 -- pbuz1=pbuz2 
    lda malloc.return
    sta malloc.return_3
    lda malloc.return+1
    sta malloc.return_3+1
    jmp b4
  //SEG21 main::@4
  b4:
  //SEG22 [10] (byte*) main::buf2#0 ← (byte*) malloc::return#3 -- pbuz1=pbuz2 
    lda malloc.return_3
    sta buf2
    lda malloc.return_3+1
    sta buf2+1
  //SEG23 [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
  //SEG24 [11] phi (byte) main::i#2 = (byte) 0 [phi:main::@4->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG25 [11] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG26 [11] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG27 main::@1
  b1:
  //SEG28 [12] *((byte*) main::buf1#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuz1_derefidx_vbuz2=vbuz2 
    lda i
    tay
    sta (buf1),y
  //SEG29 [13] (byte~) main::$6 ← (byte) $ff - (byte) main::i#2 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$ff
    sec
    sbc i
    sta _6
  //SEG30 [14] *((byte*) main::buf2#0 + (byte) main::i#2) ← (byte~) main::$6 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda _6
    ldy i
    sta (buf2),y
  //SEG31 [15] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG32 [16] if((byte) main::i#1!=(byte) $64) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$64
    cmp i
    bne b1_from_b1
  //SEG33 [17] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG34 main::@2
  b2:
  //SEG35 [18] call free 
  //SEG36 [24] phi from main::@2 to free [phi:main::@2->free]
  free_from_b2:
    jsr free
  //SEG37 [19] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  b5_from_b2:
    jmp b5
  //SEG38 main::@5
  b5:
  //SEG39 [20] call free 
  //SEG40 [24] phi from main::@5 to free [phi:main::@5->free]
  free_from_b5:
    jsr free
    jmp b6
  //SEG41 main::@6
  b6:
  //SEG42 [21] *((const byte*) main::screen#0) ← *((byte*) main::buf1#0) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (buf1),y
    sta screen
  //SEG43 [22] *((const byte*) main::screen#0+(byte) 1) ← *((byte*) main::buf2#0) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (buf2),y
    sta screen+1
    jmp breturn
  //SEG44 main::@return
  breturn:
  //SEG45 [23] return 
    rts
}
//SEG46 free
// A block of memory previously allocated by a call to malloc is deallocated, making it available again for further allocations.
// If ptr is a null pointer, the function does nothing.
free: {
    jmp breturn
  //SEG47 free::@return
  breturn:
  //SEG48 [25] return 
    rts
}
//SEG49 malloc
// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
malloc: {
    .label return = $e
    .label return_2 = 5
    .label return_3 = 9
  //SEG50 [27] (byte*) malloc::return#0 ← (byte*) heap_head#7 -- pbuz1=pbuz2 
    lda heap_head
    sta return
    lda heap_head+1
    sta return+1
  //SEG51 [28] (byte*) heap_head#1 ← (byte*) heap_head#7 + (byte) $64 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$64
    clc
    adc heap_head
    sta heap_head
    bcc !+
    inc heap_head+1
  !:
    jmp breturn
  //SEG52 malloc::@return
  breturn:
  //SEG53 [29] return 
    rts
}
//SEG54 File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (byte*) malloc::return#2 ← (byte*) malloc::return#0 [ malloc::return#2 heap_head#1 ] ( main:2 [ malloc::return#2 heap_head#1 ] ) always clobbers reg byte a 
Statement [7] (byte*) main::buf1#0 ← (byte*) malloc::return#2 [ main::buf1#0 heap_head#1 ] ( main:2 [ main::buf1#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [9] (byte*) malloc::return#3 ← (byte*) malloc::return#0 [ main::buf1#0 malloc::return#3 ] ( main:2 [ main::buf1#0 malloc::return#3 ] ) always clobbers reg byte a 
Statement [10] (byte*) main::buf2#0 ← (byte*) malloc::return#3 [ main::buf1#0 main::buf2#0 ] ( main:2 [ main::buf1#0 main::buf2#0 ] ) always clobbers reg byte a 
Statement [13] (byte~) main::$6 ← (byte) $ff - (byte) main::i#2 [ main::buf1#0 main::buf2#0 main::i#2 main::$6 ] ( main:2 [ main::buf1#0 main::buf2#0 main::i#2 main::$6 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [21] *((const byte*) main::screen#0) ← *((byte*) main::buf1#0) [ main::buf2#0 ] ( main:2 [ main::buf2#0 ] ) always clobbers reg byte a reg byte y 
Statement [22] *((const byte*) main::screen#0+(byte) 1) ← *((byte*) main::buf2#0) [ ] ( main:2 [ ] ) always clobbers reg byte a reg byte y 
Statement [27] (byte*) malloc::return#0 ← (byte*) heap_head#7 [ malloc::return#0 heap_head#7 ] ( main:2::malloc:5 [ malloc::return#0 heap_head#7 ] main:2::malloc:8 [ main::buf1#0 malloc::return#0 heap_head#7 ] ) always clobbers reg byte a 
Statement [28] (byte*) heap_head#1 ← (byte*) heap_head#7 + (byte) $64 [ malloc::return#0 heap_head#1 ] ( main:2::malloc:5 [ malloc::return#0 heap_head#1 ] main:2::malloc:8 [ main::buf1#0 malloc::return#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [6] (byte*) malloc::return#2 ← (byte*) malloc::return#0 [ malloc::return#2 heap_head#1 ] ( main:2 [ malloc::return#2 heap_head#1 ] ) always clobbers reg byte a 
Statement [7] (byte*) main::buf1#0 ← (byte*) malloc::return#2 [ main::buf1#0 heap_head#1 ] ( main:2 [ main::buf1#0 heap_head#1 ] ) always clobbers reg byte a 
Statement [9] (byte*) malloc::return#3 ← (byte*) malloc::return#0 [ main::buf1#0 malloc::return#3 ] ( main:2 [ main::buf1#0 malloc::return#3 ] ) always clobbers reg byte a 
Statement [10] (byte*) main::buf2#0 ← (byte*) malloc::return#3 [ main::buf1#0 main::buf2#0 ] ( main:2 [ main::buf1#0 main::buf2#0 ] ) always clobbers reg byte a 
Statement [12] *((byte*) main::buf1#0 + (byte) main::i#2) ← (byte) main::i#2 [ main::buf1#0 main::buf2#0 main::i#2 ] ( main:2 [ main::buf1#0 main::buf2#0 main::i#2 ] ) always clobbers reg byte a 
Statement [13] (byte~) main::$6 ← (byte) $ff - (byte) main::i#2 [ main::buf1#0 main::buf2#0 main::i#2 main::$6 ] ( main:2 [ main::buf1#0 main::buf2#0 main::i#2 main::$6 ] ) always clobbers reg byte a 
Statement [21] *((const byte*) main::screen#0) ← *((byte*) main::buf1#0) [ main::buf2#0 ] ( main:2 [ main::buf2#0 ] ) always clobbers reg byte a reg byte y 
Statement [22] *((const byte*) main::screen#0+(byte) 1) ← *((byte*) main::buf2#0) [ ] ( main:2 [ ] ) always clobbers reg byte a reg byte y 
Statement [27] (byte*) malloc::return#0 ← (byte*) heap_head#7 [ malloc::return#0 heap_head#7 ] ( main:2::malloc:5 [ malloc::return#0 heap_head#7 ] main:2::malloc:8 [ main::buf1#0 malloc::return#0 heap_head#7 ] ) always clobbers reg byte a 
Statement [28] (byte*) heap_head#1 ← (byte*) heap_head#7 + (byte) $64 [ malloc::return#0 heap_head#1 ] ( main:2::malloc:5 [ malloc::return#0 heap_head#1 ] main:2::malloc:8 [ main::buf1#0 malloc::return#0 heap_head#1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:3 [ heap_head#7 heap_head#1 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_WORD:5 [ malloc::return#2 ] : zp ZP_WORD:5 , 
Potential registers zp ZP_WORD:7 [ main::buf1#0 ] : zp ZP_WORD:7 , 
Potential registers zp ZP_WORD:9 [ malloc::return#3 ] : zp ZP_WORD:9 , 
Potential registers zp ZP_WORD:11 [ main::buf2#0 ] : zp ZP_WORD:11 , 
Potential registers zp ZP_BYTE:13 [ main::$6 ] : zp ZP_BYTE:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:14 [ malloc::return#0 ] : zp ZP_WORD:14 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 33: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 22: zp ZP_BYTE:13 [ main::$6 ] 1.25: zp ZP_WORD:11 [ main::buf2#0 ] 1.07: zp ZP_WORD:7 [ main::buf1#0 ] 
Uplift Scope [malloc] 4: zp ZP_WORD:5 [ malloc::return#2 ] 4: zp ZP_WORD:9 [ malloc::return#3 ] 1.2: zp ZP_WORD:14 [ malloc::return#0 ] 
Uplift Scope [] 3.8: zp ZP_WORD:3 [ heap_head#7 heap_head#1 ] 
Uplift Scope [free] 

Uplifting [main] best 579 combination reg byte y [ main::i#2 main::i#1 ] reg byte a [ main::$6 ] zp ZP_WORD:11 [ main::buf2#0 ] zp ZP_WORD:7 [ main::buf1#0 ] 
Uplifting [malloc] best 579 combination zp ZP_WORD:5 [ malloc::return#2 ] zp ZP_WORD:9 [ malloc::return#3 ] zp ZP_WORD:14 [ malloc::return#0 ] 
Uplifting [] best 579 combination zp ZP_WORD:3 [ heap_head#7 heap_head#1 ] 
Uplifting [free] best 579 combination 
Coalescing zero page register with common assignment [ zp ZP_WORD:5 [ malloc::return#2 ] ] with [ zp ZP_WORD:7 [ main::buf1#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ malloc::return#3 ] ] with [ zp ZP_WORD:11 [ main::buf2#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:9 [ malloc::return#3 main::buf2#0 ] ] with [ zp ZP_WORD:14 [ malloc::return#0 ] ] - score: 1
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ heap_head#7 heap_head#1 ]
Allocated (was zp ZP_WORD:5) zp ZP_WORD:4 [ malloc::return#2 main::buf1#0 ]
Allocated (was zp ZP_WORD:9) zp ZP_WORD:6 [ malloc::return#3 main::buf2#0 malloc::return#0 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Experiments with malloc()
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Start of the heap used by malloc()
  .label HEAP_START = $c000
  .label heap_head = 2
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label screen = $400
    .label buf1 = 4
    .label buf2 = 6
  //SEG11 [5] call malloc 
  //SEG12 [26] phi from main to malloc [phi:main->malloc]
  malloc_from_main:
  //SEG13 [26] phi (byte*) heap_head#7 = (const byte*) HEAP_START#0 [phi:main->malloc#0] -- pbuz1=pbuc1 
    lda #<HEAP_START
    sta heap_head
    lda #>HEAP_START
    sta heap_head+1
    jsr malloc
  //SEG14 [6] (byte*) malloc::return#2 ← (byte*) malloc::return#0 -- pbuz1=pbuz2 
    lda malloc.return
    sta malloc.return_2
    lda malloc.return+1
    sta malloc.return_2+1
    jmp b3
  //SEG15 main::@3
  b3:
  //SEG16 [7] (byte*) main::buf1#0 ← (byte*) malloc::return#2
  //SEG17 [8] call malloc 
  //SEG18 [26] phi from main::@3 to malloc [phi:main::@3->malloc]
  malloc_from_b3:
  //SEG19 [26] phi (byte*) heap_head#7 = (byte*) heap_head#1 [phi:main::@3->malloc#0] -- register_copy 
    jsr malloc
  //SEG20 [9] (byte*) malloc::return#3 ← (byte*) malloc::return#0
    jmp b4
  //SEG21 main::@4
  b4:
  //SEG22 [10] (byte*) main::buf2#0 ← (byte*) malloc::return#3
  //SEG23 [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  b1_from_b4:
  //SEG24 [11] phi (byte) main::i#2 = (byte) 0 [phi:main::@4->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
    jmp b1
  //SEG25 [11] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
  //SEG26 [11] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    jmp b1
  //SEG27 main::@1
  b1:
  //SEG28 [12] *((byte*) main::buf1#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuz1_derefidx_vbuyy=vbuyy 
    tya
    sta (buf1),y
  //SEG29 [13] (byte~) main::$6 ← (byte) $ff - (byte) main::i#2 -- vbuaa=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$ff+1
  //SEG30 [14] *((byte*) main::buf2#0 + (byte) main::i#2) ← (byte~) main::$6 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (buf2),y
  //SEG31 [15] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG32 [16] if((byte) main::i#1!=(byte) $64) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$64
    bne b1_from_b1
  //SEG33 [17] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  b2_from_b1:
    jmp b2
  //SEG34 main::@2
  b2:
  //SEG35 [18] call free 
  //SEG36 [24] phi from main::@2 to free [phi:main::@2->free]
  free_from_b2:
    jsr free
  //SEG37 [19] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  b5_from_b2:
    jmp b5
  //SEG38 main::@5
  b5:
  //SEG39 [20] call free 
  //SEG40 [24] phi from main::@5 to free [phi:main::@5->free]
  free_from_b5:
    jsr free
    jmp b6
  //SEG41 main::@6
  b6:
  //SEG42 [21] *((const byte*) main::screen#0) ← *((byte*) main::buf1#0) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (buf1),y
    sta screen
  //SEG43 [22] *((const byte*) main::screen#0+(byte) 1) ← *((byte*) main::buf2#0) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (buf2),y
    sta screen+1
    jmp breturn
  //SEG44 main::@return
  breturn:
  //SEG45 [23] return 
    rts
}
//SEG46 free
// A block of memory previously allocated by a call to malloc is deallocated, making it available again for further allocations.
// If ptr is a null pointer, the function does nothing.
free: {
    jmp breturn
  //SEG47 free::@return
  breturn:
  //SEG48 [25] return 
    rts
}
//SEG49 malloc
// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
malloc: {
    .label return = 6
    .label return_2 = 4
  //SEG50 [27] (byte*) malloc::return#0 ← (byte*) heap_head#7 -- pbuz1=pbuz2 
    lda heap_head
    sta return
    lda heap_head+1
    sta return+1
  //SEG51 [28] (byte*) heap_head#1 ← (byte*) heap_head#7 + (byte) $64 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$64
    clc
    adc heap_head
    sta heap_head
    bcc !+
    inc heap_head+1
  !:
    jmp breturn
  //SEG52 malloc::@return
  breturn:
  //SEG53 [29] return 
    rts
}
//SEG54 File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b3
Removing instruction jmp b4
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b5
Removing instruction jmp b6
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction malloc_from_b3:
Removing instruction b1_from_b4:
Removing instruction b1_from_b1:
Removing instruction b2_from_b1:
Removing instruction free_from_b2:
Removing instruction b5_from_b2:
Removing instruction free_from_b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction malloc_from_main:
Removing instruction b3:
Removing instruction b4:
Removing instruction b2:
Removing instruction b5:
Removing instruction b6:
Removing instruction breturn:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) HEAP_START
(const byte*) HEAP_START#0 HEAP_START = (byte*) 49152
(void()) free((byte*) free::ptr)
(label) free::@return
(byte*) free::ptr
(byte*) heap_head
(byte*) heap_head#1 heap_head zp ZP_WORD:2 0.8
(byte*) heap_head#7 heap_head zp ZP_WORD:2 3.0
(void()) main()
(byte~) main::$6 reg byte a 22.0
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@return
(byte*) main::buf1
(byte*) main::buf1#0 buf1 zp ZP_WORD:4 1.0714285714285714
(byte*) main::buf2
(byte*) main::buf2#0 buf2 zp ZP_WORD:6 1.25
(byte) main::i
(byte) main::i#1 reg byte y 16.5
(byte) main::i#2 reg byte y 16.5
(byte*) main::screen
(const byte*) main::screen#0 screen = (byte*) 1024
(byte*()) malloc((word) malloc::size)
(label) malloc::@return
(byte*) malloc::mem
(byte*) malloc::return
(byte*) malloc::return#0 return zp ZP_WORD:6 1.2000000000000002
(byte*) malloc::return#2 return#2 zp ZP_WORD:4 4.0
(byte*) malloc::return#3 return zp ZP_WORD:6 4.0
(word) malloc::size

reg byte y [ main::i#2 main::i#1 ]
zp ZP_WORD:2 [ heap_head#7 heap_head#1 ]
zp ZP_WORD:4 [ malloc::return#2 main::buf1#0 ]
zp ZP_WORD:6 [ malloc::return#3 main::buf2#0 malloc::return#0 ]
reg byte a [ main::$6 ]


FINAL ASSEMBLER
Score: 418

//SEG0 File Comments
// Experiments with malloc()
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
  // Start of the heap used by malloc()
  .label HEAP_START = $c000
  .label heap_head = 2
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label screen = $400
    .label buf1 = 4
    .label buf2 = 6
  //SEG11 [5] call malloc 
  //SEG12 [26] phi from main to malloc [phi:main->malloc]
  //SEG13 [26] phi (byte*) heap_head#7 = (const byte*) HEAP_START#0 [phi:main->malloc#0] -- pbuz1=pbuc1 
    lda #<HEAP_START
    sta heap_head
    lda #>HEAP_START
    sta heap_head+1
    jsr malloc
  //SEG14 [6] (byte*) malloc::return#2 ← (byte*) malloc::return#0 -- pbuz1=pbuz2 
    lda malloc.return
    sta malloc.return_2
    lda malloc.return+1
    sta malloc.return_2+1
  //SEG15 main::@3
  //SEG16 [7] (byte*) main::buf1#0 ← (byte*) malloc::return#2
  //SEG17 [8] call malloc 
  //SEG18 [26] phi from main::@3 to malloc [phi:main::@3->malloc]
  //SEG19 [26] phi (byte*) heap_head#7 = (byte*) heap_head#1 [phi:main::@3->malloc#0] -- register_copy 
    jsr malloc
  //SEG20 [9] (byte*) malloc::return#3 ← (byte*) malloc::return#0
  //SEG21 main::@4
  //SEG22 [10] (byte*) main::buf2#0 ← (byte*) malloc::return#3
  //SEG23 [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  //SEG24 [11] phi (byte) main::i#2 = (byte) 0 [phi:main::@4->main::@1#0] -- vbuyy=vbuc1 
    ldy #0
  //SEG25 [11] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  //SEG26 [11] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
  //SEG27 main::@1
  b1:
  //SEG28 [12] *((byte*) main::buf1#0 + (byte) main::i#2) ← (byte) main::i#2 -- pbuz1_derefidx_vbuyy=vbuyy 
    tya
    sta (buf1),y
  //SEG29 [13] (byte~) main::$6 ← (byte) $ff - (byte) main::i#2 -- vbuaa=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$ff+1
  //SEG30 [14] *((byte*) main::buf2#0 + (byte) main::i#2) ← (byte~) main::$6 -- pbuz1_derefidx_vbuyy=vbuaa 
    sta (buf2),y
  //SEG31 [15] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuyy=_inc_vbuyy 
    iny
  //SEG32 [16] if((byte) main::i#1!=(byte) $64) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$64
    bne b1
  //SEG33 [17] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  //SEG34 main::@2
  //SEG35 [18] call free 
  //SEG36 [24] phi from main::@2 to free [phi:main::@2->free]
    jsr free
  //SEG37 [19] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  //SEG38 main::@5
  //SEG39 [20] call free 
  //SEG40 [24] phi from main::@5 to free [phi:main::@5->free]
    jsr free
  //SEG41 main::@6
  //SEG42 [21] *((const byte*) main::screen#0) ← *((byte*) main::buf1#0) -- _deref_pbuc1=_deref_pbuz1 
    ldy #0
    lda (buf1),y
    sta screen
  //SEG43 [22] *((const byte*) main::screen#0+(byte) 1) ← *((byte*) main::buf2#0) -- _deref_pbuc1=_deref_pbuz1 
    lda (buf2),y
    sta screen+1
  //SEG44 main::@return
  //SEG45 [23] return 
    rts
}
//SEG46 free
// A block of memory previously allocated by a call to malloc is deallocated, making it available again for further allocations.
// If ptr is a null pointer, the function does nothing.
free: {
  //SEG47 free::@return
  //SEG48 [25] return 
    rts
}
//SEG49 malloc
// Allocates a block of size bytes of memory, returning a pointer to the beginning of the block.
// The content of the newly allocated block of memory is not initialized, remaining with indeterminate values.
malloc: {
    .label return = 6
    .label return_2 = 4
  //SEG50 [27] (byte*) malloc::return#0 ← (byte*) heap_head#7 -- pbuz1=pbuz2 
    lda heap_head
    sta return
    lda heap_head+1
    sta return+1
  //SEG51 [28] (byte*) heap_head#1 ← (byte*) heap_head#7 + (byte) $64 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$64
    clc
    adc heap_head
    sta heap_head
    bcc !+
    inc heap_head+1
  !:
  //SEG52 malloc::@return
  //SEG53 [29] return 
    rts
}
//SEG54 File Data

