
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call fillscreen 
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@4
  [2] (byte*) current_chargen#28 ← phi( main::@1/(byte*) current_chargen#28 main/(const nomodify byte*) CHARGEN main::@4/(byte*) current_chargen#12 )
  [2] (byte*) nxt#33 ← phi( main::@1/(byte*) nxt#33 main/(const byte*) TEXT main::@4/(byte*) nxt#15 )
  [2] (byte) current_bit#30 ← phi( main::@1/(byte) current_bit#30 main/(byte) 1 main::@4/(byte) current_bit#13 )
  [2] (byte) scroll#19 ← phi( main::@1/(byte) scroll#19 main/(byte) 7 main::@4/(byte) scroll#11 )
  [3] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $fe) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [4] if(*((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_RASTER)!=(byte) $ff) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [5] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← ++ *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR)
  [6] call scroll_soft 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [7] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR) ← -- *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_BG_COLOR)
  to:main::@1

(void()) fillscreen((byte*) fillscreen::screen , (byte) fillscreen::fill)
fillscreen: scope:[fillscreen]  from main
  [8] phi()
  to:fillscreen::@1
fillscreen::@1: scope:[fillscreen]  from fillscreen fillscreen::@2
  [9] (byte*) fillscreen::cursor#2 ← phi( fillscreen/(const byte*) SCREEN fillscreen::@2/(byte*) fillscreen::cursor#1 )
  [10] if((byte*) fillscreen::cursor#2<(const byte*) SCREEN+(word) $3e8) goto fillscreen::@2
  to:fillscreen::@return
fillscreen::@return: scope:[fillscreen]  from fillscreen::@1
  [11] return 
  to:@return
fillscreen::@2: scope:[fillscreen]  from fillscreen::@1
  [12] *((byte*) fillscreen::cursor#2) ← (const byte) fillscreen::fill#0
  [13] (byte*) fillscreen::cursor#1 ← ++ (byte*) fillscreen::cursor#2
  to:fillscreen::@1

(void()) scroll_soft()
scroll_soft: scope:[scroll_soft]  from main::@3
  [14] (byte) scroll#2 ← -- (byte) scroll#19
  [15] if((byte) scroll#2!=(byte) $ff) goto scroll_soft::@1
  to:scroll_soft::@2
scroll_soft::@2: scope:[scroll_soft]  from scroll_soft
  [16] phi()
  [17] call scroll_bit 
  to:scroll_soft::@1
scroll_soft::@1: scope:[scroll_soft]  from scroll_soft scroll_soft::@2
  [18] (byte*) current_chargen#12 ← phi( scroll_soft/(byte*) current_chargen#28 scroll_soft::@2/(byte*) current_chargen#21 )
  [18] (byte*) nxt#15 ← phi( scroll_soft/(byte*) nxt#33 scroll_soft::@2/(byte*) nxt#37 )
  [18] (byte) current_bit#13 ← phi( scroll_soft/(byte) current_bit#30 scroll_soft::@2/(byte) current_bit#23 )
  [18] (byte) scroll#11 ← phi( scroll_soft/(byte) scroll#2 scroll_soft::@2/(byte) 7 )
  [19] *((byte*)(const nomodify struct MOS6569_VICII*) VICII+(const byte) OFFSET_STRUCT_MOS6569_VICII_CONTROL2) ← (byte) scroll#11
  to:scroll_soft::@return
scroll_soft::@return: scope:[scroll_soft]  from scroll_soft::@1
  [20] return 
  to:@return

(void()) scroll_bit()
scroll_bit: scope:[scroll_bit]  from scroll_soft::@2
  [21] (byte) current_bit#4 ← (byte) current_bit#30 >> (byte) 1
  [22] if((byte) current_bit#4!=(byte) 0) goto scroll_bit::@1
  to:scroll_bit::@2
scroll_bit::@2: scope:[scroll_bit]  from scroll_bit
  [23] phi()
  [24] call next_char 
  [25] (byte) next_char::return#0 ← (byte) next_char::return#1
  to:scroll_bit::@8
scroll_bit::@8: scope:[scroll_bit]  from scroll_bit::@2
  [26] (word) scroll_bit::c#0 ← (byte) next_char::return#0
  [27] (word~) scroll_bit::$7 ← (word) scroll_bit::c#0 << (byte) 3
  [28] (byte*) current_chargen#4 ← (const nomodify byte*) CHARGEN + (word~) scroll_bit::$7
  to:scroll_bit::@1
scroll_bit::@1: scope:[scroll_bit]  from scroll_bit scroll_bit::@8
  [29] (byte*) nxt#37 ← phi( scroll_bit/(byte*) nxt#33 scroll_bit::@8/(byte*) nxt#20 )
  [29] (byte) current_bit#23 ← phi( scroll_bit/(byte) current_bit#4 scroll_bit::@8/(byte) $80 )
  [29] (byte*) current_chargen#21 ← phi( scroll_bit/(byte*) current_chargen#28 scroll_bit::@8/(byte*) current_chargen#4 )
  [30] call scroll_hard 
  to:scroll_bit::@7
scroll_bit::@7: scope:[scroll_bit]  from scroll_bit::@1
  asm { sei  }
  [32] *((const nomodify byte*) PROCPORT) ← (byte) $32
  to:scroll_bit::@3
scroll_bit::@3: scope:[scroll_bit]  from scroll_bit::@4 scroll_bit::@7
  [33] (byte*) scroll_bit::sc#2 ← phi( scroll_bit::@4/(byte*) scroll_bit::sc#1 scroll_bit::@7/(const byte*) SCREEN+(byte) $28+(byte) $27 )
  [33] (byte) scroll_bit::r#2 ← phi( scroll_bit::@4/(byte) scroll_bit::r#1 scroll_bit::@7/(byte) 0 )
  [34] (byte) scroll_bit::bits#0 ← *((byte*) current_chargen#21 + (byte) scroll_bit::r#2)
  [35] (byte~) scroll_bit::$9 ← (byte) scroll_bit::bits#0 & (byte) current_bit#23
  [36] if((byte~) scroll_bit::$9==(byte) 0) goto scroll_bit::@4
  to:scroll_bit::@5
scroll_bit::@5: scope:[scroll_bit]  from scroll_bit::@3
  [37] phi()
  to:scroll_bit::@4
scroll_bit::@4: scope:[scroll_bit]  from scroll_bit::@3 scroll_bit::@5
  [38] (byte) scroll_bit::b#2 ← phi( scroll_bit::@3/(byte) ' ' scroll_bit::@5/(byte) $80+(byte) ' ' )
  [39] *((byte*) scroll_bit::sc#2) ← (byte) scroll_bit::b#2
  [40] (byte*) scroll_bit::sc#1 ← (byte*) scroll_bit::sc#2 + (byte) $28
  [41] (byte) scroll_bit::r#1 ← ++ (byte) scroll_bit::r#2
  [42] if((byte) scroll_bit::r#1!=(byte) 8) goto scroll_bit::@3
  to:scroll_bit::@6
scroll_bit::@6: scope:[scroll_bit]  from scroll_bit::@4
  [43] *((const nomodify byte*) PROCPORT) ← (byte) $37
  asm { cli  }
  to:scroll_bit::@return
scroll_bit::@return: scope:[scroll_bit]  from scroll_bit::@6
  [45] return 
  to:@return

(byte()) next_char()
next_char: scope:[next_char]  from scroll_bit::@2
  [46] (byte) next_char::c#0 ← *((byte*) nxt#33)
  [47] if((byte) next_char::c#0!=(byte) 0) goto next_char::@1
  to:next_char::@2
next_char::@2: scope:[next_char]  from next_char
  [48] (byte) next_char::c#1 ← *((const byte*) TEXT)
  to:next_char::@1
next_char::@1: scope:[next_char]  from next_char next_char::@2
  [49] (byte) next_char::return#1 ← phi( next_char/(byte) next_char::c#0 next_char::@2/(byte) next_char::c#1 )
  [49] (byte*) nxt#19 ← phi( next_char/(byte*) nxt#33 next_char::@2/(const byte*) TEXT )
  [50] (byte*) nxt#20 ← ++ (byte*) nxt#19
  to:next_char::@return
next_char::@return: scope:[next_char]  from next_char::@1
  [51] return 
  to:@return

(void()) scroll_hard()
scroll_hard: scope:[scroll_hard]  from scroll_bit::@1
  [52] phi()
  to:scroll_hard::@1
scroll_hard::@1: scope:[scroll_hard]  from scroll_hard scroll_hard::@2
  [53] (byte) scroll_hard::i#2 ← phi( scroll_hard/(byte) 0 scroll_hard::@2/(byte) scroll_hard::i#1 )
  [54] if((byte) scroll_hard::i#2!=(byte) $27) goto scroll_hard::@2
  to:scroll_hard::@return
scroll_hard::@return: scope:[scroll_hard]  from scroll_hard::@1
  [55] return 
  to:@return
scroll_hard::@2: scope:[scroll_hard]  from scroll_hard::@1
  [56] *((const byte*) SCREEN + (byte) scroll_hard::i#2) ← *((const byte*) SCREEN+(byte) 1 + (byte) scroll_hard::i#2)
  [57] *((const byte*) SCREEN+(byte)(number) $28*(number) 1 + (byte) scroll_hard::i#2) ← *((const byte*) SCREEN+(byte)(number) $28*(number) 1+(byte) 1 + (byte) scroll_hard::i#2)
  [58] *((const byte*) SCREEN+(byte)(number) $28*(number) 2 + (byte) scroll_hard::i#2) ← *((const byte*) SCREEN+(byte)(number) $28*(number) 2+(byte) 1 + (byte) scroll_hard::i#2)
  [59] *((const byte*) SCREEN+(byte)(number) $28*(number) 3 + (byte) scroll_hard::i#2) ← *((const byte*) SCREEN+(byte)(number) $28*(number) 3+(byte) 1 + (byte) scroll_hard::i#2)
  [60] *((const byte*) SCREEN+(byte)(number) $28*(number) 4 + (byte) scroll_hard::i#2) ← *((const byte*) SCREEN+(byte)(number) $28*(number) 4+(byte) 1 + (byte) scroll_hard::i#2)
  [61] *((const byte*) SCREEN+(byte)(number) $28*(number) 5 + (byte) scroll_hard::i#2) ← *((const byte*) SCREEN+(byte)(number) $28*(number) 5+(byte) 1 + (byte) scroll_hard::i#2)
  [62] *((const byte*) SCREEN+(byte)(number) $28*(number) 6 + (byte) scroll_hard::i#2) ← *((const byte*) SCREEN+(byte)(number) $28*(number) 6+(byte) 1 + (byte) scroll_hard::i#2)
  [63] *((const byte*) SCREEN+(word)(number) $28*(number) 7 + (byte) scroll_hard::i#2) ← *((const byte*) SCREEN+(word)(number) $28*(number) 7+(byte) 1 + (byte) scroll_hard::i#2)
  [64] (byte) scroll_hard::i#1 ← ++ (byte) scroll_hard::i#2
  to:scroll_hard::@1
