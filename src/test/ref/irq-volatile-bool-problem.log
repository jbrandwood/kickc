Resolved forward reference irq to interrupt(KERNEL_MIN)(void()) irq()
Resolved forward reference framedone to (bool) framedone
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@6
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@8

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (void()**) KERNEL_IRQ ← ((void()**)) (number) $314
  (byte*) RASTER ← ((byte*)) (number) $d012
  (byte*) VIC_CONTROL ← ((byte*)) (number) $d011
  (byte*) IRQ_STATUS ← ((byte*)) (number) $d019
  (byte*) IRQ_ENABLE ← ((byte*)) (number) $d01a
  (byte) IRQ_RASTER ← (number) 1
  (byte*) BGCOL ← ((byte*)) (number) $d020
  (byte*) CIA1_INTERRUPT ← ((byte*)) (number) $dc0d
  (byte) CIA_INTERRUPT_CLEAR ← (number) $7f
  to:@1

(void()) main()
main: scope:[main]  from @2
  (bool) framedone#12 ← phi( @2/(bool) framedone#11 )
  asm { sei  }
  *((byte*) CIA1_INTERRUPT) ← (byte) CIA_INTERRUPT_CLEAR
  *((byte*) VIC_CONTROL) ← *((byte*) VIC_CONTROL) & (number) $7f
  *((byte*) RASTER) ← (number) $fd
  *((byte*) IRQ_ENABLE) ← (byte) IRQ_RASTER
  (void()*~) main::$0 ← & interrupt(KERNEL_MIN)(void()) irq()
  *((void()**) KERNEL_IRQ) ← (void()*~) main::$0
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@7
  (bool) framedone#9 ← phi( main/(bool) framedone#12 main::@2/(bool) framedone#13 main::@7/(bool) framedone#0 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (bool) framedone#13 ← phi( main::@1/(bool) framedone#9 )
  (bool~) main::$1 ← *((byte*) RASTER) < (number) $14
  (bool~) main::$2 ← ! (bool~) main::$1
  if((bool~) main::$2) goto main::@1
  to:main::@7
main::@7: scope:[main]  from main::@2
  (bool) framedone#0 ← true
  to:main::@1
main::@return: scope:[main]  from main::@1
  (bool) framedone#6 ← phi( main::@1/(bool) framedone#9 )
  (bool) framedone#1 ← (bool) framedone#6
  return 
  to:@return
@1: scope:[]  from @begin
  (bool) framedone#2 ← false
  to:@2

interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  (bool) framedone#14 ← phi( @2/(bool) framedone#11 )
  *((byte*) BGCOL) ← ++ *((byte*) BGCOL)
  *((byte*) IRQ_STATUS) ← (byte) IRQ_RASTER
  (bool~) irq::$1 ← *((byte*) RASTER) > (number) $32
  (bool~) irq::$2 ← ! (bool~) irq::$1
  if((bool~) irq::$2) goto irq::@1
  to:irq::@2
irq::@1: scope:[irq]  from irq irq::@2
  (bool) framedone#10 ← phi( irq/(bool) framedone#14 irq::@2/(bool) framedone#3 )
  *((byte*) BGCOL) ← -- *((byte*) BGCOL)
  to:irq::@return
irq::@2: scope:[irq]  from irq
  (bool) framedone#3 ← false
  to:irq::@1
irq::@return: scope:[irq]  from irq::@1
  (bool) framedone#7 ← phi( irq::@1/(bool) framedone#10 )
  (bool) framedone#4 ← (bool) framedone#7
  return 
  to:@return
@2: scope:[]  from @1
  (bool) framedone#11 ← phi( @1/(bool) framedone#2 )
  call main 
  to:@3
@3: scope:[]  from @2
  (bool) framedone#8 ← phi( @2/(bool) framedone#1 )
  (bool) framedone#5 ← (bool) framedone#8
  to:@end
@end: scope:[]  from @3

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) CIA1_INTERRUPT
(byte) CIA_INTERRUPT_CLEAR
(byte*) IRQ_ENABLE
(byte) IRQ_RASTER
(byte*) IRQ_STATUS
(void()**) KERNEL_IRQ
(byte*) RASTER
(byte*) VIC_CONTROL
(bool) framedone
(bool) framedone#0
(bool) framedone#1
(bool) framedone#10
(bool) framedone#11
(bool) framedone#12
(bool) framedone#13
(bool) framedone#14
(bool) framedone#2
(bool) framedone#3
(bool) framedone#4
(bool) framedone#5
(bool) framedone#6
(bool) framedone#7
(bool) framedone#8
(bool) framedone#9
interrupt(KERNEL_MIN)(void()) irq()
(bool~) irq::$1
(bool~) irq::$2
(label) irq::@1
(label) irq::@2
(label) irq::@return
(void()) main()
(void()*~) main::$0
(bool~) main::$1
(bool~) main::$2
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return

Adding number conversion cast (unumber) 1 in (byte) IRQ_RASTER ← (number) 1
Adding number conversion cast (unumber) $7f in (byte) CIA_INTERRUPT_CLEAR ← (number) $7f
Adding number conversion cast (unumber) $7f in *((byte*) VIC_CONTROL) ← *((byte*) VIC_CONTROL) & (number) $7f
Adding number conversion cast (unumber) $fd in *((byte*) RASTER) ← (number) $fd
Adding number conversion cast (unumber) $14 in (bool~) main::$1 ← *((byte*) RASTER) < (number) $14
Adding number conversion cast (unumber) $32 in (bool~) irq::$1 ← *((byte*) RASTER) > (number) $32
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (void()**) KERNEL_IRQ ← (void()**)(number) $314
Inlining cast (byte*) RASTER ← (byte*)(number) $d012
Inlining cast (byte*) VIC_CONTROL ← (byte*)(number) $d011
Inlining cast (byte*) IRQ_STATUS ← (byte*)(number) $d019
Inlining cast (byte*) IRQ_ENABLE ← (byte*)(number) $d01a
Inlining cast (byte) IRQ_RASTER ← (unumber)(number) 1
Inlining cast (byte*) BGCOL ← (byte*)(number) $d020
Inlining cast (byte*) CIA1_INTERRUPT ← (byte*)(number) $dc0d
Inlining cast (byte) CIA_INTERRUPT_CLEAR ← (unumber)(number) $7f
Inlining cast *((byte*) RASTER) ← (unumber)(number) $fd
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (void()**) 788
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53265
Simplifying constant pointer cast (byte*) 53273
Simplifying constant pointer cast (byte*) 53274
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 56333
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast $fd
Simplifying constant integer cast $14
Simplifying constant integer cast $32
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $fd
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $32
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [22] (bool~) main::$2 ← *((byte*) RASTER) >= (byte) $14 from [21] (bool~) main::$1 ← *((byte*) RASTER) < (byte) $14
Inversing boolean not [33] (bool~) irq::$2 ← *((byte*) RASTER) <= (byte) $32 from [32] (bool~) irq::$1 ← *((byte*) RASTER) > (byte) $32
Successful SSA optimization Pass2UnaryNotSimplification
Alias (bool) framedone#1 = (bool) framedone#13 (bool) framedone#9 (bool) framedone#6 
Alias (bool) framedone#10 = (bool) framedone#7 (bool) framedone#4 
Alias (bool) framedone#11 = (bool) framedone#2 
Alias (bool) framedone#5 = (bool) framedone#8 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (bool) framedone#12 (bool) framedone#11
Identical Phi Values (bool) framedone#14 (bool) framedone#11
Identical Phi Values (bool) framedone#5 (bool) framedone#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$2 [23] if(*((byte*) RASTER)>=(byte) $14) goto main::@1
Simple Condition (bool~) irq::$2 [34] if(*((byte*) RASTER)<=(byte) $32) goto irq::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [15] (void()*~) main::$0 ← & interrupt(KERNEL_MIN)(void()) irq()
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const void()**) KERNEL_IRQ = (void()**) 788
Constant (const byte*) RASTER = (byte*) 53266
Constant (const byte*) VIC_CONTROL = (byte*) 53265
Constant (const byte*) IRQ_STATUS = (byte*) 53273
Constant (const byte*) IRQ_ENABLE = (byte*) 53274
Constant (const byte) IRQ_RASTER = 1
Constant (const byte*) BGCOL = (byte*) 53280
Constant (const byte*) CIA1_INTERRUPT = (byte*) 56333
Constant (const byte) CIA_INTERRUPT_CLEAR = $7f
Constant (const void()*) main::$0 = &irq
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [19] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Rewriting conditional comparison [34] if(*((const byte*) RASTER)<=(byte) $32) goto irq::@1
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $32+1 in if(*((const byte*) RASTER)<(byte) $32+(number) 1) goto irq::@1
Adding number conversion cast (unumber) 1 in if(*((const byte*) RASTER)<(unumber)(byte) $32+(number) 1) goto irq::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast (byte) $32+(unumber)(number) 1
Simplifying constant integer cast 1
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 1
Successful SSA optimization PassNFinalizeNumberTypeConversions
Constant inlined main::$0 = &interrupt(KERNEL_MIN)(void()) irq()
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@9(between main::@2 and main::@1)
Added new block during phi lifting irq::@3(between irq and irq::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @3
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:3 

Created 2 initial phi equivalence classes
Coalesced [13] framedone#15 ← framedone#11
Coalesced [17] framedone#17 ← framedone#0
Coalesced (already) [18] framedone#16 ← framedone#1
Coalesced [23] framedone#19 ← framedone#3
Coalesced [27] framedone#18 ← framedone#11
Coalesced down to 1 phi equivalence classes
Culled Empty Block (label) @3
Culled Empty Block (label) main::@9
Culled Empty Block (label) irq::@3
Renumbering block main::@7 to main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] (bool) framedone#11 ← false
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()

(void()) main()
main: scope:[main]  from @2
  asm { sei  }
  [6] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR
  [7] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) & (byte) $7f
  [8] *((const byte*) RASTER) ← (byte) $fd
  [9] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER
  [10] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@2 main::@3
  [12] (bool) framedone#1 ← phi( main/(bool) framedone#11 main::@2/(bool) framedone#1 main::@3/(bool) framedone#0 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [13] if(*((const byte*) RASTER)>=(byte) $14) goto main::@1
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] (bool) framedone#0 ← true
  to:main::@1

interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  [15] *((const byte*) BGCOL) ← ++ *((const byte*) BGCOL)
  [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER
  [17] if(*((const byte*) RASTER)<(byte) $32+(byte) 1) goto irq::@1
  to:irq::@2
irq::@2: scope:[irq]  from irq
  [18] (bool) framedone#3 ← false
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@2
  [19] (bool) framedone#10 ← phi( irq/(bool) framedone#11 irq::@2/(bool) framedone#3 )
  [20] *((const byte*) BGCOL) ← -- *((const byte*) BGCOL)
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1
  [21] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(bool) framedone
(bool) framedone#0 22.0
(bool) framedone#1 107.5
(bool) framedone#10 40.0
(bool) framedone#11 0.5
(bool) framedone#3 4.0
interrupt(KERNEL_MIN)(void()) irq()
(void()) main()

Initial phi equivalence classes
[ framedone#10 framedone#1 framedone#11 framedone#0 framedone#3 ]
Complete equivalence classes
[ framedone#10 framedone#1 framedone#11 framedone#0 framedone#3 ]
Allocated zp[1]:2 [ framedone#10 framedone#1 framedone#11 framedone#0 framedone#3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Illustrates a problem where a volatile bool modified at the end of an IRQ is not stored properly
// because it is assigned to the A register
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label BGCOL = $d020
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  .label framedone = 2
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (bool) framedone#11 ← false -- vboz1=vboc1 
  lda #0
  sta.z framedone
  // [2] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [3] call main 
  jsr main
  // [4] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [6] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    // [7] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to $0fd
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // [8] *((const byte*) RASTER) ← (byte) $fd -- _deref_pbuc1=vbuc2 
    lda #$fd
    sta RASTER
    // [9] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [10] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // asm { cli  }
    cli
    // [12] phi from main main::@2 main::@3 to main::@1 [phi:main/main::@2/main::@3->main::@1]
  __b1_from_main:
  __b1_from___b2:
  __b1_from___b3:
    // [12] phi (bool) framedone#1 = (bool) framedone#11 [phi:main/main::@2/main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] if(*((const byte*) RASTER)>=(byte) $14) goto main::@1 -- _deref_pbuc1_ge_vbuc2_then_la1 
    lda RASTER
    cmp #$14
    bcs __b1_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [14] (bool) framedone#0 ← true -- vboz1=vboc1 
    lda #1
    sta.z framedone
    jmp __b1_from___b3
}
  // irq
irq: {
    // entry interrupt(KERNEL_MIN)
    // [15] *((const byte*) BGCOL) ← ++ *((const byte*) BGCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    // [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // [17] if(*((const byte*) RASTER)<(byte) $32+(byte) 1) goto irq::@1 -- _deref_pbuc1_lt_vbuc2_then_la1 
    lda RASTER
    cmp #$32+1
    bcc __b1_from_irq
    jmp __b2
    // irq::@2
  __b2:
    // [18] (bool) framedone#3 ← false -- vboz1=vboc1 
    lda #0
    sta.z framedone
    // [19] phi from irq irq::@2 to irq::@1 [phi:irq/irq::@2->irq::@1]
  __b1_from_irq:
  __b1_from___b2:
    // [19] phi (bool) framedone#10 = (bool) framedone#11 [phi:irq/irq::@2->irq::@1#0] -- register_copy 
    jmp __b1
    // irq::@1
  __b1:
    // [20] *((const byte*) BGCOL) ← -- *((const byte*) BGCOL) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BGCOL
    jmp __breturn
    // irq::@return
  __breturn:
    // [21] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (bool) framedone#11 ← false [ framedone#11 ] (  [ framedone#11 ] ) always clobbers reg byte a 
Statement [6] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR [ framedone#11 ] ( main:3 [ framedone#11 ] ) always clobbers reg byte a 
Statement [7] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) & (byte) $7f [ framedone#11 ] ( main:3 [ framedone#11 ] ) always clobbers reg byte a 
Statement [8] *((const byte*) RASTER) ← (byte) $fd [ framedone#11 ] ( main:3 [ framedone#11 ] ) always clobbers reg byte a 
Statement [9] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER [ framedone#11 ] ( main:3 [ framedone#11 ] ) always clobbers reg byte a 
Statement [10] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq() [ framedone#11 ] ( main:3 [ framedone#11 ] ) always clobbers reg byte a 
Statement [13] if(*((const byte*) RASTER)>=(byte) $14) goto main::@1 [ framedone#1 ] ( main:3 [ framedone#1 ] ) always clobbers reg byte a 
Statement [14] (bool) framedone#0 ← true [ framedone#0 ] ( main:3 [ framedone#0 ] ) always clobbers reg byte a 
Statement [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER [ framedone#11 ] (  [ framedone#11 ] ) always clobbers reg byte a 
Statement [17] if(*((const byte*) RASTER)<(byte) $32+(byte) 1) goto irq::@1 [ framedone#11 ] (  [ framedone#11 ] ) always clobbers reg byte a 
Statement [18] (bool) framedone#3 ← false [ framedone#3 ] (  [ framedone#3 ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ framedone#10 framedone#1 framedone#11 framedone#0 framedone#3 ] : zp[1]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 174: zp[1]:2 [ framedone#10 framedone#1 framedone#11 framedone#0 framedone#3 ] 
Uplift Scope [main] 
Uplift Scope [irq] 

Uplifting [] best 1694 combination zp[1]:2 [ framedone#10 framedone#1 framedone#11 framedone#0 framedone#3 ] 
Uplifting [main] best 1694 combination 
Uplifting [irq] best 1694 combination 
Attempting to uplift remaining variables inzp[1]:2 [ framedone#10 framedone#1 framedone#11 framedone#0 framedone#3 ]
Uplifting [] best 1694 combination zp[1]:2 [ framedone#10 framedone#1 framedone#11 framedone#0 framedone#3 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates a problem where a volatile bool modified at the end of an IRQ is not stored properly
// because it is assigned to the A register
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label BGCOL = $d020
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  .label framedone = 2
  // @begin
__bbegin:
  jmp __b1
  // @1
__b1:
  // [1] (bool) framedone#11 ← false -- vboz1=vboc1 
  lda #0
  sta.z framedone
  // [2] phi from @1 to @2 [phi:@1->@2]
__b2_from___b1:
  jmp __b2
  // @2
__b2:
  // [3] call main 
  jsr main
  // [4] phi from @2 to @end [phi:@2->@end]
__bend_from___b2:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [6] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    // [7] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to $0fd
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // [8] *((const byte*) RASTER) ← (byte) $fd -- _deref_pbuc1=vbuc2 
    lda #$fd
    sta RASTER
    // [9] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // [10] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // asm { cli  }
    cli
    // [12] phi from main main::@2 main::@3 to main::@1 [phi:main/main::@2/main::@3->main::@1]
  __b1_from_main:
  __b1_from___b2:
  __b1_from___b3:
    // [12] phi (bool) framedone#1 = (bool) framedone#11 [phi:main/main::@2/main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] if(*((const byte*) RASTER)>=(byte) $14) goto main::@1 -- _deref_pbuc1_ge_vbuc2_then_la1 
    lda RASTER
    cmp #$14
    bcs __b1_from___b2
    jmp __b3
    // main::@3
  __b3:
    // [14] (bool) framedone#0 ← true -- vboz1=vboc1 
    lda #1
    sta.z framedone
    jmp __b1_from___b3
}
  // irq
irq: {
    // entry interrupt(KERNEL_MIN)
    // [15] *((const byte*) BGCOL) ← ++ *((const byte*) BGCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    // [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // [17] if(*((const byte*) RASTER)<(byte) $32+(byte) 1) goto irq::@1 -- _deref_pbuc1_lt_vbuc2_then_la1 
    lda RASTER
    cmp #$32+1
    bcc __b1_from_irq
    jmp __b2
    // irq::@2
  __b2:
    // [18] (bool) framedone#3 ← false -- vboz1=vboc1 
    lda #0
    sta.z framedone
    // [19] phi from irq irq::@2 to irq::@1 [phi:irq/irq::@2->irq::@1]
  __b1_from_irq:
  __b1_from___b2:
    // [19] phi (bool) framedone#10 = (bool) framedone#11 [phi:irq/irq::@2->irq::@1#0] -- register_copy 
    jmp __b1
    // irq::@1
  __b1:
    // [20] *((const byte*) BGCOL) ← -- *((const byte*) BGCOL) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BGCOL
    jmp __breturn
    // irq::@return
  __breturn:
    // [21] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __bend
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __bbegin with __b1
Replacing label __b1_from___b2 with __b2
Replacing label __b1_from___b3 with __b2
Replacing label __b1_from_irq with __b1
Removing instruction __bbegin:
Removing instruction __b2_from___b1:
Removing instruction __bend_from___b2:
Removing instruction __b1_from_main:
Removing instruction __b1_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Removing instruction __b1_from_irq:
Removing instruction __b1_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b2:
Removing instruction __bend:
Removing instruction __b3:
Removing instruction __b2:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Adding RTS to root block 
Succesful ASM optimization Pass5AddMainRts

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte*) BGCOL = (byte*) 53280
(const byte*) CIA1_INTERRUPT = (byte*) 56333
(const byte) CIA_INTERRUPT_CLEAR = (byte) $7f
(const byte*) IRQ_ENABLE = (byte*) 53274
(const byte) IRQ_RASTER = (byte) 1
(const byte*) IRQ_STATUS = (byte*) 53273
(const void()**) KERNEL_IRQ = (void()**) 788
(const byte*) RASTER = (byte*) 53266
(const byte*) VIC_CONTROL = (byte*) 53265
(bool) framedone
(bool) framedone#0 framedone zp[1]:2 22.0
(bool) framedone#1 framedone zp[1]:2 107.5
(bool) framedone#10 framedone zp[1]:2 40.0
(bool) framedone#11 framedone zp[1]:2 0.5
(bool) framedone#3 framedone zp[1]:2 4.0
interrupt(KERNEL_MIN)(void()) irq()
(label) irq::@1
(label) irq::@2
(label) irq::@return
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3

zp[1]:2 [ framedone#10 framedone#1 framedone#11 framedone#0 framedone#3 ]


FINAL ASSEMBLER
Score: 1025

  // File Comments
// Illustrates a problem where a volatile bool modified at the end of an IRQ is not stored properly
// because it is assigned to the A register
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__b1)
.pc = $80d "Program"
  // Global Constants & labels
  .label KERNEL_IRQ = $314
  .label RASTER = $d012
  .label VIC_CONTROL = $d011
  .label IRQ_STATUS = $d019
  .label IRQ_ENABLE = $d01a
  .const IRQ_RASTER = 1
  .label BGCOL = $d020
  .label CIA1_INTERRUPT = $dc0d
  .const CIA_INTERRUPT_CLEAR = $7f
  .label framedone = 2
  // @begin
  // @1
__b1:
  // framedone = false
  // [1] (bool) framedone#11 ← false -- vboz1=vboc1 
  lda #0
  sta.z framedone
  // [2] phi from @1 to @2 [phi:@1->@2]
  // @2
  // [3] call main 
  jsr main
  rts
  // [4] phi from @2 to @end [phi:@2->@end]
  // @end
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // *CIA1_INTERRUPT = CIA_INTERRUPT_CLEAR
    // [6] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR -- _deref_pbuc1=vbuc2 
    // Disable CIA 1 Timer IRQ
    lda #CIA_INTERRUPT_CLEAR
    sta CIA1_INTERRUPT
    // *VIC_CONTROL &=$7f
    // [7] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) & (byte) $7f -- _deref_pbuc1=_deref_pbuc1_band_vbuc2 
    // Set raster line to $0fd
    lda #$7f
    and VIC_CONTROL
    sta VIC_CONTROL
    // *RASTER = $fd
    // [8] *((const byte*) RASTER) ← (byte) $fd -- _deref_pbuc1=vbuc2 
    lda #$fd
    sta RASTER
    // *IRQ_ENABLE = IRQ_RASTER
    // [9] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    // Enable Raster Interrupt
    lda #IRQ_RASTER
    sta IRQ_ENABLE
    // *KERNEL_IRQ = &irq
    // [10] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq() -- _deref_pptc1=pprc2 
    // Set the IRQ routine
    lda #<irq
    sta KERNEL_IRQ
    lda #>irq
    sta KERNEL_IRQ+1
    // asm
    // asm { cli  }
    cli
    // [12] phi from main main::@2 main::@3 to main::@1 [phi:main/main::@2/main::@3->main::@1]
    // [12] phi (bool) framedone#1 = (bool) framedone#11 [phi:main/main::@2/main::@3->main::@1#0] -- register_copy 
    // main::@1
    // main::@2
  __b2:
    // if(*RASTER<20)
    // [13] if(*((const byte*) RASTER)>=(byte) $14) goto main::@1 -- _deref_pbuc1_ge_vbuc2_then_la1 
    lda RASTER
    cmp #$14
    bcs __b2
    // main::@3
    // framedone = true
    // [14] (bool) framedone#0 ← true -- vboz1=vboc1 
    lda #1
    sta.z framedone
    jmp __b2
}
  // irq
irq: {
    // entry interrupt(KERNEL_MIN)
    // (*BGCOL)++;
    // [15] *((const byte*) BGCOL) ← ++ *((const byte*) BGCOL) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    // *IRQ_STATUS = IRQ_RASTER
    // [16] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER -- _deref_pbuc1=vbuc2 
    lda #IRQ_RASTER
    sta IRQ_STATUS
    // if (*RASTER>50)
    // [17] if(*((const byte*) RASTER)<(byte) $32+(byte) 1) goto irq::@1 -- _deref_pbuc1_lt_vbuc2_then_la1 
    lda RASTER
    cmp #$32+1
    bcc __b1
    // irq::@2
    // framedone = false
    // [18] (bool) framedone#3 ← false -- vboz1=vboc1 
    lda #0
    sta.z framedone
    // [19] phi from irq irq::@2 to irq::@1 [phi:irq/irq::@2->irq::@1]
    // [19] phi (bool) framedone#10 = (bool) framedone#11 [phi:irq/irq::@2->irq::@1#0] -- register_copy 
    // irq::@1
  __b1:
    // (*BGCOL)--;
    // [20] *((const byte*) BGCOL) ← -- *((const byte*) BGCOL) -- _deref_pbuc1=_dec__deref_pbuc1 
    dec BGCOL
    // irq::@return
    // }
    // [21] return  - exit interrupt(KERNEL_MIN)
    jmp $ea81
}
  // File Data

