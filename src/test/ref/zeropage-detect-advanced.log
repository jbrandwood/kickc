Setting inferred volatile on symbol affected by address-of main::c = (byte*)&main::t

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::t = 0
  *((byte*)$400) = main::c[0]
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
const byte* main::c = (byte*)&main::t
volatile dword main::t loadstore

Adding number conversion cast (unumber) 0 in *((byte*)$400) = main::c[0]
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero main::c in [1] *((byte*) 1024) = main::c[0]
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::t = 0
  [1] *((byte*) 1024) = *main::c
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
volatile dword main::t loadstore 20.0

Initial phi equivalence classes
Added variable main::t to live range equivalence class [ main::t ]
Complete equivalence classes
[ main::t ]
Allocated zp[4]:2 [ main::t ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] main::t = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*) 1024) = *main::c [ ] (  [ ] { }  ) always clobbers reg byte a 
Potential registers zp[4]:2 [ main::t ] : zp[4]:2 , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 20: zp[4]:2 [ main::t ] 
Uplift Scope [] 

Uplifting [main] best 36 combination zp[4]:2 [ main::t ] 
Uplifting [] best 36 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Illustrates a problem where absolute addressing is used for zeropage-access
// This is caused by the compiler believing the pointer is into memory" (not knowing the upper part is 0x00 )
  // Upstart
  // Commodore 64 PRG executable file
.file [name="zeropage-detect-advanced.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label c = t
    .label t = 2
    // [0] main::t = 0 -- vduz1=vduc1 
    lda #<0
    sta.z t
    lda #>0
    sta.z t+1
    lda #<0>>$10
    sta.z t+2
    lda #>0>>$10
    sta.z t+3
    // [1] *((byte*) 1024) = *main::c -- _deref_pbuc1=_deref_pbuc2 
    lda.z c
    sta $400
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #>0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const byte* main::c = (byte*)&main::t
volatile dword main::t loadstore zp[4]:2 20.0

zp[4]:2 [ main::t ]


FINAL ASSEMBLER
Score: 31

  // File Comments
// Illustrates a problem where absolute addressing is used for zeropage-access
// This is caused by the compiler believing the pointer is into memory" (not knowing the upper part is 0x00 )
  // Upstart
  // Commodore 64 PRG executable file
.file [name="zeropage-detect-advanced.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label c = t
    .label t = 2
    // t
    // [0] main::t = 0 -- vduz1=vduc1 
    lda #<0
    sta.z t
    sta.z t+1
    lda #<0>>$10
    sta.z t+2
    lda #>0>>$10
    sta.z t+3
    // *(unsigned char *)0x0400 = c[0]
    // [1] *((byte*) 1024) = *main::c -- _deref_pbuc1=_deref_pbuc2 
    lda.z c
    sta $400
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

