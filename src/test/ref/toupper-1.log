Inlined call vicSelectGfxBank::$0 = call toDd00 vicSelectGfxBank::gfx 
Inlined call main::$1 = call wherey 
Inlined call call __init 

CONTROL FLOW GRAPH SSA

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from main::@2
  toupper::ch#1 = phi( main::@2/toupper::ch#0 )
  toupper::$0 = toupper::ch#1 >= 'a'
  toupper::$1 = toupper::ch#1 <= 'z'
  toupper::$2 = toupper::$0 && toupper::$1
  if(toupper::$2) goto toupper::@1
  to:toupper::@2
toupper::@1: scope:[toupper]  from toupper
  toupper::ch#2 = phi( toupper/toupper::ch#1 )
  toupper::$3 = toupper::ch#2 + 'A'-'a'
  toupper::return#0 = toupper::$3
  to:toupper::@return
toupper::@2: scope:[toupper]  from toupper
  toupper::ch#3 = phi( toupper/toupper::ch#1 )
  toupper::return#1 = toupper::ch#3
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper::@1 toupper::@2
  toupper::return#4 = phi( toupper::@1/toupper::return#0, toupper::@2/toupper::return#1 )
  toupper::return#2 = toupper::return#4
  return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@3 cscroll::@4
  memcpy::num#2 = phi( cscroll::@3/memcpy::num#0, cscroll::@4/memcpy::num#1 )
  memcpy::destination#2 = phi( cscroll::@3/memcpy::destination#0, cscroll::@4/memcpy::destination#1 )
  memcpy::source#2 = phi( cscroll::@3/memcpy::source#0, cscroll::@4/memcpy::source#1 )
  memcpy::src#0 = ((byte*)) memcpy::source#2
  memcpy::dst#0 = ((byte*)) memcpy::destination#2
  memcpy::$2 = (byte*)memcpy::source#2
  memcpy::$0 = memcpy::$2 + memcpy::num#2
  memcpy::src_end#0 = memcpy::$0
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  memcpy::destination#4 = phi( memcpy/memcpy::destination#2, memcpy::@2/memcpy::destination#5 )
  memcpy::dst#3 = phi( memcpy/memcpy::dst#0, memcpy::@2/memcpy::dst#1 )
  memcpy::src_end#1 = phi( memcpy/memcpy::src_end#0, memcpy::@2/memcpy::src_end#2 )
  memcpy::src#2 = phi( memcpy/memcpy::src#0, memcpy::@2/memcpy::src#1 )
  memcpy::$1 = memcpy::src#2 != memcpy::src_end#1
  if(memcpy::$1) goto memcpy::@2
  to:memcpy::@3
memcpy::@2: scope:[memcpy]  from memcpy::@1
  memcpy::destination#5 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::src_end#2 = phi( memcpy::@1/memcpy::src_end#1 )
  memcpy::dst#2 = phi( memcpy::@1/memcpy::dst#3 )
  memcpy::src#3 = phi( memcpy::@1/memcpy::src#2 )
  *memcpy::dst#2 = *memcpy::src#3
  memcpy::dst#1 = ++ memcpy::dst#2
  memcpy::src#1 = ++ memcpy::src#3
  to:memcpy::@1
memcpy::@3: scope:[memcpy]  from memcpy::@1
  memcpy::destination#3 = phi( memcpy::@1/memcpy::destination#4 )
  memcpy::return#0 = memcpy::destination#3
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@3
  memcpy::return#4 = phi( memcpy::@3/memcpy::return#0 )
  memcpy::return#1 = memcpy::return#4
  return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@5 cscroll::@6
  memset::c#5 = phi( cscroll::@5/memset::c#0, cscroll::@6/memset::c#1 )
  memset::str#4 = phi( cscroll::@5/memset::str#0, cscroll::@6/memset::str#1 )
  memset::num#2 = phi( cscroll::@5/memset::num#0, cscroll::@6/memset::num#1 )
  memset::$0 = memset::num#2 > 0
  memset::$1 = ! memset::$0
  if(memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@3
  memset::str#2 = phi( memset/memset::str#4, memset::@3/memset::str#5 )
  memset::return#0 = memset::str#2
  to:memset::@return
memset::@2: scope:[memset]  from memset
  memset::c#4 = phi( memset/memset::c#5 )
  memset::num#3 = phi( memset/memset::num#2 )
  memset::str#3 = phi( memset/memset::str#4 )
  memset::$4 = (byte*)memset::str#3
  memset::$2 = memset::$4 + memset::num#3
  memset::end#0 = memset::$2
  memset::dst#0 = ((byte*)) memset::str#3
  to:memset::@3
memset::@3: scope:[memset]  from memset::@2 memset::@4
  memset::c#3 = phi( memset::@2/memset::c#4, memset::@4/memset::c#2 )
  memset::str#5 = phi( memset::@2/memset::str#3, memset::@4/memset::str#6 )
  memset::end#1 = phi( memset::@2/memset::end#0, memset::@4/memset::end#2 )
  memset::dst#2 = phi( memset::@2/memset::dst#0, memset::@4/memset::dst#1 )
  memset::$3 = memset::dst#2 != memset::end#1
  if(memset::$3) goto memset::@4
  to:memset::@1
memset::@4: scope:[memset]  from memset::@3
  memset::str#6 = phi( memset::@3/memset::str#5 )
  memset::end#2 = phi( memset::@3/memset::end#1 )
  memset::dst#3 = phi( memset::@3/memset::dst#2 )
  memset::c#2 = phi( memset::@3/memset::c#3 )
  *memset::dst#3 = memset::c#2
  memset::dst#1 = ++ memset::dst#3
  to:memset::@3
memset::@return: scope:[memset]  from memset::@1
  memset::return#4 = phi( memset::@1/memset::return#0 )
  memset::return#1 = memset::return#4
  return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  clrscr::line_text#0 = CONIO_SCREEN_TEXT
  clrscr::line_cols#0 = CONIO_SCREEN_COLORS
  clrscr::l#0 = 0
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@6
  clrscr::line_cols#6 = phi( clrscr/clrscr::line_cols#0, clrscr::@6/clrscr::line_cols#1 )
  clrscr::line_text#6 = phi( clrscr/clrscr::line_text#0, clrscr::@6/clrscr::line_text#1 )
  clrscr::l#2 = phi( clrscr/clrscr::l#0, clrscr::@6/clrscr::l#1 )
  clrscr::$0 = clrscr::l#2 < $19
  if(clrscr::$0) goto clrscr::@2
  to:clrscr::@3
clrscr::@2: scope:[clrscr]  from clrscr::@1
  clrscr::l#5 = phi( clrscr::@1/clrscr::l#2 )
  clrscr::line_cols#5 = phi( clrscr::@1/clrscr::line_cols#6 )
  clrscr::line_text#5 = phi( clrscr::@1/clrscr::line_text#6 )
  clrscr::c#0 = 0
  to:clrscr::@4
clrscr::@3: scope:[clrscr]  from clrscr::@1
  conio_cursor_x = 0
  conio_cursor_y = 0
  conio_line_text = CONIO_SCREEN_TEXT
  conio_line_color = CONIO_SCREEN_COLORS
  to:clrscr::@return
clrscr::@4: scope:[clrscr]  from clrscr::@2 clrscr::@5
  clrscr::l#4 = phi( clrscr::@2/clrscr::l#5, clrscr::@5/clrscr::l#6 )
  clrscr::line_cols#4 = phi( clrscr::@2/clrscr::line_cols#5, clrscr::@5/clrscr::line_cols#2 )
  clrscr::line_text#4 = phi( clrscr::@2/clrscr::line_text#5, clrscr::@5/clrscr::line_text#2 )
  clrscr::c#2 = phi( clrscr::@2/clrscr::c#0, clrscr::@5/clrscr::c#1 )
  clrscr::$1 = clrscr::c#2 < $28
  if(clrscr::$1) goto clrscr::@5
  to:clrscr::@6
clrscr::@5: scope:[clrscr]  from clrscr::@4
  clrscr::l#6 = phi( clrscr::@4/clrscr::l#4 )
  clrscr::line_cols#2 = phi( clrscr::@4/clrscr::line_cols#4 )
  clrscr::c#3 = phi( clrscr::@4/clrscr::c#2 )
  clrscr::line_text#2 = phi( clrscr::@4/clrscr::line_text#4 )
  clrscr::line_text#2[clrscr::c#3] = ' '
  clrscr::line_cols#2[clrscr::c#3] = conio_textcolor
  clrscr::c#1 = ++ clrscr::c#3
  to:clrscr::@4
clrscr::@6: scope:[clrscr]  from clrscr::@4
  clrscr::l#3 = phi( clrscr::@4/clrscr::l#4 )
  clrscr::line_cols#3 = phi( clrscr::@4/clrscr::line_cols#4 )
  clrscr::line_text#3 = phi( clrscr::@4/clrscr::line_text#4 )
  clrscr::line_text#1 = clrscr::line_text#3 + $28
  clrscr::line_cols#1 = clrscr::line_cols#3 + $28
  clrscr::l#1 = ++ clrscr::l#3
  to:clrscr::@1
clrscr::@return: scope:[clrscr]  from clrscr::@3
  return 
  to:@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from cscroll::@2 main::@3
  gotoxy::x#5 = phi( cscroll::@2/gotoxy::x#1, main::@3/gotoxy::x#2 )
  gotoxy::y#3 = phi( cscroll::@2/gotoxy::y#1, main::@3/gotoxy::y#2 )
  gotoxy::$0 = gotoxy::y#3 > $19
  gotoxy::$1 = ! gotoxy::$0
  if(gotoxy::$1) goto gotoxy::@1
  to:gotoxy::@3
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  gotoxy::y#5 = phi( gotoxy/gotoxy::y#3, gotoxy::@3/gotoxy::y#0 )
  gotoxy::x#3 = phi( gotoxy/gotoxy::x#5, gotoxy::@3/gotoxy::x#6 )
  gotoxy::$2 = gotoxy::x#3 >= $28
  gotoxy::$3 = ! gotoxy::$2
  if(gotoxy::$3) goto gotoxy::@2
  to:gotoxy::@4
gotoxy::@3: scope:[gotoxy]  from gotoxy
  gotoxy::x#6 = phi( gotoxy/gotoxy::x#5 )
  gotoxy::y#0 = 0
  to:gotoxy::@1
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1 gotoxy::@4
  gotoxy::y#4 = phi( gotoxy::@1/gotoxy::y#5, gotoxy::@4/gotoxy::y#6 )
  gotoxy::x#4 = phi( gotoxy::@1/gotoxy::x#3, gotoxy::@4/gotoxy::x#0 )
  conio_cursor_x = gotoxy::x#4
  conio_cursor_y = gotoxy::y#4
  gotoxy::$7 = (word)gotoxy::y#4
  gotoxy::$4 = gotoxy::$7 * $28
  gotoxy::line_offset#0 = gotoxy::$4
  gotoxy::$5 = CONIO_SCREEN_TEXT + gotoxy::line_offset#0
  conio_line_text = gotoxy::$5
  gotoxy::$6 = CONIO_SCREEN_COLORS + gotoxy::line_offset#0
  conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@4: scope:[gotoxy]  from gotoxy::@1
  gotoxy::y#6 = phi( gotoxy::@1/gotoxy::y#5 )
  gotoxy::x#0 = 0
  to:gotoxy::@2
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from main::@1 main::@7
  cputc::c#2 = phi( main::@1/cputc::c#0, main::@7/cputc::c#1 )
  cputc::$0 = cputc::c#2 == '
'
  if(cputc::$0) goto cputc::@1
  to:cputc::@2
cputc::@1: scope:[cputc]  from cputc
  call cputln 
  to:cputc::@4
cputc::@4: scope:[cputc]  from cputc::@1
  to:cputc::@return
cputc::@2: scope:[cputc]  from cputc
  cputc::c#3 = phi( cputc/cputc::c#2 )
  conio_line_text[conio_cursor_x] = cputc::c#3
  conio_line_color[conio_cursor_x] = conio_textcolor
  conio_cursor_x = ++ conio_cursor_x
  cputc::$1 = conio_cursor_x == $28
  cputc::$2 = ! cputc::$1
  if(cputc::$2) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  call cputln 
  to:cputc::@5
cputc::@5: scope:[cputc]  from cputc::@3
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@2 cputc::@4 cputc::@5
  return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  conio_line_text = conio_line_text + $28
  conio_line_color = conio_line_color + $28
  conio_cursor_x = 0
  conio_cursor_y = ++ conio_cursor_y
  call cscroll 
  to:cputln::@1
cputln::@1: scope:[cputln]  from cputln
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln::@1
  return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  cscroll::$0 = conio_cursor_y == $19
  cscroll::$1 = ! cscroll::$0
  if(cscroll::$1) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  cscroll::$7 = 0 != conio_scroll_enable
  if(cscroll::$7) goto cscroll::@3
  to:cscroll::@2
cscroll::@3: scope:[cscroll]  from cscroll::@1
  memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
  memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
  memcpy::num#0 = $19*$28-$28
  call memcpy 
  memcpy::return#2 = memcpy::return#1
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
  memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
  memcpy::num#1 = $19*$28-$28
  call memcpy 
  memcpy::return#3 = memcpy::return#1
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
  memset::c#0 = ' '
  memset::num#0 = $28
  call memset 
  memset::return#2 = memset::return#1
  to:cscroll::@6
cscroll::@6: scope:[cscroll]  from cscroll::@5
  memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
  memset::c#1 = conio_textcolor
  memset::num#1 = $28
  call memset 
  memset::return#3 = memset::return#1
  to:cscroll::@7
cscroll::@7: scope:[cscroll]  from cscroll::@6
  conio_line_text = conio_line_text - $28
  conio_line_color = conio_line_color - $28
  conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@2: scope:[cscroll]  from cscroll::@1
  gotoxy::x#1 = 0
  gotoxy::y#1 = 0
  call gotoxy 
  to:cscroll::@8
cscroll::@8: scope:[cscroll]  from cscroll::@2
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@7 cscroll::@8
  return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  *((byte*)$d018) = $17
  call clrscr 
  to:main::@4
main::@4: scope:[main]  from main
  main::c#0 = 0
  to:main::@1
main::@1: scope:[main]  from main::@4 main::@5
  main::c#2 = phi( main::@4/main::c#0, main::@5/main::c#1 )
  cputc::c#0 = main::c#2
  call cputc 
  to:main::@5
main::@5: scope:[main]  from main::@1
  main::c#3 = phi( main::@1/main::c#2 )
  main::c#1 = main::c#3 + rangenext(0,$ff)
  main::$5 = main::c#1 != rangelast(0,$ff)
  if(main::$5) goto main::@1
  to:main::wherey1
main::wherey1: scope:[main]  from main::@5
  main::wherey1_return#0 = conio_cursor_y
  to:main::wherey1_@return
main::wherey1_@return: scope:[main]  from main::wherey1
  main::wherey1_return#2 = phi( main::wherey1/main::wherey1_return#0 )
  main::wherey1_return#1 = main::wherey1_return#2
  to:main::@3
main::@3: scope:[main]  from main::wherey1_@return
  main::wherey1_return#3 = phi( main::wherey1_@return/main::wherey1_return#1 )
  main::$1 = main::wherey1_return#3
  main::$2 = main::$1 + 2
  gotoxy::x#2 = 0
  gotoxy::y#2 = main::$2
  call gotoxy 
  to:main::@6
main::@6: scope:[main]  from main::@3
  main::c1#0 = 0
  to:main::@2
main::@2: scope:[main]  from main::@6 main::@8
  main::c1#2 = phi( main::@6/main::c1#0, main::@8/main::c1#1 )
  toupper::ch#0 = main::c1#2
  call toupper 
  toupper::return#3 = toupper::return#2
  to:main::@7
main::@7: scope:[main]  from main::@2
  main::c1#4 = phi( main::@2/main::c1#2 )
  toupper::return#5 = phi( main::@2/toupper::return#3 )
  main::$6 = toupper::return#5
  cputc::c#1 = main::$6
  call cputc 
  to:main::@8
main::@8: scope:[main]  from main::@7
  main::c1#3 = phi( main::@7/main::c1#4 )
  main::c1#1 = main::c1#3 + rangenext(0,$ff)
  main::$8 = main::c1#1 != rangelast(0,$ff)
  if(main::$8) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@8
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  conio_cursor_x = 0
  conio_cursor_y = 0
  conio_line_text = CONIO_SCREEN_TEXT
  conio_line_color = CONIO_SCREEN_COLORS
  conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
  conio_scroll_enable = 1
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* COLORRAM = (byte*)$d800
const nomodify byte* CONIO_SCREEN_COLORS = COLORRAM
const nomodify byte* CONIO_SCREEN_TEXT = DEFAULT_SCREEN
const nomodify byte CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
const nomodify byte* DEFAULT_SCREEN = (byte*)$400
const nomodify byte LIGHT_BLUE = $e
void __start()
void clrscr()
bool~ clrscr::$0
bool~ clrscr::$1
byte clrscr::c
byte clrscr::c#0
byte clrscr::c#1
byte clrscr::c#2
byte clrscr::c#3
byte clrscr::l
byte clrscr::l#0
byte clrscr::l#1
byte clrscr::l#2
byte clrscr::l#3
byte clrscr::l#4
byte clrscr::l#5
byte clrscr::l#6
byte* clrscr::line_cols
byte* clrscr::line_cols#0
byte* clrscr::line_cols#1
byte* clrscr::line_cols#2
byte* clrscr::line_cols#3
byte* clrscr::line_cols#4
byte* clrscr::line_cols#5
byte* clrscr::line_cols#6
byte* clrscr::line_text
byte* clrscr::line_text#0
byte* clrscr::line_text#1
byte* clrscr::line_text#2
byte* clrscr::line_text#3
byte* clrscr::line_text#4
byte* clrscr::line_text#5
byte* clrscr::line_text#6
byte conio_cursor_x loadstore
byte conio_cursor_y loadstore
byte* conio_line_color loadstore
byte* conio_line_text loadstore
byte conio_scroll_enable loadstore
byte conio_textcolor loadstore
void cputc(byte cputc::c)
bool~ cputc::$0
bool~ cputc::$1
bool~ cputc::$2
byte cputc::c
byte cputc::c#0
byte cputc::c#1
byte cputc::c#2
byte cputc::c#3
void cputln()
void cscroll()
bool~ cscroll::$0
bool~ cscroll::$1
bool~ cscroll::$7
void gotoxy(byte gotoxy::x , byte gotoxy::y)
bool~ gotoxy::$0
bool~ gotoxy::$1
bool~ gotoxy::$2
bool~ gotoxy::$3
number~ gotoxy::$4
byte*~ gotoxy::$5
byte*~ gotoxy::$6
word~ gotoxy::$7
word gotoxy::line_offset
word gotoxy::line_offset#0
byte gotoxy::x
byte gotoxy::x#0
byte gotoxy::x#1
byte gotoxy::x#2
byte gotoxy::x#3
byte gotoxy::x#4
byte gotoxy::x#5
byte gotoxy::x#6
byte gotoxy::y
byte gotoxy::y#0
byte gotoxy::y#1
byte gotoxy::y#2
byte gotoxy::y#3
byte gotoxy::y#4
byte gotoxy::y#5
byte gotoxy::y#6
void main()
byte~ main::$1
number~ main::$2
bool~ main::$5
byte~ main::$6
bool~ main::$8
byte main::c
byte main::c#0
byte main::c#1
byte main::c#2
byte main::c#3
byte main::c1
byte main::c1#0
byte main::c1#1
byte main::c1#2
byte main::c1#3
byte main::c1#4
byte main::wherey1_return
byte main::wherey1_return#0
byte main::wherey1_return#1
byte main::wherey1_return#2
byte main::wherey1_return#3
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
byte*~ memcpy::$0
bool~ memcpy::$1
byte*~ memcpy::$2
void* memcpy::destination
void* memcpy::destination#0
void* memcpy::destination#1
void* memcpy::destination#2
void* memcpy::destination#3
void* memcpy::destination#4
void* memcpy::destination#5
byte* memcpy::dst
byte* memcpy::dst#0
byte* memcpy::dst#1
byte* memcpy::dst#2
byte* memcpy::dst#3
word memcpy::num
word memcpy::num#0
word memcpy::num#1
word memcpy::num#2
void* memcpy::return
void* memcpy::return#0
void* memcpy::return#1
void* memcpy::return#2
void* memcpy::return#3
void* memcpy::return#4
void* memcpy::source
void* memcpy::source#0
void* memcpy::source#1
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#0
byte* memcpy::src#1
byte* memcpy::src#2
byte* memcpy::src#3
byte* memcpy::src_end
byte* memcpy::src_end#0
byte* memcpy::src_end#1
byte* memcpy::src_end#2
void* memset(void* memset::str , byte memset::c , word memset::num)
bool~ memset::$0
bool~ memset::$1
byte*~ memset::$2
bool~ memset::$3
byte*~ memset::$4
byte memset::c
byte memset::c#0
byte memset::c#1
byte memset::c#2
byte memset::c#3
byte memset::c#4
byte memset::c#5
byte* memset::dst
byte* memset::dst#0
byte* memset::dst#1
byte* memset::dst#2
byte* memset::dst#3
byte* memset::end
byte* memset::end#0
byte* memset::end#1
byte* memset::end#2
word memset::num
word memset::num#0
word memset::num#1
word memset::num#2
word memset::num#3
void* memset::return
void* memset::return#0
void* memset::return#1
void* memset::return#2
void* memset::return#3
void* memset::return#4
void* memset::str
void* memset::str#0
void* memset::str#1
void* memset::str#2
void* memset::str#3
void* memset::str#4
void* memset::str#5
void* memset::str#6
byte toupper(byte toupper::ch)
bool~ toupper::$0
bool~ toupper::$1
bool~ toupper::$2
byte~ toupper::$3
byte toupper::ch
byte toupper::ch#0
byte toupper::ch#1
byte toupper::ch#2
byte toupper::ch#3
byte toupper::return
byte toupper::return#0
byte toupper::return#1
byte toupper::return#2
byte toupper::return#3
byte toupper::return#4
byte toupper::return#5

Adding number conversion cast (unumber) 0 in memset::$0 = memset::num#2 > 0
Adding number conversion cast (unumber) $19 in clrscr::$0 = clrscr::l#2 < $19
Adding number conversion cast (unumber) 0 in conio_cursor_x = 0
Adding number conversion cast (unumber) 0 in conio_cursor_y = 0
Adding number conversion cast (unumber) $28 in clrscr::$1 = clrscr::c#2 < $28
Adding number conversion cast (unumber) $28 in clrscr::line_text#1 = clrscr::line_text#3 + $28
Adding number conversion cast (unumber) $28 in clrscr::line_cols#1 = clrscr::line_cols#3 + $28
Adding number conversion cast (unumber) $19 in gotoxy::$0 = gotoxy::y#3 > $19
Adding number conversion cast (unumber) $28 in gotoxy::$2 = gotoxy::x#3 >= $28
Adding number conversion cast (unumber) 0 in gotoxy::y#0 = 0
Adding number conversion cast (unumber) $28 in gotoxy::$4 = gotoxy::$7 * $28
Adding number conversion cast (unumber) gotoxy::$4 in gotoxy::$4 = gotoxy::$7 * (unumber)$28
Adding number conversion cast (unumber) 0 in gotoxy::x#0 = 0
Adding number conversion cast (unumber) $28 in cputc::$1 = conio_cursor_x == $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text + $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color + $28
Adding number conversion cast (unumber) 0 in conio_cursor_x = 0
Adding number conversion cast (unumber) $19 in cscroll::$0 = conio_cursor_y == $19
Adding number conversion cast (unumber) 0 in cscroll::$7 = 0 != conio_scroll_enable
Adding number conversion cast (unumber) $28 in memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#0 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Adding number conversion cast (unumber) $19*$28-$28 in memcpy::num#1 = $19*$28-$28
Adding number conversion cast (unumber) $28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#0 = (void*)CONIO_SCREEN_TEXT+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#0 = $28
Adding number conversion cast (unumber) $28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-$28
Adding number conversion cast (unumber) $19*$28 in memset::str#1 = (void*)CONIO_SCREEN_COLORS+$19*$28-(unumber)$28
Adding number conversion cast (unumber) $28 in memset::num#1 = $28
Adding number conversion cast (unumber) $28 in conio_line_text = conio_line_text - $28
Adding number conversion cast (unumber) $28 in conio_line_color = conio_line_color - $28
Adding number conversion cast (unumber) 0 in gotoxy::x#1 = 0
Adding number conversion cast (unumber) 0 in gotoxy::y#1 = 0
Adding number conversion cast (unumber) $17 in *((byte*)$d018) = $17
Adding number conversion cast (unumber) 2 in main::$2 = main::$1 + 2
Adding number conversion cast (unumber) main::$2 in main::$2 = main::$1 + (unumber)2
Adding number conversion cast (unumber) 0 in gotoxy::x#2 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast memcpy::src#0 = (byte*)memcpy::source#2
Inlining cast memcpy::dst#0 = (byte*)memcpy::destination#2
Inlining cast memset::dst#0 = (byte*)memset::str#3
Inlining cast conio_cursor_x = (unumber)0
Inlining cast conio_cursor_y = (unumber)0
Inlining cast gotoxy::y#0 = (unumber)0
Inlining cast gotoxy::x#0 = (unumber)0
Inlining cast conio_cursor_x = (unumber)0
Inlining cast memcpy::num#0 = (unumber)$19*$28-$28
Inlining cast memcpy::num#1 = (unumber)$19*$28-$28
Inlining cast memset::num#0 = (unumber)$28
Inlining cast memset::num#1 = (unumber)$28
Inlining cast gotoxy::x#1 = (unumber)0
Inlining cast gotoxy::y#1 = (unumber)0
Inlining cast *((byte*)$d018) = (unumber)$17
Inlining cast gotoxy::x#2 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast $19
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $17
Simplifying constant pointer cast (byte*) 53272
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type $19
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $19
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type $19
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type $28
Finalized unsigned number type 0
Finalized unsigned number type 0
Finalized unsigned number type $17
Finalized unsigned number type 2
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to word in gotoxy::$4 = gotoxy::$7 * $28
Inferred type updated to byte in main::$2 = main::$1 + 2
Inversing boolean not [33] memset::$1 = memset::num#2 <= 0 from [32] memset::$0 = memset::num#2 > 0
Inversing boolean not [77] gotoxy::$1 = gotoxy::y#3 <= $19 from [76] gotoxy::$0 = gotoxy::y#3 > $19
Inversing boolean not [81] gotoxy::$3 = gotoxy::x#3 < $28 from [80] gotoxy::$2 = gotoxy::x#3 >= $28
Inversing boolean not [107] cputc::$2 = conio_cursor_x != $28 from [106] cputc::$1 = conio_cursor_x == $28
Inversing boolean not [118] cscroll::$1 = conio_cursor_y != $19 from [117] cscroll::$0 = conio_cursor_y == $19
Successful SSA optimization Pass2UnaryNotSimplification
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias toupper::ch#1 = toupper::ch#2 toupper::ch#3 toupper::return#1 
Alias toupper::return#0 = toupper::$3 
Alias toupper::return#2 = toupper::return#4 
Alias memcpy::src_end#0 = memcpy::$0 
Alias memcpy::src#2 = memcpy::src#3 
Alias memcpy::dst#2 = memcpy::dst#3 
Alias memcpy::src_end#1 = memcpy::src_end#2 
Alias memcpy::destination#3 = memcpy::destination#5 memcpy::destination#4 memcpy::return#0 memcpy::return#4 memcpy::return#1 
Alias memset::return#0 = memset::str#2 memset::return#4 memset::return#1 
Alias memset::str#3 = memset::str#4 
Alias memset::num#2 = memset::num#3 
Alias memset::c#4 = memset::c#5 
Alias memset::end#0 = memset::$2 
Alias memset::c#2 = memset::c#3 
Alias memset::dst#2 = memset::dst#3 
Alias memset::end#1 = memset::end#2 
Alias memset::str#5 = memset::str#6 
Alias clrscr::line_text#5 = clrscr::line_text#6 
Alias clrscr::line_cols#5 = clrscr::line_cols#6 
Alias clrscr::l#2 = clrscr::l#5 
Alias clrscr::line_text#2 = clrscr::line_text#4 clrscr::line_text#3 
Alias clrscr::c#2 = clrscr::c#3 
Alias clrscr::line_cols#2 = clrscr::line_cols#4 clrscr::line_cols#3 
Alias clrscr::l#3 = clrscr::l#6 clrscr::l#4 
Alias gotoxy::x#5 = gotoxy::x#6 
Alias gotoxy::line_offset#0 = gotoxy::$4 
Alias gotoxy::y#5 = gotoxy::y#6 
Alias cputc::c#2 = cputc::c#3 
Alias main::c#2 = main::c#3 
Alias main::wherey1_return#0 = main::wherey1_return#2 main::wherey1_return#1 main::wherey1_return#3 main::$1 
Alias gotoxy::y#2 = main::$2 
Alias toupper::return#3 = toupper::return#5 
Alias main::c1#2 = main::c1#4 main::c1#3 
Alias cputc::c#1 = main::$6 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias gotoxy::x#3 = gotoxy::x#5 
Alias gotoxy::y#4 = gotoxy::y#5 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values toupper::ch#1 toupper::ch#0
Identical Phi Values memcpy::src_end#1 memcpy::src_end#0
Identical Phi Values memcpy::destination#3 memcpy::destination#2
Identical Phi Values memset::end#1 memset::end#0
Identical Phi Values memset::str#5 memset::str#3
Identical Phi Values memset::c#2 memset::c#4
Identical Phi Values clrscr::line_text#2 clrscr::line_text#5
Identical Phi Values clrscr::line_cols#2 clrscr::line_cols#5
Identical Phi Values clrscr::l#3 clrscr::l#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values memset::return#0 memset::str#3
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition memcpy::$1 [15] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
Simple Condition memset::$1 [22] if(memset::num#2<=0) goto memset::@1
Simple Condition memset::$3 [29] if(memset::dst#2!=memset::end#0) goto memset::@4
Simple Condition clrscr::$0 [38] if(clrscr::l#2<$19) goto clrscr::@2
Simple Condition clrscr::$1 [46] if(clrscr::c#2<$28) goto clrscr::@5
Simple Condition gotoxy::$1 [56] if(gotoxy::y#3<=$19) goto gotoxy::@1
Simple Condition gotoxy::$3 [59] if(gotoxy::x#3<$28) goto gotoxy::@2
Simple Condition cputc::$0 [74] if(cputc::c#2=='
') goto cputc::@1
Simple Condition cputc::$2 [80] if(conio_cursor_x!=$28) goto cputc::@return
Simple Condition cscroll::$1 [90] if(conio_cursor_y!=$19) goto cscroll::@return
Simple Condition cscroll::$7 [92] if(0!=conio_scroll_enable) goto cscroll::@3
Simple Condition main::$5 [128] if(main::c#1!=rangelast(0,$ff)) goto main::@1
Simple Condition main::$8 [142] if(main::c1#1!=rangelast(0,$ff)) goto main::@2
Successful SSA optimization Pass2ConditionalJumpSimplification
Rewriting && if()-condition to two if()s [3] toupper::$2 = toupper::$0 && toupper::$1
Successful SSA optimization Pass2ConditionalAndOrRewriting
Constant right-side identified [95] memcpy::num#0 = (unumber)$19*$28-$28
Constant right-side identified [100] memcpy::num#1 = (unumber)$19*$28-$28
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant clrscr::line_text#0 = CONIO_SCREEN_TEXT
Constant clrscr::line_cols#0 = CONIO_SCREEN_COLORS
Constant clrscr::l#0 = 0
Constant clrscr::c#0 = 0
Constant gotoxy::y#0 = 0
Constant gotoxy::x#0 = 0
Constant memcpy::destination#0 = (void*)CONIO_SCREEN_TEXT
Constant memcpy::source#0 = (void*)CONIO_SCREEN_TEXT+$28
Constant memcpy::num#0 = (unumber)$19*$28-$28
Constant memcpy::destination#1 = (void*)CONIO_SCREEN_COLORS
Constant memcpy::source#1 = (void*)CONIO_SCREEN_COLORS+$28
Constant memcpy::num#1 = (unumber)$19*$28-$28
Constant memset::str#0 = (void*)CONIO_SCREEN_TEXT+(word)$19*$28-$28
Constant memset::c#0 = ' '
Constant memset::num#0 = $28
Constant memset::str#1 = (void*)CONIO_SCREEN_COLORS+(word)$19*$28-$28
Constant memset::num#1 = $28
Constant gotoxy::x#1 = 0
Constant gotoxy::y#1 = 0
Constant main::c#0 = 0
Constant gotoxy::x#2 = 0
Constant main::c1#0 = 0
Constant conio_textcolor = CONIO_TEXTCOLOR_DEFAULT
Constant conio_scroll_enable = 1
Successful SSA optimization Pass2ConstantIdentification
Constant memset::c#1 = conio_textcolor
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [92] if(0!=conio_scroll_enable) goto cscroll::@3
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [126] main::c#1 = ++ main::c#2 to ++
Resolved ranged comparison value [128] if(main::c#1!=rangelast(0,$ff)) goto main::@1 to 0
Resolved ranged next value [140] main::c1#1 = ++ main::c1#2 to ++
Resolved ranged comparison value [142] if(main::c1#1!=rangelast(0,$ff)) goto main::@2 to 0
Rewriting conditional comparison [56] if(gotoxy::y#3<=$19) goto gotoxy::@1
Eliminating unused variable memcpy::return#2 and assignment [73] memcpy::return#2 = memcpy::destination#2
Eliminating unused variable memcpy::return#3 and assignment [75] memcpy::return#3 = memcpy::destination#2
Eliminating unused variable memset::return#2 and assignment [77] memset::return#2 = memset::str#3
Eliminating unused variable memset::return#3 and assignment [79] memset::return#3 = memset::str#3
Eliminating unused constant conio_scroll_enable
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing PHI-reference to removed block (cscroll::@2) in block gotoxy
Removing unused block cscroll::@2
Removing unused block cscroll::@8
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) $19+1 in if(gotoxy::y#3<$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 1 in if(gotoxy::y#3<(unumber)$19+1) goto gotoxy::@1
Adding number conversion cast (unumber) 0 in if(main::c#1!=0) goto main::@1
Adding number conversion cast (unumber) 0 in if(main::c1#1!=0) goto main::@2
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast $19+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 1
Finalized unsigned number type 0
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values gotoxy::y#3 gotoxy::y#2
Identical Phi Values gotoxy::x#3 gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition toupper::$0 [2] if(toupper::ch#0>='a') goto toupper::@3
Simple Condition toupper::$1 [105] if(toupper::ch#0<='z') goto toupper::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [2] if(toupper::ch#0<'a') goto toupper::@2
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
if() condition always true - replacing block destination [45] if(gotoxy::x#2<$28) goto gotoxy::@2
Successful SSA optimization Pass2ConstantIfs
Eliminating unused constant gotoxy::x#1
Eliminating unused constant gotoxy::y#1
Successful SSA optimization PassNEliminateUnusedVars
Removing PHI-reference to removed block (gotoxy::@4) in block gotoxy::@2
Removing unused block gotoxy::@4
Successful SSA optimization Pass2EliminateUnusedBlocks
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values gotoxy::x#4 gotoxy::x#2
Successful SSA optimization Pass2IdenticalPhiElimination
Eliminating unused constant gotoxy::x#0
Successful SSA optimization PassNEliminateUnusedVars
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Inlining Noop Cast [5] memcpy::src#0 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [6] memcpy::dst#0 = (byte*)memcpy::destination#2 keeping memcpy::destination#2
Inlining Noop Cast [7] memcpy::$2 = (byte*)memcpy::source#2 keeping memcpy::source#2
Inlining Noop Cast [17] memset::$4 = (byte*)memset::str#3 keeping memset::str#3
Inlining Noop Cast [19] memset::dst#0 = (byte*)memset::str#3 keeping memset::str#3
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift and addition[45] gotoxy::line_offset#0 = gotoxy::$7 * $28
Inlining constant with var siblings memcpy::destination#0
Inlining constant with var siblings memcpy::source#0
Inlining constant with var siblings memcpy::num#0
Inlining constant with var siblings memcpy::destination#1
Inlining constant with var siblings memcpy::source#1
Inlining constant with var siblings memcpy::num#1
Inlining constant with var siblings memset::str#0
Inlining constant with var siblings memset::c#0
Inlining constant with var siblings memset::num#0
Inlining constant with var siblings memset::str#1
Inlining constant with var siblings memset::num#1
Inlining constant with var siblings memset::c#1
Inlining constant with var siblings clrscr::line_text#0
Inlining constant with var siblings clrscr::line_cols#0
Inlining constant with var siblings clrscr::l#0
Inlining constant with var siblings clrscr::c#0
Inlining constant with var siblings gotoxy::y#0
Inlining constant with var siblings main::c#0
Inlining constant with var siblings main::c1#0
Constant inlined main::c1#0 = 0
Constant inlined memset::str#1 = (void*)COLORRAM+(word)$19*$28-$28
Constant inlined memset::str#0 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28
Constant inlined CONIO_SCREEN_COLORS = COLORRAM
Constant inlined clrscr::line_text#0 = DEFAULT_SCREEN
Constant inlined conio_textcolor = LIGHT_BLUE
Constant inlined memcpy::destination#0 = (void*)DEFAULT_SCREEN
Constant inlined memset::num#1 = $28
Constant inlined memcpy::destination#1 = (void*)COLORRAM
Constant inlined memset::num#0 = $28
Constant inlined memcpy::source#0 = (void*)DEFAULT_SCREEN+$28
Constant inlined clrscr::l#0 = 0
Constant inlined memcpy::num#1 = (word)$19*$28-$28
Constant inlined memcpy::num#0 = (word)$19*$28-$28
Constant inlined main::c#0 = 0
Constant inlined memcpy::source#1 = (void*)COLORRAM+$28
Constant inlined gotoxy::y#0 = 0
Constant inlined CONIO_SCREEN_TEXT = DEFAULT_SCREEN
Constant inlined memset::c#0 = ' '
Constant inlined memset::c#1 = LIGHT_BLUE
Constant inlined clrscr::c#0 = 0
Constant inlined clrscr::line_cols#0 = COLORRAM
Constant inlined CONIO_TEXTCOLOR_DEFAULT = LIGHT_BLUE
Successful SSA optimization Pass2ConstantInlining
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Alias gotoxy::line_offset#0 = gotoxy::$10 
Successful SSA optimization Pass2AliasElimination
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Identical Phi Values memcpy::num#2 (word)$19*$28-$28
Identical Phi Values memset::num#2 $28
Successful SSA optimization Pass2IdenticalPhiElimination
if() condition always false - eliminating [13] if($28<=0) goto memset::@1
Successful SSA optimization Pass2ConstantIfs
Alias candidate removed (volatile)conio_line_text = gotoxy::$5 
Alias candidate removed (volatile)conio_line_color = gotoxy::$6 
Added new block during phi lifting gotoxy::@5(between gotoxy and gotoxy::@1)
Added new block during phi lifting main::@9(between main::@5 and main::@1)
Added new block during phi lifting main::@10(between main::@8 and main::@2)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of main::wherey1_@return
Adding NOP phi() at start of main::@6
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of clrscr::@2
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@5
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of cputc::@4
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of cputln::@1
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4
Adding NOP phi() at start of cscroll::@5
Adding NOP phi() at start of cscroll::@6
Adding NOP phi() at start of memcpy::@3
Adding NOP phi() at start of memset::@1
CALL GRAPH
Calls in [__start] to main:6 
Calls in [main] to clrscr:10 cputc:15 gotoxy:21 toupper:25 cputc:29 
Calls in [cputc] to cputln:63 cputln:67 
Calls in [cputln] to cscroll:95 
Calls in [cscroll] to memcpy:101 memcpy:103 memset:105 memset:107 

Created 16 initial phi equivalence classes
Coalesced [14] cputc::c#4 = cputc::c#0
Coalesced [28] cputc::c#5 = cputc::c#1
Coalesced [33] main::c1#5 = main::c1#1
Coalesced [34] main::c#4 = main::c#1
Coalesced [49] clrscr::l#7 = clrscr::l#1
Coalesced [50] clrscr::line_text#7 = clrscr::line_text#1
Coalesced [51] clrscr::line_cols#7 = clrscr::line_cols#1
Coalesced [55] clrscr::c#4 = clrscr::c#1
Coalesced [83] gotoxy::y#7 = gotoxy::y#2
Coalesced [86] toupper::return#7 = toupper::ch#0
Coalesced [90] toupper::return#6 = toupper::return#0
Coalesced [123] memcpy::src#5 = memcpy::src#1
Coalesced [124] memcpy::dst#5 = memcpy::dst#1
Coalesced [134] memset::dst#5 = memset::dst#1
Coalesced down to 16 phi equivalence classes
Culled Empty Block label __start::@2
Culled Empty Block label main::@4
Culled Empty Block label main::wherey1_@return
Culled Empty Block label main::@6
Culled Empty Block label main::@10
Culled Empty Block label main::@9
Culled Empty Block label clrscr::@2
Culled Empty Block label cputc::@5
Culled Empty Block label cputc::@4
Culled Empty Block label gotoxy::@3
Culled Empty Block label toupper::@2
Culled Empty Block label cputln::@1
Culled Empty Block label cscroll::@1
Culled Empty Block label memcpy::@3
Culled Empty Block label memset::@1
Renumbering block toupper::@3 to toupper::@2
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@3 to memset::@2
Renumbering block memset::@4 to memset::@3
Renumbering block clrscr::@3 to clrscr::@2
Renumbering block clrscr::@4 to clrscr::@3
Renumbering block clrscr::@5 to clrscr::@4
Renumbering block clrscr::@6 to clrscr::@5
Renumbering block gotoxy::@5 to gotoxy::@3
Renumbering block cscroll::@3 to cscroll::@1
Renumbering block cscroll::@4 to cscroll::@2
Renumbering block cscroll::@5 to cscroll::@3
Renumbering block cscroll::@6 to cscroll::@4
Renumbering block cscroll::@7 to cscroll::@5
Renumbering block main::@5 to main::@4
Renumbering block main::@7 to main::@5
Renumbering block main::@8 to main::@6
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of clrscr
Adding NOP phi() at start of cputc::@3
Adding NOP phi() at start of cputc::@1
Adding NOP phi() at start of gotoxy::@3
Adding NOP phi() at start of cscroll::@1
Adding NOP phi() at start of cscroll::@2
Adding NOP phi() at start of cscroll::@3
Adding NOP phi() at start of cscroll::@4

FINAL CONTROL FLOW GRAPH

void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [5] phi()
  [6] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [7] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [8] *((byte*) 53272) = $17
  [9] call clrscr 
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [10] main::c#2 = phi( main/0, main::@4/main::c#1 )
  [11] cputc::c#0 = main::c#2
  [12] call cputc 
  to:main::@4
main::@4: scope:[main]  from main::@1
  [13] main::c#1 = ++ main::c#2
  [14] if(main::c#1!=0) goto main::@1
  to:main::wherey1
main::wherey1: scope:[main]  from main::@4
  [15] main::wherey1_return#0 = conio_cursor_y
  to:main::@3
main::@3: scope:[main]  from main::wherey1
  [16] gotoxy::y#2 = main::wherey1_return#0 + 2
  [17] call gotoxy 
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@6
  [18] main::c1#2 = phi( main::@3/0, main::@6/main::c1#1 )
  [19] toupper::ch#0 = main::c1#2
  [20] call toupper 
  [21] toupper::return#3 = toupper::return#2
  to:main::@5
main::@5: scope:[main]  from main::@2
  [22] cputc::c#1 = toupper::return#3
  [23] call cputc 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [24] main::c1#1 = ++ main::c1#2
  [25] if(main::c1#1!=0) goto main::@2
  to:main::@return
main::@return: scope:[main]  from main::@6
  [26] return 
  to:@return

void clrscr()
clrscr: scope:[clrscr]  from main
  [27] phi()
  to:clrscr::@1
clrscr::@1: scope:[clrscr]  from clrscr clrscr::@5
  [28] clrscr::line_cols#5 = phi( clrscr/COLORRAM, clrscr::@5/clrscr::line_cols#1 )
  [28] clrscr::line_text#5 = phi( clrscr/DEFAULT_SCREEN, clrscr::@5/clrscr::line_text#1 )
  [28] clrscr::l#2 = phi( clrscr/0, clrscr::@5/clrscr::l#1 )
  [29] if(clrscr::l#2<$19) goto clrscr::@3
  to:clrscr::@2
clrscr::@2: scope:[clrscr]  from clrscr::@1
  [30] conio_cursor_x = 0
  [31] conio_cursor_y = 0
  [32] conio_line_text = DEFAULT_SCREEN
  [33] conio_line_color = COLORRAM
  to:clrscr::@return
clrscr::@return: scope:[clrscr]  from clrscr::@2
  [34] return 
  to:@return
clrscr::@3: scope:[clrscr]  from clrscr::@1 clrscr::@4
  [35] clrscr::c#2 = phi( clrscr::@1/0, clrscr::@4/clrscr::c#1 )
  [36] if(clrscr::c#2<$28) goto clrscr::@4
  to:clrscr::@5
clrscr::@5: scope:[clrscr]  from clrscr::@3
  [37] clrscr::line_text#1 = clrscr::line_text#5 + $28
  [38] clrscr::line_cols#1 = clrscr::line_cols#5 + $28
  [39] clrscr::l#1 = ++ clrscr::l#2
  to:clrscr::@1
clrscr::@4: scope:[clrscr]  from clrscr::@3
  [40] clrscr::line_text#5[clrscr::c#2] = ' '
  [41] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE
  [42] clrscr::c#1 = ++ clrscr::c#2
  to:clrscr::@3

void cputc(byte cputc::c)
cputc: scope:[cputc]  from main::@1 main::@5
  [43] cputc::c#2 = phi( main::@1/cputc::c#0, main::@5/cputc::c#1 )
  [44] if(cputc::c#2=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [45] conio_line_text[conio_cursor_x] = cputc::c#2
  [46] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [47] conio_cursor_x = ++ conio_cursor_x
  [48] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [49] phi()
  [50] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [51] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [52] phi()
  [53] call cputln 
  to:cputc::@return

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from main::@3
  [54] if(gotoxy::y#2<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [55] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [56] gotoxy::y#4 = phi( gotoxy::@3/gotoxy::y#2, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [57] conio_cursor_x = gotoxy::x#2
  [58] conio_cursor_y = gotoxy::y#4
  [59] gotoxy::$7 = (word)gotoxy::y#4
  [60] gotoxy::$8 = gotoxy::$7 << 2
  [61] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [62] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [63] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [64] conio_line_text = gotoxy::$5
  [65] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [66] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [67] return 
  to:@return

byte toupper(byte toupper::ch)
toupper: scope:[toupper]  from main::@2
  [68] if(toupper::ch#0<'a') goto toupper::@return
  to:toupper::@2
toupper::@2: scope:[toupper]  from toupper
  [69] if(toupper::ch#0<='z') goto toupper::@1
  to:toupper::@return
toupper::@1: scope:[toupper]  from toupper::@2
  [70] toupper::return#0 = toupper::ch#0 + 'A'-'a'
  to:toupper::@return
toupper::@return: scope:[toupper]  from toupper toupper::@1 toupper::@2
  [71] toupper::return#2 = phi( toupper::@1/toupper::return#0, toupper/toupper::ch#0, toupper::@2/toupper::ch#0 )
  [72] return 
  to:@return

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [73] conio_line_text = conio_line_text + $28
  [74] conio_line_color = conio_line_color + $28
  [75] conio_cursor_x = 0
  [76] conio_cursor_y = ++ conio_cursor_y
  [77] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [78] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [79] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [80] phi()
  [81] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [82] phi()
  [83] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [84] phi()
  [85] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [86] phi()
  [87] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [88] conio_line_text = conio_line_text - $28
  [89] conio_line_color = conio_line_color - $28
  [90] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [91] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [92] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [92] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [93] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [94] memcpy::src#4 = (byte*)memcpy::source#2
  [95] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [96] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [96] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [97] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [98] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [99] *memcpy::dst#2 = *memcpy::src#2
  [100] memcpy::dst#1 = ++ memcpy::dst#2
  [101] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4
  [102] memset::c#4 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE )
  [102] memset::str#3 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28 )
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [103] memset::end#0 = (byte*)memset::str#3 + $28
  [104] memset::dst#4 = (byte*)memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [105] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [106] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [107] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [108] *memset::dst#2 = memset::c#4
  [109] memset::dst#1 = ++ memset::dst#2
  to:memset::@2


VARIABLE REGISTER WEIGHTS
void __start()
void clrscr()
byte clrscr::c
byte clrscr::c#1 20002.0
byte clrscr::c#2 12501.25
byte clrscr::l
byte clrscr::l#1 2002.0
byte clrscr::l#2 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 1001.0
byte* clrscr::line_cols#5 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 667.3333333333334
byte* clrscr::line_text#5 1714.7142857142858
byte conio_cursor_x loadstore 345.6818181818182
byte conio_cursor_y loadstore 5427.457627118644
byte* conio_line_color loadstore 4514.469387755102
byte* conio_line_text loadstore 4254.0192307692305
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 202.0
byte cputc::c#1 202.0
byte cputc::c#2 1102.0
void cputln()
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 202.0
byte*~ gotoxy::$6 202.0
word~ gotoxy::$7 151.5
word~ gotoxy::$8 202.0
word~ gotoxy::$9 202.0
word gotoxy::line_offset
word gotoxy::line_offset#0 101.0
byte gotoxy::x
byte gotoxy::y
byte gotoxy::y#2 71.0
byte gotoxy::y#4 67.33333333333333
void main()
byte main::c
byte main::c#1 151.5
byte main::c#2 101.0
byte main::c1
byte main::c1#1 151.5
byte main::c1#2 50.5
byte main::wherey1_return
byte main::wherey1_return#0 22.0
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2
byte* memcpy::dst
byte* memcpy::dst#1 1.00000001E8
byte* memcpy::dst#2 1.0033333466666667E8
byte* memcpy::dst#4 2000002.0
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2
byte* memcpy::src
byte* memcpy::src#1 2.00000002E8
byte* memcpy::src#2 1.0025000125E8
byte* memcpy::src#4 1000001.0
byte* memcpy::src_end
byte* memcpy::src_end#0 1.262500025E7
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 1.428571442857143E7
byte* memset::dst
byte* memset::dst#1 2.00000002E8
byte* memset::dst#2 1.3366666833333334E8
byte* memset::dst#4 2000002.0
byte* memset::end
byte* memset::end#0 1.6833333666666668E7
word memset::num
void* memset::return
void* memset::str
void* memset::str#3
byte toupper(byte toupper::ch)
byte toupper::ch
byte toupper::ch#0 1702.0000000000002
byte toupper::return
byte toupper::return#0 2002.0
byte toupper::return#2 1034.6666666666667
byte toupper::return#3 202.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ main::c1#2 main::c1#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ cputc::c#2 cputc::c#0 cputc::c#1 ]
[ gotoxy::y#4 gotoxy::y#2 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
Added variable conio_cursor_x to live range equivalence class [ conio_cursor_x ]
Added variable conio_cursor_y to live range equivalence class [ conio_cursor_y ]
Added variable conio_line_text to live range equivalence class [ conio_line_text ]
Added variable conio_line_color to live range equivalence class [ conio_line_color ]
Added variable main::wherey1_return#0 to live range equivalence class [ main::wherey1_return#0 ]
Added variable toupper::return#3 to live range equivalence class [ toupper::return#3 ]
Added variable gotoxy::$7 to live range equivalence class [ gotoxy::$7 ]
Added variable gotoxy::$8 to live range equivalence class [ gotoxy::$8 ]
Added variable gotoxy::$9 to live range equivalence class [ gotoxy::$9 ]
Added variable gotoxy::line_offset#0 to live range equivalence class [ gotoxy::line_offset#0 ]
Added variable gotoxy::$5 to live range equivalence class [ gotoxy::$5 ]
Added variable gotoxy::$6 to live range equivalence class [ gotoxy::$6 ]
Added variable memcpy::src_end#0 to live range equivalence class [ memcpy::src_end#0 ]
Added variable memset::end#0 to live range equivalence class [ memset::end#0 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ main::c1#2 main::c1#1 ]
[ clrscr::l#2 clrscr::l#1 ]
[ clrscr::line_text#5 clrscr::line_text#1 ]
[ clrscr::line_cols#5 clrscr::line_cols#1 ]
[ clrscr::c#2 clrscr::c#1 ]
[ cputc::c#2 cputc::c#0 cputc::c#1 ]
[ gotoxy::y#4 gotoxy::y#2 ]
[ toupper::return#2 toupper::return#0 toupper::ch#0 ]
[ memcpy::source#2 ]
[ memcpy::destination#2 ]
[ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
[ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
[ memset::str#3 ]
[ memset::c#4 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ conio_cursor_x ]
[ conio_cursor_y ]
[ conio_line_text ]
[ conio_line_color ]
[ main::wherey1_return#0 ]
[ toupper::return#3 ]
[ gotoxy::$7 ]
[ gotoxy::$8 ]
[ gotoxy::$9 ]
[ gotoxy::line_offset#0 ]
[ gotoxy::$5 ]
[ gotoxy::$6 ]
[ memcpy::src_end#0 ]
[ memset::end#0 ]
Allocated zp[1]:2 [ main::c#2 main::c#1 ]
Allocated zp[1]:3 [ main::c1#2 main::c1#1 ]
Allocated zp[1]:4 [ clrscr::l#2 clrscr::l#1 ]
Allocated zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ]
Allocated zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated zp[1]:9 [ clrscr::c#2 clrscr::c#1 ]
Allocated zp[1]:10 [ cputc::c#2 cputc::c#0 cputc::c#1 ]
Allocated zp[1]:11 [ gotoxy::y#4 gotoxy::y#2 ]
Allocated zp[1]:12 [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
Allocated zp[2]:13 [ memcpy::source#2 ]
Allocated zp[2]:15 [ memcpy::destination#2 ]
Allocated zp[2]:17 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ]
Allocated zp[2]:19 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ]
Allocated zp[2]:21 [ memset::str#3 ]
Allocated zp[1]:23 [ memset::c#4 ]
Allocated zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[1]:26 [ conio_cursor_x ]
Allocated zp[1]:27 [ conio_cursor_y ]
Allocated zp[2]:28 [ conio_line_text ]
Allocated zp[2]:30 [ conio_line_color ]
Allocated zp[1]:32 [ main::wherey1_return#0 ]
Allocated zp[1]:33 [ toupper::return#3 ]
Allocated zp[2]:34 [ gotoxy::$7 ]
Allocated zp[2]:36 [ gotoxy::$8 ]
Allocated zp[2]:38 [ gotoxy::$9 ]
Allocated zp[2]:40 [ gotoxy::line_offset#0 ]
Allocated zp[2]:42 [ gotoxy::$5 ]
Allocated zp[2]:44 [ gotoxy::$6 ]
Allocated zp[2]:46 [ memcpy::src_end#0 ]
Allocated zp[2]:48 [ memset::end#0 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] conio_cursor_x = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*) 53272) = $17 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [30] conio_cursor_x = 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [31] conio_cursor_y = 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [32] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [33] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [37] clrscr::line_text#1 = clrscr::line_text#5 + $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ clrscr::l#2 clrscr::l#1 ]
Statement [38] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [40] clrscr::line_text#5[clrscr::c#2] = ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ clrscr::c#2 clrscr::c#1 ]
Statement [41] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [45] conio_line_text[conio_cursor_x] = cputc::c#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:2 [ main::c#2 main::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:3 [ main::c1#2 main::c1#1 ]
Statement [46] conio_line_color[conio_cursor_x] = LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::c#2 main::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::c1#2 main::c1#1 ]
Statement [48] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [57] conio_cursor_x = gotoxy::x#2 [ conio_cursor_x gotoxy::y#4 ] ( main:6::gotoxy:17 [ conio_cursor_x gotoxy::y#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:11 [ gotoxy::y#4 gotoxy::y#2 ]
Statement [59] gotoxy::$7 = (word)gotoxy::y#4 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [60] gotoxy::$8 = gotoxy::$7 << 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [61] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [62] gotoxy::line_offset#0 = gotoxy::$9 << 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [63] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [64] conio_line_text = gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [65] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [66] conio_line_color = gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [70] toupper::return#0 = toupper::ch#0 + 'A'-'a' [ toupper::return#0 ] ( main:6::toupper:20 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::c1#2 toupper::return#0 ] { { toupper::ch#0 = main::c1#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [73] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [74] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [75] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [79] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [88] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [89] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [93] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [94] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [95] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [97] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [99] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [103] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputc:12::cputln:50::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ memset::c#4 ]
Statement [104] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputc:12::cputln:50::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [106] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputc:12::cputln:50::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [108] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputc:12::cputln:50::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:23 [ memset::c#4 ]
Statement [1] conio_cursor_x = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] conio_cursor_y = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] conio_line_text = DEFAULT_SCREEN [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] conio_line_color = COLORRAM [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*) 53272) = $17 [ ] ( main:6 [ ] { }  ) always clobbers reg byte a 
Statement [30] conio_cursor_x = 0 [ conio_cursor_x ] ( main:6::clrscr:9 [ conio_cursor_x ] { }  ) always clobbers reg byte a 
Statement [31] conio_cursor_y = 0 [ conio_cursor_x conio_cursor_y ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y ] { }  ) always clobbers reg byte a 
Statement [32] conio_line_text = DEFAULT_SCREEN [ conio_cursor_x conio_cursor_y conio_line_text ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_line_text ] { }  ) always clobbers reg byte a 
Statement [33] conio_line_color = COLORRAM [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::clrscr:9 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [37] clrscr::line_text#1 = clrscr::line_text#5 + $28 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_cols#5 clrscr::line_text#1 ] { }  ) always clobbers reg byte a 
Statement [38] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#1 clrscr::line_cols#1 ] { }  ) always clobbers reg byte a 
Statement [40] clrscr::line_text#5[clrscr::c#2] = ' ' [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [41] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] ( main:6::clrscr:9 [ clrscr::l#2 clrscr::line_text#5 clrscr::line_cols#5 clrscr::c#2 ] { }  ) always clobbers reg byte a 
Statement [45] conio_line_text[conio_cursor_x] = cputc::c#2 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte y 
Statement [46] conio_line_color[conio_cursor_x] = LIGHT_BLUE [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [48] if(conio_cursor_x!=$28) goto cputc::@return [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [57] conio_cursor_x = gotoxy::x#2 [ conio_cursor_x gotoxy::y#4 ] ( main:6::gotoxy:17 [ conio_cursor_x gotoxy::y#4 ] { }  ) always clobbers reg byte a 
Statement [59] gotoxy::$7 = (word)gotoxy::y#4 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$7 ] { }  ) always clobbers reg byte a 
Statement [60] gotoxy::$8 = gotoxy::$7 << 2 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$7 gotoxy::$8 ] { }  ) always clobbers reg byte a 
Statement [61] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::$9 ] { }  ) always clobbers reg byte a 
Statement [62] gotoxy::line_offset#0 = gotoxy::$9 << 3 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [63] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y gotoxy::line_offset#0 gotoxy::$5 ] { }  ) always clobbers reg byte a 
Statement [64] conio_line_text = gotoxy::$5 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::line_offset#0 ] { }  ) always clobbers reg byte a 
Statement [65] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text gotoxy::$6 ] { }  ) always clobbers reg byte a 
Statement [66] conio_line_color = gotoxy::$6 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::gotoxy:17 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { }  ) always clobbers reg byte a 
Statement [70] toupper::return#0 = toupper::ch#0 + 'A'-'a' [ toupper::return#0 ] ( main:6::toupper:20 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color main::c1#2 toupper::return#0 ] { { toupper::ch#0 = main::c1#2 } { toupper::return#2 = toupper::return#3 } }  ) always clobbers reg byte a 
Statement [73] conio_line_text = conio_line_text + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [74] conio_line_color = conio_line_color + $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53 [ main::c#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53 [ main::c1#2 conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [75] conio_cursor_x = 0 [ conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [79] if(conio_cursor_y!=$19) goto cscroll::@return [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [88] conio_line_text = conio_line_text - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [89] conio_line_color = conio_line_color - $28 [ conio_cursor_y conio_line_text conio_line_color ] ( main:6::cputc:12::cputln:50::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [93] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 [ memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::source#2 memcpy::destination#2 memcpy::src_end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [94] memcpy::src#4 = (byte*)memcpy::source#2 [ memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::destination#2 memcpy::src_end#0 memcpy::src#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [95] memcpy::dst#4 = (byte*)memcpy::destination#2 [ memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#4 memcpy::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [97] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [99] *memcpy::dst#2 = *memcpy::src#2 [ memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] ( main:6::cputc:12::cputln:50::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:81 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:81 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memcpy:83 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memcpy:83 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memcpy::src_end#0 memcpy::src#2 memcpy::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Statement [103] memset::end#0 = (byte*)memset::str#3 + $28 [ memset::str#3 memset::c#4 memset::end#0 ] ( main:6::cputc:12::cputln:50::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::str#3 memset::c#4 memset::end#0 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [104] memset::dst#4 = (byte*)memset::str#3 [ memset::c#4 memset::end#0 memset::dst#4 ] ( main:6::cputc:12::cputln:50::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#4 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [106] if(memset::dst#2!=memset::end#0) goto memset::@3 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputc:12::cputln:50::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a 
Statement [108] *memset::dst#2 = memset::c#4 [ memset::c#4 memset::end#0 memset::dst#2 ] ( main:6::cputc:12::cputln:50::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:85 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:85 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:50::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:50::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  main:6::cputc:12::cputln:53::cscroll:77::memset:87 [ main::c#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#0 = cputc::c#2 main::c#2 } }  main:6::cputc:23::cputln:53::cscroll:77::memset:87 [ main::c1#2 conio_cursor_x conio_cursor_y conio_line_text conio_line_color memset::c#4 memset::end#0 memset::dst#2 ] { { cputc::c#1 = cputc::c#2 toupper::return#3 } }  ) always clobbers reg byte a reg byte y 
Potential registers zp[1]:2 [ main::c#2 main::c#1 ] : zp[1]:2 , reg byte x , 
Potential registers zp[1]:3 [ main::c1#2 main::c1#1 ] : zp[1]:3 , reg byte x , 
Potential registers zp[1]:4 [ clrscr::l#2 clrscr::l#1 ] : zp[1]:4 , reg byte x , reg byte y , 
Potential registers zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ] : zp[2]:5 , 
Potential registers zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ clrscr::c#2 clrscr::c#1 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ cputc::c#2 cputc::c#0 cputc::c#1 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ gotoxy::y#4 gotoxy::y#2 ] : zp[1]:11 , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:13 [ memcpy::source#2 ] : zp[2]:13 , 
Potential registers zp[2]:15 [ memcpy::destination#2 ] : zp[2]:15 , 
Potential registers zp[2]:17 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] : zp[2]:17 , 
Potential registers zp[2]:19 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] : zp[2]:19 , 
Potential registers zp[2]:21 [ memset::str#3 ] : zp[2]:21 , 
Potential registers zp[1]:23 [ memset::c#4 ] : zp[1]:23 , reg byte x , 
Potential registers zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:24 , 
Potential registers zp[1]:26 [ conio_cursor_x ] : zp[1]:26 , 
Potential registers zp[1]:27 [ conio_cursor_y ] : zp[1]:27 , 
Potential registers zp[2]:28 [ conio_line_text ] : zp[2]:28 , 
Potential registers zp[2]:30 [ conio_line_color ] : zp[2]:30 , 
Potential registers zp[1]:32 [ main::wherey1_return#0 ] : zp[1]:32 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:33 [ toupper::return#3 ] : zp[1]:33 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:34 [ gotoxy::$7 ] : zp[2]:34 , 
Potential registers zp[2]:36 [ gotoxy::$8 ] : zp[2]:36 , 
Potential registers zp[2]:38 [ gotoxy::$9 ] : zp[2]:38 , 
Potential registers zp[2]:40 [ gotoxy::line_offset#0 ] : zp[2]:40 , 
Potential registers zp[2]:42 [ gotoxy::$5 ] : zp[2]:42 , 
Potential registers zp[2]:44 [ gotoxy::$6 ] : zp[2]:44 , 
Potential registers zp[2]:46 [ memcpy::src_end#0 ] : zp[2]:46 , 
Potential registers zp[2]:48 [ memset::end#0 ] : zp[2]:48 , 

REGISTER UPLIFT SCOPES
Uplift Scope [memcpy] 301,250,004.25: zp[2]:17 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] 202,333,337.67: zp[2]:19 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] 12,625,000.25: zp[2]:46 [ memcpy::src_end#0 ] 0: zp[2]:13 [ memcpy::source#2 ] 0: zp[2]:15 [ memcpy::destination#2 ] 
Uplift Scope [memset] 335,666,672.33: zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 16,833,333.67: zp[2]:48 [ memset::end#0 ] 14,285,714.43: zp[1]:23 [ memset::c#4 ] 0: zp[2]:21 [ memset::str#3 ] 
Uplift Scope [clrscr] 32,503.25: zp[1]:9 [ clrscr::c#2 clrscr::c#1 ] 2,501.38: zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ] 2,382.05: zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ] 2,335.67: zp[1]:4 [ clrscr::l#2 clrscr::l#1 ] 
Uplift Scope [] 5,427.46: zp[1]:27 [ conio_cursor_y ] 4,514.47: zp[2]:30 [ conio_line_color ] 4,254.02: zp[2]:28 [ conio_line_text ] 345.68: zp[1]:26 [ conio_cursor_x ] 
Uplift Scope [toupper] 4,738.67: zp[1]:12 [ toupper::return#2 toupper::return#0 toupper::ch#0 ] 202: zp[1]:33 [ toupper::return#3 ] 
Uplift Scope [cputc] 1,506: zp[1]:10 [ cputc::c#2 cputc::c#0 cputc::c#1 ] 
Uplift Scope [gotoxy] 202: zp[2]:36 [ gotoxy::$8 ] 202: zp[2]:38 [ gotoxy::$9 ] 202: zp[2]:42 [ gotoxy::$5 ] 202: zp[2]:44 [ gotoxy::$6 ] 151.5: zp[2]:34 [ gotoxy::$7 ] 138.33: zp[1]:11 [ gotoxy::y#4 gotoxy::y#2 ] 101: zp[2]:40 [ gotoxy::line_offset#0 ] 
Uplift Scope [main] 252.5: zp[1]:2 [ main::c#2 main::c#1 ] 202: zp[1]:3 [ main::c1#2 main::c1#1 ] 22: zp[1]:32 [ main::wherey1_return#0 ] 
Uplift Scope [MOS6526_CIA] 
Uplift Scope [MOS6569_VICII] 
Uplift Scope [MOS6581_SID] 
Uplift Scope [cputln] 
Uplift Scope [cscroll] 
Uplift Scope [__start] 

Uplifting [memcpy] best 18978 combination zp[2]:17 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] zp[2]:19 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] zp[2]:46 [ memcpy::src_end#0 ] zp[2]:13 [ memcpy::source#2 ] zp[2]:15 [ memcpy::destination#2 ] 
Uplifting [memset] best 18872 combination zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:48 [ memset::end#0 ] reg byte x [ memset::c#4 ] zp[2]:21 [ memset::str#3 ] 
Uplifting [clrscr] best 17282 combination reg byte y [ clrscr::c#2 clrscr::c#1 ] zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ] zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ] reg byte x [ clrscr::l#2 clrscr::l#1 ] 
Uplifting [] best 17282 combination zp[1]:27 [ conio_cursor_y ] zp[2]:30 [ conio_line_color ] zp[2]:28 [ conio_line_text ] zp[1]:26 [ conio_cursor_x ] 
Uplifting [toupper] best 17155 combination reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ] reg byte a [ toupper::return#3 ] 
Uplifting [cputc] best 17089 combination reg byte a [ cputc::c#2 cputc::c#0 cputc::c#1 ] 
Uplifting [gotoxy] best 17076 combination zp[2]:36 [ gotoxy::$8 ] zp[2]:38 [ gotoxy::$9 ] zp[2]:42 [ gotoxy::$5 ] zp[2]:44 [ gotoxy::$6 ] zp[2]:34 [ gotoxy::$7 ] reg byte x [ gotoxy::y#4 gotoxy::y#2 ] zp[2]:40 [ gotoxy::line_offset#0 ] 
Uplifting [main] best 17070 combination zp[1]:2 [ main::c#2 main::c#1 ] zp[1]:3 [ main::c1#2 main::c1#1 ] reg byte x [ main::wherey1_return#0 ] 
Uplifting [MOS6526_CIA] best 17070 combination 
Uplifting [MOS6569_VICII] best 17070 combination 
Uplifting [MOS6581_SID] best 17070 combination 
Uplifting [cputln] best 17070 combination 
Uplifting [cscroll] best 17070 combination 
Uplifting [__start] best 17070 combination 
Attempting to uplift remaining variables inzp[1]:27 [ conio_cursor_y ]
Uplifting [] best 17070 combination zp[1]:27 [ conio_cursor_y ] 
Attempting to uplift remaining variables inzp[1]:26 [ conio_cursor_x ]
Uplifting [] best 17070 combination zp[1]:26 [ conio_cursor_x ] 
Attempting to uplift remaining variables inzp[1]:2 [ main::c#2 main::c#1 ]
Uplifting [main] best 17070 combination zp[1]:2 [ main::c#2 main::c#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ main::c1#2 main::c1#1 ]
Uplifting [main] best 17070 combination zp[1]:3 [ main::c1#2 main::c1#1 ] 
Coalescing zero page register [ zp[2]:13 [ memcpy::source#2 ] ] with [ zp[2]:17 [ memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:15 [ memcpy::destination#2 ] ] with [ zp[2]:19 [ memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ memset::str#3 ] ] with [ zp[2]:24 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:28 [ conio_line_text ] ] with [ zp[2]:42 [ gotoxy::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ conio_line_color ] ] with [ zp[2]:44 [ gotoxy::$6 ] ] - score: 1
Coalescing zero page register [ zp[2]:34 [ gotoxy::$7 ] ] with [ zp[2]:38 [ gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ conio_line_color gotoxy::$6 ] ] with [ zp[2]:40 [ gotoxy::line_offset#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:30 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 ] ] with [ zp[2]:34 [ gotoxy::$7 gotoxy::$9 ] ] - score: 1
Coalescing zero page register [ zp[2]:13 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 ] ] with [ zp[2]:5 [ clrscr::line_text#5 clrscr::line_text#1 ] ]
Coalescing zero page register [ zp[2]:15 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 ] ] with [ zp[2]:7 [ clrscr::line_cols#5 clrscr::line_cols#1 ] ]
Coalescing zero page register [ zp[2]:36 [ gotoxy::$8 ] ] with [ zp[2]:21 [ memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ]
Coalescing zero page register [ zp[2]:48 [ memset::end#0 ] ] with [ zp[2]:46 [ memcpy::src_end#0 ] ]
Coalescing zero page register [ zp[2]:36 [ gotoxy::$8 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:13 [ memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 clrscr::line_text#5 clrscr::line_text#1 ] ]
Allocated (was zp[2]:15) zp[2]:4 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 clrscr::line_cols#5 clrscr::line_cols#1 ]
Allocated (was zp[1]:26) zp[1]:6 [ conio_cursor_x ]
Allocated (was zp[1]:27) zp[1]:7 [ conio_cursor_y ]
Allocated (was zp[2]:28) zp[2]:8 [ conio_line_text gotoxy::$5 ]
Allocated (was zp[2]:30) zp[2]:10 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 gotoxy::$7 gotoxy::$9 ]
Allocated (was zp[2]:36) zp[2]:12 [ gotoxy::$8 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 clrscr::line_text#5 clrscr::line_text#1 ]
Allocated (was zp[2]:48) zp[2]:14 [ memset::end#0 memcpy::src_end#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test toupper()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 6
  // The current cursor y-position
  .label conio_cursor_y = 7
  // The current text cursor line start
  .label conio_line_text = 8
  // The current color cursor line start
  .label conio_line_color = $a
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [6] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [7] return 
    rts
}
  // main
main: {
    .label c = 2
    .label c1 = 3
    // [8] *((byte*) 53272) = $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // [9] call clrscr 
  // Clear screen
    // [27] phi from main to clrscr [phi:main->clrscr]
  clrscr_from_main:
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [10] phi main::c#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b1
  // Output un-modified chars
    // [10] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [10] phi main::c#2 = main::c#1 [phi:main::@4->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [11] cputc::c#0 = main::c#2 -- vbuaa=vbuz1 
    lda.z c
    // [12] call cputc 
    // [43] phi from main::@1 to cputc [phi:main::@1->cputc]
  cputc_from___b1:
    // [43] phi cputc::c#2 = cputc::c#0 [phi:main::@1->cputc#0] -- register_copy 
    jsr cputc
    jmp __b4
    // main::@4
  __b4:
    // [13] main::c#1 = ++ main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [14] if(main::c#1!=0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1_from___b4
    jmp wherey1
    // main::wherey1
  wherey1:
    // [15] main::wherey1_return#0 = conio_cursor_y -- vbuxx=vbuz1 
    ldx.z conio_cursor_y
    jmp __b3
    // main::@3
  __b3:
    // [16] gotoxy::y#2 = main::wherey1_return#0 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [17] call gotoxy 
    jsr gotoxy
    // [18] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
  __b2_from___b3:
    // [18] phi main::c1#2 = 0 [phi:main::@3->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c1
    jmp __b2
  // Output toupper-chars chars
    // [18] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
  __b2_from___b6:
    // [18] phi main::c1#2 = main::c1#1 [phi:main::@6->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [19] toupper::ch#0 = main::c1#2 -- vbuaa=vbuz1 
    lda.z c1
    // [20] call toupper 
    jsr toupper
    // [21] toupper::return#3 = toupper::return#2
    jmp __b5
    // main::@5
  __b5:
    // [22] cputc::c#1 = toupper::return#3
    // [23] call cputc 
    // [43] phi from main::@5 to cputc [phi:main::@5->cputc]
  cputc_from___b5:
    // [43] phi cputc::c#2 = cputc::c#1 [phi:main::@5->cputc#0] -- register_copy 
    jsr cputc
    jmp __b6
    // main::@6
  __b6:
    // [24] main::c1#1 = ++ main::c1#2 -- vbuz1=_inc_vbuz1 
    inc.z c1
    // [25] if(main::c1#1!=0) goto main::@2 -- vbuz1_neq_0_then_la1 
    lda.z c1
    cmp #0
    bne __b2_from___b6
    jmp __breturn
    // main::@return
  __breturn:
    // [26] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = $c
    .label line_cols = 4
    // [28] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
  __b1_from_clrscr:
    // [28] phi clrscr::line_cols#5 = COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [28] phi clrscr::line_text#5 = DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [28] phi clrscr::l#2 = 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // clrscr::@1
  __b1:
    // [29] if(clrscr::l#2<$19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b3_from___b1
    jmp __b2
    // clrscr::@2
  __b2:
    // [30] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [31] conio_cursor_y = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_y
    // [32] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // [33] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    jmp __breturn
    // clrscr::@return
  __breturn:
    // [34] return 
    rts
    // [35] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b3_from___b1:
    // [35] phi clrscr::c#2 = 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b3
    // clrscr::@3
  __b3:
    // [36] if(clrscr::c#2<$28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    jmp __b5
    // clrscr::@5
  __b5:
    // [37] clrscr::line_text#1 = clrscr::line_text#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // [38] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // [39] clrscr::l#1 = ++ clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [28] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
  __b1_from___b5:
    // [28] phi clrscr::line_cols#5 = clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [28] phi clrscr::line_text#5 = clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [28] phi clrscr::l#2 = clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // [40] clrscr::line_text#5[clrscr::c#2] = ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // [41] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #LIGHT_BLUE
    sta (line_cols),y
    // [42] clrscr::c#1 = ++ clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [35] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
  __b3_from___b4:
    // [35] phi clrscr::c#2 = clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // [44] if(cputc::c#2==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1_from_cputc
    jmp __b2
    // cputc::@2
  __b2:
    // [45] conio_line_text[conio_cursor_x] = cputc::c#2 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // [46] conio_line_color[conio_cursor_x] = LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    ldy.z conio_cursor_x
    sta (conio_line_color),y
    // [47] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [48] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [49] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
  __b3_from___b2:
    jmp __b3
    // cputc::@3
  __b3:
    // [50] call cputln 
    jsr cputln
    jmp __breturn
    // cputc::@return
  __breturn:
    // [51] return 
    rts
    // [52] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
  __b1_from_cputc:
    jmp __b1
    // cputc::@1
  __b1:
    // [53] call cputln 
    jsr cputln
    jmp __breturn
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .const x = 0
    .label __5 = 8
    .label __6 = $a
    .label __7 = $a
    .label line_offset = $a
    .label __8 = $c
    .label __9 = $a
    // [54] if(gotoxy::y#2<$19+1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b3_from_gotoxy
    // [56] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
  __b1_from_gotoxy:
    // [56] phi gotoxy::y#4 = 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [55] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
  __b3_from_gotoxy:
    jmp __b3
    // gotoxy::@3
  __b3:
    // [56] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
  __b1_from___b3:
    // [56] phi gotoxy::y#4 = gotoxy::y#2 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    jmp __b1
    // gotoxy::@1
  __b1:
    jmp __b2
    // gotoxy::@2
  __b2:
    // [57] conio_cursor_x = gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // [58] conio_cursor_y = gotoxy::y#4 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // [59] gotoxy::$7 = (word)gotoxy::y#4 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // [60] gotoxy::$8 = gotoxy::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [61] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [62] gotoxy::line_offset#0 = gotoxy::$9 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // [63] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // [64] conio_line_text = gotoxy::$5
    // [65] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // [66] conio_line_color = gotoxy::$6
    jmp __breturn
    // gotoxy::@return
  __breturn:
    // [67] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // [68] if(toupper::ch#0<'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn_from_toupper
    jmp __b2
    // toupper::@2
  __b2:
    // [69] if(toupper::ch#0<='z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [71] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
  __breturn_from_toupper:
  __breturn_from___b1:
  __breturn_from___b2:
    // [71] phi toupper::return#2 = toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    jmp __breturn
    // toupper::@1
  __b1:
    // [70] toupper::return#0 = toupper::ch#0 + 'A'-'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    jmp __breturn_from___b1
    // toupper::@return
  __breturn:
    // [72] return 
    rts
}
  // cputln
// Print a newline
cputln: {
    // [73] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // [74] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // [75] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // [76] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // [77] call cscroll 
    jsr cscroll
    jmp __breturn
    // cputln::@return
  __breturn:
    // [78] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // [79] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [80] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
  __b1_from_cscroll:
    jmp __b1
    // cscroll::@1
  __b1:
    // [81] call memcpy 
    // [92] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
  memcpy_from___b1:
    // [92] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [92] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [82] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
  __b2_from___b1:
    jmp __b2
    // cscroll::@2
  __b2:
    // [83] call memcpy 
    // [92] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
  memcpy_from___b2:
    // [92] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [92] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [84] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
  __b3_from___b2:
    jmp __b3
    // cscroll::@3
  __b3:
    // [85] call memset 
    // [102] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
  memset_from___b3:
    // [102] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [102] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [86] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
  __b4_from___b3:
    jmp __b4
    // cscroll::@4
  __b4:
    // [87] call memset 
    // [102] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
  memset_from___b4:
    // [102] phi memset::c#4 = LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [102] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    jmp __b5
    // cscroll::@5
  __b5:
    // [88] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // [89] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // [90] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    jmp __breturn
    // cscroll::@return
  __breturn:
    // [91] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(4) destination, void* zp($c) source)
memcpy: {
    .label src_end = $e
    .label dst = 4
    .label src = $c
    .label source = $c
    .label destination = 4
    // [93] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [94] memcpy::src#4 = (byte*)memcpy::source#2
    // [95] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [96] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
  __b1_from_memcpy:
  __b1_from___b2:
    // [96] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [96] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    jmp __b1
    // memcpy::@1
  __b1:
    // [97] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    jmp __breturn
    // memcpy::@return
  __breturn:
    // [98] return 
    rts
    // memcpy::@2
  __b2:
    // [99] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    ldy #0
    sta (dst),y
    // [100] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [101] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1_from___b2
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($c) str, byte register(X) c)
memset: {
    .label end = $e
    .label dst = $c
    .label str = $c
    jmp __b1
    // memset::@1
  __b1:
    // [103] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [104] memset::dst#4 = (byte*)memset::str#3
    // [105] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [105] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [106] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [107] return 
    rts
    // memset::@3
  __b3:
    // [108] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // [109] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp wherey1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction ldy.z conio_cursor_x
Removing instruction ldy #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1_from___b4 with __b1
Replacing label __b2_from___b6 with __b2
Replacing label __b1_from_cputc with __b1
Replacing label __b3_from_gotoxy with __b2
Replacing label __b1 with __b2
Replacing label __breturn_from_toupper with __breturn_from___b2
Replacing label __breturn_from___b1 with __breturn_from___b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b3 with __b2
Removing instruction __b1_from___init1:
Removing instruction __b1_from___b4:
Removing instruction __b2_from___b6:
Removing instruction cputc_from___b5:
Removing instruction __b3_from___b2:
Removing instruction __b1_from_cputc:
Removing instruction __b3_from_gotoxy:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b1:
Removing instruction __breturn_from_toupper:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from_cscroll:
Removing instruction memcpy_from___b1:
Removing instruction __b2_from___b1:
Removing instruction memcpy_from___b2:
Removing instruction __b3_from___b2:
Removing instruction memset_from___b3:
Removing instruction __b4_from___b3:
Removing instruction memset_from___b4:
Removing instruction __b1_from_memcpy:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction clrscr_from_main:
Removing instruction __b1_from_main:
Removing instruction cputc_from___b1:
Removing instruction __b4:
Removing instruction wherey1:
Removing instruction __b3:
Removing instruction __b2_from___b3:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction __b1_from_clrscr:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3_from___b4:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b1_from_gotoxy:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in bcc __breturn_from___b2
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn in jmp __breturn_from___b2
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b3_from___b1 to __b2
Relabelling long label __breturn_from___b2 to __b2
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b2:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
const nomodify byte* COLORRAM = (byte*) 55296
const nomodify byte* DEFAULT_SCREEN = (byte*) 1024
const nomodify byte LIGHT_BLUE = $e
void __start()
void clrscr()
byte clrscr::c
byte clrscr::c#1 reg byte y 20002.0
byte clrscr::c#2 reg byte y 12501.25
byte clrscr::l
byte clrscr::l#1 reg byte x 2002.0
byte clrscr::l#2 reg byte x 333.6666666666667
byte* clrscr::line_cols
byte* clrscr::line_cols#1 line_cols zp[2]:4 1001.0
byte* clrscr::line_cols#5 line_cols zp[2]:4 1500.375
byte* clrscr::line_text
byte* clrscr::line_text#1 line_text zp[2]:12 667.3333333333334
byte* clrscr::line_text#5 line_text zp[2]:12 1714.7142857142858
byte conio_cursor_x loadstore zp[1]:6 345.6818181818182
byte conio_cursor_y loadstore zp[1]:7 5427.457627118644
byte* conio_line_color loadstore zp[2]:10 4514.469387755102
byte* conio_line_text loadstore zp[2]:8 4254.0192307692305
void cputc(byte cputc::c)
byte cputc::c
byte cputc::c#0 reg byte a 202.0
byte cputc::c#1 reg byte a 202.0
byte cputc::c#2 reg byte a 1102.0
void cputln()
void cscroll()
void gotoxy(byte gotoxy::x , byte gotoxy::y)
byte*~ gotoxy::$5 zp[2]:8 202.0
byte*~ gotoxy::$6 zp[2]:10 202.0
word~ gotoxy::$7 zp[2]:10 151.5
word~ gotoxy::$8 zp[2]:12 202.0
word~ gotoxy::$9 zp[2]:10 202.0
word gotoxy::line_offset
word gotoxy::line_offset#0 line_offset zp[2]:10 101.0
byte gotoxy::x
const byte gotoxy::x#2 x = 0
byte gotoxy::y
byte gotoxy::y#2 reg byte x 71.0
byte gotoxy::y#4 reg byte x 67.33333333333333
void main()
byte main::c
byte main::c#1 c zp[1]:2 151.5
byte main::c#2 c zp[1]:2 101.0
byte main::c1
byte main::c1#1 c1 zp[1]:3 151.5
byte main::c1#2 c1 zp[1]:3 50.5
byte main::wherey1_return
byte main::wherey1_return#0 reg byte x 22.0
void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
void* memcpy::destination
void* memcpy::destination#2 destination zp[2]:4
byte* memcpy::dst
byte* memcpy::dst#1 dst zp[2]:4 1.00000001E8
byte* memcpy::dst#2 dst zp[2]:4 1.0033333466666667E8
byte* memcpy::dst#4 dst zp[2]:4 2000002.0
word memcpy::num
void* memcpy::return
void* memcpy::source
void* memcpy::source#2 source zp[2]:12
byte* memcpy::src
byte* memcpy::src#1 src zp[2]:12 2.00000002E8
byte* memcpy::src#2 src zp[2]:12 1.0025000125E8
byte* memcpy::src#4 src zp[2]:12 1000001.0
byte* memcpy::src_end
byte* memcpy::src_end#0 src_end zp[2]:14 1.262500025E7
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 1.428571442857143E7
byte* memset::dst
byte* memset::dst#1 dst zp[2]:12 2.00000002E8
byte* memset::dst#2 dst zp[2]:12 1.3366666833333334E8
byte* memset::dst#4 dst zp[2]:12 2000002.0
byte* memset::end
byte* memset::end#0 end zp[2]:14 1.6833333666666668E7
word memset::num
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:12
byte toupper(byte toupper::ch)
byte toupper::ch
byte toupper::ch#0 reg byte a 1702.0000000000002
byte toupper::return
byte toupper::return#0 reg byte a 2002.0
byte toupper::return#2 reg byte a 1034.6666666666667
byte toupper::return#3 reg byte a 202.0

zp[1]:2 [ main::c#2 main::c#1 ]
zp[1]:3 [ main::c1#2 main::c1#1 ]
reg byte x [ clrscr::l#2 clrscr::l#1 ]
reg byte y [ clrscr::c#2 clrscr::c#1 ]
reg byte a [ cputc::c#2 cputc::c#0 cputc::c#1 ]
reg byte x [ gotoxy::y#4 gotoxy::y#2 ]
reg byte a [ toupper::return#2 toupper::return#0 toupper::ch#0 ]
zp[2]:4 [ memcpy::destination#2 memcpy::dst#2 memcpy::dst#4 memcpy::dst#1 clrscr::line_cols#5 clrscr::line_cols#1 ]
reg byte x [ memset::c#4 ]
zp[1]:6 [ conio_cursor_x ]
zp[1]:7 [ conio_cursor_y ]
zp[2]:8 [ conio_line_text gotoxy::$5 ]
zp[2]:10 [ conio_line_color gotoxy::$6 gotoxy::line_offset#0 gotoxy::$7 gotoxy::$9 ]
reg byte x [ main::wherey1_return#0 ]
reg byte a [ toupper::return#3 ]
zp[2]:12 [ gotoxy::$8 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 memcpy::source#2 memcpy::src#2 memcpy::src#4 memcpy::src#1 clrscr::line_text#5 clrscr::line_text#1 ]
zp[2]:14 [ memset::end#0 memcpy::src_end#0 ]


FINAL ASSEMBLER
Score: 14574

  // File Comments
// Test toupper()
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__start)
.pc = $80d "Program"
  // Global Constants & labels
  .const LIGHT_BLUE = $e
  // Color Ram
  .label COLORRAM = $d800
  // Default address of screen character matrix
  .label DEFAULT_SCREEN = $400
  // The number of bytes on the screen
  // The current cursor x-position
  .label conio_cursor_x = 6
  // The current cursor y-position
  .label conio_cursor_y = 7
  // The current text cursor line start
  .label conio_line_text = 8
  // The current color cursor line start
  .label conio_line_color = $a
  // __start
__start: {
    // __start::__init1
    // conio_cursor_x = 0
    // [1] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [2] conio_cursor_y = 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [3] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [4] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // [5] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [6] call main 
    jsr main
    // __start::@return
    // [7] return 
    rts
}
  // main
main: {
    .label c = 2
    .label c1 = 3
    // *((char*)0xd018) = 0x17
    // [8] *((byte*) 53272) = $17 -- _deref_pbuc1=vbuc2 
    // Show mixed chars on screen
    lda #$17
    sta $d018
    // clrscr()
    // [9] call clrscr 
  // Clear screen
    // [27] phi from main to clrscr [phi:main->clrscr]
    jsr clrscr
    // [10] phi from main to main::@1 [phi:main->main::@1]
    // [10] phi main::c#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
  // Output un-modified chars
    // [10] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [10] phi main::c#2 = main::c#1 [phi:main::@4->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // cputc(c)
    // [11] cputc::c#0 = main::c#2 -- vbuaa=vbuz1 
    lda.z c
    // [12] call cputc 
    // [43] phi from main::@1 to cputc [phi:main::@1->cputc]
    // [43] phi cputc::c#2 = cputc::c#0 [phi:main::@1->cputc#0] -- register_copy 
    jsr cputc
    // main::@4
    // for(char c:0..0xff)
    // [13] main::c#1 = ++ main::c#2 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [14] if(main::c#1!=0) goto main::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1
    // main::wherey1
    // return conio_cursor_y;
    // [15] main::wherey1_return#0 = conio_cursor_y -- vbuxx=vbuz1 
    ldx.z conio_cursor_y
    // main::@3
    // gotoxy(0, wherey()+2)
    // [16] gotoxy::y#2 = main::wherey1_return#0 + 2 -- vbuxx=vbuxx_plus_2 
    inx
    inx
    // [17] call gotoxy 
    jsr gotoxy
    // [18] phi from main::@3 to main::@2 [phi:main::@3->main::@2]
    // [18] phi main::c1#2 = 0 [phi:main::@3->main::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c1
  // Output toupper-chars chars
    // [18] phi from main::@6 to main::@2 [phi:main::@6->main::@2]
    // [18] phi main::c1#2 = main::c1#1 [phi:main::@6->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // toupper(c)
    // [19] toupper::ch#0 = main::c1#2 -- vbuaa=vbuz1 
    lda.z c1
    // [20] call toupper 
    jsr toupper
    // [21] toupper::return#3 = toupper::return#2
    // main::@5
    // cputc(toupper(c))
    // [22] cputc::c#1 = toupper::return#3
    // [23] call cputc 
    // [43] phi from main::@5 to cputc [phi:main::@5->cputc]
    // [43] phi cputc::c#2 = cputc::c#1 [phi:main::@5->cputc#0] -- register_copy 
    jsr cputc
    // main::@6
    // for(char c:0..0xff)
    // [24] main::c1#1 = ++ main::c1#2 -- vbuz1=_inc_vbuz1 
    inc.z c1
    // [25] if(main::c1#1!=0) goto main::@2 -- vbuz1_neq_0_then_la1 
    lda.z c1
    cmp #0
    bne __b2
    // main::@return
    // }
    // [26] return 
    rts
}
  // clrscr
// clears the screen and moves the cursor to the upper left-hand corner of the screen.
clrscr: {
    .label line_text = $c
    .label line_cols = 4
    // [28] phi from clrscr to clrscr::@1 [phi:clrscr->clrscr::@1]
    // [28] phi clrscr::line_cols#5 = COLORRAM [phi:clrscr->clrscr::@1#0] -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z line_cols
    lda #>COLORRAM
    sta.z line_cols+1
    // [28] phi clrscr::line_text#5 = DEFAULT_SCREEN [phi:clrscr->clrscr::@1#1] -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z line_text
    lda #>DEFAULT_SCREEN
    sta.z line_text+1
    // [28] phi clrscr::l#2 = 0 [phi:clrscr->clrscr::@1#2] -- vbuxx=vbuc1 
    ldx #0
    // clrscr::@1
  __b1:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [29] if(clrscr::l#2<$19) goto clrscr::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19
    bcc __b2
    // clrscr::@2
    // conio_cursor_x = 0
    // [30] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y = 0
    // [31] conio_cursor_y = 0 -- vbuz1=vbuc1 
    sta.z conio_cursor_y
    // conio_line_text = CONIO_SCREEN_TEXT
    // [32] conio_line_text = DEFAULT_SCREEN -- pbuz1=pbuc1 
    lda #<DEFAULT_SCREEN
    sta.z conio_line_text
    lda #>DEFAULT_SCREEN
    sta.z conio_line_text+1
    // conio_line_color = CONIO_SCREEN_COLORS
    // [33] conio_line_color = COLORRAM -- pbuz1=pbuc1 
    lda #<COLORRAM
    sta.z conio_line_color
    lda #>COLORRAM
    sta.z conio_line_color+1
    // clrscr::@return
    // }
    // [34] return 
    rts
    // [35] phi from clrscr::@1 to clrscr::@3 [phi:clrscr::@1->clrscr::@3]
  __b2:
    // [35] phi clrscr::c#2 = 0 [phi:clrscr::@1->clrscr::@3#0] -- vbuyy=vbuc1 
    ldy #0
    // clrscr::@3
  __b3:
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [36] if(clrscr::c#2<$28) goto clrscr::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #$28
    bcc __b4
    // clrscr::@5
    // line_text += CONIO_WIDTH
    // [37] clrscr::line_text#1 = clrscr::line_text#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_text
    sta.z line_text
    bcc !+
    inc.z line_text+1
  !:
    // line_cols += CONIO_WIDTH
    // [38] clrscr::line_cols#1 = clrscr::line_cols#5 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line_cols
    sta.z line_cols
    bcc !+
    inc.z line_cols+1
  !:
    // for( char l=0;l<CONIO_HEIGHT; l++ )
    // [39] clrscr::l#1 = ++ clrscr::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [28] phi from clrscr::@5 to clrscr::@1 [phi:clrscr::@5->clrscr::@1]
    // [28] phi clrscr::line_cols#5 = clrscr::line_cols#1 [phi:clrscr::@5->clrscr::@1#0] -- register_copy 
    // [28] phi clrscr::line_text#5 = clrscr::line_text#1 [phi:clrscr::@5->clrscr::@1#1] -- register_copy 
    // [28] phi clrscr::l#2 = clrscr::l#1 [phi:clrscr::@5->clrscr::@1#2] -- register_copy 
    jmp __b1
    // clrscr::@4
  __b4:
    // line_text[c] = ' '
    // [40] clrscr::line_text#5[clrscr::c#2] = ' ' -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #' '
    sta (line_text),y
    // line_cols[c] = conio_textcolor
    // [41] clrscr::line_cols#5[clrscr::c#2] = LIGHT_BLUE -- pbuz1_derefidx_vbuyy=vbuc1 
    lda #LIGHT_BLUE
    sta (line_cols),y
    // for( char c=0;c<CONIO_WIDTH; c++ )
    // [42] clrscr::c#1 = ++ clrscr::c#2 -- vbuyy=_inc_vbuyy 
    iny
    // [35] phi from clrscr::@4 to clrscr::@3 [phi:clrscr::@4->clrscr::@3]
    // [35] phi clrscr::c#2 = clrscr::c#1 [phi:clrscr::@4->clrscr::@3#0] -- register_copy 
    jmp __b3
}
  // cputc
// Output one character at the current cursor position
// Moves the cursor forward. Scrolls the entire screen if needed
// cputc(byte register(A) c)
cputc: {
    // if(c=='\n')
    // [44] if(cputc::c#2==' ') goto cputc::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #'\n'
    beq __b1
    // cputc::@2
    // conio_line_text[conio_cursor_x] = c
    // [45] conio_line_text[conio_cursor_x] = cputc::c#2 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z conio_cursor_x
    sta (conio_line_text),y
    // conio_line_color[conio_cursor_x] = conio_textcolor
    // [46] conio_line_color[conio_cursor_x] = LIGHT_BLUE -- pbuz1_derefidx_vbuz2=vbuc1 
    lda #LIGHT_BLUE
    sta (conio_line_color),y
    // if(++conio_cursor_x==CONIO_WIDTH)
    // [47] conio_cursor_x = ++ conio_cursor_x -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_x
    // [48] if(conio_cursor_x!=$28) goto cputc::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z conio_cursor_x
    bne __breturn
    // [49] phi from cputc::@2 to cputc::@3 [phi:cputc::@2->cputc::@3]
    // cputc::@3
    // cputln()
    // [50] call cputln 
    jsr cputln
    // cputc::@return
  __breturn:
    // }
    // [51] return 
    rts
    // [52] phi from cputc to cputc::@1 [phi:cputc->cputc::@1]
    // cputc::@1
  __b1:
    // cputln()
    // [53] call cputln 
    jsr cputln
    rts
}
  // gotoxy
// Set the cursor to the specified position
// gotoxy(byte register(X) y)
gotoxy: {
    .const x = 0
    .label __5 = 8
    .label __6 = $a
    .label __7 = $a
    .label line_offset = $a
    .label __8 = $c
    .label __9 = $a
    // if(y>CONIO_HEIGHT)
    // [54] if(gotoxy::y#2<$19+1) goto gotoxy::@3 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$19+1
    bcc __b2
    // [56] phi from gotoxy to gotoxy::@1 [phi:gotoxy->gotoxy::@1]
    // [56] phi gotoxy::y#4 = 0 [phi:gotoxy->gotoxy::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [55] phi from gotoxy to gotoxy::@3 [phi:gotoxy->gotoxy::@3]
    // gotoxy::@3
    // [56] phi from gotoxy::@3 to gotoxy::@1 [phi:gotoxy::@3->gotoxy::@1]
    // [56] phi gotoxy::y#4 = gotoxy::y#2 [phi:gotoxy::@3->gotoxy::@1#0] -- register_copy 
    // gotoxy::@1
    // gotoxy::@2
  __b2:
    // conio_cursor_x = x
    // [57] conio_cursor_x = gotoxy::x#2 -- vbuz1=vbuc1 
    lda #x
    sta.z conio_cursor_x
    // conio_cursor_y = y
    // [58] conio_cursor_y = gotoxy::y#4 -- vbuz1=vbuxx 
    stx.z conio_cursor_y
    // (unsigned int)y*CONIO_WIDTH
    // [59] gotoxy::$7 = (word)gotoxy::y#4 -- vwuz1=_word_vbuxx 
    txa
    sta.z __7
    lda #0
    sta.z __7+1
    // line_offset = (unsigned int)y*CONIO_WIDTH
    // [60] gotoxy::$8 = gotoxy::$7 << 2 -- vwuz1=vwuz2_rol_2 
    lda.z __7
    asl
    sta.z __8
    lda.z __7+1
    rol
    sta.z __8+1
    asl.z __8
    rol.z __8+1
    // [61] gotoxy::$9 = gotoxy::$8 + gotoxy::$7 -- vwuz1=vwuz2_plus_vwuz1 
    lda.z __9
    clc
    adc.z __8
    sta.z __9
    lda.z __9+1
    adc.z __8+1
    sta.z __9+1
    // [62] gotoxy::line_offset#0 = gotoxy::$9 << 3 -- vwuz1=vwuz1_rol_3 
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    asl.z line_offset
    rol.z line_offset+1
    // CONIO_SCREEN_TEXT + line_offset
    // [63] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz2 
    lda.z line_offset
    clc
    adc #<DEFAULT_SCREEN
    sta.z __5
    lda.z line_offset+1
    adc #>DEFAULT_SCREEN
    sta.z __5+1
    // conio_line_text = CONIO_SCREEN_TEXT + line_offset
    // [64] conio_line_text = gotoxy::$5
    // CONIO_SCREEN_COLORS + line_offset
    // [65] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0 -- pbuz1=pbuc1_plus_vwuz1 
    clc
    lda.z __6
    adc #<COLORRAM
    sta.z __6
    lda.z __6+1
    adc #>COLORRAM
    sta.z __6+1
    // conio_line_color = CONIO_SCREEN_COLORS + line_offset
    // [66] conio_line_color = gotoxy::$6
    // gotoxy::@return
    // }
    // [67] return 
    rts
}
  // toupper
// Convert lowercase alphabet to uppercase
// Returns uppercase equivalent to c, if such value exists, else c remains unchanged
// toupper(byte register(A) ch)
toupper: {
    // if(ch>='a' && ch<='z')
    // [68] if(toupper::ch#0<'a') goto toupper::@return -- vbuaa_lt_vbuc1_then_la1 
    cmp #'a'
    bcc __breturn
    // toupper::@2
    // [69] if(toupper::ch#0<='z') goto toupper::@1 -- vbuaa_le_vbuc1_then_la1 
    cmp #'z'
    bcc __b1
    beq __b1
    // [71] phi from toupper toupper::@1 toupper::@2 to toupper::@return [phi:toupper/toupper::@1/toupper::@2->toupper::@return]
    // [71] phi toupper::return#2 = toupper::ch#0 [phi:toupper/toupper::@1/toupper::@2->toupper::@return#0] -- register_copy 
    rts
    // toupper::@1
  __b1:
    // return ch + ('A'-'a');
    // [70] toupper::return#0 = toupper::ch#0 + 'A'-'a' -- vbuaa=vbuaa_plus_vbuc1 
    clc
    adc #'A'-'a'
    // toupper::@return
  __breturn:
    // }
    // [72] return 
    rts
}
  // cputln
// Print a newline
cputln: {
    // conio_line_text +=  CONIO_WIDTH
    // [73] conio_line_text = conio_line_text + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_text
    sta.z conio_line_text
    bcc !+
    inc.z conio_line_text+1
  !:
    // conio_line_color += CONIO_WIDTH
    // [74] conio_line_color = conio_line_color + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z conio_line_color
    sta.z conio_line_color
    bcc !+
    inc.z conio_line_color+1
  !:
    // conio_cursor_x = 0
    // [75] conio_cursor_x = 0 -- vbuz1=vbuc1 
    lda #0
    sta.z conio_cursor_x
    // conio_cursor_y++;
    // [76] conio_cursor_y = ++ conio_cursor_y -- vbuz1=_inc_vbuz1 
    inc.z conio_cursor_y
    // cscroll()
    // [77] call cscroll 
    jsr cscroll
    // cputln::@return
    // }
    // [78] return 
    rts
}
  // cscroll
// Scroll the entire screen if the cursor is beyond the last line
cscroll: {
    // if(conio_cursor_y==CONIO_HEIGHT)
    // [79] if(conio_cursor_y!=$19) goto cscroll::@return -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z conio_cursor_y
    bne __breturn
    // [80] phi from cscroll to cscroll::@1 [phi:cscroll->cscroll::@1]
    // cscroll::@1
    // memcpy(CONIO_SCREEN_TEXT, CONIO_SCREEN_TEXT+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [81] call memcpy 
    // [92] phi from cscroll::@1 to memcpy [phi:cscroll::@1->memcpy]
    // [92] phi memcpy::destination#2 = (void*)DEFAULT_SCREEN [phi:cscroll::@1->memcpy#0] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN
    sta.z memcpy.destination
    lda #>DEFAULT_SCREEN
    sta.z memcpy.destination+1
    // [92] phi memcpy::source#2 = (void*)DEFAULT_SCREEN+$28 [phi:cscroll::@1->memcpy#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$28
    sta.z memcpy.source
    lda #>DEFAULT_SCREEN+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [82] phi from cscroll::@1 to cscroll::@2 [phi:cscroll::@1->cscroll::@2]
    // cscroll::@2
    // memcpy(CONIO_SCREEN_COLORS, CONIO_SCREEN_COLORS+CONIO_WIDTH, CONIO_BYTES-CONIO_WIDTH)
    // [83] call memcpy 
    // [92] phi from cscroll::@2 to memcpy [phi:cscroll::@2->memcpy]
    // [92] phi memcpy::destination#2 = (void*)COLORRAM [phi:cscroll::@2->memcpy#0] -- pvoz1=pvoc1 
    lda #<COLORRAM
    sta.z memcpy.destination
    lda #>COLORRAM
    sta.z memcpy.destination+1
    // [92] phi memcpy::source#2 = (void*)COLORRAM+$28 [phi:cscroll::@2->memcpy#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$28
    sta.z memcpy.source
    lda #>COLORRAM+$28
    sta.z memcpy.source+1
    jsr memcpy
    // [84] phi from cscroll::@2 to cscroll::@3 [phi:cscroll::@2->cscroll::@3]
    // cscroll::@3
    // memset(CONIO_SCREEN_TEXT+CONIO_BYTES-CONIO_WIDTH, ' ', CONIO_WIDTH)
    // [85] call memset 
    // [102] phi from cscroll::@3 to memset [phi:cscroll::@3->memset]
    // [102] phi memset::c#4 = ' ' [phi:cscroll::@3->memset#0] -- vbuxx=vbuc1 
    ldx #' '
    // [102] phi memset::str#3 = (void*)DEFAULT_SCREEN+(word)$19*$28-$28 [phi:cscroll::@3->memset#1] -- pvoz1=pvoc1 
    lda #<DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str
    lda #>DEFAULT_SCREEN+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // [86] phi from cscroll::@3 to cscroll::@4 [phi:cscroll::@3->cscroll::@4]
    // cscroll::@4
    // memset(CONIO_SCREEN_COLORS+CONIO_BYTES-CONIO_WIDTH, conio_textcolor, CONIO_WIDTH)
    // [87] call memset 
    // [102] phi from cscroll::@4 to memset [phi:cscroll::@4->memset]
    // [102] phi memset::c#4 = LIGHT_BLUE [phi:cscroll::@4->memset#0] -- vbuxx=vbuc1 
    ldx #LIGHT_BLUE
    // [102] phi memset::str#3 = (void*)COLORRAM+(word)$19*$28-$28 [phi:cscroll::@4->memset#1] -- pvoz1=pvoc1 
    lda #<COLORRAM+$19*$28-$28
    sta.z memset.str
    lda #>COLORRAM+$19*$28-$28
    sta.z memset.str+1
    jsr memset
    // cscroll::@5
    // conio_line_text -= CONIO_WIDTH
    // [88] conio_line_text = conio_line_text - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_text
    sbc #$28
    sta.z conio_line_text
    lda.z conio_line_text+1
    sbc #0
    sta.z conio_line_text+1
    // conio_line_color -= CONIO_WIDTH
    // [89] conio_line_color = conio_line_color - $28 -- pbuz1=pbuz1_minus_vbuc1 
    sec
    lda.z conio_line_color
    sbc #$28
    sta.z conio_line_color
    lda.z conio_line_color+1
    sbc #0
    sta.z conio_line_color+1
    // conio_cursor_y--;
    // [90] conio_cursor_y = -- conio_cursor_y -- vbuz1=_dec_vbuz1 
    dec.z conio_cursor_y
    // cscroll::@return
  __breturn:
    // }
    // [91] return 
    rts
}
  // memcpy
// Copy block of memory (forwards)
// Copies the values of num bytes from the location pointed to by source directly to the memory block pointed to by destination.
// memcpy(void* zp(4) destination, void* zp($c) source)
memcpy: {
    .label src_end = $e
    .label dst = 4
    .label src = $c
    .label source = $c
    .label destination = 4
    // src_end = (char*)source+num
    // [93] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z source
    clc
    adc #<$19*$28-$28
    sta.z src_end
    lda.z source+1
    adc #>$19*$28-$28
    sta.z src_end+1
    // [94] memcpy::src#4 = (byte*)memcpy::source#2
    // [95] memcpy::dst#4 = (byte*)memcpy::destination#2
    // [96] phi from memcpy memcpy::@2 to memcpy::@1 [phi:memcpy/memcpy::@2->memcpy::@1]
    // [96] phi memcpy::dst#2 = memcpy::dst#4 [phi:memcpy/memcpy::@2->memcpy::@1#0] -- register_copy 
    // [96] phi memcpy::src#2 = memcpy::src#4 [phi:memcpy/memcpy::@2->memcpy::@1#1] -- register_copy 
    // memcpy::@1
  __b1:
    // while(src!=src_end)
    // [97] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2 -- pbuz1_neq_pbuz2_then_la1 
    lda.z src+1
    cmp.z src_end+1
    bne __b2
    lda.z src
    cmp.z src_end
    bne __b2
    // memcpy::@return
    // }
    // [98] return 
    rts
    // memcpy::@2
  __b2:
    // *dst++ = *src++
    // [99] *memcpy::dst#2 = *memcpy::src#2 -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (src),y
    sta (dst),y
    // *dst++ = *src++;
    // [100] memcpy::dst#1 = ++ memcpy::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    // [101] memcpy::src#1 = ++ memcpy::src#2 -- pbuz1=_inc_pbuz1 
    inc.z src
    bne !+
    inc.z src+1
  !:
    jmp __b1
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zp($c) str, byte register(X) c)
memset: {
    .label end = $e
    .label dst = $c
    .label str = $c
    // memset::@1
    // end = (char*)str + num
    // [103] memset::end#0 = (byte*)memset::str#3 + $28 -- pbuz1=pbuz2_plus_vbuc1 
    lda #$28
    clc
    adc.z str
    sta.z end
    lda #0
    adc.z str+1
    sta.z end+1
    // [104] memset::dst#4 = (byte*)memset::str#3
    // [105] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [105] phi memset::dst#2 = memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [106] if(memset::dst#2!=memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [107] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [108] *memset::dst#2 = memset::c#4 -- _deref_pbuz1=vbuxx 
    txa
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [109] memset::dst#1 = ++ memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // File Data

