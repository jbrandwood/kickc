
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::y#0 = SCREEN[0]
  main::c#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@4
  main::y#3 = phi( main/main::y#0, main::@4/main::y#4 )
  main::c#2 = phi( main/main::c#0, main::@4/main::c#1 )
  main::$0 = main::c#2 < $28
  if(main::$0) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1
  main::y#5 = phi( main::@1/main::y#3 )
  main::c#3 = phi( main::@1/main::c#2 )
  main::$1 = main::c#3 == $a
  main::$2 = ! main::$1
  if(main::$2) goto main::@4
  to:main::@5
main::@3: scope:[main]  from main::@1
  main::y#2 = phi( main::@1/main::y#3 )
  SCREEN[$50] = main::y#2
  to:main::@return
main::@4: scope:[main]  from main::@2 main::@5
  main::y#4 = phi( main::@2/main::y#5, main::@5/main::y#1 )
  main::c#4 = phi( main::@2/main::c#3, main::@5/main::c#5 )
  main::c#1 = ++ main::c#4
  to:main::@1
main::@5: scope:[main]  from main::@2
  main::c#5 = phi( main::@2/main::c#3 )
  main::y#1 = 0
  to:main::@4
main::@return: scope:[main]  from main::@3
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const nomodify byte* SCREEN = (byte*)$400
void __start()
void main()
bool~ main::$0
bool~ main::$1
bool~ main::$2
byte main::c
byte main::c#0
byte main::c#1
byte main::c#2
byte main::c#3
byte main::c#4
byte main::c#5
byte main::y
byte main::y#0
byte main::y#1
byte main::y#2
byte main::y#3
byte main::y#4
byte main::y#5

Adding number conversion cast (unumber) 0 in main::y#0 = SCREEN[0]
Adding number conversion cast (unumber) $28 in main::$0 = main::c#2 < $28
Adding number conversion cast (unumber) $a in main::$1 = main::c#3 == $a
Adding number conversion cast (unumber) $50 in SCREEN[$50] = main::y#2
Adding number conversion cast (unumber) 0 in main::y#1 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::y#1 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $a
Simplifying constant integer cast $50
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type 0
Finalized unsigned number type $28
Finalized unsigned number type $a
Finalized unsigned number type $50
Finalized unsigned number type 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [7] main::$2 = main::c#3 != $a from [6] main::$1 = main::c#3 == $a
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::c#2 = main::c#3 main::c#5 
Alias main::y#2 = main::y#5 main::y#3 
Successful SSA optimization Pass2AliasElimination
Alias main::c#2 = main::c#4 
Successful SSA optimization Pass2AliasElimination
Hoisting  loop invariant computation statement out of loop from: main::@5 to main [10] main::y#1 = 0
Simple Condition main::$0 [5] if(main::c#2<$28) goto main::@2
Simple Condition main::$2 [7] if(main::c#2!=$a) goto main::@4
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::c#0 = 0
Constant main::y#1 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero SCREEN in [0] main::y#0 = SCREEN[0]
Successful SSA optimization PassNSimplifyExpressionWithZero
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings main::c#0
Inlining constant with var siblings main::y#1
Constant inlined main::y#1 = 0
Constant inlined main::c#0 = 0
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *(SCREEN+$50)
Successful SSA optimization Pass2ConstantAdditionElimination
Added new block during phi lifting main::@6(between main::@2 and main::@4)
Adding NOP phi() at start of main::@5
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [1] main::y#6 = main::y#0
Coalesced [10] main::c#6 = main::c#1
Coalesced [11] main::y#7 = main::y#4
Coalesced (already) [12] main::y#8 = main::y#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@5
Renumbering block main::@6 to main::@5
Adding NOP phi() at start of main::@5

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] main::y#0 = *SCREEN
  to:main::@1
main::@1: scope:[main]  from main main::@4
  [1] main::y#2 = phi( main/main::y#0, main::@4/main::y#4 )
  [1] main::c#2 = phi( main/0, main::@4/main::c#1 )
  [2] if(main::c#2<$28) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] *(SCREEN+$50) = main::y#2
  to:main::@return
main::@return: scope:[main]  from main::@3
  [4] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [5] if(main::c#2!=$a) goto main::@5
  to:main::@4
main::@5: scope:[main]  from main::@2
  [6] phi()
  to:main::@4
main::@4: scope:[main]  from main::@2 main::@5
  [7] main::y#4 = phi( main::@5/main::y#2, main::@2/0 )
  [8] main::c#1 = ++ main::c#2
  to:main::@1


VARIABLE REGISTER WEIGHTS
void main()
byte main::c
byte main::c#1 22.0
byte main::c#2 8.8
byte main::y
byte main::y#0 4.0
byte main::y#2 6.5
byte main::y#4 11.0

Initial phi equivalence classes
[ main::c#2 main::c#1 ]
[ main::y#2 main::y#0 main::y#4 ]
Complete equivalence classes
[ main::c#2 main::c#1 ]
[ main::y#2 main::y#0 main::y#4 ]
Allocated zp[1]:2 [ main::c#2 main::c#1 ]
Allocated zp[1]:3 [ main::y#2 main::y#0 main::y#4 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::c#2 main::c#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::y#2 main::y#0 main::y#4 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 30.8: zp[1]:2 [ main::c#2 main::c#1 ] 21.5: zp[1]:3 [ main::y#2 main::y#0 main::y#4 ] 
Uplift Scope [] 

Uplifting [main] best 347 combination reg byte x [ main::c#2 main::c#1 ] reg byte a [ main::y#2 main::y#0 main::y#4 ] 
Uplifting [] best 347 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Test loop invariant computation detection
// http://www.cs.toronto.edu/~pekhimenko/courses/cscd70-w18/docs/Lecture%205%20[LICM%20and%20Strength%20Reduction]%2002.08.2018.pdf
// Only expressions on all execution paths in the loop can be hoisted out
// (y = 0;) is not on every loop execution path and should not be hoisted
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // [0] main::y#0 = *SCREEN -- vbuaa=_deref_pbuc1 
    lda SCREEN
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::y#2 = main::y#0 [phi:main->main::@1#0] -- register_copy 
    // [1] phi main::c#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::c#2<$28) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b2
    jmp __b3
    // main::@3
  __b3:
    // [3] *(SCREEN+$50) = main::y#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$50
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
    // main::@2
  __b2:
    // [5] if(main::c#2!=$a) goto main::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$a
    bne __b5_from___b2
    // [7] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    // [7] phi main::y#4 = 0 [phi:main::@2->main::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b4
    // [6] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
  __b5_from___b2:
    jmp __b5
    // main::@5
  __b5:
    // [7] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
  __b4_from___b5:
    // [7] phi main::y#4 = main::y#2 [phi:main::@5->main::@4#0] -- register_copy 
    jmp __b4
    // main::@4
  __b4:
    // [8] main::c#1 = ++ main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [1] phi main::y#2 = main::y#4 [phi:main::@4->main::@1#0] -- register_copy 
    // [1] phi main::c#2 = main::c#1 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b5_from___b2 with __b4
Removing instruction __b5_from___b2:
Removing instruction __b5:
Removing instruction __b4_from___b5:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b4_from___b2:
Removing instruction __b1_from___b4:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b4
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const nomodify byte* SCREEN = (byte*) 1024
void main()
byte main::c
byte main::c#1 reg byte x 22.0
byte main::c#2 reg byte x 8.8
byte main::y
byte main::y#0 reg byte a 4.0
byte main::y#2 reg byte a 6.5
byte main::y#4 reg byte a 11.0

reg byte x [ main::c#2 main::c#1 ]
reg byte a [ main::y#2 main::y#0 main::y#4 ]


FINAL ASSEMBLER
Score: 194

  // File Comments
// Test loop invariant computation detection
// http://www.cs.toronto.edu/~pekhimenko/courses/cscd70-w18/docs/Lecture%205%20[LICM%20and%20Strength%20Reduction]%2002.08.2018.pdf
// Only expressions on all execution paths in the loop can be hoisted out
// (y = 0;) is not on every loop execution path and should not be hoisted
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .label SCREEN = $400
  // main
main: {
    // y = SCREEN[0]
    // [0] main::y#0 = *SCREEN -- vbuaa=_deref_pbuc1 
    lda SCREEN
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::y#2 = main::y#0 [phi:main->main::@1#0] -- register_copy 
    // [1] phi main::c#2 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // main::@1
  __b1:
    // for(char c=0;c<40;c++)
    // [2] if(main::c#2<$28) goto main::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$28
    bcc __b2
    // main::@3
    // SCREEN[80] = y
    // [3] *(SCREEN+$50) = main::y#2 -- _deref_pbuc1=vbuaa 
    sta SCREEN+$50
    // main::@return
    // }
    // [4] return 
    rts
    // main::@2
  __b2:
    // if(c==10)
    // [5] if(main::c#2!=$a) goto main::@5 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$a
    bne __b4
    // [7] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // [7] phi main::y#4 = 0 [phi:main::@2->main::@4#0] -- vbuaa=vbuc1 
    lda #0
    // [6] phi from main::@2 to main::@5 [phi:main::@2->main::@5]
    // main::@5
    // [7] phi from main::@5 to main::@4 [phi:main::@5->main::@4]
    // [7] phi main::y#4 = main::y#2 [phi:main::@5->main::@4#0] -- register_copy 
    // main::@4
  __b4:
    // for(char c=0;c<40;c++)
    // [8] main::c#1 = ++ main::c#2 -- vbuxx=_inc_vbuxx 
    inx
    // [1] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [1] phi main::y#2 = main::y#4 [phi:main::@4->main::@1#0] -- register_copy 
    // [1] phi main::c#2 = main::c#1 [phi:main::@4->main::@1#1] -- register_copy 
    jmp __b1
}
  // File Data

