__constant void (** const KERNEL_IRQ)() = (void (**)()) 788
__constant char OFFSET_STRUCT_VERA_SPRITE_X = 2
__constant char OFFSET_STRUCT_VERA_SPRITE_Y = 4
__constant unsigned int SINX[SINX_LEN] = kickasm {{ .fillword 256, 288+288*sin(i*2*PI/SINX_LEN)
 }}
__constant const char SINX_LEN = $f1
__constant unsigned int SINY[SINY_LEN] = kickasm {{ .fillword 256, 208+208*sin(i*2*PI/SINY_LEN)
 }}
__constant const char SINY_LEN = $fb
__constant char SIZEOF_STRUCT_VERA_SPRITE = 8
__loadstore volatile struct VERA_SPRITE SPRITE_ATTR = { ADDR: word0 SPRITE_PIXELS_VRAM/$20|VERA_SPRITE_8BPP, X: $140-$20, Y: (unsigned int)$f0-$20, CTRL1: $c, CTRL2: $f0 } // mem[8]
__constant char SPRITE_PIXELS[$40*$40+$200] = kickasm {{ .var pic = LoadPicture("tut.png")
    // palette: rgb->idx
    .var palette = Hashtable()
    // RGB value for each palette index
    .var palList = List()
    // Next palette index
    .var nxt_idx = 0;
    // Extract palette while outputting pixels as palete index values
    .for (var y=0; y<64; y++) {
    	.for (var x=0;x<64; x++) {
            // Find palette index (add if not known)
            .var rgb = pic.getPixel(x,y);
            .var idx = palette.get(rgb)
            .if(idx==null) {
                .eval idx = nxt_idx++;
                .eval palette.put(rgb,idx);
                .eval palList.add(rgb)
            }
            // Output pixel as palette index
            .byte idx
        }
    }
    .if(nxt_idx>256) .error "Image has too many colours "+nxt_idx
    // Output sprite palette (at offset 64*64 bytes)
    .for(var i=0;i<256;i++) {
        .var rgb = palList.get(i)
        .var red = floor(rgb / [256*256])
        .var green = floor(rgb/256) & 255
        .var blue = rgb & 255
        // bits 4-8: green, bits 0-3 blue
        .byte green&$f0  | blue/16
        // bits bits 0-3 red
        .byte red/16
    }
 }}
__constant const unsigned long SPRITE_PIXELS_VRAM = $8000
__constant const char VERA_ADDRSEL = 1
__constant char * const VERA_ADDRX_H = (char *) 40738
__constant char * const VERA_ADDRX_L = (char *) 40736
__constant char * const VERA_ADDRX_M = (char *) 40737
__constant char * const VERA_CTRL = (char *) 40741
__constant char * const VERA_DATA0 = (char *) 40739
__constant const char VERA_DCSEL = 2
__constant char * const VERA_DC_VIDEO = (char *) 40745
__constant char * const VERA_IEN = (char *) 40742
__constant const char VERA_INC_1 = $10
__constant char * const VERA_ISR = (char *) 40743
__constant const unsigned long VERA_PALETTE = $1fa00
__constant const char VERA_SPRITES_ENABLE = $40
__constant const unsigned int VERA_SPRITE_8BPP = $8000
__constant const unsigned long VERA_SPRITE_ATTR = $1fc00
__constant const char VERA_VSYNC = 1
void __start()
__interrupt(rom_sys_cx16) void irq_vsync()
unsigned int irq_vsync::$11 // zp[2]:15 22.0
unsigned int irq_vsync::$12 // zp[2]:17 22.0
unsigned int *irq_vsync::$13 // zp[2]:15 22.0
unsigned int *irq_vsync::$14 // zp[2]:17 22.0
unsigned int irq_vsync::i_x
unsigned int irq_vsync::i_x#0 // i_x zp[2]:13 2.0
unsigned int irq_vsync::i_x#1 // i_x zp[2]:13 22.0
unsigned int irq_vsync::i_x#2 // i_x zp[2]:13 22.0
unsigned int irq_vsync::i_x#3 // i_x zp[2]:13 3.1818181818181817
unsigned int irq_vsync::i_x#7 // i_x zp[2]:13 5.5
unsigned int irq_vsync::i_y
unsigned int irq_vsync::i_y#0 // i_y zp[2]:11 4.0
unsigned int irq_vsync::i_y#1 // i_y zp[2]:11 22.0
unsigned int irq_vsync::i_y#2 // i_y zp[2]:11 22.0
unsigned int irq_vsync::i_y#3 // i_y zp[2]:11 2.333333333333333
unsigned int irq_vsync::i_y#9 // i_y zp[2]:11 16.5
char irq_vsync::s
char irq_vsync::s#1 // s zp[1]:19 22.0
char irq_vsync::s#2 // s zp[1]:19 1.736842105263158
__constant const char irq_vsync::vram_sprite_attr_bank = byte2 VERA_SPRITE_ATTR
char *irq_vsync::vram_sprite_pos
char *irq_vsync::vram_sprite_pos#1 // vram_sprite_pos zp[2]:20 2.2
char *irq_vsync::vram_sprite_pos#2 // vram_sprite_pos zp[2]:20 2.2
void main()
char main::s
char main::s#1 // s zp[1]:8 202.0
char main::s#2 // s zp[1]:8 43.285714285714285
char *main::vram_sprite_attr
char *main::vram_sprite_attr#1 // vram_sprite_attr zp[2]:9 101.0
char *main::vram_sprite_attr#2 // vram_sprite_attr zp[2]:9 33.666666666666664
void memcpy_to_vram(char vbank , void *vdest , void *src , unsigned int num)
char memcpy_to_vram::$0 // reg byte a 2002.0
char memcpy_to_vram::$1 // reg byte a 2002.0
char memcpy_to_vram::$2 // reg byte a 2002.0
char *memcpy_to_vram::end
char *memcpy_to_vram::end#0 // end zp[2]:4 16833.666666666664
unsigned int memcpy_to_vram::num
unsigned int memcpy_to_vram::num#4 // num zp[2]:4 125.125
char *memcpy_to_vram::s
char *memcpy_to_vram::s#1 // s zp[2]:2 200002.0
char *memcpy_to_vram::s#2 // s zp[2]:2 133668.3333333333
char *memcpy_to_vram::s#4 // s zp[2]:2 2002.0
void *memcpy_to_vram::src
void *memcpy_to_vram::src#4 // src zp[2]:2
char memcpy_to_vram::vbank
char memcpy_to_vram::vbank#4 // reg byte x 166.83333333333334
void *memcpy_to_vram::vdest
void *memcpy_to_vram::vdest#2 // vdest zp[2]:6 202.0
void *memcpy_to_vram::vdest#3 // vdest zp[2]:6 22.0
void *memcpy_to_vram::vdest#4 // vdest zp[2]:6 528.5
__loadstore volatile unsigned int sin_idx_x // zp[2]:22 1.9999999999999998
__loadstore volatile unsigned int sin_idx_y // zp[2]:24 1.714285714285714

zp[1]:19 [ irq_vsync::s#2 irq_vsync::s#1 ]
zp[2]:13 [ irq_vsync::i_x#3 irq_vsync::i_x#0 irq_vsync::i_x#7 irq_vsync::i_x#2 irq_vsync::i_x#1 ]
zp[2]:11 [ irq_vsync::i_y#3 irq_vsync::i_y#0 irq_vsync::i_y#9 irq_vsync::i_y#2 irq_vsync::i_y#1 ]
zp[2]:20 [ irq_vsync::vram_sprite_pos#2 irq_vsync::vram_sprite_pos#1 ]
zp[1]:8 [ main::s#2 main::s#1 ]
zp[2]:9 [ main::vram_sprite_attr#2 main::vram_sprite_attr#1 ]
zp[2]:6 [ memcpy_to_vram::vdest#4 memcpy_to_vram::vdest#3 memcpy_to_vram::vdest#2 ]
reg byte x [ memcpy_to_vram::vbank#4 ]
zp[2]:2 [ memcpy_to_vram::src#4 memcpy_to_vram::s#2 memcpy_to_vram::s#4 memcpy_to_vram::s#1 ]
zp[2]:4 [ memcpy_to_vram::num#4 memcpy_to_vram::end#0 ]
zp[2]:22 [ sin_idx_x ]
zp[2]:24 [ sin_idx_y ]
zp[2]:15 [ irq_vsync::$11 irq_vsync::$13 ]
zp[2]:17 [ irq_vsync::$12 irq_vsync::$14 ]
reg byte a [ memcpy_to_vram::$0 ]
reg byte a [ memcpy_to_vram::$1 ]
reg byte a [ memcpy_to_vram::$2 ]
mem[8] [ SPRITE_ATTR ]
