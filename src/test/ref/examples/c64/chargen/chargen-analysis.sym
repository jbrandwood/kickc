constant byte* const CHARGEN = (byte*) 53248
constant struct MOS6526_CIA* const CIA1 = (struct MOS6526_CIA*) 56320
constant const byte KEY_0 = $23
constant const byte KEY_1 = $38
constant const byte KEY_2 = $3b
constant const byte KEY_3 = 8
constant const byte KEY_4 = $b
constant const byte KEY_5 = $10
constant const byte KEY_6 = $13
constant const byte KEY_7 = $18
constant const byte KEY_8 = $1b
constant const byte KEY_9 = $20
constant const byte KEY_A = $a
constant const byte KEY_ARROW_LEFT = $39
constant const byte KEY_ARROW_UP = $36
constant const byte KEY_ASTERISK = $31
constant const byte KEY_AT = $2e
constant const byte KEY_B = $1c
constant const byte KEY_C = $14
constant const byte KEY_COLON = $2d
constant const byte KEY_COMMA = $2f
constant const byte KEY_D = $12
constant const byte KEY_DOT = $2c
constant const byte KEY_E = $e
constant const byte KEY_EQUALS = $35
constant const byte KEY_F = $15
constant const byte KEY_F1 = 4
constant const byte KEY_F3 = 5
constant const byte KEY_F5 = 6
constant const byte KEY_F7 = 3
constant const byte KEY_G = $1a
constant const byte KEY_H = $1d
constant const byte KEY_I = $21
constant const byte KEY_J = $22
constant const byte KEY_K = $25
constant const byte KEY_L = $2a
constant const byte KEY_LSHIFT = $f
constant const byte KEY_M = $24
constant const byte KEY_MINUS = $2b
constant const byte KEY_N = $27
constant const byte KEY_O = $26
constant const byte KEY_P = $29
constant const byte KEY_PLUS = $28
constant const byte KEY_POUND = $30
constant const byte KEY_Q = $3e
constant const byte KEY_R = $11
constant const byte KEY_S = $d
constant const byte KEY_SEMICOLON = $32
constant const byte KEY_SLASH = $37
constant const byte KEY_SPACE = $3c
constant const byte KEY_T = $16
constant const byte KEY_U = $1e
constant const byte KEY_V = $1f
constant const byte KEY_W = 9
constant const byte KEY_X = $17
constant const byte KEY_Y = $19
constant const byte KEY_Z = $c
constant byte OFFSET_STRUCT_MOS6526_CIA_PORT_B = 1
constant byte* const PROCPORT = (byte*) 1
constant byte* SCREEN = (byte*) 1024
constant const byte* keyboard_char_keycodes[]  = { KEY_AT, KEY_A, KEY_B, KEY_C, KEY_D, KEY_E, KEY_F, KEY_G, KEY_H, KEY_I, KEY_J, KEY_K, KEY_L, KEY_M, KEY_N, KEY_O, KEY_P, KEY_Q, KEY_R, KEY_S, KEY_T, KEY_U, KEY_V, KEY_W, KEY_X, KEY_Y, KEY_Z, $3f, KEY_POUND, $3f, KEY_ARROW_UP, KEY_ARROW_LEFT, KEY_SPACE, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, $3f, KEY_ASTERISK, KEY_PLUS, KEY_COMMA, KEY_MINUS, KEY_DOT, KEY_SLASH, KEY_0, KEY_1, KEY_2, KEY_3, KEY_4, KEY_5, KEY_6, KEY_7, KEY_8, KEY_9, KEY_COLON, KEY_SEMICOLON, $3f, KEY_EQUALS, $3f, $3f }
byte keyboard_get_keycode(byte keyboard_get_keycode::ch)
byte keyboard_get_keycode::ch
byte keyboard_get_keycode::ch#0 reg byte x 1102.0
byte keyboard_get_keycode::return
byte keyboard_get_keycode::return#0 reg byte a 367.33333333333337
byte keyboard_get_keycode::return#2 reg byte a 202.0
byte keyboard_key_pressed(byte keyboard_key_pressed::key)
byte~ keyboard_key_pressed::$2 reg byte a 2002.0
byte keyboard_key_pressed::colidx
byte keyboard_key_pressed::colidx#0 reg byte y 333.6666666666667
byte keyboard_key_pressed::key
byte keyboard_key_pressed::key#5 reg byte x 202.0
byte keyboard_key_pressed::key#6 reg byte x 1051.5
byte keyboard_key_pressed::return
byte keyboard_key_pressed::return#0 reg byte a 144.625
byte keyboard_key_pressed::return#10 reg byte a 22.0
byte keyboard_key_pressed::return#11 reg byte a 22.0
byte keyboard_key_pressed::return#12 reg byte a 22.0
byte keyboard_key_pressed::return#13 reg byte a 22.0
byte keyboard_key_pressed::return#14 reg byte a 202.0
byte keyboard_key_pressed::return#2 reg byte a 22.0
byte keyboard_key_pressed::rowidx
byte keyboard_key_pressed::rowidx#0 reg byte a 2002.0
constant byte* keyboard_matrix_col_bitmask[8]  = { 1, 2, 4, 8, $10, $20, $40, $80 }
byte keyboard_matrix_read(byte keyboard_matrix_read::rowid)
byte keyboard_matrix_read::return
byte keyboard_matrix_read::return#0 reg byte a 3667.333333333333
byte keyboard_matrix_read::return#2 reg byte a 2002.0
byte keyboard_matrix_read::row_pressed_bits
byte keyboard_matrix_read::rowid
byte keyboard_matrix_read::rowid#0 reg byte x 11002.0
constant byte* keyboard_matrix_row_bitmask[8]  = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
void main()
byte~ main::$15 reg byte a 22.0
byte~ main::$18 reg byte a 22.0
byte~ main::$21 reg byte a 22.0
byte~ main::$24 reg byte a 22.0
byte~ main::$27 reg byte a 22.0
byte main::ch
byte main::ch#1 ch zp[1]:7 151.5
byte main::ch#2 ch zp[1]:7 25.25
byte main::cur_pos
byte main::cur_pos#11 cur_pos zp[1]:5 8.52
byte main::cur_pos#18 cur_pos zp[1]:5 3.6666666666666665
byte main::cur_pos#20 cur_pos zp[1]:5 3.6666666666666665
byte main::cur_pos#22 cur_pos zp[1]:5 3.6666666666666665
byte main::cur_pos#24 cur_pos zp[1]:5 18.666666666666664
byte main::i
byte main::i#1 i zp[1]:4 16.5
byte main::i#2 i zp[1]:4 11.0
byte main::key
byte main::key#0 reg byte a 151.5
byte main::pressed
byte main::pressed#1 reg byte a 202.0
byte main::pressed#2 reg byte a 202.0
byte* main::sc
byte* main::sc#1 sc zp[2]:2 22.0
byte* main::sc#2 sc zp[2]:2 14.666666666666666
byte main::shift
byte main::shift#9 shift zp[1]:6 5.315789473684211
constant byte* main::str[3]  = "f1"
constant byte* main::str1[3]  = "f3"
constant byte* main::str2[3]  = "f5"
constant byte* main::str3[3]  = "f7"
void plot_chargen(byte plot_chargen::pos , byte plot_chargen::ch , byte plot_chargen::shift)
word~ plot_chargen::$0 zp[2]:8 2002.0
word~ plot_chargen::$15 zp[2]:8 2002.0
byte~ plot_chargen::$16 reg byte a 2002.0
byte~ plot_chargen::$17 reg byte a 2002.0
byte~ plot_chargen::$5 reg byte a 2002.0
byte~ plot_chargen::$8 reg byte a 2.0000002E7
byte plot_chargen::bits
byte plot_chargen::bits#0 bits zp[1]:11 2000002.0
byte plot_chargen::bits#1 bits zp[1]:11 6666667.333333333
byte plot_chargen::bits#2 bits zp[1]:11 4428572.0
byte plot_chargen::c
byte plot_chargen::c#2 reg byte a 1.0000001E7
byte plot_chargen::ch
byte plot_chargen::ch#1 reg byte a 101.0
byte plot_chargen::ch#2 reg byte a 50.5
byte* plot_chargen::chargen
byte* plot_chargen::chargen#0 chargen zp[2]:8 1501.5
byte* plot_chargen::chargen#1 chargen zp[2]:8 2002.0
byte* plot_chargen::chargen#4 chargen zp[2]:8 47714.42857142857
byte plot_chargen::pos
byte plot_chargen::pos#0 reg byte y 22.0
byte plot_chargen::pos#1 reg byte y 67.33333333333333
byte plot_chargen::pos#2 reg byte y 211.39999999999998
byte* plot_chargen::sc
byte* plot_chargen::sc#0 sc zp[2]:12 2002.0
byte* plot_chargen::sc#1 sc zp[2]:12 5250000.75
byte* plot_chargen::sc#2 sc zp[2]:12 666667.3333333334
byte* plot_chargen::sc#3 sc zp[2]:12 5166667.333333333
byte* plot_chargen::sc#7 sc zp[2]:12 1000501.5
byte plot_chargen::shift
byte plot_chargen::shift#1 reg byte x 202.0
byte plot_chargen::shift#2 reg byte x 220.39999999999998
byte plot_chargen::x
byte plot_chargen::x#1 reg byte x 1.50000015E7
byte plot_chargen::x#2 reg byte x 2500000.25
byte plot_chargen::y
byte plot_chargen::y#1 y zp[1]:10 1500001.5
byte plot_chargen::y#2 y zp[1]:10 230769.46153846153
void print_str_at(byte* print_str_at::str , byte* print_str_at::at)
byte* print_str_at::at
byte* print_str_at::at#4 at zp[2]:12 101.0
byte* print_str_at::at#5 at zp[2]:12 104.66666666666666
byte* print_str_at::at#7 at zp[2]:12 11.0
byte* print_str_at::str
byte* print_str_at::str#4 str zp[2]:8 202.0
byte* print_str_at::str#5 str zp[2]:8 103.75
byte* print_str_at::str#7 str zp[2]:8 11.0

zp[2]:2 [ main::sc#2 main::sc#1 ]
zp[1]:4 [ main::i#2 main::i#1 ]
zp[1]:5 [ main::cur_pos#18 main::cur_pos#20 main::cur_pos#22 main::cur_pos#24 main::cur_pos#11 ]
zp[1]:6 [ main::shift#9 ]
zp[1]:7 [ main::ch#2 main::ch#1 ]
reg byte a [ main::pressed#2 main::pressed#1 ]
reg byte a [ plot_chargen::ch#2 plot_chargen::ch#1 ]
reg byte x [ plot_chargen::shift#2 plot_chargen::shift#1 ]
reg byte y [ plot_chargen::pos#2 plot_chargen::pos#1 plot_chargen::pos#0 ]
zp[2]:8 [ plot_chargen::chargen#4 plot_chargen::chargen#0 plot_chargen::chargen#1 plot_chargen::$0 plot_chargen::$15 print_str_at::str#5 print_str_at::str#7 print_str_at::str#4 ]
zp[1]:10 [ plot_chargen::y#2 plot_chargen::y#1 ]
zp[1]:11 [ plot_chargen::bits#2 plot_chargen::bits#0 plot_chargen::bits#1 ]
zp[2]:12 [ plot_chargen::sc#3 plot_chargen::sc#7 plot_chargen::sc#0 plot_chargen::sc#2 plot_chargen::sc#1 print_str_at::at#5 print_str_at::at#7 print_str_at::at#4 ]
reg byte x [ plot_chargen::x#2 plot_chargen::x#1 ]
reg byte a [ plot_chargen::c#2 ]
reg byte x [ keyboard_key_pressed::key#6 keyboard_key_pressed::key#5 ]
reg byte a [ keyboard_key_pressed::return#2 ]
reg byte a [ main::$15 ]
reg byte a [ keyboard_key_pressed::return#10 ]
reg byte a [ main::$18 ]
reg byte a [ keyboard_key_pressed::return#11 ]
reg byte a [ main::$21 ]
reg byte a [ keyboard_key_pressed::return#12 ]
reg byte a [ main::$24 ]
reg byte a [ keyboard_key_pressed::return#13 ]
reg byte a [ main::$27 ]
reg byte x [ keyboard_get_keycode::ch#0 ]
reg byte a [ keyboard_get_keycode::return#2 ]
reg byte a [ main::key#0 ]
reg byte a [ keyboard_key_pressed::return#14 ]
reg byte a [ plot_chargen::$16 ]
reg byte a [ plot_chargen::$17 ]
reg byte a [ plot_chargen::$5 ]
reg byte a [ plot_chargen::$8 ]
reg byte y [ keyboard_key_pressed::colidx#0 ]
reg byte a [ keyboard_key_pressed::rowidx#0 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_key_pressed::$2 ]
reg byte a [ keyboard_key_pressed::return#0 ]
reg byte a [ keyboard_get_keycode::return#0 ]
reg byte a [ keyboard_matrix_read::return#0 ]
