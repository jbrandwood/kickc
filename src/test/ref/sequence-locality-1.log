
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::idx#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::idx#3 = phi( main/main::idx#0, main::@2/main::idx#1 )
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::j#0 = main::i#2
  main::$0 = main::i#2 > 5
  main::$1 = ! main::$0
  if(main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  main::i#3 = phi( main::@1/main::i#2, main::@3/main::i#4 )
  main::idx#2 = phi( main::@1/main::idx#3, main::@3/main::idx#4 )
  main::j#2 = phi( main::@1/main::j#0, main::@3/main::j#1 )
  main::screen[main::idx#2] = main::j#2
  main::idx#1 = ++ main::idx#2
  main::i#1 = main::i#3 + rangenext(0,$a)
  main::$2 = main::i#1 != rangelast(0,$a)
  if(main::$2) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  main::idx#4 = phi( main::@1/main::idx#3 )
  main::i#4 = phi( main::@1/main::i#2 )
  main::j#3 = phi( main::@1/main::j#0 )
  main::j#1 = main::j#3 + main::i#4
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
bool main::$0
bool main::$1
bool main::$2
char main::i
char main::i#0
char main::i#1
char main::i#2
char main::i#3
char main::i#4
char main::idx
char main::idx#0
char main::idx#1
char main::idx#2
char main::idx#3
char main::idx#4
char main::j
char main::j#0
char main::j#1
char main::j#2
char main::j#3
__constant char * const main::screen = (char *)$400

Adding number conversion cast (unumber) 5 in main::$0 = main::i#2 > 5
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (char *) 1024
Simplifying constant integer cast 5
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 5
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [5] main::$1 = main::i#2 <= 5 from [4] main::$0 = main::i#2 > 5
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::j#0 = main::i#2 main::j#3 main::i#4 
Alias main::idx#3 = main::idx#4 
Successful SSA optimization Pass2AliasElimination
Alias main::idx#2 = main::idx#3 
Alias main::i#3 = main::j#0 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$1 [4] if(main::i#3<=5) goto main::@2
Simple Condition main::$2 [10] if(main::i#1!=rangelast(0,$a)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::idx#0 = 0
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [8] main::i#1 = ++ main::i#3 to ++
Resolved ranged comparison value [10] if(main::i#1!=rangelast(0,$a)) goto main::@1 to $b
Rewriting conditional comparison [4] if(main::i#3<=5) goto main::@2
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 5+1 in [1] if(main::i#3<5+1) goto main::@2
Adding number conversion cast (unumber) 1 in [1] if(main::i#3<(unumber)5+1) goto main::@2
Adding number conversion cast (unumber) $b in [6] if(main::i#1!=$b) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 5+(unumber)1
Simplifying constant integer cast 1
Simplifying constant integer cast $b
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 1
Finalized unsigned number type (char) $b
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::idx#0
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Constant inlined main::idx#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@4(between main::@2 and main::@1)
Added new block during phi lifting main::@5(between main::@1 and main::@2)
Adding NOP phi() at start of main
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [4] main::j#5 = main::j#1
Coalesced [11] main::i#5 = main::i#1
Coalesced [12] main::idx#5 = main::idx#1
Not coalescing [13] main::j#4 = main::i#3
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@4
Renumbering block main::@5 to main::@4
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::idx#2 = phi( main/0, main::@2/main::idx#1 )
  [1] main::i#3 = phi( main/0, main::@2/main::i#1 )
  [2] if(main::i#3<5+1) goto main::@4
  to:main::@3
main::@3: scope:[main]  from main::@1
  [3] main::j#1 = main::i#3 + main::i#3
  to:main::@2
main::@2: scope:[main]  from main::@3 main::@4
  [4] main::j#2 = phi( main::@4/main::j#4, main::@3/main::j#1 )
  [5] main::screen[main::idx#2] = main::j#2
  [6] main::idx#1 = ++ main::idx#2
  [7] main::i#1 = ++ main::i#3
  [8] if(main::i#1!=$b) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [9] return 
  to:@return
main::@4: scope:[main]  from main::@1
  [10] main::j#4 = main::i#3
  to:main::@2


VARIABLE REGISTER WEIGHTS
void main()
char main::i
char main::i#1 // 16.5
char main::i#3 // 9.428571428571429
char main::idx
char main::idx#1 // 7.333333333333333
char main::idx#2 // 5.5
char main::j
char main::j#1 // 22.0
char main::j#2 // 33.0
char main::j#4 // 22.0

Initial phi equivalence classes
[ main::i#3 main::i#1 ]
[ main::idx#2 main::idx#1 ]
[ main::j#2 main::j#4 main::j#1 ]
Complete equivalence classes
[ main::i#3 main::i#1 ]
[ main::idx#2 main::idx#1 ]
[ main::j#2 main::j#4 main::j#1 ]
Allocated zp[1]:2 [ main::i#3 main::i#1 ]
Allocated zp[1]:3 [ main::idx#2 main::idx#1 ]
Allocated zp[1]:4 [ main::j#2 main::j#4 main::j#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [3] main::j#1 = main::i#3 + main::i#3 [ main::i#3 main::idx#2 main::j#1 ] (  [ main::i#3 main::idx#2 main::j#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#3 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:3 [ main::idx#2 main::idx#1 ]
Statement [3] main::j#1 = main::i#3 + main::i#3 [ main::i#3 main::idx#2 main::j#1 ] (  [ main::i#3 main::idx#2 main::j#1 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#3 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ main::idx#2 main::idx#1 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ main::j#2 main::j#4 main::j#1 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 77: zp[1]:4 [ main::j#2 main::j#4 main::j#1 ] 25.93: zp[1]:2 [ main::i#3 main::i#1 ] 12.83: zp[1]:3 [ main::idx#2 main::idx#1 ] 
Uplift Scope [] 

Uplifting [main] best 466 combination reg byte a [ main::j#2 main::j#4 main::j#1 ] reg byte y [ main::i#3 main::i#1 ] reg byte x [ main::idx#2 main::idx#1 ] 
Uplifting [] best 466 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Tests statement sequence locality of if(cond) { stmt1; } else { stmt2; }
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sequence-locality-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::idx#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#3 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::idx#2 = main::idx#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#3 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [2] if(main::i#3<5+1) goto main::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #5+1
    bcc __b4
    jmp __b3
    // main::@3
  __b3:
    // [3] main::j#1 = main::i#3 + main::i#3 -- vbuaa=vbuyy_plus_vbuyy 
    tya
    asl
    // [4] phi from main::@3 main::@4 to main::@2 [phi:main::@3/main::@4->main::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [4] phi main::j#2 = main::j#1 [phi:main::@3/main::@4->main::@2#0] -- register_copy 
    jmp __b2
    // main::@2
  __b2:
    // [5] main::screen[main::idx#2] = main::j#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta screen,x
    // [6] main::idx#1 = ++ main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [7] main::i#1 = ++ main::i#3 -- vbuyy=_inc_vbuyy 
    iny
    // [8] if(main::i#1!=$b) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [9] return 
    rts
    // main::@4
  __b4:
    // [10] main::j#4 = main::i#3 -- vbuaa=vbuyy 
    tya
    jmp __b2_from___b4
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __b3:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
char main::i
char main::i#1 // reg byte y 16.5
char main::i#3 // reg byte y 9.428571428571429
char main::idx
char main::idx#1 // reg byte x 7.333333333333333
char main::idx#2 // reg byte x 5.5
char main::j
char main::j#1 // reg byte a 22.0
char main::j#2 // reg byte a 33.0
char main::j#4 // reg byte a 22.0
__constant char * const main::screen = (char *) 1024

reg byte y [ main::i#3 main::i#1 ]
reg byte x [ main::idx#2 main::idx#1 ]
reg byte a [ main::j#2 main::j#4 main::j#1 ]


FINAL ASSEMBLER
Score: 316

  // File Comments
// Tests statement sequence locality of if(cond) { stmt1; } else { stmt2; }
  // Upstart
  // Commodore 64 PRG executable file
.file [name="sequence-locality-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    .label screen = $400
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::idx#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi main::i#3 = 0 [phi:main->main::@1#1] -- vbuyy=vbuc1 
    ldy #0
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::idx#2 = main::idx#1 [phi:main::@2->main::@1#0] -- register_copy 
    // [1] phi main::i#3 = main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    // main::@1
  __b1:
    // if(i>5)
    // [2] if(main::i#3<5+1) goto main::@4 -- vbuyy_lt_vbuc1_then_la1 
    cpy #5+1
    bcc __b4
    // main::@3
    // j += i
    // [3] main::j#1 = main::i#3 + main::i#3 -- vbuaa=vbuyy_plus_vbuyy 
    tya
    asl
    // [4] phi from main::@3 main::@4 to main::@2 [phi:main::@3/main::@4->main::@2]
    // [4] phi main::j#2 = main::j#1 [phi:main::@3/main::@4->main::@2#0] -- register_copy 
    // main::@2
  __b2:
    // screen[idx++] = j
    // [5] main::screen[main::idx#2] = main::j#2 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta screen,x
    // screen[idx++] = j;
    // [6] main::idx#1 = ++ main::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // for(byte i: 0..10)
    // [7] main::i#1 = ++ main::i#3 -- vbuyy=_inc_vbuyy 
    iny
    // [8] if(main::i#1!=$b) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #$b
    bne __b1
    // main::@return
    // }
    // [9] return 
    rts
    // main::@4
  __b4:
    // [10] main::j#4 = main::i#3 -- vbuaa=vbuyy 
    tya
    jmp __b2
}
  // File Data

