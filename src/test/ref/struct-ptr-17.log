Inlined call call __init 
Eliminating unused variable with no statement main::$0
Eliminating unused variable with no statement main::$1
Unwinding list assignment { main::$0_x, main::$0_y } = { get::return_x, get::return_y }
Unwinding list assignment { main::$1_x, main::$1_y } = { get::return_x, get::return_y }
Unwinding list assignment { get::return_x#0, get::return_y#0 } = { get::return_x#3, get::return_y#3 }
Unwinding list assignment { get::return_x#1, get::return_y#1 } = { get::return_x#3, get::return_y#3 }

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  get::i#0 = 0
  call get 
  get::return_x#0 = get::return_x#3
  get::return_y#0 = get::return_y#3
  to:main::@2
main::@2: scope:[main]  from main
  get::return_y#4 = phi( main/get::return_y#0 )
  get::return_x#4 = phi( main/get::return_x#0 )
  main::$0_x = get::return_x#4
  main::$0_y = get::return_y#4
  *((byte*)SCREEN+OFFSET_STRUCT_POINT_X) = main::$0_x
  *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = main::$0_y
  main::i#0 = 1
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@3
  main::i#2 = phi( main::@2/main::i#0, main::@3/main::i#1 )
  get::i#1 = main::i#2
  call get 
  get::return_x#1 = get::return_x#3
  get::return_y#1 = get::return_y#3
  to:main::@3
main::@3: scope:[main]  from main::@1
  main::i#3 = phi( main::@1/main::i#2 )
  get::return_y#5 = phi( main::@1/get::return_y#1 )
  get::return_x#5 = phi( main::@1/get::return_x#1 )
  main::$1_x = get::return_x#5
  main::$1_y = get::return_y#5
  main::$3 = main::i#3 * SIZEOF_STRUCT_POINT
  ((byte*)SCREEN+OFFSET_STRUCT_POINT_X)[main::$3] = main::$1_x
  ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = main::$1_y
  main::i#1 = main::i#3 + rangenext(1,2)
  main::$2 = main::i#1 != rangelast(1,2)
  if(main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return

struct Point get(byte get::i)
get: scope:[get]  from main main::@1
  get::i#2 = phi( main/get::i#0, main::@1/get::i#1 )
  get::p_x#0 = get::i#2
  get::return_x#2 = get::p_x#0
  get::return_y#2 = get::p_y
  get::return#0 = struct-unwound {get::return_x#2, get::return_y#2}
  to:get::@return
get::@return: scope:[get]  from get
  get::return_y#6 = phi( get/get::return_y#2 )
  get::return_x#6 = phi( get/get::return_x#2 )
  get::return_x#3 = get::return_x#6
  get::return_y#3 = get::return_y#6
  get::return#1 = struct-unwound {get::return_x#3, get::return_y#3}
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
const nomodify struct Point* SCREEN = (struct Point*)$400
const byte SIZEOF_STRUCT_POINT = 2
void __start()
struct Point get(byte get::i)
byte get::i
byte get::i#0
byte get::i#1
byte get::i#2
byte get::p_x
byte get::p_x#0
const byte get::p_y = 7
struct Point get::return
struct Point get::return#0
struct Point get::return#1
byte get::return_x
byte get::return_x#0
byte get::return_x#1
byte get::return_x#2
byte get::return_x#3
byte get::return_x#4
byte get::return_x#5
byte get::return_x#6
byte get::return_y
byte get::return_y#0
byte get::return_y#1
byte get::return_y#2
byte get::return_y#3
byte get::return_y#4
byte get::return_y#5
byte get::return_y#6
void main()
byte~ main::$0_x
byte~ main::$0_y
byte~ main::$1_x
byte~ main::$1_y
bool~ main::$2
byte~ main::$3
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3

Adding number conversion cast (unumber) 0 in get::i#0 = 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast get::i#0 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct Point*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias get::return_x#0 = get::return_x#4 
Alias get::return_y#0 = get::return_y#4 
Alias get::return_x#1 = get::return_x#5 
Alias get::return_y#1 = get::return_y#5 
Alias main::i#2 = main::i#3 
Alias get::return_x#2 = get::p_x#0 get::i#2 get::return_x#6 get::return_x#3 
Alias get::return_y#2 = get::return_y#6 get::return_y#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$2 [21] if(main::i#1!=rangelast(1,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant get::i#0 = 0
Constant main::i#0 = 1
Constant get::return_y#2 = get::p_y
Successful SSA optimization Pass2ConstantIdentification
Constant get::return_y#0 = get::return_y#2
Constant get::return_y#1 = get::return_y#2
Successful SSA optimization Pass2ConstantIdentification
Constant main::$0_y = get::return_y#0
Constant main::$1_y = get::return_y#1
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [19] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [21] if(main::i#1!=rangelast(1,2)) goto main::@1 to 3
Simplifying expression containing zero (byte*)SCREEN in [6] *((byte*)SCREEN+OFFSET_STRUCT_POINT_X) = main::$0_x
Simplifying expression containing zero (byte*)SCREEN in [17] ((byte*)SCREEN+OFFSET_STRUCT_POINT_X)[main::$3] = main::$1_x
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable get::return#0 and assignment [17] get::return#0 = struct-unwound {get::return_x#2, get::return_y#2}
Eliminating unused variable get::return#1 and assignment [18] get::return#1 = struct-unwound {get::return_x#2, get::return_y#2}
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 3 in [14] if(main::i#1!=3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Rewriting multiplication to use shift [10] main::$3 = main::i#2 * SIZEOF_STRUCT_POINT
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings main::i#0
Inlining constant with var siblings get::i#0
Constant inlined main::$1_y = get::p_y
Constant inlined main::$0_y = get::p_y
Constant inlined main::i#0 = 1
Constant inlined get::return_y#0 = get::p_y
Constant inlined get::i#0 = 0
Constant inlined get::return_y#1 = get::p_y
Constant inlined get::return_y#2 = get::p_y
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant SIZEOF_STRUCT_POINT
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@4(between main::@3 and main::@1)
Adding NOP phi() at start of main
CALL GRAPH
Calls in [main] to get:1 get:9 

Created 2 initial phi equivalence classes
Coalesced [8] get::return_x#7 = get::i#1
Coalesced [18] main::i#4 = main::i#1
Coalesced down to 2 phi equivalence classes
Culled Empty Block label main::@4
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  [1] call get 
  [2] get::return_x#0 = get::return_x#2
  to:main::@2
main::@2: scope:[main]  from main
  [3] main::$0_x = get::return_x#0
  [4] *((byte*)SCREEN) = main::$0_x
  [5] *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = get::p_y
  to:main::@1
main::@1: scope:[main]  from main::@2 main::@3
  [6] main::i#2 = phi( main::@2/1, main::@3/main::i#1 )
  [7] get::i#1 = main::i#2
  [8] call get 
  [9] get::return_x#1 = get::return_x#2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [10] main::$1_x = get::return_x#1
  [11] main::$3 = main::i#2 << 1
  [12] ((byte*)SCREEN)[main::$3] = main::$1_x
  [13] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = get::p_y
  [14] main::i#1 = ++ main::i#2
  [15] if(main::i#1!=3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@3
  [16] return 
  to:@return

struct Point get(byte get::i)
get: scope:[get]  from main main::@1
  [17] get::return_x#2 = phi( main/0, main::@1/get::i#1 )
  to:get::@return
get::@return: scope:[get]  from get
  [18] return 
  to:@return


VARIABLE REGISTER WEIGHTS
struct Point get(byte get::i)
byte get::i
byte get::i#1 22.0
byte get::p_x
struct Point get::return
byte get::return_x
byte get::return_x#0 4.0
byte get::return_x#1 22.0
byte get::return_x#2 6.0
byte get::return_y
void main()
byte~ main::$0_x 4.0
byte~ main::$1_x 11.0
byte~ main::$3 16.5
byte main::i
byte main::i#1 16.5
byte main::i#2 5.5

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ get::return_x#2 get::i#1 ]
Added variable get::return_x#0 to live range equivalence class [ get::return_x#0 ]
Added variable main::$0_x to live range equivalence class [ main::$0_x ]
Added variable get::return_x#1 to live range equivalence class [ get::return_x#1 ]
Added variable main::$1_x to live range equivalence class [ main::$1_x ]
Added variable main::$3 to live range equivalence class [ main::$3 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ get::return_x#2 get::i#1 ]
[ get::return_x#0 ]
[ main::$0_x ]
[ get::return_x#1 ]
[ main::$1_x ]
[ main::$3 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
Allocated zp[1]:3 [ get::return_x#2 get::i#1 ]
Allocated zp[1]:4 [ get::return_x#0 ]
Allocated zp[1]:5 [ main::$0_x ]
Allocated zp[1]:6 [ get::return_x#1 ]
Allocated zp[1]:7 [ main::$1_x ]
Allocated zp[1]:8 [ main::$3 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [5] *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = get::p_y [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] main::$3 = main::i#2 << 1 [ main::i#2 main::$1_x main::$3 ] (  [ main::i#2 main::$1_x main::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:7 [ main::$1_x ]
Statement [12] ((byte*)SCREEN)[main::$3] = main::$1_x [ main::i#2 main::$3 ] (  [ main::i#2 main::$3 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:8 [ main::$3 ]
Statement [13] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = get::p_y [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Statement [5] *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = get::p_y [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [11] main::$3 = main::i#2 << 1 [ main::i#2 main::$1_x main::$3 ] (  [ main::i#2 main::$1_x main::$3 ] { }  ) always clobbers reg byte a 
Statement [12] ((byte*)SCREEN)[main::$3] = main::$1_x [ main::i#2 main::$3 ] (  [ main::i#2 main::$3 ] { }  ) always clobbers reg byte a 
Statement [13] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = get::p_y [ main::i#2 ] (  [ main::i#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ get::return_x#2 get::i#1 ] : zp[1]:3 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ get::return_x#0 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ main::$0_x ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:6 [ get::return_x#1 ] : zp[1]:6 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:7 [ main::$1_x ] : zp[1]:7 , reg byte x , reg byte y , 
Potential registers zp[1]:8 [ main::$3 ] : zp[1]:8 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [get] 28: zp[1]:3 [ get::return_x#2 get::i#1 ] 22: zp[1]:6 [ get::return_x#1 ] 4: zp[1]:4 [ get::return_x#0 ] 
Uplift Scope [main] 22: zp[1]:2 [ main::i#2 main::i#1 ] 16.5: zp[1]:8 [ main::$3 ] 11: zp[1]:7 [ main::$1_x ] 4: zp[1]:5 [ main::$0_x ] 
Uplift Scope [Point] 
Uplift Scope [] 

Uplifting [get] best 720 combination reg byte a [ get::return_x#2 get::i#1 ] reg byte a [ get::return_x#1 ] reg byte a [ get::return_x#0 ] 
Uplifting [main] best 534 combination reg byte y [ main::i#2 main::i#1 ] reg byte x [ main::$3 ] zp[1]:7 [ main::$1_x ] reg byte a [ main::$0_x ] 
Limited combination testing to 100 combinations of 108 possible.
Uplifting [Point] best 534 combination 
Uplifting [] best 534 combination 
Attempting to uplift remaining variables inzp[1]:7 [ main::$1_x ]
Uplifting [main] best 534 combination zp[1]:7 [ main::$1_x ] 
Allocated (was zp[1]:7) zp[1]:2 [ main::$1_x ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates problem with returning a struct into a dereferenced pointer to a struct
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-17.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label __1_x = 2
    // [1] call get 
    // [17] phi from main to get [phi:main->get]
  get_from_main:
    // [17] phi get::return_x#2 = 0 [phi:main->get#0] -- vbuaa=vbuc1 
    lda #0
    jsr get
    // [2] get::return_x#0 = get::return_x#2
    jmp __b2
    // main::@2
  __b2:
    // [3] main::$0_x = get::return_x#0
    // [4] *((byte*)SCREEN) = main::$0_x -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [5] *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = get::p_y -- _deref_pbuc1=vbuc2 
    lda #get.p_y
    sta SCREEN+OFFSET_STRUCT_POINT_Y
    // [6] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [6] phi main::i#2 = 1 [phi:main::@2->main::@1#0] -- vbuyy=vbuc1 
    ldy #1
    jmp __b1
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [6] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] get::i#1 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [8] call get 
    // [17] phi from main::@1 to get [phi:main::@1->get]
  get_from___b1:
    // [17] phi get::return_x#2 = get::i#1 [phi:main::@1->get#0] -- register_copy 
    jsr get
    // [9] get::return_x#1 = get::return_x#2
    jmp __b3
    // main::@3
  __b3:
    // [10] main::$1_x = get::return_x#1 -- vbuz1=vbuaa 
    sta.z __1_x
    // [11] main::$3 = main::i#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [12] ((byte*)SCREEN)[main::$3] = main::$1_x -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z __1_x
    sta SCREEN,x
    // [13] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = get::p_y -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #get.p_y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,x
    // [14] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [15] if(main::i#1!=3) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #3
    bne __b1_from___b3
    jmp __breturn
    // main::@return
  __breturn:
    // [16] return 
    rts
}
  // get
// get(byte register(A) i)
get: {
    .label p_y = 7
    jmp __breturn
    // get::@return
  __breturn:
    // [18] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b3 with __b1
Removing instruction __b1_from___b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction get_from_main:
Removing instruction __b2:
Removing instruction __b1_from___b2:
Removing instruction get_from___b1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_POINT_Y = 1
const nomodify struct Point* SCREEN = (struct Point*) 1024
struct Point get(byte get::i)
byte get::i
byte get::i#1 reg byte a 22.0
byte get::p_x
const byte get::p_y = 7
struct Point get::return
byte get::return_x
byte get::return_x#0 reg byte a 4.0
byte get::return_x#1 reg byte a 22.0
byte get::return_x#2 reg byte a 6.0
byte get::return_y
void main()
byte~ main::$0_x reg byte a 4.0
byte~ main::$1_x zp[1]:2 11.0
byte~ main::$3 reg byte x 16.5
byte main::i
byte main::i#1 reg byte y 16.5
byte main::i#2 reg byte y 5.5

reg byte y [ main::i#2 main::i#1 ]
reg byte a [ get::return_x#2 get::i#1 ]
reg byte a [ get::return_x#0 ]
reg byte a [ main::$0_x ]
reg byte a [ get::return_x#1 ]
zp[1]:2 [ main::$1_x ]
reg byte x [ main::$3 ]


FINAL ASSEMBLER
Score: 381

  // File Comments
// Demonstrates problem with returning a struct into a dereferenced pointer to a struct
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-17.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const OFFSET_STRUCT_POINT_Y = 1
  .label SCREEN = $400
.segment Code
  // main
main: {
    .label __1_x = 2
    // get(0)
    // [1] call get 
    // [17] phi from main to get [phi:main->get]
    // [17] phi get::return_x#2 = 0 [phi:main->get#0] -- vbuaa=vbuc1 
    lda #0
    jsr get
    // get(0)
    // [2] get::return_x#0 = get::return_x#2
    // main::@2
    // [3] main::$0_x = get::return_x#0
    // *SCREEN = get(0)
    // [4] *((byte*)SCREEN) = main::$0_x -- _deref_pbuc1=vbuaa 
    sta SCREEN
    // [5] *((byte*)SCREEN+OFFSET_STRUCT_POINT_Y) = get::p_y -- _deref_pbuc1=vbuc2 
    lda #get.p_y
    sta SCREEN+OFFSET_STRUCT_POINT_Y
    // [6] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [6] phi main::i#2 = 1 [phi:main::@2->main::@1#0] -- vbuyy=vbuc1 
    ldy #1
    // [6] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [6] phi main::i#2 = main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    // main::@1
  __b1:
    // get(i)
    // [7] get::i#1 = main::i#2 -- vbuaa=vbuyy 
    tya
    // [8] call get 
    // [17] phi from main::@1 to get [phi:main::@1->get]
    // [17] phi get::return_x#2 = get::i#1 [phi:main::@1->get#0] -- register_copy 
    jsr get
    // get(i)
    // [9] get::return_x#1 = get::return_x#2
    // main::@3
    // [10] main::$1_x = get::return_x#1 -- vbuz1=vbuaa 
    sta.z __1_x
    // SCREEN[i] = get(i)
    // [11] main::$3 = main::i#2 << 1 -- vbuxx=vbuyy_rol_1 
    tya
    asl
    tax
    // [12] ((byte*)SCREEN)[main::$3] = main::$1_x -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z __1_x
    sta SCREEN,x
    // [13] ((byte*)SCREEN+OFFSET_STRUCT_POINT_Y)[main::$3] = get::p_y -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #get.p_y
    sta SCREEN+OFFSET_STRUCT_POINT_Y,x
    // for ( char i: 1..2)
    // [14] main::i#1 = ++ main::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [15] if(main::i#1!=3) goto main::@1 -- vbuyy_neq_vbuc1_then_la1 
    cpy #3
    bne __b1
    // main::@return
    // }
    // [16] return 
    rts
}
  // get
// get(byte register(A) i)
get: {
    .label p_y = 7
    // get::@return
    // [18] return 
    rts
}
  // File Data

