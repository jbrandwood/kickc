
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::$1 = 0 * SIZEOF_STRUCT_CIRCLE
  main::$7 = (struct Point*)circles + main::$1
  main::$21 = (byte*)main::$7
  main::$8 = main::$21 + OFFSET_STRUCT_POINT_X
  main::$8[OFFSET_STRUCT_CIRCLE_CENTER] = 2
  main::$2 = 0 * SIZEOF_STRUCT_CIRCLE
  main::$9 = (struct Point*)circles + main::$2
  main::$22 = (byte*)main::$9
  main::$10 = main::$22 + OFFSET_STRUCT_POINT_Y
  main::$10[OFFSET_STRUCT_CIRCLE_CENTER] = 3
  main::$3 = 0 * SIZEOF_STRUCT_CIRCLE
  main::$11 = (byte*)circles + main::$3
  main::$11[OFFSET_STRUCT_CIRCLE_RADIUS] = 5
  main::$4 = 1 * SIZEOF_STRUCT_CIRCLE
  main::$12 = (struct Point*)circles + main::$4
  main::$23 = (byte*)main::$12
  main::$13 = main::$23 + OFFSET_STRUCT_POINT_X
  main::$13[OFFSET_STRUCT_CIRCLE_CENTER] = 8
  main::$5 = 1 * SIZEOF_STRUCT_CIRCLE
  main::$14 = (struct Point*)circles + main::$5
  main::$24 = (byte*)main::$14
  main::$15 = main::$24 + OFFSET_STRUCT_POINT_Y
  main::$15[OFFSET_STRUCT_CIRCLE_CENTER] = 9
  main::$6 = 1 * SIZEOF_STRUCT_CIRCLE
  main::$16 = (byte*)circles + main::$6
  main::$16[OFFSET_STRUCT_CIRCLE_RADIUS] = $f
  main::idx#0 = 0
  main::ptr#0 = circles
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  main::i#2 = phi( main/main::i#0, main::@1/main::i#1 )
  main::idx#3 = phi( main/main::idx#0, main::@1/main::idx#2 )
  main::ptr#2 = phi( main/main::ptr#0, main::@1/main::ptr#1 )
  main::$25 = (struct Point*)main::ptr#2
  main::$17 = main::$25 + OFFSET_STRUCT_CIRCLE_CENTER
  main::$26 = (byte*)main::$17
  main::$18 = main::$26 + OFFSET_STRUCT_POINT_X
  main::x#0 = *main::$18
  main::$27 = (struct Point*)main::ptr#2
  main::$19 = main::$27 + OFFSET_STRUCT_CIRCLE_CENTER
  main::$28 = (byte*)main::$19
  main::$20 = main::$28 + OFFSET_STRUCT_POINT_Y
  main::y#0 = *main::$20
  main::SCREEN[main::idx#3] = main::x#0
  main::idx#1 = ++ main::idx#3
  main::SCREEN[main::idx#1] = main::y#0
  main::idx#2 = ++ main::idx#1
  main::ptr#1 = main::ptr#2 + SIZEOF_STRUCT_CIRCLE
  main::i#1 = main::i#2 + rangenext(0,1)
  main::$0 = main::i#1 != rangelast(0,1)
  if(main::$0) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
const byte OFFSET_STRUCT_CIRCLE_CENTER = 1
const byte OFFSET_STRUCT_CIRCLE_RADIUS = 0
const byte OFFSET_STRUCT_POINT_X = 0
const byte OFFSET_STRUCT_POINT_Y = 1
const byte SIZEOF_STRUCT_CIRCLE = 3
void __start()
const struct Circle* circles[2]  = { fill( 2, 0) }
void main()
bool~ main::$0
number~ main::$1
byte*~ main::$10
byte*~ main::$11
struct Point*~ main::$12
byte*~ main::$13
struct Point*~ main::$14
byte*~ main::$15
byte*~ main::$16
struct Point*~ main::$17
byte*~ main::$18
struct Point*~ main::$19
number~ main::$2
byte*~ main::$20
byte*~ main::$21
byte*~ main::$22
byte*~ main::$23
byte*~ main::$24
struct Point*~ main::$25
byte*~ main::$26
struct Point*~ main::$27
byte*~ main::$28
number~ main::$3
number~ main::$4
number~ main::$5
number~ main::$6
struct Point*~ main::$7
byte*~ main::$8
struct Point*~ main::$9
const nomodify byte* main::SCREEN = (byte*)$400
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::idx
byte main::idx#0
byte main::idx#1
byte main::idx#2
byte main::idx#3
struct Circle* main::ptr
struct Circle* main::ptr#0
struct Circle* main::ptr#1
struct Circle* main::ptr#2
byte main::x
byte main::x#0
byte main::y
byte main::y#0

Adding number conversion cast (unumber) 0 in main::$1 = 0 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$1 in main::$1 = (unumber)0 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 2 in main::$8[OFFSET_STRUCT_CIRCLE_CENTER] = 2
Adding number conversion cast (unumber) 0 in main::$2 = 0 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$2 in main::$2 = (unumber)0 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 3 in main::$10[OFFSET_STRUCT_CIRCLE_CENTER] = 3
Adding number conversion cast (unumber) 0 in main::$3 = 0 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$3 in main::$3 = (unumber)0 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 5 in main::$11[OFFSET_STRUCT_CIRCLE_RADIUS] = 5
Adding number conversion cast (unumber) 1 in main::$4 = 1 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$4 in main::$4 = (unumber)1 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 8 in main::$13[OFFSET_STRUCT_CIRCLE_CENTER] = 8
Adding number conversion cast (unumber) 1 in main::$5 = 1 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$5 in main::$5 = (unumber)1 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) 9 in main::$15[OFFSET_STRUCT_CIRCLE_CENTER] = 9
Adding number conversion cast (unumber) 1 in main::$6 = 1 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) main::$6 in main::$6 = (unumber)1 * SIZEOF_STRUCT_CIRCLE
Adding number conversion cast (unumber) $f in main::$16[OFFSET_STRUCT_CIRCLE_RADIUS] = $f
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast main::$8[OFFSET_STRUCT_CIRCLE_CENTER] = (unumber)2
Inlining cast main::$10[OFFSET_STRUCT_CIRCLE_CENTER] = (unumber)3
Inlining cast main::$11[OFFSET_STRUCT_CIRCLE_RADIUS] = (unumber)5
Inlining cast main::$13[OFFSET_STRUCT_CIRCLE_CENTER] = (unumber)8
Inlining cast main::$15[OFFSET_STRUCT_CIRCLE_CENTER] = (unumber)9
Inlining cast main::$16[OFFSET_STRUCT_CIRCLE_RADIUS] = (unumber)$f
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 1
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 9
Simplifying constant integer cast 1
Simplifying constant integer cast $f
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $f
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in main::$1 = 0 * SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in main::$2 = 0 * SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in main::$3 = 0 * SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in main::$4 = 1 * SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in main::$5 = 1 * SIZEOF_STRUCT_CIRCLE
Inferred type updated to byte in main::$6 = 1 * SIZEOF_STRUCT_CIRCLE
Simple Condition main::$0 [47] if(main::i#1!=rangelast(0,1)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant right-side identified [0] main::$1 = 0 * SIZEOF_STRUCT_CIRCLE
Constant right-side identified [5] main::$2 = 0 * SIZEOF_STRUCT_CIRCLE
Constant right-side identified [10] main::$3 = 0 * SIZEOF_STRUCT_CIRCLE
Constant right-side identified [13] main::$4 = 1 * SIZEOF_STRUCT_CIRCLE
Constant right-side identified [18] main::$5 = 1 * SIZEOF_STRUCT_CIRCLE
Constant right-side identified [23] main::$6 = 1 * SIZEOF_STRUCT_CIRCLE
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$1 = 0*SIZEOF_STRUCT_CIRCLE
Constant main::$2 = 0*SIZEOF_STRUCT_CIRCLE
Constant main::$3 = 0*SIZEOF_STRUCT_CIRCLE
Constant main::$4 = 1*SIZEOF_STRUCT_CIRCLE
Constant main::$5 = 1*SIZEOF_STRUCT_CIRCLE
Constant main::$6 = 1*SIZEOF_STRUCT_CIRCLE
Constant main::idx#0 = 0
Constant main::ptr#0 = circles
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [45] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [47] if(main::i#1!=rangelast(0,1)) goto main::@1 to 2
Converting *(pointer+n) to pointer[n] [34] main::x#0 = *main::$18  -- main::$26[OFFSET_STRUCT_POINT_X]
Converting *(pointer+n) to pointer[n] [39] main::y#0 = *main::$20  -- main::$28[OFFSET_STRUCT_POINT_Y]
Successful SSA optimization Pass2InlineDerefIdx
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_CIRCLE in 
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_CIRCLE in 
Simplifying constant evaluating to zero 0*SIZEOF_STRUCT_CIRCLE in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero (struct Point*)circles in [1] main::$7 = (struct Point*)circles + main::$1
Simplifying expression containing zero main::$21 in [3] main::$8 = main::$21 + OFFSET_STRUCT_POINT_X
Simplifying expression containing zero (struct Point*)circles in [6] main::$9 = (struct Point*)circles + main::$2
Simplifying expression containing zero (byte*)circles in [11] main::$11 = (byte*)circles + main::$3
Simplifying expression containing zero main::$11 in [12] main::$11[OFFSET_STRUCT_CIRCLE_RADIUS] = 5
Simplifying expression containing zero main::$23 in [16] main::$13 = main::$23 + OFFSET_STRUCT_POINT_X
Simplifying expression containing zero main::$16 in [25] main::$16[OFFSET_STRUCT_CIRCLE_RADIUS] = $f
Simplifying expression containing zero main::$26 in [33] main::$18 = main::$26 + OFFSET_STRUCT_POINT_X
Simplifying expression containing zero main::$26 in [34] main::x#0 = main::$26[OFFSET_STRUCT_POINT_X]
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable main::$18 and assignment [24] main::$18 = main::$26
Eliminating unused variable main::$20 and assignment [29] main::$20 = main::$28 + OFFSET_STRUCT_POINT_Y
Eliminating unused constant main::$1
Eliminating unused constant main::$2
Eliminating unused constant main::$3
Eliminating unused constant OFFSET_STRUCT_POINT_X
Eliminating unused constant OFFSET_STRUCT_CIRCLE_RADIUS
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 2 in [35] if(main::i#1!=2) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 2
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias main::$8 = main::$21 
Alias main::$13 = main::$23 
Successful SSA optimization Pass2AliasElimination
Constant right-side identified [9] main::$12 = (struct Point*)circles + main::$4
Constant right-side identified [12] main::$14 = (struct Point*)circles + main::$5
Constant right-side identified [16] main::$16 = (byte*)circles + main::$6
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$7 = (struct Point*)circles
Constant main::$9 = (struct Point*)circles
Constant main::$11 = (byte*)circles
Constant main::$12 = (struct Point*)circles+main::$4
Constant main::$14 = (struct Point*)circles+main::$5
Constant main::$16 = (byte*)circles+main::$6
Successful SSA optimization Pass2ConstantIdentification
Constant main::$8 = (byte*)main::$7
Constant main::$22 = (byte*)main::$9
Constant main::$13 = (byte*)main::$12
Constant main::$24 = (byte*)main::$14
Successful SSA optimization Pass2ConstantIdentification
Converting *(pointer+n) to pointer[n] [22] main::x#0 = *main::$26  -- ((byte*)main::$25)[OFFSET_STRUCT_CIRCLE_CENTER]
Successful SSA optimization Pass2InlineDerefIdx
Eliminating unused variable main::$26 and assignment [11] main::$26 = (byte*)main::$17
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable main::$17 and assignment [10] main::$17 = main::$25 + OFFSET_STRUCT_CIRCLE_CENTER
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [1] main::$10 = main::$22 + OFFSET_STRUCT_POINT_Y
Constant right-side identified [5] main::$15 = main::$24 + OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$10 = main::$22+OFFSET_STRUCT_POINT_Y
Constant main::$15 = main::$24+OFFSET_STRUCT_POINT_Y
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [7] main::$25 = (struct Point*)main::ptr#2 keeping main::ptr#2
Inlining Noop Cast [9] main::$27 = (struct Point*)main::ptr#2 keeping main::ptr#2
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [11] main::$28 = (byte*)main::$19 keeping main::$28
Successful SSA optimization Pass2NopCastInlining
Inlining constant with var siblings main::idx#0
Inlining constant with var siblings main::ptr#0
Inlining constant with var siblings main::i#0
Constant inlined main::$12 = (struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE
Constant inlined main::$13 = (byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE
Constant inlined main::$24 = (byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE
Constant inlined main::$14 = (struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE
Constant inlined main::ptr#0 = circles
Constant inlined main::$15 = (byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_POINT_Y
Constant inlined main::$10 = (byte*)(struct Point*)circles+OFFSET_STRUCT_POINT_Y
Constant inlined main::$11 = (byte*)circles
Constant inlined main::$22 = (byte*)(struct Point*)circles
Constant inlined main::idx#0 = 0
Constant inlined main::$16 = (byte*)circles+1*SIZEOF_STRUCT_CIRCLE
Constant inlined main::$5 = 1*SIZEOF_STRUCT_CIRCLE
Constant inlined main::i#0 = 0
Constant inlined main::$6 = 1*SIZEOF_STRUCT_CIRCLE
Constant inlined main::$4 = 1*SIZEOF_STRUCT_CIRCLE
Constant inlined main::$9 = (struct Point*)circles
Constant inlined main::$7 = (struct Point*)circles
Constant inlined main::$8 = (byte*)(struct Point*)circles
Successful SSA optimization Pass2ConstantInlining
Consolidated array index constant in *((byte*)(struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER)
Consolidated array index constant in *((byte*)(struct Point*)circles+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER)
Consolidated array index constant in *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_CIRCLE_CENTER)
Consolidated array index constant in *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER)
Successful SSA optimization Pass2ConstantAdditionElimination
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 2
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting main::@2(between main::@1 and main::@1)
CALL GRAPH

Created 3 initial phi equivalence classes
Coalesced [18] main::ptr#3 = main::ptr#1
Coalesced [19] main::idx#4 = main::idx#2
Coalesced [20] main::i#3 = main::i#1
Coalesced down to 3 phi equivalence classes
Culled Empty Block label main::@2

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *((byte*)(struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER) = 2
  [1] *((byte*)(struct Point*)circles+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 3
  [2] *((byte*)circles) = 5
  [3] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_CIRCLE_CENTER) = 8
  [4] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 9
  [5] *((byte*)circles+1*SIZEOF_STRUCT_CIRCLE) = $f
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [6] main::i#2 = phi( main/0, main::@1/main::i#1 )
  [6] main::idx#3 = phi( main/0, main::@1/main::idx#2 )
  [6] main::ptr#2 = phi( main/circles, main::@1/main::ptr#1 )
  [7] main::x#0 = ((byte*)(struct Point*)main::ptr#2)[OFFSET_STRUCT_CIRCLE_CENTER]
  [8] main::$28 = (struct Point*)main::ptr#2 + OFFSET_STRUCT_CIRCLE_CENTER
  [9] main::y#0 = ((byte*)main::$28)[OFFSET_STRUCT_POINT_Y]
  [10] main::SCREEN[main::idx#3] = main::x#0
  [11] main::idx#1 = ++ main::idx#3
  [12] main::SCREEN[main::idx#1] = main::y#0
  [13] main::idx#2 = ++ main::idx#1
  [14] main::ptr#1 = main::ptr#2 + SIZEOF_STRUCT_CIRCLE
  [15] main::i#1 = ++ main::i#2
  [16] if(main::i#1!=2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [17] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
struct Point*~ main::$28 11.0
byte main::i
byte main::i#1 16.5
byte main::i#2 2.4444444444444446
byte main::idx
byte main::idx#1 16.5
byte main::idx#2 5.5
byte main::idx#3 6.6000000000000005
struct Circle* main::ptr
struct Circle* main::ptr#1 7.333333333333333
struct Circle* main::ptr#2 2.75
byte main::x
byte main::x#0 7.333333333333333
byte main::y
byte main::y#0 7.333333333333333

Initial phi equivalence classes
[ main::ptr#2 main::ptr#1 ]
[ main::idx#3 main::idx#2 ]
[ main::i#2 main::i#1 ]
Added variable main::x#0 to live range equivalence class [ main::x#0 ]
Added variable main::$28 to live range equivalence class [ main::$28 ]
Added variable main::y#0 to live range equivalence class [ main::y#0 ]
Added variable main::idx#1 to live range equivalence class [ main::idx#1 ]
Complete equivalence classes
[ main::ptr#2 main::ptr#1 ]
[ main::idx#3 main::idx#2 ]
[ main::i#2 main::i#1 ]
[ main::x#0 ]
[ main::$28 ]
[ main::y#0 ]
[ main::idx#1 ]
Allocated zp[2]:2 [ main::ptr#2 main::ptr#1 ]
Allocated zp[1]:4 [ main::idx#3 main::idx#2 ]
Allocated zp[1]:5 [ main::i#2 main::i#1 ]
Allocated zp[1]:6 [ main::x#0 ]
Allocated zp[2]:7 [ main::$28 ]
Allocated zp[1]:9 [ main::y#0 ]
Allocated zp[1]:10 [ main::idx#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *((byte*)(struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER) = 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*)(struct Point*)circles+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((byte*)circles) = 5 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_CIRCLE_CENTER) = 8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 9 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *((byte*)circles+1*SIZEOF_STRUCT_CIRCLE) = $f [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] main::x#0 = ((byte*)(struct Point*)main::ptr#2)[OFFSET_STRUCT_CIRCLE_CENTER] [ main::ptr#2 main::idx#3 main::i#2 main::x#0 ] (  [ main::ptr#2 main::idx#3 main::i#2 main::x#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:4 [ main::idx#3 main::idx#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ main::idx#3 main::idx#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ main::i#2 main::i#1 ]
Statement [8] main::$28 = (struct Point*)main::ptr#2 + OFFSET_STRUCT_CIRCLE_CENTER [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::$28 ] (  [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::$28 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:6 [ main::x#0 ]
Statement [9] main::y#0 = ((byte*)main::$28)[OFFSET_STRUCT_POINT_Y] [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::y#0 ] (  [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:6 [ main::x#0 ]
Statement [10] main::SCREEN[main::idx#3] = main::x#0 [ main::ptr#2 main::idx#3 main::i#2 main::y#0 ] (  [ main::ptr#2 main::idx#3 main::i#2 main::y#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:9 [ main::y#0 ]
Statement [12] main::SCREEN[main::idx#1] = main::y#0 [ main::ptr#2 main::i#2 main::idx#1 ] (  [ main::ptr#2 main::i#2 main::idx#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:10 [ main::idx#1 ]
Statement [14] main::ptr#1 = main::ptr#2 + SIZEOF_STRUCT_CIRCLE [ main::i#2 main::ptr#1 main::idx#2 ] (  [ main::i#2 main::ptr#1 main::idx#2 ] { }  ) always clobbers reg byte a 
Statement [0] *((byte*)(struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER) = 2 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [1] *((byte*)(struct Point*)circles+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 3 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [2] *((byte*)circles) = 5 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [3] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_CIRCLE_CENTER) = 8 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [4] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 9 [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [5] *((byte*)circles+1*SIZEOF_STRUCT_CIRCLE) = $f [ ] (  [ ] { }  ) always clobbers reg byte a 
Statement [7] main::x#0 = ((byte*)(struct Point*)main::ptr#2)[OFFSET_STRUCT_CIRCLE_CENTER] [ main::ptr#2 main::idx#3 main::i#2 main::x#0 ] (  [ main::ptr#2 main::idx#3 main::i#2 main::x#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [8] main::$28 = (struct Point*)main::ptr#2 + OFFSET_STRUCT_CIRCLE_CENTER [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::$28 ] (  [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::$28 ] { }  ) always clobbers reg byte a 
Statement [9] main::y#0 = ((byte*)main::$28)[OFFSET_STRUCT_POINT_Y] [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::y#0 ] (  [ main::ptr#2 main::idx#3 main::i#2 main::x#0 main::y#0 ] { }  ) always clobbers reg byte a reg byte y 
Statement [10] main::SCREEN[main::idx#3] = main::x#0 [ main::ptr#2 main::idx#3 main::i#2 main::y#0 ] (  [ main::ptr#2 main::idx#3 main::i#2 main::y#0 ] { }  ) always clobbers reg byte a 
Statement [12] main::SCREEN[main::idx#1] = main::y#0 [ main::ptr#2 main::i#2 main::idx#1 ] (  [ main::ptr#2 main::i#2 main::idx#1 ] { }  ) always clobbers reg byte a 
Statement [14] main::ptr#1 = main::ptr#2 + SIZEOF_STRUCT_CIRCLE [ main::i#2 main::ptr#1 main::idx#2 ] (  [ main::i#2 main::ptr#1 main::idx#2 ] { }  ) always clobbers reg byte a 
Potential registers zp[2]:2 [ main::ptr#2 main::ptr#1 ] : zp[2]:2 , 
Potential registers zp[1]:4 [ main::idx#3 main::idx#2 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:5 [ main::i#2 main::i#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[1]:6 [ main::x#0 ] : zp[1]:6 , reg byte x , 
Potential registers zp[2]:7 [ main::$28 ] : zp[2]:7 , 
Potential registers zp[1]:9 [ main::y#0 ] : zp[1]:9 , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ main::idx#1 ] : zp[1]:10 , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 18.94: zp[1]:5 [ main::i#2 main::i#1 ] 16.5: zp[1]:10 [ main::idx#1 ] 12.1: zp[1]:4 [ main::idx#3 main::idx#2 ] 11: zp[2]:7 [ main::$28 ] 10.08: zp[2]:2 [ main::ptr#2 main::ptr#1 ] 7.33: zp[1]:6 [ main::x#0 ] 7.33: zp[1]:9 [ main::y#0 ] 
Uplift Scope [Point] 
Uplift Scope [Circle] 
Uplift Scope [] 

Uplifting [main] best 1172 combination zp[1]:5 [ main::i#2 main::i#1 ] reg byte x [ main::idx#1 ] reg byte x [ main::idx#3 main::idx#2 ] zp[2]:7 [ main::$28 ] zp[2]:2 [ main::ptr#2 main::ptr#1 ] zp[1]:6 [ main::x#0 ] reg byte y [ main::y#0 ] 
Uplifting [Point] best 1172 combination 
Uplifting [Circle] best 1172 combination 
Uplifting [] best 1172 combination 
Attempting to uplift remaining variables inzp[1]:5 [ main::i#2 main::i#1 ]
Uplifting [main] best 1172 combination zp[1]:5 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp[1]:6 [ main::x#0 ]
Uplifting [main] best 1172 combination zp[1]:6 [ main::x#0 ] 
Allocated (was zp[1]:5) zp[1]:4 [ main::i#2 main::i#1 ]
Allocated (was zp[1]:6) zp[1]:5 [ main::x#0 ]
Allocated (was zp[2]:7) zp[2]:6 [ main::$28 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal struct -  using pointers to nested structs
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-15.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_CIRCLE = 3
  .const OFFSET_STRUCT_CIRCLE_CENTER = 1
  .const OFFSET_STRUCT_POINT_Y = 1
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label __28 = 6
    .label x = 5
    .label ptr = 2
    .label i = 4
    // [0] *((byte*)(struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER) = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER
    // [1] *((byte*)(struct Point*)circles+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta circles+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER
    // [2] *((byte*)circles) = 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta circles
    // [3] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_CIRCLE_CENTER) = 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_CIRCLE_CENTER
    // [4] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 9 -- _deref_pbuc1=vbuc2 
    lda #9
    sta circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER
    // [5] *((byte*)circles+1*SIZEOF_STRUCT_CIRCLE) = $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta circles+1*SIZEOF_STRUCT_CIRCLE
    // [6] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [6] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [6] phi main::idx#3 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [6] phi main::ptr#2 = circles [phi:main->main::@1#2] -- pssz1=pssc1 
    lda #<circles
    sta.z ptr
    lda #>circles
    sta.z ptr+1
    jmp __b1
    // [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  __b1_from___b1:
    // [6] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [6] phi main::idx#3 = main::idx#2 [phi:main::@1->main::@1#1] -- register_copy 
    // [6] phi main::ptr#2 = main::ptr#1 [phi:main::@1->main::@1#2] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    // [7] main::x#0 = ((byte*)(struct Point*)main::ptr#2)[OFFSET_STRUCT_CIRCLE_CENTER] -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_CIRCLE_CENTER
    lda (ptr),y
    sta.z x
    // [8] main::$28 = (struct Point*)main::ptr#2 + OFFSET_STRUCT_CIRCLE_CENTER -- pssz1=pssz2_plus_vbuc1 
    lda #OFFSET_STRUCT_CIRCLE_CENTER
    clc
    adc.z ptr
    sta.z __28
    lda #0
    adc.z ptr+1
    sta.z __28+1
    // [9] main::y#0 = ((byte*)main::$28)[OFFSET_STRUCT_POINT_Y] -- vbuyy=pbuz1_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_POINT_Y
    lda (__28),y
    tay
    // [10] main::SCREEN[main::idx#3] = main::x#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z x
    sta SCREEN,x
    // [11] main::idx#1 = ++ main::idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // [12] main::SCREEN[main::idx#1] = main::y#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SCREEN,x
    // [13] main::idx#2 = ++ main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // [14] main::ptr#1 = main::ptr#2 + SIZEOF_STRUCT_CIRCLE -- pssz1=pssz1_plus_vbuc1 
    lda #SIZEOF_STRUCT_CIRCLE
    clc
    adc.z ptr
    sta.z ptr
    bcc !+
    inc.z ptr+1
  !:
    // [15] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [16] if(main::i#1!=2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1_from___b1
    jmp __breturn
    // main::@return
  __breturn:
    // [17] return 
    rts
}
  // File Data
.segment Data
  circles: .fill 3*2, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Replacing instruction lda #OFFSET_STRUCT_CIRCLE_CENTER with TYA
Replacing label __b1_from___b1 with __b1
Removing instruction __b1_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
const byte OFFSET_STRUCT_CIRCLE_CENTER = 1
const byte OFFSET_STRUCT_POINT_Y = 1
const byte SIZEOF_STRUCT_CIRCLE = 3
const struct Circle* circles[2]  = { fill( 2, 0) }
void main()
struct Point*~ main::$28 zp[2]:6 11.0
const nomodify byte* main::SCREEN = (byte*) 1024
byte main::i
byte main::i#1 i zp[1]:4 16.5
byte main::i#2 i zp[1]:4 2.4444444444444446
byte main::idx
byte main::idx#1 reg byte x 16.5
byte main::idx#2 reg byte x 5.5
byte main::idx#3 reg byte x 6.6000000000000005
struct Circle* main::ptr
struct Circle* main::ptr#1 ptr zp[2]:2 7.333333333333333
struct Circle* main::ptr#2 ptr zp[2]:2 2.75
byte main::x
byte main::x#0 x zp[1]:5 7.333333333333333
byte main::y
byte main::y#0 reg byte y 7.333333333333333

zp[2]:2 [ main::ptr#2 main::ptr#1 ]
reg byte x [ main::idx#3 main::idx#2 ]
zp[1]:4 [ main::i#2 main::i#1 ]
zp[1]:5 [ main::x#0 ]
zp[2]:6 [ main::$28 ]
reg byte y [ main::y#0 ]
reg byte x [ main::idx#1 ]


FINAL ASSEMBLER
Score: 1082

  // File Comments
// Minimal struct -  using pointers to nested structs
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-ptr-15.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const SIZEOF_STRUCT_CIRCLE = 3
  .const OFFSET_STRUCT_CIRCLE_CENTER = 1
  .const OFFSET_STRUCT_POINT_Y = 1
.segment Code
  // main
main: {
    .label SCREEN = $400
    .label __28 = 6
    .label x = 5
    .label ptr = 2
    .label i = 4
    // circles[0].center.x = 2
    // [0] *((byte*)(struct Point*)circles+OFFSET_STRUCT_CIRCLE_CENTER) = 2 -- _deref_pbuc1=vbuc2 
    lda #2
    sta circles+OFFSET_STRUCT_CIRCLE_CENTER
    // circles[0].center.y = 3
    // [1] *((byte*)(struct Point*)circles+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 3 -- _deref_pbuc1=vbuc2 
    lda #3
    sta circles+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER
    // circles[0].radius = 5
    // [2] *((byte*)circles) = 5 -- _deref_pbuc1=vbuc2 
    lda #5
    sta circles
    // circles[1].center.x = 8
    // [3] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_CIRCLE_CENTER) = 8 -- _deref_pbuc1=vbuc2 
    lda #8
    sta circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_CIRCLE_CENTER
    // circles[1].center.y = 9
    // [4] *((byte*)(struct Point*)circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER) = 9 -- _deref_pbuc1=vbuc2 
    lda #9
    sta circles+1*SIZEOF_STRUCT_CIRCLE+OFFSET_STRUCT_POINT_Y+OFFSET_STRUCT_CIRCLE_CENTER
    // circles[1].radius = 15
    // [5] *((byte*)circles+1*SIZEOF_STRUCT_CIRCLE) = $f -- _deref_pbuc1=vbuc2 
    lda #$f
    sta circles+1*SIZEOF_STRUCT_CIRCLE
    // [6] phi from main to main::@1 [phi:main->main::@1]
    // [6] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    // [6] phi main::idx#3 = 0 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    tax
    // [6] phi main::ptr#2 = circles [phi:main->main::@1#2] -- pssz1=pssc1 
    lda #<circles
    sta.z ptr
    lda #>circles
    sta.z ptr+1
    // [6] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [6] phi main::i#2 = main::i#1 [phi:main::@1->main::@1#0] -- register_copy 
    // [6] phi main::idx#3 = main::idx#2 [phi:main::@1->main::@1#1] -- register_copy 
    // [6] phi main::ptr#2 = main::ptr#1 [phi:main::@1->main::@1#2] -- register_copy 
    // main::@1
  __b1:
    // x = ptr->center.x
    // [7] main::x#0 = ((byte*)(struct Point*)main::ptr#2)[OFFSET_STRUCT_CIRCLE_CENTER] -- vbuz1=pbuz2_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_CIRCLE_CENTER
    lda (ptr),y
    sta.z x
    // y = ptr->center.y
    // [8] main::$28 = (struct Point*)main::ptr#2 + OFFSET_STRUCT_CIRCLE_CENTER -- pssz1=pssz2_plus_vbuc1 
    tya
    clc
    adc.z ptr
    sta.z __28
    lda #0
    adc.z ptr+1
    sta.z __28+1
    // [9] main::y#0 = ((byte*)main::$28)[OFFSET_STRUCT_POINT_Y] -- vbuyy=pbuz1_derefidx_vbuc1 
    ldy #OFFSET_STRUCT_POINT_Y
    lda (__28),y
    tay
    // SCREEN[idx++] = x
    // [10] main::SCREEN[main::idx#3] = main::x#0 -- pbuc1_derefidx_vbuxx=vbuz1 
    lda.z x
    sta SCREEN,x
    // SCREEN[idx++] = x;
    // [11] main::idx#1 = ++ main::idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // SCREEN[idx++] = y
    // [12] main::SCREEN[main::idx#1] = main::y#0 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta SCREEN,x
    // SCREEN[idx++] = y;
    // [13] main::idx#2 = ++ main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // ptr++;
    // [14] main::ptr#1 = main::ptr#2 + SIZEOF_STRUCT_CIRCLE -- pssz1=pssz1_plus_vbuc1 
    lda #SIZEOF_STRUCT_CIRCLE
    clc
    adc.z ptr
    sta.z ptr
    bcc !+
    inc.z ptr+1
  !:
    // for(byte i:0..1)
    // [15] main::i#1 = ++ main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [16] if(main::i#1!=2) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #2
    cmp.z i
    bne __b1
    // main::@return
    // }
    // [17] return 
    rts
}
  // File Data
.segment Data
  circles: .fill 3*2, 0

