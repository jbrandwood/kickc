Fixing pointer addition (word*~) bsearch16u::$7 ← (word*) bsearch16u::items + (byte~) bsearch16u::$6
Fixing pointer addition (word*~) bsearch16u::$15 ← (word*) bsearch16u::pivot + (number) 1
Fixing pointer addition (word*~) bsearch16u::$1 ← (word*) bsearch16u::items - (number) 1
Fixing pointer array-indexing *((word*) utoa::digit_values + (byte) utoa::digit)
Fixing pointer array-indexing *((dword*) ultoa::digit_values + (byte) ultoa::digit)
Warning! Adding boolean cast to non-boolean condition *((byte*) strcpy::src)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_lines::str)
Warning! Adding boolean cast to non-boolean condition (byte) print_str_lines::ch
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str::str)
Warning! Adding boolean cast to non-boolean condition *((byte*) print_str_at::str)
Warning! Adding boolean cast to non-boolean sub-expression (byte) print_str_lines::ch
Identified constant variable (byte*) dtvSetCpuBankSegment1::cpuBank
Identified constant variable (byte*) DTV_BLITTER_ALU
Identified constant variable (byte*) HEAP_TOP
Identified constant variable (byte) form_fields_cnt
Identified constant variable (byte) gfx_init_vic_bitmap::lines_cnt
Inlined call (byte~) vicSelectGfxBank::$0 ← call toDd00 (byte*) vicSelectGfxBank::gfx 
Culled Empty Block (label) @1
Culled Empty Block (label) @2
Culled Empty Block (label) @3
Culled Empty Block (label) @5
Culled Empty Block (label) @6
Culled Empty Block (label) @7
Culled Empty Block (label) memset::@7
Culled Empty Block (label) memset::@6
Culled Empty Block (label) memset::@8
Culled Empty Block (label) memset::@9
Culled Empty Block (label) memset::@3
Culled Empty Block (label) @8
Culled Empty Block (label) @9
Culled Empty Block (label) @10
Culled Empty Block (label) @11
Culled Empty Block (label) @12
Culled Empty Block (label) @13
Culled Empty Block (label) @14
Culled Empty Block (label) @15
Culled Empty Block (label) @16
Culled Empty Block (label) print_str_lines::@2
Culled Empty Block (label) print_str_lines::@9
Culled Empty Block (label) print_str_lines::@3
Culled Empty Block (label) print_str_lines::@10
Culled Empty Block (label) print_str_lines::@8
Culled Empty Block (label) @18
Culled Empty Block (label) @19
Culled Empty Block (label) @20
Culled Empty Block (label) print_str_at::@4
Culled Empty Block (label) print_str_at::@3
Culled Empty Block (label) print_str_at::@5
Culled Empty Block (label) print_str_at::@6
Culled Empty Block (label) @21
Culled Empty Block (label) @22
Culled Empty Block (label) @23
Culled Empty Block (label) @24
Culled Empty Block (label) @25
Culled Empty Block (label) @26
Culled Empty Block (label) @27
Culled Empty Block (label) @28
Culled Empty Block (label) @29
Culled Empty Block (label) @30
Culled Empty Block (label) @31
Culled Empty Block (label) @32
Culled Empty Block (label) @33
Culled Empty Block (label) @35
Culled Empty Block (label) @36
Culled Empty Block (label) @37
Culled Empty Block (label) @38
Culled Empty Block (label) @39
Culled Empty Block (label) @40
Culled Empty Block (label) @42
Culled Empty Block (label) keyboard_matrix_read::@1
Culled Empty Block (label) @43
Culled Empty Block (label) @44
Culled Empty Block (label) keyboard_event_scan::@22
Culled Empty Block (label) keyboard_event_scan::@13
Culled Empty Block (label) keyboard_event_scan::@15
Culled Empty Block (label) keyboard_event_scan::@19
Culled Empty Block (label) keyboard_event_scan::@4
Culled Empty Block (label) @46
Culled Empty Block (label) keyboard_event_pressed::@1
Culled Empty Block (label) @47
Culled Empty Block (label) keyboard_event_get::@4
Culled Empty Block (label) keyboard_event_get::@2
Culled Empty Block (label) keyboard_event_get::@5
Culled Empty Block (label) keyboard_event_get::@6
Culled Empty Block (label) bitmap_init::@8
Culled Empty Block (label) @49
Culled Empty Block (label) bitmap_clear::@4
Culled Empty Block (label) @50
Culled Empty Block (label) @51
Culled Empty Block (label) bitmap_line::@12
Culled Empty Block (label) bitmap_line::@6
Culled Empty Block (label) bitmap_line::@14
Culled Empty Block (label) bitmap_line::@13
Culled Empty Block (label) bitmap_line::@16
Culled Empty Block (label) bitmap_line::@18
Culled Empty Block (label) bitmap_line::@2
Culled Empty Block (label) bitmap_line::@19
Culled Empty Block (label) bitmap_line::@22
Culled Empty Block (label) bitmap_line::@9
Culled Empty Block (label) bitmap_line::@24
Culled Empty Block (label) bitmap_line::@23
Culled Empty Block (label) bitmap_line::@26
Culled Empty Block (label) bitmap_line::@28
Culled Empty Block (label) @52
Culled Empty Block (label) bitmap_line_xdyi::@4
Culled Empty Block (label) @53
Culled Empty Block (label) bitmap_line_xdyd::@4
Culled Empty Block (label) @54
Culled Empty Block (label) bitmap_line_ydxi::@4
Culled Empty Block (label) @55
Culled Empty Block (label) bitmap_line_ydxd::@4
Culled Empty Block (label) @56
Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@3
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Culled Empty Block (label) get_plane::@14
Culled Empty Block (label) get_plane::@42
Culled Empty Block (label) get_plane::@15
Culled Empty Block (label) get_plane::@43
Culled Empty Block (label) get_plane::@44
Culled Empty Block (label) get_plane::@16
Culled Empty Block (label) get_plane::@45
Culled Empty Block (label) get_plane::@46
Culled Empty Block (label) get_plane::@17
Culled Empty Block (label) get_plane::@47
Culled Empty Block (label) get_plane::@48
Culled Empty Block (label) get_plane::@18
Culled Empty Block (label) get_plane::@49
Culled Empty Block (label) get_plane::@50
Culled Empty Block (label) get_plane::@19
Culled Empty Block (label) get_plane::@51
Culled Empty Block (label) get_plane::@52
Culled Empty Block (label) get_plane::@20
Culled Empty Block (label) get_plane::@53
Culled Empty Block (label) get_plane::@54
Culled Empty Block (label) get_plane::@21
Culled Empty Block (label) get_plane::@55
Culled Empty Block (label) get_plane::@56
Culled Empty Block (label) get_plane::@22
Culled Empty Block (label) get_plane::@57
Culled Empty Block (label) get_plane::@58
Culled Empty Block (label) get_plane::@23
Culled Empty Block (label) get_plane::@59
Culled Empty Block (label) get_plane::@60
Culled Empty Block (label) get_plane::@24
Culled Empty Block (label) get_plane::@61
Culled Empty Block (label) get_plane::@62
Culled Empty Block (label) get_plane::@25
Culled Empty Block (label) get_plane::@63
Culled Empty Block (label) get_plane::@64
Culled Empty Block (label) get_plane::@26
Culled Empty Block (label) get_plane::@65
Culled Empty Block (label) get_plane::@66
Culled Empty Block (label) get_plane::@67
Culled Empty Block (label) get_plane::@68
Culled Empty Block (label) get_plane::@69
Culled Empty Block (label) @58
Culled Empty Block (label) get_vic_screen::@5
Culled Empty Block (label) get_vic_screen::@15
Culled Empty Block (label) get_vic_screen::@6
Culled Empty Block (label) get_vic_screen::@16
Culled Empty Block (label) get_vic_screen::@17
Culled Empty Block (label) get_vic_screen::@7
Culled Empty Block (label) get_vic_screen::@18
Culled Empty Block (label) get_vic_screen::@19
Culled Empty Block (label) get_vic_screen::@8
Culled Empty Block (label) get_vic_screen::@20
Culled Empty Block (label) get_vic_screen::@21
Culled Empty Block (label) get_vic_screen::@22
Culled Empty Block (label) get_vic_screen::@23
Culled Empty Block (label) get_vic_screen::@24
Culled Empty Block (label) @59
Culled Empty Block (label) get_vic_charset::@2
Culled Empty Block (label) get_vic_charset::@6
Culled Empty Block (label) get_vic_charset::@7
Culled Empty Block (label) get_vic_charset::@8
Culled Empty Block (label) get_vic_charset::@9
Culled Empty Block (label) apply_preset::@12
Culled Empty Block (label) apply_preset::@34
Culled Empty Block (label) apply_preset::@13
Culled Empty Block (label) apply_preset::@35
Culled Empty Block (label) apply_preset::@14
Culled Empty Block (label) apply_preset::@36
Culled Empty Block (label) apply_preset::@15
Culled Empty Block (label) apply_preset::@37
Culled Empty Block (label) apply_preset::@16
Culled Empty Block (label) apply_preset::@38
Culled Empty Block (label) apply_preset::@17
Culled Empty Block (label) apply_preset::@39
Culled Empty Block (label) apply_preset::@18
Culled Empty Block (label) apply_preset::@40
Culled Empty Block (label) apply_preset::@19
Culled Empty Block (label) apply_preset::@41
Culled Empty Block (label) apply_preset::@20
Culled Empty Block (label) apply_preset::@42
Culled Empty Block (label) apply_preset::@21
Culled Empty Block (label) apply_preset::@43
Culled Empty Block (label) apply_preset::@44
Culled Empty Block (label) apply_preset::@48
Culled Empty Block (label) apply_preset::@47
Culled Empty Block (label) apply_preset::@49
Culled Empty Block (label) apply_preset::@50
Culled Empty Block (label) @61
Culled Empty Block (label) render_preset_name::@12
Culled Empty Block (label) render_preset_name::@34
Culled Empty Block (label) render_preset_name::@13
Culled Empty Block (label) render_preset_name::@35
Culled Empty Block (label) render_preset_name::@14
Culled Empty Block (label) render_preset_name::@36
Culled Empty Block (label) render_preset_name::@15
Culled Empty Block (label) render_preset_name::@37
Culled Empty Block (label) render_preset_name::@16
Culled Empty Block (label) render_preset_name::@38
Culled Empty Block (label) render_preset_name::@17
Culled Empty Block (label) render_preset_name::@39
Culled Empty Block (label) render_preset_name::@18
Culled Empty Block (label) render_preset_name::@40
Culled Empty Block (label) render_preset_name::@19
Culled Empty Block (label) render_preset_name::@41
Culled Empty Block (label) render_preset_name::@20
Culled Empty Block (label) render_preset_name::@42
Culled Empty Block (label) render_preset_name::@21
Culled Empty Block (label) render_preset_name::@43
Culled Empty Block (label) render_preset_name::@44
Culled Empty Block (label) gfx_mode::@27
Culled Empty Block (label) gfx_mode::@11
Culled Empty Block (label) gfx_mode::@28
Culled Empty Block (label) gfx_mode::@30
Culled Empty Block (label) gfx_mode::@32
Culled Empty Block (label) gfx_mode::@43
Culled Empty Block (label) gfx_mode::@33
Culled Empty Block (label) gfx_mode::@44
Culled Empty Block (label) gfx_mode::@35
Culled Empty Block (label) gfx_mode::@37
Culled Empty Block (label) gfx_mode::@38
Culled Empty Block (label) gfx_mode::@39
Culled Empty Block (label) gfx_mode::@42
Culled Empty Block (label) gfx_mode::@40
Culled Empty Block (label) gfx_mode::@41
Culled Empty Block (label) gfx_mode::@45
Culled Empty Block (label) @63
Culled Empty Block (label) @64
Culled Empty Block (label) @65
Culled Empty Block (label) gfx_init_screen0::@4
Culled Empty Block (label) @66
Culled Empty Block (label) gfx_init_screen1::@4
Culled Empty Block (label) @67
Culled Empty Block (label) gfx_init_screen2::@4
Culled Empty Block (label) @68
Culled Empty Block (label) gfx_init_screen3::@4
Culled Empty Block (label) @69
Culled Empty Block (label) gfx_init_screen4::@4
Culled Empty Block (label) @70
Culled Empty Block (label) gfx_init_vic_bitmap::@4
Culled Empty Block (label) gfx_init_vic_bitmap::@3
Culled Empty Block (label) gfx_init_vic_bitmap::@5
Culled Empty Block (label) gfx_init_vic_bitmap::@6
Culled Empty Block (label) @71
Culled Empty Block (label) @72
Culled Empty Block (label) gfx_init_plane_horisontal::@6
Culled Empty Block (label) @73
Culled Empty Block (label) @74
Culled Empty Block (label) @75
Culled Empty Block (label) @76
Culled Empty Block (label) @77
Culled Empty Block (label) @78
Culled Empty Block (label) @79
Culled Empty Block (label) @80
Culled Empty Block (label) form_mode::@4
Culled Empty Block (label) form_mode::@16
Culled Empty Block (label) form_mode::@5
Culled Empty Block (label) form_mode::@17
Culled Empty Block (label) form_mode::@7
Culled Empty Block (label) form_mode::@9
Culled Empty Block (label) form_mode::@10
Culled Empty Block (label) form_mode::@11
Culled Empty Block (label) form_mode::@12
Culled Empty Block (label) form_mode::@13
Culled Empty Block (label) form_mode::@15
Culled Empty Block (label) form_mode::@19
Culled Empty Block (label) form_mode::@20
Culled Empty Block (label) form_set_screen::@2
Culled Empty Block (label) @82
Culled Empty Block (label) form_field_ptr::@1
Culled Empty Block (label) @83
Culled Empty Block (label) form_render_values::@4
Culled Empty Block (label) form_render_values::@3
Culled Empty Block (label) form_render_values::@5
Culled Empty Block (label) form_render_values::@6
Culled Empty Block (label) @84
Culled Empty Block (label) form_control::@9
Culled Empty Block (label) form_control::@20
Culled Empty Block (label) form_control::@21
Culled Empty Block (label) form_control::@23
Culled Empty Block (label) form_control::@25
Culled Empty Block (label) form_control::@27
Culled Empty Block (label) form_control::@28
Culled Empty Block (label) form_control::@30
Culled Empty Block (label) form_control::@32
Culled Empty Block (label) form_control::@17
Culled Empty Block (label) form_control::@18

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) PROCPORT_DDR ← ((byte*)) (number) 0
  (byte) PROCPORT_DDR_MEMORY_MASK ← (number) 7
  (byte*) PROCPORT ← ((byte*)) (number) 1
  (byte) PROCPORT_RAM_IO ← (number) 5
  (byte) PROCPORT_RAM_CHARROM ← (number) 1
  (byte*) CHARGEN ← ((byte*)) (number) $d000
  (byte*) RASTER ← ((byte*)) (number) $d012
  (byte*) BORDERCOL ← ((byte*)) (number) $d020
  (byte*) BGCOL ← ((byte*)) (number) $d021
  (byte*) BGCOL1 ← ((byte*)) (number) $d021
  (byte*) BGCOL2 ← ((byte*)) (number) $d022
  (byte*) BGCOL3 ← ((byte*)) (number) $d023
  (byte*) BGCOL4 ← ((byte*)) (number) $d024
  (byte*) VIC_CONTROL ← ((byte*)) (number) $d011
  (byte) VIC_ECM ← (number) $40
  (byte) VIC_BMM ← (number) $20
  (byte) VIC_DEN ← (number) $10
  (byte) VIC_RSEL ← (number) 8
  (byte*) VIC_CONTROL2 ← ((byte*)) (number) $d016
  (byte) VIC_MCM ← (number) $10
  (byte) VIC_CSEL ← (number) 8
  (byte*) VIC_MEMORY ← ((byte*)) (number) $d018
  (byte*) COLS ← ((byte*)) (number) $d800
  (byte*) CIA1_PORT_A ← ((byte*)) (number) $dc00
  (byte*) CIA1_PORT_B ← ((byte*)) (number) $dc01
  (byte*) CIA1_PORT_A_DDR ← ((byte*)) (number) $dc02
  (byte*) CIA1_PORT_B_DDR ← ((byte*)) (number) $dc03
  (byte*) CIA2_PORT_A ← ((byte*)) (number) $dd00
  (byte*) CIA2_PORT_A_DDR ← ((byte*)) (number) $dd02
  to:@4
@4: scope:[]  from @begin
  (byte*) DTV_FEATURE ← ((byte*)) (number) $d03f
  (byte) DTV_FEATURE_ENABLE ← (number) 1
  (byte*) DTV_CONTROL ← ((byte*)) (number) $d03c
  (byte) DTV_LINEAR ← (number) 1
  (byte) DTV_BORDER_OFF ← (number) 2
  (byte) DTV_HIGHCOLOR ← (number) 4
  (byte) DTV_OVERSCAN ← (number) 8
  (byte) DTV_COLORRAM_OFF ← (number) $10
  (byte) DTV_CHUNKY ← (number) $40
  (byte*) DTV_PALETTE ← ((byte*)) (number) $d200
  (byte[$10]) DTV_PALETTE_DEFAULT ← { (number) 0, (number) $f, (number) $36, (number) $be, (number) $58, (number) $db, (number) $86, (number) $ff, (number) $29, (number) $26, (number) $3b, (number) 5, (number) 7, (number) $df, (number) $9a, (number) $a }
  (byte*) DTV_PLANEA_START_LO ← ((byte*)) (number) $d03a
  (byte*) DTV_PLANEA_START_MI ← ((byte*)) (number) $d03b
  (byte*) DTV_PLANEA_START_HI ← ((byte*)) (number) $d045
  (byte*) DTV_PLANEA_STEP ← ((byte*)) (number) $d046
  (byte*) DTV_PLANEA_MODULO_LO ← ((byte*)) (number) $d038
  (byte*) DTV_PLANEA_MODULO_HI ← ((byte*)) (number) $d039
  (byte*) DTV_PLANEB_START_LO ← ((byte*)) (number) $d049
  (byte*) DTV_PLANEB_START_MI ← ((byte*)) (number) $d04a
  (byte*) DTV_PLANEB_START_HI ← ((byte*)) (number) $d04b
  (byte*) DTV_PLANEB_STEP ← ((byte*)) (number) $d04c
  (byte*) DTV_PLANEB_MODULO_LO ← ((byte*)) (number) $d047
  (byte*) DTV_PLANEB_MODULO_HI ← ((byte*)) (number) $d048
  (byte*) DTV_COLOR_BANK_LO ← ((byte*)) (number) $d036
  (byte*) DTV_COLOR_BANK_HI ← ((byte*)) (number) $d037
  (dword) DTV_COLOR_BANK_DEFAULT ← (number) $1d800
  (byte*) DTV_GRAPHICS_VIC_BANK ← ((byte*)) (number) $d03d
  to:@17

(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@4 gfx_init_plane_8bppchunky::@6 gfx_init_plane_charset8 gfx_init_plane_charset8::@8 gfx_init_plane_fill gfx_init_plane_fill::@4 gfx_init_plane_horisontal gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@4 gfx_init_plane_horisontal::@8 gfx_init_plane_vertical gfx_init_plane_vertical::@4
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 ← phi( gfx_init_plane_8bppchunky/(byte) dtvSetCpuBankSegment1::cpuBankIdx#0 gfx_init_plane_8bppchunky::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_plane_8bppchunky::@6/(byte) dtvSetCpuBankSegment1::cpuBankIdx#2 gfx_init_plane_charset8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#9 gfx_init_plane_charset8::@8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#10 gfx_init_plane_fill/(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 gfx_init_plane_fill::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#12 gfx_init_plane_horisontal/(byte) dtvSetCpuBankSegment1::cpuBankIdx#3 gfx_init_plane_horisontal2/(byte) dtvSetCpuBankSegment1::cpuBankIdx#5 gfx_init_plane_horisontal2::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#6 gfx_init_plane_horisontal::@8/(byte) dtvSetCpuBankSegment1::cpuBankIdx#4 gfx_init_plane_vertical/(byte) dtvSetCpuBankSegment1::cpuBankIdx#7 gfx_init_plane_vertical::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#8 )
  (byte*) dtvSetCpuBankSegment1::cpuBank ← ((byte*)) (number) $ff
  *((byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  (byte) memset::c#4 ← phi( print_cls/(byte) memset::c#0 )
  (void*) memset::str#3 ← phi( print_cls/(void*) memset::str#0 )
  (word) memset::num#1 ← phi( print_cls/(word) memset::num#0 )
  (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
  (bool~) memset::$1 ← ! (bool~) memset::$0
  if((bool~) memset::$1) goto memset::@1
  to:memset::@2
memset::@1: scope:[memset]  from memset memset::@4
  (void*) memset::str#1 ← phi( memset/(void*) memset::str#3 memset::@4/(void*) memset::str#4 )
  (void*) memset::return#0 ← (void*) memset::str#1
  to:memset::@return
memset::@2: scope:[memset]  from memset
  (byte) memset::c#3 ← phi( memset/(byte) memset::c#4 )
  (word) memset::num#2 ← phi( memset/(word) memset::num#1 )
  (void*) memset::str#2 ← phi( memset/(void*) memset::str#3 )
  (byte*~) memset::$2 ← ((byte*)) (void*) memset::str#2
  (byte*~) memset::$3 ← (byte*~) memset::$2 + (word) memset::num#2
  (byte*) memset::end#0 ← (byte*~) memset::$3
  (byte*) memset::dst#0 ← ((byte*)) (void*) memset::str#2
  to:memset::@4
memset::@4: scope:[memset]  from memset::@2 memset::@5
  (byte) memset::c#2 ← phi( memset::@2/(byte) memset::c#3 memset::@5/(byte) memset::c#1 )
  (void*) memset::str#4 ← phi( memset::@2/(void*) memset::str#2 memset::@5/(void*) memset::str#5 )
  (byte*) memset::end#1 ← phi( memset::@2/(byte*) memset::end#0 memset::@5/(byte*) memset::end#2 )
  (byte*) memset::dst#2 ← phi( memset::@2/(byte*) memset::dst#0 memset::@5/(byte*) memset::dst#1 )
  (bool~) memset::$4 ← (byte*) memset::dst#2 != (byte*) memset::end#1
  if((bool~) memset::$4) goto memset::@5
  to:memset::@1
memset::@5: scope:[memset]  from memset::@4
  (void*) memset::str#5 ← phi( memset::@4/(void*) memset::str#4 )
  (byte*) memset::end#2 ← phi( memset::@4/(byte*) memset::end#1 )
  (byte*) memset::dst#3 ← phi( memset::@4/(byte*) memset::dst#2 )
  (byte) memset::c#1 ← phi( memset::@4/(byte) memset::c#2 )
  *((byte*) memset::dst#3) ← (byte) memset::c#1
  (byte*) memset::dst#1 ← ++ (byte*) memset::dst#3
  to:memset::@4
memset::@return: scope:[memset]  from memset::@1
  (void*) memset::return#3 ← phi( memset::@1/(void*) memset::return#0 )
  (void*) memset::return#1 ← (void*) memset::return#3
  return 
  to:@return
@17: scope:[]  from @4
  (byte*) print_screen#0 ← ((byte*)) (number) $400
  (byte*) print_line_cursor#0 ← (byte*) print_screen#0
  (byte*) print_char_cursor#0 ← (byte*) print_line_cursor#0
  to:@34

(void()) print_str_lines((byte*) print_str_lines::str)
print_str_lines: scope:[print_str_lines]  from form_mode::@22 form_mode::@25
  (byte*) print_line_cursor#45 ← phi( form_mode::@22/(byte*) print_line_cursor#12 form_mode::@25/(byte*) print_line_cursor#15 )
  (byte*) print_char_cursor#47 ← phi( form_mode::@22/(byte*) print_char_cursor#13 form_mode::@25/(byte*) print_char_cursor#16 )
  (byte*) print_str_lines::str#5 ← phi( form_mode::@22/(byte*) print_str_lines::str#1 form_mode::@25/(byte*) print_str_lines::str#2 )
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@11
  (byte*) print_line_cursor#37 ← phi( print_str_lines/(byte*) print_line_cursor#45 print_str_lines::@11/(byte*) print_line_cursor#1 )
  (byte*) print_char_cursor#39 ← phi( print_str_lines/(byte*) print_char_cursor#47 print_str_lines::@11/(byte*) print_char_cursor#2 )
  (byte*) print_str_lines::str#3 ← phi( print_str_lines/(byte*) print_str_lines::str#5 print_str_lines::@11/(byte*) print_str_lines::str#6 )
  (bool~) print_str_lines::$2 ← (number) 0 != *((byte*) print_str_lines::str#3)
  if((bool~) print_str_lines::$2) goto print_str_lines::@4
  to:print_str_lines::@return
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@5
  (byte*) print_line_cursor#54 ← phi( print_str_lines::@1/(byte*) print_line_cursor#37 print_str_lines::@5/(byte*) print_line_cursor#46 )
  (byte*) print_char_cursor#37 ← phi( print_str_lines::@1/(byte*) print_char_cursor#39 print_str_lines::@5/(byte*) print_char_cursor#48 )
  (byte*) print_str_lines::str#4 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#3 print_str_lines::@5/(byte*) print_str_lines::str#7 )
  (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4)
  (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4
  (bool~) print_str_lines::$4 ← (number) 0 != (byte) print_str_lines::ch#0
  (bool~) print_str_lines::$0 ← ! (bool~) print_str_lines::$4
  if((bool~) print_str_lines::$0) goto print_str_lines::@5
  to:print_str_lines::@6
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@4 print_str_lines::@6
  (byte*) print_line_cursor#46 ← phi( print_str_lines::@4/(byte*) print_line_cursor#54 print_str_lines::@6/(byte*) print_line_cursor#55 )
  (byte*) print_char_cursor#48 ← phi( print_str_lines::@4/(byte*) print_char_cursor#37 print_str_lines::@6/(byte*) print_char_cursor#1 )
  (byte*) print_str_lines::str#7 ← phi( print_str_lines::@4/(byte*) print_str_lines::str#0 print_str_lines::@6/(byte*) print_str_lines::str#8 )
  (byte) print_str_lines::ch#1 ← phi( print_str_lines::@4/(byte) print_str_lines::ch#0 print_str_lines::@6/(byte) print_str_lines::ch#2 )
  (bool~) print_str_lines::$3 ← (number) 0 != (byte) print_str_lines::ch#1
  if((bool~) print_str_lines::$3) goto print_str_lines::@4
  to:print_str_lines::@7
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@4
  (byte*) print_line_cursor#55 ← phi( print_str_lines::@4/(byte*) print_line_cursor#54 )
  (byte*) print_str_lines::str#8 ← phi( print_str_lines::@4/(byte*) print_str_lines::str#0 )
  (byte*) print_char_cursor#20 ← phi( print_str_lines::@4/(byte*) print_char_cursor#37 )
  (byte) print_str_lines::ch#2 ← phi( print_str_lines::@4/(byte) print_str_lines::ch#0 )
  *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#2
  (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20
  to:print_str_lines::@5
print_str_lines::@7: scope:[print_str_lines]  from print_str_lines::@5
  (byte*) print_str_lines::str#9 ← phi( print_str_lines::@5/(byte*) print_str_lines::str#7 )
  (byte*) print_char_cursor#38 ← phi( print_str_lines::@5/(byte*) print_char_cursor#48 )
  (byte*) print_line_cursor#36 ← phi( print_str_lines::@5/(byte*) print_line_cursor#46 )
  call print_ln 
  to:print_str_lines::@11
print_str_lines::@11: scope:[print_str_lines]  from print_str_lines::@7
  (byte*) print_str_lines::str#6 ← phi( print_str_lines::@7/(byte*) print_str_lines::str#9 )
  (byte*) print_char_cursor#21 ← phi( print_str_lines::@7/(byte*) print_char_cursor#5 )
  (byte*) print_line_cursor#19 ← phi( print_str_lines::@7/(byte*) print_line_cursor#4 )
  (byte*) print_line_cursor#1 ← (byte*) print_line_cursor#19
  (byte*) print_char_cursor#2 ← (byte*) print_char_cursor#21
  to:print_str_lines::@1
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  (byte*) print_line_cursor#20 ← phi( print_str_lines::@1/(byte*) print_line_cursor#37 )
  (byte*) print_char_cursor#22 ← phi( print_str_lines::@1/(byte*) print_char_cursor#39 )
  (byte*) print_char_cursor#3 ← (byte*) print_char_cursor#22
  (byte*) print_line_cursor#2 ← (byte*) print_line_cursor#20
  return 
  to:@return

(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
print_str_at: scope:[print_str_at]  from render_preset_name::@22
  (byte*) print_str_at::at#4 ← phi( render_preset_name::@22/(byte*) print_str_at::at#1 )
  (byte*) print_str_at::str#4 ← phi( render_preset_name::@22/(byte*) print_str_at::str#1 )
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  (byte*) print_str_at::at#3 ← phi( print_str_at/(byte*) print_str_at::at#4 print_str_at::@2/(byte*) print_str_at::at#0 )
  (byte*) print_str_at::str#2 ← phi( print_str_at/(byte*) print_str_at::str#4 print_str_at::@2/(byte*) print_str_at::str#0 )
  (bool~) print_str_at::$0 ← (number) 0 != *((byte*) print_str_at::str#2)
  if((bool~) print_str_at::$0) goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  (byte*) print_str_at::at#2 ← phi( print_str_at::@1/(byte*) print_str_at::at#3 )
  (byte*) print_str_at::str#3 ← phi( print_str_at::@1/(byte*) print_str_at::str#2 )
  *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#3)
  (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2
  (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#3
  to:print_str_at::@1
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  return 
  to:@return

(void()) print_ln()
print_ln: scope:[print_ln]  from print_str_lines::@7
  (byte*) print_char_cursor#40 ← phi( print_str_lines::@7/(byte*) print_char_cursor#38 )
  (byte*) print_line_cursor#38 ← phi( print_str_lines::@7/(byte*) print_line_cursor#36 )
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  (byte*) print_char_cursor#23 ← phi( print_ln/(byte*) print_char_cursor#40 print_ln::@1/(byte*) print_char_cursor#23 )
  (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#38 print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*~) print_ln::$0 ← (byte*) print_line_cursor#21 + (number) $28
  (byte*) print_line_cursor#3 ← (byte*~) print_ln::$0
  (bool~) print_ln::$1 ← (byte*) print_line_cursor#3 < (byte*) print_char_cursor#23
  if((bool~) print_ln::$1) goto print_ln::@1
  to:print_ln::@2
print_ln::@2: scope:[print_ln]  from print_ln::@1
  (byte*) print_line_cursor#22 ← phi( print_ln::@1/(byte*) print_line_cursor#3 )
  (byte*) print_char_cursor#4 ← (byte*) print_line_cursor#22
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@2
  (byte*) print_char_cursor#24 ← phi( print_ln::@2/(byte*) print_char_cursor#4 )
  (byte*) print_line_cursor#23 ← phi( print_ln::@2/(byte*) print_line_cursor#22 )
  (byte*) print_line_cursor#4 ← (byte*) print_line_cursor#23
  (byte*) print_char_cursor#5 ← (byte*) print_char_cursor#24
  return 
  to:@return
@34: scope:[]  from @17
  (byte*) print_char_cursor#72 ← phi( @17/(byte*) print_char_cursor#0 )
  (byte*) print_line_cursor#72 ← phi( @17/(byte*) print_line_cursor#0 )
  (byte*) print_screen#51 ← phi( @17/(byte*) print_screen#0 )
  (byte[]) print_hextab ← (const string) $38
  to:@41

(void()) print_cls()
print_cls: scope:[print_cls]  from form_mode::@21 form_mode::@24
  (byte*) print_screen#9 ← phi( form_mode::@21/(byte*) print_screen#5 form_mode::@24/(byte*) print_screen#6 )
  (void*) memset::str#0 ← (void*)(byte*) print_screen#9
  (byte) memset::c#0 ← (byte) ' '
  (word) memset::num#0 ← (number) $3e8
  call memset 
  (void*) memset::return#2 ← (void*) memset::return#1
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls
  (byte*) print_screen#10 ← phi( print_cls/(byte*) print_screen#9 )
  (byte*) print_line_cursor#5 ← (byte*) print_screen#10
  (byte*) print_char_cursor#6 ← (byte*) print_line_cursor#5
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  (byte*) print_char_cursor#25 ← phi( print_cls::@1/(byte*) print_char_cursor#6 )
  (byte*) print_line_cursor#24 ← phi( print_cls::@1/(byte*) print_line_cursor#5 )
  (byte*) print_line_cursor#6 ← (byte*) print_line_cursor#24
  (byte*) print_char_cursor#7 ← (byte*) print_char_cursor#25
  return 
  to:@return

(void()) print_set_screen((byte*) print_set_screen::screen)
print_set_screen: scope:[print_set_screen]  from form_mode form_mode::@23
  (byte*) print_set_screen::screen#2 ← phi( form_mode/(byte*) print_set_screen::screen#0 form_mode::@23/(byte*) print_set_screen::screen#1 )
  (byte*) print_screen#1 ← (byte*) print_set_screen::screen#2
  (byte*) print_line_cursor#7 ← (byte*) print_screen#1
  (byte*) print_char_cursor#8 ← (byte*) print_line_cursor#7
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  (byte*) print_char_cursor#26 ← phi( print_set_screen/(byte*) print_char_cursor#8 )
  (byte*) print_line_cursor#25 ← phi( print_set_screen/(byte*) print_line_cursor#7 )
  (byte*) print_screen#11 ← phi( print_set_screen/(byte*) print_screen#1 )
  (byte*) print_screen#2 ← (byte*) print_screen#11
  (byte*) print_line_cursor#8 ← (byte*) print_line_cursor#25
  (byte*) print_char_cursor#9 ← (byte*) print_char_cursor#26
  return 
  to:@return
@41: scope:[]  from @34
  (byte*) print_char_cursor#71 ← phi( @34/(byte*) print_char_cursor#72 )
  (byte*) print_line_cursor#71 ← phi( @34/(byte*) print_line_cursor#72 )
  (byte*) print_screen#49 ← phi( @34/(byte*) print_screen#51 )
  (byte) KEY_CRSR_RIGHT ← (number) 2
  (byte) KEY_CRSR_DOWN ← (number) 7
  (byte) KEY_LSHIFT ← (number) $f
  (byte) KEY_RSHIFT ← (number) $34
  (byte) KEY_CTRL ← (number) $3a
  (byte) KEY_SPACE ← (number) $3c
  (byte) KEY_COMMODORE ← (number) $3d
  (byte[8]) keyboard_matrix_row_bitmask ← { (number) $fe, (number) $fd, (number) $fb, (number) $f7, (number) $ef, (number) $df, (number) $bf, (number) $7f }
  (byte[8]) keyboard_matrix_col_bitmask ← { (number) 1, (number) 2, (number) 4, (number) 8, (number) $10, (number) $20, (number) $40, (number) $80 }
  to:@45

(void()) keyboard_init()
keyboard_init: scope:[keyboard_init]  from main
  *((byte*) CIA1_PORT_A_DDR) ← (number) $ff
  *((byte*) CIA1_PORT_B_DDR) ← (number) 0
  to:keyboard_init::@return
keyboard_init::@return: scope:[keyboard_init]  from keyboard_init
  return 
  to:@return

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@8
  (byte) keyboard_matrix_read::rowid#1 ← phi( keyboard_event_scan::@8/(byte) keyboard_matrix_read::rowid#0 )
  *((byte*) CIA1_PORT_A) ← *((byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#1)
  (byte~) keyboard_matrix_read::$0 ← ~ *((byte*) CIA1_PORT_B)
  (byte) keyboard_matrix_read::row_pressed_bits#0 ← (byte~) keyboard_matrix_read::$0
  (byte) keyboard_matrix_read::return#0 ← (byte) keyboard_matrix_read::row_pressed_bits#0
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  (byte) keyboard_matrix_read::return#3 ← phi( keyboard_matrix_read/(byte) keyboard_matrix_read::return#0 )
  (byte) keyboard_matrix_read::return#1 ← (byte) keyboard_matrix_read::return#3
  return 
  to:@return
@45: scope:[]  from @41
  (byte*) print_char_cursor#70 ← phi( @41/(byte*) print_char_cursor#71 )
  (byte*) print_line_cursor#70 ← phi( @41/(byte*) print_line_cursor#71 )
  (byte*) print_screen#47 ← phi( @41/(byte*) print_screen#49 )
  (byte[8]) keyboard_events ← { fill( 8, 0) }
  (byte) keyboard_events_size#0 ← (number) 0
  (byte) keyboard_modifiers#0 ← (number) 0
  (byte) KEY_MODIFIER_LSHIFT ← (number) 1
  (byte) KEY_MODIFIER_RSHIFT ← (number) 2
  (byte) KEY_MODIFIER_CTRL ← (number) 4
  (byte) KEY_MODIFIER_COMMODORE ← (number) 8
  (byte~) $0 ← (byte) KEY_MODIFIER_LSHIFT | (byte) KEY_MODIFIER_RSHIFT
  (byte) KEY_MODIFIER_SHIFT ← (byte~) $0
  (byte[8]) keyboard_scan_values ← { fill( 8, 0) }
  to:@48

(void()) keyboard_event_scan()
keyboard_event_scan: scope:[keyboard_event_scan]  from form_control::@3 gfx_mode::@36
  (byte) keyboard_events_size#99 ← phi( form_control::@3/(byte) keyboard_events_size#48 gfx_mode::@36/(byte) keyboard_events_size#44 )
  (byte) keyboard_event_scan::keycode#0 ← (number) 0
  (byte) keyboard_event_scan::row#0 ← (byte) 0
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@10
  (byte) keyboard_events_size#90 ← phi( keyboard_event_scan/(byte) keyboard_events_size#99 keyboard_event_scan::@10/(byte) keyboard_events_size#100 )
  (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::keycode#0 keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#13 )
  (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) keyboard_event_scan::row#0 keyboard_event_scan::@10/(byte) keyboard_event_scan::row#1 )
  (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  call keyboard_matrix_read 
  (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#1
  to:keyboard_event_scan::@25
keyboard_event_scan::@25: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  (byte) keyboard_events_size#77 ← phi( keyboard_event_scan::@8/(byte) keyboard_events_size#90 )
  (byte) keyboard_event_scan::keycode#7 ← phi( keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#11 )
  (byte) keyboard_event_scan::row#3 ← phi( keyboard_event_scan::@8/(byte) keyboard_event_scan::row#2 )
  (byte) keyboard_matrix_read::return#4 ← phi( keyboard_event_scan::@8/(byte) keyboard_matrix_read::return#2 )
  (byte~) keyboard_event_scan::$12 ← (byte) keyboard_matrix_read::return#4
  (byte) keyboard_event_scan::row_scan#0 ← (byte~) keyboard_event_scan::$12
  (bool~) keyboard_event_scan::$13 ← (byte) keyboard_event_scan::row_scan#0 != *((byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#3)
  if((bool~) keyboard_event_scan::$13) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@21
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#55 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#77 )
  (byte) keyboard_event_scan::keycode#12 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (byte) keyboard_event_scan::row#9 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::row_scan#5 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row_scan#0 )
  (byte) keyboard_event_scan::col#0 ← (byte) 0
  to:keyboard_event_scan::@11
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  (byte) keyboard_events_size#109 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#77 )
  (byte) keyboard_event_scan::row#7 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::row#3 )
  (byte) keyboard_event_scan::keycode#3 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#7 )
  (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (number) 8
  (byte) keyboard_event_scan::keycode#1 ← (number~) keyboard_event_scan::$14
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@20 keyboard_event_scan::@21
  (byte) keyboard_events_size#100 ← phi( keyboard_event_scan::@20/(byte) keyboard_events_size#108 keyboard_event_scan::@21/(byte) keyboard_events_size#109 )
  (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@21/(byte) keyboard_event_scan::keycode#1 )
  (byte) keyboard_event_scan::row#4 ← phi( keyboard_event_scan::@20/(byte) keyboard_event_scan::row#6 keyboard_event_scan::@21/(byte) keyboard_event_scan::row#7 )
  (byte) keyboard_event_scan::row#1 ← (byte) keyboard_event_scan::row#4 + rangenext(0,7)
  (bool~) keyboard_event_scan::$25 ← (byte) keyboard_event_scan::row#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$25) goto keyboard_event_scan::@8
  to:keyboard_event_scan::@23
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@12 keyboard_event_scan::@9
  (byte) keyboard_events_size#37 ← phi( keyboard_event_scan::@12/(byte) keyboard_events_size#54 keyboard_event_scan::@9/(byte) keyboard_events_size#55 )
  (byte) keyboard_event_scan::keycode#8 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::keycode#2 keyboard_event_scan::@9/(byte) keyboard_event_scan::keycode#12 )
  (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@9/(byte) keyboard_event_scan::col#0 )
  (byte) keyboard_event_scan::row#5 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row#8 keyboard_event_scan::@9/(byte) keyboard_event_scan::row#9 )
  (byte) keyboard_event_scan::row_scan#1 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row_scan#4 keyboard_event_scan::@9/(byte) keyboard_event_scan::row_scan#5 )
  (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#1 ^ *((byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#5)
  (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (number) 0
  (bool~) keyboard_event_scan::$18 ← ! (bool~) keyboard_event_scan::$17
  if((bool~) keyboard_event_scan::$18) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@16
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@14 keyboard_event_scan::@16 keyboard_event_scan::@18
  (byte) keyboard_events_size#54 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#37 keyboard_event_scan::@14/(byte) keyboard_events_size#1 keyboard_event_scan::@16/(byte) keyboard_events_size#18 keyboard_event_scan::@18/(byte) keyboard_events_size#2 )
  (byte) keyboard_event_scan::row#8 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#5 keyboard_event_scan::@14/(byte) keyboard_event_scan::row#10 keyboard_event_scan::@16/(byte) keyboard_event_scan::row#11 keyboard_event_scan::@18/(byte) keyboard_event_scan::row#12 )
  (byte) keyboard_event_scan::row_scan#4 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#1 keyboard_event_scan::@14/(byte) keyboard_event_scan::row_scan#7 keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#6 keyboard_event_scan::@18/(byte) keyboard_event_scan::row_scan#8 )
  (byte) keyboard_event_scan::col#3 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::col#2 keyboard_event_scan::@14/(byte) keyboard_event_scan::col#5 keyboard_event_scan::@16/(byte) keyboard_event_scan::col#6 keyboard_event_scan::@18/(byte) keyboard_event_scan::col#7 )
  (byte) keyboard_event_scan::keycode#4 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#8 keyboard_event_scan::@14/(byte) keyboard_event_scan::keycode#5 keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#9 keyboard_event_scan::@18/(byte) keyboard_event_scan::keycode#6 )
  (byte) keyboard_event_scan::keycode#2 ← ++ (byte) keyboard_event_scan::keycode#4
  (byte) keyboard_event_scan::col#1 ← (byte) keyboard_event_scan::col#3 + rangenext(0,7)
  (bool~) keyboard_event_scan::$24 ← (byte) keyboard_event_scan::col#1 != rangelast(0,7)
  if((bool~) keyboard_event_scan::$24) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@20
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  (byte) keyboard_event_scan::row#11 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row#5 )
  (byte) keyboard_event_scan::row_scan#6 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::row_scan#1 )
  (byte) keyboard_event_scan::col#6 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::col#2 )
  (byte) keyboard_event_scan::keycode#9 ← phi( keyboard_event_scan::@11/(byte) keyboard_event_scan::keycode#8 )
  (byte) keyboard_events_size#18 ← phi( keyboard_event_scan::@11/(byte) keyboard_events_size#37 )
  (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#18 != (number) 8
  (bool~) keyboard_event_scan::$20 ← ! (bool~) keyboard_event_scan::$19
  if((bool~) keyboard_event_scan::$20) goto keyboard_event_scan::@12
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  (byte) keyboard_event_scan::row#13 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row#11 )
  (byte) keyboard_events_size#38 ← phi( keyboard_event_scan::@16/(byte) keyboard_events_size#18 )
  (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#9 )
  (byte) keyboard_event_scan::col#4 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::col#6 )
  (byte) keyboard_event_scan::row_scan#2 ← phi( keyboard_event_scan::@16/(byte) keyboard_event_scan::row_scan#6 )
  (byte~) keyboard_event_scan::$21 ← (byte) keyboard_event_scan::row_scan#2 & *((byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#4)
  (byte) keyboard_event_scan::event_type#0 ← (byte~) keyboard_event_scan::$21
  (bool~) keyboard_event_scan::$22 ← (byte) keyboard_event_scan::event_type#0 == (number) 0
  if((bool~) keyboard_event_scan::$22) goto keyboard_event_scan::@14
  to:keyboard_event_scan::@18
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  (byte) keyboard_event_scan::row#10 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#7 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#5 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#19 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#38 )
  (byte) keyboard_event_scan::keycode#5 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#10 )
  (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (number) $40
  *((byte[8]) keyboard_events + (byte) keyboard_events_size#19) ← (number~) keyboard_event_scan::$23
  (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#19
  to:keyboard_event_scan::@12
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  (byte) keyboard_event_scan::row#12 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row#13 )
  (byte) keyboard_event_scan::row_scan#8 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::row_scan#2 )
  (byte) keyboard_event_scan::col#7 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::col#4 )
  (byte) keyboard_events_size#20 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#38 )
  (byte) keyboard_event_scan::keycode#6 ← phi( keyboard_event_scan::@17/(byte) keyboard_event_scan::keycode#10 )
  *((byte[8]) keyboard_events + (byte) keyboard_events_size#20) ← (byte) keyboard_event_scan::keycode#6
  (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#20
  to:keyboard_event_scan::@12
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  (byte) keyboard_events_size#108 ← phi( keyboard_event_scan::@12/(byte) keyboard_events_size#54 )
  (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::keycode#2 )
  (byte) keyboard_event_scan::row#6 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row#8 )
  (byte) keyboard_event_scan::row_scan#3 ← phi( keyboard_event_scan::@12/(byte) keyboard_event_scan::row_scan#4 )
  *((byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#6) ← (byte) keyboard_event_scan::row_scan#3
  to:keyboard_event_scan::@10
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  (byte) keyboard_events_size#118 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#100 )
  (byte) keyboard_modifiers#1 ← (number) 0
  (byte) keyboard_event_pressed::keycode#0 ← (byte) KEY_LSHIFT
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@26
keyboard_event_scan::@26: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  (byte) keyboard_events_size#115 ← phi( keyboard_event_scan::@23/(byte) keyboard_events_size#118 )
  (byte) keyboard_modifiers#34 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#1 )
  (byte) keyboard_event_pressed::return#6 ← phi( keyboard_event_scan::@23/(byte) keyboard_event_pressed::return#0 )
  (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#6
  (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (number) 0
  (bool~) keyboard_event_scan::$2 ← ! (bool~) keyboard_event_scan::$1
  if((bool~) keyboard_event_scan::$2) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@24
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@26
  (byte) keyboard_events_size#110 ← phi( keyboard_event_scan::@24/(byte) keyboard_events_size#114 keyboard_event_scan::@26/(byte) keyboard_events_size#115 )
  (byte) keyboard_modifiers#53 ← phi( keyboard_event_scan::@24/(byte) keyboard_modifiers#2 keyboard_event_scan::@26/(byte) keyboard_modifiers#34 )
  (byte) keyboard_event_pressed::keycode#1 ← (byte) KEY_RSHIFT
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@27
keyboard_event_scan::@27: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  (byte) keyboard_events_size#101 ← phi( keyboard_event_scan::@1/(byte) keyboard_events_size#110 )
  (byte) keyboard_modifiers#35 ← phi( keyboard_event_scan::@1/(byte) keyboard_modifiers#53 )
  (byte) keyboard_event_pressed::return#7 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::return#1 )
  (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#7
  (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (number) 0
  (bool~) keyboard_event_scan::$5 ← ! (bool~) keyboard_event_scan::$4
  if((bool~) keyboard_event_scan::$5) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@5
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@26
  (byte) keyboard_events_size#114 ← phi( keyboard_event_scan::@26/(byte) keyboard_events_size#115 )
  (byte) keyboard_modifiers#17 ← phi( keyboard_event_scan::@26/(byte) keyboard_modifiers#34 )
  (byte~) keyboard_event_scan::$26 ← (byte) keyboard_modifiers#17 | (byte) KEY_MODIFIER_LSHIFT
  (byte) keyboard_modifiers#2 ← (byte~) keyboard_event_scan::$26
  to:keyboard_event_scan::@1
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@27 keyboard_event_scan::@5
  (byte) keyboard_events_size#91 ← phi( keyboard_event_scan::@27/(byte) keyboard_events_size#101 keyboard_event_scan::@5/(byte) keyboard_events_size#102 )
  (byte) keyboard_modifiers#54 ← phi( keyboard_event_scan::@27/(byte) keyboard_modifiers#35 keyboard_event_scan::@5/(byte) keyboard_modifiers#3 )
  (byte) keyboard_event_pressed::keycode#2 ← (byte) KEY_CTRL
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@28
keyboard_event_scan::@28: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  (byte) keyboard_events_size#78 ← phi( keyboard_event_scan::@2/(byte) keyboard_events_size#91 )
  (byte) keyboard_modifiers#36 ← phi( keyboard_event_scan::@2/(byte) keyboard_modifiers#54 )
  (byte) keyboard_event_pressed::return#8 ← phi( keyboard_event_scan::@2/(byte) keyboard_event_pressed::return#2 )
  (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#8
  (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (number) 0
  (bool~) keyboard_event_scan::$8 ← ! (bool~) keyboard_event_scan::$7
  if((bool~) keyboard_event_scan::$8) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@6
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@27
  (byte) keyboard_events_size#102 ← phi( keyboard_event_scan::@27/(byte) keyboard_events_size#101 )
  (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@27/(byte) keyboard_modifiers#35 )
  (byte~) keyboard_event_scan::$27 ← (byte) keyboard_modifiers#18 | (byte) KEY_MODIFIER_RSHIFT
  (byte) keyboard_modifiers#3 ← (byte~) keyboard_event_scan::$27
  to:keyboard_event_scan::@2
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@28 keyboard_event_scan::@6
  (byte) keyboard_events_size#56 ← phi( keyboard_event_scan::@28/(byte) keyboard_events_size#78 keyboard_event_scan::@6/(byte) keyboard_events_size#79 )
  (byte) keyboard_modifiers#55 ← phi( keyboard_event_scan::@28/(byte) keyboard_modifiers#36 keyboard_event_scan::@6/(byte) keyboard_modifiers#4 )
  (byte) keyboard_event_pressed::keycode#3 ← (byte) KEY_COMMODORE
  call keyboard_event_pressed 
  (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#5
  to:keyboard_event_scan::@29
keyboard_event_scan::@29: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  (byte) keyboard_events_size#39 ← phi( keyboard_event_scan::@3/(byte) keyboard_events_size#56 )
  (byte) keyboard_modifiers#37 ← phi( keyboard_event_scan::@3/(byte) keyboard_modifiers#55 )
  (byte) keyboard_event_pressed::return#9 ← phi( keyboard_event_scan::@3/(byte) keyboard_event_pressed::return#3 )
  (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#9
  (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (number) 0
  (bool~) keyboard_event_scan::$11 ← ! (bool~) keyboard_event_scan::$10
  if((bool~) keyboard_event_scan::$11) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@7
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@28
  (byte) keyboard_events_size#79 ← phi( keyboard_event_scan::@28/(byte) keyboard_events_size#78 )
  (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@28/(byte) keyboard_modifiers#36 )
  (byte~) keyboard_event_scan::$28 ← (byte) keyboard_modifiers#19 | (byte) KEY_MODIFIER_CTRL
  (byte) keyboard_modifiers#4 ← (byte~) keyboard_event_scan::$28
  to:keyboard_event_scan::@3
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  (byte) keyboard_events_size#40 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#39 )
  (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#37 )
  (byte~) keyboard_event_scan::$29 ← (byte) keyboard_modifiers#20 | (byte) KEY_MODIFIER_COMMODORE
  (byte) keyboard_modifiers#5 ← (byte~) keyboard_event_scan::$29
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@29 keyboard_event_scan::@7
  (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@29/(byte) keyboard_modifiers#37 keyboard_event_scan::@7/(byte) keyboard_modifiers#5 )
  (byte) keyboard_events_size#21 ← phi( keyboard_event_scan::@29/(byte) keyboard_events_size#39 keyboard_event_scan::@7/(byte) keyboard_events_size#40 )
  (byte) keyboard_events_size#3 ← (byte) keyboard_events_size#21
  (byte) keyboard_modifiers#6 ← (byte) keyboard_modifiers#21
  return 
  to:@return

(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@2 keyboard_event_scan::@23 keyboard_event_scan::@3
  (byte) keyboard_event_pressed::keycode#4 ← phi( keyboard_event_scan::@1/(byte) keyboard_event_pressed::keycode#1 keyboard_event_scan::@2/(byte) keyboard_event_pressed::keycode#2 keyboard_event_scan::@23/(byte) keyboard_event_pressed::keycode#0 keyboard_event_scan::@3/(byte) keyboard_event_pressed::keycode#3 )
  (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (number) 3
  (byte) keyboard_event_pressed::row_bits#0 ← *((byte[8]) keyboard_scan_values + (byte~) keyboard_event_pressed::$0)
  (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (number) 7
  (byte~) keyboard_event_pressed::$2 ← (byte) keyboard_event_pressed::row_bits#0 & *((byte[8]) keyboard_matrix_col_bitmask + (number~) keyboard_event_pressed::$1)
  (byte) keyboard_event_pressed::return#4 ← (byte~) keyboard_event_pressed::$2
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  (byte) keyboard_event_pressed::return#10 ← phi( keyboard_event_pressed/(byte) keyboard_event_pressed::return#4 )
  (byte) keyboard_event_pressed::return#5 ← (byte) keyboard_event_pressed::return#10
  return 
  to:@return

(byte()) keyboard_event_get()
keyboard_event_get: scope:[keyboard_event_get]  from form_control::@34 gfx_mode::@51
  (byte) keyboard_events_size#22 ← phi( form_control::@34/(byte) keyboard_events_size#14 gfx_mode::@51/(byte) keyboard_events_size#9 )
  (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#22 == (number) 0
  if((bool~) keyboard_event_get::$0) goto keyboard_event_get::@1
  to:keyboard_event_get::@3
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#41 ← phi( keyboard_event_get/(byte) keyboard_events_size#22 )
  (byte) keyboard_event_get::return#0 ← (number) $ff
  to:keyboard_event_get::@return
keyboard_event_get::@3: scope:[keyboard_event_get]  from keyboard_event_get
  (byte) keyboard_events_size#23 ← phi( keyboard_event_get/(byte) keyboard_events_size#22 )
  (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#23
  (byte) keyboard_event_get::return#1 ← *((byte[8]) keyboard_events + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get::@1 keyboard_event_get::@3
  (byte) keyboard_events_size#24 ← phi( keyboard_event_get::@1/(byte) keyboard_events_size#41 keyboard_event_get::@3/(byte) keyboard_events_size#4 )
  (byte) keyboard_event_get::return#5 ← phi( keyboard_event_get::@1/(byte) keyboard_event_get::return#0 keyboard_event_get::@3/(byte) keyboard_event_get::return#1 )
  (byte) keyboard_event_get::return#2 ← (byte) keyboard_event_get::return#5
  (byte) keyboard_events_size#5 ← (byte) keyboard_events_size#24
  return 
  to:@return
@48: scope:[]  from @45
  (byte) keyboard_modifiers#95 ← phi( @45/(byte) keyboard_modifiers#0 )
  (byte) keyboard_events_size#111 ← phi( @45/(byte) keyboard_events_size#0 )
  (byte*) print_char_cursor#68 ← phi( @45/(byte*) print_char_cursor#70 )
  (byte*) print_line_cursor#68 ← phi( @45/(byte*) print_line_cursor#70 )
  (byte*) print_screen#45 ← phi( @45/(byte*) print_screen#47 )
  (byte[$100]) bitmap_plot_xlo ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_xhi ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_ylo ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_yhi ← { fill( $100, 0) }
  (byte[$100]) bitmap_plot_bit ← { fill( $100, 0) }
  to:@57

(void()) bitmap_init((byte*) bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from gfx_init_vic_bitmap
  (byte*) bitmap_init::bitmap#2 ← phi( gfx_init_vic_bitmap/(byte*) bitmap_init::bitmap#0 )
  (byte) bitmap_init::bits#0 ← (number) $80
  (byte) bitmap_init::x#0 ← (byte) 0
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) bitmap_init::bits#0 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  (byte*) bitmap_init::bitmap#1 ← phi( bitmap_init/(byte*) bitmap_init::bitmap#2 bitmap_init::@2/(byte*) bitmap_init::bitmap#3 )
  (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) bitmap_init::x#0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  (number~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (number) $f8
  *((byte[$100]) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (number~) bitmap_init::$0
  (byte~) bitmap_init::$1 ← > (byte*) bitmap_init::bitmap#1
  *((byte[$100]) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$1
  *((byte[$100]) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  (byte~) bitmap_init::$2 ← (byte) bitmap_init::bits#3 >> (number) 1
  (byte) bitmap_init::bits#1 ← (byte~) bitmap_init::$2
  (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (number) 0
  (bool~) bitmap_init::$4 ← ! (bool~) bitmap_init::$3
  if((bool~) bitmap_init::$4) goto bitmap_init::@2
  to:bitmap_init::@3
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@3
  (byte) bitmap_init::bits#4 ← phi( bitmap_init::@1/(byte) bitmap_init::bits#1 bitmap_init::@3/(byte) bitmap_init::bits#2 )
  (byte*) bitmap_init::bitmap#3 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#1 bitmap_init::@3/(byte*) bitmap_init::bitmap#4 )
  (byte) bitmap_init::x#3 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 bitmap_init::@3/(byte) bitmap_init::x#4 )
  (byte) bitmap_init::x#1 ← (byte) bitmap_init::x#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$5 ← (byte) bitmap_init::x#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$5) goto bitmap_init::@1
  to:bitmap_init::@4
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@1
  (byte*) bitmap_init::bitmap#4 ← phi( bitmap_init::@1/(byte*) bitmap_init::bitmap#1 )
  (byte) bitmap_init::x#4 ← phi( bitmap_init::@1/(byte) bitmap_init::x#2 )
  (byte) bitmap_init::bits#2 ← (number) $80
  to:bitmap_init::@2
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@2
  (byte*) bitmap_init::yoffs#0 ← ((byte*)) (number) 0
  (byte) bitmap_init::y#0 ← (byte) 0
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@4 bitmap_init::@6
  (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@4/(byte*) bitmap_init::yoffs#0 bitmap_init::@6/(byte*) bitmap_init::yoffs#4 )
  (byte) bitmap_init::y#2 ← phi( bitmap_init::@4/(byte) bitmap_init::y#0 bitmap_init::@6/(byte) bitmap_init::y#1 )
  (number~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (number) 7
  (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2
  (number~) bitmap_init::$8 ← (number~) bitmap_init::$6 | (byte~) bitmap_init::$7
  *((byte[$100]) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (number~) bitmap_init::$8
  (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2
  *((byte[$100]) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9
  (number~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (number) 7
  (bool~) bitmap_init::$11 ← (number~) bitmap_init::$10 == (number) 7
  (bool~) bitmap_init::$12 ← ! (bool~) bitmap_init::$11
  if((bool~) bitmap_init::$12) goto bitmap_init::@6
  to:bitmap_init::@7
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@5 bitmap_init::@7
  (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 bitmap_init::@7/(byte*) bitmap_init::yoffs#1 )
  (byte) bitmap_init::y#3 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 bitmap_init::@7/(byte) bitmap_init::y#4 )
  (byte) bitmap_init::y#1 ← (byte) bitmap_init::y#3 + rangenext(0,$ff)
  (bool~) bitmap_init::$14 ← (byte) bitmap_init::y#1 != rangelast(0,$ff)
  if((bool~) bitmap_init::$14) goto bitmap_init::@5
  to:bitmap_init::@return
bitmap_init::@7: scope:[bitmap_init]  from bitmap_init::@5
  (byte) bitmap_init::y#4 ← phi( bitmap_init::@5/(byte) bitmap_init::y#2 )
  (byte*) bitmap_init::yoffs#3 ← phi( bitmap_init::@5/(byte*) bitmap_init::yoffs#2 )
  (byte*~) bitmap_init::$13 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
  (byte*) bitmap_init::yoffs#1 ← (byte*~) bitmap_init::$13
  to:bitmap_init::@6
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@6
  return 
  to:@return

(void()) bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from gfx_init_vic_bitmap::@7
  (byte*~) bitmap_clear::$0 ← ((byte*)) { *((byte[$100]) bitmap_plot_xhi + (number) 0), *((byte[$100]) bitmap_plot_xlo + (number) 0) }
  (byte*) bitmap_clear::bitmap#0 ← (byte*~) bitmap_clear::$0
  (byte) bitmap_clear::y#0 ← (byte) 0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) bitmap_clear::y#0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*) bitmap_clear::bitmap#0 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#4 )
  (byte) bitmap_clear::x#0 ← (byte) 0
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  (byte) bitmap_clear::y#3 ← phi( bitmap_clear::@1/(byte) bitmap_clear::y#4 bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) bitmap_clear::x#0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  *((byte*) bitmap_clear::bitmap#2) ← (number) 0
  (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  (byte) bitmap_clear::x#1 ← (byte) bitmap_clear::x#2 + rangenext(0,$c7)
  (bool~) bitmap_clear::$1 ← (byte) bitmap_clear::x#1 != rangelast(0,$c7)
  if((bool~) bitmap_clear::$1) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  (byte*) bitmap_clear::bitmap#4 ← phi( bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  (byte) bitmap_clear::y#2 ← phi( bitmap_clear::@2/(byte) bitmap_clear::y#3 )
  (byte) bitmap_clear::y#1 ← (byte) bitmap_clear::y#2 + rangenext(0,$27)
  (bool~) bitmap_clear::$2 ← (byte) bitmap_clear::y#1 != rangelast(0,$27)
  if((bool~) bitmap_clear::$2) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  return 
  to:@return

(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  (byte) bitmap_plot::y#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::y#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::y#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::y#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::y#2 )
  (byte) bitmap_plot::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::x#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::x#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::x#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::x#2 )
  (word) bitmap_plot::plotter_x#0 ← ((word)) { *((byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4), *((byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4) }
  (word) bitmap_plot::plotter_y#0 ← ((word)) { *((byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4), *((byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4) }
  (word~) bitmap_plot::$0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0
  (byte*) bitmap_plot::plotter#0 ← ((byte*)) (word~) bitmap_plot::$0
  (byte~) bitmap_plot::$1 ← *((byte*) bitmap_plot::plotter#0) | *((byte[$100]) bitmap_plot_bit + (byte) bitmap_plot::x#4)
  *((byte*) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  return 
  to:@return

(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
bitmap_line: scope:[bitmap_line]  from gfx_init_vic_bitmap::@2
  (byte) bitmap_line::y1#13 ← phi( gfx_init_vic_bitmap::@2/(byte) bitmap_line::y1#0 )
  (byte) bitmap_line::y0#13 ← phi( gfx_init_vic_bitmap::@2/(byte) bitmap_line::y0#0 )
  (byte) bitmap_line::x1#1 ← phi( gfx_init_vic_bitmap::@2/(byte) bitmap_line::x1#0 )
  (byte) bitmap_line::x0#1 ← phi( gfx_init_vic_bitmap::@2/(byte) bitmap_line::x0#0 )
  (byte) bitmap_line::xd#0 ← (byte) 0
  (byte) bitmap_line::yd#0 ← (byte) 0
  (bool~) bitmap_line::$0 ← (byte) bitmap_line::x0#1 < (byte) bitmap_line::x1#1
  if((bool~) bitmap_line::$0) goto bitmap_line::@1
  to:bitmap_line::@3
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  (byte) bitmap_line::y1#1 ← phi( bitmap_line/(byte) bitmap_line::y1#13 )
  (byte) bitmap_line::y0#1 ← phi( bitmap_line/(byte) bitmap_line::y0#13 )
  (byte) bitmap_line::x0#2 ← phi( bitmap_line/(byte) bitmap_line::x0#1 )
  (byte) bitmap_line::x1#2 ← phi( bitmap_line/(byte) bitmap_line::x1#1 )
  (byte~) bitmap_line::$11 ← (byte) bitmap_line::x1#2 - (byte) bitmap_line::x0#2
  (byte) bitmap_line::xd#1 ← (byte~) bitmap_line::$11
  (bool~) bitmap_line::$12 ← (byte) bitmap_line::y0#1 < (byte) bitmap_line::y1#1
  if((bool~) bitmap_line::$12) goto bitmap_line::@20
  to:bitmap_line::@7
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line
  (byte) bitmap_line::y1#2 ← phi( bitmap_line/(byte) bitmap_line::y1#13 )
  (byte) bitmap_line::y0#2 ← phi( bitmap_line/(byte) bitmap_line::y0#13 )
  (byte) bitmap_line::x1#3 ← phi( bitmap_line/(byte) bitmap_line::x1#1 )
  (byte) bitmap_line::x0#3 ← phi( bitmap_line/(byte) bitmap_line::x0#1 )
  (byte~) bitmap_line::$1 ← (byte) bitmap_line::x0#3 - (byte) bitmap_line::x1#3
  (byte) bitmap_line::xd#2 ← (byte~) bitmap_line::$1
  (bool~) bitmap_line::$2 ← (byte) bitmap_line::y0#2 < (byte) bitmap_line::y1#2
  if((bool~) bitmap_line::$2) goto bitmap_line::@10
  to:bitmap_line::@4
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@3
  (byte) bitmap_line::x0#11 ← phi( bitmap_line::@3/(byte) bitmap_line::x0#3 )
  (byte) bitmap_line::x1#11 ← phi( bitmap_line::@3/(byte) bitmap_line::x1#3 )
  (byte) bitmap_line::xd#3 ← phi( bitmap_line::@3/(byte) bitmap_line::xd#2 )
  (byte) bitmap_line::y0#3 ← phi( bitmap_line::@3/(byte) bitmap_line::y0#2 )
  (byte) bitmap_line::y1#3 ← phi( bitmap_line::@3/(byte) bitmap_line::y1#2 )
  (byte~) bitmap_line::$7 ← (byte) bitmap_line::y1#3 - (byte) bitmap_line::y0#3
  (byte) bitmap_line::yd#1 ← (byte~) bitmap_line::$7
  (bool~) bitmap_line::$8 ← (byte) bitmap_line::yd#1 < (byte) bitmap_line::xd#3
  if((bool~) bitmap_line::$8) goto bitmap_line::@15
  to:bitmap_line::@17
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  (byte) bitmap_line::x0#10 ← phi( bitmap_line::@3/(byte) bitmap_line::x0#3 )
  (byte) bitmap_line::x1#10 ← phi( bitmap_line::@3/(byte) bitmap_line::x1#3 )
  (byte) bitmap_line::xd#4 ← phi( bitmap_line::@3/(byte) bitmap_line::xd#2 )
  (byte) bitmap_line::y1#4 ← phi( bitmap_line::@3/(byte) bitmap_line::y1#2 )
  (byte) bitmap_line::y0#4 ← phi( bitmap_line::@3/(byte) bitmap_line::y0#2 )
  (byte~) bitmap_line::$3 ← (byte) bitmap_line::y0#4 - (byte) bitmap_line::y1#4
  (byte) bitmap_line::yd#2 ← (byte~) bitmap_line::$3
  (bool~) bitmap_line::$4 ← (byte) bitmap_line::yd#2 < (byte) bitmap_line::xd#4
  if((bool~) bitmap_line::$4) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@4
  (byte) bitmap_line::yd#5 ← phi( bitmap_line::@4/(byte) bitmap_line::yd#2 )
  (byte) bitmap_line::xd#5 ← phi( bitmap_line::@4/(byte) bitmap_line::xd#4 )
  (byte) bitmap_line::x0#4 ← phi( bitmap_line::@4/(byte) bitmap_line::x0#10 )
  (byte) bitmap_line::y1#5 ← phi( bitmap_line::@4/(byte) bitmap_line::y1#4 )
  (byte) bitmap_line::x1#4 ← phi( bitmap_line::@4/(byte) bitmap_line::x1#10 )
  (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#4
  (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#5
  (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#4
  (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#5
  (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#5
  call bitmap_line_xdyi 
  to:bitmap_line::@29
bitmap_line::@29: scope:[bitmap_line]  from bitmap_line::@11
  to:bitmap_line::@return
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@4
  (byte) bitmap_line::xd#6 ← phi( bitmap_line::@4/(byte) bitmap_line::xd#4 )
  (byte) bitmap_line::yd#6 ← phi( bitmap_line::@4/(byte) bitmap_line::yd#2 )
  (byte) bitmap_line::y0#5 ← phi( bitmap_line::@4/(byte) bitmap_line::y0#4 )
  (byte) bitmap_line::x1#5 ← phi( bitmap_line::@4/(byte) bitmap_line::x1#10 )
  (byte) bitmap_line::y1#6 ← phi( bitmap_line::@4/(byte) bitmap_line::y1#4 )
  (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#6
  (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#5
  (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#5
  (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#6
  (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#6
  call bitmap_line_ydxi 
  to:bitmap_line::@30
bitmap_line::@30: scope:[bitmap_line]  from bitmap_line::@5
  to:bitmap_line::@return
bitmap_line::@15: scope:[bitmap_line]  from bitmap_line::@10
  (byte) bitmap_line::yd#7 ← phi( bitmap_line::@10/(byte) bitmap_line::yd#1 )
  (byte) bitmap_line::xd#7 ← phi( bitmap_line::@10/(byte) bitmap_line::xd#3 )
  (byte) bitmap_line::x0#5 ← phi( bitmap_line::@10/(byte) bitmap_line::x0#11 )
  (byte) bitmap_line::y1#7 ← phi( bitmap_line::@10/(byte) bitmap_line::y1#3 )
  (byte) bitmap_line::x1#6 ← phi( bitmap_line::@10/(byte) bitmap_line::x1#11 )
  (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#6
  (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#7
  (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#5
  (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#7
  (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#7
  call bitmap_line_xdyd 
  to:bitmap_line::@31
bitmap_line::@31: scope:[bitmap_line]  from bitmap_line::@15
  to:bitmap_line::@return
bitmap_line::@17: scope:[bitmap_line]  from bitmap_line::@10
  (byte) bitmap_line::xd#8 ← phi( bitmap_line::@10/(byte) bitmap_line::xd#3 )
  (byte) bitmap_line::yd#8 ← phi( bitmap_line::@10/(byte) bitmap_line::yd#1 )
  (byte) bitmap_line::y1#8 ← phi( bitmap_line::@10/(byte) bitmap_line::y1#3 )
  (byte) bitmap_line::x0#6 ← phi( bitmap_line::@10/(byte) bitmap_line::x0#11 )
  (byte) bitmap_line::y0#6 ← phi( bitmap_line::@10/(byte) bitmap_line::y0#3 )
  (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#6
  (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#6
  (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#8
  (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#8
  (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#8
  call bitmap_line_ydxd 
  to:bitmap_line::@32
bitmap_line::@32: scope:[bitmap_line]  from bitmap_line::@17
  to:bitmap_line::@return
bitmap_line::@20: scope:[bitmap_line]  from bitmap_line::@1
  (byte) bitmap_line::x1#13 ← phi( bitmap_line::@1/(byte) bitmap_line::x1#2 )
  (byte) bitmap_line::x0#13 ← phi( bitmap_line::@1/(byte) bitmap_line::x0#2 )
  (byte) bitmap_line::xd#9 ← phi( bitmap_line::@1/(byte) bitmap_line::xd#1 )
  (byte) bitmap_line::y0#7 ← phi( bitmap_line::@1/(byte) bitmap_line::y0#1 )
  (byte) bitmap_line::y1#9 ← phi( bitmap_line::@1/(byte) bitmap_line::y1#1 )
  (byte~) bitmap_line::$17 ← (byte) bitmap_line::y1#9 - (byte) bitmap_line::y0#7
  (byte) bitmap_line::yd#3 ← (byte~) bitmap_line::$17
  (bool~) bitmap_line::$18 ← (byte) bitmap_line::yd#3 < (byte) bitmap_line::xd#9
  if((bool~) bitmap_line::$18) goto bitmap_line::@25
  to:bitmap_line::@27
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@1
  (byte) bitmap_line::x1#12 ← phi( bitmap_line::@1/(byte) bitmap_line::x1#2 )
  (byte) bitmap_line::x0#12 ← phi( bitmap_line::@1/(byte) bitmap_line::x0#2 )
  (byte) bitmap_line::xd#10 ← phi( bitmap_line::@1/(byte) bitmap_line::xd#1 )
  (byte) bitmap_line::y1#10 ← phi( bitmap_line::@1/(byte) bitmap_line::y1#1 )
  (byte) bitmap_line::y0#8 ← phi( bitmap_line::@1/(byte) bitmap_line::y0#1 )
  (byte~) bitmap_line::$13 ← (byte) bitmap_line::y0#8 - (byte) bitmap_line::y1#10
  (byte) bitmap_line::yd#4 ← (byte~) bitmap_line::$13
  (bool~) bitmap_line::$14 ← (byte) bitmap_line::yd#4 < (byte) bitmap_line::xd#10
  if((bool~) bitmap_line::$14) goto bitmap_line::@21
  to:bitmap_line::@8
bitmap_line::@21: scope:[bitmap_line]  from bitmap_line::@7
  (byte) bitmap_line::yd#9 ← phi( bitmap_line::@7/(byte) bitmap_line::yd#4 )
  (byte) bitmap_line::xd#11 ← phi( bitmap_line::@7/(byte) bitmap_line::xd#10 )
  (byte) bitmap_line::x1#7 ← phi( bitmap_line::@7/(byte) bitmap_line::x1#12 )
  (byte) bitmap_line::y0#9 ← phi( bitmap_line::@7/(byte) bitmap_line::y0#8 )
  (byte) bitmap_line::x0#7 ← phi( bitmap_line::@7/(byte) bitmap_line::x0#12 )
  (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#7
  (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#9
  (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#7
  (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#11
  (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#9
  call bitmap_line_xdyd 
  to:bitmap_line::@33
bitmap_line::@33: scope:[bitmap_line]  from bitmap_line::@21
  to:bitmap_line::@return
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@7
  (byte) bitmap_line::xd#12 ← phi( bitmap_line::@7/(byte) bitmap_line::xd#10 )
  (byte) bitmap_line::yd#10 ← phi( bitmap_line::@7/(byte) bitmap_line::yd#4 )
  (byte) bitmap_line::y0#10 ← phi( bitmap_line::@7/(byte) bitmap_line::y0#8 )
  (byte) bitmap_line::x1#8 ← phi( bitmap_line::@7/(byte) bitmap_line::x1#12 )
  (byte) bitmap_line::y1#11 ← phi( bitmap_line::@7/(byte) bitmap_line::y1#10 )
  (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#11
  (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#8
  (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#10
  (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#12
  call bitmap_line_ydxd 
  to:bitmap_line::@34
bitmap_line::@34: scope:[bitmap_line]  from bitmap_line::@8
  to:bitmap_line::@return
bitmap_line::@25: scope:[bitmap_line]  from bitmap_line::@20
  (byte) bitmap_line::yd#11 ← phi( bitmap_line::@20/(byte) bitmap_line::yd#3 )
  (byte) bitmap_line::xd#13 ← phi( bitmap_line::@20/(byte) bitmap_line::xd#9 )
  (byte) bitmap_line::x1#9 ← phi( bitmap_line::@20/(byte) bitmap_line::x1#13 )
  (byte) bitmap_line::y0#11 ← phi( bitmap_line::@20/(byte) bitmap_line::y0#7 )
  (byte) bitmap_line::x0#8 ← phi( bitmap_line::@20/(byte) bitmap_line::x0#13 )
  (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#8
  (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#11
  (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#9
  (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#13
  (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  call bitmap_line_xdyi 
  to:bitmap_line::@35
bitmap_line::@35: scope:[bitmap_line]  from bitmap_line::@25
  to:bitmap_line::@return
bitmap_line::@27: scope:[bitmap_line]  from bitmap_line::@20
  (byte) bitmap_line::xd#14 ← phi( bitmap_line::@20/(byte) bitmap_line::xd#9 )
  (byte) bitmap_line::yd#12 ← phi( bitmap_line::@20/(byte) bitmap_line::yd#3 )
  (byte) bitmap_line::y1#12 ← phi( bitmap_line::@20/(byte) bitmap_line::y1#9 )
  (byte) bitmap_line::x0#9 ← phi( bitmap_line::@20/(byte) bitmap_line::x0#13 )
  (byte) bitmap_line::y0#12 ← phi( bitmap_line::@20/(byte) bitmap_line::y0#7 )
  (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#12
  (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#9
  (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#12
  (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#12
  (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#14
  call bitmap_line_ydxi 
  to:bitmap_line::@36
bitmap_line::@36: scope:[bitmap_line]  from bitmap_line::@27
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@29 bitmap_line::@30 bitmap_line::@31 bitmap_line::@32 bitmap_line::@33 bitmap_line::@34 bitmap_line::@35 bitmap_line::@36
  return 
  to:@return

(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@11 bitmap_line::@25
  (byte) bitmap_line_xdyi::x1#6 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::x1#0 bitmap_line::@25/(byte) bitmap_line_xdyi::x1#1 )
  (byte) bitmap_line_xdyi::xd#5 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::xd#0 bitmap_line::@25/(byte) bitmap_line_xdyi::xd#1 )
  (byte) bitmap_line_xdyi::y#5 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::y#0 bitmap_line::@25/(byte) bitmap_line_xdyi::y#1 )
  (byte) bitmap_line_xdyi::x#6 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::x#0 bitmap_line::@25/(byte) bitmap_line_xdyi::x#1 )
  (byte) bitmap_line_xdyi::yd#2 ← phi( bitmap_line::@11/(byte) bitmap_line_xdyi::yd#0 bitmap_line::@25/(byte) bitmap_line_xdyi::yd#1 )
  (byte~) bitmap_line_xdyi::$0 ← (byte) bitmap_line_xdyi::yd#2 >> (number) 1
  (byte) bitmap_line_xdyi::e#0 ← (byte~) bitmap_line_xdyi::$0
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  (byte) bitmap_line_xdyi::x1#5 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x1#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x1#2 )
  (byte) bitmap_line_xdyi::xd#4 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::xd#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::xd#6 )
  (byte) bitmap_line_xdyi::yd#4 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::yd#2 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::yd#5 )
  (byte) bitmap_line_xdyi::e#5 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::e#0 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::e#6 )
  (byte) bitmap_line_xdyi::y#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::y#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::y#6 )
  (byte) bitmap_line_xdyi::x#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x#5 )
  (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3
  (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
  call bitmap_plot 
  to:bitmap_line_xdyi::@5
bitmap_line_xdyi::@5: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  (byte) bitmap_line_xdyi::y#7 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::y#3 )
  (byte) bitmap_line_xdyi::x1#4 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::x1#5 )
  (byte) bitmap_line_xdyi::xd#2 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::xd#4 )
  (byte) bitmap_line_xdyi::yd#3 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::yd#4 )
  (byte) bitmap_line_xdyi::e#3 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::e#5 )
  (byte) bitmap_line_xdyi::x#4 ← phi( bitmap_line_xdyi::@1/(byte) bitmap_line_xdyi::x#3 )
  (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#4
  (byte~) bitmap_line_xdyi::$2 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#3
  (byte) bitmap_line_xdyi::e#1 ← (byte~) bitmap_line_xdyi::$2
  (bool~) bitmap_line_xdyi::$3 ← (byte) bitmap_line_xdyi::xd#2 < (byte) bitmap_line_xdyi::e#1
  (bool~) bitmap_line_xdyi::$4 ← ! (bool~) bitmap_line_xdyi::$3
  if((bool~) bitmap_line_xdyi::$4) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@5
  (byte) bitmap_line_xdyi::xd#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::xd#3 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::xd#2 )
  (byte) bitmap_line_xdyi::yd#5 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::yd#6 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::yd#3 )
  (byte) bitmap_line_xdyi::e#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::e#2 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::e#1 )
  (byte) bitmap_line_xdyi::y#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::y#2 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::y#7 )
  (byte) bitmap_line_xdyi::x#5 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::x#7 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x#2 )
  (byte) bitmap_line_xdyi::x1#2 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::x1#3 bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x1#4 )
  (number~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (number) 1
  (bool~) bitmap_line_xdyi::$7 ← (byte) bitmap_line_xdyi::x#5 != (number~) bitmap_line_xdyi::$6
  if((bool~) bitmap_line_xdyi::$7) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@5
  (byte) bitmap_line_xdyi::yd#6 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::yd#3 )
  (byte) bitmap_line_xdyi::x#7 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x#2 )
  (byte) bitmap_line_xdyi::x1#3 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::x1#4 )
  (byte) bitmap_line_xdyi::xd#3 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::xd#2 )
  (byte) bitmap_line_xdyi::e#4 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::e#1 )
  (byte) bitmap_line_xdyi::y#4 ← phi( bitmap_line_xdyi::@5/(byte) bitmap_line_xdyi::y#7 )
  (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#4
  (byte~) bitmap_line_xdyi::$5 ← (byte) bitmap_line_xdyi::e#4 - (byte) bitmap_line_xdyi::xd#3
  (byte) bitmap_line_xdyi::e#2 ← (byte~) bitmap_line_xdyi::$5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  return 
  to:@return

(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@15 bitmap_line::@21
  (byte) bitmap_line_xdyd::x1#6 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::x1#0 bitmap_line::@21/(byte) bitmap_line_xdyd::x1#1 )
  (byte) bitmap_line_xdyd::xd#5 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::xd#0 bitmap_line::@21/(byte) bitmap_line_xdyd::xd#1 )
  (byte) bitmap_line_xdyd::y#5 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::y#0 bitmap_line::@21/(byte) bitmap_line_xdyd::y#1 )
  (byte) bitmap_line_xdyd::x#6 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::x#0 bitmap_line::@21/(byte) bitmap_line_xdyd::x#1 )
  (byte) bitmap_line_xdyd::yd#2 ← phi( bitmap_line::@15/(byte) bitmap_line_xdyd::yd#0 bitmap_line::@21/(byte) bitmap_line_xdyd::yd#1 )
  (byte~) bitmap_line_xdyd::$0 ← (byte) bitmap_line_xdyd::yd#2 >> (number) 1
  (byte) bitmap_line_xdyd::e#0 ← (byte~) bitmap_line_xdyd::$0
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  (byte) bitmap_line_xdyd::x1#5 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x1#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x1#2 )
  (byte) bitmap_line_xdyd::xd#4 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::xd#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::xd#6 )
  (byte) bitmap_line_xdyd::yd#4 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::yd#2 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::yd#5 )
  (byte) bitmap_line_xdyd::e#5 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::e#0 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::e#6 )
  (byte) bitmap_line_xdyd::y#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::y#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::y#6 )
  (byte) bitmap_line_xdyd::x#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x#5 )
  (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3
  (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
  call bitmap_plot 
  to:bitmap_line_xdyd::@5
bitmap_line_xdyd::@5: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  (byte) bitmap_line_xdyd::y#7 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::y#3 )
  (byte) bitmap_line_xdyd::x1#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::x1#5 )
  (byte) bitmap_line_xdyd::xd#2 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::xd#4 )
  (byte) bitmap_line_xdyd::yd#3 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::yd#4 )
  (byte) bitmap_line_xdyd::e#3 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::e#5 )
  (byte) bitmap_line_xdyd::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_line_xdyd::x#3 )
  (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#4
  (byte~) bitmap_line_xdyd::$2 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#3
  (byte) bitmap_line_xdyd::e#1 ← (byte~) bitmap_line_xdyd::$2
  (bool~) bitmap_line_xdyd::$3 ← (byte) bitmap_line_xdyd::xd#2 < (byte) bitmap_line_xdyd::e#1
  (bool~) bitmap_line_xdyd::$4 ← ! (bool~) bitmap_line_xdyd::$3
  if((bool~) bitmap_line_xdyd::$4) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@5
  (byte) bitmap_line_xdyd::xd#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::xd#3 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::xd#2 )
  (byte) bitmap_line_xdyd::yd#5 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::yd#6 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::yd#3 )
  (byte) bitmap_line_xdyd::e#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::e#2 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::e#1 )
  (byte) bitmap_line_xdyd::y#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::y#2 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::y#7 )
  (byte) bitmap_line_xdyd::x#5 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::x#7 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x#2 )
  (byte) bitmap_line_xdyd::x1#2 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::x1#3 bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x1#4 )
  (number~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (number) 1
  (bool~) bitmap_line_xdyd::$7 ← (byte) bitmap_line_xdyd::x#5 != (number~) bitmap_line_xdyd::$6
  if((bool~) bitmap_line_xdyd::$7) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@5
  (byte) bitmap_line_xdyd::yd#6 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::yd#3 )
  (byte) bitmap_line_xdyd::x#7 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x#2 )
  (byte) bitmap_line_xdyd::x1#3 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::x1#4 )
  (byte) bitmap_line_xdyd::xd#3 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::xd#2 )
  (byte) bitmap_line_xdyd::e#4 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::e#1 )
  (byte) bitmap_line_xdyd::y#4 ← phi( bitmap_line_xdyd::@5/(byte) bitmap_line_xdyd::y#7 )
  (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#4
  (byte~) bitmap_line_xdyd::$5 ← (byte) bitmap_line_xdyd::e#4 - (byte) bitmap_line_xdyd::xd#3
  (byte) bitmap_line_xdyd::e#2 ← (byte~) bitmap_line_xdyd::$5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  return 
  to:@return

(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@27 bitmap_line::@5
  (byte) bitmap_line_ydxi::y1#6 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::y1#1 bitmap_line::@5/(byte) bitmap_line_ydxi::y1#0 )
  (byte) bitmap_line_ydxi::yd#5 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::yd#1 bitmap_line::@5/(byte) bitmap_line_ydxi::yd#0 )
  (byte) bitmap_line_ydxi::y#6 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::y#1 bitmap_line::@5/(byte) bitmap_line_ydxi::y#0 )
  (byte) bitmap_line_ydxi::x#5 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::x#1 bitmap_line::@5/(byte) bitmap_line_ydxi::x#0 )
  (byte) bitmap_line_ydxi::xd#2 ← phi( bitmap_line::@27/(byte) bitmap_line_ydxi::xd#1 bitmap_line::@5/(byte) bitmap_line_ydxi::xd#0 )
  (byte~) bitmap_line_ydxi::$0 ← (byte) bitmap_line_ydxi::xd#2 >> (number) 1
  (byte) bitmap_line_ydxi::e#0 ← (byte~) bitmap_line_ydxi::$0
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  (byte) bitmap_line_ydxi::y1#5 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y1#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y1#2 )
  (byte) bitmap_line_ydxi::yd#4 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::yd#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::yd#6 )
  (byte) bitmap_line_ydxi::xd#4 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::xd#2 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::xd#5 )
  (byte) bitmap_line_ydxi::e#5 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::e#0 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::e#6 )
  (byte) bitmap_line_ydxi::y#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y#5 )
  (byte) bitmap_line_ydxi::x#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::x#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::x#6 )
  (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3
  call bitmap_plot 
  to:bitmap_line_ydxi::@5
bitmap_line_ydxi::@5: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  (byte) bitmap_line_ydxi::x#7 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::x#3 )
  (byte) bitmap_line_ydxi::y1#4 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::y1#5 )
  (byte) bitmap_line_ydxi::yd#2 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::yd#4 )
  (byte) bitmap_line_ydxi::xd#3 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::xd#4 )
  (byte) bitmap_line_ydxi::e#3 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::e#5 )
  (byte) bitmap_line_ydxi::y#4 ← phi( bitmap_line_ydxi::@1/(byte) bitmap_line_ydxi::y#3 )
  (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#4
  (byte~) bitmap_line_ydxi::$2 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#3
  (byte) bitmap_line_ydxi::e#1 ← (byte~) bitmap_line_ydxi::$2
  (bool~) bitmap_line_ydxi::$3 ← (byte) bitmap_line_ydxi::yd#2 < (byte) bitmap_line_ydxi::e#1
  (bool~) bitmap_line_ydxi::$4 ← ! (bool~) bitmap_line_ydxi::$3
  if((bool~) bitmap_line_ydxi::$4) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@5
  (byte) bitmap_line_ydxi::yd#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::yd#3 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::yd#2 )
  (byte) bitmap_line_ydxi::xd#5 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::xd#6 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::xd#3 )
  (byte) bitmap_line_ydxi::e#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::e#2 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::e#1 )
  (byte) bitmap_line_ydxi::x#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::x#2 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::x#7 )
  (byte) bitmap_line_ydxi::y#5 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::y#7 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y#2 )
  (byte) bitmap_line_ydxi::y1#2 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::y1#3 bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y1#4 )
  (number~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (number) 1
  (bool~) bitmap_line_ydxi::$7 ← (byte) bitmap_line_ydxi::y#5 != (number~) bitmap_line_ydxi::$6
  if((bool~) bitmap_line_ydxi::$7) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@5
  (byte) bitmap_line_ydxi::xd#6 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::xd#3 )
  (byte) bitmap_line_ydxi::y#7 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y#2 )
  (byte) bitmap_line_ydxi::y1#3 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::y1#4 )
  (byte) bitmap_line_ydxi::yd#3 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::yd#2 )
  (byte) bitmap_line_ydxi::e#4 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::e#1 )
  (byte) bitmap_line_ydxi::x#4 ← phi( bitmap_line_ydxi::@5/(byte) bitmap_line_ydxi::x#7 )
  (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#4
  (byte~) bitmap_line_ydxi::$5 ← (byte) bitmap_line_ydxi::e#4 - (byte) bitmap_line_ydxi::yd#3
  (byte) bitmap_line_ydxi::e#2 ← (byte~) bitmap_line_ydxi::$5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  return 
  to:@return

(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@17 bitmap_line::@8
  (byte) bitmap_line_ydxd::y1#6 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::y1#0 bitmap_line::@8/(byte) bitmap_line_ydxd::y1#1 )
  (byte) bitmap_line_ydxd::yd#5 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::yd#0 bitmap_line::@8/(byte) bitmap_line_ydxd::yd#1 )
  (byte) bitmap_line_ydxd::y#7 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::y#0 bitmap_line::@8/(byte) bitmap_line_ydxd::y#1 )
  (byte) bitmap_line_ydxd::x#5 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::x#0 bitmap_line::@8/(byte) bitmap_line_ydxd::x#1 )
  (byte) bitmap_line_ydxd::xd#2 ← phi( bitmap_line::@17/(byte) bitmap_line_ydxd::xd#0 bitmap_line::@8/(byte) bitmap_line_ydxd::xd#1 )
  (byte~) bitmap_line_ydxd::$0 ← (byte) bitmap_line_ydxd::xd#2 >> (number) 1
  (byte) bitmap_line_ydxd::e#0 ← (byte~) bitmap_line_ydxd::$0
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  (byte) bitmap_line_ydxd::y1#5 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y1#6 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y1#2 )
  (byte) bitmap_line_ydxd::yd#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::yd#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::yd#6 )
  (byte) bitmap_line_ydxd::xd#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::xd#2 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::xd#5 )
  (byte) bitmap_line_ydxd::e#5 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::e#0 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::e#6 )
  (byte) bitmap_line_ydxd::y#4 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y#7 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y#6 )
  (byte) bitmap_line_ydxd::x#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::x#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::x#6 )
  (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#4
  call bitmap_plot 
  to:bitmap_line_ydxd::@5
bitmap_line_ydxd::@5: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  (byte) bitmap_line_ydxd::x#7 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::x#3 )
  (byte) bitmap_line_ydxd::y1#4 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::y1#5 )
  (byte) bitmap_line_ydxd::yd#2 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::yd#4 )
  (byte) bitmap_line_ydxd::xd#3 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::xd#4 )
  (byte) bitmap_line_ydxd::e#3 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::e#5 )
  (byte) bitmap_line_ydxd::y#5 ← phi( bitmap_line_ydxd::@1/(byte) bitmap_line_ydxd::y#4 )
  (byte) bitmap_line_ydxd::y#2 ← (byte) bitmap_line_ydxd::y#5
  (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2
  (byte~) bitmap_line_ydxd::$2 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#3
  (byte) bitmap_line_ydxd::e#1 ← (byte~) bitmap_line_ydxd::$2
  (bool~) bitmap_line_ydxd::$3 ← (byte) bitmap_line_ydxd::yd#2 < (byte) bitmap_line_ydxd::e#1
  (bool~) bitmap_line_ydxd::$4 ← ! (bool~) bitmap_line_ydxd::$3
  if((bool~) bitmap_line_ydxd::$4) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@5
  (byte) bitmap_line_ydxd::yd#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::yd#3 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::yd#2 )
  (byte) bitmap_line_ydxd::xd#5 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::xd#6 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::xd#3 )
  (byte) bitmap_line_ydxd::e#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::e#2 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::e#1 )
  (byte) bitmap_line_ydxd::x#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::x#2 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::x#7 )
  (byte) bitmap_line_ydxd::y#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::y#8 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y#3 )
  (byte) bitmap_line_ydxd::y1#2 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::y1#3 bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y1#4 )
  (number~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (number) 1
  (bool~) bitmap_line_ydxd::$7 ← (byte) bitmap_line_ydxd::y#6 != (number~) bitmap_line_ydxd::$6
  if((bool~) bitmap_line_ydxd::$7) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@5
  (byte) bitmap_line_ydxd::xd#6 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::xd#3 )
  (byte) bitmap_line_ydxd::y#8 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y#3 )
  (byte) bitmap_line_ydxd::y1#3 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::y1#4 )
  (byte) bitmap_line_ydxd::yd#3 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::yd#2 )
  (byte) bitmap_line_ydxd::e#4 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::e#1 )
  (byte) bitmap_line_ydxd::x#4 ← phi( bitmap_line_ydxd::@5/(byte) bitmap_line_ydxd::x#7 )
  (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#4
  (byte~) bitmap_line_ydxd::$5 ← (byte) bitmap_line_ydxd::e#4 - (byte) bitmap_line_ydxd::yd#3
  (byte) bitmap_line_ydxd::e#2 ← (byte~) bitmap_line_ydxd::$5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  return 
  to:@return

(void()) main()
main: scope:[main]  from @85
  (byte) form_field_idx#48 ← phi( @85/(byte) form_field_idx#34 )
  (byte) keyboard_modifiers#83 ← phi( @85/(byte) keyboard_modifiers#52 )
  (byte) keyboard_events_size#92 ← phi( @85/(byte) keyboard_events_size#53 )
  (signed byte) form_cursor_count#43 ← phi( @85/(signed byte) form_cursor_count#26 )
  (byte*) print_char_cursor#61 ← phi( @85/(byte*) print_char_cursor#46 )
  (byte*) print_line_cursor#61 ← phi( @85/(byte*) print_line_cursor#44 )
  (byte*) print_screen#38 ← phi( @85/(byte*) print_screen#24 )
  asm { sei  }
  *((byte*) PROCPORT_DDR) ← (byte) PROCPORT_DDR_MEMORY_MASK
  *((byte*) PROCPORT) ← (byte) PROCPORT_RAM_IO
  *((byte*) DTV_FEATURE) ← (byte) DTV_FEATURE_ENABLE
  call keyboard_init 
  to:main::@7
main::@7: scope:[main]  from main
  (byte) form_field_idx#44 ← phi( main/(byte) form_field_idx#48 )
  (byte) keyboard_modifiers#76 ← phi( main/(byte) keyboard_modifiers#83 )
  (byte) keyboard_events_size#80 ← phi( main/(byte) keyboard_events_size#92 )
  (signed byte) form_cursor_count#38 ← phi( main/(signed byte) form_cursor_count#43 )
  (byte*) print_char_cursor#56 ← phi( main/(byte*) print_char_cursor#61 )
  (byte*) print_line_cursor#56 ← phi( main/(byte*) print_line_cursor#61 )
  (byte*) print_screen#33 ← phi( main/(byte*) print_screen#38 )
  call gfx_init 
  to:main::@8
main::@8: scope:[main]  from main::@7
  (byte) form_field_idx#36 ← phi( main::@7/(byte) form_field_idx#44 )
  (byte) keyboard_modifiers#56 ← phi( main::@7/(byte) keyboard_modifiers#76 )
  (byte) keyboard_events_size#57 ← phi( main::@7/(byte) keyboard_events_size#80 )
  (signed byte) form_cursor_count#28 ← phi( main::@7/(signed byte) form_cursor_count#38 )
  (byte*) print_char_cursor#50 ← phi( main::@7/(byte*) print_char_cursor#56 )
  (byte*) print_line_cursor#48 ← phi( main::@7/(byte*) print_line_cursor#56 )
  (byte*) print_screen#26 ← phi( main::@7/(byte*) print_screen#33 )
  to:main::@1
main::@1: scope:[main]  from main::@10 main::@8
  (byte) form_field_idx#26 ← phi( main::@10/(byte) form_field_idx#35 main::@8/(byte) form_field_idx#36 )
  (byte) keyboard_modifiers#39 ← phi( main::@10/(byte) keyboard_modifiers#8 main::@8/(byte) keyboard_modifiers#56 )
  (byte) keyboard_events_size#43 ← phi( main::@10/(byte) keyboard_events_size#7 main::@8/(byte) keyboard_events_size#57 )
  (signed byte) form_cursor_count#19 ← phi( main::@10/(signed byte) form_cursor_count#27 main::@8/(signed byte) form_cursor_count#28 )
  (byte*) print_char_cursor#42 ← phi( main::@10/(byte*) print_char_cursor#49 main::@8/(byte*) print_char_cursor#50 )
  (byte*) print_line_cursor#40 ← phi( main::@10/(byte*) print_line_cursor#47 main::@8/(byte*) print_line_cursor#48 )
  (byte*) print_screen#19 ← phi( main::@10/(byte*) print_screen#25 main::@8/(byte*) print_screen#26 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) form_field_idx#25 ← phi( main::@1/(byte) form_field_idx#26 )
  (byte) keyboard_modifiers#38 ← phi( main::@1/(byte) keyboard_modifiers#39 )
  (byte) keyboard_events_size#42 ← phi( main::@1/(byte) keyboard_events_size#43 )
  (signed byte) form_cursor_count#18 ← phi( main::@1/(signed byte) form_cursor_count#19 )
  (byte*) print_char_cursor#41 ← phi( main::@1/(byte*) print_char_cursor#42 )
  (byte*) print_line_cursor#39 ← phi( main::@1/(byte*) print_line_cursor#40 )
  (byte*) print_screen#18 ← phi( main::@1/(byte*) print_screen#19 )
  call form_mode 
  to:main::@9
main::@9: scope:[main]  from main::@2
  (byte) form_field_idx#11 ← phi( main::@2/(byte) form_field_idx#3 )
  (byte) keyboard_modifiers#22 ← phi( main::@2/(byte) keyboard_modifiers#13 )
  (byte) keyboard_events_size#25 ← phi( main::@2/(byte) keyboard_events_size#13 )
  (signed byte) form_cursor_count#10 ← phi( main::@2/(signed byte) form_cursor_count#3 )
  (byte*) print_char_cursor#27 ← phi( main::@2/(byte*) print_char_cursor#18 )
  (byte*) print_line_cursor#26 ← phi( main::@2/(byte*) print_line_cursor#17 )
  (byte*) print_screen#12 ← phi( main::@2/(byte*) print_screen#7 )
  (byte*) print_screen#3 ← (byte*) print_screen#12
  (byte*) print_line_cursor#9 ← (byte*) print_line_cursor#26
  (byte*) print_char_cursor#10 ← (byte*) print_char_cursor#27
  (signed byte) form_cursor_count#0 ← (signed byte) form_cursor_count#10
  (byte) keyboard_events_size#6 ← (byte) keyboard_events_size#25
  (byte) keyboard_modifiers#7 ← (byte) keyboard_modifiers#22
  (byte) form_field_idx#0 ← (byte) form_field_idx#11
  call gfx_mode 
  to:main::@10
main::@10: scope:[main]  from main::@9
  (byte) form_field_idx#35 ← phi( main::@9/(byte) form_field_idx#0 )
  (signed byte) form_cursor_count#27 ← phi( main::@9/(signed byte) form_cursor_count#0 )
  (byte*) print_char_cursor#49 ← phi( main::@9/(byte*) print_char_cursor#10 )
  (byte*) print_line_cursor#47 ← phi( main::@9/(byte*) print_line_cursor#9 )
  (byte*) print_screen#25 ← phi( main::@9/(byte*) print_screen#3 )
  (byte) keyboard_modifiers#23 ← phi( main::@9/(byte) keyboard_modifiers#11 )
  (byte) keyboard_events_size#26 ← phi( main::@9/(byte) keyboard_events_size#11 )
  (byte) keyboard_events_size#7 ← (byte) keyboard_events_size#26
  (byte) keyboard_modifiers#8 ← (byte) keyboard_modifiers#23
  to:main::@1
main::@return: scope:[main]  from main::@1
  (byte) form_field_idx#12 ← phi( main::@1/(byte) form_field_idx#26 )
  (byte) keyboard_modifiers#24 ← phi( main::@1/(byte) keyboard_modifiers#39 )
  (byte) keyboard_events_size#27 ← phi( main::@1/(byte) keyboard_events_size#43 )
  (signed byte) form_cursor_count#11 ← phi( main::@1/(signed byte) form_cursor_count#19 )
  (byte*) print_char_cursor#28 ← phi( main::@1/(byte*) print_char_cursor#42 )
  (byte*) print_line_cursor#27 ← phi( main::@1/(byte*) print_line_cursor#40 )
  (byte*) print_screen#13 ← phi( main::@1/(byte*) print_screen#19 )
  (byte*) print_screen#4 ← (byte*) print_screen#13
  (byte*) print_line_cursor#10 ← (byte*) print_line_cursor#27
  (byte*) print_char_cursor#11 ← (byte*) print_char_cursor#28
  (signed byte) form_cursor_count#1 ← (signed byte) form_cursor_count#11
  (byte) keyboard_events_size#8 ← (byte) keyboard_events_size#27
  (byte) keyboard_modifiers#9 ← (byte) keyboard_modifiers#24
  (byte) form_field_idx#1 ← (byte) form_field_idx#12
  return 
  to:@return
@57: scope:[]  from @48
  (byte) keyboard_modifiers#90 ← phi( @48/(byte) keyboard_modifiers#95 )
  (byte) keyboard_events_size#103 ← phi( @48/(byte) keyboard_events_size#111 )
  (byte*) print_char_cursor#65 ← phi( @48/(byte*) print_char_cursor#68 )
  (byte*) print_line_cursor#65 ← phi( @48/(byte*) print_line_cursor#68 )
  (byte*) print_screen#42 ← phi( @48/(byte*) print_screen#45 )
  (byte*) VIC_SCREEN0 ← ((byte*)) (number) $4000
  (byte*) VIC_SCREEN1 ← ((byte*)) (number) $4400
  (byte*) VIC_SCREEN2 ← ((byte*)) (number) $4800
  (byte*) VIC_SCREEN3 ← ((byte*)) (number) $4c00
  (byte*) VIC_SCREEN4 ← ((byte*)) (number) $5000
  (byte*) VIC_CHARSET_ROM ← ((byte*)) (number) $5800
  (byte*) VIC_BITMAP ← ((byte*)) (number) $6000
  (dword) PLANE_8BPP_CHUNKY ← (number) $20000
  (dword) PLANE_HORISONTAL ← (number) $30000
  (dword) PLANE_VERTICAL ← (number) $32000
  (dword) PLANE_HORISONTAL2 ← (number) $34000
  (dword) PLANE_VERTICAL2 ← (number) $36000
  (dword) PLANE_BLANK ← (number) $38000
  (dword) PLANE_FULL ← (number) $3a000
  (dword) PLANE_CHARSET8 ← (number) $3c000
  to:@60

(dword()) get_plane((byte) get_plane::idx)
get_plane: scope:[get_plane]  from gfx_mode::@46 gfx_mode::@9
  (byte) get_plane::idx#2 ← phi( gfx_mode::@46/(byte) get_plane::idx#1 gfx_mode::@9/(byte) get_plane::idx#0 )
  (bool~) get_plane::$0 ← (byte) get_plane::idx#2 == (number) 0
  if((bool~) get_plane::$0) goto get_plane::@1
  to:get_plane::@28
get_plane::@1: scope:[get_plane]  from get_plane
  (dword~) get_plane::$29 ← ((dword)) (byte*) VIC_SCREEN0
  (dword) get_plane::return#0 ← (dword~) get_plane::$29
  to:get_plane::@return
get_plane::@28: scope:[get_plane]  from get_plane
  (byte) get_plane::idx#3 ← phi( get_plane/(byte) get_plane::idx#2 )
  (bool~) get_plane::$1 ← (byte) get_plane::idx#3 == (number) 1
  if((bool~) get_plane::$1) goto get_plane::@2
  to:get_plane::@29
get_plane::@2: scope:[get_plane]  from get_plane::@28
  (dword~) get_plane::$28 ← ((dword)) (byte*) VIC_SCREEN1
  (dword) get_plane::return#1 ← (dword~) get_plane::$28
  to:get_plane::@return
get_plane::@29: scope:[get_plane]  from get_plane::@28
  (byte) get_plane::idx#4 ← phi( get_plane::@28/(byte) get_plane::idx#3 )
  (bool~) get_plane::$2 ← (byte) get_plane::idx#4 == (number) 2
  if((bool~) get_plane::$2) goto get_plane::@3
  to:get_plane::@30
get_plane::@3: scope:[get_plane]  from get_plane::@29
  (dword~) get_plane::$27 ← ((dword)) (byte*) VIC_SCREEN2
  (dword) get_plane::return#2 ← (dword~) get_plane::$27
  to:get_plane::@return
get_plane::@30: scope:[get_plane]  from get_plane::@29
  (byte) get_plane::idx#5 ← phi( get_plane::@29/(byte) get_plane::idx#4 )
  (bool~) get_plane::$3 ← (byte) get_plane::idx#5 == (number) 3
  if((bool~) get_plane::$3) goto get_plane::@4
  to:get_plane::@31
get_plane::@4: scope:[get_plane]  from get_plane::@30
  (dword~) get_plane::$26 ← ((dword)) (byte*) VIC_SCREEN3
  (dword) get_plane::return#3 ← (dword~) get_plane::$26
  to:get_plane::@return
get_plane::@31: scope:[get_plane]  from get_plane::@30
  (byte) get_plane::idx#6 ← phi( get_plane::@30/(byte) get_plane::idx#5 )
  (bool~) get_plane::$4 ← (byte) get_plane::idx#6 == (number) 4
  if((bool~) get_plane::$4) goto get_plane::@5
  to:get_plane::@32
get_plane::@5: scope:[get_plane]  from get_plane::@31
  (dword~) get_plane::$25 ← ((dword)) (byte*) VIC_BITMAP
  (dword) get_plane::return#4 ← (dword~) get_plane::$25
  to:get_plane::@return
get_plane::@32: scope:[get_plane]  from get_plane::@31
  (byte) get_plane::idx#7 ← phi( get_plane::@31/(byte) get_plane::idx#6 )
  (bool~) get_plane::$5 ← (byte) get_plane::idx#7 == (number) 5
  if((bool~) get_plane::$5) goto get_plane::@6
  to:get_plane::@33
get_plane::@6: scope:[get_plane]  from get_plane::@32
  (dword~) get_plane::$24 ← ((dword)) (byte*) VIC_CHARSET_ROM
  (dword) get_plane::return#5 ← (dword~) get_plane::$24
  to:get_plane::@return
get_plane::@33: scope:[get_plane]  from get_plane::@32
  (byte) get_plane::idx#8 ← phi( get_plane::@32/(byte) get_plane::idx#7 )
  (bool~) get_plane::$6 ← (byte) get_plane::idx#8 == (number) 6
  if((bool~) get_plane::$6) goto get_plane::@7
  to:get_plane::@34
get_plane::@7: scope:[get_plane]  from get_plane::@33
  (dword~) get_plane::$23 ← ((dword)) (dword) PLANE_8BPP_CHUNKY
  (dword) get_plane::return#6 ← (dword~) get_plane::$23
  to:get_plane::@return
get_plane::@34: scope:[get_plane]  from get_plane::@33
  (byte) get_plane::idx#9 ← phi( get_plane::@33/(byte) get_plane::idx#8 )
  (bool~) get_plane::$7 ← (byte) get_plane::idx#9 == (number) 7
  if((bool~) get_plane::$7) goto get_plane::@8
  to:get_plane::@35
get_plane::@8: scope:[get_plane]  from get_plane::@34
  (dword~) get_plane::$22 ← ((dword)) (dword) PLANE_HORISONTAL
  (dword) get_plane::return#7 ← (dword~) get_plane::$22
  to:get_plane::@return
get_plane::@35: scope:[get_plane]  from get_plane::@34
  (byte) get_plane::idx#10 ← phi( get_plane::@34/(byte) get_plane::idx#9 )
  (bool~) get_plane::$8 ← (byte) get_plane::idx#10 == (number) 8
  if((bool~) get_plane::$8) goto get_plane::@9
  to:get_plane::@36
get_plane::@9: scope:[get_plane]  from get_plane::@35
  (dword~) get_plane::$21 ← ((dword)) (dword) PLANE_VERTICAL
  (dword) get_plane::return#8 ← (dword~) get_plane::$21
  to:get_plane::@return
get_plane::@36: scope:[get_plane]  from get_plane::@35
  (byte) get_plane::idx#11 ← phi( get_plane::@35/(byte) get_plane::idx#10 )
  (bool~) get_plane::$9 ← (byte) get_plane::idx#11 == (number) 9
  if((bool~) get_plane::$9) goto get_plane::@10
  to:get_plane::@37
get_plane::@10: scope:[get_plane]  from get_plane::@36
  (dword~) get_plane::$20 ← ((dword)) (dword) PLANE_HORISONTAL2
  (dword) get_plane::return#9 ← (dword~) get_plane::$20
  to:get_plane::@return
get_plane::@37: scope:[get_plane]  from get_plane::@36
  (byte) get_plane::idx#12 ← phi( get_plane::@36/(byte) get_plane::idx#11 )
  (bool~) get_plane::$10 ← (byte) get_plane::idx#12 == (number) $a
  if((bool~) get_plane::$10) goto get_plane::@11
  to:get_plane::@38
get_plane::@11: scope:[get_plane]  from get_plane::@37
  (dword~) get_plane::$19 ← ((dword)) (dword) PLANE_VERTICAL2
  (dword) get_plane::return#10 ← (dword~) get_plane::$19
  to:get_plane::@return
get_plane::@38: scope:[get_plane]  from get_plane::@37
  (byte) get_plane::idx#13 ← phi( get_plane::@37/(byte) get_plane::idx#12 )
  (bool~) get_plane::$11 ← (byte) get_plane::idx#13 == (number) $b
  if((bool~) get_plane::$11) goto get_plane::@12
  to:get_plane::@39
get_plane::@12: scope:[get_plane]  from get_plane::@38
  (dword~) get_plane::$18 ← ((dword)) (dword) PLANE_CHARSET8
  (dword) get_plane::return#11 ← (dword~) get_plane::$18
  to:get_plane::@return
get_plane::@39: scope:[get_plane]  from get_plane::@38
  (byte) get_plane::idx#14 ← phi( get_plane::@38/(byte) get_plane::idx#13 )
  (bool~) get_plane::$12 ← (byte) get_plane::idx#14 == (number) $c
  if((bool~) get_plane::$12) goto get_plane::@13
  to:get_plane::@40
get_plane::@13: scope:[get_plane]  from get_plane::@39
  (dword~) get_plane::$17 ← ((dword)) (dword) PLANE_BLANK
  (dword) get_plane::return#12 ← (dword~) get_plane::$17
  to:get_plane::@return
get_plane::@40: scope:[get_plane]  from get_plane::@39
  (byte) get_plane::idx#15 ← phi( get_plane::@39/(byte) get_plane::idx#14 )
  (bool~) get_plane::$13 ← (byte) get_plane::idx#15 == (number) $d
  (bool~) get_plane::$14 ← ! (bool~) get_plane::$13
  if((bool~) get_plane::$14) goto get_plane::@27
  to:get_plane::@41
get_plane::@41: scope:[get_plane]  from get_plane::@40
  (dword~) get_plane::$16 ← ((dword)) (dword) PLANE_FULL
  (dword) get_plane::return#13 ← (dword~) get_plane::$16
  to:get_plane::@return
get_plane::@return: scope:[get_plane]  from get_plane::@1 get_plane::@10 get_plane::@11 get_plane::@12 get_plane::@13 get_plane::@2 get_plane::@27 get_plane::@3 get_plane::@4 get_plane::@41 get_plane::@5 get_plane::@6 get_plane::@7 get_plane::@8 get_plane::@9
  (dword) get_plane::return#18 ← phi( get_plane::@1/(dword) get_plane::return#0 get_plane::@10/(dword) get_plane::return#9 get_plane::@11/(dword) get_plane::return#10 get_plane::@12/(dword) get_plane::return#11 get_plane::@13/(dword) get_plane::return#12 get_plane::@2/(dword) get_plane::return#1 get_plane::@27/(dword) get_plane::return#15 get_plane::@3/(dword) get_plane::return#2 get_plane::@4/(dword) get_plane::return#3 get_plane::@41/(dword) get_plane::return#13 get_plane::@5/(dword) get_plane::return#4 get_plane::@6/(dword) get_plane::return#5 get_plane::@7/(dword) get_plane::return#6 get_plane::@8/(dword) get_plane::return#7 get_plane::@9/(dword) get_plane::return#8 )
  (dword) get_plane::return#14 ← (dword) get_plane::return#18
  return 
  to:@return
get_plane::@27: scope:[get_plane]  from get_plane::@40
  (dword~) get_plane::$15 ← ((dword)) (byte*) VIC_SCREEN0
  (dword) get_plane::return#15 ← (dword~) get_plane::$15
  to:get_plane::@return

(byte*()) get_vic_screen((byte) get_vic_screen::idx)
get_vic_screen: scope:[get_vic_screen]  from gfx_mode::@47 gfx_mode::@49
  (byte) get_vic_screen::idx#2 ← phi( gfx_mode::@47/(byte) get_vic_screen::idx#0 gfx_mode::@49/(byte) get_vic_screen::idx#1 )
  (bool~) get_vic_screen::$0 ← (byte) get_vic_screen::idx#2 == (number) 0
  if((bool~) get_vic_screen::$0) goto get_vic_screen::@1
  to:get_vic_screen::@10
get_vic_screen::@1: scope:[get_vic_screen]  from get_vic_screen
  (byte*) get_vic_screen::return#0 ← (byte*) VIC_SCREEN0
  to:get_vic_screen::@return
get_vic_screen::@10: scope:[get_vic_screen]  from get_vic_screen
  (byte) get_vic_screen::idx#3 ← phi( get_vic_screen/(byte) get_vic_screen::idx#2 )
  (bool~) get_vic_screen::$1 ← (byte) get_vic_screen::idx#3 == (number) 1
  if((bool~) get_vic_screen::$1) goto get_vic_screen::@2
  to:get_vic_screen::@11
get_vic_screen::@2: scope:[get_vic_screen]  from get_vic_screen::@10
  (byte*) get_vic_screen::return#1 ← (byte*) VIC_SCREEN1
  to:get_vic_screen::@return
get_vic_screen::@11: scope:[get_vic_screen]  from get_vic_screen::@10
  (byte) get_vic_screen::idx#4 ← phi( get_vic_screen::@10/(byte) get_vic_screen::idx#3 )
  (bool~) get_vic_screen::$2 ← (byte) get_vic_screen::idx#4 == (number) 2
  if((bool~) get_vic_screen::$2) goto get_vic_screen::@3
  to:get_vic_screen::@12
get_vic_screen::@3: scope:[get_vic_screen]  from get_vic_screen::@11
  (byte*) get_vic_screen::return#2 ← (byte*) VIC_SCREEN2
  to:get_vic_screen::@return
get_vic_screen::@12: scope:[get_vic_screen]  from get_vic_screen::@11
  (byte) get_vic_screen::idx#5 ← phi( get_vic_screen::@11/(byte) get_vic_screen::idx#4 )
  (bool~) get_vic_screen::$3 ← (byte) get_vic_screen::idx#5 == (number) 3
  if((bool~) get_vic_screen::$3) goto get_vic_screen::@4
  to:get_vic_screen::@13
get_vic_screen::@4: scope:[get_vic_screen]  from get_vic_screen::@12
  (byte*) get_vic_screen::return#3 ← (byte*) VIC_SCREEN3
  to:get_vic_screen::@return
get_vic_screen::@13: scope:[get_vic_screen]  from get_vic_screen::@12
  (byte) get_vic_screen::idx#6 ← phi( get_vic_screen::@12/(byte) get_vic_screen::idx#5 )
  (bool~) get_vic_screen::$4 ← (byte) get_vic_screen::idx#6 == (number) 4
  (bool~) get_vic_screen::$5 ← ! (bool~) get_vic_screen::$4
  if((bool~) get_vic_screen::$5) goto get_vic_screen::@9
  to:get_vic_screen::@14
get_vic_screen::@14: scope:[get_vic_screen]  from get_vic_screen::@13
  (byte*) get_vic_screen::return#4 ← (byte*) VIC_SCREEN4
  to:get_vic_screen::@return
get_vic_screen::@return: scope:[get_vic_screen]  from get_vic_screen::@1 get_vic_screen::@14 get_vic_screen::@2 get_vic_screen::@3 get_vic_screen::@4 get_vic_screen::@9
  (byte*) get_vic_screen::return#9 ← phi( get_vic_screen::@1/(byte*) get_vic_screen::return#0 get_vic_screen::@14/(byte*) get_vic_screen::return#4 get_vic_screen::@2/(byte*) get_vic_screen::return#1 get_vic_screen::@3/(byte*) get_vic_screen::return#2 get_vic_screen::@4/(byte*) get_vic_screen::return#3 get_vic_screen::@9/(byte*) get_vic_screen::return#6 )
  (byte*) get_vic_screen::return#5 ← (byte*) get_vic_screen::return#9
  return 
  to:@return
get_vic_screen::@9: scope:[get_vic_screen]  from get_vic_screen::@13
  (byte*) get_vic_screen::return#6 ← (byte*) VIC_SCREEN0
  to:get_vic_screen::@return

(byte*()) get_vic_charset((byte) get_vic_charset::idx)
get_vic_charset: scope:[get_vic_charset]  from gfx_mode::@48
  (byte) get_vic_charset::idx#1 ← phi( gfx_mode::@48/(byte) get_vic_charset::idx#0 )
  (bool~) get_vic_charset::$0 ← (byte) get_vic_charset::idx#1 == (number) 0
  if((bool~) get_vic_charset::$0) goto get_vic_charset::@1
  to:get_vic_charset::@4
get_vic_charset::@1: scope:[get_vic_charset]  from get_vic_charset
  (byte*) get_vic_charset::return#0 ← (byte*) VIC_CHARSET_ROM
  to:get_vic_charset::@return
get_vic_charset::@4: scope:[get_vic_charset]  from get_vic_charset
  (byte) get_vic_charset::idx#2 ← phi( get_vic_charset/(byte) get_vic_charset::idx#1 )
  (bool~) get_vic_charset::$1 ← (byte) get_vic_charset::idx#2 == (number) 1
  (bool~) get_vic_charset::$2 ← ! (bool~) get_vic_charset::$1
  if((bool~) get_vic_charset::$2) goto get_vic_charset::@3
  to:get_vic_charset::@5
get_vic_charset::@5: scope:[get_vic_charset]  from get_vic_charset::@4
  (byte*) get_vic_charset::return#1 ← (byte*) VIC_BITMAP
  to:get_vic_charset::@return
get_vic_charset::@return: scope:[get_vic_charset]  from get_vic_charset::@1 get_vic_charset::@3 get_vic_charset::@5
  (byte*) get_vic_charset::return#5 ← phi( get_vic_charset::@1/(byte*) get_vic_charset::return#0 get_vic_charset::@3/(byte*) get_vic_charset::return#3 get_vic_charset::@5/(byte*) get_vic_charset::return#1 )
  (byte*) get_vic_charset::return#2 ← (byte*) get_vic_charset::return#5
  return 
  to:@return
get_vic_charset::@3: scope:[get_vic_charset]  from get_vic_charset::@4
  (byte*) get_vic_charset::return#3 ← (byte*) VIC_CHARSET_ROM
  to:get_vic_charset::@return
@60: scope:[]  from @57
  (byte) keyboard_modifiers#84 ← phi( @57/(byte) keyboard_modifiers#90 )
  (byte) keyboard_events_size#93 ← phi( @57/(byte) keyboard_events_size#103 )
  (byte*) print_char_cursor#62 ← phi( @57/(byte*) print_char_cursor#65 )
  (byte*) print_line_cursor#62 ← phi( @57/(byte*) print_line_cursor#65 )
  (byte*) print_screen#39 ← phi( @57/(byte*) print_screen#42 )
  (byte*) FORM_SCREEN ← ((byte*)) (number) $400
  (byte*) FORM_CHARSET ← ((byte*)) (number) $1800
  (byte[]) FORM_TEXT ← (const string) $39
  (byte[]) FORM_COLS ← (const string) $40
  (byte) form_fields_cnt ← (number) $24
  (byte[]) form_fields_x ← { (number) 8, (number) $c, (number) $c, (number) $c, (number) $c, (number) $c, (number) $c, (number) $c, (number) $c, (number) $c, (number) $19, (number) $18, (number) $19, (number) $18, (number) $19, (number) $18, (number) $19, (number) $19, (number) $18, (number) $19, (number) $18, (number) $19, (number) $18, (number) $19, (number) $25, (number) $25, (number) $25, (number) $25, (number) $24, (number) $25, (number) $24, (number) $25, (number) $24, (number) $25, (number) $24, (number) $25 }
  (byte[]) form_fields_y ← { (number) 2, (number) 5, (number) 6, (number) 7, (number) 8, (number) 9, (number) $a, (number) $b, (number) $c, (number) $d, (number) 5, (number) 6, (number) 6, (number) 7, (number) 7, (number) 8, (number) 8, (number) $b, (number) $c, (number) $c, (number) $d, (number) $d, (number) $e, (number) $e, (number) 5, (number) 6, (number) 7, (number) $a, (number) $b, (number) $b, (number) $c, (number) $c, (number) $d, (number) $d, (number) $e, (number) $e }
  (byte[]) form_fields_max ← { (number) $a, (number) 1, (number) 1, (number) 1, (number) 1, (number) 1, (number) 1, (number) 1, (number) 1, (number) 1, (number) $d, (number) $f, (number) $f, (number) $f, (number) $f, (number) $f, (number) $f, (number) $d, (number) $f, (number) $f, (number) $f, (number) $f, (number) $f, (number) $f, (number) 3, (number) 1, (number) 4, (number) 1, (number) $f, (number) $f, (number) $f, (number) $f, (number) $f, (number) $f, (number) $f, (number) $f }
  (byte[]) form_fields_val ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) preset_stdchar ← { (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) preset_ecmchar ← { (number) 1, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 2, (number) 0, (number) 5, (number) 0, (number) 6 }
  (byte[]) preset_stdbm ← { (number) 2, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 2, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) preset_mcbm ← { (number) 3, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 2, (number) 1, (number) 0, (number) 0, (number) 0, (number) 9, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) preset_hi_stdchar ← { (number) 4, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) preset_hi_ecmchar ← { (number) 5, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 3, (number) 4, (number) 6, (number) 8, (number) 9, (number) $c, (number) $c }
  (byte[]) preset_twoplane ← { (number) 6, (number) 1, (number) 0, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 7, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 8, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 7, (number) 0, (number) $d, (number) 4, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) preset_chunky ← { (number) 7, (number) 0, (number) 1, (number) 1, (number) 1, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 6, (number) 0, (number) 0, (number) 0, (number) 8, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) preset_sixsfred ← { (number) 8, (number) 1, (number) 1, (number) 1, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 9, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) $a, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) preset_sixsfred2 ← { (number) 9, (number) 1, (number) 1, (number) 1, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 9, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) $a, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  (byte[]) preset_8bpppixelcell ← { (number) $a, (number) 0, (number) 1, (number) 1, (number) 1, (number) 1, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) $b, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 1, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0, (number) 0 }
  to:@62

(void()) apply_preset((byte) apply_preset::idx)
apply_preset: scope:[apply_preset]  from form_mode::@18
  (byte) apply_preset::idx#1 ← phi( form_mode::@18/(byte) apply_preset::idx#0 )
  (byte*) apply_preset::preset#0 ← (byte*) 0
  (bool~) apply_preset::$0 ← (byte) apply_preset::idx#1 == (number) 0
  if((bool~) apply_preset::$0) goto apply_preset::@1
  to:apply_preset::@23
apply_preset::@1: scope:[apply_preset]  from apply_preset
  (byte*) apply_preset::preset#1 ← (byte[]) preset_stdchar
  to:apply_preset::@22
apply_preset::@23: scope:[apply_preset]  from apply_preset
  (byte) apply_preset::idx#2 ← phi( apply_preset/(byte) apply_preset::idx#1 )
  (bool~) apply_preset::$1 ← (byte) apply_preset::idx#2 == (number) 1
  if((bool~) apply_preset::$1) goto apply_preset::@2
  to:apply_preset::@24
apply_preset::@2: scope:[apply_preset]  from apply_preset::@23
  (byte*) apply_preset::preset#2 ← (byte[]) preset_ecmchar
  to:apply_preset::@22
apply_preset::@24: scope:[apply_preset]  from apply_preset::@23
  (byte) apply_preset::idx#3 ← phi( apply_preset::@23/(byte) apply_preset::idx#2 )
  (bool~) apply_preset::$2 ← (byte) apply_preset::idx#3 == (number) 2
  if((bool~) apply_preset::$2) goto apply_preset::@3
  to:apply_preset::@25
apply_preset::@3: scope:[apply_preset]  from apply_preset::@24
  (byte*) apply_preset::preset#3 ← (byte[]) preset_stdbm
  to:apply_preset::@22
apply_preset::@25: scope:[apply_preset]  from apply_preset::@24
  (byte) apply_preset::idx#4 ← phi( apply_preset::@24/(byte) apply_preset::idx#3 )
  (bool~) apply_preset::$3 ← (byte) apply_preset::idx#4 == (number) 3
  if((bool~) apply_preset::$3) goto apply_preset::@4
  to:apply_preset::@26
apply_preset::@4: scope:[apply_preset]  from apply_preset::@25
  (byte*) apply_preset::preset#4 ← (byte[]) preset_mcbm
  to:apply_preset::@22
apply_preset::@26: scope:[apply_preset]  from apply_preset::@25
  (byte) apply_preset::idx#5 ← phi( apply_preset::@25/(byte) apply_preset::idx#4 )
  (bool~) apply_preset::$4 ← (byte) apply_preset::idx#5 == (number) 4
  if((bool~) apply_preset::$4) goto apply_preset::@5
  to:apply_preset::@27
apply_preset::@5: scope:[apply_preset]  from apply_preset::@26
  (byte*) apply_preset::preset#5 ← (byte[]) preset_hi_stdchar
  to:apply_preset::@22
apply_preset::@27: scope:[apply_preset]  from apply_preset::@26
  (byte) apply_preset::idx#6 ← phi( apply_preset::@26/(byte) apply_preset::idx#5 )
  (bool~) apply_preset::$5 ← (byte) apply_preset::idx#6 == (number) 5
  if((bool~) apply_preset::$5) goto apply_preset::@6
  to:apply_preset::@28
apply_preset::@6: scope:[apply_preset]  from apply_preset::@27
  (byte*) apply_preset::preset#6 ← (byte[]) preset_hi_ecmchar
  to:apply_preset::@22
apply_preset::@28: scope:[apply_preset]  from apply_preset::@27
  (byte) apply_preset::idx#7 ← phi( apply_preset::@27/(byte) apply_preset::idx#6 )
  (bool~) apply_preset::$6 ← (byte) apply_preset::idx#7 == (number) 6
  if((bool~) apply_preset::$6) goto apply_preset::@7
  to:apply_preset::@29
apply_preset::@7: scope:[apply_preset]  from apply_preset::@28
  (byte*) apply_preset::preset#7 ← (byte[]) preset_twoplane
  to:apply_preset::@22
apply_preset::@29: scope:[apply_preset]  from apply_preset::@28
  (byte) apply_preset::idx#8 ← phi( apply_preset::@28/(byte) apply_preset::idx#7 )
  (bool~) apply_preset::$7 ← (byte) apply_preset::idx#8 == (number) 7
  if((bool~) apply_preset::$7) goto apply_preset::@8
  to:apply_preset::@30
apply_preset::@8: scope:[apply_preset]  from apply_preset::@29
  (byte*) apply_preset::preset#8 ← (byte[]) preset_chunky
  to:apply_preset::@22
apply_preset::@30: scope:[apply_preset]  from apply_preset::@29
  (byte) apply_preset::idx#9 ← phi( apply_preset::@29/(byte) apply_preset::idx#8 )
  (bool~) apply_preset::$8 ← (byte) apply_preset::idx#9 == (number) 8
  if((bool~) apply_preset::$8) goto apply_preset::@9
  to:apply_preset::@31
apply_preset::@9: scope:[apply_preset]  from apply_preset::@30
  (byte*) apply_preset::preset#9 ← (byte[]) preset_sixsfred
  to:apply_preset::@22
apply_preset::@31: scope:[apply_preset]  from apply_preset::@30
  (byte) apply_preset::idx#10 ← phi( apply_preset::@30/(byte) apply_preset::idx#9 )
  (bool~) apply_preset::$9 ← (byte) apply_preset::idx#10 == (number) 9
  if((bool~) apply_preset::$9) goto apply_preset::@10
  to:apply_preset::@32
apply_preset::@10: scope:[apply_preset]  from apply_preset::@31
  (byte*) apply_preset::preset#10 ← (byte[]) preset_sixsfred2
  to:apply_preset::@22
apply_preset::@32: scope:[apply_preset]  from apply_preset::@31
  (byte) apply_preset::idx#11 ← phi( apply_preset::@31/(byte) apply_preset::idx#10 )
  (bool~) apply_preset::$10 ← (byte) apply_preset::idx#11 == (number) $a
  if((bool~) apply_preset::$10) goto apply_preset::@11
  to:apply_preset::@33
apply_preset::@11: scope:[apply_preset]  from apply_preset::@32
  (byte*) apply_preset::preset#11 ← (byte[]) preset_8bpppixelcell
  to:apply_preset::@22
apply_preset::@33: scope:[apply_preset]  from apply_preset::@32
  (byte*) apply_preset::preset#12 ← (byte[]) preset_stdchar
  to:apply_preset::@22
apply_preset::@22: scope:[apply_preset]  from apply_preset::@1 apply_preset::@10 apply_preset::@11 apply_preset::@2 apply_preset::@3 apply_preset::@33 apply_preset::@4 apply_preset::@5 apply_preset::@6 apply_preset::@7 apply_preset::@8 apply_preset::@9
  (byte*) apply_preset::preset#15 ← phi( apply_preset::@1/(byte*) apply_preset::preset#1 apply_preset::@10/(byte*) apply_preset::preset#10 apply_preset::@11/(byte*) apply_preset::preset#11 apply_preset::@2/(byte*) apply_preset::preset#2 apply_preset::@3/(byte*) apply_preset::preset#3 apply_preset::@33/(byte*) apply_preset::preset#12 apply_preset::@4/(byte*) apply_preset::preset#4 apply_preset::@5/(byte*) apply_preset::preset#5 apply_preset::@6/(byte*) apply_preset::preset#6 apply_preset::@7/(byte*) apply_preset::preset#7 apply_preset::@8/(byte*) apply_preset::preset#8 apply_preset::@9/(byte*) apply_preset::preset#9 )
  (byte) apply_preset::i#0 ← (number) 0
  to:apply_preset::@45
apply_preset::@45: scope:[apply_preset]  from apply_preset::@22 apply_preset::@46
  (byte*) apply_preset::preset#14 ← phi( apply_preset::@22/(byte*) apply_preset::preset#15 apply_preset::@46/(byte*) apply_preset::preset#13 )
  (byte) apply_preset::i#2 ← phi( apply_preset::@22/(byte) apply_preset::i#0 apply_preset::@46/(byte) apply_preset::i#1 )
  (bool~) apply_preset::$11 ← (byte) apply_preset::i#2 != (byte) form_fields_cnt
  if((bool~) apply_preset::$11) goto apply_preset::@46
  to:apply_preset::@return
apply_preset::@46: scope:[apply_preset]  from apply_preset::@45
  (byte) apply_preset::i#3 ← phi( apply_preset::@45/(byte) apply_preset::i#2 )
  (byte*) apply_preset::preset#13 ← phi( apply_preset::@45/(byte*) apply_preset::preset#14 )
  *((byte[]) form_fields_val + (byte) apply_preset::i#3) ← *((byte*) apply_preset::preset#13 + (byte) apply_preset::i#3)
  (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#3
  to:apply_preset::@45
apply_preset::@return: scope:[apply_preset]  from apply_preset::@45
  return 
  to:@return

(void()) render_preset_name((byte) render_preset_name::idx)
render_preset_name: scope:[render_preset_name]  from form_mode::@28 form_mode::@32
  (byte) render_preset_name::idx#2 ← phi( form_mode::@28/(byte) render_preset_name::idx#0 form_mode::@32/(byte) render_preset_name::idx#1 )
  (byte*) render_preset_name::name#0 ← (byte*) 0
  (bool~) render_preset_name::$0 ← (byte) render_preset_name::idx#2 == (number) 0
  if((bool~) render_preset_name::$0) goto render_preset_name::@1
  to:render_preset_name::@23
render_preset_name::@1: scope:[render_preset_name]  from render_preset_name
  (byte*) render_preset_name::name#1 ← (const string) render_preset_name::$14
  to:render_preset_name::@22
render_preset_name::@23: scope:[render_preset_name]  from render_preset_name
  (byte) render_preset_name::idx#3 ← phi( render_preset_name/(byte) render_preset_name::idx#2 )
  (bool~) render_preset_name::$1 ← (byte) render_preset_name::idx#3 == (number) 1
  if((bool~) render_preset_name::$1) goto render_preset_name::@2
  to:render_preset_name::@24
render_preset_name::@2: scope:[render_preset_name]  from render_preset_name::@23
  (byte*) render_preset_name::name#2 ← (const string) render_preset_name::$15
  to:render_preset_name::@22
render_preset_name::@24: scope:[render_preset_name]  from render_preset_name::@23
  (byte) render_preset_name::idx#4 ← phi( render_preset_name::@23/(byte) render_preset_name::idx#3 )
  (bool~) render_preset_name::$2 ← (byte) render_preset_name::idx#4 == (number) 2
  if((bool~) render_preset_name::$2) goto render_preset_name::@3
  to:render_preset_name::@25
render_preset_name::@3: scope:[render_preset_name]  from render_preset_name::@24
  (byte*) render_preset_name::name#3 ← (const string) render_preset_name::$16
  to:render_preset_name::@22
render_preset_name::@25: scope:[render_preset_name]  from render_preset_name::@24
  (byte) render_preset_name::idx#5 ← phi( render_preset_name::@24/(byte) render_preset_name::idx#4 )
  (bool~) render_preset_name::$3 ← (byte) render_preset_name::idx#5 == (number) 3
  if((bool~) render_preset_name::$3) goto render_preset_name::@4
  to:render_preset_name::@26
render_preset_name::@4: scope:[render_preset_name]  from render_preset_name::@25
  (byte*) render_preset_name::name#4 ← (const string) render_preset_name::$17
  to:render_preset_name::@22
render_preset_name::@26: scope:[render_preset_name]  from render_preset_name::@25
  (byte) render_preset_name::idx#6 ← phi( render_preset_name::@25/(byte) render_preset_name::idx#5 )
  (bool~) render_preset_name::$4 ← (byte) render_preset_name::idx#6 == (number) 4
  if((bool~) render_preset_name::$4) goto render_preset_name::@5
  to:render_preset_name::@27
render_preset_name::@5: scope:[render_preset_name]  from render_preset_name::@26
  (byte*) render_preset_name::name#5 ← (const string) render_preset_name::$18
  to:render_preset_name::@22
render_preset_name::@27: scope:[render_preset_name]  from render_preset_name::@26
  (byte) render_preset_name::idx#7 ← phi( render_preset_name::@26/(byte) render_preset_name::idx#6 )
  (bool~) render_preset_name::$5 ← (byte) render_preset_name::idx#7 == (number) 5
  if((bool~) render_preset_name::$5) goto render_preset_name::@6
  to:render_preset_name::@28
render_preset_name::@6: scope:[render_preset_name]  from render_preset_name::@27
  (byte*) render_preset_name::name#6 ← (const string) render_preset_name::$19
  to:render_preset_name::@22
render_preset_name::@28: scope:[render_preset_name]  from render_preset_name::@27
  (byte) render_preset_name::idx#8 ← phi( render_preset_name::@27/(byte) render_preset_name::idx#7 )
  (bool~) render_preset_name::$6 ← (byte) render_preset_name::idx#8 == (number) 6
  if((bool~) render_preset_name::$6) goto render_preset_name::@7
  to:render_preset_name::@29
render_preset_name::@7: scope:[render_preset_name]  from render_preset_name::@28
  (byte*) render_preset_name::name#7 ← (const string) render_preset_name::$20
  to:render_preset_name::@22
render_preset_name::@29: scope:[render_preset_name]  from render_preset_name::@28
  (byte) render_preset_name::idx#9 ← phi( render_preset_name::@28/(byte) render_preset_name::idx#8 )
  (bool~) render_preset_name::$7 ← (byte) render_preset_name::idx#9 == (number) 7
  if((bool~) render_preset_name::$7) goto render_preset_name::@8
  to:render_preset_name::@30
render_preset_name::@8: scope:[render_preset_name]  from render_preset_name::@29
  (byte*) render_preset_name::name#8 ← (const string) render_preset_name::$21
  to:render_preset_name::@22
render_preset_name::@30: scope:[render_preset_name]  from render_preset_name::@29
  (byte) render_preset_name::idx#10 ← phi( render_preset_name::@29/(byte) render_preset_name::idx#9 )
  (bool~) render_preset_name::$8 ← (byte) render_preset_name::idx#10 == (number) 8
  if((bool~) render_preset_name::$8) goto render_preset_name::@9
  to:render_preset_name::@31
render_preset_name::@9: scope:[render_preset_name]  from render_preset_name::@30
  (byte*) render_preset_name::name#9 ← (const string) render_preset_name::$22
  to:render_preset_name::@22
render_preset_name::@31: scope:[render_preset_name]  from render_preset_name::@30
  (byte) render_preset_name::idx#11 ← phi( render_preset_name::@30/(byte) render_preset_name::idx#10 )
  (bool~) render_preset_name::$9 ← (byte) render_preset_name::idx#11 == (number) 9
  if((bool~) render_preset_name::$9) goto render_preset_name::@10
  to:render_preset_name::@32
render_preset_name::@10: scope:[render_preset_name]  from render_preset_name::@31
  (byte*) render_preset_name::name#10 ← (const string) render_preset_name::$23
  to:render_preset_name::@22
render_preset_name::@32: scope:[render_preset_name]  from render_preset_name::@31
  (byte) render_preset_name::idx#12 ← phi( render_preset_name::@31/(byte) render_preset_name::idx#11 )
  (bool~) render_preset_name::$10 ← (byte) render_preset_name::idx#12 == (number) $a
  if((bool~) render_preset_name::$10) goto render_preset_name::@11
  to:render_preset_name::@33
render_preset_name::@11: scope:[render_preset_name]  from render_preset_name::@32
  (byte*) render_preset_name::name#11 ← (const string) render_preset_name::$24
  to:render_preset_name::@22
render_preset_name::@33: scope:[render_preset_name]  from render_preset_name::@32
  (byte*) render_preset_name::name#12 ← (const string) render_preset_name::$25
  to:render_preset_name::@22
render_preset_name::@22: scope:[render_preset_name]  from render_preset_name::@1 render_preset_name::@10 render_preset_name::@11 render_preset_name::@2 render_preset_name::@3 render_preset_name::@33 render_preset_name::@4 render_preset_name::@5 render_preset_name::@6 render_preset_name::@7 render_preset_name::@8 render_preset_name::@9
  (byte*) render_preset_name::name#13 ← phi( render_preset_name::@1/(byte*) render_preset_name::name#1 render_preset_name::@10/(byte*) render_preset_name::name#10 render_preset_name::@11/(byte*) render_preset_name::name#11 render_preset_name::@2/(byte*) render_preset_name::name#2 render_preset_name::@3/(byte*) render_preset_name::name#3 render_preset_name::@33/(byte*) render_preset_name::name#12 render_preset_name::@4/(byte*) render_preset_name::name#4 render_preset_name::@5/(byte*) render_preset_name::name#5 render_preset_name::@6/(byte*) render_preset_name::name#6 render_preset_name::@7/(byte*) render_preset_name::name#7 render_preset_name::@8/(byte*) render_preset_name::name#8 render_preset_name::@9/(byte*) render_preset_name::name#9 )
  (byte*~) render_preset_name::$11 ← (byte*) FORM_SCREEN + (number) $28*(number) 2
  (byte*~) render_preset_name::$12 ← (byte*~) render_preset_name::$11 + (number) $a
  (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
  (byte*) print_str_at::at#1 ← (byte*~) render_preset_name::$12
  call print_str_at 
  to:render_preset_name::@45
render_preset_name::@45: scope:[render_preset_name]  from render_preset_name::@22
  to:render_preset_name::@return
render_preset_name::@return: scope:[render_preset_name]  from render_preset_name::@45
  return 
  to:@return
@62: scope:[]  from @60
  (byte) keyboard_modifiers#81 ← phi( @60/(byte) keyboard_modifiers#84 )
  (byte) keyboard_events_size#85 ← phi( @60/(byte) keyboard_events_size#93 )
  (byte*) print_char_cursor#60 ← phi( @60/(byte*) print_char_cursor#62 )
  (byte*) print_line_cursor#60 ← phi( @60/(byte*) print_line_cursor#62 )
  (byte*) print_screen#37 ← phi( @60/(byte*) print_screen#39 )
  (byte*~) $1 ← (byte[]) form_fields_val + (number) 0
  (byte*) form_preset ← (byte*~) $1
  (byte*~) $2 ← (byte[]) form_fields_val + (number) 1
  (byte*) form_ctrl_bmm ← (byte*~) $2
  (byte*~) $3 ← (byte[]) form_fields_val + (number) 2
  (byte*) form_ctrl_mcm ← (byte*~) $3
  (byte*~) $4 ← (byte[]) form_fields_val + (number) 3
  (byte*) form_ctrl_ecm ← (byte*~) $4
  (byte*~) $5 ← (byte[]) form_fields_val + (number) 4
  (byte*) form_ctrl_hicol ← (byte*~) $5
  (byte*~) $6 ← (byte[]) form_fields_val + (number) 5
  (byte*) form_ctrl_line ← (byte*~) $6
  (byte*~) $7 ← (byte[]) form_fields_val + (number) 6
  (byte*) form_ctrl_colof ← (byte*~) $7
  (byte*~) $8 ← (byte[]) form_fields_val + (number) 7
  (byte*) form_ctrl_chunk ← (byte*~) $8
  (byte*~) $9 ← (byte[]) form_fields_val + (number) 8
  (byte*) form_ctrl_borof ← (byte*~) $9
  (byte*~) $10 ← (byte[]) form_fields_val + (number) 9
  (byte*) form_ctrl_overs ← (byte*~) $10
  (byte*~) $11 ← (byte[]) form_fields_val + (number) $a
  (byte*) form_a_pattern ← (byte*~) $11
  (byte*~) $12 ← (byte[]) form_fields_val + (number) $b
  (byte*) form_a_start_hi ← (byte*~) $12
  (byte*~) $13 ← (byte[]) form_fields_val + (number) $c
  (byte*) form_a_start_lo ← (byte*~) $13
  (byte*~) $14 ← (byte[]) form_fields_val + (number) $d
  (byte*) form_a_step_hi ← (byte*~) $14
  (byte*~) $15 ← (byte[]) form_fields_val + (number) $e
  (byte*) form_a_step_lo ← (byte*~) $15
  (byte*~) $16 ← (byte[]) form_fields_val + (number) $f
  (byte*) form_a_mod_hi ← (byte*~) $16
  (byte*~) $17 ← (byte[]) form_fields_val + (number) $10
  (byte*) form_a_mod_lo ← (byte*~) $17
  (byte*~) $18 ← (byte[]) form_fields_val + (number) $11
  (byte*) form_b_pattern ← (byte*~) $18
  (byte*~) $19 ← (byte[]) form_fields_val + (number) $12
  (byte*) form_b_start_hi ← (byte*~) $19
  (byte*~) $20 ← (byte[]) form_fields_val + (number) $13
  (byte*) form_b_start_lo ← (byte*~) $20
  (byte*~) $21 ← (byte[]) form_fields_val + (number) $14
  (byte*) form_b_step_hi ← (byte*~) $21
  (byte*~) $22 ← (byte[]) form_fields_val + (number) $15
  (byte*) form_b_step_lo ← (byte*~) $22
  (byte*~) $23 ← (byte[]) form_fields_val + (number) $16
  (byte*) form_b_mod_hi ← (byte*~) $23
  (byte*~) $24 ← (byte[]) form_fields_val + (number) $17
  (byte*) form_b_mod_lo ← (byte*~) $24
  (byte*~) $25 ← (byte[]) form_fields_val + (number) $18
  (byte*) form_vic_screen ← (byte*~) $25
  (byte*~) $26 ← (byte[]) form_fields_val + (number) $19
  (byte*) form_vic_gfx ← (byte*~) $26
  (byte*~) $27 ← (byte[]) form_fields_val + (number) $1a
  (byte*) form_vic_cols ← (byte*~) $27
  (byte*~) $28 ← (byte[]) form_fields_val + (number) $1b
  (byte*) form_dtv_palet ← (byte*~) $28
  (byte*~) $29 ← (byte[]) form_fields_val + (number) $1c
  (byte*) form_vic_bg0_hi ← (byte*~) $29
  (byte*~) $30 ← (byte[]) form_fields_val + (number) $1d
  (byte*) form_vic_bg0_lo ← (byte*~) $30
  (byte*~) $31 ← (byte[]) form_fields_val + (number) $1e
  (byte*) form_vic_bg1_hi ← (byte*~) $31
  (byte*~) $32 ← (byte[]) form_fields_val + (number) $1f
  (byte*) form_vic_bg1_lo ← (byte*~) $32
  (byte*~) $33 ← (byte[]) form_fields_val + (number) $20
  (byte*) form_vic_bg2_hi ← (byte*~) $33
  (byte*~) $34 ← (byte[]) form_fields_val + (number) $21
  (byte*) form_vic_bg2_lo ← (byte*~) $34
  (byte*~) $35 ← (byte[]) form_fields_val + (number) $22
  (byte*) form_vic_bg3_hi ← (byte*~) $35
  (byte*~) $36 ← (byte[]) form_fields_val + (number) $23
  (byte*) form_vic_bg3_lo ← (byte*~) $36
  to:@81

(void()) gfx_mode()
gfx_mode: scope:[gfx_mode]  from main::@9
  (byte) keyboard_modifiers#128 ← phi( main::@9/(byte) keyboard_modifiers#7 )
  (byte) keyboard_events_size#147 ← phi( main::@9/(byte) keyboard_events_size#6 )
  (byte) gfx_mode::dtv_control#0 ← (number) 0
  (bool~) gfx_mode::$0 ← *((byte*) form_ctrl_line) != (number) 0
  (bool~) gfx_mode::$1 ← ! (bool~) gfx_mode::$0
  if((bool~) gfx_mode::$1) goto gfx_mode::@1
  to:gfx_mode::@12
gfx_mode::@1: scope:[gfx_mode]  from gfx_mode gfx_mode::@12
  (byte) keyboard_modifiers#126 ← phi( gfx_mode/(byte) keyboard_modifiers#128 gfx_mode::@12/(byte) keyboard_modifiers#129 )
  (byte) keyboard_events_size#145 ← phi( gfx_mode/(byte) keyboard_events_size#147 gfx_mode::@12/(byte) keyboard_events_size#148 )
  (byte) gfx_mode::dtv_control#14 ← phi( gfx_mode/(byte) gfx_mode::dtv_control#0 gfx_mode::@12/(byte) gfx_mode::dtv_control#1 )
  (bool~) gfx_mode::$2 ← *((byte*) form_ctrl_borof) != (number) 0
  (bool~) gfx_mode::$3 ← ! (bool~) gfx_mode::$2
  if((bool~) gfx_mode::$3) goto gfx_mode::@2
  to:gfx_mode::@13
gfx_mode::@12: scope:[gfx_mode]  from gfx_mode
  (byte) keyboard_modifiers#129 ← phi( gfx_mode/(byte) keyboard_modifiers#128 )
  (byte) keyboard_events_size#148 ← phi( gfx_mode/(byte) keyboard_events_size#147 )
  (byte) gfx_mode::dtv_control#7 ← phi( gfx_mode/(byte) gfx_mode::dtv_control#0 )
  (byte~) gfx_mode::$73 ← (byte) gfx_mode::dtv_control#7 | (byte) DTV_LINEAR
  (byte) gfx_mode::dtv_control#1 ← (byte~) gfx_mode::$73
  to:gfx_mode::@1
gfx_mode::@2: scope:[gfx_mode]  from gfx_mode::@1 gfx_mode::@13
  (byte) keyboard_modifiers#125 ← phi( gfx_mode::@1/(byte) keyboard_modifiers#126 gfx_mode::@13/(byte) keyboard_modifiers#127 )
  (byte) keyboard_events_size#144 ← phi( gfx_mode::@1/(byte) keyboard_events_size#145 gfx_mode::@13/(byte) keyboard_events_size#146 )
  (byte) gfx_mode::dtv_control#15 ← phi( gfx_mode::@1/(byte) gfx_mode::dtv_control#14 gfx_mode::@13/(byte) gfx_mode::dtv_control#2 )
  (bool~) gfx_mode::$4 ← *((byte*) form_ctrl_hicol) != (number) 0
  (bool~) gfx_mode::$5 ← ! (bool~) gfx_mode::$4
  if((bool~) gfx_mode::$5) goto gfx_mode::@3
  to:gfx_mode::@14
gfx_mode::@13: scope:[gfx_mode]  from gfx_mode::@1
  (byte) keyboard_modifiers#127 ← phi( gfx_mode::@1/(byte) keyboard_modifiers#126 )
  (byte) keyboard_events_size#146 ← phi( gfx_mode::@1/(byte) keyboard_events_size#145 )
  (byte) gfx_mode::dtv_control#8 ← phi( gfx_mode::@1/(byte) gfx_mode::dtv_control#14 )
  (byte~) gfx_mode::$74 ← (byte) gfx_mode::dtv_control#8 | (byte) DTV_BORDER_OFF
  (byte) gfx_mode::dtv_control#2 ← (byte~) gfx_mode::$74
  to:gfx_mode::@2
gfx_mode::@3: scope:[gfx_mode]  from gfx_mode::@14 gfx_mode::@2
  (byte) keyboard_modifiers#123 ← phi( gfx_mode::@14/(byte) keyboard_modifiers#124 gfx_mode::@2/(byte) keyboard_modifiers#125 )
  (byte) keyboard_events_size#142 ← phi( gfx_mode::@14/(byte) keyboard_events_size#143 gfx_mode::@2/(byte) keyboard_events_size#144 )
  (byte) gfx_mode::dtv_control#16 ← phi( gfx_mode::@14/(byte) gfx_mode::dtv_control#3 gfx_mode::@2/(byte) gfx_mode::dtv_control#15 )
  (bool~) gfx_mode::$6 ← *((byte*) form_ctrl_overs) != (number) 0
  (bool~) gfx_mode::$7 ← ! (bool~) gfx_mode::$6
  if((bool~) gfx_mode::$7) goto gfx_mode::@4
  to:gfx_mode::@15
gfx_mode::@14: scope:[gfx_mode]  from gfx_mode::@2
  (byte) keyboard_modifiers#124 ← phi( gfx_mode::@2/(byte) keyboard_modifiers#125 )
  (byte) keyboard_events_size#143 ← phi( gfx_mode::@2/(byte) keyboard_events_size#144 )
  (byte) gfx_mode::dtv_control#9 ← phi( gfx_mode::@2/(byte) gfx_mode::dtv_control#15 )
  (byte~) gfx_mode::$75 ← (byte) gfx_mode::dtv_control#9 | (byte) DTV_HIGHCOLOR
  (byte) gfx_mode::dtv_control#3 ← (byte~) gfx_mode::$75
  to:gfx_mode::@3
gfx_mode::@4: scope:[gfx_mode]  from gfx_mode::@15 gfx_mode::@3
  (byte) keyboard_modifiers#121 ← phi( gfx_mode::@15/(byte) keyboard_modifiers#122 gfx_mode::@3/(byte) keyboard_modifiers#123 )
  (byte) keyboard_events_size#140 ← phi( gfx_mode::@15/(byte) keyboard_events_size#141 gfx_mode::@3/(byte) keyboard_events_size#142 )
  (byte) gfx_mode::dtv_control#17 ← phi( gfx_mode::@15/(byte) gfx_mode::dtv_control#4 gfx_mode::@3/(byte) gfx_mode::dtv_control#16 )
  (bool~) gfx_mode::$8 ← *((byte*) form_ctrl_colof) != (number) 0
  (bool~) gfx_mode::$9 ← ! (bool~) gfx_mode::$8
  if((bool~) gfx_mode::$9) goto gfx_mode::@5
  to:gfx_mode::@16
gfx_mode::@15: scope:[gfx_mode]  from gfx_mode::@3
  (byte) keyboard_modifiers#122 ← phi( gfx_mode::@3/(byte) keyboard_modifiers#123 )
  (byte) keyboard_events_size#141 ← phi( gfx_mode::@3/(byte) keyboard_events_size#142 )
  (byte) gfx_mode::dtv_control#10 ← phi( gfx_mode::@3/(byte) gfx_mode::dtv_control#16 )
  (byte~) gfx_mode::$76 ← (byte) gfx_mode::dtv_control#10 | (byte) DTV_OVERSCAN
  (byte) gfx_mode::dtv_control#4 ← (byte~) gfx_mode::$76
  to:gfx_mode::@4
gfx_mode::@5: scope:[gfx_mode]  from gfx_mode::@16 gfx_mode::@4
  (byte) keyboard_modifiers#119 ← phi( gfx_mode::@16/(byte) keyboard_modifiers#120 gfx_mode::@4/(byte) keyboard_modifiers#121 )
  (byte) keyboard_events_size#138 ← phi( gfx_mode::@16/(byte) keyboard_events_size#139 gfx_mode::@4/(byte) keyboard_events_size#140 )
  (byte) gfx_mode::dtv_control#18 ← phi( gfx_mode::@16/(byte) gfx_mode::dtv_control#5 gfx_mode::@4/(byte) gfx_mode::dtv_control#17 )
  (bool~) gfx_mode::$10 ← *((byte*) form_ctrl_chunk) != (number) 0
  (bool~) gfx_mode::$11 ← ! (bool~) gfx_mode::$10
  if((bool~) gfx_mode::$11) goto gfx_mode::@6
  to:gfx_mode::@17
gfx_mode::@16: scope:[gfx_mode]  from gfx_mode::@4
  (byte) keyboard_modifiers#120 ← phi( gfx_mode::@4/(byte) keyboard_modifiers#121 )
  (byte) keyboard_events_size#139 ← phi( gfx_mode::@4/(byte) keyboard_events_size#140 )
  (byte) gfx_mode::dtv_control#11 ← phi( gfx_mode::@4/(byte) gfx_mode::dtv_control#17 )
  (byte~) gfx_mode::$77 ← (byte) gfx_mode::dtv_control#11 | (byte) DTV_COLORRAM_OFF
  (byte) gfx_mode::dtv_control#5 ← (byte~) gfx_mode::$77
  to:gfx_mode::@5
gfx_mode::@6: scope:[gfx_mode]  from gfx_mode::@17 gfx_mode::@5
  (byte) keyboard_modifiers#117 ← phi( gfx_mode::@17/(byte) keyboard_modifiers#118 gfx_mode::@5/(byte) keyboard_modifiers#119 )
  (byte) keyboard_events_size#136 ← phi( gfx_mode::@17/(byte) keyboard_events_size#137 gfx_mode::@5/(byte) keyboard_events_size#138 )
  (byte) gfx_mode::dtv_control#12 ← phi( gfx_mode::@17/(byte) gfx_mode::dtv_control#6 gfx_mode::@5/(byte) gfx_mode::dtv_control#18 )
  *((byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12
  (byte~) gfx_mode::$12 ← (byte) VIC_DEN | (byte) VIC_RSEL
  (number~) gfx_mode::$13 ← (byte~) gfx_mode::$12 | (number) 3
  (byte) gfx_mode::vic_control#0 ← (number~) gfx_mode::$13
  (bool~) gfx_mode::$14 ← *((byte*) form_ctrl_ecm) != (number) 0
  (bool~) gfx_mode::$15 ← ! (bool~) gfx_mode::$14
  if((bool~) gfx_mode::$15) goto gfx_mode::@7
  to:gfx_mode::@18
gfx_mode::@17: scope:[gfx_mode]  from gfx_mode::@5
  (byte) keyboard_modifiers#118 ← phi( gfx_mode::@5/(byte) keyboard_modifiers#119 )
  (byte) keyboard_events_size#137 ← phi( gfx_mode::@5/(byte) keyboard_events_size#138 )
  (byte) gfx_mode::dtv_control#13 ← phi( gfx_mode::@5/(byte) gfx_mode::dtv_control#18 )
  (byte~) gfx_mode::$78 ← (byte) gfx_mode::dtv_control#13 | (byte) DTV_CHUNKY
  (byte) gfx_mode::dtv_control#6 ← (byte~) gfx_mode::$78
  to:gfx_mode::@6
gfx_mode::@7: scope:[gfx_mode]  from gfx_mode::@18 gfx_mode::@6
  (byte) keyboard_modifiers#115 ← phi( gfx_mode::@18/(byte) keyboard_modifiers#116 gfx_mode::@6/(byte) keyboard_modifiers#117 )
  (byte) keyboard_events_size#134 ← phi( gfx_mode::@18/(byte) keyboard_events_size#135 gfx_mode::@6/(byte) keyboard_events_size#136 )
  (byte) gfx_mode::vic_control#6 ← phi( gfx_mode::@18/(byte) gfx_mode::vic_control#1 gfx_mode::@6/(byte) gfx_mode::vic_control#0 )
  (bool~) gfx_mode::$16 ← *((byte*) form_ctrl_bmm) != (number) 0
  (bool~) gfx_mode::$17 ← ! (bool~) gfx_mode::$16
  if((bool~) gfx_mode::$17) goto gfx_mode::@8
  to:gfx_mode::@19
gfx_mode::@18: scope:[gfx_mode]  from gfx_mode::@6
  (byte) keyboard_modifiers#116 ← phi( gfx_mode::@6/(byte) keyboard_modifiers#117 )
  (byte) keyboard_events_size#135 ← phi( gfx_mode::@6/(byte) keyboard_events_size#136 )
  (byte) gfx_mode::vic_control#3 ← phi( gfx_mode::@6/(byte) gfx_mode::vic_control#0 )
  (byte~) gfx_mode::$79 ← (byte) gfx_mode::vic_control#3 | (byte) VIC_ECM
  (byte) gfx_mode::vic_control#1 ← (byte~) gfx_mode::$79
  to:gfx_mode::@7
gfx_mode::@8: scope:[gfx_mode]  from gfx_mode::@19 gfx_mode::@7
  (byte) keyboard_modifiers#113 ← phi( gfx_mode::@19/(byte) keyboard_modifiers#114 gfx_mode::@7/(byte) keyboard_modifiers#115 )
  (byte) keyboard_events_size#132 ← phi( gfx_mode::@19/(byte) keyboard_events_size#133 gfx_mode::@7/(byte) keyboard_events_size#134 )
  (byte) gfx_mode::vic_control#4 ← phi( gfx_mode::@19/(byte) gfx_mode::vic_control#2 gfx_mode::@7/(byte) gfx_mode::vic_control#6 )
  *((byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4
  (byte) gfx_mode::vic_control2#0 ← (byte) VIC_CSEL
  (bool~) gfx_mode::$18 ← *((byte*) form_ctrl_mcm) != (number) 0
  (bool~) gfx_mode::$19 ← ! (bool~) gfx_mode::$18
  if((bool~) gfx_mode::$19) goto gfx_mode::@9
  to:gfx_mode::@20
gfx_mode::@19: scope:[gfx_mode]  from gfx_mode::@7
  (byte) keyboard_modifiers#114 ← phi( gfx_mode::@7/(byte) keyboard_modifiers#115 )
  (byte) keyboard_events_size#133 ← phi( gfx_mode::@7/(byte) keyboard_events_size#134 )
  (byte) gfx_mode::vic_control#5 ← phi( gfx_mode::@7/(byte) gfx_mode::vic_control#6 )
  (byte~) gfx_mode::$80 ← (byte) gfx_mode::vic_control#5 | (byte) VIC_BMM
  (byte) gfx_mode::vic_control#2 ← (byte~) gfx_mode::$80
  to:gfx_mode::@8
gfx_mode::@9: scope:[gfx_mode]  from gfx_mode::@20 gfx_mode::@8
  (byte) keyboard_modifiers#110 ← phi( gfx_mode::@20/(byte) keyboard_modifiers#112 gfx_mode::@8/(byte) keyboard_modifiers#113 )
  (byte) keyboard_events_size#129 ← phi( gfx_mode::@20/(byte) keyboard_events_size#131 gfx_mode::@8/(byte) keyboard_events_size#132 )
  (byte) gfx_mode::vic_control2#2 ← phi( gfx_mode::@20/(byte) gfx_mode::vic_control2#1 gfx_mode::@8/(byte) gfx_mode::vic_control2#0 )
  *((byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2
  (number~) gfx_mode::$20 ← *((byte*) form_a_start_hi) * (number) $10
  (number~) gfx_mode::$21 ← (number~) gfx_mode::$20 | *((byte*) form_a_start_lo)
  (byte) gfx_mode::plane_a_offs#0 ← (number~) gfx_mode::$21
  (byte) get_plane::idx#0 ← *((byte*) form_a_pattern)
  call get_plane 
  (dword) get_plane::return#16 ← (dword) get_plane::return#14
  to:gfx_mode::@46
gfx_mode::@46: scope:[gfx_mode]  from gfx_mode::@9
  (byte) keyboard_modifiers#108 ← phi( gfx_mode::@9/(byte) keyboard_modifiers#110 )
  (byte) keyboard_events_size#127 ← phi( gfx_mode::@9/(byte) keyboard_events_size#129 )
  (byte) gfx_mode::plane_a_offs#1 ← phi( gfx_mode::@9/(byte) gfx_mode::plane_a_offs#0 )
  (dword) get_plane::return#19 ← phi( gfx_mode::@9/(dword) get_plane::return#16 )
  (dword~) gfx_mode::$22 ← (dword) get_plane::return#19
  (dword~) gfx_mode::$23 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#1
  (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$23
  (word~) gfx_mode::$24 ← < (dword) gfx_mode::plane_a#0
  (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$24
  *((byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$25
  (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0
  (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26
  *((byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$27
  (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0
  (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28
  *((byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$29
  (number~) gfx_mode::$30 ← *((byte*) form_a_step_hi) * (number) $10
  (number~) gfx_mode::$31 ← (number~) gfx_mode::$30 | *((byte*) form_a_step_lo)
  *((byte*) DTV_PLANEA_STEP) ← (number~) gfx_mode::$31
  (number~) gfx_mode::$32 ← *((byte*) form_a_mod_hi) * (number) $10
  (number~) gfx_mode::$33 ← (number~) gfx_mode::$32 | *((byte*) form_a_mod_lo)
  *((byte*) DTV_PLANEA_MODULO_LO) ← (number~) gfx_mode::$33
  *((byte*) DTV_PLANEA_MODULO_HI) ← (number) 0
  (number~) gfx_mode::$34 ← *((byte*) form_b_start_hi) * (number) $10
  (number~) gfx_mode::$35 ← (number~) gfx_mode::$34 | *((byte*) form_b_start_lo)
  (byte) gfx_mode::plane_b_offs#0 ← (number~) gfx_mode::$35
  (byte) get_plane::idx#1 ← *((byte*) form_b_pattern)
  call get_plane 
  (dword) get_plane::return#17 ← (dword) get_plane::return#14
  to:gfx_mode::@47
gfx_mode::@47: scope:[gfx_mode]  from gfx_mode::@46
  (byte) keyboard_modifiers#106 ← phi( gfx_mode::@46/(byte) keyboard_modifiers#108 )
  (byte) keyboard_events_size#125 ← phi( gfx_mode::@46/(byte) keyboard_events_size#127 )
  (byte) gfx_mode::plane_b_offs#1 ← phi( gfx_mode::@46/(byte) gfx_mode::plane_b_offs#0 )
  (dword) get_plane::return#20 ← phi( gfx_mode::@46/(dword) get_plane::return#17 )
  (dword~) gfx_mode::$36 ← (dword) get_plane::return#20
  (dword~) gfx_mode::$37 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#1
  (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$37
  (word~) gfx_mode::$38 ← < (dword) gfx_mode::plane_b#0
  (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$38
  *((byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$39
  (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0
  (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40
  *((byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$41
  (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0
  (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42
  *((byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$43
  (number~) gfx_mode::$44 ← *((byte*) form_b_step_hi) * (number) $10
  (number~) gfx_mode::$45 ← (number~) gfx_mode::$44 | *((byte*) form_b_step_lo)
  *((byte*) DTV_PLANEB_STEP) ← (number~) gfx_mode::$45
  (number~) gfx_mode::$46 ← *((byte*) form_b_mod_hi) * (number) $10
  (number~) gfx_mode::$47 ← (number~) gfx_mode::$46 | *((byte*) form_b_mod_lo)
  *((byte*) DTV_PLANEB_MODULO_LO) ← (number~) gfx_mode::$47
  *((byte*) DTV_PLANEB_MODULO_HI) ← (number) 0
  *((byte*) CIA2_PORT_A_DDR) ← (number) 3
  (word~) gfx_mode::$48 ← ((word)) (byte*) VIC_SCREEN0
  (number~) gfx_mode::$49 ← (word~) gfx_mode::$48 / (number) $4000
  (byte~) gfx_mode::$50 ← ((byte)) (number~) gfx_mode::$49
  (number~) gfx_mode::$51 ← (number) 3 ^ (byte~) gfx_mode::$50
  *((byte*) CIA2_PORT_A) ← (number~) gfx_mode::$51
  (byte) get_vic_screen::idx#0 ← *((byte*) form_vic_screen)
  call get_vic_screen 
  (byte*) get_vic_screen::return#7 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@48
gfx_mode::@48: scope:[gfx_mode]  from gfx_mode::@47
  (byte) keyboard_modifiers#104 ← phi( gfx_mode::@47/(byte) keyboard_modifiers#106 )
  (byte) keyboard_events_size#123 ← phi( gfx_mode::@47/(byte) keyboard_events_size#125 )
  (byte*) get_vic_screen::return#10 ← phi( gfx_mode::@47/(byte*) get_vic_screen::return#7 )
  (byte*~) gfx_mode::$52 ← (byte*) get_vic_screen::return#10
  (word~) gfx_mode::$53 ← ((word)) (byte*~) gfx_mode::$52
  (number~) gfx_mode::$54 ← (word~) gfx_mode::$53 & (number) $3fff
  (number~) gfx_mode::$55 ← (number~) gfx_mode::$54 / (number) $40
  (byte~) gfx_mode::$56 ← ((byte)) (number~) gfx_mode::$55
  (byte) get_vic_charset::idx#0 ← *((byte*) form_vic_gfx)
  call get_vic_charset 
  (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
  to:gfx_mode::@49
gfx_mode::@49: scope:[gfx_mode]  from gfx_mode::@48
  (byte) keyboard_modifiers#102 ← phi( gfx_mode::@48/(byte) keyboard_modifiers#104 )
  (byte) keyboard_events_size#121 ← phi( gfx_mode::@48/(byte) keyboard_events_size#123 )
  (byte*) get_vic_charset::return#6 ← phi( gfx_mode::@48/(byte*) get_vic_charset::return#4 )
  (byte*~) gfx_mode::$57 ← (byte*) get_vic_charset::return#6
  (word~) gfx_mode::$58 ← ((word)) (byte*~) gfx_mode::$57
  (number~) gfx_mode::$59 ← (word~) gfx_mode::$58 & (number) $3fff
  (number~) gfx_mode::$60 ← > (number~) gfx_mode::$59
  (number~) gfx_mode::$61 ← (number~) gfx_mode::$60 / (number) 4
  (number~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (number~) gfx_mode::$61
  *((byte*) VIC_MEMORY) ← (number~) gfx_mode::$62
  (byte) get_vic_screen::idx#1 ← *((byte*) form_vic_cols)
  call get_vic_screen 
  (byte*) get_vic_screen::return#8 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@50
gfx_mode::@50: scope:[gfx_mode]  from gfx_mode::@49
  (byte) keyboard_modifiers#100 ← phi( gfx_mode::@49/(byte) keyboard_modifiers#102 )
  (byte) keyboard_events_size#119 ← phi( gfx_mode::@49/(byte) keyboard_events_size#121 )
  (byte*) get_vic_screen::return#11 ← phi( gfx_mode::@49/(byte*) get_vic_screen::return#8 )
  (byte*~) gfx_mode::$63 ← (byte*) get_vic_screen::return#11
  (byte*) gfx_mode::vic_colors#0 ← (byte*~) gfx_mode::$63
  (byte*) gfx_mode::col#0 ← (byte*) COLS
  (byte) gfx_mode::cy#0 ← (byte) 0
  to:gfx_mode::@21
gfx_mode::@20: scope:[gfx_mode]  from gfx_mode::@8
  (byte) keyboard_modifiers#112 ← phi( gfx_mode::@8/(byte) keyboard_modifiers#113 )
  (byte) keyboard_events_size#131 ← phi( gfx_mode::@8/(byte) keyboard_events_size#132 )
  (byte) gfx_mode::vic_control2#3 ← phi( gfx_mode::@8/(byte) gfx_mode::vic_control2#0 )
  (byte~) gfx_mode::$81 ← (byte) gfx_mode::vic_control2#3 | (byte) VIC_MCM
  (byte) gfx_mode::vic_control2#1 ← (byte~) gfx_mode::$81
  to:gfx_mode::@9
gfx_mode::@21: scope:[gfx_mode]  from gfx_mode::@23 gfx_mode::@50
  (byte) keyboard_modifiers#98 ← phi( gfx_mode::@23/(byte) keyboard_modifiers#91 gfx_mode::@50/(byte) keyboard_modifiers#100 )
  (byte) keyboard_events_size#116 ← phi( gfx_mode::@23/(byte) keyboard_events_size#104 gfx_mode::@50/(byte) keyboard_events_size#119 )
  (byte) gfx_mode::cy#4 ← phi( gfx_mode::@23/(byte) gfx_mode::cy#1 gfx_mode::@50/(byte) gfx_mode::cy#0 )
  (byte*) gfx_mode::col#3 ← phi( gfx_mode::@23/(byte*) gfx_mode::col#4 gfx_mode::@50/(byte*) gfx_mode::col#0 )
  (byte*) gfx_mode::vic_colors#3 ← phi( gfx_mode::@23/(byte*) gfx_mode::vic_colors#4 gfx_mode::@50/(byte*) gfx_mode::vic_colors#0 )
  (byte) gfx_mode::cx#0 ← (byte) 0
  to:gfx_mode::@22
gfx_mode::@22: scope:[gfx_mode]  from gfx_mode::@21 gfx_mode::@22
  (byte) keyboard_modifiers#96 ← phi( gfx_mode::@21/(byte) keyboard_modifiers#98 gfx_mode::@22/(byte) keyboard_modifiers#96 )
  (byte) keyboard_events_size#112 ← phi( gfx_mode::@21/(byte) keyboard_events_size#116 gfx_mode::@22/(byte) keyboard_events_size#112 )
  (byte) gfx_mode::cy#3 ← phi( gfx_mode::@21/(byte) gfx_mode::cy#4 gfx_mode::@22/(byte) gfx_mode::cy#3 )
  (byte) gfx_mode::cx#2 ← phi( gfx_mode::@21/(byte) gfx_mode::cx#0 gfx_mode::@22/(byte) gfx_mode::cx#1 )
  (byte*) gfx_mode::col#2 ← phi( gfx_mode::@21/(byte*) gfx_mode::col#3 gfx_mode::@22/(byte*) gfx_mode::col#1 )
  (byte*) gfx_mode::vic_colors#2 ← phi( gfx_mode::@21/(byte*) gfx_mode::vic_colors#3 gfx_mode::@22/(byte*) gfx_mode::vic_colors#1 )
  *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2)
  (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2
  (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2
  (byte) gfx_mode::cx#1 ← (byte) gfx_mode::cx#2 + rangenext(0,$27)
  (bool~) gfx_mode::$82 ← (byte) gfx_mode::cx#1 != rangelast(0,$27)
  if((bool~) gfx_mode::$82) goto gfx_mode::@22
  to:gfx_mode::@23
gfx_mode::@23: scope:[gfx_mode]  from gfx_mode::@22
  (byte) keyboard_modifiers#91 ← phi( gfx_mode::@22/(byte) keyboard_modifiers#96 )
  (byte) keyboard_events_size#104 ← phi( gfx_mode::@22/(byte) keyboard_events_size#112 )
  (byte*) gfx_mode::col#4 ← phi( gfx_mode::@22/(byte*) gfx_mode::col#1 )
  (byte*) gfx_mode::vic_colors#4 ← phi( gfx_mode::@22/(byte*) gfx_mode::vic_colors#1 )
  (byte) gfx_mode::cy#2 ← phi( gfx_mode::@22/(byte) gfx_mode::cy#3 )
  (byte) gfx_mode::cy#1 ← (byte) gfx_mode::cy#2 + rangenext(0,$18)
  (bool~) gfx_mode::$83 ← (byte) gfx_mode::cy#1 != rangelast(0,$18)
  if((bool~) gfx_mode::$83) goto gfx_mode::@21
  to:gfx_mode::@24
gfx_mode::@24: scope:[gfx_mode]  from gfx_mode::@23
  (byte) keyboard_modifiers#85 ← phi( gfx_mode::@23/(byte) keyboard_modifiers#91 )
  (byte) keyboard_events_size#94 ← phi( gfx_mode::@23/(byte) keyboard_events_size#104 )
  *((byte*) BORDERCOL) ← (number) 0
  (number~) gfx_mode::$64 ← *((byte*) form_vic_bg0_hi) * (number) $10
  (number~) gfx_mode::$65 ← (number~) gfx_mode::$64 | *((byte*) form_vic_bg0_lo)
  *((byte*) BGCOL1) ← (number~) gfx_mode::$65
  (number~) gfx_mode::$66 ← *((byte*) form_vic_bg1_hi) * (number) $10
  (number~) gfx_mode::$67 ← (number~) gfx_mode::$66 | *((byte*) form_vic_bg1_lo)
  *((byte*) BGCOL2) ← (number~) gfx_mode::$67
  (number~) gfx_mode::$68 ← *((byte*) form_vic_bg2_hi) * (number) $10
  (number~) gfx_mode::$69 ← (number~) gfx_mode::$68 | *((byte*) form_vic_bg2_lo)
  *((byte*) BGCOL3) ← (number~) gfx_mode::$69
  (number~) gfx_mode::$70 ← *((byte*) form_vic_bg3_hi) * (number) $10
  (number~) gfx_mode::$71 ← (number~) gfx_mode::$70 | *((byte*) form_vic_bg3_lo)
  *((byte*) BGCOL4) ← (number~) gfx_mode::$71
  (bool~) gfx_mode::$72 ← *((byte*) form_dtv_palet) == (number) 0
  if((bool~) gfx_mode::$72) goto gfx_mode::@10
  to:gfx_mode::@25
gfx_mode::@10: scope:[gfx_mode]  from gfx_mode::@24
  (byte) keyboard_modifiers#78 ← phi( gfx_mode::@24/(byte) keyboard_modifiers#85 )
  (byte) keyboard_events_size#82 ← phi( gfx_mode::@24/(byte) keyboard_events_size#94 )
  (byte) gfx_mode::i#0 ← (byte) 0
  to:gfx_mode::@29
gfx_mode::@25: scope:[gfx_mode]  from gfx_mode::@24
  (byte) keyboard_modifiers#77 ← phi( gfx_mode::@24/(byte) keyboard_modifiers#85 )
  (byte) keyboard_events_size#81 ← phi( gfx_mode::@24/(byte) keyboard_events_size#94 )
  (byte) gfx_mode::j#0 ← (byte) 0
  to:gfx_mode::@26
gfx_mode::@26: scope:[gfx_mode]  from gfx_mode::@25 gfx_mode::@26
  (byte) keyboard_modifiers#57 ← phi( gfx_mode::@25/(byte) keyboard_modifiers#77 gfx_mode::@26/(byte) keyboard_modifiers#57 )
  (byte) keyboard_events_size#58 ← phi( gfx_mode::@25/(byte) keyboard_events_size#81 gfx_mode::@26/(byte) keyboard_events_size#58 )
  (byte) gfx_mode::j#2 ← phi( gfx_mode::@25/(byte) gfx_mode::j#0 gfx_mode::@26/(byte) gfx_mode::j#1 )
  *((byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2
  (byte) gfx_mode::j#1 ← (byte) gfx_mode::j#2 + rangenext(0,$f)
  (bool~) gfx_mode::$84 ← (byte) gfx_mode::j#1 != rangelast(0,$f)
  if((bool~) gfx_mode::$84) goto gfx_mode::@26
  to:gfx_mode::@31
gfx_mode::@29: scope:[gfx_mode]  from gfx_mode::@10 gfx_mode::@29
  (byte) keyboard_modifiers#58 ← phi( gfx_mode::@10/(byte) keyboard_modifiers#78 gfx_mode::@29/(byte) keyboard_modifiers#58 )
  (byte) keyboard_events_size#59 ← phi( gfx_mode::@10/(byte) keyboard_events_size#82 gfx_mode::@29/(byte) keyboard_events_size#59 )
  (byte) gfx_mode::i#2 ← phi( gfx_mode::@10/(byte) gfx_mode::i#0 gfx_mode::@29/(byte) gfx_mode::i#1 )
  *((byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((byte[$10]) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2)
  (byte) gfx_mode::i#1 ← (byte) gfx_mode::i#2 + rangenext(0,$f)
  (bool~) gfx_mode::$85 ← (byte) gfx_mode::i#1 != rangelast(0,$f)
  if((bool~) gfx_mode::$85) goto gfx_mode::@29
  to:gfx_mode::@31
gfx_mode::@31: scope:[gfx_mode]  from gfx_mode::@26 gfx_mode::@29 gfx_mode::@52
  (byte) keyboard_modifiers#41 ← phi( gfx_mode::@26/(byte) keyboard_modifiers#57 gfx_mode::@29/(byte) keyboard_modifiers#58 gfx_mode::@52/(byte) keyboard_modifiers#42 )
  (byte) keyboard_events_size#45 ← phi( gfx_mode::@26/(byte) keyboard_events_size#58 gfx_mode::@29/(byte) keyboard_events_size#59 gfx_mode::@52/(byte) keyboard_events_size#10 )
  if(true) goto gfx_mode::@34
  to:gfx_mode::@return
gfx_mode::@34: scope:[gfx_mode]  from gfx_mode::@31 gfx_mode::@34
  (byte) keyboard_modifiers#59 ← phi( gfx_mode::@31/(byte) keyboard_modifiers#41 gfx_mode::@34/(byte) keyboard_modifiers#59 )
  (byte) keyboard_events_size#60 ← phi( gfx_mode::@31/(byte) keyboard_events_size#45 gfx_mode::@34/(byte) keyboard_events_size#60 )
  (bool~) gfx_mode::$86 ← *((byte*) RASTER) != (number) $ff
  if((bool~) gfx_mode::$86) goto gfx_mode::@34
  to:gfx_mode::@36
gfx_mode::@36: scope:[gfx_mode]  from gfx_mode::@34
  (byte) keyboard_modifiers#40 ← phi( gfx_mode::@34/(byte) keyboard_modifiers#59 )
  (byte) keyboard_events_size#44 ← phi( gfx_mode::@34/(byte) keyboard_events_size#60 )
  call keyboard_event_scan 
  to:gfx_mode::@51
gfx_mode::@51: scope:[gfx_mode]  from gfx_mode::@36
  (byte) keyboard_modifiers#25 ← phi( gfx_mode::@36/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#28 ← phi( gfx_mode::@36/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#9 ← (byte) keyboard_events_size#28
  (byte) keyboard_modifiers#10 ← (byte) keyboard_modifiers#25
  call keyboard_event_get 
  (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:gfx_mode::@52
gfx_mode::@52: scope:[gfx_mode]  from gfx_mode::@51
  (byte) keyboard_modifiers#42 ← phi( gfx_mode::@51/(byte) keyboard_modifiers#10 )
  (byte) keyboard_events_size#29 ← phi( gfx_mode::@51/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#6 ← phi( gfx_mode::@51/(byte) keyboard_event_get::return#3 )
  (byte~) gfx_mode::$88 ← (byte) keyboard_event_get::return#6
  (byte) keyboard_events_size#10 ← (byte) keyboard_events_size#29
  (byte) gfx_mode::keyboard_event#0 ← (byte~) gfx_mode::$88
  (bool~) gfx_mode::$89 ← (byte) gfx_mode::keyboard_event#0 == (byte) KEY_SPACE
  (bool~) gfx_mode::$90 ← ! (bool~) gfx_mode::$89
  if((bool~) gfx_mode::$90) goto gfx_mode::@31
  to:gfx_mode::@return
gfx_mode::@return: scope:[gfx_mode]  from gfx_mode::@31 gfx_mode::@52
  (byte) keyboard_modifiers#26 ← phi( gfx_mode::@31/(byte) keyboard_modifiers#41 gfx_mode::@52/(byte) keyboard_modifiers#42 )
  (byte) keyboard_events_size#30 ← phi( gfx_mode::@31/(byte) keyboard_events_size#45 gfx_mode::@52/(byte) keyboard_events_size#10 )
  (byte) keyboard_events_size#11 ← (byte) keyboard_events_size#30
  (byte) keyboard_modifiers#11 ← (byte) keyboard_modifiers#26
  return 
  to:@return

(void()) gfx_init()
gfx_init: scope:[gfx_init]  from main::@7
  call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  call gfx_init_screen1 
  to:gfx_init::@2
gfx_init::@2: scope:[gfx_init]  from gfx_init::@1
  call gfx_init_screen2 
  to:gfx_init::@3
gfx_init::@3: scope:[gfx_init]  from gfx_init::@2
  call gfx_init_screen3 
  to:gfx_init::@4
gfx_init::@4: scope:[gfx_init]  from gfx_init::@3
  call gfx_init_screen4 
  to:gfx_init::@5
gfx_init::@5: scope:[gfx_init]  from gfx_init::@4
  call gfx_init_charset 
  to:gfx_init::@6
gfx_init::@6: scope:[gfx_init]  from gfx_init::@5
  call gfx_init_vic_bitmap 
  to:gfx_init::@7
gfx_init::@7: scope:[gfx_init]  from gfx_init::@6
  call gfx_init_plane_8bppchunky 
  to:gfx_init::@8
gfx_init::@8: scope:[gfx_init]  from gfx_init::@7
  call gfx_init_plane_charset8 
  to:gfx_init::@9
gfx_init::@9: scope:[gfx_init]  from gfx_init::@8
  call gfx_init_plane_horisontal 
  to:gfx_init::@10
gfx_init::@10: scope:[gfx_init]  from gfx_init::@9
  call gfx_init_plane_vertical 
  to:gfx_init::@11
gfx_init::@11: scope:[gfx_init]  from gfx_init::@10
  call gfx_init_plane_horisontal2 
  to:gfx_init::@12
gfx_init::@12: scope:[gfx_init]  from gfx_init::@11
  call gfx_init_plane_vertical2 
  to:gfx_init::@13
gfx_init::@13: scope:[gfx_init]  from gfx_init::@12
  call gfx_init_plane_blank 
  to:gfx_init::@14
gfx_init::@14: scope:[gfx_init]  from gfx_init::@13
  call gfx_init_plane_full 
  to:gfx_init::@15
gfx_init::@15: scope:[gfx_init]  from gfx_init::@14
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@15
  return 
  to:@return

(void()) gfx_init_charset()
gfx_init_charset: scope:[gfx_init_charset]  from gfx_init::@5
  *((byte*) PROCPORT) ← (number) $32
  (byte*) gfx_init_charset::chargen#0 ← (byte*) CHARGEN
  (byte*) gfx_init_charset::charset#0 ← (byte*) VIC_CHARSET_ROM
  (byte) gfx_init_charset::c#0 ← (byte) 0
  to:gfx_init_charset::@1
gfx_init_charset::@1: scope:[gfx_init_charset]  from gfx_init_charset gfx_init_charset::@3
  (byte) gfx_init_charset::c#4 ← phi( gfx_init_charset/(byte) gfx_init_charset::c#0 gfx_init_charset::@3/(byte) gfx_init_charset::c#1 )
  (byte*) gfx_init_charset::charset#3 ← phi( gfx_init_charset/(byte*) gfx_init_charset::charset#0 gfx_init_charset::@3/(byte*) gfx_init_charset::charset#4 )
  (byte*) gfx_init_charset::chargen#3 ← phi( gfx_init_charset/(byte*) gfx_init_charset::chargen#0 gfx_init_charset::@3/(byte*) gfx_init_charset::chargen#4 )
  (byte) gfx_init_charset::l#0 ← (byte) 0
  to:gfx_init_charset::@2
gfx_init_charset::@2: scope:[gfx_init_charset]  from gfx_init_charset::@1 gfx_init_charset::@2
  (byte) gfx_init_charset::c#3 ← phi( gfx_init_charset::@1/(byte) gfx_init_charset::c#4 gfx_init_charset::@2/(byte) gfx_init_charset::c#3 )
  (byte) gfx_init_charset::l#2 ← phi( gfx_init_charset::@1/(byte) gfx_init_charset::l#0 gfx_init_charset::@2/(byte) gfx_init_charset::l#1 )
  (byte*) gfx_init_charset::charset#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::charset#3 gfx_init_charset::@2/(byte*) gfx_init_charset::charset#1 )
  (byte*) gfx_init_charset::chargen#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::chargen#3 gfx_init_charset::@2/(byte*) gfx_init_charset::chargen#1 )
  *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2)
  (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2
  (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2
  (byte) gfx_init_charset::l#1 ← (byte) gfx_init_charset::l#2 + rangenext(0,7)
  (bool~) gfx_init_charset::$0 ← (byte) gfx_init_charset::l#1 != rangelast(0,7)
  if((bool~) gfx_init_charset::$0) goto gfx_init_charset::@2
  to:gfx_init_charset::@3
gfx_init_charset::@3: scope:[gfx_init_charset]  from gfx_init_charset::@2
  (byte*) gfx_init_charset::charset#4 ← phi( gfx_init_charset::@2/(byte*) gfx_init_charset::charset#1 )
  (byte*) gfx_init_charset::chargen#4 ← phi( gfx_init_charset::@2/(byte*) gfx_init_charset::chargen#1 )
  (byte) gfx_init_charset::c#2 ← phi( gfx_init_charset::@2/(byte) gfx_init_charset::c#3 )
  (byte) gfx_init_charset::c#1 ← (byte) gfx_init_charset::c#2 + rangenext(0,$ff)
  (bool~) gfx_init_charset::$1 ← (byte) gfx_init_charset::c#1 != rangelast(0,$ff)
  if((bool~) gfx_init_charset::$1) goto gfx_init_charset::@1
  to:gfx_init_charset::@4
gfx_init_charset::@4: scope:[gfx_init_charset]  from gfx_init_charset::@3
  *((byte*) PROCPORT) ← (number) $37
  to:gfx_init_charset::@return
gfx_init_charset::@return: scope:[gfx_init_charset]  from gfx_init_charset::@4
  return 
  to:@return

(void()) gfx_init_screen0()
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  (byte*) gfx_init_screen0::ch#0 ← (byte*) VIC_SCREEN0
  (byte) gfx_init_screen0::cy#0 ← (byte) 0
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  (byte*) gfx_init_screen0::ch#3 ← phi( gfx_init_screen0/(byte*) gfx_init_screen0::ch#0 gfx_init_screen0::@3/(byte*) gfx_init_screen0::ch#4 )
  (byte) gfx_init_screen0::cy#4 ← phi( gfx_init_screen0/(byte) gfx_init_screen0::cy#0 gfx_init_screen0::@3/(byte) gfx_init_screen0::cy#1 )
  (byte) gfx_init_screen0::cx#0 ← (byte) 0
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  (byte*) gfx_init_screen0::ch#2 ← phi( gfx_init_screen0::@1/(byte*) gfx_init_screen0::ch#3 gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  (byte) gfx_init_screen0::cx#2 ← phi( gfx_init_screen0::@1/(byte) gfx_init_screen0::cx#0 gfx_init_screen0::@2/(byte) gfx_init_screen0::cx#1 )
  (byte) gfx_init_screen0::cy#2 ← phi( gfx_init_screen0::@1/(byte) gfx_init_screen0::cy#4 gfx_init_screen0::@2/(byte) gfx_init_screen0::cy#2 )
  (number~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (number) $f
  (number~) gfx_init_screen0::$1 ← (number~) gfx_init_screen0::$0 * (number) $10
  (number~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (number) $f
  (number~) gfx_init_screen0::$3 ← (number~) gfx_init_screen0::$1 | (number~) gfx_init_screen0::$2
  *((byte*) gfx_init_screen0::ch#2) ← (number~) gfx_init_screen0::$3
  (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2
  (byte) gfx_init_screen0::cx#1 ← (byte) gfx_init_screen0::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen0::$4 ← (byte) gfx_init_screen0::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen0::$4) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  (byte*) gfx_init_screen0::ch#4 ← phi( gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  (byte) gfx_init_screen0::cy#3 ← phi( gfx_init_screen0::@2/(byte) gfx_init_screen0::cy#2 )
  (byte) gfx_init_screen0::cy#1 ← (byte) gfx_init_screen0::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen0::$5 ← (byte) gfx_init_screen0::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen0::$5) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  return 
  to:@return

(void()) gfx_init_screen1()
gfx_init_screen1: scope:[gfx_init_screen1]  from gfx_init::@1
  (byte*) gfx_init_screen1::ch#0 ← (byte*) VIC_SCREEN1
  (byte) gfx_init_screen1::cy#0 ← (byte) 0
  to:gfx_init_screen1::@1
gfx_init_screen1::@1: scope:[gfx_init_screen1]  from gfx_init_screen1 gfx_init_screen1::@3
  (byte*) gfx_init_screen1::ch#3 ← phi( gfx_init_screen1/(byte*) gfx_init_screen1::ch#0 gfx_init_screen1::@3/(byte*) gfx_init_screen1::ch#4 )
  (byte) gfx_init_screen1::cy#4 ← phi( gfx_init_screen1/(byte) gfx_init_screen1::cy#0 gfx_init_screen1::@3/(byte) gfx_init_screen1::cy#1 )
  (byte) gfx_init_screen1::cx#0 ← (byte) 0
  to:gfx_init_screen1::@2
gfx_init_screen1::@2: scope:[gfx_init_screen1]  from gfx_init_screen1::@1 gfx_init_screen1::@2
  (byte*) gfx_init_screen1::ch#2 ← phi( gfx_init_screen1::@1/(byte*) gfx_init_screen1::ch#3 gfx_init_screen1::@2/(byte*) gfx_init_screen1::ch#1 )
  (byte) gfx_init_screen1::cy#2 ← phi( gfx_init_screen1::@1/(byte) gfx_init_screen1::cy#4 gfx_init_screen1::@2/(byte) gfx_init_screen1::cy#2 )
  (byte) gfx_init_screen1::cx#2 ← phi( gfx_init_screen1::@1/(byte) gfx_init_screen1::cx#0 gfx_init_screen1::@2/(byte) gfx_init_screen1::cx#1 )
  (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#2
  (number~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (number) $f
  *((byte*) gfx_init_screen1::ch#2) ← (number~) gfx_init_screen1::$1
  (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2
  (byte) gfx_init_screen1::cx#1 ← (byte) gfx_init_screen1::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen1::$2 ← (byte) gfx_init_screen1::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen1::$2) goto gfx_init_screen1::@2
  to:gfx_init_screen1::@3
gfx_init_screen1::@3: scope:[gfx_init_screen1]  from gfx_init_screen1::@2
  (byte*) gfx_init_screen1::ch#4 ← phi( gfx_init_screen1::@2/(byte*) gfx_init_screen1::ch#1 )
  (byte) gfx_init_screen1::cy#3 ← phi( gfx_init_screen1::@2/(byte) gfx_init_screen1::cy#2 )
  (byte) gfx_init_screen1::cy#1 ← (byte) gfx_init_screen1::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen1::$3 ← (byte) gfx_init_screen1::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen1::$3) goto gfx_init_screen1::@1
  to:gfx_init_screen1::@return
gfx_init_screen1::@return: scope:[gfx_init_screen1]  from gfx_init_screen1::@3
  return 
  to:@return

(void()) gfx_init_screen2()
gfx_init_screen2: scope:[gfx_init_screen2]  from gfx_init::@2
  (byte*) gfx_init_screen2::ch#0 ← (byte*) VIC_SCREEN2
  (byte) gfx_init_screen2::cy#0 ← (byte) 0
  to:gfx_init_screen2::@1
gfx_init_screen2::@1: scope:[gfx_init_screen2]  from gfx_init_screen2 gfx_init_screen2::@3
  (byte*) gfx_init_screen2::ch#3 ← phi( gfx_init_screen2/(byte*) gfx_init_screen2::ch#0 gfx_init_screen2::@3/(byte*) gfx_init_screen2::ch#4 )
  (byte) gfx_init_screen2::cy#4 ← phi( gfx_init_screen2/(byte) gfx_init_screen2::cy#0 gfx_init_screen2::@3/(byte) gfx_init_screen2::cy#1 )
  (byte) gfx_init_screen2::cx#0 ← (byte) 0
  to:gfx_init_screen2::@2
gfx_init_screen2::@2: scope:[gfx_init_screen2]  from gfx_init_screen2::@1 gfx_init_screen2::@2
  (byte*) gfx_init_screen2::ch#2 ← phi( gfx_init_screen2::@1/(byte*) gfx_init_screen2::ch#3 gfx_init_screen2::@2/(byte*) gfx_init_screen2::ch#1 )
  (byte) gfx_init_screen2::cy#2 ← phi( gfx_init_screen2::@1/(byte) gfx_init_screen2::cy#4 gfx_init_screen2::@2/(byte) gfx_init_screen2::cy#2 )
  (byte) gfx_init_screen2::cx#2 ← phi( gfx_init_screen2::@1/(byte) gfx_init_screen2::cx#0 gfx_init_screen2::@2/(byte) gfx_init_screen2::cx#1 )
  (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#2
  (number~) gfx_init_screen2::$1 ← (byte~) gfx_init_screen2::$0 & (number) $f
  (byte) gfx_init_screen2::col#0 ← (number~) gfx_init_screen2::$1
  (number~) gfx_init_screen2::$2 ← (number) $f - (byte) gfx_init_screen2::col#0
  (byte) gfx_init_screen2::col2#0 ← (number~) gfx_init_screen2::$2
  (number~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (number) $10
  (number~) gfx_init_screen2::$4 ← (number~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
  *((byte*) gfx_init_screen2::ch#2) ← (number~) gfx_init_screen2::$4
  (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2
  (byte) gfx_init_screen2::cx#1 ← (byte) gfx_init_screen2::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen2::$5 ← (byte) gfx_init_screen2::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen2::$5) goto gfx_init_screen2::@2
  to:gfx_init_screen2::@3
gfx_init_screen2::@3: scope:[gfx_init_screen2]  from gfx_init_screen2::@2
  (byte*) gfx_init_screen2::ch#4 ← phi( gfx_init_screen2::@2/(byte*) gfx_init_screen2::ch#1 )
  (byte) gfx_init_screen2::cy#3 ← phi( gfx_init_screen2::@2/(byte) gfx_init_screen2::cy#2 )
  (byte) gfx_init_screen2::cy#1 ← (byte) gfx_init_screen2::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen2::$6 ← (byte) gfx_init_screen2::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen2::$6) goto gfx_init_screen2::@1
  to:gfx_init_screen2::@return
gfx_init_screen2::@return: scope:[gfx_init_screen2]  from gfx_init_screen2::@3
  return 
  to:@return

(void()) gfx_init_screen3()
gfx_init_screen3: scope:[gfx_init_screen3]  from gfx_init::@3
  (byte*) gfx_init_screen3::ch#0 ← (byte*) VIC_SCREEN3
  (byte) gfx_init_screen3::cy#0 ← (byte) 0
  to:gfx_init_screen3::@1
gfx_init_screen3::@1: scope:[gfx_init_screen3]  from gfx_init_screen3 gfx_init_screen3::@3
  (byte*) gfx_init_screen3::ch#3 ← phi( gfx_init_screen3/(byte*) gfx_init_screen3::ch#0 gfx_init_screen3::@3/(byte*) gfx_init_screen3::ch#4 )
  (byte) gfx_init_screen3::cy#4 ← phi( gfx_init_screen3/(byte) gfx_init_screen3::cy#0 gfx_init_screen3::@3/(byte) gfx_init_screen3::cy#1 )
  (byte) gfx_init_screen3::cx#0 ← (byte) 0
  to:gfx_init_screen3::@2
gfx_init_screen3::@2: scope:[gfx_init_screen3]  from gfx_init_screen3::@1 gfx_init_screen3::@2
  (byte*) gfx_init_screen3::ch#2 ← phi( gfx_init_screen3::@1/(byte*) gfx_init_screen3::ch#3 gfx_init_screen3::@2/(byte*) gfx_init_screen3::ch#1 )
  (byte) gfx_init_screen3::cy#2 ← phi( gfx_init_screen3::@1/(byte) gfx_init_screen3::cy#4 gfx_init_screen3::@2/(byte) gfx_init_screen3::cy#2 )
  (byte) gfx_init_screen3::cx#2 ← phi( gfx_init_screen3::@1/(byte) gfx_init_screen3::cx#0 gfx_init_screen3::@2/(byte) gfx_init_screen3::cx#1 )
  (number~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (number) 3
  (number~) gfx_init_screen3::$1 ← (number~) gfx_init_screen3::$0 * (number) $10
  (number~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#2 & (number) 3
  (number~) gfx_init_screen3::$3 ← (number~) gfx_init_screen3::$1 | (number~) gfx_init_screen3::$2
  *((byte*) gfx_init_screen3::ch#2) ← (number~) gfx_init_screen3::$3
  (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2
  (byte) gfx_init_screen3::cx#1 ← (byte) gfx_init_screen3::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen3::$4 ← (byte) gfx_init_screen3::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen3::$4) goto gfx_init_screen3::@2
  to:gfx_init_screen3::@3
gfx_init_screen3::@3: scope:[gfx_init_screen3]  from gfx_init_screen3::@2
  (byte*) gfx_init_screen3::ch#4 ← phi( gfx_init_screen3::@2/(byte*) gfx_init_screen3::ch#1 )
  (byte) gfx_init_screen3::cy#3 ← phi( gfx_init_screen3::@2/(byte) gfx_init_screen3::cy#2 )
  (byte) gfx_init_screen3::cy#1 ← (byte) gfx_init_screen3::cy#3 + rangenext(0,$18)
  (bool~) gfx_init_screen3::$5 ← (byte) gfx_init_screen3::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen3::$5) goto gfx_init_screen3::@1
  to:gfx_init_screen3::@return
gfx_init_screen3::@return: scope:[gfx_init_screen3]  from gfx_init_screen3::@3
  return 
  to:@return

(void()) gfx_init_screen4()
gfx_init_screen4: scope:[gfx_init_screen4]  from gfx_init::@4
  (byte*) gfx_init_screen4::ch#0 ← (byte*) VIC_SCREEN4
  (byte) gfx_init_screen4::cy#0 ← (byte) 0
  to:gfx_init_screen4::@1
gfx_init_screen4::@1: scope:[gfx_init_screen4]  from gfx_init_screen4 gfx_init_screen4::@3
  (byte) gfx_init_screen4::cy#4 ← phi( gfx_init_screen4/(byte) gfx_init_screen4::cy#0 gfx_init_screen4::@3/(byte) gfx_init_screen4::cy#1 )
  (byte*) gfx_init_screen4::ch#3 ← phi( gfx_init_screen4/(byte*) gfx_init_screen4::ch#0 gfx_init_screen4::@3/(byte*) gfx_init_screen4::ch#4 )
  (byte) gfx_init_screen4::cx#0 ← (byte) 0
  to:gfx_init_screen4::@2
gfx_init_screen4::@2: scope:[gfx_init_screen4]  from gfx_init_screen4::@1 gfx_init_screen4::@2
  (byte) gfx_init_screen4::cy#3 ← phi( gfx_init_screen4::@1/(byte) gfx_init_screen4::cy#4 gfx_init_screen4::@2/(byte) gfx_init_screen4::cy#3 )
  (byte) gfx_init_screen4::cx#2 ← phi( gfx_init_screen4::@1/(byte) gfx_init_screen4::cx#0 gfx_init_screen4::@2/(byte) gfx_init_screen4::cx#1 )
  (byte*) gfx_init_screen4::ch#2 ← phi( gfx_init_screen4::@1/(byte*) gfx_init_screen4::ch#3 gfx_init_screen4::@2/(byte*) gfx_init_screen4::ch#1 )
  *((byte*) gfx_init_screen4::ch#2) ← (number) 0
  (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2
  (byte) gfx_init_screen4::cx#1 ← (byte) gfx_init_screen4::cx#2 + rangenext(0,$27)
  (bool~) gfx_init_screen4::$0 ← (byte) gfx_init_screen4::cx#1 != rangelast(0,$27)
  if((bool~) gfx_init_screen4::$0) goto gfx_init_screen4::@2
  to:gfx_init_screen4::@3
gfx_init_screen4::@3: scope:[gfx_init_screen4]  from gfx_init_screen4::@2
  (byte*) gfx_init_screen4::ch#4 ← phi( gfx_init_screen4::@2/(byte*) gfx_init_screen4::ch#1 )
  (byte) gfx_init_screen4::cy#2 ← phi( gfx_init_screen4::@2/(byte) gfx_init_screen4::cy#3 )
  (byte) gfx_init_screen4::cy#1 ← (byte) gfx_init_screen4::cy#2 + rangenext(0,$18)
  (bool~) gfx_init_screen4::$1 ← (byte) gfx_init_screen4::cy#1 != rangelast(0,$18)
  if((bool~) gfx_init_screen4::$1) goto gfx_init_screen4::@1
  to:gfx_init_screen4::@return
gfx_init_screen4::@return: scope:[gfx_init_screen4]  from gfx_init_screen4::@3
  return 
  to:@return

(void()) gfx_init_vic_bitmap()
gfx_init_vic_bitmap: scope:[gfx_init_vic_bitmap]  from gfx_init::@6
  (byte*) bitmap_init::bitmap#0 ← (byte*) VIC_BITMAP
  call bitmap_init 
  to:gfx_init_vic_bitmap::@7
gfx_init_vic_bitmap::@7: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap
  call bitmap_clear 
  to:gfx_init_vic_bitmap::@8
gfx_init_vic_bitmap::@8: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@7
  (byte[]) gfx_init_vic_bitmap::lines_x ← { (number) 0, (number) $ff, (number) $ff, (number) 0, (number) 0, (number) $80, (number) $ff, (number) $80, (number) 0, (number) $80 }
  (byte[]) gfx_init_vic_bitmap::lines_y ← { (number) 0, (number) 0, (number) $c7, (number) $c7, (number) 0, (number) 0, (number) $64, (number) $c7, (number) $64, (number) 0 }
  (byte) gfx_init_vic_bitmap::lines_cnt ← (number) 9
  (byte) gfx_init_vic_bitmap::l#0 ← (number) 0
  to:gfx_init_vic_bitmap::@1
gfx_init_vic_bitmap::@1: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@8 gfx_init_vic_bitmap::@9
  (byte) gfx_init_vic_bitmap::l#2 ← phi( gfx_init_vic_bitmap::@8/(byte) gfx_init_vic_bitmap::l#0 gfx_init_vic_bitmap::@9/(byte) gfx_init_vic_bitmap::l#1 )
  (bool~) gfx_init_vic_bitmap::$2 ← (byte) gfx_init_vic_bitmap::l#2 < (byte) gfx_init_vic_bitmap::lines_cnt
  if((bool~) gfx_init_vic_bitmap::$2) goto gfx_init_vic_bitmap::@2
  to:gfx_init_vic_bitmap::@return
gfx_init_vic_bitmap::@2: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  (byte) gfx_init_vic_bitmap::l#3 ← phi( gfx_init_vic_bitmap::@1/(byte) gfx_init_vic_bitmap::l#2 )
  (number~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#3 + (number) 1
  (number~) gfx_init_vic_bitmap::$4 ← (byte) gfx_init_vic_bitmap::l#3 + (number) 1
  (byte) bitmap_line::x0#0 ← *((byte[]) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#3)
  (byte) bitmap_line::x1#0 ← *((byte[]) gfx_init_vic_bitmap::lines_x + (number~) gfx_init_vic_bitmap::$3)
  (byte) bitmap_line::y0#0 ← *((byte[]) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#3)
  (byte) bitmap_line::y1#0 ← *((byte[]) gfx_init_vic_bitmap::lines_y + (number~) gfx_init_vic_bitmap::$4)
  call bitmap_line 
  to:gfx_init_vic_bitmap::@9
gfx_init_vic_bitmap::@9: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@2
  (byte) gfx_init_vic_bitmap::l#4 ← phi( gfx_init_vic_bitmap::@2/(byte) gfx_init_vic_bitmap::l#3 )
  (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#4
  to:gfx_init_vic_bitmap::@1
gfx_init_vic_bitmap::@return: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  return 
  to:@return

(void()) gfx_init_plane_8bppchunky()
gfx_init_plane_8bppchunky: scope:[gfx_init_plane_8bppchunky]  from gfx_init::@7
  (number~) gfx_init_plane_8bppchunky::$0 ← (dword) PLANE_8BPP_CHUNKY / (number) $4000
  (byte~) gfx_init_plane_8bppchunky::$1 ← ((byte)) (number~) gfx_init_plane_8bppchunky::$0
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 ← (byte~) gfx_init_plane_8bppchunky::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#0 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@7
gfx_init_plane_8bppchunky::@7: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3 ← phi( gfx_init_plane_8bppchunky/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3
  (byte*) gfx_init_plane_8bppchunky::gfxb#0 ← ((byte*)) (number) $4000
  (byte) gfx_init_plane_8bppchunky::y#0 ← (byte) 0
  to:gfx_init_plane_8bppchunky::@1
gfx_init_plane_8bppchunky::@1: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5 gfx_init_plane_8bppchunky::@7
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9 gfx_init_plane_8bppchunky::@7/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 )
  (byte) gfx_init_plane_8bppchunky::y#6 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::y#1 gfx_init_plane_8bppchunky::@7/(byte) gfx_init_plane_8bppchunky::y#0 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#5 ← phi( gfx_init_plane_8bppchunky::@5/(byte*) gfx_init_plane_8bppchunky::gfxb#6 gfx_init_plane_8bppchunky::@7/(byte*) gfx_init_plane_8bppchunky::gfxb#0 )
  (word) gfx_init_plane_8bppchunky::x#0 ← (word) 0
  to:gfx_init_plane_8bppchunky::@2
gfx_init_plane_8bppchunky::@2: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@1 gfx_init_plane_8bppchunky::@3
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 ← phi( gfx_init_plane_8bppchunky::@1/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  (byte) gfx_init_plane_8bppchunky::y#4 ← phi( gfx_init_plane_8bppchunky::@1/(byte) gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::y#2 )
  (word) gfx_init_plane_8bppchunky::x#3 ← phi( gfx_init_plane_8bppchunky::@1/(word) gfx_init_plane_8bppchunky::x#0 gfx_init_plane_8bppchunky::@3/(word) gfx_init_plane_8bppchunky::x#1 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#3 ← phi( gfx_init_plane_8bppchunky::@1/(byte*) gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::@3/(byte*) gfx_init_plane_8bppchunky::gfxb#1 )
  (bool~) gfx_init_plane_8bppchunky::$5 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 == (number) $8000
  (bool~) gfx_init_plane_8bppchunky::$6 ← ! (bool~) gfx_init_plane_8bppchunky::$5
  if((bool~) gfx_init_plane_8bppchunky::$6) goto gfx_init_plane_8bppchunky::@3
  to:gfx_init_plane_8bppchunky::@4
gfx_init_plane_8bppchunky::@3: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2 gfx_init_plane_8bppchunky::@8
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 gfx_init_plane_8bppchunky::@8/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#4 ← phi( gfx_init_plane_8bppchunky::@2/(byte*) gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::@8/(byte*) gfx_init_plane_8bppchunky::gfxb#2 )
  (byte) gfx_init_plane_8bppchunky::y#2 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::y#4 gfx_init_plane_8bppchunky::@8/(byte) gfx_init_plane_8bppchunky::y#5 )
  (word) gfx_init_plane_8bppchunky::x#2 ← phi( gfx_init_plane_8bppchunky::@2/(word) gfx_init_plane_8bppchunky::x#3 gfx_init_plane_8bppchunky::@8/(word) gfx_init_plane_8bppchunky::x#4 )
  (word~) gfx_init_plane_8bppchunky::$8 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#2
  (byte~) gfx_init_plane_8bppchunky::$9 ← ((byte)) (word~) gfx_init_plane_8bppchunky::$8
  (byte) gfx_init_plane_8bppchunky::c#0 ← (byte~) gfx_init_plane_8bppchunky::$9
  *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0
  (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4
  (word) gfx_init_plane_8bppchunky::x#1 ← (word) gfx_init_plane_8bppchunky::x#2 + rangenext(0,$13f)
  (bool~) gfx_init_plane_8bppchunky::$10 ← (word) gfx_init_plane_8bppchunky::x#1 != rangelast(0,$13f)
  if((bool~) gfx_init_plane_8bppchunky::$10) goto gfx_init_plane_8bppchunky::@2
  to:gfx_init_plane_8bppchunky::@5
gfx_init_plane_8bppchunky::@4: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2
  (byte) gfx_init_plane_8bppchunky::y#7 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::y#4 )
  (word) gfx_init_plane_8bppchunky::x#5 ← phi( gfx_init_plane_8bppchunky::@2/(word) gfx_init_plane_8bppchunky::x#3 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 )
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@8
gfx_init_plane_8bppchunky::@8: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@4
  (byte) gfx_init_plane_8bppchunky::y#5 ← phi( gfx_init_plane_8bppchunky::@4/(byte) gfx_init_plane_8bppchunky::y#7 )
  (word) gfx_init_plane_8bppchunky::x#4 ← phi( gfx_init_plane_8bppchunky::@4/(word) gfx_init_plane_8bppchunky::x#5 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5 ← phi( gfx_init_plane_8bppchunky::@4/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 )
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5
  (byte*) gfx_init_plane_8bppchunky::gfxb#2 ← ((byte*)) (number) $4000
  to:gfx_init_plane_8bppchunky::@3
gfx_init_plane_8bppchunky::@5: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@3
  (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9 ← phi( gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  (byte*) gfx_init_plane_8bppchunky::gfxb#6 ← phi( gfx_init_plane_8bppchunky::@3/(byte*) gfx_init_plane_8bppchunky::gfxb#1 )
  (byte) gfx_init_plane_8bppchunky::y#3 ← phi( gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::y#2 )
  (byte) gfx_init_plane_8bppchunky::y#1 ← (byte) gfx_init_plane_8bppchunky::y#3 + rangenext(0,$c7)
  (bool~) gfx_init_plane_8bppchunky::$11 ← (byte) gfx_init_plane_8bppchunky::y#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_8bppchunky::$11) goto gfx_init_plane_8bppchunky::@1
  to:gfx_init_plane_8bppchunky::@6
gfx_init_plane_8bppchunky::@6: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5
  (byte~) gfx_init_plane_8bppchunky::$3 ← ((byte)) (number) $4000/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 ← (byte~) gfx_init_plane_8bppchunky::$3
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@9
gfx_init_plane_8bppchunky::@9: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@6
  to:gfx_init_plane_8bppchunky::@return
gfx_init_plane_8bppchunky::@return: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@9
  return 
  to:@return

(void()) gfx_init_plane_horisontal()
gfx_init_plane_horisontal: scope:[gfx_init_plane_horisontal]  from gfx_init::@9
  (number~) gfx_init_plane_horisontal::$0 ← (dword) PLANE_HORISONTAL / (number) $4000
  (byte~) gfx_init_plane_horisontal::$1 ← ((byte)) (number~) gfx_init_plane_horisontal::$0
  (byte) gfx_init_plane_horisontal::gfxbCpuBank#0 ← (byte~) gfx_init_plane_horisontal::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#3 ← (byte) gfx_init_plane_horisontal::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@9
gfx_init_plane_horisontal::@9: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal
  (byte) gfx_init_plane_horisontal::gfxbCpuBank#2 ← phi( gfx_init_plane_horisontal/(byte) gfx_init_plane_horisontal::gfxbCpuBank#0 )
  (byte) gfx_init_plane_horisontal::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_horisontal::gfxbCpuBank#2
  (number~) gfx_init_plane_horisontal::$3 ← (dword) PLANE_HORISONTAL & (number) $3fff
  (number~) gfx_init_plane_horisontal::$4 ← (number) $4000 + (number~) gfx_init_plane_horisontal::$3
  (byte*) gfx_init_plane_horisontal::gfxa#0 ← ((byte*)) (number~) gfx_init_plane_horisontal::$4
  (byte) gfx_init_plane_horisontal::ay#0 ← (byte) 0
  to:gfx_init_plane_horisontal::@1
gfx_init_plane_horisontal::@1: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7 gfx_init_plane_horisontal::@9
  (byte*) gfx_init_plane_horisontal::gfxa#6 ← phi( gfx_init_plane_horisontal::@7/(byte*) gfx_init_plane_horisontal::gfxa#8 gfx_init_plane_horisontal::@9/(byte*) gfx_init_plane_horisontal::gfxa#0 )
  (byte) gfx_init_plane_horisontal::ay#4 ← phi( gfx_init_plane_horisontal::@7/(byte) gfx_init_plane_horisontal::ay#1 gfx_init_plane_horisontal::@9/(byte) gfx_init_plane_horisontal::ay#0 )
  (byte) gfx_init_plane_horisontal::ax#0 ← (byte) 0
  to:gfx_init_plane_horisontal::@2
gfx_init_plane_horisontal::@2: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@1 gfx_init_plane_horisontal::@4
  (byte) gfx_init_plane_horisontal::ax#5 ← phi( gfx_init_plane_horisontal::@1/(byte) gfx_init_plane_horisontal::ax#0 gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ax#1 )
  (byte*) gfx_init_plane_horisontal::gfxa#5 ← phi( gfx_init_plane_horisontal::@1/(byte*) gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::@4/(byte*) gfx_init_plane_horisontal::gfxa#7 )
  (byte) gfx_init_plane_horisontal::ay#2 ← phi( gfx_init_plane_horisontal::@1/(byte) gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ay#5 )
  (number~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#2 & (number) 4
  (bool~) gfx_init_plane_horisontal::$8 ← (number~) gfx_init_plane_horisontal::$7 == (number) 0
  if((bool~) gfx_init_plane_horisontal::$8) goto gfx_init_plane_horisontal::@3
  to:gfx_init_plane_horisontal::@5
gfx_init_plane_horisontal::@3: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  (byte) gfx_init_plane_horisontal::ay#6 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ay#2 )
  (byte) gfx_init_plane_horisontal::ax#3 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ax#5 )
  (byte*) gfx_init_plane_horisontal::gfxa#3 ← phi( gfx_init_plane_horisontal::@2/(byte*) gfx_init_plane_horisontal::gfxa#5 )
  *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (number) 0
  (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@5: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  (byte) gfx_init_plane_horisontal::ay#7 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ay#2 )
  (byte) gfx_init_plane_horisontal::ax#4 ← phi( gfx_init_plane_horisontal::@2/(byte) gfx_init_plane_horisontal::ax#5 )
  (byte*) gfx_init_plane_horisontal::gfxa#4 ← phi( gfx_init_plane_horisontal::@2/(byte*) gfx_init_plane_horisontal::gfxa#5 )
  *((byte*) gfx_init_plane_horisontal::gfxa#4) ← (number) $ff
  (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#4
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@4: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5
  (byte*) gfx_init_plane_horisontal::gfxa#7 ← phi( gfx_init_plane_horisontal::@3/(byte*) gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::@5/(byte*) gfx_init_plane_horisontal::gfxa#2 )
  (byte) gfx_init_plane_horisontal::ay#5 ← phi( gfx_init_plane_horisontal::@3/(byte) gfx_init_plane_horisontal::ay#6 gfx_init_plane_horisontal::@5/(byte) gfx_init_plane_horisontal::ay#7 )
  (byte) gfx_init_plane_horisontal::ax#2 ← phi( gfx_init_plane_horisontal::@3/(byte) gfx_init_plane_horisontal::ax#3 gfx_init_plane_horisontal::@5/(byte) gfx_init_plane_horisontal::ax#4 )
  (byte) gfx_init_plane_horisontal::ax#1 ← (byte) gfx_init_plane_horisontal::ax#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_horisontal::$9 ← (byte) gfx_init_plane_horisontal::ax#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_horisontal::$9) goto gfx_init_plane_horisontal::@2
  to:gfx_init_plane_horisontal::@7
gfx_init_plane_horisontal::@7: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@4
  (byte*) gfx_init_plane_horisontal::gfxa#8 ← phi( gfx_init_plane_horisontal::@4/(byte*) gfx_init_plane_horisontal::gfxa#7 )
  (byte) gfx_init_plane_horisontal::ay#3 ← phi( gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ay#5 )
  (byte) gfx_init_plane_horisontal::ay#1 ← (byte) gfx_init_plane_horisontal::ay#3 + rangenext(0,$c7)
  (bool~) gfx_init_plane_horisontal::$10 ← (byte) gfx_init_plane_horisontal::ay#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_horisontal::$10) goto gfx_init_plane_horisontal::@1
  to:gfx_init_plane_horisontal::@8
gfx_init_plane_horisontal::@8: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7
  (byte~) gfx_init_plane_horisontal::$5 ← ((byte)) (number) $4000/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#4 ← (byte~) gfx_init_plane_horisontal::$5
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@10
gfx_init_plane_horisontal::@10: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@8
  to:gfx_init_plane_horisontal::@return
gfx_init_plane_horisontal::@return: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@10
  return 
  to:@return

(void()) gfx_init_plane_horisontal2()
gfx_init_plane_horisontal2: scope:[gfx_init_plane_horisontal2]  from gfx_init::@11
  (number~) gfx_init_plane_horisontal2::$0 ← (dword) PLANE_HORISONTAL2 / (number) $4000
  (byte~) gfx_init_plane_horisontal2::$1 ← ((byte)) (number~) gfx_init_plane_horisontal2::$0
  (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 ← (byte~) gfx_init_plane_horisontal2::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#5 ← (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@5
gfx_init_plane_horisontal2::@5: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2
  (byte) gfx_init_plane_horisontal2::gfxbCpuBank#2 ← phi( gfx_init_plane_horisontal2/(byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 )
  (byte) gfx_init_plane_horisontal2::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_horisontal2::gfxbCpuBank#2
  (number~) gfx_init_plane_horisontal2::$3 ← (dword) PLANE_HORISONTAL2 & (number) $3fff
  (number~) gfx_init_plane_horisontal2::$4 ← (number) $4000 + (number~) gfx_init_plane_horisontal2::$3
  (byte*) gfx_init_plane_horisontal2::gfxa#0 ← ((byte*)) (number~) gfx_init_plane_horisontal2::$4
  (byte[]) gfx_init_plane_horisontal2::row_bitmask ← { (number) 0, (number) $55, (number) $aa, (number) $ff }
  (byte) gfx_init_plane_horisontal2::ay#0 ← (byte) 0
  to:gfx_init_plane_horisontal2::@1
gfx_init_plane_horisontal2::@1: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3 gfx_init_plane_horisontal2::@5
  (byte*) gfx_init_plane_horisontal2::gfxa#3 ← phi( gfx_init_plane_horisontal2::@3/(byte*) gfx_init_plane_horisontal2::gfxa#4 gfx_init_plane_horisontal2::@5/(byte*) gfx_init_plane_horisontal2::gfxa#0 )
  (byte) gfx_init_plane_horisontal2::ay#4 ← phi( gfx_init_plane_horisontal2::@3/(byte) gfx_init_plane_horisontal2::ay#1 gfx_init_plane_horisontal2::@5/(byte) gfx_init_plane_horisontal2::ay#0 )
  (byte) gfx_init_plane_horisontal2::ax#0 ← (byte) 0
  to:gfx_init_plane_horisontal2::@2
gfx_init_plane_horisontal2::@2: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@1 gfx_init_plane_horisontal2::@2
  (byte) gfx_init_plane_horisontal2::ax#2 ← phi( gfx_init_plane_horisontal2::@1/(byte) gfx_init_plane_horisontal2::ax#0 gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ax#1 )
  (byte*) gfx_init_plane_horisontal2::gfxa#2 ← phi( gfx_init_plane_horisontal2::@1/(byte*) gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::@2/(byte*) gfx_init_plane_horisontal2::gfxa#1 )
  (byte) gfx_init_plane_horisontal2::ay#2 ← phi( gfx_init_plane_horisontal2::@1/(byte) gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ay#2 )
  (number~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#2 / (number) 2
  (number~) gfx_init_plane_horisontal2::$8 ← (number~) gfx_init_plane_horisontal2::$7 & (number) 3
  (byte) gfx_init_plane_horisontal2::row#0 ← (number~) gfx_init_plane_horisontal2::$8
  *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((byte[]) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0)
  (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2
  (byte) gfx_init_plane_horisontal2::ax#1 ← (byte) gfx_init_plane_horisontal2::ax#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_horisontal2::$9 ← (byte) gfx_init_plane_horisontal2::ax#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_horisontal2::$9) goto gfx_init_plane_horisontal2::@2
  to:gfx_init_plane_horisontal2::@3
gfx_init_plane_horisontal2::@3: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@2
  (byte*) gfx_init_plane_horisontal2::gfxa#4 ← phi( gfx_init_plane_horisontal2::@2/(byte*) gfx_init_plane_horisontal2::gfxa#1 )
  (byte) gfx_init_plane_horisontal2::ay#3 ← phi( gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ay#2 )
  (byte) gfx_init_plane_horisontal2::ay#1 ← (byte) gfx_init_plane_horisontal2::ay#3 + rangenext(0,$c7)
  (bool~) gfx_init_plane_horisontal2::$10 ← (byte) gfx_init_plane_horisontal2::ay#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_horisontal2::$10) goto gfx_init_plane_horisontal2::@1
  to:gfx_init_plane_horisontal2::@4
gfx_init_plane_horisontal2::@4: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3
  (byte~) gfx_init_plane_horisontal2::$5 ← ((byte)) (number) $4000/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#6 ← (byte~) gfx_init_plane_horisontal2::$5
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@6
gfx_init_plane_horisontal2::@6: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@4
  to:gfx_init_plane_horisontal2::@return
gfx_init_plane_horisontal2::@return: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@6
  return 
  to:@return

(void()) gfx_init_plane_vertical()
gfx_init_plane_vertical: scope:[gfx_init_plane_vertical]  from gfx_init::@10
  (number~) gfx_init_plane_vertical::$0 ← (dword) PLANE_VERTICAL / (number) $4000
  (byte~) gfx_init_plane_vertical::$1 ← ((byte)) (number~) gfx_init_plane_vertical::$0
  (byte) gfx_init_plane_vertical::gfxbCpuBank#0 ← (byte~) gfx_init_plane_vertical::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#7 ← (byte) gfx_init_plane_vertical::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@5
gfx_init_plane_vertical::@5: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical
  (byte) gfx_init_plane_vertical::gfxbCpuBank#2 ← phi( gfx_init_plane_vertical/(byte) gfx_init_plane_vertical::gfxbCpuBank#0 )
  (byte) gfx_init_plane_vertical::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_vertical::gfxbCpuBank#2
  (number~) gfx_init_plane_vertical::$3 ← (dword) PLANE_VERTICAL & (number) $3fff
  (number~) gfx_init_plane_vertical::$4 ← (number) $4000 + (number~) gfx_init_plane_vertical::$3
  (byte*) gfx_init_plane_vertical::gfxb#0 ← ((byte*)) (number~) gfx_init_plane_vertical::$4
  (byte) gfx_init_plane_vertical::by#0 ← (byte) 0
  to:gfx_init_plane_vertical::@1
gfx_init_plane_vertical::@1: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3 gfx_init_plane_vertical::@5
  (byte) gfx_init_plane_vertical::by#4 ← phi( gfx_init_plane_vertical::@3/(byte) gfx_init_plane_vertical::by#1 gfx_init_plane_vertical::@5/(byte) gfx_init_plane_vertical::by#0 )
  (byte*) gfx_init_plane_vertical::gfxb#3 ← phi( gfx_init_plane_vertical::@3/(byte*) gfx_init_plane_vertical::gfxb#4 gfx_init_plane_vertical::@5/(byte*) gfx_init_plane_vertical::gfxb#0 )
  (byte) gfx_init_plane_vertical::bx#0 ← (byte) 0
  to:gfx_init_plane_vertical::@2
gfx_init_plane_vertical::@2: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@1 gfx_init_plane_vertical::@2
  (byte) gfx_init_plane_vertical::by#3 ← phi( gfx_init_plane_vertical::@1/(byte) gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::by#3 )
  (byte) gfx_init_plane_vertical::bx#2 ← phi( gfx_init_plane_vertical::@1/(byte) gfx_init_plane_vertical::bx#0 gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::bx#1 )
  (byte*) gfx_init_plane_vertical::gfxb#2 ← phi( gfx_init_plane_vertical::@1/(byte*) gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::@2/(byte*) gfx_init_plane_vertical::gfxb#1 )
  *((byte*) gfx_init_plane_vertical::gfxb#2) ← (number) $f
  (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2
  (byte) gfx_init_plane_vertical::bx#1 ← (byte) gfx_init_plane_vertical::bx#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_vertical::$7 ← (byte) gfx_init_plane_vertical::bx#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_vertical::$7) goto gfx_init_plane_vertical::@2
  to:gfx_init_plane_vertical::@3
gfx_init_plane_vertical::@3: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@2
  (byte*) gfx_init_plane_vertical::gfxb#4 ← phi( gfx_init_plane_vertical::@2/(byte*) gfx_init_plane_vertical::gfxb#1 )
  (byte) gfx_init_plane_vertical::by#2 ← phi( gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::by#3 )
  (byte) gfx_init_plane_vertical::by#1 ← (byte) gfx_init_plane_vertical::by#2 + rangenext(0,$c7)
  (bool~) gfx_init_plane_vertical::$8 ← (byte) gfx_init_plane_vertical::by#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_vertical::$8) goto gfx_init_plane_vertical::@1
  to:gfx_init_plane_vertical::@4
gfx_init_plane_vertical::@4: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3
  (byte~) gfx_init_plane_vertical::$5 ← ((byte)) (number) $4000/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#8 ← (byte~) gfx_init_plane_vertical::$5
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@6
gfx_init_plane_vertical::@6: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@4
  to:gfx_init_plane_vertical::@return
gfx_init_plane_vertical::@return: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@6
  return 
  to:@return

(void()) gfx_init_plane_charset8()
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@8
  (number~) gfx_init_plane_charset8::$0 ← (dword) PLANE_CHARSET8 / (number) $4000
  (byte~) gfx_init_plane_charset8::$1 ← ((byte)) (number~) gfx_init_plane_charset8::$0
  (byte) gfx_init_plane_charset8::gfxbCpuBank#0 ← (byte~) gfx_init_plane_charset8::$1
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#9 ← (byte) gfx_init_plane_charset8::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  (byte) gfx_init_plane_charset8::gfxbCpuBank#2 ← phi( gfx_init_plane_charset8/(byte) gfx_init_plane_charset8::gfxbCpuBank#0 )
  (byte) gfx_init_plane_charset8::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_charset8::gfxbCpuBank#2
  (number~) gfx_init_plane_charset8::$3 ← (dword) PLANE_CHARSET8 & (number) $3fff
  (number~) gfx_init_plane_charset8::$4 ← (number) $4000 + (number~) gfx_init_plane_charset8::$3
  (byte*) gfx_init_plane_charset8::gfxa#0 ← ((byte*)) (number~) gfx_init_plane_charset8::$4
  (byte*) gfx_init_plane_charset8::chargen#0 ← (byte*) CHARGEN
  *((byte*) PROCPORT) ← (byte) PROCPORT_RAM_CHARROM
  (byte) gfx_init_plane_charset8::col#0 ← (number) 0
  (byte) gfx_init_plane_charset8::ch#0 ← (byte) 0
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  (byte) gfx_init_plane_charset8::ch#8 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::ch#1 gfx_init_plane_charset8::@9/(byte) gfx_init_plane_charset8::ch#0 )
  (byte) gfx_init_plane_charset8::col#6 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::col#8 gfx_init_plane_charset8::@9/(byte) gfx_init_plane_charset8::col#0 )
  (byte*) gfx_init_plane_charset8::gfxa#6 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::gfxa#8 gfx_init_plane_charset8::@9/(byte*) gfx_init_plane_charset8::gfxa#0 )
  (byte*) gfx_init_plane_charset8::chargen#3 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::chargen#5 gfx_init_plane_charset8::@9/(byte*) gfx_init_plane_charset8::chargen#0 )
  (byte) gfx_init_plane_charset8::cr#0 ← (byte) 0
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  (byte) gfx_init_plane_charset8::ch#7 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::ch#3 )
  (byte) gfx_init_plane_charset8::cr#6 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::cr#0 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::cr#1 )
  (byte) gfx_init_plane_charset8::col#5 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#7 )
  (byte*) gfx_init_plane_charset8::gfxa#5 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#7 )
  (byte*) gfx_init_plane_charset8::chargen#2 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#4 )
  (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2)
  (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2
  (byte) gfx_init_plane_charset8::cp#0 ← (byte) 0
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  (byte) gfx_init_plane_charset8::ch#5 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::ch#7 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::ch#4 )
  (byte*) gfx_init_plane_charset8::chargen#7 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::chargen#6 )
  (byte) gfx_init_plane_charset8::cr#4 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cr#3 )
  (byte) gfx_init_plane_charset8::cp#3 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::cp#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cp#1 )
  (byte) gfx_init_plane_charset8::col#4 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  (byte*) gfx_init_plane_charset8::gfxa#3 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  (byte) gfx_init_plane_charset8::bits#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::bits#1 )
  (byte) gfx_init_plane_charset8::c#0 ← (number) 0
  (number~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (number) $80
  (bool~) gfx_init_plane_charset8::$8 ← (number~) gfx_init_plane_charset8::$7 != (number) 0
  (bool~) gfx_init_plane_charset8::$9 ← ! (bool~) gfx_init_plane_charset8::$8
  if((bool~) gfx_init_plane_charset8::$9) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  (byte) gfx_init_plane_charset8::ch#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::ch#5 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::ch#6 )
  (byte*) gfx_init_plane_charset8::chargen#6 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::chargen#7 gfx_init_plane_charset8::@5/(byte*) gfx_init_plane_charset8::chargen#8 )
  (byte) gfx_init_plane_charset8::cr#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cr#4 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::cr#5 )
  (byte) gfx_init_plane_charset8::cp#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cp#3 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::cp#4 )
  (byte) gfx_init_plane_charset8::col#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::col#4 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::col#3 )
  (byte) gfx_init_plane_charset8::bits#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::bits#4 )
  (byte*) gfx_init_plane_charset8::gfxa#2 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::gfxa#3 gfx_init_plane_charset8::@5/(byte*) gfx_init_plane_charset8::gfxa#4 )
  (byte) gfx_init_plane_charset8::c#2 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::c#0 gfx_init_plane_charset8::@5/(byte) gfx_init_plane_charset8::c#1 )
  *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2
  (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2
  (number~) gfx_init_plane_charset8::$10 ← (byte) gfx_init_plane_charset8::bits#3 * (number) 2
  (byte) gfx_init_plane_charset8::bits#1 ← (number~) gfx_init_plane_charset8::$10
  (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2
  (byte) gfx_init_plane_charset8::cp#1 ← (byte) gfx_init_plane_charset8::cp#2 + rangenext(0,7)
  (bool~) gfx_init_plane_charset8::$11 ← (byte) gfx_init_plane_charset8::cp#1 != rangelast(0,7)
  if((bool~) gfx_init_plane_charset8::$11) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  (byte) gfx_init_plane_charset8::ch#6 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::ch#5 )
  (byte*) gfx_init_plane_charset8::chargen#8 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::chargen#7 )
  (byte) gfx_init_plane_charset8::cr#5 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cr#4 )
  (byte) gfx_init_plane_charset8::cp#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::cp#3 )
  (byte) gfx_init_plane_charset8::bits#4 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::bits#2 )
  (byte*) gfx_init_plane_charset8::gfxa#4 ← phi( gfx_init_plane_charset8::@3/(byte*) gfx_init_plane_charset8::gfxa#3 )
  (byte) gfx_init_plane_charset8::col#3 ← phi( gfx_init_plane_charset8::@3/(byte) gfx_init_plane_charset8::col#4 )
  (byte) gfx_init_plane_charset8::c#1 ← (byte) gfx_init_plane_charset8::col#3
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  (byte) gfx_init_plane_charset8::col#7 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  (byte*) gfx_init_plane_charset8::gfxa#7 ← phi( gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  (byte) gfx_init_plane_charset8::ch#3 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::ch#4 )
  (byte*) gfx_init_plane_charset8::chargen#4 ← phi( gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::chargen#6 )
  (byte) gfx_init_plane_charset8::cr#2 ← phi( gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cr#3 )
  (byte) gfx_init_plane_charset8::cr#1 ← (byte) gfx_init_plane_charset8::cr#2 + rangenext(0,7)
  (bool~) gfx_init_plane_charset8::$12 ← (byte) gfx_init_plane_charset8::cr#1 != rangelast(0,7)
  if((bool~) gfx_init_plane_charset8::$12) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  (byte) gfx_init_plane_charset8::col#8 ← phi( gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#7 )
  (byte*) gfx_init_plane_charset8::gfxa#8 ← phi( gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#7 )
  (byte*) gfx_init_plane_charset8::chargen#5 ← phi( gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#4 )
  (byte) gfx_init_plane_charset8::ch#2 ← phi( gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::ch#3 )
  (byte) gfx_init_plane_charset8::ch#1 ← (byte) gfx_init_plane_charset8::ch#2 + rangenext(0,$ff)
  (bool~) gfx_init_plane_charset8::$13 ← (byte) gfx_init_plane_charset8::ch#1 != rangelast(0,$ff)
  if((bool~) gfx_init_plane_charset8::$13) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  *((byte*) PROCPORT) ← (byte) PROCPORT_RAM_IO
  (byte~) gfx_init_plane_charset8::$5 ← ((byte)) (number) $4000/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#10 ← (byte~) gfx_init_plane_charset8::$5
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@10
gfx_init_plane_charset8::@10: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@10
  return 
  to:@return

(void()) gfx_init_plane_vertical2()
gfx_init_plane_vertical2: scope:[gfx_init_plane_vertical2]  from gfx_init::@12
  (dword) gfx_init_plane_fill::plane_addr#0 ← (dword) PLANE_VERTICAL2
  (byte) gfx_init_plane_fill::fill#0 ← (number) $1b
  call gfx_init_plane_fill 
  to:gfx_init_plane_vertical2::@1
gfx_init_plane_vertical2::@1: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2
  to:gfx_init_plane_vertical2::@return
gfx_init_plane_vertical2::@return: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2::@1
  return 
  to:@return

(void()) gfx_init_plane_blank()
gfx_init_plane_blank: scope:[gfx_init_plane_blank]  from gfx_init::@13
  (dword) gfx_init_plane_fill::plane_addr#1 ← (dword) PLANE_BLANK
  (byte) gfx_init_plane_fill::fill#1 ← (number) 0
  call gfx_init_plane_fill 
  to:gfx_init_plane_blank::@1
gfx_init_plane_blank::@1: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank
  to:gfx_init_plane_blank::@return
gfx_init_plane_blank::@return: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank::@1
  return 
  to:@return

(void()) gfx_init_plane_full()
gfx_init_plane_full: scope:[gfx_init_plane_full]  from gfx_init::@14
  (dword) gfx_init_plane_fill::plane_addr#2 ← (dword) PLANE_FULL
  (byte) gfx_init_plane_fill::fill#2 ← (number) $ff
  call gfx_init_plane_fill 
  to:gfx_init_plane_full::@1
gfx_init_plane_full::@1: scope:[gfx_init_plane_full]  from gfx_init_plane_full
  to:gfx_init_plane_full::@return
gfx_init_plane_full::@return: scope:[gfx_init_plane_full]  from gfx_init_plane_full::@1
  return 
  to:@return

(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
gfx_init_plane_fill: scope:[gfx_init_plane_fill]  from gfx_init_plane_blank gfx_init_plane_full gfx_init_plane_vertical2
  (byte) gfx_init_plane_fill::fill#7 ← phi( gfx_init_plane_blank/(byte) gfx_init_plane_fill::fill#1 gfx_init_plane_full/(byte) gfx_init_plane_fill::fill#2 gfx_init_plane_vertical2/(byte) gfx_init_plane_fill::fill#0 )
  (dword) gfx_init_plane_fill::plane_addr#3 ← phi( gfx_init_plane_blank/(dword) gfx_init_plane_fill::plane_addr#1 gfx_init_plane_full/(dword) gfx_init_plane_fill::plane_addr#2 gfx_init_plane_vertical2/(dword) gfx_init_plane_fill::plane_addr#0 )
  (number~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (number) 4
  (number~) gfx_init_plane_fill::$1 ← > (number~) gfx_init_plane_fill::$0
  (number~) gfx_init_plane_fill::$2 ← < (number~) gfx_init_plane_fill::$1
  (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← (number~) gfx_init_plane_fill::$2
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@5
gfx_init_plane_fill::@5: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill
  (byte) gfx_init_plane_fill::fill#6 ← phi( gfx_init_plane_fill/(byte) gfx_init_plane_fill::fill#7 )
  (dword) gfx_init_plane_fill::plane_addr#4 ← phi( gfx_init_plane_fill/(dword) gfx_init_plane_fill::plane_addr#3 )
  (byte) gfx_init_plane_fill::gfxbCpuBank#2 ← phi( gfx_init_plane_fill/(byte) gfx_init_plane_fill::gfxbCpuBank#0 )
  (byte) gfx_init_plane_fill::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_fill::gfxbCpuBank#2
  (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#4
  (number~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (number) $3fff
  (number~) gfx_init_plane_fill::$6 ← (number) $4000 + (number~) gfx_init_plane_fill::$5
  (byte*) gfx_init_plane_fill::gfxb#0 ← ((byte*)) (number~) gfx_init_plane_fill::$6
  (byte) gfx_init_plane_fill::by#0 ← (byte) 0
  to:gfx_init_plane_fill::@1
gfx_init_plane_fill::@1: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3 gfx_init_plane_fill::@5
  (byte) gfx_init_plane_fill::by#4 ← phi( gfx_init_plane_fill::@3/(byte) gfx_init_plane_fill::by#1 gfx_init_plane_fill::@5/(byte) gfx_init_plane_fill::by#0 )
  (byte*) gfx_init_plane_fill::gfxb#3 ← phi( gfx_init_plane_fill::@3/(byte*) gfx_init_plane_fill::gfxb#4 gfx_init_plane_fill::@5/(byte*) gfx_init_plane_fill::gfxb#0 )
  (byte) gfx_init_plane_fill::fill#4 ← phi( gfx_init_plane_fill::@3/(byte) gfx_init_plane_fill::fill#5 gfx_init_plane_fill::@5/(byte) gfx_init_plane_fill::fill#6 )
  (byte) gfx_init_plane_fill::bx#0 ← (byte) 0
  to:gfx_init_plane_fill::@2
gfx_init_plane_fill::@2: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@1 gfx_init_plane_fill::@2
  (byte) gfx_init_plane_fill::by#3 ← phi( gfx_init_plane_fill::@1/(byte) gfx_init_plane_fill::by#4 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::by#3 )
  (byte) gfx_init_plane_fill::bx#2 ← phi( gfx_init_plane_fill::@1/(byte) gfx_init_plane_fill::bx#0 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::bx#1 )
  (byte*) gfx_init_plane_fill::gfxb#2 ← phi( gfx_init_plane_fill::@1/(byte*) gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::@2/(byte*) gfx_init_plane_fill::gfxb#1 )
  (byte) gfx_init_plane_fill::fill#3 ← phi( gfx_init_plane_fill::@1/(byte) gfx_init_plane_fill::fill#4 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::fill#3 )
  *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#3
  (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2
  (byte) gfx_init_plane_fill::bx#1 ← (byte) gfx_init_plane_fill::bx#2 + rangenext(0,$27)
  (bool~) gfx_init_plane_fill::$9 ← (byte) gfx_init_plane_fill::bx#1 != rangelast(0,$27)
  if((bool~) gfx_init_plane_fill::$9) goto gfx_init_plane_fill::@2
  to:gfx_init_plane_fill::@3
gfx_init_plane_fill::@3: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@2
  (byte*) gfx_init_plane_fill::gfxb#4 ← phi( gfx_init_plane_fill::@2/(byte*) gfx_init_plane_fill::gfxb#1 )
  (byte) gfx_init_plane_fill::fill#5 ← phi( gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::fill#3 )
  (byte) gfx_init_plane_fill::by#2 ← phi( gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::by#3 )
  (byte) gfx_init_plane_fill::by#1 ← (byte) gfx_init_plane_fill::by#2 + rangenext(0,$c7)
  (bool~) gfx_init_plane_fill::$10 ← (byte) gfx_init_plane_fill::by#1 != rangelast(0,$c7)
  if((bool~) gfx_init_plane_fill::$10) goto gfx_init_plane_fill::@1
  to:gfx_init_plane_fill::@4
gfx_init_plane_fill::@4: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3
  (byte~) gfx_init_plane_fill::$7 ← ((byte)) (number) $4000/(number) $4000
  (byte) dtvSetCpuBankSegment1::cpuBankIdx#12 ← (byte~) gfx_init_plane_fill::$7
  call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@6
gfx_init_plane_fill::@6: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@4
  to:gfx_init_plane_fill::@return
gfx_init_plane_fill::@return: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@6
  return 
  to:@return

(void()) form_mode()
form_mode: scope:[form_mode]  from main::@2
  (byte) form_field_idx#66 ← phi( main::@2/(byte) form_field_idx#25 )
  (byte) keyboard_modifiers#111 ← phi( main::@2/(byte) keyboard_modifiers#38 )
  (byte) keyboard_events_size#130 ← phi( main::@2/(byte) keyboard_events_size#42 )
  (signed byte) form_cursor_count#60 ← phi( main::@2/(signed byte) form_cursor_count#18 )
  (byte*) print_char_cursor#43 ← phi( main::@2/(byte*) print_char_cursor#41 )
  (byte*) print_line_cursor#41 ← phi( main::@2/(byte*) print_line_cursor#39 )
  (byte*) print_screen#20 ← phi( main::@2/(byte*) print_screen#18 )
  (byte*) print_set_screen::screen#0 ← (byte*) COLS
  call print_set_screen 
  to:form_mode::@21
form_mode::@21: scope:[form_mode]  from form_mode
  (byte) form_field_idx#65 ← phi( form_mode/(byte) form_field_idx#66 )
  (byte) keyboard_modifiers#109 ← phi( form_mode/(byte) keyboard_modifiers#111 )
  (byte) keyboard_events_size#128 ← phi( form_mode/(byte) keyboard_events_size#130 )
  (signed byte) form_cursor_count#59 ← phi( form_mode/(signed byte) form_cursor_count#60 )
  (byte*) print_char_cursor#29 ← phi( form_mode/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#28 ← phi( form_mode/(byte*) print_line_cursor#8 )
  (byte*) print_screen#14 ← phi( form_mode/(byte*) print_screen#2 )
  (byte*) print_screen#5 ← (byte*) print_screen#14
  (byte*) print_line_cursor#11 ← (byte*) print_line_cursor#28
  (byte*) print_char_cursor#12 ← (byte*) print_char_cursor#29
  call print_cls 
  to:form_mode::@22
form_mode::@22: scope:[form_mode]  from form_mode::@21
  (byte) form_field_idx#64 ← phi( form_mode::@21/(byte) form_field_idx#65 )
  (byte) keyboard_modifiers#107 ← phi( form_mode::@21/(byte) keyboard_modifiers#109 )
  (byte) keyboard_events_size#126 ← phi( form_mode::@21/(byte) keyboard_events_size#128 )
  (signed byte) form_cursor_count#58 ← phi( form_mode::@21/(signed byte) form_cursor_count#59 )
  (byte*) print_screen#27 ← phi( form_mode::@21/(byte*) print_screen#5 )
  (byte*) print_char_cursor#30 ← phi( form_mode::@21/(byte*) print_char_cursor#7 )
  (byte*) print_line_cursor#29 ← phi( form_mode::@21/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#12 ← (byte*) print_line_cursor#29
  (byte*) print_char_cursor#13 ← (byte*) print_char_cursor#30
  (byte*) print_str_lines::str#1 ← (byte[]) FORM_COLS
  call print_str_lines 
  to:form_mode::@23
form_mode::@23: scope:[form_mode]  from form_mode::@22
  (byte) form_field_idx#63 ← phi( form_mode::@22/(byte) form_field_idx#64 )
  (byte) keyboard_modifiers#105 ← phi( form_mode::@22/(byte) keyboard_modifiers#107 )
  (byte) keyboard_events_size#124 ← phi( form_mode::@22/(byte) keyboard_events_size#126 )
  (signed byte) form_cursor_count#57 ← phi( form_mode::@22/(signed byte) form_cursor_count#58 )
  (byte*) print_screen#21 ← phi( form_mode::@22/(byte*) print_screen#27 )
  (byte*) print_line_cursor#30 ← phi( form_mode::@22/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#31 ← phi( form_mode::@22/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#14 ← (byte*) print_char_cursor#31
  (byte*) print_line_cursor#13 ← (byte*) print_line_cursor#30
  (byte*) print_set_screen::screen#1 ← (byte*) FORM_SCREEN
  call print_set_screen 
  to:form_mode::@24
form_mode::@24: scope:[form_mode]  from form_mode::@23
  (byte) form_field_idx#62 ← phi( form_mode::@23/(byte) form_field_idx#63 )
  (byte) keyboard_modifiers#103 ← phi( form_mode::@23/(byte) keyboard_modifiers#105 )
  (byte) keyboard_events_size#122 ← phi( form_mode::@23/(byte) keyboard_events_size#124 )
  (signed byte) form_cursor_count#56 ← phi( form_mode::@23/(signed byte) form_cursor_count#57 )
  (byte*) print_char_cursor#32 ← phi( form_mode::@23/(byte*) print_char_cursor#9 )
  (byte*) print_line_cursor#31 ← phi( form_mode::@23/(byte*) print_line_cursor#8 )
  (byte*) print_screen#15 ← phi( form_mode::@23/(byte*) print_screen#2 )
  (byte*) print_screen#6 ← (byte*) print_screen#15
  (byte*) print_line_cursor#14 ← (byte*) print_line_cursor#31
  (byte*) print_char_cursor#15 ← (byte*) print_char_cursor#32
  call print_cls 
  to:form_mode::@25
form_mode::@25: scope:[form_mode]  from form_mode::@24
  (byte) form_field_idx#61 ← phi( form_mode::@24/(byte) form_field_idx#62 )
  (byte) keyboard_modifiers#101 ← phi( form_mode::@24/(byte) keyboard_modifiers#103 )
  (byte) keyboard_events_size#120 ← phi( form_mode::@24/(byte) keyboard_events_size#122 )
  (signed byte) form_cursor_count#55 ← phi( form_mode::@24/(signed byte) form_cursor_count#56 )
  (byte*) print_screen#50 ← phi( form_mode::@24/(byte*) print_screen#6 )
  (byte*) print_char_cursor#33 ← phi( form_mode::@24/(byte*) print_char_cursor#7 )
  (byte*) print_line_cursor#32 ← phi( form_mode::@24/(byte*) print_line_cursor#6 )
  (byte*) print_line_cursor#15 ← (byte*) print_line_cursor#32
  (byte*) print_char_cursor#16 ← (byte*) print_char_cursor#33
  (byte*) print_str_lines::str#2 ← (byte[]) FORM_TEXT
  call print_str_lines 
  to:form_mode::@26
form_mode::@26: scope:[form_mode]  from form_mode::@25
  (byte) form_field_idx#58 ← phi( form_mode::@25/(byte) form_field_idx#61 )
  (byte) keyboard_modifiers#99 ← phi( form_mode::@25/(byte) keyboard_modifiers#101 )
  (byte) keyboard_events_size#117 ← phi( form_mode::@25/(byte) keyboard_events_size#120 )
  (signed byte) form_cursor_count#52 ← phi( form_mode::@25/(signed byte) form_cursor_count#55 )
  (byte*) print_screen#48 ← phi( form_mode::@25/(byte*) print_screen#50 )
  (byte*) print_line_cursor#33 ← phi( form_mode::@25/(byte*) print_line_cursor#2 )
  (byte*) print_char_cursor#34 ← phi( form_mode::@25/(byte*) print_char_cursor#3 )
  (byte*) print_char_cursor#17 ← (byte*) print_char_cursor#34
  (byte*) print_line_cursor#16 ← (byte*) print_line_cursor#33
  (byte*) form_set_screen::screen#0 ← (byte*) FORM_SCREEN
  call form_set_screen 
  to:form_mode::@27
form_mode::@27: scope:[form_mode]  from form_mode::@26
  (byte) form_field_idx#56 ← phi( form_mode::@26/(byte) form_field_idx#58 )
  (byte) keyboard_modifiers#97 ← phi( form_mode::@26/(byte) keyboard_modifiers#99 )
  (byte) keyboard_events_size#113 ← phi( form_mode::@26/(byte) keyboard_events_size#117 )
  (signed byte) form_cursor_count#50 ← phi( form_mode::@26/(signed byte) form_cursor_count#52 )
  (byte*) print_char_cursor#69 ← phi( form_mode::@26/(byte*) print_char_cursor#17 )
  (byte*) print_line_cursor#69 ← phi( form_mode::@26/(byte*) print_line_cursor#16 )
  (byte*) print_screen#46 ← phi( form_mode::@26/(byte*) print_screen#48 )
  call form_render_values 
  to:form_mode::@28
form_mode::@28: scope:[form_mode]  from form_mode::@27
  (byte) form_field_idx#52 ← phi( form_mode::@27/(byte) form_field_idx#56 )
  (byte) keyboard_modifiers#92 ← phi( form_mode::@27/(byte) keyboard_modifiers#97 )
  (byte) keyboard_events_size#105 ← phi( form_mode::@27/(byte) keyboard_events_size#113 )
  (signed byte) form_cursor_count#47 ← phi( form_mode::@27/(signed byte) form_cursor_count#50 )
  (byte*) print_char_cursor#66 ← phi( form_mode::@27/(byte*) print_char_cursor#69 )
  (byte*) print_line_cursor#66 ← phi( form_mode::@27/(byte*) print_line_cursor#69 )
  (byte*) print_screen#43 ← phi( form_mode::@27/(byte*) print_screen#46 )
  (byte) render_preset_name::idx#0 ← *((byte*) form_preset)
  call render_preset_name 
  to:form_mode::@29
form_mode::@29: scope:[form_mode]  from form_mode::@28
  (byte) form_field_idx#49 ← phi( form_mode::@28/(byte) form_field_idx#52 )
  (byte) keyboard_modifiers#86 ← phi( form_mode::@28/(byte) keyboard_modifiers#92 )
  (byte) keyboard_events_size#95 ← phi( form_mode::@28/(byte) keyboard_events_size#105 )
  (signed byte) form_cursor_count#44 ← phi( form_mode::@28/(signed byte) form_cursor_count#47 )
  (byte*) print_char_cursor#63 ← phi( form_mode::@28/(byte*) print_char_cursor#66 )
  (byte*) print_line_cursor#63 ← phi( form_mode::@28/(byte*) print_line_cursor#66 )
  (byte*) print_screen#40 ← phi( form_mode::@28/(byte*) print_screen#43 )
  (dword~) form_mode::$9 ← ((dword)) (byte*) FORM_CHARSET
  (number~) form_mode::$10 ← (dword~) form_mode::$9 / (number) $10000
  (byte~) form_mode::$11 ← ((byte)) (number~) form_mode::$10
  *((byte*) DTV_GRAPHICS_VIC_BANK) ← (byte~) form_mode::$11
  (number~) form_mode::$12 ← (dword) DTV_COLOR_BANK_DEFAULT / (number) $400
  (word~) form_mode::$13 ← ((word)) (number~) form_mode::$12
  (byte~) form_mode::$14 ← < (word~) form_mode::$13
  *((byte*) DTV_COLOR_BANK_LO) ← (byte~) form_mode::$14
  (number~) form_mode::$15 ← (dword) DTV_COLOR_BANK_DEFAULT / (number) $400
  (word~) form_mode::$16 ← ((word)) (number~) form_mode::$15
  (byte~) form_mode::$17 ← > (word~) form_mode::$16
  *((byte*) DTV_COLOR_BANK_HI) ← (byte~) form_mode::$17
  *((byte*) CIA2_PORT_A_DDR) ← (number) 3
  (word~) form_mode::$18 ← ((word)) (byte*) FORM_CHARSET
  (number~) form_mode::$19 ← (word~) form_mode::$18 / (number) $4000
  (byte~) form_mode::$20 ← ((byte)) (number~) form_mode::$19
  (number~) form_mode::$21 ← (number) 3 ^ (byte~) form_mode::$20
  *((byte*) CIA2_PORT_A) ← (number~) form_mode::$21
  *((byte*) DTV_CONTROL) ← (number) 0
  (byte~) form_mode::$22 ← (byte) VIC_DEN | (byte) VIC_RSEL
  (number~) form_mode::$23 ← (byte~) form_mode::$22 | (number) 3
  *((byte*) VIC_CONTROL) ← (number~) form_mode::$23
  *((byte*) VIC_CONTROL2) ← (byte) VIC_CSEL
  (word~) form_mode::$24 ← ((word)) (byte*) FORM_SCREEN
  (number~) form_mode::$25 ← (word~) form_mode::$24 & (number) $3fff
  (number~) form_mode::$26 ← (number~) form_mode::$25 / (number) $40
  (word~) form_mode::$27 ← ((word)) (byte*) FORM_CHARSET
  (number~) form_mode::$28 ← (word~) form_mode::$27 & (number) $3fff
  (number~) form_mode::$29 ← (number~) form_mode::$28 / (number) $400
  (number~) form_mode::$30 ← (number~) form_mode::$26 | (number~) form_mode::$29
  (byte~) form_mode::$31 ← ((byte)) (number~) form_mode::$30
  *((byte*) VIC_MEMORY) ← (byte~) form_mode::$31
  (byte~) form_mode::$32 ← < (byte*) FORM_SCREEN
  *((byte*) DTV_PLANEA_START_LO) ← (byte~) form_mode::$32
  (byte~) form_mode::$33 ← > (byte*) FORM_SCREEN
  *((byte*) DTV_PLANEA_START_MI) ← (byte~) form_mode::$33
  *((byte*) DTV_PLANEA_START_HI) ← (number) 0
  (byte) form_mode::i#0 ← (byte) 0
  to:form_mode::@1
form_mode::@1: scope:[form_mode]  from form_mode::@1 form_mode::@29
  (byte) form_field_idx#45 ← phi( form_mode::@1/(byte) form_field_idx#45 form_mode::@29/(byte) form_field_idx#49 )
  (byte) keyboard_modifiers#79 ← phi( form_mode::@1/(byte) keyboard_modifiers#79 form_mode::@29/(byte) keyboard_modifiers#86 )
  (byte) keyboard_events_size#83 ← phi( form_mode::@1/(byte) keyboard_events_size#83 form_mode::@29/(byte) keyboard_events_size#95 )
  (signed byte) form_cursor_count#39 ← phi( form_mode::@1/(signed byte) form_cursor_count#39 form_mode::@29/(signed byte) form_cursor_count#44 )
  (byte*) print_char_cursor#57 ← phi( form_mode::@1/(byte*) print_char_cursor#57 form_mode::@29/(byte*) print_char_cursor#63 )
  (byte*) print_line_cursor#57 ← phi( form_mode::@1/(byte*) print_line_cursor#57 form_mode::@29/(byte*) print_line_cursor#63 )
  (byte*) print_screen#34 ← phi( form_mode::@1/(byte*) print_screen#34 form_mode::@29/(byte*) print_screen#40 )
  (byte) form_mode::i#2 ← phi( form_mode::@1/(byte) form_mode::i#1 form_mode::@29/(byte) form_mode::i#0 )
  *((byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((byte[$10]) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2)
  (byte) form_mode::i#1 ← (byte) form_mode::i#2 + rangenext(0,$f)
  (bool~) form_mode::$34 ← (byte) form_mode::i#1 != rangelast(0,$f)
  if((bool~) form_mode::$34) goto form_mode::@1
  to:form_mode::@2
form_mode::@2: scope:[form_mode]  from form_mode::@1
  (byte) form_field_idx#38 ← phi( form_mode::@1/(byte) form_field_idx#45 )
  (byte) keyboard_modifiers#61 ← phi( form_mode::@1/(byte) keyboard_modifiers#79 )
  (byte) keyboard_events_size#62 ← phi( form_mode::@1/(byte) keyboard_events_size#83 )
  (signed byte) form_cursor_count#30 ← phi( form_mode::@1/(signed byte) form_cursor_count#39 )
  (byte*) print_char_cursor#52 ← phi( form_mode::@1/(byte*) print_char_cursor#57 )
  (byte*) print_line_cursor#50 ← phi( form_mode::@1/(byte*) print_line_cursor#57 )
  (byte*) print_screen#29 ← phi( form_mode::@1/(byte*) print_screen#34 )
  *((byte*) BGCOL) ← (number) 0
  *((byte*) BORDERCOL) ← (number) 0
  (byte) form_mode::preset_current#0 ← *((byte*) form_preset)
  to:form_mode::@3
form_mode::@3: scope:[form_mode]  from form_mode::@14 form_mode::@2 form_mode::@33
  (byte) form_mode::preset_current#6 ← phi( form_mode::@14/(byte) form_mode::preset_current#2 form_mode::@2/(byte) form_mode::preset_current#0 form_mode::@33/(byte) form_mode::preset_current#7 )
  (byte) form_field_idx#28 ← phi( form_mode::@14/(byte) form_field_idx#37 form_mode::@2/(byte) form_field_idx#38 form_mode::@33/(byte) form_field_idx#39 )
  (byte) keyboard_modifiers#44 ← phi( form_mode::@14/(byte) keyboard_modifiers#60 form_mode::@2/(byte) keyboard_modifiers#61 form_mode::@33/(byte) keyboard_modifiers#62 )
  (byte) keyboard_events_size#47 ← phi( form_mode::@14/(byte) keyboard_events_size#61 form_mode::@2/(byte) keyboard_events_size#62 form_mode::@33/(byte) keyboard_events_size#63 )
  (signed byte) form_cursor_count#21 ← phi( form_mode::@14/(signed byte) form_cursor_count#29 form_mode::@2/(signed byte) form_cursor_count#30 form_mode::@33/(signed byte) form_cursor_count#31 )
  (byte*) print_char_cursor#44 ← phi( form_mode::@14/(byte*) print_char_cursor#51 form_mode::@2/(byte*) print_char_cursor#52 form_mode::@33/(byte*) print_char_cursor#53 )
  (byte*) print_line_cursor#42 ← phi( form_mode::@14/(byte*) print_line_cursor#49 form_mode::@2/(byte*) print_line_cursor#50 form_mode::@33/(byte*) print_line_cursor#51 )
  (byte*) print_screen#22 ← phi( form_mode::@14/(byte*) print_screen#28 form_mode::@2/(byte*) print_screen#29 form_mode::@33/(byte*) print_screen#30 )
  if(true) goto form_mode::@6
  to:form_mode::@return
form_mode::@6: scope:[form_mode]  from form_mode::@3 form_mode::@6
  (byte*) print_char_cursor#58 ← phi( form_mode::@3/(byte*) print_char_cursor#44 form_mode::@6/(byte*) print_char_cursor#58 )
  (byte*) print_line_cursor#58 ← phi( form_mode::@3/(byte*) print_line_cursor#42 form_mode::@6/(byte*) print_line_cursor#58 )
  (byte*) print_screen#35 ← phi( form_mode::@3/(byte*) print_screen#22 form_mode::@6/(byte*) print_screen#35 )
  (byte) form_mode::preset_current#5 ← phi( form_mode::@3/(byte) form_mode::preset_current#6 form_mode::@6/(byte) form_mode::preset_current#5 )
  (byte) form_field_idx#40 ← phi( form_mode::@3/(byte) form_field_idx#28 form_mode::@6/(byte) form_field_idx#40 )
  (byte) keyboard_modifiers#63 ← phi( form_mode::@3/(byte) keyboard_modifiers#44 form_mode::@6/(byte) keyboard_modifiers#63 )
  (byte) keyboard_events_size#64 ← phi( form_mode::@3/(byte) keyboard_events_size#47 form_mode::@6/(byte) keyboard_events_size#64 )
  (signed byte) form_cursor_count#32 ← phi( form_mode::@3/(signed byte) form_cursor_count#21 form_mode::@6/(signed byte) form_cursor_count#32 )
  (bool~) form_mode::$35 ← *((byte*) RASTER) != (number) $ff
  if((bool~) form_mode::$35) goto form_mode::@6
  to:form_mode::@8
form_mode::@8: scope:[form_mode]  from form_mode::@6
  (byte*) print_char_cursor#54 ← phi( form_mode::@6/(byte*) print_char_cursor#58 )
  (byte*) print_line_cursor#52 ← phi( form_mode::@6/(byte*) print_line_cursor#58 )
  (byte*) print_screen#31 ← phi( form_mode::@6/(byte*) print_screen#35 )
  (byte) form_mode::preset_current#4 ← phi( form_mode::@6/(byte) form_mode::preset_current#5 )
  (byte) form_field_idx#27 ← phi( form_mode::@6/(byte) form_field_idx#40 )
  (byte) keyboard_modifiers#43 ← phi( form_mode::@6/(byte) keyboard_modifiers#63 )
  (byte) keyboard_events_size#46 ← phi( form_mode::@6/(byte) keyboard_events_size#64 )
  (signed byte) form_cursor_count#20 ← phi( form_mode::@6/(signed byte) form_cursor_count#32 )
  call form_control 
  (byte) form_control::return#0 ← (byte) form_control::return#2
  to:form_mode::@30
form_mode::@30: scope:[form_mode]  from form_mode::@8
  (byte*) print_char_cursor#45 ← phi( form_mode::@8/(byte*) print_char_cursor#54 )
  (byte*) print_line_cursor#43 ← phi( form_mode::@8/(byte*) print_line_cursor#52 )
  (byte*) print_screen#23 ← phi( form_mode::@8/(byte*) print_screen#31 )
  (byte) form_mode::preset_current#3 ← phi( form_mode::@8/(byte) form_mode::preset_current#4 )
  (byte) form_field_idx#13 ← phi( form_mode::@8/(byte) form_field_idx#9 )
  (byte) keyboard_modifiers#27 ← phi( form_mode::@8/(byte) keyboard_modifiers#15 )
  (byte) keyboard_events_size#31 ← phi( form_mode::@8/(byte) keyboard_events_size#16 )
  (signed byte) form_cursor_count#12 ← phi( form_mode::@8/(signed byte) form_cursor_count#8 )
  (byte) form_control::return#6 ← phi( form_mode::@8/(byte) form_control::return#0 )
  (byte~) form_mode::$36 ← (byte) form_control::return#6
  (signed byte) form_cursor_count#2 ← (signed byte) form_cursor_count#12
  (byte) keyboard_events_size#12 ← (byte) keyboard_events_size#31
  (byte) keyboard_modifiers#12 ← (byte) keyboard_modifiers#27
  (byte) form_field_idx#2 ← (byte) form_field_idx#13
  (bool~) form_mode::$37 ← (byte~) form_mode::$36 != (number) 0
  (bool~) form_mode::$38 ← ! (bool~) form_mode::$37
  if((bool~) form_mode::$38) goto form_mode::@14
  to:form_mode::@return
form_mode::@14: scope:[form_mode]  from form_mode::@30
  (byte) form_field_idx#37 ← phi( form_mode::@30/(byte) form_field_idx#2 )
  (byte) keyboard_modifiers#60 ← phi( form_mode::@30/(byte) keyboard_modifiers#12 )
  (byte) keyboard_events_size#61 ← phi( form_mode::@30/(byte) keyboard_events_size#12 )
  (signed byte) form_cursor_count#29 ← phi( form_mode::@30/(signed byte) form_cursor_count#2 )
  (byte*) print_char_cursor#51 ← phi( form_mode::@30/(byte*) print_char_cursor#45 )
  (byte*) print_line_cursor#49 ← phi( form_mode::@30/(byte*) print_line_cursor#43 )
  (byte*) print_screen#28 ← phi( form_mode::@30/(byte*) print_screen#23 )
  (byte) form_mode::preset_current#2 ← phi( form_mode::@30/(byte) form_mode::preset_current#3 )
  (bool~) form_mode::$39 ← (byte) form_mode::preset_current#2 != *((byte*) form_preset)
  (bool~) form_mode::$40 ← ! (bool~) form_mode::$39
  if((bool~) form_mode::$40) goto form_mode::@3
  to:form_mode::@18
form_mode::@return: scope:[form_mode]  from form_mode::@3 form_mode::@30
  (byte) form_field_idx#14 ← phi( form_mode::@3/(byte) form_field_idx#28 form_mode::@30/(byte) form_field_idx#2 )
  (byte) keyboard_modifiers#28 ← phi( form_mode::@3/(byte) keyboard_modifiers#44 form_mode::@30/(byte) keyboard_modifiers#12 )
  (byte) keyboard_events_size#32 ← phi( form_mode::@3/(byte) keyboard_events_size#47 form_mode::@30/(byte) keyboard_events_size#12 )
  (signed byte) form_cursor_count#13 ← phi( form_mode::@3/(signed byte) form_cursor_count#21 form_mode::@30/(signed byte) form_cursor_count#2 )
  (byte*) print_char_cursor#35 ← phi( form_mode::@3/(byte*) print_char_cursor#44 form_mode::@30/(byte*) print_char_cursor#45 )
  (byte*) print_line_cursor#34 ← phi( form_mode::@3/(byte*) print_line_cursor#42 form_mode::@30/(byte*) print_line_cursor#43 )
  (byte*) print_screen#16 ← phi( form_mode::@3/(byte*) print_screen#22 form_mode::@30/(byte*) print_screen#23 )
  (byte*) print_screen#7 ← (byte*) print_screen#16
  (byte*) print_line_cursor#17 ← (byte*) print_line_cursor#34
  (byte*) print_char_cursor#18 ← (byte*) print_char_cursor#35
  (signed byte) form_cursor_count#3 ← (signed byte) form_cursor_count#13
  (byte) keyboard_events_size#13 ← (byte) keyboard_events_size#32
  (byte) keyboard_modifiers#13 ← (byte) keyboard_modifiers#28
  (byte) form_field_idx#3 ← (byte) form_field_idx#14
  return 
  to:@return
form_mode::@18: scope:[form_mode]  from form_mode::@14
  (byte) form_field_idx#53 ← phi( form_mode::@14/(byte) form_field_idx#37 )
  (byte) keyboard_modifiers#93 ← phi( form_mode::@14/(byte) keyboard_modifiers#60 )
  (byte) keyboard_events_size#106 ← phi( form_mode::@14/(byte) keyboard_events_size#61 )
  (signed byte) form_cursor_count#48 ← phi( form_mode::@14/(signed byte) form_cursor_count#29 )
  (byte*) print_char_cursor#67 ← phi( form_mode::@14/(byte*) print_char_cursor#51 )
  (byte*) print_line_cursor#67 ← phi( form_mode::@14/(byte*) print_line_cursor#49 )
  (byte*) print_screen#44 ← phi( form_mode::@14/(byte*) print_screen#28 )
  (byte) apply_preset::idx#0 ← *((byte*) form_preset)
  call apply_preset 
  to:form_mode::@31
form_mode::@31: scope:[form_mode]  from form_mode::@18
  (byte) form_field_idx#50 ← phi( form_mode::@18/(byte) form_field_idx#53 )
  (byte) keyboard_modifiers#87 ← phi( form_mode::@18/(byte) keyboard_modifiers#93 )
  (byte) keyboard_events_size#96 ← phi( form_mode::@18/(byte) keyboard_events_size#106 )
  (signed byte) form_cursor_count#45 ← phi( form_mode::@18/(signed byte) form_cursor_count#48 )
  (byte*) print_char_cursor#64 ← phi( form_mode::@18/(byte*) print_char_cursor#67 )
  (byte*) print_line_cursor#64 ← phi( form_mode::@18/(byte*) print_line_cursor#67 )
  (byte*) print_screen#41 ← phi( form_mode::@18/(byte*) print_screen#44 )
  (byte) form_mode::preset_current#1 ← *((byte*) form_preset)
  call form_render_values 
  to:form_mode::@32
form_mode::@32: scope:[form_mode]  from form_mode::@31
  (byte) form_mode::preset_current#8 ← phi( form_mode::@31/(byte) form_mode::preset_current#1 )
  (byte) form_field_idx#46 ← phi( form_mode::@31/(byte) form_field_idx#50 )
  (byte) keyboard_modifiers#80 ← phi( form_mode::@31/(byte) keyboard_modifiers#87 )
  (byte) keyboard_events_size#84 ← phi( form_mode::@31/(byte) keyboard_events_size#96 )
  (signed byte) form_cursor_count#40 ← phi( form_mode::@31/(signed byte) form_cursor_count#45 )
  (byte*) print_char_cursor#59 ← phi( form_mode::@31/(byte*) print_char_cursor#64 )
  (byte*) print_line_cursor#59 ← phi( form_mode::@31/(byte*) print_line_cursor#64 )
  (byte*) print_screen#36 ← phi( form_mode::@31/(byte*) print_screen#41 )
  (byte) render_preset_name::idx#1 ← *((byte*) form_preset)
  call render_preset_name 
  to:form_mode::@33
form_mode::@33: scope:[form_mode]  from form_mode::@32
  (byte) form_mode::preset_current#7 ← phi( form_mode::@32/(byte) form_mode::preset_current#8 )
  (byte) form_field_idx#39 ← phi( form_mode::@32/(byte) form_field_idx#46 )
  (byte) keyboard_modifiers#62 ← phi( form_mode::@32/(byte) keyboard_modifiers#80 )
  (byte) keyboard_events_size#63 ← phi( form_mode::@32/(byte) keyboard_events_size#84 )
  (signed byte) form_cursor_count#31 ← phi( form_mode::@32/(signed byte) form_cursor_count#40 )
  (byte*) print_char_cursor#53 ← phi( form_mode::@32/(byte*) print_char_cursor#59 )
  (byte*) print_line_cursor#51 ← phi( form_mode::@32/(byte*) print_line_cursor#59 )
  (byte*) print_screen#30 ← phi( form_mode::@32/(byte*) print_screen#36 )
  to:form_mode::@3
@81: scope:[]  from @62
  (byte) keyboard_modifiers#75 ← phi( @62/(byte) keyboard_modifiers#81 )
  (byte) keyboard_events_size#76 ← phi( @62/(byte) keyboard_events_size#85 )
  (byte*) print_char_cursor#55 ← phi( @62/(byte*) print_char_cursor#60 )
  (byte*) print_line_cursor#53 ← phi( @62/(byte*) print_line_cursor#60 )
  (byte*) print_screen#32 ← phi( @62/(byte*) print_screen#37 )
  (byte[$19]) form_line_lo ← { fill( $19, 0) }
  (byte[$19]) form_line_hi ← { fill( $19, 0) }
  (byte) form_field_idx#4 ← (number) 0
  (signed byte) FORM_CURSOR_BLINK ← (number) $28
  (number~) $37 ← (signed byte) FORM_CURSOR_BLINK / (number) 2
  (signed byte) form_cursor_count#4 ← (number~) $37
  to:@85

(void()) form_set_screen((byte*) form_set_screen::screen)
form_set_screen: scope:[form_set_screen]  from form_mode::@26
  (byte*) form_set_screen::screen#1 ← phi( form_mode::@26/(byte*) form_set_screen::screen#0 )
  (byte*) form_set_screen::line#0 ← (byte*) form_set_screen::screen#1
  (byte) form_set_screen::y#0 ← (byte) 0
  to:form_set_screen::@1
form_set_screen::@1: scope:[form_set_screen]  from form_set_screen form_set_screen::@1
  (byte) form_set_screen::y#2 ← phi( form_set_screen/(byte) form_set_screen::y#0 form_set_screen::@1/(byte) form_set_screen::y#1 )
  (byte*) form_set_screen::line#2 ← phi( form_set_screen/(byte*) form_set_screen::line#0 form_set_screen::@1/(byte*) form_set_screen::line#1 )
  (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2
  *((byte[$19]) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0
  (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2
  *((byte[$19]) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1
  (byte*~) form_set_screen::$2 ← (byte*) form_set_screen::line#2 + (number) $28
  (byte*) form_set_screen::line#1 ← (byte*~) form_set_screen::$2
  (byte) form_set_screen::y#1 ← (byte) form_set_screen::y#2 + rangenext(0,$18)
  (bool~) form_set_screen::$3 ← (byte) form_set_screen::y#1 != rangelast(0,$18)
  if((bool~) form_set_screen::$3) goto form_set_screen::@1
  to:form_set_screen::@return
form_set_screen::@return: scope:[form_set_screen]  from form_set_screen::@1
  return 
  to:@return

(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
form_field_ptr: scope:[form_field_ptr]  from form_control form_render_values::@2
  (byte) form_field_ptr::field_idx#2 ← phi( form_control/(byte) form_field_ptr::field_idx#1 form_render_values::@2/(byte) form_field_ptr::field_idx#0 )
  (byte) form_field_ptr::y#0 ← *((byte[]) form_fields_y + (byte) form_field_ptr::field_idx#2)
  (byte*~) form_field_ptr::$0 ← ((byte*)) { *((byte[$19]) form_line_hi + (byte) form_field_ptr::y#0), *((byte[$19]) form_line_lo + (byte) form_field_ptr::y#0) }
  (byte*) form_field_ptr::line#0 ← (byte*~) form_field_ptr::$0
  (byte) form_field_ptr::x#0 ← *((byte[]) form_fields_x + (byte) form_field_ptr::field_idx#2)
  (byte*~) form_field_ptr::$1 ← (byte*) form_field_ptr::line#0 + (byte) form_field_ptr::x#0
  (byte*) form_field_ptr::field#0 ← (byte*~) form_field_ptr::$1
  (byte*) form_field_ptr::return#0 ← (byte*) form_field_ptr::field#0
  to:form_field_ptr::@return
form_field_ptr::@return: scope:[form_field_ptr]  from form_field_ptr
  (byte*) form_field_ptr::return#4 ← phi( form_field_ptr/(byte*) form_field_ptr::return#0 )
  (byte*) form_field_ptr::return#1 ← (byte*) form_field_ptr::return#4
  return 
  to:@return

(void()) form_render_values()
form_render_values: scope:[form_render_values]  from form_mode::@27 form_mode::@31
  (byte) form_render_values::idx#0 ← (number) 0
  to:form_render_values::@1
form_render_values::@1: scope:[form_render_values]  from form_render_values form_render_values::@7
  (byte) form_render_values::idx#2 ← phi( form_render_values/(byte) form_render_values::idx#0 form_render_values::@7/(byte) form_render_values::idx#1 )
  (bool~) form_render_values::$0 ← (byte) form_render_values::idx#2 < (byte) form_fields_cnt
  if((bool~) form_render_values::$0) goto form_render_values::@2
  to:form_render_values::@return
form_render_values::@2: scope:[form_render_values]  from form_render_values::@1
  (byte) form_render_values::idx#3 ← phi( form_render_values::@1/(byte) form_render_values::idx#2 )
  (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#3
  call form_field_ptr 
  (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#1
  to:form_render_values::@7
form_render_values::@7: scope:[form_render_values]  from form_render_values::@2
  (byte) form_render_values::idx#4 ← phi( form_render_values::@2/(byte) form_render_values::idx#3 )
  (byte*) form_field_ptr::return#5 ← phi( form_render_values::@2/(byte*) form_field_ptr::return#2 )
  (byte*~) form_render_values::$1 ← (byte*) form_field_ptr::return#5
  (byte*) form_render_values::field#0 ← (byte*~) form_render_values::$1
  *((byte*) form_render_values::field#0) ← *((byte[]) print_hextab + *((byte[]) form_fields_val + (byte) form_render_values::idx#4))
  (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#4
  to:form_render_values::@1
form_render_values::@return: scope:[form_render_values]  from form_render_values::@1
  return 
  to:@return

(byte()) form_control()
form_control: scope:[form_control]  from form_mode::@8
  (byte) keyboard_modifiers#94 ← phi( form_mode::@8/(byte) keyboard_modifiers#43 )
  (byte) keyboard_events_size#107 ← phi( form_mode::@8/(byte) keyboard_events_size#46 )
  (signed byte) form_cursor_count#22 ← phi( form_mode::@8/(signed byte) form_cursor_count#20 )
  (byte) form_field_idx#15 ← phi( form_mode::@8/(byte) form_field_idx#27 )
  (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#15
  call form_field_ptr 
  (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#1
  to:form_control::@33
form_control::@33: scope:[form_control]  from form_control
  (byte) form_field_idx#59 ← phi( form_control/(byte) form_field_idx#15 )
  (byte) keyboard_modifiers#88 ← phi( form_control/(byte) keyboard_modifiers#94 )
  (byte) keyboard_events_size#97 ← phi( form_control/(byte) keyboard_events_size#107 )
  (signed byte) form_cursor_count#14 ← phi( form_control/(signed byte) form_cursor_count#22 )
  (byte*) form_field_ptr::return#6 ← phi( form_control/(byte*) form_field_ptr::return#3 )
  (byte*~) form_control::$0 ← (byte*) form_field_ptr::return#6
  (byte*) form_control::field#0 ← (byte*~) form_control::$0
  (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#14
  (bool~) form_control::$1 ← (signed byte) form_cursor_count#5 < (number) 0
  (bool~) form_control::$2 ← ! (bool~) form_control::$1
  if((bool~) form_control::$2) goto form_control::@1
  to:form_control::@7
form_control::@1: scope:[form_control]  from form_control::@33 form_control::@7
  (byte) form_field_idx#57 ← phi( form_control::@33/(byte) form_field_idx#59 form_control::@7/(byte) form_field_idx#60 )
  (byte) keyboard_modifiers#82 ← phi( form_control::@33/(byte) keyboard_modifiers#88 form_control::@7/(byte) keyboard_modifiers#89 )
  (byte) keyboard_events_size#86 ← phi( form_control::@33/(byte) keyboard_events_size#97 form_control::@7/(byte) keyboard_events_size#98 )
  (byte*) form_control::field#5 ← phi( form_control::@33/(byte*) form_control::field#0 form_control::@7/(byte*) form_control::field#11 )
  (signed byte) form_cursor_count#15 ← phi( form_control::@33/(signed byte) form_cursor_count#5 form_control::@7/(signed byte) form_cursor_count#6 )
  (number~) form_control::$3 ← (signed byte) FORM_CURSOR_BLINK / (number) 2
  (bool~) form_control::$4 ← (signed byte) form_cursor_count#15 < (number~) form_control::$3
  if((bool~) form_control::$4) goto form_control::@2
  to:form_control::@8
form_control::@7: scope:[form_control]  from form_control::@33
  (byte) form_field_idx#60 ← phi( form_control::@33/(byte) form_field_idx#59 )
  (byte) keyboard_modifiers#89 ← phi( form_control::@33/(byte) keyboard_modifiers#88 )
  (byte) keyboard_events_size#98 ← phi( form_control::@33/(byte) keyboard_events_size#97 )
  (byte*) form_control::field#11 ← phi( form_control::@33/(byte*) form_control::field#0 )
  (signed byte) form_cursor_count#6 ← (signed byte) FORM_CURSOR_BLINK
  to:form_control::@1
form_control::@2: scope:[form_control]  from form_control::@1
  (signed byte) form_cursor_count#53 ← phi( form_control::@1/(signed byte) form_cursor_count#15 )
  (byte) form_field_idx#54 ← phi( form_control::@1/(byte) form_field_idx#57 )
  (byte) keyboard_modifiers#64 ← phi( form_control::@1/(byte) keyboard_modifiers#82 )
  (byte) keyboard_events_size#65 ← phi( form_control::@1/(byte) keyboard_events_size#86 )
  (byte*) form_control::field#1 ← phi( form_control::@1/(byte*) form_control::field#5 )
  (number~) form_control::$14 ← *((byte*) form_control::field#1) | (number) $80
  *((byte*) form_control::field#1) ← (number~) form_control::$14
  to:form_control::@3
form_control::@8: scope:[form_control]  from form_control::@1
  (signed byte) form_cursor_count#54 ← phi( form_control::@1/(signed byte) form_cursor_count#15 )
  (byte) form_field_idx#55 ← phi( form_control::@1/(byte) form_field_idx#57 )
  (byte) keyboard_modifiers#65 ← phi( form_control::@1/(byte) keyboard_modifiers#82 )
  (byte) keyboard_events_size#66 ← phi( form_control::@1/(byte) keyboard_events_size#86 )
  (byte*) form_control::field#2 ← phi( form_control::@1/(byte*) form_control::field#5 )
  (number~) form_control::$13 ← *((byte*) form_control::field#2) & (number) $7f
  *((byte*) form_control::field#2) ← (number~) form_control::$13
  to:form_control::@3
form_control::@3: scope:[form_control]  from form_control::@2 form_control::@8
  (signed byte) form_cursor_count#51 ← phi( form_control::@2/(signed byte) form_cursor_count#53 form_control::@8/(signed byte) form_cursor_count#54 )
  (byte) form_field_idx#51 ← phi( form_control::@2/(byte) form_field_idx#54 form_control::@8/(byte) form_field_idx#55 )
  (byte*) form_control::field#14 ← phi( form_control::@2/(byte*) form_control::field#1 form_control::@8/(byte*) form_control::field#2 )
  (byte) keyboard_modifiers#45 ← phi( form_control::@2/(byte) keyboard_modifiers#64 form_control::@8/(byte) keyboard_modifiers#65 )
  (byte) keyboard_events_size#48 ← phi( form_control::@2/(byte) keyboard_events_size#65 form_control::@8/(byte) keyboard_events_size#66 )
  call keyboard_event_scan 
  to:form_control::@34
form_control::@34: scope:[form_control]  from form_control::@3
  (signed byte) form_cursor_count#49 ← phi( form_control::@3/(signed byte) form_cursor_count#51 )
  (byte) form_field_idx#47 ← phi( form_control::@3/(byte) form_field_idx#51 )
  (byte*) form_control::field#12 ← phi( form_control::@3/(byte*) form_control::field#14 )
  (byte) keyboard_modifiers#29 ← phi( form_control::@3/(byte) keyboard_modifiers#6 )
  (byte) keyboard_events_size#33 ← phi( form_control::@3/(byte) keyboard_events_size#3 )
  (byte) keyboard_events_size#14 ← (byte) keyboard_events_size#33
  (byte) keyboard_modifiers#14 ← (byte) keyboard_modifiers#29
  call keyboard_event_get 
  (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
  to:form_control::@35
form_control::@35: scope:[form_control]  from form_control::@34
  (signed byte) form_cursor_count#46 ← phi( form_control::@34/(signed byte) form_cursor_count#49 )
  (byte) form_field_idx#41 ← phi( form_control::@34/(byte) form_field_idx#47 )
  (byte) keyboard_modifiers#46 ← phi( form_control::@34/(byte) keyboard_modifiers#14 )
  (byte*) form_control::field#6 ← phi( form_control::@34/(byte*) form_control::field#12 )
  (byte) keyboard_events_size#34 ← phi( form_control::@34/(byte) keyboard_events_size#5 )
  (byte) keyboard_event_get::return#7 ← phi( form_control::@34/(byte) keyboard_event_get::return#4 )
  (byte~) form_control::$6 ← (byte) keyboard_event_get::return#7
  (byte) keyboard_events_size#15 ← (byte) keyboard_events_size#34
  (byte) form_control::key_event#0 ← (byte~) form_control::$6
  (bool~) form_control::$7 ← (byte) form_control::key_event#0 == (byte) KEY_CRSR_DOWN
  (bool~) form_control::$8 ← ! (bool~) form_control::$7
  if((bool~) form_control::$8) goto form_control::@4
  to:form_control::@10
form_control::@4: scope:[form_control]  from form_control::@35
  (byte*) form_control::field#15 ← phi( form_control::@35/(byte*) form_control::field#6 )
  (byte) keyboard_events_size#88 ← phi( form_control::@35/(byte) keyboard_events_size#15 )
  (signed byte) form_cursor_count#41 ← phi( form_control::@35/(signed byte) form_cursor_count#46 )
  (byte) form_field_idx#42 ← phi( form_control::@35/(byte) form_field_idx#41 )
  (byte) keyboard_modifiers#51 ← phi( form_control::@35/(byte) keyboard_modifiers#46 )
  (byte) form_control::key_event#1 ← phi( form_control::@35/(byte) form_control::key_event#0 )
  (bool~) form_control::$9 ← (byte) form_control::key_event#1 == (byte) KEY_CRSR_RIGHT
  (bool~) form_control::$10 ← ! (bool~) form_control::$9
  if((bool~) form_control::$10) goto form_control::@5
  to:form_control::@13
form_control::@10: scope:[form_control]  from form_control::@35
  (byte) keyboard_events_size#87 ← phi( form_control::@35/(byte) keyboard_events_size#15 )
  (byte) form_field_idx#29 ← phi( form_control::@35/(byte) form_field_idx#41 )
  (byte) keyboard_modifiers#30 ← phi( form_control::@35/(byte) keyboard_modifiers#46 )
  (byte*) form_control::field#3 ← phi( form_control::@35/(byte*) form_control::field#6 )
  (number~) form_control::$15 ← *((byte*) form_control::field#3) & (number) $7f
  *((byte*) form_control::field#3) ← (number~) form_control::$15
  (byte~) form_control::$16 ← (byte) keyboard_modifiers#30 & (byte) KEY_MODIFIER_SHIFT
  (bool~) form_control::$17 ← (byte~) form_control::$16 == (number) 0
  if((bool~) form_control::$17) goto form_control::@19
  to:form_control::@11
form_control::@19: scope:[form_control]  from form_control::@10
  (byte) keyboard_modifiers#68 ← phi( form_control::@10/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#69 ← phi( form_control::@10/(byte) keyboard_events_size#87 )
  (byte) form_field_idx#16 ← phi( form_control::@10/(byte) form_field_idx#29 )
  (byte) form_field_idx#5 ← ++ (byte) form_field_idx#16
  (bool~) form_control::$21 ← (byte) form_field_idx#5 == (byte) form_fields_cnt
  (bool~) form_control::$22 ← ! (bool~) form_control::$21
  if((bool~) form_control::$22) goto form_control::@22
  to:form_control::@24
form_control::@11: scope:[form_control]  from form_control::@10
  (byte) keyboard_modifiers#66 ← phi( form_control::@10/(byte) keyboard_modifiers#30 )
  (byte) keyboard_events_size#67 ← phi( form_control::@10/(byte) keyboard_events_size#87 )
  (byte) form_field_idx#17 ← phi( form_control::@10/(byte) form_field_idx#29 )
  (byte) form_field_idx#6 ← -- (byte) form_field_idx#17
  (bool~) form_control::$18 ← (byte) form_field_idx#6 == (number) $ff
  (bool~) form_control::$19 ← ! (bool~) form_control::$18
  if((bool~) form_control::$19) goto form_control::@22
  to:form_control::@12
form_control::@12: scope:[form_control]  from form_control::@11
  (byte) keyboard_modifiers#67 ← phi( form_control::@11/(byte) keyboard_modifiers#66 )
  (byte) keyboard_events_size#68 ← phi( form_control::@11/(byte) keyboard_events_size#67 )
  (number~) form_control::$20 ← (byte) form_fields_cnt - (number) 1
  (byte) form_field_idx#7 ← (number~) form_control::$20
  to:form_control::@22
form_control::@22: scope:[form_control]  from form_control::@11 form_control::@12 form_control::@19 form_control::@24
  (byte) form_field_idx#31 ← phi( form_control::@11/(byte) form_field_idx#6 form_control::@12/(byte) form_field_idx#7 form_control::@19/(byte) form_field_idx#5 form_control::@24/(byte) form_field_idx#8 )
  (byte) keyboard_modifiers#48 ← phi( form_control::@11/(byte) keyboard_modifiers#66 form_control::@12/(byte) keyboard_modifiers#67 form_control::@19/(byte) keyboard_modifiers#68 form_control::@24/(byte) keyboard_modifiers#69 )
  (byte) keyboard_events_size#50 ← phi( form_control::@11/(byte) keyboard_events_size#67 form_control::@12/(byte) keyboard_events_size#68 form_control::@19/(byte) keyboard_events_size#69 form_control::@24/(byte) keyboard_events_size#70 )
  (number~) form_control::$23 ← (signed byte) FORM_CURSOR_BLINK / (number) 2
  (signed byte) form_cursor_count#7 ← (number~) form_control::$23
  (byte) form_control::return#1 ← (number) 0
  to:form_control::@return
form_control::@24: scope:[form_control]  from form_control::@19
  (byte) keyboard_modifiers#69 ← phi( form_control::@19/(byte) keyboard_modifiers#68 )
  (byte) keyboard_events_size#70 ← phi( form_control::@19/(byte) keyboard_events_size#69 )
  (byte) form_field_idx#8 ← (number) 0
  to:form_control::@22
form_control::@return: scope:[form_control]  from form_control::@16 form_control::@22 form_control::@29 form_control::@6
  (byte) form_field_idx#18 ← phi( form_control::@16/(byte) form_field_idx#30 form_control::@22/(byte) form_field_idx#31 form_control::@29/(byte) form_field_idx#22 form_control::@6/(byte) form_field_idx#32 )
  (byte) keyboard_modifiers#31 ← phi( form_control::@16/(byte) keyboard_modifiers#47 form_control::@22/(byte) keyboard_modifiers#48 form_control::@29/(byte) keyboard_modifiers#49 form_control::@6/(byte) keyboard_modifiers#50 )
  (byte) keyboard_events_size#35 ← phi( form_control::@16/(byte) keyboard_events_size#49 form_control::@22/(byte) keyboard_events_size#50 form_control::@29/(byte) keyboard_events_size#51 form_control::@6/(byte) keyboard_events_size#52 )
  (signed byte) form_cursor_count#16 ← phi( form_control::@16/(signed byte) form_cursor_count#23 form_control::@22/(signed byte) form_cursor_count#7 form_control::@29/(signed byte) form_cursor_count#24 form_control::@6/(signed byte) form_cursor_count#25 )
  (byte) form_control::return#7 ← phi( form_control::@16/(byte) form_control::return#5 form_control::@22/(byte) form_control::return#1 form_control::@29/(byte) form_control::return#3 form_control::@6/(byte) form_control::return#4 )
  (byte) form_control::return#2 ← (byte) form_control::return#7
  (signed byte) form_cursor_count#8 ← (signed byte) form_cursor_count#16
  (byte) keyboard_events_size#16 ← (byte) keyboard_events_size#35
  (byte) keyboard_modifiers#15 ← (byte) keyboard_modifiers#31
  (byte) form_field_idx#9 ← (byte) form_field_idx#18
  return 
  to:@return
form_control::@5: scope:[form_control]  from form_control::@4
  (byte) form_field_idx#43 ← phi( form_control::@4/(byte) form_field_idx#42 )
  (byte) keyboard_modifiers#74 ← phi( form_control::@4/(byte) keyboard_modifiers#51 )
  (byte) keyboard_events_size#75 ← phi( form_control::@4/(byte) keyboard_events_size#88 )
  (signed byte) form_cursor_count#37 ← phi( form_control::@4/(signed byte) form_cursor_count#41 )
  (byte) form_control::key_event#2 ← phi( form_control::@4/(byte) form_control::key_event#1 )
  (bool~) form_control::$11 ← (byte) form_control::key_event#2 == (byte) KEY_SPACE
  (bool~) form_control::$12 ← ! (bool~) form_control::$11
  if((bool~) form_control::$12) goto form_control::@6
  to:form_control::@16
form_control::@13: scope:[form_control]  from form_control::@4
  (byte) keyboard_events_size#89 ← phi( form_control::@4/(byte) keyboard_events_size#88 )
  (signed byte) form_cursor_count#42 ← phi( form_control::@4/(signed byte) form_cursor_count#41 )
  (byte*) form_control::field#13 ← phi( form_control::@4/(byte*) form_control::field#15 )
  (byte) form_field_idx#33 ← phi( form_control::@4/(byte) form_field_idx#42 )
  (byte) keyboard_modifiers#32 ← phi( form_control::@4/(byte) keyboard_modifiers#51 )
  (byte~) form_control::$24 ← (byte) keyboard_modifiers#32 & (byte) KEY_MODIFIER_SHIFT
  (bool~) form_control::$25 ← (byte~) form_control::$24 == (number) 0
  if((bool~) form_control::$25) goto form_control::@26
  to:form_control::@14
form_control::@26: scope:[form_control]  from form_control::@13
  (byte) keyboard_modifiers#72 ← phi( form_control::@13/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#73 ← phi( form_control::@13/(byte) keyboard_events_size#89 )
  (signed byte) form_cursor_count#35 ← phi( form_control::@13/(signed byte) form_cursor_count#42 )
  (byte*) form_control::field#9 ← phi( form_control::@13/(byte*) form_control::field#13 )
  (byte) form_field_idx#19 ← phi( form_control::@13/(byte) form_field_idx#33 )
  *((byte[]) form_fields_val + (byte) form_field_idx#19) ← ++ *((byte[]) form_fields_val + (byte) form_field_idx#19)
  (bool~) form_control::$28 ← *((byte[]) form_fields_val + (byte) form_field_idx#19) > *((byte[]) form_fields_max + (byte) form_field_idx#19)
  (bool~) form_control::$29 ← ! (bool~) form_control::$28
  if((bool~) form_control::$29) goto form_control::@29
  to:form_control::@31
form_control::@14: scope:[form_control]  from form_control::@13
  (byte) keyboard_modifiers#70 ← phi( form_control::@13/(byte) keyboard_modifiers#32 )
  (byte) keyboard_events_size#71 ← phi( form_control::@13/(byte) keyboard_events_size#89 )
  (signed byte) form_cursor_count#33 ← phi( form_control::@13/(signed byte) form_cursor_count#42 )
  (byte*) form_control::field#7 ← phi( form_control::@13/(byte*) form_control::field#13 )
  (byte) form_field_idx#20 ← phi( form_control::@13/(byte) form_field_idx#33 )
  *((byte[]) form_fields_val + (byte) form_field_idx#20) ← -- *((byte[]) form_fields_val + (byte) form_field_idx#20)
  (bool~) form_control::$26 ← *((byte[]) form_fields_val + (byte) form_field_idx#20) == (number) $ff
  (bool~) form_control::$27 ← ! (bool~) form_control::$26
  if((bool~) form_control::$27) goto form_control::@29
  to:form_control::@15
form_control::@15: scope:[form_control]  from form_control::@14
  (byte) keyboard_modifiers#71 ← phi( form_control::@14/(byte) keyboard_modifiers#70 )
  (byte) keyboard_events_size#72 ← phi( form_control::@14/(byte) keyboard_events_size#71 )
  (signed byte) form_cursor_count#34 ← phi( form_control::@14/(signed byte) form_cursor_count#33 )
  (byte*) form_control::field#8 ← phi( form_control::@14/(byte*) form_control::field#7 )
  (byte) form_field_idx#21 ← phi( form_control::@14/(byte) form_field_idx#20 )
  *((byte[]) form_fields_val + (byte) form_field_idx#21) ← *((byte[]) form_fields_max + (byte) form_field_idx#21)
  to:form_control::@29
form_control::@29: scope:[form_control]  from form_control::@14 form_control::@15 form_control::@26 form_control::@31
  (byte) keyboard_modifiers#49 ← phi( form_control::@14/(byte) keyboard_modifiers#70 form_control::@15/(byte) keyboard_modifiers#71 form_control::@26/(byte) keyboard_modifiers#72 form_control::@31/(byte) keyboard_modifiers#73 )
  (byte) keyboard_events_size#51 ← phi( form_control::@14/(byte) keyboard_events_size#71 form_control::@15/(byte) keyboard_events_size#72 form_control::@26/(byte) keyboard_events_size#73 form_control::@31/(byte) keyboard_events_size#74 )
  (signed byte) form_cursor_count#24 ← phi( form_control::@14/(signed byte) form_cursor_count#33 form_control::@15/(signed byte) form_cursor_count#34 form_control::@26/(signed byte) form_cursor_count#35 form_control::@31/(signed byte) form_cursor_count#36 )
  (byte*) form_control::field#4 ← phi( form_control::@14/(byte*) form_control::field#7 form_control::@15/(byte*) form_control::field#8 form_control::@26/(byte*) form_control::field#9 form_control::@31/(byte*) form_control::field#10 )
  (byte) form_field_idx#22 ← phi( form_control::@14/(byte) form_field_idx#20 form_control::@15/(byte) form_field_idx#21 form_control::@26/(byte) form_field_idx#19 form_control::@31/(byte) form_field_idx#23 )
  *((byte*) form_control::field#4) ← *((byte[]) print_hextab + *((byte[]) form_fields_val + (byte) form_field_idx#22))
  (byte) form_control::return#3 ← (number) 0
  to:form_control::@return
form_control::@31: scope:[form_control]  from form_control::@26
  (byte) keyboard_modifiers#73 ← phi( form_control::@26/(byte) keyboard_modifiers#72 )
  (byte) keyboard_events_size#74 ← phi( form_control::@26/(byte) keyboard_events_size#73 )
  (signed byte) form_cursor_count#36 ← phi( form_control::@26/(signed byte) form_cursor_count#35 )
  (byte*) form_control::field#10 ← phi( form_control::@26/(byte*) form_control::field#9 )
  (byte) form_field_idx#23 ← phi( form_control::@26/(byte) form_field_idx#19 )
  *((byte[]) form_fields_val + (byte) form_field_idx#23) ← (number) 0
  to:form_control::@29
form_control::@6: scope:[form_control]  from form_control::@5
  (byte) form_field_idx#32 ← phi( form_control::@5/(byte) form_field_idx#43 )
  (byte) keyboard_modifiers#50 ← phi( form_control::@5/(byte) keyboard_modifiers#74 )
  (byte) keyboard_events_size#52 ← phi( form_control::@5/(byte) keyboard_events_size#75 )
  (signed byte) form_cursor_count#25 ← phi( form_control::@5/(signed byte) form_cursor_count#37 )
  (byte) form_control::return#4 ← (number) 0
  to:form_control::@return
form_control::@16: scope:[form_control]  from form_control::@5
  (byte) form_field_idx#30 ← phi( form_control::@5/(byte) form_field_idx#43 )
  (byte) keyboard_modifiers#47 ← phi( form_control::@5/(byte) keyboard_modifiers#74 )
  (byte) keyboard_events_size#49 ← phi( form_control::@5/(byte) keyboard_events_size#75 )
  (signed byte) form_cursor_count#23 ← phi( form_control::@5/(signed byte) form_cursor_count#37 )
  (byte) form_control::return#5 ← (number) $ff
  to:form_control::@return
@85: scope:[]  from @81
  (byte) form_field_idx#34 ← phi( @81/(byte) form_field_idx#4 )
  (byte) keyboard_modifiers#52 ← phi( @81/(byte) keyboard_modifiers#75 )
  (byte) keyboard_events_size#53 ← phi( @81/(byte) keyboard_events_size#76 )
  (signed byte) form_cursor_count#26 ← phi( @81/(signed byte) form_cursor_count#4 )
  (byte*) print_char_cursor#46 ← phi( @81/(byte*) print_char_cursor#55 )
  (byte*) print_line_cursor#44 ← phi( @81/(byte*) print_line_cursor#53 )
  (byte*) print_screen#24 ← phi( @81/(byte*) print_screen#32 )
  call main 
  to:@86
@86: scope:[]  from @85
  (byte) form_field_idx#24 ← phi( @85/(byte) form_field_idx#1 )
  (byte) keyboard_modifiers#33 ← phi( @85/(byte) keyboard_modifiers#9 )
  (byte) keyboard_events_size#36 ← phi( @85/(byte) keyboard_events_size#8 )
  (signed byte) form_cursor_count#17 ← phi( @85/(signed byte) form_cursor_count#1 )
  (byte*) print_char_cursor#36 ← phi( @85/(byte*) print_char_cursor#11 )
  (byte*) print_line_cursor#35 ← phi( @85/(byte*) print_line_cursor#10 )
  (byte*) print_screen#17 ← phi( @85/(byte*) print_screen#4 )
  (byte*) print_screen#8 ← (byte*) print_screen#17
  (byte*) print_line_cursor#18 ← (byte*) print_line_cursor#35
  (byte*) print_char_cursor#19 ← (byte*) print_char_cursor#36
  (signed byte) form_cursor_count#9 ← (signed byte) form_cursor_count#17
  (byte) keyboard_events_size#17 ← (byte) keyboard_events_size#36
  (byte) keyboard_modifiers#16 ← (byte) keyboard_modifiers#33
  (byte) form_field_idx#10 ← (byte) form_field_idx#24
  to:@end
@end: scope:[]  from @86

SYMBOL TABLE SSA
(byte~) $0
(byte*~) $1
(byte*~) $10
(byte*~) $11
(byte*~) $12
(byte*~) $13
(byte*~) $14
(byte*~) $15
(byte*~) $16
(byte*~) $17
(byte*~) $18
(byte*~) $19
(byte*~) $2
(byte*~) $20
(byte*~) $21
(byte*~) $22
(byte*~) $23
(byte*~) $24
(byte*~) $25
(byte*~) $26
(byte*~) $27
(byte*~) $28
(byte*~) $29
(byte*~) $3
(byte*~) $30
(byte*~) $31
(byte*~) $32
(byte*~) $33
(byte*~) $34
(byte*~) $35
(byte*~) $36
(number~) $37
(const string) $38 = (string) "0123456789abcdef"z
(const string) $39 = (string) " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
(byte*~) $4
(const string) $40 = (string) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(byte*~) $5
(byte*~) $6
(byte*~) $7
(byte*~) $8
(byte*~) $9
(label) @17
(label) @34
(label) @4
(label) @41
(label) @45
(label) @48
(label) @57
(label) @60
(label) @62
(label) @81
(label) @85
(label) @86
(label) @begin
(label) @end
(byte*) BGCOL
(byte*) BGCOL1
(byte*) BGCOL2
(byte*) BGCOL3
(byte*) BGCOL4
(byte*) BORDERCOL
(byte*) CHARGEN
(byte*) CIA1_PORT_A
(byte*) CIA1_PORT_A_DDR
(byte*) CIA1_PORT_B
(byte*) CIA1_PORT_B_DDR
(byte*) CIA2_PORT_A
(byte*) CIA2_PORT_A_DDR
(byte*) COLS
(byte) DTV_BORDER_OFF
(byte) DTV_CHUNKY
(byte) DTV_COLORRAM_OFF
(dword) DTV_COLOR_BANK_DEFAULT
(byte*) DTV_COLOR_BANK_HI
(byte*) DTV_COLOR_BANK_LO
(byte*) DTV_CONTROL
(byte*) DTV_FEATURE
(byte) DTV_FEATURE_ENABLE
(byte*) DTV_GRAPHICS_VIC_BANK
(byte) DTV_HIGHCOLOR
(byte) DTV_LINEAR
(byte) DTV_OVERSCAN
(byte*) DTV_PALETTE
(byte[$10]) DTV_PALETTE_DEFAULT
(byte*) DTV_PLANEA_MODULO_HI
(byte*) DTV_PLANEA_MODULO_LO
(byte*) DTV_PLANEA_START_HI
(byte*) DTV_PLANEA_START_LO
(byte*) DTV_PLANEA_START_MI
(byte*) DTV_PLANEA_STEP
(byte*) DTV_PLANEB_MODULO_HI
(byte*) DTV_PLANEB_MODULO_LO
(byte*) DTV_PLANEB_START_HI
(byte*) DTV_PLANEB_START_LO
(byte*) DTV_PLANEB_START_MI
(byte*) DTV_PLANEB_STEP
(byte*) FORM_CHARSET
(byte[]) FORM_COLS
(signed byte) FORM_CURSOR_BLINK
(byte*) FORM_SCREEN
(byte[]) FORM_TEXT
(byte) KEY_COMMODORE
(byte) KEY_CRSR_DOWN
(byte) KEY_CRSR_RIGHT
(byte) KEY_CTRL
(byte) KEY_LSHIFT
(byte) KEY_MODIFIER_COMMODORE
(byte) KEY_MODIFIER_CTRL
(byte) KEY_MODIFIER_LSHIFT
(byte) KEY_MODIFIER_RSHIFT
(byte) KEY_MODIFIER_SHIFT
(byte) KEY_RSHIFT
(byte) KEY_SPACE
(dword) PLANE_8BPP_CHUNKY
(dword) PLANE_BLANK
(dword) PLANE_CHARSET8
(dword) PLANE_FULL
(dword) PLANE_HORISONTAL
(dword) PLANE_HORISONTAL2
(dword) PLANE_VERTICAL
(dword) PLANE_VERTICAL2
(byte*) PROCPORT
(byte*) PROCPORT_DDR
(byte) PROCPORT_DDR_MEMORY_MASK
(byte) PROCPORT_RAM_CHARROM
(byte) PROCPORT_RAM_IO
(const byte) RADIX::BINARY = (number) 2
(const byte) RADIX::DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL = (number) 8
(byte*) RASTER
(byte*) VIC_BITMAP
(byte) VIC_BMM
(byte*) VIC_CHARSET_ROM
(byte*) VIC_CONTROL
(byte*) VIC_CONTROL2
(byte) VIC_CSEL
(byte) VIC_DEN
(byte) VIC_ECM
(byte) VIC_MCM
(byte*) VIC_MEMORY
(byte) VIC_RSEL
(byte*) VIC_SCREEN0
(byte*) VIC_SCREEN1
(byte*) VIC_SCREEN2
(byte*) VIC_SCREEN3
(byte*) VIC_SCREEN4
(void()) apply_preset((byte) apply_preset::idx)
(bool~) apply_preset::$0
(bool~) apply_preset::$1
(bool~) apply_preset::$10
(bool~) apply_preset::$11
(bool~) apply_preset::$2
(bool~) apply_preset::$3
(bool~) apply_preset::$4
(bool~) apply_preset::$5
(bool~) apply_preset::$6
(bool~) apply_preset::$7
(bool~) apply_preset::$8
(bool~) apply_preset::$9
(label) apply_preset::@1
(label) apply_preset::@10
(label) apply_preset::@11
(label) apply_preset::@2
(label) apply_preset::@22
(label) apply_preset::@23
(label) apply_preset::@24
(label) apply_preset::@25
(label) apply_preset::@26
(label) apply_preset::@27
(label) apply_preset::@28
(label) apply_preset::@29
(label) apply_preset::@3
(label) apply_preset::@30
(label) apply_preset::@31
(label) apply_preset::@32
(label) apply_preset::@33
(label) apply_preset::@4
(label) apply_preset::@45
(label) apply_preset::@46
(label) apply_preset::@5
(label) apply_preset::@6
(label) apply_preset::@7
(label) apply_preset::@8
(label) apply_preset::@9
(label) apply_preset::@return
(byte) apply_preset::i
(byte) apply_preset::i#0
(byte) apply_preset::i#1
(byte) apply_preset::i#2
(byte) apply_preset::i#3
(byte) apply_preset::idx
(byte) apply_preset::idx#0
(byte) apply_preset::idx#1
(byte) apply_preset::idx#10
(byte) apply_preset::idx#11
(byte) apply_preset::idx#2
(byte) apply_preset::idx#3
(byte) apply_preset::idx#4
(byte) apply_preset::idx#5
(byte) apply_preset::idx#6
(byte) apply_preset::idx#7
(byte) apply_preset::idx#8
(byte) apply_preset::idx#9
(byte*) apply_preset::preset
(byte*) apply_preset::preset#0
(byte*) apply_preset::preset#1
(byte*) apply_preset::preset#10
(byte*) apply_preset::preset#11
(byte*) apply_preset::preset#12
(byte*) apply_preset::preset#13
(byte*) apply_preset::preset#14
(byte*) apply_preset::preset#15
(byte*) apply_preset::preset#2
(byte*) apply_preset::preset#3
(byte*) apply_preset::preset#4
(byte*) apply_preset::preset#5
(byte*) apply_preset::preset#6
(byte*) apply_preset::preset#7
(byte*) apply_preset::preset#8
(byte*) apply_preset::preset#9
(void()) bitmap_clear()
(byte*~) bitmap_clear::$0
(bool~) bitmap_clear::$1
(bool~) bitmap_clear::$2
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(byte*) bitmap_clear::bitmap#0
(byte*) bitmap_clear::bitmap#1
(byte*) bitmap_clear::bitmap#2
(byte*) bitmap_clear::bitmap#3
(byte*) bitmap_clear::bitmap#4
(byte) bitmap_clear::x
(byte) bitmap_clear::x#0
(byte) bitmap_clear::x#1
(byte) bitmap_clear::x#2
(byte) bitmap_clear::y
(byte) bitmap_clear::y#0
(byte) bitmap_clear::y#1
(byte) bitmap_clear::y#2
(byte) bitmap_clear::y#3
(byte) bitmap_clear::y#4
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(number~) bitmap_init::$0
(byte~) bitmap_init::$1
(number~) bitmap_init::$10
(bool~) bitmap_init::$11
(bool~) bitmap_init::$12
(byte*~) bitmap_init::$13
(bool~) bitmap_init::$14
(byte~) bitmap_init::$2
(bool~) bitmap_init::$3
(bool~) bitmap_init::$4
(bool~) bitmap_init::$5
(number~) bitmap_init::$6
(byte~) bitmap_init::$7
(number~) bitmap_init::$8
(byte~) bitmap_init::$9
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@7
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte*) bitmap_init::bitmap#0
(byte*) bitmap_init::bitmap#1
(byte*) bitmap_init::bitmap#2
(byte*) bitmap_init::bitmap#3
(byte*) bitmap_init::bitmap#4
(byte) bitmap_init::bits
(byte) bitmap_init::bits#0
(byte) bitmap_init::bits#1
(byte) bitmap_init::bits#2
(byte) bitmap_init::bits#3
(byte) bitmap_init::bits#4
(byte) bitmap_init::x
(byte) bitmap_init::x#0
(byte) bitmap_init::x#1
(byte) bitmap_init::x#2
(byte) bitmap_init::x#3
(byte) bitmap_init::x#4
(byte) bitmap_init::y
(byte) bitmap_init::y#0
(byte) bitmap_init::y#1
(byte) bitmap_init::y#2
(byte) bitmap_init::y#3
(byte) bitmap_init::y#4
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#0
(byte*) bitmap_init::yoffs#1
(byte*) bitmap_init::yoffs#2
(byte*) bitmap_init::yoffs#3
(byte*) bitmap_init::yoffs#4
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(bool~) bitmap_line::$0
(byte~) bitmap_line::$1
(byte~) bitmap_line::$11
(bool~) bitmap_line::$12
(byte~) bitmap_line::$13
(bool~) bitmap_line::$14
(byte~) bitmap_line::$17
(bool~) bitmap_line::$18
(bool~) bitmap_line::$2
(byte~) bitmap_line::$3
(bool~) bitmap_line::$4
(byte~) bitmap_line::$7
(bool~) bitmap_line::$8
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@15
(label) bitmap_line::@17
(label) bitmap_line::@20
(label) bitmap_line::@21
(label) bitmap_line::@25
(label) bitmap_line::@27
(label) bitmap_line::@29
(label) bitmap_line::@3
(label) bitmap_line::@30
(label) bitmap_line::@31
(label) bitmap_line::@32
(label) bitmap_line::@33
(label) bitmap_line::@34
(label) bitmap_line::@35
(label) bitmap_line::@36
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@return
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0
(byte) bitmap_line::x0#1
(byte) bitmap_line::x0#10
(byte) bitmap_line::x0#11
(byte) bitmap_line::x0#12
(byte) bitmap_line::x0#13
(byte) bitmap_line::x0#2
(byte) bitmap_line::x0#3
(byte) bitmap_line::x0#4
(byte) bitmap_line::x0#5
(byte) bitmap_line::x0#6
(byte) bitmap_line::x0#7
(byte) bitmap_line::x0#8
(byte) bitmap_line::x0#9
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0
(byte) bitmap_line::x1#1
(byte) bitmap_line::x1#10
(byte) bitmap_line::x1#11
(byte) bitmap_line::x1#12
(byte) bitmap_line::x1#13
(byte) bitmap_line::x1#2
(byte) bitmap_line::x1#3
(byte) bitmap_line::x1#4
(byte) bitmap_line::x1#5
(byte) bitmap_line::x1#6
(byte) bitmap_line::x1#7
(byte) bitmap_line::x1#8
(byte) bitmap_line::x1#9
(byte) bitmap_line::xd
(byte) bitmap_line::xd#0
(byte) bitmap_line::xd#1
(byte) bitmap_line::xd#10
(byte) bitmap_line::xd#11
(byte) bitmap_line::xd#12
(byte) bitmap_line::xd#13
(byte) bitmap_line::xd#14
(byte) bitmap_line::xd#2
(byte) bitmap_line::xd#3
(byte) bitmap_line::xd#4
(byte) bitmap_line::xd#5
(byte) bitmap_line::xd#6
(byte) bitmap_line::xd#7
(byte) bitmap_line::xd#8
(byte) bitmap_line::xd#9
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0
(byte) bitmap_line::y0#1
(byte) bitmap_line::y0#10
(byte) bitmap_line::y0#11
(byte) bitmap_line::y0#12
(byte) bitmap_line::y0#13
(byte) bitmap_line::y0#2
(byte) bitmap_line::y0#3
(byte) bitmap_line::y0#4
(byte) bitmap_line::y0#5
(byte) bitmap_line::y0#6
(byte) bitmap_line::y0#7
(byte) bitmap_line::y0#8
(byte) bitmap_line::y0#9
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0
(byte) bitmap_line::y1#1
(byte) bitmap_line::y1#10
(byte) bitmap_line::y1#11
(byte) bitmap_line::y1#12
(byte) bitmap_line::y1#13
(byte) bitmap_line::y1#2
(byte) bitmap_line::y1#3
(byte) bitmap_line::y1#4
(byte) bitmap_line::y1#5
(byte) bitmap_line::y1#6
(byte) bitmap_line::y1#7
(byte) bitmap_line::y1#8
(byte) bitmap_line::y1#9
(byte) bitmap_line::yd
(byte) bitmap_line::yd#0
(byte) bitmap_line::yd#1
(byte) bitmap_line::yd#10
(byte) bitmap_line::yd#11
(byte) bitmap_line::yd#12
(byte) bitmap_line::yd#2
(byte) bitmap_line::yd#3
(byte) bitmap_line::yd#4
(byte) bitmap_line::yd#5
(byte) bitmap_line::yd#6
(byte) bitmap_line::yd#7
(byte) bitmap_line::yd#8
(byte) bitmap_line::yd#9
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte~) bitmap_line_xdyd::$0
(byte~) bitmap_line_xdyd::$2
(bool~) bitmap_line_xdyd::$3
(bool~) bitmap_line_xdyd::$4
(byte~) bitmap_line_xdyd::$5
(number~) bitmap_line_xdyd::$6
(bool~) bitmap_line_xdyd::$7
(label) bitmap_line_xdyd::@1
(label) bitmap_line_xdyd::@2
(label) bitmap_line_xdyd::@3
(label) bitmap_line_xdyd::@5
(label) bitmap_line_xdyd::@return
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0
(byte) bitmap_line_xdyd::e#1
(byte) bitmap_line_xdyd::e#2
(byte) bitmap_line_xdyd::e#3
(byte) bitmap_line_xdyd::e#4
(byte) bitmap_line_xdyd::e#5
(byte) bitmap_line_xdyd::e#6
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0
(byte) bitmap_line_xdyd::x#1
(byte) bitmap_line_xdyd::x#2
(byte) bitmap_line_xdyd::x#3
(byte) bitmap_line_xdyd::x#4
(byte) bitmap_line_xdyd::x#5
(byte) bitmap_line_xdyd::x#6
(byte) bitmap_line_xdyd::x#7
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0
(byte) bitmap_line_xdyd::x1#1
(byte) bitmap_line_xdyd::x1#2
(byte) bitmap_line_xdyd::x1#3
(byte) bitmap_line_xdyd::x1#4
(byte) bitmap_line_xdyd::x1#5
(byte) bitmap_line_xdyd::x1#6
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0
(byte) bitmap_line_xdyd::xd#1
(byte) bitmap_line_xdyd::xd#2
(byte) bitmap_line_xdyd::xd#3
(byte) bitmap_line_xdyd::xd#4
(byte) bitmap_line_xdyd::xd#5
(byte) bitmap_line_xdyd::xd#6
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0
(byte) bitmap_line_xdyd::y#1
(byte) bitmap_line_xdyd::y#2
(byte) bitmap_line_xdyd::y#3
(byte) bitmap_line_xdyd::y#4
(byte) bitmap_line_xdyd::y#5
(byte) bitmap_line_xdyd::y#6
(byte) bitmap_line_xdyd::y#7
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0
(byte) bitmap_line_xdyd::yd#1
(byte) bitmap_line_xdyd::yd#2
(byte) bitmap_line_xdyd::yd#3
(byte) bitmap_line_xdyd::yd#4
(byte) bitmap_line_xdyd::yd#5
(byte) bitmap_line_xdyd::yd#6
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte~) bitmap_line_xdyi::$0
(byte~) bitmap_line_xdyi::$2
(bool~) bitmap_line_xdyi::$3
(bool~) bitmap_line_xdyi::$4
(byte~) bitmap_line_xdyi::$5
(number~) bitmap_line_xdyi::$6
(bool~) bitmap_line_xdyi::$7
(label) bitmap_line_xdyi::@1
(label) bitmap_line_xdyi::@2
(label) bitmap_line_xdyi::@3
(label) bitmap_line_xdyi::@5
(label) bitmap_line_xdyi::@return
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0
(byte) bitmap_line_xdyi::e#1
(byte) bitmap_line_xdyi::e#2
(byte) bitmap_line_xdyi::e#3
(byte) bitmap_line_xdyi::e#4
(byte) bitmap_line_xdyi::e#5
(byte) bitmap_line_xdyi::e#6
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0
(byte) bitmap_line_xdyi::x#1
(byte) bitmap_line_xdyi::x#2
(byte) bitmap_line_xdyi::x#3
(byte) bitmap_line_xdyi::x#4
(byte) bitmap_line_xdyi::x#5
(byte) bitmap_line_xdyi::x#6
(byte) bitmap_line_xdyi::x#7
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0
(byte) bitmap_line_xdyi::x1#1
(byte) bitmap_line_xdyi::x1#2
(byte) bitmap_line_xdyi::x1#3
(byte) bitmap_line_xdyi::x1#4
(byte) bitmap_line_xdyi::x1#5
(byte) bitmap_line_xdyi::x1#6
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0
(byte) bitmap_line_xdyi::xd#1
(byte) bitmap_line_xdyi::xd#2
(byte) bitmap_line_xdyi::xd#3
(byte) bitmap_line_xdyi::xd#4
(byte) bitmap_line_xdyi::xd#5
(byte) bitmap_line_xdyi::xd#6
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0
(byte) bitmap_line_xdyi::y#1
(byte) bitmap_line_xdyi::y#2
(byte) bitmap_line_xdyi::y#3
(byte) bitmap_line_xdyi::y#4
(byte) bitmap_line_xdyi::y#5
(byte) bitmap_line_xdyi::y#6
(byte) bitmap_line_xdyi::y#7
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0
(byte) bitmap_line_xdyi::yd#1
(byte) bitmap_line_xdyi::yd#2
(byte) bitmap_line_xdyi::yd#3
(byte) bitmap_line_xdyi::yd#4
(byte) bitmap_line_xdyi::yd#5
(byte) bitmap_line_xdyi::yd#6
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte~) bitmap_line_ydxd::$0
(byte~) bitmap_line_ydxd::$2
(bool~) bitmap_line_ydxd::$3
(bool~) bitmap_line_ydxd::$4
(byte~) bitmap_line_ydxd::$5
(number~) bitmap_line_ydxd::$6
(bool~) bitmap_line_ydxd::$7
(label) bitmap_line_ydxd::@1
(label) bitmap_line_ydxd::@2
(label) bitmap_line_ydxd::@3
(label) bitmap_line_ydxd::@5
(label) bitmap_line_ydxd::@return
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0
(byte) bitmap_line_ydxd::e#1
(byte) bitmap_line_ydxd::e#2
(byte) bitmap_line_ydxd::e#3
(byte) bitmap_line_ydxd::e#4
(byte) bitmap_line_ydxd::e#5
(byte) bitmap_line_ydxd::e#6
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0
(byte) bitmap_line_ydxd::x#1
(byte) bitmap_line_ydxd::x#2
(byte) bitmap_line_ydxd::x#3
(byte) bitmap_line_ydxd::x#4
(byte) bitmap_line_ydxd::x#5
(byte) bitmap_line_ydxd::x#6
(byte) bitmap_line_ydxd::x#7
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0
(byte) bitmap_line_ydxd::xd#1
(byte) bitmap_line_ydxd::xd#2
(byte) bitmap_line_ydxd::xd#3
(byte) bitmap_line_ydxd::xd#4
(byte) bitmap_line_ydxd::xd#5
(byte) bitmap_line_ydxd::xd#6
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0
(byte) bitmap_line_ydxd::y#1
(byte) bitmap_line_ydxd::y#2
(byte) bitmap_line_ydxd::y#3
(byte) bitmap_line_ydxd::y#4
(byte) bitmap_line_ydxd::y#5
(byte) bitmap_line_ydxd::y#6
(byte) bitmap_line_ydxd::y#7
(byte) bitmap_line_ydxd::y#8
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0
(byte) bitmap_line_ydxd::y1#1
(byte) bitmap_line_ydxd::y1#2
(byte) bitmap_line_ydxd::y1#3
(byte) bitmap_line_ydxd::y1#4
(byte) bitmap_line_ydxd::y1#5
(byte) bitmap_line_ydxd::y1#6
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0
(byte) bitmap_line_ydxd::yd#1
(byte) bitmap_line_ydxd::yd#2
(byte) bitmap_line_ydxd::yd#3
(byte) bitmap_line_ydxd::yd#4
(byte) bitmap_line_ydxd::yd#5
(byte) bitmap_line_ydxd::yd#6
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte~) bitmap_line_ydxi::$0
(byte~) bitmap_line_ydxi::$2
(bool~) bitmap_line_ydxi::$3
(bool~) bitmap_line_ydxi::$4
(byte~) bitmap_line_ydxi::$5
(number~) bitmap_line_ydxi::$6
(bool~) bitmap_line_ydxi::$7
(label) bitmap_line_ydxi::@1
(label) bitmap_line_ydxi::@2
(label) bitmap_line_ydxi::@3
(label) bitmap_line_ydxi::@5
(label) bitmap_line_ydxi::@return
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0
(byte) bitmap_line_ydxi::e#1
(byte) bitmap_line_ydxi::e#2
(byte) bitmap_line_ydxi::e#3
(byte) bitmap_line_ydxi::e#4
(byte) bitmap_line_ydxi::e#5
(byte) bitmap_line_ydxi::e#6
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0
(byte) bitmap_line_ydxi::x#1
(byte) bitmap_line_ydxi::x#2
(byte) bitmap_line_ydxi::x#3
(byte) bitmap_line_ydxi::x#4
(byte) bitmap_line_ydxi::x#5
(byte) bitmap_line_ydxi::x#6
(byte) bitmap_line_ydxi::x#7
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0
(byte) bitmap_line_ydxi::xd#1
(byte) bitmap_line_ydxi::xd#2
(byte) bitmap_line_ydxi::xd#3
(byte) bitmap_line_ydxi::xd#4
(byte) bitmap_line_ydxi::xd#5
(byte) bitmap_line_ydxi::xd#6
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0
(byte) bitmap_line_ydxi::y#1
(byte) bitmap_line_ydxi::y#2
(byte) bitmap_line_ydxi::y#3
(byte) bitmap_line_ydxi::y#4
(byte) bitmap_line_ydxi::y#5
(byte) bitmap_line_ydxi::y#6
(byte) bitmap_line_ydxi::y#7
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0
(byte) bitmap_line_ydxi::y1#1
(byte) bitmap_line_ydxi::y1#2
(byte) bitmap_line_ydxi::y1#3
(byte) bitmap_line_ydxi::y1#4
(byte) bitmap_line_ydxi::y1#5
(byte) bitmap_line_ydxi::y1#6
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0
(byte) bitmap_line_ydxi::yd#1
(byte) bitmap_line_ydxi::yd#2
(byte) bitmap_line_ydxi::yd#3
(byte) bitmap_line_ydxi::yd#4
(byte) bitmap_line_ydxi::yd#5
(byte) bitmap_line_ydxi::yd#6
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(word~) bitmap_plot::$0
(byte~) bitmap_plot::$1
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(byte*) bitmap_plot::plotter#0
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0
(byte) bitmap_plot::x#1
(byte) bitmap_plot::x#2
(byte) bitmap_plot::x#3
(byte) bitmap_plot::x#4
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0
(byte) bitmap_plot::y#1
(byte) bitmap_plot::y#2
(byte) bitmap_plot::y#3
(byte) bitmap_plot::y#4
(byte[$100]) bitmap_plot_bit
(byte[$100]) bitmap_plot_xhi
(byte[$100]) bitmap_plot_xlo
(byte[$100]) bitmap_plot_yhi
(byte[$100]) bitmap_plot_ylo
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(byte*) dtvSetCpuBankSegment1::cpuBank
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1
(byte) dtvSetCpuBankSegment1::cpuBankIdx#10
(byte) dtvSetCpuBankSegment1::cpuBankIdx#11
(byte) dtvSetCpuBankSegment1::cpuBankIdx#12
(byte) dtvSetCpuBankSegment1::cpuBankIdx#13
(byte) dtvSetCpuBankSegment1::cpuBankIdx#2
(byte) dtvSetCpuBankSegment1::cpuBankIdx#3
(byte) dtvSetCpuBankSegment1::cpuBankIdx#4
(byte) dtvSetCpuBankSegment1::cpuBankIdx#5
(byte) dtvSetCpuBankSegment1::cpuBankIdx#6
(byte) dtvSetCpuBankSegment1::cpuBankIdx#7
(byte) dtvSetCpuBankSegment1::cpuBankIdx#8
(byte) dtvSetCpuBankSegment1::cpuBankIdx#9
(byte*) form_a_mod_hi
(byte*) form_a_mod_lo
(byte*) form_a_pattern
(byte*) form_a_start_hi
(byte*) form_a_start_lo
(byte*) form_a_step_hi
(byte*) form_a_step_lo
(byte*) form_b_mod_hi
(byte*) form_b_mod_lo
(byte*) form_b_pattern
(byte*) form_b_start_hi
(byte*) form_b_start_lo
(byte*) form_b_step_hi
(byte*) form_b_step_lo
(byte()) form_control()
(byte*~) form_control::$0
(bool~) form_control::$1
(bool~) form_control::$10
(bool~) form_control::$11
(bool~) form_control::$12
(number~) form_control::$13
(number~) form_control::$14
(number~) form_control::$15
(byte~) form_control::$16
(bool~) form_control::$17
(bool~) form_control::$18
(bool~) form_control::$19
(bool~) form_control::$2
(number~) form_control::$20
(bool~) form_control::$21
(bool~) form_control::$22
(number~) form_control::$23
(byte~) form_control::$24
(bool~) form_control::$25
(bool~) form_control::$26
(bool~) form_control::$27
(bool~) form_control::$28
(bool~) form_control::$29
(number~) form_control::$3
(bool~) form_control::$4
(byte~) form_control::$6
(bool~) form_control::$7
(bool~) form_control::$8
(bool~) form_control::$9
(label) form_control::@1
(label) form_control::@10
(label) form_control::@11
(label) form_control::@12
(label) form_control::@13
(label) form_control::@14
(label) form_control::@15
(label) form_control::@16
(label) form_control::@19
(label) form_control::@2
(label) form_control::@22
(label) form_control::@24
(label) form_control::@26
(label) form_control::@29
(label) form_control::@3
(label) form_control::@31
(label) form_control::@33
(label) form_control::@34
(label) form_control::@35
(label) form_control::@4
(label) form_control::@5
(label) form_control::@6
(label) form_control::@7
(label) form_control::@8
(label) form_control::@return
(byte*) form_control::field
(byte*) form_control::field#0
(byte*) form_control::field#1
(byte*) form_control::field#10
(byte*) form_control::field#11
(byte*) form_control::field#12
(byte*) form_control::field#13
(byte*) form_control::field#14
(byte*) form_control::field#15
(byte*) form_control::field#2
(byte*) form_control::field#3
(byte*) form_control::field#4
(byte*) form_control::field#5
(byte*) form_control::field#6
(byte*) form_control::field#7
(byte*) form_control::field#8
(byte*) form_control::field#9
(byte) form_control::key_event
(byte) form_control::key_event#0
(byte) form_control::key_event#1
(byte) form_control::key_event#2
(byte) form_control::return
(byte) form_control::return#0
(byte) form_control::return#1
(byte) form_control::return#2
(byte) form_control::return#3
(byte) form_control::return#4
(byte) form_control::return#5
(byte) form_control::return#6
(byte) form_control::return#7
(byte*) form_ctrl_bmm
(byte*) form_ctrl_borof
(byte*) form_ctrl_chunk
(byte*) form_ctrl_colof
(byte*) form_ctrl_ecm
(byte*) form_ctrl_hicol
(byte*) form_ctrl_line
(byte*) form_ctrl_mcm
(byte*) form_ctrl_overs
(signed byte) form_cursor_count
(signed byte) form_cursor_count#0
(signed byte) form_cursor_count#1
(signed byte) form_cursor_count#10
(signed byte) form_cursor_count#11
(signed byte) form_cursor_count#12
(signed byte) form_cursor_count#13
(signed byte) form_cursor_count#14
(signed byte) form_cursor_count#15
(signed byte) form_cursor_count#16
(signed byte) form_cursor_count#17
(signed byte) form_cursor_count#18
(signed byte) form_cursor_count#19
(signed byte) form_cursor_count#2
(signed byte) form_cursor_count#20
(signed byte) form_cursor_count#21
(signed byte) form_cursor_count#22
(signed byte) form_cursor_count#23
(signed byte) form_cursor_count#24
(signed byte) form_cursor_count#25
(signed byte) form_cursor_count#26
(signed byte) form_cursor_count#27
(signed byte) form_cursor_count#28
(signed byte) form_cursor_count#29
(signed byte) form_cursor_count#3
(signed byte) form_cursor_count#30
(signed byte) form_cursor_count#31
(signed byte) form_cursor_count#32
(signed byte) form_cursor_count#33
(signed byte) form_cursor_count#34
(signed byte) form_cursor_count#35
(signed byte) form_cursor_count#36
(signed byte) form_cursor_count#37
(signed byte) form_cursor_count#38
(signed byte) form_cursor_count#39
(signed byte) form_cursor_count#4
(signed byte) form_cursor_count#40
(signed byte) form_cursor_count#41
(signed byte) form_cursor_count#42
(signed byte) form_cursor_count#43
(signed byte) form_cursor_count#44
(signed byte) form_cursor_count#45
(signed byte) form_cursor_count#46
(signed byte) form_cursor_count#47
(signed byte) form_cursor_count#48
(signed byte) form_cursor_count#49
(signed byte) form_cursor_count#5
(signed byte) form_cursor_count#50
(signed byte) form_cursor_count#51
(signed byte) form_cursor_count#52
(signed byte) form_cursor_count#53
(signed byte) form_cursor_count#54
(signed byte) form_cursor_count#55
(signed byte) form_cursor_count#56
(signed byte) form_cursor_count#57
(signed byte) form_cursor_count#58
(signed byte) form_cursor_count#59
(signed byte) form_cursor_count#6
(signed byte) form_cursor_count#60
(signed byte) form_cursor_count#7
(signed byte) form_cursor_count#8
(signed byte) form_cursor_count#9
(byte*) form_dtv_palet
(byte) form_field_idx
(byte) form_field_idx#0
(byte) form_field_idx#1
(byte) form_field_idx#10
(byte) form_field_idx#11
(byte) form_field_idx#12
(byte) form_field_idx#13
(byte) form_field_idx#14
(byte) form_field_idx#15
(byte) form_field_idx#16
(byte) form_field_idx#17
(byte) form_field_idx#18
(byte) form_field_idx#19
(byte) form_field_idx#2
(byte) form_field_idx#20
(byte) form_field_idx#21
(byte) form_field_idx#22
(byte) form_field_idx#23
(byte) form_field_idx#24
(byte) form_field_idx#25
(byte) form_field_idx#26
(byte) form_field_idx#27
(byte) form_field_idx#28
(byte) form_field_idx#29
(byte) form_field_idx#3
(byte) form_field_idx#30
(byte) form_field_idx#31
(byte) form_field_idx#32
(byte) form_field_idx#33
(byte) form_field_idx#34
(byte) form_field_idx#35
(byte) form_field_idx#36
(byte) form_field_idx#37
(byte) form_field_idx#38
(byte) form_field_idx#39
(byte) form_field_idx#4
(byte) form_field_idx#40
(byte) form_field_idx#41
(byte) form_field_idx#42
(byte) form_field_idx#43
(byte) form_field_idx#44
(byte) form_field_idx#45
(byte) form_field_idx#46
(byte) form_field_idx#47
(byte) form_field_idx#48
(byte) form_field_idx#49
(byte) form_field_idx#5
(byte) form_field_idx#50
(byte) form_field_idx#51
(byte) form_field_idx#52
(byte) form_field_idx#53
(byte) form_field_idx#54
(byte) form_field_idx#55
(byte) form_field_idx#56
(byte) form_field_idx#57
(byte) form_field_idx#58
(byte) form_field_idx#59
(byte) form_field_idx#6
(byte) form_field_idx#60
(byte) form_field_idx#61
(byte) form_field_idx#62
(byte) form_field_idx#63
(byte) form_field_idx#64
(byte) form_field_idx#65
(byte) form_field_idx#66
(byte) form_field_idx#7
(byte) form_field_idx#8
(byte) form_field_idx#9
(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
(byte*~) form_field_ptr::$0
(byte*~) form_field_ptr::$1
(label) form_field_ptr::@return
(byte*) form_field_ptr::field
(byte*) form_field_ptr::field#0
(byte) form_field_ptr::field_idx
(byte) form_field_ptr::field_idx#0
(byte) form_field_ptr::field_idx#1
(byte) form_field_ptr::field_idx#2
(byte*) form_field_ptr::line
(byte*) form_field_ptr::line#0
(byte*) form_field_ptr::return
(byte*) form_field_ptr::return#0
(byte*) form_field_ptr::return#1
(byte*) form_field_ptr::return#2
(byte*) form_field_ptr::return#3
(byte*) form_field_ptr::return#4
(byte*) form_field_ptr::return#5
(byte*) form_field_ptr::return#6
(byte) form_field_ptr::x
(byte) form_field_ptr::x#0
(byte) form_field_ptr::y
(byte) form_field_ptr::y#0
(byte) form_fields_cnt
(byte[]) form_fields_max
(byte[]) form_fields_val
(byte[]) form_fields_x
(byte[]) form_fields_y
(byte[$19]) form_line_hi
(byte[$19]) form_line_lo
(void()) form_mode()
(number~) form_mode::$10
(byte~) form_mode::$11
(number~) form_mode::$12
(word~) form_mode::$13
(byte~) form_mode::$14
(number~) form_mode::$15
(word~) form_mode::$16
(byte~) form_mode::$17
(word~) form_mode::$18
(number~) form_mode::$19
(byte~) form_mode::$20
(number~) form_mode::$21
(byte~) form_mode::$22
(number~) form_mode::$23
(word~) form_mode::$24
(number~) form_mode::$25
(number~) form_mode::$26
(word~) form_mode::$27
(number~) form_mode::$28
(number~) form_mode::$29
(number~) form_mode::$30
(byte~) form_mode::$31
(byte~) form_mode::$32
(byte~) form_mode::$33
(bool~) form_mode::$34
(bool~) form_mode::$35
(byte~) form_mode::$36
(bool~) form_mode::$37
(bool~) form_mode::$38
(bool~) form_mode::$39
(bool~) form_mode::$40
(dword~) form_mode::$9
(label) form_mode::@1
(label) form_mode::@14
(label) form_mode::@18
(label) form_mode::@2
(label) form_mode::@21
(label) form_mode::@22
(label) form_mode::@23
(label) form_mode::@24
(label) form_mode::@25
(label) form_mode::@26
(label) form_mode::@27
(label) form_mode::@28
(label) form_mode::@29
(label) form_mode::@3
(label) form_mode::@30
(label) form_mode::@31
(label) form_mode::@32
(label) form_mode::@33
(label) form_mode::@6
(label) form_mode::@8
(label) form_mode::@return
(byte) form_mode::i
(byte) form_mode::i#0
(byte) form_mode::i#1
(byte) form_mode::i#2
(byte) form_mode::preset_current
(byte) form_mode::preset_current#0
(byte) form_mode::preset_current#1
(byte) form_mode::preset_current#2
(byte) form_mode::preset_current#3
(byte) form_mode::preset_current#4
(byte) form_mode::preset_current#5
(byte) form_mode::preset_current#6
(byte) form_mode::preset_current#7
(byte) form_mode::preset_current#8
(byte*) form_preset
(void()) form_render_values()
(bool~) form_render_values::$0
(byte*~) form_render_values::$1
(label) form_render_values::@1
(label) form_render_values::@2
(label) form_render_values::@7
(label) form_render_values::@return
(byte*) form_render_values::field
(byte*) form_render_values::field#0
(byte) form_render_values::idx
(byte) form_render_values::idx#0
(byte) form_render_values::idx#1
(byte) form_render_values::idx#2
(byte) form_render_values::idx#3
(byte) form_render_values::idx#4
(void()) form_set_screen((byte*) form_set_screen::screen)
(byte~) form_set_screen::$0
(byte~) form_set_screen::$1
(byte*~) form_set_screen::$2
(bool~) form_set_screen::$3
(label) form_set_screen::@1
(label) form_set_screen::@return
(byte*) form_set_screen::line
(byte*) form_set_screen::line#0
(byte*) form_set_screen::line#1
(byte*) form_set_screen::line#2
(byte*) form_set_screen::screen
(byte*) form_set_screen::screen#0
(byte*) form_set_screen::screen#1
(byte) form_set_screen::y
(byte) form_set_screen::y#0
(byte) form_set_screen::y#1
(byte) form_set_screen::y#2
(byte*) form_vic_bg0_hi
(byte*) form_vic_bg0_lo
(byte*) form_vic_bg1_hi
(byte*) form_vic_bg1_lo
(byte*) form_vic_bg2_hi
(byte*) form_vic_bg2_lo
(byte*) form_vic_bg3_hi
(byte*) form_vic_bg3_lo
(byte*) form_vic_cols
(byte*) form_vic_gfx
(byte*) form_vic_screen
(dword()) get_plane((byte) get_plane::idx)
(bool~) get_plane::$0
(bool~) get_plane::$1
(bool~) get_plane::$10
(bool~) get_plane::$11
(bool~) get_plane::$12
(bool~) get_plane::$13
(bool~) get_plane::$14
(dword~) get_plane::$15
(dword~) get_plane::$16
(dword~) get_plane::$17
(dword~) get_plane::$18
(dword~) get_plane::$19
(bool~) get_plane::$2
(dword~) get_plane::$20
(dword~) get_plane::$21
(dword~) get_plane::$22
(dword~) get_plane::$23
(dword~) get_plane::$24
(dword~) get_plane::$25
(dword~) get_plane::$26
(dword~) get_plane::$27
(dword~) get_plane::$28
(dword~) get_plane::$29
(bool~) get_plane::$3
(bool~) get_plane::$4
(bool~) get_plane::$5
(bool~) get_plane::$6
(bool~) get_plane::$7
(bool~) get_plane::$8
(bool~) get_plane::$9
(label) get_plane::@1
(label) get_plane::@10
(label) get_plane::@11
(label) get_plane::@12
(label) get_plane::@13
(label) get_plane::@2
(label) get_plane::@27
(label) get_plane::@28
(label) get_plane::@29
(label) get_plane::@3
(label) get_plane::@30
(label) get_plane::@31
(label) get_plane::@32
(label) get_plane::@33
(label) get_plane::@34
(label) get_plane::@35
(label) get_plane::@36
(label) get_plane::@37
(label) get_plane::@38
(label) get_plane::@39
(label) get_plane::@4
(label) get_plane::@40
(label) get_plane::@41
(label) get_plane::@5
(label) get_plane::@6
(label) get_plane::@7
(label) get_plane::@8
(label) get_plane::@9
(label) get_plane::@return
(byte) get_plane::idx
(byte) get_plane::idx#0
(byte) get_plane::idx#1
(byte) get_plane::idx#10
(byte) get_plane::idx#11
(byte) get_plane::idx#12
(byte) get_plane::idx#13
(byte) get_plane::idx#14
(byte) get_plane::idx#15
(byte) get_plane::idx#2
(byte) get_plane::idx#3
(byte) get_plane::idx#4
(byte) get_plane::idx#5
(byte) get_plane::idx#6
(byte) get_plane::idx#7
(byte) get_plane::idx#8
(byte) get_plane::idx#9
(dword) get_plane::return
(dword) get_plane::return#0
(dword) get_plane::return#1
(dword) get_plane::return#10
(dword) get_plane::return#11
(dword) get_plane::return#12
(dword) get_plane::return#13
(dword) get_plane::return#14
(dword) get_plane::return#15
(dword) get_plane::return#16
(dword) get_plane::return#17
(dword) get_plane::return#18
(dword) get_plane::return#19
(dword) get_plane::return#2
(dword) get_plane::return#20
(dword) get_plane::return#3
(dword) get_plane::return#4
(dword) get_plane::return#5
(dword) get_plane::return#6
(dword) get_plane::return#7
(dword) get_plane::return#8
(dword) get_plane::return#9
(byte*()) get_vic_charset((byte) get_vic_charset::idx)
(bool~) get_vic_charset::$0
(bool~) get_vic_charset::$1
(bool~) get_vic_charset::$2
(label) get_vic_charset::@1
(label) get_vic_charset::@3
(label) get_vic_charset::@4
(label) get_vic_charset::@5
(label) get_vic_charset::@return
(byte) get_vic_charset::idx
(byte) get_vic_charset::idx#0
(byte) get_vic_charset::idx#1
(byte) get_vic_charset::idx#2
(byte*) get_vic_charset::return
(byte*) get_vic_charset::return#0
(byte*) get_vic_charset::return#1
(byte*) get_vic_charset::return#2
(byte*) get_vic_charset::return#3
(byte*) get_vic_charset::return#4
(byte*) get_vic_charset::return#5
(byte*) get_vic_charset::return#6
(byte*()) get_vic_screen((byte) get_vic_screen::idx)
(bool~) get_vic_screen::$0
(bool~) get_vic_screen::$1
(bool~) get_vic_screen::$2
(bool~) get_vic_screen::$3
(bool~) get_vic_screen::$4
(bool~) get_vic_screen::$5
(label) get_vic_screen::@1
(label) get_vic_screen::@10
(label) get_vic_screen::@11
(label) get_vic_screen::@12
(label) get_vic_screen::@13
(label) get_vic_screen::@14
(label) get_vic_screen::@2
(label) get_vic_screen::@3
(label) get_vic_screen::@4
(label) get_vic_screen::@9
(label) get_vic_screen::@return
(byte) get_vic_screen::idx
(byte) get_vic_screen::idx#0
(byte) get_vic_screen::idx#1
(byte) get_vic_screen::idx#2
(byte) get_vic_screen::idx#3
(byte) get_vic_screen::idx#4
(byte) get_vic_screen::idx#5
(byte) get_vic_screen::idx#6
(byte*) get_vic_screen::return
(byte*) get_vic_screen::return#0
(byte*) get_vic_screen::return#1
(byte*) get_vic_screen::return#10
(byte*) get_vic_screen::return#11
(byte*) get_vic_screen::return#2
(byte*) get_vic_screen::return#3
(byte*) get_vic_screen::return#4
(byte*) get_vic_screen::return#5
(byte*) get_vic_screen::return#6
(byte*) get_vic_screen::return#7
(byte*) get_vic_screen::return#8
(byte*) get_vic_screen::return#9
(void()) gfx_init()
(label) gfx_init::@1
(label) gfx_init::@10
(label) gfx_init::@11
(label) gfx_init::@12
(label) gfx_init::@13
(label) gfx_init::@14
(label) gfx_init::@15
(label) gfx_init::@2
(label) gfx_init::@3
(label) gfx_init::@4
(label) gfx_init::@5
(label) gfx_init::@6
(label) gfx_init::@7
(label) gfx_init::@8
(label) gfx_init::@9
(label) gfx_init::@return
(void()) gfx_init_charset()
(bool~) gfx_init_charset::$0
(bool~) gfx_init_charset::$1
(label) gfx_init_charset::@1
(label) gfx_init_charset::@2
(label) gfx_init_charset::@3
(label) gfx_init_charset::@4
(label) gfx_init_charset::@return
(byte) gfx_init_charset::c
(byte) gfx_init_charset::c#0
(byte) gfx_init_charset::c#1
(byte) gfx_init_charset::c#2
(byte) gfx_init_charset::c#3
(byte) gfx_init_charset::c#4
(byte*) gfx_init_charset::chargen
(byte*) gfx_init_charset::chargen#0
(byte*) gfx_init_charset::chargen#1
(byte*) gfx_init_charset::chargen#2
(byte*) gfx_init_charset::chargen#3
(byte*) gfx_init_charset::chargen#4
(byte*) gfx_init_charset::charset
(byte*) gfx_init_charset::charset#0
(byte*) gfx_init_charset::charset#1
(byte*) gfx_init_charset::charset#2
(byte*) gfx_init_charset::charset#3
(byte*) gfx_init_charset::charset#4
(byte) gfx_init_charset::l
(byte) gfx_init_charset::l#0
(byte) gfx_init_charset::l#1
(byte) gfx_init_charset::l#2
(void()) gfx_init_plane_8bppchunky()
(number~) gfx_init_plane_8bppchunky::$0
(byte~) gfx_init_plane_8bppchunky::$1
(bool~) gfx_init_plane_8bppchunky::$10
(bool~) gfx_init_plane_8bppchunky::$11
(byte~) gfx_init_plane_8bppchunky::$3
(bool~) gfx_init_plane_8bppchunky::$5
(bool~) gfx_init_plane_8bppchunky::$6
(word~) gfx_init_plane_8bppchunky::$8
(byte~) gfx_init_plane_8bppchunky::$9
(label) gfx_init_plane_8bppchunky::@1
(label) gfx_init_plane_8bppchunky::@2
(label) gfx_init_plane_8bppchunky::@3
(label) gfx_init_plane_8bppchunky::@4
(label) gfx_init_plane_8bppchunky::@5
(label) gfx_init_plane_8bppchunky::@6
(label) gfx_init_plane_8bppchunky::@7
(label) gfx_init_plane_8bppchunky::@8
(label) gfx_init_plane_8bppchunky::@9
(label) gfx_init_plane_8bppchunky::@return
(byte) gfx_init_plane_8bppchunky::c
(byte) gfx_init_plane_8bppchunky::c#0
(byte*) gfx_init_plane_8bppchunky::gfxb
(byte*) gfx_init_plane_8bppchunky::gfxb#0
(byte*) gfx_init_plane_8bppchunky::gfxb#1
(byte*) gfx_init_plane_8bppchunky::gfxb#2
(byte*) gfx_init_plane_8bppchunky::gfxb#3
(byte*) gfx_init_plane_8bppchunky::gfxb#4
(byte*) gfx_init_plane_8bppchunky::gfxb#5
(byte*) gfx_init_plane_8bppchunky::gfxb#6
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9
(word) gfx_init_plane_8bppchunky::x
(word) gfx_init_plane_8bppchunky::x#0
(word) gfx_init_plane_8bppchunky::x#1
(word) gfx_init_plane_8bppchunky::x#2
(word) gfx_init_plane_8bppchunky::x#3
(word) gfx_init_plane_8bppchunky::x#4
(word) gfx_init_plane_8bppchunky::x#5
(byte) gfx_init_plane_8bppchunky::y
(byte) gfx_init_plane_8bppchunky::y#0
(byte) gfx_init_plane_8bppchunky::y#1
(byte) gfx_init_plane_8bppchunky::y#2
(byte) gfx_init_plane_8bppchunky::y#3
(byte) gfx_init_plane_8bppchunky::y#4
(byte) gfx_init_plane_8bppchunky::y#5
(byte) gfx_init_plane_8bppchunky::y#6
(byte) gfx_init_plane_8bppchunky::y#7
(void()) gfx_init_plane_blank()
(label) gfx_init_plane_blank::@1
(label) gfx_init_plane_blank::@return
(void()) gfx_init_plane_charset8()
(number~) gfx_init_plane_charset8::$0
(byte~) gfx_init_plane_charset8::$1
(number~) gfx_init_plane_charset8::$10
(bool~) gfx_init_plane_charset8::$11
(bool~) gfx_init_plane_charset8::$12
(bool~) gfx_init_plane_charset8::$13
(number~) gfx_init_plane_charset8::$3
(number~) gfx_init_plane_charset8::$4
(byte~) gfx_init_plane_charset8::$5
(number~) gfx_init_plane_charset8::$7
(bool~) gfx_init_plane_charset8::$8
(bool~) gfx_init_plane_charset8::$9
(label) gfx_init_plane_charset8::@1
(label) gfx_init_plane_charset8::@10
(label) gfx_init_plane_charset8::@2
(label) gfx_init_plane_charset8::@3
(label) gfx_init_plane_charset8::@4
(label) gfx_init_plane_charset8::@5
(label) gfx_init_plane_charset8::@6
(label) gfx_init_plane_charset8::@7
(label) gfx_init_plane_charset8::@8
(label) gfx_init_plane_charset8::@9
(label) gfx_init_plane_charset8::@return
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0
(byte) gfx_init_plane_charset8::bits#1
(byte) gfx_init_plane_charset8::bits#2
(byte) gfx_init_plane_charset8::bits#3
(byte) gfx_init_plane_charset8::bits#4
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#0
(byte) gfx_init_plane_charset8::c#1
(byte) gfx_init_plane_charset8::c#2
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#0
(byte) gfx_init_plane_charset8::ch#1
(byte) gfx_init_plane_charset8::ch#2
(byte) gfx_init_plane_charset8::ch#3
(byte) gfx_init_plane_charset8::ch#4
(byte) gfx_init_plane_charset8::ch#5
(byte) gfx_init_plane_charset8::ch#6
(byte) gfx_init_plane_charset8::ch#7
(byte) gfx_init_plane_charset8::ch#8
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#0
(byte*) gfx_init_plane_charset8::chargen#1
(byte*) gfx_init_plane_charset8::chargen#2
(byte*) gfx_init_plane_charset8::chargen#3
(byte*) gfx_init_plane_charset8::chargen#4
(byte*) gfx_init_plane_charset8::chargen#5
(byte*) gfx_init_plane_charset8::chargen#6
(byte*) gfx_init_plane_charset8::chargen#7
(byte*) gfx_init_plane_charset8::chargen#8
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#0
(byte) gfx_init_plane_charset8::col#1
(byte) gfx_init_plane_charset8::col#2
(byte) gfx_init_plane_charset8::col#3
(byte) gfx_init_plane_charset8::col#4
(byte) gfx_init_plane_charset8::col#5
(byte) gfx_init_plane_charset8::col#6
(byte) gfx_init_plane_charset8::col#7
(byte) gfx_init_plane_charset8::col#8
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#0
(byte) gfx_init_plane_charset8::cp#1
(byte) gfx_init_plane_charset8::cp#2
(byte) gfx_init_plane_charset8::cp#3
(byte) gfx_init_plane_charset8::cp#4
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#0
(byte) gfx_init_plane_charset8::cr#1
(byte) gfx_init_plane_charset8::cr#2
(byte) gfx_init_plane_charset8::cr#3
(byte) gfx_init_plane_charset8::cr#4
(byte) gfx_init_plane_charset8::cr#5
(byte) gfx_init_plane_charset8::cr#6
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#0
(byte*) gfx_init_plane_charset8::gfxa#1
(byte*) gfx_init_plane_charset8::gfxa#2
(byte*) gfx_init_plane_charset8::gfxa#3
(byte*) gfx_init_plane_charset8::gfxa#4
(byte*) gfx_init_plane_charset8::gfxa#5
(byte*) gfx_init_plane_charset8::gfxa#6
(byte*) gfx_init_plane_charset8::gfxa#7
(byte*) gfx_init_plane_charset8::gfxa#8
(byte) gfx_init_plane_charset8::gfxbCpuBank
(byte) gfx_init_plane_charset8::gfxbCpuBank#0
(byte) gfx_init_plane_charset8::gfxbCpuBank#1
(byte) gfx_init_plane_charset8::gfxbCpuBank#2
(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
(number~) gfx_init_plane_fill::$0
(number~) gfx_init_plane_fill::$1
(bool~) gfx_init_plane_fill::$10
(number~) gfx_init_plane_fill::$2
(word~) gfx_init_plane_fill::$4
(number~) gfx_init_plane_fill::$5
(number~) gfx_init_plane_fill::$6
(byte~) gfx_init_plane_fill::$7
(bool~) gfx_init_plane_fill::$9
(label) gfx_init_plane_fill::@1
(label) gfx_init_plane_fill::@2
(label) gfx_init_plane_fill::@3
(label) gfx_init_plane_fill::@4
(label) gfx_init_plane_fill::@5
(label) gfx_init_plane_fill::@6
(label) gfx_init_plane_fill::@return
(byte) gfx_init_plane_fill::bx
(byte) gfx_init_plane_fill::bx#0
(byte) gfx_init_plane_fill::bx#1
(byte) gfx_init_plane_fill::bx#2
(byte) gfx_init_plane_fill::by
(byte) gfx_init_plane_fill::by#0
(byte) gfx_init_plane_fill::by#1
(byte) gfx_init_plane_fill::by#2
(byte) gfx_init_plane_fill::by#3
(byte) gfx_init_plane_fill::by#4
(byte) gfx_init_plane_fill::fill
(byte) gfx_init_plane_fill::fill#0
(byte) gfx_init_plane_fill::fill#1
(byte) gfx_init_plane_fill::fill#2
(byte) gfx_init_plane_fill::fill#3
(byte) gfx_init_plane_fill::fill#4
(byte) gfx_init_plane_fill::fill#5
(byte) gfx_init_plane_fill::fill#6
(byte) gfx_init_plane_fill::fill#7
(byte*) gfx_init_plane_fill::gfxb
(byte*) gfx_init_plane_fill::gfxb#0
(byte*) gfx_init_plane_fill::gfxb#1
(byte*) gfx_init_plane_fill::gfxb#2
(byte*) gfx_init_plane_fill::gfxb#3
(byte*) gfx_init_plane_fill::gfxb#4
(byte) gfx_init_plane_fill::gfxbCpuBank
(byte) gfx_init_plane_fill::gfxbCpuBank#0
(byte) gfx_init_plane_fill::gfxbCpuBank#1
(byte) gfx_init_plane_fill::gfxbCpuBank#2
(dword) gfx_init_plane_fill::plane_addr
(dword) gfx_init_plane_fill::plane_addr#0
(dword) gfx_init_plane_fill::plane_addr#1
(dword) gfx_init_plane_fill::plane_addr#2
(dword) gfx_init_plane_fill::plane_addr#3
(dword) gfx_init_plane_fill::plane_addr#4
(void()) gfx_init_plane_full()
(label) gfx_init_plane_full::@1
(label) gfx_init_plane_full::@return
(void()) gfx_init_plane_horisontal()
(number~) gfx_init_plane_horisontal::$0
(byte~) gfx_init_plane_horisontal::$1
(bool~) gfx_init_plane_horisontal::$10
(number~) gfx_init_plane_horisontal::$3
(number~) gfx_init_plane_horisontal::$4
(byte~) gfx_init_plane_horisontal::$5
(number~) gfx_init_plane_horisontal::$7
(bool~) gfx_init_plane_horisontal::$8
(bool~) gfx_init_plane_horisontal::$9
(label) gfx_init_plane_horisontal::@1
(label) gfx_init_plane_horisontal::@10
(label) gfx_init_plane_horisontal::@2
(label) gfx_init_plane_horisontal::@3
(label) gfx_init_plane_horisontal::@4
(label) gfx_init_plane_horisontal::@5
(label) gfx_init_plane_horisontal::@7
(label) gfx_init_plane_horisontal::@8
(label) gfx_init_plane_horisontal::@9
(label) gfx_init_plane_horisontal::@return
(byte) gfx_init_plane_horisontal::ax
(byte) gfx_init_plane_horisontal::ax#0
(byte) gfx_init_plane_horisontal::ax#1
(byte) gfx_init_plane_horisontal::ax#2
(byte) gfx_init_plane_horisontal::ax#3
(byte) gfx_init_plane_horisontal::ax#4
(byte) gfx_init_plane_horisontal::ax#5
(byte) gfx_init_plane_horisontal::ay
(byte) gfx_init_plane_horisontal::ay#0
(byte) gfx_init_plane_horisontal::ay#1
(byte) gfx_init_plane_horisontal::ay#2
(byte) gfx_init_plane_horisontal::ay#3
(byte) gfx_init_plane_horisontal::ay#4
(byte) gfx_init_plane_horisontal::ay#5
(byte) gfx_init_plane_horisontal::ay#6
(byte) gfx_init_plane_horisontal::ay#7
(byte*) gfx_init_plane_horisontal::gfxa
(byte*) gfx_init_plane_horisontal::gfxa#0
(byte*) gfx_init_plane_horisontal::gfxa#1
(byte*) gfx_init_plane_horisontal::gfxa#2
(byte*) gfx_init_plane_horisontal::gfxa#3
(byte*) gfx_init_plane_horisontal::gfxa#4
(byte*) gfx_init_plane_horisontal::gfxa#5
(byte*) gfx_init_plane_horisontal::gfxa#6
(byte*) gfx_init_plane_horisontal::gfxa#7
(byte*) gfx_init_plane_horisontal::gfxa#8
(byte) gfx_init_plane_horisontal::gfxbCpuBank
(byte) gfx_init_plane_horisontal::gfxbCpuBank#0
(byte) gfx_init_plane_horisontal::gfxbCpuBank#1
(byte) gfx_init_plane_horisontal::gfxbCpuBank#2
(void()) gfx_init_plane_horisontal2()
(number~) gfx_init_plane_horisontal2::$0
(byte~) gfx_init_plane_horisontal2::$1
(bool~) gfx_init_plane_horisontal2::$10
(number~) gfx_init_plane_horisontal2::$3
(number~) gfx_init_plane_horisontal2::$4
(byte~) gfx_init_plane_horisontal2::$5
(number~) gfx_init_plane_horisontal2::$7
(number~) gfx_init_plane_horisontal2::$8
(bool~) gfx_init_plane_horisontal2::$9
(label) gfx_init_plane_horisontal2::@1
(label) gfx_init_plane_horisontal2::@2
(label) gfx_init_plane_horisontal2::@3
(label) gfx_init_plane_horisontal2::@4
(label) gfx_init_plane_horisontal2::@5
(label) gfx_init_plane_horisontal2::@6
(label) gfx_init_plane_horisontal2::@return
(byte) gfx_init_plane_horisontal2::ax
(byte) gfx_init_plane_horisontal2::ax#0
(byte) gfx_init_plane_horisontal2::ax#1
(byte) gfx_init_plane_horisontal2::ax#2
(byte) gfx_init_plane_horisontal2::ay
(byte) gfx_init_plane_horisontal2::ay#0
(byte) gfx_init_plane_horisontal2::ay#1
(byte) gfx_init_plane_horisontal2::ay#2
(byte) gfx_init_plane_horisontal2::ay#3
(byte) gfx_init_plane_horisontal2::ay#4
(byte*) gfx_init_plane_horisontal2::gfxa
(byte*) gfx_init_plane_horisontal2::gfxa#0
(byte*) gfx_init_plane_horisontal2::gfxa#1
(byte*) gfx_init_plane_horisontal2::gfxa#2
(byte*) gfx_init_plane_horisontal2::gfxa#3
(byte*) gfx_init_plane_horisontal2::gfxa#4
(byte) gfx_init_plane_horisontal2::gfxbCpuBank
(byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
(byte) gfx_init_plane_horisontal2::gfxbCpuBank#1
(byte) gfx_init_plane_horisontal2::gfxbCpuBank#2
(byte) gfx_init_plane_horisontal2::row
(byte) gfx_init_plane_horisontal2::row#0
(byte[]) gfx_init_plane_horisontal2::row_bitmask
(void()) gfx_init_plane_vertical()
(number~) gfx_init_plane_vertical::$0
(byte~) gfx_init_plane_vertical::$1
(number~) gfx_init_plane_vertical::$3
(number~) gfx_init_plane_vertical::$4
(byte~) gfx_init_plane_vertical::$5
(bool~) gfx_init_plane_vertical::$7
(bool~) gfx_init_plane_vertical::$8
(label) gfx_init_plane_vertical::@1
(label) gfx_init_plane_vertical::@2
(label) gfx_init_plane_vertical::@3
(label) gfx_init_plane_vertical::@4
(label) gfx_init_plane_vertical::@5
(label) gfx_init_plane_vertical::@6
(label) gfx_init_plane_vertical::@return
(byte) gfx_init_plane_vertical::bx
(byte) gfx_init_plane_vertical::bx#0
(byte) gfx_init_plane_vertical::bx#1
(byte) gfx_init_plane_vertical::bx#2
(byte) gfx_init_plane_vertical::by
(byte) gfx_init_plane_vertical::by#0
(byte) gfx_init_plane_vertical::by#1
(byte) gfx_init_plane_vertical::by#2
(byte) gfx_init_plane_vertical::by#3
(byte) gfx_init_plane_vertical::by#4
(byte*) gfx_init_plane_vertical::gfxb
(byte*) gfx_init_plane_vertical::gfxb#0
(byte*) gfx_init_plane_vertical::gfxb#1
(byte*) gfx_init_plane_vertical::gfxb#2
(byte*) gfx_init_plane_vertical::gfxb#3
(byte*) gfx_init_plane_vertical::gfxb#4
(byte) gfx_init_plane_vertical::gfxbCpuBank
(byte) gfx_init_plane_vertical::gfxbCpuBank#0
(byte) gfx_init_plane_vertical::gfxbCpuBank#1
(byte) gfx_init_plane_vertical::gfxbCpuBank#2
(void()) gfx_init_plane_vertical2()
(label) gfx_init_plane_vertical2::@1
(label) gfx_init_plane_vertical2::@return
(void()) gfx_init_screen0()
(number~) gfx_init_screen0::$0
(number~) gfx_init_screen0::$1
(number~) gfx_init_screen0::$2
(number~) gfx_init_screen0::$3
(bool~) gfx_init_screen0::$4
(bool~) gfx_init_screen0::$5
(label) gfx_init_screen0::@1
(label) gfx_init_screen0::@2
(label) gfx_init_screen0::@3
(label) gfx_init_screen0::@return
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#0
(byte*) gfx_init_screen0::ch#1
(byte*) gfx_init_screen0::ch#2
(byte*) gfx_init_screen0::ch#3
(byte*) gfx_init_screen0::ch#4
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#0
(byte) gfx_init_screen0::cx#1
(byte) gfx_init_screen0::cx#2
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#0
(byte) gfx_init_screen0::cy#1
(byte) gfx_init_screen0::cy#2
(byte) gfx_init_screen0::cy#3
(byte) gfx_init_screen0::cy#4
(void()) gfx_init_screen1()
(byte~) gfx_init_screen1::$0
(number~) gfx_init_screen1::$1
(bool~) gfx_init_screen1::$2
(bool~) gfx_init_screen1::$3
(label) gfx_init_screen1::@1
(label) gfx_init_screen1::@2
(label) gfx_init_screen1::@3
(label) gfx_init_screen1::@return
(byte*) gfx_init_screen1::ch
(byte*) gfx_init_screen1::ch#0
(byte*) gfx_init_screen1::ch#1
(byte*) gfx_init_screen1::ch#2
(byte*) gfx_init_screen1::ch#3
(byte*) gfx_init_screen1::ch#4
(byte) gfx_init_screen1::cx
(byte) gfx_init_screen1::cx#0
(byte) gfx_init_screen1::cx#1
(byte) gfx_init_screen1::cx#2
(byte) gfx_init_screen1::cy
(byte) gfx_init_screen1::cy#0
(byte) gfx_init_screen1::cy#1
(byte) gfx_init_screen1::cy#2
(byte) gfx_init_screen1::cy#3
(byte) gfx_init_screen1::cy#4
(void()) gfx_init_screen2()
(byte~) gfx_init_screen2::$0
(number~) gfx_init_screen2::$1
(number~) gfx_init_screen2::$2
(number~) gfx_init_screen2::$3
(number~) gfx_init_screen2::$4
(bool~) gfx_init_screen2::$5
(bool~) gfx_init_screen2::$6
(label) gfx_init_screen2::@1
(label) gfx_init_screen2::@2
(label) gfx_init_screen2::@3
(label) gfx_init_screen2::@return
(byte*) gfx_init_screen2::ch
(byte*) gfx_init_screen2::ch#0
(byte*) gfx_init_screen2::ch#1
(byte*) gfx_init_screen2::ch#2
(byte*) gfx_init_screen2::ch#3
(byte*) gfx_init_screen2::ch#4
(byte) gfx_init_screen2::col
(byte) gfx_init_screen2::col#0
(byte) gfx_init_screen2::col2
(byte) gfx_init_screen2::col2#0
(byte) gfx_init_screen2::cx
(byte) gfx_init_screen2::cx#0
(byte) gfx_init_screen2::cx#1
(byte) gfx_init_screen2::cx#2
(byte) gfx_init_screen2::cy
(byte) gfx_init_screen2::cy#0
(byte) gfx_init_screen2::cy#1
(byte) gfx_init_screen2::cy#2
(byte) gfx_init_screen2::cy#3
(byte) gfx_init_screen2::cy#4
(void()) gfx_init_screen3()
(number~) gfx_init_screen3::$0
(number~) gfx_init_screen3::$1
(number~) gfx_init_screen3::$2
(number~) gfx_init_screen3::$3
(bool~) gfx_init_screen3::$4
(bool~) gfx_init_screen3::$5
(label) gfx_init_screen3::@1
(label) gfx_init_screen3::@2
(label) gfx_init_screen3::@3
(label) gfx_init_screen3::@return
(byte*) gfx_init_screen3::ch
(byte*) gfx_init_screen3::ch#0
(byte*) gfx_init_screen3::ch#1
(byte*) gfx_init_screen3::ch#2
(byte*) gfx_init_screen3::ch#3
(byte*) gfx_init_screen3::ch#4
(byte) gfx_init_screen3::cx
(byte) gfx_init_screen3::cx#0
(byte) gfx_init_screen3::cx#1
(byte) gfx_init_screen3::cx#2
(byte) gfx_init_screen3::cy
(byte) gfx_init_screen3::cy#0
(byte) gfx_init_screen3::cy#1
(byte) gfx_init_screen3::cy#2
(byte) gfx_init_screen3::cy#3
(byte) gfx_init_screen3::cy#4
(void()) gfx_init_screen4()
(bool~) gfx_init_screen4::$0
(bool~) gfx_init_screen4::$1
(label) gfx_init_screen4::@1
(label) gfx_init_screen4::@2
(label) gfx_init_screen4::@3
(label) gfx_init_screen4::@return
(byte*) gfx_init_screen4::ch
(byte*) gfx_init_screen4::ch#0
(byte*) gfx_init_screen4::ch#1
(byte*) gfx_init_screen4::ch#2
(byte*) gfx_init_screen4::ch#3
(byte*) gfx_init_screen4::ch#4
(byte) gfx_init_screen4::cx
(byte) gfx_init_screen4::cx#0
(byte) gfx_init_screen4::cx#1
(byte) gfx_init_screen4::cx#2
(byte) gfx_init_screen4::cy
(byte) gfx_init_screen4::cy#0
(byte) gfx_init_screen4::cy#1
(byte) gfx_init_screen4::cy#2
(byte) gfx_init_screen4::cy#3
(byte) gfx_init_screen4::cy#4
(void()) gfx_init_vic_bitmap()
(bool~) gfx_init_vic_bitmap::$2
(number~) gfx_init_vic_bitmap::$3
(number~) gfx_init_vic_bitmap::$4
(label) gfx_init_vic_bitmap::@1
(label) gfx_init_vic_bitmap::@2
(label) gfx_init_vic_bitmap::@7
(label) gfx_init_vic_bitmap::@8
(label) gfx_init_vic_bitmap::@9
(label) gfx_init_vic_bitmap::@return
(byte) gfx_init_vic_bitmap::l
(byte) gfx_init_vic_bitmap::l#0
(byte) gfx_init_vic_bitmap::l#1
(byte) gfx_init_vic_bitmap::l#2
(byte) gfx_init_vic_bitmap::l#3
(byte) gfx_init_vic_bitmap::l#4
(byte) gfx_init_vic_bitmap::lines_cnt
(byte[]) gfx_init_vic_bitmap::lines_x
(byte[]) gfx_init_vic_bitmap::lines_y
(void()) gfx_mode()
(bool~) gfx_mode::$0
(bool~) gfx_mode::$1
(bool~) gfx_mode::$10
(bool~) gfx_mode::$11
(byte~) gfx_mode::$12
(number~) gfx_mode::$13
(bool~) gfx_mode::$14
(bool~) gfx_mode::$15
(bool~) gfx_mode::$16
(bool~) gfx_mode::$17
(bool~) gfx_mode::$18
(bool~) gfx_mode::$19
(bool~) gfx_mode::$2
(number~) gfx_mode::$20
(number~) gfx_mode::$21
(dword~) gfx_mode::$22
(dword~) gfx_mode::$23
(word~) gfx_mode::$24
(byte~) gfx_mode::$25
(word~) gfx_mode::$26
(byte~) gfx_mode::$27
(word~) gfx_mode::$28
(byte~) gfx_mode::$29
(bool~) gfx_mode::$3
(number~) gfx_mode::$30
(number~) gfx_mode::$31
(number~) gfx_mode::$32
(number~) gfx_mode::$33
(number~) gfx_mode::$34
(number~) gfx_mode::$35
(dword~) gfx_mode::$36
(dword~) gfx_mode::$37
(word~) gfx_mode::$38
(byte~) gfx_mode::$39
(bool~) gfx_mode::$4
(word~) gfx_mode::$40
(byte~) gfx_mode::$41
(word~) gfx_mode::$42
(byte~) gfx_mode::$43
(number~) gfx_mode::$44
(number~) gfx_mode::$45
(number~) gfx_mode::$46
(number~) gfx_mode::$47
(word~) gfx_mode::$48
(number~) gfx_mode::$49
(bool~) gfx_mode::$5
(byte~) gfx_mode::$50
(number~) gfx_mode::$51
(byte*~) gfx_mode::$52
(word~) gfx_mode::$53
(number~) gfx_mode::$54
(number~) gfx_mode::$55
(byte~) gfx_mode::$56
(byte*~) gfx_mode::$57
(word~) gfx_mode::$58
(number~) gfx_mode::$59
(bool~) gfx_mode::$6
(number~) gfx_mode::$60
(number~) gfx_mode::$61
(number~) gfx_mode::$62
(byte*~) gfx_mode::$63
(number~) gfx_mode::$64
(number~) gfx_mode::$65
(number~) gfx_mode::$66
(number~) gfx_mode::$67
(number~) gfx_mode::$68
(number~) gfx_mode::$69
(bool~) gfx_mode::$7
(number~) gfx_mode::$70
(number~) gfx_mode::$71
(bool~) gfx_mode::$72
(byte~) gfx_mode::$73
(byte~) gfx_mode::$74
(byte~) gfx_mode::$75
(byte~) gfx_mode::$76
(byte~) gfx_mode::$77
(byte~) gfx_mode::$78
(byte~) gfx_mode::$79
(bool~) gfx_mode::$8
(byte~) gfx_mode::$80
(byte~) gfx_mode::$81
(bool~) gfx_mode::$82
(bool~) gfx_mode::$83
(bool~) gfx_mode::$84
(bool~) gfx_mode::$85
(bool~) gfx_mode::$86
(byte~) gfx_mode::$88
(bool~) gfx_mode::$89
(bool~) gfx_mode::$9
(bool~) gfx_mode::$90
(label) gfx_mode::@1
(label) gfx_mode::@10
(label) gfx_mode::@12
(label) gfx_mode::@13
(label) gfx_mode::@14
(label) gfx_mode::@15
(label) gfx_mode::@16
(label) gfx_mode::@17
(label) gfx_mode::@18
(label) gfx_mode::@19
(label) gfx_mode::@2
(label) gfx_mode::@20
(label) gfx_mode::@21
(label) gfx_mode::@22
(label) gfx_mode::@23
(label) gfx_mode::@24
(label) gfx_mode::@25
(label) gfx_mode::@26
(label) gfx_mode::@29
(label) gfx_mode::@3
(label) gfx_mode::@31
(label) gfx_mode::@34
(label) gfx_mode::@36
(label) gfx_mode::@4
(label) gfx_mode::@46
(label) gfx_mode::@47
(label) gfx_mode::@48
(label) gfx_mode::@49
(label) gfx_mode::@5
(label) gfx_mode::@50
(label) gfx_mode::@51
(label) gfx_mode::@52
(label) gfx_mode::@6
(label) gfx_mode::@7
(label) gfx_mode::@8
(label) gfx_mode::@9
(label) gfx_mode::@return
(byte*) gfx_mode::col
(byte*) gfx_mode::col#0
(byte*) gfx_mode::col#1
(byte*) gfx_mode::col#2
(byte*) gfx_mode::col#3
(byte*) gfx_mode::col#4
(byte) gfx_mode::cx
(byte) gfx_mode::cx#0
(byte) gfx_mode::cx#1
(byte) gfx_mode::cx#2
(byte) gfx_mode::cy
(byte) gfx_mode::cy#0
(byte) gfx_mode::cy#1
(byte) gfx_mode::cy#2
(byte) gfx_mode::cy#3
(byte) gfx_mode::cy#4
(byte) gfx_mode::dtv_control
(byte) gfx_mode::dtv_control#0
(byte) gfx_mode::dtv_control#1
(byte) gfx_mode::dtv_control#10
(byte) gfx_mode::dtv_control#11
(byte) gfx_mode::dtv_control#12
(byte) gfx_mode::dtv_control#13
(byte) gfx_mode::dtv_control#14
(byte) gfx_mode::dtv_control#15
(byte) gfx_mode::dtv_control#16
(byte) gfx_mode::dtv_control#17
(byte) gfx_mode::dtv_control#18
(byte) gfx_mode::dtv_control#2
(byte) gfx_mode::dtv_control#3
(byte) gfx_mode::dtv_control#4
(byte) gfx_mode::dtv_control#5
(byte) gfx_mode::dtv_control#6
(byte) gfx_mode::dtv_control#7
(byte) gfx_mode::dtv_control#8
(byte) gfx_mode::dtv_control#9
(byte) gfx_mode::i
(byte) gfx_mode::i#0
(byte) gfx_mode::i#1
(byte) gfx_mode::i#2
(byte) gfx_mode::j
(byte) gfx_mode::j#0
(byte) gfx_mode::j#1
(byte) gfx_mode::j#2
(byte) gfx_mode::keyboard_event
(byte) gfx_mode::keyboard_event#0
(dword) gfx_mode::plane_a
(dword) gfx_mode::plane_a#0
(byte) gfx_mode::plane_a_offs
(byte) gfx_mode::plane_a_offs#0
(byte) gfx_mode::plane_a_offs#1
(dword) gfx_mode::plane_b
(dword) gfx_mode::plane_b#0
(byte) gfx_mode::plane_b_offs
(byte) gfx_mode::plane_b_offs#0
(byte) gfx_mode::plane_b_offs#1
(byte*) gfx_mode::vic_colors
(byte*) gfx_mode::vic_colors#0
(byte*) gfx_mode::vic_colors#1
(byte*) gfx_mode::vic_colors#2
(byte*) gfx_mode::vic_colors#3
(byte*) gfx_mode::vic_colors#4
(byte) gfx_mode::vic_control
(byte) gfx_mode::vic_control#0
(byte) gfx_mode::vic_control#1
(byte) gfx_mode::vic_control#2
(byte) gfx_mode::vic_control#3
(byte) gfx_mode::vic_control#4
(byte) gfx_mode::vic_control#5
(byte) gfx_mode::vic_control#6
(byte) gfx_mode::vic_control2
(byte) gfx_mode::vic_control2#0
(byte) gfx_mode::vic_control2#1
(byte) gfx_mode::vic_control2#2
(byte) gfx_mode::vic_control2#3
(byte()) keyboard_event_get()
(bool~) keyboard_event_get::$0
(label) keyboard_event_get::@1
(label) keyboard_event_get::@3
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#0
(byte) keyboard_event_get::return#1
(byte) keyboard_event_get::return#2
(byte) keyboard_event_get::return#3
(byte) keyboard_event_get::return#4
(byte) keyboard_event_get::return#5
(byte) keyboard_event_get::return#6
(byte) keyboard_event_get::return#7
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0
(number~) keyboard_event_pressed::$1
(byte~) keyboard_event_pressed::$2
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#0
(byte) keyboard_event_pressed::keycode#1
(byte) keyboard_event_pressed::keycode#2
(byte) keyboard_event_pressed::keycode#3
(byte) keyboard_event_pressed::keycode#4
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0
(byte) keyboard_event_pressed::return#1
(byte) keyboard_event_pressed::return#10
(byte) keyboard_event_pressed::return#2
(byte) keyboard_event_pressed::return#3
(byte) keyboard_event_pressed::return#4
(byte) keyboard_event_pressed::return#5
(byte) keyboard_event_pressed::return#6
(byte) keyboard_event_pressed::return#7
(byte) keyboard_event_pressed::return#8
(byte) keyboard_event_pressed::return#9
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0
(bool~) keyboard_event_scan::$1
(bool~) keyboard_event_scan::$10
(bool~) keyboard_event_scan::$11
(byte~) keyboard_event_scan::$12
(bool~) keyboard_event_scan::$13
(number~) keyboard_event_scan::$14
(byte~) keyboard_event_scan::$15
(byte~) keyboard_event_scan::$16
(bool~) keyboard_event_scan::$17
(bool~) keyboard_event_scan::$18
(bool~) keyboard_event_scan::$19
(bool~) keyboard_event_scan::$2
(bool~) keyboard_event_scan::$20
(byte~) keyboard_event_scan::$21
(bool~) keyboard_event_scan::$22
(number~) keyboard_event_scan::$23
(bool~) keyboard_event_scan::$24
(bool~) keyboard_event_scan::$25
(byte~) keyboard_event_scan::$26
(byte~) keyboard_event_scan::$27
(byte~) keyboard_event_scan::$28
(byte~) keyboard_event_scan::$29
(byte~) keyboard_event_scan::$3
(bool~) keyboard_event_scan::$4
(bool~) keyboard_event_scan::$5
(byte~) keyboard_event_scan::$6
(bool~) keyboard_event_scan::$7
(bool~) keyboard_event_scan::$8
(byte~) keyboard_event_scan::$9
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@24
(label) keyboard_event_scan::@25
(label) keyboard_event_scan::@26
(label) keyboard_event_scan::@27
(label) keyboard_event_scan::@28
(label) keyboard_event_scan::@29
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#0
(byte) keyboard_event_scan::col#1
(byte) keyboard_event_scan::col#2
(byte) keyboard_event_scan::col#3
(byte) keyboard_event_scan::col#4
(byte) keyboard_event_scan::col#5
(byte) keyboard_event_scan::col#6
(byte) keyboard_event_scan::col#7
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#0
(byte) keyboard_event_scan::keycode#1
(byte) keyboard_event_scan::keycode#10
(byte) keyboard_event_scan::keycode#11
(byte) keyboard_event_scan::keycode#12
(byte) keyboard_event_scan::keycode#13
(byte) keyboard_event_scan::keycode#14
(byte) keyboard_event_scan::keycode#2
(byte) keyboard_event_scan::keycode#3
(byte) keyboard_event_scan::keycode#4
(byte) keyboard_event_scan::keycode#5
(byte) keyboard_event_scan::keycode#6
(byte) keyboard_event_scan::keycode#7
(byte) keyboard_event_scan::keycode#8
(byte) keyboard_event_scan::keycode#9
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#0
(byte) keyboard_event_scan::row#1
(byte) keyboard_event_scan::row#10
(byte) keyboard_event_scan::row#11
(byte) keyboard_event_scan::row#12
(byte) keyboard_event_scan::row#13
(byte) keyboard_event_scan::row#2
(byte) keyboard_event_scan::row#3
(byte) keyboard_event_scan::row#4
(byte) keyboard_event_scan::row#5
(byte) keyboard_event_scan::row#6
(byte) keyboard_event_scan::row#7
(byte) keyboard_event_scan::row#8
(byte) keyboard_event_scan::row#9
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0
(byte) keyboard_event_scan::row_scan#1
(byte) keyboard_event_scan::row_scan#2
(byte) keyboard_event_scan::row_scan#3
(byte) keyboard_event_scan::row_scan#4
(byte) keyboard_event_scan::row_scan#5
(byte) keyboard_event_scan::row_scan#6
(byte) keyboard_event_scan::row_scan#7
(byte) keyboard_event_scan::row_scan#8
(byte[8]) keyboard_events
(byte) keyboard_events_size
(byte) keyboard_events_size#0
(byte) keyboard_events_size#1
(byte) keyboard_events_size#10
(byte) keyboard_events_size#100
(byte) keyboard_events_size#101
(byte) keyboard_events_size#102
(byte) keyboard_events_size#103
(byte) keyboard_events_size#104
(byte) keyboard_events_size#105
(byte) keyboard_events_size#106
(byte) keyboard_events_size#107
(byte) keyboard_events_size#108
(byte) keyboard_events_size#109
(byte) keyboard_events_size#11
(byte) keyboard_events_size#110
(byte) keyboard_events_size#111
(byte) keyboard_events_size#112
(byte) keyboard_events_size#113
(byte) keyboard_events_size#114
(byte) keyboard_events_size#115
(byte) keyboard_events_size#116
(byte) keyboard_events_size#117
(byte) keyboard_events_size#118
(byte) keyboard_events_size#119
(byte) keyboard_events_size#12
(byte) keyboard_events_size#120
(byte) keyboard_events_size#121
(byte) keyboard_events_size#122
(byte) keyboard_events_size#123
(byte) keyboard_events_size#124
(byte) keyboard_events_size#125
(byte) keyboard_events_size#126
(byte) keyboard_events_size#127
(byte) keyboard_events_size#128
(byte) keyboard_events_size#129
(byte) keyboard_events_size#13
(byte) keyboard_events_size#130
(byte) keyboard_events_size#131
(byte) keyboard_events_size#132
(byte) keyboard_events_size#133
(byte) keyboard_events_size#134
(byte) keyboard_events_size#135
(byte) keyboard_events_size#136
(byte) keyboard_events_size#137
(byte) keyboard_events_size#138
(byte) keyboard_events_size#139
(byte) keyboard_events_size#14
(byte) keyboard_events_size#140
(byte) keyboard_events_size#141
(byte) keyboard_events_size#142
(byte) keyboard_events_size#143
(byte) keyboard_events_size#144
(byte) keyboard_events_size#145
(byte) keyboard_events_size#146
(byte) keyboard_events_size#147
(byte) keyboard_events_size#148
(byte) keyboard_events_size#15
(byte) keyboard_events_size#16
(byte) keyboard_events_size#17
(byte) keyboard_events_size#18
(byte) keyboard_events_size#19
(byte) keyboard_events_size#2
(byte) keyboard_events_size#20
(byte) keyboard_events_size#21
(byte) keyboard_events_size#22
(byte) keyboard_events_size#23
(byte) keyboard_events_size#24
(byte) keyboard_events_size#25
(byte) keyboard_events_size#26
(byte) keyboard_events_size#27
(byte) keyboard_events_size#28
(byte) keyboard_events_size#29
(byte) keyboard_events_size#3
(byte) keyboard_events_size#30
(byte) keyboard_events_size#31
(byte) keyboard_events_size#32
(byte) keyboard_events_size#33
(byte) keyboard_events_size#34
(byte) keyboard_events_size#35
(byte) keyboard_events_size#36
(byte) keyboard_events_size#37
(byte) keyboard_events_size#38
(byte) keyboard_events_size#39
(byte) keyboard_events_size#4
(byte) keyboard_events_size#40
(byte) keyboard_events_size#41
(byte) keyboard_events_size#42
(byte) keyboard_events_size#43
(byte) keyboard_events_size#44
(byte) keyboard_events_size#45
(byte) keyboard_events_size#46
(byte) keyboard_events_size#47
(byte) keyboard_events_size#48
(byte) keyboard_events_size#49
(byte) keyboard_events_size#5
(byte) keyboard_events_size#50
(byte) keyboard_events_size#51
(byte) keyboard_events_size#52
(byte) keyboard_events_size#53
(byte) keyboard_events_size#54
(byte) keyboard_events_size#55
(byte) keyboard_events_size#56
(byte) keyboard_events_size#57
(byte) keyboard_events_size#58
(byte) keyboard_events_size#59
(byte) keyboard_events_size#6
(byte) keyboard_events_size#60
(byte) keyboard_events_size#61
(byte) keyboard_events_size#62
(byte) keyboard_events_size#63
(byte) keyboard_events_size#64
(byte) keyboard_events_size#65
(byte) keyboard_events_size#66
(byte) keyboard_events_size#67
(byte) keyboard_events_size#68
(byte) keyboard_events_size#69
(byte) keyboard_events_size#7
(byte) keyboard_events_size#70
(byte) keyboard_events_size#71
(byte) keyboard_events_size#72
(byte) keyboard_events_size#73
(byte) keyboard_events_size#74
(byte) keyboard_events_size#75
(byte) keyboard_events_size#76
(byte) keyboard_events_size#77
(byte) keyboard_events_size#78
(byte) keyboard_events_size#79
(byte) keyboard_events_size#8
(byte) keyboard_events_size#80
(byte) keyboard_events_size#81
(byte) keyboard_events_size#82
(byte) keyboard_events_size#83
(byte) keyboard_events_size#84
(byte) keyboard_events_size#85
(byte) keyboard_events_size#86
(byte) keyboard_events_size#87
(byte) keyboard_events_size#88
(byte) keyboard_events_size#89
(byte) keyboard_events_size#9
(byte) keyboard_events_size#90
(byte) keyboard_events_size#91
(byte) keyboard_events_size#92
(byte) keyboard_events_size#93
(byte) keyboard_events_size#94
(byte) keyboard_events_size#95
(byte) keyboard_events_size#96
(byte) keyboard_events_size#97
(byte) keyboard_events_size#98
(byte) keyboard_events_size#99
(void()) keyboard_init()
(label) keyboard_init::@return
(byte[8]) keyboard_matrix_col_bitmask
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte~) keyboard_matrix_read::$0
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0
(byte) keyboard_matrix_read::return#1
(byte) keyboard_matrix_read::return#2
(byte) keyboard_matrix_read::return#3
(byte) keyboard_matrix_read::return#4
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::row_pressed_bits#0
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0
(byte) keyboard_matrix_read::rowid#1
(byte[8]) keyboard_matrix_row_bitmask
(byte) keyboard_modifiers
(byte) keyboard_modifiers#0
(byte) keyboard_modifiers#1
(byte) keyboard_modifiers#10
(byte) keyboard_modifiers#100
(byte) keyboard_modifiers#101
(byte) keyboard_modifiers#102
(byte) keyboard_modifiers#103
(byte) keyboard_modifiers#104
(byte) keyboard_modifiers#105
(byte) keyboard_modifiers#106
(byte) keyboard_modifiers#107
(byte) keyboard_modifiers#108
(byte) keyboard_modifiers#109
(byte) keyboard_modifiers#11
(byte) keyboard_modifiers#110
(byte) keyboard_modifiers#111
(byte) keyboard_modifiers#112
(byte) keyboard_modifiers#113
(byte) keyboard_modifiers#114
(byte) keyboard_modifiers#115
(byte) keyboard_modifiers#116
(byte) keyboard_modifiers#117
(byte) keyboard_modifiers#118
(byte) keyboard_modifiers#119
(byte) keyboard_modifiers#12
(byte) keyboard_modifiers#120
(byte) keyboard_modifiers#121
(byte) keyboard_modifiers#122
(byte) keyboard_modifiers#123
(byte) keyboard_modifiers#124
(byte) keyboard_modifiers#125
(byte) keyboard_modifiers#126
(byte) keyboard_modifiers#127
(byte) keyboard_modifiers#128
(byte) keyboard_modifiers#129
(byte) keyboard_modifiers#13
(byte) keyboard_modifiers#14
(byte) keyboard_modifiers#15
(byte) keyboard_modifiers#16
(byte) keyboard_modifiers#17
(byte) keyboard_modifiers#18
(byte) keyboard_modifiers#19
(byte) keyboard_modifiers#2
(byte) keyboard_modifiers#20
(byte) keyboard_modifiers#21
(byte) keyboard_modifiers#22
(byte) keyboard_modifiers#23
(byte) keyboard_modifiers#24
(byte) keyboard_modifiers#25
(byte) keyboard_modifiers#26
(byte) keyboard_modifiers#27
(byte) keyboard_modifiers#28
(byte) keyboard_modifiers#29
(byte) keyboard_modifiers#3
(byte) keyboard_modifiers#30
(byte) keyboard_modifiers#31
(byte) keyboard_modifiers#32
(byte) keyboard_modifiers#33
(byte) keyboard_modifiers#34
(byte) keyboard_modifiers#35
(byte) keyboard_modifiers#36
(byte) keyboard_modifiers#37
(byte) keyboard_modifiers#38
(byte) keyboard_modifiers#39
(byte) keyboard_modifiers#4
(byte) keyboard_modifiers#40
(byte) keyboard_modifiers#41
(byte) keyboard_modifiers#42
(byte) keyboard_modifiers#43
(byte) keyboard_modifiers#44
(byte) keyboard_modifiers#45
(byte) keyboard_modifiers#46
(byte) keyboard_modifiers#47
(byte) keyboard_modifiers#48
(byte) keyboard_modifiers#49
(byte) keyboard_modifiers#5
(byte) keyboard_modifiers#50
(byte) keyboard_modifiers#51
(byte) keyboard_modifiers#52
(byte) keyboard_modifiers#53
(byte) keyboard_modifiers#54
(byte) keyboard_modifiers#55
(byte) keyboard_modifiers#56
(byte) keyboard_modifiers#57
(byte) keyboard_modifiers#58
(byte) keyboard_modifiers#59
(byte) keyboard_modifiers#6
(byte) keyboard_modifiers#60
(byte) keyboard_modifiers#61
(byte) keyboard_modifiers#62
(byte) keyboard_modifiers#63
(byte) keyboard_modifiers#64
(byte) keyboard_modifiers#65
(byte) keyboard_modifiers#66
(byte) keyboard_modifiers#67
(byte) keyboard_modifiers#68
(byte) keyboard_modifiers#69
(byte) keyboard_modifiers#7
(byte) keyboard_modifiers#70
(byte) keyboard_modifiers#71
(byte) keyboard_modifiers#72
(byte) keyboard_modifiers#73
(byte) keyboard_modifiers#74
(byte) keyboard_modifiers#75
(byte) keyboard_modifiers#76
(byte) keyboard_modifiers#77
(byte) keyboard_modifiers#78
(byte) keyboard_modifiers#79
(byte) keyboard_modifiers#8
(byte) keyboard_modifiers#80
(byte) keyboard_modifiers#81
(byte) keyboard_modifiers#82
(byte) keyboard_modifiers#83
(byte) keyboard_modifiers#84
(byte) keyboard_modifiers#85
(byte) keyboard_modifiers#86
(byte) keyboard_modifiers#87
(byte) keyboard_modifiers#88
(byte) keyboard_modifiers#89
(byte) keyboard_modifiers#9
(byte) keyboard_modifiers#90
(byte) keyboard_modifiers#91
(byte) keyboard_modifiers#92
(byte) keyboard_modifiers#93
(byte) keyboard_modifiers#94
(byte) keyboard_modifiers#95
(byte) keyboard_modifiers#96
(byte) keyboard_modifiers#97
(byte) keyboard_modifiers#98
(byte) keyboard_modifiers#99
(byte[8]) keyboard_scan_values
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@2
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(bool~) memset::$0
(bool~) memset::$1
(byte*~) memset::$2
(byte*~) memset::$3
(bool~) memset::$4
(label) memset::@1
(label) memset::@2
(label) memset::@4
(label) memset::@5
(label) memset::@return
(byte) memset::c
(byte) memset::c#0
(byte) memset::c#1
(byte) memset::c#2
(byte) memset::c#3
(byte) memset::c#4
(byte*) memset::dst
(byte*) memset::dst#0
(byte*) memset::dst#1
(byte*) memset::dst#2
(byte*) memset::dst#3
(byte*) memset::end
(byte*) memset::end#0
(byte*) memset::end#1
(byte*) memset::end#2
(word) memset::num
(word) memset::num#0
(word) memset::num#1
(word) memset::num#2
(void*) memset::return
(void*) memset::return#0
(void*) memset::return#1
(void*) memset::return#2
(void*) memset::return#3
(void*) memset::str
(void*) memset::str#0
(void*) memset::str#1
(void*) memset::str#2
(void*) memset::str#3
(void*) memset::str#4
(void*) memset::str#5
(byte[]) preset_8bpppixelcell
(byte[]) preset_chunky
(byte[]) preset_ecmchar
(byte[]) preset_hi_ecmchar
(byte[]) preset_hi_stdchar
(byte[]) preset_mcbm
(byte[]) preset_sixsfred
(byte[]) preset_sixsfred2
(byte[]) preset_stdbm
(byte[]) preset_stdchar
(byte[]) preset_twoplane
(byte*) print_char_cursor
(byte*) print_char_cursor#0
(byte*) print_char_cursor#1
(byte*) print_char_cursor#10
(byte*) print_char_cursor#11
(byte*) print_char_cursor#12
(byte*) print_char_cursor#13
(byte*) print_char_cursor#14
(byte*) print_char_cursor#15
(byte*) print_char_cursor#16
(byte*) print_char_cursor#17
(byte*) print_char_cursor#18
(byte*) print_char_cursor#19
(byte*) print_char_cursor#2
(byte*) print_char_cursor#20
(byte*) print_char_cursor#21
(byte*) print_char_cursor#22
(byte*) print_char_cursor#23
(byte*) print_char_cursor#24
(byte*) print_char_cursor#25
(byte*) print_char_cursor#26
(byte*) print_char_cursor#27
(byte*) print_char_cursor#28
(byte*) print_char_cursor#29
(byte*) print_char_cursor#3
(byte*) print_char_cursor#30
(byte*) print_char_cursor#31
(byte*) print_char_cursor#32
(byte*) print_char_cursor#33
(byte*) print_char_cursor#34
(byte*) print_char_cursor#35
(byte*) print_char_cursor#36
(byte*) print_char_cursor#37
(byte*) print_char_cursor#38
(byte*) print_char_cursor#39
(byte*) print_char_cursor#4
(byte*) print_char_cursor#40
(byte*) print_char_cursor#41
(byte*) print_char_cursor#42
(byte*) print_char_cursor#43
(byte*) print_char_cursor#44
(byte*) print_char_cursor#45
(byte*) print_char_cursor#46
(byte*) print_char_cursor#47
(byte*) print_char_cursor#48
(byte*) print_char_cursor#49
(byte*) print_char_cursor#5
(byte*) print_char_cursor#50
(byte*) print_char_cursor#51
(byte*) print_char_cursor#52
(byte*) print_char_cursor#53
(byte*) print_char_cursor#54
(byte*) print_char_cursor#55
(byte*) print_char_cursor#56
(byte*) print_char_cursor#57
(byte*) print_char_cursor#58
(byte*) print_char_cursor#59
(byte*) print_char_cursor#6
(byte*) print_char_cursor#60
(byte*) print_char_cursor#61
(byte*) print_char_cursor#62
(byte*) print_char_cursor#63
(byte*) print_char_cursor#64
(byte*) print_char_cursor#65
(byte*) print_char_cursor#66
(byte*) print_char_cursor#67
(byte*) print_char_cursor#68
(byte*) print_char_cursor#69
(byte*) print_char_cursor#7
(byte*) print_char_cursor#70
(byte*) print_char_cursor#71
(byte*) print_char_cursor#72
(byte*) print_char_cursor#8
(byte*) print_char_cursor#9
(void()) print_cls()
(label) print_cls::@1
(label) print_cls::@return
(byte[]) print_hextab
(byte*) print_line_cursor
(byte*) print_line_cursor#0
(byte*) print_line_cursor#1
(byte*) print_line_cursor#10
(byte*) print_line_cursor#11
(byte*) print_line_cursor#12
(byte*) print_line_cursor#13
(byte*) print_line_cursor#14
(byte*) print_line_cursor#15
(byte*) print_line_cursor#16
(byte*) print_line_cursor#17
(byte*) print_line_cursor#18
(byte*) print_line_cursor#19
(byte*) print_line_cursor#2
(byte*) print_line_cursor#20
(byte*) print_line_cursor#21
(byte*) print_line_cursor#22
(byte*) print_line_cursor#23
(byte*) print_line_cursor#24
(byte*) print_line_cursor#25
(byte*) print_line_cursor#26
(byte*) print_line_cursor#27
(byte*) print_line_cursor#28
(byte*) print_line_cursor#29
(byte*) print_line_cursor#3
(byte*) print_line_cursor#30
(byte*) print_line_cursor#31
(byte*) print_line_cursor#32
(byte*) print_line_cursor#33
(byte*) print_line_cursor#34
(byte*) print_line_cursor#35
(byte*) print_line_cursor#36
(byte*) print_line_cursor#37
(byte*) print_line_cursor#38
(byte*) print_line_cursor#39
(byte*) print_line_cursor#4
(byte*) print_line_cursor#40
(byte*) print_line_cursor#41
(byte*) print_line_cursor#42
(byte*) print_line_cursor#43
(byte*) print_line_cursor#44
(byte*) print_line_cursor#45
(byte*) print_line_cursor#46
(byte*) print_line_cursor#47
(byte*) print_line_cursor#48
(byte*) print_line_cursor#49
(byte*) print_line_cursor#5
(byte*) print_line_cursor#50
(byte*) print_line_cursor#51
(byte*) print_line_cursor#52
(byte*) print_line_cursor#53
(byte*) print_line_cursor#54
(byte*) print_line_cursor#55
(byte*) print_line_cursor#56
(byte*) print_line_cursor#57
(byte*) print_line_cursor#58
(byte*) print_line_cursor#59
(byte*) print_line_cursor#6
(byte*) print_line_cursor#60
(byte*) print_line_cursor#61
(byte*) print_line_cursor#62
(byte*) print_line_cursor#63
(byte*) print_line_cursor#64
(byte*) print_line_cursor#65
(byte*) print_line_cursor#66
(byte*) print_line_cursor#67
(byte*) print_line_cursor#68
(byte*) print_line_cursor#69
(byte*) print_line_cursor#7
(byte*) print_line_cursor#70
(byte*) print_line_cursor#71
(byte*) print_line_cursor#72
(byte*) print_line_cursor#8
(byte*) print_line_cursor#9
(void()) print_ln()
(byte*~) print_ln::$0
(bool~) print_ln::$1
(label) print_ln::@1
(label) print_ln::@2
(label) print_ln::@return
(byte*) print_screen
(byte*) print_screen#0
(byte*) print_screen#1
(byte*) print_screen#10
(byte*) print_screen#11
(byte*) print_screen#12
(byte*) print_screen#13
(byte*) print_screen#14
(byte*) print_screen#15
(byte*) print_screen#16
(byte*) print_screen#17
(byte*) print_screen#18
(byte*) print_screen#19
(byte*) print_screen#2
(byte*) print_screen#20
(byte*) print_screen#21
(byte*) print_screen#22
(byte*) print_screen#23
(byte*) print_screen#24
(byte*) print_screen#25
(byte*) print_screen#26
(byte*) print_screen#27
(byte*) print_screen#28
(byte*) print_screen#29
(byte*) print_screen#3
(byte*) print_screen#30
(byte*) print_screen#31
(byte*) print_screen#32
(byte*) print_screen#33
(byte*) print_screen#34
(byte*) print_screen#35
(byte*) print_screen#36
(byte*) print_screen#37
(byte*) print_screen#38
(byte*) print_screen#39
(byte*) print_screen#4
(byte*) print_screen#40
(byte*) print_screen#41
(byte*) print_screen#42
(byte*) print_screen#43
(byte*) print_screen#44
(byte*) print_screen#45
(byte*) print_screen#46
(byte*) print_screen#47
(byte*) print_screen#48
(byte*) print_screen#49
(byte*) print_screen#5
(byte*) print_screen#50
(byte*) print_screen#51
(byte*) print_screen#6
(byte*) print_screen#7
(byte*) print_screen#8
(byte*) print_screen#9
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#0
(byte*) print_set_screen::screen#1
(byte*) print_set_screen::screen#2
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(bool~) print_str_at::$0
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::at#0
(byte*) print_str_at::at#1
(byte*) print_str_at::at#2
(byte*) print_str_at::at#3
(byte*) print_str_at::at#4
(byte*) print_str_at::str
(byte*) print_str_at::str#0
(byte*) print_str_at::str#1
(byte*) print_str_at::str#2
(byte*) print_str_at::str#3
(byte*) print_str_at::str#4
(void()) print_str_lines((byte*) print_str_lines::str)
(bool~) print_str_lines::$0
(bool~) print_str_lines::$2
(bool~) print_str_lines::$3
(bool~) print_str_lines::$4
(label) print_str_lines::@1
(label) print_str_lines::@11
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@6
(label) print_str_lines::@7
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0
(byte) print_str_lines::ch#1
(byte) print_str_lines::ch#2
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0
(byte*) print_str_lines::str#1
(byte*) print_str_lines::str#2
(byte*) print_str_lines::str#3
(byte*) print_str_lines::str#4
(byte*) print_str_lines::str#5
(byte*) print_str_lines::str#6
(byte*) print_str_lines::str#7
(byte*) print_str_lines::str#8
(byte*) print_str_lines::str#9
(void()) render_preset_name((byte) render_preset_name::idx)
(bool~) render_preset_name::$0
(bool~) render_preset_name::$1
(bool~) render_preset_name::$10
(byte*~) render_preset_name::$11
(byte*~) render_preset_name::$12
(const string) render_preset_name::$14 = (string) "Standard Charset              "
(const string) render_preset_name::$15 = (string) "Extended Color Charset        "
(const string) render_preset_name::$16 = (string) "Standard Bitmap               "
(const string) render_preset_name::$17 = (string) "Multicolor Bitmap             "
(const string) render_preset_name::$18 = (string) "Hicolor Charset               "
(const string) render_preset_name::$19 = (string) "Hicolor Extended Color Charset"
(bool~) render_preset_name::$2
(const string) render_preset_name::$20 = (string) "Twoplane Bitmap               "
(const string) render_preset_name::$21 = (string) "Chunky 8bpp                   "
(const string) render_preset_name::$22 = (string) "Sixs Fred                     "
(const string) render_preset_name::$23 = (string) "Sixs Fred 2                   "
(const string) render_preset_name::$24 = (string) "8bpp Pixel Cell               "
(const string) render_preset_name::$25 = (string) "Standard Charset              "
(bool~) render_preset_name::$3
(bool~) render_preset_name::$4
(bool~) render_preset_name::$5
(bool~) render_preset_name::$6
(bool~) render_preset_name::$7
(bool~) render_preset_name::$8
(bool~) render_preset_name::$9
(label) render_preset_name::@1
(label) render_preset_name::@10
(label) render_preset_name::@11
(label) render_preset_name::@2
(label) render_preset_name::@22
(label) render_preset_name::@23
(label) render_preset_name::@24
(label) render_preset_name::@25
(label) render_preset_name::@26
(label) render_preset_name::@27
(label) render_preset_name::@28
(label) render_preset_name::@29
(label) render_preset_name::@3
(label) render_preset_name::@30
(label) render_preset_name::@31
(label) render_preset_name::@32
(label) render_preset_name::@33
(label) render_preset_name::@4
(label) render_preset_name::@45
(label) render_preset_name::@5
(label) render_preset_name::@6
(label) render_preset_name::@7
(label) render_preset_name::@8
(label) render_preset_name::@9
(label) render_preset_name::@return
(byte) render_preset_name::idx
(byte) render_preset_name::idx#0
(byte) render_preset_name::idx#1
(byte) render_preset_name::idx#10
(byte) render_preset_name::idx#11
(byte) render_preset_name::idx#12
(byte) render_preset_name::idx#2
(byte) render_preset_name::idx#3
(byte) render_preset_name::idx#4
(byte) render_preset_name::idx#5
(byte) render_preset_name::idx#6
(byte) render_preset_name::idx#7
(byte) render_preset_name::idx#8
(byte) render_preset_name::idx#9
(byte*) render_preset_name::name
(byte*) render_preset_name::name#0
(byte*) render_preset_name::name#1
(byte*) render_preset_name::name#10
(byte*) render_preset_name::name#11
(byte*) render_preset_name::name#12
(byte*) render_preset_name::name#13
(byte*) render_preset_name::name#2
(byte*) render_preset_name::name#3
(byte*) render_preset_name::name#4
(byte*) render_preset_name::name#5
(byte*) render_preset_name::name#6
(byte*) render_preset_name::name#7
(byte*) render_preset_name::name#8
(byte*) render_preset_name::name#9

Fixing inline constructor with bitmap_clear::$3 ← (byte)*(bitmap_plot_xhi + 0) w= (byte)*(bitmap_plot_xlo + 0)
Fixing inline constructor with bitmap_plot::$2 ← (byte)*(bitmap_plot_xhi + bitmap_plot::x#4) w= (byte)*(bitmap_plot_xlo + bitmap_plot::x#4)
Fixing inline constructor with bitmap_plot::$3 ← (byte)*(bitmap_plot_yhi + bitmap_plot::y#4) w= (byte)*(bitmap_plot_ylo + bitmap_plot::y#4)
Fixing inline constructor with form_field_ptr::$2 ← (byte)*(form_line_hi + form_field_ptr::y#0) w= (byte)*(form_line_lo + form_field_ptr::y#0)
Successful SSA optimization Pass2FixInlineConstructors
Adding number conversion cast (unumber) 7 in (byte) PROCPORT_DDR_MEMORY_MASK ← (number) 7
Adding number conversion cast (unumber) 5 in (byte) PROCPORT_RAM_IO ← (number) 5
Adding number conversion cast (unumber) 1 in (byte) PROCPORT_RAM_CHARROM ← (number) 1
Adding number conversion cast (unumber) $40 in (byte) VIC_ECM ← (number) $40
Adding number conversion cast (unumber) $20 in (byte) VIC_BMM ← (number) $20
Adding number conversion cast (unumber) $10 in (byte) VIC_DEN ← (number) $10
Adding number conversion cast (unumber) 8 in (byte) VIC_RSEL ← (number) 8
Adding number conversion cast (unumber) $10 in (byte) VIC_MCM ← (number) $10
Adding number conversion cast (unumber) 8 in (byte) VIC_CSEL ← (number) 8
Adding number conversion cast (unumber) 1 in (byte) DTV_FEATURE_ENABLE ← (number) 1
Adding number conversion cast (unumber) 1 in (byte) DTV_LINEAR ← (number) 1
Adding number conversion cast (unumber) 2 in (byte) DTV_BORDER_OFF ← (number) 2
Adding number conversion cast (unumber) 4 in (byte) DTV_HIGHCOLOR ← (number) 4
Adding number conversion cast (unumber) 8 in (byte) DTV_OVERSCAN ← (number) 8
Adding number conversion cast (unumber) $10 in (byte) DTV_COLORRAM_OFF ← (number) $10
Adding number conversion cast (unumber) $40 in (byte) DTV_CHUNKY ← (number) $40
Adding number conversion cast (unumber) $1d800 in (dword) DTV_COLOR_BANK_DEFAULT ← (number) $1d800
Adding number conversion cast (unumber) 0 in (bool~) memset::$0 ← (word) memset::num#1 > (number) 0
Adding number conversion cast (unumber) 0 in (bool~) print_str_lines::$2 ← (number) 0 != *((byte*) print_str_lines::str#3)
Adding number conversion cast (unumber) 0 in (bool~) print_str_lines::$4 ← (number) 0 != (byte) print_str_lines::ch#0
Adding number conversion cast (unumber) 0 in (bool~) print_str_lines::$3 ← (number) 0 != (byte) print_str_lines::ch#1
Adding number conversion cast (unumber) 0 in (bool~) print_str_at::$0 ← (number) 0 != *((byte*) print_str_at::str#2)
Adding number conversion cast (unumber) $28 in (byte*~) print_ln::$0 ← (byte*) print_line_cursor#21 + (number) $28
Adding number conversion cast (unumber) $3e8 in (word) memset::num#0 ← (number) $3e8
Adding number conversion cast (unumber) 2 in (byte) KEY_CRSR_RIGHT ← (number) 2
Adding number conversion cast (unumber) 7 in (byte) KEY_CRSR_DOWN ← (number) 7
Adding number conversion cast (unumber) $f in (byte) KEY_LSHIFT ← (number) $f
Adding number conversion cast (unumber) $34 in (byte) KEY_RSHIFT ← (number) $34
Adding number conversion cast (unumber) $3a in (byte) KEY_CTRL ← (number) $3a
Adding number conversion cast (unumber) $3c in (byte) KEY_SPACE ← (number) $3c
Adding number conversion cast (unumber) $3d in (byte) KEY_COMMODORE ← (number) $3d
Adding number conversion cast (unumber) $ff in *((byte*) CIA1_PORT_A_DDR) ← (number) $ff
Adding number conversion cast (unumber) 0 in *((byte*) CIA1_PORT_B_DDR) ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) keyboard_events_size#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) keyboard_modifiers#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (byte) KEY_MODIFIER_LSHIFT ← (number) 1
Adding number conversion cast (unumber) 2 in (byte) KEY_MODIFIER_RSHIFT ← (number) 2
Adding number conversion cast (unumber) 4 in (byte) KEY_MODIFIER_CTRL ← (number) 4
Adding number conversion cast (unumber) 8 in (byte) KEY_MODIFIER_COMMODORE ← (number) 8
Adding number conversion cast (unumber) 0 in (byte) keyboard_event_scan::keycode#0 ← (number) 0
Adding number conversion cast (unumber) 8 in (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (number) 8
Adding number conversion cast (unumber) keyboard_event_scan::$14 in (number~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (unumber)(number) 8
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (number) 0
Adding number conversion cast (unumber) 8 in (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#18 != (number) 8
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$22 ← (byte) keyboard_event_scan::event_type#0 == (number) 0
Adding number conversion cast (unumber) $40 in (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (number) $40
Adding number conversion cast (unumber) keyboard_event_scan::$23 in (number~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (unumber)(number) $40
Adding number conversion cast (unumber) 0 in (byte) keyboard_modifiers#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (number) 0
Adding number conversion cast (unumber) 3 in (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (number) 3
Adding number conversion cast (unumber) 7 in (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (number) 7
Adding number conversion cast (unumber) keyboard_event_pressed::$1 in (number~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (unumber)(number) 7
Adding number conversion cast (unumber) 0 in (bool~) keyboard_event_get::$0 ← (byte) keyboard_events_size#22 == (number) 0
Adding number conversion cast (unumber) $ff in (byte) keyboard_event_get::return#0 ← (number) $ff
Adding number conversion cast (unumber) $80 in (byte) bitmap_init::bits#0 ← (number) $80
Adding number conversion cast (unumber) $f8 in (number~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (number) $f8
Adding number conversion cast (unumber) bitmap_init::$0 in (number~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (unumber)(number) $f8
Adding number conversion cast (unumber) 1 in (byte~) bitmap_init::$2 ← (byte) bitmap_init::bits#3 >> (number) 1
Adding number conversion cast (unumber) 0 in (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (number) 0
Adding number conversion cast (unumber) $80 in (byte) bitmap_init::bits#2 ← (number) $80
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$6 in (number~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) bitmap_init::$8 in (number~) bitmap_init::$8 ← (unumber~) bitmap_init::$6 | (byte~) bitmap_init::$7
Adding number conversion cast (unumber) 7 in (number~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (number) 7
Adding number conversion cast (unumber) bitmap_init::$10 in (number~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (unumber)(number) 7
Adding number conversion cast (unumber) 7 in (bool~) bitmap_init::$11 ← (unumber~) bitmap_init::$10 == (number) 7
Adding number conversion cast (unumber) $28*8 in (byte*~) bitmap_init::$13 ← (byte*) bitmap_init::yoffs#3 + (number) $28*(number) 8
Adding number conversion cast (unumber) 0 in (var) bitmap_clear::$3 ← (byte)*((byte[$100]) bitmap_plot_xhi + (number) 0) w= (byte)*((byte[$100]) bitmap_plot_xlo + (number) 0)
Adding number conversion cast (unumber) 0 in (var) bitmap_clear::$3 ← (byte)*((byte[$100]) bitmap_plot_xhi + (unumber)(number) 0) w= (byte)*((byte[$100]) bitmap_plot_xlo + (number) 0)
Adding number conversion cast (unumber) 0 in *((byte*) bitmap_clear::bitmap#2) ← (number) 0
Adding number conversion cast (unumber) 1 in (byte~) bitmap_line_xdyi::$0 ← (byte) bitmap_line_xdyi::yd#2 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (number) 1
Adding number conversion cast (unumber) bitmap_line_xdyi::$6 in (number~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte~) bitmap_line_xdyd::$0 ← (byte) bitmap_line_xdyd::yd#2 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (number) 1
Adding number conversion cast (unumber) bitmap_line_xdyd::$6 in (number~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte~) bitmap_line_ydxi::$0 ← (byte) bitmap_line_ydxi::xd#2 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (number) 1
Adding number conversion cast (unumber) bitmap_line_ydxi::$6 in (number~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (byte~) bitmap_line_ydxd::$0 ← (byte) bitmap_line_ydxd::xd#2 >> (number) 1
Adding number conversion cast (unumber) 1 in (number~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (number) 1
Adding number conversion cast (unumber) bitmap_line_ydxd::$6 in (number~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (unumber)(number) 1
Adding number conversion cast (unumber) $20000 in (dword) PLANE_8BPP_CHUNKY ← (number) $20000
Adding number conversion cast (unumber) $30000 in (dword) PLANE_HORISONTAL ← (number) $30000
Adding number conversion cast (unumber) $32000 in (dword) PLANE_VERTICAL ← (number) $32000
Adding number conversion cast (unumber) $34000 in (dword) PLANE_HORISONTAL2 ← (number) $34000
Adding number conversion cast (unumber) $36000 in (dword) PLANE_VERTICAL2 ← (number) $36000
Adding number conversion cast (unumber) $38000 in (dword) PLANE_BLANK ← (number) $38000
Adding number conversion cast (unumber) $3a000 in (dword) PLANE_FULL ← (number) $3a000
Adding number conversion cast (unumber) $3c000 in (dword) PLANE_CHARSET8 ← (number) $3c000
Adding number conversion cast (unumber) 0 in (bool~) get_plane::$0 ← (byte) get_plane::idx#2 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) get_plane::$1 ← (byte) get_plane::idx#3 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) get_plane::$2 ← (byte) get_plane::idx#4 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) get_plane::$3 ← (byte) get_plane::idx#5 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) get_plane::$4 ← (byte) get_plane::idx#6 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) get_plane::$5 ← (byte) get_plane::idx#7 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) get_plane::$6 ← (byte) get_plane::idx#8 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) get_plane::$7 ← (byte) get_plane::idx#9 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) get_plane::$8 ← (byte) get_plane::idx#10 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) get_plane::$9 ← (byte) get_plane::idx#11 == (number) 9
Adding number conversion cast (unumber) $a in (bool~) get_plane::$10 ← (byte) get_plane::idx#12 == (number) $a
Adding number conversion cast (unumber) $b in (bool~) get_plane::$11 ← (byte) get_plane::idx#13 == (number) $b
Adding number conversion cast (unumber) $c in (bool~) get_plane::$12 ← (byte) get_plane::idx#14 == (number) $c
Adding number conversion cast (unumber) $d in (bool~) get_plane::$13 ← (byte) get_plane::idx#15 == (number) $d
Adding number conversion cast (unumber) 0 in (bool~) get_vic_screen::$0 ← (byte) get_vic_screen::idx#2 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) get_vic_screen::$1 ← (byte) get_vic_screen::idx#3 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) get_vic_screen::$2 ← (byte) get_vic_screen::idx#4 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) get_vic_screen::$3 ← (byte) get_vic_screen::idx#5 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) get_vic_screen::$4 ← (byte) get_vic_screen::idx#6 == (number) 4
Adding number conversion cast (unumber) 0 in (bool~) get_vic_charset::$0 ← (byte) get_vic_charset::idx#1 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) get_vic_charset::$1 ← (byte) get_vic_charset::idx#2 == (number) 1
Adding number conversion cast (unumber) $24 in (byte) form_fields_cnt ← (number) $24
Adding number conversion cast (unumber) 0 in (bool~) apply_preset::$0 ← (byte) apply_preset::idx#1 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) apply_preset::$1 ← (byte) apply_preset::idx#2 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) apply_preset::$2 ← (byte) apply_preset::idx#3 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) apply_preset::$3 ← (byte) apply_preset::idx#4 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) apply_preset::$4 ← (byte) apply_preset::idx#5 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) apply_preset::$5 ← (byte) apply_preset::idx#6 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) apply_preset::$6 ← (byte) apply_preset::idx#7 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) apply_preset::$7 ← (byte) apply_preset::idx#8 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) apply_preset::$8 ← (byte) apply_preset::idx#9 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) apply_preset::$9 ← (byte) apply_preset::idx#10 == (number) 9
Adding number conversion cast (unumber) $a in (bool~) apply_preset::$10 ← (byte) apply_preset::idx#11 == (number) $a
Adding number conversion cast (unumber) 0 in (byte) apply_preset::i#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) render_preset_name::$0 ← (byte) render_preset_name::idx#2 == (number) 0
Adding number conversion cast (unumber) 1 in (bool~) render_preset_name::$1 ← (byte) render_preset_name::idx#3 == (number) 1
Adding number conversion cast (unumber) 2 in (bool~) render_preset_name::$2 ← (byte) render_preset_name::idx#4 == (number) 2
Adding number conversion cast (unumber) 3 in (bool~) render_preset_name::$3 ← (byte) render_preset_name::idx#5 == (number) 3
Adding number conversion cast (unumber) 4 in (bool~) render_preset_name::$4 ← (byte) render_preset_name::idx#6 == (number) 4
Adding number conversion cast (unumber) 5 in (bool~) render_preset_name::$5 ← (byte) render_preset_name::idx#7 == (number) 5
Adding number conversion cast (unumber) 6 in (bool~) render_preset_name::$6 ← (byte) render_preset_name::idx#8 == (number) 6
Adding number conversion cast (unumber) 7 in (bool~) render_preset_name::$7 ← (byte) render_preset_name::idx#9 == (number) 7
Adding number conversion cast (unumber) 8 in (bool~) render_preset_name::$8 ← (byte) render_preset_name::idx#10 == (number) 8
Adding number conversion cast (unumber) 9 in (bool~) render_preset_name::$9 ← (byte) render_preset_name::idx#11 == (number) 9
Adding number conversion cast (unumber) $a in (bool~) render_preset_name::$10 ← (byte) render_preset_name::idx#12 == (number) $a
Adding number conversion cast (unumber) $28*2 in (byte*~) render_preset_name::$11 ← (byte*) FORM_SCREEN + (number) $28*(number) 2
Adding number conversion cast (unumber) $a in (byte*~) render_preset_name::$12 ← (byte*~) render_preset_name::$11 + (number) $a
Adding number conversion cast (unumber) 0 in (byte*~) $1 ← (byte[]) form_fields_val + (number) 0
Adding number conversion cast (unumber) 1 in (byte*~) $2 ← (byte[]) form_fields_val + (number) 1
Adding number conversion cast (unumber) 2 in (byte*~) $3 ← (byte[]) form_fields_val + (number) 2
Adding number conversion cast (unumber) 3 in (byte*~) $4 ← (byte[]) form_fields_val + (number) 3
Adding number conversion cast (unumber) 4 in (byte*~) $5 ← (byte[]) form_fields_val + (number) 4
Adding number conversion cast (unumber) 5 in (byte*~) $6 ← (byte[]) form_fields_val + (number) 5
Adding number conversion cast (unumber) 6 in (byte*~) $7 ← (byte[]) form_fields_val + (number) 6
Adding number conversion cast (unumber) 7 in (byte*~) $8 ← (byte[]) form_fields_val + (number) 7
Adding number conversion cast (unumber) 8 in (byte*~) $9 ← (byte[]) form_fields_val + (number) 8
Adding number conversion cast (unumber) 9 in (byte*~) $10 ← (byte[]) form_fields_val + (number) 9
Adding number conversion cast (unumber) $a in (byte*~) $11 ← (byte[]) form_fields_val + (number) $a
Adding number conversion cast (unumber) $b in (byte*~) $12 ← (byte[]) form_fields_val + (number) $b
Adding number conversion cast (unumber) $c in (byte*~) $13 ← (byte[]) form_fields_val + (number) $c
Adding number conversion cast (unumber) $d in (byte*~) $14 ← (byte[]) form_fields_val + (number) $d
Adding number conversion cast (unumber) $e in (byte*~) $15 ← (byte[]) form_fields_val + (number) $e
Adding number conversion cast (unumber) $f in (byte*~) $16 ← (byte[]) form_fields_val + (number) $f
Adding number conversion cast (unumber) $10 in (byte*~) $17 ← (byte[]) form_fields_val + (number) $10
Adding number conversion cast (unumber) $11 in (byte*~) $18 ← (byte[]) form_fields_val + (number) $11
Adding number conversion cast (unumber) $12 in (byte*~) $19 ← (byte[]) form_fields_val + (number) $12
Adding number conversion cast (unumber) $13 in (byte*~) $20 ← (byte[]) form_fields_val + (number) $13
Adding number conversion cast (unumber) $14 in (byte*~) $21 ← (byte[]) form_fields_val + (number) $14
Adding number conversion cast (unumber) $15 in (byte*~) $22 ← (byte[]) form_fields_val + (number) $15
Adding number conversion cast (unumber) $16 in (byte*~) $23 ← (byte[]) form_fields_val + (number) $16
Adding number conversion cast (unumber) $17 in (byte*~) $24 ← (byte[]) form_fields_val + (number) $17
Adding number conversion cast (unumber) $18 in (byte*~) $25 ← (byte[]) form_fields_val + (number) $18
Adding number conversion cast (unumber) $19 in (byte*~) $26 ← (byte[]) form_fields_val + (number) $19
Adding number conversion cast (unumber) $1a in (byte*~) $27 ← (byte[]) form_fields_val + (number) $1a
Adding number conversion cast (unumber) $1b in (byte*~) $28 ← (byte[]) form_fields_val + (number) $1b
Adding number conversion cast (unumber) $1c in (byte*~) $29 ← (byte[]) form_fields_val + (number) $1c
Adding number conversion cast (unumber) $1d in (byte*~) $30 ← (byte[]) form_fields_val + (number) $1d
Adding number conversion cast (unumber) $1e in (byte*~) $31 ← (byte[]) form_fields_val + (number) $1e
Adding number conversion cast (unumber) $1f in (byte*~) $32 ← (byte[]) form_fields_val + (number) $1f
Adding number conversion cast (unumber) $20 in (byte*~) $33 ← (byte[]) form_fields_val + (number) $20
Adding number conversion cast (unumber) $21 in (byte*~) $34 ← (byte[]) form_fields_val + (number) $21
Adding number conversion cast (unumber) $22 in (byte*~) $35 ← (byte[]) form_fields_val + (number) $22
Adding number conversion cast (unumber) $23 in (byte*~) $36 ← (byte[]) form_fields_val + (number) $23
Adding number conversion cast (unumber) 0 in (byte) gfx_mode::dtv_control#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$0 ← *((byte*) form_ctrl_line) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$2 ← *((byte*) form_ctrl_borof) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$4 ← *((byte*) form_ctrl_hicol) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$6 ← *((byte*) form_ctrl_overs) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$8 ← *((byte*) form_ctrl_colof) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$10 ← *((byte*) form_ctrl_chunk) != (number) 0
Adding number conversion cast (unumber) 3 in (number~) gfx_mode::$13 ← (byte~) gfx_mode::$12 | (number) 3
Adding number conversion cast (unumber) gfx_mode::$13 in (number~) gfx_mode::$13 ← (byte~) gfx_mode::$12 | (unumber)(number) 3
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$14 ← *((byte*) form_ctrl_ecm) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$16 ← *((byte*) form_ctrl_bmm) != (number) 0
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$18 ← *((byte*) form_ctrl_mcm) != (number) 0
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$20 ← *((byte*) form_a_start_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$20 in (number~) gfx_mode::$20 ← *((byte*) form_a_start_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$21 in (number~) gfx_mode::$21 ← (unumber~) gfx_mode::$20 | *((byte*) form_a_start_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$30 ← *((byte*) form_a_step_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$30 in (number~) gfx_mode::$30 ← *((byte*) form_a_step_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$31 in (number~) gfx_mode::$31 ← (unumber~) gfx_mode::$30 | *((byte*) form_a_step_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$32 ← *((byte*) form_a_mod_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$32 in (number~) gfx_mode::$32 ← *((byte*) form_a_mod_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$33 in (number~) gfx_mode::$33 ← (unumber~) gfx_mode::$32 | *((byte*) form_a_mod_lo)
Adding number conversion cast (unumber) 0 in *((byte*) DTV_PLANEA_MODULO_HI) ← (number) 0
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$34 ← *((byte*) form_b_start_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$34 in (number~) gfx_mode::$34 ← *((byte*) form_b_start_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$35 in (number~) gfx_mode::$35 ← (unumber~) gfx_mode::$34 | *((byte*) form_b_start_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$44 ← *((byte*) form_b_step_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$44 in (number~) gfx_mode::$44 ← *((byte*) form_b_step_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$45 in (number~) gfx_mode::$45 ← (unumber~) gfx_mode::$44 | *((byte*) form_b_step_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$46 ← *((byte*) form_b_mod_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$46 in (number~) gfx_mode::$46 ← *((byte*) form_b_mod_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$47 in (number~) gfx_mode::$47 ← (unumber~) gfx_mode::$46 | *((byte*) form_b_mod_lo)
Adding number conversion cast (unumber) 0 in *((byte*) DTV_PLANEB_MODULO_HI) ← (number) 0
Adding number conversion cast (unumber) 3 in *((byte*) CIA2_PORT_A_DDR) ← (number) 3
Adding number conversion cast (unumber) $4000 in (number~) gfx_mode::$49 ← (word~) gfx_mode::$48 / (number) $4000
Adding number conversion cast (unumber) gfx_mode::$49 in (number~) gfx_mode::$49 ← (word~) gfx_mode::$48 / (unumber)(number) $4000
Adding number conversion cast (unumber) 3 in (number~) gfx_mode::$51 ← (number) 3 ^ (byte~) gfx_mode::$50
Adding number conversion cast (unumber) gfx_mode::$51 in (number~) gfx_mode::$51 ← (unumber)(number) 3 ^ (byte~) gfx_mode::$50
Adding number conversion cast (unumber) $3fff in (number~) gfx_mode::$54 ← (word~) gfx_mode::$53 & (number) $3fff
Adding number conversion cast (unumber) gfx_mode::$54 in (number~) gfx_mode::$54 ← (word~) gfx_mode::$53 & (unumber)(number) $3fff
Adding number conversion cast (unumber) $40 in (number~) gfx_mode::$55 ← (unumber~) gfx_mode::$54 / (number) $40
Adding number conversion cast (unumber) gfx_mode::$55 in (number~) gfx_mode::$55 ← (unumber~) gfx_mode::$54 / (unumber)(number) $40
Adding number conversion cast (unumber) $3fff in (number~) gfx_mode::$59 ← (word~) gfx_mode::$58 & (number) $3fff
Adding number conversion cast (unumber) gfx_mode::$59 in (number~) gfx_mode::$59 ← (word~) gfx_mode::$58 & (unumber)(number) $3fff
Adding number conversion cast (unumber) gfx_mode::$60 in (number~) gfx_mode::$60 ← > (unumber~) gfx_mode::$59
Adding number conversion cast (unumber) 4 in (number~) gfx_mode::$61 ← (unumber~) gfx_mode::$60 / (number) 4
Adding number conversion cast (unumber) gfx_mode::$61 in (number~) gfx_mode::$61 ← (unumber~) gfx_mode::$60 / (unumber)(number) 4
Adding number conversion cast (unumber) gfx_mode::$62 in (number~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (unumber~) gfx_mode::$61
Adding number conversion cast (unumber) 0 in *((byte*) BORDERCOL) ← (number) 0
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$64 ← *((byte*) form_vic_bg0_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$64 in (number~) gfx_mode::$64 ← *((byte*) form_vic_bg0_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$65 in (number~) gfx_mode::$65 ← (unumber~) gfx_mode::$64 | *((byte*) form_vic_bg0_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$66 ← *((byte*) form_vic_bg1_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$66 in (number~) gfx_mode::$66 ← *((byte*) form_vic_bg1_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$67 in (number~) gfx_mode::$67 ← (unumber~) gfx_mode::$66 | *((byte*) form_vic_bg1_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$68 ← *((byte*) form_vic_bg2_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$68 in (number~) gfx_mode::$68 ← *((byte*) form_vic_bg2_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$69 in (number~) gfx_mode::$69 ← (unumber~) gfx_mode::$68 | *((byte*) form_vic_bg2_lo)
Adding number conversion cast (unumber) $10 in (number~) gfx_mode::$70 ← *((byte*) form_vic_bg3_hi) * (number) $10
Adding number conversion cast (unumber) gfx_mode::$70 in (number~) gfx_mode::$70 ← *((byte*) form_vic_bg3_hi) * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_mode::$71 in (number~) gfx_mode::$71 ← (unumber~) gfx_mode::$70 | *((byte*) form_vic_bg3_lo)
Adding number conversion cast (unumber) 0 in (bool~) gfx_mode::$72 ← *((byte*) form_dtv_palet) == (number) 0
Adding number conversion cast (unumber) $ff in (bool~) gfx_mode::$86 ← *((byte*) RASTER) != (number) $ff
Adding number conversion cast (unumber) $32 in *((byte*) PROCPORT) ← (number) $32
Adding number conversion cast (unumber) $37 in *((byte*) PROCPORT) ← (number) $37
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (number) $f
Adding number conversion cast (unumber) gfx_init_screen0::$0 in (number~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (unumber)(number) $f
Adding number conversion cast (unumber) $10 in (number~) gfx_init_screen0::$1 ← (unumber~) gfx_init_screen0::$0 * (number) $10
Adding number conversion cast (unumber) gfx_init_screen0::$1 in (number~) gfx_init_screen0::$1 ← (unumber~) gfx_init_screen0::$0 * (unumber)(number) $10
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (number) $f
Adding number conversion cast (unumber) gfx_init_screen0::$2 in (number~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (unumber)(number) $f
Adding number conversion cast (unumber) gfx_init_screen0::$3 in (number~) gfx_init_screen0::$3 ← (unumber~) gfx_init_screen0::$1 | (unumber~) gfx_init_screen0::$2
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (number) $f
Adding number conversion cast (unumber) gfx_init_screen1::$1 in (number~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (unumber)(number) $f
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen2::$1 ← (byte~) gfx_init_screen2::$0 & (number) $f
Adding number conversion cast (unumber) gfx_init_screen2::$1 in (number~) gfx_init_screen2::$1 ← (byte~) gfx_init_screen2::$0 & (unumber)(number) $f
Adding number conversion cast (unumber) $f in (number~) gfx_init_screen2::$2 ← (number) $f - (byte) gfx_init_screen2::col#0
Adding number conversion cast (unumber) gfx_init_screen2::$2 in (number~) gfx_init_screen2::$2 ← (unumber)(number) $f - (byte) gfx_init_screen2::col#0
Adding number conversion cast (unumber) $10 in (number~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (number) $10
Adding number conversion cast (unumber) gfx_init_screen2::$3 in (number~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (unumber)(number) $10
Adding number conversion cast (unumber) gfx_init_screen2::$4 in (number~) gfx_init_screen2::$4 ← (unumber~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
Adding number conversion cast (unumber) 3 in (number~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (number) 3
Adding number conversion cast (unumber) gfx_init_screen3::$0 in (number~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (unumber)(number) 3
Adding number conversion cast (unumber) $10 in (number~) gfx_init_screen3::$1 ← (unumber~) gfx_init_screen3::$0 * (number) $10
Adding number conversion cast (unumber) gfx_init_screen3::$1 in (number~) gfx_init_screen3::$1 ← (unumber~) gfx_init_screen3::$0 * (unumber)(number) $10
Adding number conversion cast (unumber) 3 in (number~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#2 & (number) 3
Adding number conversion cast (unumber) gfx_init_screen3::$2 in (number~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#2 & (unumber)(number) 3
Adding number conversion cast (unumber) gfx_init_screen3::$3 in (number~) gfx_init_screen3::$3 ← (unumber~) gfx_init_screen3::$1 | (unumber~) gfx_init_screen3::$2
Adding number conversion cast (unumber) 0 in *((byte*) gfx_init_screen4::ch#2) ← (number) 0
Adding number conversion cast (unumber) 9 in (byte) gfx_init_vic_bitmap::lines_cnt ← (number) 9
Adding number conversion cast (unumber) 0 in (byte) gfx_init_vic_bitmap::l#0 ← (number) 0
Adding number conversion cast (unumber) 1 in (number~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#3 + (number) 1
Adding number conversion cast (unumber) gfx_init_vic_bitmap::$3 in (number~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#3 + (unumber)(number) 1
Adding number conversion cast (unumber) 1 in (number~) gfx_init_vic_bitmap::$4 ← (byte) gfx_init_vic_bitmap::l#3 + (number) 1
Adding number conversion cast (unumber) gfx_init_vic_bitmap::$4 in (number~) gfx_init_vic_bitmap::$4 ← (byte) gfx_init_vic_bitmap::l#3 + (unumber)(number) 1
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_8bppchunky::$0 ← (dword) PLANE_8BPP_CHUNKY / (number) $4000
Adding number conversion cast (unumber) gfx_init_plane_8bppchunky::$0 in (number~) gfx_init_plane_8bppchunky::$0 ← (dword) PLANE_8BPP_CHUNKY / (unumber)(number) $4000
Adding number conversion cast (unumber) $8000 in (bool~) gfx_init_plane_8bppchunky::$5 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 == (number) $8000
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_horisontal::$0 ← (dword) PLANE_HORISONTAL / (number) $4000
Adding number conversion cast (unumber) gfx_init_plane_horisontal::$0 in (number~) gfx_init_plane_horisontal::$0 ← (dword) PLANE_HORISONTAL / (unumber)(number) $4000
Adding number conversion cast (unumber) $3fff in (number~) gfx_init_plane_horisontal::$3 ← (dword) PLANE_HORISONTAL & (number) $3fff
Adding number conversion cast (unumber) gfx_init_plane_horisontal::$3 in (number~) gfx_init_plane_horisontal::$3 ← (dword) PLANE_HORISONTAL & (unumber)(number) $3fff
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_horisontal::$4 ← (number) $4000 + (unumber~) gfx_init_plane_horisontal::$3
Adding number conversion cast (unumber) gfx_init_plane_horisontal::$4 in (number~) gfx_init_plane_horisontal::$4 ← (unumber)(number) $4000 + (unumber~) gfx_init_plane_horisontal::$3
Adding number conversion cast (unumber) 4 in (number~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#2 & (number) 4
Adding number conversion cast (unumber) gfx_init_plane_horisontal::$7 in (number~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#2 & (unumber)(number) 4
Adding number conversion cast (unumber) 0 in (bool~) gfx_init_plane_horisontal::$8 ← (unumber~) gfx_init_plane_horisontal::$7 == (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (number) 0
Adding number conversion cast (unumber) $ff in *((byte*) gfx_init_plane_horisontal::gfxa#4) ← (number) $ff
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_horisontal2::$0 ← (dword) PLANE_HORISONTAL2 / (number) $4000
Adding number conversion cast (unumber) gfx_init_plane_horisontal2::$0 in (number~) gfx_init_plane_horisontal2::$0 ← (dword) PLANE_HORISONTAL2 / (unumber)(number) $4000
Adding number conversion cast (unumber) $3fff in (number~) gfx_init_plane_horisontal2::$3 ← (dword) PLANE_HORISONTAL2 & (number) $3fff
Adding number conversion cast (unumber) gfx_init_plane_horisontal2::$3 in (number~) gfx_init_plane_horisontal2::$3 ← (dword) PLANE_HORISONTAL2 & (unumber)(number) $3fff
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_horisontal2::$4 ← (number) $4000 + (unumber~) gfx_init_plane_horisontal2::$3
Adding number conversion cast (unumber) gfx_init_plane_horisontal2::$4 in (number~) gfx_init_plane_horisontal2::$4 ← (unumber)(number) $4000 + (unumber~) gfx_init_plane_horisontal2::$3
Adding number conversion cast (unumber) 2 in (number~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#2 / (number) 2
Adding number conversion cast (unumber) gfx_init_plane_horisontal2::$7 in (number~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#2 / (unumber)(number) 2
Adding number conversion cast (unumber) 3 in (number~) gfx_init_plane_horisontal2::$8 ← (unumber~) gfx_init_plane_horisontal2::$7 & (number) 3
Adding number conversion cast (unumber) gfx_init_plane_horisontal2::$8 in (number~) gfx_init_plane_horisontal2::$8 ← (unumber~) gfx_init_plane_horisontal2::$7 & (unumber)(number) 3
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_vertical::$0 ← (dword) PLANE_VERTICAL / (number) $4000
Adding number conversion cast (unumber) gfx_init_plane_vertical::$0 in (number~) gfx_init_plane_vertical::$0 ← (dword) PLANE_VERTICAL / (unumber)(number) $4000
Adding number conversion cast (unumber) $3fff in (number~) gfx_init_plane_vertical::$3 ← (dword) PLANE_VERTICAL & (number) $3fff
Adding number conversion cast (unumber) gfx_init_plane_vertical::$3 in (number~) gfx_init_plane_vertical::$3 ← (dword) PLANE_VERTICAL & (unumber)(number) $3fff
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_vertical::$4 ← (number) $4000 + (unumber~) gfx_init_plane_vertical::$3
Adding number conversion cast (unumber) gfx_init_plane_vertical::$4 in (number~) gfx_init_plane_vertical::$4 ← (unumber)(number) $4000 + (unumber~) gfx_init_plane_vertical::$3
Adding number conversion cast (unumber) $f in *((byte*) gfx_init_plane_vertical::gfxb#2) ← (number) $f
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_charset8::$0 ← (dword) PLANE_CHARSET8 / (number) $4000
Adding number conversion cast (unumber) gfx_init_plane_charset8::$0 in (number~) gfx_init_plane_charset8::$0 ← (dword) PLANE_CHARSET8 / (unumber)(number) $4000
Adding number conversion cast (unumber) $3fff in (number~) gfx_init_plane_charset8::$3 ← (dword) PLANE_CHARSET8 & (number) $3fff
Adding number conversion cast (unumber) gfx_init_plane_charset8::$3 in (number~) gfx_init_plane_charset8::$3 ← (dword) PLANE_CHARSET8 & (unumber)(number) $3fff
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_charset8::$4 ← (number) $4000 + (unumber~) gfx_init_plane_charset8::$3
Adding number conversion cast (unumber) gfx_init_plane_charset8::$4 in (number~) gfx_init_plane_charset8::$4 ← (unumber)(number) $4000 + (unumber~) gfx_init_plane_charset8::$3
Adding number conversion cast (unumber) 0 in (byte) gfx_init_plane_charset8::col#0 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) gfx_init_plane_charset8::c#0 ← (number) 0
Adding number conversion cast (unumber) $80 in (number~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (number) $80
Adding number conversion cast (unumber) gfx_init_plane_charset8::$7 in (number~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (unumber)(number) $80
Adding number conversion cast (unumber) 0 in (bool~) gfx_init_plane_charset8::$8 ← (unumber~) gfx_init_plane_charset8::$7 != (number) 0
Adding number conversion cast (unumber) 2 in (number~) gfx_init_plane_charset8::$10 ← (byte) gfx_init_plane_charset8::bits#3 * (number) 2
Adding number conversion cast (unumber) gfx_init_plane_charset8::$10 in (number~) gfx_init_plane_charset8::$10 ← (byte) gfx_init_plane_charset8::bits#3 * (unumber)(number) 2
Adding number conversion cast (unumber) $1b in (byte) gfx_init_plane_fill::fill#0 ← (number) $1b
Adding number conversion cast (unumber) 0 in (byte) gfx_init_plane_fill::fill#1 ← (number) 0
Adding number conversion cast (unumber) $ff in (byte) gfx_init_plane_fill::fill#2 ← (number) $ff
Adding number conversion cast (unumber) 4 in (number~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (number) 4
Adding number conversion cast (unumber) gfx_init_plane_fill::$0 in (number~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (unumber)(number) 4
Adding number conversion cast (unumber) gfx_init_plane_fill::$1 in (number~) gfx_init_plane_fill::$1 ← > (unumber~) gfx_init_plane_fill::$0
Adding number conversion cast (unumber) gfx_init_plane_fill::$2 in (number~) gfx_init_plane_fill::$2 ← < (unumber~) gfx_init_plane_fill::$1
Adding number conversion cast (unumber) $3fff in (number~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (number) $3fff
Adding number conversion cast (unumber) gfx_init_plane_fill::$5 in (number~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (unumber)(number) $3fff
Adding number conversion cast (unumber) $4000 in (number~) gfx_init_plane_fill::$6 ← (number) $4000 + (unumber~) gfx_init_plane_fill::$5
Adding number conversion cast (unumber) gfx_init_plane_fill::$6 in (number~) gfx_init_plane_fill::$6 ← (unumber)(number) $4000 + (unumber~) gfx_init_plane_fill::$5
Adding number conversion cast (unumber) $10000 in (number~) form_mode::$10 ← (dword~) form_mode::$9 / (number) $10000
Adding number conversion cast (unumber) form_mode::$10 in (number~) form_mode::$10 ← (dword~) form_mode::$9 / (unumber)(number) $10000
Adding number conversion cast (unumber) $400 in (number~) form_mode::$12 ← (dword) DTV_COLOR_BANK_DEFAULT / (number) $400
Adding number conversion cast (unumber) form_mode::$12 in (number~) form_mode::$12 ← (dword) DTV_COLOR_BANK_DEFAULT / (unumber)(number) $400
Adding number conversion cast (unumber) $400 in (number~) form_mode::$15 ← (dword) DTV_COLOR_BANK_DEFAULT / (number) $400
Adding number conversion cast (unumber) form_mode::$15 in (number~) form_mode::$15 ← (dword) DTV_COLOR_BANK_DEFAULT / (unumber)(number) $400
Adding number conversion cast (unumber) 3 in *((byte*) CIA2_PORT_A_DDR) ← (number) 3
Adding number conversion cast (unumber) $4000 in (number~) form_mode::$19 ← (word~) form_mode::$18 / (number) $4000
Adding number conversion cast (unumber) form_mode::$19 in (number~) form_mode::$19 ← (word~) form_mode::$18 / (unumber)(number) $4000
Adding number conversion cast (unumber) 3 in (number~) form_mode::$21 ← (number) 3 ^ (byte~) form_mode::$20
Adding number conversion cast (unumber) form_mode::$21 in (number~) form_mode::$21 ← (unumber)(number) 3 ^ (byte~) form_mode::$20
Adding number conversion cast (unumber) 0 in *((byte*) DTV_CONTROL) ← (number) 0
Adding number conversion cast (unumber) 3 in (number~) form_mode::$23 ← (byte~) form_mode::$22 | (number) 3
Adding number conversion cast (unumber) form_mode::$23 in (number~) form_mode::$23 ← (byte~) form_mode::$22 | (unumber)(number) 3
Adding number conversion cast (unumber) $3fff in (number~) form_mode::$25 ← (word~) form_mode::$24 & (number) $3fff
Adding number conversion cast (unumber) form_mode::$25 in (number~) form_mode::$25 ← (word~) form_mode::$24 & (unumber)(number) $3fff
Adding number conversion cast (unumber) $40 in (number~) form_mode::$26 ← (unumber~) form_mode::$25 / (number) $40
Adding number conversion cast (unumber) form_mode::$26 in (number~) form_mode::$26 ← (unumber~) form_mode::$25 / (unumber)(number) $40
Adding number conversion cast (unumber) $3fff in (number~) form_mode::$28 ← (word~) form_mode::$27 & (number) $3fff
Adding number conversion cast (unumber) form_mode::$28 in (number~) form_mode::$28 ← (word~) form_mode::$27 & (unumber)(number) $3fff
Adding number conversion cast (unumber) $400 in (number~) form_mode::$29 ← (unumber~) form_mode::$28 / (number) $400
Adding number conversion cast (unumber) form_mode::$29 in (number~) form_mode::$29 ← (unumber~) form_mode::$28 / (unumber)(number) $400
Adding number conversion cast (unumber) form_mode::$30 in (number~) form_mode::$30 ← (unumber~) form_mode::$26 | (unumber~) form_mode::$29
Adding number conversion cast (unumber) 0 in *((byte*) DTV_PLANEA_START_HI) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) BGCOL) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*) BORDERCOL) ← (number) 0
Adding number conversion cast (unumber) $ff in (bool~) form_mode::$35 ← *((byte*) RASTER) != (number) $ff
Adding number conversion cast (unumber) 0 in (bool~) form_mode::$37 ← (byte~) form_mode::$36 != (number) 0
Adding number conversion cast (unumber) 0 in (byte) form_field_idx#4 ← (number) 0
Adding number conversion cast (snumber) $28 in (signed byte) FORM_CURSOR_BLINK ← (number) $28
Adding number conversion cast (snumber) 2 in (number~) $37 ← (signed byte) FORM_CURSOR_BLINK / (number) 2
Adding number conversion cast (snumber) $37 in (number~) $37 ← (signed byte) FORM_CURSOR_BLINK / (snumber)(number) 2
Adding number conversion cast (unumber) $28 in (byte*~) form_set_screen::$2 ← (byte*) form_set_screen::line#2 + (number) $28
Adding number conversion cast (unumber) 0 in (byte) form_render_values::idx#0 ← (number) 0
Adding number conversion cast (snumber) 0 in (bool~) form_control::$1 ← (signed byte) form_cursor_count#5 < (number) 0
Adding number conversion cast (snumber) 2 in (number~) form_control::$3 ← (signed byte) FORM_CURSOR_BLINK / (number) 2
Adding number conversion cast (snumber) form_control::$3 in (number~) form_control::$3 ← (signed byte) FORM_CURSOR_BLINK / (snumber)(number) 2
Adding number conversion cast (unumber) $80 in (number~) form_control::$14 ← *((byte*) form_control::field#1) | (number) $80
Adding number conversion cast (unumber) form_control::$14 in (number~) form_control::$14 ← *((byte*) form_control::field#1) | (unumber)(number) $80
Adding number conversion cast (unumber) $7f in (number~) form_control::$13 ← *((byte*) form_control::field#2) & (number) $7f
Adding number conversion cast (unumber) form_control::$13 in (number~) form_control::$13 ← *((byte*) form_control::field#2) & (unumber)(number) $7f
Adding number conversion cast (unumber) $7f in (number~) form_control::$15 ← *((byte*) form_control::field#3) & (number) $7f
Adding number conversion cast (unumber) form_control::$15 in (number~) form_control::$15 ← *((byte*) form_control::field#3) & (unumber)(number) $7f
Adding number conversion cast (unumber) 0 in (bool~) form_control::$17 ← (byte~) form_control::$16 == (number) 0
Adding number conversion cast (unumber) $ff in (bool~) form_control::$18 ← (byte) form_field_idx#6 == (number) $ff
Adding number conversion cast (unumber) 1 in (number~) form_control::$20 ← (byte) form_fields_cnt - (number) 1
Adding number conversion cast (unumber) form_control::$20 in (number~) form_control::$20 ← (byte) form_fields_cnt - (unumber)(number) 1
Adding number conversion cast (snumber) 2 in (number~) form_control::$23 ← (signed byte) FORM_CURSOR_BLINK / (number) 2
Adding number conversion cast (snumber) form_control::$23 in (number~) form_control::$23 ← (signed byte) FORM_CURSOR_BLINK / (snumber)(number) 2
Adding number conversion cast (unumber) 0 in (byte) form_control::return#1 ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) form_field_idx#8 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) form_control::$25 ← (byte~) form_control::$24 == (number) 0
Adding number conversion cast (unumber) $ff in (bool~) form_control::$26 ← *((byte[]) form_fields_val + (byte) form_field_idx#20) == (number) $ff
Adding number conversion cast (unumber) 0 in (byte) form_control::return#3 ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte[]) form_fields_val + (byte) form_field_idx#23) ← (number) 0
Adding number conversion cast (unumber) 0 in (byte) form_control::return#4 ← (number) 0
Adding number conversion cast (unumber) $ff in (byte) form_control::return#5 ← (number) $ff
Successful SSA optimization PassNAddNumberTypeConversions
Added casts to value list in (byte[$10]) DTV_PALETTE_DEFAULT ← (byte[$10]){ (byte)(number) 0, (byte)(number) $f, (byte)(number) $36, (byte)(number) $be, (byte)(number) $58, (byte)(number) $db, (byte)(number) $86, (byte)(number) $ff, (byte)(number) $29, (byte)(number) $26, (byte)(number) $3b, (byte)(number) 5, (byte)(number) 7, (byte)(number) $df, (byte)(number) $9a, (byte)(number) $a }
Added casts to value list in (byte[8]) keyboard_matrix_row_bitmask ← (byte[8]){ (byte)(number) $fe, (byte)(number) $fd, (byte)(number) $fb, (byte)(number) $f7, (byte)(number) $ef, (byte)(number) $df, (byte)(number) $bf, (byte)(number) $7f }
Added casts to value list in (byte[8]) keyboard_matrix_col_bitmask ← (byte[8]){ (byte)(number) 1, (byte)(number) 2, (byte)(number) 4, (byte)(number) 8, (byte)(number) $10, (byte)(number) $20, (byte)(number) $40, (byte)(number) $80 }
Added casts to value list in (byte[]) form_fields_x ← (byte[]){ (byte)(number) 8, (byte)(number) $c, (byte)(number) $c, (byte)(number) $c, (byte)(number) $c, (byte)(number) $c, (byte)(number) $c, (byte)(number) $c, (byte)(number) $c, (byte)(number) $c, (byte)(number) $19, (byte)(number) $18, (byte)(number) $19, (byte)(number) $18, (byte)(number) $19, (byte)(number) $18, (byte)(number) $19, (byte)(number) $19, (byte)(number) $18, (byte)(number) $19, (byte)(number) $18, (byte)(number) $19, (byte)(number) $18, (byte)(number) $19, (byte)(number) $25, (byte)(number) $25, (byte)(number) $25, (byte)(number) $25, (byte)(number) $24, (byte)(number) $25, (byte)(number) $24, (byte)(number) $25, (byte)(number) $24, (byte)(number) $25, (byte)(number) $24, (byte)(number) $25 }
Added casts to value list in (byte[]) form_fields_y ← (byte[]){ (byte)(number) 2, (byte)(number) 5, (byte)(number) 6, (byte)(number) 7, (byte)(number) 8, (byte)(number) 9, (byte)(number) $a, (byte)(number) $b, (byte)(number) $c, (byte)(number) $d, (byte)(number) 5, (byte)(number) 6, (byte)(number) 6, (byte)(number) 7, (byte)(number) 7, (byte)(number) 8, (byte)(number) 8, (byte)(number) $b, (byte)(number) $c, (byte)(number) $c, (byte)(number) $d, (byte)(number) $d, (byte)(number) $e, (byte)(number) $e, (byte)(number) 5, (byte)(number) 6, (byte)(number) 7, (byte)(number) $a, (byte)(number) $b, (byte)(number) $b, (byte)(number) $c, (byte)(number) $c, (byte)(number) $d, (byte)(number) $d, (byte)(number) $e, (byte)(number) $e }
Added casts to value list in (byte[]) form_fields_max ← (byte[]){ (byte)(number) $a, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) $d, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $d, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) 3, (byte)(number) 1, (byte)(number) 4, (byte)(number) 1, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f, (byte)(number) $f }
Added casts to value list in (byte[]) form_fields_val ← (byte[]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) preset_stdchar ← (byte[]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) preset_ecmchar ← (byte[]){ (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 2, (byte)(number) 0, (byte)(number) 5, (byte)(number) 0, (byte)(number) 6 }
Added casts to value list in (byte[]) preset_stdbm ← (byte[]){ (byte)(number) 2, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 2, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) preset_mcbm ← (byte[]){ (byte)(number) 3, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 2, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 9, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) preset_hi_stdchar ← (byte[]){ (byte)(number) 4, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) preset_hi_ecmchar ← (byte[]){ (byte)(number) 5, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 3, (byte)(number) 4, (byte)(number) 6, (byte)(number) 8, (byte)(number) 9, (byte)(number) $c, (byte)(number) $c }
Added casts to value list in (byte[]) preset_twoplane ← (byte[]){ (byte)(number) 6, (byte)(number) 1, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 7, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 8, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 7, (byte)(number) 0, (byte)(number) $d, (byte)(number) 4, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) preset_chunky ← (byte[]){ (byte)(number) 7, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 6, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 8, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) preset_sixsfred ← (byte[]){ (byte)(number) 8, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 9, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) $a, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) preset_sixsfred2 ← (byte[]){ (byte)(number) 9, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 9, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) $a, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) preset_8bpppixelcell ← (byte[]){ (byte)(number) $a, (byte)(number) 0, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 1, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) $b, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 1, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0, (byte)(number) 0 }
Added casts to value list in (byte[]) gfx_init_vic_bitmap::lines_x ← (byte[]){ (byte)(number) 0, (byte)(number) $ff, (byte)(number) $ff, (byte)(number) 0, (byte)(number) 0, (byte)(number) $80, (byte)(number) $ff, (byte)(number) $80, (byte)(number) 0, (byte)(number) $80 }
Added casts to value list in (byte[]) gfx_init_vic_bitmap::lines_y ← (byte[]){ (byte)(number) 0, (byte)(number) 0, (byte)(number) $c7, (byte)(number) $c7, (byte)(number) 0, (byte)(number) 0, (byte)(number) $64, (byte)(number) $c7, (byte)(number) $64, (byte)(number) 0 }
Added casts to value list in (byte[]) gfx_init_plane_horisontal2::row_bitmask ← (byte[]){ (byte)(number) 0, (byte)(number) $55, (byte)(number) $aa, (byte)(number) $ff }
Successful SSA optimization PassNAddInitializerValueListTypeCasts
Inlining cast (byte*) PROCPORT_DDR ← (byte*)(number) 0
Inlining cast (byte) PROCPORT_DDR_MEMORY_MASK ← (unumber)(number) 7
Inlining cast (byte*) PROCPORT ← (byte*)(number) 1
Inlining cast (byte) PROCPORT_RAM_IO ← (unumber)(number) 5
Inlining cast (byte) PROCPORT_RAM_CHARROM ← (unumber)(number) 1
Inlining cast (byte*) CHARGEN ← (byte*)(number) $d000
Inlining cast (byte*) RASTER ← (byte*)(number) $d012
Inlining cast (byte*) BORDERCOL ← (byte*)(number) $d020
Inlining cast (byte*) BGCOL ← (byte*)(number) $d021
Inlining cast (byte*) BGCOL1 ← (byte*)(number) $d021
Inlining cast (byte*) BGCOL2 ← (byte*)(number) $d022
Inlining cast (byte*) BGCOL3 ← (byte*)(number) $d023
Inlining cast (byte*) BGCOL4 ← (byte*)(number) $d024
Inlining cast (byte*) VIC_CONTROL ← (byte*)(number) $d011
Inlining cast (byte) VIC_ECM ← (unumber)(number) $40
Inlining cast (byte) VIC_BMM ← (unumber)(number) $20
Inlining cast (byte) VIC_DEN ← (unumber)(number) $10
Inlining cast (byte) VIC_RSEL ← (unumber)(number) 8
Inlining cast (byte*) VIC_CONTROL2 ← (byte*)(number) $d016
Inlining cast (byte) VIC_MCM ← (unumber)(number) $10
Inlining cast (byte) VIC_CSEL ← (unumber)(number) 8
Inlining cast (byte*) VIC_MEMORY ← (byte*)(number) $d018
Inlining cast (byte*) COLS ← (byte*)(number) $d800
Inlining cast (byte*) CIA1_PORT_A ← (byte*)(number) $dc00
Inlining cast (byte*) CIA1_PORT_B ← (byte*)(number) $dc01
Inlining cast (byte*) CIA1_PORT_A_DDR ← (byte*)(number) $dc02
Inlining cast (byte*) CIA1_PORT_B_DDR ← (byte*)(number) $dc03
Inlining cast (byte*) CIA2_PORT_A ← (byte*)(number) $dd00
Inlining cast (byte*) CIA2_PORT_A_DDR ← (byte*)(number) $dd02
Inlining cast (byte*) DTV_FEATURE ← (byte*)(number) $d03f
Inlining cast (byte) DTV_FEATURE_ENABLE ← (unumber)(number) 1
Inlining cast (byte*) DTV_CONTROL ← (byte*)(number) $d03c
Inlining cast (byte) DTV_LINEAR ← (unumber)(number) 1
Inlining cast (byte) DTV_BORDER_OFF ← (unumber)(number) 2
Inlining cast (byte) DTV_HIGHCOLOR ← (unumber)(number) 4
Inlining cast (byte) DTV_OVERSCAN ← (unumber)(number) 8
Inlining cast (byte) DTV_COLORRAM_OFF ← (unumber)(number) $10
Inlining cast (byte) DTV_CHUNKY ← (unumber)(number) $40
Inlining cast (byte*) DTV_PALETTE ← (byte*)(number) $d200
Inlining cast (byte*) DTV_PLANEA_START_LO ← (byte*)(number) $d03a
Inlining cast (byte*) DTV_PLANEA_START_MI ← (byte*)(number) $d03b
Inlining cast (byte*) DTV_PLANEA_START_HI ← (byte*)(number) $d045
Inlining cast (byte*) DTV_PLANEA_STEP ← (byte*)(number) $d046
Inlining cast (byte*) DTV_PLANEA_MODULO_LO ← (byte*)(number) $d038
Inlining cast (byte*) DTV_PLANEA_MODULO_HI ← (byte*)(number) $d039
Inlining cast (byte*) DTV_PLANEB_START_LO ← (byte*)(number) $d049
Inlining cast (byte*) DTV_PLANEB_START_MI ← (byte*)(number) $d04a
Inlining cast (byte*) DTV_PLANEB_START_HI ← (byte*)(number) $d04b
Inlining cast (byte*) DTV_PLANEB_STEP ← (byte*)(number) $d04c
Inlining cast (byte*) DTV_PLANEB_MODULO_LO ← (byte*)(number) $d047
Inlining cast (byte*) DTV_PLANEB_MODULO_HI ← (byte*)(number) $d048
Inlining cast (byte*) DTV_COLOR_BANK_LO ← (byte*)(number) $d036
Inlining cast (byte*) DTV_COLOR_BANK_HI ← (byte*)(number) $d037
Inlining cast (dword) DTV_COLOR_BANK_DEFAULT ← (unumber)(number) $1d800
Inlining cast (byte*) DTV_GRAPHICS_VIC_BANK ← (byte*)(number) $d03d
Inlining cast (byte*) dtvSetCpuBankSegment1::cpuBank ← (byte*)(number) $ff
Inlining cast (byte*~) memset::$2 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) memset::dst#0 ← (byte*)(void*) memset::str#2
Inlining cast (byte*) print_screen#0 ← (byte*)(number) $400
Inlining cast (word) memset::num#0 ← (unumber)(number) $3e8
Inlining cast (byte) KEY_CRSR_RIGHT ← (unumber)(number) 2
Inlining cast (byte) KEY_CRSR_DOWN ← (unumber)(number) 7
Inlining cast (byte) KEY_LSHIFT ← (unumber)(number) $f
Inlining cast (byte) KEY_RSHIFT ← (unumber)(number) $34
Inlining cast (byte) KEY_CTRL ← (unumber)(number) $3a
Inlining cast (byte) KEY_SPACE ← (unumber)(number) $3c
Inlining cast (byte) KEY_COMMODORE ← (unumber)(number) $3d
Inlining cast *((byte*) CIA1_PORT_A_DDR) ← (unumber)(number) $ff
Inlining cast *((byte*) CIA1_PORT_B_DDR) ← (unumber)(number) 0
Inlining cast (byte) keyboard_events_size#0 ← (unumber)(number) 0
Inlining cast (byte) keyboard_modifiers#0 ← (unumber)(number) 0
Inlining cast (byte) KEY_MODIFIER_LSHIFT ← (unumber)(number) 1
Inlining cast (byte) KEY_MODIFIER_RSHIFT ← (unumber)(number) 2
Inlining cast (byte) KEY_MODIFIER_CTRL ← (unumber)(number) 4
Inlining cast (byte) KEY_MODIFIER_COMMODORE ← (unumber)(number) 8
Inlining cast (byte) keyboard_event_scan::keycode#0 ← (unumber)(number) 0
Inlining cast (byte) keyboard_modifiers#1 ← (unumber)(number) 0
Inlining cast (byte) keyboard_event_get::return#0 ← (unumber)(number) $ff
Inlining cast (byte) bitmap_init::bits#0 ← (unumber)(number) $80
Inlining cast (byte) bitmap_init::bits#2 ← (unumber)(number) $80
Inlining cast (byte*) bitmap_init::yoffs#0 ← (byte*)(number) 0
Inlining cast *((byte*) bitmap_clear::bitmap#2) ← (unumber)(number) 0
Inlining cast (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$0
Inlining cast (byte*) VIC_SCREEN0 ← (byte*)(number) $4000
Inlining cast (byte*) VIC_SCREEN1 ← (byte*)(number) $4400
Inlining cast (byte*) VIC_SCREEN2 ← (byte*)(number) $4800
Inlining cast (byte*) VIC_SCREEN3 ← (byte*)(number) $4c00
Inlining cast (byte*) VIC_SCREEN4 ← (byte*)(number) $5000
Inlining cast (byte*) VIC_CHARSET_ROM ← (byte*)(number) $5800
Inlining cast (byte*) VIC_BITMAP ← (byte*)(number) $6000
Inlining cast (dword) PLANE_8BPP_CHUNKY ← (unumber)(number) $20000
Inlining cast (dword) PLANE_HORISONTAL ← (unumber)(number) $30000
Inlining cast (dword) PLANE_VERTICAL ← (unumber)(number) $32000
Inlining cast (dword) PLANE_HORISONTAL2 ← (unumber)(number) $34000
Inlining cast (dword) PLANE_VERTICAL2 ← (unumber)(number) $36000
Inlining cast (dword) PLANE_BLANK ← (unumber)(number) $38000
Inlining cast (dword) PLANE_FULL ← (unumber)(number) $3a000
Inlining cast (dword) PLANE_CHARSET8 ← (unumber)(number) $3c000
Inlining cast (dword~) get_plane::$29 ← (dword)(byte*) VIC_SCREEN0
Inlining cast (dword~) get_plane::$28 ← (dword)(byte*) VIC_SCREEN1
Inlining cast (dword~) get_plane::$27 ← (dword)(byte*) VIC_SCREEN2
Inlining cast (dword~) get_plane::$26 ← (dword)(byte*) VIC_SCREEN3
Inlining cast (dword~) get_plane::$25 ← (dword)(byte*) VIC_BITMAP
Inlining cast (dword~) get_plane::$24 ← (dword)(byte*) VIC_CHARSET_ROM
Inlining cast (dword~) get_plane::$23 ← (dword)(dword) PLANE_8BPP_CHUNKY
Inlining cast (dword~) get_plane::$22 ← (dword)(dword) PLANE_HORISONTAL
Inlining cast (dword~) get_plane::$21 ← (dword)(dword) PLANE_VERTICAL
Inlining cast (dword~) get_plane::$20 ← (dword)(dword) PLANE_HORISONTAL2
Inlining cast (dword~) get_plane::$19 ← (dword)(dword) PLANE_VERTICAL2
Inlining cast (dword~) get_plane::$18 ← (dword)(dword) PLANE_CHARSET8
Inlining cast (dword~) get_plane::$17 ← (dword)(dword) PLANE_BLANK
Inlining cast (dword~) get_plane::$16 ← (dword)(dword) PLANE_FULL
Inlining cast (dword~) get_plane::$15 ← (dword)(byte*) VIC_SCREEN0
Inlining cast (byte*) FORM_SCREEN ← (byte*)(number) $400
Inlining cast (byte*) FORM_CHARSET ← (byte*)(number) $1800
Inlining cast (byte) form_fields_cnt ← (unumber)(number) $24
Inlining cast (byte) apply_preset::i#0 ← (unumber)(number) 0
Inlining cast (byte) gfx_mode::dtv_control#0 ← (unumber)(number) 0
Inlining cast *((byte*) DTV_PLANEA_MODULO_HI) ← (unumber)(number) 0
Inlining cast *((byte*) DTV_PLANEB_MODULO_HI) ← (unumber)(number) 0
Inlining cast *((byte*) CIA2_PORT_A_DDR) ← (unumber)(number) 3
Inlining cast (word~) gfx_mode::$48 ← (word)(byte*) VIC_SCREEN0
Inlining cast (byte~) gfx_mode::$50 ← (byte)(unumber~) gfx_mode::$49
Inlining cast (word~) gfx_mode::$53 ← (word)(byte*~) gfx_mode::$52
Inlining cast (byte~) gfx_mode::$56 ← (byte)(unumber~) gfx_mode::$55
Inlining cast (word~) gfx_mode::$58 ← (word)(byte*~) gfx_mode::$57
Inlining cast *((byte*) BORDERCOL) ← (unumber)(number) 0
Inlining cast *((byte*) PROCPORT) ← (unumber)(number) $32
Inlining cast *((byte*) PROCPORT) ← (unumber)(number) $37
Inlining cast *((byte*) gfx_init_screen4::ch#2) ← (unumber)(number) 0
Inlining cast (byte) gfx_init_vic_bitmap::lines_cnt ← (unumber)(number) 9
Inlining cast (byte) gfx_init_vic_bitmap::l#0 ← (unumber)(number) 0
Inlining cast (byte~) gfx_init_plane_8bppchunky::$1 ← (byte)(unumber~) gfx_init_plane_8bppchunky::$0
Inlining cast (byte*) gfx_init_plane_8bppchunky::gfxb#0 ← (byte*)(number) $4000
Inlining cast (byte~) gfx_init_plane_8bppchunky::$9 ← (byte)(word~) gfx_init_plane_8bppchunky::$8
Inlining cast (byte*) gfx_init_plane_8bppchunky::gfxb#2 ← (byte*)(number) $4000
Inlining cast (byte~) gfx_init_plane_8bppchunky::$3 ← (byte)(number) $4000/(number) $4000
Inlining cast (byte~) gfx_init_plane_horisontal::$1 ← (byte)(unumber~) gfx_init_plane_horisontal::$0
Inlining cast (byte*) gfx_init_plane_horisontal::gfxa#0 ← (byte*)(unumber~) gfx_init_plane_horisontal::$4
Inlining cast *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (unumber)(number) 0
Inlining cast *((byte*) gfx_init_plane_horisontal::gfxa#4) ← (unumber)(number) $ff
Inlining cast (byte~) gfx_init_plane_horisontal::$5 ← (byte)(number) $4000/(number) $4000
Inlining cast (byte~) gfx_init_plane_horisontal2::$1 ← (byte)(unumber~) gfx_init_plane_horisontal2::$0
Inlining cast (byte*) gfx_init_plane_horisontal2::gfxa#0 ← (byte*)(unumber~) gfx_init_plane_horisontal2::$4
Inlining cast (byte~) gfx_init_plane_horisontal2::$5 ← (byte)(number) $4000/(number) $4000
Inlining cast (byte~) gfx_init_plane_vertical::$1 ← (byte)(unumber~) gfx_init_plane_vertical::$0
Inlining cast (byte*) gfx_init_plane_vertical::gfxb#0 ← (byte*)(unumber~) gfx_init_plane_vertical::$4
Inlining cast *((byte*) gfx_init_plane_vertical::gfxb#2) ← (unumber)(number) $f
Inlining cast (byte~) gfx_init_plane_vertical::$5 ← (byte)(number) $4000/(number) $4000
Inlining cast (byte~) gfx_init_plane_charset8::$1 ← (byte)(unumber~) gfx_init_plane_charset8::$0
Inlining cast (byte*) gfx_init_plane_charset8::gfxa#0 ← (byte*)(unumber~) gfx_init_plane_charset8::$4
Inlining cast (byte) gfx_init_plane_charset8::col#0 ← (unumber)(number) 0
Inlining cast (byte) gfx_init_plane_charset8::c#0 ← (unumber)(number) 0
Inlining cast (byte~) gfx_init_plane_charset8::$5 ← (byte)(number) $4000/(number) $4000
Inlining cast (byte) gfx_init_plane_fill::fill#0 ← (unumber)(number) $1b
Inlining cast (byte) gfx_init_plane_fill::fill#1 ← (unumber)(number) 0
Inlining cast (byte) gfx_init_plane_fill::fill#2 ← (unumber)(number) $ff
Inlining cast (byte*) gfx_init_plane_fill::gfxb#0 ← (byte*)(unumber~) gfx_init_plane_fill::$6
Inlining cast (byte~) gfx_init_plane_fill::$7 ← (byte)(number) $4000/(number) $4000
Inlining cast (dword~) form_mode::$9 ← (dword)(byte*) FORM_CHARSET
Inlining cast (byte~) form_mode::$11 ← (byte)(unumber~) form_mode::$10
Inlining cast (word~) form_mode::$13 ← (word)(unumber~) form_mode::$12
Inlining cast (word~) form_mode::$16 ← (word)(unumber~) form_mode::$15
Inlining cast *((byte*) CIA2_PORT_A_DDR) ← (unumber)(number) 3
Inlining cast (word~) form_mode::$18 ← (word)(byte*) FORM_CHARSET
Inlining cast (byte~) form_mode::$20 ← (byte)(unumber~) form_mode::$19
Inlining cast *((byte*) DTV_CONTROL) ← (unumber)(number) 0
Inlining cast (word~) form_mode::$24 ← (word)(byte*) FORM_SCREEN
Inlining cast (word~) form_mode::$27 ← (word)(byte*) FORM_CHARSET
Inlining cast (byte~) form_mode::$31 ← (byte)(unumber~) form_mode::$30
Inlining cast *((byte*) DTV_PLANEA_START_HI) ← (unumber)(number) 0
Inlining cast *((byte*) BGCOL) ← (unumber)(number) 0
Inlining cast *((byte*) BORDERCOL) ← (unumber)(number) 0
Inlining cast (byte) form_field_idx#4 ← (unumber)(number) 0
Inlining cast (signed byte) FORM_CURSOR_BLINK ← (snumber)(number) $28
Inlining cast (byte) form_render_values::idx#0 ← (unumber)(number) 0
Inlining cast (byte) form_control::return#1 ← (unumber)(number) 0
Inlining cast (byte) form_field_idx#8 ← (unumber)(number) 0
Inlining cast (byte) form_control::return#3 ← (unumber)(number) 0
Inlining cast *((byte[]) form_fields_val + (byte) form_field_idx#23) ← (unumber)(number) 0
Inlining cast (byte) form_control::return#4 ← (unumber)(number) 0
Inlining cast (byte) form_control::return#5 ← (unumber)(number) $ff
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant pointer cast (byte*) 1
Simplifying constant integer cast 5
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 53248
Simplifying constant pointer cast (byte*) 53266
Simplifying constant pointer cast (byte*) 53280
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53281
Simplifying constant pointer cast (byte*) 53282
Simplifying constant pointer cast (byte*) 53283
Simplifying constant pointer cast (byte*) 53284
Simplifying constant pointer cast (byte*) 53265
Simplifying constant integer cast $40
Simplifying constant integer cast $20
Simplifying constant integer cast $10
Simplifying constant integer cast 8
Simplifying constant pointer cast (byte*) 53270
Simplifying constant integer cast $10
Simplifying constant integer cast 8
Simplifying constant pointer cast (byte*) 53272
Simplifying constant pointer cast (byte*) 55296
Simplifying constant pointer cast (byte*) 56320
Simplifying constant pointer cast (byte*) 56321
Simplifying constant pointer cast (byte*) 56322
Simplifying constant pointer cast (byte*) 56323
Simplifying constant pointer cast (byte*) 56576
Simplifying constant pointer cast (byte*) 56578
Simplifying constant pointer cast (byte*) 53311
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 53308
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast $10
Simplifying constant integer cast $40
Simplifying constant pointer cast (byte*) 53760
Simplifying constant integer cast 0
Simplifying constant integer cast $f
Simplifying constant integer cast $36
Simplifying constant integer cast $be
Simplifying constant integer cast $58
Simplifying constant integer cast $db
Simplifying constant integer cast $86
Simplifying constant integer cast $ff
Simplifying constant integer cast $29
Simplifying constant integer cast $26
Simplifying constant integer cast $3b
Simplifying constant integer cast 5
Simplifying constant integer cast 7
Simplifying constant integer cast $df
Simplifying constant integer cast $9a
Simplifying constant integer cast $a
Simplifying constant pointer cast (byte*) 53306
Simplifying constant pointer cast (byte*) 53307
Simplifying constant pointer cast (byte*) 53317
Simplifying constant pointer cast (byte*) 53318
Simplifying constant pointer cast (byte*) 53304
Simplifying constant pointer cast (byte*) 53305
Simplifying constant pointer cast (byte*) 53321
Simplifying constant pointer cast (byte*) 53322
Simplifying constant pointer cast (byte*) 53323
Simplifying constant pointer cast (byte*) 53324
Simplifying constant pointer cast (byte*) 53319
Simplifying constant pointer cast (byte*) 53320
Simplifying constant pointer cast (byte*) 53302
Simplifying constant pointer cast (byte*) 53303
Simplifying constant integer cast $1d800
Simplifying constant pointer cast (byte*) 53309
Simplifying constant pointer cast (byte*) 255
Simplifying constant integer cast 0
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $3e8
Simplifying constant integer cast 2
Simplifying constant integer cast 7
Simplifying constant integer cast $f
Simplifying constant integer cast $34
Simplifying constant integer cast $3a
Simplifying constant integer cast $3c
Simplifying constant integer cast $3d
Simplifying constant integer cast $fe
Simplifying constant integer cast $fd
Simplifying constant integer cast $fb
Simplifying constant integer cast $f7
Simplifying constant integer cast $ef
Simplifying constant integer cast $df
Simplifying constant integer cast $bf
Simplifying constant integer cast $7f
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast $10
Simplifying constant integer cast $20
Simplifying constant integer cast $40
Simplifying constant integer cast $80
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 4
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $80
Simplifying constant integer cast $f8
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant pointer cast (byte*) 0
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast *((byte[$100]) bitmap_plot_xhi + (unumber)(number) 0)
Simplifying constant integer cast 0
Simplifying constant integer cast *((byte[$100]) bitmap_plot_xlo + (unumber)(number) 0)
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast *((byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4)
Simplifying constant integer cast *((byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4)
Simplifying constant integer cast *((byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4)
Simplifying constant integer cast *((byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 16384
Simplifying constant pointer cast (byte*) 17408
Simplifying constant pointer cast (byte*) 18432
Simplifying constant pointer cast (byte*) 19456
Simplifying constant pointer cast (byte*) 20480
Simplifying constant pointer cast (byte*) 22528
Simplifying constant pointer cast (byte*) 24576
Simplifying constant integer cast $20000
Simplifying constant integer cast $30000
Simplifying constant integer cast $32000
Simplifying constant integer cast $34000
Simplifying constant integer cast $36000
Simplifying constant integer cast $38000
Simplifying constant integer cast $3a000
Simplifying constant integer cast $3c000
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast (dword) PLANE_8BPP_CHUNKY
Simplifying constant integer cast 7
Simplifying constant integer cast (dword) PLANE_HORISONTAL
Simplifying constant integer cast 8
Simplifying constant integer cast (dword) PLANE_VERTICAL
Simplifying constant integer cast 9
Simplifying constant integer cast (dword) PLANE_HORISONTAL2
Simplifying constant integer cast $a
Simplifying constant integer cast (dword) PLANE_VERTICAL2
Simplifying constant integer cast $b
Simplifying constant integer cast (dword) PLANE_CHARSET8
Simplifying constant integer cast $c
Simplifying constant integer cast (dword) PLANE_BLANK
Simplifying constant integer cast $d
Simplifying constant integer cast (dword) PLANE_FULL
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant pointer cast (byte*) 1024
Simplifying constant pointer cast (byte*) 6144
Simplifying constant integer cast $24
Simplifying constant integer cast 8
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $19
Simplifying constant integer cast $18
Simplifying constant integer cast $19
Simplifying constant integer cast $18
Simplifying constant integer cast $19
Simplifying constant integer cast $18
Simplifying constant integer cast $19
Simplifying constant integer cast $19
Simplifying constant integer cast $18
Simplifying constant integer cast $19
Simplifying constant integer cast $18
Simplifying constant integer cast $19
Simplifying constant integer cast $18
Simplifying constant integer cast $19
Simplifying constant integer cast $25
Simplifying constant integer cast $25
Simplifying constant integer cast $25
Simplifying constant integer cast $25
Simplifying constant integer cast $24
Simplifying constant integer cast $25
Simplifying constant integer cast $24
Simplifying constant integer cast $25
Simplifying constant integer cast $24
Simplifying constant integer cast $25
Simplifying constant integer cast $24
Simplifying constant integer cast $25
Simplifying constant integer cast 2
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast $b
Simplifying constant integer cast $c
Simplifying constant integer cast $d
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast $b
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $d
Simplifying constant integer cast $d
Simplifying constant integer cast $e
Simplifying constant integer cast $e
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast $a
Simplifying constant integer cast $b
Simplifying constant integer cast $b
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast $d
Simplifying constant integer cast $d
Simplifying constant integer cast $e
Simplifying constant integer cast $e
Simplifying constant integer cast $a
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $d
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $d
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast 4
Simplifying constant integer cast 1
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 0
Simplifying constant integer cast 6
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 9
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 5
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 6
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $c
Simplifying constant integer cast $c
Simplifying constant integer cast 6
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast $d
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 7
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 6
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 8
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 9
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 9
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 9
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $b
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast $a
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast 4
Simplifying constant integer cast 5
Simplifying constant integer cast 6
Simplifying constant integer cast 7
Simplifying constant integer cast 8
Simplifying constant integer cast 9
Simplifying constant integer cast $a
Simplifying constant integer cast $b
Simplifying constant integer cast $c
Simplifying constant integer cast $d
Simplifying constant integer cast $e
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $11
Simplifying constant integer cast $12
Simplifying constant integer cast $13
Simplifying constant integer cast $14
Simplifying constant integer cast $15
Simplifying constant integer cast $16
Simplifying constant integer cast $17
Simplifying constant integer cast $18
Simplifying constant integer cast $19
Simplifying constant integer cast $1a
Simplifying constant integer cast $1b
Simplifying constant integer cast $1c
Simplifying constant integer cast $1d
Simplifying constant integer cast $1e
Simplifying constant integer cast $1f
Simplifying constant integer cast $20
Simplifying constant integer cast $21
Simplifying constant integer cast $22
Simplifying constant integer cast $23
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $32
Simplifying constant integer cast $37
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $f
Simplifying constant integer cast $10
Simplifying constant integer cast 3
Simplifying constant integer cast $10
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast $ff
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $c7
Simplifying constant integer cast $c7
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $64
Simplifying constant integer cast $c7
Simplifying constant integer cast $64
Simplifying constant integer cast 0
Simplifying constant integer cast 9
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 1
Simplifying constant integer cast $4000
Simplifying constant pointer cast (byte*) 16384
Simplifying constant integer cast $8000
Simplifying constant pointer cast (byte*) 16384
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $4000
Simplifying constant integer cast 4
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $4000
Simplifying constant integer cast 0
Simplifying constant integer cast $55
Simplifying constant integer cast $aa
Simplifying constant integer cast $ff
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $4000
Simplifying constant integer cast $f
Simplifying constant integer cast $4000
Simplifying constant integer cast $3fff
Simplifying constant integer cast $4000
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $80
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $1b
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 4
Simplifying constant integer cast $3fff
Simplifying constant integer cast $4000
Simplifying constant integer cast $10000
Simplifying constant integer cast $400
Simplifying constant integer cast $400
Simplifying constant integer cast 3
Simplifying constant integer cast $4000
Simplifying constant integer cast 3
Simplifying constant integer cast 0
Simplifying constant integer cast 3
Simplifying constant integer cast $3fff
Simplifying constant integer cast $40
Simplifying constant integer cast $3fff
Simplifying constant integer cast $400
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast 2
Simplifying constant integer cast $28
Simplifying constant integer cast *((byte[$19]) form_line_hi + (byte) form_field_ptr::y#0)
Simplifying constant integer cast *((byte[$19]) form_line_lo + (byte) form_field_ptr::y#0)
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast $80
Simplifying constant integer cast $7f
Simplifying constant integer cast $7f
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $ff
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $40
Finalized unsigned number type (dword) $1d800
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (word) $3e8
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $34
Finalized unsigned number type (byte) $3a
Finalized unsigned number type (byte) $3c
Finalized unsigned number type (byte) $3d
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $f8
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (dword) $20000
Finalized unsigned number type (dword) $30000
Finalized unsigned number type (dword) $32000
Finalized unsigned number type (dword) $34000
Finalized unsigned number type (dword) $36000
Finalized unsigned number type (dword) $38000
Finalized unsigned number type (dword) $3a000
Finalized unsigned number type (dword) $3c000
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) $24
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 6
Finalized unsigned number type (byte) 7
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) $a
Finalized unsigned number type (byte) $b
Finalized unsigned number type (byte) $c
Finalized unsigned number type (byte) $d
Finalized unsigned number type (byte) $e
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $11
Finalized unsigned number type (byte) $12
Finalized unsigned number type (byte) $13
Finalized unsigned number type (byte) $14
Finalized unsigned number type (byte) $15
Finalized unsigned number type (byte) $16
Finalized unsigned number type (byte) $17
Finalized unsigned number type (byte) $18
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $1a
Finalized unsigned number type (byte) $1b
Finalized unsigned number type (byte) $1c
Finalized unsigned number type (byte) $1d
Finalized unsigned number type (byte) $1e
Finalized unsigned number type (byte) $1f
Finalized unsigned number type (byte) $20
Finalized unsigned number type (byte) $21
Finalized unsigned number type (byte) $22
Finalized unsigned number type (byte) $23
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $4000
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) $32
Finalized unsigned number type (byte) $37
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $f
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 9
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 1
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $8000
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (byte) 4
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (byte) $f
Finalized unsigned number type (word) $4000
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $1b
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 4
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $4000
Finalized unsigned number type (dword) $10000
Finalized unsigned number type (word) $400
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $4000
Finalized unsigned number type (byte) 3
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 3
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (byte) $40
Finalized unsigned number type (word) $3fff
Finalized unsigned number type (word) $400
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) $28
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) 0
Finalized signed number type (signed byte) 0
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) $80
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) $7f
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 1
Finalized signed number type (signed byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $ff
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to byte in (unumber~) keyboard_event_scan::$14 ← (byte) keyboard_event_scan::keycode#3 + (byte) 8
Inferred type updated to byte in (unumber~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#5 | (byte) $40
Inferred type updated to byte in (unumber~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8
Inferred type updated to byte in (unumber~) bitmap_init::$6 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_init::$8 ← (byte~) bitmap_init::$6 | (byte~) bitmap_init::$7
Inferred type updated to byte in (unumber~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7
Inferred type updated to byte in (unumber~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#2 + (byte) 1
Inferred type updated to byte in (unumber~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#2 + (byte) 1
Inferred type updated to byte in (unumber~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#2 + (byte) 1
Inferred type updated to byte in (unumber~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#2 + (byte) 1
Inferred type updated to byte in (unumber~) gfx_mode::$13 ← (byte~) gfx_mode::$12 | (byte) 3
Inferred type updated to byte in (unumber~) gfx_mode::$20 ← *((byte*) form_a_start_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$21 ← (byte~) gfx_mode::$20 | *((byte*) form_a_start_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$30 ← *((byte*) form_a_step_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((byte*) form_a_step_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$32 ← *((byte*) form_a_mod_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((byte*) form_a_mod_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$34 ← *((byte*) form_b_start_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$35 ← (byte~) gfx_mode::$34 | *((byte*) form_b_start_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$44 ← *((byte*) form_b_step_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((byte*) form_b_step_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$46 ← *((byte*) form_b_mod_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((byte*) form_b_mod_lo)
Inferred type updated to word in (unumber~) gfx_mode::$49 ← (word~) gfx_mode::$48 / (word) $4000
Inferred type updated to byte in (unumber~) gfx_mode::$51 ← (byte) 3 ^ (byte~) gfx_mode::$50
Inferred type updated to word in (unumber~) gfx_mode::$54 ← (word~) gfx_mode::$53 & (word) $3fff
Inferred type updated to word in (unumber~) gfx_mode::$55 ← (word~) gfx_mode::$54 / (byte) $40
Inferred type updated to word in (unumber~) gfx_mode::$59 ← (word~) gfx_mode::$58 & (word) $3fff
Inferred type updated to byte in (unumber~) gfx_mode::$60 ← > (word~) gfx_mode::$59
Inferred type updated to byte in (unumber~) gfx_mode::$61 ← (byte~) gfx_mode::$60 / (byte) 4
Inferred type updated to byte in (unumber~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61
Inferred type updated to byte in (unumber~) gfx_mode::$64 ← *((byte*) form_vic_bg0_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((byte*) form_vic_bg0_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$66 ← *((byte*) form_vic_bg1_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((byte*) form_vic_bg1_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$68 ← *((byte*) form_vic_bg2_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((byte*) form_vic_bg2_lo)
Inferred type updated to byte in (unumber~) gfx_mode::$70 ← *((byte*) form_vic_bg3_hi) * (byte) $10
Inferred type updated to byte in (unumber~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((byte*) form_vic_bg3_lo)
Inferred type updated to byte in (unumber~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#2 & (byte) $f
Inferred type updated to byte in (unumber~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 * (byte) $10
Inferred type updated to byte in (unumber~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f
Inferred type updated to byte in (unumber~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2
Inferred type updated to byte in (unumber~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f
Inferred type updated to byte in (unumber~) gfx_init_screen2::$1 ← (byte~) gfx_init_screen2::$0 & (byte) $f
Inferred type updated to byte in (unumber~) gfx_init_screen2::$2 ← (byte) $f - (byte) gfx_init_screen2::col#0
Inferred type updated to byte in (unumber~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (byte) $10
Inferred type updated to byte in (unumber~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
Inferred type updated to byte in (unumber~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3
Inferred type updated to byte in (unumber~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 * (byte) $10
Inferred type updated to byte in (unumber~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#2 & (byte) 3
Inferred type updated to byte in (unumber~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2
Inferred type updated to byte in (unumber~) gfx_init_vic_bitmap::$3 ← (byte) gfx_init_vic_bitmap::l#3 + (byte) 1
Inferred type updated to byte in (unumber~) gfx_init_vic_bitmap::$4 ← (byte) gfx_init_vic_bitmap::l#3 + (byte) 1
Inferred type updated to dword in (unumber~) gfx_init_plane_8bppchunky::$0 ← (dword) PLANE_8BPP_CHUNKY / (word) $4000
Inferred type updated to dword in (unumber~) gfx_init_plane_horisontal::$0 ← (dword) PLANE_HORISONTAL / (word) $4000
Inferred type updated to word in (unumber~) gfx_init_plane_horisontal::$3 ← (dword) PLANE_HORISONTAL & (word) $3fff
Inferred type updated to word in (unumber~) gfx_init_plane_horisontal::$4 ← (word) $4000 + (word~) gfx_init_plane_horisontal::$3
Inferred type updated to byte in (unumber~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#2 & (byte) 4
Inferred type updated to dword in (unumber~) gfx_init_plane_horisontal2::$0 ← (dword) PLANE_HORISONTAL2 / (word) $4000
Inferred type updated to word in (unumber~) gfx_init_plane_horisontal2::$3 ← (dword) PLANE_HORISONTAL2 & (word) $3fff
Inferred type updated to word in (unumber~) gfx_init_plane_horisontal2::$4 ← (word) $4000 + (word~) gfx_init_plane_horisontal2::$3
Inferred type updated to byte in (unumber~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#2 / (byte) 2
Inferred type updated to byte in (unumber~) gfx_init_plane_horisontal2::$8 ← (byte~) gfx_init_plane_horisontal2::$7 & (byte) 3
Inferred type updated to dword in (unumber~) gfx_init_plane_vertical::$0 ← (dword) PLANE_VERTICAL / (word) $4000
Inferred type updated to word in (unumber~) gfx_init_plane_vertical::$3 ← (dword) PLANE_VERTICAL & (word) $3fff
Inferred type updated to word in (unumber~) gfx_init_plane_vertical::$4 ← (word) $4000 + (word~) gfx_init_plane_vertical::$3
Inferred type updated to dword in (unumber~) gfx_init_plane_charset8::$0 ← (dword) PLANE_CHARSET8 / (word) $4000
Inferred type updated to word in (unumber~) gfx_init_plane_charset8::$3 ← (dword) PLANE_CHARSET8 & (word) $3fff
Inferred type updated to word in (unumber~) gfx_init_plane_charset8::$4 ← (word) $4000 + (word~) gfx_init_plane_charset8::$3
Inferred type updated to byte in (unumber~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80
Inferred type updated to byte in (unumber~) gfx_init_plane_charset8::$10 ← (byte) gfx_init_plane_charset8::bits#3 * (byte) 2
Inferred type updated to dword in (unumber~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (byte) 4
Inferred type updated to word in (unumber~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0
Inferred type updated to byte in (unumber~) gfx_init_plane_fill::$2 ← < (word~) gfx_init_plane_fill::$1
Inferred type updated to word in (unumber~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff
Inferred type updated to word in (unumber~) gfx_init_plane_fill::$6 ← (word) $4000 + (word~) gfx_init_plane_fill::$5
Inferred type updated to dword in (unumber~) form_mode::$10 ← (dword~) form_mode::$9 / (dword) $10000
Inferred type updated to dword in (unumber~) form_mode::$12 ← (dword) DTV_COLOR_BANK_DEFAULT / (word) $400
Inferred type updated to dword in (unumber~) form_mode::$15 ← (dword) DTV_COLOR_BANK_DEFAULT / (word) $400
Inferred type updated to word in (unumber~) form_mode::$19 ← (word~) form_mode::$18 / (word) $4000
Inferred type updated to byte in (unumber~) form_mode::$21 ← (byte) 3 ^ (byte~) form_mode::$20
Inferred type updated to byte in (unumber~) form_mode::$23 ← (byte~) form_mode::$22 | (byte) 3
Inferred type updated to word in (unumber~) form_mode::$25 ← (word~) form_mode::$24 & (word) $3fff
Inferred type updated to word in (unumber~) form_mode::$26 ← (word~) form_mode::$25 / (byte) $40
Inferred type updated to word in (unumber~) form_mode::$28 ← (word~) form_mode::$27 & (word) $3fff
Inferred type updated to word in (unumber~) form_mode::$29 ← (word~) form_mode::$28 / (word) $400
Inferred type updated to word in (unumber~) form_mode::$30 ← (word~) form_mode::$26 | (word~) form_mode::$29
Inferred type updated to signed byte in (snumber~) $37 ← (signed byte) FORM_CURSOR_BLINK / (signed byte) 2
Inferred type updated to signed byte in (snumber~) form_control::$3 ← (signed byte) FORM_CURSOR_BLINK / (signed byte) 2
Inferred type updated to byte in (unumber~) form_control::$14 ← *((byte*) form_control::field#1) | (byte) $80
Inferred type updated to byte in (unumber~) form_control::$13 ← *((byte*) form_control::field#2) & (byte) $7f
Inferred type updated to byte in (unumber~) form_control::$15 ← *((byte*) form_control::field#3) & (byte) $7f
Inferred type updated to byte in (unumber~) form_control::$20 ← (byte) form_fields_cnt - (byte) 1
Inferred type updated to signed byte in (snumber~) form_control::$23 ← (signed byte) FORM_CURSOR_BLINK / (signed byte) 2
Adding pointer type conversion cast (byte*) bitmap_clear::$0 in (byte*~) bitmap_clear::$0 ← (word~) bitmap_clear::$3
Adding pointer type conversion cast (byte*) form_field_ptr::$0 in (byte*~) form_field_ptr::$0 ← (word~) form_field_ptr::$2
Successful SSA optimization PassNAddTypeConversionAssignment
Inversing boolean not [63] (bool~) memset::$1 ← (word) memset::num#1 <= (byte) 0 from [62] (bool~) memset::$0 ← (word) memset::num#1 > (byte) 0
Inversing boolean not [92] (bool~) print_str_lines::$0 ← (byte) 0 == (byte) print_str_lines::ch#0 from [91] (bool~) print_str_lines::$4 ← (byte) 0 != (byte) print_str_lines::ch#0
Inversing boolean not [211] (bool~) keyboard_event_scan::$18 ← (byte~) keyboard_event_scan::$16 == (byte) 0 from [210] (bool~) keyboard_event_scan::$17 ← (byte~) keyboard_event_scan::$16 != (byte) 0
Inversing boolean not [220] (bool~) keyboard_event_scan::$20 ← (byte) keyboard_events_size#18 == (byte) 8 from [219] (bool~) keyboard_event_scan::$19 ← (byte) keyboard_events_size#18 != (byte) 8
Inversing boolean not [244] (bool~) keyboard_event_scan::$2 ← (byte~) keyboard_event_scan::$0 == (byte) 0 from [243] (bool~) keyboard_event_scan::$1 ← (byte~) keyboard_event_scan::$0 != (byte) 0
Inversing boolean not [253] (bool~) keyboard_event_scan::$5 ← (byte~) keyboard_event_scan::$3 == (byte) 0 from [252] (bool~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 != (byte) 0
Inversing boolean not [265] (bool~) keyboard_event_scan::$8 ← (byte~) keyboard_event_scan::$6 == (byte) 0 from [264] (bool~) keyboard_event_scan::$7 ← (byte~) keyboard_event_scan::$6 != (byte) 0
Inversing boolean not [277] (bool~) keyboard_event_scan::$11 ← (byte~) keyboard_event_scan::$9 == (byte) 0 from [276] (bool~) keyboard_event_scan::$10 ← (byte~) keyboard_event_scan::$9 != (byte) 0
Inversing boolean not [328] (bool~) bitmap_init::$4 ← (byte) bitmap_init::bits#1 != (byte) 0 from [327] (bool~) bitmap_init::$3 ← (byte) bitmap_init::bits#1 == (byte) 0
Inversing boolean not [347] (bool~) bitmap_init::$12 ← (byte~) bitmap_init::$10 != (byte) 7 from [346] (bool~) bitmap_init::$11 ← (byte~) bitmap_init::$10 == (byte) 7
Inversing boolean not [488] (bool~) bitmap_line_xdyi::$4 ← (byte) bitmap_line_xdyi::xd#2 >= (byte) bitmap_line_xdyi::e#1 from [487] (bool~) bitmap_line_xdyi::$3 ← (byte) bitmap_line_xdyi::xd#2 < (byte) bitmap_line_xdyi::e#1
Inversing boolean not [511] (bool~) bitmap_line_xdyd::$4 ← (byte) bitmap_line_xdyd::xd#2 >= (byte) bitmap_line_xdyd::e#1 from [510] (bool~) bitmap_line_xdyd::$3 ← (byte) bitmap_line_xdyd::xd#2 < (byte) bitmap_line_xdyd::e#1
Inversing boolean not [534] (bool~) bitmap_line_ydxi::$4 ← (byte) bitmap_line_ydxi::yd#2 >= (byte) bitmap_line_ydxi::e#1 from [533] (bool~) bitmap_line_ydxi::$3 ← (byte) bitmap_line_ydxi::yd#2 < (byte) bitmap_line_ydxi::e#1
Inversing boolean not [558] (bool~) bitmap_line_ydxd::$4 ← (byte) bitmap_line_ydxd::yd#2 >= (byte) bitmap_line_ydxd::e#1 from [557] (bool~) bitmap_line_ydxd::$3 ← (byte) bitmap_line_ydxd::yd#2 < (byte) bitmap_line_ydxd::e#1
Inversing boolean not [686] (bool~) get_plane::$14 ← (byte) get_plane::idx#15 != (byte) $d from [685] (bool~) get_plane::$13 ← (byte) get_plane::idx#15 == (byte) $d
Inversing boolean not [713] (bool~) get_vic_screen::$5 ← (byte) get_vic_screen::idx#6 != (byte) 4 from [712] (bool~) get_vic_screen::$4 ← (byte) get_vic_screen::idx#6 == (byte) 4
Inversing boolean not [726] (bool~) get_vic_charset::$2 ← (byte) get_vic_charset::idx#2 != (byte) 1 from [725] (bool~) get_vic_charset::$1 ← (byte) get_vic_charset::idx#2 == (byte) 1
Inversing boolean not [938] (bool~) gfx_mode::$1 ← *((byte*) form_ctrl_line) == (byte) 0 from [937] (bool~) gfx_mode::$0 ← *((byte*) form_ctrl_line) != (byte) 0
Inversing boolean not [942] (bool~) gfx_mode::$3 ← *((byte*) form_ctrl_borof) == (byte) 0 from [941] (bool~) gfx_mode::$2 ← *((byte*) form_ctrl_borof) != (byte) 0
Inversing boolean not [949] (bool~) gfx_mode::$5 ← *((byte*) form_ctrl_hicol) == (byte) 0 from [948] (bool~) gfx_mode::$4 ← *((byte*) form_ctrl_hicol) != (byte) 0
Inversing boolean not [956] (bool~) gfx_mode::$7 ← *((byte*) form_ctrl_overs) == (byte) 0 from [955] (bool~) gfx_mode::$6 ← *((byte*) form_ctrl_overs) != (byte) 0
Inversing boolean not [963] (bool~) gfx_mode::$9 ← *((byte*) form_ctrl_colof) == (byte) 0 from [962] (bool~) gfx_mode::$8 ← *((byte*) form_ctrl_colof) != (byte) 0
Inversing boolean not [970] (bool~) gfx_mode::$11 ← *((byte*) form_ctrl_chunk) == (byte) 0 from [969] (bool~) gfx_mode::$10 ← *((byte*) form_ctrl_chunk) != (byte) 0
Inversing boolean not [981] (bool~) gfx_mode::$15 ← *((byte*) form_ctrl_ecm) == (byte) 0 from [980] (bool~) gfx_mode::$14 ← *((byte*) form_ctrl_ecm) != (byte) 0
Inversing boolean not [988] (bool~) gfx_mode::$17 ← *((byte*) form_ctrl_bmm) == (byte) 0 from [987] (bool~) gfx_mode::$16 ← *((byte*) form_ctrl_bmm) != (byte) 0
Inversing boolean not [997] (bool~) gfx_mode::$19 ← *((byte*) form_ctrl_mcm) == (byte) 0 from [996] (bool~) gfx_mode::$18 ← *((byte*) form_ctrl_mcm) != (byte) 0
Inversing boolean not [1153] (bool~) gfx_mode::$90 ← (byte) gfx_mode::keyboard_event#0 != (byte) KEY_SPACE from [1152] (bool~) gfx_mode::$89 ← (byte) gfx_mode::keyboard_event#0 == (byte) KEY_SPACE
Inversing boolean not [1320] (bool~) gfx_init_plane_8bppchunky::$6 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 != (word) $8000 from [1319] (bool~) gfx_init_plane_8bppchunky::$5 ← (byte*) gfx_init_plane_8bppchunky::gfxb#3 == (word) $8000
Inversing boolean not [1462] (bool~) gfx_init_plane_charset8::$9 ← (byte~) gfx_init_plane_charset8::$7 == (byte) 0 from [1461] (bool~) gfx_init_plane_charset8::$8 ← (byte~) gfx_init_plane_charset8::$7 != (byte) 0
Inversing boolean not [1631] (bool~) form_mode::$38 ← (byte~) form_mode::$36 == (byte) 0 from [1630] (bool~) form_mode::$37 ← (byte~) form_mode::$36 != (byte) 0
Inversing boolean not [1635] (bool~) form_mode::$40 ← (byte) form_mode::preset_current#2 == *((byte*) form_preset) from [1634] (bool~) form_mode::$39 ← (byte) form_mode::preset_current#2 != *((byte*) form_preset)
Inversing boolean not [1712] (bool~) form_control::$2 ← (signed byte) form_cursor_count#5 >= (signed byte) 0 from [1711] (bool~) form_control::$1 ← (signed byte) form_cursor_count#5 < (signed byte) 0
Inversing boolean not [1738] (bool~) form_control::$8 ← (byte) form_control::key_event#0 != (byte) KEY_CRSR_DOWN from [1737] (bool~) form_control::$7 ← (byte) form_control::key_event#0 == (byte) KEY_CRSR_DOWN
Inversing boolean not [1742] (bool~) form_control::$10 ← (byte) form_control::key_event#1 != (byte) KEY_CRSR_RIGHT from [1741] (bool~) form_control::$9 ← (byte) form_control::key_event#1 == (byte) KEY_CRSR_RIGHT
Inversing boolean not [1753] (bool~) form_control::$22 ← (byte) form_field_idx#5 != (byte) form_fields_cnt from [1752] (bool~) form_control::$21 ← (byte) form_field_idx#5 == (byte) form_fields_cnt
Inversing boolean not [1758] (bool~) form_control::$19 ← (byte) form_field_idx#6 != (byte) $ff from [1757] (bool~) form_control::$18 ← (byte) form_field_idx#6 == (byte) $ff
Inversing boolean not [1778] (bool~) form_control::$12 ← (byte) form_control::key_event#2 != (byte) KEY_SPACE from [1777] (bool~) form_control::$11 ← (byte) form_control::key_event#2 == (byte) KEY_SPACE
Inversing boolean not [1787] (bool~) form_control::$29 ← *((byte[]) form_fields_val + (byte) form_field_idx#19) <= *((byte[]) form_fields_max + (byte) form_field_idx#19) from [1786] (bool~) form_control::$28 ← *((byte[]) form_fields_val + (byte) form_field_idx#19) > *((byte[]) form_fields_max + (byte) form_field_idx#19)
Inversing boolean not [1792] (bool~) form_control::$27 ← *((byte[]) form_fields_val + (byte) form_field_idx#20) != (byte) $ff from [1791] (bool~) form_control::$26 ← *((byte[]) form_fields_val + (byte) form_field_idx#20) == (byte) $ff
Successful SSA optimization Pass2UnaryNotSimplification
Alias (void*) memset::return#0 = (void*) memset::str#1 (void*) memset::return#3 (void*) memset::return#1 
Alias (void*) memset::str#2 = (void*) memset::str#3 
Alias (word) memset::num#1 = (word) memset::num#2 
Alias (byte) memset::c#3 = (byte) memset::c#4 
Alias (byte*) memset::end#0 = (byte*~) memset::$3 
Alias (byte) memset::c#1 = (byte) memset::c#2 
Alias (byte*) memset::dst#2 = (byte*) memset::dst#3 
Alias (byte*) memset::end#1 = (byte*) memset::end#2 
Alias (void*) memset::str#4 = (void*) memset::str#5 
Alias (byte*) print_screen#0 = (byte*) print_line_cursor#0 (byte*) print_char_cursor#0 (byte*) print_screen#51 (byte*) print_line_cursor#72 (byte*) print_char_cursor#72 (byte*) print_screen#49 (byte*) print_line_cursor#71 (byte*) print_char_cursor#71 (byte*) print_screen#47 (byte*) print_line_cursor#70 (byte*) print_char_cursor#70 (byte*) print_screen#45 (byte*) print_line_cursor#68 (byte*) print_char_cursor#68 (byte*) print_screen#42 (byte*) print_line_cursor#65 (byte*) print_char_cursor#65 (byte*) print_screen#39 (byte*) print_line_cursor#62 (byte*) print_char_cursor#62 (byte*) print_screen#37 (byte*) print_line_cursor#60 (byte*) print_char_cursor#60 (byte*) print_screen#32 (byte*) print_line_cursor#53 (byte*) print_char_cursor#55 (byte*) print_screen#24 (byte*) print_line_cursor#44 (byte*) print_char_cursor#46 
Alias (byte) print_str_lines::ch#0 = (byte) print_str_lines::ch#2 
Alias (byte*) print_char_cursor#20 = (byte*) print_char_cursor#37 
Alias (byte*) print_str_lines::str#0 = (byte*) print_str_lines::str#8 
Alias (byte*) print_line_cursor#54 = (byte*) print_line_cursor#55 
Alias (byte*) print_line_cursor#36 = (byte*) print_line_cursor#46 
Alias (byte*) print_char_cursor#38 = (byte*) print_char_cursor#48 
Alias (byte*) print_str_lines::str#6 = (byte*) print_str_lines::str#9 (byte*) print_str_lines::str#7 
Alias (byte*) print_line_cursor#1 = (byte*) print_line_cursor#19 
Alias (byte*) print_char_cursor#2 = (byte*) print_char_cursor#21 
Alias (byte*) print_char_cursor#22 = (byte*) print_char_cursor#39 (byte*) print_char_cursor#3 
Alias (byte*) print_line_cursor#2 = (byte*) print_line_cursor#20 (byte*) print_line_cursor#37 
Alias (byte*) print_str_at::str#2 = (byte*) print_str_at::str#3 
Alias (byte*) print_str_at::at#2 = (byte*) print_str_at::at#3 
Alias (byte*) print_line_cursor#22 = (byte*) print_line_cursor#3 (byte*~) print_ln::$0 (byte*) print_char_cursor#4 (byte*) print_line_cursor#23 (byte*) print_char_cursor#24 (byte*) print_line_cursor#4 (byte*) print_char_cursor#5 
Alias (byte*) print_line_cursor#24 = (byte*) print_screen#10 (byte*) print_screen#9 (byte*) print_line_cursor#5 (byte*) print_char_cursor#6 (byte*) print_char_cursor#25 (byte*) print_line_cursor#6 (byte*) print_char_cursor#7 
Alias (byte*) print_screen#1 = (byte*) print_line_cursor#7 (byte*) print_char_cursor#8 (byte*) print_screen#11 (byte*) print_line_cursor#25 (byte*) print_char_cursor#26 (byte*) print_screen#2 (byte*) print_line_cursor#8 (byte*) print_char_cursor#9 
Alias (byte) keyboard_matrix_read::return#0 = (byte) keyboard_matrix_read::row_pressed_bits#0 (byte~) keyboard_matrix_read::$0 (byte) keyboard_matrix_read::return#3 (byte) keyboard_matrix_read::return#1 
Alias (byte) KEY_MODIFIER_SHIFT = (byte~) $0 
Alias (byte) keyboard_matrix_read::return#2 = (byte) keyboard_matrix_read::return#4 
Alias (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#3 (byte) keyboard_event_scan::row#9 (byte) keyboard_event_scan::row#7 
Alias (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#7 (byte) keyboard_event_scan::keycode#12 (byte) keyboard_event_scan::keycode#3 
Alias (byte) keyboard_events_size#109 = (byte) keyboard_events_size#77 (byte) keyboard_events_size#90 (byte) keyboard_events_size#55 
Alias (byte) keyboard_event_scan::row_scan#0 = (byte~) keyboard_event_scan::$12 (byte) keyboard_event_scan::row_scan#5 
Alias (byte) keyboard_event_scan::keycode#1 = (byte~) keyboard_event_scan::$14 
Alias (byte) keyboard_events_size#18 = (byte) keyboard_events_size#37 (byte) keyboard_events_size#38 (byte) keyboard_events_size#19 (byte) keyboard_events_size#20 
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#9 (byte) keyboard_event_scan::keycode#8 (byte) keyboard_event_scan::keycode#5 (byte) keyboard_event_scan::keycode#6 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#6 (byte) keyboard_event_scan::col#4 (byte) keyboard_event_scan::col#5 (byte) keyboard_event_scan::col#7 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#6 (byte) keyboard_event_scan::row_scan#2 (byte) keyboard_event_scan::row_scan#7 (byte) keyboard_event_scan::row_scan#8 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#11 (byte) keyboard_event_scan::row#5 (byte) keyboard_event_scan::row#13 (byte) keyboard_event_scan::row#12 
Alias (byte) keyboard_event_scan::event_type#0 = (byte~) keyboard_event_scan::$21 
Alias (byte) keyboard_event_scan::row_scan#3 = (byte) keyboard_event_scan::row_scan#4 
Alias (byte) keyboard_event_scan::row#6 = (byte) keyboard_event_scan::row#8 
Alias (byte) keyboard_event_scan::keycode#14 = (byte) keyboard_event_scan::keycode#2 
Alias (byte) keyboard_events_size#108 = (byte) keyboard_events_size#54 
Alias (byte) keyboard_events_size#100 = (byte) keyboard_events_size#118 (byte) keyboard_events_size#115 (byte) keyboard_events_size#114 
Alias (byte) keyboard_event_pressed::return#0 = (byte) keyboard_event_pressed::return#6 
Alias (byte) keyboard_modifiers#1 = (byte) keyboard_modifiers#34 (byte) keyboard_modifiers#17 
Alias (byte) keyboard_event_pressed::return#1 = (byte) keyboard_event_pressed::return#7 
Alias (byte) keyboard_modifiers#18 = (byte) keyboard_modifiers#35 (byte) keyboard_modifiers#53 
Alias (byte) keyboard_events_size#101 = (byte) keyboard_events_size#110 (byte) keyboard_events_size#102 
Alias (byte) keyboard_modifiers#2 = (byte~) keyboard_event_scan::$26 
Alias (byte) keyboard_event_pressed::return#2 = (byte) keyboard_event_pressed::return#8 
Alias (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#36 (byte) keyboard_modifiers#54 
Alias (byte) keyboard_events_size#78 = (byte) keyboard_events_size#91 (byte) keyboard_events_size#79 
Alias (byte) keyboard_modifiers#3 = (byte~) keyboard_event_scan::$27 
Alias (byte) keyboard_event_pressed::return#3 = (byte) keyboard_event_pressed::return#9 
Alias (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#37 (byte) keyboard_modifiers#55 
Alias (byte) keyboard_events_size#39 = (byte) keyboard_events_size#56 (byte) keyboard_events_size#40 
Alias (byte) keyboard_modifiers#4 = (byte~) keyboard_event_scan::$28 
Alias (byte) keyboard_modifiers#5 = (byte~) keyboard_event_scan::$29 
Alias (byte) keyboard_events_size#21 = (byte) keyboard_events_size#3 
Alias (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#6 
Alias (byte) keyboard_event_pressed::return#10 = (byte) keyboard_event_pressed::return#4 (byte~) keyboard_event_pressed::$2 (byte) keyboard_event_pressed::return#5 
Alias (byte) keyboard_events_size#22 = (byte) keyboard_events_size#41 (byte) keyboard_events_size#23 
Alias (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#5 
Alias (byte) keyboard_events_size#24 = (byte) keyboard_events_size#5 
Alias (byte) keyboard_events_size#0 = (byte) keyboard_events_size#111 (byte) keyboard_events_size#103 (byte) keyboard_events_size#93 (byte) keyboard_events_size#85 (byte) keyboard_events_size#76 (byte) keyboard_events_size#53 
Alias (byte) keyboard_modifiers#0 = (byte) keyboard_modifiers#95 (byte) keyboard_modifiers#90 (byte) keyboard_modifiers#84 (byte) keyboard_modifiers#81 (byte) keyboard_modifiers#75 (byte) keyboard_modifiers#52 
Alias (byte) bitmap_init::bits#1 = (byte~) bitmap_init::$2 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#4 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#4 
Alias (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#4 
Alias (byte*) bitmap_init::yoffs#1 = (byte*~) bitmap_init::$13 
Alias (byte*) bitmap_clear::bitmap#0 = (byte*~) bitmap_clear::$0 
Alias (byte) bitmap_clear::y#2 = (byte) bitmap_clear::y#3 
Alias (byte*) bitmap_clear::bitmap#1 = (byte*) bitmap_clear::bitmap#4 
Alias (word) bitmap_plot::plotter_x#0 = (word~) bitmap_plot::$2 
Alias (word) bitmap_plot::plotter_y#0 = (word~) bitmap_plot::$3 
Alias (byte) bitmap_line::x1#1 = (byte) bitmap_line::x1#2 (byte) bitmap_line::x1#3 (byte) bitmap_line::x1#11 (byte) bitmap_line::x1#10 (byte) bitmap_line::x1#4 (byte) bitmap_line::x1#5 (byte) bitmap_line::x1#6 (byte) bitmap_line::x1#13 (byte) bitmap_line::x1#12 (byte) bitmap_line::x1#7 (byte) bitmap_line::x1#8 (byte) bitmap_line::x1#9 
Alias (byte) bitmap_line::x0#1 = (byte) bitmap_line::x0#2 (byte) bitmap_line::x0#3 (byte) bitmap_line::x0#11 (byte) bitmap_line::x0#10 (byte) bitmap_line::x0#4 (byte) bitmap_line::x0#5 (byte) bitmap_line::x0#6 (byte) bitmap_line::x0#13 (byte) bitmap_line::x0#12 (byte) bitmap_line::x0#7 (byte) bitmap_line::x0#8 (byte) bitmap_line::x0#9 
Alias (byte) bitmap_line::y0#1 = (byte) bitmap_line::y0#13 (byte) bitmap_line::y0#2 (byte) bitmap_line::y0#3 (byte) bitmap_line::y0#4 (byte) bitmap_line::y0#5 (byte) bitmap_line::y0#6 (byte) bitmap_line::y0#7 (byte) bitmap_line::y0#8 (byte) bitmap_line::y0#9 (byte) bitmap_line::y0#10 (byte) bitmap_line::y0#11 (byte) bitmap_line::y0#12 
Alias (byte) bitmap_line::y1#1 = (byte) bitmap_line::y1#13 (byte) bitmap_line::y1#2 (byte) bitmap_line::y1#3 (byte) bitmap_line::y1#4 (byte) bitmap_line::y1#5 (byte) bitmap_line::y1#6 (byte) bitmap_line::y1#7 (byte) bitmap_line::y1#8 (byte) bitmap_line::y1#9 (byte) bitmap_line::y1#10 (byte) bitmap_line::y1#11 (byte) bitmap_line::y1#12 
Alias (byte) bitmap_line::xd#1 = (byte~) bitmap_line::$11 (byte) bitmap_line::xd#9 (byte) bitmap_line::xd#10 (byte) bitmap_line::xd#11 (byte) bitmap_line::xd#12 (byte) bitmap_line::xd#13 (byte) bitmap_line::xd#14 
Alias (byte) bitmap_line::xd#2 = (byte~) bitmap_line::$1 (byte) bitmap_line::xd#3 (byte) bitmap_line::xd#4 (byte) bitmap_line::xd#5 (byte) bitmap_line::xd#6 (byte) bitmap_line::xd#7 (byte) bitmap_line::xd#8 
Alias (byte) bitmap_line::yd#1 = (byte~) bitmap_line::$7 (byte) bitmap_line::yd#7 (byte) bitmap_line::yd#8 
Alias (byte) bitmap_line::yd#2 = (byte~) bitmap_line::$3 (byte) bitmap_line::yd#5 (byte) bitmap_line::yd#6 
Alias (byte) bitmap_line::yd#11 = (byte) bitmap_line::yd#3 (byte~) bitmap_line::$17 (byte) bitmap_line::yd#12 
Alias (byte) bitmap_line::yd#10 = (byte) bitmap_line::yd#4 (byte~) bitmap_line::$13 (byte) bitmap_line::yd#9 
Alias (byte) bitmap_line_xdyi::e#0 = (byte~) bitmap_line_xdyi::$0 
Alias (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#4 
Alias (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#5 
Alias (byte) bitmap_line_xdyi::yd#3 = (byte) bitmap_line_xdyi::yd#4 (byte) bitmap_line_xdyi::yd#6 
Alias (byte) bitmap_line_xdyi::xd#2 = (byte) bitmap_line_xdyi::xd#4 (byte) bitmap_line_xdyi::xd#3 
Alias (byte) bitmap_line_xdyi::x1#3 = (byte) bitmap_line_xdyi::x1#4 (byte) bitmap_line_xdyi::x1#5 
Alias (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#7 (byte) bitmap_line_xdyi::y#4 
Alias (byte) bitmap_line_xdyi::e#1 = (byte~) bitmap_line_xdyi::$2 (byte) bitmap_line_xdyi::e#4 
Alias (byte) bitmap_line_xdyi::x#2 = (byte) bitmap_line_xdyi::x#7 
Alias (byte) bitmap_line_xdyi::e#2 = (byte~) bitmap_line_xdyi::$5 
Alias (byte) bitmap_line_xdyd::e#0 = (byte~) bitmap_line_xdyd::$0 
Alias (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#4 
Alias (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#5 
Alias (byte) bitmap_line_xdyd::yd#3 = (byte) bitmap_line_xdyd::yd#4 (byte) bitmap_line_xdyd::yd#6 
Alias (byte) bitmap_line_xdyd::xd#2 = (byte) bitmap_line_xdyd::xd#4 (byte) bitmap_line_xdyd::xd#3 
Alias (byte) bitmap_line_xdyd::x1#3 = (byte) bitmap_line_xdyd::x1#4 (byte) bitmap_line_xdyd::x1#5 
Alias (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#7 (byte) bitmap_line_xdyd::y#4 
Alias (byte) bitmap_line_xdyd::e#1 = (byte~) bitmap_line_xdyd::$2 (byte) bitmap_line_xdyd::e#4 
Alias (byte) bitmap_line_xdyd::x#2 = (byte) bitmap_line_xdyd::x#7 
Alias (byte) bitmap_line_xdyd::e#2 = (byte~) bitmap_line_xdyd::$5 
Alias (byte) bitmap_line_ydxi::e#0 = (byte~) bitmap_line_ydxi::$0 
Alias (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#4 
Alias (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#5 
Alias (byte) bitmap_line_ydxi::xd#3 = (byte) bitmap_line_ydxi::xd#4 (byte) bitmap_line_ydxi::xd#6 
Alias (byte) bitmap_line_ydxi::yd#2 = (byte) bitmap_line_ydxi::yd#4 (byte) bitmap_line_ydxi::yd#3 
Alias (byte) bitmap_line_ydxi::y1#3 = (byte) bitmap_line_ydxi::y1#4 (byte) bitmap_line_ydxi::y1#5 
Alias (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#7 (byte) bitmap_line_ydxi::x#4 
Alias (byte) bitmap_line_ydxi::e#1 = (byte~) bitmap_line_ydxi::$2 (byte) bitmap_line_ydxi::e#4 
Alias (byte) bitmap_line_ydxi::y#2 = (byte) bitmap_line_ydxi::y#7 
Alias (byte) bitmap_line_ydxi::e#2 = (byte~) bitmap_line_ydxi::$5 
Alias (byte) bitmap_line_ydxd::e#0 = (byte~) bitmap_line_ydxd::$0 
Alias (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#5 (byte) bitmap_line_ydxd::y#4 
Alias (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#5 
Alias (byte) bitmap_line_ydxd::xd#3 = (byte) bitmap_line_ydxd::xd#4 (byte) bitmap_line_ydxd::xd#6 
Alias (byte) bitmap_line_ydxd::yd#2 = (byte) bitmap_line_ydxd::yd#4 (byte) bitmap_line_ydxd::yd#3 
Alias (byte) bitmap_line_ydxd::y1#3 = (byte) bitmap_line_ydxd::y1#4 (byte) bitmap_line_ydxd::y1#5 
Alias (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#7 (byte) bitmap_line_ydxd::x#4 
Alias (byte) bitmap_line_ydxd::e#1 = (byte~) bitmap_line_ydxd::$2 (byte) bitmap_line_ydxd::e#4 
Alias (byte) bitmap_line_ydxd::y#3 = (byte) bitmap_line_ydxd::y#8 
Alias (byte) bitmap_line_ydxd::e#2 = (byte~) bitmap_line_ydxd::$5 
Alias (byte*) print_screen#26 = (byte*) print_screen#33 (byte*) print_screen#38 
Alias (byte*) print_line_cursor#48 = (byte*) print_line_cursor#56 (byte*) print_line_cursor#61 
Alias (byte*) print_char_cursor#50 = (byte*) print_char_cursor#56 (byte*) print_char_cursor#61 
Alias (signed byte) form_cursor_count#28 = (signed byte) form_cursor_count#38 (signed byte) form_cursor_count#43 
Alias (byte) keyboard_events_size#57 = (byte) keyboard_events_size#80 (byte) keyboard_events_size#92 
Alias (byte) keyboard_modifiers#56 = (byte) keyboard_modifiers#76 (byte) keyboard_modifiers#83 
Alias (byte) form_field_idx#36 = (byte) form_field_idx#44 (byte) form_field_idx#48 
Alias (byte*) print_screen#13 = (byte*) print_screen#18 (byte*) print_screen#19 (byte*) print_screen#4 
Alias (byte*) print_line_cursor#10 = (byte*) print_line_cursor#39 (byte*) print_line_cursor#40 (byte*) print_line_cursor#27 
Alias (byte*) print_char_cursor#11 = (byte*) print_char_cursor#41 (byte*) print_char_cursor#42 (byte*) print_char_cursor#28 
Alias (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#18 (signed byte) form_cursor_count#19 (signed byte) form_cursor_count#11 
Alias (byte) keyboard_events_size#27 = (byte) keyboard_events_size#42 (byte) keyboard_events_size#43 (byte) keyboard_events_size#8 
Alias (byte) keyboard_modifiers#24 = (byte) keyboard_modifiers#38 (byte) keyboard_modifiers#39 (byte) keyboard_modifiers#9 
Alias (byte) form_field_idx#1 = (byte) form_field_idx#25 (byte) form_field_idx#26 (byte) form_field_idx#12 
Alias (byte*) print_screen#12 = (byte*) print_screen#3 (byte*) print_screen#25 
Alias (byte*) print_line_cursor#26 = (byte*) print_line_cursor#9 (byte*) print_line_cursor#47 
Alias (byte*) print_char_cursor#10 = (byte*) print_char_cursor#27 (byte*) print_char_cursor#49 
Alias (signed byte) form_cursor_count#0 = (signed byte) form_cursor_count#10 (signed byte) form_cursor_count#27 
Alias (byte) keyboard_events_size#25 = (byte) keyboard_events_size#6 
Alias (byte) keyboard_modifiers#22 = (byte) keyboard_modifiers#7 
Alias (byte) form_field_idx#0 = (byte) form_field_idx#11 (byte) form_field_idx#35 
Alias (byte) keyboard_events_size#26 = (byte) keyboard_events_size#7 
Alias (byte) keyboard_modifiers#23 = (byte) keyboard_modifiers#8 
Alias (dword) get_plane::return#0 = (dword~) get_plane::$29 
Alias (byte) get_plane::idx#10 = (byte) get_plane::idx#3 (byte) get_plane::idx#2 (byte) get_plane::idx#4 (byte) get_plane::idx#5 (byte) get_plane::idx#6 (byte) get_plane::idx#7 (byte) get_plane::idx#8 (byte) get_plane::idx#9 (byte) get_plane::idx#11 (byte) get_plane::idx#12 (byte) get_plane::idx#13 (byte) get_plane::idx#14 (byte) get_plane::idx#15 
Alias (dword) get_plane::return#1 = (dword~) get_plane::$28 
Alias (dword) get_plane::return#2 = (dword~) get_plane::$27 
Alias (dword) get_plane::return#3 = (dword~) get_plane::$26 
Alias (dword) get_plane::return#4 = (dword~) get_plane::$25 
Alias (dword) get_plane::return#5 = (dword~) get_plane::$24 
Alias (dword) get_plane::return#6 = (dword~) get_plane::$23 
Alias (dword) get_plane::return#7 = (dword~) get_plane::$22 
Alias (dword) get_plane::return#8 = (dword~) get_plane::$21 
Alias (dword) get_plane::return#9 = (dword~) get_plane::$20 
Alias (dword) get_plane::return#10 = (dword~) get_plane::$19 
Alias (dword) get_plane::return#11 = (dword~) get_plane::$18 
Alias (dword) get_plane::return#12 = (dword~) get_plane::$17 
Alias (dword) get_plane::return#13 = (dword~) get_plane::$16 
Alias (dword) get_plane::return#14 = (dword) get_plane::return#18 
Alias (dword) get_plane::return#15 = (dword~) get_plane::$15 
Alias (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#3 (byte) get_vic_screen::idx#4 (byte) get_vic_screen::idx#5 (byte) get_vic_screen::idx#6 
Alias (byte*) get_vic_screen::return#5 = (byte*) get_vic_screen::return#9 
Alias (byte) get_vic_charset::idx#1 = (byte) get_vic_charset::idx#2 
Alias (byte*) get_vic_charset::return#2 = (byte*) get_vic_charset::return#5 
Alias (byte) apply_preset::idx#1 = (byte) apply_preset::idx#2 (byte) apply_preset::idx#3 (byte) apply_preset::idx#4 (byte) apply_preset::idx#5 (byte) apply_preset::idx#6 (byte) apply_preset::idx#7 (byte) apply_preset::idx#8 (byte) apply_preset::idx#9 (byte) apply_preset::idx#10 (byte) apply_preset::idx#11 
Alias (byte*) apply_preset::preset#13 = (byte*) apply_preset::preset#14 
Alias (byte) apply_preset::i#2 = (byte) apply_preset::i#3 
Alias (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#3 (byte) render_preset_name::idx#2 (byte) render_preset_name::idx#4 (byte) render_preset_name::idx#5 (byte) render_preset_name::idx#6 (byte) render_preset_name::idx#7 (byte) render_preset_name::idx#8 (byte) render_preset_name::idx#9 (byte) render_preset_name::idx#11 (byte) render_preset_name::idx#12 
Alias (byte*) print_str_at::at#1 = (byte*~) render_preset_name::$12 
Alias (byte*) form_preset = (byte*~) $1 
Alias (byte*) form_ctrl_bmm = (byte*~) $2 
Alias (byte*) form_ctrl_mcm = (byte*~) $3 
Alias (byte*) form_ctrl_ecm = (byte*~) $4 
Alias (byte*) form_ctrl_hicol = (byte*~) $5 
Alias (byte*) form_ctrl_line = (byte*~) $6 
Alias (byte*) form_ctrl_colof = (byte*~) $7 
Alias (byte*) form_ctrl_chunk = (byte*~) $8 
Alias (byte*) form_ctrl_borof = (byte*~) $9 
Alias (byte*) form_ctrl_overs = (byte*~) $10 
Alias (byte*) form_a_pattern = (byte*~) $11 
Alias (byte*) form_a_start_hi = (byte*~) $12 
Alias (byte*) form_a_start_lo = (byte*~) $13 
Alias (byte*) form_a_step_hi = (byte*~) $14 
Alias (byte*) form_a_step_lo = (byte*~) $15 
Alias (byte*) form_a_mod_hi = (byte*~) $16 
Alias (byte*) form_a_mod_lo = (byte*~) $17 
Alias (byte*) form_b_pattern = (byte*~) $18 
Alias (byte*) form_b_start_hi = (byte*~) $19 
Alias (byte*) form_b_start_lo = (byte*~) $20 
Alias (byte*) form_b_step_hi = (byte*~) $21 
Alias (byte*) form_b_step_lo = (byte*~) $22 
Alias (byte*) form_b_mod_hi = (byte*~) $23 
Alias (byte*) form_b_mod_lo = (byte*~) $24 
Alias (byte*) form_vic_screen = (byte*~) $25 
Alias (byte*) form_vic_gfx = (byte*~) $26 
Alias (byte*) form_vic_cols = (byte*~) $27 
Alias (byte*) form_dtv_palet = (byte*~) $28 
Alias (byte*) form_vic_bg0_hi = (byte*~) $29 
Alias (byte*) form_vic_bg0_lo = (byte*~) $30 
Alias (byte*) form_vic_bg1_hi = (byte*~) $31 
Alias (byte*) form_vic_bg1_lo = (byte*~) $32 
Alias (byte*) form_vic_bg2_hi = (byte*~) $33 
Alias (byte*) form_vic_bg2_lo = (byte*~) $34 
Alias (byte*) form_vic_bg3_hi = (byte*~) $35 
Alias (byte*) form_vic_bg3_lo = (byte*~) $36 
Alias (byte) gfx_mode::dtv_control#0 = (byte) gfx_mode::dtv_control#7 
Alias (byte) keyboard_events_size#147 = (byte) keyboard_events_size#148 
Alias (byte) keyboard_modifiers#128 = (byte) keyboard_modifiers#129 
Alias (byte) gfx_mode::dtv_control#1 = (byte~) gfx_mode::$73 
Alias (byte) gfx_mode::dtv_control#14 = (byte) gfx_mode::dtv_control#8 
Alias (byte) keyboard_events_size#145 = (byte) keyboard_events_size#146 
Alias (byte) keyboard_modifiers#126 = (byte) keyboard_modifiers#127 
Alias (byte) gfx_mode::dtv_control#2 = (byte~) gfx_mode::$74 
Alias (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#9 
Alias (byte) keyboard_events_size#143 = (byte) keyboard_events_size#144 
Alias (byte) keyboard_modifiers#124 = (byte) keyboard_modifiers#125 
Alias (byte) gfx_mode::dtv_control#3 = (byte~) gfx_mode::$75 
Alias (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#16 
Alias (byte) keyboard_events_size#141 = (byte) keyboard_events_size#142 
Alias (byte) keyboard_modifiers#122 = (byte) keyboard_modifiers#123 
Alias (byte) gfx_mode::dtv_control#4 = (byte~) gfx_mode::$76 
Alias (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#17 
Alias (byte) keyboard_events_size#139 = (byte) keyboard_events_size#140 
Alias (byte) keyboard_modifiers#120 = (byte) keyboard_modifiers#121 
Alias (byte) gfx_mode::dtv_control#5 = (byte~) gfx_mode::$77 
Alias (byte) gfx_mode::vic_control#0 = (byte~) gfx_mode::$13 (byte) gfx_mode::vic_control#3 
Alias (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#18 
Alias (byte) keyboard_events_size#137 = (byte) keyboard_events_size#138 
Alias (byte) keyboard_modifiers#118 = (byte) keyboard_modifiers#119 
Alias (byte) gfx_mode::dtv_control#6 = (byte~) gfx_mode::$78 
Alias (byte) keyboard_events_size#135 = (byte) keyboard_events_size#136 
Alias (byte) keyboard_modifiers#116 = (byte) keyboard_modifiers#117 
Alias (byte) gfx_mode::vic_control#1 = (byte~) gfx_mode::$79 
Alias (byte) gfx_mode::vic_control#5 = (byte) gfx_mode::vic_control#6 
Alias (byte) keyboard_events_size#133 = (byte) keyboard_events_size#134 
Alias (byte) keyboard_modifiers#114 = (byte) keyboard_modifiers#115 
Alias (byte) gfx_mode::vic_control#2 = (byte~) gfx_mode::$80 
Alias (byte) gfx_mode::plane_a_offs#0 = (byte~) gfx_mode::$21 (byte) gfx_mode::plane_a_offs#1 
Alias (dword) get_plane::return#16 = (dword) get_plane::return#19 
Alias (byte) keyboard_events_size#119 = (byte) keyboard_events_size#127 (byte) keyboard_events_size#129 (byte) keyboard_events_size#125 (byte) keyboard_events_size#123 (byte) keyboard_events_size#121 
Alias (byte) keyboard_modifiers#100 = (byte) keyboard_modifiers#108 (byte) keyboard_modifiers#110 (byte) keyboard_modifiers#106 (byte) keyboard_modifiers#104 (byte) keyboard_modifiers#102 
Alias (dword) gfx_mode::plane_a#0 = (dword~) gfx_mode::$23 
Alias (byte) gfx_mode::plane_b_offs#0 = (byte~) gfx_mode::$35 (byte) gfx_mode::plane_b_offs#1 
Alias (dword) get_plane::return#17 = (dword) get_plane::return#20 
Alias (dword) gfx_mode::plane_b#0 = (dword~) gfx_mode::$37 
Alias (byte*) get_vic_screen::return#10 = (byte*) get_vic_screen::return#7 
Alias (byte*) get_vic_charset::return#4 = (byte*) get_vic_charset::return#6 
Alias (byte*) get_vic_screen::return#11 = (byte*) get_vic_screen::return#8 
Alias (byte*) gfx_mode::vic_colors#0 = (byte*~) gfx_mode::$63 
Alias (byte) gfx_mode::vic_control2#0 = (byte) gfx_mode::vic_control2#3 
Alias (byte) keyboard_events_size#131 = (byte) keyboard_events_size#132 
Alias (byte) keyboard_modifiers#112 = (byte) keyboard_modifiers#113 
Alias (byte) gfx_mode::vic_control2#1 = (byte~) gfx_mode::$81 
Alias (byte) gfx_mode::cy#2 = (byte) gfx_mode::cy#3 
Alias (byte*) gfx_mode::vic_colors#1 = (byte*) gfx_mode::vic_colors#4 
Alias (byte*) gfx_mode::col#1 = (byte*) gfx_mode::col#4 
Alias (byte) keyboard_events_size#104 = (byte) keyboard_events_size#112 (byte) keyboard_events_size#94 (byte) keyboard_events_size#82 (byte) keyboard_events_size#81 
Alias (byte) keyboard_modifiers#77 = (byte) keyboard_modifiers#91 (byte) keyboard_modifiers#96 (byte) keyboard_modifiers#85 (byte) keyboard_modifiers#78 
Alias (byte) keyboard_events_size#44 = (byte) keyboard_events_size#60 
Alias (byte) keyboard_modifiers#40 = (byte) keyboard_modifiers#59 
Alias (byte) keyboard_events_size#28 = (byte) keyboard_events_size#9 
Alias (byte) keyboard_modifiers#10 = (byte) keyboard_modifiers#25 (byte) keyboard_modifiers#42 
Alias (byte) keyboard_event_get::return#3 = (byte) keyboard_event_get::return#6 
Alias (byte) keyboard_events_size#10 = (byte) keyboard_events_size#29 
Alias (byte) gfx_mode::keyboard_event#0 = (byte~) gfx_mode::$88 
Alias (byte) keyboard_events_size#11 = (byte) keyboard_events_size#30 
Alias (byte) keyboard_modifiers#11 = (byte) keyboard_modifiers#26 
Alias (byte) gfx_init_charset::c#2 = (byte) gfx_init_charset::c#3 
Alias (byte*) gfx_init_charset::chargen#1 = (byte*) gfx_init_charset::chargen#4 
Alias (byte*) gfx_init_charset::charset#1 = (byte*) gfx_init_charset::charset#4 
Alias (byte) gfx_init_screen0::cy#2 = (byte) gfx_init_screen0::cy#3 
Alias (byte*) gfx_init_screen0::ch#1 = (byte*) gfx_init_screen0::ch#4 
Alias (byte) gfx_init_screen1::cy#2 = (byte) gfx_init_screen1::cy#3 
Alias (byte*) gfx_init_screen1::ch#1 = (byte*) gfx_init_screen1::ch#4 
Alias (byte) gfx_init_screen2::col#0 = (byte~) gfx_init_screen2::$1 
Alias (byte) gfx_init_screen2::col2#0 = (byte~) gfx_init_screen2::$2 
Alias (byte) gfx_init_screen2::cy#2 = (byte) gfx_init_screen2::cy#3 
Alias (byte*) gfx_init_screen2::ch#1 = (byte*) gfx_init_screen2::ch#4 
Alias (byte) gfx_init_screen3::cy#2 = (byte) gfx_init_screen3::cy#3 
Alias (byte*) gfx_init_screen3::ch#1 = (byte*) gfx_init_screen3::ch#4 
Alias (byte) gfx_init_screen4::cy#2 = (byte) gfx_init_screen4::cy#3 
Alias (byte*) gfx_init_screen4::ch#1 = (byte*) gfx_init_screen4::ch#4 
Alias (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#3 (byte) gfx_init_vic_bitmap::l#4 
Alias (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte~) gfx_init_plane_8bppchunky::$1 (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#3 
Alias (byte) gfx_init_plane_8bppchunky::c#0 = (byte~) gfx_init_plane_8bppchunky::$9 
Alias (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#6 (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#5 
Alias (word) gfx_init_plane_8bppchunky::x#3 = (word) gfx_init_plane_8bppchunky::x#5 (word) gfx_init_plane_8bppchunky::x#4 
Alias (byte) gfx_init_plane_8bppchunky::y#4 = (byte) gfx_init_plane_8bppchunky::y#7 (byte) gfx_init_plane_8bppchunky::y#5 
Alias (byte) gfx_init_plane_8bppchunky::y#2 = (byte) gfx_init_plane_8bppchunky::y#3 
Alias (byte*) gfx_init_plane_8bppchunky::gfxb#1 = (byte*) gfx_init_plane_8bppchunky::gfxb#6 
Alias (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#9 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte~) gfx_init_plane_8bppchunky::$3 
Alias (byte) gfx_init_plane_horisontal::gfxbCpuBank#0 = (byte~) gfx_init_plane_horisontal::$1 (byte) gfx_init_plane_horisontal::gfxbCpuBank#2 
Alias (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#5 (byte*) gfx_init_plane_horisontal::gfxa#4 
Alias (byte) gfx_init_plane_horisontal::ax#3 = (byte) gfx_init_plane_horisontal::ax#5 (byte) gfx_init_plane_horisontal::ax#4 
Alias (byte) gfx_init_plane_horisontal::ay#2 = (byte) gfx_init_plane_horisontal::ay#6 (byte) gfx_init_plane_horisontal::ay#7 
Alias (byte) gfx_init_plane_horisontal::ay#3 = (byte) gfx_init_plane_horisontal::ay#5 
Alias (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#8 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#4 = (byte~) gfx_init_plane_horisontal::$5 
Alias (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 = (byte~) gfx_init_plane_horisontal2::$1 (byte) gfx_init_plane_horisontal2::gfxbCpuBank#2 
Alias (byte) gfx_init_plane_horisontal2::row#0 = (byte~) gfx_init_plane_horisontal2::$8 
Alias (byte) gfx_init_plane_horisontal2::ay#2 = (byte) gfx_init_plane_horisontal2::ay#3 
Alias (byte*) gfx_init_plane_horisontal2::gfxa#1 = (byte*) gfx_init_plane_horisontal2::gfxa#4 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#6 = (byte~) gfx_init_plane_horisontal2::$5 
Alias (byte) gfx_init_plane_vertical::gfxbCpuBank#0 = (byte~) gfx_init_plane_vertical::$1 (byte) gfx_init_plane_vertical::gfxbCpuBank#2 
Alias (byte) gfx_init_plane_vertical::by#2 = (byte) gfx_init_plane_vertical::by#3 
Alias (byte*) gfx_init_plane_vertical::gfxb#1 = (byte*) gfx_init_plane_vertical::gfxb#4 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#8 = (byte~) gfx_init_plane_vertical::$5 
Alias (byte) gfx_init_plane_charset8::gfxbCpuBank#0 = (byte~) gfx_init_plane_charset8::$1 (byte) gfx_init_plane_charset8::gfxbCpuBank#2 
Alias (byte) gfx_init_plane_charset8::bits#1 = (byte~) gfx_init_plane_charset8::$10 
Alias (byte) gfx_init_plane_charset8::col#3 = (byte) gfx_init_plane_charset8::col#4 (byte) gfx_init_plane_charset8::c#1 
Alias (byte*) gfx_init_plane_charset8::gfxa#3 = (byte*) gfx_init_plane_charset8::gfxa#4 
Alias (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#4 
Alias (byte) gfx_init_plane_charset8::cp#3 = (byte) gfx_init_plane_charset8::cp#4 
Alias (byte) gfx_init_plane_charset8::cr#4 = (byte) gfx_init_plane_charset8::cr#5 
Alias (byte*) gfx_init_plane_charset8::chargen#7 = (byte*) gfx_init_plane_charset8::chargen#8 
Alias (byte) gfx_init_plane_charset8::ch#5 = (byte) gfx_init_plane_charset8::ch#6 
Alias (byte) gfx_init_plane_charset8::cr#2 = (byte) gfx_init_plane_charset8::cr#3 
Alias (byte*) gfx_init_plane_charset8::chargen#4 = (byte*) gfx_init_plane_charset8::chargen#6 (byte*) gfx_init_plane_charset8::chargen#5 
Alias (byte) gfx_init_plane_charset8::ch#2 = (byte) gfx_init_plane_charset8::ch#3 (byte) gfx_init_plane_charset8::ch#4 
Alias (byte*) gfx_init_plane_charset8::gfxa#1 = (byte*) gfx_init_plane_charset8::gfxa#7 (byte*) gfx_init_plane_charset8::gfxa#8 
Alias (byte) gfx_init_plane_charset8::col#1 = (byte) gfx_init_plane_charset8::col#7 (byte) gfx_init_plane_charset8::col#8 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#10 = (byte~) gfx_init_plane_charset8::$5 
Alias (byte) gfx_init_plane_fill::gfxbCpuBank#0 = (byte~) gfx_init_plane_fill::$2 (byte) gfx_init_plane_fill::gfxbCpuBank#2 
Alias (dword) gfx_init_plane_fill::plane_addr#3 = (dword) gfx_init_plane_fill::plane_addr#4 
Alias (byte) gfx_init_plane_fill::fill#6 = (byte) gfx_init_plane_fill::fill#7 
Alias (byte) gfx_init_plane_fill::by#2 = (byte) gfx_init_plane_fill::by#3 
Alias (byte) gfx_init_plane_fill::fill#3 = (byte) gfx_init_plane_fill::fill#5 
Alias (byte*) gfx_init_plane_fill::gfxb#1 = (byte*) gfx_init_plane_fill::gfxb#4 
Alias (byte) dtvSetCpuBankSegment1::cpuBankIdx#12 = (byte~) gfx_init_plane_fill::$7 
Alias (signed byte) form_cursor_count#44 = (signed byte) form_cursor_count#59 (signed byte) form_cursor_count#60 (signed byte) form_cursor_count#58 (signed byte) form_cursor_count#57 (signed byte) form_cursor_count#56 (signed byte) form_cursor_count#55 (signed byte) form_cursor_count#52 (signed byte) form_cursor_count#50 (signed byte) form_cursor_count#47 
Alias (byte) keyboard_events_size#105 = (byte) keyboard_events_size#128 (byte) keyboard_events_size#130 (byte) keyboard_events_size#126 (byte) keyboard_events_size#124 (byte) keyboard_events_size#122 (byte) keyboard_events_size#120 (byte) keyboard_events_size#117 (byte) keyboard_events_size#113 (byte) keyboard_events_size#95 
Alias (byte) keyboard_modifiers#101 = (byte) keyboard_modifiers#109 (byte) keyboard_modifiers#111 (byte) keyboard_modifiers#107 (byte) keyboard_modifiers#105 (byte) keyboard_modifiers#103 (byte) keyboard_modifiers#99 (byte) keyboard_modifiers#97 (byte) keyboard_modifiers#92 (byte) keyboard_modifiers#86 
Alias (byte) form_field_idx#49 = (byte) form_field_idx#65 (byte) form_field_idx#66 (byte) form_field_idx#64 (byte) form_field_idx#63 (byte) form_field_idx#62 (byte) form_field_idx#61 (byte) form_field_idx#58 (byte) form_field_idx#56 (byte) form_field_idx#52 
Alias (byte*) print_screen#14 = (byte*) print_screen#5 (byte*) print_screen#27 (byte*) print_screen#21 
Alias (byte*) print_line_cursor#11 = (byte*) print_line_cursor#28 
Alias (byte*) print_char_cursor#12 = (byte*) print_char_cursor#29 
Alias (byte*) print_line_cursor#12 = (byte*) print_line_cursor#29 
Alias (byte*) print_char_cursor#13 = (byte*) print_char_cursor#30 
Alias (byte*) print_char_cursor#14 = (byte*) print_char_cursor#31 
Alias (byte*) print_line_cursor#13 = (byte*) print_line_cursor#30 
Alias (byte*) print_screen#15 = (byte*) print_screen#6 (byte*) print_screen#50 (byte*) print_screen#48 (byte*) print_screen#46 (byte*) print_screen#43 (byte*) print_screen#40 
Alias (byte*) print_line_cursor#14 = (byte*) print_line_cursor#31 
Alias (byte*) print_char_cursor#15 = (byte*) print_char_cursor#32 
Alias (byte*) print_line_cursor#15 = (byte*) print_line_cursor#32 
Alias (byte*) print_char_cursor#16 = (byte*) print_char_cursor#33 
Alias (byte*) print_char_cursor#17 = (byte*) print_char_cursor#34 (byte*) print_char_cursor#69 (byte*) print_char_cursor#66 (byte*) print_char_cursor#63 
Alias (byte*) print_line_cursor#16 = (byte*) print_line_cursor#33 (byte*) print_line_cursor#69 (byte*) print_line_cursor#66 (byte*) print_line_cursor#63 
Alias (byte*) print_screen#29 = (byte*) print_screen#34 
Alias (byte*) print_line_cursor#50 = (byte*) print_line_cursor#57 
Alias (byte*) print_char_cursor#52 = (byte*) print_char_cursor#57 
Alias (signed byte) form_cursor_count#30 = (signed byte) form_cursor_count#39 
Alias (byte) keyboard_events_size#62 = (byte) keyboard_events_size#83 
Alias (byte) keyboard_modifiers#61 = (byte) keyboard_modifiers#79 
Alias (byte) form_field_idx#38 = (byte) form_field_idx#45 
Alias (signed byte) form_cursor_count#20 = (signed byte) form_cursor_count#32 
Alias (byte) keyboard_events_size#46 = (byte) keyboard_events_size#64 
Alias (byte) keyboard_modifiers#43 = (byte) keyboard_modifiers#63 
Alias (byte) form_field_idx#27 = (byte) form_field_idx#40 
Alias (byte) form_mode::preset_current#2 = (byte) form_mode::preset_current#4 (byte) form_mode::preset_current#5 (byte) form_mode::preset_current#3 
Alias (byte*) print_screen#23 = (byte*) print_screen#31 (byte*) print_screen#35 (byte*) print_screen#28 (byte*) print_screen#44 (byte*) print_screen#41 (byte*) print_screen#36 (byte*) print_screen#30 
Alias (byte*) print_line_cursor#43 = (byte*) print_line_cursor#52 (byte*) print_line_cursor#58 (byte*) print_line_cursor#49 (byte*) print_line_cursor#67 (byte*) print_line_cursor#64 (byte*) print_line_cursor#59 (byte*) print_line_cursor#51 
Alias (byte*) print_char_cursor#45 = (byte*) print_char_cursor#54 (byte*) print_char_cursor#58 (byte*) print_char_cursor#51 (byte*) print_char_cursor#67 (byte*) print_char_cursor#64 (byte*) print_char_cursor#59 (byte*) print_char_cursor#53 
Alias (byte) form_control::return#0 = (byte) form_control::return#6 
Alias (signed byte) form_cursor_count#12 = (signed byte) form_cursor_count#2 (signed byte) form_cursor_count#29 (signed byte) form_cursor_count#48 (signed byte) form_cursor_count#45 (signed byte) form_cursor_count#40 (signed byte) form_cursor_count#31 
Alias (byte) keyboard_events_size#106 = (byte) keyboard_events_size#12 (byte) keyboard_events_size#31 (byte) keyboard_events_size#61 (byte) keyboard_events_size#96 (byte) keyboard_events_size#84 (byte) keyboard_events_size#63 
Alias (byte) keyboard_modifiers#12 = (byte) keyboard_modifiers#27 (byte) keyboard_modifiers#60 (byte) keyboard_modifiers#93 (byte) keyboard_modifiers#87 (byte) keyboard_modifiers#80 (byte) keyboard_modifiers#62 
Alias (byte) form_field_idx#13 = (byte) form_field_idx#2 (byte) form_field_idx#37 (byte) form_field_idx#53 (byte) form_field_idx#50 (byte) form_field_idx#46 (byte) form_field_idx#39 
Alias (byte*) print_screen#16 = (byte*) print_screen#7 
Alias (byte*) print_line_cursor#17 = (byte*) print_line_cursor#34 
Alias (byte*) print_char_cursor#18 = (byte*) print_char_cursor#35 
Alias (signed byte) form_cursor_count#13 = (signed byte) form_cursor_count#3 
Alias (byte) keyboard_events_size#13 = (byte) keyboard_events_size#32 
Alias (byte) keyboard_modifiers#13 = (byte) keyboard_modifiers#28 
Alias (byte) form_field_idx#14 = (byte) form_field_idx#3 
Alias (byte) form_mode::preset_current#1 = (byte) form_mode::preset_current#8 (byte) form_mode::preset_current#7 
Alias (signed byte) form_cursor_count#26 = (signed byte) form_cursor_count#4 (signed byte~) $37 
Alias (byte*) form_set_screen::line#0 = (byte*) form_set_screen::screen#1 
Alias (byte*) form_set_screen::line#1 = (byte*~) form_set_screen::$2 
Alias (byte*) form_field_ptr::line#0 = (byte*~) form_field_ptr::$0 
Alias (byte*) form_field_ptr::return#0 = (byte*) form_field_ptr::field#0 (byte*~) form_field_ptr::$1 (byte*) form_field_ptr::return#4 (byte*) form_field_ptr::return#1 
Alias (byte) form_render_values::idx#2 = (byte) form_render_values::idx#3 (byte) form_render_values::idx#4 
Alias (byte*) form_field_ptr::return#2 = (byte*) form_field_ptr::return#5 
Alias (byte*) form_render_values::field#0 = (byte*~) form_render_values::$1 
Alias (byte*) form_field_ptr::return#3 = (byte*) form_field_ptr::return#6 
Alias (signed byte) form_cursor_count#14 = (signed byte) form_cursor_count#22 
Alias (byte) keyboard_events_size#107 = (byte) keyboard_events_size#97 (byte) keyboard_events_size#98 
Alias (byte) keyboard_modifiers#88 = (byte) keyboard_modifiers#94 (byte) keyboard_modifiers#89 
Alias (byte) form_field_idx#15 = (byte) form_field_idx#59 (byte) form_field_idx#60 
Alias (byte*) form_control::field#0 = (byte*~) form_control::$0 (byte*) form_control::field#11 
Alias (byte*) form_control::field#1 = (byte*) form_control::field#5 (byte*) form_control::field#2 
Alias (byte) keyboard_events_size#65 = (byte) keyboard_events_size#86 (byte) keyboard_events_size#66 
Alias (byte) keyboard_modifiers#64 = (byte) keyboard_modifiers#82 (byte) keyboard_modifiers#65 
Alias (byte) form_field_idx#54 = (byte) form_field_idx#57 (byte) form_field_idx#55 
Alias (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#53 (signed byte) form_cursor_count#54 
Alias (byte*) form_control::field#10 = (byte*) form_control::field#12 (byte*) form_control::field#14 (byte*) form_control::field#6 (byte*) form_control::field#15 (byte*) form_control::field#3 (byte*) form_control::field#13 (byte*) form_control::field#9 (byte*) form_control::field#7 (byte*) form_control::field#8 
Alias (byte) form_field_idx#16 = (byte) form_field_idx#47 (byte) form_field_idx#51 (byte) form_field_idx#41 (byte) form_field_idx#42 (byte) form_field_idx#29 (byte) form_field_idx#17 (byte) form_field_idx#43 (byte) form_field_idx#33 (byte) form_field_idx#19 (byte) form_field_idx#20 (byte) form_field_idx#21 (byte) form_field_idx#23 (byte) form_field_idx#32 (byte) form_field_idx#30 
Alias (signed byte) form_cursor_count#23 = (signed byte) form_cursor_count#49 (signed byte) form_cursor_count#51 (signed byte) form_cursor_count#46 (signed byte) form_cursor_count#41 (signed byte) form_cursor_count#37 (signed byte) form_cursor_count#42 (signed byte) form_cursor_count#35 (signed byte) form_cursor_count#33 (signed byte) form_cursor_count#34 (signed byte) form_cursor_count#36 (signed byte) form_cursor_count#25 
Alias (byte) keyboard_events_size#14 = (byte) keyboard_events_size#33 
Alias (byte) keyboard_modifiers#14 = (byte) keyboard_modifiers#29 (byte) keyboard_modifiers#46 (byte) keyboard_modifiers#51 (byte) keyboard_modifiers#30 (byte) keyboard_modifiers#68 (byte) keyboard_modifiers#66 (byte) keyboard_modifiers#67 (byte) keyboard_modifiers#69 (byte) keyboard_modifiers#74 (byte) keyboard_modifiers#32 (byte) keyboard_modifiers#72 (byte) keyboard_modifiers#70 (byte) keyboard_modifiers#71 (byte) keyboard_modifiers#73 (byte) keyboard_modifiers#50 (byte) keyboard_modifiers#47 
Alias (byte) keyboard_event_get::return#4 = (byte) keyboard_event_get::return#7 
Alias (byte) keyboard_events_size#15 = (byte) keyboard_events_size#34 (byte) keyboard_events_size#88 (byte) keyboard_events_size#87 (byte) keyboard_events_size#69 (byte) keyboard_events_size#67 (byte) keyboard_events_size#68 (byte) keyboard_events_size#70 (byte) keyboard_events_size#75 (byte) keyboard_events_size#89 (byte) keyboard_events_size#73 (byte) keyboard_events_size#71 (byte) keyboard_events_size#72 (byte) keyboard_events_size#74 (byte) keyboard_events_size#52 (byte) keyboard_events_size#49 
Alias (byte) form_control::key_event#0 = (byte~) form_control::$6 (byte) form_control::key_event#1 (byte) form_control::key_event#2 
Alias (byte) form_field_idx#7 = (byte~) form_control::$20 
Alias (signed byte) form_cursor_count#7 = (signed byte~) form_control::$23 
Alias (byte) form_control::return#2 = (byte) form_control::return#7 
Alias (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#8 
Alias (byte) keyboard_events_size#16 = (byte) keyboard_events_size#35 
Alias (byte) keyboard_modifiers#15 = (byte) keyboard_modifiers#31 
Alias (byte) form_field_idx#18 = (byte) form_field_idx#9 
Alias (byte) form_field_idx#34 = (byte) form_field_idx#4 
Alias (byte*) print_screen#17 = (byte*) print_screen#8 
Alias (byte*) print_line_cursor#18 = (byte*) print_line_cursor#35 
Alias (byte*) print_char_cursor#19 = (byte*) print_char_cursor#36 
Alias (signed byte) form_cursor_count#17 = (signed byte) form_cursor_count#9 
Alias (byte) keyboard_events_size#17 = (byte) keyboard_events_size#36 
Alias (byte) keyboard_modifiers#16 = (byte) keyboard_modifiers#33 
Alias (byte) form_field_idx#10 = (byte) form_field_idx#24 
Successful SSA optimization Pass2AliasElimination
Alias (byte) print_str_lines::ch#0 = (byte) print_str_lines::ch#1 
Alias (byte*) print_str_lines::str#0 = (byte*) print_str_lines::str#6 
Alias (byte*) print_line_cursor#36 = (byte*) print_line_cursor#54 
Alias (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#4 
Alias (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#3 
Alias (byte) keyboard_event_scan::row_scan#1 = (byte) keyboard_event_scan::row_scan#3 
Alias (byte) keyboard_event_scan::row#10 = (byte) keyboard_event_scan::row#6 
Alias (byte) keyboard_events_size#100 = (byte) keyboard_events_size#101 (byte) keyboard_events_size#78 (byte) keyboard_events_size#39 (byte) keyboard_events_size#21 
Alias (byte) bitmap_init::x#2 = (byte) bitmap_init::x#3 
Alias (byte*) bitmap_init::bitmap#1 = (byte*) bitmap_init::bitmap#3 
Alias (byte) bitmap_init::y#2 = (byte) bitmap_init::y#3 
Alias (byte) bitmap_line_xdyi::x1#2 = (byte) bitmap_line_xdyi::x1#3 
Alias (byte) bitmap_line_xdyi::x#2 = (byte) bitmap_line_xdyi::x#5 
Alias (byte) bitmap_line_xdyi::yd#3 = (byte) bitmap_line_xdyi::yd#5 
Alias (byte) bitmap_line_xdyi::xd#2 = (byte) bitmap_line_xdyi::xd#6 
Alias (byte) bitmap_line_xdyd::x1#2 = (byte) bitmap_line_xdyd::x1#3 
Alias (byte) bitmap_line_xdyd::x#2 = (byte) bitmap_line_xdyd::x#5 
Alias (byte) bitmap_line_xdyd::yd#3 = (byte) bitmap_line_xdyd::yd#5 
Alias (byte) bitmap_line_xdyd::xd#2 = (byte) bitmap_line_xdyd::xd#6 
Alias (byte) bitmap_line_ydxi::y1#2 = (byte) bitmap_line_ydxi::y1#3 
Alias (byte) bitmap_line_ydxi::y#2 = (byte) bitmap_line_ydxi::y#5 
Alias (byte) bitmap_line_ydxi::xd#3 = (byte) bitmap_line_ydxi::xd#5 
Alias (byte) bitmap_line_ydxi::yd#2 = (byte) bitmap_line_ydxi::yd#6 
Alias (byte) bitmap_line_ydxd::y1#2 = (byte) bitmap_line_ydxd::y1#3 
Alias (byte) bitmap_line_ydxd::y#3 = (byte) bitmap_line_ydxd::y#6 
Alias (byte) bitmap_line_ydxd::xd#3 = (byte) bitmap_line_ydxd::xd#5 
Alias (byte) bitmap_line_ydxd::yd#2 = (byte) bitmap_line_ydxd::yd#6 
Alias (byte) keyboard_events_size#119 = (byte) keyboard_events_size#145 (byte) keyboard_events_size#147 (byte) keyboard_events_size#143 (byte) keyboard_events_size#141 (byte) keyboard_events_size#139 (byte) keyboard_events_size#137 (byte) keyboard_events_size#135 (byte) keyboard_events_size#133 (byte) keyboard_events_size#131 
Alias (byte) keyboard_modifiers#100 = (byte) keyboard_modifiers#126 (byte) keyboard_modifiers#128 (byte) keyboard_modifiers#124 (byte) keyboard_modifiers#122 (byte) keyboard_modifiers#120 (byte) keyboard_modifiers#118 (byte) keyboard_modifiers#116 (byte) keyboard_modifiers#114 (byte) keyboard_modifiers#112 
Alias (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#3 
Alias (byte) gfx_init_plane_8bppchunky::y#2 = (byte) gfx_init_plane_8bppchunky::y#4 
Alias (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#3 
Alias (byte) gfx_init_plane_horisontal::ay#2 = (byte) gfx_init_plane_horisontal::ay#3 
Alias (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#3 
Alias (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#3 
Alias (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#3 
Alias (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#3 
Alias (byte) gfx_init_plane_charset8::cr#2 = (byte) gfx_init_plane_charset8::cr#4 
Alias (byte*) gfx_init_plane_charset8::chargen#4 = (byte*) gfx_init_plane_charset8::chargen#7 
Alias (byte) gfx_init_plane_charset8::ch#2 = (byte) gfx_init_plane_charset8::ch#5 
Alias (byte*) form_control::field#0 = (byte*) form_control::field#1 (byte*) form_control::field#10 (byte*) form_control::field#4 
Alias (byte) keyboard_events_size#107 = (byte) keyboard_events_size#65 (byte) keyboard_events_size#48 
Alias (byte) keyboard_modifiers#45 = (byte) keyboard_modifiers#64 (byte) keyboard_modifiers#88 
Alias (byte) form_field_idx#15 = (byte) form_field_idx#54 (byte) form_field_idx#16 (byte) form_field_idx#22 
Alias (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#23 (signed byte) form_cursor_count#24 
Alias (byte) keyboard_events_size#15 = (byte) keyboard_events_size#50 (byte) keyboard_events_size#51 
Alias (byte) keyboard_modifiers#14 = (byte) keyboard_modifiers#48 (byte) keyboard_modifiers#49 
Successful SSA optimization Pass2AliasElimination
Alias (byte) keyboard_events_size#15 = (byte) keyboard_events_size#16 
Alias (byte) keyboard_modifiers#14 = (byte) keyboard_modifiers#15 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (word) memset::num#1 (word) memset::num#0
Identical Phi Values (void*) memset::str#2 (void*) memset::str#0
Identical Phi Values (byte) memset::c#3 (byte) memset::c#0
Identical Phi Values (byte*) memset::end#1 (byte*) memset::end#0
Identical Phi Values (void*) memset::str#4 (void*) memset::str#2
Identical Phi Values (byte) memset::c#1 (byte) memset::c#3
Identical Phi Values (byte*) print_line_cursor#36 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_line_cursor#1 (byte*) print_line_cursor#22
Identical Phi Values (byte*) print_char_cursor#2 (byte*) print_line_cursor#22
Identical Phi Values (byte*) print_str_at::str#4 (byte*) print_str_at::str#1
Identical Phi Values (byte*) print_str_at::at#4 (byte*) print_str_at::at#1
Identical Phi Values (byte*) print_line_cursor#38 (byte*) print_line_cursor#36
Identical Phi Values (byte*) print_char_cursor#40 (byte*) print_char_cursor#38
Identical Phi Values (byte*) print_char_cursor#23 (byte*) print_char_cursor#40
Identical Phi Values (byte) keyboard_matrix_read::rowid#1 (byte) keyboard_matrix_read::rowid#0
Identical Phi Values (byte) keyboard_event_scan::row_scan#1 (byte) keyboard_event_scan::row_scan#0
Identical Phi Values (byte) keyboard_event_scan::row#10 (byte) keyboard_event_scan::row#2
Identical Phi Values (byte*) bitmap_init::bitmap#2 (byte*) bitmap_init::bitmap#0
Identical Phi Values (byte*) bitmap_init::bitmap#1 (byte*) bitmap_init::bitmap#2
Identical Phi Values (byte) bitmap_clear::y#2 (byte) bitmap_clear::y#4
Identical Phi Values (byte) bitmap_line::x0#1 (byte) bitmap_line::x0#0
Identical Phi Values (byte) bitmap_line::x1#1 (byte) bitmap_line::x1#0
Identical Phi Values (byte) bitmap_line::y0#1 (byte) bitmap_line::y0#0
Identical Phi Values (byte) bitmap_line::y1#1 (byte) bitmap_line::y1#0
Identical Phi Values (byte) bitmap_line_xdyi::yd#3 (byte) bitmap_line_xdyi::yd#2
Identical Phi Values (byte) bitmap_line_xdyi::xd#2 (byte) bitmap_line_xdyi::xd#5
Identical Phi Values (byte) bitmap_line_xdyi::x1#2 (byte) bitmap_line_xdyi::x1#6
Identical Phi Values (byte) bitmap_line_xdyd::yd#3 (byte) bitmap_line_xdyd::yd#2
Identical Phi Values (byte) bitmap_line_xdyd::xd#2 (byte) bitmap_line_xdyd::xd#5
Identical Phi Values (byte) bitmap_line_xdyd::x1#2 (byte) bitmap_line_xdyd::x1#6
Identical Phi Values (byte) bitmap_line_ydxi::xd#3 (byte) bitmap_line_ydxi::xd#2
Identical Phi Values (byte) bitmap_line_ydxi::yd#2 (byte) bitmap_line_ydxi::yd#5
Identical Phi Values (byte) bitmap_line_ydxi::y1#2 (byte) bitmap_line_ydxi::y1#6
Identical Phi Values (byte) bitmap_line_ydxd::xd#3 (byte) bitmap_line_ydxd::xd#2
Identical Phi Values (byte) bitmap_line_ydxd::yd#2 (byte) bitmap_line_ydxd::yd#5
Identical Phi Values (byte) bitmap_line_ydxd::y1#2 (byte) bitmap_line_ydxd::y1#6
Identical Phi Values (byte*) print_screen#26 (byte*) print_screen#0
Identical Phi Values (byte*) print_line_cursor#48 (byte*) print_screen#0
Identical Phi Values (byte*) print_char_cursor#50 (byte*) print_screen#0
Identical Phi Values (signed byte) form_cursor_count#28 (signed byte) form_cursor_count#26
Identical Phi Values (byte) keyboard_events_size#57 (byte) keyboard_events_size#0
Identical Phi Values (byte) keyboard_modifiers#56 (byte) keyboard_modifiers#0
Identical Phi Values (byte) form_field_idx#36 (byte) form_field_idx#34
Identical Phi Values (byte*) print_screen#12 (byte*) print_screen#16
Identical Phi Values (byte*) print_line_cursor#26 (byte*) print_line_cursor#17
Identical Phi Values (byte*) print_char_cursor#10 (byte*) print_char_cursor#18
Identical Phi Values (signed byte) form_cursor_count#0 (signed byte) form_cursor_count#13
Identical Phi Values (byte) keyboard_events_size#25 (byte) keyboard_events_size#13
Identical Phi Values (byte) keyboard_modifiers#22 (byte) keyboard_modifiers#13
Identical Phi Values (byte) form_field_idx#0 (byte) form_field_idx#14
Identical Phi Values (byte) keyboard_events_size#26 (byte) keyboard_events_size#11
Identical Phi Values (byte) keyboard_modifiers#23 (byte) keyboard_modifiers#11
Identical Phi Values (byte) get_vic_charset::idx#1 (byte) get_vic_charset::idx#0
Identical Phi Values (byte) apply_preset::idx#1 (byte) apply_preset::idx#0
Identical Phi Values (byte*) apply_preset::preset#13 (byte*) apply_preset::preset#15
Identical Phi Values (byte) keyboard_events_size#119 (byte) keyboard_events_size#25
Identical Phi Values (byte) keyboard_modifiers#100 (byte) keyboard_modifiers#22
Identical Phi Values (byte) gfx_mode::cy#2 (byte) gfx_mode::cy#4
Identical Phi Values (byte) keyboard_events_size#104 (byte) keyboard_events_size#116
Identical Phi Values (byte) keyboard_modifiers#77 (byte) keyboard_modifiers#98
Identical Phi Values (byte) keyboard_events_size#58 (byte) keyboard_events_size#104
Identical Phi Values (byte) keyboard_modifiers#57 (byte) keyboard_modifiers#77
Identical Phi Values (byte) keyboard_events_size#59 (byte) keyboard_events_size#104
Identical Phi Values (byte) keyboard_modifiers#58 (byte) keyboard_modifiers#77
Identical Phi Values (byte) keyboard_events_size#44 (byte) keyboard_events_size#45
Identical Phi Values (byte) keyboard_modifiers#40 (byte) keyboard_modifiers#41
Identical Phi Values (byte) keyboard_events_size#28 (byte) keyboard_events_size#100
Identical Phi Values (byte) keyboard_modifiers#10 (byte) keyboard_modifiers#21
Identical Phi Values (byte) keyboard_events_size#10 (byte) keyboard_events_size#24
Identical Phi Values (byte) gfx_init_charset::c#2 (byte) gfx_init_charset::c#4
Identical Phi Values (byte) gfx_init_screen0::cy#2 (byte) gfx_init_screen0::cy#4
Identical Phi Values (byte) gfx_init_screen1::cy#2 (byte) gfx_init_screen1::cy#4
Identical Phi Values (byte) gfx_init_screen2::cy#2 (byte) gfx_init_screen2::cy#4
Identical Phi Values (byte) gfx_init_screen3::cy#2 (byte) gfx_init_screen3::cy#4
Identical Phi Values (byte) gfx_init_screen4::cy#2 (byte) gfx_init_screen4::cy#4
Identical Phi Values (byte) gfx_init_plane_8bppchunky::y#2 (byte) gfx_init_plane_8bppchunky::y#6
Identical Phi Values (byte) gfx_init_plane_horisontal::ay#2 (byte) gfx_init_plane_horisontal::ay#4
Identical Phi Values (byte) gfx_init_plane_horisontal2::ay#2 (byte) gfx_init_plane_horisontal2::ay#4
Identical Phi Values (byte) gfx_init_plane_vertical::by#2 (byte) gfx_init_plane_vertical::by#4
Identical Phi Values (byte) gfx_init_plane_charset8::cr#2 (byte) gfx_init_plane_charset8::cr#6
Identical Phi Values (byte*) gfx_init_plane_charset8::chargen#4 (byte*) gfx_init_plane_charset8::chargen#1
Identical Phi Values (byte) gfx_init_plane_charset8::ch#2 (byte) gfx_init_plane_charset8::ch#7
Identical Phi Values (byte) gfx_init_plane_fill::fill#3 (byte) gfx_init_plane_fill::fill#4
Identical Phi Values (byte) gfx_init_plane_fill::by#2 (byte) gfx_init_plane_fill::by#4
Identical Phi Values (byte*) print_screen#20 (byte*) print_screen#13
Identical Phi Values (byte*) print_line_cursor#41 (byte*) print_line_cursor#10
Identical Phi Values (byte*) print_char_cursor#43 (byte*) print_char_cursor#11
Identical Phi Values (signed byte) form_cursor_count#44 (signed byte) form_cursor_count#1
Identical Phi Values (byte) keyboard_events_size#105 (byte) keyboard_events_size#27
Identical Phi Values (byte) keyboard_modifiers#101 (byte) keyboard_modifiers#24
Identical Phi Values (byte) form_field_idx#49 (byte) form_field_idx#1
Identical Phi Values (byte*) print_screen#14 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#11 (byte*) print_screen#1
Identical Phi Values (byte*) print_char_cursor#12 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#12 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#13 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#14 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_line_cursor#13 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_screen#15 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#14 (byte*) print_screen#1
Identical Phi Values (byte*) print_char_cursor#15 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#15 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#16 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_char_cursor#17 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_line_cursor#16 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_screen#29 (byte*) print_screen#15
Identical Phi Values (byte*) print_line_cursor#50 (byte*) print_line_cursor#16
Identical Phi Values (byte*) print_char_cursor#52 (byte*) print_char_cursor#17
Identical Phi Values (signed byte) form_cursor_count#30 (signed byte) form_cursor_count#44
Identical Phi Values (byte) keyboard_events_size#62 (byte) keyboard_events_size#105
Identical Phi Values (byte) keyboard_modifiers#61 (byte) keyboard_modifiers#101
Identical Phi Values (byte) form_field_idx#38 (byte) form_field_idx#49
Identical Phi Values (signed byte) form_cursor_count#20 (signed byte) form_cursor_count#21
Identical Phi Values (byte) keyboard_events_size#46 (byte) keyboard_events_size#47
Identical Phi Values (byte) keyboard_modifiers#43 (byte) keyboard_modifiers#44
Identical Phi Values (byte) form_field_idx#27 (byte) form_field_idx#28
Identical Phi Values (byte) form_mode::preset_current#2 (byte) form_mode::preset_current#6
Identical Phi Values (byte*) print_screen#23 (byte*) print_screen#22
Identical Phi Values (byte*) print_line_cursor#43 (byte*) print_line_cursor#42
Identical Phi Values (byte*) print_char_cursor#45 (byte*) print_char_cursor#44
Identical Phi Values (signed byte) form_cursor_count#12 (signed byte) form_cursor_count#16
Identical Phi Values (byte) keyboard_events_size#106 (byte) keyboard_events_size#15
Identical Phi Values (byte) keyboard_modifiers#12 (byte) keyboard_modifiers#14
Identical Phi Values (byte) form_field_idx#13 (byte) form_field_idx#18
Identical Phi Values (byte*) form_set_screen::line#0 (byte*) form_set_screen::screen#0
Identical Phi Values (byte) form_field_idx#15 (byte) form_field_idx#27
Identical Phi Values (signed byte) form_cursor_count#14 (signed byte) form_cursor_count#20
Identical Phi Values (byte) keyboard_events_size#107 (byte) keyboard_events_size#46
Identical Phi Values (byte) keyboard_modifiers#45 (byte) keyboard_modifiers#43
Identical Phi Values (byte) keyboard_events_size#14 (byte) keyboard_events_size#100
Identical Phi Values (byte) keyboard_modifiers#14 (byte) keyboard_modifiers#21
Identical Phi Values (byte) keyboard_events_size#15 (byte) keyboard_events_size#24
Identical Phi Values (byte*) print_screen#17 (byte*) print_screen#13
Identical Phi Values (byte*) print_line_cursor#18 (byte*) print_line_cursor#10
Identical Phi Values (byte*) print_char_cursor#19 (byte*) print_char_cursor#11
Identical Phi Values (signed byte) form_cursor_count#17 (signed byte) form_cursor_count#1
Identical Phi Values (byte) keyboard_events_size#17 (byte) keyboard_events_size#27
Identical Phi Values (byte) keyboard_modifiers#16 (byte) keyboard_modifiers#24
Identical Phi Values (byte) form_field_idx#10 (byte) form_field_idx#1
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (void*) memset::return#0 (void*) memset::str#0
Identical Phi Values (byte*) print_char_cursor#47 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_line_cursor#45 (byte*) print_line_cursor#24
Identical Phi Values (byte*) print_line_cursor#24 (byte*) print_screen#1
Identical Phi Values (byte) keyboard_event_scan::row#4 (byte) keyboard_event_scan::row#2
Identical Phi Values (byte) keyboard_events_size#22 (byte) keyboard_events_size#100
Identical Phi Values (byte) keyboard_events_size#116 (byte) keyboard_events_size#13
Identical Phi Values (byte) keyboard_modifiers#98 (byte) keyboard_modifiers#13
Identical Phi Values (byte) gfx_init_plane_charset8::ch#7 (byte) gfx_init_plane_charset8::ch#8
Identical Phi Values (byte) gfx_init_plane_fill::fill#4 (byte) gfx_init_plane_fill::fill#6
Identical Phi Values (byte*) print_screen#22 (byte*) print_screen#1
Identical Phi Values (byte*) print_line_cursor#42 (byte*) print_line_cursor#2
Identical Phi Values (byte*) print_char_cursor#44 (byte*) print_char_cursor#22
Identical Phi Values (byte*) print_screen#16 (byte*) print_screen#22
Identical Phi Values (byte*) print_line_cursor#17 (byte*) print_line_cursor#42
Identical Phi Values (byte*) print_char_cursor#18 (byte*) print_char_cursor#44
Successful SSA optimization Pass2IdenticalPhiElimination
Identified duplicate assignment right side [345] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7
Identified duplicate assignment right side [1017] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0
Identified duplicate assignment right side [1043] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0
Identified duplicate assignment right side [1577] (dword~) form_mode::$15 ← (dword) DTV_COLOR_BANK_DEFAULT / (word) $400
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) memset::$1 [64] if((word) memset::num#0<=(byte) 0) goto memset::@1
Simple Condition (bool~) memset::$4 [74] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@5
Simple Condition (bool~) print_str_lines::$2 [87] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@4
Simple Condition (bool~) print_str_lines::$0 [93] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@5
Simple Condition (bool~) print_str_lines::$3 [96] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@4
Simple Condition (bool~) print_str_at::$0 [112] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2
Simple Condition (bool~) print_ln::$1 [123] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1
Simple Condition (bool~) keyboard_event_scan::$13 [197] if((byte) keyboard_event_scan::row_scan#0!=*((byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
Simple Condition (bool~) keyboard_event_scan::$25 [206] if((byte) keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@8
Simple Condition (bool~) keyboard_event_scan::$18 [212] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@12
Simple Condition (bool~) keyboard_event_scan::$24 [217] if((byte) keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@11
Simple Condition (bool~) keyboard_event_scan::$20 [221] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@12
Simple Condition (bool~) keyboard_event_scan::$22 [226] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@14
Simple Condition (bool~) keyboard_event_scan::$2 [245] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1
Simple Condition (bool~) keyboard_event_scan::$5 [254] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2
Simple Condition (bool~) keyboard_event_scan::$8 [266] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3
Simple Condition (bool~) keyboard_event_scan::$11 [278] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return
Simple Condition (bool~) keyboard_event_get::$0 [300] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@1
Simple Condition (bool~) bitmap_init::$4 [329] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@2
Simple Condition (bool~) bitmap_init::$5 [333] if((byte) bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1
Simple Condition (bool~) bitmap_init::$12 [348] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@6
Simple Condition (bool~) bitmap_init::$14 [352] if((byte) bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5
Simple Condition (bool~) bitmap_clear::$1 [368] if((byte) bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2
Simple Condition (bool~) bitmap_clear::$2 [372] if((byte) bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1
Simple Condition (bool~) bitmap_line::$0 [388] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1
Simple Condition (bool~) bitmap_line::$12 [393] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@20
Simple Condition (bool~) bitmap_line::$2 [398] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@10
Simple Condition (bool~) bitmap_line::$8 [403] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@15
Simple Condition (bool~) bitmap_line::$4 [408] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@11
Simple Condition (bool~) bitmap_line::$18 [441] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@25
Simple Condition (bool~) bitmap_line::$14 [446] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@21
Simple Condition (bool~) bitmap_line_xdyi::$4 [489] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
Simple Condition (bool~) bitmap_line_xdyi::$7 [493] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
Simple Condition (bool~) bitmap_line_xdyd::$4 [512] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
Simple Condition (bool~) bitmap_line_xdyd::$7 [516] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
Simple Condition (bool~) bitmap_line_ydxi::$4 [535] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
Simple Condition (bool~) bitmap_line_ydxi::$7 [539] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
Simple Condition (bool~) bitmap_line_ydxd::$4 [559] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
Simple Condition (bool~) bitmap_line_ydxd::$7 [563] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
Simple Condition (bool~) get_plane::$0 [621] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@1
Simple Condition (bool~) get_plane::$1 [626] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@2
Simple Condition (bool~) get_plane::$2 [631] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@3
Simple Condition (bool~) get_plane::$3 [636] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@4
Simple Condition (bool~) get_plane::$4 [641] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@5
Simple Condition (bool~) get_plane::$5 [646] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@6
Simple Condition (bool~) get_plane::$6 [651] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@7
Simple Condition (bool~) get_plane::$7 [656] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@8
Simple Condition (bool~) get_plane::$8 [661] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@9
Simple Condition (bool~) get_plane::$9 [666] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@10
Simple Condition (bool~) get_plane::$10 [671] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@11
Simple Condition (bool~) get_plane::$11 [676] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@12
Simple Condition (bool~) get_plane::$12 [681] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@13
Simple Condition (bool~) get_plane::$14 [687] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@27
Simple Condition (bool~) get_vic_screen::$0 [697] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@1
Simple Condition (bool~) get_vic_screen::$1 [701] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@2
Simple Condition (bool~) get_vic_screen::$2 [705] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@3
Simple Condition (bool~) get_vic_screen::$3 [709] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@4
Simple Condition (bool~) get_vic_screen::$5 [714] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@9
Simple Condition (bool~) get_vic_charset::$0 [722] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@1
Simple Condition (bool~) get_vic_charset::$2 [727] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@3
Simple Condition (bool~) apply_preset::$0 [757] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@1
Simple Condition (bool~) apply_preset::$1 [761] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2
Simple Condition (bool~) apply_preset::$2 [765] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@3
Simple Condition (bool~) apply_preset::$3 [769] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@4
Simple Condition (bool~) apply_preset::$4 [773] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@5
Simple Condition (bool~) apply_preset::$5 [777] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@6
Simple Condition (bool~) apply_preset::$6 [781] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@7
Simple Condition (bool~) apply_preset::$7 [785] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@8
Simple Condition (bool~) apply_preset::$8 [789] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@9
Simple Condition (bool~) apply_preset::$9 [793] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@10
Simple Condition (bool~) apply_preset::$10 [797] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@11
Simple Condition (bool~) apply_preset::$11 [804] if((byte) apply_preset::i#2!=(byte) form_fields_cnt) goto apply_preset::@46
Simple Condition (bool~) render_preset_name::$0 [812] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@1
Simple Condition (bool~) render_preset_name::$1 [816] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2
Simple Condition (bool~) render_preset_name::$2 [820] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@3
Simple Condition (bool~) render_preset_name::$3 [824] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@4
Simple Condition (bool~) render_preset_name::$4 [828] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@5
Simple Condition (bool~) render_preset_name::$5 [832] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@6
Simple Condition (bool~) render_preset_name::$6 [836] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@7
Simple Condition (bool~) render_preset_name::$7 [840] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@8
Simple Condition (bool~) render_preset_name::$8 [844] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@9
Simple Condition (bool~) render_preset_name::$9 [848] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@10
Simple Condition (bool~) render_preset_name::$10 [852] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@11
Simple Condition (bool~) gfx_mode::$1 [939] if(*((byte*) form_ctrl_line)==(byte) 0) goto gfx_mode::@1
Simple Condition (bool~) gfx_mode::$3 [943] if(*((byte*) form_ctrl_borof)==(byte) 0) goto gfx_mode::@2
Simple Condition (bool~) gfx_mode::$5 [950] if(*((byte*) form_ctrl_hicol)==(byte) 0) goto gfx_mode::@3
Simple Condition (bool~) gfx_mode::$7 [957] if(*((byte*) form_ctrl_overs)==(byte) 0) goto gfx_mode::@4
Simple Condition (bool~) gfx_mode::$9 [964] if(*((byte*) form_ctrl_colof)==(byte) 0) goto gfx_mode::@5
Simple Condition (bool~) gfx_mode::$11 [971] if(*((byte*) form_ctrl_chunk)==(byte) 0) goto gfx_mode::@6
Simple Condition (bool~) gfx_mode::$15 [982] if(*((byte*) form_ctrl_ecm)==(byte) 0) goto gfx_mode::@7
Simple Condition (bool~) gfx_mode::$17 [989] if(*((byte*) form_ctrl_bmm)==(byte) 0) goto gfx_mode::@8
Simple Condition (bool~) gfx_mode::$19 [998] if(*((byte*) form_ctrl_mcm)==(byte) 0) goto gfx_mode::@9
Simple Condition (bool~) gfx_mode::$82 [1101] if((byte) gfx_mode::cx#1!=rangelast(0,$27)) goto gfx_mode::@22
Simple Condition (bool~) gfx_mode::$83 [1105] if((byte) gfx_mode::cy#1!=rangelast(0,$18)) goto gfx_mode::@21
Simple Condition (bool~) gfx_mode::$72 [1121] if(*((byte*) form_dtv_palet)==(byte) 0) goto gfx_mode::@10
Simple Condition (bool~) gfx_mode::$84 [1130] if((byte) gfx_mode::j#1!=rangelast(0,$f)) goto gfx_mode::@26
Simple Condition (bool~) gfx_mode::$85 [1135] if((byte) gfx_mode::i#1!=rangelast(0,$f)) goto gfx_mode::@29
Simple Condition (bool~) gfx_mode::$86 [1140] if(*((byte*) RASTER)!=(byte) $ff) goto gfx_mode::@34
Simple Condition (bool~) gfx_mode::$90 [1154] if((byte) gfx_mode::keyboard_event#0!=(byte) KEY_SPACE) goto gfx_mode::@31
Simple Condition (bool~) gfx_init_charset::$0 [1187] if((byte) gfx_init_charset::l#1!=rangelast(0,7)) goto gfx_init_charset::@2
Simple Condition (bool~) gfx_init_charset::$1 [1191] if((byte) gfx_init_charset::c#1!=rangelast(0,$ff)) goto gfx_init_charset::@1
Simple Condition (bool~) gfx_init_screen0::$4 [1207] if((byte) gfx_init_screen0::cx#1!=rangelast(0,$27)) goto gfx_init_screen0::@2
Simple Condition (bool~) gfx_init_screen0::$5 [1211] if((byte) gfx_init_screen0::cy#1!=rangelast(0,$18)) goto gfx_init_screen0::@1
Simple Condition (bool~) gfx_init_screen1::$2 [1224] if((byte) gfx_init_screen1::cx#1!=rangelast(0,$27)) goto gfx_init_screen1::@2
Simple Condition (bool~) gfx_init_screen1::$3 [1228] if((byte) gfx_init_screen1::cy#1!=rangelast(0,$18)) goto gfx_init_screen1::@1
Simple Condition (bool~) gfx_init_screen2::$5 [1246] if((byte) gfx_init_screen2::cx#1!=rangelast(0,$27)) goto gfx_init_screen2::@2
Simple Condition (bool~) gfx_init_screen2::$6 [1250] if((byte) gfx_init_screen2::cy#1!=rangelast(0,$18)) goto gfx_init_screen2::@1
Simple Condition (bool~) gfx_init_screen3::$4 [1265] if((byte) gfx_init_screen3::cx#1!=rangelast(0,$27)) goto gfx_init_screen3::@2
Simple Condition (bool~) gfx_init_screen3::$5 [1269] if((byte) gfx_init_screen3::cy#1!=rangelast(0,$18)) goto gfx_init_screen3::@1
Simple Condition (bool~) gfx_init_screen4::$0 [1280] if((byte) gfx_init_screen4::cx#1!=rangelast(0,$27)) goto gfx_init_screen4::@2
Simple Condition (bool~) gfx_init_screen4::$1 [1284] if((byte) gfx_init_screen4::cy#1!=rangelast(0,$18)) goto gfx_init_screen4::@1
Simple Condition (bool~) gfx_init_vic_bitmap::$2 [1295] if((byte) gfx_init_vic_bitmap::l#2<(byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2
Simple Condition (bool~) gfx_init_plane_8bppchunky::$6 [1321] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3
Simple Condition (bool~) gfx_init_plane_8bppchunky::$10 [1330] if((word) gfx_init_plane_8bppchunky::x#1!=rangelast(0,$13f)) goto gfx_init_plane_8bppchunky::@2
Simple Condition (bool~) gfx_init_plane_8bppchunky::$11 [1340] if((byte) gfx_init_plane_8bppchunky::y#1!=rangelast(0,$c7)) goto gfx_init_plane_8bppchunky::@1
Simple Condition (bool~) gfx_init_plane_horisontal::$8 [1361] if((byte~) gfx_init_plane_horisontal::$7==(byte) 0) goto gfx_init_plane_horisontal::@3
Simple Condition (bool~) gfx_init_plane_horisontal::$9 [1371] if((byte) gfx_init_plane_horisontal::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal::@2
Simple Condition (bool~) gfx_init_plane_horisontal::$10 [1375] if((byte) gfx_init_plane_horisontal::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal::@1
Simple Condition (bool~) gfx_init_plane_horisontal2::$9 [1402] if((byte) gfx_init_plane_horisontal2::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal2::@2
Simple Condition (bool~) gfx_init_plane_horisontal2::$10 [1406] if((byte) gfx_init_plane_horisontal2::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal2::@1
Simple Condition (bool~) gfx_init_plane_vertical::$7 [1429] if((byte) gfx_init_plane_vertical::bx#1!=rangelast(0,$27)) goto gfx_init_plane_vertical::@2
Simple Condition (bool~) gfx_init_plane_vertical::$8 [1433] if((byte) gfx_init_plane_vertical::by#1!=rangelast(0,$c7)) goto gfx_init_plane_vertical::@1
Simple Condition (bool~) gfx_init_plane_charset8::$9 [1463] if((byte~) gfx_init_plane_charset8::$7==(byte) 0) goto gfx_init_plane_charset8::@4
Simple Condition (bool~) gfx_init_plane_charset8::$11 [1472] if((byte) gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3
Simple Condition (bool~) gfx_init_plane_charset8::$12 [1478] if((byte) gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2
Simple Condition (bool~) gfx_init_plane_charset8::$13 [1482] if((byte) gfx_init_plane_charset8::ch#1!=rangelast(0,$ff)) goto gfx_init_plane_charset8::@1
Simple Condition (bool~) gfx_init_plane_fill::$9 [1521] if((byte) gfx_init_plane_fill::bx#1!=rangelast(0,$27)) goto gfx_init_plane_fill::@2
Simple Condition (bool~) gfx_init_plane_fill::$10 [1525] if((byte) gfx_init_plane_fill::by#1!=rangelast(0,$c7)) goto gfx_init_plane_fill::@1
Simple Condition (bool~) form_mode::$34 [1611] if((byte) form_mode::i#1!=rangelast(0,$f)) goto form_mode::@1
Simple Condition (bool~) form_mode::$35 [1620] if(*((byte*) RASTER)!=(byte) $ff) goto form_mode::@6
Simple Condition (bool~) form_mode::$38 [1632] if((byte~) form_mode::$36==(byte) 0) goto form_mode::@14
Simple Condition (bool~) form_mode::$40 [1636] if((byte) form_mode::preset_current#6==*((byte*) form_preset)) goto form_mode::@3
Simple Condition (bool~) form_set_screen::$3 [1675] if((byte) form_set_screen::y#1!=rangelast(0,$18)) goto form_set_screen::@1
Simple Condition (bool~) form_render_values::$0 [1692] if((byte) form_render_values::idx#2<(byte) form_fields_cnt) goto form_render_values::@2
Simple Condition (bool~) form_control::$2 [1713] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@1
Simple Condition (bool~) form_control::$4 [1717] if((signed byte) form_cursor_count#15<(signed byte~) form_control::$3) goto form_control::@2
Simple Condition (bool~) form_control::$8 [1739] if((byte) form_control::key_event#0!=(byte) KEY_CRSR_DOWN) goto form_control::@4
Simple Condition (bool~) form_control::$10 [1743] if((byte) form_control::key_event#0!=(byte) KEY_CRSR_RIGHT) goto form_control::@5
Simple Condition (bool~) form_control::$17 [1749] if((byte~) form_control::$16==(byte) 0) goto form_control::@19
Simple Condition (bool~) form_control::$22 [1754] if((byte) form_field_idx#5!=(byte) form_fields_cnt) goto form_control::@22
Simple Condition (bool~) form_control::$19 [1759] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@22
Simple Condition (bool~) form_control::$12 [1779] if((byte) form_control::key_event#0!=(byte) KEY_SPACE) goto form_control::@6
Simple Condition (bool~) form_control::$25 [1783] if((byte~) form_control::$24==(byte) 0) goto form_control::@26
Simple Condition (bool~) form_control::$29 [1788] if(*((byte[]) form_fields_val + (byte) form_field_idx#28)<=*((byte[]) form_fields_max + (byte) form_field_idx#28)) goto form_control::@29
Simple Condition (bool~) form_control::$27 [1793] if(*((byte[]) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@29
Successful SSA optimization Pass2ConditionalJumpSimplification
Negating conditional jump and destination [1154] if((byte) gfx_mode::keyboard_event#0==(byte) KEY_SPACE) goto gfx_mode::@return
Successful SSA optimization Pass2ConditionalJumpSequenceImprovement
Constant right-side identified [176] (byte[8]) keyboard_events ← { fill( 8, 0) }
Constant right-side identified [185] (byte[8]) keyboard_scan_values ← { fill( 8, 0) }
Constant right-side identified [311] (byte[$100]) bitmap_plot_xlo ← { fill( $100, 0) }
Constant right-side identified [312] (byte[$100]) bitmap_plot_xhi ← { fill( $100, 0) }
Constant right-side identified [313] (byte[$100]) bitmap_plot_ylo ← { fill( $100, 0) }
Constant right-side identified [314] (byte[$100]) bitmap_plot_yhi ← { fill( $100, 0) }
Constant right-side identified [315] (byte[$100]) bitmap_plot_bit ← { fill( $100, 0) }
Constant right-side identified [1341] (byte) dtvSetCpuBankSegment1::cpuBankIdx#2 ← (byte)(number) $4000/(number) $4000
Constant right-side identified [1376] (byte) dtvSetCpuBankSegment1::cpuBankIdx#4 ← (byte)(number) $4000/(number) $4000
Constant right-side identified [1407] (byte) dtvSetCpuBankSegment1::cpuBankIdx#6 ← (byte)(number) $4000/(number) $4000
Constant right-side identified [1434] (byte) dtvSetCpuBankSegment1::cpuBankIdx#8 ← (byte)(number) $4000/(number) $4000
Constant right-side identified [1484] (byte) dtvSetCpuBankSegment1::cpuBankIdx#10 ← (byte)(number) $4000/(number) $4000
Constant right-side identified [1526] (byte) dtvSetCpuBankSegment1::cpuBankIdx#12 ← (byte)(number) $4000/(number) $4000
Constant right-side identified [1657] (byte[$19]) form_line_lo ← { fill( $19, 0) }
Constant right-side identified [1658] (byte[$19]) form_line_hi ← { fill( $19, 0) }
Successful SSA optimization Pass2ConstantRValueConsolidation
Identified constant from value list (byte[$10]) { (byte) 0, (byte) $f, (byte) $36, (byte) $be, (byte) $58, (byte) $db, (byte) $86, (byte) $ff, (byte) $29, (byte) $26, (byte) $3b, (byte) 5, (byte) 7, (byte) $df, (byte) $9a, (byte) $a }
Identified constant from value list (byte[8]) { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
Identified constant from value list (byte[8]) { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
Identified constant from value list (byte[]) { (byte) 8, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $25, (byte) $25, (byte) $25, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25 }
Identified constant from value list (byte[]) { (byte) 2, (byte) 5, (byte) 6, (byte) 7, (byte) 8, (byte) 9, (byte) $a, (byte) $b, (byte) $c, (byte) $d, (byte) 5, (byte) 6, (byte) 6, (byte) 7, (byte) 7, (byte) 8, (byte) 8, (byte) $b, (byte) $c, (byte) $c, (byte) $d, (byte) $d, (byte) $e, (byte) $e, (byte) 5, (byte) 6, (byte) 7, (byte) $a, (byte) $b, (byte) $b, (byte) $c, (byte) $c, (byte) $d, (byte) $d, (byte) $e, (byte) $e }
Identified constant from value list (byte[]) { (byte) $a, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) $d, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $d, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) 3, (byte) 1, (byte) 4, (byte) 1, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
Identified constant from value list (byte[]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 0, (byte) 5, (byte) 0, (byte) 6 }
Identified constant from value list (byte[]) { (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 3, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 4, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 5, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 6, (byte) 8, (byte) 9, (byte) $c, (byte) $c }
Identified constant from value list (byte[]) { (byte) 6, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 7, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 8, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 7, (byte) 0, (byte) $d, (byte) 4, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 7, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 6, (byte) 0, (byte) 0, (byte) 0, (byte) 8, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 8, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $a, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 9, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $a, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) $a, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $b, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 0, (byte) $ff, (byte) $ff, (byte) 0, (byte) 0, (byte) $80, (byte) $ff, (byte) $80, (byte) 0, (byte) $80 }
Identified constant from value list (byte[]) { (byte) 0, (byte) 0, (byte) $c7, (byte) $c7, (byte) 0, (byte) 0, (byte) $64, (byte) $c7, (byte) $64, (byte) 0 }
Identified constant from value list (byte[]) { (byte) 0, (byte) $55, (byte) $aa, (byte) $ff }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const byte*) PROCPORT_DDR = (byte*) 0
Constant (const byte) PROCPORT_DDR_MEMORY_MASK = 7
Constant (const byte*) PROCPORT = (byte*) 1
Constant (const byte) PROCPORT_RAM_IO = 5
Constant (const byte) PROCPORT_RAM_CHARROM = 1
Constant (const byte*) CHARGEN = (byte*) 53248
Constant (const byte*) RASTER = (byte*) 53266
Constant (const byte*) BORDERCOL = (byte*) 53280
Constant (const byte*) BGCOL = (byte*) 53281
Constant (const byte*) BGCOL1 = (byte*) 53281
Constant (const byte*) BGCOL2 = (byte*) 53282
Constant (const byte*) BGCOL3 = (byte*) 53283
Constant (const byte*) BGCOL4 = (byte*) 53284
Constant (const byte*) VIC_CONTROL = (byte*) 53265
Constant (const byte) VIC_ECM = $40
Constant (const byte) VIC_BMM = $20
Constant (const byte) VIC_DEN = $10
Constant (const byte) VIC_RSEL = 8
Constant (const byte*) VIC_CONTROL2 = (byte*) 53270
Constant (const byte) VIC_MCM = $10
Constant (const byte) VIC_CSEL = 8
Constant (const byte*) VIC_MEMORY = (byte*) 53272
Constant (const byte*) COLS = (byte*) 55296
Constant (const byte*) CIA1_PORT_A = (byte*) 56320
Constant (const byte*) CIA1_PORT_B = (byte*) 56321
Constant (const byte*) CIA1_PORT_A_DDR = (byte*) 56322
Constant (const byte*) CIA1_PORT_B_DDR = (byte*) 56323
Constant (const byte*) CIA2_PORT_A = (byte*) 56576
Constant (const byte*) CIA2_PORT_A_DDR = (byte*) 56578
Constant (const byte*) DTV_FEATURE = (byte*) 53311
Constant (const byte) DTV_FEATURE_ENABLE = 1
Constant (const byte*) DTV_CONTROL = (byte*) 53308
Constant (const byte) DTV_LINEAR = 1
Constant (const byte) DTV_BORDER_OFF = 2
Constant (const byte) DTV_HIGHCOLOR = 4
Constant (const byte) DTV_OVERSCAN = 8
Constant (const byte) DTV_COLORRAM_OFF = $10
Constant (const byte) DTV_CHUNKY = $40
Constant (const byte*) DTV_PALETTE = (byte*) 53760
Constant (const byte[$10]) DTV_PALETTE_DEFAULT = { 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a }
Constant (const byte*) DTV_PLANEA_START_LO = (byte*) 53306
Constant (const byte*) DTV_PLANEA_START_MI = (byte*) 53307
Constant (const byte*) DTV_PLANEA_START_HI = (byte*) 53317
Constant (const byte*) DTV_PLANEA_STEP = (byte*) 53318
Constant (const byte*) DTV_PLANEA_MODULO_LO = (byte*) 53304
Constant (const byte*) DTV_PLANEA_MODULO_HI = (byte*) 53305
Constant (const byte*) DTV_PLANEB_START_LO = (byte*) 53321
Constant (const byte*) DTV_PLANEB_START_MI = (byte*) 53322
Constant (const byte*) DTV_PLANEB_START_HI = (byte*) 53323
Constant (const byte*) DTV_PLANEB_STEP = (byte*) 53324
Constant (const byte*) DTV_PLANEB_MODULO_LO = (byte*) 53319
Constant (const byte*) DTV_PLANEB_MODULO_HI = (byte*) 53320
Constant (const byte*) DTV_COLOR_BANK_LO = (byte*) 53302
Constant (const byte*) DTV_COLOR_BANK_HI = (byte*) 53303
Constant (const dword) DTV_COLOR_BANK_DEFAULT = $1d800
Constant (const byte*) DTV_GRAPHICS_VIC_BANK = (byte*) 53309
Constant (const byte*) dtvSetCpuBankSegment1::cpuBank = (byte*) 255
Constant (const byte*) print_screen#0 = (byte*) 1024
Constant (const byte[]) print_hextab = $38
Constant (const byte) memset::c#0 = ' '
Constant (const word) memset::num#0 = $3e8
Constant (const byte) KEY_CRSR_RIGHT = 2
Constant (const byte) KEY_CRSR_DOWN = 7
Constant (const byte) KEY_LSHIFT = $f
Constant (const byte) KEY_RSHIFT = $34
Constant (const byte) KEY_CTRL = $3a
Constant (const byte) KEY_SPACE = $3c
Constant (const byte) KEY_COMMODORE = $3d
Constant (const byte[8]) keyboard_matrix_row_bitmask = { $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f }
Constant (const byte[8]) keyboard_matrix_col_bitmask = { 1, 2, 4, 8, $10, $20, $40, $80 }
Constant (const byte[8]) keyboard_events = { fill( 8, 0) }
Constant (const byte) keyboard_events_size#0 = 0
Constant (const byte) keyboard_modifiers#0 = 0
Constant (const byte) KEY_MODIFIER_LSHIFT = 1
Constant (const byte) KEY_MODIFIER_RSHIFT = 2
Constant (const byte) KEY_MODIFIER_CTRL = 4
Constant (const byte) KEY_MODIFIER_COMMODORE = 8
Constant (const byte[8]) keyboard_scan_values = { fill( 8, 0) }
Constant (const byte) keyboard_event_scan::keycode#0 = 0
Constant (const byte) keyboard_event_scan::row#0 = 0
Constant (const byte) keyboard_event_scan::col#0 = 0
Constant (const byte) keyboard_modifiers#1 = 0
Constant (const byte) keyboard_event_get::return#0 = $ff
Constant (const byte[$100]) bitmap_plot_xlo = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_xhi = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_ylo = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_yhi = { fill( $100, 0) }
Constant (const byte[$100]) bitmap_plot_bit = { fill( $100, 0) }
Constant (const byte) bitmap_init::bits#0 = $80
Constant (const byte) bitmap_init::x#0 = 0
Constant (const byte) bitmap_init::bits#2 = $80
Constant (const byte*) bitmap_init::yoffs#0 = (byte*) 0
Constant (const byte) bitmap_init::y#0 = 0
Constant (const byte) bitmap_clear::y#0 = 0
Constant (const byte) bitmap_clear::x#0 = 0
Constant (const byte) bitmap_line::xd#0 = 0
Constant (const byte) bitmap_line::yd#0 = 0
Constant (const byte*) VIC_SCREEN0 = (byte*) 16384
Constant (const byte*) VIC_SCREEN1 = (byte*) 17408
Constant (const byte*) VIC_SCREEN2 = (byte*) 18432
Constant (const byte*) VIC_SCREEN3 = (byte*) 19456
Constant (const byte*) VIC_SCREEN4 = (byte*) 20480
Constant (const byte*) VIC_CHARSET_ROM = (byte*) 22528
Constant (const byte*) VIC_BITMAP = (byte*) 24576
Constant (const dword) PLANE_8BPP_CHUNKY = $20000
Constant (const dword) PLANE_HORISONTAL = $30000
Constant (const dword) PLANE_VERTICAL = $32000
Constant (const dword) PLANE_HORISONTAL2 = $34000
Constant (const dword) PLANE_VERTICAL2 = $36000
Constant (const dword) PLANE_BLANK = $38000
Constant (const dword) PLANE_FULL = $3a000
Constant (const dword) PLANE_CHARSET8 = $3c000
Constant (const byte*) FORM_SCREEN = (byte*) 1024
Constant (const byte*) FORM_CHARSET = (byte*) 6144
Constant (const byte[]) FORM_TEXT = $39
Constant (const byte[]) FORM_COLS = $40
Constant (const byte) form_fields_cnt = $24
Constant (const byte[]) form_fields_x = { 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25 }
Constant (const byte[]) form_fields_y = { 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e }
Constant (const byte[]) form_fields_max = { $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f }
Constant (const byte[]) form_fields_val = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_stdchar = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_ecmchar = { 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6 }
Constant (const byte[]) preset_stdbm = { 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_mcbm = { 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_hi_stdchar = { 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_hi_ecmchar = { 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c }
Constant (const byte[]) preset_twoplane = { 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0 }
Constant (const byte[]) preset_chunky = { 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_sixsfred = { 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_sixsfred2 = { 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte[]) preset_8bpppixelcell = { $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0 }
Constant (const byte*) apply_preset::preset#0 = (byte*) 0
Constant (const byte) apply_preset::i#0 = 0
Constant (const byte*) render_preset_name::name#0 = (byte*) 0
Constant (const byte*) render_preset_name::name#1 = render_preset_name::$14
Constant (const byte*) render_preset_name::name#2 = render_preset_name::$15
Constant (const byte*) render_preset_name::name#3 = render_preset_name::$16
Constant (const byte*) render_preset_name::name#4 = render_preset_name::$17
Constant (const byte*) render_preset_name::name#5 = render_preset_name::$18
Constant (const byte*) render_preset_name::name#6 = render_preset_name::$19
Constant (const byte*) render_preset_name::name#7 = render_preset_name::$20
Constant (const byte*) render_preset_name::name#8 = render_preset_name::$21
Constant (const byte*) render_preset_name::name#9 = render_preset_name::$22
Constant (const byte*) render_preset_name::name#10 = render_preset_name::$23
Constant (const byte*) render_preset_name::name#11 = render_preset_name::$24
Constant (const byte*) render_preset_name::name#12 = render_preset_name::$25
Constant (const byte) gfx_mode::dtv_control#0 = 0
Constant (const byte) gfx_mode::cy#0 = 0
Constant (const byte) gfx_mode::cx#0 = 0
Constant (const byte) gfx_mode::i#0 = 0
Constant (const byte) gfx_mode::j#0 = 0
Constant (const byte) gfx_init_charset::c#0 = 0
Constant (const byte) gfx_init_charset::l#0 = 0
Constant (const byte) gfx_init_screen0::cy#0 = 0
Constant (const byte) gfx_init_screen0::cx#0 = 0
Constant (const byte) gfx_init_screen1::cy#0 = 0
Constant (const byte) gfx_init_screen1::cx#0 = 0
Constant (const byte) gfx_init_screen2::cy#0 = 0
Constant (const byte) gfx_init_screen2::cx#0 = 0
Constant (const byte) gfx_init_screen3::cy#0 = 0
Constant (const byte) gfx_init_screen3::cx#0 = 0
Constant (const byte) gfx_init_screen4::cy#0 = 0
Constant (const byte) gfx_init_screen4::cx#0 = 0
Constant (const byte[]) gfx_init_vic_bitmap::lines_x = { 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80 }
Constant (const byte[]) gfx_init_vic_bitmap::lines_y = { 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0 }
Constant (const byte) gfx_init_vic_bitmap::lines_cnt = 9
Constant (const byte) gfx_init_vic_bitmap::l#0 = 0
Constant (const byte*) gfx_init_plane_8bppchunky::gfxb#0 = (byte*) 16384
Constant (const byte) gfx_init_plane_8bppchunky::y#0 = 0
Constant (const word) gfx_init_plane_8bppchunky::x#0 = 0
Constant (const byte*) gfx_init_plane_8bppchunky::gfxb#2 = (byte*) 16384
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)$4000/$4000
Constant (const byte) gfx_init_plane_horisontal::ay#0 = 0
Constant (const byte) gfx_init_plane_horisontal::ax#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#4 = (byte)$4000/$4000
Constant (const byte[]) gfx_init_plane_horisontal2::row_bitmask = { 0, $55, $aa, $ff }
Constant (const byte) gfx_init_plane_horisontal2::ay#0 = 0
Constant (const byte) gfx_init_plane_horisontal2::ax#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#6 = (byte)$4000/$4000
Constant (const byte) gfx_init_plane_vertical::by#0 = 0
Constant (const byte) gfx_init_plane_vertical::bx#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#8 = (byte)$4000/$4000
Constant (const byte) gfx_init_plane_charset8::col#0 = 0
Constant (const byte) gfx_init_plane_charset8::ch#0 = 0
Constant (const byte) gfx_init_plane_charset8::cr#0 = 0
Constant (const byte) gfx_init_plane_charset8::cp#0 = 0
Constant (const byte) gfx_init_plane_charset8::c#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#10 = (byte)$4000/$4000
Constant (const byte) gfx_init_plane_fill::fill#0 = $1b
Constant (const byte) gfx_init_plane_fill::fill#1 = 0
Constant (const byte) gfx_init_plane_fill::fill#2 = $ff
Constant (const byte) gfx_init_plane_fill::by#0 = 0
Constant (const byte) gfx_init_plane_fill::bx#0 = 0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#12 = (byte)$4000/$4000
Constant (const byte) form_mode::i#0 = 0
Constant (const byte[$19]) form_line_lo = { fill( $19, 0) }
Constant (const byte[$19]) form_line_hi = { fill( $19, 0) }
Constant (const byte) form_field_idx#34 = 0
Constant (const signed byte) FORM_CURSOR_BLINK = $28
Constant (const byte) form_set_screen::y#0 = 0
Constant (const byte) form_render_values::idx#0 = 0
Constant (const byte) form_control::return#1 = 0
Constant (const byte) form_field_idx#8 = 0
Constant (const byte) form_control::return#3 = 0
Constant (const byte) form_control::return#4 = 0
Constant (const byte) form_control::return#5 = $ff
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) keyboard_event_pressed::keycode#0 = KEY_LSHIFT
Constant (const byte) keyboard_event_pressed::keycode#1 = KEY_RSHIFT
Constant (const byte) keyboard_event_pressed::keycode#2 = KEY_CTRL
Constant (const byte) keyboard_event_pressed::keycode#3 = KEY_COMMODORE
Constant (const dword) get_plane::return#6 = PLANE_8BPP_CHUNKY
Constant (const dword) get_plane::return#7 = PLANE_HORISONTAL
Constant (const dword) get_plane::return#8 = PLANE_VERTICAL
Constant (const dword) get_plane::return#9 = PLANE_HORISONTAL2
Constant (const dword) get_plane::return#10 = PLANE_VERTICAL2
Constant (const dword) get_plane::return#11 = PLANE_CHARSET8
Constant (const dword) get_plane::return#12 = PLANE_BLANK
Constant (const dword) get_plane::return#13 = PLANE_FULL
Constant (const byte*) get_vic_screen::return#0 = VIC_SCREEN0
Constant (const byte*) get_vic_screen::return#1 = VIC_SCREEN1
Constant (const byte*) get_vic_screen::return#2 = VIC_SCREEN2
Constant (const byte*) get_vic_screen::return#3 = VIC_SCREEN3
Constant (const byte*) get_vic_screen::return#4 = VIC_SCREEN4
Constant (const byte*) get_vic_screen::return#6 = VIC_SCREEN0
Constant (const byte*) get_vic_charset::return#0 = VIC_CHARSET_ROM
Constant (const byte*) get_vic_charset::return#1 = VIC_BITMAP
Constant (const byte*) get_vic_charset::return#3 = VIC_CHARSET_ROM
Constant (const byte*) apply_preset::preset#1 = preset_stdchar
Constant (const byte*) apply_preset::preset#2 = preset_ecmchar
Constant (const byte*) apply_preset::preset#3 = preset_stdbm
Constant (const byte*) apply_preset::preset#4 = preset_mcbm
Constant (const byte*) apply_preset::preset#5 = preset_hi_stdchar
Constant (const byte*) apply_preset::preset#6 = preset_hi_ecmchar
Constant (const byte*) apply_preset::preset#7 = preset_twoplane
Constant (const byte*) apply_preset::preset#8 = preset_chunky
Constant (const byte*) apply_preset::preset#9 = preset_sixsfred
Constant (const byte*) apply_preset::preset#10 = preset_sixsfred2
Constant (const byte*) apply_preset::preset#11 = preset_8bpppixelcell
Constant (const byte*) apply_preset::preset#12 = preset_stdchar
Constant (const byte) gfx_mode::vic_control2#0 = VIC_CSEL
Constant (const byte*) gfx_mode::col#0 = COLS
Constant (const byte*) gfx_init_charset::chargen#0 = CHARGEN
Constant (const byte*) gfx_init_charset::charset#0 = VIC_CHARSET_ROM
Constant (const byte*) gfx_init_screen0::ch#0 = VIC_SCREEN0
Constant (const byte*) gfx_init_screen1::ch#0 = VIC_SCREEN1
Constant (const byte*) gfx_init_screen2::ch#0 = VIC_SCREEN2
Constant (const byte*) gfx_init_screen3::ch#0 = VIC_SCREEN3
Constant (const byte*) gfx_init_screen4::ch#0 = VIC_SCREEN4
Constant (const byte*) bitmap_init::bitmap#0 = VIC_BITMAP
Constant (const byte*) gfx_init_plane_charset8::chargen#0 = CHARGEN
Constant (const dword) gfx_init_plane_fill::plane_addr#0 = PLANE_VERTICAL2
Constant (const dword) gfx_init_plane_fill::plane_addr#1 = PLANE_BLANK
Constant (const dword) gfx_init_plane_fill::plane_addr#2 = PLANE_FULL
Constant (const byte*) print_set_screen::screen#0 = COLS
Constant (const byte*) print_str_lines::str#1 = FORM_COLS
Constant (const byte*) print_set_screen::screen#1 = FORM_SCREEN
Constant (const byte*) print_str_lines::str#2 = FORM_TEXT
Constant (const byte*) form_set_screen::screen#0 = FORM_SCREEN
Constant (const signed byte) form_cursor_count#6 = FORM_CURSOR_BLINK
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (dword)VIC_SCREEN0 in [622] (dword) get_plane::return#0 ← (dword)(const byte*) VIC_SCREEN0
Constant value identified (dword)VIC_SCREEN1 in [627] (dword) get_plane::return#1 ← (dword)(const byte*) VIC_SCREEN1
Constant value identified (dword)VIC_SCREEN2 in [632] (dword) get_plane::return#2 ← (dword)(const byte*) VIC_SCREEN2
Constant value identified (dword)VIC_SCREEN3 in [637] (dword) get_plane::return#3 ← (dword)(const byte*) VIC_SCREEN3
Constant value identified (dword)VIC_BITMAP in [642] (dword) get_plane::return#4 ← (dword)(const byte*) VIC_BITMAP
Constant value identified (dword)VIC_CHARSET_ROM in [647] (dword) get_plane::return#5 ← (dword)(const byte*) VIC_CHARSET_ROM
Constant value identified (dword)VIC_SCREEN0 in [693] (dword) get_plane::return#15 ← (dword)(const byte*) VIC_SCREEN0
Constant value identified (word)VIC_SCREEN0 in [1057] (word~) gfx_mode::$48 ← (word)(const byte*) VIC_SCREEN0
Constant value identified (dword)FORM_CHARSET in [1569] (dword~) form_mode::$9 ← (dword)(const byte*) FORM_CHARSET
Constant value identified (word)FORM_CHARSET in [1582] (word~) form_mode::$18 ← (word)(const byte*) FORM_CHARSET
Constant value identified (word)FORM_SCREEN in [1592] (word~) form_mode::$24 ← (word)(const byte*) FORM_SCREEN
Constant value identified (word)FORM_CHARSET in [1595] (word~) form_mode::$27 ← (word)(const byte*) FORM_CHARSET
Successful SSA optimization Pass2ConstantValues
if() condition always false - eliminating [64] if((const word) memset::num#0<=(byte) 0) goto memset::@1
if() condition always true - replacing block destination [579] if(true) goto main::@2
Removing PHI-reference to removed block (gfx_mode::@31) in block gfx_mode::@return
Removing PHI-reference to removed block (gfx_mode::@31) in block gfx_mode::@return
if() condition always true - replacing block destination [1137] if(true) goto gfx_mode::@34
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
Removing PHI-reference to removed block (form_mode::@3) in block form_mode::@return
if() condition always true - replacing block destination [1617] if(true) goto form_mode::@6
Successful SSA optimization Pass2ConstantIfs
Successful SSA optimization Pass2ConstantStringConsolidation
Resolved ranged next value [204] keyboard_event_scan::row#1 ← ++ keyboard_event_scan::row#2 to ++
Resolved ranged comparison value [206] if(keyboard_event_scan::row#1!=rangelast(0,7)) goto keyboard_event_scan::@8 to (number) 8
Resolved ranged next value [215] keyboard_event_scan::col#1 ← ++ keyboard_event_scan::col#2 to ++
Resolved ranged comparison value [217] if(keyboard_event_scan::col#1!=rangelast(0,7)) goto keyboard_event_scan::@11 to (number) 8
Resolved ranged next value [331] bitmap_init::x#1 ← ++ bitmap_init::x#2 to ++
Resolved ranged comparison value [333] if(bitmap_init::x#1!=rangelast(0,$ff)) goto bitmap_init::@1 to (number) 0
Resolved ranged next value [350] bitmap_init::y#1 ← ++ bitmap_init::y#2 to ++
Resolved ranged comparison value [352] if(bitmap_init::y#1!=rangelast(0,$ff)) goto bitmap_init::@5 to (number) 0
Resolved ranged next value [366] bitmap_clear::x#1 ← ++ bitmap_clear::x#2 to ++
Resolved ranged comparison value [368] if(bitmap_clear::x#1!=rangelast(0,$c7)) goto bitmap_clear::@2 to (number) $c8
Resolved ranged next value [370] bitmap_clear::y#1 ← ++ bitmap_clear::y#4 to ++
Resolved ranged comparison value [372] if(bitmap_clear::y#1!=rangelast(0,$27)) goto bitmap_clear::@1 to (number) $28
Resolved ranged next value [1099] gfx_mode::cx#1 ← ++ gfx_mode::cx#2 to ++
Resolved ranged comparison value [1101] if(gfx_mode::cx#1!=rangelast(0,$27)) goto gfx_mode::@22 to (number) $28
Resolved ranged next value [1103] gfx_mode::cy#1 ← ++ gfx_mode::cy#4 to ++
Resolved ranged comparison value [1105] if(gfx_mode::cy#1!=rangelast(0,$18)) goto gfx_mode::@21 to (number) $19
Resolved ranged next value [1128] gfx_mode::j#1 ← ++ gfx_mode::j#2 to ++
Resolved ranged comparison value [1130] if(gfx_mode::j#1!=rangelast(0,$f)) goto gfx_mode::@26 to (number) $10
Resolved ranged next value [1133] gfx_mode::i#1 ← ++ gfx_mode::i#2 to ++
Resolved ranged comparison value [1135] if(gfx_mode::i#1!=rangelast(0,$f)) goto gfx_mode::@29 to (number) $10
Resolved ranged next value [1185] gfx_init_charset::l#1 ← ++ gfx_init_charset::l#2 to ++
Resolved ranged comparison value [1187] if(gfx_init_charset::l#1!=rangelast(0,7)) goto gfx_init_charset::@2 to (number) 8
Resolved ranged next value [1189] gfx_init_charset::c#1 ← ++ gfx_init_charset::c#4 to ++
Resolved ranged comparison value [1191] if(gfx_init_charset::c#1!=rangelast(0,$ff)) goto gfx_init_charset::@1 to (number) 0
Resolved ranged next value [1205] gfx_init_screen0::cx#1 ← ++ gfx_init_screen0::cx#2 to ++
Resolved ranged comparison value [1207] if(gfx_init_screen0::cx#1!=rangelast(0,$27)) goto gfx_init_screen0::@2 to (number) $28
Resolved ranged next value [1209] gfx_init_screen0::cy#1 ← ++ gfx_init_screen0::cy#4 to ++
Resolved ranged comparison value [1211] if(gfx_init_screen0::cy#1!=rangelast(0,$18)) goto gfx_init_screen0::@1 to (number) $19
Resolved ranged next value [1222] gfx_init_screen1::cx#1 ← ++ gfx_init_screen1::cx#2 to ++
Resolved ranged comparison value [1224] if(gfx_init_screen1::cx#1!=rangelast(0,$27)) goto gfx_init_screen1::@2 to (number) $28
Resolved ranged next value [1226] gfx_init_screen1::cy#1 ← ++ gfx_init_screen1::cy#4 to ++
Resolved ranged comparison value [1228] if(gfx_init_screen1::cy#1!=rangelast(0,$18)) goto gfx_init_screen1::@1 to (number) $19
Resolved ranged next value [1244] gfx_init_screen2::cx#1 ← ++ gfx_init_screen2::cx#2 to ++
Resolved ranged comparison value [1246] if(gfx_init_screen2::cx#1!=rangelast(0,$27)) goto gfx_init_screen2::@2 to (number) $28
Resolved ranged next value [1248] gfx_init_screen2::cy#1 ← ++ gfx_init_screen2::cy#4 to ++
Resolved ranged comparison value [1250] if(gfx_init_screen2::cy#1!=rangelast(0,$18)) goto gfx_init_screen2::@1 to (number) $19
Resolved ranged next value [1263] gfx_init_screen3::cx#1 ← ++ gfx_init_screen3::cx#2 to ++
Resolved ranged comparison value [1265] if(gfx_init_screen3::cx#1!=rangelast(0,$27)) goto gfx_init_screen3::@2 to (number) $28
Resolved ranged next value [1267] gfx_init_screen3::cy#1 ← ++ gfx_init_screen3::cy#4 to ++
Resolved ranged comparison value [1269] if(gfx_init_screen3::cy#1!=rangelast(0,$18)) goto gfx_init_screen3::@1 to (number) $19
Resolved ranged next value [1278] gfx_init_screen4::cx#1 ← ++ gfx_init_screen4::cx#2 to ++
Resolved ranged comparison value [1280] if(gfx_init_screen4::cx#1!=rangelast(0,$27)) goto gfx_init_screen4::@2 to (number) $28
Resolved ranged next value [1282] gfx_init_screen4::cy#1 ← ++ gfx_init_screen4::cy#4 to ++
Resolved ranged comparison value [1284] if(gfx_init_screen4::cy#1!=rangelast(0,$18)) goto gfx_init_screen4::@1 to (number) $19
Resolved ranged next value [1328] gfx_init_plane_8bppchunky::x#1 ← ++ gfx_init_plane_8bppchunky::x#2 to ++
Resolved ranged comparison value [1330] if(gfx_init_plane_8bppchunky::x#1!=rangelast(0,$13f)) goto gfx_init_plane_8bppchunky::@2 to (number) $140
Resolved ranged next value [1338] gfx_init_plane_8bppchunky::y#1 ← ++ gfx_init_plane_8bppchunky::y#6 to ++
Resolved ranged comparison value [1340] if(gfx_init_plane_8bppchunky::y#1!=rangelast(0,$c7)) goto gfx_init_plane_8bppchunky::@1 to (number) $c8
Resolved ranged next value [1369] gfx_init_plane_horisontal::ax#1 ← ++ gfx_init_plane_horisontal::ax#2 to ++
Resolved ranged comparison value [1371] if(gfx_init_plane_horisontal::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal::@2 to (number) $28
Resolved ranged next value [1373] gfx_init_plane_horisontal::ay#1 ← ++ gfx_init_plane_horisontal::ay#4 to ++
Resolved ranged comparison value [1375] if(gfx_init_plane_horisontal::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal::@1 to (number) $c8
Resolved ranged next value [1400] gfx_init_plane_horisontal2::ax#1 ← ++ gfx_init_plane_horisontal2::ax#2 to ++
Resolved ranged comparison value [1402] if(gfx_init_plane_horisontal2::ax#1!=rangelast(0,$27)) goto gfx_init_plane_horisontal2::@2 to (number) $28
Resolved ranged next value [1404] gfx_init_plane_horisontal2::ay#1 ← ++ gfx_init_plane_horisontal2::ay#4 to ++
Resolved ranged comparison value [1406] if(gfx_init_plane_horisontal2::ay#1!=rangelast(0,$c7)) goto gfx_init_plane_horisontal2::@1 to (number) $c8
Resolved ranged next value [1427] gfx_init_plane_vertical::bx#1 ← ++ gfx_init_plane_vertical::bx#2 to ++
Resolved ranged comparison value [1429] if(gfx_init_plane_vertical::bx#1!=rangelast(0,$27)) goto gfx_init_plane_vertical::@2 to (number) $28
Resolved ranged next value [1431] gfx_init_plane_vertical::by#1 ← ++ gfx_init_plane_vertical::by#4 to ++
Resolved ranged comparison value [1433] if(gfx_init_plane_vertical::by#1!=rangelast(0,$c7)) goto gfx_init_plane_vertical::@1 to (number) $c8
Resolved ranged next value [1470] gfx_init_plane_charset8::cp#1 ← ++ gfx_init_plane_charset8::cp#2 to ++
Resolved ranged comparison value [1472] if(gfx_init_plane_charset8::cp#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@3 to (number) 8
Resolved ranged next value [1476] gfx_init_plane_charset8::cr#1 ← ++ gfx_init_plane_charset8::cr#6 to ++
Resolved ranged comparison value [1478] if(gfx_init_plane_charset8::cr#1!=rangelast(0,7)) goto gfx_init_plane_charset8::@2 to (number) 8
Resolved ranged next value [1480] gfx_init_plane_charset8::ch#1 ← ++ gfx_init_plane_charset8::ch#8 to ++
Resolved ranged comparison value [1482] if(gfx_init_plane_charset8::ch#1!=rangelast(0,$ff)) goto gfx_init_plane_charset8::@1 to (number) 0
Resolved ranged next value [1519] gfx_init_plane_fill::bx#1 ← ++ gfx_init_plane_fill::bx#2 to ++
Resolved ranged comparison value [1521] if(gfx_init_plane_fill::bx#1!=rangelast(0,$27)) goto gfx_init_plane_fill::@2 to (number) $28
Resolved ranged next value [1523] gfx_init_plane_fill::by#1 ← ++ gfx_init_plane_fill::by#4 to ++
Resolved ranged comparison value [1525] if(gfx_init_plane_fill::by#1!=rangelast(0,$c7)) goto gfx_init_plane_fill::@1 to (number) $c8
Resolved ranged next value [1609] form_mode::i#1 ← ++ form_mode::i#2 to ++
Resolved ranged comparison value [1611] if(form_mode::i#1!=rangelast(0,$f)) goto form_mode::@1 to (number) $10
Resolved ranged next value [1673] form_set_screen::y#1 ← ++ form_set_screen::y#2 to ++
Resolved ranged comparison value [1675] if(form_set_screen::y#1!=rangelast(0,$18)) goto form_set_screen::@1 to (number) $19
Converting *(pointer+n) to pointer[n] [939] if(*((byte*) form_ctrl_line)==(byte) 0) goto gfx_mode::@1  -- *(form_fields_val + 5)
Converting *(pointer+n) to pointer[n] [943] if(*((byte*) form_ctrl_borof)==(byte) 0) goto gfx_mode::@2  -- *(form_fields_val + 8)
Converting *(pointer+n) to pointer[n] [950] if(*((byte*) form_ctrl_hicol)==(byte) 0) goto gfx_mode::@3  -- *(form_fields_val + 4)
Converting *(pointer+n) to pointer[n] [957] if(*((byte*) form_ctrl_overs)==(byte) 0) goto gfx_mode::@4  -- *(form_fields_val + 9)
Converting *(pointer+n) to pointer[n] [964] if(*((byte*) form_ctrl_colof)==(byte) 0) goto gfx_mode::@5  -- *(form_fields_val + 6)
Converting *(pointer+n) to pointer[n] [971] if(*((byte*) form_ctrl_chunk)==(byte) 0) goto gfx_mode::@6  -- *(form_fields_val + 7)
Converting *(pointer+n) to pointer[n] [982] if(*((byte*) form_ctrl_ecm)==(byte) 0) goto gfx_mode::@7  -- *(form_fields_val + 3)
Converting *(pointer+n) to pointer[n] [989] if(*((byte*) form_ctrl_bmm)==(byte) 0) goto gfx_mode::@8  -- *(form_fields_val + 1)
Converting *(pointer+n) to pointer[n] [998] if(*((byte*) form_ctrl_mcm)==(byte) 0) goto gfx_mode::@9  -- *(form_fields_val + 2)
Converting *(pointer+n) to pointer[n] [1004] (byte~) gfx_mode::$20 ← *((byte*) form_a_start_hi) * (byte) $10  -- *(form_fields_val + $b)
Converting *(pointer+n) to pointer[n] [1005] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((byte*) form_a_start_lo)  -- *(form_fields_val + $c)
Converting *(pointer+n) to pointer[n] [1007] (byte) get_plane::idx#0 ← *((byte*) form_a_pattern)  -- *(form_fields_val + $a)
Converting *(pointer+n) to pointer[n] [1023] (byte~) gfx_mode::$30 ← *((byte*) form_a_step_hi) * (byte) $10  -- *(form_fields_val + $d)
Converting *(pointer+n) to pointer[n] [1024] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((byte*) form_a_step_lo)  -- *(form_fields_val + $e)
Converting *(pointer+n) to pointer[n] [1026] (byte~) gfx_mode::$32 ← *((byte*) form_a_mod_hi) * (byte) $10  -- *(form_fields_val + $f)
Converting *(pointer+n) to pointer[n] [1027] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((byte*) form_a_mod_lo)  -- *(form_fields_val + $10)
Converting *(pointer+n) to pointer[n] [1030] (byte~) gfx_mode::$34 ← *((byte*) form_b_start_hi) * (byte) $10  -- *(form_fields_val + $12)
Converting *(pointer+n) to pointer[n] [1031] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((byte*) form_b_start_lo)  -- *(form_fields_val + $13)
Converting *(pointer+n) to pointer[n] [1033] (byte) get_plane::idx#1 ← *((byte*) form_b_pattern)  -- *(form_fields_val + $11)
Converting *(pointer+n) to pointer[n] [1049] (byte~) gfx_mode::$44 ← *((byte*) form_b_step_hi) * (byte) $10  -- *(form_fields_val + $14)
Converting *(pointer+n) to pointer[n] [1050] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((byte*) form_b_step_lo)  -- *(form_fields_val + $15)
Converting *(pointer+n) to pointer[n] [1052] (byte~) gfx_mode::$46 ← *((byte*) form_b_mod_hi) * (byte) $10  -- *(form_fields_val + $16)
Converting *(pointer+n) to pointer[n] [1053] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((byte*) form_b_mod_lo)  -- *(form_fields_val + $17)
Converting *(pointer+n) to pointer[n] [1062] (byte) get_vic_screen::idx#0 ← *((byte*) form_vic_screen)  -- *(form_fields_val + $18)
Converting *(pointer+n) to pointer[n] [1071] (byte) get_vic_charset::idx#0 ← *((byte*) form_vic_gfx)  -- *(form_fields_val + $19)
Converting *(pointer+n) to pointer[n] [1082] (byte) get_vic_screen::idx#1 ← *((byte*) form_vic_cols)  -- *(form_fields_val + $1a)
Converting *(pointer+n) to pointer[n] [1108] (byte~) gfx_mode::$64 ← *((byte*) form_vic_bg0_hi) * (byte) $10  -- *(form_fields_val + $1c)
Converting *(pointer+n) to pointer[n] [1109] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((byte*) form_vic_bg0_lo)  -- *(form_fields_val + $1d)
Converting *(pointer+n) to pointer[n] [1111] (byte~) gfx_mode::$66 ← *((byte*) form_vic_bg1_hi) * (byte) $10  -- *(form_fields_val + $1e)
Converting *(pointer+n) to pointer[n] [1112] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((byte*) form_vic_bg1_lo)  -- *(form_fields_val + $1f)
Converting *(pointer+n) to pointer[n] [1114] (byte~) gfx_mode::$68 ← *((byte*) form_vic_bg2_hi) * (byte) $10  -- *(form_fields_val + $20)
Converting *(pointer+n) to pointer[n] [1115] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((byte*) form_vic_bg2_lo)  -- *(form_fields_val + $21)
Converting *(pointer+n) to pointer[n] [1117] (byte~) gfx_mode::$70 ← *((byte*) form_vic_bg3_hi) * (byte) $10  -- *(form_fields_val + $22)
Converting *(pointer+n) to pointer[n] [1118] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((byte*) form_vic_bg3_lo)  -- *(form_fields_val + $23)
Converting *(pointer+n) to pointer[n] [1121] if(*((byte*) form_dtv_palet)==(byte) 0) goto gfx_mode::@10  -- *(form_fields_val + $1b)
Converting *(pointer+n) to pointer[n] [1700] *((byte*) form_render_values::field#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_render_values::idx#2))  -- *(form_field_ptr::line#0 + form_field_ptr::x#0)
Converting *(pointer+n) to pointer[n] [1721] (byte~) form_control::$14 ← *((byte*) form_control::field#0) | (byte) $80  -- *(form_field_ptr::line#0 + form_field_ptr::x#0)
Converting *(pointer+n) to pointer[n] [1722] *((byte*) form_control::field#0) ← (byte~) form_control::$14  -- *(form_field_ptr::line#0 + form_field_ptr::x#0)
Converting *(pointer+n) to pointer[n] [1724] (byte~) form_control::$13 ← *((byte*) form_control::field#0) & (byte) $7f  -- *(form_field_ptr::line#0 + form_field_ptr::x#0)
Converting *(pointer+n) to pointer[n] [1725] *((byte*) form_control::field#0) ← (byte~) form_control::$13  -- *(form_field_ptr::line#0 + form_field_ptr::x#0)
Converting *(pointer+n) to pointer[n] [1745] (byte~) form_control::$15 ← *((byte*) form_control::field#0) & (byte) $7f  -- *(form_field_ptr::line#0 + form_field_ptr::x#0)
Converting *(pointer+n) to pointer[n] [1746] *((byte*) form_control::field#0) ← (byte~) form_control::$15  -- *(form_field_ptr::line#0 + form_field_ptr::x#0)
Converting *(pointer+n) to pointer[n] [1797] *((byte*) form_control::field#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_field_idx#28))  -- *(form_field_ptr::line#0 + form_field_ptr::x#0)
Successful SSA optimization Pass2InlineDerefIdx
Simplifying expression containing zero KEY_MODIFIER_LSHIFT in [256] (byte) keyboard_modifiers#2 ← (const byte) keyboard_modifiers#1 | (const byte) KEY_MODIFIER_LSHIFT
Simplifying expression containing zero bitmap_plot_xhi in [357] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi + (byte) 0) w= *((const byte[$100]) bitmap_plot_xlo + (byte) 0)
Simplifying expression containing zero bitmap_plot_xlo in [357] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_xhi) w= *((const byte[$100]) bitmap_plot_xlo + (byte) 0)
Simplifying expression containing zero form_fields_val in [863] (byte*) form_preset ← (const byte[]) form_fields_val + (byte) 0
Simplifying expression containing zero DTV_LINEAR in [945] (byte) gfx_mode::dtv_control#1 ← (const byte) gfx_mode::dtv_control#0 | (const byte) DTV_LINEAR
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable (void*) memset::return#2 and assignment [37] (void*) memset::return#2 ← (void*) memset::str#0
Eliminating unused variable - keeping the phi block (byte*) print_screen#13
Eliminating unused variable - keeping the phi block (byte*) print_line_cursor#10
Eliminating unused variable - keeping the phi block (byte*) print_char_cursor#11
Eliminating unused variable (byte*) form_ctrl_bmm and assignment [361] (byte*) form_ctrl_bmm ← (const byte[]) form_fields_val + (byte) 1
Eliminating unused variable (byte*) form_ctrl_mcm and assignment [362] (byte*) form_ctrl_mcm ← (const byte[]) form_fields_val + (byte) 2
Eliminating unused variable (byte*) form_ctrl_ecm and assignment [363] (byte*) form_ctrl_ecm ← (const byte[]) form_fields_val + (byte) 3
Eliminating unused variable (byte*) form_ctrl_hicol and assignment [364] (byte*) form_ctrl_hicol ← (const byte[]) form_fields_val + (byte) 4
Eliminating unused variable (byte*) form_ctrl_line and assignment [365] (byte*) form_ctrl_line ← (const byte[]) form_fields_val + (byte) 5
Eliminating unused variable (byte*) form_ctrl_colof and assignment [366] (byte*) form_ctrl_colof ← (const byte[]) form_fields_val + (byte) 6
Eliminating unused variable (byte*) form_ctrl_chunk and assignment [367] (byte*) form_ctrl_chunk ← (const byte[]) form_fields_val + (byte) 7
Eliminating unused variable (byte*) form_ctrl_borof and assignment [368] (byte*) form_ctrl_borof ← (const byte[]) form_fields_val + (byte) 8
Eliminating unused variable (byte*) form_ctrl_overs and assignment [369] (byte*) form_ctrl_overs ← (const byte[]) form_fields_val + (byte) 9
Eliminating unused variable (byte*) form_a_pattern and assignment [370] (byte*) form_a_pattern ← (const byte[]) form_fields_val + (byte) $a
Eliminating unused variable (byte*) form_a_start_hi and assignment [371] (byte*) form_a_start_hi ← (const byte[]) form_fields_val + (byte) $b
Eliminating unused variable (byte*) form_a_start_lo and assignment [372] (byte*) form_a_start_lo ← (const byte[]) form_fields_val + (byte) $c
Eliminating unused variable (byte*) form_a_step_hi and assignment [373] (byte*) form_a_step_hi ← (const byte[]) form_fields_val + (byte) $d
Eliminating unused variable (byte*) form_a_step_lo and assignment [374] (byte*) form_a_step_lo ← (const byte[]) form_fields_val + (byte) $e
Eliminating unused variable (byte*) form_a_mod_hi and assignment [375] (byte*) form_a_mod_hi ← (const byte[]) form_fields_val + (byte) $f
Eliminating unused variable (byte*) form_a_mod_lo and assignment [376] (byte*) form_a_mod_lo ← (const byte[]) form_fields_val + (byte) $10
Eliminating unused variable (byte*) form_b_pattern and assignment [377] (byte*) form_b_pattern ← (const byte[]) form_fields_val + (byte) $11
Eliminating unused variable (byte*) form_b_start_hi and assignment [378] (byte*) form_b_start_hi ← (const byte[]) form_fields_val + (byte) $12
Eliminating unused variable (byte*) form_b_start_lo and assignment [379] (byte*) form_b_start_lo ← (const byte[]) form_fields_val + (byte) $13
Eliminating unused variable (byte*) form_b_step_hi and assignment [380] (byte*) form_b_step_hi ← (const byte[]) form_fields_val + (byte) $14
Eliminating unused variable (byte*) form_b_step_lo and assignment [381] (byte*) form_b_step_lo ← (const byte[]) form_fields_val + (byte) $15
Eliminating unused variable (byte*) form_b_mod_hi and assignment [382] (byte*) form_b_mod_hi ← (const byte[]) form_fields_val + (byte) $16
Eliminating unused variable (byte*) form_b_mod_lo and assignment [383] (byte*) form_b_mod_lo ← (const byte[]) form_fields_val + (byte) $17
Eliminating unused variable (byte*) form_vic_screen and assignment [384] (byte*) form_vic_screen ← (const byte[]) form_fields_val + (byte) $18
Eliminating unused variable (byte*) form_vic_gfx and assignment [385] (byte*) form_vic_gfx ← (const byte[]) form_fields_val + (byte) $19
Eliminating unused variable (byte*) form_vic_cols and assignment [386] (byte*) form_vic_cols ← (const byte[]) form_fields_val + (byte) $1a
Eliminating unused variable (byte*) form_dtv_palet and assignment [387] (byte*) form_dtv_palet ← (const byte[]) form_fields_val + (byte) $1b
Eliminating unused variable (byte*) form_vic_bg0_hi and assignment [388] (byte*) form_vic_bg0_hi ← (const byte[]) form_fields_val + (byte) $1c
Eliminating unused variable (byte*) form_vic_bg0_lo and assignment [389] (byte*) form_vic_bg0_lo ← (const byte[]) form_fields_val + (byte) $1d
Eliminating unused variable (byte*) form_vic_bg1_hi and assignment [390] (byte*) form_vic_bg1_hi ← (const byte[]) form_fields_val + (byte) $1e
Eliminating unused variable (byte*) form_vic_bg1_lo and assignment [391] (byte*) form_vic_bg1_lo ← (const byte[]) form_fields_val + (byte) $1f
Eliminating unused variable (byte*) form_vic_bg2_hi and assignment [392] (byte*) form_vic_bg2_hi ← (const byte[]) form_fields_val + (byte) $20
Eliminating unused variable (byte*) form_vic_bg2_lo and assignment [393] (byte*) form_vic_bg2_lo ← (const byte[]) form_fields_val + (byte) $21
Eliminating unused variable (byte*) form_vic_bg3_hi and assignment [394] (byte*) form_vic_bg3_hi ← (const byte[]) form_fields_val + (byte) $22
Eliminating unused variable (byte*) form_vic_bg3_lo and assignment [395] (byte*) form_vic_bg3_lo ← (const byte[]) form_fields_val + (byte) $23
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#41
Eliminating unused variable (byte) gfx_init_plane_horisontal::gfxbCpuBank#1 and assignment [669] (byte) gfx_init_plane_horisontal::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_horisontal::gfxbCpuBank#0
Eliminating unused variable (byte) gfx_init_plane_horisontal2::gfxbCpuBank#1 and assignment [692] (byte) gfx_init_plane_horisontal2::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
Eliminating unused variable (byte) gfx_init_plane_vertical::gfxbCpuBank#1 and assignment [712] (byte) gfx_init_plane_vertical::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_vertical::gfxbCpuBank#0
Eliminating unused variable (byte) gfx_init_plane_charset8::gfxbCpuBank#1 and assignment [730] (byte) gfx_init_plane_charset8::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_charset8::gfxbCpuBank#0
Eliminating unused variable (byte) gfx_init_plane_fill::gfxbCpuBank#1 and assignment [768] (byte) gfx_init_plane_fill::gfxbCpuBank#1 ← ++ (byte) gfx_init_plane_fill::gfxbCpuBank#0
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#44
Eliminating unused variable (byte*) form_render_values::field#0 and assignment [874] (byte*) form_render_values::field#0 ← (byte*) form_field_ptr::return#2
Eliminating unused variable (byte*) form_control::field#0 and assignment [881] (byte*) form_control::field#0 ← (byte*) form_field_ptr::return#3
Eliminating unused constant (const byte) bitmap_line::xd#0
Eliminating unused constant (const byte) bitmap_line::yd#0
Eliminating unused constant (const byte*) apply_preset::preset#0
Eliminating unused constant (const byte*) render_preset_name::name#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#24
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#13
Eliminating unused variable (byte*) form_field_ptr::return#2 and assignment [832] (byte*) form_field_ptr::return#2 ← (byte*) form_field_ptr::return#0
Eliminating unused variable (byte*) form_field_ptr::return#3 and assignment [838] (byte*) form_field_ptr::return#3 ← (byte*) form_field_ptr::return#0
Eliminating unused constant (const byte*) print_screen#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused variable - keeping the phi block (byte) keyboard_modifiers#11
Eliminating unused variable (byte*) form_field_ptr::return#0 and assignment [826] (byte*) form_field_ptr::return#0 ← (byte*) form_field_ptr::line#0 + (byte) form_field_ptr::x#0
Eliminating unused constant (const byte) keyboard_modifiers#0
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Adding number conversion cast (unumber) 8 in if((byte) keyboard_event_scan::row#1!=(number) 8) goto keyboard_event_scan::@8
Adding number conversion cast (unumber) 8 in if((byte) keyboard_event_scan::col#1!=(number) 8) goto keyboard_event_scan::@11
Adding number conversion cast (unumber) 0 in if((byte) bitmap_init::x#1!=(number) 0) goto bitmap_init::@1
Adding number conversion cast (unumber) 0 in if((byte) bitmap_init::y#1!=(number) 0) goto bitmap_init::@5
Adding number conversion cast (unumber) $c8 in if((byte) bitmap_clear::x#1!=(number) $c8) goto bitmap_clear::@2
Adding number conversion cast (unumber) $28 in if((byte) bitmap_clear::y#1!=(number) $28) goto bitmap_clear::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_mode::cx#1!=(number) $28) goto gfx_mode::@22
Adding number conversion cast (unumber) $19 in if((byte) gfx_mode::cy#1!=(number) $19) goto gfx_mode::@21
Adding number conversion cast (unumber) $10 in if((byte) gfx_mode::j#1!=(number) $10) goto gfx_mode::@26
Adding number conversion cast (unumber) $10 in if((byte) gfx_mode::i#1!=(number) $10) goto gfx_mode::@29
Adding number conversion cast (unumber) 8 in if((byte) gfx_init_charset::l#1!=(number) 8) goto gfx_init_charset::@2
Adding number conversion cast (unumber) 0 in if((byte) gfx_init_charset::c#1!=(number) 0) goto gfx_init_charset::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen0::cx#1!=(number) $28) goto gfx_init_screen0::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen0::cy#1!=(number) $19) goto gfx_init_screen0::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen1::cx#1!=(number) $28) goto gfx_init_screen1::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen1::cy#1!=(number) $19) goto gfx_init_screen1::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen2::cx#1!=(number) $28) goto gfx_init_screen2::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen2::cy#1!=(number) $19) goto gfx_init_screen2::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen3::cx#1!=(number) $28) goto gfx_init_screen3::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen3::cy#1!=(number) $19) goto gfx_init_screen3::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_screen4::cx#1!=(number) $28) goto gfx_init_screen4::@2
Adding number conversion cast (unumber) $19 in if((byte) gfx_init_screen4::cy#1!=(number) $19) goto gfx_init_screen4::@1
Adding number conversion cast (unumber) $140 in if((word) gfx_init_plane_8bppchunky::x#1!=(number) $140) goto gfx_init_plane_8bppchunky::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_8bppchunky::y#1!=(number) $c8) goto gfx_init_plane_8bppchunky::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_plane_horisontal::ax#1!=(number) $28) goto gfx_init_plane_horisontal::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_horisontal::ay#1!=(number) $c8) goto gfx_init_plane_horisontal::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_plane_horisontal2::ax#1!=(number) $28) goto gfx_init_plane_horisontal2::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_horisontal2::ay#1!=(number) $c8) goto gfx_init_plane_horisontal2::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_plane_vertical::bx#1!=(number) $28) goto gfx_init_plane_vertical::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_vertical::by#1!=(number) $c8) goto gfx_init_plane_vertical::@1
Adding number conversion cast (unumber) 8 in if((byte) gfx_init_plane_charset8::cp#1!=(number) 8) goto gfx_init_plane_charset8::@3
Adding number conversion cast (unumber) 8 in if((byte) gfx_init_plane_charset8::cr#1!=(number) 8) goto gfx_init_plane_charset8::@2
Adding number conversion cast (unumber) 0 in if((byte) gfx_init_plane_charset8::ch#1!=(number) 0) goto gfx_init_plane_charset8::@1
Adding number conversion cast (unumber) $28 in if((byte) gfx_init_plane_fill::bx#1!=(number) $28) goto gfx_init_plane_fill::@2
Adding number conversion cast (unumber) $c8 in if((byte) gfx_init_plane_fill::by#1!=(number) $c8) goto gfx_init_plane_fill::@1
Adding number conversion cast (unumber) $10 in if((byte) form_mode::i#1!=(number) $10) goto form_mode::@1
Adding number conversion cast (unumber) $19 in if((byte) form_set_screen::y#1!=(number) $19) goto form_set_screen::@1
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast (byte*) bitmap_clear::bitmap#0 ← (byte*)(word~) bitmap_clear::$3
Inlining cast (byte*) form_field_ptr::line#0 ← (byte*)(word~) form_field_ptr::$2
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $10
Simplifying constant integer cast $10
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $28
Simplifying constant integer cast $19
Simplifying constant integer cast $140
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast 8
Simplifying constant integer cast 8
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $c8
Simplifying constant integer cast $10
Simplifying constant integer cast $19
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $19
Finalized unsigned number type (word) $140
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 8
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Finalized unsigned number type (byte) $c8
Finalized unsigned number type (byte) $10
Finalized unsigned number type (byte) $19
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte~) bitmap_init::$10 = (byte~) bitmap_init::$6 
Alias (word~) gfx_mode::$26 = (word~) gfx_mode::$24 
Alias (word~) gfx_mode::$40 = (word~) gfx_mode::$38 
Alias (dword~) form_mode::$15 = (dword~) form_mode::$12 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) keyboard_events_size#11 (byte) keyboard_events_size#24
Identical Phi Values (signed byte) form_cursor_count#13 (signed byte) form_cursor_count#16
Identical Phi Values (byte) keyboard_events_size#13 (byte) keyboard_events_size#24
Identical Phi Values (byte) form_field_idx#14 (byte) form_field_idx#18
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values (byte) keyboard_events_size#45 (byte) keyboard_events_size#24
Successful SSA optimization Pass2IdenticalPhiElimination
Constant right-side identified [47] (byte) KEY_MODIFIER_SHIFT ← (const byte) KEY_MODIFIER_LSHIFT | (const byte) KEY_MODIFIER_RSHIFT
Constant right-side identified [115] (byte~) bitmap_init::$1 ← > (const byte*) bitmap_init::bitmap#0
Constant right-side identified [353] (byte*~) render_preset_name::$11 ← (const byte*) FORM_SCREEN + (byte)(number) $28*(number) 2
Constant right-side identified [377] (byte~) gfx_mode::$12 ← (const byte) VIC_DEN | (const byte) VIC_RSEL
Constant right-side identified [464] (byte) gfx_mode::vic_control2#1 ← (const byte) gfx_mode::vic_control2#0 | (const byte) VIC_MCM
Constant right-side identified [606] (dword~) gfx_init_plane_8bppchunky::$0 ← (const dword) PLANE_8BPP_CHUNKY / (word) $4000
Constant right-side identified [628] (dword~) gfx_init_plane_horisontal::$0 ← (const dword) PLANE_HORISONTAL / (word) $4000
Constant right-side identified [632] (word~) gfx_init_plane_horisontal::$3 ← (const dword) PLANE_HORISONTAL & (word) $3fff
Constant right-side identified [650] (dword~) gfx_init_plane_horisontal2::$0 ← (const dword) PLANE_HORISONTAL2 / (word) $4000
Constant right-side identified [654] (word~) gfx_init_plane_horisontal2::$3 ← (const dword) PLANE_HORISONTAL2 & (word) $3fff
Constant right-side identified [669] (dword~) gfx_init_plane_vertical::$0 ← (const dword) PLANE_VERTICAL / (word) $4000
Constant right-side identified [673] (word~) gfx_init_plane_vertical::$3 ← (const dword) PLANE_VERTICAL & (word) $3fff
Constant right-side identified [686] (dword~) gfx_init_plane_charset8::$0 ← (const dword) PLANE_CHARSET8 / (word) $4000
Constant right-side identified [690] (word~) gfx_init_plane_charset8::$3 ← (const dword) PLANE_CHARSET8 & (word) $3fff
Constant right-side identified [755] (dword~) form_mode::$15 ← (const dword) DTV_COLOR_BANK_DEFAULT / (word) $400
Constant right-side identified [770] (byte~) form_mode::$22 ← (const byte) VIC_DEN | (const byte) VIC_RSEL
Constant right-side identified [783] (byte~) form_mode::$32 ← < (const byte*) FORM_SCREEN
Constant right-side identified [785] (byte~) form_mode::$33 ← > (const byte*) FORM_SCREEN
Constant right-side identified [810] (signed byte) form_cursor_count#26 ← (const signed byte) FORM_CURSOR_BLINK / (signed byte) 2
Constant right-side identified [838] (signed byte~) form_control::$3 ← (const signed byte) FORM_CURSOR_BLINK / (signed byte) 2
Constant right-side identified [858] (byte) form_field_idx#7 ← (const byte) form_fields_cnt - (byte) 1
Constant right-side identified [860] (signed byte) form_cursor_count#7 ← (const signed byte) FORM_CURSOR_BLINK / (signed byte) 2
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
Constant (const byte) keyboard_modifiers#2 = KEY_MODIFIER_LSHIFT
Constant (const byte) bitmap_init::$1 = >bitmap_init::bitmap#0
Constant (const dword) get_plane::return#0 = (dword)VIC_SCREEN0
Constant (const dword) get_plane::return#1 = (dword)VIC_SCREEN1
Constant (const dword) get_plane::return#2 = (dword)VIC_SCREEN2
Constant (const dword) get_plane::return#3 = (dword)VIC_SCREEN3
Constant (const dword) get_plane::return#4 = (dword)VIC_BITMAP
Constant (const dword) get_plane::return#5 = (dword)VIC_CHARSET_ROM
Constant (const dword) get_plane::return#15 = (dword)VIC_SCREEN0
Constant (const byte*) render_preset_name::$11 = FORM_SCREEN+(byte)$28*2
Constant (const byte*) form_preset = form_fields_val
Constant (const byte) gfx_mode::dtv_control#1 = DTV_LINEAR
Constant (const byte) gfx_mode::$12 = VIC_DEN|VIC_RSEL
Constant (const word) gfx_mode::$48 = (word)VIC_SCREEN0
Constant (const byte) gfx_mode::vic_control2#1 = gfx_mode::vic_control2#0|VIC_MCM
Constant (const dword) gfx_init_plane_8bppchunky::$0 = PLANE_8BPP_CHUNKY/$4000
Constant (const dword) gfx_init_plane_horisontal::$0 = PLANE_HORISONTAL/$4000
Constant (const word) gfx_init_plane_horisontal::$3 = PLANE_HORISONTAL&$3fff
Constant (const dword) gfx_init_plane_horisontal2::$0 = PLANE_HORISONTAL2/$4000
Constant (const word) gfx_init_plane_horisontal2::$3 = PLANE_HORISONTAL2&$3fff
Constant (const dword) gfx_init_plane_vertical::$0 = PLANE_VERTICAL/$4000
Constant (const word) gfx_init_plane_vertical::$3 = PLANE_VERTICAL&$3fff
Constant (const dword) gfx_init_plane_charset8::$0 = PLANE_CHARSET8/$4000
Constant (const word) gfx_init_plane_charset8::$3 = PLANE_CHARSET8&$3fff
Constant (const dword) form_mode::$9 = (dword)FORM_CHARSET
Constant (const dword) form_mode::$15 = DTV_COLOR_BANK_DEFAULT/$400
Constant (const word) form_mode::$18 = (word)FORM_CHARSET
Constant (const byte) form_mode::$22 = VIC_DEN|VIC_RSEL
Constant (const word) form_mode::$24 = (word)FORM_SCREEN
Constant (const word) form_mode::$27 = (word)FORM_CHARSET
Constant (const byte) form_mode::$32 = <FORM_SCREEN
Constant (const byte) form_mode::$33 = >FORM_SCREEN
Constant (const signed byte) form_cursor_count#26 = FORM_CURSOR_BLINK/2
Constant (const signed byte) form_control::$3 = FORM_CURSOR_BLINK/2
Constant (const byte) form_field_idx#7 = form_fields_cnt-1
Constant (const signed byte) form_cursor_count#7 = FORM_CURSOR_BLINK/2
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)gfx_init_plane_8bppchunky::$0 in [607] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 ← (byte)(const dword) gfx_init_plane_8bppchunky::$0
Constant value identified (byte)gfx_init_plane_horisontal::$0 in [629] (byte) gfx_init_plane_horisontal::gfxbCpuBank#0 ← (byte)(const dword) gfx_init_plane_horisontal::$0
Constant value identified (byte)gfx_init_plane_horisontal2::$0 in [651] (byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 ← (byte)(const dword) gfx_init_plane_horisontal2::$0
Constant value identified (byte)gfx_init_plane_vertical::$0 in [670] (byte) gfx_init_plane_vertical::gfxbCpuBank#0 ← (byte)(const dword) gfx_init_plane_vertical::$0
Constant value identified (byte)gfx_init_plane_charset8::$0 in [687] (byte) gfx_init_plane_charset8::gfxbCpuBank#0 ← (byte)(const dword) gfx_init_plane_charset8::$0
Constant value identified (word)form_mode::$15 in [756] (word~) form_mode::$13 ← (word)(const dword) form_mode::$15
Constant value identified (word)form_mode::$15 in [760] (word~) form_mode::$16 ← (word)(const dword) form_mode::$15
Successful SSA optimization Pass2ConstantValues
Simplifying constant evaluating to zero (const dword) PLANE_HORISONTAL&(word) $3fff in 
Simplifying constant evaluating to zero (const dword) PLANE_HORISONTAL2&(word) $3fff in 
Simplifying constant evaluating to zero (const dword) PLANE_CHARSET8&(word) $3fff in 
Simplifying constant evaluating to zero <(const byte*) FORM_SCREEN in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero $4000 in [633] (word~) gfx_init_plane_horisontal::$4 ← (word) $4000 + (const word) gfx_init_plane_horisontal::$3
Simplifying expression containing zero $4000 in [655] (word~) gfx_init_plane_horisontal2::$4 ← (word) $4000 + (const word) gfx_init_plane_horisontal2::$3
Simplifying expression containing zero $4000 in [691] (word~) gfx_init_plane_charset8::$4 ← (word) $4000 + (const word) gfx_init_plane_charset8::$3
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const word) gfx_init_plane_horisontal::$3
Eliminating unused constant (const word) gfx_init_plane_horisontal2::$3
Eliminating unused constant (const word) gfx_init_plane_charset8::$3
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [342] (byte*) print_str_at::at#1 ← (const byte*) render_preset_name::$11 + (byte) $a
Constant right-side identified [363] (byte) gfx_mode::vic_control#0 ← (const byte) gfx_mode::$12 | (byte) 3
Constant right-side identified [420] (word~) gfx_mode::$49 ← (const word) gfx_mode::$48 / (word) $4000
Constant right-side identified [646] (word~) gfx_init_plane_vertical::$4 ← (word) $4000 + (const word) gfx_init_plane_vertical::$3
Constant right-side identified [721] (dword~) form_mode::$10 ← (const dword) form_mode::$9 / (dword) $10000
Constant right-side identified [731] (word~) form_mode::$19 ← (const word) form_mode::$18 / (word) $4000
Constant right-side identified [736] (byte~) form_mode::$23 ← (const byte) form_mode::$22 | (byte) 3
Constant right-side identified [739] (word~) form_mode::$25 ← (const word) form_mode::$24 & (word) $3fff
Constant right-side identified [741] (word~) form_mode::$28 ← (const word) form_mode::$27 & (word) $3fff
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte*) print_str_at::at#1 = render_preset_name::$11+$a
Constant (const byte) gfx_mode::vic_control#0 = gfx_mode::$12|3
Constant (const word) gfx_mode::$49 = gfx_mode::$48/$4000
Constant (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte)gfx_init_plane_8bppchunky::$0
Constant (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 = (byte)gfx_init_plane_horisontal::$0
Constant (const word) gfx_init_plane_horisontal::$4 = $4000
Constant (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 = (byte)gfx_init_plane_horisontal2::$0
Constant (const word) gfx_init_plane_horisontal2::$4 = $4000
Constant (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 = (byte)gfx_init_plane_vertical::$0
Constant (const word) gfx_init_plane_vertical::$4 = $4000+gfx_init_plane_vertical::$3
Constant (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 = (byte)gfx_init_plane_charset8::$0
Constant (const word) gfx_init_plane_charset8::$4 = $4000
Constant (const dword) form_mode::$10 = form_mode::$9/$10000
Constant (const word) form_mode::$13 = (word)form_mode::$15
Constant (const word) form_mode::$16 = (word)form_mode::$15
Constant (const word) form_mode::$19 = form_mode::$18/$4000
Constant (const byte) form_mode::$23 = form_mode::$22|3
Constant (const word) form_mode::$25 = form_mode::$24&$3fff
Constant (const word) form_mode::$28 = form_mode::$27&$3fff
Successful SSA optimization Pass2ConstantIdentification
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0 = gfx_init_plane_8bppchunky::gfxbCpuBank#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#3 = gfx_init_plane_horisontal::gfxbCpuBank#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#5 = gfx_init_plane_horisontal2::gfxbCpuBank#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#7 = gfx_init_plane_vertical::gfxbCpuBank#0
Constant (const byte) dtvSetCpuBankSegment1::cpuBankIdx#9 = gfx_init_plane_charset8::gfxbCpuBank#0
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)gfx_mode::$49 in [421] (byte~) gfx_mode::$50 ← (byte)(const word) gfx_mode::$49
Constant value identified (byte*)gfx_init_plane_horisontal::$4 in [610] (byte*) gfx_init_plane_horisontal::gfxa#0 ← (byte*)(const word) gfx_init_plane_horisontal::$4
Constant value identified (byte*)gfx_init_plane_horisontal2::$4 in [630] (byte*) gfx_init_plane_horisontal2::gfxa#0 ← (byte*)(const word) gfx_init_plane_horisontal2::$4
Constant value identified (byte*)gfx_init_plane_vertical::$4 in [647] (byte*) gfx_init_plane_vertical::gfxb#0 ← (byte*)(const word) gfx_init_plane_vertical::$4
Constant value identified (byte*)gfx_init_plane_charset8::$4 in [662] (byte*) gfx_init_plane_charset8::gfxa#0 ← (byte*)(const word) gfx_init_plane_charset8::$4
Constant value identified (byte)form_mode::$10 in [722] (byte~) form_mode::$11 ← (byte)(const dword) form_mode::$10
Constant value identified (byte)form_mode::$19 in [732] (byte~) form_mode::$20 ← (byte)(const word) form_mode::$19
Successful SSA optimization Pass2ConstantValues
Simplifying constant evaluating to zero (const dword) form_mode::$9/(dword) $10000 in 
Simplifying constant evaluating to zero (const word) form_mode::$18/(word) $4000 in 
Simplifying constant evaluating to zero (byte)(const dword) form_mode::$10 in [722] (byte~) form_mode::$11 ← (byte)(const dword) form_mode::$10
Simplifying constant evaluating to zero (byte)(const word) form_mode::$19 in [732] (byte~) form_mode::$20 ← (byte)(const word) form_mode::$19
Successful SSA optimization PassNSimplifyConstantZero
Eliminating unused constant (const dword) form_mode::$9
Eliminating unused constant (const word) form_mode::$18
Eliminating unused constant (const dword) form_mode::$10
Eliminating unused constant (const word) form_mode::$19
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [366] (byte) gfx_mode::vic_control#1 ← (const byte) gfx_mode::vic_control#0 | (const byte) VIC_ECM
Constant right-side identified [583] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 ← ++ (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
Constant right-side identified [706] (byte~) form_mode::$14 ← < (const word) form_mode::$13
Constant right-side identified [708] (byte~) form_mode::$17 ← > (const word) form_mode::$16
Constant right-side identified [717] (word~) form_mode::$26 ← (const word) form_mode::$25 / (byte) $40
Constant right-side identified [718] (word~) form_mode::$29 ← (const word) form_mode::$28 / (word) $400
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) gfx_mode::vic_control#1 = gfx_mode::vic_control#0|VIC_ECM
Constant (const byte) gfx_mode::$50 = (byte)gfx_mode::$49
Constant (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++gfx_init_plane_8bppchunky::gfxbCpuBank#0
Constant (const byte*) gfx_init_plane_horisontal::gfxa#0 = (byte*)gfx_init_plane_horisontal::$4
Constant (const byte*) gfx_init_plane_horisontal2::gfxa#0 = (byte*)gfx_init_plane_horisontal2::$4
Constant (const byte*) gfx_init_plane_vertical::gfxb#0 = (byte*)gfx_init_plane_vertical::$4
Constant (const byte*) gfx_init_plane_charset8::gfxa#0 = (byte*)gfx_init_plane_charset8::$4
Constant (const byte) form_mode::$11 = 0
Constant (const byte) form_mode::$14 = <form_mode::$13
Constant (const byte) form_mode::$17 = >form_mode::$16
Constant (const byte) form_mode::$20 = 0
Constant (const word) form_mode::$26 = form_mode::$25/$40
Constant (const word) form_mode::$29 = form_mode::$28/$400
Successful SSA optimization Pass2ConstantIdentification
Simplifying constant evaluating to zero >(const word) form_mode::$16 in 
Successful SSA optimization PassNSimplifyConstantZero
Simplifying expression containing zero 3 in [712] (byte~) form_mode::$21 ← (byte) 3 ^ (const byte) form_mode::$20
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const word) form_mode::$16
Eliminating unused constant (const byte) form_mode::$20
Successful SSA optimization PassNEliminateUnusedVars
Constant right-side identified [417] (byte~) gfx_mode::$51 ← (byte) 3 ^ (const byte) gfx_mode::$50
Constant right-side identified [706] (word~) form_mode::$30 ← (const word) form_mode::$26 | (const word) form_mode::$29
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant (const byte) gfx_mode::$51 = 3^gfx_mode::$50
Constant (const byte) form_mode::$21 = 3
Constant (const word) form_mode::$30 = form_mode::$26|form_mode::$29
Successful SSA optimization Pass2ConstantIdentification
Constant value identified (byte)form_mode::$30 in [707] (byte~) form_mode::$31 ← (byte)(const word) form_mode::$30
Successful SSA optimization Pass2ConstantValues
Constant (const byte) form_mode::$31 = (byte)form_mode::$30
Successful SSA optimization Pass2ConstantIdentification
Inlining Noop Cast [4] (byte*~) memset::$2 ← (byte*)(void*) memset::str#0 keeping memset::str#0
Inlining Noop Cast [6] (byte*) memset::dst#0 ← (byte*)(void*) memset::str#0 keeping memset::str#0
Successful SSA optimization Pass2NopCastInlining
Inlining Noop Cast [134] (byte*) bitmap_clear::bitmap#0 ← (byte*)(word~) bitmap_clear::$3 keeping bitmap_clear::bitmap#0
Inlining Noop Cast [148] (byte*) bitmap_plot::plotter#0 ← (byte*)(word~) bitmap_plot::$0 keeping bitmap_plot::plotter#0
Inlining Noop Cast [422] (word~) gfx_mode::$53 ← (word)(byte*~) gfx_mode::$52 keeping gfx_mode::$53
Inlining Noop Cast [430] (word~) gfx_mode::$58 ← (word)(byte*~) gfx_mode::$57 keeping gfx_mode::$58
Inlining Noop Cast [675] (byte*) gfx_init_plane_fill::gfxb#0 ← (byte*)(word~) gfx_init_plane_fill::$6 keeping gfx_init_plane_fill::gfxb#0
Inlining Noop Cast [741] (byte*) form_field_ptr::line#0 ← (byte*)(word~) form_field_ptr::$2 keeping form_field_ptr::line#0
Successful SSA optimization Pass2NopCastInlining
Rewriting multiplication to use shift [372] (byte~) gfx_mode::$20 ← *((const byte[]) form_fields_val + (byte) $b) * (byte) $10
Rewriting multiplication to use shift [387] (byte~) gfx_mode::$30 ← *((const byte[]) form_fields_val + (byte) $d) * (byte) $10
Rewriting multiplication to use shift [390] (byte~) gfx_mode::$32 ← *((const byte[]) form_fields_val + (byte) $f) * (byte) $10
Rewriting multiplication to use shift [394] (byte~) gfx_mode::$34 ← *((const byte[]) form_fields_val + (byte) $12) * (byte) $10
Rewriting multiplication to use shift [409] (byte~) gfx_mode::$44 ← *((const byte[]) form_fields_val + (byte) $14) * (byte) $10
Rewriting multiplication to use shift [412] (byte~) gfx_mode::$46 ← *((const byte[]) form_fields_val + (byte) $16) * (byte) $10
Rewriting division to use shift [424] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 / (byte) $40
Rewriting division to use shift [433] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 / (byte) 4
Rewriting multiplication to use shift [450] (byte~) gfx_mode::$64 ← *((const byte[]) form_fields_val + (byte) $1c) * (byte) $10
Rewriting multiplication to use shift [453] (byte~) gfx_mode::$66 ← *((const byte[]) form_fields_val + (byte) $1e) * (byte) $10
Rewriting multiplication to use shift [456] (byte~) gfx_mode::$68 ← *((const byte[]) form_fields_val + (byte) $20) * (byte) $10
Rewriting multiplication to use shift [459] (byte~) gfx_mode::$70 ← *((const byte[]) form_fields_val + (byte) $22) * (byte) $10
Rewriting multiplication to use shift [509] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 * (byte) $10
Rewriting multiplication to use shift [535] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 * (byte) $10
Rewriting multiplication to use shift [547] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 * (byte) $10
Rewriting division to use shift [616] (byte~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#4 / (byte) 2
Rewriting multiplication to use shift [649] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 * (byte) 2
Rewriting multiplication to use shift [667] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 * (byte) 4
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#2
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#4
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#6
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#8
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#10
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#12
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#0
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#3
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#5
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#7
Inlining constant with var siblings (const byte) dtvSetCpuBankSegment1::cpuBankIdx#9
Inlining constant with var siblings (const byte*) print_str_lines::str#1
Inlining constant with var siblings (const byte*) print_str_lines::str#2
Inlining constant with var siblings (const byte*) print_str_at::at#1
Inlining constant with var siblings (const byte*) print_set_screen::screen#0
Inlining constant with var siblings (const byte*) print_set_screen::screen#1
Inlining constant with var siblings (const byte) keyboard_event_scan::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_scan::row#0
Inlining constant with var siblings (const byte) keyboard_event_scan::col#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#0
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#1
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#2
Inlining constant with var siblings (const byte) keyboard_event_pressed::keycode#3
Inlining constant with var siblings (const byte) keyboard_event_get::return#0
Inlining constant with var siblings (const byte) bitmap_init::bits#0
Inlining constant with var siblings (const byte) bitmap_init::x#0
Inlining constant with var siblings (const byte) bitmap_init::bits#2
Inlining constant with var siblings (const byte*) bitmap_init::yoffs#0
Inlining constant with var siblings (const byte) bitmap_init::y#0
Inlining constant with var siblings (const byte) bitmap_clear::y#0
Inlining constant with var siblings (const byte) bitmap_clear::x#0
Inlining constant with var siblings (const dword) get_plane::return#6
Inlining constant with var siblings (const dword) get_plane::return#7
Inlining constant with var siblings (const dword) get_plane::return#8
Inlining constant with var siblings (const dword) get_plane::return#9
Inlining constant with var siblings (const dword) get_plane::return#10
Inlining constant with var siblings (const dword) get_plane::return#11
Inlining constant with var siblings (const dword) get_plane::return#12
Inlining constant with var siblings (const dword) get_plane::return#13
Inlining constant with var siblings (const dword) get_plane::return#0
Inlining constant with var siblings (const dword) get_plane::return#1
Inlining constant with var siblings (const dword) get_plane::return#2
Inlining constant with var siblings (const dword) get_plane::return#3
Inlining constant with var siblings (const dword) get_plane::return#4
Inlining constant with var siblings (const dword) get_plane::return#5
Inlining constant with var siblings (const dword) get_plane::return#15
Inlining constant with var siblings (const byte*) get_vic_screen::return#0
Inlining constant with var siblings (const byte*) get_vic_screen::return#1
Inlining constant with var siblings (const byte*) get_vic_screen::return#2
Inlining constant with var siblings (const byte*) get_vic_screen::return#3
Inlining constant with var siblings (const byte*) get_vic_screen::return#4
Inlining constant with var siblings (const byte*) get_vic_screen::return#6
Inlining constant with var siblings (const byte*) get_vic_charset::return#0
Inlining constant with var siblings (const byte*) get_vic_charset::return#1
Inlining constant with var siblings (const byte*) get_vic_charset::return#3
Inlining constant with var siblings (const byte) apply_preset::i#0
Inlining constant with var siblings (const byte*) apply_preset::preset#1
Inlining constant with var siblings (const byte*) apply_preset::preset#2
Inlining constant with var siblings (const byte*) apply_preset::preset#3
Inlining constant with var siblings (const byte*) apply_preset::preset#4
Inlining constant with var siblings (const byte*) apply_preset::preset#5
Inlining constant with var siblings (const byte*) apply_preset::preset#6
Inlining constant with var siblings (const byte*) apply_preset::preset#7
Inlining constant with var siblings (const byte*) apply_preset::preset#8
Inlining constant with var siblings (const byte*) apply_preset::preset#9
Inlining constant with var siblings (const byte*) apply_preset::preset#10
Inlining constant with var siblings (const byte*) apply_preset::preset#11
Inlining constant with var siblings (const byte*) apply_preset::preset#12
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#12
Inlining constant with var siblings (const byte) gfx_mode::dtv_control#0
Inlining constant with var siblings (const byte) gfx_mode::cy#0
Inlining constant with var siblings (const byte) gfx_mode::cx#0
Inlining constant with var siblings (const byte) gfx_mode::i#0
Inlining constant with var siblings (const byte) gfx_mode::j#0
Inlining constant with var siblings (const byte) gfx_mode::vic_control2#0
Inlining constant with var siblings (const byte*) gfx_mode::col#0
Inlining constant with var siblings (const byte) gfx_mode::dtv_control#1
Inlining constant with var siblings (const byte) gfx_mode::vic_control2#1
Inlining constant with var siblings (const byte) gfx_mode::vic_control#0
Inlining constant with var siblings (const byte) gfx_mode::vic_control#1
Inlining constant with var siblings (const byte) gfx_init_charset::c#0
Inlining constant with var siblings (const byte) gfx_init_charset::l#0
Inlining constant with var siblings (const byte*) gfx_init_charset::chargen#0
Inlining constant with var siblings (const byte*) gfx_init_charset::charset#0
Inlining constant with var siblings (const byte) gfx_init_screen0::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen0::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen0::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen1::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen1::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen1::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen2::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen2::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen2::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen3::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen3::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen3::ch#0
Inlining constant with var siblings (const byte) gfx_init_screen4::cy#0
Inlining constant with var siblings (const byte) gfx_init_screen4::cx#0
Inlining constant with var siblings (const byte*) gfx_init_screen4::ch#0
Inlining constant with var siblings (const byte) gfx_init_vic_bitmap::l#0
Inlining constant with var siblings (const byte*) gfx_init_plane_8bppchunky::gfxb#0
Inlining constant with var siblings (const byte) gfx_init_plane_8bppchunky::y#0
Inlining constant with var siblings (const word) gfx_init_plane_8bppchunky::x#0
Inlining constant with var siblings (const byte*) gfx_init_plane_8bppchunky::gfxb#2
Inlining constant with var siblings (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#0
Inlining constant with var siblings (const byte) gfx_init_plane_8bppchunky::gfxbCpuBank#1
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal::ay#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal::ax#0
Inlining constant with var siblings (const byte*) gfx_init_plane_horisontal::gfxa#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal2::ay#0
Inlining constant with var siblings (const byte) gfx_init_plane_horisontal2::ax#0
Inlining constant with var siblings (const byte*) gfx_init_plane_horisontal2::gfxa#0
Inlining constant with var siblings (const byte) gfx_init_plane_vertical::by#0
Inlining constant with var siblings (const byte) gfx_init_plane_vertical::bx#0
Inlining constant with var siblings (const byte*) gfx_init_plane_vertical::gfxb#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::col#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::ch#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::cr#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::cp#0
Inlining constant with var siblings (const byte) gfx_init_plane_charset8::c#0
Inlining constant with var siblings (const byte*) gfx_init_plane_charset8::chargen#0
Inlining constant with var siblings (const byte*) gfx_init_plane_charset8::gfxa#0
Inlining constant with var siblings (const byte) gfx_init_plane_fill::fill#0
Inlining constant with var siblings (const byte) gfx_init_plane_fill::fill#1
Inlining constant with var siblings (const byte) gfx_init_plane_fill::fill#2
Inlining constant with var siblings (const byte) gfx_init_plane_fill::by#0
Inlining constant with var siblings (const byte) gfx_init_plane_fill::bx#0
Inlining constant with var siblings (const dword) gfx_init_plane_fill::plane_addr#0
Inlining constant with var siblings (const dword) gfx_init_plane_fill::plane_addr#1
Inlining constant with var siblings (const dword) gfx_init_plane_fill::plane_addr#2
Inlining constant with var siblings (const byte) form_mode::i#0
Inlining constant with var siblings (const byte) form_set_screen::y#0
Inlining constant with var siblings (const byte) form_render_values::idx#0
Inlining constant with var siblings (const byte) form_control::return#1
Inlining constant with var siblings (const byte) form_control::return#3
Inlining constant with var siblings (const byte) form_control::return#4
Inlining constant with var siblings (const byte) form_control::return#5
Inlining constant with var siblings (const byte) keyboard_events_size#0
Inlining constant with var siblings (const byte) keyboard_modifiers#1
Inlining constant with var siblings (const byte) form_field_idx#34
Inlining constant with var siblings (const byte) form_field_idx#8
Inlining constant with var siblings (const signed byte) form_cursor_count#6
Inlining constant with var siblings (const byte) keyboard_modifiers#2
Inlining constant with var siblings (const signed byte) form_cursor_count#26
Inlining constant with var siblings (const byte) form_field_idx#7
Inlining constant with var siblings (const signed byte) form_cursor_count#7
Constant inlined gfx_init_plane_charset8::cp#0 = (byte) 0
Constant inlined gfx_init_plane_horisontal::gfxa#0 = (byte*)(word) $4000
Constant inlined form_field_idx#34 = (byte) 0
Constant inlined gfx_init_screen3::cx#0 = (byte) 0
Constant inlined apply_preset::i#0 = (byte) 0
Constant inlined gfx_mode::$48 = (word)(const byte*) VIC_SCREEN0
Constant inlined gfx_init_plane_horisontal::ax#0 = (byte) 0
Constant inlined gfx_init_plane_charset8::ch#0 = (byte) 0
Constant inlined gfx_mode::dtv_control#0 = (byte) 0
Constant inlined gfx_mode::vic_control#1 = (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3|(const byte) VIC_ECM
Constant inlined gfx_mode::dtv_control#1 = (const byte) DTV_LINEAR
Constant inlined gfx_mode::vic_control#0 = (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
Constant inlined bitmap_init::yoffs#0 = (byte*) 0
Constant inlined gfx_init_plane_horisontal2::ax#0 = (byte) 0
Constant inlined gfx_mode::cy#0 = (byte) 0
Constant inlined gfx_init_plane_fill::bx#0 = (byte) 0
Constant inlined gfx_mode::$49 = (word)(const byte*) VIC_SCREEN0/(word) $4000
Constant inlined gfx_mode::$50 = (byte)(word)(const byte*) VIC_SCREEN0/(word) $4000
Constant inlined gfx_mode::$51 = (byte) 3^(byte)(word)(const byte*) VIC_SCREEN0/(word) $4000
Constant inlined keyboard_event_scan::col#0 = (byte) 0
Constant inlined gfx_init_plane_horisontal2::$0 = (const dword) PLANE_HORISONTAL2/(word) $4000
Constant inlined apply_preset::preset#5 = (const byte[]) preset_hi_stdchar
Constant inlined apply_preset::preset#4 = (const byte[]) preset_mcbm
Constant inlined apply_preset::preset#7 = (const byte[]) preset_twoplane
Constant inlined gfx_init_plane_horisontal2::$4 = (word) $4000
Constant inlined apply_preset::preset#6 = (const byte[]) preset_hi_ecmchar
Constant inlined apply_preset::preset#9 = (const byte[]) preset_sixsfred
Constant inlined apply_preset::preset#8 = (const byte[]) preset_chunky
Constant inlined gfx_init_plane_horisontal::ay#0 = (byte) 0
Constant inlined gfx_init_plane_horisontal2::ay#0 = (byte) 0
Constant inlined gfx_mode::cx#0 = (byte) 0
Constant inlined gfx_init_plane_vertical::$4 = (word) $4000+(const dword) PLANE_VERTICAL&(word) $3fff
Constant inlined gfx_init_plane_vertical::$3 = (const dword) PLANE_VERTICAL&(word) $3fff
Constant inlined apply_preset::preset#1 = (const byte[]) preset_stdchar
Constant inlined gfx_init_plane_vertical::$0 = (const dword) PLANE_VERTICAL/(word) $4000
Constant inlined apply_preset::preset#3 = (const byte[]) preset_stdbm
Constant inlined apply_preset::preset#2 = (const byte[]) preset_ecmchar
Constant inlined bitmap_init::y#0 = (byte) 0
Constant inlined gfx_init_plane_charset8::col#0 = (byte) 0
Constant inlined get_plane::return#15 = (dword)(const byte*) VIC_SCREEN0
Constant inlined form_cursor_count#6 = (const signed byte) FORM_CURSOR_BLINK
Constant inlined get_plane::return#13 = (const dword) PLANE_FULL
Constant inlined form_cursor_count#7 = (const signed byte) FORM_CURSOR_BLINK/(signed byte) 2
Constant inlined get_plane::return#12 = (const dword) PLANE_BLANK
Constant inlined get_plane::return#11 = (const dword) PLANE_CHARSET8
Constant inlined form_mode::$32 = (byte) 0
Constant inlined form_mode::$31 = (byte)(word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400
Constant inlined form_mode::$33 = >(const byte*) FORM_SCREEN
Constant inlined print_str_at::at#1 = (const byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a
Constant inlined gfx_init_plane_horisontal2::gfxa#0 = (byte*)(word) $4000
Constant inlined gfx_init_screen2::ch#0 = (const byte*) VIC_SCREEN2
Constant inlined form_mode::$30 = (word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400
Constant inlined gfx_init_plane_charset8::chargen#0 = (const byte*) CHARGEN
Constant inlined gfx_init_screen2::cx#0 = (byte) 0
Constant inlined gfx_init_plane_fill::fill#1 = (byte) 0
Constant inlined gfx_init_plane_fill::fill#2 = (byte) $ff
Constant inlined gfx_init_plane_8bppchunky::x#0 = (word) 0
Constant inlined gfx_init_screen2::cy#0 = (byte) 0
Constant inlined keyboard_event_scan::keycode#0 = (byte) 0
Constant inlined gfx_init_vic_bitmap::l#0 = (byte) 0
Constant inlined gfx_init_screen4::cx#0 = (byte) 0
Constant inlined bitmap_init::x#0 = (byte) 0
Constant inlined get_vic_charset::return#3 = (const byte*) VIC_CHARSET_ROM
Constant inlined render_preset_name::$14 = (const byte*) render_preset_name::name#1
Constant inlined gfx_init_plane_charset8::gfxa#0 = (byte*)(word) $4000
Constant inlined render_preset_name::$15 = (const byte*) render_preset_name::name#2
Constant inlined render_preset_name::$16 = (const byte*) render_preset_name::name#3
Constant inlined form_mode::$11 = (byte) 0
Constant inlined form_control::$3 = (const signed byte) FORM_CURSOR_BLINK/(signed byte) 2
Constant inlined gfx_init_screen4::ch#0 = (const byte*) VIC_SCREEN4
Constant inlined get_vic_charset::return#0 = (const byte*) VIC_CHARSET_ROM
Constant inlined get_vic_charset::return#1 = (const byte*) VIC_BITMAP
Constant inlined render_preset_name::$11 = (const byte*) FORM_SCREEN+(byte)(number) $28*(number) 2
Constant inlined keyboard_event_scan::row#0 = (byte) 0
Constant inlined form_mode::$17 = (byte) 0
Constant inlined gfx_init_plane_charset8::c#0 = (byte) 0
Constant inlined render_preset_name::$17 = (const byte*) render_preset_name::name#4
Constant inlined form_mode::$14 = <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400
Constant inlined render_preset_name::$18 = (const byte*) render_preset_name::name#5
Constant inlined form_mode::$13 = (word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400
Constant inlined render_preset_name::$19 = (const byte*) render_preset_name::name#6
Constant inlined gfx_init_screen3::cy#0 = (byte) 0
Constant inlined form_mode::$15 = (const dword) DTV_COLOR_BANK_DEFAULT/(word) $400
Constant inlined gfx_init_plane_8bppchunky::y#0 = (byte) 0
Constant inlined render_preset_name::$24 = (const byte*) render_preset_name::name#11
Constant inlined form_mode::$21 = (byte) 3
Constant inlined render_preset_name::$25 = (const byte*) render_preset_name::name#12
Constant inlined form_mode::$23 = (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
Constant inlined form_mode::$22 = (const byte) VIC_DEN|(const byte) VIC_RSEL
Constant inlined render_preset_name::$20 = (const byte*) render_preset_name::name#7
Constant inlined render_preset_name::$21 = (const byte*) render_preset_name::name#8
Constant inlined render_preset_name::$22 = (const byte*) render_preset_name::name#9
Constant inlined render_preset_name::$23 = (const byte*) render_preset_name::name#10
Constant inlined gfx_init_plane_fill::by#0 = (byte) 0
Constant inlined form_mode::$29 = (word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400
Constant inlined form_mode::$28 = (word)(const byte*) FORM_CHARSET&(word) $3fff
Constant inlined gfx_init_plane_fill::fill#0 = (byte) $1b
Constant inlined form_mode::$25 = (word)(const byte*) FORM_SCREEN&(word) $3fff
Constant inlined form_mode::$24 = (word)(const byte*) FORM_SCREEN
Constant inlined form_mode::$27 = (word)(const byte*) FORM_CHARSET
Constant inlined form_mode::$26 = (word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40
Constant inlined gfx_mode::vic_control2#1 = (const byte) VIC_CSEL|(const byte) VIC_MCM
Constant inlined gfx_mode::vic_control2#0 = (const byte) VIC_CSEL
Constant inlined gfx_init_screen4::cy#0 = (byte) 0
Constant inlined gfx_init_plane_fill::plane_addr#2 = (const dword) PLANE_FULL
Constant inlined gfx_init_plane_fill::plane_addr#0 = (const dword) PLANE_VERTICAL2
Constant inlined gfx_init_plane_fill::plane_addr#1 = (const dword) PLANE_BLANK
Constant inlined keyboard_event_get::return#0 = (byte) $ff
Constant inlined gfx_init_screen3::ch#0 = (const byte*) VIC_SCREEN3
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#0 = (byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#3 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0
Constant inlined gfx_mode::i#0 = (byte) 0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#2 = (byte)(number) $4000/(number) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#9 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0
Constant inlined gfx_init_charset::charset#0 = (const byte*) VIC_CHARSET_ROM
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#8 = (byte)(number) $4000/(number) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#5 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#4 = (byte)(number) $4000/(number) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#7 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#6 = (byte)(number) $4000/(number) $4000
Constant inlined gfx_init_charset::chargen#0 = (const byte*) CHARGEN
Constant inlined gfx_init_screen1::ch#0 = (const byte*) VIC_SCREEN1
Constant inlined gfx_init_charset::c#0 = (byte) 0
Constant inlined print_str_lines::str#2 = (const byte[]) FORM_TEXT
Constant inlined print_str_lines::str#1 = (const byte[]) FORM_COLS
Constant inlined gfx_init_screen1::cx#0 = (byte) 0
Constant inlined gfx_init_plane_vertical::by#0 = (byte) 0
Constant inlined gfx_mode::j#0 = (byte) 0
Constant inlined gfx_init_plane_vertical::gfxb#0 = (byte*)(word) $4000+(const dword) PLANE_VERTICAL&(word) $3fff
Constant inlined get_vic_screen::return#4 = (const byte*) VIC_SCREEN4
Constant inlined apply_preset::preset#11 = (const byte[]) preset_8bpppixelcell
Constant inlined gfx_init_screen0::cx#0 = (byte) 0
Constant inlined form_render_values::idx#0 = (byte) 0
Constant inlined get_vic_screen::return#3 = (const byte*) VIC_SCREEN3
Constant inlined apply_preset::preset#12 = (const byte[]) preset_stdchar
Constant inlined get_vic_screen::return#6 = (const byte*) VIC_SCREEN0
Constant inlined get_vic_screen::return#0 = (const byte*) VIC_SCREEN0
Constant inlined get_vic_screen::return#2 = (const byte*) VIC_SCREEN2
Constant inlined get_vic_screen::return#1 = (const byte*) VIC_SCREEN1
Constant inlined apply_preset::preset#10 = (const byte[]) preset_sixsfred2
Constant inlined gfx_init_plane_8bppchunky::$0 = (const dword) PLANE_8BPP_CHUNKY/(word) $4000
Constant inlined bitmap_clear::y#0 = (byte) 0
Constant inlined keyboard_event_pressed::keycode#3 = (const byte) KEY_COMMODORE
Constant inlined keyboard_event_pressed::keycode#2 = (const byte) KEY_CTRL
Constant inlined keyboard_event_pressed::keycode#1 = (const byte) KEY_RSHIFT
Constant inlined keyboard_event_pressed::keycode#0 = (const byte) KEY_LSHIFT
Constant inlined gfx_init_screen0::ch#0 = (const byte*) VIC_SCREEN0
Constant inlined gfx_mode::col#0 = (const byte*) COLS
Constant inlined gfx_init_screen1::cy#0 = (byte) 0
Constant inlined gfx_init_plane_vertical::bx#0 = (byte) 0
Constant inlined keyboard_events_size#0 = (byte) 0
Constant inlined get_plane::return#10 = (const dword) PLANE_VERTICAL2
Constant inlined get_plane::return#2 = (dword)(const byte*) VIC_SCREEN2
Constant inlined get_plane::return#3 = (dword)(const byte*) VIC_SCREEN3
Constant inlined form_control::return#5 = (byte) $ff
Constant inlined get_plane::return#0 = (dword)(const byte*) VIC_SCREEN0
Constant inlined get_plane::return#1 = (dword)(const byte*) VIC_SCREEN1
Constant inlined get_plane::return#6 = (const dword) PLANE_8BPP_CHUNKY
Constant inlined get_plane::return#7 = (const dword) PLANE_HORISONTAL
Constant inlined gfx_init_plane_charset8::cr#0 = (byte) 0
Constant inlined form_control::return#1 = (byte) 0
Constant inlined keyboard_modifiers#2 = (const byte) KEY_MODIFIER_LSHIFT
Constant inlined get_plane::return#4 = (dword)(const byte*) VIC_BITMAP
Constant inlined form_control::return#4 = (byte) 0
Constant inlined get_plane::return#5 = (dword)(const byte*) VIC_CHARSET_ROM
Constant inlined form_control::return#3 = (byte) 0
Constant inlined keyboard_modifiers#1 = (byte) 0
Constant inlined $38 = (const byte[]) print_hextab
Constant inlined form_field_idx#8 = (byte) 0
Constant inlined get_plane::return#8 = (const dword) PLANE_VERTICAL
Constant inlined $39 = (const byte[]) FORM_TEXT
Constant inlined form_field_idx#7 = (const byte) form_fields_cnt-(byte) 1
Constant inlined get_plane::return#9 = (const dword) PLANE_HORISONTAL2
Constant inlined gfx_init_plane_8bppchunky::gfxb#0 = (byte*) 16384
Constant inlined gfx_init_plane_8bppchunky::gfxb#2 = (byte*) 16384
Constant inlined form_mode::i#0 = (byte) 0
Constant inlined $40 = (const byte[]) FORM_COLS
Constant inlined gfx_init_screen0::cy#0 = (byte) 0
Constant inlined bitmap_clear::x#0 = (byte) 0
Constant inlined gfx_init_plane_charset8::$4 = (word) $4000
Constant inlined gfx_init_plane_horisontal::$0 = (const dword) PLANE_HORISONTAL/(word) $4000
Constant inlined gfx_mode::$12 = (const byte) VIC_DEN|(const byte) VIC_RSEL
Constant inlined gfx_init_plane_8bppchunky::gfxbCpuBank#0 = (byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000
Constant inlined gfx_init_plane_horisontal::$4 = (word) $4000
Constant inlined gfx_init_plane_8bppchunky::gfxbCpuBank#1 = ++(byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000
Constant inlined gfx_init_plane_charset8::$0 = (const dword) PLANE_CHARSET8/(word) $4000
Constant inlined form_cursor_count#26 = (const signed byte) FORM_CURSOR_BLINK/(signed byte) 2
Constant inlined bitmap_init::bitmap#0 = (const byte*) VIC_BITMAP
Constant inlined bitmap_init::bits#0 = (byte) $80
Constant inlined bitmap_init::bits#2 = (byte) $80
Constant inlined form_set_screen::y#0 = (byte) 0
Constant inlined form_set_screen::screen#0 = (const byte*) FORM_SCREEN
Constant inlined print_set_screen::screen#0 = (const byte*) COLS
Constant inlined print_set_screen::screen#1 = (const byte*) FORM_SCREEN
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#12 = (byte)(number) $4000/(number) $4000
Constant inlined dtvSetCpuBankSegment1::cpuBankIdx#10 = (byte)(number) $4000/(number) $4000
Constant inlined form_preset = (const byte[]) form_fields_val
Constant inlined gfx_init_charset::l#0 = (byte) 0
Constant inlined bitmap_init::$1 = >(const byte*) VIC_BITMAP
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#12
Consolidated array index constant in *(form_fields_val+5)
Consolidated array index constant in *(form_fields_val+8)
Consolidated array index constant in *(form_fields_val+4)
Consolidated array index constant in *(form_fields_val+9)
Consolidated array index constant in *(form_fields_val+6)
Consolidated array index constant in *(form_fields_val+7)
Consolidated array index constant in *(form_fields_val+3)
Consolidated array index constant in *(form_fields_val+1)
Consolidated array index constant in *(form_fields_val+2)
Consolidated array index constant in *(form_fields_val+$b)
Consolidated array index constant in *(form_fields_val+$c)
Consolidated array index constant in *(form_fields_val+$a)
Consolidated array index constant in *(form_fields_val+$d)
Consolidated array index constant in *(form_fields_val+$e)
Consolidated array index constant in *(form_fields_val+$f)
Consolidated array index constant in *(form_fields_val+$10)
Consolidated array index constant in *(form_fields_val+$12)
Consolidated array index constant in *(form_fields_val+$13)
Consolidated array index constant in *(form_fields_val+$11)
Consolidated array index constant in *(form_fields_val+$14)
Consolidated array index constant in *(form_fields_val+$15)
Consolidated array index constant in *(form_fields_val+$16)
Consolidated array index constant in *(form_fields_val+$17)
Consolidated array index constant in *(form_fields_val+$18)
Consolidated array index constant in *(form_fields_val+$19)
Consolidated array index constant in *(form_fields_val+$1a)
Consolidated array index constant in *(form_fields_val+$1c)
Consolidated array index constant in *(form_fields_val+$1d)
Consolidated array index constant in *(form_fields_val+$1e)
Consolidated array index constant in *(form_fields_val+$1f)
Consolidated array index constant in *(form_fields_val+$20)
Consolidated array index constant in *(form_fields_val+$21)
Consolidated array index constant in *(form_fields_val+$22)
Consolidated array index constant in *(form_fields_val+$23)
Consolidated array index constant in *(form_fields_val+$1b)
Consolidated array index constant in assignment *(gfx_init_vic_bitmap::lines_x+1 + gfx_init_vic_bitmap::$3)
Consolidated array index constant in assignment *(gfx_init_vic_bitmap::lines_y+1 + gfx_init_vic_bitmap::$4)
Successful SSA optimization Pass2ConstantAdditionElimination
Alias (byte) gfx_init_vic_bitmap::l#2 = (byte~) gfx_init_vic_bitmap::$3 (byte~) gfx_init_vic_bitmap::$4 
Successful SSA optimization Pass2AliasElimination
Successful SSA optimization Pass2ConstantStringConsolidation
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#12
Constant inlined render_preset_name::name#12 = (const byte*) render_preset_name::name#1
Successful SSA optimization Pass2ConstantInlining
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Inlining constant with var siblings (const byte*) render_preset_name::name#1
Inlining constant with var siblings (const byte*) render_preset_name::name#2
Inlining constant with var siblings (const byte*) render_preset_name::name#3
Inlining constant with var siblings (const byte*) render_preset_name::name#4
Inlining constant with var siblings (const byte*) render_preset_name::name#5
Inlining constant with var siblings (const byte*) render_preset_name::name#6
Inlining constant with var siblings (const byte*) render_preset_name::name#7
Inlining constant with var siblings (const byte*) render_preset_name::name#8
Inlining constant with var siblings (const byte*) render_preset_name::name#9
Inlining constant with var siblings (const byte*) render_preset_name::name#10
Inlining constant with var siblings (const byte*) render_preset_name::name#11
Added new block during phi lifting print_str_lines::@12(between print_str_lines::@1 and print_str_lines::@4)
Added new block during phi lifting print_str_lines::@13(between print_str_lines::@5 and print_str_lines::@4)
Added new block during phi lifting print_str_lines::@14(between print_str_lines::@4 and print_str_lines::@5)
Added new block during phi lifting print_ln::@3(between print_ln::@1 and print_ln::@1)
Added new block during phi lifting keyboard_event_scan::@30(between keyboard_event_scan::@10 and keyboard_event_scan::@8)
Added new block during phi lifting keyboard_event_scan::@31(between keyboard_event_scan::@12 and keyboard_event_scan::@11)
Added new block during phi lifting keyboard_event_scan::@32(between keyboard_event_scan::@11 and keyboard_event_scan::@12)
Added new block during phi lifting keyboard_event_scan::@33(between keyboard_event_scan::@16 and keyboard_event_scan::@12)
Added new block during phi lifting keyboard_event_scan::@34(between keyboard_event_scan::@27 and keyboard_event_scan::@2)
Added new block during phi lifting keyboard_event_scan::@35(between keyboard_event_scan::@28 and keyboard_event_scan::@3)
Added new block during phi lifting keyboard_event_scan::@36(between keyboard_event_scan::@29 and keyboard_event_scan::@return)
Added new block during phi lifting bitmap_init::@9(between bitmap_init::@2 and bitmap_init::@1)
Added new block during phi lifting bitmap_init::@10(between bitmap_init::@1 and bitmap_init::@2)
Added new block during phi lifting bitmap_init::@11(between bitmap_init::@6 and bitmap_init::@5)
Added new block during phi lifting bitmap_init::@12(between bitmap_init::@5 and bitmap_init::@6)
Added new block during phi lifting bitmap_clear::@5(between bitmap_clear::@3 and bitmap_clear::@1)
Added new block during phi lifting bitmap_clear::@6(between bitmap_clear::@2 and bitmap_clear::@2)
Added new block during phi lifting bitmap_line_xdyi::@6(between bitmap_line_xdyi::@2 and bitmap_line_xdyi::@1)
Added new block during phi lifting bitmap_line_xdyi::@7(between bitmap_line_xdyi::@5 and bitmap_line_xdyi::@2)
Added new block during phi lifting bitmap_line_xdyd::@6(between bitmap_line_xdyd::@2 and bitmap_line_xdyd::@1)
Added new block during phi lifting bitmap_line_xdyd::@7(between bitmap_line_xdyd::@5 and bitmap_line_xdyd::@2)
Added new block during phi lifting bitmap_line_ydxi::@6(between bitmap_line_ydxi::@2 and bitmap_line_ydxi::@1)
Added new block during phi lifting bitmap_line_ydxi::@7(between bitmap_line_ydxi::@5 and bitmap_line_ydxi::@2)
Added new block during phi lifting bitmap_line_ydxd::@6(between bitmap_line_ydxd::@2 and bitmap_line_ydxd::@1)
Added new block during phi lifting bitmap_line_ydxd::@7(between bitmap_line_ydxd::@5 and bitmap_line_ydxd::@2)
Added new block during phi lifting gfx_mode::@53(between gfx_mode::@1 and gfx_mode::@2)
Added new block during phi lifting gfx_mode::@54(between gfx_mode::@2 and gfx_mode::@3)
Added new block during phi lifting gfx_mode::@55(between gfx_mode::@3 and gfx_mode::@4)
Added new block during phi lifting gfx_mode::@56(between gfx_mode::@4 and gfx_mode::@5)
Added new block during phi lifting gfx_mode::@57(between gfx_mode::@5 and gfx_mode::@6)
Added new block during phi lifting gfx_mode::@58(between gfx_mode::@7 and gfx_mode::@8)
Added new block during phi lifting gfx_mode::@59(between gfx_mode::@23 and gfx_mode::@21)
Added new block during phi lifting gfx_mode::@60(between gfx_mode::@22 and gfx_mode::@22)
Added new block during phi lifting gfx_mode::@61(between gfx_mode::@26 and gfx_mode::@26)
Added new block during phi lifting gfx_mode::@62(between gfx_mode::@29 and gfx_mode::@29)
Added new block during phi lifting gfx_init_charset::@5(between gfx_init_charset::@3 and gfx_init_charset::@1)
Added new block during phi lifting gfx_init_charset::@6(between gfx_init_charset::@2 and gfx_init_charset::@2)
Added new block during phi lifting gfx_init_screen0::@5(between gfx_init_screen0::@3 and gfx_init_screen0::@1)
Added new block during phi lifting gfx_init_screen0::@6(between gfx_init_screen0::@2 and gfx_init_screen0::@2)
Added new block during phi lifting gfx_init_screen1::@5(between gfx_init_screen1::@3 and gfx_init_screen1::@1)
Added new block during phi lifting gfx_init_screen1::@6(between gfx_init_screen1::@2 and gfx_init_screen1::@2)
Added new block during phi lifting gfx_init_screen2::@5(between gfx_init_screen2::@3 and gfx_init_screen2::@1)
Added new block during phi lifting gfx_init_screen2::@6(between gfx_init_screen2::@2 and gfx_init_screen2::@2)
Added new block during phi lifting gfx_init_screen3::@5(between gfx_init_screen3::@3 and gfx_init_screen3::@1)
Added new block during phi lifting gfx_init_screen3::@6(between gfx_init_screen3::@2 and gfx_init_screen3::@2)
Added new block during phi lifting gfx_init_screen4::@5(between gfx_init_screen4::@3 and gfx_init_screen4::@1)
Added new block during phi lifting gfx_init_screen4::@6(between gfx_init_screen4::@2 and gfx_init_screen4::@2)
Added new block during phi lifting gfx_init_plane_8bppchunky::@10(between gfx_init_plane_8bppchunky::@5 and gfx_init_plane_8bppchunky::@1)
Added new block during phi lifting gfx_init_plane_8bppchunky::@11(between gfx_init_plane_8bppchunky::@3 and gfx_init_plane_8bppchunky::@2)
Added new block during phi lifting gfx_init_plane_8bppchunky::@12(between gfx_init_plane_8bppchunky::@2 and gfx_init_plane_8bppchunky::@3)
Added new block during phi lifting gfx_init_plane_horisontal::@11(between gfx_init_plane_horisontal::@7 and gfx_init_plane_horisontal::@1)
Added new block during phi lifting gfx_init_plane_horisontal::@12(between gfx_init_plane_horisontal::@4 and gfx_init_plane_horisontal::@2)
Added new block during phi lifting gfx_init_plane_horisontal2::@7(between gfx_init_plane_horisontal2::@3 and gfx_init_plane_horisontal2::@1)
Added new block during phi lifting gfx_init_plane_horisontal2::@8(between gfx_init_plane_horisontal2::@2 and gfx_init_plane_horisontal2::@2)
Added new block during phi lifting gfx_init_plane_vertical::@7(between gfx_init_plane_vertical::@3 and gfx_init_plane_vertical::@1)
Added new block during phi lifting gfx_init_plane_vertical::@8(between gfx_init_plane_vertical::@2 and gfx_init_plane_vertical::@2)
Added new block during phi lifting gfx_init_plane_charset8::@11(between gfx_init_plane_charset8::@7 and gfx_init_plane_charset8::@1)
Added new block during phi lifting gfx_init_plane_charset8::@12(between gfx_init_plane_charset8::@6 and gfx_init_plane_charset8::@2)
Added new block during phi lifting gfx_init_plane_charset8::@13(between gfx_init_plane_charset8::@4 and gfx_init_plane_charset8::@3)
Added new block during phi lifting gfx_init_plane_fill::@7(between gfx_init_plane_fill::@3 and gfx_init_plane_fill::@1)
Added new block during phi lifting gfx_init_plane_fill::@8(between gfx_init_plane_fill::@2 and gfx_init_plane_fill::@2)
Added new block during phi lifting form_mode::@34(between form_mode::@1 and form_mode::@1)
Added new block during phi lifting form_mode::@35(between form_mode::@14 and form_mode::@3)
Added new block during phi lifting form_set_screen::@3(between form_set_screen::@1 and form_set_screen::@1)
Added new block during phi lifting form_control::@36(between form_control::@33 and form_control::@1)
Added new block during phi lifting form_control::@37(between form_control::@11 and form_control::@22)
Added new block during phi lifting form_control::@38(between form_control::@19 and form_control::@22)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @17
Adding NOP phi() at start of @34
Adding NOP phi() at start of @41
Adding NOP phi() at start of @45
Adding NOP phi() at start of @48
Adding NOP phi() at start of @57
Adding NOP phi() at start of @60
Adding NOP phi() at start of @62
Adding NOP phi() at start of @81
Adding NOP phi() at start of @85
Adding NOP phi() at start of @86
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@7
Adding NOP phi() at start of main::@8
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@9
Adding NOP phi() at start of gfx_mode::@12
Adding NOP phi() at start of gfx_mode::@18
Adding NOP phi() at start of gfx_mode::@20
Adding NOP phi() at start of gfx_mode::@25
Adding NOP phi() at start of gfx_mode::@31
Adding NOP phi() at start of gfx_mode::@51
Adding NOP phi() at start of gfx_mode::@10
Adding NOP phi() at start of keyboard_event_scan::@23
Adding NOP phi() at start of keyboard_event_scan::@24
Adding NOP phi() at start of get_vic_screen::@14
Adding NOP phi() at start of get_vic_screen::@9
Adding NOP phi() at start of get_vic_screen::@4
Adding NOP phi() at start of get_vic_screen::@3
Adding NOP phi() at start of get_vic_screen::@2
Adding NOP phi() at start of get_vic_screen::@1
Adding NOP phi() at start of get_vic_charset::@5
Adding NOP phi() at start of get_vic_charset::@3
Adding NOP phi() at start of get_vic_charset::@1
Adding NOP phi() at start of get_plane::@41
Adding NOP phi() at start of get_plane::@27
Adding NOP phi() at start of get_plane::@13
Adding NOP phi() at start of get_plane::@12
Adding NOP phi() at start of get_plane::@11
Adding NOP phi() at start of get_plane::@10
Adding NOP phi() at start of get_plane::@9
Adding NOP phi() at start of get_plane::@8
Adding NOP phi() at start of get_plane::@7
Adding NOP phi() at start of get_plane::@6
Adding NOP phi() at start of get_plane::@5
Adding NOP phi() at start of get_plane::@4
Adding NOP phi() at start of get_plane::@3
Adding NOP phi() at start of get_plane::@2
Adding NOP phi() at start of get_plane::@1
Adding NOP phi() at start of form_mode
Adding NOP phi() at start of form_mode::@21
Adding NOP phi() at start of form_mode::@22
Adding NOP phi() at start of form_mode::@23
Adding NOP phi() at start of form_mode::@24
Adding NOP phi() at start of form_mode::@25
Adding NOP phi() at start of form_mode::@26
Adding NOP phi() at start of form_mode::@27
Adding NOP phi() at start of form_mode::@8
Adding NOP phi() at start of render_preset_name::@33
Adding NOP phi() at start of render_preset_name::@45
Adding NOP phi() at start of render_preset_name::@11
Adding NOP phi() at start of render_preset_name::@10
Adding NOP phi() at start of render_preset_name::@9
Adding NOP phi() at start of render_preset_name::@8
Adding NOP phi() at start of render_preset_name::@7
Adding NOP phi() at start of render_preset_name::@6
Adding NOP phi() at start of render_preset_name::@5
Adding NOP phi() at start of render_preset_name::@4
Adding NOP phi() at start of render_preset_name::@3
Adding NOP phi() at start of render_preset_name::@2
Adding NOP phi() at start of render_preset_name::@1
Adding NOP phi() at start of form_render_values
Adding NOP phi() at start of apply_preset::@33
Adding NOP phi() at start of apply_preset::@11
Adding NOP phi() at start of apply_preset::@10
Adding NOP phi() at start of apply_preset::@9
Adding NOP phi() at start of apply_preset::@8
Adding NOP phi() at start of apply_preset::@7
Adding NOP phi() at start of apply_preset::@6
Adding NOP phi() at start of apply_preset::@5
Adding NOP phi() at start of apply_preset::@4
Adding NOP phi() at start of apply_preset::@3
Adding NOP phi() at start of apply_preset::@2
Adding NOP phi() at start of apply_preset::@1
Adding NOP phi() at start of form_control::@7
Adding NOP phi() at start of form_control::@34
Adding NOP phi() at start of form_control::@12
Adding NOP phi() at start of form_control::@24
Adding NOP phi() at start of form_set_screen
Adding NOP phi() at start of print_str_lines::@7
Adding NOP phi() at start of print_ln::@2
Adding NOP phi() at start of print_cls::@1
Adding NOP phi() at start of memset
Adding NOP phi() at start of memset::@1
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init::@2
Adding NOP phi() at start of gfx_init::@3
Adding NOP phi() at start of gfx_init::@4
Adding NOP phi() at start of gfx_init::@5
Adding NOP phi() at start of gfx_init::@6
Adding NOP phi() at start of gfx_init::@7
Adding NOP phi() at start of gfx_init::@8
Adding NOP phi() at start of gfx_init::@9
Adding NOP phi() at start of gfx_init::@10
Adding NOP phi() at start of gfx_init::@11
Adding NOP phi() at start of gfx_init::@12
Adding NOP phi() at start of gfx_init::@13
Adding NOP phi() at start of gfx_init::@14
Adding NOP phi() at start of gfx_init::@15
Adding NOP phi() at start of gfx_init_plane_full
Adding NOP phi() at start of gfx_init_plane_full::@1
Adding NOP phi() at start of gfx_init_plane_fill::@4
Adding NOP phi() at start of gfx_init_plane_fill::@6
Adding NOP phi() at start of gfx_init_plane_blank
Adding NOP phi() at start of gfx_init_plane_blank::@1
Adding NOP phi() at start of gfx_init_plane_vertical2
Adding NOP phi() at start of gfx_init_plane_vertical2::@1
Adding NOP phi() at start of gfx_init_plane_horisontal2
Adding NOP phi() at start of gfx_init_plane_horisontal2::@5
Adding NOP phi() at start of gfx_init_plane_horisontal2::@4
Adding NOP phi() at start of gfx_init_plane_horisontal2::@6
Adding NOP phi() at start of gfx_init_plane_vertical
Adding NOP phi() at start of gfx_init_plane_vertical::@5
Adding NOP phi() at start of gfx_init_plane_vertical::@4
Adding NOP phi() at start of gfx_init_plane_vertical::@6
Adding NOP phi() at start of gfx_init_plane_horisontal
Adding NOP phi() at start of gfx_init_plane_horisontal::@9
Adding NOP phi() at start of gfx_init_plane_horisontal::@8
Adding NOP phi() at start of gfx_init_plane_horisontal::@10
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_plane_charset8::@10
Adding NOP phi() at start of gfx_init_plane_8bppchunky
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@7
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@6
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@9
Adding NOP phi() at start of gfx_init_vic_bitmap
Adding NOP phi() at start of gfx_init_vic_bitmap::@7
Adding NOP phi() at start of gfx_init_vic_bitmap::@8
Adding NOP phi() at start of bitmap_line::@30
Adding NOP phi() at start of bitmap_line::@29
Adding NOP phi() at start of bitmap_line::@32
Adding NOP phi() at start of bitmap_line::@31
Adding NOP phi() at start of bitmap_line::@34
Adding NOP phi() at start of bitmap_line::@33
Adding NOP phi() at start of bitmap_line::@36
Adding NOP phi() at start of bitmap_line::@35
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@3
Adding NOP phi() at start of bitmap_init::@4
Adding NOP phi() at start of gfx_init_screen4
Adding NOP phi() at start of gfx_init_screen3
Adding NOP phi() at start of gfx_init_screen2
Adding NOP phi() at start of gfx_init_screen1
Adding NOP phi() at start of gfx_init_screen0
CALL GRAPH
Calls in [] to main:12 
Calls in [main] to keyboard_init:19 gfx_init:21 form_mode:25 gfx_mode:27 
Calls in [gfx_mode] to get_plane:71 get_plane:94 get_vic_screen:117 get_vic_charset:124 get_vic_screen:134 keyboard_event_scan:171 keyboard_event_get:173 
Calls in [keyboard_event_scan] to keyboard_matrix_read:209 keyboard_event_pressed:220 keyboard_event_pressed:226 keyboard_event_pressed:233 keyboard_event_pressed:240 
Calls in [form_mode] to print_set_screen:345 print_cls:347 print_str_lines:349 print_set_screen:351 print_cls:353 print_str_lines:355 form_set_screen:357 form_render_values:359 render_preset_name:362 form_control:389 apply_preset:396 form_render_values:398 render_preset_name:401 
Calls in [render_preset_name] to print_str_at:426 
Calls in [form_render_values] to form_field_ptr:455 
Calls in [form_control] to form_field_ptr:496 keyboard_event_scan:505 keyboard_event_get:507 
Calls in [print_str_lines] to print_ln:578 
Calls in [print_cls] to memset:593 
Calls in [gfx_init] to gfx_init_screen0:610 gfx_init_screen1:612 gfx_init_screen2:614 gfx_init_screen3:616 gfx_init_screen4:618 gfx_init_charset:620 gfx_init_vic_bitmap:622 gfx_init_plane_8bppchunky:624 gfx_init_plane_charset8:626 gfx_init_plane_horisontal:628 gfx_init_plane_vertical:630 gfx_init_plane_horisontal2:632 gfx_init_plane_vertical2:634 gfx_init_plane_blank:636 gfx_init_plane_full:638 
Calls in [gfx_init_plane_full] to gfx_init_plane_fill:642 
Calls in [gfx_init_plane_fill] to dtvSetCpuBankSegment1:651 dtvSetCpuBankSegment1:666 
Calls in [gfx_init_plane_blank] to gfx_init_plane_fill:678 
Calls in [gfx_init_plane_vertical2] to gfx_init_plane_fill:682 
Calls in [gfx_init_plane_horisontal2] to dtvSetCpuBankSegment1:686 dtvSetCpuBankSegment1:700 
Calls in [gfx_init_plane_vertical] to dtvSetCpuBankSegment1:708 dtvSetCpuBankSegment1:720 
Calls in [gfx_init_plane_horisontal] to dtvSetCpuBankSegment1:728 dtvSetCpuBankSegment1:744 
Calls in [gfx_init_plane_charset8] to dtvSetCpuBankSegment1:755 dtvSetCpuBankSegment1:783 
Calls in [gfx_init_plane_8bppchunky] to dtvSetCpuBankSegment1:799 dtvSetCpuBankSegment1:808 dtvSetCpuBankSegment1:821 
Calls in [gfx_init_vic_bitmap] to bitmap_init:833 bitmap_clear:835 bitmap_line:844 
Calls in [bitmap_line] to bitmap_line_ydxi:862 bitmap_line_xdyi:875 bitmap_line_ydxd:889 bitmap_line_xdyd:901 bitmap_line_ydxd:917 bitmap_line_xdyd:929 bitmap_line_ydxi:943 bitmap_line_xdyi:955 
Calls in [bitmap_line_xdyi] to bitmap_plot:967 
Calls in [bitmap_line_ydxi] to bitmap_plot:1001 
Calls in [bitmap_line_xdyd] to bitmap_plot:1028 
Calls in [bitmap_line_ydxd] to bitmap_plot:1055 

Created 192 initial phi equivalence classes
Coalesced [28] form_cursor_count#61 ← form_cursor_count#16
Coalesced [29] keyboard_events_size#163 ← keyboard_events_size#24
Coalesced [30] form_field_idx#67 ← form_field_idx#18
Coalesced [36] gfx_mode::dtv_control#20 ← gfx_mode::dtv_control#2
Coalesced [40] gfx_mode::dtv_control#21 ← gfx_mode::dtv_control#3
Coalesced [44] gfx_mode::dtv_control#23 ← gfx_mode::dtv_control#4
Coalesced [48] gfx_mode::dtv_control#25 ← gfx_mode::dtv_control#5
Coalesced [52] gfx_mode::dtv_control#27 ← gfx_mode::dtv_control#6
Coalesced [60] gfx_mode::vic_control#7 ← gfx_mode::vic_control#2
Coalesced [70] get_plane::idx#17 ← get_plane::idx#0
Coalesced [93] get_plane::idx#16 ← get_plane::idx#1
Coalesced [116] get_vic_screen::idx#7 ← get_vic_screen::idx#0
Coalesced [133] get_vic_screen::idx#8 ← get_vic_screen::idx#1
Coalesced [137] gfx_mode::vic_colors#6 ← gfx_mode::vic_colors#0
Coalesced [139] gfx_mode::vic_colors#7 ← gfx_mode::vic_colors#3
Coalesced [140] gfx_mode::col#6 ← gfx_mode::col#3
Coalesced [170] keyboard_events_size#150 ← keyboard_events_size#24
Coalesced [178] gfx_mode::j#3 ← gfx_mode::j#1
Coalesced [184] gfx_mode::i#3 ← gfx_mode::i#1
Coalesced [185] gfx_mode::vic_colors#5 ← gfx_mode::vic_colors#1
Coalesced [186] gfx_mode::col#5 ← gfx_mode::col#1
Coalesced [187] gfx_mode::cy#5 ← gfx_mode::cy#1
Coalesced (already) [188] gfx_mode::vic_colors#8 ← gfx_mode::vic_colors#1
Coalesced (already) [189] gfx_mode::col#7 ← gfx_mode::col#1
Coalesced [190] gfx_mode::cx#3 ← gfx_mode::cx#1
Coalesced [191] gfx_mode::vic_control#8 ← gfx_mode::vic_control#5
Coalesced [192] gfx_mode::dtv_control#28 ← gfx_mode::dtv_control#13
Coalesced [193] gfx_mode::dtv_control#26 ← gfx_mode::dtv_control#11
Coalesced [194] gfx_mode::dtv_control#24 ← gfx_mode::dtv_control#10
Coalesced [195] gfx_mode::dtv_control#22 ← gfx_mode::dtv_control#15
Coalesced [196] gfx_mode::dtv_control#19 ← gfx_mode::dtv_control#14
Coalesced [200] keyboard_event_get::return#8 ← keyboard_event_get::return#1
Coalesced [201] keyboard_events_size#162 ← keyboard_events_size#4
Coalesced [204] keyboard_events_size#161 ← keyboard_events_size#100
Coalesced [206] keyboard_events_size#151 ← keyboard_events_size#99
Coalesced [214] keyboard_event_scan::keycode#17 ← keyboard_event_scan::keycode#1
Coalesced (already) [215] keyboard_events_size#154 ← keyboard_events_size#109
Coalesced [231] keyboard_modifiers#131 ← keyboard_modifiers#3
Coalesced [238] keyboard_modifiers#133 ← keyboard_modifiers#4
Coalesced [245] keyboard_modifiers#135 ← keyboard_modifiers#5
Coalesced [248] keyboard_modifiers#134 ← keyboard_modifiers#20
Coalesced [249] keyboard_modifiers#132 ← keyboard_modifiers#19
Coalesced [250] keyboard_modifiers#130 ← keyboard_modifiers#18
Coalesced [251] keyboard_event_scan::row#14 ← keyboard_event_scan::row#1
Coalesced [252] keyboard_event_scan::keycode#15 ← keyboard_event_scan::keycode#13
Coalesced (already) [253] keyboard_events_size#152 ← keyboard_events_size#100
Coalesced [254] keyboard_event_scan::keycode#19 ← keyboard_event_scan::keycode#11
Coalesced [255] keyboard_events_size#156 ← keyboard_events_size#109
Coalesced [265] keyboard_events_size#160 ← keyboard_events_size#2
Coalesced [271] keyboard_event_scan::keycode#16 ← keyboard_event_scan::keycode#14
Coalesced [272] keyboard_events_size#153 ← keyboard_events_size#108
Coalesced [273] keyboard_event_scan::col#8 ← keyboard_event_scan::col#1
Coalesced (already) [274] keyboard_event_scan::keycode#18 ← keyboard_event_scan::keycode#14
Coalesced (already) [275] keyboard_events_size#155 ← keyboard_events_size#108
Coalesced [279] keyboard_events_size#158 ← keyboard_events_size#1
Coalesced (already) [280] keyboard_events_size#159 ← keyboard_events_size#18
Coalesced (already) [281] keyboard_events_size#157 ← keyboard_events_size#18
Coalesced [361] render_preset_name::idx#13 ← render_preset_name::idx#0
Coalesced [382] form_cursor_count#63 ← form_cursor_count#1
Coalesced [383] keyboard_events_size#165 ← keyboard_events_size#27
Coalesced [384] form_field_idx#69 ← form_field_idx#1
Coalesced [385] form_mode::preset_current#10 ← form_mode::preset_current#0
Coalesced [400] render_preset_name::idx#14 ← render_preset_name::idx#1
Coalesced (already) [402] form_cursor_count#64 ← form_cursor_count#16
Coalesced (already) [403] keyboard_events_size#166 ← keyboard_events_size#24
Coalesced (already) [404] form_field_idx#70 ← form_field_idx#18
Coalesced [405] form_mode::preset_current#11 ← form_mode::preset_current#1
Coalesced (already) [406] form_cursor_count#62 ← form_cursor_count#16
Coalesced (already) [407] keyboard_events_size#164 ← keyboard_events_size#24
Coalesced (already) [408] form_field_idx#68 ← form_field_idx#18
Coalesced (already) [409] form_mode::preset_current#9 ← form_mode::preset_current#6
Coalesced [410] form_mode::i#3 ← form_mode::i#1
Coalesced [440] print_str_at::str#5 ← print_str_at::str#1
Coalesced [447] print_str_at::str#6 ← print_str_at::str#0
Coalesced [448] print_str_at::at#5 ← print_str_at::at#0
Coalesced [454] form_field_ptr::field_idx#4 ← form_field_ptr::field_idx#0
Coalesced [458] form_render_values::idx#5 ← form_render_values::idx#1
Coalesced [482] apply_preset::i#4 ← apply_preset::i#1
Coalesced [495] form_field_ptr::field_idx#3 ← form_field_ptr::field_idx#1
Coalesced (already) [504] keyboard_events_size#149 ← keyboard_events_size#47
Coalesced [519] form_field_idx#74 ← form_field_idx#31
Coalesced [522] form_field_idx#71 ← form_field_idx#6
Coalesced [526] form_field_idx#72 ← form_field_idx#5
Coalesced [534] form_cursor_count#67 ← form_cursor_count#15
Coalesced (already) [535] form_field_idx#75 ← form_field_idx#28
Coalesced (already) [540] form_cursor_count#66 ← form_cursor_count#15
Coalesced (already) [541] form_field_idx#73 ← form_field_idx#28
Coalesced (already) [542] form_cursor_count#68 ← form_cursor_count#15
Coalesced (already) [543] form_field_idx#76 ← form_field_idx#28
Coalesced [546] form_cursor_count#65 ← form_cursor_count#5
Coalesced [557] form_set_screen::line#3 ← form_set_screen::line#1
Coalesced [558] form_set_screen::y#3 ← form_set_screen::y#1
Coalesced [560] print_str_lines::str#10 ← print_str_lines::str#5
Not coalescing [561] print_char_cursor#73 ← print_screen#1
Coalesced [562] print_line_cursor#73 ← print_screen#1
Coalesced [566] print_str_lines::str#12 ← print_str_lines::str#3
Coalesced [567] print_char_cursor#75 ← print_char_cursor#22
Coalesced [574] print_char_cursor#78 ← print_char_cursor#1
Coalesced [579] print_str_lines::str#11 ← print_str_lines::str#0
Not coalescing [580] print_char_cursor#74 ← print_line_cursor#22
Coalesced [581] print_line_cursor#74 ← print_line_cursor#22
Coalesced (already) [582] print_str_lines::str#13 ← print_str_lines::str#0
Coalesced [583] print_char_cursor#76 ← print_char_cursor#38
Coalesced (already) [584] print_char_cursor#77 ← print_char_cursor#20
Coalesced [585] print_line_cursor#75 ← print_line_cursor#2
Coalesced (already) [591] print_line_cursor#76 ← print_line_cursor#22
Coalesced [605] memset::dst#5 ← memset::dst#1
Coalesced [607] print_screen#1 ← print_set_screen::screen#2
Coalesced [650] dtvSetCpuBankSegment1::cpuBankIdx#15 ← dtvSetCpuBankSegment1::cpuBankIdx#11
Coalesced [657] gfx_init_plane_fill::gfxb#7 ← gfx_init_plane_fill::gfxb#3
Coalesced [669] gfx_init_plane_fill::gfxb#5 ← gfx_init_plane_fill::gfxb#1
Coalesced [670] gfx_init_plane_fill::by#5 ← gfx_init_plane_fill::by#1
Coalesced (already) [671] gfx_init_plane_fill::gfxb#8 ← gfx_init_plane_fill::gfxb#1
Coalesced [672] gfx_init_plane_fill::bx#3 ← gfx_init_plane_fill::bx#1
Coalesced [689] gfx_init_plane_horisontal2::gfxa#6 ← gfx_init_plane_horisontal2::gfxa#3
Coalesced [703] gfx_init_plane_horisontal2::ay#5 ← gfx_init_plane_horisontal2::ay#1
Coalesced [704] gfx_init_plane_horisontal2::gfxa#5 ← gfx_init_plane_horisontal2::gfxa#1
Coalesced (already) [705] gfx_init_plane_horisontal2::gfxa#7 ← gfx_init_plane_horisontal2::gfxa#1
Coalesced [706] gfx_init_plane_horisontal2::ax#3 ← gfx_init_plane_horisontal2::ax#1
Coalesced [711] gfx_init_plane_vertical::gfxb#6 ← gfx_init_plane_vertical::gfxb#3
Coalesced [723] gfx_init_plane_vertical::gfxb#5 ← gfx_init_plane_vertical::gfxb#1
Coalesced [724] gfx_init_plane_vertical::by#5 ← gfx_init_plane_vertical::by#1
Coalesced (already) [725] gfx_init_plane_vertical::gfxb#7 ← gfx_init_plane_vertical::gfxb#1
Coalesced [726] gfx_init_plane_vertical::bx#3 ← gfx_init_plane_vertical::bx#1
Coalesced [731] gfx_init_plane_horisontal::gfxa#10 ← gfx_init_plane_horisontal::gfxa#6
Coalesced [737] gfx_init_plane_horisontal::gfxa#13 ← gfx_init_plane_horisontal::gfxa#2
Coalesced [747] gfx_init_plane_horisontal::ay#8 ← gfx_init_plane_horisontal::ay#1
Coalesced [748] gfx_init_plane_horisontal::gfxa#9 ← gfx_init_plane_horisontal::gfxa#7
Coalesced (already) [749] gfx_init_plane_horisontal::gfxa#11 ← gfx_init_plane_horisontal::gfxa#7
Coalesced [750] gfx_init_plane_horisontal::ax#6 ← gfx_init_plane_horisontal::ax#1
Coalesced [753] gfx_init_plane_horisontal::gfxa#12 ← gfx_init_plane_horisontal::gfxa#1
Coalesced [758] gfx_init_plane_charset8::chargen#10 ← gfx_init_plane_charset8::chargen#3
Coalesced [759] gfx_init_plane_charset8::gfxa#10 ← gfx_init_plane_charset8::gfxa#6
Coalesced [760] gfx_init_plane_charset8::col#10 ← gfx_init_plane_charset8::col#6
Coalesced [764] gfx_init_plane_charset8::bits#5 ← gfx_init_plane_charset8::bits#0
Coalesced [765] gfx_init_plane_charset8::gfxa#12 ← gfx_init_plane_charset8::gfxa#5
Coalesced [766] gfx_init_plane_charset8::col#12 ← gfx_init_plane_charset8::col#5
Not coalescing [770] gfx_init_plane_charset8::c#3 ← gfx_init_plane_charset8::col#2
Coalesced [786] gfx_init_plane_charset8::chargen#9 ← gfx_init_plane_charset8::chargen#1
Coalesced [787] gfx_init_plane_charset8::gfxa#9 ← gfx_init_plane_charset8::gfxa#1
Coalesced [788] gfx_init_plane_charset8::col#9 ← gfx_init_plane_charset8::col#1
Coalesced [789] gfx_init_plane_charset8::ch#9 ← gfx_init_plane_charset8::ch#1
Coalesced (already) [790] gfx_init_plane_charset8::chargen#11 ← gfx_init_plane_charset8::chargen#1
Coalesced (already) [791] gfx_init_plane_charset8::gfxa#11 ← gfx_init_plane_charset8::gfxa#1
Coalesced (already) [792] gfx_init_plane_charset8::col#11 ← gfx_init_plane_charset8::col#1
Coalesced [793] gfx_init_plane_charset8::cr#7 ← gfx_init_plane_charset8::cr#1
Coalesced [794] gfx_init_plane_charset8::bits#6 ← gfx_init_plane_charset8::bits#1
Coalesced (already) [795] gfx_init_plane_charset8::gfxa#13 ← gfx_init_plane_charset8::gfxa#1
Coalesced (already) [796] gfx_init_plane_charset8::col#13 ← gfx_init_plane_charset8::col#1
Coalesced [797] gfx_init_plane_charset8::cp#5 ← gfx_init_plane_charset8::cp#1
Coalesced [802] gfx_init_plane_8bppchunky::gfxb#8 ← gfx_init_plane_8bppchunky::gfxb#5
Coalesced [803] gfx_init_plane_8bppchunky::gfxbCpuBank#11 ← gfx_init_plane_8bppchunky::gfxbCpuBank#7
Coalesced [807] dtvSetCpuBankSegment1::cpuBankIdx#14 ← dtvSetCpuBankSegment1::cpuBankIdx#1
Coalesced [810] gfx_init_plane_8bppchunky::gfxbCpuBank#14 ← gfx_init_plane_8bppchunky::gfxbCpuBank#2
Coalesced [824] gfx_init_plane_8bppchunky::gfxb#7 ← gfx_init_plane_8bppchunky::gfxb#1
Coalesced [825] gfx_init_plane_8bppchunky::y#8 ← gfx_init_plane_8bppchunky::y#1
Coalesced [826] gfx_init_plane_8bppchunky::gfxbCpuBank#10 ← gfx_init_plane_8bppchunky::gfxbCpuBank#8
Coalesced (already) [827] gfx_init_plane_8bppchunky::gfxb#9 ← gfx_init_plane_8bppchunky::gfxb#1
Coalesced [828] gfx_init_plane_8bppchunky::x#6 ← gfx_init_plane_8bppchunky::x#1
Coalesced (already) [829] gfx_init_plane_8bppchunky::gfxbCpuBank#12 ← gfx_init_plane_8bppchunky::gfxbCpuBank#8
Coalesced [830] gfx_init_plane_8bppchunky::gfxb#10 ← gfx_init_plane_8bppchunky::gfxb#3
Coalesced (already) [831] gfx_init_plane_8bppchunky::gfxbCpuBank#13 ← gfx_init_plane_8bppchunky::gfxbCpuBank#4
Coalesced [846] gfx_init_vic_bitmap::l#5 ← gfx_init_vic_bitmap::l#1
Coalesced [857] bitmap_line_ydxi::xd#8 ← bitmap_line_ydxi::xd#0
Coalesced [858] bitmap_line_ydxi::x#9 ← bitmap_line_ydxi::x#0
Coalesced [859] bitmap_line_ydxi::y#9 ← bitmap_line_ydxi::y#0
Coalesced [860] bitmap_line_ydxi::yd#8 ← bitmap_line_ydxi::yd#0
Coalesced [861] bitmap_line_ydxi::y1#8 ← bitmap_line_ydxi::y1#0
Coalesced [870] bitmap_line_xdyi::yd#7 ← bitmap_line_xdyi::yd#0
Coalesced [871] bitmap_line_xdyi::x#8 ← bitmap_line_xdyi::x#0
Coalesced [872] bitmap_line_xdyi::y#8 ← bitmap_line_xdyi::y#0
Coalesced [873] bitmap_line_xdyi::xd#7 ← bitmap_line_xdyi::xd#0
Coalesced [874] bitmap_line_xdyi::x1#7 ← bitmap_line_xdyi::x1#0
Coalesced [884] bitmap_line_ydxd::xd#7 ← bitmap_line_ydxd::xd#0
Coalesced [885] bitmap_line_ydxd::x#8 ← bitmap_line_ydxd::x#0
Coalesced [886] bitmap_line_ydxd::y#9 ← bitmap_line_ydxd::y#0
Coalesced [887] bitmap_line_ydxd::yd#7 ← bitmap_line_ydxd::yd#0
Coalesced [888] bitmap_line_ydxd::y1#7 ← bitmap_line_ydxd::y1#0
Coalesced [896] bitmap_line_xdyd::yd#7 ← bitmap_line_xdyd::yd#0
Coalesced [897] bitmap_line_xdyd::x#8 ← bitmap_line_xdyd::x#0
Coalesced [898] bitmap_line_xdyd::y#8 ← bitmap_line_xdyd::y#0
Coalesced [899] bitmap_line_xdyd::xd#7 ← bitmap_line_xdyd::xd#0
Coalesced [900] bitmap_line_xdyd::x1#7 ← bitmap_line_xdyd::x1#0
Coalesced [912] bitmap_line_ydxd::xd#8 ← bitmap_line_ydxd::xd#1
Coalesced [913] bitmap_line_ydxd::x#9 ← bitmap_line_ydxd::x#1
Coalesced [914] bitmap_line_ydxd::y#10 ← bitmap_line_ydxd::y#1
Coalesced [915] bitmap_line_ydxd::yd#8 ← bitmap_line_ydxd::yd#1
Coalesced [916] bitmap_line_ydxd::y1#8 ← bitmap_line_ydxd::y1#1
Coalesced [924] bitmap_line_xdyd::yd#8 ← bitmap_line_xdyd::yd#1
Coalesced [925] bitmap_line_xdyd::x#9 ← bitmap_line_xdyd::x#1
Coalesced [926] bitmap_line_xdyd::y#9 ← bitmap_line_xdyd::y#1
Coalesced [927] bitmap_line_xdyd::xd#8 ← bitmap_line_xdyd::xd#1
Coalesced [928] bitmap_line_xdyd::x1#8 ← bitmap_line_xdyd::x1#1
Coalesced [938] bitmap_line_ydxi::xd#7 ← bitmap_line_ydxi::xd#1
Coalesced [939] bitmap_line_ydxi::x#8 ← bitmap_line_ydxi::x#1
Coalesced [940] bitmap_line_ydxi::y#8 ← bitmap_line_ydxi::y#1
Coalesced [941] bitmap_line_ydxi::yd#7 ← bitmap_line_ydxi::yd#1
Coalesced [942] bitmap_line_ydxi::y1#7 ← bitmap_line_ydxi::y1#1
Coalesced [950] bitmap_line_xdyi::yd#8 ← bitmap_line_xdyi::yd#1
Coalesced [951] bitmap_line_xdyi::x#9 ← bitmap_line_xdyi::x#1
Coalesced [952] bitmap_line_xdyi::y#9 ← bitmap_line_xdyi::y#1
Coalesced [953] bitmap_line_xdyi::xd#8 ← bitmap_line_xdyi::xd#1
Coalesced [954] bitmap_line_xdyi::x1#8 ← bitmap_line_xdyi::x1#1
Coalesced [959] bitmap_line_xdyi::x#10 ← bitmap_line_xdyi::x#6
Coalesced [960] bitmap_line_xdyi::y#10 ← bitmap_line_xdyi::y#5
Coalesced [961] bitmap_line_xdyi::e#7 ← bitmap_line_xdyi::e#0
Coalesced [965] bitmap_plot::x#6 ← bitmap_plot::x#0
Coalesced [966] bitmap_plot::y#6 ← bitmap_plot::y#0
Coalesced [973] bitmap_line_xdyi::y#12 ← bitmap_line_xdyi::y#2
Coalesced [974] bitmap_line_xdyi::e#9 ← bitmap_line_xdyi::e#2
Coalesced [979] bitmap_line_xdyi::x#11 ← bitmap_line_xdyi::x#2
Coalesced [980] bitmap_line_xdyi::y#11 ← bitmap_line_xdyi::y#6
Coalesced [981] bitmap_line_xdyi::e#8 ← bitmap_line_xdyi::e#6
Coalesced (already) [982] bitmap_line_xdyi::y#13 ← bitmap_line_xdyi::y#3
Coalesced [983] bitmap_line_xdyi::e#10 ← bitmap_line_xdyi::e#1
Coalesced [993] bitmap_line_ydxi::x#10 ← bitmap_line_ydxi::x#5
Coalesced [994] bitmap_line_ydxi::y#10 ← bitmap_line_ydxi::y#6
Coalesced [995] bitmap_line_ydxi::e#7 ← bitmap_line_ydxi::e#0
Coalesced [999] bitmap_plot::x#8 ← bitmap_plot::x#2
Coalesced [1000] bitmap_plot::y#8 ← bitmap_plot::y#2
Coalesced [1007] bitmap_line_ydxi::x#12 ← bitmap_line_ydxi::x#2
Coalesced [1008] bitmap_line_ydxi::e#9 ← bitmap_line_ydxi::e#2
Coalesced [1013] bitmap_line_ydxi::x#11 ← bitmap_line_ydxi::x#6
Coalesced [1014] bitmap_line_ydxi::y#11 ← bitmap_line_ydxi::y#2
Coalesced [1015] bitmap_line_ydxi::e#8 ← bitmap_line_ydxi::e#6
Coalesced (already) [1016] bitmap_line_ydxi::x#13 ← bitmap_line_ydxi::x#3
Coalesced [1017] bitmap_line_ydxi::e#10 ← bitmap_line_ydxi::e#1
Coalesced [1020] bitmap_line_xdyd::x#10 ← bitmap_line_xdyd::x#6
Coalesced [1021] bitmap_line_xdyd::y#10 ← bitmap_line_xdyd::y#5
Coalesced [1022] bitmap_line_xdyd::e#7 ← bitmap_line_xdyd::e#0
Coalesced [1026] bitmap_plot::x#5 ← bitmap_plot::x#1
Coalesced [1027] bitmap_plot::y#5 ← bitmap_plot::y#1
Coalesced [1034] bitmap_line_xdyd::y#12 ← bitmap_line_xdyd::y#2
Coalesced [1035] bitmap_line_xdyd::e#9 ← bitmap_line_xdyd::e#2
Coalesced [1040] bitmap_line_xdyd::x#11 ← bitmap_line_xdyd::x#2
Coalesced [1041] bitmap_line_xdyd::y#11 ← bitmap_line_xdyd::y#6
Coalesced [1042] bitmap_line_xdyd::e#8 ← bitmap_line_xdyd::e#6
Coalesced (already) [1043] bitmap_line_xdyd::y#13 ← bitmap_line_xdyd::y#3
Coalesced [1044] bitmap_line_xdyd::e#10 ← bitmap_line_xdyd::e#1
Coalesced [1047] bitmap_line_ydxd::x#10 ← bitmap_line_ydxd::x#5
Coalesced [1048] bitmap_line_ydxd::y#11 ← bitmap_line_ydxd::y#7
Coalesced [1049] bitmap_line_ydxd::e#7 ← bitmap_line_ydxd::e#0
Coalesced [1053] bitmap_plot::x#7 ← bitmap_plot::x#3
Coalesced [1054] bitmap_plot::y#7 ← bitmap_plot::y#3
Coalesced [1061] bitmap_line_ydxd::x#12 ← bitmap_line_ydxd::x#2
Coalesced [1062] bitmap_line_ydxd::e#9 ← bitmap_line_ydxd::e#2
Coalesced [1067] bitmap_line_ydxd::x#11 ← bitmap_line_ydxd::x#6
Coalesced [1068] bitmap_line_ydxd::y#12 ← bitmap_line_ydxd::y#3
Coalesced [1069] bitmap_line_ydxd::e#8 ← bitmap_line_ydxd::e#6
Coalesced (already) [1070] bitmap_line_ydxd::x#13 ← bitmap_line_ydxd::x#3
Coalesced [1071] bitmap_line_ydxd::e#10 ← bitmap_line_ydxd::e#1
Coalesced [1075] bitmap_clear::bitmap#7 ← bitmap_clear::bitmap#3
Coalesced [1084] bitmap_clear::bitmap#6 ← bitmap_clear::bitmap#1
Coalesced [1085] bitmap_clear::y#5 ← bitmap_clear::y#1
Coalesced (already) [1086] bitmap_clear::bitmap#8 ← bitmap_clear::bitmap#1
Coalesced [1087] bitmap_clear::x#3 ← bitmap_clear::x#1
Coalesced [1110] bitmap_init::yoffs#7 ← bitmap_init::yoffs#1
Coalesced [1115] bitmap_init::y#5 ← bitmap_init::y#1
Coalesced [1116] bitmap_init::yoffs#5 ← bitmap_init::yoffs#4
Coalesced (already) [1117] bitmap_init::yoffs#6 ← bitmap_init::yoffs#2
Coalesced [1118] bitmap_init::x#5 ← bitmap_init::x#1
Coalesced [1119] bitmap_init::bits#5 ← bitmap_init::bits#4
Coalesced [1120] bitmap_init::bits#6 ← bitmap_init::bits#1
Coalesced [1123] gfx_init_charset::chargen#6 ← gfx_init_charset::chargen#3
Coalesced [1124] gfx_init_charset::charset#6 ← gfx_init_charset::charset#3
Coalesced [1135] gfx_init_charset::chargen#5 ← gfx_init_charset::chargen#1
Coalesced [1136] gfx_init_charset::charset#5 ← gfx_init_charset::charset#1
Coalesced [1137] gfx_init_charset::c#5 ← gfx_init_charset::c#1
Coalesced (already) [1138] gfx_init_charset::chargen#7 ← gfx_init_charset::chargen#1
Coalesced (already) [1139] gfx_init_charset::charset#7 ← gfx_init_charset::charset#1
Coalesced [1140] gfx_init_charset::l#3 ← gfx_init_charset::l#1
Coalesced [1143] gfx_init_screen4::ch#6 ← gfx_init_screen4::ch#3
Coalesced [1152] gfx_init_screen4::ch#5 ← gfx_init_screen4::ch#1
Coalesced [1153] gfx_init_screen4::cy#5 ← gfx_init_screen4::cy#1
Coalesced (already) [1154] gfx_init_screen4::ch#7 ← gfx_init_screen4::ch#1
Coalesced [1155] gfx_init_screen4::cx#3 ← gfx_init_screen4::cx#1
Coalesced [1158] gfx_init_screen3::ch#6 ← gfx_init_screen3::ch#3
Coalesced [1171] gfx_init_screen3::cy#5 ← gfx_init_screen3::cy#1
Coalesced [1172] gfx_init_screen3::ch#5 ← gfx_init_screen3::ch#1
Coalesced [1173] gfx_init_screen3::cx#3 ← gfx_init_screen3::cx#1
Coalesced (already) [1174] gfx_init_screen3::ch#7 ← gfx_init_screen3::ch#1
Coalesced [1177] gfx_init_screen2::ch#6 ← gfx_init_screen2::ch#3
Coalesced [1191] gfx_init_screen2::cy#5 ← gfx_init_screen2::cy#1
Coalesced [1192] gfx_init_screen2::ch#5 ← gfx_init_screen2::ch#1
Coalesced [1193] gfx_init_screen2::cx#3 ← gfx_init_screen2::cx#1
Coalesced (already) [1194] gfx_init_screen2::ch#7 ← gfx_init_screen2::ch#1
Coalesced [1197] gfx_init_screen1::ch#6 ← gfx_init_screen1::ch#3
Coalesced [1208] gfx_init_screen1::cy#5 ← gfx_init_screen1::cy#1
Coalesced [1209] gfx_init_screen1::ch#5 ← gfx_init_screen1::ch#1
Coalesced [1210] gfx_init_screen1::cx#3 ← gfx_init_screen1::cx#1
Coalesced (already) [1211] gfx_init_screen1::ch#7 ← gfx_init_screen1::ch#1
Coalesced [1214] gfx_init_screen0::ch#6 ← gfx_init_screen0::ch#3
Coalesced [1227] gfx_init_screen0::cy#5 ← gfx_init_screen0::cy#1
Coalesced [1228] gfx_init_screen0::ch#5 ← gfx_init_screen0::ch#1
Coalesced [1229] gfx_init_screen0::cx#3 ← gfx_init_screen0::cx#1
Coalesced (already) [1230] gfx_init_screen0::ch#7 ← gfx_init_screen0::ch#1
Coalesced down to 120 phi equivalence classes
Culled Empty Block (label) @4
Culled Empty Block (label) @17
Culled Empty Block (label) @34
Culled Empty Block (label) @41
Culled Empty Block (label) @45
Culled Empty Block (label) @48
Culled Empty Block (label) @57
Culled Empty Block (label) @60
Culled Empty Block (label) @62
Culled Empty Block (label) @81
Culled Empty Block (label) @86
Culled Empty Block (label) main::@8
Culled Empty Block (label) main::@10
Culled Empty Block (label) gfx_mode::@25
Culled Empty Block (label) gfx_mode::@31
Culled Empty Block (label) gfx_mode::@61
Culled Empty Block (label) gfx_mode::@10
Culled Empty Block (label) gfx_mode::@62
Culled Empty Block (label) gfx_mode::@59
Culled Empty Block (label) gfx_mode::@60
Culled Empty Block (label) gfx_mode::@58
Culled Empty Block (label) gfx_mode::@57
Culled Empty Block (label) gfx_mode::@56
Culled Empty Block (label) gfx_mode::@55
Culled Empty Block (label) gfx_mode::@54
Culled Empty Block (label) gfx_mode::@53
Culled Empty Block (label) keyboard_event_get::@1
Culled Empty Block (label) keyboard_event_scan::@36
Culled Empty Block (label) keyboard_event_scan::@35
Culled Empty Block (label) keyboard_event_scan::@34
Culled Empty Block (label) keyboard_event_scan::@30
Culled Empty Block (label) keyboard_event_scan::@9
Culled Empty Block (label) keyboard_event_scan::@31
Culled Empty Block (label) keyboard_event_scan::@33
Culled Empty Block (label) keyboard_event_scan::@32
Culled Empty Block (label) get_vic_screen::@14
Culled Empty Block (label) get_vic_screen::@4
Culled Empty Block (label) get_vic_screen::@3
Culled Empty Block (label) get_vic_screen::@2
Culled Empty Block (label) get_vic_screen::@1
Culled Empty Block (label) get_vic_charset::@5
Culled Empty Block (label) get_vic_charset::@1
Culled Empty Block (label) get_plane::@41
Culled Empty Block (label) get_plane::@13
Culled Empty Block (label) get_plane::@12
Culled Empty Block (label) get_plane::@11
Culled Empty Block (label) get_plane::@10
Culled Empty Block (label) get_plane::@9
Culled Empty Block (label) get_plane::@8
Culled Empty Block (label) get_plane::@7
Culled Empty Block (label) get_plane::@6
Culled Empty Block (label) get_plane::@5
Culled Empty Block (label) get_plane::@4
Culled Empty Block (label) get_plane::@3
Culled Empty Block (label) get_plane::@2
Culled Empty Block (label) get_plane::@1
Culled Empty Block (label) form_mode::@33
Culled Empty Block (label) form_mode::@35
Culled Empty Block (label) form_mode::@34
Culled Empty Block (label) render_preset_name::@33
Culled Empty Block (label) render_preset_name::@45
Culled Empty Block (label) render_preset_name::@10
Culled Empty Block (label) render_preset_name::@9
Culled Empty Block (label) render_preset_name::@8
Culled Empty Block (label) render_preset_name::@7
Culled Empty Block (label) render_preset_name::@6
Culled Empty Block (label) render_preset_name::@5
Culled Empty Block (label) render_preset_name::@4
Culled Empty Block (label) render_preset_name::@3
Culled Empty Block (label) render_preset_name::@2
Culled Empty Block (label) render_preset_name::@1
Culled Empty Block (label) apply_preset::@33
Culled Empty Block (label) apply_preset::@10
Culled Empty Block (label) apply_preset::@9
Culled Empty Block (label) apply_preset::@8
Culled Empty Block (label) apply_preset::@7
Culled Empty Block (label) apply_preset::@6
Culled Empty Block (label) apply_preset::@5
Culled Empty Block (label) apply_preset::@4
Culled Empty Block (label) apply_preset::@3
Culled Empty Block (label) apply_preset::@2
Culled Empty Block (label) apply_preset::@1
Culled Empty Block (label) form_control::@7
Culled Empty Block (label) form_control::@12
Culled Empty Block (label) form_control::@24
Culled Empty Block (label) form_control::@16
Culled Empty Block (label) form_set_screen::@3
Culled Empty Block (label) print_str_lines::@12
Culled Empty Block (label) print_str_lines::@13
Culled Empty Block (label) print_str_lines::@14
Culled Empty Block (label) print_ln::@2
Culled Empty Block (label) print_ln::@3
Culled Empty Block (label) print_cls::@1
Culled Empty Block (label) memset::@1
Culled Empty Block (label) gfx_init::@15
Culled Empty Block (label) gfx_init_plane_full::@1
Culled Empty Block (label) gfx_init_plane_fill::@6
Culled Empty Block (label) gfx_init_plane_fill::@7
Culled Empty Block (label) gfx_init_plane_fill::@8
Culled Empty Block (label) gfx_init_plane_blank::@1
Culled Empty Block (label) gfx_init_plane_vertical2::@1
Culled Empty Block (label) gfx_init_plane_horisontal2::@5
Culled Empty Block (label) gfx_init_plane_horisontal2::@6
Culled Empty Block (label) gfx_init_plane_horisontal2::@7
Culled Empty Block (label) gfx_init_plane_horisontal2::@8
Culled Empty Block (label) gfx_init_plane_vertical::@5
Culled Empty Block (label) gfx_init_plane_vertical::@6
Culled Empty Block (label) gfx_init_plane_vertical::@7
Culled Empty Block (label) gfx_init_plane_vertical::@8
Culled Empty Block (label) gfx_init_plane_horisontal::@9
Culled Empty Block (label) gfx_init_plane_horisontal::@10
Culled Empty Block (label) gfx_init_plane_horisontal::@11
Culled Empty Block (label) gfx_init_plane_horisontal::@12
Culled Empty Block (label) gfx_init_plane_charset8::@10
Culled Empty Block (label) gfx_init_plane_charset8::@11
Culled Empty Block (label) gfx_init_plane_charset8::@12
Culled Empty Block (label) gfx_init_plane_charset8::@13
Culled Empty Block (label) gfx_init_plane_8bppchunky::@7
Culled Empty Block (label) gfx_init_plane_8bppchunky::@9
Culled Empty Block (label) gfx_init_plane_8bppchunky::@10
Culled Empty Block (label) gfx_init_plane_8bppchunky::@11
Culled Empty Block (label) gfx_init_plane_8bppchunky::@12
Culled Empty Block (label) gfx_init_vic_bitmap::@8
Culled Empty Block (label) bitmap_line::@30
Culled Empty Block (label) bitmap_line::@29
Culled Empty Block (label) bitmap_line::@32
Culled Empty Block (label) bitmap_line::@31
Culled Empty Block (label) bitmap_line::@34
Culled Empty Block (label) bitmap_line::@33
Culled Empty Block (label) bitmap_line::@36
Culled Empty Block (label) bitmap_line::@35
Culled Empty Block (label) bitmap_line_xdyi::@6
Culled Empty Block (label) bitmap_line_xdyi::@7
Culled Empty Block (label) bitmap_line_ydxi::@6
Culled Empty Block (label) bitmap_line_ydxi::@7
Culled Empty Block (label) bitmap_line_xdyd::@6
Culled Empty Block (label) bitmap_line_xdyd::@7
Culled Empty Block (label) bitmap_line_ydxd::@6
Culled Empty Block (label) bitmap_line_ydxd::@7
Culled Empty Block (label) bitmap_clear::@5
Culled Empty Block (label) bitmap_clear::@6
Culled Empty Block (label) bitmap_init::@3
Culled Empty Block (label) bitmap_init::@4
Culled Empty Block (label) bitmap_init::@11
Culled Empty Block (label) bitmap_init::@12
Culled Empty Block (label) bitmap_init::@9
Culled Empty Block (label) gfx_init_charset::@5
Culled Empty Block (label) gfx_init_charset::@6
Culled Empty Block (label) gfx_init_screen4::@5
Culled Empty Block (label) gfx_init_screen4::@6
Culled Empty Block (label) gfx_init_screen3::@5
Culled Empty Block (label) gfx_init_screen3::@6
Culled Empty Block (label) gfx_init_screen2::@5
Culled Empty Block (label) gfx_init_screen2::@6
Culled Empty Block (label) gfx_init_screen1::@5
Culled Empty Block (label) gfx_init_screen1::@6
Culled Empty Block (label) gfx_init_screen0::@5
Culled Empty Block (label) gfx_init_screen0::@6
Renumbering block @85 to @1
Renumbering block memset::@2 to memset::@1
Renumbering block memset::@4 to memset::@2
Renumbering block memset::@5 to memset::@3
Renumbering block print_str_lines::@4 to print_str_lines::@2
Renumbering block print_str_lines::@5 to print_str_lines::@3
Renumbering block print_str_lines::@6 to print_str_lines::@4
Renumbering block print_str_lines::@7 to print_str_lines::@5
Renumbering block print_str_lines::@11 to print_str_lines::@6
Renumbering block keyboard_event_scan::@5 to keyboard_event_scan::@4
Renumbering block keyboard_event_scan::@6 to keyboard_event_scan::@5
Renumbering block keyboard_event_scan::@7 to keyboard_event_scan::@6
Renumbering block keyboard_event_scan::@8 to keyboard_event_scan::@7
Renumbering block keyboard_event_scan::@10 to keyboard_event_scan::@8
Renumbering block keyboard_event_scan::@11 to keyboard_event_scan::@9
Renumbering block keyboard_event_scan::@12 to keyboard_event_scan::@10
Renumbering block keyboard_event_scan::@14 to keyboard_event_scan::@11
Renumbering block keyboard_event_scan::@16 to keyboard_event_scan::@12
Renumbering block keyboard_event_scan::@17 to keyboard_event_scan::@13
Renumbering block keyboard_event_scan::@18 to keyboard_event_scan::@14
Renumbering block keyboard_event_scan::@20 to keyboard_event_scan::@15
Renumbering block keyboard_event_scan::@21 to keyboard_event_scan::@16
Renumbering block keyboard_event_scan::@23 to keyboard_event_scan::@17
Renumbering block keyboard_event_scan::@24 to keyboard_event_scan::@18
Renumbering block keyboard_event_scan::@25 to keyboard_event_scan::@19
Renumbering block keyboard_event_scan::@26 to keyboard_event_scan::@20
Renumbering block keyboard_event_scan::@27 to keyboard_event_scan::@21
Renumbering block keyboard_event_scan::@28 to keyboard_event_scan::@22
Renumbering block keyboard_event_scan::@29 to keyboard_event_scan::@23
Renumbering block keyboard_event_get::@3 to keyboard_event_get::@1
Renumbering block bitmap_init::@5 to bitmap_init::@3
Renumbering block bitmap_init::@6 to bitmap_init::@4
Renumbering block bitmap_init::@7 to bitmap_init::@5
Renumbering block bitmap_init::@10 to bitmap_init::@6
Renumbering block bitmap_line::@3 to bitmap_line::@2
Renumbering block bitmap_line::@4 to bitmap_line::@3
Renumbering block bitmap_line::@5 to bitmap_line::@4
Renumbering block bitmap_line::@7 to bitmap_line::@5
Renumbering block bitmap_line::@8 to bitmap_line::@6
Renumbering block bitmap_line::@10 to bitmap_line::@7
Renumbering block bitmap_line::@11 to bitmap_line::@8
Renumbering block bitmap_line::@15 to bitmap_line::@9
Renumbering block bitmap_line::@17 to bitmap_line::@10
Renumbering block bitmap_line::@20 to bitmap_line::@11
Renumbering block bitmap_line::@21 to bitmap_line::@12
Renumbering block bitmap_line::@25 to bitmap_line::@13
Renumbering block bitmap_line::@27 to bitmap_line::@14
Renumbering block bitmap_line_xdyi::@5 to bitmap_line_xdyi::@4
Renumbering block bitmap_line_xdyd::@5 to bitmap_line_xdyd::@4
Renumbering block bitmap_line_ydxi::@5 to bitmap_line_ydxi::@4
Renumbering block bitmap_line_ydxd::@5 to bitmap_line_ydxd::@4
Renumbering block main::@7 to main::@3
Renumbering block main::@9 to main::@4
Renumbering block get_plane::@27 to get_plane::@1
Renumbering block get_plane::@28 to get_plane::@2
Renumbering block get_plane::@29 to get_plane::@3
Renumbering block get_plane::@30 to get_plane::@4
Renumbering block get_plane::@31 to get_plane::@5
Renumbering block get_plane::@32 to get_plane::@6
Renumbering block get_plane::@33 to get_plane::@7
Renumbering block get_plane::@34 to get_plane::@8
Renumbering block get_plane::@35 to get_plane::@9
Renumbering block get_plane::@36 to get_plane::@10
Renumbering block get_plane::@37 to get_plane::@11
Renumbering block get_plane::@38 to get_plane::@12
Renumbering block get_plane::@39 to get_plane::@13
Renumbering block get_plane::@40 to get_plane::@14
Renumbering block get_vic_screen::@9 to get_vic_screen::@1
Renumbering block get_vic_screen::@10 to get_vic_screen::@2
Renumbering block get_vic_screen::@11 to get_vic_screen::@3
Renumbering block get_vic_screen::@12 to get_vic_screen::@4
Renumbering block get_vic_screen::@13 to get_vic_screen::@5
Renumbering block get_vic_charset::@3 to get_vic_charset::@1
Renumbering block get_vic_charset::@4 to get_vic_charset::@2
Renumbering block apply_preset::@11 to apply_preset::@1
Renumbering block apply_preset::@22 to apply_preset::@2
Renumbering block apply_preset::@23 to apply_preset::@3
Renumbering block apply_preset::@24 to apply_preset::@4
Renumbering block apply_preset::@25 to apply_preset::@5
Renumbering block apply_preset::@26 to apply_preset::@6
Renumbering block apply_preset::@27 to apply_preset::@7
Renumbering block apply_preset::@28 to apply_preset::@8
Renumbering block apply_preset::@29 to apply_preset::@9
Renumbering block apply_preset::@30 to apply_preset::@10
Renumbering block apply_preset::@31 to apply_preset::@11
Renumbering block apply_preset::@32 to apply_preset::@12
Renumbering block apply_preset::@45 to apply_preset::@13
Renumbering block apply_preset::@46 to apply_preset::@14
Renumbering block render_preset_name::@11 to render_preset_name::@1
Renumbering block render_preset_name::@22 to render_preset_name::@2
Renumbering block render_preset_name::@23 to render_preset_name::@3
Renumbering block render_preset_name::@24 to render_preset_name::@4
Renumbering block render_preset_name::@25 to render_preset_name::@5
Renumbering block render_preset_name::@26 to render_preset_name::@6
Renumbering block render_preset_name::@27 to render_preset_name::@7
Renumbering block render_preset_name::@28 to render_preset_name::@8
Renumbering block render_preset_name::@29 to render_preset_name::@9
Renumbering block render_preset_name::@30 to render_preset_name::@10
Renumbering block render_preset_name::@31 to render_preset_name::@11
Renumbering block render_preset_name::@32 to render_preset_name::@12
Renumbering block gfx_mode::@12 to gfx_mode::@10
Renumbering block gfx_mode::@13 to gfx_mode::@11
Renumbering block gfx_mode::@14 to gfx_mode::@12
Renumbering block gfx_mode::@15 to gfx_mode::@13
Renumbering block gfx_mode::@16 to gfx_mode::@14
Renumbering block gfx_mode::@17 to gfx_mode::@15
Renumbering block gfx_mode::@18 to gfx_mode::@16
Renumbering block gfx_mode::@19 to gfx_mode::@17
Renumbering block gfx_mode::@20 to gfx_mode::@18
Renumbering block gfx_mode::@21 to gfx_mode::@19
Renumbering block gfx_mode::@22 to gfx_mode::@20
Renumbering block gfx_mode::@23 to gfx_mode::@21
Renumbering block gfx_mode::@24 to gfx_mode::@22
Renumbering block gfx_mode::@26 to gfx_mode::@23
Renumbering block gfx_mode::@29 to gfx_mode::@24
Renumbering block gfx_mode::@34 to gfx_mode::@25
Renumbering block gfx_mode::@36 to gfx_mode::@26
Renumbering block gfx_mode::@46 to gfx_mode::@27
Renumbering block gfx_mode::@47 to gfx_mode::@28
Renumbering block gfx_mode::@48 to gfx_mode::@29
Renumbering block gfx_mode::@49 to gfx_mode::@30
Renumbering block gfx_mode::@50 to gfx_mode::@31
Renumbering block gfx_mode::@51 to gfx_mode::@32
Renumbering block gfx_mode::@52 to gfx_mode::@33
Renumbering block gfx_init_vic_bitmap::@7 to gfx_init_vic_bitmap::@3
Renumbering block gfx_init_vic_bitmap::@9 to gfx_init_vic_bitmap::@4
Renumbering block gfx_init_plane_8bppchunky::@8 to gfx_init_plane_8bppchunky::@7
Renumbering block gfx_init_plane_horisontal::@7 to gfx_init_plane_horisontal::@6
Renumbering block gfx_init_plane_horisontal::@8 to gfx_init_plane_horisontal::@7
Renumbering block form_mode::@6 to form_mode::@4
Renumbering block form_mode::@8 to form_mode::@5
Renumbering block form_mode::@14 to form_mode::@6
Renumbering block form_mode::@18 to form_mode::@7
Renumbering block form_mode::@21 to form_mode::@8
Renumbering block form_mode::@22 to form_mode::@9
Renumbering block form_mode::@23 to form_mode::@10
Renumbering block form_mode::@24 to form_mode::@11
Renumbering block form_mode::@25 to form_mode::@12
Renumbering block form_mode::@26 to form_mode::@13
Renumbering block form_mode::@27 to form_mode::@14
Renumbering block form_mode::@28 to form_mode::@15
Renumbering block form_mode::@29 to form_mode::@16
Renumbering block form_mode::@30 to form_mode::@17
Renumbering block form_mode::@31 to form_mode::@18
Renumbering block form_mode::@32 to form_mode::@19
Renumbering block form_render_values::@7 to form_render_values::@3
Renumbering block form_control::@8 to form_control::@7
Renumbering block form_control::@10 to form_control::@8
Renumbering block form_control::@11 to form_control::@9
Renumbering block form_control::@13 to form_control::@10
Renumbering block form_control::@14 to form_control::@11
Renumbering block form_control::@15 to form_control::@12
Renumbering block form_control::@19 to form_control::@13
Renumbering block form_control::@22 to form_control::@14
Renumbering block form_control::@26 to form_control::@15
Renumbering block form_control::@29 to form_control::@16
Renumbering block form_control::@31 to form_control::@17
Renumbering block form_control::@33 to form_control::@18
Renumbering block form_control::@34 to form_control::@19
Renumbering block form_control::@35 to form_control::@20
Renumbering block form_control::@36 to form_control::@21
Renumbering block form_control::@37 to form_control::@22
Renumbering block form_control::@38 to form_control::@23
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of main::@2
Adding NOP phi() at start of main::@4
Adding NOP phi() at start of gfx_mode::@10
Adding NOP phi() at start of gfx_mode::@16
Adding NOP phi() at start of gfx_mode::@18
Adding NOP phi() at start of gfx_mode::@26
Adding NOP phi() at start of gfx_mode::@32
Adding NOP phi() at start of keyboard_event_scan::@17
Adding NOP phi() at start of keyboard_event_scan::@18
Adding NOP phi() at start of get_vic_screen::@1
Adding NOP phi() at start of get_vic_charset::@1
Adding NOP phi() at start of get_plane::@1
Adding NOP phi() at start of form_mode
Adding NOP phi() at start of form_mode::@8
Adding NOP phi() at start of form_mode::@9
Adding NOP phi() at start of form_mode::@10
Adding NOP phi() at start of form_mode::@11
Adding NOP phi() at start of form_mode::@12
Adding NOP phi() at start of form_mode::@13
Adding NOP phi() at start of form_mode::@14
Adding NOP phi() at start of form_mode::@5
Adding NOP phi() at start of render_preset_name::@1
Adding NOP phi() at start of print_str_at
Adding NOP phi() at start of form_render_values
Adding NOP phi() at start of apply_preset::@1
Adding NOP phi() at start of form_control::@21
Adding NOP phi() at start of form_control::@3
Adding NOP phi() at start of form_control::@19
Adding NOP phi() at start of form_control::@22
Adding NOP phi() at start of form_control::@23
Adding NOP phi() at start of form_control::@6
Adding NOP phi() at start of form_set_screen
Adding NOP phi() at start of print_str_lines::@5
Adding NOP phi() at start of print_ln
Adding NOP phi() at start of memset
Adding NOP phi() at start of gfx_init
Adding NOP phi() at start of gfx_init::@1
Adding NOP phi() at start of gfx_init::@2
Adding NOP phi() at start of gfx_init::@3
Adding NOP phi() at start of gfx_init::@4
Adding NOP phi() at start of gfx_init::@5
Adding NOP phi() at start of gfx_init::@6
Adding NOP phi() at start of gfx_init::@7
Adding NOP phi() at start of gfx_init::@8
Adding NOP phi() at start of gfx_init::@9
Adding NOP phi() at start of gfx_init::@10
Adding NOP phi() at start of gfx_init::@11
Adding NOP phi() at start of gfx_init::@12
Adding NOP phi() at start of gfx_init::@13
Adding NOP phi() at start of gfx_init::@14
Adding NOP phi() at start of gfx_init_plane_full
Adding NOP phi() at start of gfx_init_plane_fill::@4
Adding NOP phi() at start of gfx_init_plane_blank
Adding NOP phi() at start of gfx_init_plane_vertical2
Adding NOP phi() at start of gfx_init_plane_horisontal2
Adding NOP phi() at start of gfx_init_plane_horisontal2::@4
Adding NOP phi() at start of gfx_init_plane_vertical
Adding NOP phi() at start of gfx_init_plane_vertical::@4
Adding NOP phi() at start of gfx_init_plane_horisontal
Adding NOP phi() at start of gfx_init_plane_horisontal::@7
Adding NOP phi() at start of gfx_init_plane_charset8
Adding NOP phi() at start of gfx_init_plane_8bppchunky
Adding NOP phi() at start of gfx_init_plane_8bppchunky::@6
Adding NOP phi() at start of gfx_init_vic_bitmap
Adding NOP phi() at start of gfx_init_vic_bitmap::@3
Adding NOP phi() at start of bitmap_init
Adding NOP phi() at start of bitmap_init::@6
Adding NOP phi() at start of gfx_init_screen4
Adding NOP phi() at start of gfx_init_screen3
Adding NOP phi() at start of gfx_init_screen2
Adding NOP phi() at start of gfx_init_screen1
Adding NOP phi() at start of gfx_init_screen0

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK
  [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO
  [7] *((const byte*) DTV_FEATURE) ← (const byte) DTV_FEATURE_ENABLE
  [8] call keyboard_init 
  to:main::@3
main::@3: scope:[main]  from main
  [9] phi()
  [10] call gfx_init 
  to:main::@1
main::@1: scope:[main]  from main::@3 main::@4
  [11] (byte) form_field_idx#1 ← phi( main::@4/(byte) form_field_idx#18 main::@3/(byte) 0 )
  [11] (byte) keyboard_events_size#27 ← phi( main::@4/(byte) keyboard_events_size#24 main::@3/(byte) 0 )
  [11] (signed byte) form_cursor_count#1 ← phi( main::@4/(signed byte) form_cursor_count#16 main::@3/(const signed byte) FORM_CURSOR_BLINK/(signed byte) 2 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  [13] call form_mode 
  to:main::@4
main::@4: scope:[main]  from main::@2
  [14] phi()
  [15] call gfx_mode 
  to:main::@1

(void()) gfx_mode()
gfx_mode: scope:[gfx_mode]  from main::@4
  [16] if(*((const byte[]) form_fields_val+(byte) 5)==(byte) 0) goto gfx_mode::@1
  to:gfx_mode::@10
gfx_mode::@10: scope:[gfx_mode]  from gfx_mode
  [17] phi()
  to:gfx_mode::@1
gfx_mode::@1: scope:[gfx_mode]  from gfx_mode gfx_mode::@10
  [18] (byte) gfx_mode::dtv_control#14 ← phi( gfx_mode/(byte) 0 gfx_mode::@10/(const byte) DTV_LINEAR )
  [19] if(*((const byte[]) form_fields_val+(byte) 8)==(byte) 0) goto gfx_mode::@2
  to:gfx_mode::@11
gfx_mode::@11: scope:[gfx_mode]  from gfx_mode::@1
  [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF
  to:gfx_mode::@2
gfx_mode::@2: scope:[gfx_mode]  from gfx_mode::@1 gfx_mode::@11
  [21] (byte) gfx_mode::dtv_control#15 ← phi( gfx_mode::@1/(byte) gfx_mode::dtv_control#14 gfx_mode::@11/(byte) gfx_mode::dtv_control#2 )
  [22] if(*((const byte[]) form_fields_val+(byte) 4)==(byte) 0) goto gfx_mode::@3
  to:gfx_mode::@12
gfx_mode::@12: scope:[gfx_mode]  from gfx_mode::@2
  [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR
  to:gfx_mode::@3
gfx_mode::@3: scope:[gfx_mode]  from gfx_mode::@12 gfx_mode::@2
  [24] (byte) gfx_mode::dtv_control#10 ← phi( gfx_mode::@12/(byte) gfx_mode::dtv_control#3 gfx_mode::@2/(byte) gfx_mode::dtv_control#15 )
  [25] if(*((const byte[]) form_fields_val+(byte) 9)==(byte) 0) goto gfx_mode::@4
  to:gfx_mode::@13
gfx_mode::@13: scope:[gfx_mode]  from gfx_mode::@3
  [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN
  to:gfx_mode::@4
gfx_mode::@4: scope:[gfx_mode]  from gfx_mode::@13 gfx_mode::@3
  [27] (byte) gfx_mode::dtv_control#11 ← phi( gfx_mode::@13/(byte) gfx_mode::dtv_control#4 gfx_mode::@3/(byte) gfx_mode::dtv_control#10 )
  [28] if(*((const byte[]) form_fields_val+(byte) 6)==(byte) 0) goto gfx_mode::@5
  to:gfx_mode::@14
gfx_mode::@14: scope:[gfx_mode]  from gfx_mode::@4
  [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF
  to:gfx_mode::@5
gfx_mode::@5: scope:[gfx_mode]  from gfx_mode::@14 gfx_mode::@4
  [30] (byte) gfx_mode::dtv_control#13 ← phi( gfx_mode::@14/(byte) gfx_mode::dtv_control#5 gfx_mode::@4/(byte) gfx_mode::dtv_control#11 )
  [31] if(*((const byte[]) form_fields_val+(byte) 7)==(byte) 0) goto gfx_mode::@6
  to:gfx_mode::@15
gfx_mode::@15: scope:[gfx_mode]  from gfx_mode::@5
  [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY
  to:gfx_mode::@6
gfx_mode::@6: scope:[gfx_mode]  from gfx_mode::@15 gfx_mode::@5
  [33] (byte) gfx_mode::dtv_control#12 ← phi( gfx_mode::@15/(byte) gfx_mode::dtv_control#6 gfx_mode::@5/(byte) gfx_mode::dtv_control#13 )
  [34] *((const byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12
  [35] if(*((const byte[]) form_fields_val+(byte) 3)==(byte) 0) goto gfx_mode::@7
  to:gfx_mode::@16
gfx_mode::@16: scope:[gfx_mode]  from gfx_mode::@6
  [36] phi()
  to:gfx_mode::@7
gfx_mode::@7: scope:[gfx_mode]  from gfx_mode::@16 gfx_mode::@6
  [37] (byte) gfx_mode::vic_control#5 ← phi( gfx_mode::@16/(const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3|(const byte) VIC_ECM gfx_mode::@6/(const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 )
  [38] if(*((const byte[]) form_fields_val+(byte) 1)==(byte) 0) goto gfx_mode::@8
  to:gfx_mode::@17
gfx_mode::@17: scope:[gfx_mode]  from gfx_mode::@7
  [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM
  to:gfx_mode::@8
gfx_mode::@8: scope:[gfx_mode]  from gfx_mode::@17 gfx_mode::@7
  [40] (byte) gfx_mode::vic_control#4 ← phi( gfx_mode::@17/(byte) gfx_mode::vic_control#2 gfx_mode::@7/(byte) gfx_mode::vic_control#5 )
  [41] *((const byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4
  [42] if(*((const byte[]) form_fields_val+(byte) 2)==(byte) 0) goto gfx_mode::@9
  to:gfx_mode::@18
gfx_mode::@18: scope:[gfx_mode]  from gfx_mode::@8
  [43] phi()
  to:gfx_mode::@9
gfx_mode::@9: scope:[gfx_mode]  from gfx_mode::@18 gfx_mode::@8
  [44] (byte) gfx_mode::vic_control2#2 ← phi( gfx_mode::@18/(const byte) VIC_CSEL|(const byte) VIC_MCM gfx_mode::@8/(const byte) VIC_CSEL )
  [45] *((const byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2
  [46] (byte~) gfx_mode::$20 ← *((const byte[]) form_fields_val+(byte) $b) << (byte) 4
  [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte[]) form_fields_val+(byte) $c)
  [48] (byte) get_plane::idx#0 ← *((const byte[]) form_fields_val+(byte) $a)
  [49] call get_plane 
  [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14
  to:gfx_mode::@27
gfx_mode::@27: scope:[gfx_mode]  from gfx_mode::@9
  [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16
  [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0
  [53] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0
  [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$26
  [55] *((const byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$25
  [56] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26
  [57] *((const byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$27
  [58] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0
  [59] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28
  [60] *((const byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$29
  [61] (byte~) gfx_mode::$30 ← *((const byte[]) form_fields_val+(byte) $d) << (byte) 4
  [62] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte[]) form_fields_val+(byte) $e)
  [63] *((const byte*) DTV_PLANEA_STEP) ← (byte~) gfx_mode::$31
  [64] (byte~) gfx_mode::$32 ← *((const byte[]) form_fields_val+(byte) $f) << (byte) 4
  [65] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte[]) form_fields_val+(byte) $10)
  [66] *((const byte*) DTV_PLANEA_MODULO_LO) ← (byte~) gfx_mode::$33
  [67] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0
  [68] (byte~) gfx_mode::$34 ← *((const byte[]) form_fields_val+(byte) $12) << (byte) 4
  [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte[]) form_fields_val+(byte) $13)
  [70] (byte) get_plane::idx#1 ← *((const byte[]) form_fields_val+(byte) $11)
  [71] call get_plane 
  [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14
  to:gfx_mode::@28
gfx_mode::@28: scope:[gfx_mode]  from gfx_mode::@27
  [73] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17
  [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0
  [75] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0
  [76] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$40
  [77] *((const byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$39
  [78] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40
  [79] *((const byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$41
  [80] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0
  [81] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42
  [82] *((const byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$43
  [83] (byte~) gfx_mode::$44 ← *((const byte[]) form_fields_val+(byte) $14) << (byte) 4
  [84] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte[]) form_fields_val+(byte) $15)
  [85] *((const byte*) DTV_PLANEB_STEP) ← (byte~) gfx_mode::$45
  [86] (byte~) gfx_mode::$46 ← *((const byte[]) form_fields_val+(byte) $16) << (byte) 4
  [87] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte[]) form_fields_val+(byte) $17)
  [88] *((const byte*) DTV_PLANEB_MODULO_LO) ← (byte~) gfx_mode::$47
  [89] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0
  [90] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [91] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) VIC_SCREEN0/(word) $4000
  [92] (byte) get_vic_screen::idx#0 ← *((const byte[]) form_fields_val+(byte) $18)
  [93] call get_vic_screen 
  [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@29
gfx_mode::@29: scope:[gfx_mode]  from gfx_mode::@28
  [95] (byte*~) gfx_mode::$53 ← (byte*) get_vic_screen::return#10
  [96] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$53 & (word) $3fff
  [97] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte) 6
  [98] (byte~) gfx_mode::$56 ← (byte)(word~) gfx_mode::$55
  [99] (byte) get_vic_charset::idx#0 ← *((const byte[]) form_fields_val+(byte) $19)
  [100] call get_vic_charset 
  [101] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
  to:gfx_mode::@30
gfx_mode::@30: scope:[gfx_mode]  from gfx_mode::@29
  [102] (byte*~) gfx_mode::$58 ← (byte*) get_vic_charset::return#4
  [103] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$58 & (word) $3fff
  [104] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59
  [105] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte) 2
  [106] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61
  [107] *((const byte*) VIC_MEMORY) ← (byte~) gfx_mode::$62
  [108] (byte) get_vic_screen::idx#1 ← *((const byte[]) form_fields_val+(byte) $1a)
  [109] call get_vic_screen 
  [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5
  to:gfx_mode::@31
gfx_mode::@31: scope:[gfx_mode]  from gfx_mode::@30
  [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11
  to:gfx_mode::@19
gfx_mode::@19: scope:[gfx_mode]  from gfx_mode::@21 gfx_mode::@31
  [112] (byte) gfx_mode::cy#4 ← phi( gfx_mode::@21/(byte) gfx_mode::cy#1 gfx_mode::@31/(byte) 0 )
  [112] (byte*) gfx_mode::col#3 ← phi( gfx_mode::@21/(byte*) gfx_mode::col#1 gfx_mode::@31/(const byte*) COLS )
  [112] (byte*) gfx_mode::vic_colors#3 ← phi( gfx_mode::@21/(byte*) gfx_mode::vic_colors#1 gfx_mode::@31/(byte*) gfx_mode::vic_colors#0 )
  to:gfx_mode::@20
gfx_mode::@20: scope:[gfx_mode]  from gfx_mode::@19 gfx_mode::@20
  [113] (byte) gfx_mode::cx#2 ← phi( gfx_mode::@19/(byte) 0 gfx_mode::@20/(byte) gfx_mode::cx#1 )
  [113] (byte*) gfx_mode::col#2 ← phi( gfx_mode::@19/(byte*) gfx_mode::col#3 gfx_mode::@20/(byte*) gfx_mode::col#1 )
  [113] (byte*) gfx_mode::vic_colors#2 ← phi( gfx_mode::@19/(byte*) gfx_mode::vic_colors#3 gfx_mode::@20/(byte*) gfx_mode::vic_colors#1 )
  [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2)
  [115] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2
  [116] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2
  [117] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2
  [118] if((byte) gfx_mode::cx#1!=(byte) $28) goto gfx_mode::@20
  to:gfx_mode::@21
gfx_mode::@21: scope:[gfx_mode]  from gfx_mode::@20
  [119] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4
  [120] if((byte) gfx_mode::cy#1!=(byte) $19) goto gfx_mode::@19
  to:gfx_mode::@22
gfx_mode::@22: scope:[gfx_mode]  from gfx_mode::@21
  [121] *((const byte*) BORDERCOL) ← (byte) 0
  [122] (byte~) gfx_mode::$64 ← *((const byte[]) form_fields_val+(byte) $1c) << (byte) 4
  [123] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte[]) form_fields_val+(byte) $1d)
  [124] *((const byte*) BGCOL1) ← (byte~) gfx_mode::$65
  [125] (byte~) gfx_mode::$66 ← *((const byte[]) form_fields_val+(byte) $1e) << (byte) 4
  [126] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte[]) form_fields_val+(byte) $1f)
  [127] *((const byte*) BGCOL2) ← (byte~) gfx_mode::$67
  [128] (byte~) gfx_mode::$68 ← *((const byte[]) form_fields_val+(byte) $20) << (byte) 4
  [129] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte[]) form_fields_val+(byte) $21)
  [130] *((const byte*) BGCOL3) ← (byte~) gfx_mode::$69
  [131] (byte~) gfx_mode::$70 ← *((const byte[]) form_fields_val+(byte) $22) << (byte) 4
  [132] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte[]) form_fields_val+(byte) $23)
  [133] *((const byte*) BGCOL4) ← (byte~) gfx_mode::$71
  [134] if(*((const byte[]) form_fields_val+(byte) $1b)==(byte) 0) goto gfx_mode::@24
  to:gfx_mode::@23
gfx_mode::@23: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@23
  [135] (byte) gfx_mode::j#2 ← phi( gfx_mode::@22/(byte) 0 gfx_mode::@23/(byte) gfx_mode::j#1 )
  [136] *((const byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2
  [137] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2
  [138] if((byte) gfx_mode::j#1!=(byte) $10) goto gfx_mode::@23
  to:gfx_mode::@25
gfx_mode::@25: scope:[gfx_mode]  from gfx_mode::@23 gfx_mode::@24 gfx_mode::@25 gfx_mode::@33
  [139] if(*((const byte*) RASTER)!=(byte) $ff) goto gfx_mode::@25
  to:gfx_mode::@26
gfx_mode::@26: scope:[gfx_mode]  from gfx_mode::@25
  [140] phi()
  [141] call keyboard_event_scan 
  to:gfx_mode::@32
gfx_mode::@32: scope:[gfx_mode]  from gfx_mode::@26
  [142] phi()
  [143] call keyboard_event_get 
  [144] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:gfx_mode::@33
gfx_mode::@33: scope:[gfx_mode]  from gfx_mode::@32
  [145] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3
  [146] if((byte) gfx_mode::keyboard_event#0==(const byte) KEY_SPACE) goto gfx_mode::@return
  to:gfx_mode::@25
gfx_mode::@return: scope:[gfx_mode]  from gfx_mode::@33
  [147] return 
  to:@return
gfx_mode::@24: scope:[gfx_mode]  from gfx_mode::@22 gfx_mode::@24
  [148] (byte) gfx_mode::i#2 ← phi( gfx_mode::@22/(byte) 0 gfx_mode::@24/(byte) gfx_mode::i#1 )
  [149] *((const byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2)
  [150] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2
  [151] if((byte) gfx_mode::i#1!=(byte) $10) goto gfx_mode::@24
  to:gfx_mode::@25

(byte()) keyboard_event_get()
keyboard_event_get: scope:[keyboard_event_get]  from form_control::@19 gfx_mode::@32
  [152] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@1
keyboard_event_get::@1: scope:[keyboard_event_get]  from keyboard_event_get
  [153] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100
  [154] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@1
  [155] (byte) keyboard_events_size#24 ← phi( keyboard_event_get/(byte) keyboard_events_size#100 keyboard_event_get::@1/(byte) keyboard_events_size#4 )
  [155] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte) $ff keyboard_event_get::@1/(byte) keyboard_event_get::return#1 )
  [156] return 
  to:@return

(void()) keyboard_event_scan()
keyboard_event_scan: scope:[keyboard_event_scan]  from form_control::@3 gfx_mode::@26
  [157] (byte) keyboard_events_size#99 ← phi( form_control::@3/(byte) keyboard_events_size#47 gfx_mode::@26/(byte) keyboard_events_size#24 )
  to:keyboard_event_scan::@7
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@8
  [158] (byte) keyboard_events_size#109 ← phi( keyboard_event_scan/(byte) keyboard_events_size#99 keyboard_event_scan::@8/(byte) keyboard_events_size#100 )
  [158] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::keycode#13 )
  [158] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte) 0 keyboard_event_scan::@8/(byte) keyboard_event_scan::row#1 )
  [159] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [160] call keyboard_matrix_read 
  [161] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@7
  [162] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@19
  [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8
  to:keyboard_event_scan::@8
keyboard_event_scan::@8: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@16
  [165] (byte) keyboard_events_size#100 ← phi( keyboard_event_scan::@15/(byte) keyboard_events_size#108 keyboard_event_scan::@16/(byte) keyboard_events_size#109 )
  [165] (byte) keyboard_event_scan::keycode#13 ← phi( keyboard_event_scan::@15/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@16/(byte) keyboard_event_scan::keycode#1 )
  [166] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [167] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@8
  [168] phi()
  [169] call keyboard_event_pressed 
  [170] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@17
  [171] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
  [172] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@18
keyboard_event_scan::@18: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [173] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan::@18 keyboard_event_scan::@20
  [174] (byte) keyboard_modifiers#18 ← phi( keyboard_event_scan::@18/(const byte) KEY_MODIFIER_LSHIFT keyboard_event_scan::@20/(byte) 0 )
  [175] call keyboard_event_pressed 
  [176] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [177] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
  [178] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2
  to:keyboard_event_scan::@4
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@21
  [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT
  to:keyboard_event_scan::@2
keyboard_event_scan::@2: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@4
  [180] (byte) keyboard_modifiers#19 ← phi( keyboard_event_scan::@21/(byte) keyboard_modifiers#18 keyboard_event_scan::@4/(byte) keyboard_modifiers#3 )
  [181] call keyboard_event_pressed 
  [182] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@2
  [183] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
  [184] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@22
  [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@5
  [186] (byte) keyboard_modifiers#20 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#19 keyboard_event_scan::@5/(byte) keyboard_modifiers#4 )
  [187] call keyboard_event_pressed 
  [188] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [189] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3
  [190] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@6
keyboard_event_scan::@6: scope:[keyboard_event_scan]  from keyboard_event_scan::@23
  [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@6
  [192] (byte) keyboard_modifiers#21 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#20 keyboard_event_scan::@6/(byte) keyboard_modifiers#5 )
  [193] return 
  to:@return
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@10 keyboard_event_scan::@19
  [194] (byte) keyboard_events_size#18 ← phi( keyboard_event_scan::@10/(byte) keyboard_events_size#108 keyboard_event_scan::@19/(byte) keyboard_events_size#109 )
  [194] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::keycode#14 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#11 )
  [194] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@10/(byte) keyboard_event_scan::col#1 keyboard_event_scan::@19/(byte) 0 )
  [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2)
  [196] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  [197] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@12
keyboard_event_scan::@12: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [198] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@12
  [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2)
  [200] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@14
keyboard_event_scan::@14: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [201] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10
  [202] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9
  [203] (byte) keyboard_events_size#108 ← phi( keyboard_event_scan::@9/(byte) keyboard_events_size#18 keyboard_event_scan::@11/(byte) keyboard_events_size#1 keyboard_event_scan::@12/(byte) keyboard_events_size#18 keyboard_event_scan::@14/(byte) keyboard_events_size#2 )
  [204] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10
  [205] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [206] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [207] *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@8
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@13
  [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40
  [209] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte~) keyboard_event_scan::$23
  [210] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18
  to:keyboard_event_scan::@10

(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@1 keyboard_event_scan::@17 keyboard_event_scan::@2 keyboard_event_scan::@3
  [211] (byte) keyboard_event_pressed::keycode#4 ← phi( keyboard_event_scan::@1/(const byte) KEY_RSHIFT keyboard_event_scan::@2/(const byte) KEY_CTRL keyboard_event_scan::@17/(const byte) KEY_LSHIFT keyboard_event_scan::@3/(const byte) KEY_COMMODORE )
  [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3
  [213] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values + (byte~) keyboard_event_pressed::$0)
  [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7
  [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [216] return 
  to:@return

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@7
  [217] *((const byte*) CIA1_PORT_A) ← *((const byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0)
  [218] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [219] return 
  to:@return

(byte*()) get_vic_screen((byte) get_vic_screen::idx)
get_vic_screen: scope:[get_vic_screen]  from gfx_mode::@28 gfx_mode::@30
  [220] (byte) get_vic_screen::idx#2 ← phi( gfx_mode::@28/(byte) get_vic_screen::idx#0 gfx_mode::@30/(byte) get_vic_screen::idx#1 )
  [221] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@return
  to:get_vic_screen::@2
get_vic_screen::@2: scope:[get_vic_screen]  from get_vic_screen
  [222] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@return
  to:get_vic_screen::@3
get_vic_screen::@3: scope:[get_vic_screen]  from get_vic_screen::@2
  [223] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@return
  to:get_vic_screen::@4
get_vic_screen::@4: scope:[get_vic_screen]  from get_vic_screen::@3
  [224] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@return
  to:get_vic_screen::@5
get_vic_screen::@5: scope:[get_vic_screen]  from get_vic_screen::@4
  [225] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@1
  to:get_vic_screen::@return
get_vic_screen::@1: scope:[get_vic_screen]  from get_vic_screen::@5
  [226] phi()
  to:get_vic_screen::@return
get_vic_screen::@return: scope:[get_vic_screen]  from get_vic_screen get_vic_screen::@1 get_vic_screen::@2 get_vic_screen::@3 get_vic_screen::@4 get_vic_screen::@5
  [227] (byte*) get_vic_screen::return#5 ← phi( get_vic_screen/(const byte*) VIC_SCREEN0 get_vic_screen::@5/(const byte*) VIC_SCREEN4 get_vic_screen::@2/(const byte*) VIC_SCREEN1 get_vic_screen::@3/(const byte*) VIC_SCREEN2 get_vic_screen::@4/(const byte*) VIC_SCREEN3 get_vic_screen::@1/(const byte*) VIC_SCREEN0 )
  [228] return 
  to:@return

(byte*()) get_vic_charset((byte) get_vic_charset::idx)
get_vic_charset: scope:[get_vic_charset]  from gfx_mode::@29
  [229] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@return
  to:get_vic_charset::@2
get_vic_charset::@2: scope:[get_vic_charset]  from get_vic_charset
  [230] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@1
  to:get_vic_charset::@return
get_vic_charset::@1: scope:[get_vic_charset]  from get_vic_charset::@2
  [231] phi()
  to:get_vic_charset::@return
get_vic_charset::@return: scope:[get_vic_charset]  from get_vic_charset get_vic_charset::@1 get_vic_charset::@2
  [232] (byte*) get_vic_charset::return#2 ← phi( get_vic_charset/(const byte*) VIC_CHARSET_ROM get_vic_charset::@1/(const byte*) VIC_CHARSET_ROM get_vic_charset::@2/(const byte*) VIC_BITMAP )
  [233] return 
  to:@return

(dword()) get_plane((byte) get_plane::idx)
get_plane: scope:[get_plane]  from gfx_mode::@27 gfx_mode::@9
  [234] (byte) get_plane::idx#10 ← phi( gfx_mode::@27/(byte) get_plane::idx#1 gfx_mode::@9/(byte) get_plane::idx#0 )
  [235] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@return
  to:get_plane::@2
get_plane::@2: scope:[get_plane]  from get_plane
  [236] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@return
  to:get_plane::@3
get_plane::@3: scope:[get_plane]  from get_plane::@2
  [237] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@return
  to:get_plane::@4
get_plane::@4: scope:[get_plane]  from get_plane::@3
  [238] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@return
  to:get_plane::@5
get_plane::@5: scope:[get_plane]  from get_plane::@4
  [239] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@return
  to:get_plane::@6
get_plane::@6: scope:[get_plane]  from get_plane::@5
  [240] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@return
  to:get_plane::@7
get_plane::@7: scope:[get_plane]  from get_plane::@6
  [241] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@return
  to:get_plane::@8
get_plane::@8: scope:[get_plane]  from get_plane::@7
  [242] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@return
  to:get_plane::@9
get_plane::@9: scope:[get_plane]  from get_plane::@8
  [243] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@return
  to:get_plane::@10
get_plane::@10: scope:[get_plane]  from get_plane::@9
  [244] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@return
  to:get_plane::@11
get_plane::@11: scope:[get_plane]  from get_plane::@10
  [245] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@return
  to:get_plane::@12
get_plane::@12: scope:[get_plane]  from get_plane::@11
  [246] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@return
  to:get_plane::@13
get_plane::@13: scope:[get_plane]  from get_plane::@12
  [247] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@return
  to:get_plane::@14
get_plane::@14: scope:[get_plane]  from get_plane::@13
  [248] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@1
  to:get_plane::@return
get_plane::@1: scope:[get_plane]  from get_plane::@14
  [249] phi()
  to:get_plane::@return
get_plane::@return: scope:[get_plane]  from get_plane get_plane::@1 get_plane::@10 get_plane::@11 get_plane::@12 get_plane::@13 get_plane::@14 get_plane::@2 get_plane::@3 get_plane::@4 get_plane::@5 get_plane::@6 get_plane::@7 get_plane::@8 get_plane::@9
  [250] (dword) get_plane::return#14 ← phi( get_plane/(dword)(const byte*) VIC_SCREEN0 get_plane::@10/(const dword) PLANE_HORISONTAL2 get_plane::@11/(const dword) PLANE_VERTICAL2 get_plane::@12/(const dword) PLANE_CHARSET8 get_plane::@13/(const dword) PLANE_BLANK get_plane::@2/(dword)(const byte*) VIC_SCREEN1 get_plane::@1/(dword)(const byte*) VIC_SCREEN0 get_plane::@3/(dword)(const byte*) VIC_SCREEN2 get_plane::@4/(dword)(const byte*) VIC_SCREEN3 get_plane::@14/(const dword) PLANE_FULL get_plane::@5/(dword)(const byte*) VIC_BITMAP get_plane::@6/(dword)(const byte*) VIC_CHARSET_ROM get_plane::@7/(const dword) PLANE_8BPP_CHUNKY get_plane::@8/(const dword) PLANE_HORISONTAL get_plane::@9/(const dword) PLANE_VERTICAL )
  [251] return 
  to:@return

(void()) form_mode()
form_mode: scope:[form_mode]  from main::@2
  [252] phi()
  [253] call print_set_screen 
  to:form_mode::@8
form_mode::@8: scope:[form_mode]  from form_mode
  [254] phi()
  [255] call print_cls 
  to:form_mode::@9
form_mode::@9: scope:[form_mode]  from form_mode::@8
  [256] phi()
  [257] call print_str_lines 
  to:form_mode::@10
form_mode::@10: scope:[form_mode]  from form_mode::@9
  [258] phi()
  [259] call print_set_screen 
  to:form_mode::@11
form_mode::@11: scope:[form_mode]  from form_mode::@10
  [260] phi()
  [261] call print_cls 
  to:form_mode::@12
form_mode::@12: scope:[form_mode]  from form_mode::@11
  [262] phi()
  [263] call print_str_lines 
  to:form_mode::@13
form_mode::@13: scope:[form_mode]  from form_mode::@12
  [264] phi()
  [265] call form_set_screen 
  to:form_mode::@14
form_mode::@14: scope:[form_mode]  from form_mode::@13
  [266] phi()
  [267] call form_render_values 
  to:form_mode::@15
form_mode::@15: scope:[form_mode]  from form_mode::@14
  [268] (byte) render_preset_name::idx#0 ← *((const byte[]) form_fields_val)
  [269] call render_preset_name 
  to:form_mode::@16
form_mode::@16: scope:[form_mode]  from form_mode::@15
  [270] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0
  [271] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400
  [272] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0
  [273] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3
  [274] *((const byte*) CIA2_PORT_A) ← (byte) 3
  [275] *((const byte*) DTV_CONTROL) ← (byte) 0
  [276] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3
  [277] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL
  [278] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400
  [279] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0
  [280] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) FORM_SCREEN
  [281] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0
  to:form_mode::@1
form_mode::@1: scope:[form_mode]  from form_mode::@1 form_mode::@16
  [282] (byte) form_mode::i#2 ← phi( form_mode::@1/(byte) form_mode::i#1 form_mode::@16/(byte) 0 )
  [283] *((const byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2)
  [284] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2
  [285] if((byte) form_mode::i#1!=(byte) $10) goto form_mode::@1
  to:form_mode::@2
form_mode::@2: scope:[form_mode]  from form_mode::@1
  [286] *((const byte*) BGCOL) ← (byte) 0
  [287] *((const byte*) BORDERCOL) ← (byte) 0
  [288] (byte) form_mode::preset_current#0 ← *((const byte[]) form_fields_val)
  to:form_mode::@3
form_mode::@3: scope:[form_mode]  from form_mode::@19 form_mode::@2 form_mode::@6
  [289] (byte) form_mode::preset_current#6 ← phi( form_mode::@6/(byte) form_mode::preset_current#6 form_mode::@2/(byte) form_mode::preset_current#0 form_mode::@19/(byte) form_mode::preset_current#1 )
  [289] (byte) form_field_idx#28 ← phi( form_mode::@6/(byte) form_field_idx#18 form_mode::@2/(byte) form_field_idx#1 form_mode::@19/(byte) form_field_idx#18 )
  [289] (byte) keyboard_events_size#47 ← phi( form_mode::@6/(byte) keyboard_events_size#24 form_mode::@2/(byte) keyboard_events_size#27 form_mode::@19/(byte) keyboard_events_size#24 )
  [289] (signed byte) form_cursor_count#21 ← phi( form_mode::@6/(signed byte) form_cursor_count#16 form_mode::@2/(signed byte) form_cursor_count#1 form_mode::@19/(signed byte) form_cursor_count#16 )
  to:form_mode::@4
form_mode::@4: scope:[form_mode]  from form_mode::@3 form_mode::@4
  [290] if(*((const byte*) RASTER)!=(byte) $ff) goto form_mode::@4
  to:form_mode::@5
form_mode::@5: scope:[form_mode]  from form_mode::@4
  [291] phi()
  [292] call form_control 
  [293] (byte) form_control::return#0 ← (byte) form_control::return#2
  to:form_mode::@17
form_mode::@17: scope:[form_mode]  from form_mode::@5
  [294] (byte~) form_mode::$36 ← (byte) form_control::return#0
  [295] if((byte~) form_mode::$36==(byte) 0) goto form_mode::@6
  to:form_mode::@return
form_mode::@return: scope:[form_mode]  from form_mode::@17
  [296] return 
  to:@return
form_mode::@6: scope:[form_mode]  from form_mode::@17
  [297] if((byte) form_mode::preset_current#6==*((const byte[]) form_fields_val)) goto form_mode::@3
  to:form_mode::@7
form_mode::@7: scope:[form_mode]  from form_mode::@6
  [298] (byte) apply_preset::idx#0 ← *((const byte[]) form_fields_val)
  [299] call apply_preset 
  to:form_mode::@18
form_mode::@18: scope:[form_mode]  from form_mode::@7
  [300] (byte) form_mode::preset_current#1 ← *((const byte[]) form_fields_val)
  [301] call form_render_values 
  to:form_mode::@19
form_mode::@19: scope:[form_mode]  from form_mode::@18
  [302] (byte) render_preset_name::idx#1 ← *((const byte[]) form_fields_val)
  [303] call render_preset_name 
  to:form_mode::@3

(void()) render_preset_name((byte) render_preset_name::idx)
render_preset_name: scope:[render_preset_name]  from form_mode::@15 form_mode::@19
  [304] (byte) render_preset_name::idx#10 ← phi( form_mode::@15/(byte) render_preset_name::idx#0 form_mode::@19/(byte) render_preset_name::idx#1 )
  [305] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@2
  to:render_preset_name::@3
render_preset_name::@3: scope:[render_preset_name]  from render_preset_name
  [306] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2
  to:render_preset_name::@4
render_preset_name::@4: scope:[render_preset_name]  from render_preset_name::@3
  [307] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@2
  to:render_preset_name::@5
render_preset_name::@5: scope:[render_preset_name]  from render_preset_name::@4
  [308] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@2
  to:render_preset_name::@6
render_preset_name::@6: scope:[render_preset_name]  from render_preset_name::@5
  [309] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@2
  to:render_preset_name::@7
render_preset_name::@7: scope:[render_preset_name]  from render_preset_name::@6
  [310] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@2
  to:render_preset_name::@8
render_preset_name::@8: scope:[render_preset_name]  from render_preset_name::@7
  [311] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@2
  to:render_preset_name::@9
render_preset_name::@9: scope:[render_preset_name]  from render_preset_name::@8
  [312] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@2
  to:render_preset_name::@10
render_preset_name::@10: scope:[render_preset_name]  from render_preset_name::@9
  [313] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@2
  to:render_preset_name::@11
render_preset_name::@11: scope:[render_preset_name]  from render_preset_name::@10
  [314] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@2
  to:render_preset_name::@12
render_preset_name::@12: scope:[render_preset_name]  from render_preset_name::@11
  [315] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@1
  to:render_preset_name::@2
render_preset_name::@1: scope:[render_preset_name]  from render_preset_name::@12
  [316] phi()
  to:render_preset_name::@2
render_preset_name::@2: scope:[render_preset_name]  from render_preset_name render_preset_name::@1 render_preset_name::@10 render_preset_name::@11 render_preset_name::@12 render_preset_name::@3 render_preset_name::@4 render_preset_name::@5 render_preset_name::@6 render_preset_name::@7 render_preset_name::@8 render_preset_name::@9
  [317] (byte*) render_preset_name::name#13 ← phi( render_preset_name/(const byte*) render_preset_name::name#1 render_preset_name::@11/(const byte*) render_preset_name::name#10 render_preset_name::@1/(const byte*) render_preset_name::name#11 render_preset_name::@3/(const byte*) render_preset_name::name#2 render_preset_name::@4/(const byte*) render_preset_name::name#3 render_preset_name::@12/(const byte*) render_preset_name::name#1 render_preset_name::@5/(const byte*) render_preset_name::name#4 render_preset_name::@6/(const byte*) render_preset_name::name#5 render_preset_name::@7/(const byte*) render_preset_name::name#6 render_preset_name::@8/(const byte*) render_preset_name::name#7 render_preset_name::@9/(const byte*) render_preset_name::name#8 render_preset_name::@10/(const byte*) render_preset_name::name#9 )
  [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
  [319] call print_str_at 
  to:render_preset_name::@return
render_preset_name::@return: scope:[render_preset_name]  from render_preset_name::@2
  [320] return 
  to:@return

(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
print_str_at: scope:[print_str_at]  from render_preset_name::@2
  [321] phi()
  to:print_str_at::@1
print_str_at::@1: scope:[print_str_at]  from print_str_at print_str_at::@2
  [322] (byte*) print_str_at::at#2 ← phi( print_str_at/(const byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a print_str_at::@2/(byte*) print_str_at::at#0 )
  [322] (byte*) print_str_at::str#2 ← phi( print_str_at/(byte*) print_str_at::str#1 print_str_at::@2/(byte*) print_str_at::str#0 )
  [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2
  to:print_str_at::@return
print_str_at::@return: scope:[print_str_at]  from print_str_at::@1
  [324] return 
  to:@return
print_str_at::@2: scope:[print_str_at]  from print_str_at::@1
  [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2)
  [326] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2
  [327] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2
  to:print_str_at::@1

(void()) form_render_values()
form_render_values: scope:[form_render_values]  from form_mode::@14 form_mode::@18
  [328] phi()
  to:form_render_values::@1
form_render_values::@1: scope:[form_render_values]  from form_render_values form_render_values::@3
  [329] (byte) form_render_values::idx#2 ← phi( form_render_values/(byte) 0 form_render_values::@3/(byte) form_render_values::idx#1 )
  [330] if((byte) form_render_values::idx#2<(const byte) form_fields_cnt) goto form_render_values::@2
  to:form_render_values::@return
form_render_values::@return: scope:[form_render_values]  from form_render_values::@1
  [331] return 
  to:@return
form_render_values::@2: scope:[form_render_values]  from form_render_values::@1
  [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2
  [333] call form_field_ptr 
  to:form_render_values::@3
form_render_values::@3: scope:[form_render_values]  from form_render_values::@2
  [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_render_values::idx#2))
  [335] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2
  to:form_render_values::@1

(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
form_field_ptr: scope:[form_field_ptr]  from form_control form_render_values::@2
  [336] (byte) form_field_ptr::field_idx#2 ← phi( form_control/(byte) form_field_ptr::field_idx#1 form_render_values::@2/(byte) form_field_ptr::field_idx#0 )
  [337] (byte) form_field_ptr::y#0 ← *((const byte[]) form_fields_y + (byte) form_field_ptr::field_idx#2)
  [338] (word) form_field_ptr::line#0 ← *((const byte[$19]) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo + (byte) form_field_ptr::y#0)
  [339] (byte) form_field_ptr::x#0 ← *((const byte[]) form_fields_x + (byte) form_field_ptr::field_idx#2)
  to:form_field_ptr::@return
form_field_ptr::@return: scope:[form_field_ptr]  from form_field_ptr
  [340] return 
  to:@return

(void()) apply_preset((byte) apply_preset::idx)
apply_preset: scope:[apply_preset]  from form_mode::@7
  [341] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@2
  to:apply_preset::@3
apply_preset::@3: scope:[apply_preset]  from apply_preset
  [342] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2
  to:apply_preset::@4
apply_preset::@4: scope:[apply_preset]  from apply_preset::@3
  [343] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@2
  to:apply_preset::@5
apply_preset::@5: scope:[apply_preset]  from apply_preset::@4
  [344] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@2
  to:apply_preset::@6
apply_preset::@6: scope:[apply_preset]  from apply_preset::@5
  [345] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@2
  to:apply_preset::@7
apply_preset::@7: scope:[apply_preset]  from apply_preset::@6
  [346] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@2
  to:apply_preset::@8
apply_preset::@8: scope:[apply_preset]  from apply_preset::@7
  [347] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@2
  to:apply_preset::@9
apply_preset::@9: scope:[apply_preset]  from apply_preset::@8
  [348] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@2
  to:apply_preset::@10
apply_preset::@10: scope:[apply_preset]  from apply_preset::@9
  [349] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@2
  to:apply_preset::@11
apply_preset::@11: scope:[apply_preset]  from apply_preset::@10
  [350] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@2
  to:apply_preset::@12
apply_preset::@12: scope:[apply_preset]  from apply_preset::@11
  [351] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@1
  to:apply_preset::@2
apply_preset::@1: scope:[apply_preset]  from apply_preset::@12
  [352] phi()
  to:apply_preset::@2
apply_preset::@2: scope:[apply_preset]  from apply_preset apply_preset::@1 apply_preset::@10 apply_preset::@11 apply_preset::@12 apply_preset::@3 apply_preset::@4 apply_preset::@5 apply_preset::@6 apply_preset::@7 apply_preset::@8 apply_preset::@9
  [353] (byte*) apply_preset::preset#15 ← phi( apply_preset/(const byte[]) preset_stdchar apply_preset::@11/(const byte[]) preset_sixsfred2 apply_preset::@1/(const byte[]) preset_8bpppixelcell apply_preset::@3/(const byte[]) preset_ecmchar apply_preset::@4/(const byte[]) preset_stdbm apply_preset::@12/(const byte[]) preset_stdchar apply_preset::@5/(const byte[]) preset_mcbm apply_preset::@6/(const byte[]) preset_hi_stdchar apply_preset::@7/(const byte[]) preset_hi_ecmchar apply_preset::@8/(const byte[]) preset_twoplane apply_preset::@9/(const byte[]) preset_chunky apply_preset::@10/(const byte[]) preset_sixsfred )
  to:apply_preset::@13
apply_preset::@13: scope:[apply_preset]  from apply_preset::@14 apply_preset::@2
  [354] (byte) apply_preset::i#2 ← phi( apply_preset::@2/(byte) 0 apply_preset::@14/(byte) apply_preset::i#1 )
  [355] if((byte) apply_preset::i#2!=(const byte) form_fields_cnt) goto apply_preset::@14
  to:apply_preset::@return
apply_preset::@return: scope:[apply_preset]  from apply_preset::@13
  [356] return 
  to:@return
apply_preset::@14: scope:[apply_preset]  from apply_preset::@13
  [357] *((const byte[]) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2)
  [358] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2
  to:apply_preset::@13

(byte()) form_control()
form_control: scope:[form_control]  from form_mode::@5
  [359] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28
  [360] call form_field_ptr 
  to:form_control::@18
form_control::@18: scope:[form_control]  from form_control
  [361] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21
  [362] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@21
  to:form_control::@1
form_control::@21: scope:[form_control]  from form_control::@18
  [363] phi()
  to:form_control::@1
form_control::@1: scope:[form_control]  from form_control::@18 form_control::@21
  [364] (signed byte) form_cursor_count#15 ← phi( form_control::@21/(signed byte) form_cursor_count#5 form_control::@18/(const signed byte) FORM_CURSOR_BLINK )
  [365] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2
  to:form_control::@7
form_control::@7: scope:[form_control]  from form_control::@1
  [366] (byte~) form_control::$13 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f
  [367] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$13
  to:form_control::@3
form_control::@3: scope:[form_control]  from form_control::@2 form_control::@7
  [368] phi()
  [369] call keyboard_event_scan 
  to:form_control::@19
form_control::@19: scope:[form_control]  from form_control::@3
  [370] phi()
  [371] call keyboard_event_get 
  [372] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
  to:form_control::@20
form_control::@20: scope:[form_control]  from form_control::@19
  [373] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4
  [374] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_DOWN) goto form_control::@4
  to:form_control::@8
form_control::@8: scope:[form_control]  from form_control::@20
  [375] (byte~) form_control::$15 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f
  [376] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$15
  [377] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT
  [378] if((byte~) form_control::$16==(byte) 0) goto form_control::@13
  to:form_control::@9
form_control::@9: scope:[form_control]  from form_control::@8
  [379] (byte) form_field_idx#6 ← -- (byte) form_field_idx#28
  [380] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@22
  to:form_control::@14
form_control::@22: scope:[form_control]  from form_control::@9
  [381] phi()
  to:form_control::@14
form_control::@14: scope:[form_control]  from form_control::@13 form_control::@22 form_control::@23 form_control::@9
  [382] (byte) form_field_idx#31 ← phi( form_control::@22/(byte) form_field_idx#6 form_control::@9/(const byte) form_fields_cnt-(byte) 1 form_control::@23/(byte) form_field_idx#5 form_control::@13/(byte) 0 )
  to:form_control::@return
form_control::@return: scope:[form_control]  from form_control::@14 form_control::@16 form_control::@5 form_control::@6
  [383] (byte) form_field_idx#18 ← phi( form_control::@5/(byte) form_field_idx#28 form_control::@14/(byte) form_field_idx#31 form_control::@16/(byte) form_field_idx#28 form_control::@6/(byte) form_field_idx#28 )
  [383] (signed byte) form_cursor_count#16 ← phi( form_control::@5/(signed byte) form_cursor_count#15 form_control::@14/(const signed byte) FORM_CURSOR_BLINK/(signed byte) 2 form_control::@16/(signed byte) form_cursor_count#15 form_control::@6/(signed byte) form_cursor_count#15 )
  [383] (byte) form_control::return#2 ← phi( form_control::@5/(byte) $ff form_control::@14/(byte) 0 form_control::@16/(byte) 0 form_control::@6/(byte) 0 )
  [384] return 
  to:@return
form_control::@13: scope:[form_control]  from form_control::@8
  [385] (byte) form_field_idx#5 ← ++ (byte) form_field_idx#28
  [386] if((byte) form_field_idx#5!=(const byte) form_fields_cnt) goto form_control::@23
  to:form_control::@14
form_control::@23: scope:[form_control]  from form_control::@13
  [387] phi()
  to:form_control::@14
form_control::@4: scope:[form_control]  from form_control::@20
  [388] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_RIGHT) goto form_control::@5
  to:form_control::@10
form_control::@10: scope:[form_control]  from form_control::@4
  [389] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT
  [390] if((byte~) form_control::$24==(byte) 0) goto form_control::@15
  to:form_control::@11
form_control::@11: scope:[form_control]  from form_control::@10
  [391] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← -- *((const byte[]) form_fields_val + (byte) form_field_idx#28)
  [392] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16
  to:form_control::@12
form_control::@12: scope:[form_control]  from form_control::@11
  [393] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max + (byte) form_field_idx#28)
  to:form_control::@16
form_control::@16: scope:[form_control]  from form_control::@11 form_control::@12 form_control::@15 form_control::@17
  [394] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_field_idx#28))
  to:form_control::@return
form_control::@15: scope:[form_control]  from form_control::@10
  [395] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← ++ *((const byte[]) form_fields_val + (byte) form_field_idx#28)
  [396] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16
  to:form_control::@17
form_control::@17: scope:[form_control]  from form_control::@15
  [397] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← (byte) 0
  to:form_control::@16
form_control::@5: scope:[form_control]  from form_control::@4
  [398] if((byte) form_control::key_event#0!=(const byte) KEY_SPACE) goto form_control::@6
  to:form_control::@return
form_control::@6: scope:[form_control]  from form_control::@5
  [399] phi()
  to:form_control::@return
form_control::@2: scope:[form_control]  from form_control::@1
  [400] (byte~) form_control::$14 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) | (byte) $80
  [401] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$14
  to:form_control::@3

(void()) form_set_screen((byte*) form_set_screen::screen)
form_set_screen: scope:[form_set_screen]  from form_mode::@13
  [402] phi()
  to:form_set_screen::@1
form_set_screen::@1: scope:[form_set_screen]  from form_set_screen form_set_screen::@1
  [403] (byte) form_set_screen::y#2 ← phi( form_set_screen/(byte) 0 form_set_screen::@1/(byte) form_set_screen::y#1 )
  [403] (byte*) form_set_screen::line#2 ← phi( form_set_screen/(const byte*) FORM_SCREEN form_set_screen::@1/(byte*) form_set_screen::line#1 )
  [404] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2
  [405] *((const byte[$19]) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0
  [406] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2
  [407] *((const byte[$19]) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1
  [408] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28
  [409] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2
  [410] if((byte) form_set_screen::y#1!=(byte) $19) goto form_set_screen::@1
  to:form_set_screen::@return
form_set_screen::@return: scope:[form_set_screen]  from form_set_screen::@1
  [411] return 
  to:@return

(void()) print_str_lines((byte*) print_str_lines::str)
print_str_lines: scope:[print_str_lines]  from form_mode::@12 form_mode::@9
  [412] (byte*) print_str_lines::str#5 ← phi( form_mode::@9/(const byte[]) FORM_COLS form_mode::@12/(const byte[]) FORM_TEXT )
  [413] (byte*~) print_char_cursor#73 ← (byte*) print_set_screen::screen#2
  to:print_str_lines::@1
print_str_lines::@1: scope:[print_str_lines]  from print_str_lines print_str_lines::@6
  [414] (byte*) print_line_cursor#2 ← phi( print_str_lines/(byte*) print_set_screen::screen#2 print_str_lines::@6/(byte*) print_line_cursor#22 )
  [414] (byte*) print_char_cursor#22 ← phi( print_str_lines/(byte*~) print_char_cursor#73 print_str_lines::@6/(byte*~) print_char_cursor#74 )
  [414] (byte*) print_str_lines::str#3 ← phi( print_str_lines/(byte*) print_str_lines::str#5 print_str_lines::@6/(byte*) print_str_lines::str#0 )
  [415] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2
  to:print_str_lines::@return
print_str_lines::@return: scope:[print_str_lines]  from print_str_lines::@1
  [416] return 
  to:@return
print_str_lines::@2: scope:[print_str_lines]  from print_str_lines::@1 print_str_lines::@3
  [417] (byte*) print_char_cursor#20 ← phi( print_str_lines::@1/(byte*) print_char_cursor#22 print_str_lines::@3/(byte*) print_char_cursor#38 )
  [417] (byte*) print_str_lines::str#4 ← phi( print_str_lines::@1/(byte*) print_str_lines::str#3 print_str_lines::@3/(byte*) print_str_lines::str#0 )
  [418] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4)
  [419] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4
  [420] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3
  to:print_str_lines::@4
print_str_lines::@4: scope:[print_str_lines]  from print_str_lines::@2
  [421] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0
  [422] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20
  to:print_str_lines::@3
print_str_lines::@3: scope:[print_str_lines]  from print_str_lines::@2 print_str_lines::@4
  [423] (byte*) print_char_cursor#38 ← phi( print_str_lines::@2/(byte*) print_char_cursor#20 print_str_lines::@4/(byte*) print_char_cursor#1 )
  [424] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2
  to:print_str_lines::@5
print_str_lines::@5: scope:[print_str_lines]  from print_str_lines::@3
  [425] phi()
  [426] call print_ln 
  to:print_str_lines::@6
print_str_lines::@6: scope:[print_str_lines]  from print_str_lines::@5
  [427] (byte*~) print_char_cursor#74 ← (byte*) print_line_cursor#22
  to:print_str_lines::@1

(void()) print_ln()
print_ln: scope:[print_ln]  from print_str_lines::@5
  [428] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [429] (byte*) print_line_cursor#21 ← phi( print_ln/(byte*) print_line_cursor#2 print_ln::@1/(byte*) print_line_cursor#22 )
  [430] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28
  [431] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [432] return 
  to:@return

(void()) print_cls()
print_cls: scope:[print_cls]  from form_mode::@11 form_mode::@8
  [433] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2
  [434] call memset 
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls
  [435] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from print_cls
  [436] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [437] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0
  [438] (byte*~) memset::dst#4 ← (byte*)(void*) memset::str#0
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [439] (byte*) memset::dst#2 ← phi( memset::@1/(byte*~) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [440] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset::@2
  [441] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [442] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [443] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2

(void()) print_set_screen((byte*) print_set_screen::screen)
print_set_screen: scope:[print_set_screen]  from form_mode form_mode::@10
  [444] (byte*) print_set_screen::screen#2 ← phi( form_mode/(const byte*) COLS form_mode::@10/(const byte*) FORM_SCREEN )
  to:print_set_screen::@return
print_set_screen::@return: scope:[print_set_screen]  from print_set_screen
  [445] return 
  to:@return

(void()) gfx_init()
gfx_init: scope:[gfx_init]  from main::@3
  [446] phi()
  [447] call gfx_init_screen0 
  to:gfx_init::@1
gfx_init::@1: scope:[gfx_init]  from gfx_init
  [448] phi()
  [449] call gfx_init_screen1 
  to:gfx_init::@2
gfx_init::@2: scope:[gfx_init]  from gfx_init::@1
  [450] phi()
  [451] call gfx_init_screen2 
  to:gfx_init::@3
gfx_init::@3: scope:[gfx_init]  from gfx_init::@2
  [452] phi()
  [453] call gfx_init_screen3 
  to:gfx_init::@4
gfx_init::@4: scope:[gfx_init]  from gfx_init::@3
  [454] phi()
  [455] call gfx_init_screen4 
  to:gfx_init::@5
gfx_init::@5: scope:[gfx_init]  from gfx_init::@4
  [456] phi()
  [457] call gfx_init_charset 
  to:gfx_init::@6
gfx_init::@6: scope:[gfx_init]  from gfx_init::@5
  [458] phi()
  [459] call gfx_init_vic_bitmap 
  to:gfx_init::@7
gfx_init::@7: scope:[gfx_init]  from gfx_init::@6
  [460] phi()
  [461] call gfx_init_plane_8bppchunky 
  to:gfx_init::@8
gfx_init::@8: scope:[gfx_init]  from gfx_init::@7
  [462] phi()
  [463] call gfx_init_plane_charset8 
  to:gfx_init::@9
gfx_init::@9: scope:[gfx_init]  from gfx_init::@8
  [464] phi()
  [465] call gfx_init_plane_horisontal 
  to:gfx_init::@10
gfx_init::@10: scope:[gfx_init]  from gfx_init::@9
  [466] phi()
  [467] call gfx_init_plane_vertical 
  to:gfx_init::@11
gfx_init::@11: scope:[gfx_init]  from gfx_init::@10
  [468] phi()
  [469] call gfx_init_plane_horisontal2 
  to:gfx_init::@12
gfx_init::@12: scope:[gfx_init]  from gfx_init::@11
  [470] phi()
  [471] call gfx_init_plane_vertical2 
  to:gfx_init::@13
gfx_init::@13: scope:[gfx_init]  from gfx_init::@12
  [472] phi()
  [473] call gfx_init_plane_blank 
  to:gfx_init::@14
gfx_init::@14: scope:[gfx_init]  from gfx_init::@13
  [474] phi()
  [475] call gfx_init_plane_full 
  to:gfx_init::@return
gfx_init::@return: scope:[gfx_init]  from gfx_init::@14
  [476] return 
  to:@return

(void()) gfx_init_plane_full()
gfx_init_plane_full: scope:[gfx_init_plane_full]  from gfx_init::@14
  [477] phi()
  [478] call gfx_init_plane_fill 
  to:gfx_init_plane_full::@return
gfx_init_plane_full::@return: scope:[gfx_init_plane_full]  from gfx_init_plane_full
  [479] return 
  to:@return

(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
gfx_init_plane_fill: scope:[gfx_init_plane_fill]  from gfx_init_plane_blank gfx_init_plane_full gfx_init_plane_vertical2
  [480] (byte) gfx_init_plane_fill::fill#6 ← phi( gfx_init_plane_blank/(byte) 0 gfx_init_plane_full/(byte) $ff gfx_init_plane_vertical2/(byte) $1b )
  [480] (dword) gfx_init_plane_fill::plane_addr#3 ← phi( gfx_init_plane_blank/(const dword) PLANE_BLANK gfx_init_plane_full/(const dword) PLANE_FULL gfx_init_plane_vertical2/(const dword) PLANE_VERTICAL2 )
  [481] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2
  [482] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0
  [483] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1
  [484] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
  [485] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@5
gfx_init_plane_fill::@5: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill
  [486] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3
  [487] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff
  [488] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5
  [489] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0
  to:gfx_init_plane_fill::@1
gfx_init_plane_fill::@1: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3 gfx_init_plane_fill::@5
  [490] (byte) gfx_init_plane_fill::by#4 ← phi( gfx_init_plane_fill::@3/(byte) gfx_init_plane_fill::by#1 gfx_init_plane_fill::@5/(byte) 0 )
  [490] (byte*) gfx_init_plane_fill::gfxb#3 ← phi( gfx_init_plane_fill::@3/(byte*) gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::@5/(byte*~) gfx_init_plane_fill::gfxb#6 )
  to:gfx_init_plane_fill::@2
gfx_init_plane_fill::@2: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@1 gfx_init_plane_fill::@2
  [491] (byte) gfx_init_plane_fill::bx#2 ← phi( gfx_init_plane_fill::@1/(byte) 0 gfx_init_plane_fill::@2/(byte) gfx_init_plane_fill::bx#1 )
  [491] (byte*) gfx_init_plane_fill::gfxb#2 ← phi( gfx_init_plane_fill::@1/(byte*) gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::@2/(byte*) gfx_init_plane_fill::gfxb#1 )
  [492] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6
  [493] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2
  [494] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2
  [495] if((byte) gfx_init_plane_fill::bx#1!=(byte) $28) goto gfx_init_plane_fill::@2
  to:gfx_init_plane_fill::@3
gfx_init_plane_fill::@3: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@2
  [496] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4
  [497] if((byte) gfx_init_plane_fill::by#1!=(byte) $c8) goto gfx_init_plane_fill::@1
  to:gfx_init_plane_fill::@4
gfx_init_plane_fill::@4: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@3
  [498] phi()
  [499] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_fill::@return
gfx_init_plane_fill::@return: scope:[gfx_init_plane_fill]  from gfx_init_plane_fill::@4
  [500] return 
  to:@return

(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
dtvSetCpuBankSegment1: scope:[dtvSetCpuBankSegment1]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@4 gfx_init_plane_8bppchunky::@6 gfx_init_plane_charset8 gfx_init_plane_charset8::@8 gfx_init_plane_fill gfx_init_plane_fill::@4 gfx_init_plane_horisontal gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@4 gfx_init_plane_horisontal::@7 gfx_init_plane_vertical gfx_init_plane_vertical::@4
  [501] (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 ← phi( gfx_init_plane_8bppchunky/(byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000 gfx_init_plane_8bppchunky::@4/(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 gfx_init_plane_8bppchunky::@6/(byte)(number) $4000/(number) $4000 gfx_init_plane_charset8/(const byte) gfx_init_plane_charset8::gfxbCpuBank#0 gfx_init_plane_charset8::@8/(byte)(number) $4000/(number) $4000 gfx_init_plane_fill/(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 gfx_init_plane_fill::@4/(byte)(number) $4000/(number) $4000 gfx_init_plane_horisontal/(const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 gfx_init_plane_horisontal2/(const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 gfx_init_plane_horisontal2::@4/(byte)(number) $4000/(number) $4000 gfx_init_plane_horisontal::@7/(byte)(number) $4000/(number) $4000 gfx_init_plane_vertical/(const byte) gfx_init_plane_vertical::gfxbCpuBank#0 gfx_init_plane_vertical::@4/(byte)(number) $4000/(number) $4000 )
  [502] *((const byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13
  asm { .byte$32,$dd lda$ff .byte$32,$00  }
  to:dtvSetCpuBankSegment1::@return
dtvSetCpuBankSegment1::@return: scope:[dtvSetCpuBankSegment1]  from dtvSetCpuBankSegment1
  [504] return 
  to:@return

(void()) gfx_init_plane_blank()
gfx_init_plane_blank: scope:[gfx_init_plane_blank]  from gfx_init::@13
  [505] phi()
  [506] call gfx_init_plane_fill 
  to:gfx_init_plane_blank::@return
gfx_init_plane_blank::@return: scope:[gfx_init_plane_blank]  from gfx_init_plane_blank
  [507] return 
  to:@return

(void()) gfx_init_plane_vertical2()
gfx_init_plane_vertical2: scope:[gfx_init_plane_vertical2]  from gfx_init::@12
  [508] phi()
  [509] call gfx_init_plane_fill 
  to:gfx_init_plane_vertical2::@return
gfx_init_plane_vertical2::@return: scope:[gfx_init_plane_vertical2]  from gfx_init_plane_vertical2
  [510] return 
  to:@return

(void()) gfx_init_plane_horisontal2()
gfx_init_plane_horisontal2: scope:[gfx_init_plane_horisontal2]  from gfx_init::@11
  [511] phi()
  [512] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@1
gfx_init_plane_horisontal2::@1: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2 gfx_init_plane_horisontal2::@3
  [513] (byte*) gfx_init_plane_horisontal2::gfxa#3 ← phi( gfx_init_plane_horisontal2::@3/(byte*) gfx_init_plane_horisontal2::gfxa#1 gfx_init_plane_horisontal2/(byte*)(word) $4000 )
  [513] (byte) gfx_init_plane_horisontal2::ay#4 ← phi( gfx_init_plane_horisontal2::@3/(byte) gfx_init_plane_horisontal2::ay#1 gfx_init_plane_horisontal2/(byte) 0 )
  to:gfx_init_plane_horisontal2::@2
gfx_init_plane_horisontal2::@2: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@1 gfx_init_plane_horisontal2::@2
  [514] (byte) gfx_init_plane_horisontal2::ax#2 ← phi( gfx_init_plane_horisontal2::@1/(byte) 0 gfx_init_plane_horisontal2::@2/(byte) gfx_init_plane_horisontal2::ax#1 )
  [514] (byte*) gfx_init_plane_horisontal2::gfxa#2 ← phi( gfx_init_plane_horisontal2::@1/(byte*) gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::@2/(byte*) gfx_init_plane_horisontal2::gfxa#1 )
  [515] (byte~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1
  [516] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$7 & (byte) 3
  [517] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0)
  [518] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2
  [519] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2
  [520] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte) $28) goto gfx_init_plane_horisontal2::@2
  to:gfx_init_plane_horisontal2::@3
gfx_init_plane_horisontal2::@3: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@2
  [521] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4
  [522] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal2::@1
  to:gfx_init_plane_horisontal2::@4
gfx_init_plane_horisontal2::@4: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@3
  [523] phi()
  [524] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal2::@return
gfx_init_plane_horisontal2::@return: scope:[gfx_init_plane_horisontal2]  from gfx_init_plane_horisontal2::@4
  [525] return 
  to:@return

(void()) gfx_init_plane_vertical()
gfx_init_plane_vertical: scope:[gfx_init_plane_vertical]  from gfx_init::@10
  [526] phi()
  [527] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@1
gfx_init_plane_vertical::@1: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical gfx_init_plane_vertical::@3
  [528] (byte) gfx_init_plane_vertical::by#4 ← phi( gfx_init_plane_vertical::@3/(byte) gfx_init_plane_vertical::by#1 gfx_init_plane_vertical/(byte) 0 )
  [528] (byte*) gfx_init_plane_vertical::gfxb#3 ← phi( gfx_init_plane_vertical::@3/(byte*) gfx_init_plane_vertical::gfxb#1 gfx_init_plane_vertical/(byte*)(word) $4000+(const dword) PLANE_VERTICAL&(word) $3fff )
  to:gfx_init_plane_vertical::@2
gfx_init_plane_vertical::@2: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@1 gfx_init_plane_vertical::@2
  [529] (byte) gfx_init_plane_vertical::bx#2 ← phi( gfx_init_plane_vertical::@1/(byte) 0 gfx_init_plane_vertical::@2/(byte) gfx_init_plane_vertical::bx#1 )
  [529] (byte*) gfx_init_plane_vertical::gfxb#2 ← phi( gfx_init_plane_vertical::@1/(byte*) gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::@2/(byte*) gfx_init_plane_vertical::gfxb#1 )
  [530] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f
  [531] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2
  [532] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2
  [533] if((byte) gfx_init_plane_vertical::bx#1!=(byte) $28) goto gfx_init_plane_vertical::@2
  to:gfx_init_plane_vertical::@3
gfx_init_plane_vertical::@3: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@2
  [534] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4
  [535] if((byte) gfx_init_plane_vertical::by#1!=(byte) $c8) goto gfx_init_plane_vertical::@1
  to:gfx_init_plane_vertical::@4
gfx_init_plane_vertical::@4: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@3
  [536] phi()
  [537] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_vertical::@return
gfx_init_plane_vertical::@return: scope:[gfx_init_plane_vertical]  from gfx_init_plane_vertical::@4
  [538] return 
  to:@return

(void()) gfx_init_plane_horisontal()
gfx_init_plane_horisontal: scope:[gfx_init_plane_horisontal]  from gfx_init::@9
  [539] phi()
  [540] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@1
gfx_init_plane_horisontal::@1: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal gfx_init_plane_horisontal::@6
  [541] (byte*) gfx_init_plane_horisontal::gfxa#6 ← phi( gfx_init_plane_horisontal::@6/(byte*) gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal/(byte*)(word) $4000 )
  [541] (byte) gfx_init_plane_horisontal::ay#4 ← phi( gfx_init_plane_horisontal::@6/(byte) gfx_init_plane_horisontal::ay#1 gfx_init_plane_horisontal/(byte) 0 )
  to:gfx_init_plane_horisontal::@2
gfx_init_plane_horisontal::@2: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@1 gfx_init_plane_horisontal::@4
  [542] (byte) gfx_init_plane_horisontal::ax#2 ← phi( gfx_init_plane_horisontal::@1/(byte) 0 gfx_init_plane_horisontal::@4/(byte) gfx_init_plane_horisontal::ax#1 )
  [542] (byte*) gfx_init_plane_horisontal::gfxa#3 ← phi( gfx_init_plane_horisontal::@1/(byte*) gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::@4/(byte*) gfx_init_plane_horisontal::gfxa#7 )
  [543] (byte~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4
  [544] if((byte~) gfx_init_plane_horisontal::$7==(byte) 0) goto gfx_init_plane_horisontal::@3
  to:gfx_init_plane_horisontal::@5
gfx_init_plane_horisontal::@5: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  [545] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff
  [546] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4
gfx_init_plane_horisontal::@4: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5
  [547] (byte*) gfx_init_plane_horisontal::gfxa#7 ← phi( gfx_init_plane_horisontal::@3/(byte*) gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::@5/(byte*) gfx_init_plane_horisontal::gfxa#2 )
  [548] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2
  [549] if((byte) gfx_init_plane_horisontal::ax#1!=(byte) $28) goto gfx_init_plane_horisontal::@2
  to:gfx_init_plane_horisontal::@6
gfx_init_plane_horisontal::@6: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@4
  [550] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4
  [551] if((byte) gfx_init_plane_horisontal::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal::@1
  to:gfx_init_plane_horisontal::@7
gfx_init_plane_horisontal::@7: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@6
  [552] phi()
  [553] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_horisontal::@return
gfx_init_plane_horisontal::@return: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@7
  [554] return 
  to:@return
gfx_init_plane_horisontal::@3: scope:[gfx_init_plane_horisontal]  from gfx_init_plane_horisontal::@2
  [555] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0
  [556] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3
  to:gfx_init_plane_horisontal::@4

(void()) gfx_init_plane_charset8()
gfx_init_plane_charset8: scope:[gfx_init_plane_charset8]  from gfx_init::@8
  [557] phi()
  [558] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@9
gfx_init_plane_charset8::@9: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8
  [559] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_CHARROM
  to:gfx_init_plane_charset8::@1
gfx_init_plane_charset8::@1: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7 gfx_init_plane_charset8::@9
  [560] (byte) gfx_init_plane_charset8::ch#8 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::ch#1 gfx_init_plane_charset8::@9/(byte) 0 )
  [560] (byte) gfx_init_plane_charset8::col#6 ← phi( gfx_init_plane_charset8::@7/(byte) gfx_init_plane_charset8::col#1 gfx_init_plane_charset8::@9/(byte) 0 )
  [560] (byte*) gfx_init_plane_charset8::gfxa#6 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::gfxa#1 gfx_init_plane_charset8::@9/(byte*)(word) $4000 )
  [560] (byte*) gfx_init_plane_charset8::chargen#3 ← phi( gfx_init_plane_charset8::@7/(byte*) gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::@9/(const byte*) CHARGEN )
  to:gfx_init_plane_charset8::@2
gfx_init_plane_charset8::@2: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@1 gfx_init_plane_charset8::@6
  [561] (byte) gfx_init_plane_charset8::cr#6 ← phi( gfx_init_plane_charset8::@1/(byte) 0 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::cr#1 )
  [561] (byte) gfx_init_plane_charset8::col#5 ← phi( gfx_init_plane_charset8::@1/(byte) gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::@6/(byte) gfx_init_plane_charset8::col#1 )
  [561] (byte*) gfx_init_plane_charset8::gfxa#5 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::gfxa#1 )
  [561] (byte*) gfx_init_plane_charset8::chargen#2 ← phi( gfx_init_plane_charset8::@1/(byte*) gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::@6/(byte*) gfx_init_plane_charset8::chargen#1 )
  [562] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2)
  [563] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2
  to:gfx_init_plane_charset8::@3
gfx_init_plane_charset8::@3: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@2 gfx_init_plane_charset8::@4
  [564] (byte) gfx_init_plane_charset8::cp#2 ← phi( gfx_init_plane_charset8::@2/(byte) 0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::cp#1 )
  [564] (byte) gfx_init_plane_charset8::col#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::col#1 )
  [564] (byte*) gfx_init_plane_charset8::gfxa#2 ← phi( gfx_init_plane_charset8::@2/(byte*) gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::@4/(byte*) gfx_init_plane_charset8::gfxa#1 )
  [564] (byte) gfx_init_plane_charset8::bits#2 ← phi( gfx_init_plane_charset8::@2/(byte) gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::@4/(byte) gfx_init_plane_charset8::bits#1 )
  [565] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80
  [566] if((byte~) gfx_init_plane_charset8::$7==(byte) 0) goto gfx_init_plane_charset8::@4
  to:gfx_init_plane_charset8::@5
gfx_init_plane_charset8::@5: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3
  [567] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2
  to:gfx_init_plane_charset8::@4
gfx_init_plane_charset8::@4: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@3 gfx_init_plane_charset8::@5
  [568] (byte) gfx_init_plane_charset8::c#2 ← phi( gfx_init_plane_charset8::@3/(byte) 0 gfx_init_plane_charset8::@5/(byte~) gfx_init_plane_charset8::c#3 )
  [569] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2
  [570] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2
  [571] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte) 1
  [572] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2
  [573] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2
  [574] if((byte) gfx_init_plane_charset8::cp#1!=(byte) 8) goto gfx_init_plane_charset8::@3
  to:gfx_init_plane_charset8::@6
gfx_init_plane_charset8::@6: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@4
  [575] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6
  [576] if((byte) gfx_init_plane_charset8::cr#1!=(byte) 8) goto gfx_init_plane_charset8::@2
  to:gfx_init_plane_charset8::@7
gfx_init_plane_charset8::@7: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@6
  [577] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8
  [578] if((byte) gfx_init_plane_charset8::ch#1!=(byte) 0) goto gfx_init_plane_charset8::@1
  to:gfx_init_plane_charset8::@8
gfx_init_plane_charset8::@8: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@7
  [579] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO
  [580] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_charset8::@return
gfx_init_plane_charset8::@return: scope:[gfx_init_plane_charset8]  from gfx_init_plane_charset8::@8
  [581] return 
  to:@return

(void()) gfx_init_plane_8bppchunky()
gfx_init_plane_8bppchunky: scope:[gfx_init_plane_8bppchunky]  from gfx_init::@7
  [582] phi()
  [583] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@1
gfx_init_plane_8bppchunky::@1: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky gfx_init_plane_8bppchunky::@5
  [584] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky/++(byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000 )
  [584] (byte) gfx_init_plane_8bppchunky::y#6 ← phi( gfx_init_plane_8bppchunky::@5/(byte) gfx_init_plane_8bppchunky::y#1 gfx_init_plane_8bppchunky/(byte) 0 )
  [584] (byte*) gfx_init_plane_8bppchunky::gfxb#5 ← phi( gfx_init_plane_8bppchunky::@5/(byte*) gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky/(byte*) 16384 )
  to:gfx_init_plane_8bppchunky::@2
gfx_init_plane_8bppchunky::@2: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@1 gfx_init_plane_8bppchunky::@3
  [585] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 ← phi( gfx_init_plane_8bppchunky::@1/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::@3/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 )
  [585] (word) gfx_init_plane_8bppchunky::x#2 ← phi( gfx_init_plane_8bppchunky::@1/(word) 0 gfx_init_plane_8bppchunky::@3/(word) gfx_init_plane_8bppchunky::x#1 )
  [585] (byte*) gfx_init_plane_8bppchunky::gfxb#3 ← phi( gfx_init_plane_8bppchunky::@1/(byte*) gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::@3/(byte*) gfx_init_plane_8bppchunky::gfxb#1 )
  [586] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3
  to:gfx_init_plane_8bppchunky::@4
gfx_init_plane_8bppchunky::@4: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2
  [587] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
  [588] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@7
gfx_init_plane_8bppchunky::@7: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@4
  [589] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4
  to:gfx_init_plane_8bppchunky::@3
gfx_init_plane_8bppchunky::@3: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@2 gfx_init_plane_8bppchunky::@7
  [590] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 ← phi( gfx_init_plane_8bppchunky::@2/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::@7/(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 )
  [590] (byte*) gfx_init_plane_8bppchunky::gfxb#4 ← phi( gfx_init_plane_8bppchunky::@2/(byte*) gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::@7/(byte*) 16384 )
  [591] (word~) gfx_init_plane_8bppchunky::$8 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6
  [592] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$8
  [593] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0
  [594] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4
  [595] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2
  [596] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2
  to:gfx_init_plane_8bppchunky::@5
gfx_init_plane_8bppchunky::@5: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@3
  [597] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6
  [598] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte) $c8) goto gfx_init_plane_8bppchunky::@1
  to:gfx_init_plane_8bppchunky::@6
gfx_init_plane_8bppchunky::@6: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@5
  [599] phi()
  [600] call dtvSetCpuBankSegment1 
  to:gfx_init_plane_8bppchunky::@return
gfx_init_plane_8bppchunky::@return: scope:[gfx_init_plane_8bppchunky]  from gfx_init_plane_8bppchunky::@6
  [601] return 
  to:@return

(void()) gfx_init_vic_bitmap()
gfx_init_vic_bitmap: scope:[gfx_init_vic_bitmap]  from gfx_init::@6
  [602] phi()
  [603] call bitmap_init 
  to:gfx_init_vic_bitmap::@3
gfx_init_vic_bitmap::@3: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap
  [604] phi()
  [605] call bitmap_clear 
  to:gfx_init_vic_bitmap::@1
gfx_init_vic_bitmap::@1: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@3 gfx_init_vic_bitmap::@4
  [606] (byte) gfx_init_vic_bitmap::l#2 ← phi( gfx_init_vic_bitmap::@3/(byte) 0 gfx_init_vic_bitmap::@4/(byte) gfx_init_vic_bitmap::l#1 )
  [607] if((byte) gfx_init_vic_bitmap::l#2<(const byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2
  to:gfx_init_vic_bitmap::@return
gfx_init_vic_bitmap::@return: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  [608] return 
  to:@return
gfx_init_vic_bitmap::@2: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@1
  [609] (byte) bitmap_line::x0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#2)
  [610] (byte) bitmap_line::x1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2)
  [611] (byte) bitmap_line::y0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#2)
  [612] (byte) bitmap_line::y1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2)
  [613] call bitmap_line 
  to:gfx_init_vic_bitmap::@4
gfx_init_vic_bitmap::@4: scope:[gfx_init_vic_bitmap]  from gfx_init_vic_bitmap::@2
  [614] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2
  to:gfx_init_vic_bitmap::@1

(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
bitmap_line: scope:[bitmap_line]  from gfx_init_vic_bitmap::@2
  [615] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1
  to:bitmap_line::@2
bitmap_line::@2: scope:[bitmap_line]  from bitmap_line
  [616] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0
  [617] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7
  to:bitmap_line::@3
bitmap_line::@3: scope:[bitmap_line]  from bitmap_line::@2
  [618] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [619] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8
  to:bitmap_line::@4
bitmap_line::@4: scope:[bitmap_line]  from bitmap_line::@3
  [620] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0
  [621] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
  [622] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0
  [623] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2
  [624] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
  [625] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@return: scope:[bitmap_line]  from bitmap_line::@10 bitmap_line::@12 bitmap_line::@13 bitmap_line::@14 bitmap_line::@4 bitmap_line::@6 bitmap_line::@8 bitmap_line::@9
  [626] return 
  to:@return
bitmap_line::@8: scope:[bitmap_line]  from bitmap_line::@3
  [627] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0
  [628] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0
  [629] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
  [630] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
  [631] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2
  [632] call bitmap_line_xdyi 
  to:bitmap_line::@return
bitmap_line::@7: scope:[bitmap_line]  from bitmap_line::@2
  [633] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [634] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9
  to:bitmap_line::@10
bitmap_line::@10: scope:[bitmap_line]  from bitmap_line::@7
  [635] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0
  [636] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0
  [637] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0
  [638] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1
  [639] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
  [640] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@9: scope:[bitmap_line]  from bitmap_line::@7
  [641] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0
  [642] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0
  [643] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
  [644] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
  [645] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1
  [646] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@1: scope:[bitmap_line]  from bitmap_line
  [647] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0
  [648] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11
  to:bitmap_line::@5
bitmap_line::@5: scope:[bitmap_line]  from bitmap_line::@1
  [649] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0
  [650] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12
  to:bitmap_line::@6
bitmap_line::@6: scope:[bitmap_line]  from bitmap_line::@5
  [651] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0
  [652] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0
  [653] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
  [654] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10
  [655] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
  [656] call bitmap_line_ydxd 
  to:bitmap_line::@return
bitmap_line::@12: scope:[bitmap_line]  from bitmap_line::@5
  [657] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0
  [658] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
  [659] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0
  [660] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
  [661] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10
  [662] call bitmap_line_xdyd 
  to:bitmap_line::@return
bitmap_line::@11: scope:[bitmap_line]  from bitmap_line::@1
  [663] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0
  [664] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13
  to:bitmap_line::@14
bitmap_line::@14: scope:[bitmap_line]  from bitmap_line::@11
  [665] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0
  [666] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0
  [667] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
  [668] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11
  [669] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
  [670] call bitmap_line_ydxi 
  to:bitmap_line::@return
bitmap_line::@13: scope:[bitmap_line]  from bitmap_line::@11
  [671] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0
  [672] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
  [673] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0
  [674] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
  [675] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11
  [676] call bitmap_line_xdyi 
  to:bitmap_line::@return

(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
bitmap_line_xdyi: scope:[bitmap_line_xdyi]  from bitmap_line::@13 bitmap_line::@8
  [677] (byte) bitmap_line_xdyi::x1#6 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::x1#0 bitmap_line::@13/(byte) bitmap_line_xdyi::x1#1 )
  [677] (byte) bitmap_line_xdyi::xd#5 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::xd#0 bitmap_line::@13/(byte) bitmap_line_xdyi::xd#1 )
  [677] (byte) bitmap_line_xdyi::y#5 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::y#0 bitmap_line::@13/(byte) bitmap_line_xdyi::y#1 )
  [677] (byte) bitmap_line_xdyi::x#6 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::x#0 bitmap_line::@13/(byte) bitmap_line_xdyi::x#1 )
  [677] (byte) bitmap_line_xdyi::yd#2 ← phi( bitmap_line::@8/(byte) bitmap_line_xdyi::yd#0 bitmap_line::@13/(byte) bitmap_line_xdyi::yd#1 )
  [678] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1
  to:bitmap_line_xdyi::@1
bitmap_line_xdyi::@1: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi bitmap_line_xdyi::@2
  [679] (byte) bitmap_line_xdyi::e#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::e#0 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::e#6 )
  [679] (byte) bitmap_line_xdyi::y#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::y#5 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::y#6 )
  [679] (byte) bitmap_line_xdyi::x#3 ← phi( bitmap_line_xdyi/(byte) bitmap_line_xdyi::x#6 bitmap_line_xdyi::@2/(byte) bitmap_line_xdyi::x#2 )
  [680] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3
  [681] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3
  [682] call bitmap_plot 
  to:bitmap_line_xdyi::@4
bitmap_line_xdyi::@4: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@1
  [683] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3
  [684] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2
  [685] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2
  to:bitmap_line_xdyi::@3
bitmap_line_xdyi::@3: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@4
  [686] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3
  [687] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5
  to:bitmap_line_xdyi::@2
bitmap_line_xdyi::@2: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4
  [688] (byte) bitmap_line_xdyi::e#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::e#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::e#1 )
  [688] (byte) bitmap_line_xdyi::y#6 ← phi( bitmap_line_xdyi::@3/(byte) bitmap_line_xdyi::y#2 bitmap_line_xdyi::@4/(byte) bitmap_line_xdyi::y#3 )
  [689] (byte~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte) 1
  [690] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1
  to:bitmap_line_xdyi::@return
bitmap_line_xdyi::@return: scope:[bitmap_line_xdyi]  from bitmap_line_xdyi::@2
  [691] return 
  to:@return

(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
bitmap_plot: scope:[bitmap_plot]  from bitmap_line_xdyd::@1 bitmap_line_xdyi::@1 bitmap_line_ydxd::@1 bitmap_line_ydxi::@1
  [692] (byte) bitmap_plot::y#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::y#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::y#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::y#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::y#2 )
  [692] (byte) bitmap_plot::x#4 ← phi( bitmap_line_xdyd::@1/(byte) bitmap_plot::x#1 bitmap_line_xdyi::@1/(byte) bitmap_plot::x#0 bitmap_line_ydxd::@1/(byte) bitmap_plot::x#3 bitmap_line_ydxi::@1/(byte) bitmap_plot::x#2 )
  [693] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4)
  [694] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4)
  [695] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0
  [696] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_plot::x#4)
  [697] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [698] return 
  to:@return

(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
bitmap_line_ydxi: scope:[bitmap_line_ydxi]  from bitmap_line::@14 bitmap_line::@4
  [699] (byte) bitmap_line_ydxi::y1#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y1#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y1#0 )
  [699] (byte) bitmap_line_ydxi::yd#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::yd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::yd#0 )
  [699] (byte) bitmap_line_ydxi::y#6 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::y#1 bitmap_line::@4/(byte) bitmap_line_ydxi::y#0 )
  [699] (byte) bitmap_line_ydxi::x#5 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::x#1 bitmap_line::@4/(byte) bitmap_line_ydxi::x#0 )
  [699] (byte) bitmap_line_ydxi::xd#2 ← phi( bitmap_line::@14/(byte) bitmap_line_ydxi::xd#1 bitmap_line::@4/(byte) bitmap_line_ydxi::xd#0 )
  [700] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1
  to:bitmap_line_ydxi::@1
bitmap_line_ydxi::@1: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi bitmap_line_ydxi::@2
  [701] (byte) bitmap_line_ydxi::e#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::e#0 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::e#6 )
  [701] (byte) bitmap_line_ydxi::y#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::y#6 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::y#2 )
  [701] (byte) bitmap_line_ydxi::x#3 ← phi( bitmap_line_ydxi/(byte) bitmap_line_ydxi::x#5 bitmap_line_ydxi::@2/(byte) bitmap_line_ydxi::x#6 )
  [702] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
  [703] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3
  [704] call bitmap_plot 
  to:bitmap_line_ydxi::@4
bitmap_line_ydxi::@4: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@1
  [705] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3
  [706] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2
  [707] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2
  to:bitmap_line_ydxi::@3
bitmap_line_ydxi::@3: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@4
  [708] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3
  [709] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5
  to:bitmap_line_ydxi::@2
bitmap_line_ydxi::@2: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4
  [710] (byte) bitmap_line_ydxi::e#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::e#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::e#1 )
  [710] (byte) bitmap_line_ydxi::x#6 ← phi( bitmap_line_ydxi::@3/(byte) bitmap_line_ydxi::x#2 bitmap_line_ydxi::@4/(byte) bitmap_line_ydxi::x#3 )
  [711] (byte~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte) 1
  [712] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1
  to:bitmap_line_ydxi::@return
bitmap_line_ydxi::@return: scope:[bitmap_line_ydxi]  from bitmap_line_ydxi::@2
  [713] return 
  to:@return

(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
bitmap_line_xdyd: scope:[bitmap_line_xdyd]  from bitmap_line::@12 bitmap_line::@9
  [714] (byte) bitmap_line_xdyd::x1#6 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::x1#0 bitmap_line::@12/(byte) bitmap_line_xdyd::x1#1 )
  [714] (byte) bitmap_line_xdyd::xd#5 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::xd#0 bitmap_line::@12/(byte) bitmap_line_xdyd::xd#1 )
  [714] (byte) bitmap_line_xdyd::y#5 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::y#0 bitmap_line::@12/(byte) bitmap_line_xdyd::y#1 )
  [714] (byte) bitmap_line_xdyd::x#6 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::x#0 bitmap_line::@12/(byte) bitmap_line_xdyd::x#1 )
  [714] (byte) bitmap_line_xdyd::yd#2 ← phi( bitmap_line::@9/(byte) bitmap_line_xdyd::yd#0 bitmap_line::@12/(byte) bitmap_line_xdyd::yd#1 )
  [715] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1
  to:bitmap_line_xdyd::@1
bitmap_line_xdyd::@1: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd bitmap_line_xdyd::@2
  [716] (byte) bitmap_line_xdyd::e#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::e#0 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::e#6 )
  [716] (byte) bitmap_line_xdyd::y#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::y#5 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::y#6 )
  [716] (byte) bitmap_line_xdyd::x#3 ← phi( bitmap_line_xdyd/(byte) bitmap_line_xdyd::x#6 bitmap_line_xdyd::@2/(byte) bitmap_line_xdyd::x#2 )
  [717] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3
  [718] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3
  [719] call bitmap_plot 
  to:bitmap_line_xdyd::@4
bitmap_line_xdyd::@4: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@1
  [720] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3
  [721] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2
  [722] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2
  to:bitmap_line_xdyd::@3
bitmap_line_xdyd::@3: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@4
  [723] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3
  [724] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5
  to:bitmap_line_xdyd::@2
bitmap_line_xdyd::@2: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4
  [725] (byte) bitmap_line_xdyd::e#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::e#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::e#1 )
  [725] (byte) bitmap_line_xdyd::y#6 ← phi( bitmap_line_xdyd::@3/(byte) bitmap_line_xdyd::y#2 bitmap_line_xdyd::@4/(byte) bitmap_line_xdyd::y#3 )
  [726] (byte~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte) 1
  [727] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1
  to:bitmap_line_xdyd::@return
bitmap_line_xdyd::@return: scope:[bitmap_line_xdyd]  from bitmap_line_xdyd::@2
  [728] return 
  to:@return

(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
bitmap_line_ydxd: scope:[bitmap_line_ydxd]  from bitmap_line::@10 bitmap_line::@6
  [729] (byte) bitmap_line_ydxd::y1#6 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y1#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y1#1 )
  [729] (byte) bitmap_line_ydxd::yd#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::yd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::yd#1 )
  [729] (byte) bitmap_line_ydxd::y#7 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::y#0 bitmap_line::@6/(byte) bitmap_line_ydxd::y#1 )
  [729] (byte) bitmap_line_ydxd::x#5 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::x#0 bitmap_line::@6/(byte) bitmap_line_ydxd::x#1 )
  [729] (byte) bitmap_line_ydxd::xd#2 ← phi( bitmap_line::@10/(byte) bitmap_line_ydxd::xd#0 bitmap_line::@6/(byte) bitmap_line_ydxd::xd#1 )
  [730] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1
  to:bitmap_line_ydxd::@1
bitmap_line_ydxd::@1: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd bitmap_line_ydxd::@2
  [731] (byte) bitmap_line_ydxd::e#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::e#0 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::e#6 )
  [731] (byte) bitmap_line_ydxd::y#2 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::y#7 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::y#3 )
  [731] (byte) bitmap_line_ydxd::x#3 ← phi( bitmap_line_ydxd/(byte) bitmap_line_ydxd::x#5 bitmap_line_ydxd::@2/(byte) bitmap_line_ydxd::x#6 )
  [732] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
  [733] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2
  [734] call bitmap_plot 
  to:bitmap_line_ydxd::@4
bitmap_line_ydxd::@4: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@1
  [735] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2
  [736] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2
  [737] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2
  to:bitmap_line_ydxd::@3
bitmap_line_ydxd::@3: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@4
  [738] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3
  [739] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5
  to:bitmap_line_ydxd::@2
bitmap_line_ydxd::@2: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4
  [740] (byte) bitmap_line_ydxd::e#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::e#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::e#1 )
  [740] (byte) bitmap_line_ydxd::x#6 ← phi( bitmap_line_ydxd::@3/(byte) bitmap_line_ydxd::x#2 bitmap_line_ydxd::@4/(byte) bitmap_line_ydxd::x#3 )
  [741] (byte~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte) 1
  [742] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1
  to:bitmap_line_ydxd::@return
bitmap_line_ydxd::@return: scope:[bitmap_line_ydxd]  from bitmap_line_ydxd::@2
  [743] return 
  to:@return

(void()) bitmap_clear()
bitmap_clear: scope:[bitmap_clear]  from gfx_init_vic_bitmap::@3
  [744] (word) bitmap_clear::bitmap#0 ← *((const byte[$100]) bitmap_plot_xhi) w= *((const byte[$100]) bitmap_plot_xlo)
  [745] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [746] (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte) 0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  [746] (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*~) bitmap_clear::bitmap#5 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [747] (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte) 0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  [747] (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  [748] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0
  [749] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  [750] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2
  [751] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [752] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4
  [753] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [754] return 
  to:@return

(void()) bitmap_init((byte*) bitmap_init::bitmap)
bitmap_init: scope:[bitmap_init]  from gfx_init_vic_bitmap
  [755] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [756] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [756] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [757] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8
  [758] *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0
  [759] *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP
  [760] *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [761] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1
  [762] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [763] phi()
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [764] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte) $80 )
  [765] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [766] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [767] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/(byte*) 0 bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [767] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [768] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7
  [769] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2
  [770] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$10 | (byte~) bitmap_init::$7
  [771] *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8
  [772] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2
  [773] *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9
  [774] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [775] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [776] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [777] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [778] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [779] return 
  to:@return

(void()) gfx_init_charset()
gfx_init_charset: scope:[gfx_init_charset]  from gfx_init::@5
  [780] *((const byte*) PROCPORT) ← (byte) $32
  to:gfx_init_charset::@1
gfx_init_charset::@1: scope:[gfx_init_charset]  from gfx_init_charset gfx_init_charset::@3
  [781] (byte) gfx_init_charset::c#4 ← phi( gfx_init_charset/(byte) 0 gfx_init_charset::@3/(byte) gfx_init_charset::c#1 )
  [781] (byte*) gfx_init_charset::charset#3 ← phi( gfx_init_charset/(const byte*) VIC_CHARSET_ROM gfx_init_charset::@3/(byte*) gfx_init_charset::charset#1 )
  [781] (byte*) gfx_init_charset::chargen#3 ← phi( gfx_init_charset/(const byte*) CHARGEN gfx_init_charset::@3/(byte*) gfx_init_charset::chargen#1 )
  to:gfx_init_charset::@2
gfx_init_charset::@2: scope:[gfx_init_charset]  from gfx_init_charset::@1 gfx_init_charset::@2
  [782] (byte) gfx_init_charset::l#2 ← phi( gfx_init_charset::@1/(byte) 0 gfx_init_charset::@2/(byte) gfx_init_charset::l#1 )
  [782] (byte*) gfx_init_charset::charset#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::charset#3 gfx_init_charset::@2/(byte*) gfx_init_charset::charset#1 )
  [782] (byte*) gfx_init_charset::chargen#2 ← phi( gfx_init_charset::@1/(byte*) gfx_init_charset::chargen#3 gfx_init_charset::@2/(byte*) gfx_init_charset::chargen#1 )
  [783] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2)
  [784] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2
  [785] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2
  [786] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2
  [787] if((byte) gfx_init_charset::l#1!=(byte) 8) goto gfx_init_charset::@2
  to:gfx_init_charset::@3
gfx_init_charset::@3: scope:[gfx_init_charset]  from gfx_init_charset::@2
  [788] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4
  [789] if((byte) gfx_init_charset::c#1!=(byte) 0) goto gfx_init_charset::@1
  to:gfx_init_charset::@4
gfx_init_charset::@4: scope:[gfx_init_charset]  from gfx_init_charset::@3
  [790] *((const byte*) PROCPORT) ← (byte) $37
  to:gfx_init_charset::@return
gfx_init_charset::@return: scope:[gfx_init_charset]  from gfx_init_charset::@4
  [791] return 
  to:@return

(void()) gfx_init_screen4()
gfx_init_screen4: scope:[gfx_init_screen4]  from gfx_init::@4
  [792] phi()
  to:gfx_init_screen4::@1
gfx_init_screen4::@1: scope:[gfx_init_screen4]  from gfx_init_screen4 gfx_init_screen4::@3
  [793] (byte) gfx_init_screen4::cy#4 ← phi( gfx_init_screen4/(byte) 0 gfx_init_screen4::@3/(byte) gfx_init_screen4::cy#1 )
  [793] (byte*) gfx_init_screen4::ch#3 ← phi( gfx_init_screen4/(const byte*) VIC_SCREEN4 gfx_init_screen4::@3/(byte*) gfx_init_screen4::ch#1 )
  to:gfx_init_screen4::@2
gfx_init_screen4::@2: scope:[gfx_init_screen4]  from gfx_init_screen4::@1 gfx_init_screen4::@2
  [794] (byte) gfx_init_screen4::cx#2 ← phi( gfx_init_screen4::@1/(byte) 0 gfx_init_screen4::@2/(byte) gfx_init_screen4::cx#1 )
  [794] (byte*) gfx_init_screen4::ch#2 ← phi( gfx_init_screen4::@1/(byte*) gfx_init_screen4::ch#3 gfx_init_screen4::@2/(byte*) gfx_init_screen4::ch#1 )
  [795] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0
  [796] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2
  [797] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2
  [798] if((byte) gfx_init_screen4::cx#1!=(byte) $28) goto gfx_init_screen4::@2
  to:gfx_init_screen4::@3
gfx_init_screen4::@3: scope:[gfx_init_screen4]  from gfx_init_screen4::@2
  [799] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4
  [800] if((byte) gfx_init_screen4::cy#1!=(byte) $19) goto gfx_init_screen4::@1
  to:gfx_init_screen4::@return
gfx_init_screen4::@return: scope:[gfx_init_screen4]  from gfx_init_screen4::@3
  [801] return 
  to:@return

(void()) gfx_init_screen3()
gfx_init_screen3: scope:[gfx_init_screen3]  from gfx_init::@3
  [802] phi()
  to:gfx_init_screen3::@1
gfx_init_screen3::@1: scope:[gfx_init_screen3]  from gfx_init_screen3 gfx_init_screen3::@3
  [803] (byte*) gfx_init_screen3::ch#3 ← phi( gfx_init_screen3/(const byte*) VIC_SCREEN3 gfx_init_screen3::@3/(byte*) gfx_init_screen3::ch#1 )
  [803] (byte) gfx_init_screen3::cy#4 ← phi( gfx_init_screen3/(byte) 0 gfx_init_screen3::@3/(byte) gfx_init_screen3::cy#1 )
  to:gfx_init_screen3::@2
gfx_init_screen3::@2: scope:[gfx_init_screen3]  from gfx_init_screen3::@1 gfx_init_screen3::@2
  [804] (byte*) gfx_init_screen3::ch#2 ← phi( gfx_init_screen3::@1/(byte*) gfx_init_screen3::ch#3 gfx_init_screen3::@2/(byte*) gfx_init_screen3::ch#1 )
  [804] (byte) gfx_init_screen3::cx#2 ← phi( gfx_init_screen3::@1/(byte) 0 gfx_init_screen3::@2/(byte) gfx_init_screen3::cx#1 )
  [805] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3
  [806] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4
  [807] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3
  [808] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2
  [809] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3
  [810] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2
  [811] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2
  [812] if((byte) gfx_init_screen3::cx#1!=(byte) $28) goto gfx_init_screen3::@2
  to:gfx_init_screen3::@3
gfx_init_screen3::@3: scope:[gfx_init_screen3]  from gfx_init_screen3::@2
  [813] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4
  [814] if((byte) gfx_init_screen3::cy#1!=(byte) $19) goto gfx_init_screen3::@1
  to:gfx_init_screen3::@return
gfx_init_screen3::@return: scope:[gfx_init_screen3]  from gfx_init_screen3::@3
  [815] return 
  to:@return

(void()) gfx_init_screen2()
gfx_init_screen2: scope:[gfx_init_screen2]  from gfx_init::@2
  [816] phi()
  to:gfx_init_screen2::@1
gfx_init_screen2::@1: scope:[gfx_init_screen2]  from gfx_init_screen2 gfx_init_screen2::@3
  [817] (byte*) gfx_init_screen2::ch#3 ← phi( gfx_init_screen2/(const byte*) VIC_SCREEN2 gfx_init_screen2::@3/(byte*) gfx_init_screen2::ch#1 )
  [817] (byte) gfx_init_screen2::cy#4 ← phi( gfx_init_screen2/(byte) 0 gfx_init_screen2::@3/(byte) gfx_init_screen2::cy#1 )
  to:gfx_init_screen2::@2
gfx_init_screen2::@2: scope:[gfx_init_screen2]  from gfx_init_screen2::@1 gfx_init_screen2::@2
  [818] (byte*) gfx_init_screen2::ch#2 ← phi( gfx_init_screen2::@1/(byte*) gfx_init_screen2::ch#3 gfx_init_screen2::@2/(byte*) gfx_init_screen2::ch#1 )
  [818] (byte) gfx_init_screen2::cx#2 ← phi( gfx_init_screen2::@1/(byte) 0 gfx_init_screen2::@2/(byte) gfx_init_screen2::cx#1 )
  [819] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4
  [820] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte) $f
  [821] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0
  [822] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4
  [823] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0
  [824] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4
  [825] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2
  [826] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2
  [827] if((byte) gfx_init_screen2::cx#1!=(byte) $28) goto gfx_init_screen2::@2
  to:gfx_init_screen2::@3
gfx_init_screen2::@3: scope:[gfx_init_screen2]  from gfx_init_screen2::@2
  [828] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4
  [829] if((byte) gfx_init_screen2::cy#1!=(byte) $19) goto gfx_init_screen2::@1
  to:gfx_init_screen2::@return
gfx_init_screen2::@return: scope:[gfx_init_screen2]  from gfx_init_screen2::@3
  [830] return 
  to:@return

(void()) gfx_init_screen1()
gfx_init_screen1: scope:[gfx_init_screen1]  from gfx_init::@1
  [831] phi()
  to:gfx_init_screen1::@1
gfx_init_screen1::@1: scope:[gfx_init_screen1]  from gfx_init_screen1 gfx_init_screen1::@3
  [832] (byte*) gfx_init_screen1::ch#3 ← phi( gfx_init_screen1/(const byte*) VIC_SCREEN1 gfx_init_screen1::@3/(byte*) gfx_init_screen1::ch#1 )
  [832] (byte) gfx_init_screen1::cy#4 ← phi( gfx_init_screen1/(byte) 0 gfx_init_screen1::@3/(byte) gfx_init_screen1::cy#1 )
  to:gfx_init_screen1::@2
gfx_init_screen1::@2: scope:[gfx_init_screen1]  from gfx_init_screen1::@1 gfx_init_screen1::@2
  [833] (byte*) gfx_init_screen1::ch#2 ← phi( gfx_init_screen1::@1/(byte*) gfx_init_screen1::ch#3 gfx_init_screen1::@2/(byte*) gfx_init_screen1::ch#1 )
  [833] (byte) gfx_init_screen1::cx#2 ← phi( gfx_init_screen1::@1/(byte) 0 gfx_init_screen1::@2/(byte) gfx_init_screen1::cx#1 )
  [834] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4
  [835] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f
  [836] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1
  [837] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2
  [838] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2
  [839] if((byte) gfx_init_screen1::cx#1!=(byte) $28) goto gfx_init_screen1::@2
  to:gfx_init_screen1::@3
gfx_init_screen1::@3: scope:[gfx_init_screen1]  from gfx_init_screen1::@2
  [840] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4
  [841] if((byte) gfx_init_screen1::cy#1!=(byte) $19) goto gfx_init_screen1::@1
  to:gfx_init_screen1::@return
gfx_init_screen1::@return: scope:[gfx_init_screen1]  from gfx_init_screen1::@3
  [842] return 
  to:@return

(void()) gfx_init_screen0()
gfx_init_screen0: scope:[gfx_init_screen0]  from gfx_init
  [843] phi()
  to:gfx_init_screen0::@1
gfx_init_screen0::@1: scope:[gfx_init_screen0]  from gfx_init_screen0 gfx_init_screen0::@3
  [844] (byte*) gfx_init_screen0::ch#3 ← phi( gfx_init_screen0/(const byte*) VIC_SCREEN0 gfx_init_screen0::@3/(byte*) gfx_init_screen0::ch#1 )
  [844] (byte) gfx_init_screen0::cy#4 ← phi( gfx_init_screen0/(byte) 0 gfx_init_screen0::@3/(byte) gfx_init_screen0::cy#1 )
  to:gfx_init_screen0::@2
gfx_init_screen0::@2: scope:[gfx_init_screen0]  from gfx_init_screen0::@1 gfx_init_screen0::@2
  [845] (byte*) gfx_init_screen0::ch#2 ← phi( gfx_init_screen0::@1/(byte*) gfx_init_screen0::ch#3 gfx_init_screen0::@2/(byte*) gfx_init_screen0::ch#1 )
  [845] (byte) gfx_init_screen0::cx#2 ← phi( gfx_init_screen0::@1/(byte) 0 gfx_init_screen0::@2/(byte) gfx_init_screen0::cx#1 )
  [846] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f
  [847] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4
  [848] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f
  [849] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2
  [850] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3
  [851] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2
  [852] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2
  [853] if((byte) gfx_init_screen0::cx#1!=(byte) $28) goto gfx_init_screen0::@2
  to:gfx_init_screen0::@3
gfx_init_screen0::@3: scope:[gfx_init_screen0]  from gfx_init_screen0::@2
  [854] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4
  [855] if((byte) gfx_init_screen0::cy#1!=(byte) $19) goto gfx_init_screen0::@1
  to:gfx_init_screen0::@return
gfx_init_screen0::@return: scope:[gfx_init_screen0]  from gfx_init_screen0::@3
  [856] return 
  to:@return

(void()) keyboard_init()
keyboard_init: scope:[keyboard_init]  from main
  [857] *((const byte*) CIA1_PORT_A_DDR) ← (byte) $ff
  [858] *((const byte*) CIA1_PORT_B_DDR) ← (byte) 0
  to:keyboard_init::@return
keyboard_init::@return: scope:[keyboard_init]  from keyboard_init
  [859] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) apply_preset((byte) apply_preset::idx)
(byte) apply_preset::i
(byte) apply_preset::i#1 2002.0
(byte) apply_preset::i#2 1668.3333333333335
(byte) apply_preset::idx
(byte) apply_preset::idx#0 11.18181818181818
(byte*) apply_preset::preset
(byte*) apply_preset::preset#15 200.2
(void()) bitmap_clear()
(byte*) bitmap_clear::bitmap
(word) bitmap_clear::bitmap#0 2.0
(byte*) bitmap_clear::bitmap#1 42.599999999999994
(byte*) bitmap_clear::bitmap#2 157.0
(byte*) bitmap_clear::bitmap#3 24.0
(byte*~) bitmap_clear::bitmap#5 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 151.5
(byte) bitmap_clear::x#2 67.33333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 16.5
(byte) bitmap_clear::y#4 3.6666666666666665
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0 22.0
(byte~) bitmap_init::$10 5.5
(byte~) bitmap_init::$7 22.0
(byte~) bitmap_init::$8 22.0
(byte~) bitmap_init::$9 22.0
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 11.0
(byte) bitmap_init::bits#3 6.6000000000000005
(byte) bitmap_init::bits#4 7.333333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 16.5
(byte) bitmap_init::x#2 7.333333333333334
(byte) bitmap_init::y
(byte) bitmap_init::y#1 16.5
(byte) bitmap_init::y#2 5.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 22.0
(byte*) bitmap_init::yoffs#2 6.875
(byte*) bitmap_init::yoffs#4 11.0
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0 1.260869565217391
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0 1.3181818181818181
(byte) bitmap_line::xd
(byte) bitmap_line::xd#1 0.7
(byte) bitmap_line::xd#2 0.7
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0 1.6666666666666674
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0 1.7500000000000007
(byte) bitmap_line::yd
(byte) bitmap_line::yd#1 0.8888888888888888
(byte) bitmap_line::yd#10 0.8888888888888888
(byte) bitmap_line::yd#11 0.8888888888888888
(byte) bitmap_line::yd#2 0.8888888888888888
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte~) bitmap_line_xdyd::$6 202.0
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0 4.0
(byte) bitmap_line_xdyd::e#1 134.66666666666666
(byte) bitmap_line_xdyd::e#2 202.0
(byte) bitmap_line_xdyd::e#3 40.8
(byte) bitmap_line_xdyd::e#6 101.0
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0 0.8
(byte) bitmap_line_xdyd::x#1 0.8
(byte) bitmap_line_xdyd::x#2 37.875
(byte) bitmap_line_xdyd::x#3 76.25
(byte) bitmap_line_xdyd::x#6 3.0
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0 1.3333333333333333
(byte) bitmap_line_xdyd::x1#1 1.3333333333333333
(byte) bitmap_line_xdyd::x1#6 7.5
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0 2.0
(byte) bitmap_line_xdyd::xd#1 2.0
(byte) bitmap_line_xdyd::xd#5 14.714285714285715
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0 1.0
(byte) bitmap_line_xdyd::y#1 1.0
(byte) bitmap_line_xdyd::y#2 101.0
(byte) bitmap_line_xdyd::y#3 58.00000000000001
(byte) bitmap_line_xdyd::y#5 3.0
(byte) bitmap_line_xdyd::y#6 101.0
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0 4.0
(byte) bitmap_line_xdyd::yd#1 4.0
(byte) bitmap_line_xdyd::yd#2 7.642857142857143
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte~) bitmap_line_xdyi::$6 202.0
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0 4.0
(byte) bitmap_line_xdyi::e#1 134.66666666666666
(byte) bitmap_line_xdyi::e#2 202.0
(byte) bitmap_line_xdyi::e#3 40.8
(byte) bitmap_line_xdyi::e#6 101.0
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0 0.8
(byte) bitmap_line_xdyi::x#1 0.8
(byte) bitmap_line_xdyi::x#2 37.875
(byte) bitmap_line_xdyi::x#3 76.25
(byte) bitmap_line_xdyi::x#6 3.0
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0 1.3333333333333333
(byte) bitmap_line_xdyi::x1#1 1.3333333333333333
(byte) bitmap_line_xdyi::x1#6 7.5
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0 2.0
(byte) bitmap_line_xdyi::xd#1 2.0
(byte) bitmap_line_xdyi::xd#5 14.714285714285715
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0 1.0
(byte) bitmap_line_xdyi::y#1 1.0
(byte) bitmap_line_xdyi::y#2 101.0
(byte) bitmap_line_xdyi::y#3 58.00000000000001
(byte) bitmap_line_xdyi::y#5 3.0
(byte) bitmap_line_xdyi::y#6 101.0
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0 4.0
(byte) bitmap_line_xdyi::yd#1 4.0
(byte) bitmap_line_xdyi::yd#2 7.642857142857143
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte~) bitmap_line_ydxd::$6 202.0
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0 4.0
(byte) bitmap_line_ydxd::e#1 134.66666666666666
(byte) bitmap_line_ydxd::e#2 202.0
(byte) bitmap_line_ydxd::e#3 40.8
(byte) bitmap_line_ydxd::e#6 101.0
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0 1.0
(byte) bitmap_line_ydxd::x#1 1.0
(byte) bitmap_line_ydxd::x#2 101.0
(byte) bitmap_line_ydxd::x#3 58.00000000000001
(byte) bitmap_line_ydxd::x#5 3.0
(byte) bitmap_line_ydxd::x#6 101.0
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0 4.0
(byte) bitmap_line_ydxd::xd#1 4.0
(byte) bitmap_line_ydxd::xd#2 7.642857142857143
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0 0.8
(byte) bitmap_line_ydxd::y#1 0.8
(byte) bitmap_line_ydxd::y#2 76.25
(byte) bitmap_line_ydxd::y#3 37.875
(byte) bitmap_line_ydxd::y#7 3.0
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0 1.3333333333333333
(byte) bitmap_line_ydxd::y1#1 1.3333333333333333
(byte) bitmap_line_ydxd::y1#6 7.5
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0 2.0
(byte) bitmap_line_ydxd::yd#1 2.0
(byte) bitmap_line_ydxd::yd#5 14.714285714285715
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte~) bitmap_line_ydxi::$6 202.0
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0 4.0
(byte) bitmap_line_ydxi::e#1 134.66666666666666
(byte) bitmap_line_ydxi::e#2 202.0
(byte) bitmap_line_ydxi::e#3 40.8
(byte) bitmap_line_ydxi::e#6 101.0
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0 1.0
(byte) bitmap_line_ydxi::x#1 1.0
(byte) bitmap_line_ydxi::x#2 101.0
(byte) bitmap_line_ydxi::x#3 58.00000000000001
(byte) bitmap_line_ydxi::x#5 3.0
(byte) bitmap_line_ydxi::x#6 101.0
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0 4.0
(byte) bitmap_line_ydxi::xd#1 4.0
(byte) bitmap_line_ydxi::xd#2 7.642857142857143
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0 0.8
(byte) bitmap_line_ydxi::y#1 0.8
(byte) bitmap_line_ydxi::y#2 37.875
(byte) bitmap_line_ydxi::y#3 76.25
(byte) bitmap_line_ydxi::y#6 3.0
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0 1.3333333333333333
(byte) bitmap_line_ydxi::y1#1 1.3333333333333333
(byte) bitmap_line_ydxi::y1#6 7.5
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0 2.0
(byte) bitmap_line_ydxi::yd#1 2.0
(byte) bitmap_line_ydxi::yd#5 14.714285714285715
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(byte~) bitmap_plot::$1 4.0
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 1.0
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0 2.0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0 4.0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0 101.0
(byte) bitmap_plot::x#1 101.0
(byte) bitmap_plot::x#2 101.0
(byte) bitmap_plot::x#3 101.0
(byte) bitmap_plot::x#4 102.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 202.0
(byte) bitmap_plot::y#1 202.0
(byte) bitmap_plot::y#2 202.0
(byte) bitmap_plot::y#3 202.0
(byte) bitmap_plot::y#4 204.0
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 202.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 4.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#13 105.0
(byte()) form_control()
(byte~) form_control::$13 4.0
(byte~) form_control::$14 4.0
(byte~) form_control::$15 4.0
(byte~) form_control::$16 4.0
(byte~) form_control::$24 4.0
(byte*) form_control::field
(byte) form_control::key_event
(byte) form_control::key_event#0 2.6666666666666665
(byte) form_control::return
(byte) form_control::return#0 2002.0
(byte) form_control::return#2 333.6666666666667
(signed byte) form_cursor_count
(signed byte) form_cursor_count#1 0.3333333333333333
(signed byte) form_cursor_count#15 0.4
(signed byte) form_cursor_count#16 65.82352941176472
(signed byte) form_cursor_count#21 221.2
(signed byte) form_cursor_count#5 2.0
(byte) form_field_idx
(byte) form_field_idx#1 0.3333333333333333
(byte) form_field_idx#18 65.94117647058826
(byte) form_field_idx#28 30.75675675675673
(byte) form_field_idx#31 6.0
(byte) form_field_idx#5 2.0
(byte) form_field_idx#6 2.0
(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
(byte*) form_field_ptr::field
(byte) form_field_ptr::field_idx
(byte) form_field_ptr::field_idx#0 2002.0
(byte) form_field_ptr::field_idx#1 4.0
(byte) form_field_ptr::field_idx#2 335.66666666666674
(byte*) form_field_ptr::line
(word) form_field_ptr::line#0 0.06451612903225806
(byte*) form_field_ptr::return
(byte) form_field_ptr::x
(byte) form_field_ptr::x#0 33.90000000000003
(byte) form_field_ptr::y
(byte) form_field_ptr::y#0 6.0
(void()) form_mode()
(byte~) form_mode::$36 2002.0
(byte) form_mode::i
(byte) form_mode::i#1 151.5
(byte) form_mode::i#2 202.0
(byte) form_mode::preset_current
(byte) form_mode::preset_current#0 4.0
(byte) form_mode::preset_current#1 50.5
(byte) form_mode::preset_current#6 388.25
(void()) form_render_values()
(byte*) form_render_values::field
(byte) form_render_values::idx
(byte) form_render_values::idx#1 2002.0
(byte) form_render_values::idx#2 1001.0
(void()) form_set_screen((byte*) form_set_screen::screen)
(byte~) form_set_screen::$0 202.0
(byte~) form_set_screen::$1 202.0
(byte*) form_set_screen::line
(byte*) form_set_screen::line#1 67.33333333333333
(byte*) form_set_screen::line#2 80.8
(byte*) form_set_screen::screen
(byte) form_set_screen::y
(byte) form_set_screen::y#1 151.5
(byte) form_set_screen::y#2 67.33333333333333
(dword()) get_plane((byte) get_plane::idx)
(byte) get_plane::idx
(byte) get_plane::idx#0 4.0
(byte) get_plane::idx#1 4.0
(byte) get_plane::idx#10 2.285714285714285
(dword) get_plane::return
(dword) get_plane::return#14 1.0
(dword) get_plane::return#16 4.0
(dword) get_plane::return#17 4.0
(byte*()) get_vic_charset((byte) get_vic_charset::idx)
(byte) get_vic_charset::idx
(byte) get_vic_charset::idx#0 3.0
(byte*) get_vic_charset::return
(byte*) get_vic_charset::return#2 0.6666666666666666
(byte*) get_vic_charset::return#4 4.0
(byte*()) get_vic_screen((byte) get_vic_screen::idx)
(byte) get_vic_screen::idx
(byte) get_vic_screen::idx#0 4.0
(byte) get_vic_screen::idx#1 4.0
(byte) get_vic_screen::idx#2 2.8
(byte*) get_vic_screen::return
(byte*) get_vic_screen::return#10 4.0
(byte*) get_vic_screen::return#11 4.0
(byte*) get_vic_screen::return#5 1.0
(void()) gfx_init()
(void()) gfx_init_charset()
(byte) gfx_init_charset::c
(byte) gfx_init_charset::c#1 16.5
(byte) gfx_init_charset::c#4 3.142857142857143
(byte*) gfx_init_charset::chargen
(byte*) gfx_init_charset::chargen#1 42.599999999999994
(byte*) gfx_init_charset::chargen#2 104.66666666666666
(byte*) gfx_init_charset::chargen#3 22.0
(byte*) gfx_init_charset::charset
(byte*) gfx_init_charset::charset#1 35.5
(byte*) gfx_init_charset::charset#2 157.0
(byte*) gfx_init_charset::charset#3 22.0
(byte) gfx_init_charset::l
(byte) gfx_init_charset::l#1 151.5
(byte) gfx_init_charset::l#2 50.5
(void()) gfx_init_plane_8bppchunky()
(word~) gfx_init_plane_8bppchunky::$8 101.0
(byte) gfx_init_plane_8bppchunky::c
(byte) gfx_init_plane_8bppchunky::c#0 202.0
(byte*) gfx_init_plane_8bppchunky::gfxb
(byte*) gfx_init_plane_8bppchunky::gfxb#1 42.599999999999994
(byte*) gfx_init_plane_8bppchunky::gfxb#3 157.0
(byte*) gfx_init_plane_8bppchunky::gfxb#4 75.75
(byte*) gfx_init_plane_8bppchunky::gfxb#5 22.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 202.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 103.75
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 22.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 34.888888888888886
(word) gfx_init_plane_8bppchunky::x
(word) gfx_init_plane_8bppchunky::x#1 151.5
(word) gfx_init_plane_8bppchunky::x#2 30.299999999999997
(byte) gfx_init_plane_8bppchunky::y
(byte) gfx_init_plane_8bppchunky::y#1 16.5
(byte) gfx_init_plane_8bppchunky::y#6 9.461538461538462
(void()) gfx_init_plane_blank()
(void()) gfx_init_plane_charset8()
(byte~) gfx_init_plane_charset8::$7 2002.0
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0 101.0
(byte) gfx_init_plane_charset8::bits#1 500.5
(byte) gfx_init_plane_charset8::bits#2 443.42857142857144
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#2 2002.0
(byte~) gfx_init_plane_charset8::c#3 2002.0
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#1 16.5
(byte) gfx_init_plane_charset8::ch#8 1.2941176470588236
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#1 13.3125
(byte*) gfx_init_plane_charset8::chargen#2 157.0
(byte*) gfx_init_plane_charset8::chargen#3 22.0
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#1 302.0
(byte) gfx_init_plane_charset8::col#2 388.0
(byte) gfx_init_plane_charset8::col#5 71.0
(byte) gfx_init_plane_charset8::col#6 22.0
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#1 1501.5
(byte) gfx_init_plane_charset8::cp#2 222.44444444444446
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#1 151.5
(byte) gfx_init_plane_charset8::cr#6 14.428571428571429
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#1 234.8888888888889
(byte*) gfx_init_plane_charset8::gfxa#2 517.3333333333334
(byte*) gfx_init_plane_charset8::gfxa#5 71.0
(byte*) gfx_init_plane_charset8::gfxa#6 22.0
(byte) gfx_init_plane_charset8::gfxbCpuBank
(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
(dword~) gfx_init_plane_fill::$0 4.0
(word~) gfx_init_plane_fill::$1 4.0
(word~) gfx_init_plane_fill::$4 4.0
(word~) gfx_init_plane_fill::$5 4.0
(byte) gfx_init_plane_fill::bx
(byte) gfx_init_plane_fill::bx#1 151.5
(byte) gfx_init_plane_fill::bx#2 67.33333333333333
(byte) gfx_init_plane_fill::by
(byte) gfx_init_plane_fill::by#1 16.5
(byte) gfx_init_plane_fill::by#4 3.6666666666666665
(byte) gfx_init_plane_fill::fill
(byte) gfx_init_plane_fill::fill#6 5.611111111111111
(byte*) gfx_init_plane_fill::gfxb
(word) gfx_init_plane_fill::gfxb#0 2.0
(byte*) gfx_init_plane_fill::gfxb#1 42.599999999999994
(byte*) gfx_init_plane_fill::gfxb#2 157.0
(byte*) gfx_init_plane_fill::gfxb#3 24.0
(byte*~) gfx_init_plane_fill::gfxb#6 4.0
(byte) gfx_init_plane_fill::gfxbCpuBank
(byte) gfx_init_plane_fill::gfxbCpuBank#0 4.0
(dword) gfx_init_plane_fill::plane_addr
(dword) gfx_init_plane_fill::plane_addr#3 0.6666666666666666
(void()) gfx_init_plane_full()
(void()) gfx_init_plane_horisontal()
(byte~) gfx_init_plane_horisontal::$7 202.0
(byte) gfx_init_plane_horisontal::ax
(byte) gfx_init_plane_horisontal::ax#1 151.5
(byte) gfx_init_plane_horisontal::ax#2 25.25
(byte) gfx_init_plane_horisontal::ay
(byte) gfx_init_plane_horisontal::ay#1 16.5
(byte) gfx_init_plane_horisontal::ay#4 11.181818181818182
(byte*) gfx_init_plane_horisontal::gfxa
(byte*) gfx_init_plane_horisontal::gfxa#1 202.0
(byte*) gfx_init_plane_horisontal::gfxa#2 202.0
(byte*) gfx_init_plane_horisontal::gfxa#3 103.2
(byte*) gfx_init_plane_horisontal::gfxa#6 22.0
(byte*) gfx_init_plane_horisontal::gfxa#7 62.8
(byte) gfx_init_plane_horisontal::gfxbCpuBank
(void()) gfx_init_plane_horisontal2()
(byte~) gfx_init_plane_horisontal2::$7 202.0
(byte) gfx_init_plane_horisontal2::ax
(byte) gfx_init_plane_horisontal2::ax#1 151.5
(byte) gfx_init_plane_horisontal2::ax#2 40.4
(byte) gfx_init_plane_horisontal2::ay
(byte) gfx_init_plane_horisontal2::ay#1 16.5
(byte) gfx_init_plane_horisontal2::ay#4 15.375
(byte*) gfx_init_plane_horisontal2::gfxa
(byte*) gfx_init_plane_horisontal2::gfxa#1 42.599999999999994
(byte*) gfx_init_plane_horisontal2::gfxa#2 78.5
(byte*) gfx_init_plane_horisontal2::gfxa#3 22.0
(byte) gfx_init_plane_horisontal2::gfxbCpuBank
(byte) gfx_init_plane_horisontal2::row
(byte) gfx_init_plane_horisontal2::row#0 202.0
(void()) gfx_init_plane_vertical()
(byte) gfx_init_plane_vertical::bx
(byte) gfx_init_plane_vertical::bx#1 151.5
(byte) gfx_init_plane_vertical::bx#2 67.33333333333333
(byte) gfx_init_plane_vertical::by
(byte) gfx_init_plane_vertical::by#1 16.5
(byte) gfx_init_plane_vertical::by#4 3.6666666666666665
(byte*) gfx_init_plane_vertical::gfxb
(byte*) gfx_init_plane_vertical::gfxb#1 42.599999999999994
(byte*) gfx_init_plane_vertical::gfxb#2 157.0
(byte*) gfx_init_plane_vertical::gfxb#3 22.0
(byte) gfx_init_plane_vertical::gfxbCpuBank
(void()) gfx_init_plane_vertical2()
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0 202.0
(byte~) gfx_init_screen0::$1 101.0
(byte~) gfx_init_screen0::$2 202.0
(byte~) gfx_init_screen0::$3 202.0
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#1 42.599999999999994
(byte*) gfx_init_screen0::ch#2 52.33333333333333
(byte*) gfx_init_screen0::ch#3 22.0
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#1 151.5
(byte) gfx_init_screen0::cx#2 43.285714285714285
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#1 16.5
(byte) gfx_init_screen0::cy#4 12.299999999999999
(void()) gfx_init_screen1()
(byte~) gfx_init_screen1::$0 202.0
(byte~) gfx_init_screen1::$1 202.0
(byte*) gfx_init_screen1::ch
(byte*) gfx_init_screen1::ch#1 42.599999999999994
(byte*) gfx_init_screen1::ch#2 78.5
(byte*) gfx_init_screen1::ch#3 22.0
(byte) gfx_init_screen1::cx
(byte) gfx_init_screen1::cx#1 151.5
(byte) gfx_init_screen1::cx#2 60.599999999999994
(byte) gfx_init_screen1::cy
(byte) gfx_init_screen1::cy#1 16.5
(byte) gfx_init_screen1::cy#4 15.375
(void()) gfx_init_screen2()
(byte~) gfx_init_screen2::$0 202.0
(byte~) gfx_init_screen2::$3 202.0
(byte~) gfx_init_screen2::$4 202.0
(byte*) gfx_init_screen2::ch
(byte*) gfx_init_screen2::ch#1 42.599999999999994
(byte*) gfx_init_screen2::ch#2 44.85714285714286
(byte*) gfx_init_screen2::ch#3 22.0
(byte) gfx_init_screen2::col
(byte) gfx_init_screen2::col#0 151.5
(byte) gfx_init_screen2::col2
(byte) gfx_init_screen2::col2#0 101.0
(byte) gfx_init_screen2::cx
(byte) gfx_init_screen2::cx#1 151.5
(byte) gfx_init_screen2::cx#2 37.875
(byte) gfx_init_screen2::cy
(byte) gfx_init_screen2::cy#1 16.5
(byte) gfx_init_screen2::cy#4 11.181818181818182
(void()) gfx_init_screen3()
(byte~) gfx_init_screen3::$0 202.0
(byte~) gfx_init_screen3::$1 101.0
(byte~) gfx_init_screen3::$2 202.0
(byte~) gfx_init_screen3::$3 202.0
(byte*) gfx_init_screen3::ch
(byte*) gfx_init_screen3::ch#1 42.599999999999994
(byte*) gfx_init_screen3::ch#2 52.33333333333333
(byte*) gfx_init_screen3::ch#3 22.0
(byte) gfx_init_screen3::cx
(byte) gfx_init_screen3::cx#1 151.5
(byte) gfx_init_screen3::cx#2 43.285714285714285
(byte) gfx_init_screen3::cy
(byte) gfx_init_screen3::cy#1 16.5
(byte) gfx_init_screen3::cy#4 12.299999999999999
(void()) gfx_init_screen4()
(byte*) gfx_init_screen4::ch
(byte*) gfx_init_screen4::ch#1 42.599999999999994
(byte*) gfx_init_screen4::ch#2 157.0
(byte*) gfx_init_screen4::ch#3 22.0
(byte) gfx_init_screen4::cx
(byte) gfx_init_screen4::cx#1 151.5
(byte) gfx_init_screen4::cx#2 67.33333333333333
(byte) gfx_init_screen4::cy
(byte) gfx_init_screen4::cy#1 16.5
(byte) gfx_init_screen4::cy#4 3.6666666666666665
(void()) gfx_init_vic_bitmap()
(byte) gfx_init_vic_bitmap::l
(byte) gfx_init_vic_bitmap::l#1 22.0
(byte) gfx_init_vic_bitmap::l#2 11.0
(void()) gfx_mode()
(byte~) gfx_mode::$20 4.0
(dword~) gfx_mode::$22 4.0
(byte~) gfx_mode::$25 4.0
(word~) gfx_mode::$26 2.0
(byte~) gfx_mode::$27 4.0
(word~) gfx_mode::$28 4.0
(byte~) gfx_mode::$29 4.0
(byte~) gfx_mode::$30 4.0
(byte~) gfx_mode::$31 4.0
(byte~) gfx_mode::$32 4.0
(byte~) gfx_mode::$33 4.0
(byte~) gfx_mode::$34 4.0
(dword~) gfx_mode::$36 4.0
(byte~) gfx_mode::$39 4.0
(word~) gfx_mode::$40 2.0
(byte~) gfx_mode::$41 4.0
(word~) gfx_mode::$42 4.0
(byte~) gfx_mode::$43 4.0
(byte~) gfx_mode::$44 4.0
(byte~) gfx_mode::$45 4.0
(byte~) gfx_mode::$46 4.0
(byte~) gfx_mode::$47 4.0
(byte*~) gfx_mode::$53 2.0
(word~) gfx_mode::$54 4.0
(word~) gfx_mode::$55 2.0
(byte~) gfx_mode::$56 0.5
(byte*~) gfx_mode::$58 2.0
(word~) gfx_mode::$59 4.0
(byte~) gfx_mode::$60 4.0
(byte~) gfx_mode::$61 4.0
(byte~) gfx_mode::$62 4.0
(byte~) gfx_mode::$64 4.0
(byte~) gfx_mode::$65 4.0
(byte~) gfx_mode::$66 4.0
(byte~) gfx_mode::$67 4.0
(byte~) gfx_mode::$68 4.0
(byte~) gfx_mode::$69 4.0
(byte~) gfx_mode::$70 4.0
(byte~) gfx_mode::$71 4.0
(byte*) gfx_mode::col
(byte*) gfx_mode::col#1 350.5
(byte*) gfx_mode::col#2 1552.0
(byte*) gfx_mode::col#3 202.0
(byte) gfx_mode::cx
(byte) gfx_mode::cx#1 1501.5
(byte) gfx_mode::cx#2 500.5
(byte) gfx_mode::cy
(byte) gfx_mode::cy#1 151.5
(byte) gfx_mode::cy#4 28.857142857142858
(byte) gfx_mode::dtv_control
(byte) gfx_mode::dtv_control#10 4.0
(byte) gfx_mode::dtv_control#11 4.0
(byte) gfx_mode::dtv_control#12 6.0
(byte) gfx_mode::dtv_control#13 4.0
(byte) gfx_mode::dtv_control#14 2.0
(byte) gfx_mode::dtv_control#15 4.0
(byte) gfx_mode::dtv_control#2 4.0
(byte) gfx_mode::dtv_control#3 4.0
(byte) gfx_mode::dtv_control#4 4.0
(byte) gfx_mode::dtv_control#5 4.0
(byte) gfx_mode::dtv_control#6 4.0
(byte) gfx_mode::i
(byte) gfx_mode::i#1 151.5
(byte) gfx_mode::i#2 202.0
(byte) gfx_mode::j
(byte) gfx_mode::j#1 151.5
(byte) gfx_mode::j#2 202.0
(byte) gfx_mode::keyboard_event
(byte) gfx_mode::keyboard_event#0 202.0
(dword) gfx_mode::plane_a
(dword) gfx_mode::plane_a#0 1.0
(byte) gfx_mode::plane_a_offs
(byte) gfx_mode::plane_a_offs#0 0.8
(dword) gfx_mode::plane_b
(dword) gfx_mode::plane_b#0 1.0
(byte) gfx_mode::plane_b_offs
(byte) gfx_mode::plane_b_offs#0 0.8
(byte*) gfx_mode::vic_colors
(byte*) gfx_mode::vic_colors#0 4.0
(byte*) gfx_mode::vic_colors#1 420.59999999999997
(byte*) gfx_mode::vic_colors#2 1034.6666666666667
(byte*) gfx_mode::vic_colors#3 204.0
(byte) gfx_mode::vic_control
(byte) gfx_mode::vic_control#2 4.0
(byte) gfx_mode::vic_control#4 6.0
(byte) gfx_mode::vic_control#5 2.0
(byte) gfx_mode::vic_control2
(byte) gfx_mode::vic_control2#2 2.0
(byte()) keyboard_event_get()
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 4.0
(byte) keyboard_event_get::return#2 26.25
(byte) keyboard_event_get::return#3 202.0
(byte) keyboard_event_get::return#4 4.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 4.0
(byte~) keyboard_event_pressed::$1 4.0
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#4 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 4.0
(byte) keyboard_event_pressed::return#1 4.0
(byte) keyboard_event_pressed::return#10 1.6666666666666665
(byte) keyboard_event_pressed::return#2 4.0
(byte) keyboard_event_pressed::return#3 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 2.0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 4.0
(byte~) keyboard_event_scan::$15 200002.0
(byte~) keyboard_event_scan::$16 200002.0
(byte~) keyboard_event_scan::$23 200002.0
(byte~) keyboard_event_scan::$3 4.0
(byte~) keyboard_event_scan::$6 4.0
(byte~) keyboard_event_scan::$9 4.0
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 150001.5
(byte) keyboard_event_scan::col#2 28571.714285714286
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 200002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 20002.0
(byte) keyboard_event_scan::keycode#10 31538.846153846156
(byte) keyboard_event_scan::keycode#11 5000.5
(byte) keyboard_event_scan::keycode#13 10001.0
(byte) keyboard_event_scan::keycode#14 52500.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 15001.5
(byte) keyboard_event_scan::row#2 6000.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 12778.055555555557
(byte) keyboard_events_size
(byte) keyboard_events_size#1 200002.0
(byte) keyboard_events_size#100 882.6176470588235
(byte) keyboard_events_size#108 102001.2
(byte) keyboard_events_size#109 4286.428571428572
(byte) keyboard_events_size#18 81000.90000000001
(byte) keyboard_events_size#2 200002.0
(byte) keyboard_events_size#24 6.766666666666667
(byte) keyboard_events_size#27 0.3333333333333333
(byte) keyboard_events_size#4 3.0
(byte) keyboard_events_size#47 73.73333333333335
(byte) keyboard_events_size#99 105.0
(void()) keyboard_init()
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 3334.333333333333
(byte) keyboard_matrix_read::return#2 20002.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 10003.0
(byte) keyboard_modifiers
(byte) keyboard_modifiers#18 0.8
(byte) keyboard_modifiers#19 1.6
(byte) keyboard_modifiers#20 1.6
(byte) keyboard_modifiers#21 0.7272727272727273
(byte) keyboard_modifiers#3 4.0
(byte) keyboard_modifiers#4 4.0
(byte) keyboard_modifiers#5 4.0
(void()) main()
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(byte) memset::c
(byte*) memset::dst
(byte*) memset::dst#1 202.0
(byte*) memset::dst#2 135.33333333333331
(byte*~) memset::dst#4 4.0
(byte*) memset::end
(byte*) memset::end#0 17.166666666666664
(word) memset::num
(void*) memset::return
(void*) memset::str
(void*) memset::str#0 0.6666666666666666
(byte*) print_char_cursor
(byte*) print_char_cursor#1 2002.0
(byte*) print_char_cursor#20 821.0
(byte*) print_char_cursor#22 102.0
(byte*) print_char_cursor#38 572.0
(byte*~) print_char_cursor#73 4.0
(byte*~) print_char_cursor#74 202.0
(void()) print_cls()
(byte*) print_line_cursor
(byte*) print_line_cursor#2 8.749999999999998
(byte*) print_line_cursor#21 2004.0
(byte*) print_line_cursor#22 641.0
(void()) print_ln()
(byte*) print_screen
(void()) print_set_screen((byte*) print_set_screen::screen)
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#2 0.26666666666666666
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(byte*) print_str_at::at
(byte*) print_str_at::at#0 1001.0
(byte*) print_str_at::at#2 1001.0
(byte*) print_str_at::str
(byte*) print_str_at::str#0 2002.0
(byte*) print_str_at::str#1 2.0
(byte*) print_str_at::str#2 1001.5
(void()) print_str_lines((byte*) print_str_lines::str)
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 667.3333333333334
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 233.66666666666669
(byte*) print_str_lines::str#3 152.5
(byte*) print_str_lines::str#4 1552.0
(byte*) print_str_lines::str#5 1.0
(void()) render_preset_name((byte) render_preset_name::idx)
(byte) render_preset_name::idx
(byte) render_preset_name::idx#0 4.0
(byte) render_preset_name::idx#1 202.0
(byte) render_preset_name::idx#10 11.363636363636362
(byte*) render_preset_name::name
(byte*) render_preset_name::name#13 2.0

Initial phi equivalence classes
[ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
[ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
[ gfx_mode::vic_control2#2 ]
[ gfx_mode::cy#4 gfx_mode::cy#1 ]
[ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ]
[ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
[ gfx_mode::cx#2 gfx_mode::cx#1 ]
[ gfx_mode::j#2 gfx_mode::j#1 ]
[ gfx_mode::i#2 gfx_mode::i#1 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ]
[ keyboard_event_pressed::keycode#4 ]
[ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
[ get_vic_screen::return#5 ]
[ get_vic_charset::return#2 ]
[ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
[ get_plane::return#14 ]
[ form_mode::i#2 form_mode::i#1 ]
[ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
[ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
[ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
[ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
[ render_preset_name::name#13 ]
[ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
[ print_str_at::at#2 print_str_at::at#0 ]
[ form_render_values::idx#2 form_render_values::idx#1 ]
[ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
[ apply_preset::preset#15 ]
[ apply_preset::i#2 apply_preset::i#1 ]
[ form_control::return#2 ]
[ form_set_screen::line#2 form_set_screen::line#1 ]
[ form_set_screen::y#2 form_set_screen::y#1 ]
[ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
[ print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 ]
[ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ gfx_init_plane_fill::plane_addr#3 ]
[ gfx_init_plane_fill::fill#6 ]
[ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
[ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
[ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
[ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
[ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
[ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
[ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
[ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
[ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
[ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
[ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
[ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
[ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
[ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
[ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
[ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
[ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
[ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
[ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
[ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
[ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
[ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
[ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
[ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
[ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
[ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
[ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
[ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
[ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
[ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
[ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Added variable gfx_mode::$20 to zero page equivalence class [ gfx_mode::$20 ]
Added variable gfx_mode::plane_a_offs#0 to zero page equivalence class [ gfx_mode::plane_a_offs#0 ]
Added variable get_plane::return#16 to zero page equivalence class [ get_plane::return#16 ]
Added variable gfx_mode::$22 to zero page equivalence class [ gfx_mode::$22 ]
Added variable gfx_mode::plane_a#0 to zero page equivalence class [ gfx_mode::plane_a#0 ]
Added variable gfx_mode::$26 to zero page equivalence class [ gfx_mode::$26 ]
Added variable gfx_mode::$25 to zero page equivalence class [ gfx_mode::$25 ]
Added variable gfx_mode::$27 to zero page equivalence class [ gfx_mode::$27 ]
Added variable gfx_mode::$28 to zero page equivalence class [ gfx_mode::$28 ]
Added variable gfx_mode::$29 to zero page equivalence class [ gfx_mode::$29 ]
Added variable gfx_mode::$30 to zero page equivalence class [ gfx_mode::$30 ]
Added variable gfx_mode::$31 to zero page equivalence class [ gfx_mode::$31 ]
Added variable gfx_mode::$32 to zero page equivalence class [ gfx_mode::$32 ]
Added variable gfx_mode::$33 to zero page equivalence class [ gfx_mode::$33 ]
Added variable gfx_mode::$34 to zero page equivalence class [ gfx_mode::$34 ]
Added variable gfx_mode::plane_b_offs#0 to zero page equivalence class [ gfx_mode::plane_b_offs#0 ]
Added variable get_plane::return#17 to zero page equivalence class [ get_plane::return#17 ]
Added variable gfx_mode::$36 to zero page equivalence class [ gfx_mode::$36 ]
Added variable gfx_mode::plane_b#0 to zero page equivalence class [ gfx_mode::plane_b#0 ]
Added variable gfx_mode::$40 to zero page equivalence class [ gfx_mode::$40 ]
Added variable gfx_mode::$39 to zero page equivalence class [ gfx_mode::$39 ]
Added variable gfx_mode::$41 to zero page equivalence class [ gfx_mode::$41 ]
Added variable gfx_mode::$42 to zero page equivalence class [ gfx_mode::$42 ]
Added variable gfx_mode::$43 to zero page equivalence class [ gfx_mode::$43 ]
Added variable gfx_mode::$44 to zero page equivalence class [ gfx_mode::$44 ]
Added variable gfx_mode::$45 to zero page equivalence class [ gfx_mode::$45 ]
Added variable gfx_mode::$46 to zero page equivalence class [ gfx_mode::$46 ]
Added variable gfx_mode::$47 to zero page equivalence class [ gfx_mode::$47 ]
Added variable get_vic_screen::return#10 to zero page equivalence class [ get_vic_screen::return#10 ]
Added variable gfx_mode::$53 to zero page equivalence class [ gfx_mode::$53 ]
Added variable gfx_mode::$54 to zero page equivalence class [ gfx_mode::$54 ]
Added variable gfx_mode::$55 to zero page equivalence class [ gfx_mode::$55 ]
Added variable gfx_mode::$56 to zero page equivalence class [ gfx_mode::$56 ]
Added variable get_vic_charset::idx#0 to zero page equivalence class [ get_vic_charset::idx#0 ]
Added variable get_vic_charset::return#4 to zero page equivalence class [ get_vic_charset::return#4 ]
Added variable gfx_mode::$58 to zero page equivalence class [ gfx_mode::$58 ]
Added variable gfx_mode::$59 to zero page equivalence class [ gfx_mode::$59 ]
Added variable gfx_mode::$60 to zero page equivalence class [ gfx_mode::$60 ]
Added variable gfx_mode::$61 to zero page equivalence class [ gfx_mode::$61 ]
Added variable gfx_mode::$62 to zero page equivalence class [ gfx_mode::$62 ]
Added variable get_vic_screen::return#11 to zero page equivalence class [ get_vic_screen::return#11 ]
Added variable gfx_mode::$64 to zero page equivalence class [ gfx_mode::$64 ]
Added variable gfx_mode::$65 to zero page equivalence class [ gfx_mode::$65 ]
Added variable gfx_mode::$66 to zero page equivalence class [ gfx_mode::$66 ]
Added variable gfx_mode::$67 to zero page equivalence class [ gfx_mode::$67 ]
Added variable gfx_mode::$68 to zero page equivalence class [ gfx_mode::$68 ]
Added variable gfx_mode::$69 to zero page equivalence class [ gfx_mode::$69 ]
Added variable gfx_mode::$70 to zero page equivalence class [ gfx_mode::$70 ]
Added variable gfx_mode::$71 to zero page equivalence class [ gfx_mode::$71 ]
Added variable keyboard_event_get::return#3 to zero page equivalence class [ keyboard_event_get::return#3 ]
Added variable gfx_mode::keyboard_event#0 to zero page equivalence class [ gfx_mode::keyboard_event#0 ]
Added variable keyboard_matrix_read::rowid#0 to zero page equivalence class [ keyboard_matrix_read::rowid#0 ]
Added variable keyboard_matrix_read::return#2 to zero page equivalence class [ keyboard_matrix_read::return#2 ]
Added variable keyboard_event_scan::row_scan#0 to zero page equivalence class [ keyboard_event_scan::row_scan#0 ]
Added variable keyboard_event_pressed::return#0 to zero page equivalence class [ keyboard_event_pressed::return#0 ]
Added variable keyboard_event_scan::$0 to zero page equivalence class [ keyboard_event_scan::$0 ]
Added variable keyboard_event_pressed::return#1 to zero page equivalence class [ keyboard_event_pressed::return#1 ]
Added variable keyboard_event_scan::$3 to zero page equivalence class [ keyboard_event_scan::$3 ]
Added variable keyboard_event_pressed::return#2 to zero page equivalence class [ keyboard_event_pressed::return#2 ]
Added variable keyboard_event_scan::$6 to zero page equivalence class [ keyboard_event_scan::$6 ]
Added variable keyboard_event_pressed::return#3 to zero page equivalence class [ keyboard_event_pressed::return#3 ]
Added variable keyboard_event_scan::$9 to zero page equivalence class [ keyboard_event_scan::$9 ]
Added variable keyboard_event_scan::$15 to zero page equivalence class [ keyboard_event_scan::$15 ]
Added variable keyboard_event_scan::$16 to zero page equivalence class [ keyboard_event_scan::$16 ]
Added variable keyboard_event_scan::event_type#0 to zero page equivalence class [ keyboard_event_scan::event_type#0 ]
Added variable keyboard_event_scan::$23 to zero page equivalence class [ keyboard_event_scan::$23 ]
Added variable keyboard_event_pressed::$0 to zero page equivalence class [ keyboard_event_pressed::$0 ]
Added variable keyboard_event_pressed::row_bits#0 to zero page equivalence class [ keyboard_event_pressed::row_bits#0 ]
Added variable keyboard_event_pressed::$1 to zero page equivalence class [ keyboard_event_pressed::$1 ]
Added variable keyboard_event_pressed::return#10 to zero page equivalence class [ keyboard_event_pressed::return#10 ]
Added variable keyboard_matrix_read::return#0 to zero page equivalence class [ keyboard_matrix_read::return#0 ]
Added variable form_control::return#0 to zero page equivalence class [ form_control::return#0 ]
Added variable form_mode::$36 to zero page equivalence class [ form_mode::$36 ]
Added variable apply_preset::idx#0 to zero page equivalence class [ apply_preset::idx#0 ]
Added variable form_field_ptr::y#0 to zero page equivalence class [ form_field_ptr::y#0 ]
Added variable form_field_ptr::line#0 to zero page equivalence class [ form_field_ptr::line#0 ]
Added variable form_field_ptr::x#0 to zero page equivalence class [ form_field_ptr::x#0 ]
Added variable form_control::$13 to zero page equivalence class [ form_control::$13 ]
Added variable keyboard_event_get::return#4 to zero page equivalence class [ keyboard_event_get::return#4 ]
Added variable form_control::key_event#0 to zero page equivalence class [ form_control::key_event#0 ]
Added variable form_control::$15 to zero page equivalence class [ form_control::$15 ]
Added variable form_control::$16 to zero page equivalence class [ form_control::$16 ]
Added variable form_control::$24 to zero page equivalence class [ form_control::$24 ]
Added variable form_control::$14 to zero page equivalence class [ form_control::$14 ]
Added variable form_set_screen::$0 to zero page equivalence class [ form_set_screen::$0 ]
Added variable form_set_screen::$1 to zero page equivalence class [ form_set_screen::$1 ]
Added variable print_str_lines::ch#0 to zero page equivalence class [ print_str_lines::ch#0 ]
Added variable memset::str#0 to zero page equivalence class [ memset::str#0 ]
Added variable memset::end#0 to zero page equivalence class [ memset::end#0 ]
Added variable gfx_init_plane_fill::$0 to zero page equivalence class [ gfx_init_plane_fill::$0 ]
Added variable gfx_init_plane_fill::$1 to zero page equivalence class [ gfx_init_plane_fill::$1 ]
Added variable gfx_init_plane_fill::gfxbCpuBank#0 to zero page equivalence class [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Added variable gfx_init_plane_fill::$4 to zero page equivalence class [ gfx_init_plane_fill::$4 ]
Added variable gfx_init_plane_fill::$5 to zero page equivalence class [ gfx_init_plane_fill::$5 ]
Added variable gfx_init_plane_fill::gfxb#0 to zero page equivalence class [ gfx_init_plane_fill::gfxb#0 ]
Added variable gfx_init_plane_horisontal2::$7 to zero page equivalence class [ gfx_init_plane_horisontal2::$7 ]
Added variable gfx_init_plane_horisontal2::row#0 to zero page equivalence class [ gfx_init_plane_horisontal2::row#0 ]
Added variable gfx_init_plane_horisontal::$7 to zero page equivalence class [ gfx_init_plane_horisontal::$7 ]
Added variable gfx_init_plane_charset8::$7 to zero page equivalence class [ gfx_init_plane_charset8::$7 ]
Added variable gfx_init_plane_8bppchunky::$8 to zero page equivalence class [ gfx_init_plane_8bppchunky::$8 ]
Added variable gfx_init_plane_8bppchunky::c#0 to zero page equivalence class [ gfx_init_plane_8bppchunky::c#0 ]
Added variable bitmap_line::x0#0 to zero page equivalence class [ bitmap_line::x0#0 ]
Added variable bitmap_line::x1#0 to zero page equivalence class [ bitmap_line::x1#0 ]
Added variable bitmap_line::y0#0 to zero page equivalence class [ bitmap_line::y0#0 ]
Added variable bitmap_line::y1#0 to zero page equivalence class [ bitmap_line::y1#0 ]
Added variable bitmap_line::xd#2 to zero page equivalence class [ bitmap_line::xd#2 ]
Added variable bitmap_line::yd#2 to zero page equivalence class [ bitmap_line::yd#2 ]
Added variable bitmap_line::yd#1 to zero page equivalence class [ bitmap_line::yd#1 ]
Added variable bitmap_line::xd#1 to zero page equivalence class [ bitmap_line::xd#1 ]
Added variable bitmap_line::yd#10 to zero page equivalence class [ bitmap_line::yd#10 ]
Added variable bitmap_line::yd#11 to zero page equivalence class [ bitmap_line::yd#11 ]
Added variable bitmap_line_xdyi::$6 to zero page equivalence class [ bitmap_line_xdyi::$6 ]
Added variable bitmap_plot::plotter_x#0 to zero page equivalence class [ bitmap_plot::plotter_x#0 ]
Added variable bitmap_plot::plotter_y#0 to zero page equivalence class [ bitmap_plot::plotter_y#0 ]
Added variable bitmap_plot::plotter#0 to zero page equivalence class [ bitmap_plot::plotter#0 ]
Added variable bitmap_plot::$1 to zero page equivalence class [ bitmap_plot::$1 ]
Added variable bitmap_line_ydxi::$6 to zero page equivalence class [ bitmap_line_ydxi::$6 ]
Added variable bitmap_line_xdyd::$6 to zero page equivalence class [ bitmap_line_xdyd::$6 ]
Added variable bitmap_line_ydxd::$6 to zero page equivalence class [ bitmap_line_ydxd::$6 ]
Added variable bitmap_clear::bitmap#0 to zero page equivalence class [ bitmap_clear::bitmap#0 ]
Added variable bitmap_init::$0 to zero page equivalence class [ bitmap_init::$0 ]
Added variable bitmap_init::$10 to zero page equivalence class [ bitmap_init::$10 ]
Added variable bitmap_init::$7 to zero page equivalence class [ bitmap_init::$7 ]
Added variable bitmap_init::$8 to zero page equivalence class [ bitmap_init::$8 ]
Added variable bitmap_init::$9 to zero page equivalence class [ bitmap_init::$9 ]
Added variable gfx_init_screen3::$0 to zero page equivalence class [ gfx_init_screen3::$0 ]
Added variable gfx_init_screen3::$1 to zero page equivalence class [ gfx_init_screen3::$1 ]
Added variable gfx_init_screen3::$2 to zero page equivalence class [ gfx_init_screen3::$2 ]
Added variable gfx_init_screen3::$3 to zero page equivalence class [ gfx_init_screen3::$3 ]
Added variable gfx_init_screen2::$0 to zero page equivalence class [ gfx_init_screen2::$0 ]
Added variable gfx_init_screen2::col#0 to zero page equivalence class [ gfx_init_screen2::col#0 ]
Added variable gfx_init_screen2::col2#0 to zero page equivalence class [ gfx_init_screen2::col2#0 ]
Added variable gfx_init_screen2::$3 to zero page equivalence class [ gfx_init_screen2::$3 ]
Added variable gfx_init_screen2::$4 to zero page equivalence class [ gfx_init_screen2::$4 ]
Added variable gfx_init_screen1::$0 to zero page equivalence class [ gfx_init_screen1::$0 ]
Added variable gfx_init_screen1::$1 to zero page equivalence class [ gfx_init_screen1::$1 ]
Added variable gfx_init_screen0::$0 to zero page equivalence class [ gfx_init_screen0::$0 ]
Added variable gfx_init_screen0::$1 to zero page equivalence class [ gfx_init_screen0::$1 ]
Added variable gfx_init_screen0::$2 to zero page equivalence class [ gfx_init_screen0::$2 ]
Added variable gfx_init_screen0::$3 to zero page equivalence class [ gfx_init_screen0::$3 ]
Complete equivalence classes
[ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
[ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
[ gfx_mode::vic_control2#2 ]
[ gfx_mode::cy#4 gfx_mode::cy#1 ]
[ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ]
[ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
[ gfx_mode::cx#2 gfx_mode::cx#1 ]
[ gfx_mode::j#2 gfx_mode::j#1 ]
[ gfx_mode::i#2 gfx_mode::i#1 ]
[ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
[ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
[ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
[ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
[ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
[ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ]
[ keyboard_event_pressed::keycode#4 ]
[ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
[ get_vic_screen::return#5 ]
[ get_vic_charset::return#2 ]
[ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
[ get_plane::return#14 ]
[ form_mode::i#2 form_mode::i#1 ]
[ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
[ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
[ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
[ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
[ render_preset_name::name#13 ]
[ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
[ print_str_at::at#2 print_str_at::at#0 ]
[ form_render_values::idx#2 form_render_values::idx#1 ]
[ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
[ apply_preset::preset#15 ]
[ apply_preset::i#2 apply_preset::i#1 ]
[ form_control::return#2 ]
[ form_set_screen::line#2 form_set_screen::line#1 ]
[ form_set_screen::y#2 form_set_screen::y#1 ]
[ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
[ print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 ]
[ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ]
[ memset::dst#2 memset::dst#4 memset::dst#1 ]
[ gfx_init_plane_fill::plane_addr#3 ]
[ gfx_init_plane_fill::fill#6 ]
[ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
[ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
[ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
[ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
[ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
[ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
[ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
[ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
[ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
[ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
[ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
[ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
[ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
[ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
[ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
[ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
[ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
[ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
[ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
[ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
[ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
[ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
[ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
[ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
[ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
[ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
[ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
[ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
[ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
[ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
[ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
[ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
[ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
[ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
[ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
[ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
[ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
[ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
[ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
[ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
[ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
[ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
[ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
[ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
[ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
[ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
[ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
[ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
[ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
[ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
[ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
[ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
[ bitmap_clear::y#4 bitmap_clear::y#1 ]
[ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
[ bitmap_clear::x#2 bitmap_clear::x#1 ]
[ bitmap_init::x#2 bitmap_init::x#1 ]
[ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
[ bitmap_init::y#2 bitmap_init::y#1 ]
[ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
[ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
[ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
[ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
[ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
[ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
[ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
[ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
[ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
[ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
[ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
[ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
[ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
[ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
[ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
[ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
[ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
[ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
[ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
[ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
[ gfx_mode::$20 ]
[ gfx_mode::plane_a_offs#0 ]
[ get_plane::return#16 ]
[ gfx_mode::$22 ]
[ gfx_mode::plane_a#0 ]
[ gfx_mode::$26 ]
[ gfx_mode::$25 ]
[ gfx_mode::$27 ]
[ gfx_mode::$28 ]
[ gfx_mode::$29 ]
[ gfx_mode::$30 ]
[ gfx_mode::$31 ]
[ gfx_mode::$32 ]
[ gfx_mode::$33 ]
[ gfx_mode::$34 ]
[ gfx_mode::plane_b_offs#0 ]
[ get_plane::return#17 ]
[ gfx_mode::$36 ]
[ gfx_mode::plane_b#0 ]
[ gfx_mode::$40 ]
[ gfx_mode::$39 ]
[ gfx_mode::$41 ]
[ gfx_mode::$42 ]
[ gfx_mode::$43 ]
[ gfx_mode::$44 ]
[ gfx_mode::$45 ]
[ gfx_mode::$46 ]
[ gfx_mode::$47 ]
[ get_vic_screen::return#10 ]
[ gfx_mode::$53 ]
[ gfx_mode::$54 ]
[ gfx_mode::$55 ]
[ gfx_mode::$56 ]
[ get_vic_charset::idx#0 ]
[ get_vic_charset::return#4 ]
[ gfx_mode::$58 ]
[ gfx_mode::$59 ]
[ gfx_mode::$60 ]
[ gfx_mode::$61 ]
[ gfx_mode::$62 ]
[ get_vic_screen::return#11 ]
[ gfx_mode::$64 ]
[ gfx_mode::$65 ]
[ gfx_mode::$66 ]
[ gfx_mode::$67 ]
[ gfx_mode::$68 ]
[ gfx_mode::$69 ]
[ gfx_mode::$70 ]
[ gfx_mode::$71 ]
[ keyboard_event_get::return#3 ]
[ gfx_mode::keyboard_event#0 ]
[ keyboard_matrix_read::rowid#0 ]
[ keyboard_matrix_read::return#2 ]
[ keyboard_event_scan::row_scan#0 ]
[ keyboard_event_pressed::return#0 ]
[ keyboard_event_scan::$0 ]
[ keyboard_event_pressed::return#1 ]
[ keyboard_event_scan::$3 ]
[ keyboard_event_pressed::return#2 ]
[ keyboard_event_scan::$6 ]
[ keyboard_event_pressed::return#3 ]
[ keyboard_event_scan::$9 ]
[ keyboard_event_scan::$15 ]
[ keyboard_event_scan::$16 ]
[ keyboard_event_scan::event_type#0 ]
[ keyboard_event_scan::$23 ]
[ keyboard_event_pressed::$0 ]
[ keyboard_event_pressed::row_bits#0 ]
[ keyboard_event_pressed::$1 ]
[ keyboard_event_pressed::return#10 ]
[ keyboard_matrix_read::return#0 ]
[ form_control::return#0 ]
[ form_mode::$36 ]
[ apply_preset::idx#0 ]
[ form_field_ptr::y#0 ]
[ form_field_ptr::line#0 ]
[ form_field_ptr::x#0 ]
[ form_control::$13 ]
[ keyboard_event_get::return#4 ]
[ form_control::key_event#0 ]
[ form_control::$15 ]
[ form_control::$16 ]
[ form_control::$24 ]
[ form_control::$14 ]
[ form_set_screen::$0 ]
[ form_set_screen::$1 ]
[ print_str_lines::ch#0 ]
[ memset::str#0 ]
[ memset::end#0 ]
[ gfx_init_plane_fill::$0 ]
[ gfx_init_plane_fill::$1 ]
[ gfx_init_plane_fill::gfxbCpuBank#0 ]
[ gfx_init_plane_fill::$4 ]
[ gfx_init_plane_fill::$5 ]
[ gfx_init_plane_fill::gfxb#0 ]
[ gfx_init_plane_horisontal2::$7 ]
[ gfx_init_plane_horisontal2::row#0 ]
[ gfx_init_plane_horisontal::$7 ]
[ gfx_init_plane_charset8::$7 ]
[ gfx_init_plane_8bppchunky::$8 ]
[ gfx_init_plane_8bppchunky::c#0 ]
[ bitmap_line::x0#0 ]
[ bitmap_line::x1#0 ]
[ bitmap_line::y0#0 ]
[ bitmap_line::y1#0 ]
[ bitmap_line::xd#2 ]
[ bitmap_line::yd#2 ]
[ bitmap_line::yd#1 ]
[ bitmap_line::xd#1 ]
[ bitmap_line::yd#10 ]
[ bitmap_line::yd#11 ]
[ bitmap_line_xdyi::$6 ]
[ bitmap_plot::plotter_x#0 ]
[ bitmap_plot::plotter_y#0 ]
[ bitmap_plot::plotter#0 ]
[ bitmap_plot::$1 ]
[ bitmap_line_ydxi::$6 ]
[ bitmap_line_xdyd::$6 ]
[ bitmap_line_ydxd::$6 ]
[ bitmap_clear::bitmap#0 ]
[ bitmap_init::$0 ]
[ bitmap_init::$10 ]
[ bitmap_init::$7 ]
[ bitmap_init::$8 ]
[ bitmap_init::$9 ]
[ gfx_init_screen3::$0 ]
[ gfx_init_screen3::$1 ]
[ gfx_init_screen3::$2 ]
[ gfx_init_screen3::$3 ]
[ gfx_init_screen2::$0 ]
[ gfx_init_screen2::col#0 ]
[ gfx_init_screen2::col2#0 ]
[ gfx_init_screen2::$3 ]
[ gfx_init_screen2::$4 ]
[ gfx_init_screen1::$0 ]
[ gfx_init_screen1::$1 ]
[ gfx_init_screen0::$0 ]
[ gfx_init_screen0::$1 ]
[ gfx_init_screen0::$2 ]
[ gfx_init_screen0::$3 ]
Allocated zp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Allocated zp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
Allocated zp[1]:4 [ gfx_mode::vic_control2#2 ]
Allocated zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Allocated zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ]
Allocated zp[2]:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
Allocated zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Allocated zp[1]:11 [ gfx_mode::j#2 gfx_mode::j#1 ]
Allocated zp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ]
Allocated zp[1]:13 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
Allocated zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Allocated zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
Allocated zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Allocated zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Allocated zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ]
Allocated zp[1]:19 [ keyboard_event_pressed::keycode#4 ]
Allocated zp[1]:20 [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
Allocated zp[2]:21 [ get_vic_screen::return#5 ]
Allocated zp[2]:23 [ get_vic_charset::return#2 ]
Allocated zp[1]:25 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
Allocated zp[4]:26 [ get_plane::return#14 ]
Allocated zp[1]:30 [ form_mode::i#2 form_mode::i#1 ]
Allocated zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Allocated zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Allocated zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Allocated zp[1]:34 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
Allocated zp[2]:35 [ render_preset_name::name#13 ]
Allocated zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ]
Allocated zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ]
Allocated zp[1]:41 [ form_render_values::idx#2 form_render_values::idx#1 ]
Allocated zp[1]:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
Allocated zp[2]:43 [ apply_preset::preset#15 ]
Allocated zp[1]:45 [ apply_preset::i#2 apply_preset::i#1 ]
Allocated zp[1]:46 [ form_control::return#2 ]
Allocated zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ]
Allocated zp[1]:49 [ form_set_screen::y#2 form_set_screen::y#1 ]
Allocated zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ]
Allocated zp[2]:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 ]
Allocated zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ]
Allocated zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ]
Allocated zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ]
Allocated zp[1]:62 [ gfx_init_plane_fill::fill#6 ]
Allocated zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Allocated zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ]
Allocated zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Allocated zp[1]:67 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
Allocated zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Allocated zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ]
Allocated zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Allocated zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Allocated zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ]
Allocated zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Allocated zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Allocated zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ]
Allocated zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Allocated zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Allocated zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ]
Allocated zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Allocated zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Allocated zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ]
Allocated zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Allocated zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Allocated zp[1]:89 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
Allocated zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Allocated zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ]
Allocated zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Allocated zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ]
Allocated zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Allocated zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
Allocated zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
Allocated zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
Allocated zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
Allocated zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Allocated zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Allocated zp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Allocated zp[1]:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Allocated zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Allocated zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Allocated zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Allocated zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Allocated zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Allocated zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Allocated zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
Allocated zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
Allocated zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
Allocated zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
Allocated zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Allocated zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Allocated zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Allocated zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Allocated zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Allocated zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Allocated zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Allocated zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Allocated zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Allocated zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ]
Allocated zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Allocated zp[1]:127 [ bitmap_init::x#2 bitmap_init::x#1 ]
Allocated zp[1]:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Allocated zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Allocated zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ]
Allocated zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Allocated zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ]
Allocated zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ]
Allocated zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Allocated zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Allocated zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ]
Allocated zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Allocated zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Allocated zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Allocated zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
Allocated zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Allocated zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Allocated zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ]
Allocated zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Allocated zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Allocated zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ]
Allocated zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Allocated zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Allocated zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ]
Allocated zp[1]:158 [ gfx_mode::$20 ]
Allocated zp[1]:159 [ gfx_mode::plane_a_offs#0 ]
Allocated zp[4]:160 [ get_plane::return#16 ]
Allocated zp[4]:164 [ gfx_mode::$22 ]
Allocated zp[4]:168 [ gfx_mode::plane_a#0 ]
Allocated zp[2]:172 [ gfx_mode::$26 ]
Allocated zp[1]:174 [ gfx_mode::$25 ]
Allocated zp[1]:175 [ gfx_mode::$27 ]
Allocated zp[2]:176 [ gfx_mode::$28 ]
Allocated zp[1]:178 [ gfx_mode::$29 ]
Allocated zp[1]:179 [ gfx_mode::$30 ]
Allocated zp[1]:180 [ gfx_mode::$31 ]
Allocated zp[1]:181 [ gfx_mode::$32 ]
Allocated zp[1]:182 [ gfx_mode::$33 ]
Allocated zp[1]:183 [ gfx_mode::$34 ]
Allocated zp[1]:184 [ gfx_mode::plane_b_offs#0 ]
Allocated zp[4]:185 [ get_plane::return#17 ]
Allocated zp[4]:189 [ gfx_mode::$36 ]
Allocated zp[4]:193 [ gfx_mode::plane_b#0 ]
Allocated zp[2]:197 [ gfx_mode::$40 ]
Allocated zp[1]:199 [ gfx_mode::$39 ]
Allocated zp[1]:200 [ gfx_mode::$41 ]
Allocated zp[2]:201 [ gfx_mode::$42 ]
Allocated zp[1]:203 [ gfx_mode::$43 ]
Allocated zp[1]:204 [ gfx_mode::$44 ]
Allocated zp[1]:205 [ gfx_mode::$45 ]
Allocated zp[1]:206 [ gfx_mode::$46 ]
Allocated zp[1]:207 [ gfx_mode::$47 ]
Allocated zp[2]:208 [ get_vic_screen::return#10 ]
Allocated zp[2]:210 [ gfx_mode::$53 ]
Allocated zp[2]:212 [ gfx_mode::$54 ]
Allocated zp[2]:214 [ gfx_mode::$55 ]
Allocated zp[1]:216 [ gfx_mode::$56 ]
Allocated zp[1]:217 [ get_vic_charset::idx#0 ]
Allocated zp[2]:218 [ get_vic_charset::return#4 ]
Allocated zp[2]:220 [ gfx_mode::$58 ]
Allocated zp[2]:222 [ gfx_mode::$59 ]
Allocated zp[1]:224 [ gfx_mode::$60 ]
Allocated zp[1]:225 [ gfx_mode::$61 ]
Allocated zp[1]:226 [ gfx_mode::$62 ]
Allocated zp[2]:227 [ get_vic_screen::return#11 ]
Allocated zp[1]:229 [ gfx_mode::$64 ]
Allocated zp[1]:230 [ gfx_mode::$65 ]
Allocated zp[1]:231 [ gfx_mode::$66 ]
Allocated zp[1]:232 [ gfx_mode::$67 ]
Allocated zp[1]:233 [ gfx_mode::$68 ]
Allocated zp[1]:234 [ gfx_mode::$69 ]
Allocated zp[1]:235 [ gfx_mode::$70 ]
Allocated zp[1]:236 [ gfx_mode::$71 ]
Allocated zp[1]:237 [ keyboard_event_get::return#3 ]
Allocated zp[1]:238 [ gfx_mode::keyboard_event#0 ]
Allocated zp[1]:239 [ keyboard_matrix_read::rowid#0 ]
Allocated zp[1]:240 [ keyboard_matrix_read::return#2 ]
Allocated zp[1]:241 [ keyboard_event_scan::row_scan#0 ]
Allocated zp[1]:242 [ keyboard_event_pressed::return#0 ]
Allocated zp[1]:243 [ keyboard_event_scan::$0 ]
Allocated zp[1]:244 [ keyboard_event_pressed::return#1 ]
Allocated zp[1]:245 [ keyboard_event_scan::$3 ]
Allocated zp[1]:246 [ keyboard_event_pressed::return#2 ]
Allocated zp[1]:247 [ keyboard_event_scan::$6 ]
Allocated zp[1]:248 [ keyboard_event_pressed::return#3 ]
Allocated zp[1]:249 [ keyboard_event_scan::$9 ]
Allocated zp[1]:250 [ keyboard_event_scan::$15 ]
Allocated zp[1]:251 [ keyboard_event_scan::$16 ]
Allocated zp[1]:252 [ keyboard_event_scan::event_type#0 ]
Allocated zp[1]:253 [ keyboard_event_scan::$23 ]
Allocated zp[1]:254 [ keyboard_event_pressed::$0 ]
Allocated zp[1]:255 [ keyboard_event_pressed::row_bits#0 ]
Allocated zp[1]:256 [ keyboard_event_pressed::$1 ]
Allocated zp[1]:257 [ keyboard_event_pressed::return#10 ]
Allocated zp[1]:258 [ keyboard_matrix_read::return#0 ]
Allocated zp[1]:259 [ form_control::return#0 ]
Allocated zp[1]:260 [ form_mode::$36 ]
Allocated zp[1]:261 [ apply_preset::idx#0 ]
Allocated zp[1]:262 [ form_field_ptr::y#0 ]
Allocated zp[2]:263 [ form_field_ptr::line#0 ]
Allocated zp[1]:265 [ form_field_ptr::x#0 ]
Allocated zp[1]:266 [ form_control::$13 ]
Allocated zp[1]:267 [ keyboard_event_get::return#4 ]
Allocated zp[1]:268 [ form_control::key_event#0 ]
Allocated zp[1]:269 [ form_control::$15 ]
Allocated zp[1]:270 [ form_control::$16 ]
Allocated zp[1]:271 [ form_control::$24 ]
Allocated zp[1]:272 [ form_control::$14 ]
Allocated zp[1]:273 [ form_set_screen::$0 ]
Allocated zp[1]:274 [ form_set_screen::$1 ]
Allocated zp[1]:275 [ print_str_lines::ch#0 ]
Allocated zp[2]:276 [ memset::str#0 ]
Allocated zp[2]:278 [ memset::end#0 ]
Allocated zp[4]:280 [ gfx_init_plane_fill::$0 ]
Allocated zp[2]:284 [ gfx_init_plane_fill::$1 ]
Allocated zp[1]:286 [ gfx_init_plane_fill::gfxbCpuBank#0 ]
Allocated zp[2]:287 [ gfx_init_plane_fill::$4 ]
Allocated zp[2]:289 [ gfx_init_plane_fill::$5 ]
Allocated zp[2]:291 [ gfx_init_plane_fill::gfxb#0 ]
Allocated zp[1]:293 [ gfx_init_plane_horisontal2::$7 ]
Allocated zp[1]:294 [ gfx_init_plane_horisontal2::row#0 ]
Allocated zp[1]:295 [ gfx_init_plane_horisontal::$7 ]
Allocated zp[1]:296 [ gfx_init_plane_charset8::$7 ]
Allocated zp[2]:297 [ gfx_init_plane_8bppchunky::$8 ]
Allocated zp[1]:299 [ gfx_init_plane_8bppchunky::c#0 ]
Allocated zp[1]:300 [ bitmap_line::x0#0 ]
Allocated zp[1]:301 [ bitmap_line::x1#0 ]
Allocated zp[1]:302 [ bitmap_line::y0#0 ]
Allocated zp[1]:303 [ bitmap_line::y1#0 ]
Allocated zp[1]:304 [ bitmap_line::xd#2 ]
Allocated zp[1]:305 [ bitmap_line::yd#2 ]
Allocated zp[1]:306 [ bitmap_line::yd#1 ]
Allocated zp[1]:307 [ bitmap_line::xd#1 ]
Allocated zp[1]:308 [ bitmap_line::yd#10 ]
Allocated zp[1]:309 [ bitmap_line::yd#11 ]
Allocated zp[1]:310 [ bitmap_line_xdyi::$6 ]
Allocated zp[2]:311 [ bitmap_plot::plotter_x#0 ]
Allocated zp[2]:313 [ bitmap_plot::plotter_y#0 ]
Allocated zp[2]:315 [ bitmap_plot::plotter#0 ]
Allocated zp[1]:317 [ bitmap_plot::$1 ]
Allocated zp[1]:318 [ bitmap_line_ydxi::$6 ]
Allocated zp[1]:319 [ bitmap_line_xdyd::$6 ]
Allocated zp[1]:320 [ bitmap_line_ydxd::$6 ]
Allocated zp[2]:321 [ bitmap_clear::bitmap#0 ]
Allocated zp[1]:323 [ bitmap_init::$0 ]
Allocated zp[1]:324 [ bitmap_init::$10 ]
Allocated zp[1]:325 [ bitmap_init::$7 ]
Allocated zp[1]:326 [ bitmap_init::$8 ]
Allocated zp[1]:327 [ bitmap_init::$9 ]
Allocated zp[1]:328 [ gfx_init_screen3::$0 ]
Allocated zp[1]:329 [ gfx_init_screen3::$1 ]
Allocated zp[1]:330 [ gfx_init_screen3::$2 ]
Allocated zp[1]:331 [ gfx_init_screen3::$3 ]
Allocated zp[1]:332 [ gfx_init_screen2::$0 ]
Allocated zp[1]:333 [ gfx_init_screen2::col#0 ]
Allocated zp[1]:334 [ gfx_init_screen2::col2#0 ]
Allocated zp[1]:335 [ gfx_init_screen2::$3 ]
Allocated zp[1]:336 [ gfx_init_screen2::$4 ]
Allocated zp[1]:337 [ gfx_init_screen1::$0 ]
Allocated zp[1]:338 [ gfx_init_screen1::$1 ]
Allocated zp[1]:339 [ gfx_init_screen0::$0 ]
Allocated zp[1]:340 [ gfx_init_screen0::$1 ]
Allocated zp[1]:341 [ gfx_init_screen0::$2 ]
Allocated zp[1]:342 [ gfx_init_screen0::$3 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Interactive Explorer for C64DTV Screen Modes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = 5
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA #1 Port A data direction register.
  .label CIA1_PORT_A_DDR = $dc02
  // CIA #1 Port B data direction register.
  .label CIA1_PORT_B_DDR = $dc03
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // VIC Screens
  .label VIC_SCREEN0 = $4000
  .label VIC_SCREEN1 = $4400
  .label VIC_SCREEN2 = $4800
  .label VIC_SCREEN3 = $4c00
  .label VIC_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VIC_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VIC_BITMAP = $6000
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  // Number of form fields
  .const form_fields_cnt = $24
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  .label print_char_cursor = $34
  .label print_line_cursor = $36
  .label keyboard_events_size = $12
  .label keyboard_modifiers = $f
  .label form_cursor_count = $1f
  .label form_field_idx = $20
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [7] *((const byte*) DTV_FEATURE) ← (const byte) DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // [8] call keyboard_init 
    jsr keyboard_init
    // [9] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [10] call gfx_init 
    // [446] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
  gfx_init_from___b3:
    jsr gfx_init
    // [11] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [11] phi (byte) form_field_idx#1 = (byte) 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    // [11] phi (byte) keyboard_events_size#27 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_events_size
    // [11] phi (signed byte) form_cursor_count#1 = (const signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:main::@3->main::@1#2] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    jmp __b1
    // main::@1
  __b1:
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call form_mode 
    // [252] phi from main::@2 to form_mode [phi:main::@2->form_mode]
  form_mode_from___b2:
    jsr form_mode
    // [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    jmp __b4
    // main::@4
  __b4:
    // [15] call gfx_mode 
    jsr gfx_mode
    // [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [11] phi (byte) form_field_idx#1 = (byte) form_field_idx#18 [phi:main::@4->main::@1#0] -- register_copy 
    // [11] phi (byte) keyboard_events_size#27 = (byte) keyboard_events_size#24 [phi:main::@4->main::@1#1] -- register_copy 
    // [11] phi (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#16 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b1
}
  // gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label __20 = $9e
    .label __22 = $a4
    .label __25 = $ae
    .label __26 = $ac
    .label __27 = $af
    .label __28 = $b0
    .label __29 = $b2
    .label __30 = $b3
    .label __31 = $b4
    .label __32 = $b5
    .label __33 = $b6
    .label __34 = $b7
    .label __36 = $bd
    .label __39 = $c7
    .label __40 = $c5
    .label __41 = $c8
    .label __42 = $c9
    .label __43 = $cb
    .label __44 = $cc
    .label __45 = $cd
    .label __46 = $ce
    .label __47 = $cf
    .label __53 = $d2
    .label __54 = $d4
    .label __55 = $d6
    .label __56 = $d8
    .label __58 = $dc
    .label __59 = $de
    .label __60 = $e0
    .label __61 = $e1
    .label __62 = $e2
    .label __64 = $e5
    .label __65 = $e6
    .label __66 = $e7
    .label __67 = $e8
    .label __68 = $e9
    .label __69 = $ea
    .label __70 = $eb
    .label __71 = $ec
    .label dtv_control = 2
    .label vic_control = 3
    .label plane_a_offs = $9f
    .label plane_a = $a8
    .label plane_b_offs = $b8
    .label plane_b = $c1
    .label vic_colors = 6
    .label col = 8
    .label cx = $a
    .label cy = 5
    .label j = $b
    .label i = $c
    .label keyboard_event = $ee
    .label vic_control2 = 4
    // [16] if(*((const byte[]) form_fields_val+(byte) 5)==(byte) 0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+5
    cmp #0
    beq __b1_from_gfx_mode
    // [17] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
  __b10_from_gfx_mode:
    jmp __b10
    // gfx_mode::@10
  __b10:
    // [18] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
  __b1_from___b10:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (const byte) DTV_LINEAR [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuz1=vbuc1 
    lda #DTV_LINEAR
    sta.z dtv_control
    jmp __b1
    // [18] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  __b1_from_gfx_mode:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (byte) 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z dtv_control
    jmp __b1
    // gfx_mode::@1
  __b1:
    // [19] if(*((const byte[]) form_fields_val+(byte) 8)==(byte) 0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+8
    cmp #0
    beq __b2_from___b1
    jmp __b11
    // gfx_mode::@11
  __b11:
    // [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_BORDER_OFF
    ora.z dtv_control
    sta.z dtv_control
    // [21] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [21] phi (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    jmp __b2
    // gfx_mode::@2
  __b2:
    // [22] if(*((const byte[]) form_fields_val+(byte) 4)==(byte) 0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+4
    cmp #0
    beq __b3_from___b2
    jmp __b12
    // gfx_mode::@12
  __b12:
    // [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_HIGHCOLOR
    ora.z dtv_control
    sta.z dtv_control
    // [24] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [24] phi (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    jmp __b3
    // gfx_mode::@3
  __b3:
    // [25] if(*((const byte[]) form_fields_val+(byte) 9)==(byte) 0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+9
    cmp #0
    beq __b4_from___b3
    jmp __b13
    // gfx_mode::@13
  __b13:
    // [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_OVERSCAN
    ora.z dtv_control
    sta.z dtv_control
    // [27] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [27] phi (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    jmp __b4
    // gfx_mode::@4
  __b4:
    // [28] if(*((const byte[]) form_fields_val+(byte) 6)==(byte) 0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+6
    cmp #0
    beq __b5_from___b4
    jmp __b14
    // gfx_mode::@14
  __b14:
    // [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_COLORRAM_OFF
    ora.z dtv_control
    sta.z dtv_control
    // [30] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [30] phi (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    jmp __b5
    // gfx_mode::@5
  __b5:
    // [31] if(*((const byte[]) form_fields_val+(byte) 7)==(byte) 0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+7
    cmp #0
    beq __b6_from___b5
    jmp __b15
    // gfx_mode::@15
  __b15:
    // [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY -- vbuz1=vbuz1_bor_vbuc1 
    lda #DTV_CHUNKY
    ora.z dtv_control
    sta.z dtv_control
    // [33] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [33] phi (byte) gfx_mode::dtv_control#12 = (byte) gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    jmp __b6
    // gfx_mode::@6
  __b6:
    // [34] *((const byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuz1 
    lda.z dtv_control
    sta DTV_CONTROL
    // [35] if(*((const byte[]) form_fields_val+(byte) 3)==(byte) 0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+3
    cmp #0
    beq __b7_from___b6
    // [36] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
  __b16_from___b6:
    jmp __b16
    // gfx_mode::@16
  __b16:
    // [37] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
  __b7_from___b16:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3|(const byte) VIC_ECM [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuz1=vbuc1 
    lda #VIC_DEN|VIC_RSEL|3|VIC_ECM
    sta.z vic_control
    jmp __b7
    // [37] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  __b7_from___b6:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuz1=vbuc1 
    lda #VIC_DEN|VIC_RSEL|3
    sta.z vic_control
    jmp __b7
    // gfx_mode::@7
  __b7:
    // [38] if(*((const byte[]) form_fields_val+(byte) 1)==(byte) 0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+1
    cmp #0
    beq __b8_from___b7
    jmp __b17
    // gfx_mode::@17
  __b17:
    // [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM -- vbuz1=vbuz1_bor_vbuc1 
    lda #VIC_BMM
    ora.z vic_control
    sta.z vic_control
    // [40] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [40] phi (byte) gfx_mode::vic_control#4 = (byte) gfx_mode::vic_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    jmp __b8
    // gfx_mode::@8
  __b8:
    // [41] *((const byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4 -- _deref_pbuc1=vbuz1 
    lda.z vic_control
    sta VIC_CONTROL
    // [42] if(*((const byte[]) form_fields_val+(byte) 2)==(byte) 0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+2
    cmp #0
    beq __b9_from___b8
    // [43] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
  __b18_from___b8:
    jmp __b18
    // gfx_mode::@18
  __b18:
    // [44] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
  __b9_from___b18:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL|(const byte) VIC_MCM [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuz1=vbuc1 
    lda #VIC_CSEL|VIC_MCM
    sta.z vic_control2
    jmp __b9
    // [44] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  __b9_from___b8:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuz1=vbuc1 
    lda #VIC_CSEL
    sta.z vic_control2
    jmp __b9
    // gfx_mode::@9
  __b9:
    // [45] *((const byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2 -- _deref_pbuc1=vbuz1 
    lda.z vic_control2
    sta VIC_CONTROL2
    // [46] (byte~) gfx_mode::$20 ← *((const byte[]) form_fields_val+(byte) $b) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$b
    asl
    asl
    asl
    asl
    sta.z __20
    // [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte[]) form_fields_val+(byte) $c) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$c
    ora.z __20
    sta.z plane_a_offs
    // [48] (byte) get_plane::idx#0 ← *((const byte[]) form_fields_val+(byte) $a) -- vbuz1=_deref_pbuc1 
    lda form_fields_val+$a
    sta.z get_plane.idx
    // [49] call get_plane 
    // [234] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
  get_plane_from___b9:
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
    // [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 -- vduz1=vduz2 
    lda.z get_plane.return
    sta.z get_plane.return_16
    lda.z get_plane.return+1
    sta.z get_plane.return_16+1
    lda.z get_plane.return+2
    sta.z get_plane.return_16+2
    lda.z get_plane.return+3
    sta.z get_plane.return_16+3
    jmp __b27
    // gfx_mode::@27
  __b27:
    // [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16 -- vduz1=vduz2 
    lda.z get_plane.return_16
    sta.z __22
    lda.z get_plane.return_16+1
    sta.z __22+1
    lda.z get_plane.return_16+2
    sta.z __22+2
    lda.z get_plane.return_16+3
    sta.z __22+3
    // [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 -- vduz1=vduz2_plus_vbuz3 
    lda.z plane_a_offs
    clc
    adc.z __22
    sta.z plane_a
    lda.z __22+1
    adc #0
    sta.z plane_a+1
    lda.z __22+2
    adc #0
    sta.z plane_a+2
    lda.z __22+3
    adc #0
    sta.z plane_a+3
    // [53] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __26
    lda.z plane_a+1
    sta.z __26+1
    // [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$26 -- vbuz1=_lo_vwuz2 
    lda.z __26
    sta.z __25
    // [55] *((const byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$25 -- _deref_pbuc1=vbuz1 
    lda.z __25
    sta DTV_PLANEA_START_LO
    // [56] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 -- vbuz1=_hi_vwuz2 
    lda.z __26+1
    sta.z __27
    // [57] *((const byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$27 -- _deref_pbuc1=vbuz1 
    lda.z __27
    sta DTV_PLANEA_START_MI
    // [58] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda.z plane_a+2
    sta.z __28
    lda.z plane_a+3
    sta.z __28+1
    // [59] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 -- vbuz1=_lo_vwuz2 
    lda.z __28
    sta.z __29
    // [60] *((const byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$29 -- _deref_pbuc1=vbuz1 
    lda.z __29
    sta DTV_PLANEA_START_HI
    // [61] (byte~) gfx_mode::$30 ← *((const byte[]) form_fields_val+(byte) $d) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$d
    asl
    asl
    asl
    asl
    sta.z __30
    // [62] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte[]) form_fields_val+(byte) $e) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$e
    ora.z __30
    sta.z __31
    // [63] *((const byte*) DTV_PLANEA_STEP) ← (byte~) gfx_mode::$31 -- _deref_pbuc1=vbuz1 
    lda.z __31
    sta DTV_PLANEA_STEP
    // [64] (byte~) gfx_mode::$32 ← *((const byte[]) form_fields_val+(byte) $f) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$f
    asl
    asl
    asl
    asl
    sta.z __32
    // [65] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte[]) form_fields_val+(byte) $10) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$10
    ora.z __32
    sta.z __33
    // [66] *((const byte*) DTV_PLANEA_MODULO_LO) ← (byte~) gfx_mode::$33 -- _deref_pbuc1=vbuz1 
    lda.z __33
    sta DTV_PLANEA_MODULO_LO
    // [67] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // [68] (byte~) gfx_mode::$34 ← *((const byte[]) form_fields_val+(byte) $12) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$12
    asl
    asl
    asl
    asl
    sta.z __34
    // [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte[]) form_fields_val+(byte) $13) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$13
    ora.z __34
    sta.z plane_b_offs
    // [70] (byte) get_plane::idx#1 ← *((const byte[]) form_fields_val+(byte) $11) -- vbuz1=_deref_pbuc1 
    lda form_fields_val+$11
    sta.z get_plane.idx
    // [71] call get_plane 
    // [234] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
  get_plane_from___b27:
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
    // [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14 -- vduz1=vduz2 
    lda.z get_plane.return
    sta.z get_plane.return_17
    lda.z get_plane.return+1
    sta.z get_plane.return_17+1
    lda.z get_plane.return+2
    sta.z get_plane.return_17+2
    lda.z get_plane.return+3
    sta.z get_plane.return_17+3
    jmp __b28
    // gfx_mode::@28
  __b28:
    // [73] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17 -- vduz1=vduz2 
    lda.z get_plane.return_17
    sta.z __36
    lda.z get_plane.return_17+1
    sta.z __36+1
    lda.z get_plane.return_17+2
    sta.z __36+2
    lda.z get_plane.return_17+3
    sta.z __36+3
    // [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 -- vduz1=vduz2_plus_vbuz3 
    lda.z plane_b_offs
    clc
    adc.z __36
    sta.z plane_b
    lda.z __36+1
    adc #0
    sta.z plane_b+1
    lda.z __36+2
    adc #0
    sta.z plane_b+2
    lda.z __36+3
    adc #0
    sta.z plane_b+3
    // [75] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __40
    lda.z plane_b+1
    sta.z __40+1
    // [76] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$40 -- vbuz1=_lo_vwuz2 
    lda.z __40
    sta.z __39
    // [77] *((const byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$39 -- _deref_pbuc1=vbuz1 
    lda.z __39
    sta DTV_PLANEB_START_LO
    // [78] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 -- vbuz1=_hi_vwuz2 
    lda.z __40+1
    sta.z __41
    // [79] *((const byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$41 -- _deref_pbuc1=vbuz1 
    lda.z __41
    sta DTV_PLANEB_START_MI
    // [80] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda.z plane_b+2
    sta.z __42
    lda.z plane_b+3
    sta.z __42+1
    // [81] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 -- vbuz1=_lo_vwuz2 
    lda.z __42
    sta.z __43
    // [82] *((const byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$43 -- _deref_pbuc1=vbuz1 
    lda.z __43
    sta DTV_PLANEB_START_HI
    // [83] (byte~) gfx_mode::$44 ← *((const byte[]) form_fields_val+(byte) $14) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$14
    asl
    asl
    asl
    asl
    sta.z __44
    // [84] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte[]) form_fields_val+(byte) $15) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$15
    ora.z __44
    sta.z __45
    // [85] *((const byte*) DTV_PLANEB_STEP) ← (byte~) gfx_mode::$45 -- _deref_pbuc1=vbuz1 
    lda.z __45
    sta DTV_PLANEB_STEP
    // [86] (byte~) gfx_mode::$46 ← *((const byte[]) form_fields_val+(byte) $16) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$16
    asl
    asl
    asl
    asl
    sta.z __46
    // [87] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte[]) form_fields_val+(byte) $17) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$17
    ora.z __46
    sta.z __47
    // [88] *((const byte*) DTV_PLANEB_MODULO_LO) ← (byte~) gfx_mode::$47 -- _deref_pbuc1=vbuz1 
    lda.z __47
    sta DTV_PLANEB_MODULO_LO
    // [89] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [90] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
    // [91] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) VIC_SCREEN0/(word) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VIC_SCREEN0/$4000
    sta CIA2_PORT_A
    // [92] (byte) get_vic_screen::idx#0 ← *((const byte[]) form_fields_val+(byte) $18) -- vbuz1=_deref_pbuc1 
    lda form_fields_val+$18
    sta.z get_vic_screen.idx
    // [93] call get_vic_screen 
    // [220] phi from gfx_mode::@28 to get_vic_screen [phi:gfx_mode::@28->get_vic_screen]
  get_vic_screen_from___b28:
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#0 [phi:gfx_mode::@28->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 -- pbuz1=pbuz2 
    lda.z get_vic_screen.return
    sta.z get_vic_screen.return_10
    lda.z get_vic_screen.return+1
    sta.z get_vic_screen.return_10+1
    jmp __b29
    // gfx_mode::@29
  __b29:
    // [95] (byte*~) gfx_mode::$53 ← (byte*) get_vic_screen::return#10 -- pbuz1=pbuz2 
    lda.z get_vic_screen.return_10
    sta.z __53
    lda.z get_vic_screen.return_10+1
    sta.z __53+1
    // [96] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$53 & (word) $3fff -- vwuz1=vwuz2_band_vwuc1 
    lda.z __53
    and #<$3fff
    sta.z __54
    lda.z __53+1
    and #>$3fff
    sta.z __54+1
    // [97] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte) 6 -- vwuz1=vwuz2_ror_6 
    lda.z __54+1
    lsr
    sta.z __55+1
    lda.z __54
    ror
    sta.z __55
    lsr.z __55+1
    ror.z __55
    lsr.z __55+1
    ror.z __55
    lsr.z __55+1
    ror.z __55
    lsr.z __55+1
    ror.z __55
    lsr.z __55+1
    ror.z __55
    // [98] (byte~) gfx_mode::$56 ← (byte)(word~) gfx_mode::$55 -- vbuz1=_byte_vwuz2 
    lda.z __55
    sta.z __56
    // [99] (byte) get_vic_charset::idx#0 ← *((const byte[]) form_fields_val+(byte) $19) -- vbuz1=_deref_pbuc1 
    lda form_fields_val+$19
    sta.z get_vic_charset.idx
    // [100] call get_vic_charset 
    jsr get_vic_charset
    // [101] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 -- pbuz1=pbuz2 
    lda.z get_vic_charset.return
    sta.z get_vic_charset.return_4
    lda.z get_vic_charset.return+1
    sta.z get_vic_charset.return_4+1
    jmp __b30
    // gfx_mode::@30
  __b30:
    // [102] (byte*~) gfx_mode::$58 ← (byte*) get_vic_charset::return#4 -- pbuz1=pbuz2 
    lda.z get_vic_charset.return_4
    sta.z __58
    lda.z get_vic_charset.return_4+1
    sta.z __58+1
    // [103] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$58 & (word) $3fff -- vwuz1=vwuz2_band_vwuc1 
    lda.z __58
    and #<$3fff
    sta.z __59
    lda.z __58+1
    and #>$3fff
    sta.z __59+1
    // [104] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 -- vbuz1=_hi_vwuz2 
    lda.z __59+1
    sta.z __60
    // [105] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte) 2 -- vbuz1=vbuz2_ror_2 
    lda.z __60
    lsr
    lsr
    sta.z __61
    // [106] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __56
    ora.z __61
    sta.z __62
    // [107] *((const byte*) VIC_MEMORY) ← (byte~) gfx_mode::$62 -- _deref_pbuc1=vbuz1 
    // Set VIC Bank
    // VIC memory
    lda.z __62
    sta VIC_MEMORY
    // [108] (byte) get_vic_screen::idx#1 ← *((const byte[]) form_fields_val+(byte) $1a) -- vbuz1=_deref_pbuc1 
    lda form_fields_val+$1a
    sta.z get_vic_screen.idx
    // [109] call get_vic_screen 
    // [220] phi from gfx_mode::@30 to get_vic_screen [phi:gfx_mode::@30->get_vic_screen]
  get_vic_screen_from___b30:
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#1 [phi:gfx_mode::@30->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 -- pbuz1=pbuz2 
    lda.z get_vic_screen.return
    sta.z get_vic_screen.return_11
    lda.z get_vic_screen.return+1
    sta.z get_vic_screen.return_11+1
    jmp __b31
    // gfx_mode::@31
  __b31:
    // [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 -- pbuz1=pbuz2 
    lda.z get_vic_screen.return_11
    sta.z vic_colors
    lda.z get_vic_screen.return_11+1
    sta.z vic_colors+1
    // [112] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
  __b19_from___b31:
    // [112] phi (byte) gfx_mode::cy#4 = (byte) 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [112] phi (byte*) gfx_mode::col#3 = (const byte*) COLS [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // [112] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
  __b19_from___b21:
    // [112] phi (byte) gfx_mode::cy#4 = (byte) gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
    // [112] phi (byte*) gfx_mode::col#3 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // gfx_mode::@19
  __b19:
    // [113] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
  __b20_from___b19:
    // [113] phi (byte) gfx_mode::cx#2 = (byte) 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // [113] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
  __b20_from___b20:
    // [113] phi (byte) gfx_mode::cx#2 = (byte) gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // gfx_mode::@20
  __b20:
    // [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (vic_colors),y
    ldy #0
    sta (col),y
    // [115] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [116] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2 -- pbuz1=_inc_pbuz1 
    inc.z vic_colors
    bne !+
    inc.z vic_colors+1
  !:
    // [117] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [118] if((byte) gfx_mode::cx#1!=(byte) $28) goto gfx_mode::@20 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b20_from___b20
    jmp __b21
    // gfx_mode::@21
  __b21:
    // [119] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [120] if((byte) gfx_mode::cy#1!=(byte) $19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b19_from___b21
    jmp __b22
    // gfx_mode::@22
  __b22:
    // [121] *((const byte*) BORDERCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta BORDERCOL
    // [122] (byte~) gfx_mode::$64 ← *((const byte[]) form_fields_val+(byte) $1c) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$1c
    asl
    asl
    asl
    asl
    sta.z __64
    // [123] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte[]) form_fields_val+(byte) $1d) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$1d
    ora.z __64
    sta.z __65
    // [124] *((const byte*) BGCOL1) ← (byte~) gfx_mode::$65 -- _deref_pbuc1=vbuz1 
    lda.z __65
    sta BGCOL1
    // [125] (byte~) gfx_mode::$66 ← *((const byte[]) form_fields_val+(byte) $1e) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$1e
    asl
    asl
    asl
    asl
    sta.z __66
    // [126] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte[]) form_fields_val+(byte) $1f) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$1f
    ora.z __66
    sta.z __67
    // [127] *((const byte*) BGCOL2) ← (byte~) gfx_mode::$67 -- _deref_pbuc1=vbuz1 
    lda.z __67
    sta BGCOL2
    // [128] (byte~) gfx_mode::$68 ← *((const byte[]) form_fields_val+(byte) $20) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$20
    asl
    asl
    asl
    asl
    sta.z __68
    // [129] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte[]) form_fields_val+(byte) $21) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$21
    ora.z __68
    sta.z __69
    // [130] *((const byte*) BGCOL3) ← (byte~) gfx_mode::$69 -- _deref_pbuc1=vbuz1 
    lda.z __69
    sta BGCOL3
    // [131] (byte~) gfx_mode::$70 ← *((const byte[]) form_fields_val+(byte) $22) << (byte) 4 -- vbuz1=_deref_pbuc1_rol_4 
    lda form_fields_val+$22
    asl
    asl
    asl
    asl
    sta.z __70
    // [132] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte[]) form_fields_val+(byte) $23) -- vbuz1=vbuz2_bor__deref_pbuc1 
    lda form_fields_val+$23
    ora.z __70
    sta.z __71
    // [133] *((const byte*) BGCOL4) ← (byte~) gfx_mode::$71 -- _deref_pbuc1=vbuz1 
    lda.z __71
    sta BGCOL4
    // [134] if(*((const byte[]) form_fields_val+(byte) $1b)==(byte) 0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_fields_val+$1b
    cmp #0
    beq __b24_from___b22
    // [135] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
  __b23_from___b22:
    // [135] phi (byte) gfx_mode::j#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuz1=vbuc1 
    lda #0
    sta.z j
    jmp __b23
  // DTV Palette - Grey Tones
    // [135] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
  __b23_from___b23:
    // [135] phi (byte) gfx_mode::j#2 = (byte) gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    jmp __b23
    // gfx_mode::@23
  __b23:
    // [136] *((const byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2 -- pbuc1_derefidx_vbuz1=vbuz1 
    ldy.z j
    tya
    sta DTV_PALETTE,y
    // [137] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2 -- vbuz1=_inc_vbuz1 
    inc.z j
    // [138] if((byte) gfx_mode::j#1!=(byte) $10) goto gfx_mode::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z j
    bne __b23_from___b23
    jmp __b25
    // gfx_mode::@25
  __b25:
    // [139] if(*((const byte*) RASTER)!=(byte) $ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b25
    // [140] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
  __b26_from___b25:
    jmp __b26
    // gfx_mode::@26
  __b26:
    // [141] call keyboard_event_scan 
    // [157] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
  keyboard_event_scan_from___b26:
    // [157] phi (byte) keyboard_events_size#99 = (byte) keyboard_events_size#24 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [142] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
  __b32_from___b26:
    jmp __b32
    // gfx_mode::@32
  __b32:
    // [143] call keyboard_event_get 
    jsr keyboard_event_get
    // [144] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return
    sta.z keyboard_event_get.return_3
    jmp __b33
    // gfx_mode::@33
  __b33:
    // [145] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return_3
    sta.z keyboard_event
    // [146] if((byte) gfx_mode::keyboard_event#0==(const byte) KEY_SPACE) goto gfx_mode::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #KEY_SPACE
    cmp.z keyboard_event
    beq __breturn
    jmp __b25
    // gfx_mode::@return
  __breturn:
    // [147] return 
    rts
  // DTV Palette - default
    // [148] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  __b24_from___b22:
    // [148] phi (byte) gfx_mode::i#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b24
    // [148] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
  __b24_from___b24:
    // [148] phi (byte) gfx_mode::i#2 = (byte) gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    jmp __b24
    // gfx_mode::@24
  __b24:
    // [149] *((const byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
    // [150] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [151] if((byte) gfx_mode::i#1!=(byte) $10) goto gfx_mode::@24 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne __b24_from___b24
    jmp __b25
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    .label return = $d
    .label return_3 = $ed
    .label return_4 = $10b
    // [152] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq __breturn_from_keyboard_event_get
    jmp __b1
    // keyboard_event_get::@1
  __b1:
    // [153] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [154] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events + (byte) keyboard_events_size#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    sta.z return
    // [155] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  __breturn_from___b1:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp __breturn
    // [155] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __breturn_from_keyboard_event_get:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuz1=vbuc1 
    lda #$ff
    sta.z return
    jmp __breturn
    // keyboard_event_get::@return
  __breturn:
    // [156] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label __0 = $f3
    .label __3 = $f5
    .label __6 = $f7
    .label __9 = $f9
    .label __15 = $fa
    .label __16 = $fb
    .label __23 = $fd
    .label row_scan = $f1
    .label keycode = $11
    .label row = $e
    .label col = $10
    .label event_type = $fc
    // [158] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  __b7_from_keyboard_event_scan:
    // [158] phi (byte) keyboard_events_size#109 = (byte) keyboard_events_size#99 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp __b7
    // [158] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  __b7_from___b8:
    // [158] phi (byte) keyboard_events_size#109 = (byte) keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp __b7
    // keyboard_event_scan::@7
  __b7:
    // [159] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuz1=vbuz2 
    lda.z row
    sta.z keyboard_matrix_read.rowid
    // [160] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [161] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0 -- vbuz1=vbuz2 
    lda.z keyboard_matrix_read.return
    sta.z keyboard_matrix_read.return_2
    jmp __b19
    // keyboard_event_scan::@19
  __b19:
    // [162] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_matrix_read.return_2
    sta.z row_scan
    // [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z row_scan
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b9_from___b19
    jmp __b16
    // keyboard_event_scan::@16
  __b16:
    // [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [165] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  __b8_from___b15:
  __b8_from___b16:
    // [165] phi (byte) keyboard_events_size#100 = (byte) keyboard_events_size#108 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [165] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp __b8
    // keyboard_event_scan::@8
  __b8:
    // [166] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [167] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7_from___b8
    // [168] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  __b17_from___b8:
    jmp __b17
    // keyboard_event_scan::@17
  __b17:
    // [169] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from___b17:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [170] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_10
    sta.z keyboard_event_pressed.return
    jmp __b20
    // keyboard_event_scan::@20
  __b20:
    // [171] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return
    sta.z __0
    // [172] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuz1_eq_0_then_la1 
    lda.z __0
    cmp #0
    beq __b1_from___b20
    // [173] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  __b18_from___b20:
    jmp __b18
    // keyboard_event_scan::@18
  __b18:
    // [174] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
  __b1_from___b18:
    // [174] phi (byte) keyboard_modifiers#18 = (const byte) KEY_MODIFIER_LSHIFT [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuz1=vbuc1 
    lda #KEY_MODIFIER_LSHIFT
    sta.z keyboard_modifiers
    jmp __b1
    // [174] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  __b1_from___b20:
    // [174] phi (byte) keyboard_modifiers#18 = (byte) 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_modifiers
    jmp __b1
    // keyboard_event_scan::@1
  __b1:
    // [175] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from___b1:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [176] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_10
    sta.z keyboard_event_pressed.return_1
    jmp __b21
    // keyboard_event_scan::@21
  __b21:
    // [177] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_1
    sta.z __3
    // [178] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuz1_eq_0_then_la1 
    lda.z __3
    cmp #0
    beq __b2_from___b21
    jmp __b4
    // keyboard_event_scan::@4
  __b4:
    // [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_RSHIFT
    ora.z keyboard_modifiers
    sta.z keyboard_modifiers
    // [180] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  __b2_from___b21:
  __b2_from___b4:
    // [180] phi (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#18 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    jmp __b2
    // keyboard_event_scan::@2
  __b2:
    // [181] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from___b2:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [182] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_10
    sta.z keyboard_event_pressed.return_2
    jmp __b22
    // keyboard_event_scan::@22
  __b22:
    // [183] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_2
    sta.z __6
    // [184] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuz1_eq_0_then_la1 
    lda.z __6
    cmp #0
    beq __b3_from___b22
    jmp __b5
    // keyboard_event_scan::@5
  __b5:
    // [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_CTRL
    ora.z keyboard_modifiers
    sta.z keyboard_modifiers
    // [186] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  __b3_from___b22:
  __b3_from___b5:
    // [186] phi (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#19 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    jmp __b3
    // keyboard_event_scan::@3
  __b3:
    // [187] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from___b3:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [188] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_10
    sta.z keyboard_event_pressed.return_3
    jmp __b23
    // keyboard_event_scan::@23
  __b23:
    // [189] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3 -- vbuz1=vbuz2 
    lda.z keyboard_event_pressed.return_3
    sta.z __9
    // [190] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuz1_eq_0_then_la1 
    lda.z __9
    cmp #0
    beq __breturn_from___b23
    jmp __b6
    // keyboard_event_scan::@6
  __b6:
    // [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE -- vbuz1=vbuz1_bor_vbuc1 
    lda #KEY_MODIFIER_COMMODORE
    ora.z keyboard_modifiers
    sta.z keyboard_modifiers
    // [192] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
  __breturn_from___b23:
  __breturn_from___b6:
    // [192] phi (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#20 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    jmp __breturn
    // keyboard_event_scan::@return
  __breturn:
    // [193] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [194] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  __b9_from___b10:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#108 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp __b9
    // [194] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b9_from___b19:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#109 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    jmp __b9
    // keyboard_event_scan::@9
  __b9:
    // [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) -- vbuz1=vbuz2_bxor_pbuc1_derefidx_vbuz3 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    sta.z __15
    // [196] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z __15
    ldy.z col
    and keyboard_matrix_col_bitmask,y
    sta.z __16
    // [197] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuz1_eq_0_then_la1 
    lda.z __16
    cmp #0
    beq __b10_from___b9
    jmp __b12
    // keyboard_event_scan::@12
  __b12:
    // [198] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10_from___b12
    jmp __b13
    // keyboard_event_scan::@13
  __b13:
    // [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z row_scan
    ldy.z col
    and keyboard_matrix_col_bitmask,y
    sta.z event_type
    // [200] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuz1_eq_0_then_la1 
    lda.z event_type
    cmp #0
    beq __b11
    jmp __b14
    // keyboard_event_scan::@14
  __b14:
    // [201] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [202] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [203] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  __b10_from___b11:
  __b10_from___b12:
  __b10_from___b14:
  __b10_from___b9:
    // [203] phi (byte) keyboard_events_size#108 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp __b10
    // keyboard_event_scan::@10
  __b10:
    // [204] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // [205] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [206] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z col
    bne __b9_from___b10
    jmp __b15
    // keyboard_event_scan::@15
  __b15:
    // [207] *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8_from___b15
    // keyboard_event_scan::@11
  __b11:
    // [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuz1=vbuz2_bor_vbuc1 
    lda #$40
    ora.z keycode
    sta.z __23
    // [209] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key released
    lda.z __23
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [210] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10_from___b11
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zeropage($13) keycode)
keyboard_event_pressed: {
    .label __0 = $fe
    .label __1 = $100
    .label return = $f2
    .label return_1 = $f4
    .label return_2 = $f6
    .label return_3 = $f8
    .label row_bits = $ff
    .label keycode = $13
    .label return_10 = $101
    // [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 -- vbuz1=vbuz2_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    sta.z __0
    // [213] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z __0
    lda keyboard_scan_values,y
    sta.z row_bits
    // [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z keycode
    sta.z __1
    // [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) -- vbuz1=vbuz2_band_pbuc1_derefidx_vbuz3 
    lda.z row_bits
    ldy.z __1
    and keyboard_matrix_col_bitmask,y
    sta.z return_10
    jmp __breturn
    // keyboard_event_pressed::@return
  __breturn:
    // [216] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte zeropage($ef) rowid)
keyboard_matrix_read: {
    .label return = $102
    .label rowid = $ef
    .label return_2 = $f0
    // [217] *((const byte*) CIA1_PORT_A) ← *((const byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuz1 
    ldy.z rowid
    lda keyboard_matrix_row_bitmask,y
    sta CIA1_PORT_A
    // [218] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B) -- vbuz1=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    sta.z return
    jmp __breturn
    // keyboard_matrix_read::@return
  __breturn:
    // [219] return 
    rts
}
  // get_vic_screen
// Get the VIC screen address from the screen index
// get_vic_screen(byte zeropage($14) idx)
get_vic_screen: {
    .label return = $15
    .label idx = $14
    .label return_10 = $d0
    .label return_11 = $e3
    // [221] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@return -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __breturn_from_get_vic_screen
    jmp __b2
    // get_vic_screen::@2
  __b2:
    // [222] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    beq __breturn_from___b2
    jmp __b3
    // get_vic_screen::@3
  __b3:
    // [223] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp.z idx
    beq __breturn_from___b3
    jmp __b4
    // get_vic_screen::@4
  __b4:
    // [224] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp.z idx
    beq __breturn_from___b4
    jmp __b5
    // get_vic_screen::@5
  __b5:
    // [225] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #4
    cmp.z idx
    bne __b1_from___b5
    // [227] phi from get_vic_screen::@5 to get_vic_screen::@return [phi:get_vic_screen::@5->get_vic_screen::@return]
  __breturn_from___b5:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN4 [phi:get_vic_screen::@5->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z return
    lda #>VIC_SCREEN4
    sta.z return+1
    jmp __breturn
    // [226] phi from get_vic_screen::@5 to get_vic_screen::@1 [phi:get_vic_screen::@5->get_vic_screen::@1]
  __b1_from___b5:
    jmp __b1
    // get_vic_screen::@1
  __b1:
    // [227] phi from get_vic_screen get_vic_screen::@1 to get_vic_screen::@return [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return]
  __breturn_from_get_vic_screen:
  __breturn_from___b1:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN0 [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@2 to get_vic_screen::@return [phi:get_vic_screen::@2->get_vic_screen::@return]
  __breturn_from___b2:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN1 [phi:get_vic_screen::@2->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@3 to get_vic_screen::@return [phi:get_vic_screen::@3->get_vic_screen::@return]
  __breturn_from___b3:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN2 [phi:get_vic_screen::@3->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@4 to get_vic_screen::@return [phi:get_vic_screen::@4->get_vic_screen::@return]
  __breturn_from___b4:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN3 [phi:get_vic_screen::@4->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    jmp __breturn
    // get_vic_screen::@return
  __breturn:
    // [228] return 
    rts
}
  // get_vic_charset
// Get the VIC charset/bitmap address from the index
// get_vic_charset(byte zeropage($d9) idx)
get_vic_charset: {
    .label return = $17
    .label idx = $d9
    .label return_4 = $da
    // [229] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@return -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __breturn_from_get_vic_charset
    jmp __b2
    // get_vic_charset::@2
  __b2:
    // [230] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    bne __b1_from___b2
    // [232] phi from get_vic_charset::@2 to get_vic_charset::@return [phi:get_vic_charset::@2->get_vic_charset::@return]
  __breturn_from___b2:
    // [232] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_BITMAP [phi:get_vic_charset::@2->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    jmp __breturn
    // [231] phi from get_vic_charset::@2 to get_vic_charset::@1 [phi:get_vic_charset::@2->get_vic_charset::@1]
  __b1_from___b2:
    jmp __b1
    // get_vic_charset::@1
  __b1:
    // [232] phi from get_vic_charset get_vic_charset::@1 to get_vic_charset::@return [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return]
  __breturn_from_get_vic_charset:
  __breturn_from___b1:
    // [232] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_CHARSET_ROM [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    jmp __breturn
    // get_vic_charset::@return
  __breturn:
    // [233] return 
    rts
}
  // get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte zeropage($19) idx)
get_plane: {
    .label return = $1a
    .label idx = $19
    .label return_16 = $a0
    .label return_17 = $b9
    // [235] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@return -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __breturn_from_get_plane
    jmp __b2
    // get_plane::@2
  __b2:
    // [236] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    beq __breturn_from___b2
    jmp __b3
    // get_plane::@3
  __b3:
    // [237] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp.z idx
    beq __breturn_from___b3
    jmp __b4
    // get_plane::@4
  __b4:
    // [238] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp.z idx
    beq __breturn_from___b4
    jmp __b5
    // get_plane::@5
  __b5:
    // [239] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp.z idx
    beq __breturn_from___b5
    jmp __b6
    // get_plane::@6
  __b6:
    // [240] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #5
    cmp.z idx
    beq __breturn_from___b6
    jmp __b7
    // get_plane::@7
  __b7:
    // [241] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #6
    cmp.z idx
    beq __breturn_from___b7
    jmp __b8
    // get_plane::@8
  __b8:
    // [242] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z idx
    beq __breturn_from___b8
    jmp __b9
    // get_plane::@9
  __b9:
    // [243] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z idx
    beq __breturn_from___b9
    jmp __b10
    // get_plane::@10
  __b10:
    // [244] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z idx
    beq __breturn_from___b10
    jmp __b11
    // get_plane::@11
  __b11:
    // [245] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z idx
    beq __breturn_from___b11
    jmp __b12
    // get_plane::@12
  __b12:
    // [246] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #$b
    cmp.z idx
    beq __breturn_from___b12
    jmp __b13
    // get_plane::@13
  __b13:
    // [247] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@return -- vbuz1_eq_vbuc1_then_la1 
    lda #$c
    cmp.z idx
    beq __breturn_from___b13
    jmp __b14
    // get_plane::@14
  __b14:
    // [248] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$d
    cmp.z idx
    bne __b1_from___b14
    // [250] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
  __breturn_from___b14:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_FULL [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z return
    lda #>PLANE_FULL
    sta.z return+1
    lda #<PLANE_FULL>>$10
    sta.z return+2
    lda #>PLANE_FULL>>$10
    sta.z return+3
    jmp __breturn
    // [249] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
  __b1_from___b14:
    jmp __b1
    // get_plane::@1
  __b1:
    // [250] phi from get_plane::@1 to get_plane::@return [phi:get_plane::@1->get_plane::@return]
  __breturn_from___b1:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN0 [phi:get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    lda #<VIC_SCREEN0>>$10
    sta.z return+2
    lda #>VIC_SCREEN0>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane to get_plane::@return [phi:get_plane->get_plane::@return]
  __breturn_from_get_plane:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN0 [phi:get_plane->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    lda #<VIC_SCREEN0>>$10
    sta.z return+2
    lda #>VIC_SCREEN0>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  __breturn_from___b10:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_HORISONTAL2 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta.z return
    lda #>PLANE_HORISONTAL2
    sta.z return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  __breturn_from___b11:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_VERTICAL2 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z return
    lda #>PLANE_VERTICAL2
    sta.z return+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  __breturn_from___b12:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_CHARSET8 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta.z return
    lda #>PLANE_CHARSET8
    sta.z return+1
    lda #<PLANE_CHARSET8>>$10
    sta.z return+2
    lda #>PLANE_CHARSET8>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  __breturn_from___b13:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_BLANK [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z return
    lda #>PLANE_BLANK
    sta.z return+1
    lda #<PLANE_BLANK>>$10
    sta.z return+2
    lda #>PLANE_BLANK>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  __breturn_from___b2:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN1 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    lda #<VIC_SCREEN1>>$10
    sta.z return+2
    lda #>VIC_SCREEN1>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  __breturn_from___b3:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN2 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    lda #<VIC_SCREEN2>>$10
    sta.z return+2
    lda #>VIC_SCREEN2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  __breturn_from___b4:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN3 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    lda #<VIC_SCREEN3>>$10
    sta.z return+2
    lda #>VIC_SCREEN3>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  __breturn_from___b5:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_BITMAP [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    lda #<VIC_BITMAP>>$10
    sta.z return+2
    lda #>VIC_BITMAP>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  __breturn_from___b6:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_CHARSET_ROM [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    lda #<VIC_CHARSET_ROM>>$10
    sta.z return+2
    lda #>VIC_CHARSET_ROM>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  __breturn_from___b7:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_8BPP_CHUNKY [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta.z return
    lda #>PLANE_8BPP_CHUNKY
    sta.z return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta.z return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  __breturn_from___b8:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_HORISONTAL [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta.z return
    lda #>PLANE_HORISONTAL
    sta.z return+1
    lda #<PLANE_HORISONTAL>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  __breturn_from___b9:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_VERTICAL [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta.z return
    lda #>PLANE_VERTICAL
    sta.z return+1
    lda #<PLANE_VERTICAL>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL>>$10
    sta.z return+3
    jmp __breturn
    // get_plane::@return
  __breturn:
    // [251] return 
    rts
}
  // form_mode
// Show the form - and let the user change values
form_mode: {
    .label __36 = $104
    .label i = $1e
    .label preset_current = $21
    // [253] call print_set_screen 
    // [444] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
  print_set_screen_from_form_mode:
    // [444] phi (byte*) print_set_screen::screen#2 = (const byte*) COLS [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z print_set_screen.screen
    lda #>COLS
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [254] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
  __b8_from_form_mode:
    jmp __b8
    // form_mode::@8
  __b8:
    // [255] call print_cls 
    jsr print_cls
    // [256] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
  __b9_from___b8:
    jmp __b9
    // form_mode::@9
  __b9:
    // [257] call print_str_lines 
    // [412] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
  print_str_lines_from___b9:
    // [412] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_COLS [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta.z print_str_lines.str
    lda #>FORM_COLS
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [258] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
  __b10_from___b9:
    jmp __b10
    // form_mode::@10
  __b10:
    // [259] call print_set_screen 
    // [444] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
  print_set_screen_from___b10:
    // [444] phi (byte*) print_set_screen::screen#2 = (const byte*) FORM_SCREEN [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z print_set_screen.screen
    lda #>FORM_SCREEN
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [260] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
  __b11_from___b10:
    jmp __b11
    // form_mode::@11
  __b11:
    // [261] call print_cls 
    jsr print_cls
    // [262] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
  __b12_from___b11:
    jmp __b12
    // form_mode::@12
  __b12:
    // [263] call print_str_lines 
    // [412] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
  print_str_lines_from___b12:
    // [412] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_TEXT [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta.z print_str_lines.str
    lda #>FORM_TEXT
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [264] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
  __b13_from___b12:
    jmp __b13
    // form_mode::@13
  __b13:
    // [265] call form_set_screen 
    // [402] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
  form_set_screen_from___b13:
    jsr form_set_screen
    // [266] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
  __b14_from___b13:
    jmp __b14
    // form_mode::@14
  __b14:
    // [267] call form_render_values 
    // [328] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
  form_render_values_from___b14:
    jsr form_render_values
    jmp __b15
    // form_mode::@15
  __b15:
    // [268] (byte) render_preset_name::idx#0 ← *((const byte[]) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z render_preset_name.idx
    // [269] call render_preset_name 
    // [304] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
  render_preset_name_from___b15:
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b16
    // form_mode::@16
  __b16:
    // [270] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [271] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // [272] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [273] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
    // [274] *((const byte*) CIA2_PORT_A) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3
    sta CIA2_PORT_A
    // [275] *((const byte*) DTV_CONTROL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
    // [276] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [277] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // [278] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [279] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #0
    sta DTV_PLANEA_START_LO
    // [280] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) FORM_SCREEN -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
    // [281] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [282] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
  __b1_from___b16:
    // [282] phi (byte) form_mode::i#2 = (byte) 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b1
  // DTV Palette - default
    // [282] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
  __b1_from___b1:
    // [282] phi (byte) form_mode::i#2 = (byte) form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    jmp __b1
    // form_mode::@1
  __b1:
    // [283] *((const byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z i
    lda DTV_PALETTE_DEFAULT,y
    sta DTV_PALETTE,y
    // [284] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [285] if((byte) form_mode::i#1!=(byte) $10) goto form_mode::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$10
    cmp.z i
    bne __b1_from___b1
    jmp __b2
    // form_mode::@2
  __b2:
    // [286] *((const byte*) BGCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
    // [287] *((const byte*) BORDERCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
    // [288] (byte) form_mode::preset_current#0 ← *((const byte[]) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [289] phi from form_mode::@19 form_mode::@2 form_mode::@6 to form_mode::@3 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3]
  __b3_from___b19:
  __b3_from___b2:
  __b3_from___b6:
    // [289] phi (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#0] -- register_copy 
    // [289] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#1] -- register_copy 
    // [289] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#2] -- register_copy 
    // [289] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#3] -- register_copy 
    jmp __b3
  // Let the user change values in the form
    // form_mode::@3
  __b3:
    jmp __b4
    // form_mode::@4
  __b4:
    // [290] if(*((const byte*) RASTER)!=(byte) $ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b4
    // [291] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
  __b5_from___b4:
    jmp __b5
    // form_mode::@5
  __b5:
    // [292] call form_control 
    jsr form_control
    // [293] (byte) form_control::return#0 ← (byte) form_control::return#2 -- vbuz1=vbuz2 
    lda.z form_control.return_2
    sta.z form_control.return
    jmp __b17
    // form_mode::@17
  __b17:
    // [294] (byte~) form_mode::$36 ← (byte) form_control::return#0 -- vbuz1=vbuz2 
    lda.z form_control.return
    sta.z __36
    // [295] if((byte~) form_mode::$36==(byte) 0) goto form_mode::@6 -- vbuz1_eq_0_then_la1 
    lda.z __36
    cmp #0
    beq __b6
    jmp __breturn
    // form_mode::@return
  __breturn:
    // [296] return 
    rts
    // form_mode::@6
  __b6:
    // [297] if((byte) form_mode::preset_current#6==*((const byte[]) form_fields_val)) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp.z preset_current
    beq __b3_from___b6
    jmp __b7
    // form_mode::@7
  __b7:
    // [298] (byte) apply_preset::idx#0 ← *((const byte[]) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z apply_preset.idx
    // [299] call apply_preset 
    jsr apply_preset
    jmp __b18
    // form_mode::@18
  __b18:
    // [300] (byte) form_mode::preset_current#1 ← *((const byte[]) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [301] call form_render_values 
    // [328] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
  form_render_values_from___b18:
    jsr form_render_values
    jmp __b19
    // form_mode::@19
  __b19:
    // [302] (byte) render_preset_name::idx#1 ← *((const byte[]) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z render_preset_name.idx
    // [303] call render_preset_name 
    // [304] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
  render_preset_name_from___b19:
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b3_from___b19
}
  // render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte zeropage($22) idx)
render_preset_name: {
    .label idx = $22
    .label name = $23
    // [305] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@2 -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __b2_from_render_preset_name
    jmp __b3
    // render_preset_name::@3
  __b3:
    // [306] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    beq __b2_from___b3
    jmp __b4
    // render_preset_name::@4
  __b4:
    // [307] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp.z idx
    beq __b2_from___b4
    jmp __b5
    // render_preset_name::@5
  __b5:
    // [308] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp.z idx
    beq __b2_from___b5
    jmp __b6
    // render_preset_name::@6
  __b6:
    // [309] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp.z idx
    beq __b2_from___b6
    jmp __b7
    // render_preset_name::@7
  __b7:
    // [310] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #5
    cmp.z idx
    beq __b2_from___b7
    jmp __b8
    // render_preset_name::@8
  __b8:
    // [311] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #6
    cmp.z idx
    beq __b2_from___b8
    jmp __b9
    // render_preset_name::@9
  __b9:
    // [312] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z idx
    beq __b2_from___b9
    jmp __b10
    // render_preset_name::@10
  __b10:
    // [313] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z idx
    beq __b2_from___b10
    jmp __b11
    // render_preset_name::@11
  __b11:
    // [314] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z idx
    beq __b2_from___b11
    jmp __b12
    // render_preset_name::@12
  __b12:
    // [315] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z idx
    beq __b1_from___b12
    // [317] phi from render_preset_name render_preset_name::@12 to render_preset_name::@2 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2]
  __b2_from_render_preset_name:
  __b2_from___b12:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta.z name
    lda #>name_1
    sta.z name+1
    jmp __b2
    // [316] phi from render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name::@12->render_preset_name::@1]
  __b1_from___b12:
    jmp __b1
    // render_preset_name::@1
  __b1:
    // [317] phi from render_preset_name::@1 to render_preset_name::@2 [phi:render_preset_name::@1->render_preset_name::@2]
  __b2_from___b1:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#11 [phi:render_preset_name::@1->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta.z name
    lda #>name_11
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@10 to render_preset_name::@2 [phi:render_preset_name::@10->render_preset_name::@2]
  __b2_from___b10:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#9 [phi:render_preset_name::@10->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta.z name
    lda #>name_9
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@11 to render_preset_name::@2 [phi:render_preset_name::@11->render_preset_name::@2]
  __b2_from___b11:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#10 [phi:render_preset_name::@11->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta.z name
    lda #>name_10
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@3 to render_preset_name::@2 [phi:render_preset_name::@3->render_preset_name::@2]
  __b2_from___b3:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#2 [phi:render_preset_name::@3->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta.z name
    lda #>name_2
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@4 to render_preset_name::@2 [phi:render_preset_name::@4->render_preset_name::@2]
  __b2_from___b4:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#3 [phi:render_preset_name::@4->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta.z name
    lda #>name_3
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@5 to render_preset_name::@2 [phi:render_preset_name::@5->render_preset_name::@2]
  __b2_from___b5:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#4 [phi:render_preset_name::@5->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta.z name
    lda #>name_4
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@6 to render_preset_name::@2 [phi:render_preset_name::@6->render_preset_name::@2]
  __b2_from___b6:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#5 [phi:render_preset_name::@6->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta.z name
    lda #>name_5
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@7 to render_preset_name::@2 [phi:render_preset_name::@7->render_preset_name::@2]
  __b2_from___b7:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#6 [phi:render_preset_name::@7->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta.z name
    lda #>name_6
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@8 to render_preset_name::@2 [phi:render_preset_name::@8->render_preset_name::@2]
  __b2_from___b8:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#7 [phi:render_preset_name::@8->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta.z name
    lda #>name_7
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@9 to render_preset_name::@2 [phi:render_preset_name::@9->render_preset_name::@2]
  __b2_from___b9:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#8 [phi:render_preset_name::@9->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta.z name
    lda #>name_8
    sta.z name+1
    jmp __b2
    // render_preset_name::@2
  __b2:
    // [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 -- pbuz1=pbuz2 
    lda.z name
    sta.z print_str_at.str
    lda.z name+1
    sta.z print_str_at.str+1
    // [319] call print_str_at 
    // [321] phi from render_preset_name::@2 to print_str_at [phi:render_preset_name::@2->print_str_at]
  print_str_at_from___b2:
    jsr print_str_at
    jmp __breturn
    // render_preset_name::@return
  __breturn:
    // [320] return 
    rts
    name_1: .text "Standard Charset              "
    .byte 0
    name_2: .text "Extended Color Charset        "
    .byte 0
    name_3: .text "Standard Bitmap               "
    .byte 0
    name_4: .text "Multicolor Bitmap             "
    .byte 0
    name_5: .text "Hicolor Charset               "
    .byte 0
    name_6: .text "Hicolor Extended Color Charset"
    .byte 0
    name_7: .text "Twoplane Bitmap               "
    .byte 0
    name_8: .text "Chunky 8bpp                   "
    .byte 0
    name_9: .text "Sixs Fred                     "
    .byte 0
    name_10: .text "Sixs Fred 2                   "
    .byte 0
    name_11: .text "8bpp Pixel Cell               "
    .byte 0
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zeropage($25) str, byte* zeropage($27) at)
print_str_at: {
    .label at = $27
    .label str = $25
    // [322] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
  __b1_from_print_str_at:
    // [322] phi (byte*) print_str_at::at#2 = (const byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta.z at
    lda #>FORM_SCREEN+$28*2+$a
    sta.z at+1
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    jmp __b1
    // print_str_at::@1
  __b1:
    // [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str_at::@return
  __breturn:
    // [324] return 
    rts
    // print_str_at::@2
  __b2:
    // [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (at),y
    // [326] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [327] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [322] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
  __b1_from___b2:
    // [322] phi (byte*) print_str_at::at#2 = (byte*) print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
}
  // form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    .label idx = $29
    // [329] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
  __b1_from_form_render_values:
    // [329] phi (byte) form_render_values::idx#2 = (byte) 0 [phi:form_render_values->form_render_values::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    jmp __b1
    // form_render_values::@1
  __b1:
    // [330] if((byte) form_render_values::idx#2<(const byte) form_fields_cnt) goto form_render_values::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z idx
    cmp #form_fields_cnt
    bcc __b2
    jmp __breturn
    // form_render_values::@return
  __breturn:
    // [331] return 
    rts
    // form_render_values::@2
  __b2:
    // [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2 -- vbuz1=vbuz2 
    lda.z idx
    sta.z form_field_ptr.field_idx
    // [333] call form_field_ptr 
    // [336] phi from form_render_values::@2 to form_field_ptr [phi:form_render_values::@2->form_field_ptr]
  form_field_ptr_from___b2:
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#0 [phi:form_render_values::@2->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    jmp __b3
    // form_render_values::@3
  __b3:
    // [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_render_values::idx#2)) -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuz3) 
    ldx.z idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [335] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [329] phi from form_render_values::@3 to form_render_values::@1 [phi:form_render_values::@3->form_render_values::@1]
  __b1_from___b3:
    // [329] phi (byte) form_render_values::idx#2 = (byte) form_render_values::idx#1 [phi:form_render_values::@3->form_render_values::@1#0] -- register_copy 
    jmp __b1
}
  // form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte zeropage($2a) field_idx)
form_field_ptr: {
    .label y = $106
    .label line = $107
    .label x = $109
    .label field_idx = $2a
    // [337] (byte) form_field_ptr::y#0 ← *((const byte[]) form_fields_y + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z field_idx
    lda form_fields_y,y
    sta.z y
    // [338] (word) form_field_ptr::line#0 ← *((const byte[$19]) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo + (byte) form_field_ptr::y#0) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy.z y
    lda form_line_hi,y
    sta.z line+1
    lda form_line_lo,y
    sta.z line
    // [339] (byte) form_field_ptr::x#0 ← *((const byte[]) form_fields_x + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z field_idx
    lda form_fields_x,y
    sta.z x
    jmp __breturn
    // form_field_ptr::@return
  __breturn:
    // [340] return 
    rts
}
  // apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte zeropage($105) idx)
apply_preset: {
    .label i = $2d
    .label idx = $105
    .label preset = $2b
    // [341] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@2 -- vbuz1_eq_0_then_la1 
    lda.z idx
    cmp #0
    beq __b2_from_apply_preset
    jmp __b3
    // apply_preset::@3
  __b3:
    // [342] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #1
    cmp.z idx
    beq __b2_from___b3
    jmp __b4
    // apply_preset::@4
  __b4:
    // [343] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #2
    cmp.z idx
    beq __b2_from___b4
    jmp __b5
    // apply_preset::@5
  __b5:
    // [344] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #3
    cmp.z idx
    beq __b2_from___b5
    jmp __b6
    // apply_preset::@6
  __b6:
    // [345] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #4
    cmp.z idx
    beq __b2_from___b6
    jmp __b7
    // apply_preset::@7
  __b7:
    // [346] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #5
    cmp.z idx
    beq __b2_from___b7
    jmp __b8
    // apply_preset::@8
  __b8:
    // [347] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #6
    cmp.z idx
    beq __b2_from___b8
    jmp __b9
    // apply_preset::@9
  __b9:
    // [348] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #7
    cmp.z idx
    beq __b2_from___b9
    jmp __b10
    // apply_preset::@10
  __b10:
    // [349] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z idx
    beq __b2_from___b10
    jmp __b11
    // apply_preset::@11
  __b11:
    // [350] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@2 -- vbuz1_eq_vbuc1_then_la1 
    lda #9
    cmp.z idx
    beq __b2_from___b11
    jmp __b12
    // apply_preset::@12
  __b12:
    // [351] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@1 -- vbuz1_eq_vbuc1_then_la1 
    lda #$a
    cmp.z idx
    beq __b1_from___b12
    // [353] phi from apply_preset apply_preset::@12 to apply_preset::@2 [phi:apply_preset/apply_preset::@12->apply_preset::@2]
  __b2_from_apply_preset:
  __b2_from___b12:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_stdchar [phi:apply_preset/apply_preset::@12->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta.z preset
    lda #>preset_stdchar
    sta.z preset+1
    jmp __b2
    // [352] phi from apply_preset::@12 to apply_preset::@1 [phi:apply_preset::@12->apply_preset::@1]
  __b1_from___b12:
    jmp __b1
    // apply_preset::@1
  __b1:
    // [353] phi from apply_preset::@1 to apply_preset::@2 [phi:apply_preset::@1->apply_preset::@2]
  __b2_from___b1:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_8bpppixelcell [phi:apply_preset::@1->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta.z preset
    lda #>preset_8bpppixelcell
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@10 to apply_preset::@2 [phi:apply_preset::@10->apply_preset::@2]
  __b2_from___b10:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_sixsfred [phi:apply_preset::@10->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta.z preset
    lda #>preset_sixsfred
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@11 to apply_preset::@2 [phi:apply_preset::@11->apply_preset::@2]
  __b2_from___b11:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_sixsfred2 [phi:apply_preset::@11->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta.z preset
    lda #>preset_sixsfred2
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@3 to apply_preset::@2 [phi:apply_preset::@3->apply_preset::@2]
  __b2_from___b3:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_ecmchar [phi:apply_preset::@3->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta.z preset
    lda #>preset_ecmchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@4 to apply_preset::@2 [phi:apply_preset::@4->apply_preset::@2]
  __b2_from___b4:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_stdbm [phi:apply_preset::@4->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta.z preset
    lda #>preset_stdbm
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@5 to apply_preset::@2 [phi:apply_preset::@5->apply_preset::@2]
  __b2_from___b5:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_mcbm [phi:apply_preset::@5->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta.z preset
    lda #>preset_mcbm
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@6 to apply_preset::@2 [phi:apply_preset::@6->apply_preset::@2]
  __b2_from___b6:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_hi_stdchar [phi:apply_preset::@6->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta.z preset
    lda #>preset_hi_stdchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@7 to apply_preset::@2 [phi:apply_preset::@7->apply_preset::@2]
  __b2_from___b7:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_hi_ecmchar [phi:apply_preset::@7->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta.z preset
    lda #>preset_hi_ecmchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@8 to apply_preset::@2 [phi:apply_preset::@8->apply_preset::@2]
  __b2_from___b8:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_twoplane [phi:apply_preset::@8->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta.z preset
    lda #>preset_twoplane
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@9 to apply_preset::@2 [phi:apply_preset::@9->apply_preset::@2]
  __b2_from___b9:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_chunky [phi:apply_preset::@9->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta.z preset
    lda #>preset_chunky
    sta.z preset+1
    jmp __b2
    // apply_preset::@2
  __b2:
    // [354] phi from apply_preset::@2 to apply_preset::@13 [phi:apply_preset::@2->apply_preset::@13]
  __b13_from___b2:
    // [354] phi (byte) apply_preset::i#2 = (byte) 0 [phi:apply_preset::@2->apply_preset::@13#0] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp __b13
  // Copy preset values into the fields
    // apply_preset::@13
  __b13:
    // [355] if((byte) apply_preset::i#2!=(const byte) form_fields_cnt) goto apply_preset::@14 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z i
    bne __b14
    jmp __breturn
    // apply_preset::@return
  __breturn:
    // [356] return 
    rts
    // apply_preset::@14
  __b14:
    // [357] *((const byte[]) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) -- pbuc1_derefidx_vbuz1=pbuz2_derefidx_vbuz1 
    ldy.z i
    lda (preset),y
    sta form_fields_val,y
    // [358] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [354] phi from apply_preset::@14 to apply_preset::@13 [phi:apply_preset::@14->apply_preset::@13]
  __b13_from___b14:
    // [354] phi (byte) apply_preset::i#2 = (byte) apply_preset::i#1 [phi:apply_preset::@14->apply_preset::@13#0] -- register_copy 
    jmp __b13
}
  // form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    .label __13 = $10a
    .label __14 = $110
    .label __15 = $10d
    .label __16 = $10e
    .label __24 = $10f
    .label return = $103
    .label key_event = $10c
    .label return_2 = $2e
    // [359] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28 -- vbuz1=vbuz2 
    lda.z form_field_idx
    sta.z form_field_ptr.field_idx
    // [360] call form_field_ptr 
    // [336] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
  form_field_ptr_from_form_control:
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    jmp __b18
    // form_control::@18
  __b18:
    // [361] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21 -- vbsz1=_dec_vbsz1 
    dec.z form_cursor_count
    // [362] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@21 -- vbsz1_ge_0_then_la1 
    lda.z form_cursor_count
    cmp #0
    bpl __b21_from___b18
    // [364] phi from form_control::@18 to form_control::@1 [phi:form_control::@18->form_control::@1]
  __b1_from___b18:
    // [364] phi (signed byte) form_cursor_count#15 = (const signed byte) FORM_CURSOR_BLINK [phi:form_control::@18->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta.z form_cursor_count
    jmp __b1
    // [363] phi from form_control::@18 to form_control::@21 [phi:form_control::@18->form_control::@21]
  __b21_from___b18:
    jmp __b21
    // form_control::@21
  __b21:
    // [364] phi from form_control::@21 to form_control::@1 [phi:form_control::@21->form_control::@1]
  __b1_from___b21:
    // [364] phi (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#5 [phi:form_control::@21->form_control::@1#0] -- register_copy 
    jmp __b1
    // form_control::@1
  __b1:
    // [365] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 -- vbsz1_lt_vbsc1_then_la1 
    lda.z form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bmi __b2
    jmp __b7
    // form_control::@7
  __b7:
    // [366] (byte~) form_control::$13 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f -- vbuz1=pbuz2_derefidx_vbuz3_band_vbuc1 
    lda #$7f
    ldy.z form_field_ptr.x
    and (form_field_ptr.line),y
    sta.z __13
    // [367] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$13 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z __13
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [368] phi from form_control::@2 form_control::@7 to form_control::@3 [phi:form_control::@2/form_control::@7->form_control::@3]
  __b3_from___b2:
  __b3_from___b7:
    jmp __b3
    // form_control::@3
  __b3:
    // [369] call keyboard_event_scan 
    // [157] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
  keyboard_event_scan_from___b3:
    // [157] phi (byte) keyboard_events_size#99 = (byte) keyboard_events_size#47 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [370] phi from form_control::@3 to form_control::@19 [phi:form_control::@3->form_control::@19]
  __b19_from___b3:
    jmp __b19
    // form_control::@19
  __b19:
    // [371] call keyboard_event_get 
    jsr keyboard_event_get
    // [372] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return
    sta.z keyboard_event_get.return_4
    jmp __b20
    // form_control::@20
  __b20:
    // [373] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4 -- vbuz1=vbuz2 
    lda.z keyboard_event_get.return_4
    sta.z key_event
    // [374] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_DOWN) goto form_control::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_CRSR_DOWN
    cmp.z key_event
    bne __b4
    jmp __b8
    // form_control::@8
  __b8:
    // [375] (byte~) form_control::$15 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f -- vbuz1=pbuz2_derefidx_vbuz3_band_vbuc1 
    lda #$7f
    ldy.z form_field_ptr.x
    and (form_field_ptr.line),y
    sta.z __15
    // [376] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$15 -- pbuz1_derefidx_vbuz2=vbuz3 
    // Unblink the cursor
    lda.z __15
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [377] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT -- vbuz1=vbuz2_band_vbuc1 
    lda #KEY_MODIFIER_SHIFT
    and.z keyboard_modifiers
    sta.z __16
    // [378] if((byte~) form_control::$16==(byte) 0) goto form_control::@13 -- vbuz1_eq_0_then_la1 
    lda.z __16
    cmp #0
    beq __b13
    jmp __b9
    // form_control::@9
  __b9:
    // [379] (byte) form_field_idx#6 ← -- (byte) form_field_idx#28 -- vbuz1=_dec_vbuz1 
    dec.z form_field_idx
    // [380] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z form_field_idx
    bne __b22_from___b9
    // [382] phi from form_control::@9 to form_control::@14 [phi:form_control::@9->form_control::@14]
  __b14_from___b9:
    // [382] phi (byte) form_field_idx#31 = (const byte) form_fields_cnt-(byte) 1 [phi:form_control::@9->form_control::@14#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta.z form_field_idx
    jmp __b14
    // [381] phi from form_control::@9 to form_control::@22 [phi:form_control::@9->form_control::@22]
  __b22_from___b9:
    jmp __b22
    // form_control::@22
  __b22:
    // [382] phi from form_control::@22 form_control::@23 to form_control::@14 [phi:form_control::@22/form_control::@23->form_control::@14]
  __b14_from___b22:
  __b14_from___b23:
    // [382] phi (byte) form_field_idx#31 = (byte) form_field_idx#6 [phi:form_control::@22/form_control::@23->form_control::@14#0] -- register_copy 
    jmp __b14
    // form_control::@14
  __b14:
    // [383] phi from form_control::@14 to form_control::@return [phi:form_control::@14->form_control::@return]
  __breturn_from___b14:
    // [383] phi (byte) form_field_idx#18 = (byte) form_field_idx#31 [phi:form_control::@14->form_control::@return#0] -- register_copy 
    // [383] phi (signed byte) form_cursor_count#16 = (const signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:form_control::@14->form_control::@return#1] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // [383] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@14->form_control::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta.z return_2
    jmp __breturn
    // form_control::@return
  __breturn:
    // [384] return 
    rts
    // form_control::@13
  __b13:
    // [385] (byte) form_field_idx#5 ← ++ (byte) form_field_idx#28 -- vbuz1=_inc_vbuz1 
    inc.z form_field_idx
    // [386] if((byte) form_field_idx#5!=(const byte) form_fields_cnt) goto form_control::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z form_field_idx
    bne __b23_from___b13
    // [382] phi from form_control::@13 to form_control::@14 [phi:form_control::@13->form_control::@14]
  __b14_from___b13:
    // [382] phi (byte) form_field_idx#31 = (byte) 0 [phi:form_control::@13->form_control::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    jmp __b14
    // [387] phi from form_control::@13 to form_control::@23 [phi:form_control::@13->form_control::@23]
  __b23_from___b13:
    jmp __b23
    // form_control::@23
  __b23:
    jmp __b14_from___b23
    // form_control::@4
  __b4:
    // [388] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_RIGHT) goto form_control::@5 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_CRSR_RIGHT
    cmp.z key_event
    bne __b5
    jmp __b10
    // form_control::@10
  __b10:
    // [389] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT -- vbuz1=vbuz2_band_vbuc1 
    lda #KEY_MODIFIER_SHIFT
    and.z keyboard_modifiers
    sta.z __24
    // [390] if((byte~) form_control::$24==(byte) 0) goto form_control::@15 -- vbuz1_eq_0_then_la1 
    lda.z __24
    cmp #0
    beq __b15
    jmp __b11
    // form_control::@11
  __b11:
    // [391] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← -- *((const byte[]) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    dec form_fields_val,x
    // [392] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy.z form_field_idx
    cmp form_fields_val,y
    bne __b16
    jmp __b12
    // form_control::@12
  __b12:
    // [393] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z form_field_idx
    lda form_fields_max,y
    sta form_fields_val,y
    jmp __b16
    // form_control::@16
  __b16:
    // [394] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_field_idx#28)) -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuz3) 
    // Render field value
    ldx.z form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [383] phi from form_control::@16 form_control::@6 to form_control::@return [phi:form_control::@16/form_control::@6->form_control::@return]
  __breturn_from___b16:
  __breturn_from___b6:
    // [383] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@16/form_control::@6->form_control::@return#0] -- register_copy 
    // [383] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@16/form_control::@6->form_control::@return#1] -- register_copy 
    // [383] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@16/form_control::@6->form_control::@return#2] -- vbuz1=vbuc1 
    lda #0
    sta.z return_2
    jmp __breturn
    // form_control::@15
  __b15:
    // [395] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← ++ *((const byte[]) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    inc form_fields_val,x
    // [396] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy.z form_field_idx
    lda form_fields_max,y
    cmp form_fields_val,y
    bcs __b16
    jmp __b17
    // form_control::@17
  __b17:
    // [397] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z form_field_idx
    sta form_fields_val,y
    jmp __b16
    // form_control::@5
  __b5:
    // [398] if((byte) form_control::key_event#0!=(const byte) KEY_SPACE) goto form_control::@6 -- vbuz1_neq_vbuc1_then_la1 
    lda #KEY_SPACE
    cmp.z key_event
    bne __b6_from___b5
    // [383] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
  __breturn_from___b5:
    // [383] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@5->form_control::@return#0] -- register_copy 
    // [383] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@5->form_control::@return#1] -- register_copy 
    // [383] phi (byte) form_control::return#2 = (byte) $ff [phi:form_control::@5->form_control::@return#2] -- vbuz1=vbuc1 
    lda #$ff
    sta.z return_2
    jmp __breturn
    // [399] phi from form_control::@5 to form_control::@6 [phi:form_control::@5->form_control::@6]
  __b6_from___b5:
    jmp __b6
    // form_control::@6
  __b6:
    jmp __breturn_from___b6
    // form_control::@2
  __b2:
    // [400] (byte~) form_control::$14 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) | (byte) $80 -- vbuz1=pbuz2_derefidx_vbuz3_bor_vbuc1 
    lda #$80
    ldy.z form_field_ptr.x
    ora (form_field_ptr.line),y
    sta.z __14
    // [401] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$14 -- pbuz1_derefidx_vbuz2=vbuz3 
    lda.z __14
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    jmp __b3_from___b2
}
  // form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label __0 = $111
    .label __1 = $112
    .label line = $2f
    .label y = $31
    // [403] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
  __b1_from_form_set_screen:
    // [403] phi (byte) form_set_screen::y#2 = (byte) 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [403] phi (byte*) form_set_screen::line#2 = (const byte*) FORM_SCREEN [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z line
    lda #>FORM_SCREEN
    sta.z line+1
    jmp __b1
    // [403] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
  __b1_from___b1:
    // [403] phi (byte) form_set_screen::y#2 = (byte) form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
    // [403] phi (byte*) form_set_screen::line#2 = (byte*) form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    jmp __b1
    // form_set_screen::@1
  __b1:
    // [404] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2 -- vbuz1=_lo_pbuz2 
    lda.z line
    sta.z __0
    // [405] *((const byte[$19]) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __0
    ldy.z y
    sta form_line_lo,y
    // [406] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2 -- vbuz1=_hi_pbuz2 
    lda.z line+1
    sta.z __1
    // [407] *((const byte[$19]) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __1
    ldy.z y
    sta form_line_hi,y
    // [408] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [409] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [410] if((byte) form_set_screen::y#1!=(byte) $19) goto form_set_screen::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z y
    bne __b1_from___b1
    jmp __breturn
    // form_set_screen::@return
  __breturn:
    // [411] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zeropage($32) str)
print_str_lines: {
    .label ch = $113
    .label str = $32
    // [413] (byte*~) print_char_cursor#73 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda.z print_set_screen.screen
    sta.z print_char_cursor
    lda.z print_set_screen.screen+1
    sta.z print_char_cursor+1
    // [414] phi from print_str_lines print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1]
  __b1_from_print_str_lines:
  __b1_from___b6:
    // [414] phi (byte*) print_line_cursor#2 = (byte*) print_set_screen::screen#2 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [414] phi (byte*) print_char_cursor#22 = (byte*~) print_char_cursor#73 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [414] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    jmp __b1
    // print_str_lines::@1
  __b1:
    // [415] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2_from___b1
    jmp __breturn
    // print_str_lines::@return
  __breturn:
    // [416] return 
    rts
    // [417] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [417] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#22 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [417] phi (byte*) print_str_lines::str#4 = (byte*) print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    jmp __b2
    // print_str_lines::@2
  __b2:
    // [418] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta.z ch
    // [419] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [420] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3 -- vbuc1_eq_vbuz1_then_la1 
    lda #0
    cmp.z ch
    beq __b3_from___b2
    jmp __b4
    // print_str_lines::@4
  __b4:
    // [421] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 -- _deref_pbuz1=vbuz2 
    lda.z ch
    ldy #0
    sta (print_char_cursor),y
    // [422] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [423] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [423] phi (byte*) print_char_cursor#38 = (byte*) print_char_cursor#20 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    jmp __b3
    // print_str_lines::@3
  __b3:
    // [424] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z ch
    bne __b2_from___b3
    // [425] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
  __b5_from___b3:
    jmp __b5
    // print_str_lines::@5
  __b5:
    // [426] call print_ln 
    // [428] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b6
    // print_str_lines::@6
  __b6:
    // [427] (byte*~) print_char_cursor#74 ← (byte*) print_line_cursor#22 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    jmp __b1_from___b6
}
  // print_ln
// Print a newline
print_ln: {
    // [429] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [429] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#2 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [430] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [431] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [432] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [433] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 -- pvoz1=pvoz2 
    lda.z print_set_screen.screen
    sta.z memset.str
    lda.z print_set_screen.screen+1
    sta.z memset.str+1
    // [434] call memset 
    // [436] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [435] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zeropage($114) str)
memset: {
    .const c = ' '
    .const num = $3e8
    .label end = $116
    .label dst = $38
    .label str = $114
    jmp __b1
    // memset::@1
  __b1:
    // [437] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z str
    clc
    adc #<num
    sta.z end
    lda.z str+1
    adc #>num
    sta.z end+1
    // [438] (byte*~) memset::dst#4 ← (byte*)(void*) memset::str#0 -- pbuz1=pbuz2 
    lda.z str
    sta.z dst
    lda.z str+1
    sta.z dst+1
    // [439] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [439] phi (byte*) memset::dst#2 = (byte*~) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [440] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [441] return 
    rts
    // memset::@3
  __b3:
    // [442] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [443] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zeropage($36) screen)
print_set_screen: {
    .label screen = $36
    jmp __breturn
    // print_set_screen::@return
  __breturn:
    // [445] return 
    rts
}
  // gfx_init
// Initialize the different graphics in the memory
gfx_init: {
    // [447] call gfx_init_screen0 
    // [843] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
  gfx_init_screen0_from_gfx_init:
    jsr gfx_init_screen0
    // [448] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  __b1_from_gfx_init:
    jmp __b1
    // gfx_init::@1
  __b1:
    // [449] call gfx_init_screen1 
    // [831] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
  gfx_init_screen1_from___b1:
    jsr gfx_init_screen1
    // [450] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
  __b2_from___b1:
    jmp __b2
    // gfx_init::@2
  __b2:
    // [451] call gfx_init_screen2 
    // [816] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
  gfx_init_screen2_from___b2:
    jsr gfx_init_screen2
    // [452] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
  __b3_from___b2:
    jmp __b3
    // gfx_init::@3
  __b3:
    // [453] call gfx_init_screen3 
    // [802] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
  gfx_init_screen3_from___b3:
    jsr gfx_init_screen3
    // [454] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init::@4
  __b4:
    // [455] call gfx_init_screen4 
    // [792] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
  gfx_init_screen4_from___b4:
    jsr gfx_init_screen4
    // [456] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
  __b5_from___b4:
    jmp __b5
    // gfx_init::@5
  __b5:
    // [457] call gfx_init_charset 
    jsr gfx_init_charset
    // [458] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init::@6
  __b6:
    // [459] call gfx_init_vic_bitmap 
    // [602] phi from gfx_init::@6 to gfx_init_vic_bitmap [phi:gfx_init::@6->gfx_init_vic_bitmap]
  gfx_init_vic_bitmap_from___b6:
    jsr gfx_init_vic_bitmap
    // [460] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init::@7
  __b7:
    // [461] call gfx_init_plane_8bppchunky 
    // [582] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
  gfx_init_plane_8bppchunky_from___b7:
    jsr gfx_init_plane_8bppchunky
    // [462] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
  __b8_from___b7:
    jmp __b8
    // gfx_init::@8
  __b8:
    // [463] call gfx_init_plane_charset8 
    // [557] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
  gfx_init_plane_charset8_from___b8:
    jsr gfx_init_plane_charset8
    // [464] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
  __b9_from___b8:
    jmp __b9
    // gfx_init::@9
  __b9:
    // [465] call gfx_init_plane_horisontal 
    // [539] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
  gfx_init_plane_horisontal_from___b9:
    jsr gfx_init_plane_horisontal
    // [466] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
  __b10_from___b9:
    jmp __b10
    // gfx_init::@10
  __b10:
    // [467] call gfx_init_plane_vertical 
    // [526] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
  gfx_init_plane_vertical_from___b10:
    jsr gfx_init_plane_vertical
    // [468] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
  __b11_from___b10:
    jmp __b11
    // gfx_init::@11
  __b11:
    // [469] call gfx_init_plane_horisontal2 
    // [511] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
  gfx_init_plane_horisontal2_from___b11:
    jsr gfx_init_plane_horisontal2
    // [470] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
  __b12_from___b11:
    jmp __b12
    // gfx_init::@12
  __b12:
    // [471] call gfx_init_plane_vertical2 
    // [508] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
  gfx_init_plane_vertical2_from___b12:
    jsr gfx_init_plane_vertical2
    // [472] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
  __b13_from___b12:
    jmp __b13
    // gfx_init::@13
  __b13:
    // [473] call gfx_init_plane_blank 
    // [505] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
  gfx_init_plane_blank_from___b13:
    jsr gfx_init_plane_blank
    // [474] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
  __b14_from___b13:
    jmp __b14
    // gfx_init::@14
  __b14:
    // [475] call gfx_init_plane_full 
    // [477] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
  gfx_init_plane_full_from___b14:
    jsr gfx_init_plane_full
    jmp __breturn
    // gfx_init::@return
  __breturn:
    // [476] return 
    rts
}
  // gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
    // [478] call gfx_init_plane_fill 
    // [480] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_full:
    // [480] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z gfx_init_plane_fill.fill
    // [480] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_FULL [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_full::@return
  __breturn:
    // [479] return 
    rts
}
  // gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zeropage($3a) plane_addr, byte zeropage($3e) fill)
gfx_init_plane_fill: {
    .label __0 = $118
    .label __1 = $11c
    .label __4 = $11f
    .label __5 = $121
    .label gfxbCpuBank = $11e
    .label gfxb = $123
    .label gfxb_1 = $40
    .label bx = $42
    .label by = $3f
    .label plane_addr = $3a
    .label gfxb_2 = $40
    .label gfxb_3 = $40
    .label fill = $3e
    .label gfxb_6 = $40
    // [481] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 -- vduz1=vduz2_rol_2 
    lda.z plane_addr
    sta.z __0
    lda.z plane_addr+1
    sta.z __0+1
    lda.z plane_addr+2
    sta.z __0+2
    lda.z plane_addr+3
    sta.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    // [482] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda.z __0+2
    sta.z __1
    lda.z __0+3
    sta.z __1+1
    // [483] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 -- vbuz1=_lo_vwuz2 
    lda.z __1
    sta.z gfxbCpuBank
    // [484] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0 -- vbuz1=vbuz2 
    lda.z gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    // [485] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b5
    // gfx_init_plane_fill::@5
  __b5:
    // [486] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda.z plane_addr
    sta.z __4
    lda.z plane_addr+1
    sta.z __4+1
    // [487] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff -- vwuz1=vwuz2_band_vwuc1 
    lda.z __4
    and #<$3fff
    sta.z __5
    lda.z __4+1
    and #>$3fff
    sta.z __5+1
    // [488] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz2 
    lda.z __5
    clc
    adc #<$4000
    sta.z gfxb
    lda.z __5+1
    adc #>$4000
    sta.z gfxb+1
    // [489] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0 -- pbuz1=pbuz2 
    lda.z gfxb
    sta.z gfxb_6
    lda.z gfxb+1
    sta.z gfxb_6+1
    // [490] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
  __b1_from___b5:
    // [490] phi (byte) gfx_init_plane_fill::by#4 = (byte) 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [490] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*~) gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // [490] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
  __b1_from___b3:
    // [490] phi (byte) gfx_init_plane_fill::by#4 = (byte) gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
    // [490] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_fill::@1
  __b1:
    // [491] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
  __b2_from___b1:
    // [491] phi (byte) gfx_init_plane_fill::bx#2 = (byte) 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bx
    // [491] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // [491] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
  __b2_from___b2:
    // [491] phi (byte) gfx_init_plane_fill::bx#2 = (byte) gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
    // [491] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_fill::@2
  __b2:
    // [492] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda.z fill
    ldy #0
    sta (gfxb_2),y
    // [493] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb_1
    bne !+
    inc.z gfxb_1+1
  !:
    // [494] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2 -- vbuz1=_inc_vbuz1 
    inc.z bx
    // [495] if((byte) gfx_init_plane_fill::bx#1!=(byte) $28) goto gfx_init_plane_fill::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z bx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_fill::@3
  __b3:
    // [496] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [497] if((byte) gfx_init_plane_fill::by#1!=(byte) $c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [498] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_fill::@4
  __b4:
    // [499] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_fill::@return
  __breturn:
    // [500] return 
    rts
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte zeropage($43) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    .label cpuBankIdx = $43
    // [502] *((const byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuz1 
    lda.z cpuBankIdx
    sta cpuBank
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    jmp __breturn
    // dtvSetCpuBankSegment1::@return
  __breturn:
    // [504] return 
    rts
}
  // gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
    // [506] call gfx_init_plane_fill 
    // [480] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_blank:
    // [480] phi (byte) gfx_init_plane_fill::fill#6 = (byte) 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gfx_init_plane_fill.fill
    // [480] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_BLANK [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_blank::@return
  __breturn:
    // [507] return 
    rts
}
  // gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
    // [509] call gfx_init_plane_fill 
    // [480] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_vertical2:
    // [480] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta.z gfx_init_plane_fill.fill
    // [480] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_VERTICAL2 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_vertical2::@return
  __breturn:
    // [510] return 
    rts
}
  // gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label __7 = $125
    .label row = $126
    .label gfxa = $45
    .label ax = $47
    .label ay = $44
    // [512] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    // [513] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
  __b1_from_gfx_init_plane_horisontal2:
    // [513] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [513] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [513] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
  __b1_from___b3:
    // [513] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
    // [513] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal2::@1
  __b1:
    // [514] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
  __b2_from___b1:
    // [514] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ax
    // [514] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // [514] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
  __b2_from___b2:
    // [514] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
    // [514] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal2::@2
  __b2:
    // [515] (byte~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z ay
    lsr
    sta.z __7
    // [516] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$7 & (byte) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and.z __7
    sta.z row
    // [517] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuz2 
    ldy.z row
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // [518] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [519] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2 -- vbuz1=_inc_vbuz1 
    inc.z ax
    // [520] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte) $28) goto gfx_init_plane_horisontal2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z ax
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_horisontal2::@3
  __b3:
    // [521] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [522] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b3
    // [523] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_horisontal2::@4
  __b4:
    // [524] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal2::@return
  __breturn:
    // [525] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = $49
    .label bx = $4b
    .label by = $48
    // [527] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    // [528] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
  __b1_from_gfx_init_plane_vertical:
    // [528] phi (byte) gfx_init_plane_vertical::by#4 = (byte) 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [528] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*)(word) $4000+(const dword) PLANE_VERTICAL&(word) $3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb+1
    jmp __b1
    // [528] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
  __b1_from___b3:
    // [528] phi (byte) gfx_init_plane_vertical::by#4 = (byte) gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
    // [528] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_vertical::@1
  __b1:
    // [529] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
  __b2_from___b1:
    // [529] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z bx
    // [529] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // [529] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
  __b2_from___b2:
    // [529] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
    // [529] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_vertical::@2
  __b2:
    // [530] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // [531] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [532] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2 -- vbuz1=_inc_vbuz1 
    inc.z bx
    // [533] if((byte) gfx_init_plane_vertical::bx#1!=(byte) $28) goto gfx_init_plane_vertical::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z bx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_vertical::@3
  __b3:
    // [534] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [535] if((byte) gfx_init_plane_vertical::by#1!=(byte) $c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [536] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_vertical::@4
  __b4:
    // [537] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_vertical::@return
  __breturn:
    // [538] return 
    rts
}
  // gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label __7 = $127
    .label gfxa = $4d
    .label ax = $4f
    .label ay = $4c
    // [540] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    // [541] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
  __b1_from_gfx_init_plane_horisontal:
    // [541] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [541] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [541] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
  __b1_from___b6:
    // [541] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
    // [541] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal::@1
  __b1:
    // [542] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
  __b2_from___b1:
    // [542] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ax
    // [542] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // [542] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
  __b2_from___b4:
    // [542] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
    // [542] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal::@2
  __b2:
    // [543] (byte~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4 -- vbuz1=vbuz2_band_vbuc1 
    lda #4
    and.z ay
    sta.z __7
    // [544] if((byte~) gfx_init_plane_horisontal::$7==(byte) 0) goto gfx_init_plane_horisontal::@3 -- vbuz1_eq_0_then_la1 
    lda.z __7
    cmp #0
    beq __b3
    jmp __b5
    // gfx_init_plane_horisontal::@5
  __b5:
    // [545] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // [546] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [547] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [547] phi (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    jmp __b4
    // gfx_init_plane_horisontal::@4
  __b4:
    // [548] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2 -- vbuz1=_inc_vbuz1 
    inc.z ax
    // [549] if((byte) gfx_init_plane_horisontal::ax#1!=(byte) $28) goto gfx_init_plane_horisontal::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z ax
    bne __b2_from___b4
    jmp __b6
    // gfx_init_plane_horisontal::@6
  __b6:
    // [550] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [551] if((byte) gfx_init_plane_horisontal::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b6
    // [552] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init_plane_horisontal::@7
  __b7:
    // [553] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b7:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal::@return
  __breturn:
    // [554] return 
    rts
    // gfx_init_plane_horisontal::@3
  __b3:
    // [555] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
    // [556] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b4_from___b3
}
  // gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label __7 = $128
    .label bits = $54
    .label chargen = $51
    .label gfxa = $55
    .label col = $57
    .label cp = $58
    .label cr = $53
    .label ch = $50
    .label c = $59
    // [558] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __b9
    // gfx_init_plane_charset8::@9
  __b9:
    // [559] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [560] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  __b1_from___b9:
    // [560] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [560] phi (byte) gfx_init_plane_charset8::col#6 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    // [560] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [560] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const byte*) CHARGEN [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [560] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  __b1_from___b7:
    // [560] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
    // [560] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
    // [560] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
    // [560] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    jmp __b1
    // gfx_init_plane_charset8::@1
  __b1:
    // [561] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  __b2_from___b1:
    // [561] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [561] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // [561] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  __b2_from___b6:
    // [561] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
    // [561] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // gfx_init_plane_charset8::@2
  __b2:
    // [562] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [563] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [564] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  __b3_from___b2:
    // [564] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cp
    // [564] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [564] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [564] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // [564] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  __b3_from___b4:
    // [564] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
    // [564] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [564] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [564] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // gfx_init_plane_charset8::@3
  __b3:
    // [565] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80 -- vbuz1=vbuz2_band_vbuc1 
    lda #$80
    and.z bits
    sta.z __7
    // [566] if((byte~) gfx_init_plane_charset8::$7==(byte) 0) goto gfx_init_plane_charset8::@4 -- vbuz1_eq_0_then_la1 
    lda.z __7
    cmp #0
    beq __b4_from___b3
    jmp __b5
    // gfx_init_plane_charset8::@5
  __b5:
    // [567] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuz1=vbuz2 
    lda.z col
    sta.z c
    // [568] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  __b4_from___b5:
    // [568] phi (byte) gfx_init_plane_charset8::c#2 = (byte~) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp __b4
    // [568] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  __b4_from___b3:
    // [568] phi (byte) gfx_init_plane_charset8::c#2 = (byte) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    jmp __b4
    // gfx_init_plane_charset8::@4
  __b4:
    // [569] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (gfxa),y
    // [570] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [571] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // [572] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [573] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuz1=_inc_vbuz1 
    inc.z cp
    // [574] if((byte) gfx_init_plane_charset8::cp#1!=(byte) 8) goto gfx_init_plane_charset8::@3 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cp
    bne __b3_from___b4
    jmp __b6
    // gfx_init_plane_charset8::@6
  __b6:
    // [575] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [576] if((byte) gfx_init_plane_charset8::cr#1!=(byte) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b2_from___b6
    jmp __b7
    // gfx_init_plane_charset8::@7
  __b7:
    // [577] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [578] if((byte) gfx_init_plane_charset8::ch#1!=(byte) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b1_from___b7
    jmp __b8
    // gfx_init_plane_charset8::@8
  __b8:
    // [579] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [580] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b8:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_charset8::@return
  __breturn:
    // [581] return 
    rts
}
  // gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label __8 = $129
    .label c = $12b
    .label gfxb = $5e
    .label x = $5b
    .label gfxbCpuBank = $5d
    .label y = $5a
    // [583] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    // [584] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
  __b1_from_gfx_init_plane_8bppchunky:
    // [584] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++(byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuz1=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000+1
    sta.z gfxbCpuBank
    // [584] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [584] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b1
    // [584] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
  __b1_from___b5:
    // [584] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
    // [584] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
    // [584] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_plane_8bppchunky::@1
  __b1:
    // [585] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
  __b2_from___b1:
    // [585] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [585] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [585] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // [585] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
  __b2_from___b3:
    // [585] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [585] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
    // [585] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_plane_8bppchunky::@2
  __b2:
    // [586] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b3_from___b2
    lda.z gfxb
    cmp #<$8000
    bne __b3_from___b2
    jmp __b4
    // gfx_init_plane_8bppchunky::@4
  __b4:
    // [587] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuz1=vbuz2 
    lda.z gfxbCpuBank
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    // [588] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b7
    // gfx_init_plane_8bppchunky::@7
  __b7:
    // [589] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuz1=_inc_vbuz1 
    inc.z gfxbCpuBank
    // [590] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
  __b3_from___b7:
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b3
    // [590] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
  __b3_from___b2:
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    jmp __b3
    // gfx_init_plane_8bppchunky::@3
  __b3:
    // [591] (word~) gfx_init_plane_8bppchunky::$8 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __8
    lda #0
    adc.z x+1
    sta.z __8+1
    // [592] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$8 -- vbuz1=_byte_vwuz2 
    lda.z __8
    sta.z c
    // [593] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuz2 
    lda.z c
    ldy #0
    sta (gfxb),y
    // [594] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [595] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [596] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b2_from___b3
    lda.z x
    cmp #<$140
    bne __b2_from___b3
    jmp __b5
    // gfx_init_plane_8bppchunky::@5
  __b5:
    // [597] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [598] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte) $c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b1_from___b5
    // [599] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init_plane_8bppchunky::@6
  __b6:
    // [600] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b6:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuz1=vbuc1 
    lda #$4000/$4000
    sta.z dtvSetCpuBankSegment1.cpuBankIdx
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_8bppchunky::@return
  __breturn:
    // [601] return 
    rts
}
  // gfx_init_vic_bitmap
// Initialize VIC bitmap
gfx_init_vic_bitmap: {
    .const lines_cnt = 9
    .label l = $60
    // [603] call bitmap_init 
    // [755] phi from gfx_init_vic_bitmap to bitmap_init [phi:gfx_init_vic_bitmap->bitmap_init]
  bitmap_init_from_gfx_init_vic_bitmap:
    jsr bitmap_init
    // [604] phi from gfx_init_vic_bitmap to gfx_init_vic_bitmap::@3 [phi:gfx_init_vic_bitmap->gfx_init_vic_bitmap::@3]
  __b3_from_gfx_init_vic_bitmap:
    jmp __b3
    // gfx_init_vic_bitmap::@3
  __b3:
    // [605] call bitmap_clear 
    jsr bitmap_clear
    // [606] phi from gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1]
  __b1_from___b3:
    // [606] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) 0 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // gfx_init_vic_bitmap::@1
  __b1:
    // [607] if((byte) gfx_init_vic_bitmap::l#2<(const byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    jmp __breturn
    // gfx_init_vic_bitmap::@return
  __breturn:
    // [608] return 
    rts
    // gfx_init_vic_bitmap::@2
  __b2:
    // [609] (byte) bitmap_line::x0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [610] (byte) bitmap_line::x1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x+1,y
    sta.z bitmap_line.x1
    // [611] (byte) bitmap_line::y0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y,y
    sta.z bitmap_line.y0
    // [612] (byte) bitmap_line::y1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y+1,y
    sta.z bitmap_line.y1
    // [613] call bitmap_line 
    jsr bitmap_line
    jmp __b4
    // gfx_init_vic_bitmap::@4
  __b4:
    // [614] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [606] phi from gfx_init_vic_bitmap::@4 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1]
  __b1_from___b4:
    // [606] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1#0] -- register_copy 
    jmp __b1
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zeropage($12c) x0, byte zeropage($12d) x1, byte zeropage($12e) y0, byte zeropage($12f) y1)
bitmap_line: {
    .label xd = $133
    .label xd_2 = $130
    .label yd = $132
    .label yd_2 = $131
    .label x0 = $12c
    .label x1 = $12d
    .label y0 = $12e
    .label y1 = $12f
    .label yd_10 = $134
    .label yd_11 = $135
    // [615] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuz2_then_la1 
    lda.z x0
    cmp.z x1
    bcc __b1
    jmp __b2
    // bitmap_line::@2
  __b2:
    // [616] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x0
    sec
    sbc.z x1
    sta.z xd_2
    // [617] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y0
    cmp.z y1
    bcc __b7
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [618] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y0
    sec
    sbc.z y1
    sta.z yd_2
    // [619] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd_2
    cmp.z xd_2
    bcc __b8
    jmp __b4
    // bitmap_line::@4
  __b4:
    // [620] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y
    // [621] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxi.x
    // [622] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y1
    // [623] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuz2 
    lda.z yd_2
    sta.z bitmap_line_ydxi.yd
    // [624] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda.z xd_2
    sta.z bitmap_line_ydxi.xd
    // [625] call bitmap_line_ydxi 
    // [699] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b4:
    // [699] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [626] return 
    rts
    // bitmap_line::@8
  __b8:
    // [627] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x
    // [628] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_xdyi.y
    // [629] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x1
    // [630] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda.z xd_2
    sta.z bitmap_line_xdyi.xd
    // [631] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuz2 
    lda.z yd_2
    sta.z bitmap_line_xdyi.yd
    // [632] call bitmap_line_xdyi 
    // [677] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b8:
    // [677] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
    // bitmap_line::@7
  __b7:
    // [633] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y1
    sec
    sbc.z y0
    sta.z yd
    // [634] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd
    cmp.z xd_2
    bcc __b9
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [635] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxd.y
    // [636] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_ydxd.x
    // [637] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y1
    // [638] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuz2 
    lda.z yd
    sta.z bitmap_line_ydxd.yd
    // [639] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda.z xd_2
    sta.z bitmap_line_ydxd.xd
    // [640] call bitmap_line_ydxd 
    // [729] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b10:
    // [729] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@9
  __b9:
    // [641] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x
    // [642] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_xdyd.y
    // [643] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x1
    // [644] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2 -- vbuz1=vbuz2 
    lda.z xd_2
    sta.z bitmap_line_xdyd.xd
    // [645] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuz2 
    lda.z yd
    sta.z bitmap_line_xdyd.yd
    // [646] call bitmap_line_xdyd 
    // [714] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b9:
    // [714] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@1
  __b1:
    // [647] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z x1
    sec
    sbc.z x0
    sta.z xd
    // [648] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y0
    cmp.z y1
    bcc __b11
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [649] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y0
    sec
    sbc.z y1
    sta.z yd_10
    // [650] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd_10
    cmp.z xd
    bcc __b12
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [651] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y
    // [652] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_ydxd.x
    // [653] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxd.y1
    // [654] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuz2 
    lda.z yd_10
    sta.z bitmap_line_ydxd.yd
    // [655] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda.z xd
    sta.z bitmap_line_ydxd.xd
    // [656] call bitmap_line_ydxd 
    // [729] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b6:
    // [729] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@12
  __b12:
    // [657] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x
    // [658] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_xdyd.y
    // [659] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyd.x1
    // [660] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda.z xd
    sta.z bitmap_line_xdyd.xd
    // [661] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuz2 
    lda.z yd_10
    sta.z bitmap_line_xdyd.yd
    // [662] call bitmap_line_xdyd 
    // [714] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b12:
    // [714] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@11
  __b11:
    // [663] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuz1=vbuz2_minus_vbuz3 
    lda.z y1
    sec
    sbc.z y0
    sta.z yd_11
    // [664] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuz1_lt_vbuz2_then_la1 
    lda.z yd_11
    cmp.z xd
    bcc __b13
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [665] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y
    // [666] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_ydxi.x
    // [667] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y1
    // [668] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuz2 
    lda.z yd_11
    sta.z bitmap_line_ydxi.yd
    // [669] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda.z xd
    sta.z bitmap_line_ydxi.xd
    // [670] call bitmap_line_ydxi 
    // [699] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b14:
    // [699] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@13
  __b13:
    // [671] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x
    // [672] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_xdyi.y
    // [673] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuz2 
    lda.z x1
    sta.z bitmap_line_xdyi.x1
    // [674] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1 -- vbuz1=vbuz2 
    lda.z xd
    sta.z bitmap_line_xdyi.xd
    // [675] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuz2 
    lda.z yd_11
    sta.z bitmap_line_xdyi.yd
    // [676] call bitmap_line_xdyi 
    // [677] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b13:
    // [677] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte zeropage($64) x, byte zeropage($65) y, byte zeropage($63) x1, byte zeropage($62) xd, byte zeropage($61) yd)
bitmap_line_xdyi: {
    .label __6 = $136
    .label x = $64
    .label y = $65
    .label x1 = $63
    .label xd = $62
    .label yd = $61
    .label e = $66
    // [678] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [679] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  __b1_from_bitmap_line_xdyi:
  __b1_from___b2:
    // [679] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [679] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [679] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyi::@1
  __b1:
    // [680] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuz1=vbuz2 
    lda.z x
    sta.z bitmap_plot.x
    // [681] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuz1=vbuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [682] call bitmap_plot 
    // [692] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyi::@4
  __b4:
    // [683] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [684] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [685] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyi::@3
  __b3:
    // [686] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [687] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [688] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [688] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [688] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyi::@2
  __b2:
    // [689] (byte~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z __6
    // [690] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyi::@return
  __breturn:
    // [691] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte zeropage($67) x, byte zeropage($68) y)
bitmap_plot: {
    .label __1 = $13d
    .label plotter_x = $137
    .label plotter_y = $139
    .label plotter = $13b
    .label x = $67
    .label y = $68
    // [693] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy.z x
    lda bitmap_plot_xhi,y
    sta.z plotter_x+1
    lda bitmap_plot_xlo,y
    sta.z plotter_x
    // [694] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuz2_word_pbuc2_derefidx_vbuz2 
    ldy.z y
    lda bitmap_plot_yhi,y
    sta.z plotter_y+1
    lda bitmap_plot_ylo,y
    sta.z plotter_y
    // [695] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz2_plus_vwuz3 
    lda.z plotter_x
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter_x+1
    adc.z plotter_y+1
    sta.z plotter+1
    // [696] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_plot::x#4) -- vbuz1=_deref_pbuz2_bor_pbuc1_derefidx_vbuz3 
    ldy #0
    lda (plotter),y
    ldy.z x
    ora bitmap_plot_bit,y
    sta.z __1
    // [697] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuz2 
    lda.z __1
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [698] return 
    rts
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zeropage($6d) y, byte zeropage($6c) x, byte zeropage($6b) y1, byte zeropage($6a) yd, byte zeropage($69) xd)
bitmap_line_ydxi: {
    .label __6 = $13e
    .label y = $6d
    .label x = $6c
    .label y1 = $6b
    .label yd = $6a
    .label xd = $69
    .label e = $6e
    // [700] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [701] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  __b1_from_bitmap_line_ydxi:
  __b1_from___b2:
    // [701] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [701] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [701] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxi::@1
  __b1:
    // [702] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3 -- vbuz1=vbuz2 
    lda.z x
    sta.z bitmap_plot.x
    // [703] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuz1=vbuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [704] call bitmap_plot 
    // [692] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxi::@4
  __b4:
    // [705] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [706] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [707] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxi::@3
  __b3:
    // [708] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [709] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [710] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [710] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [710] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxi::@2
  __b2:
    // [711] (byte~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z y1
    iny
    sty.z __6
    // [712] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxi::@return
  __breturn:
    // [713] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte zeropage($72) x, byte zeropage($73) y, byte zeropage($71) x1, byte zeropage($70) xd, byte zeropage($6f) yd)
bitmap_line_xdyd: {
    .label __6 = $13f
    .label x = $72
    .label y = $73
    .label x1 = $71
    .label xd = $70
    .label yd = $6f
    .label e = $74
    // [715] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [716] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  __b1_from_bitmap_line_xdyd:
  __b1_from___b2:
    // [716] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [716] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [716] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyd::@1
  __b1:
    // [717] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuz1=vbuz2 
    lda.z x
    sta.z bitmap_plot.x
    // [718] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuz1=vbuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [719] call bitmap_plot 
    // [692] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyd::@4
  __b4:
    // [720] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [721] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [722] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyd::@3
  __b3:
    // [723] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec.z y
    // [724] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [725] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [725] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [725] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyd::@2
  __b2:
    // [726] (byte~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z x1
    iny
    sty.z __6
    // [727] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda.z x
    cmp.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyd::@return
  __breturn:
    // [728] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zeropage($79) y, byte zeropage($78) x, byte zeropage($77) y1, byte zeropage($76) yd, byte zeropage($75) xd)
bitmap_line_ydxd: {
    .label __6 = $140
    .label y = $79
    .label x = $78
    .label y1 = $77
    .label yd = $76
    .label xd = $75
    .label e = $7a
    // [730] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [731] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  __b1_from_bitmap_line_ydxd:
  __b1_from___b2:
    // [731] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [731] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [731] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxd::@1
  __b1:
    // [732] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3 -- vbuz1=vbuz2 
    lda.z x
    sta.z bitmap_plot.x
    // [733] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuz1=vbuz2 
    lda.z y
    sta.z bitmap_plot.y
    // [734] call bitmap_plot 
    // [692] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxd::@4
  __b4:
    // [735] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [736] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [737] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxd::@3
  __b3:
    // [738] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuz1=_dec_vbuz1 
    dec.z x
    // [739] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [740] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [740] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [740] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxd::@2
  __b2:
    // [741] (byte~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte) 1 -- vbuz1=vbuz2_plus_1 
    ldy.z y1
    iny
    sty.z __6
    // [742] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuz2_then_la1 
    lda.z y
    cmp.z __6
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxd::@return
  __breturn:
    // [743] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $141
    .label bitmap_1 = $7c
    .label x = $7e
    .label y = $7b
    .label bitmap_2 = $7c
    .label bitmap_3 = $7c
    .label bitmap_5 = $7c
    // [744] (word) bitmap_clear::bitmap#0 ← *((const byte[$100]) bitmap_plot_xhi) w= *((const byte[$100]) bitmap_plot_xlo) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [745] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0 -- pbuz1=pbuz2 
    lda.z bitmap
    sta.z bitmap_5
    lda.z bitmap+1
    sta.z bitmap_5+1
    // [746] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    // [746] phi (byte) bitmap_clear::y#4 = (byte) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [746] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // [746] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  __b1_from___b3:
    // [746] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [746] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [747] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  __b2_from___b1:
    // [747] phi (byte) bitmap_clear::x#2 = (byte) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    // [747] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // [747] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  __b2_from___b2:
    // [747] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [747] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // bitmap_clear::@2
  __b2:
    // [748] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap_2),y
    // [749] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap_1
    bne !+
    inc.z bitmap_1+1
  !:
    // [750] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [751] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z x
    bne __b2_from___b2
    jmp __b3
    // bitmap_clear::@3
  __b3:
    // [752] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [753] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1_from___b3
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [754] return 
    rts
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __0 = $143
    .label __7 = $145
    .label __8 = $146
    .label __9 = $147
    .label __10 = $144
    .label bits = $80
    .label x = $7f
    .label y = $81
    .label yoffs = $82
    // [756] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [756] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    // [756] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z x
    jmp __b1
    // [756] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [756] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [756] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [757] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8 -- vbuz1=vbuz2_band_vbuc1 
    lda #$f8
    and.z x
    sta.z __0
    // [758] *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __0
    ldy.z x
    sta bitmap_plot_xlo,y
    // [759] *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #>VIC_BITMAP
    ldy.z x
    sta bitmap_plot_xhi,y
    // [760] *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z bits
    ldy.z x
    sta bitmap_plot_bit,y
    // [761] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuz1=vbuz1_ror_1 
    lsr.z bits
    // [762] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuz1_neq_0_then_la1 
    lda.z bits
    cmp #0
    bne __b6_from___b1
    // [764] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [764] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuz1=vbuc1 
    lda #$80
    sta.z bits
    jmp __b2
    // [763] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [764] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [764] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [765] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [766] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuz1_neq_0_then_la1 
    lda.z x
    cmp #0
    bne __b1_from___b2
    // [767] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [767] phi (byte*) bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    lda #>0
    sta.z yoffs+1
    // [767] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    jmp __b3
    // [767] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [767] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [767] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [768] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuz2_band_vbuc1 
    lda #7
    and.z y
    sta.z __10
    // [769] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuz1=_lo_pbuz2 
    lda.z yoffs
    sta.z __7
    // [770] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$10 | (byte~) bitmap_init::$7 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __10
    ora.z __7
    sta.z __8
    // [771] *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __8
    ldy.z y
    sta bitmap_plot_ylo,y
    // [772] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuz1=_hi_pbuz2 
    lda.z yoffs+1
    sta.z __9
    // [773] *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z __9
    ldy.z y
    sta bitmap_plot_yhi,y
    // [774] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [775] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [776] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [776] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [777] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [778] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuz1_neq_0_then_la1 
    lda.z y
    cmp #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [779] return 
    rts
}
  // gfx_init_charset
gfx_init_charset: {
    .label charset = $87
    .label chargen = $85
    .label l = $89
    .label c = $84
    // [780] *((const byte*) PROCPORT) ← (byte) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [781] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
  __b1_from_gfx_init_charset:
    // [781] phi (byte) gfx_init_charset::c#4 = (byte) 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [781] phi (byte*) gfx_init_charset::charset#3 = (const byte*) VIC_CHARSET_ROM [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z charset
    lda #>VIC_CHARSET_ROM
    sta.z charset+1
    // [781] phi (byte*) gfx_init_charset::chargen#3 = (const byte*) CHARGEN [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [781] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
  __b1_from___b3:
    // [781] phi (byte) gfx_init_charset::c#4 = (byte) gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
    // [781] phi (byte*) gfx_init_charset::charset#3 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
    // [781] phi (byte*) gfx_init_charset::chargen#3 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_charset::@1
  __b1:
    // [782] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
  __b2_from___b1:
    // [782] phi (byte) gfx_init_charset::l#2 = (byte) 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // [782] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
    // [782] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // [782] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
  __b2_from___b2:
    // [782] phi (byte) gfx_init_charset::l#2 = (byte) gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
    // [782] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
    // [782] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_charset::@2
  __b2:
    // [783] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    ldy #0
    sta (charset),y
    // [784] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc.z charset
    bne !+
    inc.z charset+1
  !:
    // [785] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [786] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [787] if((byte) gfx_init_charset::l#1!=(byte) 8) goto gfx_init_charset::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z l
    bne __b2_from___b2
    jmp __b3
    // gfx_init_charset::@3
  __b3:
    // [788] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [789] if((byte) gfx_init_charset::c#1!=(byte) 0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1_from___b3
    jmp __b4
    // gfx_init_charset::@4
  __b4:
    // [790] *((const byte*) PROCPORT) ← (byte) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    jmp __breturn
    // gfx_init_charset::@return
  __breturn:
    // [791] return 
    rts
}
  // gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = $8b
    .label cx = $8d
    .label cy = $8a
    // [793] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
  __b1_from_gfx_init_screen4:
    // [793] phi (byte) gfx_init_screen4::cy#4 = (byte) 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [793] phi (byte*) gfx_init_screen4::ch#3 = (const byte*) VIC_SCREEN4 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z ch
    lda #>VIC_SCREEN4
    sta.z ch+1
    jmp __b1
    // [793] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
  __b1_from___b3:
    // [793] phi (byte) gfx_init_screen4::cy#4 = (byte) gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
    // [793] phi (byte*) gfx_init_screen4::ch#3 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen4::@1
  __b1:
    // [794] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
  __b2_from___b1:
    // [794] phi (byte) gfx_init_screen4::cx#2 = (byte) 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    // [794] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // [794] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
  __b2_from___b2:
    // [794] phi (byte) gfx_init_screen4::cx#2 = (byte) gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
    // [794] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen4::@2
  __b2:
    // [795] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (ch),y
    // [796] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [797] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [798] if((byte) gfx_init_screen4::cx#1!=(byte) $28) goto gfx_init_screen4::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen4::@3
  __b3:
    // [799] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [800] if((byte) gfx_init_screen4::cy#1!=(byte) $19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen4::@return
  __breturn:
    // [801] return 
    rts
}
  // gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label __0 = $148
    .label __1 = $149
    .label __2 = $14a
    .label __3 = $14b
    .label ch = $90
    .label cx = $8f
    .label cy = $8e
    // [803] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
  __b1_from_gfx_init_screen3:
    // [803] phi (byte*) gfx_init_screen3::ch#3 = (const byte*) VIC_SCREEN3 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z ch
    lda #>VIC_SCREEN3
    sta.z ch+1
    // [803] phi (byte) gfx_init_screen3::cy#4 = (byte) 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [803] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
  __b1_from___b3:
    // [803] phi (byte*) gfx_init_screen3::ch#3 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
    // [803] phi (byte) gfx_init_screen3::cy#4 = (byte) gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen3::@1
  __b1:
    // [804] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
  __b2_from___b1:
    // [804] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
    // [804] phi (byte) gfx_init_screen3::cx#2 = (byte) 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    jmp __b2
    // [804] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
  __b2_from___b2:
    // [804] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
    // [804] phi (byte) gfx_init_screen3::cx#2 = (byte) gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen3::@2
  __b2:
    // [805] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and.z cx
    sta.z __0
    // [806] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 -- vbuz1=vbuz2_rol_4 
    lda.z __0
    asl
    asl
    asl
    asl
    sta.z __1
    // [807] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 -- vbuz1=vbuz2_band_vbuc1 
    lda #3
    and.z cy
    sta.z __2
    // [808] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __1
    ora.z __2
    sta.z __3
    // [809] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 -- _deref_pbuz1=vbuz2 
    lda.z __3
    ldy #0
    sta (ch),y
    // [810] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [811] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [812] if((byte) gfx_init_screen3::cx#1!=(byte) $28) goto gfx_init_screen3::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen3::@3
  __b3:
    // [813] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [814] if((byte) gfx_init_screen3::cy#1!=(byte) $19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen3::@return
  __breturn:
    // [815] return 
    rts
}
  // gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label __0 = $14c
    .label __3 = $14f
    .label __4 = $150
    .label col = $14d
    .label col2 = $14e
    .label ch = $94
    .label cx = $93
    .label cy = $92
    // [817] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
  __b1_from_gfx_init_screen2:
    // [817] phi (byte*) gfx_init_screen2::ch#3 = (const byte*) VIC_SCREEN2 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z ch
    lda #>VIC_SCREEN2
    sta.z ch+1
    // [817] phi (byte) gfx_init_screen2::cy#4 = (byte) 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [817] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
  __b1_from___b3:
    // [817] phi (byte*) gfx_init_screen2::ch#3 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
    // [817] phi (byte) gfx_init_screen2::cy#4 = (byte) gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen2::@1
  __b1:
    // [818] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
  __b2_from___b1:
    // [818] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
    // [818] phi (byte) gfx_init_screen2::cx#2 = (byte) 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    jmp __b2
    // [818] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
  __b2_from___b2:
    // [818] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
    // [818] phi (byte) gfx_init_screen2::cx#2 = (byte) gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen2::@2
  __b2:
    // [819] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z cx
    clc
    adc.z cy
    sta.z __0
    // [820] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z __0
    sta.z col
    // [821] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuz2 
    lda #$f
    sec
    sbc.z col
    sta.z col2
    // [822] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 -- vbuz1=vbuz2_rol_4 
    lda.z col
    asl
    asl
    asl
    asl
    sta.z __3
    // [823] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __3
    ora.z col2
    sta.z __4
    // [824] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 -- _deref_pbuz1=vbuz2 
    lda.z __4
    ldy #0
    sta (ch),y
    // [825] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [826] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [827] if((byte) gfx_init_screen2::cx#1!=(byte) $28) goto gfx_init_screen2::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen2::@3
  __b3:
    // [828] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [829] if((byte) gfx_init_screen2::cy#1!=(byte) $19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen2::@return
  __breturn:
    // [830] return 
    rts
}
  // gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label __0 = $151
    .label __1 = $152
    .label ch = $98
    .label cx = $97
    .label cy = $96
    // [832] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
  __b1_from_gfx_init_screen1:
    // [832] phi (byte*) gfx_init_screen1::ch#3 = (const byte*) VIC_SCREEN1 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z ch
    lda #>VIC_SCREEN1
    sta.z ch+1
    // [832] phi (byte) gfx_init_screen1::cy#4 = (byte) 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [832] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
  __b1_from___b3:
    // [832] phi (byte*) gfx_init_screen1::ch#3 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
    // [832] phi (byte) gfx_init_screen1::cy#4 = (byte) gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen1::@1
  __b1:
    // [833] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
  __b2_from___b1:
    // [833] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
    // [833] phi (byte) gfx_init_screen1::cx#2 = (byte) 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    jmp __b2
    // [833] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
  __b2_from___b2:
    // [833] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
    // [833] phi (byte) gfx_init_screen1::cx#2 = (byte) gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen1::@2
  __b2:
    // [834] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 -- vbuz1=vbuz2_plus_vbuz3 
    lda.z cx
    clc
    adc.z cy
    sta.z __0
    // [835] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z __0
    sta.z __1
    // [836] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 -- _deref_pbuz1=vbuz2 
    lda.z __1
    ldy #0
    sta (ch),y
    // [837] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [838] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [839] if((byte) gfx_init_screen1::cx#1!=(byte) $28) goto gfx_init_screen1::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen1::@3
  __b3:
    // [840] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [841] if((byte) gfx_init_screen1::cy#1!=(byte) $19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen1::@return
  __breturn:
    // [842] return 
    rts
}
  // gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label __0 = $153
    .label __1 = $154
    .label __2 = $155
    .label __3 = $156
    .label ch = $9c
    .label cx = $9b
    .label cy = $9a
    // [844] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  __b1_from_gfx_init_screen0:
    // [844] phi (byte*) gfx_init_screen0::ch#3 = (const byte*) VIC_SCREEN0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z ch
    lda #>VIC_SCREEN0
    sta.z ch+1
    // [844] phi (byte) gfx_init_screen0::cy#4 = (byte) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [844] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  __b1_from___b3:
    // [844] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
    // [844] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen0::@1
  __b1:
    // [845] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  __b2_from___b1:
    // [845] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
    // [845] phi (byte) gfx_init_screen0::cx#2 = (byte) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cx
    jmp __b2
    // [845] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  __b2_from___b2:
    // [845] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
    // [845] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen0::@2
  __b2:
    // [846] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z cy
    sta.z __0
    // [847] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 -- vbuz1=vbuz2_rol_4 
    lda.z __0
    asl
    asl
    asl
    asl
    sta.z __1
    // [848] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f -- vbuz1=vbuz2_band_vbuc1 
    lda #$f
    and.z cx
    sta.z __2
    // [849] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuz1=vbuz2_bor_vbuz3 
    lda.z __1
    ora.z __2
    sta.z __3
    // [850] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuz2 
    lda.z __3
    ldy #0
    sta (ch),y
    // [851] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [852] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuz1=_inc_vbuz1 
    inc.z cx
    // [853] if((byte) gfx_init_screen0::cx#1!=(byte) $28) goto gfx_init_screen0::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z cx
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen0::@3
  __b3:
    // [854] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [855] if((byte) gfx_init_screen0::cy#1!=(byte) $19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen0::@return
  __breturn:
    // [856] return 
    rts
}
  // keyboard_init
// Initialize keyboard reading by setting CIA#$ Data Direction Registers
keyboard_init: {
    // [857] *((const byte*) CIA1_PORT_A_DDR) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1_PORT_A_DDR
    // [858] *((const byte*) CIA1_PORT_B_DDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1_PORT_B_DDR
    jmp __breturn
    // keyboard_init::@return
  __breturn:
    // [859] return 
    rts
}
  // File Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
  .byte 0
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
  .byte 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Equivalence Class zp[1]:325 [ bitmap_init::$7 ] has ALU potential.
Statement [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) DTV_FEATURE) ← (const byte) DTV_FEATURE_ENABLE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] if(*((const byte[]) form_fields_val+(byte) 5)==(byte) 0) goto gfx_mode::@1 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Removing always clobbered register reg byte a as potential for zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ]
Statement [19] if(*((const byte[]) form_fields_val+(byte) 8)==(byte) 0) goto gfx_mode::@2 [ keyboard_events_size#24 gfx_mode::dtv_control#14 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#14 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Statement [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#2 ] ) always clobbers reg byte a 
Statement [22] if(*((const byte[]) form_fields_val+(byte) 4)==(byte) 0) goto gfx_mode::@3 [ keyboard_events_size#24 gfx_mode::dtv_control#15 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#15 ] ) always clobbers reg byte a 
Statement [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR [ keyboard_events_size#24 gfx_mode::dtv_control#3 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#3 ] ) always clobbers reg byte a 
Statement [25] if(*((const byte[]) form_fields_val+(byte) 9)==(byte) 0) goto gfx_mode::@4 [ keyboard_events_size#24 gfx_mode::dtv_control#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#10 ] ) always clobbers reg byte a 
Statement [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN [ keyboard_events_size#24 gfx_mode::dtv_control#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#4 ] ) always clobbers reg byte a 
Statement [28] if(*((const byte[]) form_fields_val+(byte) 6)==(byte) 0) goto gfx_mode::@5 [ keyboard_events_size#24 gfx_mode::dtv_control#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#11 ] ) always clobbers reg byte a 
Statement [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#5 ] ) always clobbers reg byte a 
Statement [31] if(*((const byte[]) form_fields_val+(byte) 7)==(byte) 0) goto gfx_mode::@6 [ keyboard_events_size#24 gfx_mode::dtv_control#13 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#13 ] ) always clobbers reg byte a 
Statement [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY [ keyboard_events_size#24 gfx_mode::dtv_control#6 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#6 ] ) always clobbers reg byte a 
Statement [35] if(*((const byte[]) form_fields_val+(byte) 3)==(byte) 0) goto gfx_mode::@7 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [38] if(*((const byte[]) form_fields_val+(byte) 1)==(byte) 0) goto gfx_mode::@8 [ keyboard_events_size#24 gfx_mode::vic_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#5 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
Statement [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM [ keyboard_events_size#24 gfx_mode::vic_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#2 ] ) always clobbers reg byte a 
Statement [42] if(*((const byte[]) form_fields_val+(byte) 2)==(byte) 0) goto gfx_mode::@9 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [46] (byte~) gfx_mode::$20 ← *((const byte[]) form_fields_val+(byte) $b) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$20 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$20 ] ) always clobbers reg byte a 
Statement [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte[]) form_fields_val+(byte) $c) [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ) always clobbers reg byte a 
Statement [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:159 [ gfx_mode::plane_a_offs#0 ]
Statement [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ) always clobbers reg byte a 
Statement [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 ] ) always clobbers reg byte a 
Statement [53] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ) always clobbers reg byte a 
Statement [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$26 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 gfx_mode::$25 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 gfx_mode::$25 ] ) always clobbers reg byte a 
Statement [56] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ) always clobbers reg byte a 
Statement [58] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::$28 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$28 ] ) always clobbers reg byte a 
Statement [59] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 [ keyboard_events_size#24 gfx_mode::$29 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$29 ] ) always clobbers reg byte a 
Statement [61] (byte~) gfx_mode::$30 ← *((const byte[]) form_fields_val+(byte) $d) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$30 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$30 ] ) always clobbers reg byte a 
Statement [62] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte[]) form_fields_val+(byte) $e) [ keyboard_events_size#24 gfx_mode::$31 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$31 ] ) always clobbers reg byte a 
Statement [64] (byte~) gfx_mode::$32 ← *((const byte[]) form_fields_val+(byte) $f) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$32 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$32 ] ) always clobbers reg byte a 
Statement [65] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte[]) form_fields_val+(byte) $10) [ keyboard_events_size#24 gfx_mode::$33 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$33 ] ) always clobbers reg byte a 
Statement [67] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [68] (byte~) gfx_mode::$34 ← *((const byte[]) form_fields_val+(byte) $12) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$34 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$34 ] ) always clobbers reg byte a 
Statement [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte[]) form_fields_val+(byte) $13) [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ) always clobbers reg byte a 
Statement [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:184 [ gfx_mode::plane_b_offs#0 ]
Statement [73] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ) always clobbers reg byte a 
Statement [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 ] ) always clobbers reg byte a 
Statement [75] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ) always clobbers reg byte a 
Statement [76] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$40 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 gfx_mode::$39 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 gfx_mode::$39 ] ) always clobbers reg byte a 
Statement [78] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ) always clobbers reg byte a 
Statement [80] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::$42 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$42 ] ) always clobbers reg byte a 
Statement [81] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 [ keyboard_events_size#24 gfx_mode::$43 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$43 ] ) always clobbers reg byte a 
Statement [83] (byte~) gfx_mode::$44 ← *((const byte[]) form_fields_val+(byte) $14) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$44 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$44 ] ) always clobbers reg byte a 
Statement [84] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte[]) form_fields_val+(byte) $15) [ keyboard_events_size#24 gfx_mode::$45 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$45 ] ) always clobbers reg byte a 
Statement [86] (byte~) gfx_mode::$46 ← *((const byte[]) form_fields_val+(byte) $16) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$46 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$46 ] ) always clobbers reg byte a 
Statement [87] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte[]) form_fields_val+(byte) $17) [ keyboard_events_size#24 gfx_mode::$47 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$47 ] ) always clobbers reg byte a 
Statement [89] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [90] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [91] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) VIC_SCREEN0/(word) $4000 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#10 ] ) always clobbers reg byte a 
Statement [95] (byte*~) gfx_mode::$53 ← (byte*) get_vic_screen::return#10 [ keyboard_events_size#24 gfx_mode::$53 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$53 ] ) always clobbers reg byte a 
Statement [96] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$53 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$54 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$54 ] ) always clobbers reg byte a 
Statement [97] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte) 6 [ keyboard_events_size#24 gfx_mode::$55 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$55 ] ) always clobbers reg byte a 
Statement [98] (byte~) gfx_mode::$56 ← (byte)(word~) gfx_mode::$55 [ keyboard_events_size#24 gfx_mode::$56 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 ] ) always clobbers reg byte a 
Statement [101] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 [ keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:216 [ gfx_mode::$56 ]
Statement [102] (byte*~) gfx_mode::$58 ← (byte*) get_vic_charset::return#4 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$58 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$58 ] ) always clobbers reg byte a 
Statement [103] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$58 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ) always clobbers reg byte a 
Statement [104] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ) always clobbers reg byte a 
Statement [105] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte) 2 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ) always clobbers reg byte a 
Statement [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#11 ] ) always clobbers reg byte a 
Statement [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 [ keyboard_events_size#24 gfx_mode::vic_colors#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_colors#0 ] ) always clobbers reg byte a 
Statement [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) [ keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Removing always clobbered register reg byte y as potential for zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Removing always clobbered register reg byte y as potential for zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Statement [121] *((const byte*) BORDERCOL) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [122] (byte~) gfx_mode::$64 ← *((const byte[]) form_fields_val+(byte) $1c) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$64 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$64 ] ) always clobbers reg byte a 
Statement [123] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte[]) form_fields_val+(byte) $1d) [ keyboard_events_size#24 gfx_mode::$65 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$65 ] ) always clobbers reg byte a 
Statement [125] (byte~) gfx_mode::$66 ← *((const byte[]) form_fields_val+(byte) $1e) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$66 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$66 ] ) always clobbers reg byte a 
Statement [126] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte[]) form_fields_val+(byte) $1f) [ keyboard_events_size#24 gfx_mode::$67 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$67 ] ) always clobbers reg byte a 
Statement [128] (byte~) gfx_mode::$68 ← *((const byte[]) form_fields_val+(byte) $20) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$68 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$68 ] ) always clobbers reg byte a 
Statement [129] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte[]) form_fields_val+(byte) $21) [ keyboard_events_size#24 gfx_mode::$69 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$69 ] ) always clobbers reg byte a 
Statement [131] (byte~) gfx_mode::$70 ← *((const byte[]) form_fields_val+(byte) $22) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$70 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$70 ] ) always clobbers reg byte a 
Statement [132] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte[]) form_fields_val+(byte) $23) [ keyboard_events_size#24 gfx_mode::$71 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$71 ] ) always clobbers reg byte a 
Statement [134] if(*((const byte[]) form_fields_val+(byte) $1b)==(byte) 0) goto gfx_mode::@24 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [139] if(*((const byte*) RASTER)!=(byte) $ff) goto gfx_mode::@25 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [149] *((const byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) [ keyboard_events_size#24 gfx_mode::i#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ]
Statement [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#109 keyboard_event_scan::keycode#1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_events_size#109 keyboard_event_scan::keycode#1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_events_size#109 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:265 [ form_field_ptr::x#0 ]
Statement [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT [ keyboard_events_size#100 keyboard_modifiers#3 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#3 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#3 ] ) always clobbers reg byte a 
Statement [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL [ keyboard_events_size#100 keyboard_modifiers#4 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#4 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#4 ] ) always clobbers reg byte a 
Statement [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE [ keyboard_events_size#100 keyboard_modifiers#5 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#5 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#5 ] ) always clobbers reg byte a 
Statement [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:241 [ keyboard_event_scan::row_scan#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Statement [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [201] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ) always clobbers reg byte a 
Statement [207] *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#108 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#108 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#108 ] ) always clobbers reg byte a 
Statement [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ) always clobbers reg byte a 
Statement [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 [ keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:19 [ keyboard_event_pressed::keycode#4 ]
Removing always clobbered register reg byte a as potential for zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
Statement [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:255 [ keyboard_event_pressed::row_bits#0 ]
Statement [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#10 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] ) always clobbers reg byte a 
Statement [217] *((const byte*) CIA1_PORT_A) ← *((const byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 ] ) always clobbers reg byte a 
Statement [218] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B) [ keyboard_matrix_read::return#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_matrix_read::return#0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [270] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [271] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [272] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [273] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [274] *((const byte*) CIA2_PORT_A) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [275] *((const byte*) DTV_CONTROL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [276] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [277] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [278] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [279] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [280] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) FORM_SCREEN [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [281] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [283] *((const byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:30 [ form_mode::i#2 form_mode::i#1 ]
Statement [286] *((const byte*) BGCOL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [287] *((const byte*) BORDERCOL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [290] if(*((const byte*) RASTER)!=(byte) $ff) goto form_mode::@4 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ( main:2::form_mode:13 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ) always clobbers reg byte a 
Statement [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 [ print_str_at::str#1 ] ( main:2::form_mode:13::render_preset_name:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#1 ] main:2::form_mode:13::render_preset_name:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#1 ] ) always clobbers reg byte a 
Statement [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Statement [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Statement [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_render_values::idx#2)) [ form_render_values::idx#2 ] ( main:2::form_mode:13::form_render_values:267 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 ] main:2::form_mode:13::form_render_values:301 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:41 [ form_render_values::idx#2 form_render_values::idx#1 ]
Statement [338] (word) form_field_ptr::line#0 ← *((const byte[$19]) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo + (byte) form_field_ptr::y#0) [ form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ( main:2::form_mode:13::form_render_values:267::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] main:2::form_mode:13::form_render_values:301::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] main:2::form_mode:13::form_control:292::form_field_ptr:360 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
Statement [357] *((const byte[]) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) [ apply_preset::preset#15 apply_preset::i#2 ] ( main:2::form_mode:13::apply_preset:299 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 apply_preset::preset#15 apply_preset::i#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:45 [ apply_preset::i#2 apply_preset::i#1 ]
Statement [365] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [366] (byte~) form_control::$13 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$13 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$13 ] ) always clobbers reg byte a 
Statement [375] (byte~) form_control::$15 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_control::$15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_control::$15 ] ) always clobbers reg byte a 
Statement [377] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ) always clobbers reg byte a 
Statement [389] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$24 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$24 ] ) always clobbers reg byte a 
Statement [392] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [393] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max + (byte) form_field_idx#28) [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [394] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_field_idx#28)) [ keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [396] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:265 [ form_field_ptr::x#0 ]
Statement [397] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [400] (byte~) form_control::$14 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) | (byte) $80 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$14 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$14 ] ) always clobbers reg byte a reg byte y 
Statement [401] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$14 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte y 
Statement [408] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 [ form_set_screen::y#2 form_set_screen::line#1 ] ( main:2::form_mode:13::form_set_screen:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_set_screen::y#2 form_set_screen::line#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:49 [ form_set_screen::y#2 form_set_screen::y#1 ]
Statement [413] (byte*~) print_char_cursor#73 ← (byte*) print_set_screen::screen#2 [ print_str_lines::str#5 print_char_cursor#73 print_set_screen::screen#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#73 print_set_screen::screen#2 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#73 print_set_screen::screen#2 ] ) always clobbers reg byte a 
Statement [415] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 [ print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ) always clobbers reg byte a reg byte y 
Statement [418] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) [ print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [421] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 [ print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:275 [ print_str_lines::ch#0 ]
Statement [427] (byte*~) print_char_cursor#74 ← (byte*) print_line_cursor#22 [ print_str_lines::str#0 print_char_cursor#74 print_line_cursor#22 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#74 print_line_cursor#22 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#74 print_line_cursor#22 ] ) always clobbers reg byte a 
Statement [430] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:263::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [431] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:263::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [433] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 [ print_set_screen::screen#2 memset::str#0 ] ( main:2::form_mode:13::print_cls:255 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] main:2::form_mode:13::print_cls:261 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] ) always clobbers reg byte a 
Statement [437] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 [ memset::str#0 memset::end#0 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] ) always clobbers reg byte a 
Statement [438] (byte*~) memset::dst#4 ← (byte*)(void*) memset::str#0 [ memset::end#0 memset::dst#4 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] ) always clobbers reg byte a 
Statement [440] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a 
Statement [442] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [481] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:62 [ gfx_init_plane_fill::fill#6 ]
Statement [482] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ) always clobbers reg byte a 
Statement [483] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ) always clobbers reg byte a 
Statement [486] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ) always clobbers reg byte a 
Statement [487] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ) always clobbers reg byte a 
Statement [488] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ) always clobbers reg byte a 
Statement [489] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ) always clobbers reg byte a 
Statement [492] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:62 [ gfx_init_plane_fill::fill#6 ]
Removing always clobbered register reg byte a as potential for zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Statement [515] (byte~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$7 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:469 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$7 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Statement [517] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:469 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Statement [530] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_vertical:467 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
Statement [545] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:465 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
Statement [555] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:465 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [559] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_CHARROM [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ ] ) always clobbers reg byte a 
Statement [562] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Statement [569] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Statement [579] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ ] ) always clobbers reg byte a 
Statement [586] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ) always clobbers reg byte a 
Statement [591] (word~) gfx_init_plane_8bppchunky::$8 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$8 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$8 ] ) always clobbers reg byte a 
Statement [592] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$8 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ) always clobbers reg byte a 
Statement [593] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
Statement [596] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ) always clobbers reg byte a 
Statement [616] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:300 [ bitmap_line::x0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:301 [ bitmap_line::x1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:302 [ bitmap_line::y0#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:303 [ bitmap_line::y1#0 ]
Statement [618] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:304 [ bitmap_line::xd#2 ]
Statement [633] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ) always clobbers reg byte a 
Statement [647] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ) always clobbers reg byte a 
Statement [649] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:307 [ bitmap_line::xd#1 ]
Statement [663] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ) always clobbers reg byte a 
Statement [678] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
Statement [684] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ) always clobbers reg byte a 
Statement [687] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ) always clobbers reg byte a 
Statement [693] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4) [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte a as potential for zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte a as potential for zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Statement [694] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ) always clobbers reg byte a 
Statement [695] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] ) always clobbers reg byte a 
Statement [696] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_plot::x#4) [ bitmap_plot::plotter#0 bitmap_plot::$1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Removing always clobbered register reg byte y as potential for zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
Removing always clobbered register reg byte y as potential for zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Removing always clobbered register reg byte y as potential for zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Statement [697] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 [ ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] ) always clobbers reg byte y 
Statement [700] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ) always clobbers reg byte a 
Statement [706] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ) always clobbers reg byte a 
Statement [709] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ) always clobbers reg byte a 
Statement [715] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ) always clobbers reg byte a 
Statement [721] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ) always clobbers reg byte a 
Statement [724] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ) always clobbers reg byte a 
Statement [730] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ) always clobbers reg byte a 
Statement [736] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ) always clobbers reg byte a 
Statement [739] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ) always clobbers reg byte a 
Statement [744] (word) bitmap_clear::bitmap#0 ← *((const byte[$100]) bitmap_plot_xhi) w= *((const byte[$100]) bitmap_plot_xlo) [ bitmap_clear::bitmap#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_clear:605 [ bitmap_clear::bitmap#0 ] ) always clobbers reg byte a 
Statement [745] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0 [ bitmap_clear::bitmap#5 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_clear:605 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [748] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_clear:605 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ]
Statement [759] *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:127 [ bitmap_init::x#2 bitmap_init::x#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
Statement [760] *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [775] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Statement [780] *((const byte*) PROCPORT) ← (byte) $32 [ ] ( main:2::gfx_init:10::gfx_init_charset:457 [ ] ) always clobbers reg byte a 
Statement [783] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ( main:2::gfx_init:10::gfx_init_charset:457 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
Statement [790] *((const byte*) PROCPORT) ← (byte) $37 [ ] ( main:2::gfx_init:10::gfx_init_charset:457 [ ] ) always clobbers reg byte a 
Statement [795] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ( main:2::gfx_init:10::gfx_init_screen4:455 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte a as potential for zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
Statement [806] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Statement [807] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:329 [ gfx_init_screen3::$1 ]
Statement [809] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Statement [819] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Statement [821] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:333 [ gfx_init_screen2::col#0 ]
Statement [822] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:334 [ gfx_init_screen2::col2#0 ]
Statement [824] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Statement [834] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ( main:2::gfx_init:10::gfx_init_screen1:449 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Statement [836] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen1:449 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
Statement [847] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [848] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:340 [ gfx_init_screen0::$1 ]
Statement [850] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Statement [857] *((const byte*) CIA1_PORT_A_DDR) ← (byte) $ff [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Statement [858] *((const byte*) CIA1_PORT_B_DDR) ← (byte) 0 [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) DTV_FEATURE) ← (const byte) DTV_FEATURE_ENABLE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] if(*((const byte[]) form_fields_val+(byte) 5)==(byte) 0) goto gfx_mode::@1 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [19] if(*((const byte[]) form_fields_val+(byte) 8)==(byte) 0) goto gfx_mode::@2 [ keyboard_events_size#24 gfx_mode::dtv_control#14 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#14 ] ) always clobbers reg byte a 
Statement [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#2 ] ) always clobbers reg byte a 
Statement [22] if(*((const byte[]) form_fields_val+(byte) 4)==(byte) 0) goto gfx_mode::@3 [ keyboard_events_size#24 gfx_mode::dtv_control#15 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#15 ] ) always clobbers reg byte a 
Statement [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR [ keyboard_events_size#24 gfx_mode::dtv_control#3 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#3 ] ) always clobbers reg byte a 
Statement [25] if(*((const byte[]) form_fields_val+(byte) 9)==(byte) 0) goto gfx_mode::@4 [ keyboard_events_size#24 gfx_mode::dtv_control#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#10 ] ) always clobbers reg byte a 
Statement [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN [ keyboard_events_size#24 gfx_mode::dtv_control#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#4 ] ) always clobbers reg byte a 
Statement [28] if(*((const byte[]) form_fields_val+(byte) 6)==(byte) 0) goto gfx_mode::@5 [ keyboard_events_size#24 gfx_mode::dtv_control#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#11 ] ) always clobbers reg byte a 
Statement [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#5 ] ) always clobbers reg byte a 
Statement [31] if(*((const byte[]) form_fields_val+(byte) 7)==(byte) 0) goto gfx_mode::@6 [ keyboard_events_size#24 gfx_mode::dtv_control#13 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#13 ] ) always clobbers reg byte a 
Statement [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY [ keyboard_events_size#24 gfx_mode::dtv_control#6 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#6 ] ) always clobbers reg byte a 
Statement [35] if(*((const byte[]) form_fields_val+(byte) 3)==(byte) 0) goto gfx_mode::@7 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [38] if(*((const byte[]) form_fields_val+(byte) 1)==(byte) 0) goto gfx_mode::@8 [ keyboard_events_size#24 gfx_mode::vic_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#5 ] ) always clobbers reg byte a 
Statement [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM [ keyboard_events_size#24 gfx_mode::vic_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#2 ] ) always clobbers reg byte a 
Statement [42] if(*((const byte[]) form_fields_val+(byte) 2)==(byte) 0) goto gfx_mode::@9 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [46] (byte~) gfx_mode::$20 ← *((const byte[]) form_fields_val+(byte) $b) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$20 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$20 ] ) always clobbers reg byte a 
Statement [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte[]) form_fields_val+(byte) $c) [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ) always clobbers reg byte a 
Statement [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ) always clobbers reg byte a 
Statement [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ) always clobbers reg byte a 
Statement [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 ] ) always clobbers reg byte a 
Statement [53] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ) always clobbers reg byte a 
Statement [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$26 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 gfx_mode::$25 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 gfx_mode::$25 ] ) always clobbers reg byte a 
Statement [56] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ) always clobbers reg byte a 
Statement [58] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::$28 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$28 ] ) always clobbers reg byte a 
Statement [59] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 [ keyboard_events_size#24 gfx_mode::$29 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$29 ] ) always clobbers reg byte a 
Statement [61] (byte~) gfx_mode::$30 ← *((const byte[]) form_fields_val+(byte) $d) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$30 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$30 ] ) always clobbers reg byte a 
Statement [62] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte[]) form_fields_val+(byte) $e) [ keyboard_events_size#24 gfx_mode::$31 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$31 ] ) always clobbers reg byte a 
Statement [64] (byte~) gfx_mode::$32 ← *((const byte[]) form_fields_val+(byte) $f) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$32 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$32 ] ) always clobbers reg byte a 
Statement [65] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte[]) form_fields_val+(byte) $10) [ keyboard_events_size#24 gfx_mode::$33 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$33 ] ) always clobbers reg byte a 
Statement [67] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [68] (byte~) gfx_mode::$34 ← *((const byte[]) form_fields_val+(byte) $12) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$34 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$34 ] ) always clobbers reg byte a 
Statement [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte[]) form_fields_val+(byte) $13) [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ) always clobbers reg byte a 
Statement [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ) always clobbers reg byte a 
Statement [73] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ) always clobbers reg byte a 
Statement [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 ] ) always clobbers reg byte a 
Statement [75] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ) always clobbers reg byte a 
Statement [76] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$40 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 gfx_mode::$39 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 gfx_mode::$39 ] ) always clobbers reg byte a 
Statement [78] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ) always clobbers reg byte a 
Statement [80] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::$42 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$42 ] ) always clobbers reg byte a 
Statement [81] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 [ keyboard_events_size#24 gfx_mode::$43 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$43 ] ) always clobbers reg byte a 
Statement [83] (byte~) gfx_mode::$44 ← *((const byte[]) form_fields_val+(byte) $14) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$44 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$44 ] ) always clobbers reg byte a 
Statement [84] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte[]) form_fields_val+(byte) $15) [ keyboard_events_size#24 gfx_mode::$45 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$45 ] ) always clobbers reg byte a 
Statement [86] (byte~) gfx_mode::$46 ← *((const byte[]) form_fields_val+(byte) $16) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$46 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$46 ] ) always clobbers reg byte a 
Statement [87] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte[]) form_fields_val+(byte) $17) [ keyboard_events_size#24 gfx_mode::$47 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$47 ] ) always clobbers reg byte a 
Statement [89] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [90] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [91] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) VIC_SCREEN0/(word) $4000 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#10 ] ) always clobbers reg byte a 
Statement [95] (byte*~) gfx_mode::$53 ← (byte*) get_vic_screen::return#10 [ keyboard_events_size#24 gfx_mode::$53 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$53 ] ) always clobbers reg byte a 
Statement [96] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$53 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$54 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$54 ] ) always clobbers reg byte a 
Statement [97] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte) 6 [ keyboard_events_size#24 gfx_mode::$55 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$55 ] ) always clobbers reg byte a 
Statement [98] (byte~) gfx_mode::$56 ← (byte)(word~) gfx_mode::$55 [ keyboard_events_size#24 gfx_mode::$56 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 ] ) always clobbers reg byte a 
Statement [101] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 [ keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ) always clobbers reg byte a 
Statement [102] (byte*~) gfx_mode::$58 ← (byte*) get_vic_charset::return#4 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$58 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$58 ] ) always clobbers reg byte a 
Statement [103] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$58 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ) always clobbers reg byte a 
Statement [104] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ) always clobbers reg byte a 
Statement [105] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte) 2 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ) always clobbers reg byte a 
Statement [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#11 ] ) always clobbers reg byte a 
Statement [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 [ keyboard_events_size#24 gfx_mode::vic_colors#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_colors#0 ] ) always clobbers reg byte a 
Statement [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) [ keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ) always clobbers reg byte a reg byte y 
Statement [121] *((const byte*) BORDERCOL) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [122] (byte~) gfx_mode::$64 ← *((const byte[]) form_fields_val+(byte) $1c) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$64 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$64 ] ) always clobbers reg byte a 
Statement [123] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte[]) form_fields_val+(byte) $1d) [ keyboard_events_size#24 gfx_mode::$65 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$65 ] ) always clobbers reg byte a 
Statement [125] (byte~) gfx_mode::$66 ← *((const byte[]) form_fields_val+(byte) $1e) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$66 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$66 ] ) always clobbers reg byte a 
Statement [126] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte[]) form_fields_val+(byte) $1f) [ keyboard_events_size#24 gfx_mode::$67 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$67 ] ) always clobbers reg byte a 
Statement [128] (byte~) gfx_mode::$68 ← *((const byte[]) form_fields_val+(byte) $20) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$68 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$68 ] ) always clobbers reg byte a 
Statement [129] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte[]) form_fields_val+(byte) $21) [ keyboard_events_size#24 gfx_mode::$69 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$69 ] ) always clobbers reg byte a 
Statement [131] (byte~) gfx_mode::$70 ← *((const byte[]) form_fields_val+(byte) $22) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$70 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$70 ] ) always clobbers reg byte a 
Statement [132] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte[]) form_fields_val+(byte) $23) [ keyboard_events_size#24 gfx_mode::$71 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$71 ] ) always clobbers reg byte a 
Statement [134] if(*((const byte[]) form_fields_val+(byte) $1b)==(byte) 0) goto gfx_mode::@24 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [139] if(*((const byte*) RASTER)!=(byte) $ff) goto gfx_mode::@25 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [149] *((const byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) [ keyboard_events_size#24 gfx_mode::i#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::i#2 ] ) always clobbers reg byte a 
Statement [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_event_scan::row_scan#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_event_scan::row_scan#0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_event_scan::row_scan#0 ] ) always clobbers reg byte a 
Statement [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#109 keyboard_event_scan::keycode#1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_events_size#109 keyboard_event_scan::keycode#1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_events_size#109 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Statement [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT [ keyboard_events_size#100 keyboard_modifiers#3 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#3 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#3 ] ) always clobbers reg byte a 
Statement [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL [ keyboard_events_size#100 keyboard_modifiers#4 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#4 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#4 ] ) always clobbers reg byte a 
Statement [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE [ keyboard_events_size#100 keyboard_modifiers#5 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#5 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#5 ] ) always clobbers reg byte a 
Statement [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ) always clobbers reg byte a 
Statement [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [201] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ) always clobbers reg byte a 
Statement [207] *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#108 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#108 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#108 ] ) always clobbers reg byte a 
Statement [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ) always clobbers reg byte a 
Statement [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 [ keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Statement [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Statement [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#10 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] ) always clobbers reg byte a 
Statement [217] *((const byte*) CIA1_PORT_A) ← *((const byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 ] ) always clobbers reg byte a 
Statement [218] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B) [ keyboard_matrix_read::return#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_matrix_read::return#0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [270] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [271] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [272] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [273] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [274] *((const byte*) CIA2_PORT_A) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [275] *((const byte*) DTV_CONTROL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [276] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [277] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [278] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [279] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [280] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) FORM_SCREEN [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [281] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [283] *((const byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ) always clobbers reg byte a 
Statement [286] *((const byte*) BGCOL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [287] *((const byte*) BORDERCOL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [290] if(*((const byte*) RASTER)!=(byte) $ff) goto form_mode::@4 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ( main:2::form_mode:13 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ) always clobbers reg byte a 
Statement [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 [ print_str_at::str#1 ] ( main:2::form_mode:13::render_preset_name:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#1 ] main:2::form_mode:13::render_preset_name:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#1 ] ) always clobbers reg byte a 
Statement [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Statement [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Statement [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_render_values::idx#2)) [ form_render_values::idx#2 ] ( main:2::form_mode:13::form_render_values:267 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 ] main:2::form_mode:13::form_render_values:301 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:41 [ form_render_values::idx#2 form_render_values::idx#1 ]
Statement [338] (word) form_field_ptr::line#0 ← *((const byte[$19]) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo + (byte) form_field_ptr::y#0) [ form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ( main:2::form_mode:13::form_render_values:267::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] main:2::form_mode:13::form_render_values:301::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] main:2::form_mode:13::form_control:292::form_field_ptr:360 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ) always clobbers reg byte a 
Statement [357] *((const byte[]) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) [ apply_preset::preset#15 apply_preset::i#2 ] ( main:2::form_mode:13::apply_preset:299 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 apply_preset::preset#15 apply_preset::i#2 ] ) always clobbers reg byte a 
Statement [365] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [366] (byte~) form_control::$13 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$13 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$13 ] ) always clobbers reg byte a reg byte y 
Statement [367] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$13 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte y 
Statement [375] (byte~) form_control::$15 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_control::$15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_control::$15 ] ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
Statement [376] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$15 [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ) always clobbers reg byte y 
Statement [377] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ) always clobbers reg byte a 
Statement [389] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$24 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$24 ] ) always clobbers reg byte a 
Statement [392] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [393] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max + (byte) form_field_idx#28) [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [394] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_field_idx#28)) [ keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ) always clobbers reg byte a reg byte y 
Statement [396] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a reg byte y 
Statement [397] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [400] (byte~) form_control::$14 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) | (byte) $80 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$14 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$14 ] ) always clobbers reg byte a reg byte y 
Statement [401] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$14 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte y 
Statement [408] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 [ form_set_screen::y#2 form_set_screen::line#1 ] ( main:2::form_mode:13::form_set_screen:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_set_screen::y#2 form_set_screen::line#1 ] ) always clobbers reg byte a 
Statement [413] (byte*~) print_char_cursor#73 ← (byte*) print_set_screen::screen#2 [ print_str_lines::str#5 print_char_cursor#73 print_set_screen::screen#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#73 print_set_screen::screen#2 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#73 print_set_screen::screen#2 ] ) always clobbers reg byte a 
Statement [415] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 [ print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ) always clobbers reg byte a reg byte y 
Statement [418] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) [ print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [421] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 [ print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte y 
Statement [427] (byte*~) print_char_cursor#74 ← (byte*) print_line_cursor#22 [ print_str_lines::str#0 print_char_cursor#74 print_line_cursor#22 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#74 print_line_cursor#22 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#74 print_line_cursor#22 ] ) always clobbers reg byte a 
Statement [430] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:263::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [431] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:263::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [433] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 [ print_set_screen::screen#2 memset::str#0 ] ( main:2::form_mode:13::print_cls:255 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] main:2::form_mode:13::print_cls:261 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] ) always clobbers reg byte a 
Statement [437] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 [ memset::str#0 memset::end#0 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] ) always clobbers reg byte a 
Statement [438] (byte*~) memset::dst#4 ← (byte*)(void*) memset::str#0 [ memset::end#0 memset::dst#4 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] ) always clobbers reg byte a 
Statement [440] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a 
Statement [442] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [481] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ) always clobbers reg byte a 
Statement [482] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ) always clobbers reg byte a 
Statement [483] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ) always clobbers reg byte a 
Statement [486] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ) always clobbers reg byte a 
Statement [487] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ) always clobbers reg byte a 
Statement [488] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ) always clobbers reg byte a 
Statement [489] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ) always clobbers reg byte a 
Statement [492] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [515] (byte~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$7 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:469 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$7 ] ) always clobbers reg byte a 
Statement [517] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:469 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [530] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_vertical:467 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement [543] (byte~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$7 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:465 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$7 ] ) always clobbers reg byte a 
Statement [545] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:465 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [555] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:465 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [559] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_CHARROM [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ ] ) always clobbers reg byte a 
Statement [562] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ) always clobbers reg byte a reg byte y 
Statement [569] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ) always clobbers reg byte y 
Statement [579] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ ] ) always clobbers reg byte a 
Statement [586] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ) always clobbers reg byte a 
Statement [591] (word~) gfx_init_plane_8bppchunky::$8 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$8 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$8 ] ) always clobbers reg byte a 
Statement [592] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$8 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ) always clobbers reg byte a 
Statement [593] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ) always clobbers reg byte y 
Statement [596] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ) always clobbers reg byte a 
Statement [616] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ) always clobbers reg byte a 
Statement [618] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ) always clobbers reg byte a 
Statement [633] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ) always clobbers reg byte a 
Statement [647] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ) always clobbers reg byte a 
Statement [649] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ) always clobbers reg byte a 
Statement [663] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ) always clobbers reg byte a 
Statement [678] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ) always clobbers reg byte a 
Statement [684] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ) always clobbers reg byte a 
Statement [687] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ) always clobbers reg byte a 
Statement [693] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4) [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ) always clobbers reg byte a 
Statement [694] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ) always clobbers reg byte a 
Statement [695] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] ) always clobbers reg byte a 
Statement [696] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_plot::x#4) [ bitmap_plot::plotter#0 bitmap_plot::$1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] ) always clobbers reg byte a reg byte y 
Statement [697] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 [ ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] ) always clobbers reg byte y 
Statement [700] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ) always clobbers reg byte a 
Statement [706] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ) always clobbers reg byte a 
Statement [709] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ) always clobbers reg byte a 
Statement [715] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ) always clobbers reg byte a 
Statement [721] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ) always clobbers reg byte a 
Statement [724] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ) always clobbers reg byte a 
Statement [730] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ) always clobbers reg byte a 
Statement [736] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ) always clobbers reg byte a 
Statement [739] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ) always clobbers reg byte a 
Statement [744] (word) bitmap_clear::bitmap#0 ← *((const byte[$100]) bitmap_plot_xhi) w= *((const byte[$100]) bitmap_plot_xlo) [ bitmap_clear::bitmap#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_clear:605 [ bitmap_clear::bitmap#0 ] ) always clobbers reg byte a 
Statement [745] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0 [ bitmap_clear::bitmap#5 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_clear:605 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [748] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_clear:605 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Statement [757] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ) always clobbers reg byte a 
Statement [759] *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [760] *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [768] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ) always clobbers reg byte a 
Statement [775] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Statement [780] *((const byte*) PROCPORT) ← (byte) $32 [ ] ( main:2::gfx_init:10::gfx_init_charset:457 [ ] ) always clobbers reg byte a 
Statement [783] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ( main:2::gfx_init:10::gfx_init_charset:457 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ) always clobbers reg byte a reg byte y 
Statement [790] *((const byte*) PROCPORT) ← (byte) $37 [ ] ( main:2::gfx_init:10::gfx_init_charset:457 [ ] ) always clobbers reg byte a 
Statement [795] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ( main:2::gfx_init:10::gfx_init_screen4:455 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ) always clobbers reg byte a reg byte y 
Statement [805] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] ) always clobbers reg byte a 
Statement [806] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ) always clobbers reg byte a 
Statement [807] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ) always clobbers reg byte a 
Statement [809] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ) always clobbers reg byte y 
Statement [819] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ) always clobbers reg byte a 
Statement [821] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ) always clobbers reg byte a 
Statement [822] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ) always clobbers reg byte a 
Statement [824] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ) always clobbers reg byte y 
Statement [834] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ( main:2::gfx_init:10::gfx_init_screen1:449 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ) always clobbers reg byte a 
Statement [836] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen1:449 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ) always clobbers reg byte y 
Statement [846] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ) always clobbers reg byte a 
Statement [847] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ) always clobbers reg byte a 
Statement [848] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ) always clobbers reg byte a 
Statement [850] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ) always clobbers reg byte y 
Statement [857] *((const byte*) CIA1_PORT_A_DDR) ← (byte) $ff [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Statement [858] *((const byte*) CIA1_PORT_B_DDR) ← (byte) 0 [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Statement [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [7] *((const byte*) DTV_FEATURE) ← (const byte) DTV_FEATURE_ENABLE [ ] ( main:2 [ ] ) always clobbers reg byte a 
Statement [16] if(*((const byte[]) form_fields_val+(byte) 5)==(byte) 0) goto gfx_mode::@1 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [19] if(*((const byte[]) form_fields_val+(byte) 8)==(byte) 0) goto gfx_mode::@2 [ keyboard_events_size#24 gfx_mode::dtv_control#14 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#14 ] ) always clobbers reg byte a 
Statement [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#2 ] ) always clobbers reg byte a 
Statement [22] if(*((const byte[]) form_fields_val+(byte) 4)==(byte) 0) goto gfx_mode::@3 [ keyboard_events_size#24 gfx_mode::dtv_control#15 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#15 ] ) always clobbers reg byte a 
Statement [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR [ keyboard_events_size#24 gfx_mode::dtv_control#3 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#3 ] ) always clobbers reg byte a 
Statement [25] if(*((const byte[]) form_fields_val+(byte) 9)==(byte) 0) goto gfx_mode::@4 [ keyboard_events_size#24 gfx_mode::dtv_control#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#10 ] ) always clobbers reg byte a 
Statement [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN [ keyboard_events_size#24 gfx_mode::dtv_control#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#4 ] ) always clobbers reg byte a 
Statement [28] if(*((const byte[]) form_fields_val+(byte) 6)==(byte) 0) goto gfx_mode::@5 [ keyboard_events_size#24 gfx_mode::dtv_control#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#11 ] ) always clobbers reg byte a 
Statement [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF [ keyboard_events_size#24 gfx_mode::dtv_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#5 ] ) always clobbers reg byte a 
Statement [31] if(*((const byte[]) form_fields_val+(byte) 7)==(byte) 0) goto gfx_mode::@6 [ keyboard_events_size#24 gfx_mode::dtv_control#13 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#13 ] ) always clobbers reg byte a 
Statement [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY [ keyboard_events_size#24 gfx_mode::dtv_control#6 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::dtv_control#6 ] ) always clobbers reg byte a 
Statement [35] if(*((const byte[]) form_fields_val+(byte) 3)==(byte) 0) goto gfx_mode::@7 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [38] if(*((const byte[]) form_fields_val+(byte) 1)==(byte) 0) goto gfx_mode::@8 [ keyboard_events_size#24 gfx_mode::vic_control#5 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#5 ] ) always clobbers reg byte a 
Statement [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM [ keyboard_events_size#24 gfx_mode::vic_control#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_control#2 ] ) always clobbers reg byte a 
Statement [42] if(*((const byte[]) form_fields_val+(byte) 2)==(byte) 0) goto gfx_mode::@9 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [46] (byte~) gfx_mode::$20 ← *((const byte[]) form_fields_val+(byte) $b) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$20 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$20 ] ) always clobbers reg byte a 
Statement [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte[]) form_fields_val+(byte) $c) [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 ] ) always clobbers reg byte a 
Statement [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 get_plane::return#16 ] ) always clobbers reg byte a 
Statement [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16 [ keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a_offs#0 gfx_mode::$22 ] ) always clobbers reg byte a 
Statement [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 ] ) always clobbers reg byte a 
Statement [53] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 ] ) always clobbers reg byte a 
Statement [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$26 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 gfx_mode::$25 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$26 gfx_mode::$25 ] ) always clobbers reg byte a 
Statement [56] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 [ keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_a#0 gfx_mode::$27 ] ) always clobbers reg byte a 
Statement [58] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 [ keyboard_events_size#24 gfx_mode::$28 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$28 ] ) always clobbers reg byte a 
Statement [59] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 [ keyboard_events_size#24 gfx_mode::$29 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$29 ] ) always clobbers reg byte a 
Statement [61] (byte~) gfx_mode::$30 ← *((const byte[]) form_fields_val+(byte) $d) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$30 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$30 ] ) always clobbers reg byte a 
Statement [62] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte[]) form_fields_val+(byte) $e) [ keyboard_events_size#24 gfx_mode::$31 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$31 ] ) always clobbers reg byte a 
Statement [64] (byte~) gfx_mode::$32 ← *((const byte[]) form_fields_val+(byte) $f) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$32 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$32 ] ) always clobbers reg byte a 
Statement [65] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte[]) form_fields_val+(byte) $10) [ keyboard_events_size#24 gfx_mode::$33 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$33 ] ) always clobbers reg byte a 
Statement [67] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [68] (byte~) gfx_mode::$34 ← *((const byte[]) form_fields_val+(byte) $12) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$34 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$34 ] ) always clobbers reg byte a 
Statement [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte[]) form_fields_val+(byte) $13) [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 ] ) always clobbers reg byte a 
Statement [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 get_plane::return#17 ] ) always clobbers reg byte a 
Statement [73] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17 [ keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b_offs#0 gfx_mode::$36 ] ) always clobbers reg byte a 
Statement [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 ] ) always clobbers reg byte a 
Statement [75] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 ] ) always clobbers reg byte a 
Statement [76] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$40 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 gfx_mode::$39 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$40 gfx_mode::$39 ] ) always clobbers reg byte a 
Statement [78] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 [ keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::plane_b#0 gfx_mode::$41 ] ) always clobbers reg byte a 
Statement [80] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 [ keyboard_events_size#24 gfx_mode::$42 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$42 ] ) always clobbers reg byte a 
Statement [81] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 [ keyboard_events_size#24 gfx_mode::$43 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$43 ] ) always clobbers reg byte a 
Statement [83] (byte~) gfx_mode::$44 ← *((const byte[]) form_fields_val+(byte) $14) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$44 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$44 ] ) always clobbers reg byte a 
Statement [84] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte[]) form_fields_val+(byte) $15) [ keyboard_events_size#24 gfx_mode::$45 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$45 ] ) always clobbers reg byte a 
Statement [86] (byte~) gfx_mode::$46 ← *((const byte[]) form_fields_val+(byte) $16) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$46 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$46 ] ) always clobbers reg byte a 
Statement [87] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte[]) form_fields_val+(byte) $17) [ keyboard_events_size#24 gfx_mode::$47 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$47 ] ) always clobbers reg byte a 
Statement [89] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [90] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [91] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) VIC_SCREEN0/(word) $4000 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#10 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#10 ] ) always clobbers reg byte a 
Statement [95] (byte*~) gfx_mode::$53 ← (byte*) get_vic_screen::return#10 [ keyboard_events_size#24 gfx_mode::$53 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$53 ] ) always clobbers reg byte a 
Statement [96] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$53 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$54 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$54 ] ) always clobbers reg byte a 
Statement [97] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte) 6 [ keyboard_events_size#24 gfx_mode::$55 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$55 ] ) always clobbers reg byte a 
Statement [98] (byte~) gfx_mode::$56 ← (byte)(word~) gfx_mode::$55 [ keyboard_events_size#24 gfx_mode::$56 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 ] ) always clobbers reg byte a 
Statement [101] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2 [ keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 get_vic_charset::return#4 ] ) always clobbers reg byte a 
Statement [102] (byte*~) gfx_mode::$58 ← (byte*) get_vic_charset::return#4 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$58 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$58 ] ) always clobbers reg byte a 
Statement [103] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$58 & (word) $3fff [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$59 ] ) always clobbers reg byte a 
Statement [104] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$60 ] ) always clobbers reg byte a 
Statement [105] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte) 2 [ keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$56 gfx_mode::$61 ] ) always clobbers reg byte a 
Statement [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5 [ keyboard_events_size#24 get_vic_screen::return#11 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 get_vic_screen::return#11 ] ) always clobbers reg byte a 
Statement [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11 [ keyboard_events_size#24 gfx_mode::vic_colors#0 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::vic_colors#0 ] ) always clobbers reg byte a 
Statement [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) [ keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::cy#4 gfx_mode::vic_colors#2 gfx_mode::col#2 gfx_mode::cx#2 ] ) always clobbers reg byte a reg byte y 
Statement [121] *((const byte*) BORDERCOL) ← (byte) 0 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [122] (byte~) gfx_mode::$64 ← *((const byte[]) form_fields_val+(byte) $1c) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$64 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$64 ] ) always clobbers reg byte a 
Statement [123] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte[]) form_fields_val+(byte) $1d) [ keyboard_events_size#24 gfx_mode::$65 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$65 ] ) always clobbers reg byte a 
Statement [125] (byte~) gfx_mode::$66 ← *((const byte[]) form_fields_val+(byte) $1e) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$66 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$66 ] ) always clobbers reg byte a 
Statement [126] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte[]) form_fields_val+(byte) $1f) [ keyboard_events_size#24 gfx_mode::$67 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$67 ] ) always clobbers reg byte a 
Statement [128] (byte~) gfx_mode::$68 ← *((const byte[]) form_fields_val+(byte) $20) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$68 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$68 ] ) always clobbers reg byte a 
Statement [129] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte[]) form_fields_val+(byte) $21) [ keyboard_events_size#24 gfx_mode::$69 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$69 ] ) always clobbers reg byte a 
Statement [131] (byte~) gfx_mode::$70 ← *((const byte[]) form_fields_val+(byte) $22) << (byte) 4 [ keyboard_events_size#24 gfx_mode::$70 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$70 ] ) always clobbers reg byte a 
Statement [132] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte[]) form_fields_val+(byte) $23) [ keyboard_events_size#24 gfx_mode::$71 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::$71 ] ) always clobbers reg byte a 
Statement [134] if(*((const byte[]) form_fields_val+(byte) $1b)==(byte) 0) goto gfx_mode::@24 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [139] if(*((const byte*) RASTER)!=(byte) $ff) goto gfx_mode::@25 [ keyboard_events_size#24 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 ] ) always clobbers reg byte a 
Statement [149] *((const byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) [ keyboard_events_size#24 gfx_mode::i#2 ] ( main:2::gfx_mode:15 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#24 gfx_mode::i#2 ] ) always clobbers reg byte a 
Statement [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_event_scan::row_scan#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_event_scan::row_scan#0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_event_scan::row_scan#0 ] ) always clobbers reg byte a 
Statement [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 [ keyboard_event_scan::row#2 keyboard_events_size#109 keyboard_event_scan::keycode#1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_events_size#109 keyboard_event_scan::keycode#1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_events_size#109 keyboard_event_scan::keycode#1 ] ) always clobbers reg byte a 
Statement [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT [ keyboard_events_size#100 keyboard_modifiers#3 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#3 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#3 ] ) always clobbers reg byte a 
Statement [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL [ keyboard_events_size#100 keyboard_modifiers#4 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#4 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#4 ] ) always clobbers reg byte a 
Statement [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE [ keyboard_events_size#100 keyboard_modifiers#5 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#5 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#5 ] ) always clobbers reg byte a 
Statement [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$15 ] ) always clobbers reg byte a 
Statement [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::event_type#0 ] ) always clobbers reg byte a 
Statement [201] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 ] ) always clobbers reg byte a 
Statement [207] *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 [ keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#108 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#108 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#14 keyboard_events_size#108 ] ) always clobbers reg byte a 
Statement [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 [ keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ( main:2::gfx_mode:15::keyboard_event_scan:141 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::row_scan#0 keyboard_event_scan::col#2 keyboard_event_scan::keycode#10 keyboard_events_size#18 keyboard_event_scan::$23 ] ) always clobbers reg byte a 
Statement [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 [ keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::keycode#4 keyboard_event_pressed::$0 ] ) always clobbers reg byte a 
Statement [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 [ keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::row_bits#0 keyboard_event_pressed::$1 ] ) always clobbers reg byte a 
Statement [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) [ keyboard_event_pressed::return#10 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:169 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:169 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:175 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:175 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#18 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:181 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:181 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#19 keyboard_event_pressed::return#10 ] main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_event_pressed:187 [ form_cursor_count#16 form_field_idx#18 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_event_pressed:187 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_events_size#100 keyboard_modifiers#20 keyboard_event_pressed::return#10 ] ) always clobbers reg byte a 
Statement [217] *((const byte*) CIA1_PORT_A) ← *((const byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) [ ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 ] ) always clobbers reg byte a 
Statement [218] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B) [ keyboard_matrix_read::return#0 ] ( main:2::gfx_mode:15::keyboard_event_scan:141::keyboard_matrix_read:160 [ form_cursor_count#16 form_field_idx#18 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_matrix_read::return#0 ] main:2::form_mode:13::form_control:292::keyboard_event_scan:369::keyboard_matrix_read:160 [ form_mode::preset_current#6 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 keyboard_event_scan::row#2 keyboard_event_scan::keycode#11 keyboard_events_size#109 keyboard_matrix_read::return#0 ] ) always clobbers reg byte a 
Statement [270] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [271] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [272] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [273] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [274] *((const byte*) CIA2_PORT_A) ← (byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [275] *((const byte*) DTV_CONTROL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [276] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [277] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [278] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [279] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [280] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) FORM_SCREEN [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [281] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [283] *((const byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_mode::i#2 ] ) always clobbers reg byte a 
Statement [286] *((const byte*) BGCOL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [287] *((const byte*) BORDERCOL) ← (byte) 0 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ( main:2::form_mode:13 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 ] ) always clobbers reg byte a 
Statement [290] if(*((const byte*) RASTER)!=(byte) $ff) goto form_mode::@4 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ( main:2::form_mode:13 [ keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_mode::preset_current#6 ] ) always clobbers reg byte a 
Statement [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13 [ print_str_at::str#1 ] ( main:2::form_mode:13::render_preset_name:269 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#1 ] main:2::form_mode:13::render_preset_name:303 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#1 ] ) always clobbers reg byte a 
Statement [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Statement [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) [ print_str_at::str#2 print_str_at::at#2 ] ( main:2::form_mode:13::render_preset_name:269::print_str_at:319 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_at::str#2 print_str_at::at#2 ] main:2::form_mode:13::render_preset_name:303::print_str_at:319 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 print_str_at::str#2 print_str_at::at#2 ] ) always clobbers reg byte a reg byte y 
Statement [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_render_values::idx#2)) [ form_render_values::idx#2 ] ( main:2::form_mode:13::form_render_values:267 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 ] main:2::form_mode:13::form_render_values:301 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 ] ) always clobbers reg byte a reg byte y 
Statement [338] (word) form_field_ptr::line#0 ← *((const byte[$19]) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo + (byte) form_field_ptr::y#0) [ form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ( main:2::form_mode:13::form_render_values:267::form_field_ptr:333 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] main:2::form_mode:13::form_render_values:301::form_field_ptr:333 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 form_mode::preset_current#1 form_render_values::idx#2 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] main:2::form_mode:13::form_control:292::form_field_ptr:360 [ form_mode::preset_current#6 keyboard_events_size#47 form_cursor_count#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::field_idx#2 ] ) always clobbers reg byte a 
Statement [357] *((const byte[]) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) [ apply_preset::preset#15 apply_preset::i#2 ] ( main:2::form_mode:13::apply_preset:299 [ form_cursor_count#16 keyboard_events_size#24 form_field_idx#18 apply_preset::preset#15 apply_preset::i#2 ] ) always clobbers reg byte a 
Statement [365] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [366] (byte~) form_control::$13 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$13 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$13 ] ) always clobbers reg byte a reg byte y 
Statement [367] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$13 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte y 
Statement [375] (byte~) form_control::$15 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_control::$15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_control::$15 ] ) always clobbers reg byte a reg byte y 
Statement [376] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$15 [ keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 keyboard_modifiers#21 form_field_idx#28 ] ) always clobbers reg byte y 
Statement [377] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_control::$16 ] ) always clobbers reg byte a 
Statement [389] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$24 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$24 ] ) always clobbers reg byte a 
Statement [392] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [393] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max + (byte) form_field_idx#28) [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [394] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_field_idx#28)) [ keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_cursor_count#15 ] ) always clobbers reg byte a reg byte y 
Statement [396] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a reg byte y 
Statement [397] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 [ keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#24 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte a 
Statement [400] (byte~) form_control::$14 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) | (byte) $80 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$14 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 form_control::$14 ] ) always clobbers reg byte a reg byte y 
Statement [401] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$14 [ keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ( main:2::form_mode:13::form_control:292 [ form_mode::preset_current#6 keyboard_events_size#47 form_field_idx#28 form_field_ptr::line#0 form_field_ptr::x#0 form_cursor_count#15 ] ) always clobbers reg byte y 
Statement [408] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 [ form_set_screen::y#2 form_set_screen::line#1 ] ( main:2::form_mode:13::form_set_screen:265 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 form_set_screen::y#2 form_set_screen::line#1 ] ) always clobbers reg byte a 
Statement [413] (byte*~) print_char_cursor#73 ← (byte*) print_set_screen::screen#2 [ print_str_lines::str#5 print_char_cursor#73 print_set_screen::screen#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#73 print_set_screen::screen#2 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#5 print_char_cursor#73 print_set_screen::screen#2 ] ) always clobbers reg byte a 
Statement [415] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 [ print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#3 print_char_cursor#22 print_line_cursor#2 ] ) always clobbers reg byte a reg byte y 
Statement [418] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) [ print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#4 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte a reg byte y 
Statement [421] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 [ print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_line_cursor#2 print_str_lines::str#0 print_char_cursor#20 print_str_lines::ch#0 ] ) always clobbers reg byte y 
Statement [427] (byte*~) print_char_cursor#74 ← (byte*) print_line_cursor#22 [ print_str_lines::str#0 print_char_cursor#74 print_line_cursor#22 ] ( main:2::form_mode:13::print_str_lines:257 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#74 print_line_cursor#22 ] main:2::form_mode:13::print_str_lines:263 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_char_cursor#74 print_line_cursor#22 ] ) always clobbers reg byte a 
Statement [430] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:263::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [431] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 [ print_line_cursor#22 print_char_cursor#38 ] ( main:2::form_mode:13::print_str_lines:257::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] main:2::form_mode:13::print_str_lines:263::print_ln:426 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_str_lines::str#0 print_line_cursor#22 print_char_cursor#38 ] ) always clobbers reg byte a 
Statement [433] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 [ print_set_screen::screen#2 memset::str#0 ] ( main:2::form_mode:13::print_cls:255 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] main:2::form_mode:13::print_cls:261 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 ] ) always clobbers reg byte a 
Statement [437] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 [ memset::str#0 memset::end#0 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::str#0 memset::end#0 ] ) always clobbers reg byte a 
Statement [438] (byte*~) memset::dst#4 ← (byte*)(void*) memset::str#0 [ memset::end#0 memset::dst#4 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#4 ] ) always clobbers reg byte a 
Statement [440] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a 
Statement [442] *((byte*) memset::dst#2) ← (const byte) memset::c#0 [ memset::end#0 memset::dst#2 ] ( main:2::form_mode:13::print_cls:255::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] main:2::form_mode:13::print_cls:261::memset:434 [ form_cursor_count#1 keyboard_events_size#27 form_field_idx#1 print_set_screen::screen#2 memset::end#0 memset::dst#2 ] ) always clobbers reg byte a reg byte y 
Statement [481] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$0 ] ) always clobbers reg byte a 
Statement [482] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$1 ] ) always clobbers reg byte a 
Statement [483] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::plane_addr#3 gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxbCpuBank#0 ] ) always clobbers reg byte a 
Statement [486] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$4 ] ) always clobbers reg byte a 
Statement [487] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::$5 ] ) always clobbers reg byte a 
Statement [488] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#0 ] ) always clobbers reg byte a 
Statement [489] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::gfxb#6 ] ) always clobbers reg byte a 
Statement [492] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_full:475::gfx_init_plane_fill:478 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_blank:473::gfx_init_plane_fill:506 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] main:2::gfx_init:10::gfx_init_plane_vertical2:471::gfx_init_plane_fill:509 [ gfx_init_plane_fill::fill#6 gfx_init_plane_fill::by#4 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement asm { .byte$32,$dd lda$ff .byte$32,$00  } always clobbers reg byte a 
Statement [515] (byte~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$7 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:469 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::$7 ] ) always clobbers reg byte a 
Statement [517] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal2:469 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [530] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ( main:2::gfx_init:10::gfx_init_plane_vertical:467 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::bx#2 ] ) always clobbers reg byte a reg byte y 
Statement [543] (byte~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$7 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:465 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::$7 ] ) always clobbers reg byte a 
Statement [545] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:465 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [555] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ( main:2::gfx_init:10::gfx_init_plane_horisontal:465 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::ax#2 ] ) always clobbers reg byte a reg byte y 
Statement [559] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_CHARROM [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ ] ) always clobbers reg byte a 
Statement [562] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#0 ] ) always clobbers reg byte a reg byte y 
Statement [569] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::chargen#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::cp#2 ] ) always clobbers reg byte y 
Statement [579] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO [ ] ( main:2::gfx_init:10::gfx_init_plane_charset8:463 [ ] ) always clobbers reg byte a 
Statement [586] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxbCpuBank#4 ] ) always clobbers reg byte a 
Statement [591] (word~) gfx_init_plane_8bppchunky::$8 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$8 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::$8 ] ) always clobbers reg byte a 
Statement [592] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$8 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::c#0 ] ) always clobbers reg byte a 
Statement [593] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::gfxb#4 ] ) always clobbers reg byte y 
Statement [596] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ( main:2::gfx_init:10::gfx_init_plane_8bppchunky:461 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::x#1 ] ) always clobbers reg byte a 
Statement [616] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 ] ) always clobbers reg byte a 
Statement [618] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#2 ] ) always clobbers reg byte a 
Statement [633] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#2 bitmap_line::yd#1 ] ) always clobbers reg byte a 
Statement [647] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 ] ) always clobbers reg byte a 
Statement [649] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#10 ] ) always clobbers reg byte a 
Statement [663] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 [ bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613 [ gfx_init_vic_bitmap::l#2 bitmap_line::x0#0 bitmap_line::x1#0 bitmap_line::y0#0 bitmap_line::y1#0 bitmap_line::xd#1 bitmap_line::yd#11 ] ) always clobbers reg byte a 
Statement [678] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::x#6 bitmap_line_xdyi::y#5 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::e#0 ] ) always clobbers reg byte a 
Statement [684] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::y#3 bitmap_line_xdyi::x#2 bitmap_line_xdyi::e#1 ] ) always clobbers reg byte a 
Statement [687] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#2 bitmap_line_xdyi::y#2 bitmap_line_xdyi::e#2 ] ) always clobbers reg byte a 
Statement [693] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4) [ bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::y#4 bitmap_plot::plotter_x#0 ] ) always clobbers reg byte a 
Statement [694] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4) [ bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter_x#0 bitmap_plot::plotter_y#0 ] ) always clobbers reg byte a 
Statement [695] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 [ bitmap_plot::x#4 bitmap_plot::plotter#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::x#4 bitmap_plot::plotter#0 ] ) always clobbers reg byte a 
Statement [696] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_plot::x#4) [ bitmap_plot::plotter#0 bitmap_plot::$1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 bitmap_plot::plotter#0 bitmap_plot::$1 ] ) always clobbers reg byte a reg byte y 
Statement [697] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 [ ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:632::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyi:676::bitmap_plot:682 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x#3 bitmap_line_xdyi::y#3 bitmap_line_xdyi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670::bitmap_plot:704 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#3 bitmap_line_ydxi::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662::bitmap_plot:719 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#3 bitmap_line_xdyd::y#3 bitmap_line_xdyd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656::bitmap_plot:734 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#2 bitmap_line_ydxd::e#3 ] ) always clobbers reg byte y 
Statement [700] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::x#5 bitmap_line_ydxi::y#6 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::e#0 ] ) always clobbers reg byte a 
Statement [706] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::x#3 bitmap_line_ydxi::y#2 bitmap_line_ydxi::e#1 ] ) always clobbers reg byte a 
Statement [709] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:625 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxi:670 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::yd#5 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y#2 bitmap_line_ydxi::x#2 bitmap_line_ydxi::e#2 ] ) always clobbers reg byte a 
Statement [715] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::x#6 bitmap_line_xdyd::y#5 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::e#0 ] ) always clobbers reg byte a 
Statement [721] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::y#3 bitmap_line_xdyd::x#2 bitmap_line_xdyd::e#1 ] ) always clobbers reg byte a 
Statement [724] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:646 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_xdyd:662 [ gfx_init_vic_bitmap::l#2 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x#2 bitmap_line_xdyd::y#2 bitmap_line_xdyd::e#2 ] ) always clobbers reg byte a 
Statement [730] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::x#5 bitmap_line_ydxd::y#7 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::e#0 ] ) always clobbers reg byte a 
Statement [736] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::x#3 bitmap_line_ydxd::y#3 bitmap_line_ydxd::e#1 ] ) always clobbers reg byte a 
Statement [739] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:640 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_line:613::bitmap_line_ydxd:656 [ gfx_init_vic_bitmap::l#2 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::yd#5 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y#3 bitmap_line_ydxd::x#2 bitmap_line_ydxd::e#2 ] ) always clobbers reg byte a 
Statement [744] (word) bitmap_clear::bitmap#0 ← *((const byte[$100]) bitmap_plot_xhi) w= *((const byte[$100]) bitmap_plot_xlo) [ bitmap_clear::bitmap#0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_clear:605 [ bitmap_clear::bitmap#0 ] ) always clobbers reg byte a 
Statement [745] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0 [ bitmap_clear::bitmap#5 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_clear:605 [ bitmap_clear::bitmap#5 ] ) always clobbers reg byte a 
Statement [748] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_clear:605 [ bitmap_clear::y#4 bitmap_clear::bitmap#2 bitmap_clear::x#2 ] ) always clobbers reg byte a reg byte y 
Statement [757] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::x#2 bitmap_init::bits#3 bitmap_init::$0 ] ) always clobbers reg byte a 
Statement [759] *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [760] *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 [ bitmap_init::x#2 bitmap_init::bits#3 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::x#2 bitmap_init::bits#3 ] ) always clobbers reg byte a 
Statement [768] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::y#2 bitmap_init::yoffs#2 bitmap_init::$10 ] ) always clobbers reg byte a 
Statement [775] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ( main:2::gfx_init:10::gfx_init_vic_bitmap:459::bitmap_init:603 [ bitmap_init::y#2 bitmap_init::yoffs#1 ] ) always clobbers reg byte a 
Statement [780] *((const byte*) PROCPORT) ← (byte) $32 [ ] ( main:2::gfx_init:10::gfx_init_charset:457 [ ] ) always clobbers reg byte a 
Statement [783] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ( main:2::gfx_init:10::gfx_init_charset:457 [ gfx_init_charset::c#4 gfx_init_charset::chargen#2 gfx_init_charset::charset#2 gfx_init_charset::l#2 ] ) always clobbers reg byte a reg byte y 
Statement [790] *((const byte*) PROCPORT) ← (byte) $37 [ ] ( main:2::gfx_init:10::gfx_init_charset:457 [ ] ) always clobbers reg byte a 
Statement [795] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ( main:2::gfx_init:10::gfx_init_screen4:455 [ gfx_init_screen4::cy#4 gfx_init_screen4::ch#2 gfx_init_screen4::cx#2 ] ) always clobbers reg byte a reg byte y 
Statement [805] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$0 ] ) always clobbers reg byte a 
Statement [806] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 ] ) always clobbers reg byte a 
Statement [807] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 gfx_init_screen3::$1 gfx_init_screen3::$2 ] ) always clobbers reg byte a 
Statement [809] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen3:453 [ gfx_init_screen3::cy#4 gfx_init_screen3::cx#2 gfx_init_screen3::ch#2 ] ) always clobbers reg byte y 
Statement [819] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::$0 ] ) always clobbers reg byte a 
Statement [821] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col#0 gfx_init_screen2::col2#0 ] ) always clobbers reg byte a 
Statement [822] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 gfx_init_screen2::col2#0 gfx_init_screen2::$3 ] ) always clobbers reg byte a 
Statement [824] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen2:451 [ gfx_init_screen2::cy#4 gfx_init_screen2::cx#2 gfx_init_screen2::ch#2 ] ) always clobbers reg byte y 
Statement [834] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ( main:2::gfx_init:10::gfx_init_screen1:449 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 gfx_init_screen1::$0 ] ) always clobbers reg byte a 
Statement [836] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen1:449 [ gfx_init_screen1::cy#4 gfx_init_screen1::cx#2 gfx_init_screen1::ch#2 ] ) always clobbers reg byte y 
Statement [846] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$0 ] ) always clobbers reg byte a 
Statement [847] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 ] ) always clobbers reg byte a 
Statement [848] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 gfx_init_screen0::$1 gfx_init_screen0::$2 ] ) always clobbers reg byte a 
Statement [850] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ( main:2::gfx_init:10::gfx_init_screen0:447 [ gfx_init_screen0::cy#4 gfx_init_screen0::cx#2 gfx_init_screen0::ch#2 ] ) always clobbers reg byte y 
Statement [857] *((const byte*) CIA1_PORT_A_DDR) ← (byte) $ff [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Statement [858] *((const byte*) CIA1_PORT_B_DDR) ← (byte) 0 [ ] ( main:2::keyboard_init:8 [ ] ) always clobbers reg byte a 
Potential registers zp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] : zp[1]:2 , reg byte x , reg byte y , 
Potential registers zp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ] : zp[1]:3 , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ gfx_mode::vic_control2#2 ] : zp[1]:4 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] : zp[1]:5 , reg byte x , 
Potential registers zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ] : zp[2]:6 , 
Potential registers zp[2]:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] : zp[2]:8 , 
Potential registers zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ] : zp[1]:10 , reg byte x , 
Potential registers zp[1]:11 [ gfx_mode::j#2 gfx_mode::j#1 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ] : zp[1]:12 , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] : zp[1]:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] : zp[1]:14 , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ] : zp[1]:15 , reg byte x , 
Potential registers zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] : zp[1]:16 , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] : zp[1]:17 , reg byte x , reg byte y , 
Potential registers zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ] : zp[1]:18 , reg byte x , 
Potential registers zp[1]:19 [ keyboard_event_pressed::keycode#4 ] : zp[1]:19 , reg byte x , reg byte y , 
Potential registers zp[1]:20 [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ] : zp[1]:20 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:21 [ get_vic_screen::return#5 ] : zp[2]:21 , 
Potential registers zp[2]:23 [ get_vic_charset::return#2 ] : zp[2]:23 , 
Potential registers zp[1]:25 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] : zp[1]:25 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[4]:26 [ get_plane::return#14 ] : zp[4]:26 , 
Potential registers zp[1]:30 [ form_mode::i#2 form_mode::i#1 ] : zp[1]:30 , reg byte x , reg byte y , 
Potential registers zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] : zp[1]:31 , reg byte x , 
Potential registers zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] : zp[1]:32 , reg byte x , 
Potential registers zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] : zp[1]:33 , reg byte x , 
Potential registers zp[1]:34 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] : zp[1]:34 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:35 [ render_preset_name::name#13 ] : zp[2]:35 , 
Potential registers zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] : zp[2]:37 , 
Potential registers zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ] : zp[2]:39 , 
Potential registers zp[1]:41 [ form_render_values::idx#2 form_render_values::idx#1 ] : zp[1]:41 , reg byte x , 
Potential registers zp[1]:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] : zp[1]:42 , reg byte x , reg byte y , 
Potential registers zp[2]:43 [ apply_preset::preset#15 ] : zp[2]:43 , 
Potential registers zp[1]:45 [ apply_preset::i#2 apply_preset::i#1 ] : zp[1]:45 , reg byte x , reg byte y , 
Potential registers zp[1]:46 [ form_control::return#2 ] : zp[1]:46 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ] : zp[2]:47 , 
Potential registers zp[1]:49 [ form_set_screen::y#2 form_set_screen::y#1 ] : zp[1]:49 , reg byte x , reg byte y , 
Potential registers zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] : zp[2]:50 , 
Potential registers zp[2]:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 ] : zp[2]:52 , 
Potential registers zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] : zp[2]:54 , 
Potential registers zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ] : zp[2]:56 , 
Potential registers zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ] : zp[4]:58 , 
Potential registers zp[1]:62 [ gfx_init_plane_fill::fill#6 ] : zp[1]:62 , reg byte x , 
Potential registers zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] : zp[1]:63 , reg byte x , 
Potential registers zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] : zp[2]:64 , 
Potential registers zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] : zp[1]:66 , reg byte x , 
Potential registers zp[1]:67 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] : zp[1]:67 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] : zp[1]:68 , reg byte x , 
Potential registers zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] : zp[2]:69 , 
Potential registers zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] : zp[1]:71 , reg byte x , 
Potential registers zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] : zp[1]:72 , reg byte x , 
Potential registers zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] : zp[2]:73 , 
Potential registers zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] : zp[1]:75 , reg byte x , 
Potential registers zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] : zp[1]:76 , reg byte x , 
Potential registers zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] : zp[2]:77 , 
Potential registers zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] : zp[1]:79 , reg byte x , 
Potential registers zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] : zp[1]:80 , reg byte x , 
Potential registers zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] : zp[2]:81 , 
Potential registers zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] : zp[1]:83 , reg byte x , 
Potential registers zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] : zp[1]:84 , reg byte a , reg byte x , 
Potential registers zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] : zp[2]:85 , 
Potential registers zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] : zp[1]:87 , reg byte x , 
Potential registers zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] : zp[1]:88 , reg byte a , reg byte x , 
Potential registers zp[1]:89 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] : zp[1]:89 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] : zp[1]:90 , reg byte x , 
Potential registers zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] : zp[2]:91 , 
Potential registers zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] : zp[1]:93 , reg byte x , 
Potential registers zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] : zp[2]:94 , 
Potential registers zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] : zp[1]:96 , reg byte x , 
Potential registers zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] : zp[1]:97 , reg byte x , 
Potential registers zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] : zp[1]:98 , reg byte x , 
Potential registers zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] : zp[1]:99 , reg byte x , 
Potential registers zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] : zp[1]:100 , reg byte x , 
Potential registers zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] : zp[1]:101 , reg byte x , 
Potential registers zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] : zp[1]:102 , reg byte x , 
Potential registers zp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] : zp[1]:103 , reg byte x , reg byte y , 
Potential registers zp[1]:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] : zp[1]:104 , reg byte x , reg byte y , 
Potential registers zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] : zp[1]:105 , reg byte x , 
Potential registers zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] : zp[1]:106 , reg byte x , 
Potential registers zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] : zp[1]:107 , reg byte x , 
Potential registers zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] : zp[1]:108 , reg byte x , 
Potential registers zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] : zp[1]:109 , reg byte x , 
Potential registers zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] : zp[1]:110 , reg byte x , 
Potential registers zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] : zp[1]:111 , reg byte x , 
Potential registers zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] : zp[1]:112 , reg byte x , 
Potential registers zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] : zp[1]:113 , reg byte x , 
Potential registers zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] : zp[1]:114 , reg byte x , 
Potential registers zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] : zp[1]:115 , reg byte x , 
Potential registers zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] : zp[1]:116 , reg byte x , 
Potential registers zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] : zp[1]:117 , reg byte x , 
Potential registers zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] : zp[1]:118 , reg byte x , 
Potential registers zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] : zp[1]:119 , reg byte x , 
Potential registers zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] : zp[1]:120 , reg byte x , 
Potential registers zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] : zp[1]:121 , reg byte x , 
Potential registers zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] : zp[1]:122 , reg byte x , 
Potential registers zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] : zp[1]:123 , reg byte x , 
Potential registers zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] : zp[2]:124 , 
Potential registers zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ] : zp[1]:126 , reg byte x , 
Potential registers zp[1]:127 [ bitmap_init::x#2 bitmap_init::x#1 ] : zp[1]:127 , reg byte x , reg byte y , 
Potential registers zp[1]:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] : zp[1]:128 , reg byte x , reg byte y , 
Potential registers zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ] : zp[1]:129 , reg byte x , reg byte y , 
Potential registers zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] : zp[2]:130 , 
Potential registers zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] : zp[1]:132 , reg byte x , 
Potential registers zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] : zp[2]:133 , 
Potential registers zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] : zp[2]:135 , 
Potential registers zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] : zp[1]:137 , reg byte x , 
Potential registers zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] : zp[1]:138 , reg byte x , 
Potential registers zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] : zp[2]:139 , 
Potential registers zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] : zp[1]:141 , reg byte x , 
Potential registers zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] : zp[1]:142 , reg byte x , 
Potential registers zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] : zp[1]:143 , reg byte x , 
Potential registers zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] : zp[2]:144 , 
Potential registers zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] : zp[1]:146 , reg byte x , 
Potential registers zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] : zp[1]:147 , reg byte x , 
Potential registers zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] : zp[2]:148 , 
Potential registers zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] : zp[1]:150 , reg byte x , 
Potential registers zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] : zp[1]:151 , reg byte x , 
Potential registers zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] : zp[2]:152 , 
Potential registers zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] : zp[1]:154 , reg byte x , 
Potential registers zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] : zp[1]:155 , reg byte x , 
Potential registers zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] : zp[2]:156 , 
Potential registers zp[1]:158 [ gfx_mode::$20 ] : zp[1]:158 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:159 [ gfx_mode::plane_a_offs#0 ] : zp[1]:159 , reg byte x , reg byte y , 
Potential registers zp[4]:160 [ get_plane::return#16 ] : zp[4]:160 , 
Potential registers zp[4]:164 [ gfx_mode::$22 ] : zp[4]:164 , 
Potential registers zp[4]:168 [ gfx_mode::plane_a#0 ] : zp[4]:168 , 
Potential registers zp[2]:172 [ gfx_mode::$26 ] : zp[2]:172 , 
Potential registers zp[1]:174 [ gfx_mode::$25 ] : zp[1]:174 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:175 [ gfx_mode::$27 ] : zp[1]:175 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:176 [ gfx_mode::$28 ] : zp[2]:176 , 
Potential registers zp[1]:178 [ gfx_mode::$29 ] : zp[1]:178 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:179 [ gfx_mode::$30 ] : zp[1]:179 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:180 [ gfx_mode::$31 ] : zp[1]:180 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:181 [ gfx_mode::$32 ] : zp[1]:181 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:182 [ gfx_mode::$33 ] : zp[1]:182 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:183 [ gfx_mode::$34 ] : zp[1]:183 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:184 [ gfx_mode::plane_b_offs#0 ] : zp[1]:184 , reg byte x , reg byte y , 
Potential registers zp[4]:185 [ get_plane::return#17 ] : zp[4]:185 , 
Potential registers zp[4]:189 [ gfx_mode::$36 ] : zp[4]:189 , 
Potential registers zp[4]:193 [ gfx_mode::plane_b#0 ] : zp[4]:193 , 
Potential registers zp[2]:197 [ gfx_mode::$40 ] : zp[2]:197 , 
Potential registers zp[1]:199 [ gfx_mode::$39 ] : zp[1]:199 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:200 [ gfx_mode::$41 ] : zp[1]:200 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:201 [ gfx_mode::$42 ] : zp[2]:201 , 
Potential registers zp[1]:203 [ gfx_mode::$43 ] : zp[1]:203 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:204 [ gfx_mode::$44 ] : zp[1]:204 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:205 [ gfx_mode::$45 ] : zp[1]:205 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:206 [ gfx_mode::$46 ] : zp[1]:206 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:207 [ gfx_mode::$47 ] : zp[1]:207 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:208 [ get_vic_screen::return#10 ] : zp[2]:208 , 
Potential registers zp[2]:210 [ gfx_mode::$53 ] : zp[2]:210 , 
Potential registers zp[2]:212 [ gfx_mode::$54 ] : zp[2]:212 , 
Potential registers zp[2]:214 [ gfx_mode::$55 ] : zp[2]:214 , 
Potential registers zp[1]:216 [ gfx_mode::$56 ] : zp[1]:216 , reg byte x , reg byte y , 
Potential registers zp[1]:217 [ get_vic_charset::idx#0 ] : zp[1]:217 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:218 [ get_vic_charset::return#4 ] : zp[2]:218 , 
Potential registers zp[2]:220 [ gfx_mode::$58 ] : zp[2]:220 , 
Potential registers zp[2]:222 [ gfx_mode::$59 ] : zp[2]:222 , 
Potential registers zp[1]:224 [ gfx_mode::$60 ] : zp[1]:224 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:225 [ gfx_mode::$61 ] : zp[1]:225 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:226 [ gfx_mode::$62 ] : zp[1]:226 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:227 [ get_vic_screen::return#11 ] : zp[2]:227 , 
Potential registers zp[1]:229 [ gfx_mode::$64 ] : zp[1]:229 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:230 [ gfx_mode::$65 ] : zp[1]:230 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:231 [ gfx_mode::$66 ] : zp[1]:231 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:232 [ gfx_mode::$67 ] : zp[1]:232 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:233 [ gfx_mode::$68 ] : zp[1]:233 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:234 [ gfx_mode::$69 ] : zp[1]:234 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:235 [ gfx_mode::$70 ] : zp[1]:235 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:236 [ gfx_mode::$71 ] : zp[1]:236 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:237 [ keyboard_event_get::return#3 ] : zp[1]:237 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:238 [ gfx_mode::keyboard_event#0 ] : zp[1]:238 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:239 [ keyboard_matrix_read::rowid#0 ] : zp[1]:239 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:240 [ keyboard_matrix_read::return#2 ] : zp[1]:240 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:241 [ keyboard_event_scan::row_scan#0 ] : zp[1]:241 , reg byte x , reg byte y , 
Potential registers zp[1]:242 [ keyboard_event_pressed::return#0 ] : zp[1]:242 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:243 [ keyboard_event_scan::$0 ] : zp[1]:243 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:244 [ keyboard_event_pressed::return#1 ] : zp[1]:244 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:245 [ keyboard_event_scan::$3 ] : zp[1]:245 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:246 [ keyboard_event_pressed::return#2 ] : zp[1]:246 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:247 [ keyboard_event_scan::$6 ] : zp[1]:247 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:248 [ keyboard_event_pressed::return#3 ] : zp[1]:248 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:249 [ keyboard_event_scan::$9 ] : zp[1]:249 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:250 [ keyboard_event_scan::$15 ] : zp[1]:250 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:251 [ keyboard_event_scan::$16 ] : zp[1]:251 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:252 [ keyboard_event_scan::event_type#0 ] : zp[1]:252 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:253 [ keyboard_event_scan::$23 ] : zp[1]:253 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:254 [ keyboard_event_pressed::$0 ] : zp[1]:254 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] : zp[1]:255 , reg byte x , reg byte y , 
Potential registers zp[1]:256 [ keyboard_event_pressed::$1 ] : zp[1]:256 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:257 [ keyboard_event_pressed::return#10 ] : zp[1]:257 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:258 [ keyboard_matrix_read::return#0 ] : zp[1]:258 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:259 [ form_control::return#0 ] : zp[1]:259 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:260 [ form_mode::$36 ] : zp[1]:260 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:261 [ apply_preset::idx#0 ] : zp[1]:261 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:262 [ form_field_ptr::y#0 ] : zp[1]:262 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:263 [ form_field_ptr::line#0 ] : zp[2]:263 , 
Potential registers zp[1]:265 [ form_field_ptr::x#0 ] : zp[1]:265 , reg byte x , 
Potential registers zp[1]:266 [ form_control::$13 ] : zp[1]:266 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:267 [ keyboard_event_get::return#4 ] : zp[1]:267 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:268 [ form_control::key_event#0 ] : zp[1]:268 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:269 [ form_control::$15 ] : zp[1]:269 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:270 [ form_control::$16 ] : zp[1]:270 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:271 [ form_control::$24 ] : zp[1]:271 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:272 [ form_control::$14 ] : zp[1]:272 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:273 [ form_set_screen::$0 ] : zp[1]:273 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:274 [ form_set_screen::$1 ] : zp[1]:274 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:275 [ print_str_lines::ch#0 ] : zp[1]:275 , reg byte a , reg byte x , 
Potential registers zp[2]:276 [ memset::str#0 ] : zp[2]:276 , 
Potential registers zp[2]:278 [ memset::end#0 ] : zp[2]:278 , 
Potential registers zp[4]:280 [ gfx_init_plane_fill::$0 ] : zp[4]:280 , 
Potential registers zp[2]:284 [ gfx_init_plane_fill::$1 ] : zp[2]:284 , 
Potential registers zp[1]:286 [ gfx_init_plane_fill::gfxbCpuBank#0 ] : zp[1]:286 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:287 [ gfx_init_plane_fill::$4 ] : zp[2]:287 , 
Potential registers zp[2]:289 [ gfx_init_plane_fill::$5 ] : zp[2]:289 , 
Potential registers zp[2]:291 [ gfx_init_plane_fill::gfxb#0 ] : zp[2]:291 , 
Potential registers zp[1]:293 [ gfx_init_plane_horisontal2::$7 ] : zp[1]:293 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:294 [ gfx_init_plane_horisontal2::row#0 ] : zp[1]:294 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:295 [ gfx_init_plane_horisontal::$7 ] : zp[1]:295 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:296 [ gfx_init_plane_charset8::$7 ] : zp[1]:296 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:297 [ gfx_init_plane_8bppchunky::$8 ] : zp[2]:297 , 
Potential registers zp[1]:299 [ gfx_init_plane_8bppchunky::c#0 ] : zp[1]:299 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:300 [ bitmap_line::x0#0 ] : zp[1]:300 , reg byte x , reg byte y , 
Potential registers zp[1]:301 [ bitmap_line::x1#0 ] : zp[1]:301 , reg byte x , reg byte y , 
Potential registers zp[1]:302 [ bitmap_line::y0#0 ] : zp[1]:302 , reg byte x , reg byte y , 
Potential registers zp[1]:303 [ bitmap_line::y1#0 ] : zp[1]:303 , reg byte x , reg byte y , 
Potential registers zp[1]:304 [ bitmap_line::xd#2 ] : zp[1]:304 , reg byte x , reg byte y , 
Potential registers zp[1]:305 [ bitmap_line::yd#2 ] : zp[1]:305 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:306 [ bitmap_line::yd#1 ] : zp[1]:306 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:307 [ bitmap_line::xd#1 ] : zp[1]:307 , reg byte x , reg byte y , 
Potential registers zp[1]:308 [ bitmap_line::yd#10 ] : zp[1]:308 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:309 [ bitmap_line::yd#11 ] : zp[1]:309 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:310 [ bitmap_line_xdyi::$6 ] : zp[1]:310 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:311 [ bitmap_plot::plotter_x#0 ] : zp[2]:311 , 
Potential registers zp[2]:313 [ bitmap_plot::plotter_y#0 ] : zp[2]:313 , 
Potential registers zp[2]:315 [ bitmap_plot::plotter#0 ] : zp[2]:315 , 
Potential registers zp[1]:317 [ bitmap_plot::$1 ] : zp[1]:317 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:318 [ bitmap_line_ydxi::$6 ] : zp[1]:318 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:319 [ bitmap_line_xdyd::$6 ] : zp[1]:319 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:320 [ bitmap_line_ydxd::$6 ] : zp[1]:320 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[2]:321 [ bitmap_clear::bitmap#0 ] : zp[2]:321 , 
Potential registers zp[1]:323 [ bitmap_init::$0 ] : zp[1]:323 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:324 [ bitmap_init::$10 ] : zp[1]:324 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:325 [ bitmap_init::$7 ] : zp[1]:325 , reg byte a , reg byte x , reg byte y , reg byte alu , 
Potential registers zp[1]:326 [ bitmap_init::$8 ] : zp[1]:326 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:327 [ bitmap_init::$9 ] : zp[1]:327 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:328 [ gfx_init_screen3::$0 ] : zp[1]:328 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:329 [ gfx_init_screen3::$1 ] : zp[1]:329 , reg byte x , reg byte y , 
Potential registers zp[1]:330 [ gfx_init_screen3::$2 ] : zp[1]:330 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:331 [ gfx_init_screen3::$3 ] : zp[1]:331 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:332 [ gfx_init_screen2::$0 ] : zp[1]:332 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:333 [ gfx_init_screen2::col#0 ] : zp[1]:333 , reg byte x , reg byte y , 
Potential registers zp[1]:334 [ gfx_init_screen2::col2#0 ] : zp[1]:334 , reg byte x , reg byte y , 
Potential registers zp[1]:335 [ gfx_init_screen2::$3 ] : zp[1]:335 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:336 [ gfx_init_screen2::$4 ] : zp[1]:336 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:337 [ gfx_init_screen1::$0 ] : zp[1]:337 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:338 [ gfx_init_screen1::$1 ] : zp[1]:338 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:339 [ gfx_init_screen0::$0 ] : zp[1]:339 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:340 [ gfx_init_screen0::$1 ] : zp[1]:340 , reg byte x , reg byte y , 
Potential registers zp[1]:341 [ gfx_init_screen0::$2 ] : zp[1]:341 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:342 [ gfx_init_screen0::$3 ] : zp[1]:342 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [keyboard_event_scan] 200,002: zp[1]:250 [ keyboard_event_scan::$15 ] 200,002: zp[1]:251 [ keyboard_event_scan::$16 ] 200,002: zp[1]:252 [ keyboard_event_scan::event_type#0 ] 200,002: zp[1]:253 [ keyboard_event_scan::$23 ] 178,573.21: zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 119,043.1: zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 21,001.74: zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 12,778.06: zp[1]:241 [ keyboard_event_scan::row_scan#0 ] 4: zp[1]:243 [ keyboard_event_scan::$0 ] 4: zp[1]:245 [ keyboard_event_scan::$3 ] 4: zp[1]:247 [ keyboard_event_scan::$6 ] 4: zp[1]:249 [ keyboard_event_scan::$9 ] 
Uplift Scope [] 588,363.98: zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ] 3,703: zp[2]:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 ] 2,654.02: zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] 289.76: zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] 107.03: zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] 16.73: zp[1]:15 [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ] 
Uplift Scope [keyboard_matrix_read] 20,002: zp[1]:240 [ keyboard_matrix_read::return#2 ] 10,003: zp[1]:239 [ keyboard_matrix_read::rowid#0 ] 3,334.33: zp[1]:258 [ keyboard_matrix_read::return#0 ] 
Uplift Scope [gfx_init_plane_charset8] 4,004: zp[1]:89 [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] 2,002: zp[1]:296 [ gfx_init_plane_charset8::$7 ] 1,723.94: zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] 1,044.93: zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 845.22: zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] 783: zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 192.31: zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] 165.93: zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 17.79: zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Uplift Scope [gfx_mode] 2,104.5: zp[2]:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] 2,002: zp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ] 1,663.27: zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ] 353.5: zp[1]:11 [ gfx_mode::j#2 gfx_mode::j#1 ] 353.5: zp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ] 202: zp[1]:238 [ gfx_mode::keyboard_event#0 ] 180.36: zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] 44: zp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] 12: zp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ] 4: zp[1]:158 [ gfx_mode::$20 ] 4: zp[4]:164 [ gfx_mode::$22 ] 4: zp[1]:174 [ gfx_mode::$25 ] 4: zp[1]:175 [ gfx_mode::$27 ] 4: zp[2]:176 [ gfx_mode::$28 ] 4: zp[1]:178 [ gfx_mode::$29 ] 4: zp[1]:179 [ gfx_mode::$30 ] 4: zp[1]:180 [ gfx_mode::$31 ] 4: zp[1]:181 [ gfx_mode::$32 ] 4: zp[1]:182 [ gfx_mode::$33 ] 4: zp[1]:183 [ gfx_mode::$34 ] 4: zp[4]:189 [ gfx_mode::$36 ] 4: zp[1]:199 [ gfx_mode::$39 ] 4: zp[1]:200 [ gfx_mode::$41 ] 4: zp[2]:201 [ gfx_mode::$42 ] 4: zp[1]:203 [ gfx_mode::$43 ] 4: zp[1]:204 [ gfx_mode::$44 ] 4: zp[1]:205 [ gfx_mode::$45 ] 4: zp[1]:206 [ gfx_mode::$46 ] 4: zp[1]:207 [ gfx_mode::$47 ] 4: zp[2]:212 [ gfx_mode::$54 ] 4: zp[2]:222 [ gfx_mode::$59 ] 4: zp[1]:224 [ gfx_mode::$60 ] 4: zp[1]:225 [ gfx_mode::$61 ] 4: zp[1]:226 [ gfx_mode::$62 ] 4: zp[1]:229 [ gfx_mode::$64 ] 4: zp[1]:230 [ gfx_mode::$65 ] 4: zp[1]:231 [ gfx_mode::$66 ] 4: zp[1]:232 [ gfx_mode::$67 ] 4: zp[1]:233 [ gfx_mode::$68 ] 4: zp[1]:234 [ gfx_mode::$69 ] 4: zp[1]:235 [ gfx_mode::$70 ] 4: zp[1]:236 [ gfx_mode::$71 ] 2: zp[1]:4 [ gfx_mode::vic_control2#2 ] 2: zp[2]:172 [ gfx_mode::$26 ] 2: zp[2]:197 [ gfx_mode::$40 ] 2: zp[2]:210 [ gfx_mode::$53 ] 2: zp[2]:214 [ gfx_mode::$55 ] 2: zp[2]:220 [ gfx_mode::$58 ] 1: zp[4]:168 [ gfx_mode::plane_a#0 ] 1: zp[4]:193 [ gfx_mode::plane_b#0 ] 0.8: zp[1]:159 [ gfx_mode::plane_a_offs#0 ] 0.8: zp[1]:184 [ gfx_mode::plane_b_offs#0 ] 0.5: zp[1]:216 [ gfx_mode::$56 ] 
Uplift Scope [print_str_at] 3,005.5: zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] 2,002: zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ] 
Uplift Scope [apply_preset] 3,670.33: zp[1]:45 [ apply_preset::i#2 apply_preset::i#1 ] 200.2: zp[2]:43 [ apply_preset::preset#15 ] 11.18: zp[1]:261 [ apply_preset::idx#0 ] 
Uplift Scope [form_render_values] 3,003: zp[1]:41 [ form_render_values::idx#2 form_render_values::idx#1 ] 
Uplift Scope [form_mode] 2,002: zp[1]:260 [ form_mode::$36 ] 442.75: zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] 353.5: zp[1]:30 [ form_mode::i#2 form_mode::i#1 ] 
Uplift Scope [print_str_lines] 1,939.17: zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] 667.33: zp[1]:275 [ print_str_lines::ch#0 ] 
Uplift Scope [form_field_ptr] 2,341.67: zp[1]:42 [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] 33.9: zp[1]:265 [ form_field_ptr::x#0 ] 6: zp[1]:262 [ form_field_ptr::y#0 ] 0.06: zp[2]:263 [ form_field_ptr::line#0 ] 
Uplift Scope [form_control] 2,002: zp[1]:259 [ form_control::return#0 ] 333.67: zp[1]:46 [ form_control::return#2 ] 4: zp[1]:266 [ form_control::$13 ] 4: zp[1]:269 [ form_control::$15 ] 4: zp[1]:270 [ form_control::$16 ] 4: zp[1]:271 [ form_control::$24 ] 4: zp[1]:272 [ form_control::$14 ] 2.67: zp[1]:268 [ form_control::key_event#0 ] 
Uplift Scope [bitmap_plot] 1,012: zp[1]:104 [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] 506.5: zp[1]:103 [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] 4: zp[2]:313 [ bitmap_plot::plotter_y#0 ] 4: zp[1]:317 [ bitmap_plot::$1 ] 2: zp[2]:311 [ bitmap_plot::plotter_x#0 ] 1: zp[2]:315 [ bitmap_plot::plotter#0 ] 
Uplift Scope [gfx_init_screen2] 202: zp[1]:332 [ gfx_init_screen2::$0 ] 202: zp[1]:335 [ gfx_init_screen2::$3 ] 202: zp[1]:336 [ gfx_init_screen2::$4 ] 189.38: zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] 151.5: zp[1]:333 [ gfx_init_screen2::col#0 ] 109.46: zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] 101: zp[1]:334 [ gfx_init_screen2::col2#0 ] 27.68: zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Uplift Scope [gfx_init_plane_8bppchunky] 362.64: zp[1]:93 [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] 297.35: zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] 202: zp[1]:299 [ gfx_init_plane_8bppchunky::c#0 ] 181.8: zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] 101: zp[2]:297 [ gfx_init_plane_8bppchunky::$8 ] 25.96: zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Uplift Scope [bitmap_line_xdyi] 482.47: zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 265: zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 202: zp[1]:310 [ bitmap_line_xdyi::$6 ] 118.72: zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] 18.71: zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] 15.64: zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] 10.17: zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] 
Uplift Scope [bitmap_line_xdyd] 482.47: zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 265: zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 202: zp[1]:319 [ bitmap_line_xdyd::$6 ] 118.72: zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] 18.71: zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] 15.64: zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] 10.17: zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] 
Uplift Scope [bitmap_line_ydxi] 482.47: zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 265: zp[1]:108 [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] 202: zp[1]:318 [ bitmap_line_ydxi::$6 ] 118.72: zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 18.71: zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 15.64: zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 10.17: zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Uplift Scope [bitmap_line_ydxd] 482.47: zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 265: zp[1]:120 [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] 202: zp[1]:320 [ bitmap_line_ydxd::$6 ] 118.72: zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 18.71: zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 15.64: zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 10.17: zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Uplift Scope [gfx_init_screen0] 202: zp[1]:339 [ gfx_init_screen0::$0 ] 202: zp[1]:341 [ gfx_init_screen0::$2 ] 202: zp[1]:342 [ gfx_init_screen0::$3 ] 194.79: zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] 116.93: zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] 101: zp[1]:340 [ gfx_init_screen0::$1 ] 28.8: zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Uplift Scope [gfx_init_screen3] 202: zp[1]:328 [ gfx_init_screen3::$0 ] 202: zp[1]:330 [ gfx_init_screen3::$2 ] 202: zp[1]:331 [ gfx_init_screen3::$3 ] 194.79: zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] 116.93: zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] 101: zp[1]:329 [ gfx_init_screen3::$1 ] 28.8: zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Uplift Scope [gfx_init_plane_horisontal] 592: zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] 202: zp[1]:295 [ gfx_init_plane_horisontal::$7 ] 176.75: zp[1]:79 [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] 27.68: zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Uplift Scope [gfx_init_screen1] 212.1: zp[1]:151 [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] 202: zp[1]:337 [ gfx_init_screen1::$0 ] 202: zp[1]:338 [ gfx_init_screen1::$1 ] 143.1: zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] 31.88: zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Uplift Scope [form_set_screen] 218.83: zp[1]:49 [ form_set_screen::y#2 form_set_screen::y#1 ] 202: zp[1]:273 [ form_set_screen::$0 ] 202: zp[1]:274 [ form_set_screen::$1 ] 148.13: zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ] 
Uplift Scope [gfx_init_plane_horisontal2] 202: zp[1]:293 [ gfx_init_plane_horisontal2::$7 ] 202: zp[1]:294 [ gfx_init_plane_horisontal2::row#0 ] 191.9: zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] 143.1: zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] 31.88: zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Uplift Scope [gfx_init_charset] 214.5: zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] 202: zp[1]:137 [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] 169.27: zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] 19.64: zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Uplift Scope [gfx_init_plane_fill] 227.6: zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] 218.83: zp[1]:66 [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] 20.17: zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] 5.61: zp[1]:62 [ gfx_init_plane_fill::fill#6 ] 4: zp[4]:280 [ gfx_init_plane_fill::$0 ] 4: zp[2]:284 [ gfx_init_plane_fill::$1 ] 4: zp[1]:286 [ gfx_init_plane_fill::gfxbCpuBank#0 ] 4: zp[2]:287 [ gfx_init_plane_fill::$4 ] 4: zp[2]:289 [ gfx_init_plane_fill::$5 ] 2: zp[2]:291 [ gfx_init_plane_fill::gfxb#0 ] 0.67: zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ] 
Uplift Scope [bitmap_clear] 227.6: zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] 218.83: zp[1]:126 [ bitmap_clear::x#2 bitmap_clear::x#1 ] 20.17: zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 2: zp[2]:321 [ bitmap_clear::bitmap#0 ] 
Uplift Scope [gfx_init_screen4] 221.6: zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] 218.83: zp[1]:141 [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] 20.17: zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Uplift Scope [gfx_init_plane_vertical] 221.6: zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] 218.83: zp[1]:75 [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] 20.17: zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Uplift Scope [memset] 341.33: zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ] 17.17: zp[2]:278 [ memset::end#0 ] 0.67: zp[2]:276 [ memset::str#0 ] 
Uplift Scope [dtvSetCpuBankSegment1] 311: zp[1]:67 [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] 
Uplift Scope [keyboard_event_get] 202: zp[1]:237 [ keyboard_event_get::return#3 ] 30.25: zp[1]:13 [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] 4: zp[1]:267 [ keyboard_event_get::return#4 ] 
Uplift Scope [render_preset_name] 217.36: zp[1]:34 [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] 2: zp[2]:35 [ render_preset_name::name#13 ] 
Uplift Scope [bitmap_init] 39.88: zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] 24.93: zp[1]:128 [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] 23.83: zp[1]:127 [ bitmap_init::x#2 bitmap_init::x#1 ] 22: zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ] 22: zp[1]:323 [ bitmap_init::$0 ] 22: zp[1]:325 [ bitmap_init::$7 ] 22: zp[1]:326 [ bitmap_init::$8 ] 22: zp[1]:327 [ bitmap_init::$9 ] 5.5: zp[1]:324 [ bitmap_init::$10 ] 
Uplift Scope [gfx_init_vic_bitmap] 33: zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] 
Uplift Scope [keyboard_event_pressed] 4: zp[1]:242 [ keyboard_event_pressed::return#0 ] 4: zp[1]:244 [ keyboard_event_pressed::return#1 ] 4: zp[1]:246 [ keyboard_event_pressed::return#2 ] 4: zp[1]:248 [ keyboard_event_pressed::return#3 ] 4: zp[1]:254 [ keyboard_event_pressed::$0 ] 4: zp[1]:256 [ keyboard_event_pressed::$1 ] 2: zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] 1.67: zp[1]:257 [ keyboard_event_pressed::return#10 ] 1.33: zp[1]:19 [ keyboard_event_pressed::keycode#4 ] 
Uplift Scope [get_vic_screen] 10.8: zp[1]:20 [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ] 4: zp[2]:208 [ get_vic_screen::return#10 ] 4: zp[2]:227 [ get_vic_screen::return#11 ] 1: zp[2]:21 [ get_vic_screen::return#5 ] 
Uplift Scope [get_plane] 10.29: zp[1]:25 [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] 4: zp[4]:160 [ get_plane::return#16 ] 4: zp[4]:185 [ get_plane::return#17 ] 1: zp[4]:26 [ get_plane::return#14 ] 
Uplift Scope [bitmap_line] 1.75: zp[1]:303 [ bitmap_line::y1#0 ] 1.67: zp[1]:302 [ bitmap_line::y0#0 ] 1.32: zp[1]:301 [ bitmap_line::x1#0 ] 1.26: zp[1]:300 [ bitmap_line::x0#0 ] 0.89: zp[1]:305 [ bitmap_line::yd#2 ] 0.89: zp[1]:306 [ bitmap_line::yd#1 ] 0.89: zp[1]:308 [ bitmap_line::yd#10 ] 0.89: zp[1]:309 [ bitmap_line::yd#11 ] 0.7: zp[1]:304 [ bitmap_line::xd#2 ] 0.7: zp[1]:307 [ bitmap_line::xd#1 ] 
Uplift Scope [get_vic_charset] 4: zp[2]:218 [ get_vic_charset::return#4 ] 3: zp[1]:217 [ get_vic_charset::idx#0 ] 0.67: zp[2]:23 [ get_vic_charset::return#2 ] 
Uplift Scope [RADIX] 
Uplift Scope [print_ln] 
Uplift Scope [print_cls] 
Uplift Scope [print_set_screen] 
Uplift Scope [keyboard_init] 
Uplift Scope [main] 
Uplift Scope [gfx_init] 
Uplift Scope [gfx_init_plane_vertical2] 
Uplift Scope [gfx_init_plane_blank] 
Uplift Scope [gfx_init_plane_full] 

Uplifting [keyboard_event_scan] best 15481007 combination reg byte a [ keyboard_event_scan::$15 ] reg byte a [ keyboard_event_scan::$16 ] zp[1]:252 [ keyboard_event_scan::event_type#0 ] zp[1]:253 [ keyboard_event_scan::$23 ] zp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] zp[1]:241 [ keyboard_event_scan::row_scan#0 ] zp[1]:243 [ keyboard_event_scan::$0 ] zp[1]:245 [ keyboard_event_scan::$3 ] zp[1]:247 [ keyboard_event_scan::$6 ] zp[1]:249 [ keyboard_event_scan::$9 ] 
Limited combination testing to 10 combinations of 5308416 possible.
Uplifting [] best 15480989 combination zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ] zp[2]:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 ] zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] reg byte x [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [keyboard_matrix_read] best 15390986 combination reg byte a [ keyboard_matrix_read::return#2 ] reg byte x [ keyboard_matrix_read::rowid#0 ] zp[1]:258 [ keyboard_matrix_read::return#0 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [gfx_init_plane_charset8] best 15375986 combination reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ] reg byte a [ gfx_init_plane_charset8::$7 ] zp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Limited combination testing to 10 combinations of 1152 possible.
Uplifting [print_str_at] best 15375986 combination zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ] 
Uplifting [apply_preset] best 15363653 combination reg byte y [ apply_preset::i#2 apply_preset::i#1 ] zp[2]:43 [ apply_preset::preset#15 ] reg byte a [ apply_preset::idx#0 ] 
Limited combination testing to 10 combinations of 12 possible.
Uplifting [form_render_values] best 15348653 combination reg byte x [ form_render_values::idx#2 form_render_values::idx#1 ] 
Uplifting [form_mode] best 15341453 combination reg byte a [ form_mode::$36 ] zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] reg byte x [ form_mode::i#2 form_mode::i#1 ] 
Limited combination testing to 10 combinations of 24 possible.
Uplifting [print_str_lines] best 15329453 combination zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] reg byte a [ print_str_lines::ch#0 ] 
Uplifting [form_field_ptr] best 15326440 combination reg byte x [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ] zp[1]:265 [ form_field_ptr::x#0 ] reg byte a [ form_field_ptr::y#0 ] zp[2]:263 [ form_field_ptr::line#0 ] 
Limited combination testing to 10 combinations of 24 possible.
Uplifting [form_control] best 15319431 combination reg byte a [ form_control::return#0 ] reg byte x [ form_control::return#2 ] zp[1]:266 [ form_control::$13 ] zp[1]:269 [ form_control::$15 ] zp[1]:270 [ form_control::$16 ] zp[1]:271 [ form_control::$24 ] zp[1]:272 [ form_control::$14 ] zp[1]:268 [ form_control::key_event#0 ] 
Limited combination testing to 10 combinations of 65536 possible.
Uplifting [bitmap_plot] best 15317022 combination reg byte y [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ] reg byte x [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ] zp[2]:313 [ bitmap_plot::plotter_y#0 ] zp[1]:317 [ bitmap_plot::$1 ] zp[2]:311 [ bitmap_plot::plotter_x#0 ] zp[2]:315 [ bitmap_plot::plotter#0 ] 
Limited combination testing to 10 combinations of 36 possible.
Uplifting [gfx_init_screen2] best 15315822 combination reg byte a [ gfx_init_screen2::$0 ] reg byte a [ gfx_init_screen2::$3 ] zp[1]:336 [ gfx_init_screen2::$4 ] zp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] zp[1]:333 [ gfx_init_screen2::col#0 ] zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] zp[1]:334 [ gfx_init_screen2::col2#0 ] zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Limited combination testing to 10 combinations of 2304 possible.
Uplifting [gfx_init_plane_8bppchunky] best 15314592 combination reg byte x [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ] zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] reg byte a [ gfx_init_plane_8bppchunky::c#0 ] zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] zp[2]:297 [ gfx_init_plane_8bppchunky::$8 ] zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [bitmap_line_xdyi] best 15313992 combination zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] reg byte x [ bitmap_line_xdyi::$6 ] zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_xdyd] best 15313392 combination zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] reg byte x [ bitmap_line_xdyd::$6 ] zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxi] best 15312386 combination zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] reg byte x [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ] reg byte a [ bitmap_line_ydxi::$6 ] zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [bitmap_line_ydxd] best 15311380 combination zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] reg byte x [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ] reg byte a [ bitmap_line_ydxd::$6 ] zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Limited combination testing to 10 combinations of 256 possible.
Uplifting [gfx_init_screen0] best 15310180 combination reg byte a [ gfx_init_screen0::$0 ] reg byte a [ gfx_init_screen0::$2 ] zp[1]:342 [ gfx_init_screen0::$3 ] zp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] zp[1]:340 [ gfx_init_screen0::$1 ] zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Limited combination testing to 10 combinations of 768 possible.
Uplifting [gfx_init_screen3] best 15308980 combination reg byte a [ gfx_init_screen3::$0 ] reg byte a [ gfx_init_screen3::$2 ] zp[1]:331 [ gfx_init_screen3::$3 ] zp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] zp[1]:329 [ gfx_init_screen3::$1 ] zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Limited combination testing to 10 combinations of 768 possible.
Uplifting [gfx_init_plane_horisontal] best 15307480 combination zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] reg byte a [ gfx_init_plane_horisontal::$7 ] reg byte x [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ] zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Limited combination testing to 10 combinations of 16 possible.
Uplifting [gfx_init_screen1] best 15305880 combination reg byte x [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ] reg byte a [ gfx_init_screen1::$0 ] zp[1]:338 [ gfx_init_screen1::$1 ] zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [form_set_screen] best 15303780 combination reg byte x [ form_set_screen::y#2 form_set_screen::y#1 ] reg byte a [ form_set_screen::$0 ] zp[1]:274 [ form_set_screen::$1 ] zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ] 
Limited combination testing to 10 combinations of 48 possible.
Uplifting [gfx_init_plane_horisontal2] best 15302780 combination reg byte a [ gfx_init_plane_horisontal2::$7 ] reg byte a [ gfx_init_plane_horisontal2::row#0 ] zp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [gfx_init_charset] best 15301880 combination zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] reg byte x [ gfx_init_charset::l#2 gfx_init_charset::l#1 ] zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Uplifting [gfx_init_plane_fill] best 15300974 combination zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] reg byte x [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ] zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] zp[1]:62 [ gfx_init_plane_fill::fill#6 ] zp[4]:280 [ gfx_init_plane_fill::$0 ] zp[2]:284 [ gfx_init_plane_fill::$1 ] reg byte a [ gfx_init_plane_fill::gfxbCpuBank#0 ] zp[2]:287 [ gfx_init_plane_fill::$4 ] zp[2]:289 [ gfx_init_plane_fill::$5 ] zp[2]:291 [ gfx_init_plane_fill::gfxb#0 ] zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ] 
Limited combination testing to 10 combinations of 32 possible.
Uplifting [bitmap_clear] best 15300074 combination zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ] zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] zp[2]:321 [ bitmap_clear::bitmap#0 ] 
Uplifting [gfx_init_screen4] best 15299174 combination zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] reg byte x [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ] zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Uplifting [gfx_init_plane_vertical] best 15298274 combination zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] reg byte x [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ] zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Uplifting [memset] best 15298274 combination zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ] zp[2]:278 [ memset::end#0 ] zp[2]:276 [ memset::str#0 ] 
Uplifting [dtvSetCpuBankSegment1] best 15298135 combination reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ] 
Uplifting [keyboard_event_get] best 15297226 combination reg byte a [ keyboard_event_get::return#3 ] reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ] zp[1]:267 [ keyboard_event_get::return#4 ] 
Limited combination testing to 10 combinations of 64 possible.
Uplifting [render_preset_name] best 15296890 combination reg byte a [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ] zp[2]:35 [ render_preset_name::name#13 ] 
Uplifting [bitmap_init] best 15296590 combination zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ] reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ] zp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ] zp[1]:323 [ bitmap_init::$0 ] zp[1]:325 [ bitmap_init::$7 ] zp[1]:326 [ bitmap_init::$8 ] zp[1]:327 [ bitmap_init::$9 ] zp[1]:324 [ bitmap_init::$10 ] 
Limited combination testing to 10 combinations of 34560 possible.
Uplifting [gfx_init_vic_bitmap] best 15296590 combination zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] 
Uplifting [keyboard_event_pressed] best 15296578 combination reg byte a [ keyboard_event_pressed::return#0 ] reg byte a [ keyboard_event_pressed::return#1 ] zp[1]:246 [ keyboard_event_pressed::return#2 ] zp[1]:248 [ keyboard_event_pressed::return#3 ] zp[1]:254 [ keyboard_event_pressed::$0 ] zp[1]:256 [ keyboard_event_pressed::$1 ] zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] zp[1]:257 [ keyboard_event_pressed::return#10 ] zp[1]:19 [ keyboard_event_pressed::keycode#4 ] 
Limited combination testing to 10 combinations of 147456 possible.
Uplifting [get_vic_screen] best 15296557 combination reg byte a [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ] zp[2]:208 [ get_vic_screen::return#10 ] zp[2]:227 [ get_vic_screen::return#11 ] zp[2]:21 [ get_vic_screen::return#5 ] 
Uplifting [get_plane] best 15296509 combination reg byte a [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ] zp[4]:160 [ get_plane::return#16 ] zp[4]:185 [ get_plane::return#17 ] zp[4]:26 [ get_plane::return#14 ] 
Uplifting [bitmap_line] best 15296463 combination zp[1]:303 [ bitmap_line::y1#0 ] zp[1]:302 [ bitmap_line::y0#0 ] reg byte x [ bitmap_line::x1#0 ] zp[1]:300 [ bitmap_line::x0#0 ] zp[1]:305 [ bitmap_line::yd#2 ] zp[1]:306 [ bitmap_line::yd#1 ] zp[1]:308 [ bitmap_line::yd#10 ] zp[1]:309 [ bitmap_line::yd#11 ] zp[1]:304 [ bitmap_line::xd#2 ] zp[1]:307 [ bitmap_line::xd#1 ] 
Limited combination testing to 10 combinations of 186624 possible.
Uplifting [get_vic_charset] best 15296454 combination zp[2]:218 [ get_vic_charset::return#4 ] reg byte a [ get_vic_charset::idx#0 ] zp[2]:23 [ get_vic_charset::return#2 ] 
Uplifting [RADIX] best 15296454 combination 
Uplifting [print_ln] best 15296454 combination 
Uplifting [print_cls] best 15296454 combination 
Uplifting [print_set_screen] best 15296454 combination 
Uplifting [keyboard_init] best 15296454 combination 
Uplifting [main] best 15296454 combination 
Uplifting [gfx_init] best 15296454 combination 
Uplifting [gfx_init_plane_vertical2] best 15296454 combination 
Uplifting [gfx_init_plane_blank] best 15296454 combination 
Uplifting [gfx_init_plane_full] best 15296454 combination 
Attempting to uplift remaining variables inzp[1]:18 [ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ]
Uplifting [] best 15296454 combination zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ] 
Attempting to uplift remaining variables inzp[1]:252 [ keyboard_event_scan::event_type#0 ]
Uplifting [keyboard_event_scan] best 14696454 combination reg byte a [ keyboard_event_scan::event_type#0 ] 
Attempting to uplift remaining variables inzp[1]:253 [ keyboard_event_scan::$23 ]
Uplifting [keyboard_event_scan] best 14096454 combination reg byte a [ keyboard_event_scan::$23 ] 
Attempting to uplift remaining variables inzp[1]:16 [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
Uplifting [keyboard_event_scan] best 12596454 combination reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ] 
Attempting to uplift remaining variables inzp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Uplifting [keyboard_event_scan] best 12596454 combination zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] 
Attempting to uplift remaining variables inzp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ]
Uplifting [keyboard_event_scan] best 12596454 combination zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] 
Attempting to uplift remaining variables inzp[1]:241 [ keyboard_event_scan::row_scan#0 ]
Uplifting [keyboard_event_scan] best 12596454 combination zp[1]:241 [ keyboard_event_scan::row_scan#0 ] 
Attempting to uplift remaining variables inzp[1]:258 [ keyboard_matrix_read::return#0 ]
Uplifting [keyboard_matrix_read] best 12566451 combination reg byte a [ keyboard_matrix_read::return#0 ] 
Attempting to uplift remaining variables inzp[1]:10 [ gfx_mode::cx#2 gfx_mode::cx#1 ]
Uplifting [gfx_mode] best 12557451 combination reg byte x [ gfx_mode::cx#2 gfx_mode::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:88 [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
Uplifting [gfx_init_plane_charset8] best 12548451 combination reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ] 
Attempting to uplift remaining variables inzp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ]
Uplifting [gfx_init_plane_charset8] best 12548451 combination zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] 
Attempting to uplift remaining variables inzp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ]
Uplifting [gfx_init_plane_charset8] best 12548451 combination zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] 
Attempting to uplift remaining variables inzp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ]
Uplifting [bitmap_line_xdyi] best 12548451 combination zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] 
Attempting to uplift remaining variables inzp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ]
Uplifting [bitmap_line_ydxi] best 12548451 combination zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] 
Attempting to uplift remaining variables inzp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ]
Uplifting [bitmap_line_xdyd] best 12548451 combination zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] 
Attempting to uplift remaining variables inzp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ]
Uplifting [bitmap_line_ydxd] best 12548451 combination zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] 
Attempting to uplift remaining variables inzp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Uplifting [form_mode] best 12548451 combination zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] 
Attempting to uplift remaining variables inzp[1]:11 [ gfx_mode::j#2 gfx_mode::j#1 ]
Uplifting [gfx_mode] best 12547251 combination reg byte x [ gfx_mode::j#2 gfx_mode::j#1 ] 
Attempting to uplift remaining variables inzp[1]:12 [ gfx_mode::i#2 gfx_mode::i#1 ]
Uplifting [gfx_mode] best 12546051 combination reg byte x [ gfx_mode::i#2 gfx_mode::i#1 ] 
Attempting to uplift remaining variables inzp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Uplifting [] best 12546051 combination zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] 
Attempting to uplift remaining variables inzp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ]
Uplifting [bitmap_line_xdyi] best 12546051 combination zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] 
Attempting to uplift remaining variables inzp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ]
Uplifting [bitmap_line_xdyd] best 12546051 combination zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] 
Attempting to uplift remaining variables inzp[1]:238 [ gfx_mode::keyboard_event#0 ]
Uplifting [gfx_mode] best 12545451 combination reg byte a [ gfx_mode::keyboard_event#0 ] 
Attempting to uplift remaining variables inzp[1]:274 [ form_set_screen::$1 ]
Uplifting [form_set_screen] best 12544851 combination reg byte a [ form_set_screen::$1 ] 
Attempting to uplift remaining variables inzp[1]:331 [ gfx_init_screen3::$3 ]
Uplifting [gfx_init_screen3] best 12544251 combination reg byte a [ gfx_init_screen3::$3 ] 
Attempting to uplift remaining variables inzp[1]:336 [ gfx_init_screen2::$4 ]
Uplifting [gfx_init_screen2] best 12543651 combination reg byte a [ gfx_init_screen2::$4 ] 
Attempting to uplift remaining variables inzp[1]:338 [ gfx_init_screen1::$1 ]
Uplifting [gfx_init_screen1] best 12543051 combination reg byte a [ gfx_init_screen1::$1 ] 
Attempting to uplift remaining variables inzp[1]:342 [ gfx_init_screen0::$3 ]
Uplifting [gfx_init_screen0] best 12542451 combination reg byte a [ gfx_init_screen0::$3 ] 
Attempting to uplift remaining variables inzp[1]:143 [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
Uplifting [gfx_init_screen3] best 12541451 combination reg byte x [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:155 [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
Uplifting [gfx_init_screen0] best 12540451 combination reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:71 [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
Uplifting [gfx_init_plane_horisontal2] best 12539551 combination reg byte x [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ] 
Attempting to uplift remaining variables inzp[1]:147 [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
Uplifting [gfx_init_screen2] best 12538551 combination reg byte x [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ] 
Attempting to uplift remaining variables inzp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ]
Uplifting [gfx_mode] best 12538551 combination zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ]
Uplifting [gfx_init_plane_charset8] best 12538551 combination zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] 
Attempting to uplift remaining variables inzp[1]:333 [ gfx_init_screen2::col#0 ]
Uplifting [gfx_init_screen2] best 12538451 combination reg byte y [ gfx_init_screen2::col#0 ] 
Attempting to uplift remaining variables inzp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ]
Uplifting [bitmap_line_xdyi] best 12538451 combination zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] 
Attempting to uplift remaining variables inzp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ]
Uplifting [bitmap_line_ydxi] best 12538451 combination zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] 
Attempting to uplift remaining variables inzp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ]
Uplifting [bitmap_line_xdyd] best 12538451 combination zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] 
Attempting to uplift remaining variables inzp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ]
Uplifting [bitmap_line_ydxd] best 12538451 combination zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] 
Attempting to uplift remaining variables inzp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Uplifting [] best 12538451 combination zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] 
Attempting to uplift remaining variables inzp[1]:329 [ gfx_init_screen3::$1 ]
Uplifting [gfx_init_screen3] best 12538451 combination zp[1]:329 [ gfx_init_screen3::$1 ] 
Attempting to uplift remaining variables inzp[1]:334 [ gfx_init_screen2::col2#0 ]
Uplifting [gfx_init_screen2] best 12538451 combination zp[1]:334 [ gfx_init_screen2::col2#0 ] 
Attempting to uplift remaining variables inzp[1]:340 [ gfx_init_screen0::$1 ]
Uplifting [gfx_init_screen0] best 12538451 combination zp[1]:340 [ gfx_init_screen0::$1 ] 
Attempting to uplift remaining variables inzp[1]:2 [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
Uplifting [gfx_mode] best 12538432 combination reg byte x [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ] 
Attempting to uplift remaining variables inzp[1]:265 [ form_field_ptr::x#0 ]
Uplifting [form_field_ptr] best 12538432 combination zp[1]:265 [ form_field_ptr::x#0 ] 
Attempting to uplift remaining variables inzp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ]
Uplifting [gfx_init_vic_bitmap] best 12538432 combination zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] 
Attempting to uplift remaining variables inzp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ]
Uplifting [gfx_init_plane_horisontal2] best 12538432 combination zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ]
Uplifting [gfx_init_screen1] best 12538432 combination zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ]
Uplifting [gfx_init_screen3] best 12538432 combination zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ]
Uplifting [gfx_init_screen0] best 12538432 combination zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ]
Uplifting [gfx_init_plane_horisontal] best 12538432 combination zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] 
Attempting to uplift remaining variables inzp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ]
Uplifting [gfx_init_screen2] best 12538432 combination zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ]
Uplifting [gfx_init_plane_8bppchunky] best 12538432 combination zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] 
Attempting to uplift remaining variables inzp[1]:129 [ bitmap_init::y#2 bitmap_init::y#1 ]
Uplifting [bitmap_init] best 12538252 combination reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ] 
Attempting to uplift remaining variables inzp[1]:323 [ bitmap_init::$0 ]
Uplifting [bitmap_init] best 12538212 combination reg byte a [ bitmap_init::$0 ] 
Attempting to uplift remaining variables inzp[1]:325 [ bitmap_init::$7 ]
Uplifting [bitmap_init] best 12538152 combination reg byte a [ bitmap_init::$7 ] 
Attempting to uplift remaining variables inzp[1]:326 [ bitmap_init::$8 ]
Uplifting [bitmap_init] best 12538092 combination reg byte a [ bitmap_init::$8 ] 
Attempting to uplift remaining variables inzp[1]:327 [ bitmap_init::$9 ]
Uplifting [bitmap_init] best 12538032 combination reg byte a [ bitmap_init::$9 ] 
Attempting to uplift remaining variables inzp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ]
Uplifting [gfx_init_plane_fill] best 12538032 combination zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] 
Attempting to uplift remaining variables inzp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ]
Uplifting [gfx_init_plane_vertical] best 12538032 combination zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] 
Attempting to uplift remaining variables inzp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ]
Uplifting [bitmap_clear] best 12538032 combination zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] 
Attempting to uplift remaining variables inzp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ]
Uplifting [gfx_init_screen4] best 12538032 combination zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] 
Attempting to uplift remaining variables inzp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ]
Uplifting [gfx_init_charset] best 12538032 combination zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] 
Attempting to uplift remaining variables inzp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ]
Uplifting [bitmap_line_xdyi] best 12538032 combination zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ]
Uplifting [bitmap_line_ydxi] best 12538032 combination zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] 
Attempting to uplift remaining variables inzp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ]
Uplifting [bitmap_line_xdyd] best 12538032 combination zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ]
Uplifting [bitmap_line_ydxd] best 12538032 combination zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ]
Uplifting [gfx_init_plane_charset8] best 12538032 combination zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] 
Attempting to uplift remaining variables inzp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ]
Uplifting [bitmap_line_xdyi] best 12538032 combination zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ]
Uplifting [bitmap_line_ydxi] best 12538032 combination zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] 
Attempting to uplift remaining variables inzp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ]
Uplifting [bitmap_line_xdyd] best 12538032 combination zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
Uplifting [bitmap_line_ydxd] best 12538032 combination zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:3 [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
Uplifting [gfx_mode] best 12538021 combination reg byte x [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ] 
Attempting to uplift remaining variables inzp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ]
Uplifting [bitmap_line_xdyi] best 12538021 combination zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] 
Attempting to uplift remaining variables inzp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ]
Uplifting [bitmap_line_ydxi] best 12538021 combination zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ]
Uplifting [bitmap_line_xdyd] best 12538021 combination zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] 
Attempting to uplift remaining variables inzp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ]
Uplifting [bitmap_line_ydxd] best 12538021 combination zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] 
Attempting to uplift remaining variables inzp[1]:62 [ gfx_init_plane_fill::fill#6 ]
Uplifting [gfx_init_plane_fill] best 12538021 combination zp[1]:62 [ gfx_init_plane_fill::fill#6 ] 
Attempting to uplift remaining variables inzp[1]:324 [ bitmap_init::$10 ]
Uplifting [bitmap_init] best 12538021 combination zp[1]:324 [ bitmap_init::$10 ] 
Attempting to uplift remaining variables inzp[1]:158 [ gfx_mode::$20 ]
Uplifting [gfx_mode] best 12538015 combination reg byte a [ gfx_mode::$20 ] 
Attempting to uplift remaining variables inzp[1]:174 [ gfx_mode::$25 ]
Uplifting [gfx_mode] best 12538009 combination reg byte a [ gfx_mode::$25 ] 
Attempting to uplift remaining variables inzp[1]:175 [ gfx_mode::$27 ]
Uplifting [gfx_mode] best 12538003 combination reg byte a [ gfx_mode::$27 ] 
Attempting to uplift remaining variables inzp[1]:178 [ gfx_mode::$29 ]
Uplifting [gfx_mode] best 12537997 combination reg byte a [ gfx_mode::$29 ] 
Attempting to uplift remaining variables inzp[1]:179 [ gfx_mode::$30 ]
Uplifting [gfx_mode] best 12537991 combination reg byte a [ gfx_mode::$30 ] 
Attempting to uplift remaining variables inzp[1]:180 [ gfx_mode::$31 ]
Uplifting [gfx_mode] best 12537985 combination reg byte a [ gfx_mode::$31 ] 
Attempting to uplift remaining variables inzp[1]:181 [ gfx_mode::$32 ]
Uplifting [gfx_mode] best 12537979 combination reg byte a [ gfx_mode::$32 ] 
Attempting to uplift remaining variables inzp[1]:182 [ gfx_mode::$33 ]
Uplifting [gfx_mode] best 12537973 combination reg byte a [ gfx_mode::$33 ] 
Attempting to uplift remaining variables inzp[1]:183 [ gfx_mode::$34 ]
Uplifting [gfx_mode] best 12537967 combination reg byte a [ gfx_mode::$34 ] 
Attempting to uplift remaining variables inzp[1]:199 [ gfx_mode::$39 ]
Uplifting [gfx_mode] best 12537961 combination reg byte a [ gfx_mode::$39 ] 
Attempting to uplift remaining variables inzp[1]:200 [ gfx_mode::$41 ]
Uplifting [gfx_mode] best 12537955 combination reg byte a [ gfx_mode::$41 ] 
Attempting to uplift remaining variables inzp[1]:203 [ gfx_mode::$43 ]
Uplifting [gfx_mode] best 12537949 combination reg byte a [ gfx_mode::$43 ] 
Attempting to uplift remaining variables inzp[1]:204 [ gfx_mode::$44 ]
Uplifting [gfx_mode] best 12537943 combination reg byte a [ gfx_mode::$44 ] 
Attempting to uplift remaining variables inzp[1]:205 [ gfx_mode::$45 ]
Uplifting [gfx_mode] best 12537937 combination reg byte a [ gfx_mode::$45 ] 
Attempting to uplift remaining variables inzp[1]:206 [ gfx_mode::$46 ]
Uplifting [gfx_mode] best 12537931 combination reg byte a [ gfx_mode::$46 ] 
Attempting to uplift remaining variables inzp[1]:207 [ gfx_mode::$47 ]
Uplifting [gfx_mode] best 12537925 combination reg byte a [ gfx_mode::$47 ] 
Attempting to uplift remaining variables inzp[1]:224 [ gfx_mode::$60 ]
Uplifting [gfx_mode] best 12537919 combination reg byte a [ gfx_mode::$60 ] 
Attempting to uplift remaining variables inzp[1]:225 [ gfx_mode::$61 ]
Uplifting [gfx_mode] best 12537913 combination reg byte a [ gfx_mode::$61 ] 
Attempting to uplift remaining variables inzp[1]:226 [ gfx_mode::$62 ]
Uplifting [gfx_mode] best 12537907 combination reg byte a [ gfx_mode::$62 ] 
Attempting to uplift remaining variables inzp[1]:229 [ gfx_mode::$64 ]
Uplifting [gfx_mode] best 12537901 combination reg byte a [ gfx_mode::$64 ] 
Attempting to uplift remaining variables inzp[1]:230 [ gfx_mode::$65 ]
Uplifting [gfx_mode] best 12537895 combination reg byte a [ gfx_mode::$65 ] 
Attempting to uplift remaining variables inzp[1]:231 [ gfx_mode::$66 ]
Uplifting [gfx_mode] best 12537889 combination reg byte a [ gfx_mode::$66 ] 
Attempting to uplift remaining variables inzp[1]:232 [ gfx_mode::$67 ]
Uplifting [gfx_mode] best 12537883 combination reg byte a [ gfx_mode::$67 ] 
Attempting to uplift remaining variables inzp[1]:233 [ gfx_mode::$68 ]
Uplifting [gfx_mode] best 12537877 combination reg byte a [ gfx_mode::$68 ] 
Attempting to uplift remaining variables inzp[1]:234 [ gfx_mode::$69 ]
Uplifting [gfx_mode] best 12537871 combination reg byte a [ gfx_mode::$69 ] 
Attempting to uplift remaining variables inzp[1]:235 [ gfx_mode::$70 ]
Uplifting [gfx_mode] best 12537865 combination reg byte a [ gfx_mode::$70 ] 
Attempting to uplift remaining variables inzp[1]:236 [ gfx_mode::$71 ]
Uplifting [gfx_mode] best 12537859 combination reg byte a [ gfx_mode::$71 ] 
Attempting to uplift remaining variables inzp[1]:243 [ keyboard_event_scan::$0 ]
Uplifting [keyboard_event_scan] best 12537853 combination reg byte a [ keyboard_event_scan::$0 ] 
Attempting to uplift remaining variables inzp[1]:245 [ keyboard_event_scan::$3 ]
Uplifting [keyboard_event_scan] best 12537847 combination reg byte a [ keyboard_event_scan::$3 ] 
Attempting to uplift remaining variables inzp[1]:246 [ keyboard_event_pressed::return#2 ]
Uplifting [keyboard_event_pressed] best 12537841 combination reg byte a [ keyboard_event_pressed::return#2 ] 
Attempting to uplift remaining variables inzp[1]:247 [ keyboard_event_scan::$6 ]
Uplifting [keyboard_event_scan] best 12537835 combination reg byte a [ keyboard_event_scan::$6 ] 
Attempting to uplift remaining variables inzp[1]:248 [ keyboard_event_pressed::return#3 ]
Uplifting [keyboard_event_pressed] best 12537829 combination reg byte a [ keyboard_event_pressed::return#3 ] 
Attempting to uplift remaining variables inzp[1]:249 [ keyboard_event_scan::$9 ]
Uplifting [keyboard_event_scan] best 12537823 combination reg byte a [ keyboard_event_scan::$9 ] 
Attempting to uplift remaining variables inzp[1]:254 [ keyboard_event_pressed::$0 ]
Uplifting [keyboard_event_pressed] best 12537819 combination reg byte a [ keyboard_event_pressed::$0 ] 
Attempting to uplift remaining variables inzp[1]:256 [ keyboard_event_pressed::$1 ]
Uplifting [keyboard_event_pressed] best 12537815 combination reg byte a [ keyboard_event_pressed::$1 ] 
Attempting to uplift remaining variables inzp[1]:266 [ form_control::$13 ]
Uplifting [form_control] best 12537809 combination reg byte a [ form_control::$13 ] 
Attempting to uplift remaining variables inzp[1]:267 [ keyboard_event_get::return#4 ]
Uplifting [keyboard_event_get] best 12537803 combination reg byte a [ keyboard_event_get::return#4 ] 
Attempting to uplift remaining variables inzp[1]:269 [ form_control::$15 ]
Uplifting [form_control] best 12537797 combination reg byte a [ form_control::$15 ] 
Attempting to uplift remaining variables inzp[1]:270 [ form_control::$16 ]
Uplifting [form_control] best 12537793 combination reg byte a [ form_control::$16 ] 
Attempting to uplift remaining variables inzp[1]:271 [ form_control::$24 ]
Uplifting [form_control] best 12537789 combination reg byte a [ form_control::$24 ] 
Attempting to uplift remaining variables inzp[1]:272 [ form_control::$14 ]
Uplifting [form_control] best 12537783 combination reg byte a [ form_control::$14 ] 
Attempting to uplift remaining variables inzp[1]:317 [ bitmap_plot::$1 ]
Uplifting [bitmap_plot] best 12537777 combination reg byte a [ bitmap_plot::$1 ] 
Attempting to uplift remaining variables inzp[1]:268 [ form_control::key_event#0 ]
Uplifting [form_control] best 12537765 combination reg byte a [ form_control::key_event#0 ] 
Attempting to uplift remaining variables inzp[1]:4 [ gfx_mode::vic_control2#2 ]
Uplifting [gfx_mode] best 12537756 combination reg byte a [ gfx_mode::vic_control2#2 ] 
Attempting to uplift remaining variables inzp[1]:255 [ keyboard_event_pressed::row_bits#0 ]
Uplifting [keyboard_event_pressed] best 12537756 combination zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] 
Attempting to uplift remaining variables inzp[1]:303 [ bitmap_line::y1#0 ]
Uplifting [bitmap_line] best 12537756 combination zp[1]:303 [ bitmap_line::y1#0 ] 
Attempting to uplift remaining variables inzp[1]:302 [ bitmap_line::y0#0 ]
Uplifting [bitmap_line] best 12537756 combination zp[1]:302 [ bitmap_line::y0#0 ] 
Attempting to uplift remaining variables inzp[1]:257 [ keyboard_event_pressed::return#10 ]
Uplifting [keyboard_event_pressed] best 12537741 combination reg byte a [ keyboard_event_pressed::return#10 ] 
Attempting to uplift remaining variables inzp[1]:19 [ keyboard_event_pressed::keycode#4 ]
Uplifting [keyboard_event_pressed] best 12537741 combination zp[1]:19 [ keyboard_event_pressed::keycode#4 ] 
Attempting to uplift remaining variables inzp[1]:300 [ bitmap_line::x0#0 ]
Uplifting [bitmap_line] best 12537741 combination zp[1]:300 [ bitmap_line::x0#0 ] 
Attempting to uplift remaining variables inzp[1]:305 [ bitmap_line::yd#2 ]
Uplifting [bitmap_line] best 12537731 combination reg byte y [ bitmap_line::yd#2 ] 
Attempting to uplift remaining variables inzp[1]:306 [ bitmap_line::yd#1 ]
Uplifting [bitmap_line] best 12537721 combination reg byte y [ bitmap_line::yd#1 ] 
Attempting to uplift remaining variables inzp[1]:308 [ bitmap_line::yd#10 ]
Uplifting [bitmap_line] best 12537711 combination reg byte y [ bitmap_line::yd#10 ] 
Attempting to uplift remaining variables inzp[1]:309 [ bitmap_line::yd#11 ]
Uplifting [bitmap_line] best 12537701 combination reg byte y [ bitmap_line::yd#11 ] 
Attempting to uplift remaining variables inzp[1]:159 [ gfx_mode::plane_a_offs#0 ]
Uplifting [gfx_mode] best 12537699 combination reg byte x [ gfx_mode::plane_a_offs#0 ] 
Attempting to uplift remaining variables inzp[1]:184 [ gfx_mode::plane_b_offs#0 ]
Uplifting [gfx_mode] best 12537697 combination reg byte x [ gfx_mode::plane_b_offs#0 ] 
Attempting to uplift remaining variables inzp[1]:304 [ bitmap_line::xd#2 ]
Uplifting [bitmap_line] best 12537697 combination zp[1]:304 [ bitmap_line::xd#2 ] 
Attempting to uplift remaining variables inzp[1]:307 [ bitmap_line::xd#1 ]
Uplifting [bitmap_line] best 12537697 combination zp[1]:307 [ bitmap_line::xd#1 ] 
Attempting to uplift remaining variables inzp[1]:216 [ gfx_mode::$56 ]
Uplifting [gfx_mode] best 12537697 combination zp[1]:216 [ gfx_mode::$56 ] 
Coalescing zero page register [ zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 ] ] with [ zp[2]:227 [ get_vic_screen::return#11 ] ] - score: 1
Coalescing zero page register [ zp[2]:21 [ get_vic_screen::return#5 ] ] with [ zp[2]:208 [ get_vic_screen::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ get_vic_charset::return#2 ] ] with [ zp[2]:218 [ get_vic_charset::return#4 ] ] - score: 1
Coalescing zero page register [ zp[4]:26 [ get_plane::return#14 ] ] with [ zp[4]:160 [ get_plane::return#16 ] ] - score: 1
Coalescing zero page register [ zp[4]:26 [ get_plane::return#14 get_plane::return#16 ] ] with [ zp[4]:185 [ get_plane::return#17 ] ] - score: 1
Coalescing zero page register [ zp[2]:35 [ render_preset_name::name#13 ] ] with [ zp[2]:37 [ print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 ] ] with [ zp[2]:276 [ memset::str#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 ] ] with [ zp[2]:291 [ gfx_init_plane_fill::gfxb#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 ] ] with [ zp[1]:304 [ bitmap_line::xd#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 ] ] with [ zp[1]:307 [ bitmap_line::xd#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 ] ] with [ zp[1]:300 [ bitmap_line::x0#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 ] ] with [ zp[1]:302 [ bitmap_line::y0#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 ] ] with [ zp[1]:303 [ bitmap_line::y1#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 ] ] with [ zp[2]:321 [ bitmap_clear::bitmap#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:164 [ gfx_mode::$22 ] ] with [ zp[4]:168 [ gfx_mode::plane_a#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:189 [ gfx_mode::$36 ] ] with [ zp[4]:193 [ gfx_mode::plane_b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:210 [ gfx_mode::$53 ] ] with [ zp[2]:212 [ gfx_mode::$54 ] ] - score: 1
Coalescing zero page register [ zp[2]:220 [ gfx_mode::$58 ] ] with [ zp[2]:222 [ gfx_mode::$59 ] ] - score: 1
Coalescing zero page register [ zp[2]:287 [ gfx_init_plane_fill::$4 ] ] with [ zp[2]:289 [ gfx_init_plane_fill::$5 ] ] - score: 1
Coalescing zero page register [ zp[2]:311 [ bitmap_plot::plotter_x#0 ] ] with [ zp[2]:315 [ bitmap_plot::plotter#0 ] ] - score: 1
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 ] ] with [ zp[1]:105 [ bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] ] - score: 2
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 ] ] with [ zp[1]:112 [ bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] ] - score: 2
Coalescing zero page register [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 ] ] with [ zp[1]:117 [ bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ] - score: 2
Coalescing zero page register [ zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 ] ] with [ zp[2]:21 [ get_vic_screen::return#5 get_vic_screen::return#10 ] ] - score: 1
Coalescing zero page register [ zp[2]:23 [ get_vic_charset::return#2 get_vic_charset::return#4 ] ] with [ zp[2]:220 [ gfx_mode::$58 gfx_mode::$59 ] ] - score: 1
Coalescing zero page register [ zp[4]:26 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 ] ] with [ zp[4]:164 [ gfx_mode::$22 gfx_mode::plane_a#0 ] ] - score: 1
Coalescing zero page register [ zp[4]:26 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$22 gfx_mode::plane_a#0 ] ] with [ zp[4]:189 [ gfx_mode::$36 gfx_mode::plane_b#0 ] ] - score: 1
Coalescing zero page register [ zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 ] ] with [ zp[2]:287 [ gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 ] ] - score: 1
Coalescing zero page register [ zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 ] ] with [ zp[1]:113 [ bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] ] - score: 1
Coalescing zero page register [ zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 ] ] with [ zp[1]:115 [ bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 ] ] with [ zp[1]:119 [ bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ] - score: 1
Coalescing zero page register [ zp[2]:210 [ gfx_mode::$53 gfx_mode::$54 ] ] with [ zp[2]:214 [ gfx_mode::$55 ] ] - score: 1
Coalescing zero page register [ zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 ] ] with [ zp[2]:210 [ gfx_mode::$53 gfx_mode::$54 gfx_mode::$55 ] ] - score: 1
Coalescing zero page register [ zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 ] ] with [ zp[1]:5 [ gfx_mode::cy#4 gfx_mode::cy#1 ] ]
Coalescing zero page register [ zp[1]:19 [ keyboard_event_pressed::keycode#4 ] ] with [ zp[1]:17 [ keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ]
Coalescing zero page register [ zp[2]:35 [ render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 ] ] with [ zp[2]:6 [ gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$53 gfx_mode::$54 gfx_mode::$55 ] ]
Coalescing zero page register [ zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 ] ] with [ zp[2]:8 [ gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ]
Coalescing zero page register [ zp[2]:43 [ apply_preset::preset#15 ] ] with [ zp[2]:23 [ get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$58 gfx_mode::$59 ] ]
Coalescing zero page register [ zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 ] ] with [ zp[2]:47 [ form_set_screen::line#2 form_set_screen::line#1 ] ]
Coalescing zero page register [ zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 ] ] with [ zp[2]:52 [ print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 ] ]
Coalescing zero page register [ zp[4]:58 [ gfx_init_plane_fill::plane_addr#3 ] ] with [ zp[4]:26 [ get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$22 gfx_mode::plane_a#0 gfx_mode::$36 gfx_mode::plane_b#0 ] ]
Coalescing zero page register [ zp[1]:62 [ gfx_init_plane_fill::fill#6 ] ] with [ zp[1]:18 [ keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ] ]
Coalescing zero page register [ zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 ] ] with [ zp[1]:31 [ form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] ]
Coalescing zero page register [ zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 ] ] with [ zp[2]:54 [ print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] ]
Coalescing zero page register [ zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 ] ] with [ zp[1]:32 [ form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] ]
Coalescing zero page register [ zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 ] ] with [ zp[1]:33 [ form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] ]
Coalescing zero page register [ zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 ] ] with [ zp[2]:69 [ gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] ]
Coalescing zero page register [ zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 ] ] with [ zp[1]:76 [ gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] ]
Coalescing zero page register [ zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 ] ] with [ zp[2]:77 [ gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] ]
Coalescing zero page register [ zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 ] ] with [ zp[1]:83 [ gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] ]
Coalescing zero page register [ zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 ] ] with [ zp[2]:85 [ gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ]
Coalescing zero page register [ zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 ] ] with [ zp[1]:84 [ gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] ]
Coalescing zero page register [ zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 ] ] with [ zp[1]:87 [ gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] ]
Coalescing zero page register [ zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 ] ] with [ zp[1]:99 [ bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] ]
Coalescing zero page register [ zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 ] ] with [ zp[1]:102 [ bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] ]
Coalescing zero page register [ zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 ] ] with [ zp[1]:100 [ bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] ]
Coalescing zero page register [ zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 ] ] with [ zp[1]:101 [ bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ]
Coalescing zero page register [ zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 ] ] with [ zp[1]:111 [ bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] ]
Coalescing zero page register [ zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 ] ] with [ zp[1]:114 [ bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] ]
Coalescing zero page register [ zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 ] ] with [ zp[1]:116 [ bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ]
Coalescing zero page register [ zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 ] ] with [ zp[1]:98 [ bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ]
Coalescing zero page register [ zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 ] ] with [ zp[2]:94 [ gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ]
Coalescing zero page register [ zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 ] ] with [ zp[2]:130 [ bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ]
Coalescing zero page register [ zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 ] ] with [ zp[1]:132 [ gfx_init_charset::c#4 gfx_init_charset::c#1 ] ]
Coalescing zero page register [ zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 ] ] with [ zp[2]:135 [ gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ]
Coalescing zero page register [ zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 ] ] with [ zp[1]:142 [ gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] ]
Coalescing zero page register [ zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 ] ] with [ zp[2]:144 [ gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] ]
Coalescing zero page register [ zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 ] ] with [ zp[1]:150 [ gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] ]
Coalescing zero page register [ zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 ] ] with [ zp[2]:152 [ gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] ]
Coalescing zero page register [ zp[1]:241 [ keyboard_event_scan::row_scan#0 ] ] with [ zp[1]:216 [ gfx_mode::$56 ] ]
Coalescing zero page register [ zp[2]:263 [ form_field_ptr::line#0 ] ] with [ zp[2]:172 [ gfx_mode::$26 ] ]
Coalescing zero page register [ zp[2]:278 [ memset::end#0 ] ] with [ zp[2]:176 [ gfx_mode::$28 ] ]
Coalescing zero page register [ zp[2]:284 [ gfx_init_plane_fill::$1 ] ] with [ zp[2]:197 [ gfx_mode::$40 ] ]
Coalescing zero page register [ zp[2]:297 [ gfx_init_plane_8bppchunky::$8 ] ] with [ zp[2]:201 [ gfx_mode::$42 ] ]
Coalescing zero page register [ zp[1]:324 [ bitmap_init::$10 ] ] with [ zp[1]:255 [ keyboard_event_pressed::row_bits#0 ] ]
Coalescing zero page register [ zp[1]:329 [ gfx_init_screen3::$1 ] ] with [ zp[1]:265 [ form_field_ptr::x#0 ] ]
Coalescing zero page register [ zp[1]:340 [ gfx_init_screen0::$1 ] ] with [ zp[1]:334 [ gfx_init_screen2::col2#0 ] ]
Coalescing zero page register [ zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 form_set_screen::line#2 form_set_screen::line#1 ] ] with [ zp[2]:35 [ render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$53 gfx_mode::$54 gfx_mode::$55 ] ]
Coalescing zero page register [ zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 ] ] with [ zp[2]:39 [ print_str_at::at#2 print_str_at::at#0 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ]
Coalescing zero page register [ zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 ] ] with [ zp[2]:43 [ apply_preset::preset#15 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$58 gfx_mode::$59 ] ]
Coalescing zero page register [ zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 ] ] with [ zp[1]:14 [ keyboard_event_scan::row#2 keyboard_event_scan::row#1 gfx_mode::cy#4 gfx_mode::cy#1 ] ]
Coalescing zero page register [ zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 ] ] with [ zp[2]:73 [ gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] ]
Coalescing zero page register [ zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 ] ] with [ zp[1]:19 [ keyboard_event_pressed::keycode#4 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ]
Coalescing zero page register [ zp[1]:96 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 ] ] with [ zp[1]:62 [ gfx_init_plane_fill::fill#6 keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ] ]
Coalescing zero page register [ zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 ] ] with [ zp[1]:63 [ gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] ]
Coalescing zero page register [ zp[1]:106 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 ] ] with [ zp[1]:68 [ gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ] ]
Coalescing zero page register [ zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 ] ] with [ zp[1]:72 [ gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] ]
Coalescing zero page register [ zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 ] ] with [ zp[1]:109 [ bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] ]
Coalescing zero page register [ zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 ] ] with [ zp[2]:91 [ gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ]
Coalescing zero page register [ zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_charset::c#4 gfx_init_charset::c#1 ] ] with [ zp[1]:110 [ bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ]
Coalescing zero page register [ zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 ] ] with [ zp[2]:124 [ bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ]
Coalescing zero page register [ zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 ] ] with [ zp[1]:121 [ bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] ]
Coalescing zero page register [ zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 ] ] with [ zp[1]:122 [ bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ]
Coalescing zero page register [ zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 ] ] with [ zp[2]:148 [ gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] ]
Coalescing zero page register [ zp[1]:241 [ keyboard_event_scan::row_scan#0 gfx_mode::$56 ] ] with [ zp[1]:123 [ bitmap_clear::y#4 bitmap_clear::y#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ]
Coalescing zero page register [ zp[2]:311 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 ] ] with [ zp[2]:263 [ form_field_ptr::line#0 gfx_mode::$26 ] ]
Coalescing zero page register [ zp[2]:313 [ bitmap_plot::plotter_y#0 ] ] with [ zp[2]:278 [ memset::end#0 gfx_mode::$28 ] ]
Coalescing zero page register [ zp[1]:340 [ gfx_init_screen0::$1 gfx_init_screen2::col2#0 ] ] with [ zp[1]:324 [ bitmap_init::$10 keyboard_event_pressed::row_bits#0 ] ]
Coalescing zero page register [ zp[2]:81 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 ] ] with [ zp[2]:50 [ print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 form_set_screen::line#2 form_set_screen::line#1 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$53 gfx_mode::$54 gfx_mode::$55 ] ]
Coalescing zero page register [ zp[1]:118 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 ] ] with [ zp[1]:80 [ gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 gfx_mode::cy#4 gfx_mode::cy#1 ] ]
Coalescing zero page register [ zp[2]:133 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 ] ] with [ zp[2]:56 [ memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 print_str_at::at#2 print_str_at::at#0 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ] ]
Coalescing zero page register [ zp[1]:138 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_charset::c#4 gfx_init_charset::c#1 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 ] ] with [ zp[1]:90 [ gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 keyboard_event_pressed::keycode#4 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ] ]
Coalescing zero page register [ zp[2]:139 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 ] ] with [ zp[2]:64 [ gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 apply_preset::preset#15 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$58 gfx_mode::$59 ] ]
Coalescing zero page register [ zp[1]:146 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 ] ] with [ zp[1]:97 [ bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ] ]
Coalescing zero page register [ zp[1]:154 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 ] ] with [ zp[1]:107 [ bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ] ]
Coalescing zero page register [ zp[2]:284 [ gfx_init_plane_fill::$1 gfx_mode::$40 ] ] with [ zp[2]:156 [ gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ] ]
Coalescing zero page register [ zp[1]:340 [ gfx_init_screen0::$1 gfx_init_screen2::col2#0 bitmap_init::$10 keyboard_event_pressed::row_bits#0 ] ] with [ zp[1]:241 [ keyboard_event_scan::row_scan#0 gfx_mode::$56 bitmap_clear::y#4 bitmap_clear::y#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ] ]
Allocated (was zp[4]:58) zp[4]:2 [ gfx_init_plane_fill::plane_addr#3 get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$22 gfx_mode::plane_a#0 gfx_mode::$36 gfx_mode::plane_b#0 ]
Allocated (was zp[2]:81) zp[2]:6 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 form_set_screen::line#2 form_set_screen::line#1 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$53 gfx_mode::$54 gfx_mode::$55 ]
Allocated (was zp[1]:96) zp[1]:8 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 gfx_init_plane_fill::fill#6 keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ]
Allocated (was zp[1]:106) zp[1]:9 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
Allocated (was zp[1]:118) zp[1]:10 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 gfx_mode::cy#4 gfx_mode::cy#1 ]
Allocated (was zp[2]:133) zp[2]:11 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 print_str_at::at#2 print_str_at::at#0 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
Allocated (was zp[1]:138) zp[1]:13 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_charset::c#4 gfx_init_charset::c#1 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 keyboard_event_pressed::keycode#4 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
Allocated (was zp[2]:139) zp[2]:14 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 apply_preset::preset#15 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$58 gfx_mode::$59 ]
Allocated (was zp[1]:146) zp[1]:16 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
Allocated (was zp[1]:154) zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
Allocated (was zp[4]:280) zp[4]:18 [ gfx_init_plane_fill::$0 ]
Allocated (was zp[2]:284) zp[2]:22 [ gfx_init_plane_fill::$1 gfx_mode::$40 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
Allocated (was zp[2]:297) zp[2]:24 [ gfx_init_plane_8bppchunky::$8 gfx_mode::$42 ]
Allocated (was zp[2]:311) zp[2]:26 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 form_field_ptr::line#0 gfx_mode::$26 ]
Allocated (was zp[2]:313) zp[2]:28 [ bitmap_plot::plotter_y#0 memset::end#0 gfx_mode::$28 ]
Allocated (was zp[1]:329) zp[1]:30 [ gfx_init_screen3::$1 form_field_ptr::x#0 ]
Allocated (was zp[1]:340) zp[1]:31 [ gfx_init_screen0::$1 gfx_init_screen2::col2#0 bitmap_init::$10 keyboard_event_pressed::row_bits#0 keyboard_event_scan::row_scan#0 gfx_mode::$56 bitmap_clear::y#4 bitmap_clear::y#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Interactive Explorer for C64DTV Screen Modes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(__bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = 5
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA #1 Port A data direction register.
  .label CIA1_PORT_A_DDR = $dc02
  // CIA #1 Port B data direction register.
  .label CIA1_PORT_B_DDR = $dc03
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // VIC Screens
  .label VIC_SCREEN0 = $4000
  .label VIC_SCREEN1 = $4400
  .label VIC_SCREEN2 = $4800
  .label VIC_SCREEN3 = $4c00
  .label VIC_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VIC_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VIC_BITMAP = $6000
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  // Number of form fields
  .const form_fields_cnt = $24
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  .label print_char_cursor = $b
  .label print_line_cursor = $e
  .label keyboard_events_size = 8
  .label form_cursor_count = $10
  .label form_field_idx = 9
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // asm { sei  }
    sei
    // [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [7] *((const byte*) DTV_FEATURE) ← (const byte) DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // [8] call keyboard_init 
    jsr keyboard_init
    // [9] phi from main to main::@3 [phi:main->main::@3]
  __b3_from_main:
    jmp __b3
    // main::@3
  __b3:
    // [10] call gfx_init 
    // [446] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
  gfx_init_from___b3:
    jsr gfx_init
    // [11] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  __b1_from___b3:
    // [11] phi (byte) form_field_idx#1 = (byte) 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    // [11] phi (byte) keyboard_events_size#27 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keyboard_events_size
    // [11] phi (signed byte) form_cursor_count#1 = (const signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:main::@3->main::@1#2] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    jmp __b1
    // main::@1
  __b1:
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
  __b2_from___b1:
    jmp __b2
    // main::@2
  __b2:
    // [13] call form_mode 
    // [252] phi from main::@2 to form_mode [phi:main::@2->form_mode]
  form_mode_from___b2:
    jsr form_mode
    // [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
  __b4_from___b2:
    jmp __b4
    // main::@4
  __b4:
    // [15] call gfx_mode 
    jsr gfx_mode
    // [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
  __b1_from___b4:
    // [11] phi (byte) form_field_idx#1 = (byte) form_field_idx#18 [phi:main::@4->main::@1#0] -- register_copy 
    // [11] phi (byte) keyboard_events_size#27 = (byte) keyboard_events_size#24 [phi:main::@4->main::@1#1] -- register_copy 
    // [11] phi (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#16 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b1
}
  // gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label __22 = 2
    .label __26 = $1a
    .label __28 = $1c
    .label __36 = 2
    .label __40 = $16
    .label __42 = $18
    .label __53 = 6
    .label __54 = 6
    .label __55 = 6
    .label __56 = $1f
    .label __58 = $e
    .label __59 = $e
    .label plane_a = 2
    .label plane_b = 2
    .label vic_colors = 6
    .label col = $b
    .label cy = $a
    // [16] if(*((const byte[]) form_fields_val+(byte) 5)==(byte) 0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+5
    cmp #0
    beq __b1_from_gfx_mode
    // [17] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
  __b10_from_gfx_mode:
    jmp __b10
    // gfx_mode::@10
  __b10:
    // [18] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
  __b1_from___b10:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (const byte) DTV_LINEAR [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #DTV_LINEAR
    jmp __b1
    // [18] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  __b1_from_gfx_mode:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (byte) 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // gfx_mode::@1
  __b1:
    // [19] if(*((const byte[]) form_fields_val+(byte) 8)==(byte) 0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+8
    cmp #0
    beq __b2_from___b1
    jmp __b11
    // gfx_mode::@11
  __b11:
    // [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
    // [21] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
  __b2_from___b1:
  __b2_from___b11:
    // [21] phi (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    jmp __b2
    // gfx_mode::@2
  __b2:
    // [22] if(*((const byte[]) form_fields_val+(byte) 4)==(byte) 0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+4
    cmp #0
    beq __b3_from___b2
    jmp __b12
    // gfx_mode::@12
  __b12:
    // [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
    // [24] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
  __b3_from___b12:
  __b3_from___b2:
    // [24] phi (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    jmp __b3
    // gfx_mode::@3
  __b3:
    // [25] if(*((const byte[]) form_fields_val+(byte) 9)==(byte) 0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+9
    cmp #0
    beq __b4_from___b3
    jmp __b13
    // gfx_mode::@13
  __b13:
    // [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
    // [27] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
  __b4_from___b13:
  __b4_from___b3:
    // [27] phi (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    jmp __b4
    // gfx_mode::@4
  __b4:
    // [28] if(*((const byte[]) form_fields_val+(byte) 6)==(byte) 0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+6
    cmp #0
    beq __b5_from___b4
    jmp __b14
    // gfx_mode::@14
  __b14:
    // [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
    // [30] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
  __b5_from___b14:
  __b5_from___b4:
    // [30] phi (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    jmp __b5
    // gfx_mode::@5
  __b5:
    // [31] if(*((const byte[]) form_fields_val+(byte) 7)==(byte) 0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+7
    cmp #0
    beq __b6_from___b5
    jmp __b15
    // gfx_mode::@15
  __b15:
    // [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
    // [33] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
  __b6_from___b15:
  __b6_from___b5:
    // [33] phi (byte) gfx_mode::dtv_control#12 = (byte) gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    jmp __b6
    // gfx_mode::@6
  __b6:
    // [34] *((const byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
    // [35] if(*((const byte[]) form_fields_val+(byte) 3)==(byte) 0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+3
    cmp #0
    beq __b7_from___b6
    // [36] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
  __b16_from___b6:
    jmp __b16
    // gfx_mode::@16
  __b16:
    // [37] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
  __b7_from___b16:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3|(const byte) VIC_ECM [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3|VIC_ECM
    jmp __b7
    // [37] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  __b7_from___b6:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3
    jmp __b7
    // gfx_mode::@7
  __b7:
    // [38] if(*((const byte[]) form_fields_val+(byte) 1)==(byte) 0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+1
    cmp #0
    beq __b8_from___b7
    jmp __b17
    // gfx_mode::@17
  __b17:
    // [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #VIC_BMM
    tax
    // [40] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
  __b8_from___b17:
  __b8_from___b7:
    // [40] phi (byte) gfx_mode::vic_control#4 = (byte) gfx_mode::vic_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    jmp __b8
    // gfx_mode::@8
  __b8:
    // [41] *((const byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4 -- _deref_pbuc1=vbuxx 
    stx VIC_CONTROL
    // [42] if(*((const byte[]) form_fields_val+(byte) 2)==(byte) 0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+2
    cmp #0
    beq __b9_from___b8
    // [43] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
  __b18_from___b8:
    jmp __b18
    // gfx_mode::@18
  __b18:
    // [44] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
  __b9_from___b18:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL|(const byte) VIC_MCM [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL|VIC_MCM
    jmp __b9
    // [44] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  __b9_from___b8:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL
    jmp __b9
    // gfx_mode::@9
  __b9:
    // [45] *((const byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2 -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL2
    // [46] (byte~) gfx_mode::$20 ← *((const byte[]) form_fields_val+(byte) $b) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$b
    asl
    asl
    asl
    asl
    // [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte[]) form_fields_val+(byte) $c) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$c
    tax
    // [48] (byte) get_plane::idx#0 ← *((const byte[]) form_fields_val+(byte) $a) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$a
    // [49] call get_plane 
    // [234] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
  get_plane_from___b9:
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
    // [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14
    jmp __b27
    // gfx_mode::@27
  __b27:
    // [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16
    // [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_a
    sta.z plane_a
    lda.z plane_a+1
    adc #0
    sta.z plane_a+1
    lda.z plane_a+2
    adc #0
    sta.z plane_a+2
    lda.z plane_a+3
    adc #0
    sta.z plane_a+3
    // [53] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __26
    lda.z plane_a+1
    sta.z __26+1
    // [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$26 -- vbuaa=_lo_vwuz1 
    lda.z __26
    // [55] *((const byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$25 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_LO
    // [56] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 -- vbuaa=_hi_vwuz1 
    lda.z __26+1
    // [57] *((const byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$27 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_MI
    // [58] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda.z plane_a+2
    sta.z __28
    lda.z plane_a+3
    sta.z __28+1
    // [59] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 -- vbuaa=_lo_vwuz1 
    lda.z __28
    // [60] *((const byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$29 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_HI
    // [61] (byte~) gfx_mode::$30 ← *((const byte[]) form_fields_val+(byte) $d) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$d
    asl
    asl
    asl
    asl
    // [62] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte[]) form_fields_val+(byte) $e) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$e
    // [63] *((const byte*) DTV_PLANEA_STEP) ← (byte~) gfx_mode::$31 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_STEP
    // [64] (byte~) gfx_mode::$32 ← *((const byte[]) form_fields_val+(byte) $f) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$f
    asl
    asl
    asl
    asl
    // [65] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte[]) form_fields_val+(byte) $10) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$10
    // [66] *((const byte*) DTV_PLANEA_MODULO_LO) ← (byte~) gfx_mode::$33 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_MODULO_LO
    // [67] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // [68] (byte~) gfx_mode::$34 ← *((const byte[]) form_fields_val+(byte) $12) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$12
    asl
    asl
    asl
    asl
    // [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte[]) form_fields_val+(byte) $13) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$13
    tax
    // [70] (byte) get_plane::idx#1 ← *((const byte[]) form_fields_val+(byte) $11) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$11
    // [71] call get_plane 
    // [234] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
  get_plane_from___b27:
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
    // [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14
    jmp __b28
    // gfx_mode::@28
  __b28:
    // [73] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17
    // [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_b
    sta.z plane_b
    lda.z plane_b+1
    adc #0
    sta.z plane_b+1
    lda.z plane_b+2
    adc #0
    sta.z plane_b+2
    lda.z plane_b+3
    adc #0
    sta.z plane_b+3
    // [75] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __40
    lda.z plane_b+1
    sta.z __40+1
    // [76] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$40 -- vbuaa=_lo_vwuz1 
    lda.z __40
    // [77] *((const byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$39 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_LO
    // [78] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 -- vbuaa=_hi_vwuz1 
    lda.z __40+1
    // [79] *((const byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$41 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_MI
    // [80] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda.z plane_b+2
    sta.z __42
    lda.z plane_b+3
    sta.z __42+1
    // [81] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 -- vbuaa=_lo_vwuz1 
    lda.z __42
    // [82] *((const byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$43 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_HI
    // [83] (byte~) gfx_mode::$44 ← *((const byte[]) form_fields_val+(byte) $14) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$14
    asl
    asl
    asl
    asl
    // [84] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte[]) form_fields_val+(byte) $15) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$15
    // [85] *((const byte*) DTV_PLANEB_STEP) ← (byte~) gfx_mode::$45 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_STEP
    // [86] (byte~) gfx_mode::$46 ← *((const byte[]) form_fields_val+(byte) $16) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$16
    asl
    asl
    asl
    asl
    // [87] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte[]) form_fields_val+(byte) $17) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$17
    // [88] *((const byte*) DTV_PLANEB_MODULO_LO) ← (byte~) gfx_mode::$47 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_MODULO_LO
    // [89] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // [90] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
    // [91] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) VIC_SCREEN0/(word) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VIC_SCREEN0/$4000
    sta CIA2_PORT_A
    // [92] (byte) get_vic_screen::idx#0 ← *((const byte[]) form_fields_val+(byte) $18) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$18
    // [93] call get_vic_screen 
    // [220] phi from gfx_mode::@28 to get_vic_screen [phi:gfx_mode::@28->get_vic_screen]
  get_vic_screen_from___b28:
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#0 [phi:gfx_mode::@28->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5
    jmp __b29
    // gfx_mode::@29
  __b29:
    // [95] (byte*~) gfx_mode::$53 ← (byte*) get_vic_screen::return#10
    // [96] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$53 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __54
    and #<$3fff
    sta.z __54
    lda.z __54+1
    and #>$3fff
    sta.z __54+1
    // [97] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte) 6 -- vwuz1=vwuz1_ror_6 
    ldy #6
  !:
    lsr.z __55+1
    ror.z __55
    dey
    bne !-
    // [98] (byte~) gfx_mode::$56 ← (byte)(word~) gfx_mode::$55 -- vbuz1=_byte_vwuz2 
    lda.z __55
    sta.z __56
    // [99] (byte) get_vic_charset::idx#0 ← *((const byte[]) form_fields_val+(byte) $19) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$19
    // [100] call get_vic_charset 
    jsr get_vic_charset
    // [101] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
    jmp __b30
    // gfx_mode::@30
  __b30:
    // [102] (byte*~) gfx_mode::$58 ← (byte*) get_vic_charset::return#4
    // [103] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$58 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __59
    and #<$3fff
    sta.z __59
    lda.z __59+1
    and #>$3fff
    sta.z __59+1
    // [104] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 -- vbuaa=_hi_vwuz1 
    lda.z __59+1
    // [105] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte) 2 -- vbuaa=vbuaa_ror_2 
    lsr
    lsr
    // [106] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __56
    // [107] *((const byte*) VIC_MEMORY) ← (byte~) gfx_mode::$62 -- _deref_pbuc1=vbuaa 
    // Set VIC Bank
    // VIC memory
    sta VIC_MEMORY
    // [108] (byte) get_vic_screen::idx#1 ← *((const byte[]) form_fields_val+(byte) $1a) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$1a
    // [109] call get_vic_screen 
    // [220] phi from gfx_mode::@30 to get_vic_screen [phi:gfx_mode::@30->get_vic_screen]
  get_vic_screen_from___b30:
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#1 [phi:gfx_mode::@30->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5
    jmp __b31
    // gfx_mode::@31
  __b31:
    // [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11
    // [112] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
  __b19_from___b31:
    // [112] phi (byte) gfx_mode::cy#4 = (byte) 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [112] phi (byte*) gfx_mode::col#3 = (const byte*) COLS [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // [112] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
  __b19_from___b21:
    // [112] phi (byte) gfx_mode::cy#4 = (byte) gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
    // [112] phi (byte*) gfx_mode::col#3 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    jmp __b19
    // gfx_mode::@19
  __b19:
    // [113] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
  __b20_from___b19:
    // [113] phi (byte) gfx_mode::cx#2 = (byte) 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // [113] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
  __b20_from___b20:
    // [113] phi (byte) gfx_mode::cx#2 = (byte) gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    jmp __b20
    // gfx_mode::@20
  __b20:
    // [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (vic_colors),y
    ldy #0
    sta (col),y
    // [115] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [116] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2 -- pbuz1=_inc_pbuz1 
    inc.z vic_colors
    bne !+
    inc.z vic_colors+1
  !:
    // [117] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [118] if((byte) gfx_mode::cx#1!=(byte) $28) goto gfx_mode::@20 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b20_from___b20
    jmp __b21
    // gfx_mode::@21
  __b21:
    // [119] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [120] if((byte) gfx_mode::cy#1!=(byte) $19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b19_from___b21
    jmp __b22
    // gfx_mode::@22
  __b22:
    // [121] *((const byte*) BORDERCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta BORDERCOL
    // [122] (byte~) gfx_mode::$64 ← *((const byte[]) form_fields_val+(byte) $1c) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$1c
    asl
    asl
    asl
    asl
    // [123] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte[]) form_fields_val+(byte) $1d) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$1d
    // [124] *((const byte*) BGCOL1) ← (byte~) gfx_mode::$65 -- _deref_pbuc1=vbuaa 
    sta BGCOL1
    // [125] (byte~) gfx_mode::$66 ← *((const byte[]) form_fields_val+(byte) $1e) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$1e
    asl
    asl
    asl
    asl
    // [126] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte[]) form_fields_val+(byte) $1f) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$1f
    // [127] *((const byte*) BGCOL2) ← (byte~) gfx_mode::$67 -- _deref_pbuc1=vbuaa 
    sta BGCOL2
    // [128] (byte~) gfx_mode::$68 ← *((const byte[]) form_fields_val+(byte) $20) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$20
    asl
    asl
    asl
    asl
    // [129] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte[]) form_fields_val+(byte) $21) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$21
    // [130] *((const byte*) BGCOL3) ← (byte~) gfx_mode::$69 -- _deref_pbuc1=vbuaa 
    sta BGCOL3
    // [131] (byte~) gfx_mode::$70 ← *((const byte[]) form_fields_val+(byte) $22) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$22
    asl
    asl
    asl
    asl
    // [132] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte[]) form_fields_val+(byte) $23) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$23
    // [133] *((const byte*) BGCOL4) ← (byte~) gfx_mode::$71 -- _deref_pbuc1=vbuaa 
    sta BGCOL4
    // [134] if(*((const byte[]) form_fields_val+(byte) $1b)==(byte) 0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_fields_val+$1b
    cmp #0
    beq __b24_from___b22
    // [135] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
  __b23_from___b22:
    // [135] phi (byte) gfx_mode::j#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b23
  // DTV Palette - Grey Tones
    // [135] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
  __b23_from___b23:
    // [135] phi (byte) gfx_mode::j#2 = (byte) gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    jmp __b23
    // gfx_mode::@23
  __b23:
    // [136] *((const byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // [137] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2 -- vbuxx=_inc_vbuxx 
    inx
    // [138] if((byte) gfx_mode::j#1!=(byte) $10) goto gfx_mode::@23 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b23_from___b23
    jmp __b25
    // gfx_mode::@25
  __b25:
    // [139] if(*((const byte*) RASTER)!=(byte) $ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b25
    // [140] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
  __b26_from___b25:
    jmp __b26
    // gfx_mode::@26
  __b26:
    // [141] call keyboard_event_scan 
    // [157] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
  keyboard_event_scan_from___b26:
    // [157] phi (byte) keyboard_events_size#99 = (byte) keyboard_events_size#24 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [142] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
  __b32_from___b26:
    jmp __b32
    // gfx_mode::@32
  __b32:
    // [143] call keyboard_event_get 
    jsr keyboard_event_get
    // [144] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    jmp __b33
    // gfx_mode::@33
  __b33:
    // [145] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3
    // [146] if((byte) gfx_mode::keyboard_event#0==(const byte) KEY_SPACE) goto gfx_mode::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_SPACE
    beq __breturn
    jmp __b25
    // gfx_mode::@return
  __breturn:
    // [147] return 
    rts
  // DTV Palette - default
    // [148] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  __b24_from___b22:
    // [148] phi (byte) gfx_mode::i#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b24
    // [148] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
  __b24_from___b24:
    // [148] phi (byte) gfx_mode::i#2 = (byte) gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    jmp __b24
    // gfx_mode::@24
  __b24:
    // [149] *((const byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [150] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [151] if((byte) gfx_mode::i#1!=(byte) $10) goto gfx_mode::@24 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b24_from___b24
    jmp __b25
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // [152] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq __breturn_from_keyboard_event_get
    jmp __b1
    // keyboard_event_get::@1
  __b1:
    // [153] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [154] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    // [155] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
  __breturn_from___b1:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    jmp __breturn
    // [155] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  __breturn_from_keyboard_event_get:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    jmp __breturn
    // keyboard_event_get::@return
  __breturn:
    // [156] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $1f
    .label keycode = $d
    .label row = $a
    // [158] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
  __b7_from_keyboard_event_scan:
    // [158] phi (byte) keyboard_events_size#109 = (byte) keyboard_events_size#99 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    lda #0
    sta.z row
    jmp __b7
    // [158] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
  __b7_from___b8:
    // [158] phi (byte) keyboard_events_size#109 = (byte) keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    jmp __b7
    // keyboard_event_scan::@7
  __b7:
    // [159] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [160] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [161] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    jmp __b19
    // keyboard_event_scan::@19
  __b19:
    // [162] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    lda.z row_scan
    ldy.z row
    cmp keyboard_scan_values,y
    bne __b9_from___b19
    jmp __b16
    // keyboard_event_scan::@16
  __b16:
    // [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [165] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
  __b8_from___b15:
  __b8_from___b16:
    // [165] phi (byte) keyboard_events_size#100 = (byte) keyboard_events_size#108 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [165] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    jmp __b8
    // keyboard_event_scan::@8
  __b8:
    // [166] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [167] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7_from___b8
    // [168] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
  __b17_from___b8:
    jmp __b17
    // keyboard_event_scan::@17
  __b17:
    // [169] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
  keyboard_event_pressed_from___b17:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [170] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10
    jmp __b20
    // keyboard_event_scan::@20
  __b20:
    // [171] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
    // [172] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1_from___b20
    // [173] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
  __b18_from___b20:
    jmp __b18
    // keyboard_event_scan::@18
  __b18:
    // [174] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
  __b1_from___b18:
    // [174] phi (byte) keyboard_modifiers#18 = (const byte) KEY_MODIFIER_LSHIFT [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #KEY_MODIFIER_LSHIFT
    jmp __b1
    // [174] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  __b1_from___b20:
    // [174] phi (byte) keyboard_modifiers#18 = (byte) 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // keyboard_event_scan::@1
  __b1:
    // [175] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
  keyboard_event_pressed_from___b1:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [176] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10
    jmp __b21
    // keyboard_event_scan::@21
  __b21:
    // [177] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
    // [178] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from___b21
    jmp __b4
    // keyboard_event_scan::@4
  __b4:
    // [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
    // [180] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
  __b2_from___b21:
  __b2_from___b4:
    // [180] phi (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#18 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    jmp __b2
    // keyboard_event_scan::@2
  __b2:
    // [181] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
  keyboard_event_pressed_from___b2:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [182] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10
    jmp __b22
    // keyboard_event_scan::@22
  __b22:
    // [183] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
    // [184] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3_from___b22
    jmp __b5
    // keyboard_event_scan::@5
  __b5:
    // [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
    // [186] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
  __b3_from___b22:
  __b3_from___b5:
    // [186] phi (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#19 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    jmp __b3
    // keyboard_event_scan::@3
  __b3:
    // [187] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
  keyboard_event_pressed_from___b3:
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // [188] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10
    jmp __b23
    // keyboard_event_scan::@23
  __b23:
    // [189] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3
    // [190] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from___b23
    jmp __b6
    // keyboard_event_scan::@6
  __b6:
    // [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
    tax
    // [192] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
  __breturn_from___b23:
  __breturn_from___b6:
    // [192] phi (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#20 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    jmp __breturn
    // keyboard_event_scan::@return
  __breturn:
    // [193] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [194] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
  __b9_from___b10:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#108 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    jmp __b9
    // [194] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  __b9_from___b19:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#109 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __b9
    // keyboard_event_scan::@9
  __b9:
    // [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // [196] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // [197] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10_from___b9
    jmp __b12
    // keyboard_event_scan::@12
  __b12:
    // [198] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10_from___b12
    jmp __b13
    // keyboard_event_scan::@13
  __b13:
    // [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // [200] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    jmp __b14
    // keyboard_event_scan::@14
  __b14:
    // [201] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [202] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [203] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
  __b10_from___b11:
  __b10_from___b12:
  __b10_from___b14:
  __b10_from___b9:
    // [203] phi (byte) keyboard_events_size#108 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    jmp __b10
    // keyboard_event_scan::@10
  __b10:
    // [204] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // [205] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [206] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b9_from___b10
    jmp __b15
    // keyboard_event_scan::@15
  __b15:
    // [207] *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8_from___b15
    // keyboard_event_scan::@11
  __b11:
    // [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // [209] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // [210] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10_from___b11
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zeropage($d) keycode)
keyboard_event_pressed: {
    .label row_bits = $1f
    .label keycode = $d
    // [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    // [213] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta.z row_bits
    // [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z keycode
    // [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and.z row_bits
    jmp __breturn
    // keyboard_event_pressed::@return
  __breturn:
    // [216] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // [217] *((const byte*) CIA1_PORT_A) ← *((const byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
    // [218] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    jmp __breturn
    // keyboard_matrix_read::@return
  __breturn:
    // [219] return 
    rts
}
  // get_vic_screen
// Get the VIC screen address from the screen index
// get_vic_screen(byte register(A) idx)
get_vic_screen: {
    .label return = 6
    // [221] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from_get_vic_screen
    jmp __b2
    // get_vic_screen::@2
  __b2:
    // [222] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __breturn_from___b2
    jmp __b3
    // get_vic_screen::@3
  __b3:
    // [223] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __breturn_from___b3
    jmp __b4
    // get_vic_screen::@4
  __b4:
    // [224] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __breturn_from___b4
    jmp __b5
    // get_vic_screen::@5
  __b5:
    // [225] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne __b1_from___b5
    // [227] phi from get_vic_screen::@5 to get_vic_screen::@return [phi:get_vic_screen::@5->get_vic_screen::@return]
  __breturn_from___b5:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN4 [phi:get_vic_screen::@5->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z return
    lda #>VIC_SCREEN4
    sta.z return+1
    jmp __breturn
    // [226] phi from get_vic_screen::@5 to get_vic_screen::@1 [phi:get_vic_screen::@5->get_vic_screen::@1]
  __b1_from___b5:
    jmp __b1
    // get_vic_screen::@1
  __b1:
    // [227] phi from get_vic_screen get_vic_screen::@1 to get_vic_screen::@return [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return]
  __breturn_from_get_vic_screen:
  __breturn_from___b1:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN0 [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@2 to get_vic_screen::@return [phi:get_vic_screen::@2->get_vic_screen::@return]
  __breturn_from___b2:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN1 [phi:get_vic_screen::@2->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@3 to get_vic_screen::@return [phi:get_vic_screen::@3->get_vic_screen::@return]
  __breturn_from___b3:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN2 [phi:get_vic_screen::@3->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    jmp __breturn
    // [227] phi from get_vic_screen::@4 to get_vic_screen::@return [phi:get_vic_screen::@4->get_vic_screen::@return]
  __breturn_from___b4:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN3 [phi:get_vic_screen::@4->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    jmp __breturn
    // get_vic_screen::@return
  __breturn:
    // [228] return 
    rts
}
  // get_vic_charset
// Get the VIC charset/bitmap address from the index
// get_vic_charset(byte register(A) idx)
get_vic_charset: {
    .label return = $e
    // [229] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from_get_vic_charset
    jmp __b2
    // get_vic_charset::@2
  __b2:
    // [230] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne __b1_from___b2
    // [232] phi from get_vic_charset::@2 to get_vic_charset::@return [phi:get_vic_charset::@2->get_vic_charset::@return]
  __breturn_from___b2:
    // [232] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_BITMAP [phi:get_vic_charset::@2->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    jmp __breturn
    // [231] phi from get_vic_charset::@2 to get_vic_charset::@1 [phi:get_vic_charset::@2->get_vic_charset::@1]
  __b1_from___b2:
    jmp __b1
    // get_vic_charset::@1
  __b1:
    // [232] phi from get_vic_charset get_vic_charset::@1 to get_vic_charset::@return [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return]
  __breturn_from_get_vic_charset:
  __breturn_from___b1:
    // [232] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_CHARSET_ROM [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    jmp __breturn
    // get_vic_charset::@return
  __breturn:
    // [233] return 
    rts
}
  // get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte register(A) idx)
get_plane: {
    .label return = 2
    // [235] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn_from_get_plane
    jmp __b2
    // get_plane::@2
  __b2:
    // [236] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __breturn_from___b2
    jmp __b3
    // get_plane::@3
  __b3:
    // [237] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __breturn_from___b3
    jmp __b4
    // get_plane::@4
  __b4:
    // [238] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __breturn_from___b4
    jmp __b5
    // get_plane::@5
  __b5:
    // [239] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __breturn_from___b5
    jmp __b6
    // get_plane::@6
  __b6:
    // [240] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __breturn_from___b6
    jmp __b7
    // get_plane::@7
  __b7:
    // [241] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __breturn_from___b7
    jmp __b8
    // get_plane::@8
  __b8:
    // [242] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __breturn_from___b8
    jmp __b9
    // get_plane::@9
  __b9:
    // [243] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __breturn_from___b9
    jmp __b10
    // get_plane::@10
  __b10:
    // [244] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __breturn_from___b10
    jmp __b11
    // get_plane::@11
  __b11:
    // [245] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __breturn_from___b11
    jmp __b12
    // get_plane::@12
  __b12:
    // [246] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$b
    beq __breturn_from___b12
    jmp __b13
    // get_plane::@13
  __b13:
    // [247] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$c
    beq __breturn_from___b13
    jmp __b14
    // get_plane::@14
  __b14:
    // [248] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$d
    bne __b1_from___b14
    // [250] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
  __breturn_from___b14:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_FULL [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z return
    lda #>PLANE_FULL
    sta.z return+1
    lda #<PLANE_FULL>>$10
    sta.z return+2
    lda #>PLANE_FULL>>$10
    sta.z return+3
    jmp __breturn
    // [249] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
  __b1_from___b14:
    jmp __b1
    // get_plane::@1
  __b1:
    // [250] phi from get_plane::@1 to get_plane::@return [phi:get_plane::@1->get_plane::@return]
  __breturn_from___b1:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN0 [phi:get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    lda #<VIC_SCREEN0>>$10
    sta.z return+2
    lda #>VIC_SCREEN0>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane to get_plane::@return [phi:get_plane->get_plane::@return]
  __breturn_from_get_plane:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN0 [phi:get_plane->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    lda #<VIC_SCREEN0>>$10
    sta.z return+2
    lda #>VIC_SCREEN0>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  __breturn_from___b10:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_HORISONTAL2 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta.z return
    lda #>PLANE_HORISONTAL2
    sta.z return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  __breturn_from___b11:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_VERTICAL2 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z return
    lda #>PLANE_VERTICAL2
    sta.z return+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  __breturn_from___b12:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_CHARSET8 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta.z return
    lda #>PLANE_CHARSET8
    sta.z return+1
    lda #<PLANE_CHARSET8>>$10
    sta.z return+2
    lda #>PLANE_CHARSET8>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  __breturn_from___b13:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_BLANK [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z return
    lda #>PLANE_BLANK
    sta.z return+1
    lda #<PLANE_BLANK>>$10
    sta.z return+2
    lda #>PLANE_BLANK>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  __breturn_from___b2:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN1 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    lda #<VIC_SCREEN1>>$10
    sta.z return+2
    lda #>VIC_SCREEN1>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  __breturn_from___b3:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN2 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    lda #<VIC_SCREEN2>>$10
    sta.z return+2
    lda #>VIC_SCREEN2>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  __breturn_from___b4:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN3 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    lda #<VIC_SCREEN3>>$10
    sta.z return+2
    lda #>VIC_SCREEN3>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  __breturn_from___b5:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_BITMAP [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    lda #<VIC_BITMAP>>$10
    sta.z return+2
    lda #>VIC_BITMAP>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  __breturn_from___b6:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_CHARSET_ROM [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    lda #<VIC_CHARSET_ROM>>$10
    sta.z return+2
    lda #>VIC_CHARSET_ROM>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  __breturn_from___b7:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_8BPP_CHUNKY [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta.z return
    lda #>PLANE_8BPP_CHUNKY
    sta.z return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta.z return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  __breturn_from___b8:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_HORISONTAL [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta.z return
    lda #>PLANE_HORISONTAL
    sta.z return+1
    lda #<PLANE_HORISONTAL>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL>>$10
    sta.z return+3
    jmp __breturn
    // [250] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  __breturn_from___b9:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_VERTICAL [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta.z return
    lda #>PLANE_VERTICAL
    sta.z return+1
    lda #<PLANE_VERTICAL>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL>>$10
    sta.z return+3
    jmp __breturn
    // get_plane::@return
  __breturn:
    // [251] return 
    rts
}
  // form_mode
// Show the form - and let the user change values
form_mode: {
    .label preset_current = $11
    // [253] call print_set_screen 
    // [444] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
  print_set_screen_from_form_mode:
    // [444] phi (byte*) print_set_screen::screen#2 = (const byte*) COLS [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z print_set_screen.screen
    lda #>COLS
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [254] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
  __b8_from_form_mode:
    jmp __b8
    // form_mode::@8
  __b8:
    // [255] call print_cls 
    jsr print_cls
    // [256] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
  __b9_from___b8:
    jmp __b9
    // form_mode::@9
  __b9:
    // [257] call print_str_lines 
    // [412] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
  print_str_lines_from___b9:
    // [412] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_COLS [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta.z print_str_lines.str
    lda #>FORM_COLS
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [258] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
  __b10_from___b9:
    jmp __b10
    // form_mode::@10
  __b10:
    // [259] call print_set_screen 
    // [444] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
  print_set_screen_from___b10:
    // [444] phi (byte*) print_set_screen::screen#2 = (const byte*) FORM_SCREEN [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z print_set_screen.screen
    lda #>FORM_SCREEN
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [260] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
  __b11_from___b10:
    jmp __b11
    // form_mode::@11
  __b11:
    // [261] call print_cls 
    jsr print_cls
    // [262] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
  __b12_from___b11:
    jmp __b12
    // form_mode::@12
  __b12:
    // [263] call print_str_lines 
    // [412] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
  print_str_lines_from___b12:
    // [412] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_TEXT [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta.z print_str_lines.str
    lda #>FORM_TEXT
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [264] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
  __b13_from___b12:
    jmp __b13
    // form_mode::@13
  __b13:
    // [265] call form_set_screen 
    // [402] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
  form_set_screen_from___b13:
    jsr form_set_screen
    // [266] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
  __b14_from___b13:
    jmp __b14
    // form_mode::@14
  __b14:
    // [267] call form_render_values 
    // [328] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
  form_render_values_from___b14:
    jsr form_render_values
    jmp __b15
    // form_mode::@15
  __b15:
    // [268] (byte) render_preset_name::idx#0 ← *((const byte[]) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [269] call render_preset_name 
    // [304] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
  render_preset_name_from___b15:
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b16
    // form_mode::@16
  __b16:
    // [270] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // [271] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // [272] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // [273] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
    // [274] *((const byte*) CIA2_PORT_A) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3
    sta CIA2_PORT_A
    // [275] *((const byte*) DTV_CONTROL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
    // [276] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // [277] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // [278] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // [279] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #0
    sta DTV_PLANEA_START_LO
    // [280] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) FORM_SCREEN -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
    // [281] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [282] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
  __b1_from___b16:
    // [282] phi (byte) form_mode::i#2 = (byte) 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
  // DTV Palette - default
    // [282] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
  __b1_from___b1:
    // [282] phi (byte) form_mode::i#2 = (byte) form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    jmp __b1
    // form_mode::@1
  __b1:
    // [283] *((const byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // [284] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [285] if((byte) form_mode::i#1!=(byte) $10) goto form_mode::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1_from___b1
    jmp __b2
    // form_mode::@2
  __b2:
    // [286] *((const byte*) BGCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
    // [287] *((const byte*) BORDERCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta BORDERCOL
    // [288] (byte) form_mode::preset_current#0 ← *((const byte[]) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [289] phi from form_mode::@19 form_mode::@2 form_mode::@6 to form_mode::@3 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3]
  __b3_from___b19:
  __b3_from___b2:
  __b3_from___b6:
    // [289] phi (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#0] -- register_copy 
    // [289] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#1] -- register_copy 
    // [289] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#2] -- register_copy 
    // [289] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#3] -- register_copy 
    jmp __b3
  // Let the user change values in the form
    // form_mode::@3
  __b3:
    jmp __b4
    // form_mode::@4
  __b4:
    // [290] if(*((const byte*) RASTER)!=(byte) $ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b4
    // [291] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
  __b5_from___b4:
    jmp __b5
    // form_mode::@5
  __b5:
    // [292] call form_control 
    jsr form_control
    // [293] (byte) form_control::return#0 ← (byte) form_control::return#2 -- vbuaa=vbuxx 
    txa
    jmp __b17
    // form_mode::@17
  __b17:
    // [294] (byte~) form_mode::$36 ← (byte) form_control::return#0
    // [295] if((byte~) form_mode::$36==(byte) 0) goto form_mode::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6
    jmp __breturn
    // form_mode::@return
  __breturn:
    // [296] return 
    rts
    // form_mode::@6
  __b6:
    // [297] if((byte) form_mode::preset_current#6==*((const byte[]) form_fields_val)) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp.z preset_current
    beq __b3_from___b6
    jmp __b7
    // form_mode::@7
  __b7:
    // [298] (byte) apply_preset::idx#0 ← *((const byte[]) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [299] call apply_preset 
    jsr apply_preset
    jmp __b18
    // form_mode::@18
  __b18:
    // [300] (byte) form_mode::preset_current#1 ← *((const byte[]) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [301] call form_render_values 
    // [328] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
  form_render_values_from___b18:
    jsr form_render_values
    jmp __b19
    // form_mode::@19
  __b19:
    // [302] (byte) render_preset_name::idx#1 ← *((const byte[]) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [303] call render_preset_name 
    // [304] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
  render_preset_name_from___b19:
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp __b3_from___b19
}
  // render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte register(A) idx)
render_preset_name: {
    .label name = 6
    // [305] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from_render_preset_name
    jmp __b3
    // render_preset_name::@3
  __b3:
    // [306] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2_from___b3
    jmp __b4
    // render_preset_name::@4
  __b4:
    // [307] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b2_from___b4
    jmp __b5
    // render_preset_name::@5
  __b5:
    // [308] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b2_from___b5
    jmp __b6
    // render_preset_name::@6
  __b6:
    // [309] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b2_from___b6
    jmp __b7
    // render_preset_name::@7
  __b7:
    // [310] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b2_from___b7
    jmp __b8
    // render_preset_name::@8
  __b8:
    // [311] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b2_from___b8
    jmp __b9
    // render_preset_name::@9
  __b9:
    // [312] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b2_from___b9
    jmp __b10
    // render_preset_name::@10
  __b10:
    // [313] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b2_from___b10
    jmp __b11
    // render_preset_name::@11
  __b11:
    // [314] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b2_from___b11
    jmp __b12
    // render_preset_name::@12
  __b12:
    // [315] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1_from___b12
    // [317] phi from render_preset_name render_preset_name::@12 to render_preset_name::@2 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2]
  __b2_from_render_preset_name:
  __b2_from___b12:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta.z name
    lda #>name_1
    sta.z name+1
    jmp __b2
    // [316] phi from render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name::@12->render_preset_name::@1]
  __b1_from___b12:
    jmp __b1
    // render_preset_name::@1
  __b1:
    // [317] phi from render_preset_name::@1 to render_preset_name::@2 [phi:render_preset_name::@1->render_preset_name::@2]
  __b2_from___b1:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#11 [phi:render_preset_name::@1->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta.z name
    lda #>name_11
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@10 to render_preset_name::@2 [phi:render_preset_name::@10->render_preset_name::@2]
  __b2_from___b10:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#9 [phi:render_preset_name::@10->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta.z name
    lda #>name_9
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@11 to render_preset_name::@2 [phi:render_preset_name::@11->render_preset_name::@2]
  __b2_from___b11:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#10 [phi:render_preset_name::@11->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta.z name
    lda #>name_10
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@3 to render_preset_name::@2 [phi:render_preset_name::@3->render_preset_name::@2]
  __b2_from___b3:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#2 [phi:render_preset_name::@3->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta.z name
    lda #>name_2
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@4 to render_preset_name::@2 [phi:render_preset_name::@4->render_preset_name::@2]
  __b2_from___b4:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#3 [phi:render_preset_name::@4->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta.z name
    lda #>name_3
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@5 to render_preset_name::@2 [phi:render_preset_name::@5->render_preset_name::@2]
  __b2_from___b5:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#4 [phi:render_preset_name::@5->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta.z name
    lda #>name_4
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@6 to render_preset_name::@2 [phi:render_preset_name::@6->render_preset_name::@2]
  __b2_from___b6:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#5 [phi:render_preset_name::@6->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta.z name
    lda #>name_5
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@7 to render_preset_name::@2 [phi:render_preset_name::@7->render_preset_name::@2]
  __b2_from___b7:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#6 [phi:render_preset_name::@7->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta.z name
    lda #>name_6
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@8 to render_preset_name::@2 [phi:render_preset_name::@8->render_preset_name::@2]
  __b2_from___b8:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#7 [phi:render_preset_name::@8->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta.z name
    lda #>name_7
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@9 to render_preset_name::@2 [phi:render_preset_name::@9->render_preset_name::@2]
  __b2_from___b9:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#8 [phi:render_preset_name::@9->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta.z name
    lda #>name_8
    sta.z name+1
    jmp __b2
    // render_preset_name::@2
  __b2:
    // [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
    // [319] call print_str_at 
    // [321] phi from render_preset_name::@2 to print_str_at [phi:render_preset_name::@2->print_str_at]
  print_str_at_from___b2:
    jsr print_str_at
    jmp __breturn
    // render_preset_name::@return
  __breturn:
    // [320] return 
    rts
    name_1: .text "Standard Charset              "
    .byte 0
    name_2: .text "Extended Color Charset        "
    .byte 0
    name_3: .text "Standard Bitmap               "
    .byte 0
    name_4: .text "Multicolor Bitmap             "
    .byte 0
    name_5: .text "Hicolor Charset               "
    .byte 0
    name_6: .text "Hicolor Extended Color Charset"
    .byte 0
    name_7: .text "Twoplane Bitmap               "
    .byte 0
    name_8: .text "Chunky 8bpp                   "
    .byte 0
    name_9: .text "Sixs Fred                     "
    .byte 0
    name_10: .text "Sixs Fred 2                   "
    .byte 0
    name_11: .text "8bpp Pixel Cell               "
    .byte 0
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zeropage(6) str, byte* zeropage($b) at)
print_str_at: {
    .label at = $b
    .label str = 6
    // [322] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
  __b1_from_print_str_at:
    // [322] phi (byte*) print_str_at::at#2 = (const byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta.z at
    lda #>FORM_SCREEN+$28*2+$a
    sta.z at+1
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    jmp __b1
    // print_str_at::@1
  __b1:
    // [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str_at::@return
  __breturn:
    // [324] return 
    rts
    // print_str_at::@2
  __b2:
    // [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    ldy #0
    sta (at),y
    // [326] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [327] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [322] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
  __b1_from___b2:
    // [322] phi (byte*) print_str_at::at#2 = (byte*) print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
}
  // form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    // [329] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
  __b1_from_form_render_values:
    // [329] phi (byte) form_render_values::idx#2 = (byte) 0 [phi:form_render_values->form_render_values::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // form_render_values::@1
  __b1:
    // [330] if((byte) form_render_values::idx#2<(const byte) form_fields_cnt) goto form_render_values::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #form_fields_cnt
    bcc __b2
    jmp __breturn
    // form_render_values::@return
  __breturn:
    // [331] return 
    rts
    // form_render_values::@2
  __b2:
    // [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2
    // [333] call form_field_ptr 
    // [336] phi from form_render_values::@2 to form_field_ptr [phi:form_render_values::@2->form_field_ptr]
  form_field_ptr_from___b2:
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#0 [phi:form_render_values::@2->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    jmp __b3
    // form_render_values::@3
  __b3:
    // [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_render_values::idx#2)) -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuxx) 
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [335] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [329] phi from form_render_values::@3 to form_render_values::@1 [phi:form_render_values::@3->form_render_values::@1]
  __b1_from___b3:
    // [329] phi (byte) form_render_values::idx#2 = (byte) form_render_values::idx#1 [phi:form_render_values::@3->form_render_values::@1#0] -- register_copy 
    jmp __b1
}
  // form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte register(X) field_idx)
form_field_ptr: {
    .label line = $1a
    .label x = $1e
    // [337] (byte) form_field_ptr::y#0 ← *((const byte[]) form_fields_y + (byte) form_field_ptr::field_idx#2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda form_fields_y,x
    // [338] (word) form_field_ptr::line#0 ← *((const byte[$19]) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo + (byte) form_field_ptr::y#0) -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda form_line_hi,y
    sta.z line+1
    lda form_line_lo,y
    sta.z line
    // [339] (byte) form_field_ptr::x#0 ← *((const byte[]) form_fields_x + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda form_fields_x,x
    sta.z x
    jmp __breturn
    // form_field_ptr::@return
  __breturn:
    // [340] return 
    rts
}
  // apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte register(A) idx)
apply_preset: {
    .label preset = $e
    // [341] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2_from_apply_preset
    jmp __b3
    // apply_preset::@3
  __b3:
    // [342] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq __b2_from___b3
    jmp __b4
    // apply_preset::@4
  __b4:
    // [343] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq __b2_from___b4
    jmp __b5
    // apply_preset::@5
  __b5:
    // [344] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq __b2_from___b5
    jmp __b6
    // apply_preset::@6
  __b6:
    // [345] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq __b2_from___b6
    jmp __b7
    // apply_preset::@7
  __b7:
    // [346] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq __b2_from___b7
    jmp __b8
    // apply_preset::@8
  __b8:
    // [347] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq __b2_from___b8
    jmp __b9
    // apply_preset::@9
  __b9:
    // [348] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq __b2_from___b9
    jmp __b10
    // apply_preset::@10
  __b10:
    // [349] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq __b2_from___b10
    jmp __b11
    // apply_preset::@11
  __b11:
    // [350] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq __b2_from___b11
    jmp __b12
    // apply_preset::@12
  __b12:
    // [351] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1_from___b12
    // [353] phi from apply_preset apply_preset::@12 to apply_preset::@2 [phi:apply_preset/apply_preset::@12->apply_preset::@2]
  __b2_from_apply_preset:
  __b2_from___b12:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_stdchar [phi:apply_preset/apply_preset::@12->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta.z preset
    lda #>preset_stdchar
    sta.z preset+1
    jmp __b2
    // [352] phi from apply_preset::@12 to apply_preset::@1 [phi:apply_preset::@12->apply_preset::@1]
  __b1_from___b12:
    jmp __b1
    // apply_preset::@1
  __b1:
    // [353] phi from apply_preset::@1 to apply_preset::@2 [phi:apply_preset::@1->apply_preset::@2]
  __b2_from___b1:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_8bpppixelcell [phi:apply_preset::@1->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta.z preset
    lda #>preset_8bpppixelcell
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@10 to apply_preset::@2 [phi:apply_preset::@10->apply_preset::@2]
  __b2_from___b10:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_sixsfred [phi:apply_preset::@10->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta.z preset
    lda #>preset_sixsfred
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@11 to apply_preset::@2 [phi:apply_preset::@11->apply_preset::@2]
  __b2_from___b11:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_sixsfred2 [phi:apply_preset::@11->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta.z preset
    lda #>preset_sixsfred2
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@3 to apply_preset::@2 [phi:apply_preset::@3->apply_preset::@2]
  __b2_from___b3:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_ecmchar [phi:apply_preset::@3->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta.z preset
    lda #>preset_ecmchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@4 to apply_preset::@2 [phi:apply_preset::@4->apply_preset::@2]
  __b2_from___b4:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_stdbm [phi:apply_preset::@4->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta.z preset
    lda #>preset_stdbm
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@5 to apply_preset::@2 [phi:apply_preset::@5->apply_preset::@2]
  __b2_from___b5:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_mcbm [phi:apply_preset::@5->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta.z preset
    lda #>preset_mcbm
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@6 to apply_preset::@2 [phi:apply_preset::@6->apply_preset::@2]
  __b2_from___b6:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_hi_stdchar [phi:apply_preset::@6->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta.z preset
    lda #>preset_hi_stdchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@7 to apply_preset::@2 [phi:apply_preset::@7->apply_preset::@2]
  __b2_from___b7:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_hi_ecmchar [phi:apply_preset::@7->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta.z preset
    lda #>preset_hi_ecmchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@8 to apply_preset::@2 [phi:apply_preset::@8->apply_preset::@2]
  __b2_from___b8:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_twoplane [phi:apply_preset::@8->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta.z preset
    lda #>preset_twoplane
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@9 to apply_preset::@2 [phi:apply_preset::@9->apply_preset::@2]
  __b2_from___b9:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_chunky [phi:apply_preset::@9->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta.z preset
    lda #>preset_chunky
    sta.z preset+1
    jmp __b2
    // apply_preset::@2
  __b2:
    // [354] phi from apply_preset::@2 to apply_preset::@13 [phi:apply_preset::@2->apply_preset::@13]
  __b13_from___b2:
    // [354] phi (byte) apply_preset::i#2 = (byte) 0 [phi:apply_preset::@2->apply_preset::@13#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b13
  // Copy preset values into the fields
    // apply_preset::@13
  __b13:
    // [355] if((byte) apply_preset::i#2!=(const byte) form_fields_cnt) goto apply_preset::@14 -- vbuyy_neq_vbuc1_then_la1 
    cpy #form_fields_cnt
    bne __b14
    jmp __breturn
    // apply_preset::@return
  __breturn:
    // [356] return 
    rts
    // apply_preset::@14
  __b14:
    // [357] *((const byte[]) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) -- pbuc1_derefidx_vbuyy=pbuz1_derefidx_vbuyy 
    lda (preset),y
    sta form_fields_val,y
    // [358] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [354] phi from apply_preset::@14 to apply_preset::@13 [phi:apply_preset::@14->apply_preset::@13]
  __b13_from___b14:
    // [354] phi (byte) apply_preset::i#2 = (byte) apply_preset::i#1 [phi:apply_preset::@14->apply_preset::@13#0] -- register_copy 
    jmp __b13
}
  // form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    // [359] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28 -- vbuxx=vbuz1 
    ldx.z form_field_idx
    // [360] call form_field_ptr 
    // [336] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
  form_field_ptr_from_form_control:
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    jmp __b18
    // form_control::@18
  __b18:
    // [361] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21 -- vbsz1=_dec_vbsz1 
    dec.z form_cursor_count
    // [362] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@21 -- vbsz1_ge_0_then_la1 
    lda.z form_cursor_count
    cmp #0
    bpl __b21_from___b18
    // [364] phi from form_control::@18 to form_control::@1 [phi:form_control::@18->form_control::@1]
  __b1_from___b18:
    // [364] phi (signed byte) form_cursor_count#15 = (const signed byte) FORM_CURSOR_BLINK [phi:form_control::@18->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta.z form_cursor_count
    jmp __b1
    // [363] phi from form_control::@18 to form_control::@21 [phi:form_control::@18->form_control::@21]
  __b21_from___b18:
    jmp __b21
    // form_control::@21
  __b21:
    // [364] phi from form_control::@21 to form_control::@1 [phi:form_control::@21->form_control::@1]
  __b1_from___b21:
    // [364] phi (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#5 [phi:form_control::@21->form_control::@1#0] -- register_copy 
    jmp __b1
    // form_control::@1
  __b1:
    // [365] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 -- vbsz1_lt_vbsc1_then_la1 
    lda.z form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bmi __b2
    jmp __b7
    // form_control::@7
  __b7:
    // [366] (byte~) form_control::$13 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f -- vbuaa=pbuz1_derefidx_vbuz2_band_vbuc1 
    lda #$7f
    ldy.z form_field_ptr.x
    and (form_field_ptr.line),y
    // [367] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$13 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [368] phi from form_control::@2 form_control::@7 to form_control::@3 [phi:form_control::@2/form_control::@7->form_control::@3]
  __b3_from___b2:
  __b3_from___b7:
    jmp __b3
    // form_control::@3
  __b3:
    // [369] call keyboard_event_scan 
    // [157] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
  keyboard_event_scan_from___b3:
    // [157] phi (byte) keyboard_events_size#99 = (byte) keyboard_events_size#47 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [370] phi from form_control::@3 to form_control::@19 [phi:form_control::@3->form_control::@19]
  __b19_from___b3:
    jmp __b19
    // form_control::@19
  __b19:
    // [371] call keyboard_event_get 
    jsr keyboard_event_get
    // [372] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
    jmp __b20
    // form_control::@20
  __b20:
    // [373] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4
    // [374] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_DOWN) goto form_control::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_DOWN
    bne __b4
    jmp __b8
    // form_control::@8
  __b8:
    // [375] (byte~) form_control::$15 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f -- vbuaa=pbuz1_derefidx_vbuz2_band_vbuc1 
    lda #$7f
    ldy.z form_field_ptr.x
    and (form_field_ptr.line),y
    // [376] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$15 -- pbuz1_derefidx_vbuz2=vbuaa 
    // Unblink the cursor
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [377] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // [378] if((byte~) form_control::$16==(byte) 0) goto form_control::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b13
    jmp __b9
    // form_control::@9
  __b9:
    // [379] (byte) form_field_idx#6 ← -- (byte) form_field_idx#28 -- vbuz1=_dec_vbuz1 
    dec.z form_field_idx
    // [380] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z form_field_idx
    bne __b22_from___b9
    // [382] phi from form_control::@9 to form_control::@14 [phi:form_control::@9->form_control::@14]
  __b14_from___b9:
    // [382] phi (byte) form_field_idx#31 = (const byte) form_fields_cnt-(byte) 1 [phi:form_control::@9->form_control::@14#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta.z form_field_idx
    jmp __b14
    // [381] phi from form_control::@9 to form_control::@22 [phi:form_control::@9->form_control::@22]
  __b22_from___b9:
    jmp __b22
    // form_control::@22
  __b22:
    // [382] phi from form_control::@22 form_control::@23 to form_control::@14 [phi:form_control::@22/form_control::@23->form_control::@14]
  __b14_from___b22:
  __b14_from___b23:
    // [382] phi (byte) form_field_idx#31 = (byte) form_field_idx#6 [phi:form_control::@22/form_control::@23->form_control::@14#0] -- register_copy 
    jmp __b14
    // form_control::@14
  __b14:
    // [383] phi from form_control::@14 to form_control::@return [phi:form_control::@14->form_control::@return]
  __breturn_from___b14:
    // [383] phi (byte) form_field_idx#18 = (byte) form_field_idx#31 [phi:form_control::@14->form_control::@return#0] -- register_copy 
    // [383] phi (signed byte) form_cursor_count#16 = (const signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:form_control::@14->form_control::@return#1] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // [383] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@14->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // form_control::@return
  __breturn:
    // [384] return 
    rts
    // form_control::@13
  __b13:
    // [385] (byte) form_field_idx#5 ← ++ (byte) form_field_idx#28 -- vbuz1=_inc_vbuz1 
    inc.z form_field_idx
    // [386] if((byte) form_field_idx#5!=(const byte) form_fields_cnt) goto form_control::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z form_field_idx
    bne __b23_from___b13
    // [382] phi from form_control::@13 to form_control::@14 [phi:form_control::@13->form_control::@14]
  __b14_from___b13:
    // [382] phi (byte) form_field_idx#31 = (byte) 0 [phi:form_control::@13->form_control::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    jmp __b14
    // [387] phi from form_control::@13 to form_control::@23 [phi:form_control::@13->form_control::@23]
  __b23_from___b13:
    jmp __b23
    // form_control::@23
  __b23:
    jmp __b14_from___b23
    // form_control::@4
  __b4:
    // [388] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_RIGHT) goto form_control::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_RIGHT
    bne __b5
    jmp __b10
    // form_control::@10
  __b10:
    // [389] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // [390] if((byte~) form_control::$24==(byte) 0) goto form_control::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b15
    jmp __b11
    // form_control::@11
  __b11:
    // [391] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← -- *((const byte[]) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    dec form_fields_val,x
    // [392] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy.z form_field_idx
    cmp form_fields_val,y
    bne __b16
    jmp __b12
    // form_control::@12
  __b12:
    // [393] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    ldy.z form_field_idx
    lda form_fields_max,y
    sta form_fields_val,y
    jmp __b16
    // form_control::@16
  __b16:
    // [394] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_field_idx#28)) -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuz3) 
    // Render field value
    ldx.z form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [383] phi from form_control::@16 form_control::@6 to form_control::@return [phi:form_control::@16/form_control::@6->form_control::@return]
  __breturn_from___b16:
  __breturn_from___b6:
    // [383] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@16/form_control::@6->form_control::@return#0] -- register_copy 
    // [383] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@16/form_control::@6->form_control::@return#1] -- register_copy 
    // [383] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@16/form_control::@6->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // form_control::@15
  __b15:
    // [395] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← ++ *((const byte[]) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    inc form_fields_val,x
    // [396] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy.z form_field_idx
    lda form_fields_max,y
    cmp form_fields_val,y
    bcs __b16
    jmp __b17
    // form_control::@17
  __b17:
    // [397] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    ldy.z form_field_idx
    sta form_fields_val,y
    jmp __b16
    // form_control::@5
  __b5:
    // [398] if((byte) form_control::key_event#0!=(const byte) KEY_SPACE) goto form_control::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne __b6_from___b5
    // [383] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
  __breturn_from___b5:
    // [383] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@5->form_control::@return#0] -- register_copy 
    // [383] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@5->form_control::@return#1] -- register_copy 
    // [383] phi (byte) form_control::return#2 = (byte) $ff [phi:form_control::@5->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #$ff
    jmp __breturn
    // [399] phi from form_control::@5 to form_control::@6 [phi:form_control::@5->form_control::@6]
  __b6_from___b5:
    jmp __b6
    // form_control::@6
  __b6:
    jmp __breturn_from___b6
    // form_control::@2
  __b2:
    // [400] (byte~) form_control::$14 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) | (byte) $80 -- vbuaa=pbuz1_derefidx_vbuz2_bor_vbuc1 
    lda #$80
    ldy.z form_field_ptr.x
    ora (form_field_ptr.line),y
    // [401] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$14 -- pbuz1_derefidx_vbuz2=vbuaa 
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    jmp __b3_from___b2
}
  // form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label line = 6
    // [403] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
  __b1_from_form_set_screen:
    // [403] phi (byte) form_set_screen::y#2 = (byte) 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [403] phi (byte*) form_set_screen::line#2 = (const byte*) FORM_SCREEN [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z line
    lda #>FORM_SCREEN
    sta.z line+1
    jmp __b1
    // [403] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
  __b1_from___b1:
    // [403] phi (byte) form_set_screen::y#2 = (byte) form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
    // [403] phi (byte*) form_set_screen::line#2 = (byte*) form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    jmp __b1
    // form_set_screen::@1
  __b1:
    // [404] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2 -- vbuaa=_lo_pbuz1 
    lda.z line
    // [405] *((const byte[$19]) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_lo,x
    // [406] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2 -- vbuaa=_hi_pbuz1 
    lda.z line+1
    // [407] *((const byte[$19]) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_hi,x
    // [408] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // [409] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [410] if((byte) form_set_screen::y#1!=(byte) $19) goto form_set_screen::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne __b1_from___b1
    jmp __breturn
    // form_set_screen::@return
  __breturn:
    // [411] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zeropage(6) str)
print_str_lines: {
    .label str = 6
    // [413] (byte*~) print_char_cursor#73 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda.z print_set_screen.screen
    sta.z print_char_cursor
    lda.z print_set_screen.screen+1
    sta.z print_char_cursor+1
    // [414] phi from print_str_lines print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1]
  __b1_from_print_str_lines:
  __b1_from___b6:
    // [414] phi (byte*) print_line_cursor#2 = (byte*) print_set_screen::screen#2 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [414] phi (byte*) print_char_cursor#22 = (byte*~) print_char_cursor#73 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [414] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    jmp __b1
    // print_str_lines::@1
  __b1:
    // [415] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2_from___b1
    jmp __breturn
    // print_str_lines::@return
  __breturn:
    // [416] return 
    rts
    // [417] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [417] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#22 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [417] phi (byte*) print_str_lines::str#4 = (byte*) print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    jmp __b2
    // print_str_lines::@2
  __b2:
    // [418] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [419] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [420] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b3_from___b2
    jmp __b4
    // print_str_lines::@4
  __b4:
    // [421] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // [422] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [423] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
  __b3_from___b2:
  __b3_from___b4:
    // [423] phi (byte*) print_char_cursor#38 = (byte*) print_char_cursor#20 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    jmp __b3
    // print_str_lines::@3
  __b3:
    // [424] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2_from___b3
    // [425] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
  __b5_from___b3:
    jmp __b5
    // print_str_lines::@5
  __b5:
    // [426] call print_ln 
    // [428] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
  print_ln_from___b5:
    jsr print_ln
    jmp __b6
    // print_str_lines::@6
  __b6:
    // [427] (byte*~) print_char_cursor#74 ← (byte*) print_line_cursor#22 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    jmp __b1_from___b6
}
  // print_ln
// Print a newline
print_ln: {
    // [429] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
  __b1_from_print_ln:
  __b1_from___b1:
    // [429] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#2 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    jmp __b1
    // print_ln::@1
  __b1:
    // [430] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // [431] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1_from___b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1_from___b1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [432] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // [433] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 -- pvoz1=pvoz2 
    lda.z print_set_screen.screen
    sta.z memset.str
    lda.z print_set_screen.screen+1
    sta.z memset.str+1
    // [434] call memset 
    // [436] phi from print_cls to memset [phi:print_cls->memset]
  memset_from_print_cls:
    jsr memset
    jmp __breturn
    // print_cls::@return
  __breturn:
    // [435] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zeropage($b) str)
memset: {
    .const c = ' '
    .const num = $3e8
    .label end = $1c
    .label dst = $b
    .label str = $b
    jmp __b1
    // memset::@1
  __b1:
    // [437] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z str
    clc
    adc #<num
    sta.z end
    lda.z str+1
    adc #>num
    sta.z end+1
    // [438] (byte*~) memset::dst#4 ← (byte*)(void*) memset::str#0
    // [439] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
  __b2_from___b1:
  __b2_from___b3:
    // [439] phi (byte*) memset::dst#2 = (byte*~) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    jmp __b2
    // memset::@2
  __b2:
    // [440] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    jmp __breturn
    // memset::@return
  __breturn:
    // [441] return 
    rts
    // memset::@3
  __b3:
    // [442] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // [443] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2_from___b3
}
  // print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zeropage($e) screen)
print_set_screen: {
    .label screen = $e
    jmp __breturn
    // print_set_screen::@return
  __breturn:
    // [445] return 
    rts
}
  // gfx_init
// Initialize the different graphics in the memory
gfx_init: {
    // [447] call gfx_init_screen0 
    // [843] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
  gfx_init_screen0_from_gfx_init:
    jsr gfx_init_screen0
    // [448] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
  __b1_from_gfx_init:
    jmp __b1
    // gfx_init::@1
  __b1:
    // [449] call gfx_init_screen1 
    // [831] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
  gfx_init_screen1_from___b1:
    jsr gfx_init_screen1
    // [450] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
  __b2_from___b1:
    jmp __b2
    // gfx_init::@2
  __b2:
    // [451] call gfx_init_screen2 
    // [816] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
  gfx_init_screen2_from___b2:
    jsr gfx_init_screen2
    // [452] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
  __b3_from___b2:
    jmp __b3
    // gfx_init::@3
  __b3:
    // [453] call gfx_init_screen3 
    // [802] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
  gfx_init_screen3_from___b3:
    jsr gfx_init_screen3
    // [454] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init::@4
  __b4:
    // [455] call gfx_init_screen4 
    // [792] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
  gfx_init_screen4_from___b4:
    jsr gfx_init_screen4
    // [456] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
  __b5_from___b4:
    jmp __b5
    // gfx_init::@5
  __b5:
    // [457] call gfx_init_charset 
    jsr gfx_init_charset
    // [458] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init::@6
  __b6:
    // [459] call gfx_init_vic_bitmap 
    // [602] phi from gfx_init::@6 to gfx_init_vic_bitmap [phi:gfx_init::@6->gfx_init_vic_bitmap]
  gfx_init_vic_bitmap_from___b6:
    jsr gfx_init_vic_bitmap
    // [460] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init::@7
  __b7:
    // [461] call gfx_init_plane_8bppchunky 
    // [582] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
  gfx_init_plane_8bppchunky_from___b7:
    jsr gfx_init_plane_8bppchunky
    // [462] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
  __b8_from___b7:
    jmp __b8
    // gfx_init::@8
  __b8:
    // [463] call gfx_init_plane_charset8 
    // [557] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
  gfx_init_plane_charset8_from___b8:
    jsr gfx_init_plane_charset8
    // [464] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
  __b9_from___b8:
    jmp __b9
    // gfx_init::@9
  __b9:
    // [465] call gfx_init_plane_horisontal 
    // [539] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
  gfx_init_plane_horisontal_from___b9:
    jsr gfx_init_plane_horisontal
    // [466] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
  __b10_from___b9:
    jmp __b10
    // gfx_init::@10
  __b10:
    // [467] call gfx_init_plane_vertical 
    // [526] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
  gfx_init_plane_vertical_from___b10:
    jsr gfx_init_plane_vertical
    // [468] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
  __b11_from___b10:
    jmp __b11
    // gfx_init::@11
  __b11:
    // [469] call gfx_init_plane_horisontal2 
    // [511] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
  gfx_init_plane_horisontal2_from___b11:
    jsr gfx_init_plane_horisontal2
    // [470] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
  __b12_from___b11:
    jmp __b12
    // gfx_init::@12
  __b12:
    // [471] call gfx_init_plane_vertical2 
    // [508] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
  gfx_init_plane_vertical2_from___b12:
    jsr gfx_init_plane_vertical2
    // [472] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
  __b13_from___b12:
    jmp __b13
    // gfx_init::@13
  __b13:
    // [473] call gfx_init_plane_blank 
    // [505] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
  gfx_init_plane_blank_from___b13:
    jsr gfx_init_plane_blank
    // [474] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
  __b14_from___b13:
    jmp __b14
    // gfx_init::@14
  __b14:
    // [475] call gfx_init_plane_full 
    // [477] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
  gfx_init_plane_full_from___b14:
    jsr gfx_init_plane_full
    jmp __breturn
    // gfx_init::@return
  __breturn:
    // [476] return 
    rts
}
  // gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
    // [478] call gfx_init_plane_fill 
    // [480] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_full:
    // [480] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z gfx_init_plane_fill.fill
    // [480] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_FULL [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_full::@return
  __breturn:
    // [479] return 
    rts
}
  // gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zeropage(2) plane_addr, byte zeropage(8) fill)
gfx_init_plane_fill: {
    .label __0 = $12
    .label __1 = $16
    .label __4 = $e
    .label __5 = $e
    .label gfxb = $e
    .label by = $10
    .label plane_addr = 2
    .label fill = 8
    // [481] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 -- vduz1=vduz2_rol_2 
    lda.z plane_addr
    sta.z __0
    lda.z plane_addr+1
    sta.z __0+1
    lda.z plane_addr+2
    sta.z __0+2
    lda.z plane_addr+3
    sta.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    // [482] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda.z __0+2
    sta.z __1
    lda.z __0+3
    sta.z __1+1
    // [483] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 -- vbuaa=_lo_vwuz1 
    lda.z __1
    // [484] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
    // [485] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b5
    // gfx_init_plane_fill::@5
  __b5:
    // [486] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda.z plane_addr
    sta.z __4
    lda.z plane_addr+1
    sta.z __4+1
    // [487] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __5
    and #<$3fff
    sta.z __5
    lda.z __5+1
    and #>$3fff
    sta.z __5+1
    // [488] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz1 
    clc
    lda.z gfxb
    adc #<$4000
    sta.z gfxb
    lda.z gfxb+1
    adc #>$4000
    sta.z gfxb+1
    // [489] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0
    // [490] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
  __b1_from___b5:
    // [490] phi (byte) gfx_init_plane_fill::by#4 = (byte) 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [490] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*~) gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // [490] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
  __b1_from___b3:
    // [490] phi (byte) gfx_init_plane_fill::by#4 = (byte) gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
    // [490] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_fill::@1
  __b1:
    // [491] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
  __b2_from___b1:
    // [491] phi (byte) gfx_init_plane_fill::bx#2 = (byte) 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [491] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // [491] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
  __b2_from___b2:
    // [491] phi (byte) gfx_init_plane_fill::bx#2 = (byte) gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
    // [491] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_fill::@2
  __b2:
    // [492] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda.z fill
    ldy #0
    sta (gfxb),y
    // [493] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [494] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [495] if((byte) gfx_init_plane_fill::bx#1!=(byte) $28) goto gfx_init_plane_fill::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_fill::@3
  __b3:
    // [496] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [497] if((byte) gfx_init_plane_fill::by#1!=(byte) $c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [498] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_fill::@4
  __b4:
    // [499] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_fill::@return
  __breturn:
    // [500] return 
    rts
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    // [502] *((const byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuaa 
    sta cpuBank
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    jmp __breturn
    // dtvSetCpuBankSegment1::@return
  __breturn:
    // [504] return 
    rts
}
  // gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
    // [506] call gfx_init_plane_fill 
    // [480] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_blank:
    // [480] phi (byte) gfx_init_plane_fill::fill#6 = (byte) 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gfx_init_plane_fill.fill
    // [480] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_BLANK [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_blank::@return
  __breturn:
    // [507] return 
    rts
}
  // gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
    // [509] call gfx_init_plane_fill 
    // [480] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
  gfx_init_plane_fill_from_gfx_init_plane_vertical2:
    // [480] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta.z gfx_init_plane_fill.fill
    // [480] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_VERTICAL2 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    jmp __breturn
    // gfx_init_plane_vertical2::@return
  __breturn:
    // [510] return 
    rts
}
  // gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label gfxa = 6
    .label ay = 9
    // [512] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [513] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
  __b1_from_gfx_init_plane_horisontal2:
    // [513] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [513] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [513] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
  __b1_from___b3:
    // [513] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
    // [513] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal2::@1
  __b1:
    // [514] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
  __b2_from___b1:
    // [514] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [514] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // [514] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
  __b2_from___b2:
    // [514] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
    // [514] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal2::@2
  __b2:
    // [515] (byte~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // [516] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$7 & (byte) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // [517] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // [518] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [519] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [520] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte) $28) goto gfx_init_plane_horisontal2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_horisontal2::@3
  __b3:
    // [521] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [522] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b3
    // [523] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_horisontal2::@4
  __b4:
    // [524] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal2::@return
  __breturn:
    // [525] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = 6
    .label by = $11
    // [527] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [528] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
  __b1_from_gfx_init_plane_vertical:
    // [528] phi (byte) gfx_init_plane_vertical::by#4 = (byte) 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [528] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*)(word) $4000+(const dword) PLANE_VERTICAL&(word) $3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb+1
    jmp __b1
    // [528] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
  __b1_from___b3:
    // [528] phi (byte) gfx_init_plane_vertical::by#4 = (byte) gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
    // [528] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_vertical::@1
  __b1:
    // [529] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
  __b2_from___b1:
    // [529] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [529] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // [529] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
  __b2_from___b2:
    // [529] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
    // [529] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_vertical::@2
  __b2:
    // [530] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // [531] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [532] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [533] if((byte) gfx_init_plane_vertical::bx#1!=(byte) $28) goto gfx_init_plane_vertical::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_plane_vertical::@3
  __b3:
    // [534] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [535] if((byte) gfx_init_plane_vertical::by#1!=(byte) $c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1_from___b3
    // [536] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
  __b4_from___b3:
    jmp __b4
    // gfx_init_plane_vertical::@4
  __b4:
    // [537] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_vertical::@return
  __breturn:
    // [538] return 
    rts
}
  // gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label gfxa = 6
    .label ay = $a
    // [540] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [541] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
  __b1_from_gfx_init_plane_horisontal:
    // [541] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [541] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    jmp __b1
    // [541] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
  __b1_from___b6:
    // [541] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
    // [541] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_plane_horisontal::@1
  __b1:
    // [542] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
  __b2_from___b1:
    // [542] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [542] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // [542] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
  __b2_from___b4:
    // [542] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
    // [542] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_plane_horisontal::@2
  __b2:
    // [543] (byte~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and.z ay
    // [544] if((byte~) gfx_init_plane_horisontal::$7==(byte) 0) goto gfx_init_plane_horisontal::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    jmp __b5
    // gfx_init_plane_horisontal::@5
  __b5:
    // [545] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // [546] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [547] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [547] phi (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    jmp __b4
    // gfx_init_plane_horisontal::@4
  __b4:
    // [548] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [549] if((byte) gfx_init_plane_horisontal::ax#1!=(byte) $28) goto gfx_init_plane_horisontal::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b4
    jmp __b6
    // gfx_init_plane_horisontal::@6
  __b6:
    // [550] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [551] if((byte) gfx_init_plane_horisontal::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1_from___b6
    // [552] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
  __b7_from___b6:
    jmp __b7
    // gfx_init_plane_horisontal::@7
  __b7:
    // [553] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b7:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_horisontal::@return
  __breturn:
    // [554] return 
    rts
    // gfx_init_plane_horisontal::@3
  __b3:
    // [555] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (gfxa),y
    // [556] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b4_from___b3
}
  // gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label bits = 8
    .label chargen = 6
    .label gfxa = $b
    .label col = $10
    .label cr = $d
    .label ch = $a
    // [558] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    jmp __b9
    // gfx_init_plane_charset8::@9
  __b9:
    // [559] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [560] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
  __b1_from___b9:
    // [560] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [560] phi (byte) gfx_init_plane_charset8::col#6 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z col
    // [560] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [560] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const byte*) CHARGEN [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [560] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
  __b1_from___b7:
    // [560] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
    // [560] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
    // [560] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
    // [560] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    jmp __b1
    // gfx_init_plane_charset8::@1
  __b1:
    // [561] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
  __b2_from___b1:
    // [561] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [561] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // [561] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
  __b2_from___b6:
    // [561] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
    // [561] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    jmp __b2
    // gfx_init_plane_charset8::@2
  __b2:
    // [562] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [563] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [564] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
  __b3_from___b2:
    // [564] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [564] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [564] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [564] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // [564] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
  __b3_from___b4:
    // [564] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
    // [564] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [564] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [564] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    jmp __b3
    // gfx_init_plane_charset8::@3
  __b3:
    // [565] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z bits
    // [566] if((byte~) gfx_init_plane_charset8::$7==(byte) 0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b4_from___b3
    jmp __b5
    // gfx_init_plane_charset8::@5
  __b5:
    // [567] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda.z col
    // [568] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
  __b4_from___b5:
    // [568] phi (byte) gfx_init_plane_charset8::c#2 = (byte~) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp __b4
    // [568] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  __b4_from___b3:
    // [568] phi (byte) gfx_init_plane_charset8::c#2 = (byte) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
    jmp __b4
    // gfx_init_plane_charset8::@4
  __b4:
    // [569] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
    // [570] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [571] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // [572] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // [573] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
    // [574] if((byte) gfx_init_plane_charset8::cp#1!=(byte) 8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3_from___b4
    jmp __b6
    // gfx_init_plane_charset8::@6
  __b6:
    // [575] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [576] if((byte) gfx_init_plane_charset8::cr#1!=(byte) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b2_from___b6
    jmp __b7
    // gfx_init_plane_charset8::@7
  __b7:
    // [577] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [578] if((byte) gfx_init_plane_charset8::ch#1!=(byte) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b1_from___b7
    jmp __b8
    // gfx_init_plane_charset8::@8
  __b8:
    // [579] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // [580] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b8:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_charset8::@return
  __breturn:
    // [581] return 
    rts
}
  // gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label __8 = $18
    .label gfxb = $e
    .label x = $b
    .label y = $d
    // [583] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
    // [584] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
  __b1_from_gfx_init_plane_8bppchunky:
    // [584] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++(byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuxx=vbuc1 
    ldx #PLANE_8BPP_CHUNKY/$4000+1
    // [584] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [584] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b1
    // [584] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
  __b1_from___b5:
    // [584] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
    // [584] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
    // [584] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_plane_8bppchunky::@1
  __b1:
    // [585] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
  __b2_from___b1:
    // [585] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [585] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    lda #>0
    sta.z x+1
    // [585] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // [585] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
  __b2_from___b3:
    // [585] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [585] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
    // [585] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_plane_8bppchunky::@2
  __b2:
    // [586] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b3_from___b2
    lda.z gfxb
    cmp #<$8000
    bne __b3_from___b2
    jmp __b4
    // gfx_init_plane_8bppchunky::@4
  __b4:
    // [587] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
    // [588] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b4:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    jmp __b7
    // gfx_init_plane_8bppchunky::@7
  __b7:
    // [589] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
    // [590] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
  __b3_from___b7:
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    jmp __b3
    // [590] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
  __b3_from___b2:
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    jmp __b3
    // gfx_init_plane_8bppchunky::@3
  __b3:
    // [591] (word~) gfx_init_plane_8bppchunky::$8 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __8
    lda #0
    adc.z x+1
    sta.z __8+1
    // [592] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$8 -- vbuaa=_byte_vwuz1 
    lda.z __8
    // [593] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // [594] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // [595] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [596] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b2_from___b3
    lda.z x
    cmp #<$140
    bne __b2_from___b3
    jmp __b5
    // gfx_init_plane_8bppchunky::@5
  __b5:
    // [597] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [598] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte) $c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b1_from___b5
    // [599] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
  __b6_from___b5:
    jmp __b6
    // gfx_init_plane_8bppchunky::@6
  __b6:
    // [600] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
  dtvSetCpuBankSegment1_from___b6:
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    jmp __breturn
    // gfx_init_plane_8bppchunky::@return
  __breturn:
    // [601] return 
    rts
}
  // gfx_init_vic_bitmap
// Initialize VIC bitmap
gfx_init_vic_bitmap: {
    .const lines_cnt = 9
    .label l = 8
    // [603] call bitmap_init 
    // [755] phi from gfx_init_vic_bitmap to bitmap_init [phi:gfx_init_vic_bitmap->bitmap_init]
  bitmap_init_from_gfx_init_vic_bitmap:
    jsr bitmap_init
    // [604] phi from gfx_init_vic_bitmap to gfx_init_vic_bitmap::@3 [phi:gfx_init_vic_bitmap->gfx_init_vic_bitmap::@3]
  __b3_from_gfx_init_vic_bitmap:
    jmp __b3
    // gfx_init_vic_bitmap::@3
  __b3:
    // [605] call bitmap_clear 
    jsr bitmap_clear
    // [606] phi from gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1]
  __b1_from___b3:
    // [606] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) 0 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    jmp __b1
    // gfx_init_vic_bitmap::@1
  __b1:
    // [607] if((byte) gfx_init_vic_bitmap::l#2<(const byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    jmp __breturn
    // gfx_init_vic_bitmap::@return
  __breturn:
    // [608] return 
    rts
    // gfx_init_vic_bitmap::@2
  __b2:
    // [609] (byte) bitmap_line::x0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [610] (byte) bitmap_line::x1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldy.z l
    ldx lines_x+1,y
    // [611] (byte) bitmap_line::y0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y,y
    sta.z bitmap_line.y0
    // [612] (byte) bitmap_line::y1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_y+1,y
    sta.z bitmap_line.y1
    // [613] call bitmap_line 
    jsr bitmap_line
    jmp __b4
    // gfx_init_vic_bitmap::@4
  __b4:
    // [614] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [606] phi from gfx_init_vic_bitmap::@4 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1]
  __b1_from___b4:
    // [606] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1#0] -- register_copy 
    jmp __b1
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zeropage(9) x0, byte register(X) x1, byte zeropage($d) y0, byte zeropage($11) y1)
bitmap_line: {
    .label xd = $1f
    .label x0 = 9
    .label y0 = $d
    .label y1 = $11
    // [615] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuxx_then_la1 
    txa
    cmp.z x0
    beq !+
    bcs __b1
  !:
    jmp __b2
    // bitmap_line::@2
  __b2:
    // [616] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z x0
    sta.z xd
    // [617] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y0
    cmp.z y1
    bcc __b7
    jmp __b3
    // bitmap_line::@3
  __b3:
    // [618] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda.z y0
    sec
    sbc.z y1
    tay
    // [619] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b8
    jmp __b4
    // bitmap_line::@4
  __b4:
    // [620] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y
    // [621] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
    // [622] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y1
    // [623] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [624] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
    // [625] call bitmap_line_ydxi 
    // [699] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b4:
    // [699] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@return
  __breturn:
    // [626] return 
    rts
    // bitmap_line::@8
  __b8:
    // [627] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_xdyi.x
    // [628] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_xdyi.y
    // [629] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
    // [630] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
    // [631] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [632] call bitmap_line_xdyi 
    // [677] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b8:
    // [677] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
    // bitmap_line::@7
  __b7:
    // [633] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda.z y1
    sec
    sbc.z y0
    tay
    // [634] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b9
    jmp __b10
    // bitmap_line::@10
  __b10:
    // [635] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxd.y
    // [636] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [637] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y1
    // [638] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [639] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
    // [640] call bitmap_line_ydxd 
    // [729] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b10:
    // [729] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@9
  __b9:
    // [641] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_xdyd.x
    // [642] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_xdyd.y
    // [643] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
    // [644] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
    // [645] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [646] call bitmap_line_xdyd 
    // [714] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b9:
    // [714] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@1
  __b1:
    // [647] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuxx_minus_vbuz2 
    txa
    sec
    sbc.z x0
    sta.z xd
    // [648] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y0
    cmp.z y1
    bcc __b11
    jmp __b5
    // bitmap_line::@5
  __b5:
    // [649] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda.z y0
    sec
    sbc.z y1
    tay
    // [650] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b12
    jmp __b6
    // bitmap_line::@6
  __b6:
    // [651] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y
    // [652] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0
    // [653] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
    // [654] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [655] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
    // [656] call bitmap_line_ydxd 
    // [729] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
  bitmap_line_ydxd_from___b6:
    // [729] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    jmp __breturn
    // bitmap_line::@12
  __b12:
    // [657] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x
    // [658] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
    // [659] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_xdyd.x1
    // [660] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
    // [661] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [662] call bitmap_line_xdyd 
    // [714] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
  bitmap_line_xdyd_from___b12:
    // [714] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    jmp __breturn
    // bitmap_line::@11
  __b11:
    // [663] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda.z y1
    sec
    sbc.z y0
    tay
    // [664] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b13
    jmp __b14
    // bitmap_line::@14
  __b14:
    // [665] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y
    // [666] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [667] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
    // [668] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [669] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
    // [670] call bitmap_line_ydxi 
    // [699] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
  bitmap_line_ydxi_from___b14:
    // [699] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    jmp __breturn
    // bitmap_line::@13
  __b13:
    // [671] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x
    // [672] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
    // [673] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_xdyi.x1
    // [674] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
    // [675] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [676] call bitmap_line_xdyi 
    // [677] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
  bitmap_line_xdyi_from___b13:
    // [677] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    jmp __breturn
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte zeropage($a) x, byte zeropage($d) y, byte zeropage(9) x1, byte zeropage($1f) xd, byte zeropage($10) yd)
bitmap_line_xdyi: {
    .label x = $a
    .label y = $d
    .label x1 = 9
    .label xd = $1f
    .label yd = $10
    .label e = $11
    // [678] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [679] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
  __b1_from_bitmap_line_xdyi:
  __b1_from___b2:
    // [679] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [679] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [679] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyi::@1
  __b1:
    // [680] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuxx=vbuz1 
    ldx.z x
    // [681] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [682] call bitmap_plot 
    // [692] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyi::@4
  __b4:
    // [683] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [684] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [685] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyi::@3
  __b3:
    // [686] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [687] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [688] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [688] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [688] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyi::@2
  __b2:
    // [689] (byte~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x1
    inx
    // [690] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z x
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyi::@return
  __breturn:
    // [691] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte register(X) x, byte register(Y) y)
bitmap_plot: {
    .label plotter_x = $1a
    .label plotter_y = $1c
    .label plotter = $1a
    // [693] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_xhi,x
    sta.z plotter_x+1
    lda bitmap_plot_xlo,x
    sta.z plotter_x
    // [694] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_yhi,y
    sta.z plotter_y+1
    lda bitmap_plot_ylo,y
    sta.z plotter_y
    // [695] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // [696] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_plot::x#4) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    // [697] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (plotter),y
    jmp __breturn
    // bitmap_plot::@return
  __breturn:
    // [698] return 
    rts
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zeropage($a) y, byte register(X) x, byte zeropage($11) y1, byte zeropage(9) yd, byte zeropage($1f) xd)
bitmap_line_ydxi: {
    .label y = $a
    .label y1 = $11
    .label yd = 9
    .label xd = $1f
    .label e = $d
    // [700] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [701] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
  __b1_from_bitmap_line_ydxi:
  __b1_from___b2:
    // [701] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [701] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [701] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxi::@1
  __b1:
    // [702] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
    // [703] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [704] call bitmap_plot 
    // [692] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxi::@4
  __b4:
    // [705] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [706] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [707] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxi::@3
  __b3:
    // [708] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuxx=_inc_vbuxx 
    inx
    // [709] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [710] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [710] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [710] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxi::@2
  __b2:
    // [711] (byte~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z y1
    clc
    adc #1
    // [712] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z y
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxi::@return
  __breturn:
    // [713] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte zeropage($10) x, byte zeropage($d) y, byte zeropage(9) x1, byte zeropage($1f) xd, byte zeropage($a) yd)
bitmap_line_xdyd: {
    .label x = $10
    .label y = $d
    .label x1 = 9
    .label xd = $1f
    .label yd = $a
    .label e = $11
    // [715] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [716] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
  __b1_from_bitmap_line_xdyd:
  __b1_from___b2:
    // [716] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [716] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [716] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_xdyd::@1
  __b1:
    // [717] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuxx=vbuz1 
    ldx.z x
    // [718] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [719] call bitmap_plot 
    // [692] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_xdyd::@4
  __b4:
    // [720] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // [721] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // [722] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_xdyd::@3
  __b3:
    // [723] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec.z y
    // [724] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [725] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [725] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [725] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_xdyd::@2
  __b2:
    // [726] (byte~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x1
    inx
    // [727] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z x
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_xdyd::@return
  __breturn:
    // [728] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zeropage($10) y, byte register(X) x, byte zeropage($d) y1, byte zeropage($a) yd, byte zeropage($1f) xd)
bitmap_line_ydxd: {
    .label y = $10
    .label y1 = $d
    .label yd = $a
    .label xd = $1f
    .label e = $11
    // [730] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [731] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
  __b1_from_bitmap_line_ydxd:
  __b1_from___b2:
    // [731] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [731] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [731] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    jmp __b1
    // bitmap_line_ydxd::@1
  __b1:
    // [732] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
    // [733] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuyy=vbuz1 
    ldy.z y
    // [734] call bitmap_plot 
    // [692] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
  bitmap_plot_from___b1:
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    jmp __b4
    // bitmap_line_ydxd::@4
  __b4:
    // [735] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [736] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // [737] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2_from___b4
    jmp __b3
    // bitmap_line_ydxd::@3
  __b3:
    // [738] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuxx=_dec_vbuxx 
    dex
    // [739] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [740] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
  __b2_from___b3:
  __b2_from___b4:
    // [740] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [740] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    jmp __b2
    // bitmap_line_ydxd::@2
  __b2:
    // [741] (byte~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z y1
    clc
    adc #1
    // [742] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z y
    bne __b1_from___b2
    jmp __breturn
    // bitmap_line_ydxd::@return
  __breturn:
    // [743] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $e
    .label y = $1f
    // [744] (word) bitmap_clear::bitmap#0 ← *((const byte[$100]) bitmap_plot_xhi) w= *((const byte[$100]) bitmap_plot_xlo) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [745] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0
    // [746] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
  __b1_from_bitmap_clear:
    // [746] phi (byte) bitmap_clear::y#4 = (byte) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [746] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // [746] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
  __b1_from___b3:
    // [746] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [746] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    jmp __b1
    // bitmap_clear::@1
  __b1:
    // [747] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
  __b2_from___b1:
    // [747] phi (byte) bitmap_clear::x#2 = (byte) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [747] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // [747] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
  __b2_from___b2:
    // [747] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [747] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    jmp __b2
    // bitmap_clear::@2
  __b2:
    // [748] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (bitmap),y
    // [749] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap
    bne !+
    inc.z bitmap+1
  !:
    // [750] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [751] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne __b2_from___b2
    jmp __b3
    // bitmap_clear::@3
  __b3:
    // [752] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [753] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1_from___b3
    jmp __breturn
    // bitmap_clear::@return
  __breturn:
    // [754] return 
    rts
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __10 = $1f
    .label yoffs = $b
    // [756] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
  __b1_from_bitmap_init:
    // [756] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [756] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [756] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
  __b1_from___b2:
    // [756] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [756] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    jmp __b1
    // bitmap_init::@1
  __b1:
    // [757] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // [758] *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
    // [759] *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>VIC_BITMAP
    sta bitmap_plot_xhi,x
    // [760] *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
    // [761] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // [762] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b6_from___b1
    // [764] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
  __b2_from___b1:
    // [764] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    jmp __b2
    // [763] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
  __b6_from___b1:
    jmp __b6
    // bitmap_init::@6
  __b6:
    // [764] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
  __b2_from___b6:
    // [764] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    jmp __b2
    // bitmap_init::@2
  __b2:
    // [765] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [766] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1_from___b2
    // [767] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
  __b3_from___b2:
    // [767] phi (byte*) bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    lda #>0
    sta.z yoffs+1
    // [767] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b3
    // [767] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
  __b3_from___b4:
    // [767] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [767] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    jmp __b3
    // bitmap_init::@3
  __b3:
    // [768] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __10
    // [769] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // [770] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$10 | (byte~) bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __10
    // [771] *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // [772] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // [773] *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // [774] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4_from___b3
    jmp __b5
    // bitmap_init::@5
  __b5:
    // [775] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [776] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
  __b4_from___b3:
  __b4_from___b5:
    // [776] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    jmp __b4
    // bitmap_init::@4
  __b4:
    // [777] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [778] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3_from___b4
    jmp __breturn
    // bitmap_init::@return
  __breturn:
    // [779] return 
    rts
}
  // gfx_init_charset
gfx_init_charset: {
    .label charset = $e
    .label chargen = $b
    .label c = $d
    // [780] *((const byte*) PROCPORT) ← (byte) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [781] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
  __b1_from_gfx_init_charset:
    // [781] phi (byte) gfx_init_charset::c#4 = (byte) 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [781] phi (byte*) gfx_init_charset::charset#3 = (const byte*) VIC_CHARSET_ROM [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z charset
    lda #>VIC_CHARSET_ROM
    sta.z charset+1
    // [781] phi (byte*) gfx_init_charset::chargen#3 = (const byte*) CHARGEN [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    jmp __b1
    // [781] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
  __b1_from___b3:
    // [781] phi (byte) gfx_init_charset::c#4 = (byte) gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
    // [781] phi (byte*) gfx_init_charset::charset#3 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
    // [781] phi (byte*) gfx_init_charset::chargen#3 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    jmp __b1
    // gfx_init_charset::@1
  __b1:
    // [782] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
  __b2_from___b1:
    // [782] phi (byte) gfx_init_charset::l#2 = (byte) 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [782] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
    // [782] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // [782] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
  __b2_from___b2:
    // [782] phi (byte) gfx_init_charset::l#2 = (byte) gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
    // [782] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
    // [782] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    jmp __b2
    // gfx_init_charset::@2
  __b2:
    // [783] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    ldy #0
    sta (charset),y
    // [784] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc.z charset
    bne !+
    inc.z charset+1
  !:
    // [785] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [786] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [787] if((byte) gfx_init_charset::l#1!=(byte) 8) goto gfx_init_charset::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2_from___b2
    jmp __b3
    // gfx_init_charset::@3
  __b3:
    // [788] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [789] if((byte) gfx_init_charset::c#1!=(byte) 0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1_from___b3
    jmp __b4
    // gfx_init_charset::@4
  __b4:
    // [790] *((const byte*) PROCPORT) ← (byte) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    jmp __breturn
    // gfx_init_charset::@return
  __breturn:
    // [791] return 
    rts
}
  // gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = $e
    .label cy = $d
    // [793] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
  __b1_from_gfx_init_screen4:
    // [793] phi (byte) gfx_init_screen4::cy#4 = (byte) 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [793] phi (byte*) gfx_init_screen4::ch#3 = (const byte*) VIC_SCREEN4 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z ch
    lda #>VIC_SCREEN4
    sta.z ch+1
    jmp __b1
    // [793] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
  __b1_from___b3:
    // [793] phi (byte) gfx_init_screen4::cy#4 = (byte) gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
    // [793] phi (byte*) gfx_init_screen4::ch#3 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen4::@1
  __b1:
    // [794] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
  __b2_from___b1:
    // [794] phi (byte) gfx_init_screen4::cx#2 = (byte) 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [794] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // [794] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
  __b2_from___b2:
    // [794] phi (byte) gfx_init_screen4::cx#2 = (byte) gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
    // [794] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen4::@2
  __b2:
    // [795] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    ldy #0
    sta (ch),y
    // [796] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [797] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [798] if((byte) gfx_init_screen4::cx#1!=(byte) $28) goto gfx_init_screen4::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen4::@3
  __b3:
    // [799] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [800] if((byte) gfx_init_screen4::cy#1!=(byte) $19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen4::@return
  __breturn:
    // [801] return 
    rts
}
  // gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label __1 = $1e
    .label ch = $16
    .label cy = $10
    // [803] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
  __b1_from_gfx_init_screen3:
    // [803] phi (byte*) gfx_init_screen3::ch#3 = (const byte*) VIC_SCREEN3 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z ch
    lda #>VIC_SCREEN3
    sta.z ch+1
    // [803] phi (byte) gfx_init_screen3::cy#4 = (byte) 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [803] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
  __b1_from___b3:
    // [803] phi (byte*) gfx_init_screen3::ch#3 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
    // [803] phi (byte) gfx_init_screen3::cy#4 = (byte) gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen3::@1
  __b1:
    // [804] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
  __b2_from___b1:
    // [804] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
    // [804] phi (byte) gfx_init_screen3::cx#2 = (byte) 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [804] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
  __b2_from___b2:
    // [804] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
    // [804] phi (byte) gfx_init_screen3::cx#2 = (byte) gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen3::@2
  __b2:
    // [805] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
    // [806] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // [807] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z cy
    // [808] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // [809] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [810] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [811] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [812] if((byte) gfx_init_screen3::cx#1!=(byte) $28) goto gfx_init_screen3::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen3::@3
  __b3:
    // [813] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [814] if((byte) gfx_init_screen3::cy#1!=(byte) $19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen3::@return
  __breturn:
    // [815] return 
    rts
}
  // gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label col2 = $1f
    .label ch = $16
    .label cy = $10
    // [817] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
  __b1_from_gfx_init_screen2:
    // [817] phi (byte*) gfx_init_screen2::ch#3 = (const byte*) VIC_SCREEN2 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z ch
    lda #>VIC_SCREEN2
    sta.z ch+1
    // [817] phi (byte) gfx_init_screen2::cy#4 = (byte) 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [817] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
  __b1_from___b3:
    // [817] phi (byte*) gfx_init_screen2::ch#3 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
    // [817] phi (byte) gfx_init_screen2::cy#4 = (byte) gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen2::@1
  __b1:
    // [818] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
  __b2_from___b1:
    // [818] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
    // [818] phi (byte) gfx_init_screen2::cx#2 = (byte) 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [818] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
  __b2_from___b2:
    // [818] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
    // [818] phi (byte) gfx_init_screen2::cx#2 = (byte) gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen2::@2
  __b2:
    // [819] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [820] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte) $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
    // [821] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$f+1
    sta.z col2
    // [822] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // [823] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z col2
    // [824] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [825] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [826] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [827] if((byte) gfx_init_screen2::cx#1!=(byte) $28) goto gfx_init_screen2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen2::@3
  __b3:
    // [828] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [829] if((byte) gfx_init_screen2::cy#1!=(byte) $19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen2::@return
  __breturn:
    // [830] return 
    rts
}
  // gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label ch = $16
    .label cy = $11
    // [832] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
  __b1_from_gfx_init_screen1:
    // [832] phi (byte*) gfx_init_screen1::ch#3 = (const byte*) VIC_SCREEN1 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z ch
    lda #>VIC_SCREEN1
    sta.z ch+1
    // [832] phi (byte) gfx_init_screen1::cy#4 = (byte) 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [832] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
  __b1_from___b3:
    // [832] phi (byte*) gfx_init_screen1::ch#3 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
    // [832] phi (byte) gfx_init_screen1::cy#4 = (byte) gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen1::@1
  __b1:
    // [833] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
  __b2_from___b1:
    // [833] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
    // [833] phi (byte) gfx_init_screen1::cx#2 = (byte) 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [833] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
  __b2_from___b2:
    // [833] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
    // [833] phi (byte) gfx_init_screen1::cx#2 = (byte) gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen1::@2
  __b2:
    // [834] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // [835] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [836] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [837] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [838] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [839] if((byte) gfx_init_screen1::cx#1!=(byte) $28) goto gfx_init_screen1::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen1::@3
  __b3:
    // [840] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [841] if((byte) gfx_init_screen1::cy#1!=(byte) $19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen1::@return
  __breturn:
    // [842] return 
    rts
}
  // gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label __1 = $1f
    .label ch = $16
    .label cy = $11
    // [844] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
  __b1_from_gfx_init_screen0:
    // [844] phi (byte*) gfx_init_screen0::ch#3 = (const byte*) VIC_SCREEN0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z ch
    lda #>VIC_SCREEN0
    sta.z ch+1
    // [844] phi (byte) gfx_init_screen0::cy#4 = (byte) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    jmp __b1
    // [844] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
  __b1_from___b3:
    // [844] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
    // [844] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    jmp __b1
    // gfx_init_screen0::@1
  __b1:
    // [845] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
  __b2_from___b1:
    // [845] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
    // [845] phi (byte) gfx_init_screen0::cx#2 = (byte) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __b2
    // [845] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
  __b2_from___b2:
    // [845] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
    // [845] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    jmp __b2
    // gfx_init_screen0::@2
  __b2:
    // [846] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // [847] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // [848] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // [849] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // [850] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // [851] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // [852] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [853] if((byte) gfx_init_screen0::cx#1!=(byte) $28) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2_from___b2
    jmp __b3
    // gfx_init_screen0::@3
  __b3:
    // [854] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [855] if((byte) gfx_init_screen0::cy#1!=(byte) $19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1_from___b3
    jmp __breturn
    // gfx_init_screen0::@return
  __breturn:
    // [856] return 
    rts
}
  // keyboard_init
// Initialize keyboard reading by setting CIA#$ Data Direction Registers
keyboard_init: {
    // [857] *((const byte*) CIA1_PORT_A_DDR) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1_PORT_A_DDR
    // [858] *((const byte*) CIA1_PORT_B_DDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1_PORT_B_DDR
    jmp __breturn
    // keyboard_init::@return
  __breturn:
    // [859] return 
    rts
}
  // File Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
  .byte 0
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
  .byte 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b10
Removing instruction jmp __b1
Removing instruction jmp __b11
Removing instruction jmp __b2
Removing instruction jmp __b12
Removing instruction jmp __b3
Removing instruction jmp __b13
Removing instruction jmp __b4
Removing instruction jmp __b14
Removing instruction jmp __b5
Removing instruction jmp __b15
Removing instruction jmp __b6
Removing instruction jmp __b16
Removing instruction jmp __b7
Removing instruction jmp __b17
Removing instruction jmp __b8
Removing instruction jmp __b18
Removing instruction jmp __b9
Removing instruction jmp __b27
Removing instruction jmp __b28
Removing instruction jmp __b29
Removing instruction jmp __b30
Removing instruction jmp __b31
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b21
Removing instruction jmp __b22
Removing instruction jmp __b23
Removing instruction jmp __b25
Removing instruction jmp __b26
Removing instruction jmp __b32
Removing instruction jmp __b33
Removing instruction jmp __b24
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b19
Removing instruction jmp __b16
Removing instruction jmp __b8
Removing instruction jmp __b17
Removing instruction jmp __b20
Removing instruction jmp __b18
Removing instruction jmp __b1
Removing instruction jmp __b21
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b22
Removing instruction jmp __b5
Removing instruction jmp __b3
Removing instruction jmp __b23
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b10
Removing instruction jmp __b15
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __b15
Removing instruction jmp __b16
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b17
Removing instruction jmp __breturn
Removing instruction jmp __b7
Removing instruction jmp __b18
Removing instruction jmp __b19
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b13
Removing instruction jmp __breturn
Removing instruction jmp __b18
Removing instruction jmp __b21
Removing instruction jmp __b1
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b22
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __b23
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b16
Removing instruction jmp __b17
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __b9
Removing instruction jmp __b10
Removing instruction jmp __b11
Removing instruction jmp __b12
Removing instruction jmp __b13
Removing instruction jmp __b14
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b5
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __b9
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __b8
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b4
Removing instruction jmp __b7
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b4
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b10
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b4
Removing instruction jmp __b3
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b6
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda.z __59+1
Removing instruction ldy #0
Removing instruction lda #0
Removing instruction lda.z row_scan
Removing instruction lda #3
Removing instruction lda #0
Removing instruction ldy #0
Removing instruction ldy.z form_field_ptr.x
Removing instruction ldy.z form_field_ptr.x
Removing instruction ldy.z form_field_ptr.x
Replacing instruction ldy #0 with TAY
Removing instruction lda #0
Removing instruction lda #>0
Removing instruction ldy.z l
Removing instruction ldy.z l
Removing instruction ldy.z l
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Removing instruction lda #>0
Replacing instruction ldx #0 with TAX
Removing instruction ldy #0
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __bbegin with __b1
Replacing label __b1 with __b2
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b4_from___b3 with __b4
Replacing label __b5_from___b4 with __b5
Replacing label __b6_from___b5 with __b6
Replacing label __b8_from___b7 with __b8
Replacing label __b20_from___b20 with __b20
Replacing label __b19_from___b21 with __b19
Replacing label __b23_from___b23 with __b23
Replacing label __b24_from___b24 with __b24
Replacing label __b7_from___b8 with __b7
Replacing label __b2_from___b21 with __b2
Replacing label __b3_from___b22 with __b3
Replacing label __breturn_from___b23 with __breturn
Replacing label __b10_from___b9 with __b10
Replacing label __b10_from___b12 with __b10
Replacing label __b8_from___b15 with __b8
Replacing label __b10_from___b11 with __b10
Replacing label __breturn_from_get_vic_screen with __b1
Replacing label __b1_from___b5 with __b1
Replacing label __breturn_from_get_vic_charset with __b1
Replacing label __b1_from___b2 with __b1
Replacing label __b1_from___b14 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b3_from___b19 with __b3_from___b6
Replacing label __b2_from_render_preset_name with __b2_from___b12
Replacing label __b1_from___b12 with __b1
Replacing label __b2_from_apply_preset with __b2_from___b12
Replacing label __b1_from___b12 with __b1
Replacing label __b21_from___b18 with __b1
Replacing label __b22_from___b9 with __b14
Replacing label __b23_from___b13 with __b23
Replacing label __b14_from___b23 with __b14
Replacing label __b6_from___b5 with __b6
Replacing label __b3_from___b2 with __b3
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b1 with __b2
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b6 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b1_from___b1 with __b1
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b6 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b6 with __b2
Replacing label __b1_from___b7 with __b1
Replacing label __b3_from___b2 with __b3
Replacing label __b3_from___b2 with __b3
Replacing label __b2_from___b3 with __b2
Replacing label __b2_from___b3 with __b2
Replacing label __b1_from___b5 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b4 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b6_from___b1 with __b2
Replacing label __b1_from___b2 with __b1
Replacing label __b4_from___b3 with __b4
Replacing label __b3_from___b4 with __b3
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Replacing label __b2_from___b2 with __b2
Replacing label __b1_from___b3 with __b1
Removing instruction __bbegin:
Removing instruction __b1_from___bbegin:
Removing instruction __bend_from___b1:
Removing instruction __b3_from_main:
Removing instruction gfx_init_from___b3:
Removing instruction __b1:
Removing instruction __b2_from___b1:
Removing instruction form_mode_from___b2:
Removing instruction __b4_from___b2:
Removing instruction __b10_from_gfx_mode:
Removing instruction __b1_from___b10:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b11:
Removing instruction __b3_from___b12:
Removing instruction __b3_from___b2:
Removing instruction __b4_from___b13:
Removing instruction __b4_from___b3:
Removing instruction __b5_from___b14:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b15:
Removing instruction __b6_from___b5:
Removing instruction __b16_from___b6:
Removing instruction __b7_from___b16:
Removing instruction __b8_from___b17:
Removing instruction __b8_from___b7:
Removing instruction __b18_from___b8:
Removing instruction __b9_from___b18:
Removing instruction __b19_from___b31:
Removing instruction __b19_from___b21:
Removing instruction __b20_from___b19:
Removing instruction __b20_from___b20:
Removing instruction __b23_from___b23:
Removing instruction __b26_from___b25:
Removing instruction keyboard_event_scan_from___b26:
Removing instruction __b32_from___b26:
Removing instruction __b24_from___b24:
Removing instruction __b7_from___b8:
Removing instruction __b8_from___b15:
Removing instruction __b8_from___b16:
Removing instruction __b17_from___b8:
Removing instruction keyboard_event_pressed_from___b17:
Removing instruction __b18_from___b20:
Removing instruction __b1_from___b18:
Removing instruction keyboard_event_pressed_from___b1:
Removing instruction __b2_from___b21:
Removing instruction __b2_from___b4:
Removing instruction keyboard_event_pressed_from___b2:
Removing instruction __b3_from___b22:
Removing instruction __b3_from___b5:
Removing instruction keyboard_event_pressed_from___b3:
Removing instruction __breturn_from___b23:
Removing instruction __breturn_from___b6:
Removing instruction __b10_from___b11:
Removing instruction __b10_from___b12:
Removing instruction __b10_from___b14:
Removing instruction __b10_from___b9:
Removing instruction __b1_from___b5:
Removing instruction __breturn_from_get_vic_screen:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from___b2:
Removing instruction __breturn_from_get_vic_charset:
Removing instruction __breturn_from___b1:
Removing instruction __b1_from___b14:
Removing instruction __breturn_from___b1:
Removing instruction __b8_from_form_mode:
Removing instruction __b9_from___b8:
Removing instruction print_str_lines_from___b9:
Removing instruction __b10_from___b9:
Removing instruction print_set_screen_from___b10:
Removing instruction __b11_from___b10:
Removing instruction __b12_from___b11:
Removing instruction print_str_lines_from___b12:
Removing instruction __b13_from___b12:
Removing instruction form_set_screen_from___b13:
Removing instruction __b14_from___b13:
Removing instruction form_render_values_from___b14:
Removing instruction __b1_from___b1:
Removing instruction __b3_from___b19:
Removing instruction __b3_from___b2:
Removing instruction __b3:
Removing instruction __b5_from___b4:
Removing instruction __b2_from_render_preset_name:
Removing instruction __b1_from___b12:
Removing instruction __b2_from___b1:
Removing instruction print_str_at_from___b2:
Removing instruction form_field_ptr_from___b2:
Removing instruction __b2_from_apply_preset:
Removing instruction __b1_from___b12:
Removing instruction __b2_from___b1:
Removing instruction __b13_from___b2:
Removing instruction __b21_from___b18:
Removing instruction __b21:
Removing instruction __b1_from___b21:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b7:
Removing instruction keyboard_event_scan_from___b3:
Removing instruction __b19_from___b3:
Removing instruction __b22_from___b9:
Removing instruction __b22:
Removing instruction __b14_from___b22:
Removing instruction __b14_from___b23:
Removing instruction __breturn_from___b14:
Removing instruction __b23_from___b13:
Removing instruction __breturn_from___b16:
Removing instruction __b6_from___b5:
Removing instruction __b1_from___b1:
Removing instruction __b1_from_print_str_lines:
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b3_from___b4:
Removing instruction __b5_from___b3:
Removing instruction print_ln_from___b5:
Removing instruction __b1_from_print_ln:
Removing instruction __b1_from___b1:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b1_from_gfx_init:
Removing instruction gfx_init_screen1_from___b1:
Removing instruction __b2_from___b1:
Removing instruction gfx_init_screen2_from___b2:
Removing instruction __b3_from___b2:
Removing instruction gfx_init_screen3_from___b3:
Removing instruction __b4_from___b3:
Removing instruction gfx_init_screen4_from___b4:
Removing instruction __b5_from___b4:
Removing instruction __b6_from___b5:
Removing instruction gfx_init_vic_bitmap_from___b6:
Removing instruction __b7_from___b6:
Removing instruction gfx_init_plane_8bppchunky_from___b7:
Removing instruction __b8_from___b7:
Removing instruction gfx_init_plane_charset8_from___b8:
Removing instruction __b9_from___b8:
Removing instruction gfx_init_plane_horisontal_from___b9:
Removing instruction __b10_from___b9:
Removing instruction gfx_init_plane_vertical_from___b10:
Removing instruction __b11_from___b10:
Removing instruction gfx_init_plane_horisontal2_from___b11:
Removing instruction __b12_from___b11:
Removing instruction gfx_init_plane_vertical2_from___b12:
Removing instruction __b13_from___b12:
Removing instruction gfx_init_plane_blank_from___b13:
Removing instruction __b14_from___b13:
Removing instruction gfx_init_plane_full_from___b14:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b4_from___b3:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b4_from___b3:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b4_from___b3:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __b1_from___b6:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b7_from___b6:
Removing instruction dtvSetCpuBankSegment1_from___b7:
Removing instruction __b1_from___b7:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b1_from___b5:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b3:
Removing instruction __b3_from___b2:
Removing instruction __b6_from___b5:
Removing instruction dtvSetCpuBankSegment1_from___b6:
Removing instruction __b3_from_gfx_init_vic_bitmap:
Removing instruction __b1_from_bitmap_line_xdyi:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_ydxi:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_xdyd:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from_bitmap_line_ydxd:
Removing instruction __b1_from___b2:
Removing instruction __b2_from___b3:
Removing instruction __b2_from___b4:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b2:
Removing instruction __b6_from___b1:
Removing instruction __b6:
Removing instruction __b2_from___b6:
Removing instruction __b3_from___b4:
Removing instruction __b4_from___b3:
Removing instruction __b4_from___b5:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Removing instruction __b1_from___b3:
Removing instruction __b2_from___b1:
Removing instruction __b2_from___b2:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bend:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b18:
Removing instruction get_plane_from___b9:
Removing instruction __b27:
Removing instruction get_plane_from___b27:
Removing instruction __b28:
Removing instruction get_vic_screen_from___b28:
Removing instruction __b29:
Removing instruction __b30:
Removing instruction get_vic_screen_from___b30:
Removing instruction __b31:
Removing instruction __b21:
Removing instruction __b22:
Removing instruction __b23_from___b22:
Removing instruction __b26:
Removing instruction __b32:
Removing instruction __b33:
Removing instruction __b1:
Removing instruction __breturn_from___b1:
Removing instruction __b7_from_keyboard_event_scan:
Removing instruction __b19:
Removing instruction __b16:
Removing instruction __b17:
Removing instruction __b20:
Removing instruction __b18:
Removing instruction __b21:
Removing instruction __b4:
Removing instruction __b22:
Removing instruction __b5:
Removing instruction __b23:
Removing instruction __b6:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __breturn_from___b5:
Removing instruction __b2:
Removing instruction __breturn_from___b2:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __breturn_from___b14:
Removing instruction print_set_screen_from_form_mode:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __b15:
Removing instruction render_preset_name_from___b15:
Removing instruction __b16:
Removing instruction __b1_from___b16:
Removing instruction __b2:
Removing instruction __b5:
Removing instruction __b17:
Removing instruction __breturn:
Removing instruction __b7:
Removing instruction __b18:
Removing instruction form_render_values_from___b18:
Removing instruction __b19:
Removing instruction render_preset_name_from___b19:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __breturn:
Removing instruction __b1_from_print_str_at:
Removing instruction __breturn:
Removing instruction __b1_from___b2:
Removing instruction __b1_from_form_render_values:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __breturn:
Removing instruction __b13_from___b14:
Removing instruction form_field_ptr_from_form_control:
Removing instruction __b18:
Removing instruction __b1_from___b18:
Removing instruction __b7:
Removing instruction __b19:
Removing instruction __b20:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b14_from___b9:
Removing instruction __b14_from___b13:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b17:
Removing instruction __breturn_from___b5:
Removing instruction __b1_from_form_set_screen:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction memset_from_print_cls:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction gfx_init_screen0_from_gfx_init:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction __b9:
Removing instruction __b10:
Removing instruction __b11:
Removing instruction __b12:
Removing instruction __b13:
Removing instruction __b14:
Removing instruction __breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_full:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_fill:
Removing instruction __b5:
Removing instruction __b1_from___b5:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_blank:
Removing instruction __breturn:
Removing instruction gfx_init_plane_fill_from_gfx_init_plane_vertical2:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal2:
Removing instruction __b1_from_gfx_init_plane_horisontal2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_vertical:
Removing instruction __b1_from_gfx_init_plane_vertical:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_horisontal:
Removing instruction __b1_from_gfx_init_plane_horisontal:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_charset8:
Removing instruction __b9:
Removing instruction __b1_from___b9:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __b4_from___b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __b8:
Removing instruction dtvSetCpuBankSegment1_from___b8:
Removing instruction __breturn:
Removing instruction dtvSetCpuBankSegment1_from_gfx_init_plane_8bppchunky:
Removing instruction __b1_from_gfx_init_plane_8bppchunky:
Removing instruction __b4:
Removing instruction dtvSetCpuBankSegment1_from___b4:
Removing instruction __b7:
Removing instruction __b3_from___b7:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction __breturn:
Removing instruction bitmap_init_from_gfx_init_vic_bitmap:
Removing instruction __b3:
Removing instruction __b1_from___b3:
Removing instruction __breturn:
Removing instruction __b4:
Removing instruction __b1_from___b4:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction bitmap_line_ydxi_from___b4:
Removing instruction bitmap_line_xdyi_from___b8:
Removing instruction __b10:
Removing instruction bitmap_line_ydxd_from___b10:
Removing instruction bitmap_line_xdyd_from___b9:
Removing instruction __b5:
Removing instruction __b6:
Removing instruction bitmap_line_ydxd_from___b6:
Removing instruction bitmap_line_xdyd_from___b12:
Removing instruction __b14:
Removing instruction bitmap_line_ydxi_from___b14:
Removing instruction bitmap_line_xdyi_from___b13:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction bitmap_plot_from___b1:
Removing instruction __b4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_bitmap_clear:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_bitmap_init:
Removing instruction __b2_from___b1:
Removing instruction __b3_from___b2:
Removing instruction __b5:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_charset:
Removing instruction __b3:
Removing instruction __b4:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen4:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen3:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen2:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen1:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __b1_from_gfx_init_screen0:
Removing instruction __b3:
Removing instruction __breturn:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __b9 in bne __b9_from___b10
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __b14 in bne __b23
Replacing jump to rts with rts in jmp __breturn
Skipping double jump to __breturn_from___b6 in bne __b6
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b1_from_gfx_mode to b1
Relabelling long label __b7_from___b6 to b2
Relabelling long label __b9_from___b8 to b3
Relabelling long label __b24_from___b22 to b4
Relabelling long label __breturn_from_keyboard_event_get to b1
Relabelling long label __b1_from___b20 to b1
Relabelling long label __b9_from___b10 to b2
Relabelling long label __b9_from___b19 to b3
Relabelling long label __breturn_from___b2 to b1
Relabelling long label __breturn_from___b3 to b2
Relabelling long label __breturn_from___b4 to b3
Relabelling long label __breturn_from_get_plane to b1
Relabelling long label __breturn_from___b10 to b2
Relabelling long label __breturn_from___b11 to b3
Relabelling long label __breturn_from___b12 to b4
Relabelling long label __breturn_from___b13 to b5
Relabelling long label __breturn_from___b2 to b6
Relabelling long label __breturn_from___b3 to b7
Relabelling long label __breturn_from___b4 to b8
Relabelling long label __breturn_from___b5 to b9
Relabelling long label __breturn_from___b6 to b10
Relabelling long label __breturn_from___b7 to b11
Relabelling long label __breturn_from___b8 to b12
Relabelling long label __breturn_from___b9 to b13
Relabelling long label __b3_from___b6 to b1
Relabelling long label __b2_from___b12 to b1
Relabelling long label __b2_from___b10 to b2
Relabelling long label __b2_from___b11 to b3
Relabelling long label __b2_from___b3 to b4
Relabelling long label __b2_from___b4 to b5
Relabelling long label __b2_from___b5 to b6
Relabelling long label __b2_from___b6 to b7
Relabelling long label __b2_from___b7 to b8
Relabelling long label __b2_from___b8 to b9
Relabelling long label __b2_from___b9 to b10
Relabelling long label __b2_from___b12 to b1
Relabelling long label __b2_from___b10 to b2
Relabelling long label __b2_from___b11 to b3
Relabelling long label __b2_from___b3 to b4
Relabelling long label __b2_from___b4 to b5
Relabelling long label __b2_from___b5 to b6
Relabelling long label __b2_from___b6 to b7
Relabelling long label __b2_from___b7 to b8
Relabelling long label __b2_from___b8 to b9
Relabelling long label __b2_from___b9 to b10
Relabelling long label __breturn_from___b6 to b1
Relabelling long label __b4_from___b3 to b1
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction jmp __b19
Removing instruction jmp __b20
Removing instruction jmp __b23
Removing instruction jmp __b24
Removing instruction jmp __b7
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b14
Removing instruction jmp __b1
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b1
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction ldx #0 with TAX
Removing instruction lda form_fields_val
Removing instruction ldy.z form_field_idx
Removing instruction ldy.z form_field_idx
Removing instruction lda.z y0
Removing instruction lda.z y0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction b2:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __b23:
Removing instruction __b6:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp __b9
Removing unreachable instruction jmp __b14
Removing unreachable instruction jmp b1
Succesful ASM optimization Pass5UnreachableCodeElimination
Fixing long branch [706] beq b6 to bne
Fixing long branch [710] beq b7 to bne
Fixing long branch [714] beq b8 to bne
Fixing long branch [718] beq b9 to bne
Fixing long branch [722] beq b10 to bne
Fixing long branch [726] beq b11 to bne
Fixing long branch [730] beq b12 to bne
Fixing long branch [734] beq b13 to bne
Fixing long branch [1297] bmi __b2 to bpl

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const byte*) BGCOL BGCOL = (byte*) 53281
(const byte*) BGCOL1 BGCOL1 = (byte*) 53281
(const byte*) BGCOL2 BGCOL2 = (byte*) 53282
(const byte*) BGCOL3 BGCOL3 = (byte*) 53283
(const byte*) BGCOL4 BGCOL4 = (byte*) 53284
(const byte*) BORDERCOL BORDERCOL = (byte*) 53280
(const byte*) CHARGEN CHARGEN = (byte*) 53248
(const byte*) CIA1_PORT_A CIA1_PORT_A = (byte*) 56320
(const byte*) CIA1_PORT_A_DDR CIA1_PORT_A_DDR = (byte*) 56322
(const byte*) CIA1_PORT_B CIA1_PORT_B = (byte*) 56321
(const byte*) CIA1_PORT_B_DDR CIA1_PORT_B_DDR = (byte*) 56323
(const byte*) CIA2_PORT_A CIA2_PORT_A = (byte*) 56576
(const byte*) CIA2_PORT_A_DDR CIA2_PORT_A_DDR = (byte*) 56578
(const byte*) COLS COLS = (byte*) 55296
(const byte) DTV_BORDER_OFF DTV_BORDER_OFF = (byte) 2
(const byte) DTV_CHUNKY DTV_CHUNKY = (byte) $40
(const byte) DTV_COLORRAM_OFF DTV_COLORRAM_OFF = (byte) $10
(const dword) DTV_COLOR_BANK_DEFAULT DTV_COLOR_BANK_DEFAULT = (dword) $1d800
(const byte*) DTV_COLOR_BANK_HI DTV_COLOR_BANK_HI = (byte*) 53303
(const byte*) DTV_COLOR_BANK_LO DTV_COLOR_BANK_LO = (byte*) 53302
(const byte*) DTV_CONTROL DTV_CONTROL = (byte*) 53308
(const byte*) DTV_FEATURE DTV_FEATURE = (byte*) 53311
(const byte) DTV_FEATURE_ENABLE DTV_FEATURE_ENABLE = (byte) 1
(const byte*) DTV_GRAPHICS_VIC_BANK DTV_GRAPHICS_VIC_BANK = (byte*) 53309
(const byte) DTV_HIGHCOLOR DTV_HIGHCOLOR = (byte) 4
(const byte) DTV_LINEAR DTV_LINEAR = (byte) 1
(const byte) DTV_OVERSCAN DTV_OVERSCAN = (byte) 8
(const byte*) DTV_PALETTE DTV_PALETTE = (byte*) 53760
(const byte[$10]) DTV_PALETTE_DEFAULT DTV_PALETTE_DEFAULT = { (byte) 0, (byte) $f, (byte) $36, (byte) $be, (byte) $58, (byte) $db, (byte) $86, (byte) $ff, (byte) $29, (byte) $26, (byte) $3b, (byte) 5, (byte) 7, (byte) $df, (byte) $9a, (byte) $a }
(const byte*) DTV_PLANEA_MODULO_HI DTV_PLANEA_MODULO_HI = (byte*) 53305
(const byte*) DTV_PLANEA_MODULO_LO DTV_PLANEA_MODULO_LO = (byte*) 53304
(const byte*) DTV_PLANEA_START_HI DTV_PLANEA_START_HI = (byte*) 53317
(const byte*) DTV_PLANEA_START_LO DTV_PLANEA_START_LO = (byte*) 53306
(const byte*) DTV_PLANEA_START_MI DTV_PLANEA_START_MI = (byte*) 53307
(const byte*) DTV_PLANEA_STEP DTV_PLANEA_STEP = (byte*) 53318
(const byte*) DTV_PLANEB_MODULO_HI DTV_PLANEB_MODULO_HI = (byte*) 53320
(const byte*) DTV_PLANEB_MODULO_LO DTV_PLANEB_MODULO_LO = (byte*) 53319
(const byte*) DTV_PLANEB_START_HI DTV_PLANEB_START_HI = (byte*) 53323
(const byte*) DTV_PLANEB_START_LO DTV_PLANEB_START_LO = (byte*) 53321
(const byte*) DTV_PLANEB_START_MI DTV_PLANEB_START_MI = (byte*) 53322
(const byte*) DTV_PLANEB_STEP DTV_PLANEB_STEP = (byte*) 53324
(const byte*) FORM_CHARSET FORM_CHARSET = (byte*) 6144
(const byte[]) FORM_COLS FORM_COLS = (string) "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
(const signed byte) FORM_CURSOR_BLINK FORM_CURSOR_BLINK = (signed byte) $28
(const byte*) FORM_SCREEN FORM_SCREEN = (byte*) 1024
(const byte[]) FORM_TEXT FORM_TEXT = (string) " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
(const byte) KEY_COMMODORE KEY_COMMODORE = (byte) $3d
(const byte) KEY_CRSR_DOWN KEY_CRSR_DOWN = (byte) 7
(const byte) KEY_CRSR_RIGHT KEY_CRSR_RIGHT = (byte) 2
(const byte) KEY_CTRL KEY_CTRL = (byte) $3a
(const byte) KEY_LSHIFT KEY_LSHIFT = (byte) $f
(const byte) KEY_MODIFIER_COMMODORE KEY_MODIFIER_COMMODORE = (byte) 8
(const byte) KEY_MODIFIER_CTRL KEY_MODIFIER_CTRL = (byte) 4
(const byte) KEY_MODIFIER_LSHIFT KEY_MODIFIER_LSHIFT = (byte) 1
(const byte) KEY_MODIFIER_RSHIFT KEY_MODIFIER_RSHIFT = (byte) 2
(const byte) KEY_MODIFIER_SHIFT KEY_MODIFIER_SHIFT = (const byte) KEY_MODIFIER_LSHIFT|(const byte) KEY_MODIFIER_RSHIFT
(const byte) KEY_RSHIFT KEY_RSHIFT = (byte) $34
(const byte) KEY_SPACE KEY_SPACE = (byte) $3c
(const dword) PLANE_8BPP_CHUNKY PLANE_8BPP_CHUNKY = (dword) $20000
(const dword) PLANE_BLANK PLANE_BLANK = (dword) $38000
(const dword) PLANE_CHARSET8 PLANE_CHARSET8 = (dword) $3c000
(const dword) PLANE_FULL PLANE_FULL = (dword) $3a000
(const dword) PLANE_HORISONTAL PLANE_HORISONTAL = (dword) $30000
(const dword) PLANE_HORISONTAL2 PLANE_HORISONTAL2 = (dword) $34000
(const dword) PLANE_VERTICAL PLANE_VERTICAL = (dword) $32000
(const dword) PLANE_VERTICAL2 PLANE_VERTICAL2 = (dword) $36000
(const byte*) PROCPORT PROCPORT = (byte*) 1
(const byte*) PROCPORT_DDR PROCPORT_DDR = (byte*) 0
(const byte) PROCPORT_DDR_MEMORY_MASK PROCPORT_DDR_MEMORY_MASK = (byte) 7
(const byte) PROCPORT_RAM_CHARROM PROCPORT_RAM_CHARROM = (byte) 1
(const byte) PROCPORT_RAM_IO PROCPORT_RAM_IO = (byte) 5
(const byte) RADIX::BINARY BINARY = (number) 2
(const byte) RADIX::DECIMAL DECIMAL = (number) $a
(const byte) RADIX::HEXADECIMAL HEXADECIMAL = (number) $10
(const byte) RADIX::OCTAL OCTAL = (number) 8
(const byte*) RASTER RASTER = (byte*) 53266
(const byte*) VIC_BITMAP VIC_BITMAP = (byte*) 24576
(const byte) VIC_BMM VIC_BMM = (byte) $20
(const byte*) VIC_CHARSET_ROM VIC_CHARSET_ROM = (byte*) 22528
(const byte*) VIC_CONTROL VIC_CONTROL = (byte*) 53265
(const byte*) VIC_CONTROL2 VIC_CONTROL2 = (byte*) 53270
(const byte) VIC_CSEL VIC_CSEL = (byte) 8
(const byte) VIC_DEN VIC_DEN = (byte) $10
(const byte) VIC_ECM VIC_ECM = (byte) $40
(const byte) VIC_MCM VIC_MCM = (byte) $10
(const byte*) VIC_MEMORY VIC_MEMORY = (byte*) 53272
(const byte) VIC_RSEL VIC_RSEL = (byte) 8
(const byte*) VIC_SCREEN0 VIC_SCREEN0 = (byte*) 16384
(const byte*) VIC_SCREEN1 VIC_SCREEN1 = (byte*) 17408
(const byte*) VIC_SCREEN2 VIC_SCREEN2 = (byte*) 18432
(const byte*) VIC_SCREEN3 VIC_SCREEN3 = (byte*) 19456
(const byte*) VIC_SCREEN4 VIC_SCREEN4 = (byte*) 20480
(void()) apply_preset((byte) apply_preset::idx)
(label) apply_preset::@1
(label) apply_preset::@10
(label) apply_preset::@11
(label) apply_preset::@12
(label) apply_preset::@13
(label) apply_preset::@14
(label) apply_preset::@2
(label) apply_preset::@3
(label) apply_preset::@4
(label) apply_preset::@5
(label) apply_preset::@6
(label) apply_preset::@7
(label) apply_preset::@8
(label) apply_preset::@9
(label) apply_preset::@return
(byte) apply_preset::i
(byte) apply_preset::i#1 reg byte y 2002.0
(byte) apply_preset::i#2 reg byte y 1668.3333333333335
(byte) apply_preset::idx
(byte) apply_preset::idx#0 reg byte a 11.18181818181818
(byte*) apply_preset::preset
(byte*) apply_preset::preset#15 preset zp[2]:14 200.2
(void()) bitmap_clear()
(label) bitmap_clear::@1
(label) bitmap_clear::@2
(label) bitmap_clear::@3
(label) bitmap_clear::@return
(byte*) bitmap_clear::bitmap
(word) bitmap_clear::bitmap#0 bitmap zp[2]:14 2.0
(byte*) bitmap_clear::bitmap#1 bitmap zp[2]:14 42.599999999999994
(byte*) bitmap_clear::bitmap#2 bitmap zp[2]:14 157.0
(byte*) bitmap_clear::bitmap#3 bitmap zp[2]:14 24.0
(byte*~) bitmap_clear::bitmap#5 bitmap zp[2]:14 4.0
(byte) bitmap_clear::x
(byte) bitmap_clear::x#1 reg byte x 151.5
(byte) bitmap_clear::x#2 reg byte x 67.33333333333333
(byte) bitmap_clear::y
(byte) bitmap_clear::y#1 y zp[1]:31 16.5
(byte) bitmap_clear::y#4 y zp[1]:31 3.6666666666666665
(void()) bitmap_init((byte*) bitmap_init::bitmap)
(byte~) bitmap_init::$0 reg byte a 22.0
(byte~) bitmap_init::$10 $10 zp[1]:31 5.5
(byte~) bitmap_init::$7 reg byte a 22.0
(byte~) bitmap_init::$8 reg byte a 22.0
(byte~) bitmap_init::$9 reg byte a 22.0
(label) bitmap_init::@1
(label) bitmap_init::@2
(label) bitmap_init::@3
(label) bitmap_init::@4
(label) bitmap_init::@5
(label) bitmap_init::@6
(label) bitmap_init::@return
(byte*) bitmap_init::bitmap
(byte) bitmap_init::bits
(byte) bitmap_init::bits#1 reg byte y 11.0
(byte) bitmap_init::bits#3 reg byte y 6.6000000000000005
(byte) bitmap_init::bits#4 reg byte y 7.333333333333333
(byte) bitmap_init::x
(byte) bitmap_init::x#1 reg byte x 16.5
(byte) bitmap_init::x#2 reg byte x 7.333333333333334
(byte) bitmap_init::y
(byte) bitmap_init::y#1 reg byte x 16.5
(byte) bitmap_init::y#2 reg byte x 5.5
(byte*) bitmap_init::yoffs
(byte*) bitmap_init::yoffs#1 yoffs zp[2]:11 22.0
(byte*) bitmap_init::yoffs#2 yoffs zp[2]:11 6.875
(byte*) bitmap_init::yoffs#4 yoffs zp[2]:11 11.0
(void()) bitmap_line((byte) bitmap_line::x0 , (byte) bitmap_line::x1 , (byte) bitmap_line::y0 , (byte) bitmap_line::y1)
(label) bitmap_line::@1
(label) bitmap_line::@10
(label) bitmap_line::@11
(label) bitmap_line::@12
(label) bitmap_line::@13
(label) bitmap_line::@14
(label) bitmap_line::@2
(label) bitmap_line::@3
(label) bitmap_line::@4
(label) bitmap_line::@5
(label) bitmap_line::@6
(label) bitmap_line::@7
(label) bitmap_line::@8
(label) bitmap_line::@9
(label) bitmap_line::@return
(byte) bitmap_line::x0
(byte) bitmap_line::x0#0 x0 zp[1]:9 1.260869565217391
(byte) bitmap_line::x1
(byte) bitmap_line::x1#0 reg byte x 1.3181818181818181
(byte) bitmap_line::xd
(byte) bitmap_line::xd#1 xd zp[1]:31 0.7
(byte) bitmap_line::xd#2 xd zp[1]:31 0.7
(byte) bitmap_line::y0
(byte) bitmap_line::y0#0 y0 zp[1]:13 1.6666666666666674
(byte) bitmap_line::y1
(byte) bitmap_line::y1#0 y1 zp[1]:17 1.7500000000000007
(byte) bitmap_line::yd
(byte) bitmap_line::yd#1 reg byte y 0.8888888888888888
(byte) bitmap_line::yd#10 reg byte y 0.8888888888888888
(byte) bitmap_line::yd#11 reg byte y 0.8888888888888888
(byte) bitmap_line::yd#2 reg byte y 0.8888888888888888
(void()) bitmap_line_xdyd((byte) bitmap_line_xdyd::x , (byte) bitmap_line_xdyd::y , (byte) bitmap_line_xdyd::x1 , (byte) bitmap_line_xdyd::xd , (byte) bitmap_line_xdyd::yd)
(byte~) bitmap_line_xdyd::$6 reg byte x 202.0
(label) bitmap_line_xdyd::@1
(label) bitmap_line_xdyd::@2
(label) bitmap_line_xdyd::@3
(label) bitmap_line_xdyd::@4
(label) bitmap_line_xdyd::@return
(byte) bitmap_line_xdyd::e
(byte) bitmap_line_xdyd::e#0 e zp[1]:17 4.0
(byte) bitmap_line_xdyd::e#1 e zp[1]:17 134.66666666666666
(byte) bitmap_line_xdyd::e#2 e zp[1]:17 202.0
(byte) bitmap_line_xdyd::e#3 e zp[1]:17 40.8
(byte) bitmap_line_xdyd::e#6 e zp[1]:17 101.0
(byte) bitmap_line_xdyd::x
(byte) bitmap_line_xdyd::x#0 x zp[1]:16 0.8
(byte) bitmap_line_xdyd::x#1 x zp[1]:16 0.8
(byte) bitmap_line_xdyd::x#2 x zp[1]:16 37.875
(byte) bitmap_line_xdyd::x#3 x zp[1]:16 76.25
(byte) bitmap_line_xdyd::x#6 x zp[1]:16 3.0
(byte) bitmap_line_xdyd::x1
(byte) bitmap_line_xdyd::x1#0 x1 zp[1]:9 1.3333333333333333
(byte) bitmap_line_xdyd::x1#1 x1 zp[1]:9 1.3333333333333333
(byte) bitmap_line_xdyd::x1#6 x1 zp[1]:9 7.5
(byte) bitmap_line_xdyd::xd
(byte) bitmap_line_xdyd::xd#0 xd zp[1]:31 2.0
(byte) bitmap_line_xdyd::xd#1 xd zp[1]:31 2.0
(byte) bitmap_line_xdyd::xd#5 xd zp[1]:31 14.714285714285715
(byte) bitmap_line_xdyd::y
(byte) bitmap_line_xdyd::y#0 y zp[1]:13 1.0
(byte) bitmap_line_xdyd::y#1 y zp[1]:13 1.0
(byte) bitmap_line_xdyd::y#2 y zp[1]:13 101.0
(byte) bitmap_line_xdyd::y#3 y zp[1]:13 58.00000000000001
(byte) bitmap_line_xdyd::y#5 y zp[1]:13 3.0
(byte) bitmap_line_xdyd::y#6 y zp[1]:13 101.0
(byte) bitmap_line_xdyd::yd
(byte) bitmap_line_xdyd::yd#0 yd zp[1]:10 4.0
(byte) bitmap_line_xdyd::yd#1 yd zp[1]:10 4.0
(byte) bitmap_line_xdyd::yd#2 yd zp[1]:10 7.642857142857143
(void()) bitmap_line_xdyi((byte) bitmap_line_xdyi::x , (byte) bitmap_line_xdyi::y , (byte) bitmap_line_xdyi::x1 , (byte) bitmap_line_xdyi::xd , (byte) bitmap_line_xdyi::yd)
(byte~) bitmap_line_xdyi::$6 reg byte x 202.0
(label) bitmap_line_xdyi::@1
(label) bitmap_line_xdyi::@2
(label) bitmap_line_xdyi::@3
(label) bitmap_line_xdyi::@4
(label) bitmap_line_xdyi::@return
(byte) bitmap_line_xdyi::e
(byte) bitmap_line_xdyi::e#0 e zp[1]:17 4.0
(byte) bitmap_line_xdyi::e#1 e zp[1]:17 134.66666666666666
(byte) bitmap_line_xdyi::e#2 e zp[1]:17 202.0
(byte) bitmap_line_xdyi::e#3 e zp[1]:17 40.8
(byte) bitmap_line_xdyi::e#6 e zp[1]:17 101.0
(byte) bitmap_line_xdyi::x
(byte) bitmap_line_xdyi::x#0 x zp[1]:10 0.8
(byte) bitmap_line_xdyi::x#1 x zp[1]:10 0.8
(byte) bitmap_line_xdyi::x#2 x zp[1]:10 37.875
(byte) bitmap_line_xdyi::x#3 x zp[1]:10 76.25
(byte) bitmap_line_xdyi::x#6 x zp[1]:10 3.0
(byte) bitmap_line_xdyi::x1
(byte) bitmap_line_xdyi::x1#0 x1 zp[1]:9 1.3333333333333333
(byte) bitmap_line_xdyi::x1#1 x1 zp[1]:9 1.3333333333333333
(byte) bitmap_line_xdyi::x1#6 x1 zp[1]:9 7.5
(byte) bitmap_line_xdyi::xd
(byte) bitmap_line_xdyi::xd#0 xd zp[1]:31 2.0
(byte) bitmap_line_xdyi::xd#1 xd zp[1]:31 2.0
(byte) bitmap_line_xdyi::xd#5 xd zp[1]:31 14.714285714285715
(byte) bitmap_line_xdyi::y
(byte) bitmap_line_xdyi::y#0 y zp[1]:13 1.0
(byte) bitmap_line_xdyi::y#1 y zp[1]:13 1.0
(byte) bitmap_line_xdyi::y#2 y zp[1]:13 101.0
(byte) bitmap_line_xdyi::y#3 y zp[1]:13 58.00000000000001
(byte) bitmap_line_xdyi::y#5 y zp[1]:13 3.0
(byte) bitmap_line_xdyi::y#6 y zp[1]:13 101.0
(byte) bitmap_line_xdyi::yd
(byte) bitmap_line_xdyi::yd#0 yd zp[1]:16 4.0
(byte) bitmap_line_xdyi::yd#1 yd zp[1]:16 4.0
(byte) bitmap_line_xdyi::yd#2 yd zp[1]:16 7.642857142857143
(void()) bitmap_line_ydxd((byte) bitmap_line_ydxd::y , (byte) bitmap_line_ydxd::x , (byte) bitmap_line_ydxd::y1 , (byte) bitmap_line_ydxd::yd , (byte) bitmap_line_ydxd::xd)
(byte~) bitmap_line_ydxd::$6 reg byte a 202.0
(label) bitmap_line_ydxd::@1
(label) bitmap_line_ydxd::@2
(label) bitmap_line_ydxd::@3
(label) bitmap_line_ydxd::@4
(label) bitmap_line_ydxd::@return
(byte) bitmap_line_ydxd::e
(byte) bitmap_line_ydxd::e#0 e zp[1]:17 4.0
(byte) bitmap_line_ydxd::e#1 e zp[1]:17 134.66666666666666
(byte) bitmap_line_ydxd::e#2 e zp[1]:17 202.0
(byte) bitmap_line_ydxd::e#3 e zp[1]:17 40.8
(byte) bitmap_line_ydxd::e#6 e zp[1]:17 101.0
(byte) bitmap_line_ydxd::x
(byte) bitmap_line_ydxd::x#0 reg byte x 1.0
(byte) bitmap_line_ydxd::x#1 reg byte x 1.0
(byte) bitmap_line_ydxd::x#2 reg byte x 101.0
(byte) bitmap_line_ydxd::x#3 reg byte x 58.00000000000001
(byte) bitmap_line_ydxd::x#5 reg byte x 3.0
(byte) bitmap_line_ydxd::x#6 reg byte x 101.0
(byte) bitmap_line_ydxd::xd
(byte) bitmap_line_ydxd::xd#0 xd zp[1]:31 4.0
(byte) bitmap_line_ydxd::xd#1 xd zp[1]:31 4.0
(byte) bitmap_line_ydxd::xd#2 xd zp[1]:31 7.642857142857143
(byte) bitmap_line_ydxd::y
(byte) bitmap_line_ydxd::y#0 y zp[1]:16 0.8
(byte) bitmap_line_ydxd::y#1 y zp[1]:16 0.8
(byte) bitmap_line_ydxd::y#2 y zp[1]:16 76.25
(byte) bitmap_line_ydxd::y#3 y zp[1]:16 37.875
(byte) bitmap_line_ydxd::y#7 y zp[1]:16 3.0
(byte) bitmap_line_ydxd::y1
(byte) bitmap_line_ydxd::y1#0 y1 zp[1]:13 1.3333333333333333
(byte) bitmap_line_ydxd::y1#1 y1 zp[1]:13 1.3333333333333333
(byte) bitmap_line_ydxd::y1#6 y1 zp[1]:13 7.5
(byte) bitmap_line_ydxd::yd
(byte) bitmap_line_ydxd::yd#0 yd zp[1]:10 2.0
(byte) bitmap_line_ydxd::yd#1 yd zp[1]:10 2.0
(byte) bitmap_line_ydxd::yd#5 yd zp[1]:10 14.714285714285715
(void()) bitmap_line_ydxi((byte) bitmap_line_ydxi::y , (byte) bitmap_line_ydxi::x , (byte) bitmap_line_ydxi::y1 , (byte) bitmap_line_ydxi::yd , (byte) bitmap_line_ydxi::xd)
(byte~) bitmap_line_ydxi::$6 reg byte a 202.0
(label) bitmap_line_ydxi::@1
(label) bitmap_line_ydxi::@2
(label) bitmap_line_ydxi::@3
(label) bitmap_line_ydxi::@4
(label) bitmap_line_ydxi::@return
(byte) bitmap_line_ydxi::e
(byte) bitmap_line_ydxi::e#0 e zp[1]:13 4.0
(byte) bitmap_line_ydxi::e#1 e zp[1]:13 134.66666666666666
(byte) bitmap_line_ydxi::e#2 e zp[1]:13 202.0
(byte) bitmap_line_ydxi::e#3 e zp[1]:13 40.8
(byte) bitmap_line_ydxi::e#6 e zp[1]:13 101.0
(byte) bitmap_line_ydxi::x
(byte) bitmap_line_ydxi::x#0 reg byte x 1.0
(byte) bitmap_line_ydxi::x#1 reg byte x 1.0
(byte) bitmap_line_ydxi::x#2 reg byte x 101.0
(byte) bitmap_line_ydxi::x#3 reg byte x 58.00000000000001
(byte) bitmap_line_ydxi::x#5 reg byte x 3.0
(byte) bitmap_line_ydxi::x#6 reg byte x 101.0
(byte) bitmap_line_ydxi::xd
(byte) bitmap_line_ydxi::xd#0 xd zp[1]:31 4.0
(byte) bitmap_line_ydxi::xd#1 xd zp[1]:31 4.0
(byte) bitmap_line_ydxi::xd#2 xd zp[1]:31 7.642857142857143
(byte) bitmap_line_ydxi::y
(byte) bitmap_line_ydxi::y#0 y zp[1]:10 0.8
(byte) bitmap_line_ydxi::y#1 y zp[1]:10 0.8
(byte) bitmap_line_ydxi::y#2 y zp[1]:10 37.875
(byte) bitmap_line_ydxi::y#3 y zp[1]:10 76.25
(byte) bitmap_line_ydxi::y#6 y zp[1]:10 3.0
(byte) bitmap_line_ydxi::y1
(byte) bitmap_line_ydxi::y1#0 y1 zp[1]:17 1.3333333333333333
(byte) bitmap_line_ydxi::y1#1 y1 zp[1]:17 1.3333333333333333
(byte) bitmap_line_ydxi::y1#6 y1 zp[1]:17 7.5
(byte) bitmap_line_ydxi::yd
(byte) bitmap_line_ydxi::yd#0 yd zp[1]:9 2.0
(byte) bitmap_line_ydxi::yd#1 yd zp[1]:9 2.0
(byte) bitmap_line_ydxi::yd#5 yd zp[1]:9 14.714285714285715
(void()) bitmap_plot((byte) bitmap_plot::x , (byte) bitmap_plot::y)
(byte~) bitmap_plot::$1 reg byte a 4.0
(label) bitmap_plot::@return
(byte*) bitmap_plot::plotter
(word) bitmap_plot::plotter#0 plotter zp[2]:26 1.0
(word) bitmap_plot::plotter_x
(word) bitmap_plot::plotter_x#0 plotter_x zp[2]:26 2.0
(word) bitmap_plot::plotter_y
(word) bitmap_plot::plotter_y#0 plotter_y zp[2]:28 4.0
(byte) bitmap_plot::x
(byte) bitmap_plot::x#0 reg byte x 101.0
(byte) bitmap_plot::x#1 reg byte x 101.0
(byte) bitmap_plot::x#2 reg byte x 101.0
(byte) bitmap_plot::x#3 reg byte x 101.0
(byte) bitmap_plot::x#4 reg byte x 102.5
(byte) bitmap_plot::y
(byte) bitmap_plot::y#0 reg byte y 202.0
(byte) bitmap_plot::y#1 reg byte y 202.0
(byte) bitmap_plot::y#2 reg byte y 202.0
(byte) bitmap_plot::y#3 reg byte y 202.0
(byte) bitmap_plot::y#4 reg byte y 204.0
(const byte[$100]) bitmap_plot_bit bitmap_plot_bit = { fill( $100, 0) }
(const byte[$100]) bitmap_plot_xhi bitmap_plot_xhi = { fill( $100, 0) }
(const byte[$100]) bitmap_plot_xlo bitmap_plot_xlo = { fill( $100, 0) }
(const byte[$100]) bitmap_plot_yhi bitmap_plot_yhi = { fill( $100, 0) }
(const byte[$100]) bitmap_plot_ylo bitmap_plot_ylo = { fill( $100, 0) }
(void()) dtvSetCpuBankSegment1((byte) dtvSetCpuBankSegment1::cpuBankIdx)
(label) dtvSetCpuBankSegment1::@return
(const byte*) dtvSetCpuBankSegment1::cpuBank cpuBank = (byte*) 255
(byte) dtvSetCpuBankSegment1::cpuBankIdx
(byte) dtvSetCpuBankSegment1::cpuBankIdx#1 reg byte a 202.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#11 reg byte a 4.0
(byte) dtvSetCpuBankSegment1::cpuBankIdx#13 reg byte a 105.0
(byte()) form_control()
(byte~) form_control::$13 reg byte a 4.0
(byte~) form_control::$14 reg byte a 4.0
(byte~) form_control::$15 reg byte a 4.0
(byte~) form_control::$16 reg byte a 4.0
(byte~) form_control::$24 reg byte a 4.0
(label) form_control::@1
(label) form_control::@10
(label) form_control::@11
(label) form_control::@12
(label) form_control::@13
(label) form_control::@14
(label) form_control::@15
(label) form_control::@16
(label) form_control::@17
(label) form_control::@18
(label) form_control::@19
(label) form_control::@2
(label) form_control::@20
(label) form_control::@21
(label) form_control::@22
(label) form_control::@23
(label) form_control::@3
(label) form_control::@4
(label) form_control::@5
(label) form_control::@6
(label) form_control::@7
(label) form_control::@8
(label) form_control::@9
(label) form_control::@return
(byte*) form_control::field
(byte) form_control::key_event
(byte) form_control::key_event#0 reg byte a 2.6666666666666665
(byte) form_control::return
(byte) form_control::return#0 reg byte a 2002.0
(byte) form_control::return#2 reg byte x 333.6666666666667
(signed byte) form_cursor_count
(signed byte) form_cursor_count#1 form_cursor_count zp[1]:16 0.3333333333333333
(signed byte) form_cursor_count#15 form_cursor_count zp[1]:16 0.4
(signed byte) form_cursor_count#16 form_cursor_count zp[1]:16 65.82352941176472
(signed byte) form_cursor_count#21 form_cursor_count zp[1]:16 221.2
(signed byte) form_cursor_count#5 form_cursor_count zp[1]:16 2.0
(byte) form_field_idx
(byte) form_field_idx#1 form_field_idx zp[1]:9 0.3333333333333333
(byte) form_field_idx#18 form_field_idx zp[1]:9 65.94117647058826
(byte) form_field_idx#28 form_field_idx zp[1]:9 30.75675675675673
(byte) form_field_idx#31 form_field_idx zp[1]:9 6.0
(byte) form_field_idx#5 form_field_idx zp[1]:9 2.0
(byte) form_field_idx#6 form_field_idx zp[1]:9 2.0
(byte*()) form_field_ptr((byte) form_field_ptr::field_idx)
(label) form_field_ptr::@return
(byte*) form_field_ptr::field
(byte) form_field_ptr::field_idx
(byte) form_field_ptr::field_idx#0 reg byte x 2002.0
(byte) form_field_ptr::field_idx#1 reg byte x 4.0
(byte) form_field_ptr::field_idx#2 reg byte x 335.66666666666674
(byte*) form_field_ptr::line
(word) form_field_ptr::line#0 line zp[2]:26 0.06451612903225806
(byte*) form_field_ptr::return
(byte) form_field_ptr::x
(byte) form_field_ptr::x#0 x zp[1]:30 33.90000000000003
(byte) form_field_ptr::y
(byte) form_field_ptr::y#0 reg byte a 6.0
(const byte) form_fields_cnt form_fields_cnt = (byte) $24
(const byte[]) form_fields_max form_fields_max = { (byte) $a, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) $d, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $d, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) 3, (byte) 1, (byte) 4, (byte) 1, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f, (byte) $f }
(const byte[]) form_fields_val form_fields_val = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte[]) form_fields_x form_fields_x = { (byte) 8, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $c, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $18, (byte) $19, (byte) $25, (byte) $25, (byte) $25, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25, (byte) $24, (byte) $25 }
(const byte[]) form_fields_y form_fields_y = { (byte) 2, (byte) 5, (byte) 6, (byte) 7, (byte) 8, (byte) 9, (byte) $a, (byte) $b, (byte) $c, (byte) $d, (byte) 5, (byte) 6, (byte) 6, (byte) 7, (byte) 7, (byte) 8, (byte) 8, (byte) $b, (byte) $c, (byte) $c, (byte) $d, (byte) $d, (byte) $e, (byte) $e, (byte) 5, (byte) 6, (byte) 7, (byte) $a, (byte) $b, (byte) $b, (byte) $c, (byte) $c, (byte) $d, (byte) $d, (byte) $e, (byte) $e }
(const byte[$19]) form_line_hi form_line_hi = { fill( $19, 0) }
(const byte[$19]) form_line_lo form_line_lo = { fill( $19, 0) }
(void()) form_mode()
(byte~) form_mode::$36 reg byte a 2002.0
(label) form_mode::@1
(label) form_mode::@10
(label) form_mode::@11
(label) form_mode::@12
(label) form_mode::@13
(label) form_mode::@14
(label) form_mode::@15
(label) form_mode::@16
(label) form_mode::@17
(label) form_mode::@18
(label) form_mode::@19
(label) form_mode::@2
(label) form_mode::@3
(label) form_mode::@4
(label) form_mode::@5
(label) form_mode::@6
(label) form_mode::@7
(label) form_mode::@8
(label) form_mode::@9
(label) form_mode::@return
(byte) form_mode::i
(byte) form_mode::i#1 reg byte x 151.5
(byte) form_mode::i#2 reg byte x 202.0
(byte) form_mode::preset_current
(byte) form_mode::preset_current#0 preset_current zp[1]:17 4.0
(byte) form_mode::preset_current#1 preset_current zp[1]:17 50.5
(byte) form_mode::preset_current#6 preset_current zp[1]:17 388.25
(void()) form_render_values()
(label) form_render_values::@1
(label) form_render_values::@2
(label) form_render_values::@3
(label) form_render_values::@return
(byte*) form_render_values::field
(byte) form_render_values::idx
(byte) form_render_values::idx#1 reg byte x 2002.0
(byte) form_render_values::idx#2 reg byte x 1001.0
(void()) form_set_screen((byte*) form_set_screen::screen)
(byte~) form_set_screen::$0 reg byte a 202.0
(byte~) form_set_screen::$1 reg byte a 202.0
(label) form_set_screen::@1
(label) form_set_screen::@return
(byte*) form_set_screen::line
(byte*) form_set_screen::line#1 line zp[2]:6 67.33333333333333
(byte*) form_set_screen::line#2 line zp[2]:6 80.8
(byte*) form_set_screen::screen
(byte) form_set_screen::y
(byte) form_set_screen::y#1 reg byte x 151.5
(byte) form_set_screen::y#2 reg byte x 67.33333333333333
(dword()) get_plane((byte) get_plane::idx)
(label) get_plane::@1
(label) get_plane::@10
(label) get_plane::@11
(label) get_plane::@12
(label) get_plane::@13
(label) get_plane::@14
(label) get_plane::@2
(label) get_plane::@3
(label) get_plane::@4
(label) get_plane::@5
(label) get_plane::@6
(label) get_plane::@7
(label) get_plane::@8
(label) get_plane::@9
(label) get_plane::@return
(byte) get_plane::idx
(byte) get_plane::idx#0 reg byte a 4.0
(byte) get_plane::idx#1 reg byte a 4.0
(byte) get_plane::idx#10 reg byte a 2.285714285714285
(dword) get_plane::return
(dword) get_plane::return#14 return zp[4]:2 1.0
(dword) get_plane::return#16 return zp[4]:2 4.0
(dword) get_plane::return#17 return zp[4]:2 4.0
(byte*()) get_vic_charset((byte) get_vic_charset::idx)
(label) get_vic_charset::@1
(label) get_vic_charset::@2
(label) get_vic_charset::@return
(byte) get_vic_charset::idx
(byte) get_vic_charset::idx#0 reg byte a 3.0
(byte*) get_vic_charset::return
(byte*) get_vic_charset::return#2 return zp[2]:14 0.6666666666666666
(byte*) get_vic_charset::return#4 return zp[2]:14 4.0
(byte*()) get_vic_screen((byte) get_vic_screen::idx)
(label) get_vic_screen::@1
(label) get_vic_screen::@2
(label) get_vic_screen::@3
(label) get_vic_screen::@4
(label) get_vic_screen::@5
(label) get_vic_screen::@return
(byte) get_vic_screen::idx
(byte) get_vic_screen::idx#0 reg byte a 4.0
(byte) get_vic_screen::idx#1 reg byte a 4.0
(byte) get_vic_screen::idx#2 reg byte a 2.8
(byte*) get_vic_screen::return
(byte*) get_vic_screen::return#10 return zp[2]:6 4.0
(byte*) get_vic_screen::return#11 return zp[2]:6 4.0
(byte*) get_vic_screen::return#5 return zp[2]:6 1.0
(void()) gfx_init()
(label) gfx_init::@1
(label) gfx_init::@10
(label) gfx_init::@11
(label) gfx_init::@12
(label) gfx_init::@13
(label) gfx_init::@14
(label) gfx_init::@2
(label) gfx_init::@3
(label) gfx_init::@4
(label) gfx_init::@5
(label) gfx_init::@6
(label) gfx_init::@7
(label) gfx_init::@8
(label) gfx_init::@9
(label) gfx_init::@return
(void()) gfx_init_charset()
(label) gfx_init_charset::@1
(label) gfx_init_charset::@2
(label) gfx_init_charset::@3
(label) gfx_init_charset::@4
(label) gfx_init_charset::@return
(byte) gfx_init_charset::c
(byte) gfx_init_charset::c#1 c zp[1]:13 16.5
(byte) gfx_init_charset::c#4 c zp[1]:13 3.142857142857143
(byte*) gfx_init_charset::chargen
(byte*) gfx_init_charset::chargen#1 chargen zp[2]:11 42.599999999999994
(byte*) gfx_init_charset::chargen#2 chargen zp[2]:11 104.66666666666666
(byte*) gfx_init_charset::chargen#3 chargen zp[2]:11 22.0
(byte*) gfx_init_charset::charset
(byte*) gfx_init_charset::charset#1 charset zp[2]:14 35.5
(byte*) gfx_init_charset::charset#2 charset zp[2]:14 157.0
(byte*) gfx_init_charset::charset#3 charset zp[2]:14 22.0
(byte) gfx_init_charset::l
(byte) gfx_init_charset::l#1 reg byte x 151.5
(byte) gfx_init_charset::l#2 reg byte x 50.5
(void()) gfx_init_plane_8bppchunky()
(word~) gfx_init_plane_8bppchunky::$8 $8 zp[2]:24 101.0
(label) gfx_init_plane_8bppchunky::@1
(label) gfx_init_plane_8bppchunky::@2
(label) gfx_init_plane_8bppchunky::@3
(label) gfx_init_plane_8bppchunky::@4
(label) gfx_init_plane_8bppchunky::@5
(label) gfx_init_plane_8bppchunky::@6
(label) gfx_init_plane_8bppchunky::@7
(label) gfx_init_plane_8bppchunky::@return
(byte) gfx_init_plane_8bppchunky::c
(byte) gfx_init_plane_8bppchunky::c#0 reg byte a 202.0
(byte*) gfx_init_plane_8bppchunky::gfxb
(byte*) gfx_init_plane_8bppchunky::gfxb#1 gfxb zp[2]:14 42.599999999999994
(byte*) gfx_init_plane_8bppchunky::gfxb#3 gfxb zp[2]:14 157.0
(byte*) gfx_init_plane_8bppchunky::gfxb#4 gfxb zp[2]:14 75.75
(byte*) gfx_init_plane_8bppchunky::gfxb#5 gfxb zp[2]:14 22.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 reg byte x 202.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 reg byte x 103.75
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 reg byte x 22.0
(byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 reg byte x 34.888888888888886
(word) gfx_init_plane_8bppchunky::x
(word) gfx_init_plane_8bppchunky::x#1 x zp[2]:11 151.5
(word) gfx_init_plane_8bppchunky::x#2 x zp[2]:11 30.299999999999997
(byte) gfx_init_plane_8bppchunky::y
(byte) gfx_init_plane_8bppchunky::y#1 y zp[1]:13 16.5
(byte) gfx_init_plane_8bppchunky::y#6 y zp[1]:13 9.461538461538462
(void()) gfx_init_plane_blank()
(label) gfx_init_plane_blank::@return
(void()) gfx_init_plane_charset8()
(byte~) gfx_init_plane_charset8::$7 reg byte a 2002.0
(label) gfx_init_plane_charset8::@1
(label) gfx_init_plane_charset8::@2
(label) gfx_init_plane_charset8::@3
(label) gfx_init_plane_charset8::@4
(label) gfx_init_plane_charset8::@5
(label) gfx_init_plane_charset8::@6
(label) gfx_init_plane_charset8::@7
(label) gfx_init_plane_charset8::@8
(label) gfx_init_plane_charset8::@9
(label) gfx_init_plane_charset8::@return
(byte) gfx_init_plane_charset8::bits
(byte) gfx_init_plane_charset8::bits#0 bits zp[1]:8 101.0
(byte) gfx_init_plane_charset8::bits#1 bits zp[1]:8 500.5
(byte) gfx_init_plane_charset8::bits#2 bits zp[1]:8 443.42857142857144
(byte) gfx_init_plane_charset8::c
(byte) gfx_init_plane_charset8::c#2 reg byte a 2002.0
(byte~) gfx_init_plane_charset8::c#3 reg byte a 2002.0
(byte) gfx_init_plane_charset8::ch
(byte) gfx_init_plane_charset8::ch#1 ch zp[1]:10 16.5
(byte) gfx_init_plane_charset8::ch#8 ch zp[1]:10 1.2941176470588236
(byte*) gfx_init_plane_charset8::chargen
(byte*) gfx_init_plane_charset8::chargen#1 chargen zp[2]:6 13.3125
(byte*) gfx_init_plane_charset8::chargen#2 chargen zp[2]:6 157.0
(byte*) gfx_init_plane_charset8::chargen#3 chargen zp[2]:6 22.0
(byte) gfx_init_plane_charset8::col
(byte) gfx_init_plane_charset8::col#1 col zp[1]:16 302.0
(byte) gfx_init_plane_charset8::col#2 col zp[1]:16 388.0
(byte) gfx_init_plane_charset8::col#5 col zp[1]:16 71.0
(byte) gfx_init_plane_charset8::col#6 col zp[1]:16 22.0
(byte) gfx_init_plane_charset8::cp
(byte) gfx_init_plane_charset8::cp#1 reg byte x 1501.5
(byte) gfx_init_plane_charset8::cp#2 reg byte x 222.44444444444446
(byte) gfx_init_plane_charset8::cr
(byte) gfx_init_plane_charset8::cr#1 cr zp[1]:13 151.5
(byte) gfx_init_plane_charset8::cr#6 cr zp[1]:13 14.428571428571429
(byte*) gfx_init_plane_charset8::gfxa
(byte*) gfx_init_plane_charset8::gfxa#1 gfxa zp[2]:11 234.8888888888889
(byte*) gfx_init_plane_charset8::gfxa#2 gfxa zp[2]:11 517.3333333333334
(byte*) gfx_init_plane_charset8::gfxa#5 gfxa zp[2]:11 71.0
(byte*) gfx_init_plane_charset8::gfxa#6 gfxa zp[2]:11 22.0
(byte) gfx_init_plane_charset8::gfxbCpuBank
(const byte) gfx_init_plane_charset8::gfxbCpuBank#0 gfxbCpuBank = (byte)(const dword) PLANE_CHARSET8/(word) $4000
(void()) gfx_init_plane_fill((dword) gfx_init_plane_fill::plane_addr , (byte) gfx_init_plane_fill::fill)
(dword~) gfx_init_plane_fill::$0 $0 zp[4]:18 4.0
(word~) gfx_init_plane_fill::$1 $1 zp[2]:22 4.0
(word~) gfx_init_plane_fill::$4 $4 zp[2]:14 4.0
(word~) gfx_init_plane_fill::$5 $5 zp[2]:14 4.0
(label) gfx_init_plane_fill::@1
(label) gfx_init_plane_fill::@2
(label) gfx_init_plane_fill::@3
(label) gfx_init_plane_fill::@4
(label) gfx_init_plane_fill::@5
(label) gfx_init_plane_fill::@return
(byte) gfx_init_plane_fill::bx
(byte) gfx_init_plane_fill::bx#1 reg byte x 151.5
(byte) gfx_init_plane_fill::bx#2 reg byte x 67.33333333333333
(byte) gfx_init_plane_fill::by
(byte) gfx_init_plane_fill::by#1 by zp[1]:16 16.5
(byte) gfx_init_plane_fill::by#4 by zp[1]:16 3.6666666666666665
(byte) gfx_init_plane_fill::fill
(byte) gfx_init_plane_fill::fill#6 fill zp[1]:8 5.611111111111111
(byte*) gfx_init_plane_fill::gfxb
(word) gfx_init_plane_fill::gfxb#0 gfxb zp[2]:14 2.0
(byte*) gfx_init_plane_fill::gfxb#1 gfxb zp[2]:14 42.599999999999994
(byte*) gfx_init_plane_fill::gfxb#2 gfxb zp[2]:14 157.0
(byte*) gfx_init_plane_fill::gfxb#3 gfxb zp[2]:14 24.0
(byte*~) gfx_init_plane_fill::gfxb#6 gfxb zp[2]:14 4.0
(byte) gfx_init_plane_fill::gfxbCpuBank
(byte) gfx_init_plane_fill::gfxbCpuBank#0 reg byte a 4.0
(dword) gfx_init_plane_fill::plane_addr
(dword) gfx_init_plane_fill::plane_addr#3 plane_addr zp[4]:2 0.6666666666666666
(void()) gfx_init_plane_full()
(label) gfx_init_plane_full::@return
(void()) gfx_init_plane_horisontal()
(byte~) gfx_init_plane_horisontal::$7 reg byte a 202.0
(label) gfx_init_plane_horisontal::@1
(label) gfx_init_plane_horisontal::@2
(label) gfx_init_plane_horisontal::@3
(label) gfx_init_plane_horisontal::@4
(label) gfx_init_plane_horisontal::@5
(label) gfx_init_plane_horisontal::@6
(label) gfx_init_plane_horisontal::@7
(label) gfx_init_plane_horisontal::@return
(byte) gfx_init_plane_horisontal::ax
(byte) gfx_init_plane_horisontal::ax#1 reg byte x 151.5
(byte) gfx_init_plane_horisontal::ax#2 reg byte x 25.25
(byte) gfx_init_plane_horisontal::ay
(byte) gfx_init_plane_horisontal::ay#1 ay zp[1]:10 16.5
(byte) gfx_init_plane_horisontal::ay#4 ay zp[1]:10 11.181818181818182
(byte*) gfx_init_plane_horisontal::gfxa
(byte*) gfx_init_plane_horisontal::gfxa#1 gfxa zp[2]:6 202.0
(byte*) gfx_init_plane_horisontal::gfxa#2 gfxa zp[2]:6 202.0
(byte*) gfx_init_plane_horisontal::gfxa#3 gfxa zp[2]:6 103.2
(byte*) gfx_init_plane_horisontal::gfxa#6 gfxa zp[2]:6 22.0
(byte*) gfx_init_plane_horisontal::gfxa#7 gfxa zp[2]:6 62.8
(byte) gfx_init_plane_horisontal::gfxbCpuBank
(const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 gfxbCpuBank = (byte)(const dword) PLANE_HORISONTAL/(word) $4000
(void()) gfx_init_plane_horisontal2()
(byte~) gfx_init_plane_horisontal2::$7 reg byte a 202.0
(label) gfx_init_plane_horisontal2::@1
(label) gfx_init_plane_horisontal2::@2
(label) gfx_init_plane_horisontal2::@3
(label) gfx_init_plane_horisontal2::@4
(label) gfx_init_plane_horisontal2::@return
(byte) gfx_init_plane_horisontal2::ax
(byte) gfx_init_plane_horisontal2::ax#1 reg byte x 151.5
(byte) gfx_init_plane_horisontal2::ax#2 reg byte x 40.4
(byte) gfx_init_plane_horisontal2::ay
(byte) gfx_init_plane_horisontal2::ay#1 ay zp[1]:9 16.5
(byte) gfx_init_plane_horisontal2::ay#4 ay zp[1]:9 15.375
(byte*) gfx_init_plane_horisontal2::gfxa
(byte*) gfx_init_plane_horisontal2::gfxa#1 gfxa zp[2]:6 42.599999999999994
(byte*) gfx_init_plane_horisontal2::gfxa#2 gfxa zp[2]:6 78.5
(byte*) gfx_init_plane_horisontal2::gfxa#3 gfxa zp[2]:6 22.0
(byte) gfx_init_plane_horisontal2::gfxbCpuBank
(const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 gfxbCpuBank = (byte)(const dword) PLANE_HORISONTAL2/(word) $4000
(byte) gfx_init_plane_horisontal2::row
(byte) gfx_init_plane_horisontal2::row#0 reg byte a 202.0
(const byte[]) gfx_init_plane_horisontal2::row_bitmask row_bitmask = { (byte) 0, (byte) $55, (byte) $aa, (byte) $ff }
(void()) gfx_init_plane_vertical()
(label) gfx_init_plane_vertical::@1
(label) gfx_init_plane_vertical::@2
(label) gfx_init_plane_vertical::@3
(label) gfx_init_plane_vertical::@4
(label) gfx_init_plane_vertical::@return
(byte) gfx_init_plane_vertical::bx
(byte) gfx_init_plane_vertical::bx#1 reg byte x 151.5
(byte) gfx_init_plane_vertical::bx#2 reg byte x 67.33333333333333
(byte) gfx_init_plane_vertical::by
(byte) gfx_init_plane_vertical::by#1 by zp[1]:17 16.5
(byte) gfx_init_plane_vertical::by#4 by zp[1]:17 3.6666666666666665
(byte*) gfx_init_plane_vertical::gfxb
(byte*) gfx_init_plane_vertical::gfxb#1 gfxb zp[2]:6 42.599999999999994
(byte*) gfx_init_plane_vertical::gfxb#2 gfxb zp[2]:6 157.0
(byte*) gfx_init_plane_vertical::gfxb#3 gfxb zp[2]:6 22.0
(byte) gfx_init_plane_vertical::gfxbCpuBank
(const byte) gfx_init_plane_vertical::gfxbCpuBank#0 gfxbCpuBank = (byte)(const dword) PLANE_VERTICAL/(word) $4000
(void()) gfx_init_plane_vertical2()
(label) gfx_init_plane_vertical2::@return
(void()) gfx_init_screen0()
(byte~) gfx_init_screen0::$0 reg byte a 202.0
(byte~) gfx_init_screen0::$1 $1 zp[1]:31 101.0
(byte~) gfx_init_screen0::$2 reg byte a 202.0
(byte~) gfx_init_screen0::$3 reg byte a 202.0
(label) gfx_init_screen0::@1
(label) gfx_init_screen0::@2
(label) gfx_init_screen0::@3
(label) gfx_init_screen0::@return
(byte*) gfx_init_screen0::ch
(byte*) gfx_init_screen0::ch#1 ch zp[2]:22 42.599999999999994
(byte*) gfx_init_screen0::ch#2 ch zp[2]:22 52.33333333333333
(byte*) gfx_init_screen0::ch#3 ch zp[2]:22 22.0
(byte) gfx_init_screen0::cx
(byte) gfx_init_screen0::cx#1 reg byte x 151.5
(byte) gfx_init_screen0::cx#2 reg byte x 43.285714285714285
(byte) gfx_init_screen0::cy
(byte) gfx_init_screen0::cy#1 cy zp[1]:17 16.5
(byte) gfx_init_screen0::cy#4 cy zp[1]:17 12.299999999999999
(void()) gfx_init_screen1()
(byte~) gfx_init_screen1::$0 reg byte a 202.0
(byte~) gfx_init_screen1::$1 reg byte a 202.0
(label) gfx_init_screen1::@1
(label) gfx_init_screen1::@2
(label) gfx_init_screen1::@3
(label) gfx_init_screen1::@return
(byte*) gfx_init_screen1::ch
(byte*) gfx_init_screen1::ch#1 ch zp[2]:22 42.599999999999994
(byte*) gfx_init_screen1::ch#2 ch zp[2]:22 78.5
(byte*) gfx_init_screen1::ch#3 ch zp[2]:22 22.0
(byte) gfx_init_screen1::cx
(byte) gfx_init_screen1::cx#1 reg byte x 151.5
(byte) gfx_init_screen1::cx#2 reg byte x 60.599999999999994
(byte) gfx_init_screen1::cy
(byte) gfx_init_screen1::cy#1 cy zp[1]:17 16.5
(byte) gfx_init_screen1::cy#4 cy zp[1]:17 15.375
(void()) gfx_init_screen2()
(byte~) gfx_init_screen2::$0 reg byte a 202.0
(byte~) gfx_init_screen2::$3 reg byte a 202.0
(byte~) gfx_init_screen2::$4 reg byte a 202.0
(label) gfx_init_screen2::@1
(label) gfx_init_screen2::@2
(label) gfx_init_screen2::@3
(label) gfx_init_screen2::@return
(byte*) gfx_init_screen2::ch
(byte*) gfx_init_screen2::ch#1 ch zp[2]:22 42.599999999999994
(byte*) gfx_init_screen2::ch#2 ch zp[2]:22 44.85714285714286
(byte*) gfx_init_screen2::ch#3 ch zp[2]:22 22.0
(byte) gfx_init_screen2::col
(byte) gfx_init_screen2::col#0 reg byte y 151.5
(byte) gfx_init_screen2::col2
(byte) gfx_init_screen2::col2#0 col2 zp[1]:31 101.0
(byte) gfx_init_screen2::cx
(byte) gfx_init_screen2::cx#1 reg byte x 151.5
(byte) gfx_init_screen2::cx#2 reg byte x 37.875
(byte) gfx_init_screen2::cy
(byte) gfx_init_screen2::cy#1 cy zp[1]:16 16.5
(byte) gfx_init_screen2::cy#4 cy zp[1]:16 11.181818181818182
(void()) gfx_init_screen3()
(byte~) gfx_init_screen3::$0 reg byte a 202.0
(byte~) gfx_init_screen3::$1 $1 zp[1]:30 101.0
(byte~) gfx_init_screen3::$2 reg byte a 202.0
(byte~) gfx_init_screen3::$3 reg byte a 202.0
(label) gfx_init_screen3::@1
(label) gfx_init_screen3::@2
(label) gfx_init_screen3::@3
(label) gfx_init_screen3::@return
(byte*) gfx_init_screen3::ch
(byte*) gfx_init_screen3::ch#1 ch zp[2]:22 42.599999999999994
(byte*) gfx_init_screen3::ch#2 ch zp[2]:22 52.33333333333333
(byte*) gfx_init_screen3::ch#3 ch zp[2]:22 22.0
(byte) gfx_init_screen3::cx
(byte) gfx_init_screen3::cx#1 reg byte x 151.5
(byte) gfx_init_screen3::cx#2 reg byte x 43.285714285714285
(byte) gfx_init_screen3::cy
(byte) gfx_init_screen3::cy#1 cy zp[1]:16 16.5
(byte) gfx_init_screen3::cy#4 cy zp[1]:16 12.299999999999999
(void()) gfx_init_screen4()
(label) gfx_init_screen4::@1
(label) gfx_init_screen4::@2
(label) gfx_init_screen4::@3
(label) gfx_init_screen4::@return
(byte*) gfx_init_screen4::ch
(byte*) gfx_init_screen4::ch#1 ch zp[2]:14 42.599999999999994
(byte*) gfx_init_screen4::ch#2 ch zp[2]:14 157.0
(byte*) gfx_init_screen4::ch#3 ch zp[2]:14 22.0
(byte) gfx_init_screen4::cx
(byte) gfx_init_screen4::cx#1 reg byte x 151.5
(byte) gfx_init_screen4::cx#2 reg byte x 67.33333333333333
(byte) gfx_init_screen4::cy
(byte) gfx_init_screen4::cy#1 cy zp[1]:13 16.5
(byte) gfx_init_screen4::cy#4 cy zp[1]:13 3.6666666666666665
(void()) gfx_init_vic_bitmap()
(label) gfx_init_vic_bitmap::@1
(label) gfx_init_vic_bitmap::@2
(label) gfx_init_vic_bitmap::@3
(label) gfx_init_vic_bitmap::@4
(label) gfx_init_vic_bitmap::@return
(byte) gfx_init_vic_bitmap::l
(byte) gfx_init_vic_bitmap::l#1 l zp[1]:8 22.0
(byte) gfx_init_vic_bitmap::l#2 l zp[1]:8 11.0
(const byte) gfx_init_vic_bitmap::lines_cnt lines_cnt = (byte) 9
(const byte[]) gfx_init_vic_bitmap::lines_x lines_x = { (byte) 0, (byte) $ff, (byte) $ff, (byte) 0, (byte) 0, (byte) $80, (byte) $ff, (byte) $80, (byte) 0, (byte) $80 }
(const byte[]) gfx_init_vic_bitmap::lines_y lines_y = { (byte) 0, (byte) 0, (byte) $c7, (byte) $c7, (byte) 0, (byte) 0, (byte) $64, (byte) $c7, (byte) $64, (byte) 0 }
(void()) gfx_mode()
(byte~) gfx_mode::$20 reg byte a 4.0
(dword~) gfx_mode::$22 $22 zp[4]:2 4.0
(byte~) gfx_mode::$25 reg byte a 4.0
(word~) gfx_mode::$26 $26 zp[2]:26 2.0
(byte~) gfx_mode::$27 reg byte a 4.0
(word~) gfx_mode::$28 $28 zp[2]:28 4.0
(byte~) gfx_mode::$29 reg byte a 4.0
(byte~) gfx_mode::$30 reg byte a 4.0
(byte~) gfx_mode::$31 reg byte a 4.0
(byte~) gfx_mode::$32 reg byte a 4.0
(byte~) gfx_mode::$33 reg byte a 4.0
(byte~) gfx_mode::$34 reg byte a 4.0
(dword~) gfx_mode::$36 $36 zp[4]:2 4.0
(byte~) gfx_mode::$39 reg byte a 4.0
(word~) gfx_mode::$40 $40 zp[2]:22 2.0
(byte~) gfx_mode::$41 reg byte a 4.0
(word~) gfx_mode::$42 $42 zp[2]:24 4.0
(byte~) gfx_mode::$43 reg byte a 4.0
(byte~) gfx_mode::$44 reg byte a 4.0
(byte~) gfx_mode::$45 reg byte a 4.0
(byte~) gfx_mode::$46 reg byte a 4.0
(byte~) gfx_mode::$47 reg byte a 4.0
(byte*~) gfx_mode::$53 $53 zp[2]:6 2.0
(word~) gfx_mode::$54 $54 zp[2]:6 4.0
(word~) gfx_mode::$55 $55 zp[2]:6 2.0
(byte~) gfx_mode::$56 $56 zp[1]:31 0.5
(byte*~) gfx_mode::$58 $58 zp[2]:14 2.0
(word~) gfx_mode::$59 $59 zp[2]:14 4.0
(byte~) gfx_mode::$60 reg byte a 4.0
(byte~) gfx_mode::$61 reg byte a 4.0
(byte~) gfx_mode::$62 reg byte a 4.0
(byte~) gfx_mode::$64 reg byte a 4.0
(byte~) gfx_mode::$65 reg byte a 4.0
(byte~) gfx_mode::$66 reg byte a 4.0
(byte~) gfx_mode::$67 reg byte a 4.0
(byte~) gfx_mode::$68 reg byte a 4.0
(byte~) gfx_mode::$69 reg byte a 4.0
(byte~) gfx_mode::$70 reg byte a 4.0
(byte~) gfx_mode::$71 reg byte a 4.0
(label) gfx_mode::@1
(label) gfx_mode::@10
(label) gfx_mode::@11
(label) gfx_mode::@12
(label) gfx_mode::@13
(label) gfx_mode::@14
(label) gfx_mode::@15
(label) gfx_mode::@16
(label) gfx_mode::@17
(label) gfx_mode::@18
(label) gfx_mode::@19
(label) gfx_mode::@2
(label) gfx_mode::@20
(label) gfx_mode::@21
(label) gfx_mode::@22
(label) gfx_mode::@23
(label) gfx_mode::@24
(label) gfx_mode::@25
(label) gfx_mode::@26
(label) gfx_mode::@27
(label) gfx_mode::@28
(label) gfx_mode::@29
(label) gfx_mode::@3
(label) gfx_mode::@30
(label) gfx_mode::@31
(label) gfx_mode::@32
(label) gfx_mode::@33
(label) gfx_mode::@4
(label) gfx_mode::@5
(label) gfx_mode::@6
(label) gfx_mode::@7
(label) gfx_mode::@8
(label) gfx_mode::@9
(label) gfx_mode::@return
(byte*) gfx_mode::col
(byte*) gfx_mode::col#1 col zp[2]:11 350.5
(byte*) gfx_mode::col#2 col zp[2]:11 1552.0
(byte*) gfx_mode::col#3 col zp[2]:11 202.0
(byte) gfx_mode::cx
(byte) gfx_mode::cx#1 reg byte x 1501.5
(byte) gfx_mode::cx#2 reg byte x 500.5
(byte) gfx_mode::cy
(byte) gfx_mode::cy#1 cy zp[1]:10 151.5
(byte) gfx_mode::cy#4 cy zp[1]:10 28.857142857142858
(byte) gfx_mode::dtv_control
(byte) gfx_mode::dtv_control#10 reg byte x 4.0
(byte) gfx_mode::dtv_control#11 reg byte x 4.0
(byte) gfx_mode::dtv_control#12 reg byte x 6.0
(byte) gfx_mode::dtv_control#13 reg byte x 4.0
(byte) gfx_mode::dtv_control#14 reg byte x 2.0
(byte) gfx_mode::dtv_control#15 reg byte x 4.0
(byte) gfx_mode::dtv_control#2 reg byte x 4.0
(byte) gfx_mode::dtv_control#3 reg byte x 4.0
(byte) gfx_mode::dtv_control#4 reg byte x 4.0
(byte) gfx_mode::dtv_control#5 reg byte x 4.0
(byte) gfx_mode::dtv_control#6 reg byte x 4.0
(byte) gfx_mode::i
(byte) gfx_mode::i#1 reg byte x 151.5
(byte) gfx_mode::i#2 reg byte x 202.0
(byte) gfx_mode::j
(byte) gfx_mode::j#1 reg byte x 151.5
(byte) gfx_mode::j#2 reg byte x 202.0
(byte) gfx_mode::keyboard_event
(byte) gfx_mode::keyboard_event#0 reg byte a 202.0
(dword) gfx_mode::plane_a
(dword) gfx_mode::plane_a#0 plane_a zp[4]:2 1.0
(byte) gfx_mode::plane_a_offs
(byte) gfx_mode::plane_a_offs#0 reg byte x 0.8
(dword) gfx_mode::plane_b
(dword) gfx_mode::plane_b#0 plane_b zp[4]:2 1.0
(byte) gfx_mode::plane_b_offs
(byte) gfx_mode::plane_b_offs#0 reg byte x 0.8
(byte*) gfx_mode::vic_colors
(byte*) gfx_mode::vic_colors#0 vic_colors zp[2]:6 4.0
(byte*) gfx_mode::vic_colors#1 vic_colors zp[2]:6 420.59999999999997
(byte*) gfx_mode::vic_colors#2 vic_colors zp[2]:6 1034.6666666666667
(byte*) gfx_mode::vic_colors#3 vic_colors zp[2]:6 204.0
(byte) gfx_mode::vic_control
(byte) gfx_mode::vic_control#2 reg byte x 4.0
(byte) gfx_mode::vic_control#4 reg byte x 6.0
(byte) gfx_mode::vic_control#5 reg byte x 2.0
(byte) gfx_mode::vic_control2
(byte) gfx_mode::vic_control2#2 reg byte a 2.0
(byte()) keyboard_event_get()
(label) keyboard_event_get::@1
(label) keyboard_event_get::@return
(byte) keyboard_event_get::return
(byte) keyboard_event_get::return#1 reg byte a 4.0
(byte) keyboard_event_get::return#2 reg byte a 26.25
(byte) keyboard_event_get::return#3 reg byte a 202.0
(byte) keyboard_event_get::return#4 reg byte a 4.0
(byte()) keyboard_event_pressed((byte) keyboard_event_pressed::keycode)
(byte~) keyboard_event_pressed::$0 reg byte a 4.0
(byte~) keyboard_event_pressed::$1 reg byte a 4.0
(label) keyboard_event_pressed::@return
(byte) keyboard_event_pressed::keycode
(byte) keyboard_event_pressed::keycode#4 keycode zp[1]:13 1.3333333333333333
(byte) keyboard_event_pressed::return
(byte) keyboard_event_pressed::return#0 reg byte a 4.0
(byte) keyboard_event_pressed::return#1 reg byte a 4.0
(byte) keyboard_event_pressed::return#10 reg byte a 1.6666666666666665
(byte) keyboard_event_pressed::return#2 reg byte a 4.0
(byte) keyboard_event_pressed::return#3 reg byte a 4.0
(byte) keyboard_event_pressed::row_bits
(byte) keyboard_event_pressed::row_bits#0 row_bits zp[1]:31 2.0
(void()) keyboard_event_scan()
(byte~) keyboard_event_scan::$0 reg byte a 4.0
(byte~) keyboard_event_scan::$15 reg byte a 200002.0
(byte~) keyboard_event_scan::$16 reg byte a 200002.0
(byte~) keyboard_event_scan::$23 reg byte a 200002.0
(byte~) keyboard_event_scan::$3 reg byte a 4.0
(byte~) keyboard_event_scan::$6 reg byte a 4.0
(byte~) keyboard_event_scan::$9 reg byte a 4.0
(label) keyboard_event_scan::@1
(label) keyboard_event_scan::@10
(label) keyboard_event_scan::@11
(label) keyboard_event_scan::@12
(label) keyboard_event_scan::@13
(label) keyboard_event_scan::@14
(label) keyboard_event_scan::@15
(label) keyboard_event_scan::@16
(label) keyboard_event_scan::@17
(label) keyboard_event_scan::@18
(label) keyboard_event_scan::@19
(label) keyboard_event_scan::@2
(label) keyboard_event_scan::@20
(label) keyboard_event_scan::@21
(label) keyboard_event_scan::@22
(label) keyboard_event_scan::@23
(label) keyboard_event_scan::@3
(label) keyboard_event_scan::@4
(label) keyboard_event_scan::@5
(label) keyboard_event_scan::@6
(label) keyboard_event_scan::@7
(label) keyboard_event_scan::@8
(label) keyboard_event_scan::@9
(label) keyboard_event_scan::@return
(byte) keyboard_event_scan::col
(byte) keyboard_event_scan::col#1 reg byte x 150001.5
(byte) keyboard_event_scan::col#2 reg byte x 28571.714285714286
(byte) keyboard_event_scan::event_type
(byte) keyboard_event_scan::event_type#0 reg byte a 200002.0
(byte) keyboard_event_scan::keycode
(byte) keyboard_event_scan::keycode#1 keycode zp[1]:13 20002.0
(byte) keyboard_event_scan::keycode#10 keycode zp[1]:13 31538.846153846156
(byte) keyboard_event_scan::keycode#11 keycode zp[1]:13 5000.5
(byte) keyboard_event_scan::keycode#13 keycode zp[1]:13 10001.0
(byte) keyboard_event_scan::keycode#14 keycode zp[1]:13 52500.75
(byte) keyboard_event_scan::row
(byte) keyboard_event_scan::row#1 row zp[1]:10 15001.5
(byte) keyboard_event_scan::row#2 row zp[1]:10 6000.24
(byte) keyboard_event_scan::row_scan
(byte) keyboard_event_scan::row_scan#0 row_scan zp[1]:31 12778.055555555557
(const byte[8]) keyboard_events keyboard_events = { fill( 8, 0) }
(byte) keyboard_events_size
(byte) keyboard_events_size#1 keyboard_events_size zp[1]:8 200002.0
(byte) keyboard_events_size#100 keyboard_events_size zp[1]:8 882.6176470588235
(byte) keyboard_events_size#108 keyboard_events_size zp[1]:8 102001.2
(byte) keyboard_events_size#109 keyboard_events_size zp[1]:8 4286.428571428572
(byte) keyboard_events_size#18 keyboard_events_size zp[1]:8 81000.90000000001
(byte) keyboard_events_size#2 keyboard_events_size zp[1]:8 200002.0
(byte) keyboard_events_size#24 keyboard_events_size zp[1]:8 6.766666666666667
(byte) keyboard_events_size#27 keyboard_events_size zp[1]:8 0.3333333333333333
(byte) keyboard_events_size#4 keyboard_events_size zp[1]:8 3.0
(byte) keyboard_events_size#47 keyboard_events_size zp[1]:8 73.73333333333335
(byte) keyboard_events_size#99 keyboard_events_size zp[1]:8 105.0
(void()) keyboard_init()
(label) keyboard_init::@return
(const byte[8]) keyboard_matrix_col_bitmask keyboard_matrix_col_bitmask = { (byte) 1, (byte) 2, (byte) 4, (byte) 8, (byte) $10, (byte) $20, (byte) $40, (byte) $80 }
(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
(label) keyboard_matrix_read::@return
(byte) keyboard_matrix_read::return
(byte) keyboard_matrix_read::return#0 reg byte a 3334.333333333333
(byte) keyboard_matrix_read::return#2 reg byte a 20002.0
(byte) keyboard_matrix_read::row_pressed_bits
(byte) keyboard_matrix_read::rowid
(byte) keyboard_matrix_read::rowid#0 reg byte x 10003.0
(const byte[8]) keyboard_matrix_row_bitmask keyboard_matrix_row_bitmask = { (byte) $fe, (byte) $fd, (byte) $fb, (byte) $f7, (byte) $ef, (byte) $df, (byte) $bf, (byte) $7f }
(byte) keyboard_modifiers
(byte) keyboard_modifiers#18 reg byte x 0.8
(byte) keyboard_modifiers#19 reg byte x 1.6
(byte) keyboard_modifiers#20 reg byte x 1.6
(byte) keyboard_modifiers#21 reg byte x 0.7272727272727273
(byte) keyboard_modifiers#3 reg byte x 4.0
(byte) keyboard_modifiers#4 reg byte x 4.0
(byte) keyboard_modifiers#5 reg byte x 4.0
(const byte[8]) keyboard_scan_values keyboard_scan_values = { fill( 8, 0) }
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
(label) memset::@1
(label) memset::@2
(label) memset::@3
(label) memset::@return
(byte) memset::c
(const byte) memset::c#0 c = (byte) ' '
(byte*) memset::dst
(byte*) memset::dst#1 dst zp[2]:11 202.0
(byte*) memset::dst#2 dst zp[2]:11 135.33333333333331
(byte*~) memset::dst#4 dst zp[2]:11 4.0
(byte*) memset::end
(byte*) memset::end#0 end zp[2]:28 17.166666666666664
(word) memset::num
(const word) memset::num#0 num = (word) $3e8
(void*) memset::return
(void*) memset::str
(void*) memset::str#0 str zp[2]:11 0.6666666666666666
(const byte[]) preset_8bpppixelcell preset_8bpppixelcell = { (byte) $a, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $b, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte[]) preset_chunky preset_chunky = { (byte) 7, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 6, (byte) 0, (byte) 0, (byte) 0, (byte) 8, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte[]) preset_ecmchar preset_ecmchar = { (byte) 1, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 0, (byte) 5, (byte) 0, (byte) 6 }
(const byte[]) preset_hi_ecmchar preset_hi_ecmchar = { (byte) 5, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 3, (byte) 4, (byte) 6, (byte) 8, (byte) 9, (byte) $c, (byte) $c }
(const byte[]) preset_hi_stdchar preset_hi_stdchar = { (byte) 4, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte[]) preset_mcbm preset_mcbm = { (byte) 3, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte[]) preset_sixsfred preset_sixsfred = { (byte) 8, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $a, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte[]) preset_sixsfred2 preset_sixsfred2 = { (byte) 9, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 9, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) $a, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte[]) preset_stdbm preset_stdbm = { (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 2, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte[]) preset_stdchar preset_stdchar = { (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(const byte[]) preset_twoplane preset_twoplane = { (byte) 6, (byte) 1, (byte) 0, (byte) 1, (byte) 1, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 7, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 8, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 0, (byte) 1, (byte) 7, (byte) 0, (byte) $d, (byte) 4, (byte) 0, (byte) 0, (byte) 0, (byte) 0 }
(byte*) print_char_cursor
(byte*) print_char_cursor#1 print_char_cursor zp[2]:11 2002.0
(byte*) print_char_cursor#20 print_char_cursor zp[2]:11 821.0
(byte*) print_char_cursor#22 print_char_cursor zp[2]:11 102.0
(byte*) print_char_cursor#38 print_char_cursor zp[2]:11 572.0
(byte*~) print_char_cursor#73 print_char_cursor zp[2]:11 4.0
(byte*~) print_char_cursor#74 print_char_cursor zp[2]:11 202.0
(void()) print_cls()
(label) print_cls::@return
(const byte[]) print_hextab print_hextab = (string) "0123456789abcdef"z
(byte*) print_line_cursor
(byte*) print_line_cursor#2 print_line_cursor zp[2]:14 8.749999999999998
(byte*) print_line_cursor#21 print_line_cursor zp[2]:14 2004.0
(byte*) print_line_cursor#22 print_line_cursor zp[2]:14 641.0
(void()) print_ln()
(label) print_ln::@1
(label) print_ln::@return
(byte*) print_screen
(void()) print_set_screen((byte*) print_set_screen::screen)
(label) print_set_screen::@return
(byte*) print_set_screen::screen
(byte*) print_set_screen::screen#2 screen zp[2]:14 0.26666666666666666
(void()) print_str_at((byte*) print_str_at::str , (byte*) print_str_at::at)
(label) print_str_at::@1
(label) print_str_at::@2
(label) print_str_at::@return
(byte*) print_str_at::at
(byte*) print_str_at::at#0 at zp[2]:11 1001.0
(byte*) print_str_at::at#2 at zp[2]:11 1001.0
(byte*) print_str_at::str
(byte*) print_str_at::str#0 str zp[2]:6 2002.0
(byte*) print_str_at::str#1 str zp[2]:6 2.0
(byte*) print_str_at::str#2 str zp[2]:6 1001.5
(void()) print_str_lines((byte*) print_str_lines::str)
(label) print_str_lines::@1
(label) print_str_lines::@2
(label) print_str_lines::@3
(label) print_str_lines::@4
(label) print_str_lines::@5
(label) print_str_lines::@6
(label) print_str_lines::@return
(byte) print_str_lines::ch
(byte) print_str_lines::ch#0 reg byte a 667.3333333333334
(byte*) print_str_lines::str
(byte*) print_str_lines::str#0 str zp[2]:6 233.66666666666669
(byte*) print_str_lines::str#3 str zp[2]:6 152.5
(byte*) print_str_lines::str#4 str zp[2]:6 1552.0
(byte*) print_str_lines::str#5 str zp[2]:6 1.0
(void()) render_preset_name((byte) render_preset_name::idx)
(label) render_preset_name::@1
(label) render_preset_name::@10
(label) render_preset_name::@11
(label) render_preset_name::@12
(label) render_preset_name::@2
(label) render_preset_name::@3
(label) render_preset_name::@4
(label) render_preset_name::@5
(label) render_preset_name::@6
(label) render_preset_name::@7
(label) render_preset_name::@8
(label) render_preset_name::@9
(label) render_preset_name::@return
(byte) render_preset_name::idx
(byte) render_preset_name::idx#0 reg byte a 4.0
(byte) render_preset_name::idx#1 reg byte a 202.0
(byte) render_preset_name::idx#10 reg byte a 11.363636363636362
(byte*) render_preset_name::name
(const byte*) render_preset_name::name#1 name#1 = (string) "Standard Charset              "
(const byte*) render_preset_name::name#10 name#10 = (string) "Sixs Fred 2                   "
(const byte*) render_preset_name::name#11 name#11 = (string) "8bpp Pixel Cell               "
(byte*) render_preset_name::name#13 name zp[2]:6 2.0
(const byte*) render_preset_name::name#2 name#2 = (string) "Extended Color Charset        "
(const byte*) render_preset_name::name#3 name#3 = (string) "Standard Bitmap               "
(const byte*) render_preset_name::name#4 name#4 = (string) "Multicolor Bitmap             "
(const byte*) render_preset_name::name#5 name#5 = (string) "Hicolor Charset               "
(const byte*) render_preset_name::name#6 name#6 = (string) "Hicolor Extended Color Charset"
(const byte*) render_preset_name::name#7 name#7 = (string) "Twoplane Bitmap               "
(const byte*) render_preset_name::name#8 name#8 = (string) "Chunky 8bpp                   "
(const byte*) render_preset_name::name#9 name#9 = (string) "Sixs Fred                     "

reg byte x [ gfx_mode::dtv_control#12 gfx_mode::dtv_control#6 gfx_mode::dtv_control#13 gfx_mode::dtv_control#5 gfx_mode::dtv_control#11 gfx_mode::dtv_control#4 gfx_mode::dtv_control#10 gfx_mode::dtv_control#3 gfx_mode::dtv_control#15 gfx_mode::dtv_control#14 gfx_mode::dtv_control#2 ]
reg byte x [ gfx_mode::vic_control#4 gfx_mode::vic_control#2 gfx_mode::vic_control#5 ]
reg byte a [ gfx_mode::vic_control2#2 ]
reg byte x [ gfx_mode::cx#2 gfx_mode::cx#1 ]
reg byte x [ gfx_mode::j#2 gfx_mode::j#1 ]
reg byte x [ gfx_mode::i#2 gfx_mode::i#1 ]
reg byte a [ keyboard_event_get::return#2 keyboard_event_get::return#1 ]
reg byte x [ keyboard_modifiers#21 keyboard_modifiers#20 keyboard_modifiers#19 keyboard_modifiers#18 keyboard_modifiers#3 keyboard_modifiers#4 keyboard_modifiers#5 ]
reg byte x [ keyboard_event_scan::col#2 keyboard_event_scan::col#1 ]
reg byte a [ get_vic_screen::idx#2 get_vic_screen::idx#0 get_vic_screen::idx#1 ]
reg byte a [ get_plane::idx#10 get_plane::idx#1 get_plane::idx#0 ]
reg byte x [ form_mode::i#2 form_mode::i#1 ]
reg byte a [ render_preset_name::idx#10 render_preset_name::idx#0 render_preset_name::idx#1 ]
reg byte x [ form_render_values::idx#2 form_render_values::idx#1 ]
reg byte x [ form_field_ptr::field_idx#2 form_field_ptr::field_idx#1 form_field_ptr::field_idx#0 ]
reg byte y [ apply_preset::i#2 apply_preset::i#1 ]
reg byte x [ form_control::return#2 ]
reg byte x [ form_set_screen::y#2 form_set_screen::y#1 ]
zp[4]:2 [ gfx_init_plane_fill::plane_addr#3 get_plane::return#14 get_plane::return#16 get_plane::return#17 gfx_mode::$22 gfx_mode::plane_a#0 gfx_mode::$36 gfx_mode::plane_b#0 ]
reg byte x [ gfx_init_plane_fill::bx#2 gfx_init_plane_fill::bx#1 ]
reg byte a [ dtvSetCpuBankSegment1::cpuBankIdx#13 dtvSetCpuBankSegment1::cpuBankIdx#1 dtvSetCpuBankSegment1::cpuBankIdx#11 ]
reg byte x [ gfx_init_plane_horisontal2::ax#2 gfx_init_plane_horisontal2::ax#1 ]
reg byte x [ gfx_init_plane_vertical::bx#2 gfx_init_plane_vertical::bx#1 ]
reg byte x [ gfx_init_plane_horisontal::ax#2 gfx_init_plane_horisontal::ax#1 ]
zp[2]:6 [ gfx_init_plane_charset8::chargen#2 gfx_init_plane_charset8::chargen#3 gfx_init_plane_charset8::chargen#1 gfx_init_plane_horisontal::gfxa#3 gfx_init_plane_horisontal::gfxa#6 gfx_init_plane_horisontal::gfxa#7 gfx_init_plane_horisontal::gfxa#1 gfx_init_plane_horisontal::gfxa#2 gfx_init_plane_vertical::gfxb#2 gfx_init_plane_vertical::gfxb#3 gfx_init_plane_vertical::gfxb#1 gfx_init_plane_horisontal2::gfxa#2 gfx_init_plane_horisontal2::gfxa#3 gfx_init_plane_horisontal2::gfxa#1 print_str_lines::str#4 print_str_lines::str#3 print_str_lines::str#5 print_str_lines::str#0 form_set_screen::line#2 form_set_screen::line#1 render_preset_name::name#13 print_str_at::str#2 print_str_at::str#1 print_str_at::str#0 gfx_mode::vic_colors#2 gfx_mode::vic_colors#3 gfx_mode::vic_colors#1 gfx_mode::vic_colors#0 get_vic_screen::return#11 get_vic_screen::return#5 get_vic_screen::return#10 gfx_mode::$53 gfx_mode::$54 gfx_mode::$55 ]
reg byte x [ gfx_init_plane_charset8::cp#2 gfx_init_plane_charset8::cp#1 ]
reg byte a [ gfx_init_plane_charset8::c#2 gfx_init_plane_charset8::c#3 ]
reg byte x [ gfx_init_plane_8bppchunky::gfxbCpuBank#4 gfx_init_plane_8bppchunky::gfxbCpuBank#7 gfx_init_plane_8bppchunky::gfxbCpuBank#8 gfx_init_plane_8bppchunky::gfxbCpuBank#2 ]
zp[1]:8 [ gfx_init_vic_bitmap::l#2 gfx_init_vic_bitmap::l#1 gfx_init_plane_charset8::bits#2 gfx_init_plane_charset8::bits#0 gfx_init_plane_charset8::bits#1 gfx_init_plane_fill::fill#6 keyboard_events_size#18 keyboard_events_size#109 keyboard_events_size#99 keyboard_events_size#47 keyboard_events_size#27 keyboard_events_size#24 keyboard_events_size#100 keyboard_events_size#4 keyboard_events_size#108 keyboard_events_size#1 keyboard_events_size#2 ]
reg byte x [ bitmap_plot::x#4 bitmap_plot::x#1 bitmap_plot::x#0 bitmap_plot::x#3 bitmap_plot::x#2 ]
reg byte y [ bitmap_plot::y#4 bitmap_plot::y#1 bitmap_plot::y#0 bitmap_plot::y#3 bitmap_plot::y#2 ]
zp[1]:9 [ bitmap_line_ydxi::yd#5 bitmap_line_ydxi::yd#1 bitmap_line_ydxi::yd#0 bitmap_line_xdyi::x1#6 bitmap_line_xdyi::x1#0 bitmap_line_xdyi::x1#1 bitmap_line::x0#0 bitmap_line_xdyd::x1#6 bitmap_line_xdyd::x1#0 bitmap_line_xdyd::x1#1 gfx_init_plane_horisontal2::ay#4 gfx_init_plane_horisontal2::ay#1 form_field_idx#28 form_field_idx#1 form_field_idx#18 form_field_idx#31 form_field_idx#6 form_field_idx#5 ]
reg byte x [ bitmap_line_ydxi::x#3 bitmap_line_ydxi::x#5 bitmap_line_ydxi::x#1 bitmap_line_ydxi::x#0 bitmap_line_ydxi::x#6 bitmap_line_ydxi::x#2 ]
zp[1]:10 [ bitmap_line_ydxd::yd#5 bitmap_line_ydxd::yd#0 bitmap_line_ydxd::yd#1 bitmap_line_xdyd::yd#2 bitmap_line_xdyd::yd#0 bitmap_line_xdyd::yd#1 bitmap_line_ydxi::y#3 bitmap_line_ydxi::y#6 bitmap_line_ydxi::y#1 bitmap_line_ydxi::y#0 bitmap_line_ydxi::y#2 bitmap_line_xdyi::x#3 bitmap_line_xdyi::x#6 bitmap_line_xdyi::x#0 bitmap_line_xdyi::x#1 bitmap_line_xdyi::x#2 gfx_init_plane_charset8::ch#8 gfx_init_plane_charset8::ch#1 gfx_init_plane_horisontal::ay#4 gfx_init_plane_horisontal::ay#1 keyboard_event_scan::row#2 keyboard_event_scan::row#1 gfx_mode::cy#4 gfx_mode::cy#1 ]
reg byte x [ bitmap_line_ydxd::x#3 bitmap_line_ydxd::x#5 bitmap_line_ydxd::x#0 bitmap_line_ydxd::x#1 bitmap_line_ydxd::x#6 bitmap_line_ydxd::x#2 ]
reg byte x [ bitmap_clear::x#2 bitmap_clear::x#1 ]
reg byte x [ bitmap_init::x#2 bitmap_init::x#1 ]
reg byte y [ bitmap_init::bits#3 bitmap_init::bits#4 bitmap_init::bits#1 ]
reg byte x [ bitmap_init::y#2 bitmap_init::y#1 ]
zp[2]:11 [ gfx_init_charset::chargen#2 gfx_init_charset::chargen#3 gfx_init_charset::chargen#1 bitmap_init::yoffs#2 bitmap_init::yoffs#4 bitmap_init::yoffs#1 gfx_init_plane_8bppchunky::x#2 gfx_init_plane_8bppchunky::x#1 gfx_init_plane_charset8::gfxa#2 gfx_init_plane_charset8::gfxa#5 gfx_init_plane_charset8::gfxa#6 gfx_init_plane_charset8::gfxa#1 memset::dst#2 memset::dst#4 memset::dst#1 memset::str#0 print_char_cursor#20 print_char_cursor#22 print_char_cursor#73 print_char_cursor#74 print_char_cursor#38 print_char_cursor#1 print_str_at::at#2 print_str_at::at#0 gfx_mode::col#2 gfx_mode::col#3 gfx_mode::col#1 ]
reg byte x [ gfx_init_charset::l#2 gfx_init_charset::l#1 ]
zp[1]:13 [ gfx_init_screen4::cy#4 gfx_init_screen4::cy#1 gfx_init_charset::c#4 gfx_init_charset::c#1 bitmap_line_ydxi::e#3 bitmap_line_ydxi::e#0 bitmap_line_ydxi::e#6 bitmap_line_ydxi::e#2 bitmap_line_ydxi::e#1 bitmap_line_xdyi::y#3 bitmap_line_xdyi::y#5 bitmap_line_xdyi::y#0 bitmap_line_xdyi::y#1 bitmap_line_xdyi::y#6 bitmap_line_xdyi::y#2 bitmap_line::y0#0 bitmap_line_xdyd::y#3 bitmap_line_xdyd::y#5 bitmap_line_xdyd::y#0 bitmap_line_xdyd::y#1 bitmap_line_xdyd::y#6 bitmap_line_xdyd::y#2 bitmap_line_ydxd::y1#6 bitmap_line_ydxd::y1#0 bitmap_line_ydxd::y1#1 gfx_init_plane_8bppchunky::y#6 gfx_init_plane_8bppchunky::y#1 gfx_init_plane_charset8::cr#6 gfx_init_plane_charset8::cr#1 keyboard_event_pressed::keycode#4 keyboard_event_scan::keycode#10 keyboard_event_scan::keycode#11 keyboard_event_scan::keycode#13 keyboard_event_scan::keycode#14 keyboard_event_scan::keycode#1 ]
zp[2]:14 [ gfx_init_screen4::ch#2 gfx_init_screen4::ch#3 gfx_init_screen4::ch#1 gfx_init_charset::charset#2 gfx_init_charset::charset#3 gfx_init_charset::charset#1 bitmap_clear::bitmap#2 bitmap_clear::bitmap#3 bitmap_clear::bitmap#5 bitmap_clear::bitmap#1 bitmap_clear::bitmap#0 gfx_init_plane_8bppchunky::gfxb#4 gfx_init_plane_8bppchunky::gfxb#3 gfx_init_plane_8bppchunky::gfxb#5 gfx_init_plane_8bppchunky::gfxb#1 gfx_init_plane_fill::gfxb#2 gfx_init_plane_fill::gfxb#3 gfx_init_plane_fill::gfxb#1 gfx_init_plane_fill::gfxb#6 gfx_init_plane_fill::gfxb#0 gfx_init_plane_fill::$4 gfx_init_plane_fill::$5 print_line_cursor#21 print_line_cursor#2 print_set_screen::screen#2 print_line_cursor#22 apply_preset::preset#15 get_vic_charset::return#2 get_vic_charset::return#4 gfx_mode::$58 gfx_mode::$59 ]
reg byte x [ gfx_init_screen4::cx#2 gfx_init_screen4::cx#1 ]
reg byte x [ gfx_init_screen3::cx#2 gfx_init_screen3::cx#1 ]
zp[1]:16 [ gfx_init_screen2::cy#4 gfx_init_screen2::cy#1 gfx_init_screen3::cy#4 gfx_init_screen3::cy#1 bitmap_line_ydxd::y#2 bitmap_line_ydxd::y#7 bitmap_line_ydxd::y#0 bitmap_line_ydxd::y#1 bitmap_line_ydxd::y#3 bitmap_line_xdyd::x#3 bitmap_line_xdyd::x#6 bitmap_line_xdyd::x#0 bitmap_line_xdyd::x#1 bitmap_line_xdyd::x#2 bitmap_line_xdyi::yd#2 bitmap_line_xdyi::yd#0 bitmap_line_xdyi::yd#1 gfx_init_plane_charset8::col#2 gfx_init_plane_charset8::col#5 gfx_init_plane_charset8::col#6 gfx_init_plane_charset8::col#1 gfx_init_plane_fill::by#4 gfx_init_plane_fill::by#1 form_cursor_count#21 form_cursor_count#1 form_cursor_count#16 form_cursor_count#15 form_cursor_count#5 ]
reg byte x [ gfx_init_screen2::cx#2 gfx_init_screen2::cx#1 ]
reg byte x [ gfx_init_screen1::cx#2 gfx_init_screen1::cx#1 ]
zp[1]:17 [ gfx_init_screen0::cy#4 gfx_init_screen0::cy#1 gfx_init_screen1::cy#4 gfx_init_screen1::cy#1 bitmap_line_ydxd::e#3 bitmap_line_ydxd::e#0 bitmap_line_ydxd::e#6 bitmap_line_ydxd::e#2 bitmap_line_ydxd::e#1 bitmap_line_xdyd::e#3 bitmap_line_xdyd::e#0 bitmap_line_xdyd::e#6 bitmap_line_xdyd::e#2 bitmap_line_xdyd::e#1 bitmap_line_ydxi::y1#6 bitmap_line_ydxi::y1#1 bitmap_line_ydxi::y1#0 bitmap_line::y1#0 bitmap_line_xdyi::e#3 bitmap_line_xdyi::e#0 bitmap_line_xdyi::e#6 bitmap_line_xdyi::e#2 bitmap_line_xdyi::e#1 gfx_init_plane_vertical::by#4 gfx_init_plane_vertical::by#1 form_mode::preset_current#6 form_mode::preset_current#0 form_mode::preset_current#1 ]
reg byte x [ gfx_init_screen0::cx#2 gfx_init_screen0::cx#1 ]
reg byte a [ gfx_mode::$20 ]
reg byte x [ gfx_mode::plane_a_offs#0 ]
reg byte a [ gfx_mode::$25 ]
reg byte a [ gfx_mode::$27 ]
reg byte a [ gfx_mode::$29 ]
reg byte a [ gfx_mode::$30 ]
reg byte a [ gfx_mode::$31 ]
reg byte a [ gfx_mode::$32 ]
reg byte a [ gfx_mode::$33 ]
reg byte a [ gfx_mode::$34 ]
reg byte x [ gfx_mode::plane_b_offs#0 ]
reg byte a [ gfx_mode::$39 ]
reg byte a [ gfx_mode::$41 ]
reg byte a [ gfx_mode::$43 ]
reg byte a [ gfx_mode::$44 ]
reg byte a [ gfx_mode::$45 ]
reg byte a [ gfx_mode::$46 ]
reg byte a [ gfx_mode::$47 ]
reg byte a [ get_vic_charset::idx#0 ]
reg byte a [ gfx_mode::$60 ]
reg byte a [ gfx_mode::$61 ]
reg byte a [ gfx_mode::$62 ]
reg byte a [ gfx_mode::$64 ]
reg byte a [ gfx_mode::$65 ]
reg byte a [ gfx_mode::$66 ]
reg byte a [ gfx_mode::$67 ]
reg byte a [ gfx_mode::$68 ]
reg byte a [ gfx_mode::$69 ]
reg byte a [ gfx_mode::$70 ]
reg byte a [ gfx_mode::$71 ]
reg byte a [ keyboard_event_get::return#3 ]
reg byte a [ gfx_mode::keyboard_event#0 ]
reg byte x [ keyboard_matrix_read::rowid#0 ]
reg byte a [ keyboard_matrix_read::return#2 ]
reg byte a [ keyboard_event_pressed::return#0 ]
reg byte a [ keyboard_event_scan::$0 ]
reg byte a [ keyboard_event_pressed::return#1 ]
reg byte a [ keyboard_event_scan::$3 ]
reg byte a [ keyboard_event_pressed::return#2 ]
reg byte a [ keyboard_event_scan::$6 ]
reg byte a [ keyboard_event_pressed::return#3 ]
reg byte a [ keyboard_event_scan::$9 ]
reg byte a [ keyboard_event_scan::$15 ]
reg byte a [ keyboard_event_scan::$16 ]
reg byte a [ keyboard_event_scan::event_type#0 ]
reg byte a [ keyboard_event_scan::$23 ]
reg byte a [ keyboard_event_pressed::$0 ]
reg byte a [ keyboard_event_pressed::$1 ]
reg byte a [ keyboard_event_pressed::return#10 ]
reg byte a [ keyboard_matrix_read::return#0 ]
reg byte a [ form_control::return#0 ]
reg byte a [ form_mode::$36 ]
reg byte a [ apply_preset::idx#0 ]
reg byte a [ form_field_ptr::y#0 ]
reg byte a [ form_control::$13 ]
reg byte a [ keyboard_event_get::return#4 ]
reg byte a [ form_control::key_event#0 ]
reg byte a [ form_control::$15 ]
reg byte a [ form_control::$16 ]
reg byte a [ form_control::$24 ]
reg byte a [ form_control::$14 ]
reg byte a [ form_set_screen::$0 ]
reg byte a [ form_set_screen::$1 ]
reg byte a [ print_str_lines::ch#0 ]
zp[4]:18 [ gfx_init_plane_fill::$0 ]
zp[2]:22 [ gfx_init_plane_fill::$1 gfx_mode::$40 gfx_init_screen0::ch#2 gfx_init_screen0::ch#3 gfx_init_screen0::ch#1 gfx_init_screen1::ch#2 gfx_init_screen1::ch#3 gfx_init_screen1::ch#1 gfx_init_screen2::ch#2 gfx_init_screen2::ch#3 gfx_init_screen2::ch#1 gfx_init_screen3::ch#2 gfx_init_screen3::ch#3 gfx_init_screen3::ch#1 ]
reg byte a [ gfx_init_plane_fill::gfxbCpuBank#0 ]
reg byte a [ gfx_init_plane_horisontal2::$7 ]
reg byte a [ gfx_init_plane_horisontal2::row#0 ]
reg byte a [ gfx_init_plane_horisontal::$7 ]
reg byte a [ gfx_init_plane_charset8::$7 ]
zp[2]:24 [ gfx_init_plane_8bppchunky::$8 gfx_mode::$42 ]
reg byte a [ gfx_init_plane_8bppchunky::c#0 ]
reg byte x [ bitmap_line::x1#0 ]
reg byte y [ bitmap_line::yd#2 ]
reg byte y [ bitmap_line::yd#1 ]
reg byte y [ bitmap_line::yd#10 ]
reg byte y [ bitmap_line::yd#11 ]
reg byte x [ bitmap_line_xdyi::$6 ]
zp[2]:26 [ bitmap_plot::plotter_x#0 bitmap_plot::plotter#0 form_field_ptr::line#0 gfx_mode::$26 ]
zp[2]:28 [ bitmap_plot::plotter_y#0 memset::end#0 gfx_mode::$28 ]
reg byte a [ bitmap_plot::$1 ]
reg byte a [ bitmap_line_ydxi::$6 ]
reg byte x [ bitmap_line_xdyd::$6 ]
reg byte a [ bitmap_line_ydxd::$6 ]
reg byte a [ bitmap_init::$0 ]
reg byte a [ bitmap_init::$7 ]
reg byte a [ bitmap_init::$8 ]
reg byte a [ bitmap_init::$9 ]
reg byte a [ gfx_init_screen3::$0 ]
zp[1]:30 [ gfx_init_screen3::$1 form_field_ptr::x#0 ]
reg byte a [ gfx_init_screen3::$2 ]
reg byte a [ gfx_init_screen3::$3 ]
reg byte a [ gfx_init_screen2::$0 ]
reg byte y [ gfx_init_screen2::col#0 ]
reg byte a [ gfx_init_screen2::$3 ]
reg byte a [ gfx_init_screen2::$4 ]
reg byte a [ gfx_init_screen1::$0 ]
reg byte a [ gfx_init_screen1::$1 ]
reg byte a [ gfx_init_screen0::$0 ]
zp[1]:31 [ gfx_init_screen0::$1 gfx_init_screen2::col2#0 bitmap_init::$10 keyboard_event_pressed::row_bits#0 keyboard_event_scan::row_scan#0 gfx_mode::$56 bitmap_clear::y#4 bitmap_clear::y#1 bitmap_line_xdyi::xd#5 bitmap_line_xdyi::xd#0 bitmap_line_xdyi::xd#1 bitmap_line::xd#2 bitmap_line::xd#1 bitmap_line_ydxi::xd#2 bitmap_line_ydxi::xd#1 bitmap_line_ydxi::xd#0 bitmap_line_xdyd::xd#5 bitmap_line_xdyd::xd#0 bitmap_line_xdyd::xd#1 bitmap_line_ydxd::xd#2 bitmap_line_ydxd::xd#0 bitmap_line_ydxd::xd#1 ]
reg byte a [ gfx_init_screen0::$2 ]
reg byte a [ gfx_init_screen0::$3 ]


FINAL ASSEMBLER
Score: 10133397

  // File Comments
// Interactive Explorer for C64DTV Screen Modes
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // Processor port data direction register
  .label PROCPORT_DDR = 0
  // Mask for PROCESSOR_PORT_DDR which allows only memory configuration to be written
  .const PROCPORT_DDR_MEMORY_MASK = 7
  // Processor Port Register controlling RAM/ROM configuration and the datasette
  .label PROCPORT = 1
  // RAM in $A000, $E000 I/O in $D000
  .const PROCPORT_RAM_IO = 5
  // RAM in $A000, $E000 CHAR ROM in $D000
  .const PROCPORT_RAM_CHARROM = 1
  // The address of the CHARGEN character set
  .label CHARGEN = $d000
  .label RASTER = $d012
  .label BORDERCOL = $d020
  .label BGCOL = $d021
  .label BGCOL1 = $d021
  .label BGCOL2 = $d022
  .label BGCOL3 = $d023
  .label BGCOL4 = $d024
  .label VIC_CONTROL = $d011
  .const VIC_ECM = $40
  .const VIC_BMM = $20
  .const VIC_DEN = $10
  .const VIC_RSEL = 8
  .label VIC_CONTROL2 = $d016
  .const VIC_MCM = $10
  .const VIC_CSEL = 8
  .label VIC_MEMORY = $d018
  // Color Ram
  .label COLS = $d800
  // CIA#1 Port A: keyboard matrix columns and joystick #2
  .label CIA1_PORT_A = $dc00
  // CIA#1 Port B: keyboard matrix rows and joystick #1.
  .label CIA1_PORT_B = $dc01
  // CIA #1 Port A data direction register.
  .label CIA1_PORT_A_DDR = $dc02
  // CIA #1 Port B data direction register.
  .label CIA1_PORT_B_DDR = $dc03
  // CIA#2 Port A: Serial bus, RS-232, VIC memory bank
  .label CIA2_PORT_A = $dd00
  // CIA #2 Port A data direction register.
  .label CIA2_PORT_A_DDR = $dd02
  // Feature enables or disables the extra C64 DTV features
  .label DTV_FEATURE = $d03f
  .const DTV_FEATURE_ENABLE = 1
  // Controls the graphics modes of the C64 DTV
  .label DTV_CONTROL = $d03c
  .const DTV_LINEAR = 1
  .const DTV_BORDER_OFF = 2
  .const DTV_HIGHCOLOR = 4
  .const DTV_OVERSCAN = 8
  .const DTV_COLORRAM_OFF = $10
  .const DTV_CHUNKY = $40
  // Defines colors for the 16 first colors ($00-$0f)
  .label DTV_PALETTE = $d200
  // Linear Graphics Plane A Counter Control
  .label DTV_PLANEA_START_LO = $d03a
  .label DTV_PLANEA_START_MI = $d03b
  .label DTV_PLANEA_START_HI = $d045
  .label DTV_PLANEA_STEP = $d046
  .label DTV_PLANEA_MODULO_LO = $d038
  .label DTV_PLANEA_MODULO_HI = $d039
  // Linear Graphics Plane B Counter Control
  .label DTV_PLANEB_START_LO = $d049
  .label DTV_PLANEB_START_MI = $d04a
  .label DTV_PLANEB_START_HI = $d04b
  .label DTV_PLANEB_STEP = $d04c
  .label DTV_PLANEB_MODULO_LO = $d047
  .label DTV_PLANEB_MODULO_HI = $d048
  // Select memory bank where color data is fetched from (bits 11:0)
  // Memory address of Color RAM is ColorBank*$400
  .label DTV_COLOR_BANK_LO = $d036
  .label DTV_COLOR_BANK_HI = $d037
  .const DTV_COLOR_BANK_DEFAULT = $1d800
  // Selects memory bank for normal VIC color mode and lower data for high color modes. (bits 5:0)
  // Memory address of VIC Graphics is GraphicsBank*$10000
  .label DTV_GRAPHICS_VIC_BANK = $d03d
  .const KEY_CRSR_RIGHT = 2
  .const KEY_CRSR_DOWN = 7
  .const KEY_LSHIFT = $f
  .const KEY_RSHIFT = $34
  .const KEY_CTRL = $3a
  .const KEY_SPACE = $3c
  .const KEY_COMMODORE = $3d
  // Left shift is pressed
  .const KEY_MODIFIER_LSHIFT = 1
  // Right shift is pressed
  .const KEY_MODIFIER_RSHIFT = 2
  // CTRL is pressed
  .const KEY_MODIFIER_CTRL = 4
  // Commodore is pressed
  .const KEY_MODIFIER_COMMODORE = 8
  // VIC Screens
  .label VIC_SCREEN0 = $4000
  .label VIC_SCREEN1 = $4400
  .label VIC_SCREEN2 = $4800
  .label VIC_SCREEN3 = $4c00
  .label VIC_SCREEN4 = $5000
  // VIC Charset from ROM
  .label VIC_CHARSET_ROM = $5800
  // VIC Bitmap
  .label VIC_BITMAP = $6000
  // 8BPP Chunky Bitmap (contains 8bpp pixels)
  .const PLANE_8BPP_CHUNKY = $20000
  // Plane with horisontal stripes
  .const PLANE_HORISONTAL = $30000
  // Plane with vertical stripes
  .const PLANE_VERTICAL = $32000
  // Plane with horisontal stripes every 2 pixels
  .const PLANE_HORISONTAL2 = $34000
  // Plane with vertical stripes every 2 pixels
  .const PLANE_VERTICAL2 = $36000
  // Plane with blank pixels
  .const PLANE_BLANK = $38000
  // Plane with all pixels
  .const PLANE_FULL = $3a000
  // Plane with all pixels
  .const PLANE_CHARSET8 = $3c000
  // Screen containing the FORM
  .label FORM_SCREEN = $400
  // Charset used for the FORM
  .label FORM_CHARSET = $1800
  // Number of form fields
  .const form_fields_cnt = $24
  // The number of frames to use for a full blink cycle
  .const FORM_CURSOR_BLINK = $28
  // Any shift is pressed
  .const KEY_MODIFIER_SHIFT = KEY_MODIFIER_LSHIFT|KEY_MODIFIER_RSHIFT
  .label print_char_cursor = $b
  .label print_line_cursor = $e
  .label keyboard_events_size = 8
  .label form_cursor_count = $10
  .label form_field_idx = 9
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // asm
    // asm { sei  }
    sei
    // *PROCPORT_DDR = PROCPORT_DDR_MEMORY_MASK
    // [5] *((const byte*) PROCPORT_DDR) ← (const byte) PROCPORT_DDR_MEMORY_MASK -- _deref_pbuc1=vbuc2 
    // Disable normal interrupt (prevent keyboard reading glitches and allows to hide basic/kernal)
    // Disable kernal & basic
    lda #PROCPORT_DDR_MEMORY_MASK
    sta PROCPORT_DDR
    // *PROCPORT = PROCPORT_RAM_IO
    // [6] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // *DTV_FEATURE = DTV_FEATURE_ENABLE
    // [7] *((const byte*) DTV_FEATURE) ← (const byte) DTV_FEATURE_ENABLE -- _deref_pbuc1=vbuc2 
    // Enable DTV extended modes
    lda #DTV_FEATURE_ENABLE
    sta DTV_FEATURE
    // keyboard_init()
    // [8] call keyboard_init 
    jsr keyboard_init
    // [9] phi from main to main::@3 [phi:main->main::@3]
    // main::@3
    // gfx_init()
    // [10] call gfx_init 
    // [446] phi from main::@3 to gfx_init [phi:main::@3->gfx_init]
    jsr gfx_init
    // [11] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
    // [11] phi (byte) form_field_idx#1 = (byte) 0 [phi:main::@3->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    // [11] phi (byte) keyboard_events_size#27 = (byte) 0 [phi:main::@3->main::@1#1] -- vbuz1=vbuc1 
    sta.z keyboard_events_size
    // [11] phi (signed byte) form_cursor_count#1 = (const signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:main::@3->main::@1#2] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // main::@1
    // [12] phi from main::@1 to main::@2 [phi:main::@1->main::@2]
    // main::@2
  __b2:
    // form_mode()
    // [13] call form_mode 
    // [252] phi from main::@2 to form_mode [phi:main::@2->form_mode]
    jsr form_mode
    // [14] phi from main::@2 to main::@4 [phi:main::@2->main::@4]
    // main::@4
    // gfx_mode()
    // [15] call gfx_mode 
    jsr gfx_mode
    // [11] phi from main::@4 to main::@1 [phi:main::@4->main::@1]
    // [11] phi (byte) form_field_idx#1 = (byte) form_field_idx#18 [phi:main::@4->main::@1#0] -- register_copy 
    // [11] phi (byte) keyboard_events_size#27 = (byte) keyboard_events_size#24 [phi:main::@4->main::@1#1] -- register_copy 
    // [11] phi (signed byte) form_cursor_count#1 = (signed byte) form_cursor_count#16 [phi:main::@4->main::@1#2] -- register_copy 
    jmp __b2
}
  // gfx_mode
// Change graphics mode to show the selected graphics mode
gfx_mode: {
    .label __22 = 2
    .label __26 = $1a
    .label __28 = $1c
    .label __36 = 2
    .label __40 = $16
    .label __42 = $18
    .label __53 = 6
    .label __54 = 6
    .label __55 = 6
    .label __56 = $1f
    .label __58 = $e
    .label __59 = $e
    .label plane_a = 2
    .label plane_b = 2
    .label vic_colors = 6
    .label col = $b
    .label cy = $a
    // if(*form_ctrl_line!=0)
    // [16] if(*((const byte[]) form_fields_val+(byte) 5)==(byte) 0) goto gfx_mode::@1 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+5
    cmp #0
    beq b1
    // [17] phi from gfx_mode to gfx_mode::@10 [phi:gfx_mode->gfx_mode::@10]
    // gfx_mode::@10
    // [18] phi from gfx_mode::@10 to gfx_mode::@1 [phi:gfx_mode::@10->gfx_mode::@1]
    // [18] phi (byte) gfx_mode::dtv_control#14 = (const byte) DTV_LINEAR [phi:gfx_mode::@10->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #DTV_LINEAR
    jmp __b1
    // [18] phi from gfx_mode to gfx_mode::@1 [phi:gfx_mode->gfx_mode::@1]
  b1:
    // [18] phi (byte) gfx_mode::dtv_control#14 = (byte) 0 [phi:gfx_mode->gfx_mode::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // gfx_mode::@1
  __b1:
    // if(*form_ctrl_borof!=0)
    // [19] if(*((const byte[]) form_fields_val+(byte) 8)==(byte) 0) goto gfx_mode::@2 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+8
    cmp #0
    beq __b2
    // gfx_mode::@11
    // dtv_control = dtv_control | DTV_BORDER_OFF
    // [20] (byte) gfx_mode::dtv_control#2 ← (byte) gfx_mode::dtv_control#14 | (const byte) DTV_BORDER_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_BORDER_OFF
    tax
    // [21] phi from gfx_mode::@1 gfx_mode::@11 to gfx_mode::@2 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2]
    // [21] phi (byte) gfx_mode::dtv_control#15 = (byte) gfx_mode::dtv_control#14 [phi:gfx_mode::@1/gfx_mode::@11->gfx_mode::@2#0] -- register_copy 
    // gfx_mode::@2
  __b2:
    // if(*form_ctrl_hicol!=0)
    // [22] if(*((const byte[]) form_fields_val+(byte) 4)==(byte) 0) goto gfx_mode::@3 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+4
    cmp #0
    beq __b3
    // gfx_mode::@12
    // dtv_control = dtv_control | DTV_HIGHCOLOR
    // [23] (byte) gfx_mode::dtv_control#3 ← (byte) gfx_mode::dtv_control#15 | (const byte) DTV_HIGHCOLOR -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_HIGHCOLOR
    tax
    // [24] phi from gfx_mode::@12 gfx_mode::@2 to gfx_mode::@3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3]
    // [24] phi (byte) gfx_mode::dtv_control#10 = (byte) gfx_mode::dtv_control#3 [phi:gfx_mode::@12/gfx_mode::@2->gfx_mode::@3#0] -- register_copy 
    // gfx_mode::@3
  __b3:
    // if(*form_ctrl_overs!=0)
    // [25] if(*((const byte[]) form_fields_val+(byte) 9)==(byte) 0) goto gfx_mode::@4 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+9
    cmp #0
    beq __b4
    // gfx_mode::@13
    // dtv_control = dtv_control | DTV_OVERSCAN
    // [26] (byte) gfx_mode::dtv_control#4 ← (byte) gfx_mode::dtv_control#10 | (const byte) DTV_OVERSCAN -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_OVERSCAN
    tax
    // [27] phi from gfx_mode::@13 gfx_mode::@3 to gfx_mode::@4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4]
    // [27] phi (byte) gfx_mode::dtv_control#11 = (byte) gfx_mode::dtv_control#4 [phi:gfx_mode::@13/gfx_mode::@3->gfx_mode::@4#0] -- register_copy 
    // gfx_mode::@4
  __b4:
    // if(*form_ctrl_colof!=0)
    // [28] if(*((const byte[]) form_fields_val+(byte) 6)==(byte) 0) goto gfx_mode::@5 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+6
    cmp #0
    beq __b5
    // gfx_mode::@14
    // dtv_control = dtv_control | DTV_COLORRAM_OFF
    // [29] (byte) gfx_mode::dtv_control#5 ← (byte) gfx_mode::dtv_control#11 | (const byte) DTV_COLORRAM_OFF -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_COLORRAM_OFF
    tax
    // [30] phi from gfx_mode::@14 gfx_mode::@4 to gfx_mode::@5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5]
    // [30] phi (byte) gfx_mode::dtv_control#13 = (byte) gfx_mode::dtv_control#5 [phi:gfx_mode::@14/gfx_mode::@4->gfx_mode::@5#0] -- register_copy 
    // gfx_mode::@5
  __b5:
    // if(*form_ctrl_chunk!=0)
    // [31] if(*((const byte[]) form_fields_val+(byte) 7)==(byte) 0) goto gfx_mode::@6 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+7
    cmp #0
    beq __b6
    // gfx_mode::@15
    // dtv_control = dtv_control | DTV_CHUNKY
    // [32] (byte) gfx_mode::dtv_control#6 ← (byte) gfx_mode::dtv_control#13 | (const byte) DTV_CHUNKY -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #DTV_CHUNKY
    tax
    // [33] phi from gfx_mode::@15 gfx_mode::@5 to gfx_mode::@6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6]
    // [33] phi (byte) gfx_mode::dtv_control#12 = (byte) gfx_mode::dtv_control#6 [phi:gfx_mode::@15/gfx_mode::@5->gfx_mode::@6#0] -- register_copy 
    // gfx_mode::@6
  __b6:
    // *DTV_CONTROL = dtv_control
    // [34] *((const byte*) DTV_CONTROL) ← (byte) gfx_mode::dtv_control#12 -- _deref_pbuc1=vbuxx 
    stx DTV_CONTROL
    // if(*form_ctrl_ecm!=0)
    // [35] if(*((const byte[]) form_fields_val+(byte) 3)==(byte) 0) goto gfx_mode::@7 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+3
    cmp #0
    beq b2
    // [36] phi from gfx_mode::@6 to gfx_mode::@16 [phi:gfx_mode::@6->gfx_mode::@16]
    // gfx_mode::@16
    // [37] phi from gfx_mode::@16 to gfx_mode::@7 [phi:gfx_mode::@16->gfx_mode::@7]
    // [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3|(const byte) VIC_ECM [phi:gfx_mode::@16->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3|VIC_ECM
    jmp __b7
    // [37] phi from gfx_mode::@6 to gfx_mode::@7 [phi:gfx_mode::@6->gfx_mode::@7]
  b2:
    // [37] phi (byte) gfx_mode::vic_control#5 = (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 [phi:gfx_mode::@6->gfx_mode::@7#0] -- vbuxx=vbuc1 
    ldx #VIC_DEN|VIC_RSEL|3
    // gfx_mode::@7
  __b7:
    // if(*form_ctrl_bmm!=0)
    // [38] if(*((const byte[]) form_fields_val+(byte) 1)==(byte) 0) goto gfx_mode::@8 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+1
    cmp #0
    beq __b8
    // gfx_mode::@17
    // vic_control = vic_control | VIC_BMM
    // [39] (byte) gfx_mode::vic_control#2 ← (byte) gfx_mode::vic_control#5 | (const byte) VIC_BMM -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #VIC_BMM
    tax
    // [40] phi from gfx_mode::@17 gfx_mode::@7 to gfx_mode::@8 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8]
    // [40] phi (byte) gfx_mode::vic_control#4 = (byte) gfx_mode::vic_control#2 [phi:gfx_mode::@17/gfx_mode::@7->gfx_mode::@8#0] -- register_copy 
    // gfx_mode::@8
  __b8:
    // *VIC_CONTROL = vic_control
    // [41] *((const byte*) VIC_CONTROL) ← (byte) gfx_mode::vic_control#4 -- _deref_pbuc1=vbuxx 
    stx VIC_CONTROL
    // if(*form_ctrl_mcm!=0)
    // [42] if(*((const byte[]) form_fields_val+(byte) 2)==(byte) 0) goto gfx_mode::@9 -- _deref_pbuc1_eq_0_then_la1 
    lda form_fields_val+2
    cmp #0
    beq b3
    // [43] phi from gfx_mode::@8 to gfx_mode::@18 [phi:gfx_mode::@8->gfx_mode::@18]
    // gfx_mode::@18
    // [44] phi from gfx_mode::@18 to gfx_mode::@9 [phi:gfx_mode::@18->gfx_mode::@9]
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL|(const byte) VIC_MCM [phi:gfx_mode::@18->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL|VIC_MCM
    jmp __b9
    // [44] phi from gfx_mode::@8 to gfx_mode::@9 [phi:gfx_mode::@8->gfx_mode::@9]
  b3:
    // [44] phi (byte) gfx_mode::vic_control2#2 = (const byte) VIC_CSEL [phi:gfx_mode::@8->gfx_mode::@9#0] -- vbuaa=vbuc1 
    lda #VIC_CSEL
    // gfx_mode::@9
  __b9:
    // *VIC_CONTROL2 = vic_control2
    // [45] *((const byte*) VIC_CONTROL2) ← (byte) gfx_mode::vic_control2#2 -- _deref_pbuc1=vbuaa 
    sta VIC_CONTROL2
    // *form_a_start_hi*$10
    // [46] (byte~) gfx_mode::$20 ← *((const byte[]) form_fields_val+(byte) $b) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$b
    asl
    asl
    asl
    asl
    // plane_a_offs = *form_a_start_hi*$10|*form_a_start_lo
    // [47] (byte) gfx_mode::plane_a_offs#0 ← (byte~) gfx_mode::$20 | *((const byte[]) form_fields_val+(byte) $c) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$c
    tax
    // get_plane(*form_a_pattern)
    // [48] (byte) get_plane::idx#0 ← *((const byte[]) form_fields_val+(byte) $a) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$a
    // [49] call get_plane 
    // [234] phi from gfx_mode::@9 to get_plane [phi:gfx_mode::@9->get_plane]
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#0 [phi:gfx_mode::@9->get_plane#0] -- register_copy 
    jsr get_plane
    // get_plane(*form_a_pattern)
    // [50] (dword) get_plane::return#16 ← (dword) get_plane::return#14
    // gfx_mode::@27
    // [51] (dword~) gfx_mode::$22 ← (dword) get_plane::return#16
    // plane_a = get_plane(*form_a_pattern) + plane_a_offs
    // [52] (dword) gfx_mode::plane_a#0 ← (dword~) gfx_mode::$22 + (byte) gfx_mode::plane_a_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_a
    sta.z plane_a
    lda.z plane_a+1
    adc #0
    sta.z plane_a+1
    lda.z plane_a+2
    adc #0
    sta.z plane_a+2
    lda.z plane_a+3
    adc #0
    sta.z plane_a+3
    // < plane_a
    // [53] (word~) gfx_mode::$26 ← < (dword) gfx_mode::plane_a#0 -- vwuz1=_lo_vduz2 
    lda.z plane_a
    sta.z __26
    lda.z plane_a+1
    sta.z __26+1
    // < < plane_a
    // [54] (byte~) gfx_mode::$25 ← < (word~) gfx_mode::$26 -- vbuaa=_lo_vwuz1 
    lda.z __26
    // *DTV_PLANEA_START_LO = < < plane_a
    // [55] *((const byte*) DTV_PLANEA_START_LO) ← (byte~) gfx_mode::$25 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_LO
    // > < plane_a
    // [56] (byte~) gfx_mode::$27 ← > (word~) gfx_mode::$26 -- vbuaa=_hi_vwuz1 
    lda.z __26+1
    // *DTV_PLANEA_START_MI = > < plane_a
    // [57] *((const byte*) DTV_PLANEA_START_MI) ← (byte~) gfx_mode::$27 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_MI
    // > plane_a
    // [58] (word~) gfx_mode::$28 ← > (dword) gfx_mode::plane_a#0 -- vwuz1=_hi_vduz2 
    lda.z plane_a+2
    sta.z __28
    lda.z plane_a+3
    sta.z __28+1
    // < > plane_a
    // [59] (byte~) gfx_mode::$29 ← < (word~) gfx_mode::$28 -- vbuaa=_lo_vwuz1 
    lda.z __28
    // *DTV_PLANEA_START_HI = < > plane_a
    // [60] *((const byte*) DTV_PLANEA_START_HI) ← (byte~) gfx_mode::$29 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_START_HI
    // *form_a_step_hi*$10
    // [61] (byte~) gfx_mode::$30 ← *((const byte[]) form_fields_val+(byte) $d) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$d
    asl
    asl
    asl
    asl
    // *form_a_step_hi*$10|*form_a_step_lo
    // [62] (byte~) gfx_mode::$31 ← (byte~) gfx_mode::$30 | *((const byte[]) form_fields_val+(byte) $e) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$e
    // *DTV_PLANEA_STEP = *form_a_step_hi*$10|*form_a_step_lo
    // [63] *((const byte*) DTV_PLANEA_STEP) ← (byte~) gfx_mode::$31 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_STEP
    // *form_a_mod_hi*$10
    // [64] (byte~) gfx_mode::$32 ← *((const byte[]) form_fields_val+(byte) $f) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$f
    asl
    asl
    asl
    asl
    // *form_a_mod_hi*$10|*form_a_mod_lo
    // [65] (byte~) gfx_mode::$33 ← (byte~) gfx_mode::$32 | *((const byte[]) form_fields_val+(byte) $10) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$10
    // *DTV_PLANEA_MODULO_LO = *form_a_mod_hi*$10|*form_a_mod_lo
    // [66] *((const byte*) DTV_PLANEA_MODULO_LO) ← (byte~) gfx_mode::$33 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEA_MODULO_LO
    // *DTV_PLANEA_MODULO_HI = 0
    // [67] *((const byte*) DTV_PLANEA_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_MODULO_HI
    // *form_b_start_hi*$10
    // [68] (byte~) gfx_mode::$34 ← *((const byte[]) form_fields_val+(byte) $12) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$12
    asl
    asl
    asl
    asl
    // plane_b_offs = *form_b_start_hi*$10|*form_b_start_lo
    // [69] (byte) gfx_mode::plane_b_offs#0 ← (byte~) gfx_mode::$34 | *((const byte[]) form_fields_val+(byte) $13) -- vbuxx=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$13
    tax
    // get_plane(*form_b_pattern)
    // [70] (byte) get_plane::idx#1 ← *((const byte[]) form_fields_val+(byte) $11) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$11
    // [71] call get_plane 
    // [234] phi from gfx_mode::@27 to get_plane [phi:gfx_mode::@27->get_plane]
    // [234] phi (byte) get_plane::idx#10 = (byte) get_plane::idx#1 [phi:gfx_mode::@27->get_plane#0] -- register_copy 
    jsr get_plane
    // get_plane(*form_b_pattern)
    // [72] (dword) get_plane::return#17 ← (dword) get_plane::return#14
    // gfx_mode::@28
    // [73] (dword~) gfx_mode::$36 ← (dword) get_plane::return#17
    // plane_b = get_plane(*form_b_pattern) + plane_b_offs
    // [74] (dword) gfx_mode::plane_b#0 ← (dword~) gfx_mode::$36 + (byte) gfx_mode::plane_b_offs#0 -- vduz1=vduz1_plus_vbuxx 
    txa
    clc
    adc.z plane_b
    sta.z plane_b
    lda.z plane_b+1
    adc #0
    sta.z plane_b+1
    lda.z plane_b+2
    adc #0
    sta.z plane_b+2
    lda.z plane_b+3
    adc #0
    sta.z plane_b+3
    // < plane_b
    // [75] (word~) gfx_mode::$40 ← < (dword) gfx_mode::plane_b#0 -- vwuz1=_lo_vduz2 
    lda.z plane_b
    sta.z __40
    lda.z plane_b+1
    sta.z __40+1
    // < < plane_b
    // [76] (byte~) gfx_mode::$39 ← < (word~) gfx_mode::$40 -- vbuaa=_lo_vwuz1 
    lda.z __40
    // *DTV_PLANEB_START_LO = < < plane_b
    // [77] *((const byte*) DTV_PLANEB_START_LO) ← (byte~) gfx_mode::$39 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_LO
    // > < plane_b
    // [78] (byte~) gfx_mode::$41 ← > (word~) gfx_mode::$40 -- vbuaa=_hi_vwuz1 
    lda.z __40+1
    // *DTV_PLANEB_START_MI = > < plane_b
    // [79] *((const byte*) DTV_PLANEB_START_MI) ← (byte~) gfx_mode::$41 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_MI
    // > plane_b
    // [80] (word~) gfx_mode::$42 ← > (dword) gfx_mode::plane_b#0 -- vwuz1=_hi_vduz2 
    lda.z plane_b+2
    sta.z __42
    lda.z plane_b+3
    sta.z __42+1
    // < > plane_b
    // [81] (byte~) gfx_mode::$43 ← < (word~) gfx_mode::$42 -- vbuaa=_lo_vwuz1 
    lda.z __42
    // *DTV_PLANEB_START_HI = < > plane_b
    // [82] *((const byte*) DTV_PLANEB_START_HI) ← (byte~) gfx_mode::$43 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_START_HI
    // *form_b_step_hi*$10
    // [83] (byte~) gfx_mode::$44 ← *((const byte[]) form_fields_val+(byte) $14) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$14
    asl
    asl
    asl
    asl
    // *form_b_step_hi*$10|*form_b_step_lo
    // [84] (byte~) gfx_mode::$45 ← (byte~) gfx_mode::$44 | *((const byte[]) form_fields_val+(byte) $15) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$15
    // *DTV_PLANEB_STEP = *form_b_step_hi*$10|*form_b_step_lo
    // [85] *((const byte*) DTV_PLANEB_STEP) ← (byte~) gfx_mode::$45 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_STEP
    // *form_b_mod_hi*$10
    // [86] (byte~) gfx_mode::$46 ← *((const byte[]) form_fields_val+(byte) $16) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$16
    asl
    asl
    asl
    asl
    // *form_b_mod_hi*$10|*form_b_mod_lo
    // [87] (byte~) gfx_mode::$47 ← (byte~) gfx_mode::$46 | *((const byte[]) form_fields_val+(byte) $17) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$17
    // *DTV_PLANEB_MODULO_LO = *form_b_mod_hi*$10|*form_b_mod_lo
    // [88] *((const byte*) DTV_PLANEB_MODULO_LO) ← (byte~) gfx_mode::$47 -- _deref_pbuc1=vbuaa 
    sta DTV_PLANEB_MODULO_LO
    // *DTV_PLANEB_MODULO_HI = 0
    // [89] *((const byte*) DTV_PLANEB_MODULO_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEB_MODULO_HI
    // *CIA2_PORT_A_DDR = %00000011
    // [90] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
    // *CIA2_PORT_A = %00000011 ^ (byte)((word)VIC_SCREEN0/$4000)
    // [91] *((const byte*) CIA2_PORT_A) ← (byte) 3^(byte)(word)(const byte*) VIC_SCREEN0/(word) $4000 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    lda #3^VIC_SCREEN0/$4000
    sta CIA2_PORT_A
    // get_vic_screen(*form_vic_screen)
    // [92] (byte) get_vic_screen::idx#0 ← *((const byte[]) form_fields_val+(byte) $18) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$18
    // [93] call get_vic_screen 
    // [220] phi from gfx_mode::@28 to get_vic_screen [phi:gfx_mode::@28->get_vic_screen]
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#0 [phi:gfx_mode::@28->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // get_vic_screen(*form_vic_screen)
    // [94] (byte*) get_vic_screen::return#10 ← (byte*) get_vic_screen::return#5
    // gfx_mode::@29
    // [95] (byte*~) gfx_mode::$53 ← (byte*) get_vic_screen::return#10
    // (word)get_vic_screen(*form_vic_screen)&$3fff
    // [96] (word~) gfx_mode::$54 ← (word)(byte*~) gfx_mode::$53 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __54
    and #<$3fff
    sta.z __54
    lda.z __54+1
    and #>$3fff
    sta.z __54+1
    // ((word)get_vic_screen(*form_vic_screen)&$3fff)/$40
    // [97] (word~) gfx_mode::$55 ← (word~) gfx_mode::$54 >> (byte) 6 -- vwuz1=vwuz1_ror_6 
    ldy #6
  !:
    lsr.z __55+1
    ror.z __55
    dey
    bne !-
    // (byte)(((word)get_vic_screen(*form_vic_screen)&$3fff)/$40)
    // [98] (byte~) gfx_mode::$56 ← (byte)(word~) gfx_mode::$55 -- vbuz1=_byte_vwuz2 
    lda.z __55
    sta.z __56
    // get_vic_charset(*form_vic_gfx)
    // [99] (byte) get_vic_charset::idx#0 ← *((const byte[]) form_fields_val+(byte) $19) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$19
    // [100] call get_vic_charset 
    jsr get_vic_charset
    // [101] (byte*) get_vic_charset::return#4 ← (byte*) get_vic_charset::return#2
    // gfx_mode::@30
    // [102] (byte*~) gfx_mode::$58 ← (byte*) get_vic_charset::return#4
    // (word)get_vic_charset(*form_vic_gfx)&$3fff
    // [103] (word~) gfx_mode::$59 ← (word)(byte*~) gfx_mode::$58 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __59
    and #<$3fff
    sta.z __59
    lda.z __59+1
    and #>$3fff
    sta.z __59+1
    // >((word)get_vic_charset(*form_vic_gfx)&$3fff)
    // [104] (byte~) gfx_mode::$60 ← > (word~) gfx_mode::$59 -- vbuaa=_hi_vwuz1 
    // (>((word)get_vic_charset(*form_vic_gfx)&$3fff))/4
    // [105] (byte~) gfx_mode::$61 ← (byte~) gfx_mode::$60 >> (byte) 2 -- vbuaa=vbuaa_ror_2 
    lsr
    lsr
    // (byte)(((word)get_vic_screen(*form_vic_screen)&$3fff)/$40)  |   ((>((word)get_vic_charset(*form_vic_gfx)&$3fff))/4)
    // [106] (byte~) gfx_mode::$62 ← (byte~) gfx_mode::$56 | (byte~) gfx_mode::$61 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __56
    // *VIC_MEMORY = (byte)(((word)get_vic_screen(*form_vic_screen)&$3fff)/$40)  |   ((>((word)get_vic_charset(*form_vic_gfx)&$3fff))/4)
    // [107] *((const byte*) VIC_MEMORY) ← (byte~) gfx_mode::$62 -- _deref_pbuc1=vbuaa 
    // Set VIC Bank
    // VIC memory
    sta VIC_MEMORY
    // get_vic_screen(*form_vic_cols)
    // [108] (byte) get_vic_screen::idx#1 ← *((const byte[]) form_fields_val+(byte) $1a) -- vbuaa=_deref_pbuc1 
    lda form_fields_val+$1a
    // [109] call get_vic_screen 
    // [220] phi from gfx_mode::@30 to get_vic_screen [phi:gfx_mode::@30->get_vic_screen]
    // [220] phi (byte) get_vic_screen::idx#2 = (byte) get_vic_screen::idx#1 [phi:gfx_mode::@30->get_vic_screen#0] -- register_copy 
    jsr get_vic_screen
    // get_vic_screen(*form_vic_cols)
    // [110] (byte*) get_vic_screen::return#11 ← (byte*) get_vic_screen::return#5
    // gfx_mode::@31
    // vic_colors = get_vic_screen(*form_vic_cols)
    // [111] (byte*) gfx_mode::vic_colors#0 ← (byte*) get_vic_screen::return#11
    // [112] phi from gfx_mode::@31 to gfx_mode::@19 [phi:gfx_mode::@31->gfx_mode::@19]
    // [112] phi (byte) gfx_mode::cy#4 = (byte) 0 [phi:gfx_mode::@31->gfx_mode::@19#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [112] phi (byte*) gfx_mode::col#3 = (const byte*) COLS [phi:gfx_mode::@31->gfx_mode::@19#1] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z col
    lda #>COLS
    sta.z col+1
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#0 [phi:gfx_mode::@31->gfx_mode::@19#2] -- register_copy 
    // [112] phi from gfx_mode::@21 to gfx_mode::@19 [phi:gfx_mode::@21->gfx_mode::@19]
    // [112] phi (byte) gfx_mode::cy#4 = (byte) gfx_mode::cy#1 [phi:gfx_mode::@21->gfx_mode::@19#0] -- register_copy 
    // [112] phi (byte*) gfx_mode::col#3 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@21->gfx_mode::@19#1] -- register_copy 
    // [112] phi (byte*) gfx_mode::vic_colors#3 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@21->gfx_mode::@19#2] -- register_copy 
    // gfx_mode::@19
  __b19:
    // [113] phi from gfx_mode::@19 to gfx_mode::@20 [phi:gfx_mode::@19->gfx_mode::@20]
    // [113] phi (byte) gfx_mode::cx#2 = (byte) 0 [phi:gfx_mode::@19->gfx_mode::@20#0] -- vbuxx=vbuc1 
    ldx #0
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#3 [phi:gfx_mode::@19->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#3 [phi:gfx_mode::@19->gfx_mode::@20#2] -- register_copy 
    // [113] phi from gfx_mode::@20 to gfx_mode::@20 [phi:gfx_mode::@20->gfx_mode::@20]
    // [113] phi (byte) gfx_mode::cx#2 = (byte) gfx_mode::cx#1 [phi:gfx_mode::@20->gfx_mode::@20#0] -- register_copy 
    // [113] phi (byte*) gfx_mode::col#2 = (byte*) gfx_mode::col#1 [phi:gfx_mode::@20->gfx_mode::@20#1] -- register_copy 
    // [113] phi (byte*) gfx_mode::vic_colors#2 = (byte*) gfx_mode::vic_colors#1 [phi:gfx_mode::@20->gfx_mode::@20#2] -- register_copy 
    // gfx_mode::@20
  __b20:
    // *col++ = *vic_colors++
    // [114] *((byte*) gfx_mode::col#2) ← *((byte*) gfx_mode::vic_colors#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (vic_colors),y
    sta (col),y
    // *col++ = *vic_colors++;
    // [115] (byte*) gfx_mode::col#1 ← ++ (byte*) gfx_mode::col#2 -- pbuz1=_inc_pbuz1 
    inc.z col
    bne !+
    inc.z col+1
  !:
    // [116] (byte*) gfx_mode::vic_colors#1 ← ++ (byte*) gfx_mode::vic_colors#2 -- pbuz1=_inc_pbuz1 
    inc.z vic_colors
    bne !+
    inc.z vic_colors+1
  !:
    // for(byte cx: 0..39)
    // [117] (byte) gfx_mode::cx#1 ← ++ (byte) gfx_mode::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [118] if((byte) gfx_mode::cx#1!=(byte) $28) goto gfx_mode::@20 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b20
    // gfx_mode::@21
    // for(byte cy: 0..24 )
    // [119] (byte) gfx_mode::cy#1 ← ++ (byte) gfx_mode::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [120] if((byte) gfx_mode::cy#1!=(byte) $19) goto gfx_mode::@19 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b19
    // gfx_mode::@22
    // *BORDERCOL = 0
    // [121] *((const byte*) BORDERCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Background colors
    lda #0
    sta BORDERCOL
    // *form_vic_bg0_hi*$10
    // [122] (byte~) gfx_mode::$64 ← *((const byte[]) form_fields_val+(byte) $1c) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$1c
    asl
    asl
    asl
    asl
    // *form_vic_bg0_hi*$10|*form_vic_bg0_lo
    // [123] (byte~) gfx_mode::$65 ← (byte~) gfx_mode::$64 | *((const byte[]) form_fields_val+(byte) $1d) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$1d
    // *BGCOL1 = *form_vic_bg0_hi*$10|*form_vic_bg0_lo
    // [124] *((const byte*) BGCOL1) ← (byte~) gfx_mode::$65 -- _deref_pbuc1=vbuaa 
    sta BGCOL1
    // *form_vic_bg1_hi*$10
    // [125] (byte~) gfx_mode::$66 ← *((const byte[]) form_fields_val+(byte) $1e) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$1e
    asl
    asl
    asl
    asl
    // *form_vic_bg1_hi*$10|*form_vic_bg1_lo
    // [126] (byte~) gfx_mode::$67 ← (byte~) gfx_mode::$66 | *((const byte[]) form_fields_val+(byte) $1f) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$1f
    // *BGCOL2 = *form_vic_bg1_hi*$10|*form_vic_bg1_lo
    // [127] *((const byte*) BGCOL2) ← (byte~) gfx_mode::$67 -- _deref_pbuc1=vbuaa 
    sta BGCOL2
    // *form_vic_bg2_hi*$10
    // [128] (byte~) gfx_mode::$68 ← *((const byte[]) form_fields_val+(byte) $20) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$20
    asl
    asl
    asl
    asl
    // *form_vic_bg2_hi*$10|*form_vic_bg2_lo
    // [129] (byte~) gfx_mode::$69 ← (byte~) gfx_mode::$68 | *((const byte[]) form_fields_val+(byte) $21) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$21
    // *BGCOL3 = *form_vic_bg2_hi*$10|*form_vic_bg2_lo
    // [130] *((const byte*) BGCOL3) ← (byte~) gfx_mode::$69 -- _deref_pbuc1=vbuaa 
    sta BGCOL3
    // *form_vic_bg3_hi*$10
    // [131] (byte~) gfx_mode::$70 ← *((const byte[]) form_fields_val+(byte) $22) << (byte) 4 -- vbuaa=_deref_pbuc1_rol_4 
    lda form_fields_val+$22
    asl
    asl
    asl
    asl
    // *form_vic_bg3_hi*$10|*form_vic_bg3_lo
    // [132] (byte~) gfx_mode::$71 ← (byte~) gfx_mode::$70 | *((const byte[]) form_fields_val+(byte) $23) -- vbuaa=vbuaa_bor__deref_pbuc1 
    ora form_fields_val+$23
    // *BGCOL4 = *form_vic_bg3_hi*$10|*form_vic_bg3_lo
    // [133] *((const byte*) BGCOL4) ← (byte~) gfx_mode::$71 -- _deref_pbuc1=vbuaa 
    sta BGCOL4
    // if(*form_dtv_palet==0)
    // [134] if(*((const byte[]) form_fields_val+(byte) $1b)==(byte) 0) goto gfx_mode::@24 -- _deref_pbuc1_eq_0_then_la1 
    // DTV Palette
    lda form_fields_val+$1b
    cmp #0
    beq b4
    // [135] phi from gfx_mode::@22 to gfx_mode::@23 [phi:gfx_mode::@22->gfx_mode::@23]
    // [135] phi (byte) gfx_mode::j#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@23#0] -- vbuxx=vbuc1 
    ldx #0
  // DTV Palette - Grey Tones
    // [135] phi from gfx_mode::@23 to gfx_mode::@23 [phi:gfx_mode::@23->gfx_mode::@23]
    // [135] phi (byte) gfx_mode::j#2 = (byte) gfx_mode::j#1 [phi:gfx_mode::@23->gfx_mode::@23#0] -- register_copy 
    // gfx_mode::@23
  __b23:
    // DTV_PALETTE[j] = j
    // [136] *((const byte*) DTV_PALETTE + (byte) gfx_mode::j#2) ← (byte) gfx_mode::j#2 -- pbuc1_derefidx_vbuxx=vbuxx 
    txa
    sta DTV_PALETTE,x
    // for(byte j : 0..$f)
    // [137] (byte) gfx_mode::j#1 ← ++ (byte) gfx_mode::j#2 -- vbuxx=_inc_vbuxx 
    inx
    // [138] if((byte) gfx_mode::j#1!=(byte) $10) goto gfx_mode::@23 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b23
    // gfx_mode::@25
  __b25:
    // while(*RASTER!=$ff)
    // [139] if(*((const byte*) RASTER)!=(byte) $ff) goto gfx_mode::@25 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b25
    // [140] phi from gfx_mode::@25 to gfx_mode::@26 [phi:gfx_mode::@25->gfx_mode::@26]
    // gfx_mode::@26
    // keyboard_event_scan()
    // [141] call keyboard_event_scan 
    // [157] phi from gfx_mode::@26 to keyboard_event_scan [phi:gfx_mode::@26->keyboard_event_scan]
    // [157] phi (byte) keyboard_events_size#99 = (byte) keyboard_events_size#24 [phi:gfx_mode::@26->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [142] phi from gfx_mode::@26 to gfx_mode::@32 [phi:gfx_mode::@26->gfx_mode::@32]
    // gfx_mode::@32
    // keyboard_event_get()
    // [143] call keyboard_event_get 
    jsr keyboard_event_get
    // [144] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
    // gfx_mode::@33
    // keyboard_event = keyboard_event_get()
    // [145] (byte) gfx_mode::keyboard_event#0 ← (byte) keyboard_event_get::return#3
    // if(keyboard_event==KEY_SPACE)
    // [146] if((byte) gfx_mode::keyboard_event#0==(const byte) KEY_SPACE) goto gfx_mode::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #KEY_SPACE
    beq __breturn
    jmp __b25
    // gfx_mode::@return
  __breturn:
    // }
    // [147] return 
    rts
  // DTV Palette - default
    // [148] phi from gfx_mode::@22 to gfx_mode::@24 [phi:gfx_mode::@22->gfx_mode::@24]
  b4:
    // [148] phi (byte) gfx_mode::i#2 = (byte) 0 [phi:gfx_mode::@22->gfx_mode::@24#0] -- vbuxx=vbuc1 
    ldx #0
    // [148] phi from gfx_mode::@24 to gfx_mode::@24 [phi:gfx_mode::@24->gfx_mode::@24]
    // [148] phi (byte) gfx_mode::i#2 = (byte) gfx_mode::i#1 [phi:gfx_mode::@24->gfx_mode::@24#0] -- register_copy 
    // gfx_mode::@24
  __b24:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [149] *((const byte*) DTV_PALETTE + (byte) gfx_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) gfx_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [150] (byte) gfx_mode::i#1 ← ++ (byte) gfx_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [151] if((byte) gfx_mode::i#1!=(byte) $10) goto gfx_mode::@24 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b24
    jmp __b25
}
  // keyboard_event_get
// Get the next event from the keyboard event buffer.
// Returns $ff if there is no event waiting. As all events are <$7f it is enough to examine bit 7 when determining if there is any event to process.
// The buffer is filled by keyboard_event_scan()
keyboard_event_get: {
    // if(keyboard_events_size==0)
    // [152] if((byte) keyboard_events_size#100==(byte) 0) goto keyboard_event_get::@return -- vbuz1_eq_0_then_la1 
    lda.z keyboard_events_size
    cmp #0
    beq b1
    // keyboard_event_get::@1
    // return keyboard_events[--keyboard_events_size];
    // [153] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#100 -- vbuz1=_dec_vbuz1 
    dec.z keyboard_events_size
    // [154] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events + (byte) keyboard_events_size#4) -- vbuaa=pbuc1_derefidx_vbuz1 
    ldy.z keyboard_events_size
    lda keyboard_events,y
    // [155] phi from keyboard_event_get::@1 to keyboard_event_get::@return [phi:keyboard_event_get::@1->keyboard_event_get::@return]
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#4 [phi:keyboard_event_get::@1->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) keyboard_event_get::return#1 [phi:keyboard_event_get::@1->keyboard_event_get::@return#1] -- register_copy 
    rts
    // [155] phi from keyboard_event_get to keyboard_event_get::@return [phi:keyboard_event_get->keyboard_event_get::@return]
  b1:
    // [155] phi (byte) keyboard_events_size#24 = (byte) keyboard_events_size#100 [phi:keyboard_event_get->keyboard_event_get::@return#0] -- register_copy 
    // [155] phi (byte) keyboard_event_get::return#2 = (byte) $ff [phi:keyboard_event_get->keyboard_event_get::@return#1] -- vbuaa=vbuc1 
    lda #$ff
    // keyboard_event_get::@return
    // }
    // [156] return 
    rts
}
  // keyboard_event_scan
// Scans the entire matrix to determine which keys have been pressed/depressed.
// Generates keyboard events into the event buffer. Events can be read using keyboard_event_get().
// Handles debounce and only generates events when the status of a key changes.
// Also stores current status of modifiers in keyboard_modifiers.
keyboard_event_scan: {
    .label row_scan = $1f
    .label keycode = $d
    .label row = $a
    // [158] phi from keyboard_event_scan to keyboard_event_scan::@7 [phi:keyboard_event_scan->keyboard_event_scan::@7]
    // [158] phi (byte) keyboard_events_size#109 = (byte) keyboard_events_size#99 [phi:keyboard_event_scan->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#1] -- vbuz1=vbuc1 
    lda #0
    sta.z keycode
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) 0 [phi:keyboard_event_scan->keyboard_event_scan::@7#2] -- vbuz1=vbuc1 
    sta.z row
    // [158] phi from keyboard_event_scan::@8 to keyboard_event_scan::@7 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7]
    // [158] phi (byte) keyboard_events_size#109 = (byte) keyboard_events_size#100 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#0] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::keycode#11 = (byte) keyboard_event_scan::keycode#13 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#1] -- register_copy 
    // [158] phi (byte) keyboard_event_scan::row#2 = (byte) keyboard_event_scan::row#1 [phi:keyboard_event_scan::@8->keyboard_event_scan::@7#2] -- register_copy 
    // keyboard_event_scan::@7
  __b7:
    // keyboard_matrix_read(row)
    // [159] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2 -- vbuxx=vbuz1 
    ldx.z row
    // [160] call keyboard_matrix_read 
    jsr keyboard_matrix_read
    // [161] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
    // keyboard_event_scan::@19
    // row_scan = keyboard_matrix_read(row)
    // [162] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2 -- vbuz1=vbuaa 
    sta.z row_scan
    // if(row_scan!=keyboard_scan_values[row])
    // [163] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@9 -- vbuz1_neq_pbuc1_derefidx_vbuz2_then_la1 
    ldy.z row
    cmp keyboard_scan_values,y
    bne b3
    // keyboard_event_scan::@16
    // keycode = keycode + 8
    // [164] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte) 8 -- vbuz1=vbuz1_plus_vbuc1 
    lax.z keycode
    axs #-[8]
    stx.z keycode
    // [165] phi from keyboard_event_scan::@15 keyboard_event_scan::@16 to keyboard_event_scan::@8 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8]
    // [165] phi (byte) keyboard_events_size#100 = (byte) keyboard_events_size#108 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#0] -- register_copy 
    // [165] phi (byte) keyboard_event_scan::keycode#13 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@15/keyboard_event_scan::@16->keyboard_event_scan::@8#1] -- register_copy 
    // keyboard_event_scan::@8
  __b8:
    // for(byte row : 0..7)
    // [166] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2 -- vbuz1=_inc_vbuz1 
    inc.z row
    // [167] if((byte) keyboard_event_scan::row#1!=(byte) 8) goto keyboard_event_scan::@7 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z row
    bne __b7
    // [168] phi from keyboard_event_scan::@8 to keyboard_event_scan::@17 [phi:keyboard_event_scan::@8->keyboard_event_scan::@17]
    // keyboard_event_scan::@17
    // keyboard_event_pressed(KEY_LSHIFT)
    // [169] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@17 to keyboard_event_pressed [phi:keyboard_event_scan::@17->keyboard_event_pressed]
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_LSHIFT [phi:keyboard_event_scan::@17->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_LSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_LSHIFT)
    // [170] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#10
    // keyboard_event_scan::@20
    // [171] (byte~) keyboard_event_scan::$0 ← (byte) keyboard_event_pressed::return#0
    // if(keyboard_event_pressed(KEY_LSHIFT)!= 0)
    // [172] if((byte~) keyboard_event_scan::$0==(byte) 0) goto keyboard_event_scan::@1 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1
    // [173] phi from keyboard_event_scan::@20 to keyboard_event_scan::@18 [phi:keyboard_event_scan::@20->keyboard_event_scan::@18]
    // keyboard_event_scan::@18
    // [174] phi from keyboard_event_scan::@18 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@18->keyboard_event_scan::@1]
    // [174] phi (byte) keyboard_modifiers#18 = (const byte) KEY_MODIFIER_LSHIFT [phi:keyboard_event_scan::@18->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #KEY_MODIFIER_LSHIFT
    jmp __b1
    // [174] phi from keyboard_event_scan::@20 to keyboard_event_scan::@1 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1]
  b1:
    // [174] phi (byte) keyboard_modifiers#18 = (byte) 0 [phi:keyboard_event_scan::@20->keyboard_event_scan::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // keyboard_event_scan::@1
  __b1:
    // keyboard_event_pressed(KEY_RSHIFT)
    // [175] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@1 to keyboard_event_pressed [phi:keyboard_event_scan::@1->keyboard_event_pressed]
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_RSHIFT [phi:keyboard_event_scan::@1->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_RSHIFT
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_RSHIFT)
    // [176] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#10
    // keyboard_event_scan::@21
    // [177] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_pressed::return#1
    // if(keyboard_event_pressed(KEY_RSHIFT)!= 0)
    // [178] if((byte~) keyboard_event_scan::$3==(byte) 0) goto keyboard_event_scan::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b2
    // keyboard_event_scan::@4
    // keyboard_modifiers = keyboard_modifiers | KEY_MODIFIER_RSHIFT
    // [179] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#18 | (const byte) KEY_MODIFIER_RSHIFT -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_RSHIFT
    tax
    // [180] phi from keyboard_event_scan::@21 keyboard_event_scan::@4 to keyboard_event_scan::@2 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2]
    // [180] phi (byte) keyboard_modifiers#19 = (byte) keyboard_modifiers#18 [phi:keyboard_event_scan::@21/keyboard_event_scan::@4->keyboard_event_scan::@2#0] -- register_copy 
    // keyboard_event_scan::@2
  __b2:
    // keyboard_event_pressed(KEY_CTRL)
    // [181] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@2 to keyboard_event_pressed [phi:keyboard_event_scan::@2->keyboard_event_pressed]
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_CTRL [phi:keyboard_event_scan::@2->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_CTRL
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_CTRL)
    // [182] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#10
    // keyboard_event_scan::@22
    // [183] (byte~) keyboard_event_scan::$6 ← (byte) keyboard_event_pressed::return#2
    // if(keyboard_event_pressed(KEY_CTRL)!= 0)
    // [184] if((byte~) keyboard_event_scan::$6==(byte) 0) goto keyboard_event_scan::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // keyboard_event_scan::@5
    // keyboard_modifiers = keyboard_modifiers | KEY_MODIFIER_CTRL
    // [185] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#19 | (const byte) KEY_MODIFIER_CTRL -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_CTRL
    tax
    // [186] phi from keyboard_event_scan::@22 keyboard_event_scan::@5 to keyboard_event_scan::@3 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3]
    // [186] phi (byte) keyboard_modifiers#20 = (byte) keyboard_modifiers#19 [phi:keyboard_event_scan::@22/keyboard_event_scan::@5->keyboard_event_scan::@3#0] -- register_copy 
    // keyboard_event_scan::@3
  __b3:
    // keyboard_event_pressed(KEY_COMMODORE)
    // [187] call keyboard_event_pressed 
    // [211] phi from keyboard_event_scan::@3 to keyboard_event_pressed [phi:keyboard_event_scan::@3->keyboard_event_pressed]
    // [211] phi (byte) keyboard_event_pressed::keycode#4 = (const byte) KEY_COMMODORE [phi:keyboard_event_scan::@3->keyboard_event_pressed#0] -- vbuz1=vbuc1 
    lda #KEY_COMMODORE
    sta.z keyboard_event_pressed.keycode
    jsr keyboard_event_pressed
    // keyboard_event_pressed(KEY_COMMODORE)
    // [188] (byte) keyboard_event_pressed::return#3 ← (byte) keyboard_event_pressed::return#10
    // keyboard_event_scan::@23
    // [189] (byte~) keyboard_event_scan::$9 ← (byte) keyboard_event_pressed::return#3
    // if(keyboard_event_pressed(KEY_COMMODORE)!= 0)
    // [190] if((byte~) keyboard_event_scan::$9==(byte) 0) goto keyboard_event_scan::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __breturn
    // keyboard_event_scan::@6
    // keyboard_modifiers = keyboard_modifiers | KEY_MODIFIER_COMMODORE
    // [191] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#20 | (const byte) KEY_MODIFIER_COMMODORE -- vbuxx=vbuxx_bor_vbuc1 
    txa
    ora #KEY_MODIFIER_COMMODORE
    tax
    // [192] phi from keyboard_event_scan::@23 keyboard_event_scan::@6 to keyboard_event_scan::@return [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return]
    // [192] phi (byte) keyboard_modifiers#21 = (byte) keyboard_modifiers#20 [phi:keyboard_event_scan::@23/keyboard_event_scan::@6->keyboard_event_scan::@return#0] -- register_copy 
    // keyboard_event_scan::@return
  __breturn:
    // }
    // [193] return 
    rts
  // Something has changed on the keyboard row - check each column
    // [194] phi from keyboard_event_scan::@10 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9]
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#108 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#14 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) keyboard_event_scan::col#1 [phi:keyboard_event_scan::@10->keyboard_event_scan::@9#2] -- register_copy 
    // [194] phi from keyboard_event_scan::@19 to keyboard_event_scan::@9 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9]
  b3:
    // [194] phi (byte) keyboard_events_size#18 = (byte) keyboard_events_size#109 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#0] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::keycode#10 = (byte) keyboard_event_scan::keycode#11 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#1] -- register_copy 
    // [194] phi (byte) keyboard_event_scan::col#2 = (byte) 0 [phi:keyboard_event_scan::@19->keyboard_event_scan::@9#2] -- vbuxx=vbuc1 
    ldx #0
    // keyboard_event_scan::@9
  __b9:
    // row_scan^keyboard_scan_values[row]
    // [195] (byte~) keyboard_event_scan::$15 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) -- vbuaa=vbuz1_bxor_pbuc1_derefidx_vbuz2 
    lda.z row_scan
    ldy.z row
    eor keyboard_scan_values,y
    // (row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col]
    // [196] (byte~) keyboard_event_scan::$16 ← (byte~) keyboard_event_scan::$15 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuaa_band_pbuc1_derefidx_vbuxx 
    and keyboard_matrix_col_bitmask,x
    // if(((row_scan^keyboard_scan_values[row])&keyboard_matrix_col_bitmask[col])!=0)
    // [197] if((byte~) keyboard_event_scan::$16==(byte) 0) goto keyboard_event_scan::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10
    // keyboard_event_scan::@12
    // if(keyboard_events_size!=8)
    // [198] if((byte) keyboard_events_size#18==(byte) 8) goto keyboard_event_scan::@10 -- vbuz1_eq_vbuc1_then_la1 
    lda #8
    cmp.z keyboard_events_size
    beq __b10
    // keyboard_event_scan::@13
    // event_type = row_scan&keyboard_matrix_col_bitmask[col]
    // [199] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte) keyboard_event_scan::col#2) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuxx 
    lda keyboard_matrix_col_bitmask,x
    and.z row_scan
    // if(event_type==0)
    // [200] if((byte) keyboard_event_scan::event_type#0==(byte) 0) goto keyboard_event_scan::@11 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b11
    // keyboard_event_scan::@14
    // keyboard_events[keyboard_events_size++] = keycode
    // [201] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte) keyboard_event_scan::keycode#10 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Key pressed
    lda.z keycode
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode;
    // [202] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    // [203] phi from keyboard_event_scan::@11 keyboard_event_scan::@12 keyboard_event_scan::@14 keyboard_event_scan::@9 to keyboard_event_scan::@10 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10]
    // [203] phi (byte) keyboard_events_size#108 = (byte) keyboard_events_size#1 [phi:keyboard_event_scan::@11/keyboard_event_scan::@12/keyboard_event_scan::@14/keyboard_event_scan::@9->keyboard_event_scan::@10#0] -- register_copy 
    // keyboard_event_scan::@10
  __b10:
    // keycode++;
    // [204] (byte) keyboard_event_scan::keycode#14 ← ++ (byte) keyboard_event_scan::keycode#10 -- vbuz1=_inc_vbuz1 
    inc.z keycode
    // for(byte col : 0..7)
    // [205] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2 -- vbuxx=_inc_vbuxx 
    inx
    // [206] if((byte) keyboard_event_scan::col#1!=(byte) 8) goto keyboard_event_scan::@9 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b9
    // keyboard_event_scan::@15
    // keyboard_scan_values[row] = row_scan
    // [207] *((const byte[8]) keyboard_scan_values + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0 -- pbuc1_derefidx_vbuz1=vbuz2 
    // Store the current keyboard status for the row to debounce
    lda.z row_scan
    ldy.z row
    sta keyboard_scan_values,y
    jmp __b8
    // keyboard_event_scan::@11
  __b11:
    // keycode|$40
    // [208] (byte~) keyboard_event_scan::$23 ← (byte) keyboard_event_scan::keycode#10 | (byte) $40 -- vbuaa=vbuz1_bor_vbuc1 
    lda #$40
    ora.z keycode
    // keyboard_events[keyboard_events_size++] = keycode|$40
    // [209] *((const byte[8]) keyboard_events + (byte) keyboard_events_size#18) ← (byte~) keyboard_event_scan::$23 -- pbuc1_derefidx_vbuz1=vbuaa 
    // Key released
    ldy.z keyboard_events_size
    sta keyboard_events,y
    // keyboard_events[keyboard_events_size++] = keycode|$40;
    // [210] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#18 -- vbuz1=_inc_vbuz1 
    inc.z keyboard_events_size
    jmp __b10
}
  // keyboard_event_pressed
// Determine if a specific key is currently pressed based on the last keyboard_event_scan()
// Returns 0 is not pressed and non-0 if pressed
// keyboard_event_pressed(byte zeropage($d) keycode)
keyboard_event_pressed: {
    .label row_bits = $1f
    .label keycode = $d
    // keycode>>3
    // [212] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#4 >> (byte) 3 -- vbuaa=vbuz1_ror_3 
    lda.z keycode
    lsr
    lsr
    lsr
    // row_bits = keyboard_scan_values[keycode>>3]
    // [213] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values + (byte~) keyboard_event_pressed::$0) -- vbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_scan_values,y
    sta.z row_bits
    // keycode&7
    // [214] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#4 & (byte) 7 -- vbuaa=vbuz1_band_vbuc1 
    lda #7
    and.z keycode
    // row_bits & keyboard_matrix_col_bitmask[keycode&7]
    // [215] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask + (byte~) keyboard_event_pressed::$1) -- vbuaa=vbuz1_band_pbuc1_derefidx_vbuaa 
    tay
    lda keyboard_matrix_col_bitmask,y
    and.z row_bits
    // keyboard_event_pressed::@return
    // }
    // [216] return 
    rts
}
  // keyboard_matrix_read
// Read a single row of the keyboard matrix
// The row ID (0-7) of the keyboard matrix row to read. See the C64 key matrix for row IDs.
// Returns the keys pressed on the row as bits according to the C64 key matrix.
// Notice: If the C64 normal interrupt is still running it will occasionally interrupt right between the read & write
// leading to erroneous readings. You must disable kill the normal interrupt or sei/cli around calls to the keyboard matrix reader.
// keyboard_matrix_read(byte register(X) rowid)
keyboard_matrix_read: {
    // *CIA1_PORT_A = keyboard_matrix_row_bitmask[rowid]
    // [217] *((const byte*) CIA1_PORT_A) ← *((const byte[8]) keyboard_matrix_row_bitmask + (byte) keyboard_matrix_read::rowid#0) -- _deref_pbuc1=pbuc2_derefidx_vbuxx 
    lda keyboard_matrix_row_bitmask,x
    sta CIA1_PORT_A
    // ~*CIA1_PORT_B
    // [218] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B) -- vbuaa=_bnot__deref_pbuc1 
    lda CIA1_PORT_B
    eor #$ff
    // keyboard_matrix_read::@return
    // }
    // [219] return 
    rts
}
  // get_vic_screen
// Get the VIC screen address from the screen index
// get_vic_screen(byte register(A) idx)
get_vic_screen: {
    .label return = 6
    // if(idx==0)
    // [221] if((byte) get_vic_screen::idx#2==(byte) 0) goto get_vic_screen::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // get_vic_screen::@2
    // if(idx==1)
    // [222] if((byte) get_vic_screen::idx#2==(byte) 1) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq b1
    // get_vic_screen::@3
    // if(idx==2)
    // [223] if((byte) get_vic_screen::idx#2==(byte) 2) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq b2
    // get_vic_screen::@4
    // if(idx==3)
    // [224] if((byte) get_vic_screen::idx#2==(byte) 3) goto get_vic_screen::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq b3
    // get_vic_screen::@5
    // if(idx==4)
    // [225] if((byte) get_vic_screen::idx#2!=(byte) 4) goto get_vic_screen::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #4
    bne __b1
    // [227] phi from get_vic_screen::@5 to get_vic_screen::@return [phi:get_vic_screen::@5->get_vic_screen::@return]
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN4 [phi:get_vic_screen::@5->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z return
    lda #>VIC_SCREEN4
    sta.z return+1
    rts
    // [226] phi from get_vic_screen::@5 to get_vic_screen::@1 [phi:get_vic_screen::@5->get_vic_screen::@1]
    // get_vic_screen::@1
  __b1:
    // [227] phi from get_vic_screen get_vic_screen::@1 to get_vic_screen::@return [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return]
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN0 [phi:get_vic_screen/get_vic_screen::@1->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    rts
    // [227] phi from get_vic_screen::@2 to get_vic_screen::@return [phi:get_vic_screen::@2->get_vic_screen::@return]
  b1:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN1 [phi:get_vic_screen::@2->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    rts
    // [227] phi from get_vic_screen::@3 to get_vic_screen::@return [phi:get_vic_screen::@3->get_vic_screen::@return]
  b2:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN2 [phi:get_vic_screen::@3->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    rts
    // [227] phi from get_vic_screen::@4 to get_vic_screen::@return [phi:get_vic_screen::@4->get_vic_screen::@return]
  b3:
    // [227] phi (byte*) get_vic_screen::return#5 = (const byte*) VIC_SCREEN3 [phi:get_vic_screen::@4->get_vic_screen::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    // get_vic_screen::@return
    // }
    // [228] return 
    rts
}
  // get_vic_charset
// Get the VIC charset/bitmap address from the index
// get_vic_charset(byte register(A) idx)
get_vic_charset: {
    .label return = $e
    // if(idx==0)
    // [229] if((byte) get_vic_charset::idx#0==(byte) 0) goto get_vic_charset::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // get_vic_charset::@2
    // if(idx==1)
    // [230] if((byte) get_vic_charset::idx#0!=(byte) 1) goto get_vic_charset::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #1
    bne __b1
    // [232] phi from get_vic_charset::@2 to get_vic_charset::@return [phi:get_vic_charset::@2->get_vic_charset::@return]
    // [232] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_BITMAP [phi:get_vic_charset::@2->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    rts
    // [231] phi from get_vic_charset::@2 to get_vic_charset::@1 [phi:get_vic_charset::@2->get_vic_charset::@1]
    // get_vic_charset::@1
  __b1:
    // [232] phi from get_vic_charset get_vic_charset::@1 to get_vic_charset::@return [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return]
    // [232] phi (byte*) get_vic_charset::return#2 = (const byte*) VIC_CHARSET_ROM [phi:get_vic_charset/get_vic_charset::@1->get_vic_charset::@return#0] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    // get_vic_charset::@return
    // }
    // [233] return 
    rts
}
  // get_plane
// Get plane address from a plane index (from the form)
// get_plane(byte register(A) idx)
get_plane: {
    .label return = 2
    // if(idx==0)
    // [235] if((byte) get_plane::idx#10==(byte) 0) goto get_plane::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1
    // get_plane::@2
    // if(idx==1)
    // [236] if((byte) get_plane::idx#10==(byte) 1) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    bne !b6+
    jmp b6
  !b6:
    // get_plane::@3
    // if(idx==2)
    // [237] if((byte) get_plane::idx#10==(byte) 2) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    bne !b7+
    jmp b7
  !b7:
    // get_plane::@4
    // if(idx==3)
    // [238] if((byte) get_plane::idx#10==(byte) 3) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    bne !b8+
    jmp b8
  !b8:
    // get_plane::@5
    // if(idx==4)
    // [239] if((byte) get_plane::idx#10==(byte) 4) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    bne !b9+
    jmp b9
  !b9:
    // get_plane::@6
    // if(idx==5)
    // [240] if((byte) get_plane::idx#10==(byte) 5) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    bne !b10+
    jmp b10
  !b10:
    // get_plane::@7
    // if(idx==6)
    // [241] if((byte) get_plane::idx#10==(byte) 6) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    bne !b11+
    jmp b11
  !b11:
    // get_plane::@8
    // if(idx==7)
    // [242] if((byte) get_plane::idx#10==(byte) 7) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    bne !b12+
    jmp b12
  !b12:
    // get_plane::@9
    // if(idx==8)
    // [243] if((byte) get_plane::idx#10==(byte) 8) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    bne !b13+
    jmp b13
  !b13:
    // get_plane::@10
    // if(idx==9)
    // [244] if((byte) get_plane::idx#10==(byte) 9) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq b2
    // get_plane::@11
    // if(idx==10)
    // [245] if((byte) get_plane::idx#10==(byte) $a) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq b3
    // get_plane::@12
    // if(idx==11)
    // [246] if((byte) get_plane::idx#10==(byte) $b) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$b
    beq b4
    // get_plane::@13
    // if(idx==12)
    // [247] if((byte) get_plane::idx#10==(byte) $c) goto get_plane::@return -- vbuaa_eq_vbuc1_then_la1 
    cmp #$c
    beq b5
    // get_plane::@14
    // if(idx==13)
    // [248] if((byte) get_plane::idx#10!=(byte) $d) goto get_plane::@1 -- vbuaa_neq_vbuc1_then_la1 
    cmp #$d
    bne __b1
    // [250] phi from get_plane::@14 to get_plane::@return [phi:get_plane::@14->get_plane::@return]
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_FULL [phi:get_plane::@14->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z return
    lda #>PLANE_FULL
    sta.z return+1
    lda #<PLANE_FULL>>$10
    sta.z return+2
    lda #>PLANE_FULL>>$10
    sta.z return+3
    rts
    // [249] phi from get_plane::@14 to get_plane::@1 [phi:get_plane::@14->get_plane::@1]
    // get_plane::@1
  __b1:
    // [250] phi from get_plane::@1 to get_plane::@return [phi:get_plane::@1->get_plane::@return]
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN0 [phi:get_plane::@1->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    lda #<VIC_SCREEN0>>$10
    sta.z return+2
    lda #>VIC_SCREEN0>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane to get_plane::@return [phi:get_plane->get_plane::@return]
  b1:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN0 [phi:get_plane->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN0
    sta.z return
    lda #>VIC_SCREEN0
    sta.z return+1
    lda #<VIC_SCREEN0>>$10
    sta.z return+2
    lda #>VIC_SCREEN0>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@10 to get_plane::@return [phi:get_plane::@10->get_plane::@return]
  b2:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_HORISONTAL2 [phi:get_plane::@10->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL2
    sta.z return
    lda #>PLANE_HORISONTAL2
    sta.z return+1
    lda #<PLANE_HORISONTAL2>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL2>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@11 to get_plane::@return [phi:get_plane::@11->get_plane::@return]
  b3:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_VERTICAL2 [phi:get_plane::@11->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z return
    lda #>PLANE_VERTICAL2
    sta.z return+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@12 to get_plane::@return [phi:get_plane::@12->get_plane::@return]
  b4:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_CHARSET8 [phi:get_plane::@12->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_CHARSET8
    sta.z return
    lda #>PLANE_CHARSET8
    sta.z return+1
    lda #<PLANE_CHARSET8>>$10
    sta.z return+2
    lda #>PLANE_CHARSET8>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@13 to get_plane::@return [phi:get_plane::@13->get_plane::@return]
  b5:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_BLANK [phi:get_plane::@13->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z return
    lda #>PLANE_BLANK
    sta.z return+1
    lda #<PLANE_BLANK>>$10
    sta.z return+2
    lda #>PLANE_BLANK>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@2 to get_plane::@return [phi:get_plane::@2->get_plane::@return]
  b6:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN1 [phi:get_plane::@2->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN1
    sta.z return
    lda #>VIC_SCREEN1
    sta.z return+1
    lda #<VIC_SCREEN1>>$10
    sta.z return+2
    lda #>VIC_SCREEN1>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@3 to get_plane::@return [phi:get_plane::@3->get_plane::@return]
  b7:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN2 [phi:get_plane::@3->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN2
    sta.z return
    lda #>VIC_SCREEN2
    sta.z return+1
    lda #<VIC_SCREEN2>>$10
    sta.z return+2
    lda #>VIC_SCREEN2>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@4 to get_plane::@return [phi:get_plane::@4->get_plane::@return]
  b8:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_SCREEN3 [phi:get_plane::@4->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_SCREEN3
    sta.z return
    lda #>VIC_SCREEN3
    sta.z return+1
    lda #<VIC_SCREEN3>>$10
    sta.z return+2
    lda #>VIC_SCREEN3>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@5 to get_plane::@return [phi:get_plane::@5->get_plane::@return]
  b9:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_BITMAP [phi:get_plane::@5->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_BITMAP
    sta.z return
    lda #>VIC_BITMAP
    sta.z return+1
    lda #<VIC_BITMAP>>$10
    sta.z return+2
    lda #>VIC_BITMAP>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@6 to get_plane::@return [phi:get_plane::@6->get_plane::@return]
  b10:
    // [250] phi (dword) get_plane::return#14 = (dword)(const byte*) VIC_CHARSET_ROM [phi:get_plane::@6->get_plane::@return#0] -- vduz1=vduc1 
    lda #<VIC_CHARSET_ROM
    sta.z return
    lda #>VIC_CHARSET_ROM
    sta.z return+1
    lda #<VIC_CHARSET_ROM>>$10
    sta.z return+2
    lda #>VIC_CHARSET_ROM>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@7 to get_plane::@return [phi:get_plane::@7->get_plane::@return]
  b11:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_8BPP_CHUNKY [phi:get_plane::@7->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_8BPP_CHUNKY
    sta.z return
    lda #>PLANE_8BPP_CHUNKY
    sta.z return+1
    lda #<PLANE_8BPP_CHUNKY>>$10
    sta.z return+2
    lda #>PLANE_8BPP_CHUNKY>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@8 to get_plane::@return [phi:get_plane::@8->get_plane::@return]
  b12:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_HORISONTAL [phi:get_plane::@8->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_HORISONTAL
    sta.z return
    lda #>PLANE_HORISONTAL
    sta.z return+1
    lda #<PLANE_HORISONTAL>>$10
    sta.z return+2
    lda #>PLANE_HORISONTAL>>$10
    sta.z return+3
    rts
    // [250] phi from get_plane::@9 to get_plane::@return [phi:get_plane::@9->get_plane::@return]
  b13:
    // [250] phi (dword) get_plane::return#14 = (const dword) PLANE_VERTICAL [phi:get_plane::@9->get_plane::@return#0] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL
    sta.z return
    lda #>PLANE_VERTICAL
    sta.z return+1
    lda #<PLANE_VERTICAL>>$10
    sta.z return+2
    lda #>PLANE_VERTICAL>>$10
    sta.z return+3
    // get_plane::@return
    // }
    // [251] return 
    rts
}
  // form_mode
// Show the form - and let the user change values
form_mode: {
    .label preset_current = $11
    // print_set_screen(COLS)
    // [253] call print_set_screen 
    // [444] phi from form_mode to print_set_screen [phi:form_mode->print_set_screen]
    // [444] phi (byte*) print_set_screen::screen#2 = (const byte*) COLS [phi:form_mode->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<COLS
    sta.z print_set_screen.screen
    lda #>COLS
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [254] phi from form_mode to form_mode::@8 [phi:form_mode->form_mode::@8]
    // form_mode::@8
    // print_cls()
    // [255] call print_cls 
    jsr print_cls
    // [256] phi from form_mode::@8 to form_mode::@9 [phi:form_mode::@8->form_mode::@9]
    // form_mode::@9
    // print_str_lines(FORM_COLS)
    // [257] call print_str_lines 
    // [412] phi from form_mode::@9 to print_str_lines [phi:form_mode::@9->print_str_lines]
    // [412] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_COLS [phi:form_mode::@9->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_COLS
    sta.z print_str_lines.str
    lda #>FORM_COLS
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [258] phi from form_mode::@9 to form_mode::@10 [phi:form_mode::@9->form_mode::@10]
    // form_mode::@10
    // print_set_screen(FORM_SCREEN)
    // [259] call print_set_screen 
    // [444] phi from form_mode::@10 to print_set_screen [phi:form_mode::@10->print_set_screen]
    // [444] phi (byte*) print_set_screen::screen#2 = (const byte*) FORM_SCREEN [phi:form_mode::@10->print_set_screen#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z print_set_screen.screen
    lda #>FORM_SCREEN
    sta.z print_set_screen.screen+1
    jsr print_set_screen
    // [260] phi from form_mode::@10 to form_mode::@11 [phi:form_mode::@10->form_mode::@11]
    // form_mode::@11
    // print_cls()
    // [261] call print_cls 
    jsr print_cls
    // [262] phi from form_mode::@11 to form_mode::@12 [phi:form_mode::@11->form_mode::@12]
    // form_mode::@12
    // print_str_lines(FORM_TEXT)
    // [263] call print_str_lines 
    // [412] phi from form_mode::@12 to print_str_lines [phi:form_mode::@12->print_str_lines]
    // [412] phi (byte*) print_str_lines::str#5 = (const byte[]) FORM_TEXT [phi:form_mode::@12->print_str_lines#0] -- pbuz1=pbuc1 
    lda #<FORM_TEXT
    sta.z print_str_lines.str
    lda #>FORM_TEXT
    sta.z print_str_lines.str+1
    jsr print_str_lines
    // [264] phi from form_mode::@12 to form_mode::@13 [phi:form_mode::@12->form_mode::@13]
    // form_mode::@13
    // form_set_screen(FORM_SCREEN)
    // [265] call form_set_screen 
    // [402] phi from form_mode::@13 to form_set_screen [phi:form_mode::@13->form_set_screen]
    jsr form_set_screen
    // [266] phi from form_mode::@13 to form_mode::@14 [phi:form_mode::@13->form_mode::@14]
    // form_mode::@14
    // form_render_values()
    // [267] call form_render_values 
    // [328] phi from form_mode::@14 to form_render_values [phi:form_mode::@14->form_render_values]
    jsr form_render_values
    // form_mode::@15
    // render_preset_name(*form_preset)
    // [268] (byte) render_preset_name::idx#0 ← *((const byte[]) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [269] call render_preset_name 
    // [304] phi from form_mode::@15 to render_preset_name [phi:form_mode::@15->render_preset_name]
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#0 [phi:form_mode::@15->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    // form_mode::@16
    // *DTV_GRAPHICS_VIC_BANK = (byte)((dword)FORM_CHARSET/$10000)
    // [270] *((const byte*) DTV_GRAPHICS_VIC_BANK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Graphics Bank
    lda #0
    sta DTV_GRAPHICS_VIC_BANK
    // *DTV_COLOR_BANK_LO = <((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [271] *((const byte*) DTV_COLOR_BANK_LO) ← <(word)(const dword) DTV_COLOR_BANK_DEFAULT/(word) $400 -- _deref_pbuc1=vbuc2 
    // DTV Color Bank
    lda #<DTV_COLOR_BANK_DEFAULT/$400
    sta DTV_COLOR_BANK_LO
    // *DTV_COLOR_BANK_HI = >((word)(DTV_COLOR_BANK_DEFAULT/$400))
    // [272] *((const byte*) DTV_COLOR_BANK_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_COLOR_BANK_HI
    // *CIA2_PORT_A_DDR = %00000011
    // [273] *((const byte*) CIA2_PORT_A_DDR) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Bank
    lda #3
    sta CIA2_PORT_A_DDR
    // *CIA2_PORT_A = %00000011 ^ (byte)((word)FORM_CHARSET/$4000)
    // [274] *((const byte*) CIA2_PORT_A) ← (byte) 3 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank bits to output - all others to input
    sta CIA2_PORT_A
    // *DTV_CONTROL = 0
    // [275] *((const byte*) DTV_CONTROL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set VIC Bank
    // DTV Graphics Mode
    lda #0
    sta DTV_CONTROL
    // *VIC_CONTROL = VIC_DEN|VIC_RSEL|3
    // [276] *((const byte*) VIC_CONTROL) ← (const byte) VIC_DEN|(const byte) VIC_RSEL|(byte) 3 -- _deref_pbuc1=vbuc2 
    // VIC Graphics Mode
    lda #VIC_DEN|VIC_RSEL|3
    sta VIC_CONTROL
    // *VIC_CONTROL2 = VIC_CSEL
    // [277] *((const byte*) VIC_CONTROL2) ← (const byte) VIC_CSEL -- _deref_pbuc1=vbuc2 
    lda #VIC_CSEL
    sta VIC_CONTROL2
    // *VIC_MEMORY =  (byte)((((word)FORM_SCREEN&$3fff)/$40)|(((word)FORM_CHARSET&$3fff)/$400))
    // [278] *((const byte*) VIC_MEMORY) ← (byte)(word)(const byte*) FORM_SCREEN&(word) $3fff/(byte) $40|(word)(const byte*) FORM_CHARSET&(word) $3fff/(word) $400 -- _deref_pbuc1=vbuc2 
    // VIC Memory Pointers
    lda #(FORM_SCREEN&$3fff)/$40|(FORM_CHARSET&$3fff)/$400
    sta VIC_MEMORY
    // *DTV_PLANEA_START_LO = < FORM_SCREEN
    // [279] *((const byte*) DTV_PLANEA_START_LO) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // DTV Plane A to FORM_SCREEN also
    lda #0
    sta DTV_PLANEA_START_LO
    // *DTV_PLANEA_START_MI = > FORM_SCREEN
    // [280] *((const byte*) DTV_PLANEA_START_MI) ← >(const byte*) FORM_SCREEN -- _deref_pbuc1=vbuc2 
    lda #>FORM_SCREEN
    sta DTV_PLANEA_START_MI
    // *DTV_PLANEA_START_HI = 0
    // [281] *((const byte*) DTV_PLANEA_START_HI) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta DTV_PLANEA_START_HI
    // [282] phi from form_mode::@16 to form_mode::@1 [phi:form_mode::@16->form_mode::@1]
    // [282] phi (byte) form_mode::i#2 = (byte) 0 [phi:form_mode::@16->form_mode::@1#0] -- vbuxx=vbuc1 
    tax
  // DTV Palette - default
    // [282] phi from form_mode::@1 to form_mode::@1 [phi:form_mode::@1->form_mode::@1]
    // [282] phi (byte) form_mode::i#2 = (byte) form_mode::i#1 [phi:form_mode::@1->form_mode::@1#0] -- register_copy 
    // form_mode::@1
  __b1:
    // DTV_PALETTE[i] = DTV_PALETTE_DEFAULT[i]
    // [283] *((const byte*) DTV_PALETTE + (byte) form_mode::i#2) ← *((const byte[$10]) DTV_PALETTE_DEFAULT + (byte) form_mode::i#2) -- pbuc1_derefidx_vbuxx=pbuc2_derefidx_vbuxx 
    lda DTV_PALETTE_DEFAULT,x
    sta DTV_PALETTE,x
    // for(byte i : 0..$f)
    // [284] (byte) form_mode::i#1 ← ++ (byte) form_mode::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [285] if((byte) form_mode::i#1!=(byte) $10) goto form_mode::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$10
    bne __b1
    // form_mode::@2
    // *BGCOL = 0
    // [286] *((const byte*) BGCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Screen colors
    lda #0
    sta BGCOL
    // *BORDERCOL = 0
    // [287] *((const byte*) BORDERCOL) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta BORDERCOL
    // preset_current = *form_preset
    // [288] (byte) form_mode::preset_current#0 ← *((const byte[]) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // [289] phi from form_mode::@19 form_mode::@2 form_mode::@6 to form_mode::@3 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3]
  b1:
    // [289] phi (byte) form_mode::preset_current#6 = (byte) form_mode::preset_current#1 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#0] -- register_copy 
    // [289] phi (byte) form_field_idx#28 = (byte) form_field_idx#18 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#1] -- register_copy 
    // [289] phi (byte) keyboard_events_size#47 = (byte) keyboard_events_size#24 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#2] -- register_copy 
    // [289] phi (signed byte) form_cursor_count#21 = (signed byte) form_cursor_count#16 [phi:form_mode::@19/form_mode::@2/form_mode::@6->form_mode::@3#3] -- register_copy 
  // Let the user change values in the form
    // form_mode::@3
    // form_mode::@4
  __b4:
    // while(*RASTER!=$ff)
    // [290] if(*((const byte*) RASTER)!=(byte) $ff) goto form_mode::@4 -- _deref_pbuc1_neq_vbuc2_then_la1 
    lda #$ff
    cmp RASTER
    bne __b4
    // [291] phi from form_mode::@4 to form_mode::@5 [phi:form_mode::@4->form_mode::@5]
    // form_mode::@5
    // form_control()
    // [292] call form_control 
    jsr form_control
    // [293] (byte) form_control::return#0 ← (byte) form_control::return#2 -- vbuaa=vbuxx 
    txa
    // form_mode::@17
    // [294] (byte~) form_mode::$36 ← (byte) form_control::return#0
    // if(form_control()!=0)
    // [295] if((byte~) form_mode::$36==(byte) 0) goto form_mode::@6 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b6
    // form_mode::@return
    // }
    // [296] return 
    rts
    // form_mode::@6
  __b6:
    // if(preset_current!=*form_preset)
    // [297] if((byte) form_mode::preset_current#6==*((const byte[]) form_fields_val)) goto form_mode::@3 -- vbuz1_eq__deref_pbuc1_then_la1 
    lda form_fields_val
    cmp.z preset_current
    beq b1
    // form_mode::@7
    // apply_preset(*form_preset)
    // [298] (byte) apply_preset::idx#0 ← *((const byte[]) form_fields_val) -- vbuaa=_deref_pbuc1 
    // [299] call apply_preset 
    jsr apply_preset
    // form_mode::@18
    // preset_current = *form_preset
    // [300] (byte) form_mode::preset_current#1 ← *((const byte[]) form_fields_val) -- vbuz1=_deref_pbuc1 
    lda form_fields_val
    sta.z preset_current
    // form_render_values()
    // [301] call form_render_values 
    // [328] phi from form_mode::@18 to form_render_values [phi:form_mode::@18->form_render_values]
    jsr form_render_values
    // form_mode::@19
    // render_preset_name(*form_preset)
    // [302] (byte) render_preset_name::idx#1 ← *((const byte[]) form_fields_val) -- vbuaa=_deref_pbuc1 
    lda form_fields_val
    // [303] call render_preset_name 
    // [304] phi from form_mode::@19 to render_preset_name [phi:form_mode::@19->render_preset_name]
    // [304] phi (byte) render_preset_name::idx#10 = (byte) render_preset_name::idx#1 [phi:form_mode::@19->render_preset_name#0] -- register_copy 
    jsr render_preset_name
    jmp b1
}
  // render_preset_name
// Render form preset name in the form
// idx is the ID of the preset
// render_preset_name(byte register(A) idx)
render_preset_name: {
    .label name = 6
    // if(idx==0)
    // [305] if((byte) render_preset_name::idx#10==(byte) 0) goto render_preset_name::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1
    // render_preset_name::@3
    // if(idx==1)
    // [306] if((byte) render_preset_name::idx#10==(byte) 1) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq b4
    // render_preset_name::@4
    // if(idx==2)
    // [307] if((byte) render_preset_name::idx#10==(byte) 2) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq b5
    // render_preset_name::@5
    // if(idx==3)
    // [308] if((byte) render_preset_name::idx#10==(byte) 3) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq b6
    // render_preset_name::@6
    // if(idx==4)
    // [309] if((byte) render_preset_name::idx#10==(byte) 4) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq b7
    // render_preset_name::@7
    // if(idx==5)
    // [310] if((byte) render_preset_name::idx#10==(byte) 5) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq b8
    // render_preset_name::@8
    // if(idx==6)
    // [311] if((byte) render_preset_name::idx#10==(byte) 6) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq b9
    // render_preset_name::@9
    // if(idx==7)
    // [312] if((byte) render_preset_name::idx#10==(byte) 7) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq b10
    // render_preset_name::@10
    // if(idx==8)
    // [313] if((byte) render_preset_name::idx#10==(byte) 8) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq b2
    // render_preset_name::@11
    // if(idx==9)
    // [314] if((byte) render_preset_name::idx#10==(byte) 9) goto render_preset_name::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq b3
    // render_preset_name::@12
    // if(idx==10)
    // [315] if((byte) render_preset_name::idx#10==(byte) $a) goto render_preset_name::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1
    // [317] phi from render_preset_name render_preset_name::@12 to render_preset_name::@2 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2]
  b1:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#1 [phi:render_preset_name/render_preset_name::@12->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_1
    sta.z name
    lda #>name_1
    sta.z name+1
    jmp __b2
    // [316] phi from render_preset_name::@12 to render_preset_name::@1 [phi:render_preset_name::@12->render_preset_name::@1]
    // render_preset_name::@1
  __b1:
    // [317] phi from render_preset_name::@1 to render_preset_name::@2 [phi:render_preset_name::@1->render_preset_name::@2]
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#11 [phi:render_preset_name::@1->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_11
    sta.z name
    lda #>name_11
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@10 to render_preset_name::@2 [phi:render_preset_name::@10->render_preset_name::@2]
  b2:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#9 [phi:render_preset_name::@10->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_9
    sta.z name
    lda #>name_9
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@11 to render_preset_name::@2 [phi:render_preset_name::@11->render_preset_name::@2]
  b3:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#10 [phi:render_preset_name::@11->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_10
    sta.z name
    lda #>name_10
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@3 to render_preset_name::@2 [phi:render_preset_name::@3->render_preset_name::@2]
  b4:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#2 [phi:render_preset_name::@3->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_2
    sta.z name
    lda #>name_2
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@4 to render_preset_name::@2 [phi:render_preset_name::@4->render_preset_name::@2]
  b5:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#3 [phi:render_preset_name::@4->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_3
    sta.z name
    lda #>name_3
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@5 to render_preset_name::@2 [phi:render_preset_name::@5->render_preset_name::@2]
  b6:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#4 [phi:render_preset_name::@5->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_4
    sta.z name
    lda #>name_4
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@6 to render_preset_name::@2 [phi:render_preset_name::@6->render_preset_name::@2]
  b7:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#5 [phi:render_preset_name::@6->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_5
    sta.z name
    lda #>name_5
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@7 to render_preset_name::@2 [phi:render_preset_name::@7->render_preset_name::@2]
  b8:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#6 [phi:render_preset_name::@7->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_6
    sta.z name
    lda #>name_6
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@8 to render_preset_name::@2 [phi:render_preset_name::@8->render_preset_name::@2]
  b9:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#7 [phi:render_preset_name::@8->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_7
    sta.z name
    lda #>name_7
    sta.z name+1
    jmp __b2
    // [317] phi from render_preset_name::@9 to render_preset_name::@2 [phi:render_preset_name::@9->render_preset_name::@2]
  b10:
    // [317] phi (byte*) render_preset_name::name#13 = (const byte*) render_preset_name::name#8 [phi:render_preset_name::@9->render_preset_name::@2#0] -- pbuz1=pbuc1 
    lda #<name_8
    sta.z name
    lda #>name_8
    sta.z name+1
    // render_preset_name::@2
  __b2:
    // print_str_at(name, FORM_SCREEN+40*2+10)
    // [318] (byte*) print_str_at::str#1 ← (byte*) render_preset_name::name#13
    // [319] call print_str_at 
    // [321] phi from render_preset_name::@2 to print_str_at [phi:render_preset_name::@2->print_str_at]
    jsr print_str_at
    // render_preset_name::@return
    // }
    // [320] return 
    rts
    name_1: .text "Standard Charset              "
    .byte 0
    name_2: .text "Extended Color Charset        "
    .byte 0
    name_3: .text "Standard Bitmap               "
    .byte 0
    name_4: .text "Multicolor Bitmap             "
    .byte 0
    name_5: .text "Hicolor Charset               "
    .byte 0
    name_6: .text "Hicolor Extended Color Charset"
    .byte 0
    name_7: .text "Twoplane Bitmap               "
    .byte 0
    name_8: .text "Chunky 8bpp                   "
    .byte 0
    name_9: .text "Sixs Fred                     "
    .byte 0
    name_10: .text "Sixs Fred 2                   "
    .byte 0
    name_11: .text "8bpp Pixel Cell               "
    .byte 0
}
  // print_str_at
// Print a string at a specific screen position
// print_str_at(byte* zeropage(6) str, byte* zeropage($b) at)
print_str_at: {
    .label at = $b
    .label str = 6
    // [322] phi from print_str_at to print_str_at::@1 [phi:print_str_at->print_str_at::@1]
    // [322] phi (byte*) print_str_at::at#2 = (const byte*) FORM_SCREEN+(byte)(number) $28*(number) 2+(byte) $a [phi:print_str_at->print_str_at::@1#0] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN+$28*2+$a
    sta.z at
    lda #>FORM_SCREEN+$28*2+$a
    sta.z at+1
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#1 [phi:print_str_at->print_str_at::@1#1] -- register_copy 
    // print_str_at::@1
  __b1:
    // while(*str)
    // [323] if((byte) 0!=*((byte*) print_str_at::str#2)) goto print_str_at::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str_at::@return
    // }
    // [324] return 
    rts
    // print_str_at::@2
  __b2:
    // *(at++) = *(str++)
    // [325] *((byte*) print_str_at::at#2) ← *((byte*) print_str_at::str#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (str),y
    sta (at),y
    // *(at++) = *(str++);
    // [326] (byte*) print_str_at::at#0 ← ++ (byte*) print_str_at::at#2 -- pbuz1=_inc_pbuz1 
    inc.z at
    bne !+
    inc.z at+1
  !:
    // [327] (byte*) print_str_at::str#0 ← ++ (byte*) print_str_at::str#2 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // [322] phi from print_str_at::@2 to print_str_at::@1 [phi:print_str_at::@2->print_str_at::@1]
    // [322] phi (byte*) print_str_at::at#2 = (byte*) print_str_at::at#0 [phi:print_str_at::@2->print_str_at::@1#0] -- register_copy 
    // [322] phi (byte*) print_str_at::str#2 = (byte*) print_str_at::str#0 [phi:print_str_at::@2->print_str_at::@1#1] -- register_copy 
    jmp __b1
}
  // form_render_values
// Render all form values from the form_fields_val array
form_render_values: {
    // [329] phi from form_render_values to form_render_values::@1 [phi:form_render_values->form_render_values::@1]
    // [329] phi (byte) form_render_values::idx#2 = (byte) 0 [phi:form_render_values->form_render_values::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // form_render_values::@1
  __b1:
    // for( byte idx=0; idx<form_fields_cnt; idx++)
    // [330] if((byte) form_render_values::idx#2<(const byte) form_fields_cnt) goto form_render_values::@2 -- vbuxx_lt_vbuc1_then_la1 
    cpx #form_fields_cnt
    bcc __b2
    // form_render_values::@return
    // }
    // [331] return 
    rts
    // form_render_values::@2
  __b2:
    // form_field_ptr(idx)
    // [332] (byte) form_field_ptr::field_idx#0 ← (byte) form_render_values::idx#2
    // [333] call form_field_ptr 
    // [336] phi from form_render_values::@2 to form_field_ptr [phi:form_render_values::@2->form_field_ptr]
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#0 [phi:form_render_values::@2->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    // form_render_values::@3
    // *field = print_hextab[form_fields_val[idx]]
    // [334] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_render_values::idx#2)) -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuxx) 
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // for( byte idx=0; idx<form_fields_cnt; idx++)
    // [335] (byte) form_render_values::idx#1 ← ++ (byte) form_render_values::idx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [329] phi from form_render_values::@3 to form_render_values::@1 [phi:form_render_values::@3->form_render_values::@1]
    // [329] phi (byte) form_render_values::idx#2 = (byte) form_render_values::idx#1 [phi:form_render_values::@3->form_render_values::@1#0] -- register_copy 
    jmp __b1
}
  // form_field_ptr
// Get the screen address of a form field
// field_idx is the index of the field to get the screen address for
// form_field_ptr(byte register(X) field_idx)
form_field_ptr: {
    .label line = $1a
    .label x = $1e
    // y = form_fields_y[field_idx]
    // [337] (byte) form_field_ptr::y#0 ← *((const byte[]) form_fields_y + (byte) form_field_ptr::field_idx#2) -- vbuaa=pbuc1_derefidx_vbuxx 
    lda form_fields_y,x
    // (byte*) { form_line_hi[y], form_line_lo[y] }
    // [338] (word) form_field_ptr::line#0 ← *((const byte[$19]) form_line_hi + (byte) form_field_ptr::y#0) w= *((const byte[$19]) form_line_lo + (byte) form_field_ptr::y#0) -- vwuz1=pbuc1_derefidx_vbuaa_word_pbuc2_derefidx_vbuaa 
    tay
    lda form_line_hi,y
    sta.z line+1
    lda form_line_lo,y
    sta.z line
    // x = form_fields_x[field_idx]
    // [339] (byte) form_field_ptr::x#0 ← *((const byte[]) form_fields_x + (byte) form_field_ptr::field_idx#2) -- vbuz1=pbuc1_derefidx_vbuxx 
    lda form_fields_x,x
    sta.z x
    // form_field_ptr::@return
    // }
    // [340] return 
    rts
}
  // apply_preset
// Apply a form value preset to the form values
// idx is the ID of the preset
// apply_preset(byte register(A) idx)
apply_preset: {
    .label preset = $e
    // if(idx==0)
    // [341] if((byte) apply_preset::idx#0==(byte) 0) goto apply_preset::@2 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1
    // apply_preset::@3
    // if(idx==1)
    // [342] if((byte) apply_preset::idx#0==(byte) 1) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #1
    beq b4
    // apply_preset::@4
    // if(idx==2)
    // [343] if((byte) apply_preset::idx#0==(byte) 2) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #2
    beq b5
    // apply_preset::@5
    // if(idx==3)
    // [344] if((byte) apply_preset::idx#0==(byte) 3) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #3
    beq b6
    // apply_preset::@6
    // if(idx==4)
    // [345] if((byte) apply_preset::idx#0==(byte) 4) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #4
    beq b7
    // apply_preset::@7
    // if(idx==5)
    // [346] if((byte) apply_preset::idx#0==(byte) 5) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #5
    beq b8
    // apply_preset::@8
    // if(idx==6)
    // [347] if((byte) apply_preset::idx#0==(byte) 6) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #6
    beq b9
    // apply_preset::@9
    // if(idx==7)
    // [348] if((byte) apply_preset::idx#0==(byte) 7) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #7
    beq b10
    // apply_preset::@10
    // if(idx==8)
    // [349] if((byte) apply_preset::idx#0==(byte) 8) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #8
    beq b2
    // apply_preset::@11
    // if(idx==9)
    // [350] if((byte) apply_preset::idx#0==(byte) 9) goto apply_preset::@2 -- vbuaa_eq_vbuc1_then_la1 
    cmp #9
    beq b3
    // apply_preset::@12
    // if(idx==10)
    // [351] if((byte) apply_preset::idx#0==(byte) $a) goto apply_preset::@1 -- vbuaa_eq_vbuc1_then_la1 
    cmp #$a
    beq __b1
    // [353] phi from apply_preset apply_preset::@12 to apply_preset::@2 [phi:apply_preset/apply_preset::@12->apply_preset::@2]
  b1:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_stdchar [phi:apply_preset/apply_preset::@12->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdchar
    sta.z preset
    lda #>preset_stdchar
    sta.z preset+1
    jmp __b2
    // [352] phi from apply_preset::@12 to apply_preset::@1 [phi:apply_preset::@12->apply_preset::@1]
    // apply_preset::@1
  __b1:
    // [353] phi from apply_preset::@1 to apply_preset::@2 [phi:apply_preset::@1->apply_preset::@2]
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_8bpppixelcell [phi:apply_preset::@1->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_8bpppixelcell
    sta.z preset
    lda #>preset_8bpppixelcell
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@10 to apply_preset::@2 [phi:apply_preset::@10->apply_preset::@2]
  b2:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_sixsfred [phi:apply_preset::@10->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred
    sta.z preset
    lda #>preset_sixsfred
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@11 to apply_preset::@2 [phi:apply_preset::@11->apply_preset::@2]
  b3:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_sixsfred2 [phi:apply_preset::@11->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_sixsfred2
    sta.z preset
    lda #>preset_sixsfred2
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@3 to apply_preset::@2 [phi:apply_preset::@3->apply_preset::@2]
  b4:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_ecmchar [phi:apply_preset::@3->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_ecmchar
    sta.z preset
    lda #>preset_ecmchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@4 to apply_preset::@2 [phi:apply_preset::@4->apply_preset::@2]
  b5:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_stdbm [phi:apply_preset::@4->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_stdbm
    sta.z preset
    lda #>preset_stdbm
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@5 to apply_preset::@2 [phi:apply_preset::@5->apply_preset::@2]
  b6:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_mcbm [phi:apply_preset::@5->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_mcbm
    sta.z preset
    lda #>preset_mcbm
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@6 to apply_preset::@2 [phi:apply_preset::@6->apply_preset::@2]
  b7:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_hi_stdchar [phi:apply_preset::@6->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_stdchar
    sta.z preset
    lda #>preset_hi_stdchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@7 to apply_preset::@2 [phi:apply_preset::@7->apply_preset::@2]
  b8:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_hi_ecmchar [phi:apply_preset::@7->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_hi_ecmchar
    sta.z preset
    lda #>preset_hi_ecmchar
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@8 to apply_preset::@2 [phi:apply_preset::@8->apply_preset::@2]
  b9:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_twoplane [phi:apply_preset::@8->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_twoplane
    sta.z preset
    lda #>preset_twoplane
    sta.z preset+1
    jmp __b2
    // [353] phi from apply_preset::@9 to apply_preset::@2 [phi:apply_preset::@9->apply_preset::@2]
  b10:
    // [353] phi (byte*) apply_preset::preset#15 = (const byte[]) preset_chunky [phi:apply_preset::@9->apply_preset::@2#0] -- pbuz1=pbuc1 
    lda #<preset_chunky
    sta.z preset
    lda #>preset_chunky
    sta.z preset+1
    // apply_preset::@2
  __b2:
    // [354] phi from apply_preset::@2 to apply_preset::@13 [phi:apply_preset::@2->apply_preset::@13]
    // [354] phi (byte) apply_preset::i#2 = (byte) 0 [phi:apply_preset::@2->apply_preset::@13#0] -- vbuyy=vbuc1 
    ldy #0
  // Copy preset values into the fields
    // apply_preset::@13
  __b13:
    // for( byte i=0; i != form_fields_cnt; i++)
    // [355] if((byte) apply_preset::i#2!=(const byte) form_fields_cnt) goto apply_preset::@14 -- vbuyy_neq_vbuc1_then_la1 
    cpy #form_fields_cnt
    bne __b14
    // apply_preset::@return
    // }
    // [356] return 
    rts
    // apply_preset::@14
  __b14:
    // form_fields_val[i] = preset[i]
    // [357] *((const byte[]) form_fields_val + (byte) apply_preset::i#2) ← *((byte*) apply_preset::preset#15 + (byte) apply_preset::i#2) -- pbuc1_derefidx_vbuyy=pbuz1_derefidx_vbuyy 
    lda (preset),y
    sta form_fields_val,y
    // for( byte i=0; i != form_fields_cnt; i++)
    // [358] (byte) apply_preset::i#1 ← ++ (byte) apply_preset::i#2 -- vbuyy=_inc_vbuyy 
    iny
    // [354] phi from apply_preset::@14 to apply_preset::@13 [phi:apply_preset::@14->apply_preset::@13]
    // [354] phi (byte) apply_preset::i#2 = (byte) apply_preset::i#1 [phi:apply_preset::@14->apply_preset::@13#0] -- register_copy 
    jmp __b13
}
  // form_control
// Reads keyboard and allows the user to navigate and change the fields of the form
// Returns 0 if space is not pressed, non-0 if space is pressed
form_control: {
    // form_field_ptr(form_field_idx)
    // [359] (byte) form_field_ptr::field_idx#1 ← (byte) form_field_idx#28 -- vbuxx=vbuz1 
    ldx.z form_field_idx
    // [360] call form_field_ptr 
    // [336] phi from form_control to form_field_ptr [phi:form_control->form_field_ptr]
    // [336] phi (byte) form_field_ptr::field_idx#2 = (byte) form_field_ptr::field_idx#1 [phi:form_control->form_field_ptr#0] -- register_copy 
    jsr form_field_ptr
    // form_control::@18
    // if(--form_cursor_count < 0)
    // [361] (signed byte) form_cursor_count#5 ← -- (signed byte) form_cursor_count#21 -- vbsz1=_dec_vbsz1 
    dec.z form_cursor_count
    // [362] if((signed byte) form_cursor_count#5>=(signed byte) 0) goto form_control::@21 -- vbsz1_ge_0_then_la1 
    lda.z form_cursor_count
    cmp #0
    bpl __b1
    // [364] phi from form_control::@18 to form_control::@1 [phi:form_control::@18->form_control::@1]
    // [364] phi (signed byte) form_cursor_count#15 = (const signed byte) FORM_CURSOR_BLINK [phi:form_control::@18->form_control::@1#0] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK
    sta.z form_cursor_count
    // [363] phi from form_control::@18 to form_control::@21 [phi:form_control::@18->form_control::@21]
    // form_control::@21
    // [364] phi from form_control::@21 to form_control::@1 [phi:form_control::@21->form_control::@1]
    // [364] phi (signed byte) form_cursor_count#15 = (signed byte) form_cursor_count#5 [phi:form_control::@21->form_control::@1#0] -- register_copy 
    // form_control::@1
  __b1:
    // if(form_cursor_count<FORM_CURSOR_BLINK/2)
    // [365] if((signed byte) form_cursor_count#15<(const signed byte) FORM_CURSOR_BLINK/(signed byte) 2) goto form_control::@2 -- vbsz1_lt_vbsc1_then_la1 
    lda.z form_cursor_count
    sec
    sbc #FORM_CURSOR_BLINK/2
    bvc !+
    eor #$80
  !:
    bpl !__b2+
    jmp __b2
  !__b2:
    // form_control::@7
    // *field & $7f
    // [366] (byte~) form_control::$13 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f -- vbuaa=pbuz1_derefidx_vbuz2_band_vbuc1 
    lda #$7f
    ldy.z form_field_ptr.x
    and (form_field_ptr.line),y
    // *field = *field & $7f
    // [367] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$13 -- pbuz1_derefidx_vbuz2=vbuaa 
    sta (form_field_ptr.line),y
    // [368] phi from form_control::@2 form_control::@7 to form_control::@3 [phi:form_control::@2/form_control::@7->form_control::@3]
    // form_control::@3
  __b3:
    // keyboard_event_scan()
    // [369] call keyboard_event_scan 
    // [157] phi from form_control::@3 to keyboard_event_scan [phi:form_control::@3->keyboard_event_scan]
    // [157] phi (byte) keyboard_events_size#99 = (byte) keyboard_events_size#47 [phi:form_control::@3->keyboard_event_scan#0] -- register_copy 
    jsr keyboard_event_scan
    // [370] phi from form_control::@3 to form_control::@19 [phi:form_control::@3->form_control::@19]
    // form_control::@19
    // keyboard_event_get()
    // [371] call keyboard_event_get 
    jsr keyboard_event_get
    // [372] (byte) keyboard_event_get::return#4 ← (byte) keyboard_event_get::return#2
    // form_control::@20
    // key_event = keyboard_event_get()
    // [373] (byte) form_control::key_event#0 ← (byte) keyboard_event_get::return#4
    // if(key_event==KEY_CRSR_DOWN)
    // [374] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_DOWN) goto form_control::@4 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_DOWN
    bne __b4
    // form_control::@8
    // *field & $7f
    // [375] (byte~) form_control::$15 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) & (byte) $7f -- vbuaa=pbuz1_derefidx_vbuz2_band_vbuc1 
    lda #$7f
    ldy.z form_field_ptr.x
    and (form_field_ptr.line),y
    // *field = *field & $7f
    // [376] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$15 -- pbuz1_derefidx_vbuz2=vbuaa 
    // Unblink the cursor
    sta (form_field_ptr.line),y
    // keyboard_modifiers&KEY_MODIFIER_SHIFT
    // [377] (byte~) form_control::$16 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // if((keyboard_modifiers&KEY_MODIFIER_SHIFT)==0)
    // [378] if((byte~) form_control::$16==(byte) 0) goto form_control::@13 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b13
    // form_control::@9
    // if(--form_field_idx==$ff)
    // [379] (byte) form_field_idx#6 ← -- (byte) form_field_idx#28 -- vbuz1=_dec_vbuz1 
    dec.z form_field_idx
    // [380] if((byte) form_field_idx#6!=(byte) $ff) goto form_control::@22 -- vbuz1_neq_vbuc1_then_la1 
    lda #$ff
    cmp.z form_field_idx
    bne __b14
    // [382] phi from form_control::@9 to form_control::@14 [phi:form_control::@9->form_control::@14]
    // [382] phi (byte) form_field_idx#31 = (const byte) form_fields_cnt-(byte) 1 [phi:form_control::@9->form_control::@14#0] -- vbuz1=vbuc1 
    lda #form_fields_cnt-1
    sta.z form_field_idx
    // [381] phi from form_control::@9 to form_control::@22 [phi:form_control::@9->form_control::@22]
    // form_control::@22
    // [382] phi from form_control::@22 form_control::@23 to form_control::@14 [phi:form_control::@22/form_control::@23->form_control::@14]
    // [382] phi (byte) form_field_idx#31 = (byte) form_field_idx#6 [phi:form_control::@22/form_control::@23->form_control::@14#0] -- register_copy 
    // form_control::@14
  __b14:
    // [383] phi from form_control::@14 to form_control::@return [phi:form_control::@14->form_control::@return]
    // [383] phi (byte) form_field_idx#18 = (byte) form_field_idx#31 [phi:form_control::@14->form_control::@return#0] -- register_copy 
    // [383] phi (signed byte) form_cursor_count#16 = (const signed byte) FORM_CURSOR_BLINK/(signed byte) 2 [phi:form_control::@14->form_control::@return#1] -- vbsz1=vbsc1 
    lda #FORM_CURSOR_BLINK/2
    sta.z form_cursor_count
    // [383] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@14->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    // form_control::@return
    // }
    // [384] return 
    rts
    // form_control::@13
  __b13:
    // if(++form_field_idx==form_fields_cnt)
    // [385] (byte) form_field_idx#5 ← ++ (byte) form_field_idx#28 -- vbuz1=_inc_vbuz1 
    inc.z form_field_idx
    // [386] if((byte) form_field_idx#5!=(const byte) form_fields_cnt) goto form_control::@23 -- vbuz1_neq_vbuc1_then_la1 
    lda #form_fields_cnt
    cmp.z form_field_idx
    bne __b14
    // [382] phi from form_control::@13 to form_control::@14 [phi:form_control::@13->form_control::@14]
    // [382] phi (byte) form_field_idx#31 = (byte) 0 [phi:form_control::@13->form_control::@14#0] -- vbuz1=vbuc1 
    lda #0
    sta.z form_field_idx
    jmp __b14
    // [387] phi from form_control::@13 to form_control::@23 [phi:form_control::@13->form_control::@23]
    // form_control::@23
    // form_control::@4
  __b4:
    // if(key_event==KEY_CRSR_RIGHT)
    // [388] if((byte) form_control::key_event#0!=(const byte) KEY_CRSR_RIGHT) goto form_control::@5 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_CRSR_RIGHT
    bne __b5
    // form_control::@10
    // keyboard_modifiers&KEY_MODIFIER_SHIFT
    // [389] (byte~) form_control::$24 ← (byte) keyboard_modifiers#21 & (const byte) KEY_MODIFIER_SHIFT -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #KEY_MODIFIER_SHIFT
    // if((keyboard_modifiers&KEY_MODIFIER_SHIFT)==0)
    // [390] if((byte~) form_control::$24==(byte) 0) goto form_control::@15 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b15
    // form_control::@11
    // if(--form_fields_val[form_field_idx]==$ff)
    // [391] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← -- *((const byte[]) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_dec_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    dec form_fields_val,x
    // [392] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)!=(byte) $ff) goto form_control::@16 -- pbuc1_derefidx_vbuz1_neq_vbuc2_then_la1 
    lda #$ff
    ldy.z form_field_idx
    cmp form_fields_val,y
    bne __b16
    // form_control::@12
    // form_fields_val[form_field_idx] = form_fields_max[form_field_idx]
    // [393] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← *((const byte[]) form_fields_max + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=pbuc2_derefidx_vbuz1 
    lda form_fields_max,y
    sta form_fields_val,y
    // form_control::@16
  __b16:
    // *field = print_hextab[form_fields_val[form_field_idx]]
    // [394] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← *((const byte[]) print_hextab + *((const byte[]) form_fields_val + (byte) form_field_idx#28)) -- pbuz1_derefidx_vbuz2=pbuc1_derefidx_(pbuc2_derefidx_vbuz3) 
    // Render field value
    ldx.z form_field_idx
    ldy form_fields_val,x
    lda print_hextab,y
    ldy.z form_field_ptr.x
    sta (form_field_ptr.line),y
    // [383] phi from form_control::@16 form_control::@6 to form_control::@return [phi:form_control::@16/form_control::@6->form_control::@return]
  b1:
    // [383] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@16/form_control::@6->form_control::@return#0] -- register_copy 
    // [383] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@16/form_control::@6->form_control::@return#1] -- register_copy 
    // [383] phi (byte) form_control::return#2 = (byte) 0 [phi:form_control::@16/form_control::@6->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #0
    rts
    // form_control::@15
  __b15:
    // if(++form_fields_val[form_field_idx]>form_fields_max[form_field_idx])
    // [395] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← ++ *((const byte[]) form_fields_val + (byte) form_field_idx#28) -- pbuc1_derefidx_vbuz1=_inc_pbuc1_derefidx_vbuz1 
    ldx.z form_field_idx
    inc form_fields_val,x
    // [396] if(*((const byte[]) form_fields_val + (byte) form_field_idx#28)<=*((const byte[]) form_fields_max + (byte) form_field_idx#28)) goto form_control::@16 -- pbuc1_derefidx_vbuz1_le_pbuc2_derefidx_vbuz1_then_la1 
    ldy.z form_field_idx
    lda form_fields_max,y
    cmp form_fields_val,y
    bcs __b16
    // form_control::@17
    // form_fields_val[form_field_idx] = 0
    // [397] *((const byte[]) form_fields_val + (byte) form_field_idx#28) ← (byte) 0 -- pbuc1_derefidx_vbuz1=vbuc2 
    lda #0
    sta form_fields_val,y
    jmp __b16
    // form_control::@5
  __b5:
    // if(key_event==KEY_SPACE)
    // [398] if((byte) form_control::key_event#0!=(const byte) KEY_SPACE) goto form_control::@6 -- vbuaa_neq_vbuc1_then_la1 
    cmp #KEY_SPACE
    bne b1
    // [383] phi from form_control::@5 to form_control::@return [phi:form_control::@5->form_control::@return]
    // [383] phi (byte) form_field_idx#18 = (byte) form_field_idx#28 [phi:form_control::@5->form_control::@return#0] -- register_copy 
    // [383] phi (signed byte) form_cursor_count#16 = (signed byte) form_cursor_count#15 [phi:form_control::@5->form_control::@return#1] -- register_copy 
    // [383] phi (byte) form_control::return#2 = (byte) $ff [phi:form_control::@5->form_control::@return#2] -- vbuxx=vbuc1 
    ldx #$ff
    rts
    // [399] phi from form_control::@5 to form_control::@6 [phi:form_control::@5->form_control::@6]
    // form_control::@6
    // form_control::@2
  __b2:
    // *field | $80
    // [400] (byte~) form_control::$14 ← *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) | (byte) $80 -- vbuaa=pbuz1_derefidx_vbuz2_bor_vbuc1 
    lda #$80
    ldy.z form_field_ptr.x
    ora (form_field_ptr.line),y
    // *field = *field | $80
    // [401] *((byte*)(word) form_field_ptr::line#0 + (byte) form_field_ptr::x#0) ← (byte~) form_control::$14 -- pbuz1_derefidx_vbuz2=vbuaa 
    sta (form_field_ptr.line),y
    jmp __b3
}
  // form_set_screen
// Set the screen to use for the form.
// screen is the start address of the screen to use
form_set_screen: {
    .label line = 6
    // [403] phi from form_set_screen to form_set_screen::@1 [phi:form_set_screen->form_set_screen::@1]
    // [403] phi (byte) form_set_screen::y#2 = (byte) 0 [phi:form_set_screen->form_set_screen::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [403] phi (byte*) form_set_screen::line#2 = (const byte*) FORM_SCREEN [phi:form_set_screen->form_set_screen::@1#1] -- pbuz1=pbuc1 
    lda #<FORM_SCREEN
    sta.z line
    lda #>FORM_SCREEN
    sta.z line+1
    // [403] phi from form_set_screen::@1 to form_set_screen::@1 [phi:form_set_screen::@1->form_set_screen::@1]
    // [403] phi (byte) form_set_screen::y#2 = (byte) form_set_screen::y#1 [phi:form_set_screen::@1->form_set_screen::@1#0] -- register_copy 
    // [403] phi (byte*) form_set_screen::line#2 = (byte*) form_set_screen::line#1 [phi:form_set_screen::@1->form_set_screen::@1#1] -- register_copy 
    // form_set_screen::@1
  __b1:
    // <line
    // [404] (byte~) form_set_screen::$0 ← < (byte*) form_set_screen::line#2 -- vbuaa=_lo_pbuz1 
    lda.z line
    // form_line_lo[y] = <line
    // [405] *((const byte[$19]) form_line_lo + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_lo,x
    // >line
    // [406] (byte~) form_set_screen::$1 ← > (byte*) form_set_screen::line#2 -- vbuaa=_hi_pbuz1 
    lda.z line+1
    // form_line_hi[y] = >line
    // [407] *((const byte[$19]) form_line_hi + (byte) form_set_screen::y#2) ← (byte~) form_set_screen::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta form_line_hi,x
    // line = line + 40
    // [408] (byte*) form_set_screen::line#1 ← (byte*) form_set_screen::line#2 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z line
    sta.z line
    bcc !+
    inc.z line+1
  !:
    // for(byte y: 0..24)
    // [409] (byte) form_set_screen::y#1 ← ++ (byte) form_set_screen::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [410] if((byte) form_set_screen::y#1!=(byte) $19) goto form_set_screen::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$19
    bne __b1
    // form_set_screen::@return
    // }
    // [411] return 
    rts
}
  // print_str_lines
// Print a number of zero-terminated strings, each followed by a newline.
// The sequence of lines is terminated by another zero.
// print_str_lines(byte* zeropage(6) str)
print_str_lines: {
    .label str = 6
    // [413] (byte*~) print_char_cursor#73 ← (byte*) print_set_screen::screen#2 -- pbuz1=pbuz2 
    lda.z print_set_screen.screen
    sta.z print_char_cursor
    lda.z print_set_screen.screen+1
    sta.z print_char_cursor+1
    // [414] phi from print_str_lines print_str_lines::@6 to print_str_lines::@1 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1]
    // [414] phi (byte*) print_line_cursor#2 = (byte*) print_set_screen::screen#2 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#0] -- register_copy 
    // [414] phi (byte*) print_char_cursor#22 = (byte*~) print_char_cursor#73 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#1] -- register_copy 
    // [414] phi (byte*) print_str_lines::str#3 = (byte*) print_str_lines::str#5 [phi:print_str_lines/print_str_lines::@6->print_str_lines::@1#2] -- register_copy 
    // print_str_lines::@1
  __b1:
    // while(*str)
    // [415] if((byte) 0!=*((byte*) print_str_lines::str#3)) goto print_str_lines::@2 -- vbuc1_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str_lines::@return
    // }
    // [416] return 
    rts
    // [417] phi from print_str_lines::@1 print_str_lines::@3 to print_str_lines::@2 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2]
    // [417] phi (byte*) print_char_cursor#20 = (byte*) print_char_cursor#22 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#0] -- register_copy 
    // [417] phi (byte*) print_str_lines::str#4 = (byte*) print_str_lines::str#3 [phi:print_str_lines::@1/print_str_lines::@3->print_str_lines::@2#1] -- register_copy 
    // print_str_lines::@2
  __b2:
    // ch = *(str++)
    // [418] (byte) print_str_lines::ch#0 ← *((byte*) print_str_lines::str#4) -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [419] (byte*) print_str_lines::str#0 ← ++ (byte*) print_str_lines::str#4 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    // if(ch)
    // [420] if((byte) 0==(byte) print_str_lines::ch#0) goto print_str_lines::@3 -- vbuc1_eq_vbuaa_then_la1 
    cmp #0
    beq __b3
    // print_str_lines::@4
    // *(print_char_cursor++) = ch
    // [421] *((byte*) print_char_cursor#20) ← (byte) print_str_lines::ch#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (print_char_cursor),y
    // *(print_char_cursor++) = ch;
    // [422] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#20 -- pbuz1=_inc_pbuz1 
    inc.z print_char_cursor
    bne !+
    inc.z print_char_cursor+1
  !:
    // [423] phi from print_str_lines::@2 print_str_lines::@4 to print_str_lines::@3 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3]
    // [423] phi (byte*) print_char_cursor#38 = (byte*) print_char_cursor#20 [phi:print_str_lines::@2/print_str_lines::@4->print_str_lines::@3#0] -- register_copy 
    // print_str_lines::@3
  __b3:
    // while (ch)
    // [424] if((byte) 0!=(byte) print_str_lines::ch#0) goto print_str_lines::@2 -- vbuc1_neq_vbuaa_then_la1 
    cmp #0
    bne __b2
    // [425] phi from print_str_lines::@3 to print_str_lines::@5 [phi:print_str_lines::@3->print_str_lines::@5]
    // print_str_lines::@5
    // print_ln()
    // [426] call print_ln 
    // [428] phi from print_str_lines::@5 to print_ln [phi:print_str_lines::@5->print_ln]
    jsr print_ln
    // print_str_lines::@6
    // [427] (byte*~) print_char_cursor#74 ← (byte*) print_line_cursor#22 -- pbuz1=pbuz2 
    lda.z print_line_cursor
    sta.z print_char_cursor
    lda.z print_line_cursor+1
    sta.z print_char_cursor+1
    jmp __b1
}
  // print_ln
// Print a newline
print_ln: {
    // [429] phi from print_ln print_ln::@1 to print_ln::@1 [phi:print_ln/print_ln::@1->print_ln::@1]
    // [429] phi (byte*) print_line_cursor#21 = (byte*) print_line_cursor#2 [phi:print_ln/print_ln::@1->print_ln::@1#0] -- register_copy 
    // print_ln::@1
  __b1:
    // print_line_cursor + $28
    // [430] (byte*) print_line_cursor#22 ← (byte*) print_line_cursor#21 + (byte) $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z print_line_cursor
    sta.z print_line_cursor
    bcc !+
    inc.z print_line_cursor+1
  !:
    // while (print_line_cursor<print_char_cursor)
    // [431] if((byte*) print_line_cursor#22<(byte*) print_char_cursor#38) goto print_ln::@1 -- pbuz1_lt_pbuz2_then_la1 
    lda.z print_line_cursor+1
    cmp.z print_char_cursor+1
    bcc __b1
    bne !+
    lda.z print_line_cursor
    cmp.z print_char_cursor
    bcc __b1
  !:
    // print_ln::@return
    // }
    // [432] return 
    rts
}
  // print_cls
// Clear the screen. Also resets current line/char cursor.
print_cls: {
    // memset(print_screen, ' ', 1000)
    // [433] (void*) memset::str#0 ← (void*)(byte*) print_set_screen::screen#2 -- pvoz1=pvoz2 
    lda.z print_set_screen.screen
    sta.z memset.str
    lda.z print_set_screen.screen+1
    sta.z memset.str+1
    // [434] call memset 
    // [436] phi from print_cls to memset [phi:print_cls->memset]
    jsr memset
    // print_cls::@return
    // }
    // [435] return 
    rts
}
  // memset
// Copies the character c (an unsigned char) to the first num characters of the object pointed to by the argument str.
// memset(void* zeropage($b) str)
memset: {
    .const c = ' '
    .const num = $3e8
    .label end = $1c
    .label dst = $b
    .label str = $b
    // memset::@1
    // end = (char*)str + num
    // [437] (byte*) memset::end#0 ← (byte*)(void*) memset::str#0 + (const word) memset::num#0 -- pbuz1=pbuz2_plus_vwuc1 
    lda.z str
    clc
    adc #<num
    sta.z end
    lda.z str+1
    adc #>num
    sta.z end+1
    // [438] (byte*~) memset::dst#4 ← (byte*)(void*) memset::str#0
    // [439] phi from memset::@1 memset::@3 to memset::@2 [phi:memset::@1/memset::@3->memset::@2]
    // [439] phi (byte*) memset::dst#2 = (byte*~) memset::dst#4 [phi:memset::@1/memset::@3->memset::@2#0] -- register_copy 
    // memset::@2
  __b2:
    // for(char* dst = str; dst!=end; dst++)
    // [440] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3 -- pbuz1_neq_pbuz2_then_la1 
    lda.z dst+1
    cmp.z end+1
    bne __b3
    lda.z dst
    cmp.z end
    bne __b3
    // memset::@return
    // }
    // [441] return 
    rts
    // memset::@3
  __b3:
    // *dst = c
    // [442] *((byte*) memset::dst#2) ← (const byte) memset::c#0 -- _deref_pbuz1=vbuc1 
    lda #c
    ldy #0
    sta (dst),y
    // for(char* dst = str; dst!=end; dst++)
    // [443] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2 -- pbuz1=_inc_pbuz1 
    inc.z dst
    bne !+
    inc.z dst+1
  !:
    jmp __b2
}
  // print_set_screen
// Set the screen to print on. Also resets current line/char cursor.
// print_set_screen(byte* zeropage($e) screen)
print_set_screen: {
    .label screen = $e
    // print_set_screen::@return
    // }
    // [445] return 
    rts
}
  // gfx_init
// Initialize the different graphics in the memory
gfx_init: {
    // gfx_init_screen0()
    // [447] call gfx_init_screen0 
    // [843] phi from gfx_init to gfx_init_screen0 [phi:gfx_init->gfx_init_screen0]
    jsr gfx_init_screen0
    // [448] phi from gfx_init to gfx_init::@1 [phi:gfx_init->gfx_init::@1]
    // gfx_init::@1
    // gfx_init_screen1()
    // [449] call gfx_init_screen1 
    // [831] phi from gfx_init::@1 to gfx_init_screen1 [phi:gfx_init::@1->gfx_init_screen1]
    jsr gfx_init_screen1
    // [450] phi from gfx_init::@1 to gfx_init::@2 [phi:gfx_init::@1->gfx_init::@2]
    // gfx_init::@2
    // gfx_init_screen2()
    // [451] call gfx_init_screen2 
    // [816] phi from gfx_init::@2 to gfx_init_screen2 [phi:gfx_init::@2->gfx_init_screen2]
    jsr gfx_init_screen2
    // [452] phi from gfx_init::@2 to gfx_init::@3 [phi:gfx_init::@2->gfx_init::@3]
    // gfx_init::@3
    // gfx_init_screen3()
    // [453] call gfx_init_screen3 
    // [802] phi from gfx_init::@3 to gfx_init_screen3 [phi:gfx_init::@3->gfx_init_screen3]
    jsr gfx_init_screen3
    // [454] phi from gfx_init::@3 to gfx_init::@4 [phi:gfx_init::@3->gfx_init::@4]
    // gfx_init::@4
    // gfx_init_screen4()
    // [455] call gfx_init_screen4 
    // [792] phi from gfx_init::@4 to gfx_init_screen4 [phi:gfx_init::@4->gfx_init_screen4]
    jsr gfx_init_screen4
    // [456] phi from gfx_init::@4 to gfx_init::@5 [phi:gfx_init::@4->gfx_init::@5]
    // gfx_init::@5
    // gfx_init_charset()
    // [457] call gfx_init_charset 
    jsr gfx_init_charset
    // [458] phi from gfx_init::@5 to gfx_init::@6 [phi:gfx_init::@5->gfx_init::@6]
    // gfx_init::@6
    // gfx_init_vic_bitmap()
    // [459] call gfx_init_vic_bitmap 
    // [602] phi from gfx_init::@6 to gfx_init_vic_bitmap [phi:gfx_init::@6->gfx_init_vic_bitmap]
    jsr gfx_init_vic_bitmap
    // [460] phi from gfx_init::@6 to gfx_init::@7 [phi:gfx_init::@6->gfx_init::@7]
    // gfx_init::@7
    // gfx_init_plane_8bppchunky()
    // [461] call gfx_init_plane_8bppchunky 
    // [582] phi from gfx_init::@7 to gfx_init_plane_8bppchunky [phi:gfx_init::@7->gfx_init_plane_8bppchunky]
    jsr gfx_init_plane_8bppchunky
    // [462] phi from gfx_init::@7 to gfx_init::@8 [phi:gfx_init::@7->gfx_init::@8]
    // gfx_init::@8
    // gfx_init_plane_charset8()
    // [463] call gfx_init_plane_charset8 
    // [557] phi from gfx_init::@8 to gfx_init_plane_charset8 [phi:gfx_init::@8->gfx_init_plane_charset8]
    jsr gfx_init_plane_charset8
    // [464] phi from gfx_init::@8 to gfx_init::@9 [phi:gfx_init::@8->gfx_init::@9]
    // gfx_init::@9
    // gfx_init_plane_horisontal()
    // [465] call gfx_init_plane_horisontal 
    // [539] phi from gfx_init::@9 to gfx_init_plane_horisontal [phi:gfx_init::@9->gfx_init_plane_horisontal]
    jsr gfx_init_plane_horisontal
    // [466] phi from gfx_init::@9 to gfx_init::@10 [phi:gfx_init::@9->gfx_init::@10]
    // gfx_init::@10
    // gfx_init_plane_vertical()
    // [467] call gfx_init_plane_vertical 
    // [526] phi from gfx_init::@10 to gfx_init_plane_vertical [phi:gfx_init::@10->gfx_init_plane_vertical]
    jsr gfx_init_plane_vertical
    // [468] phi from gfx_init::@10 to gfx_init::@11 [phi:gfx_init::@10->gfx_init::@11]
    // gfx_init::@11
    // gfx_init_plane_horisontal2()
    // [469] call gfx_init_plane_horisontal2 
    // [511] phi from gfx_init::@11 to gfx_init_plane_horisontal2 [phi:gfx_init::@11->gfx_init_plane_horisontal2]
    jsr gfx_init_plane_horisontal2
    // [470] phi from gfx_init::@11 to gfx_init::@12 [phi:gfx_init::@11->gfx_init::@12]
    // gfx_init::@12
    // gfx_init_plane_vertical2()
    // [471] call gfx_init_plane_vertical2 
    // [508] phi from gfx_init::@12 to gfx_init_plane_vertical2 [phi:gfx_init::@12->gfx_init_plane_vertical2]
    jsr gfx_init_plane_vertical2
    // [472] phi from gfx_init::@12 to gfx_init::@13 [phi:gfx_init::@12->gfx_init::@13]
    // gfx_init::@13
    // gfx_init_plane_blank()
    // [473] call gfx_init_plane_blank 
    // [505] phi from gfx_init::@13 to gfx_init_plane_blank [phi:gfx_init::@13->gfx_init_plane_blank]
    jsr gfx_init_plane_blank
    // [474] phi from gfx_init::@13 to gfx_init::@14 [phi:gfx_init::@13->gfx_init::@14]
    // gfx_init::@14
    // gfx_init_plane_full()
    // [475] call gfx_init_plane_full 
    // [477] phi from gfx_init::@14 to gfx_init_plane_full [phi:gfx_init::@14->gfx_init_plane_full]
    jsr gfx_init_plane_full
    // gfx_init::@return
    // }
    // [476] return 
    rts
}
  // gfx_init_plane_full
// Initialize Plane with all pixels
gfx_init_plane_full: {
    // gfx_init_plane_fill(PLANE_FULL, $ff)
    // [478] call gfx_init_plane_fill 
    // [480] phi from gfx_init_plane_full to gfx_init_plane_fill [phi:gfx_init_plane_full->gfx_init_plane_fill]
    // [480] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $ff [phi:gfx_init_plane_full->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$ff
    sta.z gfx_init_plane_fill.fill
    // [480] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_FULL [phi:gfx_init_plane_full->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_FULL
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_FULL>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    // gfx_init_plane_full::@return
    // }
    // [479] return 
    rts
}
  // gfx_init_plane_fill
// Initialize 320*200 1bpp pixel ($2000) plane with identical bytes
// gfx_init_plane_fill(dword zeropage(2) plane_addr, byte zeropage(8) fill)
gfx_init_plane_fill: {
    .label __0 = $12
    .label __1 = $16
    .label __4 = $e
    .label __5 = $e
    .label gfxb = $e
    .label by = $10
    .label plane_addr = 2
    .label fill = 8
    // plane_addr*4
    // [481] (dword~) gfx_init_plane_fill::$0 ← (dword) gfx_init_plane_fill::plane_addr#3 << (byte) 2 -- vduz1=vduz2_rol_2 
    lda.z plane_addr
    sta.z __0
    lda.z plane_addr+1
    sta.z __0+1
    lda.z plane_addr+2
    sta.z __0+2
    lda.z plane_addr+3
    sta.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    asl.z __0
    rol.z __0+1
    rol.z __0+2
    rol.z __0+3
    // >(plane_addr*4)
    // [482] (word~) gfx_init_plane_fill::$1 ← > (dword~) gfx_init_plane_fill::$0 -- vwuz1=_hi_vduz2 
    lda.z __0+2
    sta.z __1
    lda.z __0+3
    sta.z __1+1
    // gfxbCpuBank = < >(plane_addr*4)
    // [483] (byte) gfx_init_plane_fill::gfxbCpuBank#0 ← < (word~) gfx_init_plane_fill::$1 -- vbuaa=_lo_vwuz1 
    lda.z __1
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [484] (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 ← (byte) gfx_init_plane_fill::gfxbCpuBank#0
    // [485] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_fill to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#11 [phi:gfx_init_plane_fill->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_fill::@5
    // <plane_addr
    // [486] (word~) gfx_init_plane_fill::$4 ← < (dword) gfx_init_plane_fill::plane_addr#3 -- vwuz1=_lo_vduz2 
    lda.z plane_addr
    sta.z __4
    lda.z plane_addr+1
    sta.z __4+1
    // <plane_addr & $3fff
    // [487] (word~) gfx_init_plane_fill::$5 ← (word~) gfx_init_plane_fill::$4 & (word) $3fff -- vwuz1=vwuz1_band_vwuc1 
    lda.z __5
    and #<$3fff
    sta.z __5
    lda.z __5+1
    and #>$3fff
    sta.z __5+1
    // $4000 + (<plane_addr & $3fff)
    // [488] (word) gfx_init_plane_fill::gfxb#0 ← (word) $4000 + (word~) gfx_init_plane_fill::$5 -- vwuz1=vwuc1_plus_vwuz1 
    clc
    lda.z gfxb
    adc #<$4000
    sta.z gfxb
    lda.z gfxb+1
    adc #>$4000
    sta.z gfxb+1
    // [489] (byte*~) gfx_init_plane_fill::gfxb#6 ← (byte*)(word) gfx_init_plane_fill::gfxb#0
    // [490] phi from gfx_init_plane_fill::@5 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1]
    // [490] phi (byte) gfx_init_plane_fill::by#4 = (byte) 0 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [490] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*~) gfx_init_plane_fill::gfxb#6 [phi:gfx_init_plane_fill::@5->gfx_init_plane_fill::@1#1] -- register_copy 
    // [490] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1]
    // [490] phi (byte) gfx_init_plane_fill::by#4 = (byte) gfx_init_plane_fill::by#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#0] -- register_copy 
    // [490] phi (byte*) gfx_init_plane_fill::gfxb#3 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@1#1] -- register_copy 
    // gfx_init_plane_fill::@1
  __b1:
    // [491] phi from gfx_init_plane_fill::@1 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2]
    // [491] phi (byte) gfx_init_plane_fill::bx#2 = (byte) 0 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [491] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#3 [phi:gfx_init_plane_fill::@1->gfx_init_plane_fill::@2#1] -- register_copy 
    // [491] phi from gfx_init_plane_fill::@2 to gfx_init_plane_fill::@2 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2]
    // [491] phi (byte) gfx_init_plane_fill::bx#2 = (byte) gfx_init_plane_fill::bx#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#0] -- register_copy 
    // [491] phi (byte*) gfx_init_plane_fill::gfxb#2 = (byte*) gfx_init_plane_fill::gfxb#1 [phi:gfx_init_plane_fill::@2->gfx_init_plane_fill::@2#1] -- register_copy 
    // gfx_init_plane_fill::@2
  __b2:
    // *gfxb++ = fill
    // [492] *((byte*) gfx_init_plane_fill::gfxb#2) ← (byte) gfx_init_plane_fill::fill#6 -- _deref_pbuz1=vbuz2 
    lda.z fill
    ldy #0
    sta (gfxb),y
    // *gfxb++ = fill;
    // [493] (byte*) gfx_init_plane_fill::gfxb#1 ← ++ (byte*) gfx_init_plane_fill::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for ( byte bx : 0..39)
    // [494] (byte) gfx_init_plane_fill::bx#1 ← ++ (byte) gfx_init_plane_fill::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [495] if((byte) gfx_init_plane_fill::bx#1!=(byte) $28) goto gfx_init_plane_fill::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_fill::@3
    // for(byte by : 0..199)
    // [496] (byte) gfx_init_plane_fill::by#1 ← ++ (byte) gfx_init_plane_fill::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [497] if((byte) gfx_init_plane_fill::by#1!=(byte) $c8) goto gfx_init_plane_fill::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1
    // [498] phi from gfx_init_plane_fill::@3 to gfx_init_plane_fill::@4 [phi:gfx_init_plane_fill::@3->gfx_init_plane_fill::@4]
    // gfx_init_plane_fill::@4
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [499] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_fill::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_fill::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_fill::@return
    // }
    // [500] return 
    rts
}
  // dtvSetCpuBankSegment1
// Set the memory pointed to by CPU BANK 1 SEGMENT ($4000-$7fff)
// This sets which actual memory is addressed when the CPU reads/writes to $4000-$7fff
// The actual memory addressed will be $4000*cpuSegmentIdx
// dtvSetCpuBankSegment1(byte register(A) cpuBankIdx)
dtvSetCpuBankSegment1: {
    // Move CPU BANK 1 SEGMENT ($4000-$7fff)
    .label cpuBank = $ff
    // *cpuBank = cpuBankIdx
    // [502] *((const byte*) dtvSetCpuBankSegment1::cpuBank) ← (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 -- _deref_pbuc1=vbuaa 
    sta cpuBank
    // asm
    // asm { .byte$32,$dd lda$ff .byte$32,$00  }
    .byte $32, $dd
    lda.z $ff
    .byte $32, $00
    // dtvSetCpuBankSegment1::@return
    // }
    // [504] return 
    rts
}
  // gfx_init_plane_blank
// Initialize Plane with blank pixels
gfx_init_plane_blank: {
    // gfx_init_plane_fill(PLANE_BLANK, 0)
    // [506] call gfx_init_plane_fill 
    // [480] phi from gfx_init_plane_blank to gfx_init_plane_fill [phi:gfx_init_plane_blank->gfx_init_plane_fill]
    // [480] phi (byte) gfx_init_plane_fill::fill#6 = (byte) 0 [phi:gfx_init_plane_blank->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #0
    sta.z gfx_init_plane_fill.fill
    // [480] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_BLANK [phi:gfx_init_plane_blank->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_BLANK
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_BLANK>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    // gfx_init_plane_blank::@return
    // }
    // [507] return 
    rts
}
  // gfx_init_plane_vertical2
// Initialize Plane with Vertical Stripes every 2 pixels
gfx_init_plane_vertical2: {
    // gfx_init_plane_fill(PLANE_VERTICAL2, %00011011)
    // [509] call gfx_init_plane_fill 
    // [480] phi from gfx_init_plane_vertical2 to gfx_init_plane_fill [phi:gfx_init_plane_vertical2->gfx_init_plane_fill]
    // [480] phi (byte) gfx_init_plane_fill::fill#6 = (byte) $1b [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#0] -- vbuz1=vbuc1 
    lda #$1b
    sta.z gfx_init_plane_fill.fill
    // [480] phi (dword) gfx_init_plane_fill::plane_addr#3 = (const dword) PLANE_VERTICAL2 [phi:gfx_init_plane_vertical2->gfx_init_plane_fill#1] -- vduz1=vduc1 
    lda #<PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr
    lda #>PLANE_VERTICAL2
    sta.z gfx_init_plane_fill.plane_addr+1
    lda #<PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+2
    lda #>PLANE_VERTICAL2>>$10
    sta.z gfx_init_plane_fill.plane_addr+3
    jsr gfx_init_plane_fill
    // gfx_init_plane_vertical2::@return
    // }
    // [510] return 
    rts
}
  // gfx_init_plane_horisontal2
// Initialize Plane with Horizontal Stripes every 2 pixels
gfx_init_plane_horisontal2: {
    .const gfxbCpuBank = PLANE_HORISONTAL2/$4000
    .label gfxa = 6
    .label ay = 9
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [512] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal2 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal2::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal2->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [513] phi from gfx_init_plane_horisontal2 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1]
    // [513] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [513] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal2->gfx_init_plane_horisontal2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [513] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1]
    // [513] phi (byte*) gfx_init_plane_horisontal2::gfxa#3 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#0] -- register_copy 
    // [513] phi (byte) gfx_init_plane_horisontal2::ay#4 = (byte) gfx_init_plane_horisontal2::ay#1 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@1#1] -- register_copy 
    // gfx_init_plane_horisontal2::@1
  __b1:
    // [514] phi from gfx_init_plane_horisontal2::@1 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2]
    // [514] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [514] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#3 [phi:gfx_init_plane_horisontal2::@1->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    // [514] phi from gfx_init_plane_horisontal2::@2 to gfx_init_plane_horisontal2::@2 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2]
    // [514] phi (byte) gfx_init_plane_horisontal2::ax#2 = (byte) gfx_init_plane_horisontal2::ax#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#0] -- register_copy 
    // [514] phi (byte*) gfx_init_plane_horisontal2::gfxa#2 = (byte*) gfx_init_plane_horisontal2::gfxa#1 [phi:gfx_init_plane_horisontal2::@2->gfx_init_plane_horisontal2::@2#1] -- register_copy 
    // gfx_init_plane_horisontal2::@2
  __b2:
    // ay/2
    // [515] (byte~) gfx_init_plane_horisontal2::$7 ← (byte) gfx_init_plane_horisontal2::ay#4 >> (byte) 1 -- vbuaa=vbuz1_ror_1 
    lda.z ay
    lsr
    // row = (ay/2) & 3
    // [516] (byte) gfx_init_plane_horisontal2::row#0 ← (byte~) gfx_init_plane_horisontal2::$7 & (byte) 3 -- vbuaa=vbuaa_band_vbuc1 
    and #3
    // *gfxa++ = row_bitmask[row]
    // [517] *((byte*) gfx_init_plane_horisontal2::gfxa#2) ← *((const byte[]) gfx_init_plane_horisontal2::row_bitmask + (byte) gfx_init_plane_horisontal2::row#0) -- _deref_pbuz1=pbuc1_derefidx_vbuaa 
    tay
    lda row_bitmask,y
    ldy #0
    sta (gfxa),y
    // *gfxa++ = row_bitmask[row];
    // [518] (byte*) gfx_init_plane_horisontal2::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal2::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // for (byte ax : 0..39)
    // [519] (byte) gfx_init_plane_horisontal2::ax#1 ← ++ (byte) gfx_init_plane_horisontal2::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [520] if((byte) gfx_init_plane_horisontal2::ax#1!=(byte) $28) goto gfx_init_plane_horisontal2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_horisontal2::@3
    // for(byte ay : 0..199)
    // [521] (byte) gfx_init_plane_horisontal2::ay#1 ← ++ (byte) gfx_init_plane_horisontal2::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [522] if((byte) gfx_init_plane_horisontal2::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1
    // [523] phi from gfx_init_plane_horisontal2::@3 to gfx_init_plane_horisontal2::@4 [phi:gfx_init_plane_horisontal2::@3->gfx_init_plane_horisontal2::@4]
    // gfx_init_plane_horisontal2::@4
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [524] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal2::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal2::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_horisontal2::@return
    // }
    // [525] return 
    rts
    row_bitmask: .byte 0, $55, $aa, $ff
}
  // gfx_init_plane_vertical
// Initialize Plane with Vertical Stripes
gfx_init_plane_vertical: {
    .const gfxbCpuBank = PLANE_VERTICAL/$4000
    .label gfxb = 6
    .label by = $11
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [527] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_vertical to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_vertical::gfxbCpuBank#0 [phi:gfx_init_plane_vertical->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [528] phi from gfx_init_plane_vertical to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1]
    // [528] phi (byte) gfx_init_plane_vertical::by#4 = (byte) 0 [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z by
    // [528] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*)(word) $4000+(const dword) PLANE_VERTICAL&(word) $3fff [phi:gfx_init_plane_vertical->gfx_init_plane_vertical::@1#1] -- pbuz1=pbuc1 
    lda #<$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb
    lda #>$4000+(PLANE_VERTICAL&$3fff)
    sta.z gfxb+1
    // [528] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1]
    // [528] phi (byte) gfx_init_plane_vertical::by#4 = (byte) gfx_init_plane_vertical::by#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#0] -- register_copy 
    // [528] phi (byte*) gfx_init_plane_vertical::gfxb#3 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@1#1] -- register_copy 
    // gfx_init_plane_vertical::@1
  __b1:
    // [529] phi from gfx_init_plane_vertical::@1 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2]
    // [529] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) 0 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [529] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#3 [phi:gfx_init_plane_vertical::@1->gfx_init_plane_vertical::@2#1] -- register_copy 
    // [529] phi from gfx_init_plane_vertical::@2 to gfx_init_plane_vertical::@2 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2]
    // [529] phi (byte) gfx_init_plane_vertical::bx#2 = (byte) gfx_init_plane_vertical::bx#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#0] -- register_copy 
    // [529] phi (byte*) gfx_init_plane_vertical::gfxb#2 = (byte*) gfx_init_plane_vertical::gfxb#1 [phi:gfx_init_plane_vertical::@2->gfx_init_plane_vertical::@2#1] -- register_copy 
    // gfx_init_plane_vertical::@2
  __b2:
    // *gfxb++ = %00001111
    // [530] *((byte*) gfx_init_plane_vertical::gfxb#2) ← (byte) $f -- _deref_pbuz1=vbuc1 
    lda #$f
    ldy #0
    sta (gfxb),y
    // *gfxb++ = %00001111;
    // [531] (byte*) gfx_init_plane_vertical::gfxb#1 ← ++ (byte*) gfx_init_plane_vertical::gfxb#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for ( byte bx : 0..39)
    // [532] (byte) gfx_init_plane_vertical::bx#1 ← ++ (byte) gfx_init_plane_vertical::bx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [533] if((byte) gfx_init_plane_vertical::bx#1!=(byte) $28) goto gfx_init_plane_vertical::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_vertical::@3
    // for(byte by : 0..199)
    // [534] (byte) gfx_init_plane_vertical::by#1 ← ++ (byte) gfx_init_plane_vertical::by#4 -- vbuz1=_inc_vbuz1 
    inc.z by
    // [535] if((byte) gfx_init_plane_vertical::by#1!=(byte) $c8) goto gfx_init_plane_vertical::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z by
    bne __b1
    // [536] phi from gfx_init_plane_vertical::@3 to gfx_init_plane_vertical::@4 [phi:gfx_init_plane_vertical::@3->gfx_init_plane_vertical::@4]
    // gfx_init_plane_vertical::@4
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [537] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_vertical::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_vertical::@4->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_vertical::@return
    // }
    // [538] return 
    rts
}
  // gfx_init_plane_horisontal
// Initialize Plane with Horizontal Stripes
gfx_init_plane_horisontal: {
    .const gfxbCpuBank = PLANE_HORISONTAL/$4000
    .label gfxa = 6
    .label ay = $a
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [540] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_horisontal::gfxbCpuBank#0 [phi:gfx_init_plane_horisontal->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // [541] phi from gfx_init_plane_horisontal to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1]
    // [541] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#0] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [541] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) 0 [phi:gfx_init_plane_horisontal->gfx_init_plane_horisontal::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z ay
    // [541] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1]
    // [541] phi (byte*) gfx_init_plane_horisontal::gfxa#6 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#0] -- register_copy 
    // [541] phi (byte) gfx_init_plane_horisontal::ay#4 = (byte) gfx_init_plane_horisontal::ay#1 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@1#1] -- register_copy 
    // gfx_init_plane_horisontal::@1
  __b1:
    // [542] phi from gfx_init_plane_horisontal::@1 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2]
    // [542] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) 0 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [542] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#6 [phi:gfx_init_plane_horisontal::@1->gfx_init_plane_horisontal::@2#1] -- register_copy 
    // [542] phi from gfx_init_plane_horisontal::@4 to gfx_init_plane_horisontal::@2 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2]
    // [542] phi (byte) gfx_init_plane_horisontal::ax#2 = (byte) gfx_init_plane_horisontal::ax#1 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#0] -- register_copy 
    // [542] phi (byte*) gfx_init_plane_horisontal::gfxa#3 = (byte*) gfx_init_plane_horisontal::gfxa#7 [phi:gfx_init_plane_horisontal::@4->gfx_init_plane_horisontal::@2#1] -- register_copy 
    // gfx_init_plane_horisontal::@2
  __b2:
    // ay&4
    // [543] (byte~) gfx_init_plane_horisontal::$7 ← (byte) gfx_init_plane_horisontal::ay#4 & (byte) 4 -- vbuaa=vbuz1_band_vbuc1 
    lda #4
    and.z ay
    // if((ay&4)==0)
    // [544] if((byte~) gfx_init_plane_horisontal::$7==(byte) 0) goto gfx_init_plane_horisontal::@3 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b3
    // gfx_init_plane_horisontal::@5
    // *gfxa++ = %11111111
    // [545] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) $ff -- _deref_pbuz1=vbuc1 
    lda #$ff
    ldy #0
    sta (gfxa),y
    // *gfxa++ = %11111111;
    // [546] (byte*) gfx_init_plane_horisontal::gfxa#2 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // [547] phi from gfx_init_plane_horisontal::@3 gfx_init_plane_horisontal::@5 to gfx_init_plane_horisontal::@4 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4]
    // [547] phi (byte*) gfx_init_plane_horisontal::gfxa#7 = (byte*) gfx_init_plane_horisontal::gfxa#1 [phi:gfx_init_plane_horisontal::@3/gfx_init_plane_horisontal::@5->gfx_init_plane_horisontal::@4#0] -- register_copy 
    // gfx_init_plane_horisontal::@4
  __b4:
    // for (byte ax : 0..39)
    // [548] (byte) gfx_init_plane_horisontal::ax#1 ← ++ (byte) gfx_init_plane_horisontal::ax#2 -- vbuxx=_inc_vbuxx 
    inx
    // [549] if((byte) gfx_init_plane_horisontal::ax#1!=(byte) $28) goto gfx_init_plane_horisontal::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_plane_horisontal::@6
    // for(byte ay : 0..199)
    // [550] (byte) gfx_init_plane_horisontal::ay#1 ← ++ (byte) gfx_init_plane_horisontal::ay#4 -- vbuz1=_inc_vbuz1 
    inc.z ay
    // [551] if((byte) gfx_init_plane_horisontal::ay#1!=(byte) $c8) goto gfx_init_plane_horisontal::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z ay
    bne __b1
    // [552] phi from gfx_init_plane_horisontal::@6 to gfx_init_plane_horisontal::@7 [phi:gfx_init_plane_horisontal::@6->gfx_init_plane_horisontal::@7]
    // gfx_init_plane_horisontal::@7
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [553] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_horisontal::@7 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_horisontal::@7->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_horisontal::@return
    // }
    // [554] return 
    rts
    // gfx_init_plane_horisontal::@3
  __b3:
    // *gfxa++ = %00000000
    // [555] *((byte*) gfx_init_plane_horisontal::gfxa#3) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (gfxa),y
    // *gfxa++ = %00000000;
    // [556] (byte*) gfx_init_plane_horisontal::gfxa#1 ← ++ (byte*) gfx_init_plane_horisontal::gfxa#3 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    jmp __b4
}
  // gfx_init_plane_charset8
// Initialize Plane with 8bpp charset
gfx_init_plane_charset8: {
    .const gfxbCpuBank = PLANE_CHARSET8/$4000
    .label bits = 8
    .label chargen = 6
    .label gfxa = $b
    .label col = $10
    .label cr = $d
    .label ch = $a
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [558] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_charset8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (const byte) gfx_init_plane_charset8::gfxbCpuBank#0 [phi:gfx_init_plane_charset8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #gfxbCpuBank
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_charset8::@9
    // *PROCPORT = PROCPORT_RAM_CHARROM
    // [559] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_CHARROM -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_CHARROM
    sta PROCPORT
    // [560] phi from gfx_init_plane_charset8::@9 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1]
    // [560] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z ch
    // [560] phi (byte) gfx_init_plane_charset8::col#6 = (byte) 0 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#1] -- vbuz1=vbuc1 
    sta.z col
    // [560] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*)(word) $4000 [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxa
    lda #>$4000
    sta.z gfxa+1
    // [560] phi (byte*) gfx_init_plane_charset8::chargen#3 = (const byte*) CHARGEN [phi:gfx_init_plane_charset8::@9->gfx_init_plane_charset8::@1#3] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    // [560] phi from gfx_init_plane_charset8::@7 to gfx_init_plane_charset8::@1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1]
    // [560] phi (byte) gfx_init_plane_charset8::ch#8 = (byte) gfx_init_plane_charset8::ch#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#0] -- register_copy 
    // [560] phi (byte) gfx_init_plane_charset8::col#6 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#1] -- register_copy 
    // [560] phi (byte*) gfx_init_plane_charset8::gfxa#6 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#2] -- register_copy 
    // [560] phi (byte*) gfx_init_plane_charset8::chargen#3 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@7->gfx_init_plane_charset8::@1#3] -- register_copy 
    // gfx_init_plane_charset8::@1
  __b1:
    // [561] phi from gfx_init_plane_charset8::@1 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2]
    // [561] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) 0 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cr
    // [561] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#6 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#3 [phi:gfx_init_plane_charset8::@1->gfx_init_plane_charset8::@2#3] -- register_copy 
    // [561] phi from gfx_init_plane_charset8::@6 to gfx_init_plane_charset8::@2 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2]
    // [561] phi (byte) gfx_init_plane_charset8::cr#6 = (byte) gfx_init_plane_charset8::cr#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#0] -- register_copy 
    // [561] phi (byte) gfx_init_plane_charset8::col#5 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#1] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::gfxa#5 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#2] -- register_copy 
    // [561] phi (byte*) gfx_init_plane_charset8::chargen#2 = (byte*) gfx_init_plane_charset8::chargen#1 [phi:gfx_init_plane_charset8::@6->gfx_init_plane_charset8::@2#3] -- register_copy 
    // gfx_init_plane_charset8::@2
  __b2:
    // bits = *chargen++
    // [562] (byte) gfx_init_plane_charset8::bits#0 ← *((byte*) gfx_init_plane_charset8::chargen#2) -- vbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta.z bits
    // [563] (byte*) gfx_init_plane_charset8::chargen#1 ← ++ (byte*) gfx_init_plane_charset8::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // [564] phi from gfx_init_plane_charset8::@2 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3]
    // [564] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) 0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#0] -- vbuxx=vbuc1 
    ldx #0
    // [564] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [564] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#5 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [564] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#0 [phi:gfx_init_plane_charset8::@2->gfx_init_plane_charset8::@3#3] -- register_copy 
    // [564] phi from gfx_init_plane_charset8::@4 to gfx_init_plane_charset8::@3 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3]
    // [564] phi (byte) gfx_init_plane_charset8::cp#2 = (byte) gfx_init_plane_charset8::cp#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#0] -- register_copy 
    // [564] phi (byte) gfx_init_plane_charset8::col#2 = (byte) gfx_init_plane_charset8::col#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#1] -- register_copy 
    // [564] phi (byte*) gfx_init_plane_charset8::gfxa#2 = (byte*) gfx_init_plane_charset8::gfxa#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#2] -- register_copy 
    // [564] phi (byte) gfx_init_plane_charset8::bits#2 = (byte) gfx_init_plane_charset8::bits#1 [phi:gfx_init_plane_charset8::@4->gfx_init_plane_charset8::@3#3] -- register_copy 
    // gfx_init_plane_charset8::@3
  __b3:
    // bits & $80
    // [565] (byte~) gfx_init_plane_charset8::$7 ← (byte) gfx_init_plane_charset8::bits#2 & (byte) $80 -- vbuaa=vbuz1_band_vbuc1 
    lda #$80
    and.z bits
    // if((bits & $80) != 0)
    // [566] if((byte~) gfx_init_plane_charset8::$7==(byte) 0) goto gfx_init_plane_charset8::@4 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1
    // gfx_init_plane_charset8::@5
    // [567] (byte~) gfx_init_plane_charset8::c#3 ← (byte) gfx_init_plane_charset8::col#2 -- vbuaa=vbuz1 
    lda.z col
    // [568] phi from gfx_init_plane_charset8::@5 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4]
    // [568] phi (byte) gfx_init_plane_charset8::c#2 = (byte~) gfx_init_plane_charset8::c#3 [phi:gfx_init_plane_charset8::@5->gfx_init_plane_charset8::@4#0] -- register_copy 
    jmp __b4
    // [568] phi from gfx_init_plane_charset8::@3 to gfx_init_plane_charset8::@4 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4]
  b1:
    // [568] phi (byte) gfx_init_plane_charset8::c#2 = (byte) 0 [phi:gfx_init_plane_charset8::@3->gfx_init_plane_charset8::@4#0] -- vbuaa=vbuc1 
    lda #0
    // gfx_init_plane_charset8::@4
  __b4:
    // *gfxa++ = c
    // [569] *((byte*) gfx_init_plane_charset8::gfxa#2) ← (byte) gfx_init_plane_charset8::c#2 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxa),y
    // *gfxa++ = c;
    // [570] (byte*) gfx_init_plane_charset8::gfxa#1 ← ++ (byte*) gfx_init_plane_charset8::gfxa#2 -- pbuz1=_inc_pbuz1 
    inc.z gfxa
    bne !+
    inc.z gfxa+1
  !:
    // bits = bits*2
    // [571] (byte) gfx_init_plane_charset8::bits#1 ← (byte) gfx_init_plane_charset8::bits#2 << (byte) 1 -- vbuz1=vbuz1_rol_1 
    asl.z bits
    // col++;
    // [572] (byte) gfx_init_plane_charset8::col#1 ← ++ (byte) gfx_init_plane_charset8::col#2 -- vbuz1=_inc_vbuz1 
    inc.z col
    // for ( byte cp : 0..7)
    // [573] (byte) gfx_init_plane_charset8::cp#1 ← ++ (byte) gfx_init_plane_charset8::cp#2 -- vbuxx=_inc_vbuxx 
    inx
    // [574] if((byte) gfx_init_plane_charset8::cp#1!=(byte) 8) goto gfx_init_plane_charset8::@3 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b3
    // gfx_init_plane_charset8::@6
    // for ( byte cr : 0..7)
    // [575] (byte) gfx_init_plane_charset8::cr#1 ← ++ (byte) gfx_init_plane_charset8::cr#6 -- vbuz1=_inc_vbuz1 
    inc.z cr
    // [576] if((byte) gfx_init_plane_charset8::cr#1!=(byte) 8) goto gfx_init_plane_charset8::@2 -- vbuz1_neq_vbuc1_then_la1 
    lda #8
    cmp.z cr
    bne __b2
    // gfx_init_plane_charset8::@7
    // for(byte ch : $00..$ff)
    // [577] (byte) gfx_init_plane_charset8::ch#1 ← ++ (byte) gfx_init_plane_charset8::ch#8 -- vbuz1=_inc_vbuz1 
    inc.z ch
    // [578] if((byte) gfx_init_plane_charset8::ch#1!=(byte) 0) goto gfx_init_plane_charset8::@1 -- vbuz1_neq_0_then_la1 
    lda.z ch
    cmp #0
    bne __b1
    // gfx_init_plane_charset8::@8
    // *PROCPORT = PROCPORT_RAM_IO
    // [579] *((const byte*) PROCPORT) ← (const byte) PROCPORT_RAM_IO -- _deref_pbuc1=vbuc2 
    lda #PROCPORT_RAM_IO
    sta PROCPORT
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [580] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_charset8::@8 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_charset8::@8->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_charset8::@return
    // }
    // [581] return 
    rts
}
  // gfx_init_plane_8bppchunky
// Initialize 8BPP Chunky Bitmap (contains 8bpp pixels)
gfx_init_plane_8bppchunky: {
    .label __8 = $18
    .label gfxb = $e
    .label x = $b
    .label y = $d
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [583] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_8bppchunky to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #PLANE_8BPP_CHUNKY/$4000
    jsr dtvSetCpuBankSegment1
    // [584] phi from gfx_init_plane_8bppchunky to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1]
    // [584] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = ++(byte)(const dword) PLANE_8BPP_CHUNKY/(word) $4000 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#0] -- vbuxx=vbuc1 
    ldx #PLANE_8BPP_CHUNKY/$4000+1
    // [584] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) 0 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [584] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky->gfx_init_plane_8bppchunky::@1#2] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    // [584] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1]
    // [584] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#0] -- register_copy 
    // [584] phi (byte) gfx_init_plane_8bppchunky::y#6 = (byte) gfx_init_plane_8bppchunky::y#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#1] -- register_copy 
    // [584] phi (byte*) gfx_init_plane_8bppchunky::gfxb#5 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@1#2] -- register_copy 
    // gfx_init_plane_8bppchunky::@1
  __b1:
    // [585] phi from gfx_init_plane_8bppchunky::@1 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2]
    // [585] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#7 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [585] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) 0 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#1] -- vwuz1=vwuc1 
    lda #<0
    sta.z x
    sta.z x+1
    // [585] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#5 [phi:gfx_init_plane_8bppchunky::@1->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    // [585] phi from gfx_init_plane_8bppchunky::@3 to gfx_init_plane_8bppchunky::@2 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2]
    // [585] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#0] -- register_copy 
    // [585] phi (word) gfx_init_plane_8bppchunky::x#2 = (word) gfx_init_plane_8bppchunky::x#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#1] -- register_copy 
    // [585] phi (byte*) gfx_init_plane_8bppchunky::gfxb#3 = (byte*) gfx_init_plane_8bppchunky::gfxb#1 [phi:gfx_init_plane_8bppchunky::@3->gfx_init_plane_8bppchunky::@2#2] -- register_copy 
    // gfx_init_plane_8bppchunky::@2
  __b2:
    // if(gfxb==$8000)
    // [586] if((byte*) gfx_init_plane_8bppchunky::gfxb#3!=(word) $8000) goto gfx_init_plane_8bppchunky::@3 -- pbuz1_neq_vwuc1_then_la1 
    lda.z gfxb+1
    cmp #>$8000
    bne __b3
    lda.z gfxb
    cmp #<$8000
    bne __b3
    // gfx_init_plane_8bppchunky::@4
    // dtvSetCpuBankSegment1(gfxbCpuBank++)
    // [587] (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 ← (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuaa=vbuxx 
    txa
    // [588] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_8bppchunky::@4 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte) dtvSetCpuBankSegment1::cpuBankIdx#1 [phi:gfx_init_plane_8bppchunky::@4->dtvSetCpuBankSegment1#0] -- register_copy 
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_8bppchunky::@7
    // dtvSetCpuBankSegment1(gfxbCpuBank++);
    // [589] (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 ← ++ (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 -- vbuxx=_inc_vbuxx 
    inx
    // [590] phi from gfx_init_plane_8bppchunky::@7 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3]
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#2 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) 16384 [phi:gfx_init_plane_8bppchunky::@7->gfx_init_plane_8bppchunky::@3#1] -- pbuz1=pbuc1 
    lda #<$4000
    sta.z gfxb
    lda #>$4000
    sta.z gfxb+1
    // [590] phi from gfx_init_plane_8bppchunky::@2 to gfx_init_plane_8bppchunky::@3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3]
    // [590] phi (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#8 = (byte) gfx_init_plane_8bppchunky::gfxbCpuBank#4 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#0] -- register_copy 
    // [590] phi (byte*) gfx_init_plane_8bppchunky::gfxb#4 = (byte*) gfx_init_plane_8bppchunky::gfxb#3 [phi:gfx_init_plane_8bppchunky::@2->gfx_init_plane_8bppchunky::@3#1] -- register_copy 
    // gfx_init_plane_8bppchunky::@3
  __b3:
    // x+y
    // [591] (word~) gfx_init_plane_8bppchunky::$8 ← (word) gfx_init_plane_8bppchunky::x#2 + (byte) gfx_init_plane_8bppchunky::y#6 -- vwuz1=vwuz2_plus_vbuz3 
    lda.z y
    clc
    adc.z x
    sta.z __8
    lda #0
    adc.z x+1
    sta.z __8+1
    // c = (byte)(x+y)
    // [592] (byte) gfx_init_plane_8bppchunky::c#0 ← (byte)(word~) gfx_init_plane_8bppchunky::$8 -- vbuaa=_byte_vwuz1 
    lda.z __8
    // *gfxb++ = c
    // [593] *((byte*) gfx_init_plane_8bppchunky::gfxb#4) ← (byte) gfx_init_plane_8bppchunky::c#0 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (gfxb),y
    // *gfxb++ = c;
    // [594] (byte*) gfx_init_plane_8bppchunky::gfxb#1 ← ++ (byte*) gfx_init_plane_8bppchunky::gfxb#4 -- pbuz1=_inc_pbuz1 
    inc.z gfxb
    bne !+
    inc.z gfxb+1
  !:
    // for (word x : 0..319)
    // [595] (word) gfx_init_plane_8bppchunky::x#1 ← ++ (word) gfx_init_plane_8bppchunky::x#2 -- vwuz1=_inc_vwuz1 
    inc.z x
    bne !+
    inc.z x+1
  !:
    // [596] if((word) gfx_init_plane_8bppchunky::x#1!=(word) $140) goto gfx_init_plane_8bppchunky::@2 -- vwuz1_neq_vwuc1_then_la1 
    lda.z x+1
    cmp #>$140
    bne __b2
    lda.z x
    cmp #<$140
    bne __b2
    // gfx_init_plane_8bppchunky::@5
    // for(byte y : 0..199)
    // [597] (byte) gfx_init_plane_8bppchunky::y#1 ← ++ (byte) gfx_init_plane_8bppchunky::y#6 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [598] if((byte) gfx_init_plane_8bppchunky::y#1!=(byte) $c8) goto gfx_init_plane_8bppchunky::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$c8
    cmp.z y
    bne __b1
    // [599] phi from gfx_init_plane_8bppchunky::@5 to gfx_init_plane_8bppchunky::@6 [phi:gfx_init_plane_8bppchunky::@5->gfx_init_plane_8bppchunky::@6]
    // gfx_init_plane_8bppchunky::@6
    // dtvSetCpuBankSegment1((byte)($4000/$4000))
    // [600] call dtvSetCpuBankSegment1 
    // [501] phi from gfx_init_plane_8bppchunky::@6 to dtvSetCpuBankSegment1 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1]
    // [501] phi (byte) dtvSetCpuBankSegment1::cpuBankIdx#13 = (byte)(number) $4000/(number) $4000 [phi:gfx_init_plane_8bppchunky::@6->dtvSetCpuBankSegment1#0] -- vbuaa=vbuc1 
    lda #$4000/$4000
    jsr dtvSetCpuBankSegment1
    // gfx_init_plane_8bppchunky::@return
    // }
    // [601] return 
    rts
}
  // gfx_init_vic_bitmap
// Initialize VIC bitmap
gfx_init_vic_bitmap: {
    .const lines_cnt = 9
    .label l = 8
    // bitmap_init(VIC_BITMAP)
    // [603] call bitmap_init 
    // [755] phi from gfx_init_vic_bitmap to bitmap_init [phi:gfx_init_vic_bitmap->bitmap_init]
    jsr bitmap_init
    // [604] phi from gfx_init_vic_bitmap to gfx_init_vic_bitmap::@3 [phi:gfx_init_vic_bitmap->gfx_init_vic_bitmap::@3]
    // gfx_init_vic_bitmap::@3
    // bitmap_clear()
    // [605] call bitmap_clear 
    jsr bitmap_clear
    // [606] phi from gfx_init_vic_bitmap::@3 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1]
    // [606] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) 0 [phi:gfx_init_vic_bitmap::@3->gfx_init_vic_bitmap::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z l
    // gfx_init_vic_bitmap::@1
  __b1:
    // for(byte l=0; l<lines_cnt;l++)
    // [607] if((byte) gfx_init_vic_bitmap::l#2<(const byte) gfx_init_vic_bitmap::lines_cnt) goto gfx_init_vic_bitmap::@2 -- vbuz1_lt_vbuc1_then_la1 
    lda.z l
    cmp #lines_cnt
    bcc __b2
    // gfx_init_vic_bitmap::@return
    // }
    // [608] return 
    rts
    // gfx_init_vic_bitmap::@2
  __b2:
    // bitmap_line(lines_x[l], lines_x[l+1], lines_y[l], lines_y[l+1])
    // [609] (byte) bitmap_line::x0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z l
    lda lines_x,y
    sta.z bitmap_line.x0
    // [610] (byte) bitmap_line::x1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_x+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuxx=pbuc1_derefidx_vbuz1 
    ldx lines_x+1,y
    // [611] (byte) bitmap_line::y0#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_y,y
    sta.z bitmap_line.y0
    // [612] (byte) bitmap_line::y1#0 ← *((const byte[]) gfx_init_vic_bitmap::lines_y+(byte) 1 + (byte) gfx_init_vic_bitmap::l#2) -- vbuz1=pbuc1_derefidx_vbuz2 
    lda lines_y+1,y
    sta.z bitmap_line.y1
    // [613] call bitmap_line 
    jsr bitmap_line
    // gfx_init_vic_bitmap::@4
    // for(byte l=0; l<lines_cnt;l++)
    // [614] (byte) gfx_init_vic_bitmap::l#1 ← ++ (byte) gfx_init_vic_bitmap::l#2 -- vbuz1=_inc_vbuz1 
    inc.z l
    // [606] phi from gfx_init_vic_bitmap::@4 to gfx_init_vic_bitmap::@1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1]
    // [606] phi (byte) gfx_init_vic_bitmap::l#2 = (byte) gfx_init_vic_bitmap::l#1 [phi:gfx_init_vic_bitmap::@4->gfx_init_vic_bitmap::@1#0] -- register_copy 
    jmp __b1
    lines_x: .byte 0, $ff, $ff, 0, 0, $80, $ff, $80, 0, $80
    lines_y: .byte 0, 0, $c7, $c7, 0, 0, $64, $c7, $64, 0
}
  // bitmap_line
// Draw a line on the bitmap
// bitmap_line(byte zeropage(9) x0, byte register(X) x1, byte zeropage($d) y0, byte zeropage($11) y1)
bitmap_line: {
    .label xd = $1f
    .label x0 = 9
    .label y0 = $d
    .label y1 = $11
    // if(x0<x1)
    // [615] if((byte) bitmap_line::x0#0<(byte) bitmap_line::x1#0) goto bitmap_line::@1 -- vbuz1_lt_vbuxx_then_la1 
    txa
    cmp.z x0
    beq !+
    bcs __b1
  !:
    // bitmap_line::@2
    // xd = x0-x1
    // [616] (byte) bitmap_line::xd#2 ← (byte) bitmap_line::x0#0 - (byte) bitmap_line::x1#0 -- vbuz1=vbuz2_minus_vbuxx 
    txa
    eor #$ff
    sec
    adc.z x0
    sta.z xd
    // if(y0<y1)
    // [617] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@7 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y0
    cmp.z y1
    bcc __b7
    // bitmap_line::@3
    // yd = y0-y1
    // [618] (byte) bitmap_line::yd#2 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuz1_minus_vbuz2 
    sec
    sbc.z y1
    tay
    // if(yd<xd)
    // [619] if((byte) bitmap_line::yd#2<(byte) bitmap_line::xd#2) goto bitmap_line::@8 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b8
    // bitmap_line::@4
    // bitmap_line_ydxi(y1, x1, y0, yd, xd)
    // [620] (byte) bitmap_line_ydxi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxi.y
    // [621] (byte) bitmap_line_ydxi::x#0 ← (byte) bitmap_line::x1#0
    // [622] (byte) bitmap_line_ydxi::y1#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y1
    // [623] (byte) bitmap_line_ydxi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [624] (byte) bitmap_line_ydxi::xd#0 ← (byte) bitmap_line::xd#2
    // [625] call bitmap_line_ydxi 
    // [699] phi from bitmap_line::@4 to bitmap_line_ydxi [phi:bitmap_line::@4->bitmap_line_ydxi]
    // [699] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#0 [phi:bitmap_line::@4->bitmap_line_ydxi#0] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#1] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#0 [phi:bitmap_line::@4->bitmap_line_ydxi#2] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#0 [phi:bitmap_line::@4->bitmap_line_ydxi#3] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#0 [phi:bitmap_line::@4->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    // bitmap_line::@return
    // }
    // [626] return 
    rts
    // bitmap_line::@8
  __b8:
    // bitmap_line_xdyi(x1, y1, x0, xd, yd)
    // [627] (byte) bitmap_line_xdyi::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_xdyi.x
    // [628] (byte) bitmap_line_xdyi::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_xdyi.y
    // [629] (byte) bitmap_line_xdyi::x1#0 ← (byte) bitmap_line::x0#0
    // [630] (byte) bitmap_line_xdyi::xd#0 ← (byte) bitmap_line::xd#2
    // [631] (byte) bitmap_line_xdyi::yd#0 ← (byte) bitmap_line::yd#2 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [632] call bitmap_line_xdyi 
    // [677] phi from bitmap_line::@8 to bitmap_line_xdyi [phi:bitmap_line::@8->bitmap_line_xdyi]
    // [677] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#0 [phi:bitmap_line::@8->bitmap_line_xdyi#0] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#1] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#0 [phi:bitmap_line::@8->bitmap_line_xdyi#2] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#0 [phi:bitmap_line::@8->bitmap_line_xdyi#3] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#0 [phi:bitmap_line::@8->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
    // bitmap_line::@7
  __b7:
    // yd = y1-y0
    // [633] (byte) bitmap_line::yd#1 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda.z y1
    sec
    sbc.z y0
    tay
    // if(yd<xd)
    // [634] if((byte) bitmap_line::yd#1<(byte) bitmap_line::xd#2) goto bitmap_line::@9 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b9
    // bitmap_line::@10
    // bitmap_line_ydxd(y0, x0, y1, yd, xd)
    // [635] (byte) bitmap_line_ydxd::y#0 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxd.y
    // [636] (byte) bitmap_line_ydxd::x#0 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [637] (byte) bitmap_line_ydxd::y1#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y1
    // [638] (byte) bitmap_line_ydxd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [639] (byte) bitmap_line_ydxd::xd#0 ← (byte) bitmap_line::xd#2
    // [640] call bitmap_line_ydxd 
    // [729] phi from bitmap_line::@10 to bitmap_line_ydxd [phi:bitmap_line::@10->bitmap_line_ydxd]
    // [729] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#0 [phi:bitmap_line::@10->bitmap_line_ydxd#0] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#1] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#0 [phi:bitmap_line::@10->bitmap_line_ydxd#2] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#0 [phi:bitmap_line::@10->bitmap_line_ydxd#3] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#0 [phi:bitmap_line::@10->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
    // bitmap_line::@9
  __b9:
    // bitmap_line_xdyd(x1, y1, x0, xd, yd)
    // [641] (byte) bitmap_line_xdyd::x#0 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_xdyd.x
    // [642] (byte) bitmap_line_xdyd::y#0 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_xdyd.y
    // [643] (byte) bitmap_line_xdyd::x1#0 ← (byte) bitmap_line::x0#0
    // [644] (byte) bitmap_line_xdyd::xd#0 ← (byte) bitmap_line::xd#2
    // [645] (byte) bitmap_line_xdyd::yd#0 ← (byte) bitmap_line::yd#1 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [646] call bitmap_line_xdyd 
    // [714] phi from bitmap_line::@9 to bitmap_line_xdyd [phi:bitmap_line::@9->bitmap_line_xdyd]
    // [714] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#0 [phi:bitmap_line::@9->bitmap_line_xdyd#0] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#1] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#0 [phi:bitmap_line::@9->bitmap_line_xdyd#2] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#0 [phi:bitmap_line::@9->bitmap_line_xdyd#3] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#0 [phi:bitmap_line::@9->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
    // bitmap_line::@1
  __b1:
    // xd = x1-x0
    // [647] (byte) bitmap_line::xd#1 ← (byte) bitmap_line::x1#0 - (byte) bitmap_line::x0#0 -- vbuz1=vbuxx_minus_vbuz2 
    txa
    sec
    sbc.z x0
    sta.z xd
    // if(y0<y1)
    // [648] if((byte) bitmap_line::y0#0<(byte) bitmap_line::y1#0) goto bitmap_line::@11 -- vbuz1_lt_vbuz2_then_la1 
    lda.z y0
    cmp.z y1
    bcc __b11
    // bitmap_line::@5
    // yd = y0-y1
    // [649] (byte) bitmap_line::yd#10 ← (byte) bitmap_line::y0#0 - (byte) bitmap_line::y1#0 -- vbuyy=vbuz1_minus_vbuz2 
    sec
    sbc.z y1
    tay
    // if(yd<xd)
    // [650] if((byte) bitmap_line::yd#10<(byte) bitmap_line::xd#1) goto bitmap_line::@12 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b12
    // bitmap_line::@6
    // bitmap_line_ydxd(y1, x1, y0, yd, xd)
    // [651] (byte) bitmap_line_ydxd::y#1 ← (byte) bitmap_line::y1#0 -- vbuz1=vbuz2 
    lda.z y1
    sta.z bitmap_line_ydxd.y
    // [652] (byte) bitmap_line_ydxd::x#1 ← (byte) bitmap_line::x1#0
    // [653] (byte) bitmap_line_ydxd::y1#1 ← (byte) bitmap_line::y0#0
    // [654] (byte) bitmap_line_ydxd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxd.yd
    // [655] (byte) bitmap_line_ydxd::xd#1 ← (byte) bitmap_line::xd#1
    // [656] call bitmap_line_ydxd 
    // [729] phi from bitmap_line::@6 to bitmap_line_ydxd [phi:bitmap_line::@6->bitmap_line_ydxd]
    // [729] phi (byte) bitmap_line_ydxd::y1#6 = (byte) bitmap_line_ydxd::y1#1 [phi:bitmap_line::@6->bitmap_line_ydxd#0] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::yd#5 = (byte) bitmap_line_ydxd::yd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#1] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::y#7 = (byte) bitmap_line_ydxd::y#1 [phi:bitmap_line::@6->bitmap_line_ydxd#2] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::x#5 = (byte) bitmap_line_ydxd::x#1 [phi:bitmap_line::@6->bitmap_line_ydxd#3] -- register_copy 
    // [729] phi (byte) bitmap_line_ydxd::xd#2 = (byte) bitmap_line_ydxd::xd#1 [phi:bitmap_line::@6->bitmap_line_ydxd#4] -- register_copy 
    jsr bitmap_line_ydxd
    rts
    // bitmap_line::@12
  __b12:
    // bitmap_line_xdyd(x0, y0, x1, xd, yd)
    // [657] (byte) bitmap_line_xdyd::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyd.x
    // [658] (byte) bitmap_line_xdyd::y#1 ← (byte) bitmap_line::y0#0
    // [659] (byte) bitmap_line_xdyd::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_xdyd.x1
    // [660] (byte) bitmap_line_xdyd::xd#1 ← (byte) bitmap_line::xd#1
    // [661] (byte) bitmap_line_xdyd::yd#1 ← (byte) bitmap_line::yd#10 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyd.yd
    // [662] call bitmap_line_xdyd 
    // [714] phi from bitmap_line::@12 to bitmap_line_xdyd [phi:bitmap_line::@12->bitmap_line_xdyd]
    // [714] phi (byte) bitmap_line_xdyd::x1#6 = (byte) bitmap_line_xdyd::x1#1 [phi:bitmap_line::@12->bitmap_line_xdyd#0] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::xd#5 = (byte) bitmap_line_xdyd::xd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#1] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::y#5 = (byte) bitmap_line_xdyd::y#1 [phi:bitmap_line::@12->bitmap_line_xdyd#2] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::x#6 = (byte) bitmap_line_xdyd::x#1 [phi:bitmap_line::@12->bitmap_line_xdyd#3] -- register_copy 
    // [714] phi (byte) bitmap_line_xdyd::yd#2 = (byte) bitmap_line_xdyd::yd#1 [phi:bitmap_line::@12->bitmap_line_xdyd#4] -- register_copy 
    jsr bitmap_line_xdyd
    rts
    // bitmap_line::@11
  __b11:
    // yd = y1-y0
    // [663] (byte) bitmap_line::yd#11 ← (byte) bitmap_line::y1#0 - (byte) bitmap_line::y0#0 -- vbuyy=vbuz1_minus_vbuz2 
    lda.z y1
    sec
    sbc.z y0
    tay
    // if(yd<xd)
    // [664] if((byte) bitmap_line::yd#11<(byte) bitmap_line::xd#1) goto bitmap_line::@13 -- vbuyy_lt_vbuz1_then_la1 
    cpy.z xd
    bcc __b13
    // bitmap_line::@14
    // bitmap_line_ydxi(y0, x0, y1, yd, xd)
    // [665] (byte) bitmap_line_ydxi::y#1 ← (byte) bitmap_line::y0#0 -- vbuz1=vbuz2 
    lda.z y0
    sta.z bitmap_line_ydxi.y
    // [666] (byte) bitmap_line_ydxi::x#1 ← (byte) bitmap_line::x0#0 -- vbuxx=vbuz1 
    ldx.z x0
    // [667] (byte) bitmap_line_ydxi::y1#1 ← (byte) bitmap_line::y1#0
    // [668] (byte) bitmap_line_ydxi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_ydxi.yd
    // [669] (byte) bitmap_line_ydxi::xd#1 ← (byte) bitmap_line::xd#1
    // [670] call bitmap_line_ydxi 
    // [699] phi from bitmap_line::@14 to bitmap_line_ydxi [phi:bitmap_line::@14->bitmap_line_ydxi]
    // [699] phi (byte) bitmap_line_ydxi::y1#6 = (byte) bitmap_line_ydxi::y1#1 [phi:bitmap_line::@14->bitmap_line_ydxi#0] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::yd#5 = (byte) bitmap_line_ydxi::yd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#1] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::y#6 = (byte) bitmap_line_ydxi::y#1 [phi:bitmap_line::@14->bitmap_line_ydxi#2] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::x#5 = (byte) bitmap_line_ydxi::x#1 [phi:bitmap_line::@14->bitmap_line_ydxi#3] -- register_copy 
    // [699] phi (byte) bitmap_line_ydxi::xd#2 = (byte) bitmap_line_ydxi::xd#1 [phi:bitmap_line::@14->bitmap_line_ydxi#4] -- register_copy 
    jsr bitmap_line_ydxi
    rts
    // bitmap_line::@13
  __b13:
    // bitmap_line_xdyi(x0, y0, x1, xd, yd)
    // [671] (byte) bitmap_line_xdyi::x#1 ← (byte) bitmap_line::x0#0 -- vbuz1=vbuz2 
    lda.z x0
    sta.z bitmap_line_xdyi.x
    // [672] (byte) bitmap_line_xdyi::y#1 ← (byte) bitmap_line::y0#0
    // [673] (byte) bitmap_line_xdyi::x1#1 ← (byte) bitmap_line::x1#0 -- vbuz1=vbuxx 
    stx.z bitmap_line_xdyi.x1
    // [674] (byte) bitmap_line_xdyi::xd#1 ← (byte) bitmap_line::xd#1
    // [675] (byte) bitmap_line_xdyi::yd#1 ← (byte) bitmap_line::yd#11 -- vbuz1=vbuyy 
    sty.z bitmap_line_xdyi.yd
    // [676] call bitmap_line_xdyi 
    // [677] phi from bitmap_line::@13 to bitmap_line_xdyi [phi:bitmap_line::@13->bitmap_line_xdyi]
    // [677] phi (byte) bitmap_line_xdyi::x1#6 = (byte) bitmap_line_xdyi::x1#1 [phi:bitmap_line::@13->bitmap_line_xdyi#0] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::xd#5 = (byte) bitmap_line_xdyi::xd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#1] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::y#5 = (byte) bitmap_line_xdyi::y#1 [phi:bitmap_line::@13->bitmap_line_xdyi#2] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::x#6 = (byte) bitmap_line_xdyi::x#1 [phi:bitmap_line::@13->bitmap_line_xdyi#3] -- register_copy 
    // [677] phi (byte) bitmap_line_xdyi::yd#2 = (byte) bitmap_line_xdyi::yd#1 [phi:bitmap_line::@13->bitmap_line_xdyi#4] -- register_copy 
    jsr bitmap_line_xdyi
    rts
}
  // bitmap_line_xdyi
// bitmap_line_xdyi(byte zeropage($a) x, byte zeropage($d) y, byte zeropage(9) x1, byte zeropage($1f) xd, byte zeropage($10) yd)
bitmap_line_xdyi: {
    .label x = $a
    .label y = $d
    .label x1 = 9
    .label xd = $1f
    .label yd = $10
    .label e = $11
    // e = yd>>1
    // [678] (byte) bitmap_line_xdyi::e#0 ← (byte) bitmap_line_xdyi::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [679] phi from bitmap_line_xdyi bitmap_line_xdyi::@2 to bitmap_line_xdyi::@1 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1]
    // [679] phi (byte) bitmap_line_xdyi::e#3 = (byte) bitmap_line_xdyi::e#0 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#0] -- register_copy 
    // [679] phi (byte) bitmap_line_xdyi::y#3 = (byte) bitmap_line_xdyi::y#5 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#1] -- register_copy 
    // [679] phi (byte) bitmap_line_xdyi::x#3 = (byte) bitmap_line_xdyi::x#6 [phi:bitmap_line_xdyi/bitmap_line_xdyi::@2->bitmap_line_xdyi::@1#2] -- register_copy 
    // bitmap_line_xdyi::@1
  __b1:
    // bitmap_plot(x,y)
    // [680] (byte) bitmap_plot::x#0 ← (byte) bitmap_line_xdyi::x#3 -- vbuxx=vbuz1 
    ldx.z x
    // [681] (byte) bitmap_plot::y#0 ← (byte) bitmap_line_xdyi::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [682] call bitmap_plot 
    // [692] phi from bitmap_line_xdyi::@1 to bitmap_plot [phi:bitmap_line_xdyi::@1->bitmap_plot]
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#0 [phi:bitmap_line_xdyi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_xdyi::@4
    // x++;
    // [683] (byte) bitmap_line_xdyi::x#2 ← ++ (byte) bitmap_line_xdyi::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // e = e+yd
    // [684] (byte) bitmap_line_xdyi::e#1 ← (byte) bitmap_line_xdyi::e#3 + (byte) bitmap_line_xdyi::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // if(xd<e)
    // [685] if((byte) bitmap_line_xdyi::xd#5>=(byte) bitmap_line_xdyi::e#1) goto bitmap_line_xdyi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2
    // bitmap_line_xdyi::@3
    // y++;
    // [686] (byte) bitmap_line_xdyi::y#2 ← ++ (byte) bitmap_line_xdyi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e - xd
    // [687] (byte) bitmap_line_xdyi::e#2 ← (byte) bitmap_line_xdyi::e#1 - (byte) bitmap_line_xdyi::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [688] phi from bitmap_line_xdyi::@3 bitmap_line_xdyi::@4 to bitmap_line_xdyi::@2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2]
    // [688] phi (byte) bitmap_line_xdyi::e#6 = (byte) bitmap_line_xdyi::e#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#0] -- register_copy 
    // [688] phi (byte) bitmap_line_xdyi::y#6 = (byte) bitmap_line_xdyi::y#2 [phi:bitmap_line_xdyi::@3/bitmap_line_xdyi::@4->bitmap_line_xdyi::@2#1] -- register_copy 
    // bitmap_line_xdyi::@2
  __b2:
    // x1+1
    // [689] (byte~) bitmap_line_xdyi::$6 ← (byte) bitmap_line_xdyi::x1#6 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x1
    inx
    // while (x!=(x1+1))
    // [690] if((byte) bitmap_line_xdyi::x#2!=(byte~) bitmap_line_xdyi::$6) goto bitmap_line_xdyi::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z x
    bne __b1
    // bitmap_line_xdyi::@return
    // }
    // [691] return 
    rts
}
  // bitmap_plot
// bitmap_plot(byte register(X) x, byte register(Y) y)
bitmap_plot: {
    .label plotter_x = $1a
    .label plotter_y = $1c
    .label plotter = $1a
    // plotter_x = { bitmap_plot_xhi[x], bitmap_plot_xlo[x] }
    // [693] (word) bitmap_plot::plotter_x#0 ← *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_plot::x#4) w= *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_plot::x#4) -- vwuz1=pbuc1_derefidx_vbuxx_word_pbuc2_derefidx_vbuxx 
    lda bitmap_plot_xhi,x
    sta.z plotter_x+1
    lda bitmap_plot_xlo,x
    sta.z plotter_x
    // plotter_y = { bitmap_plot_yhi[y], bitmap_plot_ylo[y] }
    // [694] (word) bitmap_plot::plotter_y#0 ← *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_plot::y#4) w= *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_plot::y#4) -- vwuz1=pbuc1_derefidx_vbuyy_word_pbuc2_derefidx_vbuyy 
    lda bitmap_plot_yhi,y
    sta.z plotter_y+1
    lda bitmap_plot_ylo,y
    sta.z plotter_y
    // plotter_x+plotter_y
    // [695] (word) bitmap_plot::plotter#0 ← (word) bitmap_plot::plotter_x#0 + (word) bitmap_plot::plotter_y#0 -- vwuz1=vwuz1_plus_vwuz2 
    lda.z plotter
    clc
    adc.z plotter_y
    sta.z plotter
    lda.z plotter+1
    adc.z plotter_y+1
    sta.z plotter+1
    // *plotter | bitmap_plot_bit[x]
    // [696] (byte~) bitmap_plot::$1 ← *((byte*)(word) bitmap_plot::plotter#0) | *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_plot::x#4) -- vbuaa=_deref_pbuz1_bor_pbuc1_derefidx_vbuxx 
    lda bitmap_plot_bit,x
    ldy #0
    ora (plotter),y
    // *plotter = *plotter | bitmap_plot_bit[x]
    // [697] *((byte*)(word) bitmap_plot::plotter#0) ← (byte~) bitmap_plot::$1 -- _deref_pbuz1=vbuaa 
    sta (plotter),y
    // bitmap_plot::@return
    // }
    // [698] return 
    rts
}
  // bitmap_line_ydxi
// bitmap_line_ydxi(byte zeropage($a) y, byte register(X) x, byte zeropage($11) y1, byte zeropage(9) yd, byte zeropage($1f) xd)
bitmap_line_ydxi: {
    .label y = $a
    .label y1 = $11
    .label yd = 9
    .label xd = $1f
    .label e = $d
    // e = xd>>1
    // [700] (byte) bitmap_line_ydxi::e#0 ← (byte) bitmap_line_ydxi::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [701] phi from bitmap_line_ydxi bitmap_line_ydxi::@2 to bitmap_line_ydxi::@1 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1]
    // [701] phi (byte) bitmap_line_ydxi::e#3 = (byte) bitmap_line_ydxi::e#0 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#0] -- register_copy 
    // [701] phi (byte) bitmap_line_ydxi::y#3 = (byte) bitmap_line_ydxi::y#6 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#1] -- register_copy 
    // [701] phi (byte) bitmap_line_ydxi::x#3 = (byte) bitmap_line_ydxi::x#5 [phi:bitmap_line_ydxi/bitmap_line_ydxi::@2->bitmap_line_ydxi::@1#2] -- register_copy 
    // bitmap_line_ydxi::@1
  __b1:
    // bitmap_plot(x,y)
    // [702] (byte) bitmap_plot::x#2 ← (byte) bitmap_line_ydxi::x#3
    // [703] (byte) bitmap_plot::y#2 ← (byte) bitmap_line_ydxi::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [704] call bitmap_plot 
    // [692] phi from bitmap_line_ydxi::@1 to bitmap_plot [phi:bitmap_line_ydxi::@1->bitmap_plot]
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#2 [phi:bitmap_line_ydxi::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_ydxi::@4
    // y++;
    // [705] (byte) bitmap_line_ydxi::y#2 ← ++ (byte) bitmap_line_ydxi::y#3 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e+xd
    // [706] (byte) bitmap_line_ydxi::e#1 ← (byte) bitmap_line_ydxi::e#3 + (byte) bitmap_line_ydxi::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // if(yd<e)
    // [707] if((byte) bitmap_line_ydxi::yd#5>=(byte) bitmap_line_ydxi::e#1) goto bitmap_line_ydxi::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2
    // bitmap_line_ydxi::@3
    // x++;
    // [708] (byte) bitmap_line_ydxi::x#2 ← ++ (byte) bitmap_line_ydxi::x#3 -- vbuxx=_inc_vbuxx 
    inx
    // e = e - yd
    // [709] (byte) bitmap_line_ydxi::e#2 ← (byte) bitmap_line_ydxi::e#1 - (byte) bitmap_line_ydxi::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [710] phi from bitmap_line_ydxi::@3 bitmap_line_ydxi::@4 to bitmap_line_ydxi::@2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2]
    // [710] phi (byte) bitmap_line_ydxi::e#6 = (byte) bitmap_line_ydxi::e#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#0] -- register_copy 
    // [710] phi (byte) bitmap_line_ydxi::x#6 = (byte) bitmap_line_ydxi::x#2 [phi:bitmap_line_ydxi::@3/bitmap_line_ydxi::@4->bitmap_line_ydxi::@2#1] -- register_copy 
    // bitmap_line_ydxi::@2
  __b2:
    // y1+1
    // [711] (byte~) bitmap_line_ydxi::$6 ← (byte) bitmap_line_ydxi::y1#6 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z y1
    clc
    adc #1
    // while (y!=(y1+1))
    // [712] if((byte) bitmap_line_ydxi::y#2!=(byte~) bitmap_line_ydxi::$6) goto bitmap_line_ydxi::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z y
    bne __b1
    // bitmap_line_ydxi::@return
    // }
    // [713] return 
    rts
}
  // bitmap_line_xdyd
// bitmap_line_xdyd(byte zeropage($10) x, byte zeropage($d) y, byte zeropage(9) x1, byte zeropage($1f) xd, byte zeropage($a) yd)
bitmap_line_xdyd: {
    .label x = $10
    .label y = $d
    .label x1 = 9
    .label xd = $1f
    .label yd = $a
    .label e = $11
    // e = yd>>1
    // [715] (byte) bitmap_line_xdyd::e#0 ← (byte) bitmap_line_xdyd::yd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z yd
    lsr
    sta.z e
    // [716] phi from bitmap_line_xdyd bitmap_line_xdyd::@2 to bitmap_line_xdyd::@1 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1]
    // [716] phi (byte) bitmap_line_xdyd::e#3 = (byte) bitmap_line_xdyd::e#0 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#0] -- register_copy 
    // [716] phi (byte) bitmap_line_xdyd::y#3 = (byte) bitmap_line_xdyd::y#5 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#1] -- register_copy 
    // [716] phi (byte) bitmap_line_xdyd::x#3 = (byte) bitmap_line_xdyd::x#6 [phi:bitmap_line_xdyd/bitmap_line_xdyd::@2->bitmap_line_xdyd::@1#2] -- register_copy 
    // bitmap_line_xdyd::@1
  __b1:
    // bitmap_plot(x,y)
    // [717] (byte) bitmap_plot::x#1 ← (byte) bitmap_line_xdyd::x#3 -- vbuxx=vbuz1 
    ldx.z x
    // [718] (byte) bitmap_plot::y#1 ← (byte) bitmap_line_xdyd::y#3 -- vbuyy=vbuz1 
    ldy.z y
    // [719] call bitmap_plot 
    // [692] phi from bitmap_line_xdyd::@1 to bitmap_plot [phi:bitmap_line_xdyd::@1->bitmap_plot]
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#1 [phi:bitmap_line_xdyd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_xdyd::@4
    // x++;
    // [720] (byte) bitmap_line_xdyd::x#2 ← ++ (byte) bitmap_line_xdyd::x#3 -- vbuz1=_inc_vbuz1 
    inc.z x
    // e = e+yd
    // [721] (byte) bitmap_line_xdyd::e#1 ← (byte) bitmap_line_xdyd::e#3 + (byte) bitmap_line_xdyd::yd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z yd
    sta.z e
    // if(xd<e)
    // [722] if((byte) bitmap_line_xdyd::xd#5>=(byte) bitmap_line_xdyd::e#1) goto bitmap_line_xdyd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z xd
    cmp.z e
    bcs __b2
    // bitmap_line_xdyd::@3
    // y--;
    // [723] (byte) bitmap_line_xdyd::y#2 ← -- (byte) bitmap_line_xdyd::y#3 -- vbuz1=_dec_vbuz1 
    dec.z y
    // e = e - xd
    // [724] (byte) bitmap_line_xdyd::e#2 ← (byte) bitmap_line_xdyd::e#1 - (byte) bitmap_line_xdyd::xd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z xd
    sta.z e
    // [725] phi from bitmap_line_xdyd::@3 bitmap_line_xdyd::@4 to bitmap_line_xdyd::@2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2]
    // [725] phi (byte) bitmap_line_xdyd::e#6 = (byte) bitmap_line_xdyd::e#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#0] -- register_copy 
    // [725] phi (byte) bitmap_line_xdyd::y#6 = (byte) bitmap_line_xdyd::y#2 [phi:bitmap_line_xdyd::@3/bitmap_line_xdyd::@4->bitmap_line_xdyd::@2#1] -- register_copy 
    // bitmap_line_xdyd::@2
  __b2:
    // x1+1
    // [726] (byte~) bitmap_line_xdyd::$6 ← (byte) bitmap_line_xdyd::x1#6 + (byte) 1 -- vbuxx=vbuz1_plus_1 
    ldx.z x1
    inx
    // while (x!=(x1+1))
    // [727] if((byte) bitmap_line_xdyd::x#2!=(byte~) bitmap_line_xdyd::$6) goto bitmap_line_xdyd::@1 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z x
    bne __b1
    // bitmap_line_xdyd::@return
    // }
    // [728] return 
    rts
}
  // bitmap_line_ydxd
// bitmap_line_ydxd(byte zeropage($10) y, byte register(X) x, byte zeropage($d) y1, byte zeropage($a) yd, byte zeropage($1f) xd)
bitmap_line_ydxd: {
    .label y = $10
    .label y1 = $d
    .label yd = $a
    .label xd = $1f
    .label e = $11
    // e = xd>>1
    // [730] (byte) bitmap_line_ydxd::e#0 ← (byte) bitmap_line_ydxd::xd#2 >> (byte) 1 -- vbuz1=vbuz2_ror_1 
    lda.z xd
    lsr
    sta.z e
    // [731] phi from bitmap_line_ydxd bitmap_line_ydxd::@2 to bitmap_line_ydxd::@1 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1]
    // [731] phi (byte) bitmap_line_ydxd::e#3 = (byte) bitmap_line_ydxd::e#0 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#0] -- register_copy 
    // [731] phi (byte) bitmap_line_ydxd::y#2 = (byte) bitmap_line_ydxd::y#7 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#1] -- register_copy 
    // [731] phi (byte) bitmap_line_ydxd::x#3 = (byte) bitmap_line_ydxd::x#5 [phi:bitmap_line_ydxd/bitmap_line_ydxd::@2->bitmap_line_ydxd::@1#2] -- register_copy 
    // bitmap_line_ydxd::@1
  __b1:
    // bitmap_plot(x,y)
    // [732] (byte) bitmap_plot::x#3 ← (byte) bitmap_line_ydxd::x#3
    // [733] (byte) bitmap_plot::y#3 ← (byte) bitmap_line_ydxd::y#2 -- vbuyy=vbuz1 
    ldy.z y
    // [734] call bitmap_plot 
    // [692] phi from bitmap_line_ydxd::@1 to bitmap_plot [phi:bitmap_line_ydxd::@1->bitmap_plot]
    // [692] phi (byte) bitmap_plot::y#4 = (byte) bitmap_plot::y#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#0] -- register_copy 
    // [692] phi (byte) bitmap_plot::x#4 = (byte) bitmap_plot::x#3 [phi:bitmap_line_ydxd::@1->bitmap_plot#1] -- register_copy 
    jsr bitmap_plot
    // bitmap_line_ydxd::@4
    // y = y++;
    // [735] (byte) bitmap_line_ydxd::y#3 ← ++ (byte) bitmap_line_ydxd::y#2 -- vbuz1=_inc_vbuz1 
    inc.z y
    // e = e+xd
    // [736] (byte) bitmap_line_ydxd::e#1 ← (byte) bitmap_line_ydxd::e#3 + (byte) bitmap_line_ydxd::xd#2 -- vbuz1=vbuz1_plus_vbuz2 
    lda.z e
    clc
    adc.z xd
    sta.z e
    // if(yd<e)
    // [737] if((byte) bitmap_line_ydxd::yd#5>=(byte) bitmap_line_ydxd::e#1) goto bitmap_line_ydxd::@2 -- vbuz1_ge_vbuz2_then_la1 
    lda.z yd
    cmp.z e
    bcs __b2
    // bitmap_line_ydxd::@3
    // x--;
    // [738] (byte) bitmap_line_ydxd::x#2 ← -- (byte) bitmap_line_ydxd::x#3 -- vbuxx=_dec_vbuxx 
    dex
    // e = e - yd
    // [739] (byte) bitmap_line_ydxd::e#2 ← (byte) bitmap_line_ydxd::e#1 - (byte) bitmap_line_ydxd::yd#5 -- vbuz1=vbuz1_minus_vbuz2 
    lda.z e
    sec
    sbc.z yd
    sta.z e
    // [740] phi from bitmap_line_ydxd::@3 bitmap_line_ydxd::@4 to bitmap_line_ydxd::@2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2]
    // [740] phi (byte) bitmap_line_ydxd::e#6 = (byte) bitmap_line_ydxd::e#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#0] -- register_copy 
    // [740] phi (byte) bitmap_line_ydxd::x#6 = (byte) bitmap_line_ydxd::x#2 [phi:bitmap_line_ydxd::@3/bitmap_line_ydxd::@4->bitmap_line_ydxd::@2#1] -- register_copy 
    // bitmap_line_ydxd::@2
  __b2:
    // y1+1
    // [741] (byte~) bitmap_line_ydxd::$6 ← (byte) bitmap_line_ydxd::y1#6 + (byte) 1 -- vbuaa=vbuz1_plus_1 
    lda.z y1
    clc
    adc #1
    // while (y!=(y1+1))
    // [742] if((byte) bitmap_line_ydxd::y#3!=(byte~) bitmap_line_ydxd::$6) goto bitmap_line_ydxd::@1 -- vbuz1_neq_vbuaa_then_la1 
    cmp.z y
    bne __b1
    // bitmap_line_ydxd::@return
    // }
    // [743] return 
    rts
}
  // bitmap_clear
// Clear all graphics on the bitmap
bitmap_clear: {
    .label bitmap = $e
    .label y = $1f
    // (byte*) { bitmap_plot_xhi[0], bitmap_plot_xlo[0] }
    // [744] (word) bitmap_clear::bitmap#0 ← *((const byte[$100]) bitmap_plot_xhi) w= *((const byte[$100]) bitmap_plot_xlo) -- vwuz1=_deref_pbuc1_word__deref_pbuc2 
    lda bitmap_plot_xlo
    sta.z bitmap
    lda bitmap_plot_xhi
    sta.z bitmap+1
    // [745] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word) bitmap_clear::bitmap#0
    // [746] phi from bitmap_clear to bitmap_clear::@1 [phi:bitmap_clear->bitmap_clear::@1]
    // [746] phi (byte) bitmap_clear::y#4 = (byte) 0 [phi:bitmap_clear->bitmap_clear::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z y
    // [746] phi (byte*) bitmap_clear::bitmap#3 = (byte*~) bitmap_clear::bitmap#5 [phi:bitmap_clear->bitmap_clear::@1#1] -- register_copy 
    // [746] phi from bitmap_clear::@3 to bitmap_clear::@1 [phi:bitmap_clear::@3->bitmap_clear::@1]
    // [746] phi (byte) bitmap_clear::y#4 = (byte) bitmap_clear::y#1 [phi:bitmap_clear::@3->bitmap_clear::@1#0] -- register_copy 
    // [746] phi (byte*) bitmap_clear::bitmap#3 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@3->bitmap_clear::@1#1] -- register_copy 
    // bitmap_clear::@1
  __b1:
    // [747] phi from bitmap_clear::@1 to bitmap_clear::@2 [phi:bitmap_clear::@1->bitmap_clear::@2]
    // [747] phi (byte) bitmap_clear::x#2 = (byte) 0 [phi:bitmap_clear::@1->bitmap_clear::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [747] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#3 [phi:bitmap_clear::@1->bitmap_clear::@2#1] -- register_copy 
    // [747] phi from bitmap_clear::@2 to bitmap_clear::@2 [phi:bitmap_clear::@2->bitmap_clear::@2]
    // [747] phi (byte) bitmap_clear::x#2 = (byte) bitmap_clear::x#1 [phi:bitmap_clear::@2->bitmap_clear::@2#0] -- register_copy 
    // [747] phi (byte*) bitmap_clear::bitmap#2 = (byte*) bitmap_clear::bitmap#1 [phi:bitmap_clear::@2->bitmap_clear::@2#1] -- register_copy 
    // bitmap_clear::@2
  __b2:
    // *bitmap++ = 0
    // [748] *((byte*) bitmap_clear::bitmap#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (bitmap),y
    // *bitmap++ = 0;
    // [749] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2 -- pbuz1=_inc_pbuz1 
    inc.z bitmap
    bne !+
    inc.z bitmap+1
  !:
    // for( byte x: 0..199 )
    // [750] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [751] if((byte) bitmap_clear::x#1!=(byte) $c8) goto bitmap_clear::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$c8
    bne __b2
    // bitmap_clear::@3
    // for( byte y: 0..39 )
    // [752] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4 -- vbuz1=_inc_vbuz1 
    inc.z y
    // [753] if((byte) bitmap_clear::y#1!=(byte) $28) goto bitmap_clear::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$28
    cmp.z y
    bne __b1
    // bitmap_clear::@return
    // }
    // [754] return 
    rts
}
  // bitmap_init
// Initialize the bitmap plotter tables for a specific bitmap
bitmap_init: {
    .label __10 = $1f
    .label yoffs = $b
    // [756] phi from bitmap_init to bitmap_init::@1 [phi:bitmap_init->bitmap_init::@1]
    // [756] phi (byte) bitmap_init::bits#3 = (byte) $80 [phi:bitmap_init->bitmap_init::@1#0] -- vbuyy=vbuc1 
    ldy #$80
    // [756] phi (byte) bitmap_init::x#2 = (byte) 0 [phi:bitmap_init->bitmap_init::@1#1] -- vbuxx=vbuc1 
    ldx #0
    // [756] phi from bitmap_init::@2 to bitmap_init::@1 [phi:bitmap_init::@2->bitmap_init::@1]
    // [756] phi (byte) bitmap_init::bits#3 = (byte) bitmap_init::bits#4 [phi:bitmap_init::@2->bitmap_init::@1#0] -- register_copy 
    // [756] phi (byte) bitmap_init::x#2 = (byte) bitmap_init::x#1 [phi:bitmap_init::@2->bitmap_init::@1#1] -- register_copy 
    // bitmap_init::@1
  __b1:
    // x&$f8
    // [757] (byte~) bitmap_init::$0 ← (byte) bitmap_init::x#2 & (byte) $f8 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f8
    // bitmap_plot_xlo[x] = x&$f8
    // [758] *((const byte[$100]) bitmap_plot_xlo + (byte) bitmap_init::x#2) ← (byte~) bitmap_init::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_xlo,x
    // bitmap_plot_xhi[x] = >bitmap
    // [759] *((const byte[$100]) bitmap_plot_xhi + (byte) bitmap_init::x#2) ← >(const byte*) VIC_BITMAP -- pbuc1_derefidx_vbuxx=vbuc2 
    lda #>VIC_BITMAP
    sta bitmap_plot_xhi,x
    // bitmap_plot_bit[x] = bits
    // [760] *((const byte[$100]) bitmap_plot_bit + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3 -- pbuc1_derefidx_vbuxx=vbuyy 
    tya
    sta bitmap_plot_bit,x
    // bits = bits>>1
    // [761] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte) 1 -- vbuyy=vbuyy_ror_1 
    tya
    lsr
    tay
    // if(bits==0)
    // [762] if((byte) bitmap_init::bits#1!=(byte) 0) goto bitmap_init::@6 -- vbuyy_neq_0_then_la1 
    cpy #0
    bne __b2
    // [764] phi from bitmap_init::@1 to bitmap_init::@2 [phi:bitmap_init::@1->bitmap_init::@2]
    // [764] phi (byte) bitmap_init::bits#4 = (byte) $80 [phi:bitmap_init::@1->bitmap_init::@2#0] -- vbuyy=vbuc1 
    ldy #$80
    // [763] phi from bitmap_init::@1 to bitmap_init::@6 [phi:bitmap_init::@1->bitmap_init::@6]
    // bitmap_init::@6
    // [764] phi from bitmap_init::@6 to bitmap_init::@2 [phi:bitmap_init::@6->bitmap_init::@2]
    // [764] phi (byte) bitmap_init::bits#4 = (byte) bitmap_init::bits#1 [phi:bitmap_init::@6->bitmap_init::@2#0] -- register_copy 
    // bitmap_init::@2
  __b2:
    // for(byte x : 0..255)
    // [765] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2 -- vbuxx=_inc_vbuxx 
    inx
    // [766] if((byte) bitmap_init::x#1!=(byte) 0) goto bitmap_init::@1 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b1
    // [767] phi from bitmap_init::@2 to bitmap_init::@3 [phi:bitmap_init::@2->bitmap_init::@3]
    // [767] phi (byte*) bitmap_init::yoffs#2 = (byte*) 0 [phi:bitmap_init::@2->bitmap_init::@3#0] -- pbuz1=pbuc1 
    lda #<0
    sta.z yoffs
    sta.z yoffs+1
    // [767] phi (byte) bitmap_init::y#2 = (byte) 0 [phi:bitmap_init::@2->bitmap_init::@3#1] -- vbuxx=vbuc1 
    tax
    // [767] phi from bitmap_init::@4 to bitmap_init::@3 [phi:bitmap_init::@4->bitmap_init::@3]
    // [767] phi (byte*) bitmap_init::yoffs#2 = (byte*) bitmap_init::yoffs#4 [phi:bitmap_init::@4->bitmap_init::@3#0] -- register_copy 
    // [767] phi (byte) bitmap_init::y#2 = (byte) bitmap_init::y#1 [phi:bitmap_init::@4->bitmap_init::@3#1] -- register_copy 
    // bitmap_init::@3
  __b3:
    // y&$7
    // [768] (byte~) bitmap_init::$10 ← (byte) bitmap_init::y#2 & (byte) 7 -- vbuz1=vbuxx_band_vbuc1 
    lda #7
    sax.z __10
    // <yoffs
    // [769] (byte~) bitmap_init::$7 ← < (byte*) bitmap_init::yoffs#2 -- vbuaa=_lo_pbuz1 
    lda.z yoffs
    // y&$7 | <yoffs
    // [770] (byte~) bitmap_init::$8 ← (byte~) bitmap_init::$10 | (byte~) bitmap_init::$7 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __10
    // bitmap_plot_ylo[y] = y&$7 | <yoffs
    // [771] *((const byte[$100]) bitmap_plot_ylo + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$8 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_ylo,x
    // >yoffs
    // [772] (byte~) bitmap_init::$9 ← > (byte*) bitmap_init::yoffs#2 -- vbuaa=_hi_pbuz1 
    lda.z yoffs+1
    // bitmap_plot_yhi[y] = >yoffs
    // [773] *((const byte[$100]) bitmap_plot_yhi + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$9 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta bitmap_plot_yhi,x
    // if((y&$7)==7)
    // [774] if((byte~) bitmap_init::$10!=(byte) 7) goto bitmap_init::@4 -- vbuz1_neq_vbuc1_then_la1 
    lda #7
    cmp.z __10
    bne __b4
    // bitmap_init::@5
    // yoffs = yoffs + 40*8
    // [775] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (word)(number) $28*(number) 8 -- pbuz1=pbuz1_plus_vwuc1 
    clc
    lda.z yoffs
    adc #<$28*8
    sta.z yoffs
    lda.z yoffs+1
    adc #>$28*8
    sta.z yoffs+1
    // [776] phi from bitmap_init::@3 bitmap_init::@5 to bitmap_init::@4 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4]
    // [776] phi (byte*) bitmap_init::yoffs#4 = (byte*) bitmap_init::yoffs#2 [phi:bitmap_init::@3/bitmap_init::@5->bitmap_init::@4#0] -- register_copy 
    // bitmap_init::@4
  __b4:
    // for(byte y : 0..255)
    // [777] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2 -- vbuxx=_inc_vbuxx 
    inx
    // [778] if((byte) bitmap_init::y#1!=(byte) 0) goto bitmap_init::@3 -- vbuxx_neq_0_then_la1 
    cpx #0
    bne __b3
    // bitmap_init::@return
    // }
    // [779] return 
    rts
}
  // gfx_init_charset
gfx_init_charset: {
    .label charset = $e
    .label chargen = $b
    .label c = $d
    // *PROCPORT = $32
    // [780] *((const byte*) PROCPORT) ← (byte) $32 -- _deref_pbuc1=vbuc2 
    lda #$32
    sta PROCPORT
    // [781] phi from gfx_init_charset to gfx_init_charset::@1 [phi:gfx_init_charset->gfx_init_charset::@1]
    // [781] phi (byte) gfx_init_charset::c#4 = (byte) 0 [phi:gfx_init_charset->gfx_init_charset::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z c
    // [781] phi (byte*) gfx_init_charset::charset#3 = (const byte*) VIC_CHARSET_ROM [phi:gfx_init_charset->gfx_init_charset::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_CHARSET_ROM
    sta.z charset
    lda #>VIC_CHARSET_ROM
    sta.z charset+1
    // [781] phi (byte*) gfx_init_charset::chargen#3 = (const byte*) CHARGEN [phi:gfx_init_charset->gfx_init_charset::@1#2] -- pbuz1=pbuc1 
    lda #<CHARGEN
    sta.z chargen
    lda #>CHARGEN
    sta.z chargen+1
    // [781] phi from gfx_init_charset::@3 to gfx_init_charset::@1 [phi:gfx_init_charset::@3->gfx_init_charset::@1]
    // [781] phi (byte) gfx_init_charset::c#4 = (byte) gfx_init_charset::c#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#0] -- register_copy 
    // [781] phi (byte*) gfx_init_charset::charset#3 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#1] -- register_copy 
    // [781] phi (byte*) gfx_init_charset::chargen#3 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@3->gfx_init_charset::@1#2] -- register_copy 
    // gfx_init_charset::@1
  __b1:
    // [782] phi from gfx_init_charset::@1 to gfx_init_charset::@2 [phi:gfx_init_charset::@1->gfx_init_charset::@2]
    // [782] phi (byte) gfx_init_charset::l#2 = (byte) 0 [phi:gfx_init_charset::@1->gfx_init_charset::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [782] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#1] -- register_copy 
    // [782] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#3 [phi:gfx_init_charset::@1->gfx_init_charset::@2#2] -- register_copy 
    // [782] phi from gfx_init_charset::@2 to gfx_init_charset::@2 [phi:gfx_init_charset::@2->gfx_init_charset::@2]
    // [782] phi (byte) gfx_init_charset::l#2 = (byte) gfx_init_charset::l#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#0] -- register_copy 
    // [782] phi (byte*) gfx_init_charset::charset#2 = (byte*) gfx_init_charset::charset#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#1] -- register_copy 
    // [782] phi (byte*) gfx_init_charset::chargen#2 = (byte*) gfx_init_charset::chargen#1 [phi:gfx_init_charset::@2->gfx_init_charset::@2#2] -- register_copy 
    // gfx_init_charset::@2
  __b2:
    // *charset++ = *chargen++
    // [783] *((byte*) gfx_init_charset::charset#2) ← *((byte*) gfx_init_charset::chargen#2) -- _deref_pbuz1=_deref_pbuz2 
    ldy #0
    lda (chargen),y
    sta (charset),y
    // *charset++ = *chargen++;
    // [784] (byte*) gfx_init_charset::charset#1 ← ++ (byte*) gfx_init_charset::charset#2 -- pbuz1=_inc_pbuz1 
    inc.z charset
    bne !+
    inc.z charset+1
  !:
    // [785] (byte*) gfx_init_charset::chargen#1 ← ++ (byte*) gfx_init_charset::chargen#2 -- pbuz1=_inc_pbuz1 
    inc.z chargen
    bne !+
    inc.z chargen+1
  !:
    // for( byte l: 0..7)
    // [786] (byte) gfx_init_charset::l#1 ← ++ (byte) gfx_init_charset::l#2 -- vbuxx=_inc_vbuxx 
    inx
    // [787] if((byte) gfx_init_charset::l#1!=(byte) 8) goto gfx_init_charset::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2
    // gfx_init_charset::@3
    // for(byte c: 0..$ff)
    // [788] (byte) gfx_init_charset::c#1 ← ++ (byte) gfx_init_charset::c#4 -- vbuz1=_inc_vbuz1 
    inc.z c
    // [789] if((byte) gfx_init_charset::c#1!=(byte) 0) goto gfx_init_charset::@1 -- vbuz1_neq_0_then_la1 
    lda.z c
    cmp #0
    bne __b1
    // gfx_init_charset::@4
    // *PROCPORT = $37
    // [790] *((const byte*) PROCPORT) ← (byte) $37 -- _deref_pbuc1=vbuc2 
    lda #$37
    sta PROCPORT
    // gfx_init_charset::@return
    // }
    // [791] return 
    rts
}
  // gfx_init_screen4
// Initialize VIC screen 4 - all chars are 00
gfx_init_screen4: {
    .label ch = $e
    .label cy = $d
    // [793] phi from gfx_init_screen4 to gfx_init_screen4::@1 [phi:gfx_init_screen4->gfx_init_screen4::@1]
    // [793] phi (byte) gfx_init_screen4::cy#4 = (byte) 0 [phi:gfx_init_screen4->gfx_init_screen4::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [793] phi (byte*) gfx_init_screen4::ch#3 = (const byte*) VIC_SCREEN4 [phi:gfx_init_screen4->gfx_init_screen4::@1#1] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN4
    sta.z ch
    lda #>VIC_SCREEN4
    sta.z ch+1
    // [793] phi from gfx_init_screen4::@3 to gfx_init_screen4::@1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1]
    // [793] phi (byte) gfx_init_screen4::cy#4 = (byte) gfx_init_screen4::cy#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#0] -- register_copy 
    // [793] phi (byte*) gfx_init_screen4::ch#3 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@3->gfx_init_screen4::@1#1] -- register_copy 
    // gfx_init_screen4::@1
  __b1:
    // [794] phi from gfx_init_screen4::@1 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2]
    // [794] phi (byte) gfx_init_screen4::cx#2 = (byte) 0 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#0] -- vbuxx=vbuc1 
    ldx #0
    // [794] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#3 [phi:gfx_init_screen4::@1->gfx_init_screen4::@2#1] -- register_copy 
    // [794] phi from gfx_init_screen4::@2 to gfx_init_screen4::@2 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2]
    // [794] phi (byte) gfx_init_screen4::cx#2 = (byte) gfx_init_screen4::cx#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#0] -- register_copy 
    // [794] phi (byte*) gfx_init_screen4::ch#2 = (byte*) gfx_init_screen4::ch#1 [phi:gfx_init_screen4::@2->gfx_init_screen4::@2#1] -- register_copy 
    // gfx_init_screen4::@2
  __b2:
    // *ch++ = 0
    // [795] *((byte*) gfx_init_screen4::ch#2) ← (byte) 0 -- _deref_pbuz1=vbuc1 
    lda #0
    tay
    sta (ch),y
    // *ch++ = 0;
    // [796] (byte*) gfx_init_screen4::ch#1 ← ++ (byte*) gfx_init_screen4::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [797] (byte) gfx_init_screen4::cx#1 ← ++ (byte) gfx_init_screen4::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [798] if((byte) gfx_init_screen4::cx#1!=(byte) $28) goto gfx_init_screen4::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen4::@3
    // for(byte cy: 0..24 )
    // [799] (byte) gfx_init_screen4::cy#1 ← ++ (byte) gfx_init_screen4::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [800] if((byte) gfx_init_screen4::cy#1!=(byte) $19) goto gfx_init_screen4::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen4::@return
    // }
    // [801] return 
    rts
}
  // gfx_init_screen3
// Initialize VIC screen 3 ( value is %00xx00yy where xx is xpos and yy is ypos
gfx_init_screen3: {
    .label __1 = $1e
    .label ch = $16
    .label cy = $10
    // [803] phi from gfx_init_screen3 to gfx_init_screen3::@1 [phi:gfx_init_screen3->gfx_init_screen3::@1]
    // [803] phi (byte*) gfx_init_screen3::ch#3 = (const byte*) VIC_SCREEN3 [phi:gfx_init_screen3->gfx_init_screen3::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN3
    sta.z ch
    lda #>VIC_SCREEN3
    sta.z ch+1
    // [803] phi (byte) gfx_init_screen3::cy#4 = (byte) 0 [phi:gfx_init_screen3->gfx_init_screen3::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [803] phi from gfx_init_screen3::@3 to gfx_init_screen3::@1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1]
    // [803] phi (byte*) gfx_init_screen3::ch#3 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#0] -- register_copy 
    // [803] phi (byte) gfx_init_screen3::cy#4 = (byte) gfx_init_screen3::cy#1 [phi:gfx_init_screen3::@3->gfx_init_screen3::@1#1] -- register_copy 
    // gfx_init_screen3::@1
  __b1:
    // [804] phi from gfx_init_screen3::@1 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2]
    // [804] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#3 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#0] -- register_copy 
    // [804] phi (byte) gfx_init_screen3::cx#2 = (byte) 0 [phi:gfx_init_screen3::@1->gfx_init_screen3::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [804] phi from gfx_init_screen3::@2 to gfx_init_screen3::@2 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2]
    // [804] phi (byte*) gfx_init_screen3::ch#2 = (byte*) gfx_init_screen3::ch#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#0] -- register_copy 
    // [804] phi (byte) gfx_init_screen3::cx#2 = (byte) gfx_init_screen3::cx#1 [phi:gfx_init_screen3::@2->gfx_init_screen3::@2#1] -- register_copy 
    // gfx_init_screen3::@2
  __b2:
    // cx&3
    // [805] (byte~) gfx_init_screen3::$0 ← (byte) gfx_init_screen3::cx#2 & (byte) 3 -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #3
    // (cx&3)*$10
    // [806] (byte~) gfx_init_screen3::$1 ← (byte~) gfx_init_screen3::$0 << (byte) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // cy&3
    // [807] (byte~) gfx_init_screen3::$2 ← (byte) gfx_init_screen3::cy#4 & (byte) 3 -- vbuaa=vbuz1_band_vbuc1 
    lda #3
    and.z cy
    // (cx&3)*$10|(cy&3)
    // [808] (byte~) gfx_init_screen3::$3 ← (byte~) gfx_init_screen3::$1 | (byte~) gfx_init_screen3::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // *ch++ = (cx&3)*$10|(cy&3)
    // [809] *((byte*) gfx_init_screen3::ch#2) ← (byte~) gfx_init_screen3::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cx&3)*$10|(cy&3);
    // [810] (byte*) gfx_init_screen3::ch#1 ← ++ (byte*) gfx_init_screen3::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [811] (byte) gfx_init_screen3::cx#1 ← ++ (byte) gfx_init_screen3::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [812] if((byte) gfx_init_screen3::cx#1!=(byte) $28) goto gfx_init_screen3::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen3::@3
    // for(byte cy: 0..24 )
    // [813] (byte) gfx_init_screen3::cy#1 ← ++ (byte) gfx_init_screen3::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [814] if((byte) gfx_init_screen3::cy#1!=(byte) $19) goto gfx_init_screen3::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen3::@return
    // }
    // [815] return 
    rts
}
  // gfx_init_screen2
// Initialize VIC screen 2 ( value is %ccccrrrr where cccc is (x+y mod $f) and rrrr is %1111-%cccc)
gfx_init_screen2: {
    .label col2 = $1f
    .label ch = $16
    .label cy = $10
    // [817] phi from gfx_init_screen2 to gfx_init_screen2::@1 [phi:gfx_init_screen2->gfx_init_screen2::@1]
    // [817] phi (byte*) gfx_init_screen2::ch#3 = (const byte*) VIC_SCREEN2 [phi:gfx_init_screen2->gfx_init_screen2::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN2
    sta.z ch
    lda #>VIC_SCREEN2
    sta.z ch+1
    // [817] phi (byte) gfx_init_screen2::cy#4 = (byte) 0 [phi:gfx_init_screen2->gfx_init_screen2::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [817] phi from gfx_init_screen2::@3 to gfx_init_screen2::@1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1]
    // [817] phi (byte*) gfx_init_screen2::ch#3 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#0] -- register_copy 
    // [817] phi (byte) gfx_init_screen2::cy#4 = (byte) gfx_init_screen2::cy#1 [phi:gfx_init_screen2::@3->gfx_init_screen2::@1#1] -- register_copy 
    // gfx_init_screen2::@1
  __b1:
    // [818] phi from gfx_init_screen2::@1 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2]
    // [818] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#3 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#0] -- register_copy 
    // [818] phi (byte) gfx_init_screen2::cx#2 = (byte) 0 [phi:gfx_init_screen2::@1->gfx_init_screen2::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [818] phi from gfx_init_screen2::@2 to gfx_init_screen2::@2 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2]
    // [818] phi (byte*) gfx_init_screen2::ch#2 = (byte*) gfx_init_screen2::ch#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#0] -- register_copy 
    // [818] phi (byte) gfx_init_screen2::cx#2 = (byte) gfx_init_screen2::cx#1 [phi:gfx_init_screen2::@2->gfx_init_screen2::@2#1] -- register_copy 
    // gfx_init_screen2::@2
  __b2:
    // cx+cy
    // [819] (byte~) gfx_init_screen2::$0 ← (byte) gfx_init_screen2::cx#2 + (byte) gfx_init_screen2::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // col = (cx+cy)&$f
    // [820] (byte) gfx_init_screen2::col#0 ← (byte~) gfx_init_screen2::$0 & (byte) $f -- vbuyy=vbuaa_band_vbuc1 
    and #$f
    tay
    // col2 = ($f-col)
    // [821] (byte) gfx_init_screen2::col2#0 ← (byte) $f - (byte) gfx_init_screen2::col#0 -- vbuz1=vbuc1_minus_vbuyy 
    tya
    eor #$ff
    clc
    adc #$f+1
    sta.z col2
    // col*$10
    // [822] (byte~) gfx_init_screen2::$3 ← (byte) gfx_init_screen2::col#0 << (byte) 4 -- vbuaa=vbuyy_rol_4 
    tya
    asl
    asl
    asl
    asl
    // col*$10 | col2
    // [823] (byte~) gfx_init_screen2::$4 ← (byte~) gfx_init_screen2::$3 | (byte) gfx_init_screen2::col2#0 -- vbuaa=vbuaa_bor_vbuz1 
    ora.z col2
    // *ch++ = col*$10 | col2
    // [824] *((byte*) gfx_init_screen2::ch#2) ← (byte~) gfx_init_screen2::$4 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = col*$10 | col2;
    // [825] (byte*) gfx_init_screen2::ch#1 ← ++ (byte*) gfx_init_screen2::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [826] (byte) gfx_init_screen2::cx#1 ← ++ (byte) gfx_init_screen2::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [827] if((byte) gfx_init_screen2::cx#1!=(byte) $28) goto gfx_init_screen2::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen2::@3
    // for(byte cy: 0..24 )
    // [828] (byte) gfx_init_screen2::cy#1 ← ++ (byte) gfx_init_screen2::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [829] if((byte) gfx_init_screen2::cy#1!=(byte) $19) goto gfx_init_screen2::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen2::@return
    // }
    // [830] return 
    rts
}
  // gfx_init_screen1
// Initialize VIC screen 1 ( value is %0000cccc where cccc is (x+y mod $f))
gfx_init_screen1: {
    .label ch = $16
    .label cy = $11
    // [832] phi from gfx_init_screen1 to gfx_init_screen1::@1 [phi:gfx_init_screen1->gfx_init_screen1::@1]
    // [832] phi (byte*) gfx_init_screen1::ch#3 = (const byte*) VIC_SCREEN1 [phi:gfx_init_screen1->gfx_init_screen1::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN1
    sta.z ch
    lda #>VIC_SCREEN1
    sta.z ch+1
    // [832] phi (byte) gfx_init_screen1::cy#4 = (byte) 0 [phi:gfx_init_screen1->gfx_init_screen1::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [832] phi from gfx_init_screen1::@3 to gfx_init_screen1::@1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1]
    // [832] phi (byte*) gfx_init_screen1::ch#3 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#0] -- register_copy 
    // [832] phi (byte) gfx_init_screen1::cy#4 = (byte) gfx_init_screen1::cy#1 [phi:gfx_init_screen1::@3->gfx_init_screen1::@1#1] -- register_copy 
    // gfx_init_screen1::@1
  __b1:
    // [833] phi from gfx_init_screen1::@1 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2]
    // [833] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#3 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#0] -- register_copy 
    // [833] phi (byte) gfx_init_screen1::cx#2 = (byte) 0 [phi:gfx_init_screen1::@1->gfx_init_screen1::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [833] phi from gfx_init_screen1::@2 to gfx_init_screen1::@2 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2]
    // [833] phi (byte*) gfx_init_screen1::ch#2 = (byte*) gfx_init_screen1::ch#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#0] -- register_copy 
    // [833] phi (byte) gfx_init_screen1::cx#2 = (byte) gfx_init_screen1::cx#1 [phi:gfx_init_screen1::@2->gfx_init_screen1::@2#1] -- register_copy 
    // gfx_init_screen1::@2
  __b2:
    // cx+cy
    // [834] (byte~) gfx_init_screen1::$0 ← (byte) gfx_init_screen1::cx#2 + (byte) gfx_init_screen1::cy#4 -- vbuaa=vbuxx_plus_vbuz1 
    txa
    clc
    adc.z cy
    // (cx+cy)&$f
    // [835] (byte~) gfx_init_screen1::$1 ← (byte~) gfx_init_screen1::$0 & (byte) $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // *ch++ = (cx+cy)&$f
    // [836] *((byte*) gfx_init_screen1::ch#2) ← (byte~) gfx_init_screen1::$1 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cx+cy)&$f;
    // [837] (byte*) gfx_init_screen1::ch#1 ← ++ (byte*) gfx_init_screen1::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [838] (byte) gfx_init_screen1::cx#1 ← ++ (byte) gfx_init_screen1::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [839] if((byte) gfx_init_screen1::cx#1!=(byte) $28) goto gfx_init_screen1::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen1::@3
    // for(byte cy: 0..24 )
    // [840] (byte) gfx_init_screen1::cy#1 ← ++ (byte) gfx_init_screen1::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [841] if((byte) gfx_init_screen1::cy#1!=(byte) $19) goto gfx_init_screen1::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen1::@return
    // }
    // [842] return 
    rts
}
  // gfx_init_screen0
// Initialize VIC screen 0 ( value is %yyyyxxxx where yyyy is ypos and xxxx is xpos)
gfx_init_screen0: {
    .label __1 = $1f
    .label ch = $16
    .label cy = $11
    // [844] phi from gfx_init_screen0 to gfx_init_screen0::@1 [phi:gfx_init_screen0->gfx_init_screen0::@1]
    // [844] phi (byte*) gfx_init_screen0::ch#3 = (const byte*) VIC_SCREEN0 [phi:gfx_init_screen0->gfx_init_screen0::@1#0] -- pbuz1=pbuc1 
    lda #<VIC_SCREEN0
    sta.z ch
    lda #>VIC_SCREEN0
    sta.z ch+1
    // [844] phi (byte) gfx_init_screen0::cy#4 = (byte) 0 [phi:gfx_init_screen0->gfx_init_screen0::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z cy
    // [844] phi from gfx_init_screen0::@3 to gfx_init_screen0::@1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1]
    // [844] phi (byte*) gfx_init_screen0::ch#3 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#0] -- register_copy 
    // [844] phi (byte) gfx_init_screen0::cy#4 = (byte) gfx_init_screen0::cy#1 [phi:gfx_init_screen0::@3->gfx_init_screen0::@1#1] -- register_copy 
    // gfx_init_screen0::@1
  __b1:
    // [845] phi from gfx_init_screen0::@1 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2]
    // [845] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#3 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#0] -- register_copy 
    // [845] phi (byte) gfx_init_screen0::cx#2 = (byte) 0 [phi:gfx_init_screen0::@1->gfx_init_screen0::@2#1] -- vbuxx=vbuc1 
    ldx #0
    // [845] phi from gfx_init_screen0::@2 to gfx_init_screen0::@2 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2]
    // [845] phi (byte*) gfx_init_screen0::ch#2 = (byte*) gfx_init_screen0::ch#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#0] -- register_copy 
    // [845] phi (byte) gfx_init_screen0::cx#2 = (byte) gfx_init_screen0::cx#1 [phi:gfx_init_screen0::@2->gfx_init_screen0::@2#1] -- register_copy 
    // gfx_init_screen0::@2
  __b2:
    // cy&$f
    // [846] (byte~) gfx_init_screen0::$0 ← (byte) gfx_init_screen0::cy#4 & (byte) $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z cy
    // (cy&$f)*$10
    // [847] (byte~) gfx_init_screen0::$1 ← (byte~) gfx_init_screen0::$0 << (byte) 4 -- vbuz1=vbuaa_rol_4 
    asl
    asl
    asl
    asl
    sta.z __1
    // cx&$f
    // [848] (byte~) gfx_init_screen0::$2 ← (byte) gfx_init_screen0::cx#2 & (byte) $f -- vbuaa=vbuxx_band_vbuc1 
    txa
    and #$f
    // (cy&$f)*$10|(cx&$f)
    // [849] (byte~) gfx_init_screen0::$3 ← (byte~) gfx_init_screen0::$1 | (byte~) gfx_init_screen0::$2 -- vbuaa=vbuz1_bor_vbuaa 
    ora.z __1
    // *ch++ = (cy&$f)*$10|(cx&$f)
    // [850] *((byte*) gfx_init_screen0::ch#2) ← (byte~) gfx_init_screen0::$3 -- _deref_pbuz1=vbuaa 
    ldy #0
    sta (ch),y
    // *ch++ = (cy&$f)*$10|(cx&$f);
    // [851] (byte*) gfx_init_screen0::ch#1 ← ++ (byte*) gfx_init_screen0::ch#2 -- pbuz1=_inc_pbuz1 
    inc.z ch
    bne !+
    inc.z ch+1
  !:
    // for(byte cx: 0..39)
    // [852] (byte) gfx_init_screen0::cx#1 ← ++ (byte) gfx_init_screen0::cx#2 -- vbuxx=_inc_vbuxx 
    inx
    // [853] if((byte) gfx_init_screen0::cx#1!=(byte) $28) goto gfx_init_screen0::@2 -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __b2
    // gfx_init_screen0::@3
    // for(byte cy: 0..24 )
    // [854] (byte) gfx_init_screen0::cy#1 ← ++ (byte) gfx_init_screen0::cy#4 -- vbuz1=_inc_vbuz1 
    inc.z cy
    // [855] if((byte) gfx_init_screen0::cy#1!=(byte) $19) goto gfx_init_screen0::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #$19
    cmp.z cy
    bne __b1
    // gfx_init_screen0::@return
    // }
    // [856] return 
    rts
}
  // keyboard_init
// Initialize keyboard reading by setting CIA#$ Data Direction Registers
keyboard_init: {
    // *CIA1_PORT_A_DDR = $ff
    // [857] *((const byte*) CIA1_PORT_A_DDR) ← (byte) $ff -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Write Mode
    lda #$ff
    sta CIA1_PORT_A_DDR
    // *CIA1_PORT_B_DDR = $00
    // [858] *((const byte*) CIA1_PORT_B_DDR) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Keyboard Matrix Columns Read Mode
    lda #0
    sta CIA1_PORT_B_DDR
    // keyboard_init::@return
    // }
    // [859] return 
    rts
}
  // File Data
  // Default vallues for the palette
  DTV_PALETTE_DEFAULT: .byte 0, $f, $36, $be, $58, $db, $86, $ff, $29, $26, $3b, 5, 7, $df, $9a, $a
  print_hextab: .text "0123456789abcdef"
  // Keyboard row bitmask as expected by CIA#1 Port A when reading a specific keyboard matrix row (rows are numbered 0-7)
  keyboard_matrix_row_bitmask: .byte $fe, $fd, $fb, $f7, $ef, $df, $bf, $7f
  // Keyboard matrix column bitmasks for a specific keybooard matrix column when reading the keyboard. (columns are numbered 0-7)
  keyboard_matrix_col_bitmask: .byte 1, 2, 4, 8, $10, $20, $40, $80
  // Keyboard event buffer. Contains keycodes for key presses/releases. Presses are represented by the keycode. Releases by keycode | $40. The buffer is filled by keyboard_scan()
  keyboard_events: .fill 8, 0
  // The values scanned values for each row. Set by keyboard_scan() and used by keyboard_get_event()
  keyboard_scan_values: .fill 8, 0
  // Tables for the plotter - initialized by calling bitmap_draw_init();
  bitmap_plot_xlo: .fill $100, 0
  bitmap_plot_xhi: .fill $100, 0
  bitmap_plot_ylo: .fill $100, 0
  bitmap_plot_yhi: .fill $100, 0
  bitmap_plot_bit: .fill $100, 0
  // Charset ROM
  FORM_TEXT: .text " C64 DTV Graphics Mode Explorer         @                                        @ PRESET 0 Standard Charset              @                                        @ CONTROL        PLANE  A     VIC II     @ bmm        0   pattern p0   screen s0  @ mcm        0   start   00   gfx    g0  @ ecm        0   step    00   colors c0  @ hicolor    0   modulo  00              @ linear     0                COLORS     @ color off  0   PLANE  B     palet   0  @ chunky     0   pattern p0   bgcol0 00  @ border off 0   start   00   bgcol1 00  @ overscan   0   step    00   bgcol2 00  @                modulo  00   bgcol3 00  @"
  .byte 0
  FORM_COLS: .text "aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa@                                        @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm   ooooooooo  @ nnnnnnnnnnnn   mmmmmmmmmm              @ nnnnnnnnnnnn                jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @ nnnnnnnnnnnn   mmmmmmmmmm   jjjjjjjjj  @"
  .byte 0
  // Form fields x/y-positions
  form_fields_x: .byte 8, $c, $c, $c, $c, $c, $c, $c, $c, $c, $19, $18, $19, $18, $19, $18, $19, $19, $18, $19, $18, $19, $18, $19, $25, $25, $25, $25, $24, $25, $24, $25, $24, $25, $24, $25
  form_fields_y: .byte 2, 5, 6, 7, 8, 9, $a, $b, $c, $d, 5, 6, 6, 7, 7, 8, 8, $b, $c, $c, $d, $d, $e, $e, 5, 6, 7, $a, $b, $b, $c, $c, $d, $d, $e, $e
  // Form field max values (all values are in the interval 0..max)
  form_fields_max: .byte $a, 1, 1, 1, 1, 1, 1, 1, 1, 1, $d, $f, $f, $f, $f, $f, $f, $d, $f, $f, $f, $f, $f, $f, 3, 1, 4, 1, $f, $f, $f, $f, $f, $f, $f, $f
  // Form fields values
  form_fields_val: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Standard Char Mode
  preset_stdchar: .byte 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Extended Color Char Mode
  preset_ecmchar: .byte 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 5, 0, 6
  // Preset: Standard Bitmap
  preset_stdbm: .byte 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: MC Bitmap
  preset_mcbm: .byte 3, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Standard Char Mode
  preset_hi_stdchar: .byte 4, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Hicolor Extended Color Char Mode
  preset_hi_ecmchar: .byte 5, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 4, 6, 8, 9, $c, $c
  // Preset: Two plane mode
  preset_twoplane: .byte 6, 1, 0, 1, 1, 1, 0, 0, 0, 0, 7, 0, 0, 0, 1, 0, 0, 8, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 7, 0, $d, 4, 0, 0, 0, 0
  // Preset: Chunky 8bpp
  preset_chunky: .byte 7, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 8, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs mode
  preset_sixsfred: .byte 8, 1, 1, 1, 1, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: Sixs FREDs 2 mode
  preset_sixsfred2: .byte 9, 1, 1, 1, 0, 1, 0, 0, 0, 0, 9, 0, 0, 0, 1, 0, 0, $a, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Preset: 8bpp Pixel Cell
  preset_8bpppixelcell: .byte $a, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, $b, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0
  // Table with addresses of the y-lines of the form. The first line contains the address of the form screen.
  form_line_lo: .fill $19, 0
  form_line_hi: .fill $19, 0

