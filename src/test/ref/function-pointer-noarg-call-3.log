Resolved forward reference fn1 to (void()) fn1()
Resolved forward reference fn2 to (void()) fn2()

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@4
main: scope:[main]  from @4
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::i#3 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#4 )
  if(true) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) main::i#2 ← phi( main::@1/(byte) main::i#3 )
  (byte) main::i#1 ← ++ (byte) main::i#2
  (byte) getfn::b#0 ← (byte) main::i#1
  call getfn 
  (void()*) getfn::return#0 ← (void()*) getfn::return#3
  to:main::@7
main::@7: scope:[main]  from main::@2
  (byte) main::i#4 ← phi( main::@2/(byte) main::i#1 )
  (void()*) getfn::return#4 ← phi( main::@2/(void()*) getfn::return#0 )
  (void()*~) main::$1 ← (void()*) getfn::return#4
  call (void()*~) main::$1 
  to:main::@1
main::@return: scope:[main]  from main::@1
  return 
  to:@return
getfn: scope:[getfn]  from main::@2
  (byte) getfn::b#1 ← phi( main::@2/(byte) getfn::b#0 )
  (byte~) getfn::$0 ← (byte) getfn::b#1 & (byte/signed byte/word/signed word/dword/signed dword) 1
  (bool~) getfn::$1 ← (byte~) getfn::$0 == (byte/signed byte/word/signed word/dword/signed dword) 0
  if((bool~) getfn::$1) goto getfn::@1
  to:getfn::@3
getfn::@1: scope:[getfn]  from getfn
  (void()*~) getfn::$3 ← & (void()) fn1()
  (void()*) getfn::return#1 ← (void()*~) getfn::$3
  to:getfn::@return
getfn::@3: scope:[getfn]  from getfn
  (void()*~) getfn::$2 ← & (void()) fn2()
  (void()*) getfn::return#2 ← (void()*~) getfn::$2
  to:getfn::@return
getfn::@return: scope:[getfn]  from getfn::@1 getfn::@3
  (void()*) getfn::return#5 ← phi( getfn::@1/(void()*) getfn::return#1 getfn::@3/(void()*) getfn::return#2 )
  (void()*) getfn::return#3 ← (void()*) getfn::return#5
  return 
  to:@return
fn1: scope:[fn1]  from
  (byte*) fn1::BORDERCOL#0 ← ((byte*)) (word/dword/signed dword) $d020
  *((byte*) fn1::BORDERCOL#0) ← ++ *((byte*) fn1::BORDERCOL#0)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  return 
  to:@return
fn2: scope:[fn2]  from
  (byte*) fn2::BGCOL#0 ← ((byte*)) (word/dword/signed dword) $d021
  *((byte*) fn2::BGCOL#0) ← ++ *((byte*) fn2::BGCOL#0)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  return 
  to:@return
@4: scope:[]  from @begin
  call main 
  to:@5
@5: scope:[]  from @4
  to:@end
@end: scope:[]  from @5

SYMBOL TABLE SSA
(label) @4
(label) @5
(label) @begin
(label) @end
(void()) fn1()
(label) fn1::@return
(byte*) fn1::BORDERCOL
(byte*) fn1::BORDERCOL#0
(void()) fn2()
(label) fn2::@return
(byte*) fn2::BGCOL
(byte*) fn2::BGCOL#0
(void()*()) getfn((byte) getfn::b)
(byte~) getfn::$0
(bool~) getfn::$1
(void()*~) getfn::$2
(void()*~) getfn::$3
(label) getfn::@1
(label) getfn::@3
(label) getfn::@return
(byte) getfn::b
(byte) getfn::b#0
(byte) getfn::b#1
(void()*) getfn::return
(void()*) getfn::return#0
(void()*) getfn::return#1
(void()*) getfn::return#2
(void()*) getfn::return#3
(void()*) getfn::return#4
(void()*) getfn::return#5
(void()) main()
(void()*~) main::$1
(label) main::@1
(label) main::@2
(label) main::@7
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4

Culled Empty Block (label) @5
Successful SSA optimization Pass2CullEmptyBlocks
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (void()*) getfn::return#0 = (void()*) getfn::return#4 
Alias (byte) main::i#1 = (byte) main::i#4 
Alias (void()*) getfn::return#1 = (void()*~) getfn::$3 
Alias (void()*) getfn::return#2 = (void()*~) getfn::$2 
Alias (void()*) getfn::return#3 = (void()*) getfn::return#5 
Successful SSA optimization Pass2AliasElimination
Redundant Phi (byte) getfn::b#1 (byte) getfn::b#0
Successful SSA optimization Pass2RedundantPhiElimination
Simple Condition (bool~) getfn::$1 [15] if((byte~) getfn::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto getfn::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 0
Constant (const void()*) getfn::return#1 = &fn1
Constant (const void()*) getfn::return#2 = &fn2
Constant (const byte*) fn1::BORDERCOL#0 = ((byte*))$d020
Constant (const byte*) fn2::BGCOL#0 = ((byte*))$d021
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [1] if(true) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Culled Empty Block (label) getfn::@1
Successful SSA optimization Pass2CullEmptyBlocks
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const void()*) getfn::return#1
Inlining constant with var siblings (const void()*) getfn::return#2
Constant inlined getfn::return#1 = &(void()) fn1()
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Constant inlined getfn::return#2 = &(void()) fn2()
Successful SSA optimization Pass2ConstantInlining
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @4
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of getfn::@3
CALL GRAPH
Calls in [] to main:2 
Calls in [main] to getfn:8 

Created 2 initial phi equivalence classes
Coalesced [12] main::i#5 ← main::i#1
Coalesced down to 2 phi equivalence classes
Renumbering block @4 to @1
Renumbering block main::@7 to main::@3
Renumbering block getfn::@3 to getfn::@1
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Adding NOP phi() at start of getfn::@1

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@3
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@3/(byte) main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [6] (byte) main::i#1 ← ++ (byte) main::i#2
  [7] (byte) getfn::b#0 ← (byte) main::i#1
  [8] call getfn 
  [9] (void()*) getfn::return#0 ← (void()*) getfn::return#3
  to:main::@3
main::@3: scope:[main]  from main::@2
  [10] (void()*~) main::$1 ← (void()*) getfn::return#0
  [11] call (void()*~) main::$1 
  to:main::@1
getfn: scope:[getfn]  from main::@2
  [12] (byte~) getfn::$0 ← (byte) getfn::b#0 & (byte/signed byte/word/signed word/dword/signed dword) 1
  [13] if((byte~) getfn::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto getfn::@return
  to:getfn::@1
getfn::@1: scope:[getfn]  from getfn
  [14] phi()
  to:getfn::@return
getfn::@return: scope:[getfn]  from getfn getfn::@1
  [15] (void()*) getfn::return#3 ← phi( getfn/&(void()) fn1() getfn::@1/&(void()) fn2() )
  [16] return 
  to:@return
fn2: scope:[fn2]  from
  [17] *((const byte*) fn2::BGCOL#0) ← ++ *((const byte*) fn2::BGCOL#0)
  to:fn2::@return
fn2::@return: scope:[fn2]  from fn2
  [18] return 
  to:@return
fn1: scope:[fn1]  from
  [19] *((const byte*) fn1::BORDERCOL#0) ← ++ *((const byte*) fn1::BORDERCOL#0)
  to:fn1::@return
fn1::@return: scope:[fn1]  from fn1
  [20] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) fn1()
(byte*) fn1::BORDERCOL
(void()) fn2()
(byte*) fn2::BGCOL
(void()*()) getfn((byte) getfn::b)
(byte~) getfn::$0 4.0
(byte) getfn::b
(byte) getfn::b#0 13.0
(void()*) getfn::return
(void()*) getfn::return#0 22.0
(void()*) getfn::return#3 3.6666666666666665
(void()) main()
(void()*~) main::$1 11.0
(byte) main::i
(byte) main::i#1 5.5
(byte) main::i#2 22.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ getfn::return#3 ]
Added variable getfn::b#0 to zero page equivalence class [ getfn::b#0 ]
Added variable getfn::return#0 to zero page equivalence class [ getfn::return#0 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Added variable getfn::$0 to zero page equivalence class [ getfn::$0 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ getfn::return#3 ]
[ getfn::b#0 ]
[ getfn::return#0 ]
[ main::$1 ]
[ getfn::$0 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_WORD:3 [ getfn::return#3 ]
Allocated zp ZP_BYTE:5 [ getfn::b#0 ]
Allocated zp ZP_WORD:6 [ getfn::return#0 ]
Allocated zp ZP_WORD:8 [ main::$1 ]
Allocated zp ZP_BYTE:10 [ getfn::$0 ]

INITIAL ASM
//SEG0 File Comments
// Tests creating, assigning returning and calling pointers to non-args no-return functions
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label _1 = 8
    .label i = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta i
    jmp b1
  //SEG13 main::@1
  b1:
    jmp b2
  //SEG14 main::@2
  b2:
  //SEG15 [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc i
  //SEG16 [7] (byte) getfn::b#0 ← (byte) main::i#1 -- vbuz1=vbuz2 
    lda i
    sta getfn.b
  //SEG17 [8] call getfn 
    jsr getfn
  //SEG18 [9] (void()*) getfn::return#0 ← (void()*) getfn::return#3 -- pprz1=pprz2 
    lda getfn.return_3
    sta getfn.return
    lda getfn.return_3+1
    sta getfn.return+1
    jmp b3
  //SEG19 main::@3
  b3:
  //SEG20 [10] (void()*~) main::$1 ← (void()*) getfn::return#0 -- pprz1=pprz2 
    lda getfn.return
    sta _1
    lda getfn.return+1
    sta _1+1
  //SEG21 [11] call (void()*~) main::$1 
    jsr bi__1
  //SEG22 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG23 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
  bi__1:
    jmp (_1)
}
//SEG24 getfn
// getfn(byte zeropage(5) b)
getfn: {
    .label _0 = $a
    .label b = 5
    .label return = 6
    .label return_3 = 3
  //SEG25 [12] (byte~) getfn::$0 ← (byte) getfn::b#0 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuz1=vbuz2_band_vbuc1 
    lda #1
    and b
    sta _0
  //SEG26 [13] if((byte~) getfn::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto getfn::@return -- vbuz1_eq_0_then_la1 
    lda _0
    cmp #0
    beq breturn_from_getfn
  //SEG27 [14] phi from getfn to getfn::@1 [phi:getfn->getfn::@1]
  b1_from_getfn:
    jmp b1
  //SEG28 getfn::@1
  b1:
  //SEG29 [15] phi from getfn::@1 to getfn::@return [phi:getfn::@1->getfn::@return]
  breturn_from_b1:
  //SEG30 [15] phi (void()*) getfn::return#3 = &(void()) fn2() [phi:getfn::@1->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn2
    sta return_3
    lda #>fn2
    sta return_3+1
    jmp breturn
  //SEG31 [15] phi from getfn to getfn::@return [phi:getfn->getfn::@return]
  breturn_from_getfn:
  //SEG32 [15] phi (void()*) getfn::return#3 = &(void()) fn1() [phi:getfn->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn1
    sta return_3
    lda #>fn1
    sta return_3+1
    jmp breturn
  //SEG33 getfn::@return
  breturn:
  //SEG34 [16] return 
    rts
}
//SEG35 fn2
fn2: {
    .label BGCOL = $d021
  //SEG36 [17] *((const byte*) fn2::BGCOL#0) ← ++ *((const byte*) fn2::BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp breturn
  //SEG37 fn2::@return
  breturn:
  //SEG38 [18] return 
    rts
}
//SEG39 fn1
fn1: {
    .label BORDERCOL = $d020
  //SEG40 [19] *((const byte*) fn1::BORDERCOL#0) ← ++ *((const byte*) fn1::BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp breturn
  //SEG41 fn1::@return
  breturn:
  //SEG42 [20] return 
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [9] (void()*) getfn::return#0 ← (void()*) getfn::return#3 [ main::i#1 getfn::return#0 ] ( main:2 [ main::i#1 getfn::return#0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Statement [10] (void()*~) main::$1 ← (void()*) getfn::return#0 [ main::i#1 main::$1 ] ( main:2 [ main::i#1 main::$1 ] ) always clobbers reg byte a 
Statement [9] (void()*) getfn::return#0 ← (void()*) getfn::return#3 [ main::i#1 getfn::return#0 ] ( main:2 [ main::i#1 getfn::return#0 ] ) always clobbers reg byte a 
Statement [10] (void()*~) main::$1 ← (void()*) getfn::return#0 [ main::i#1 main::$1 ] ( main:2 [ main::i#1 main::$1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:3 [ getfn::return#3 ] : zp ZP_WORD:3 , 
Potential registers zp ZP_BYTE:5 [ getfn::b#0 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_WORD:6 [ getfn::return#0 ] : zp ZP_WORD:6 , 
Potential registers zp ZP_WORD:8 [ main::$1 ] : zp ZP_WORD:8 , 
Potential registers zp ZP_BYTE:10 [ getfn::$0 ] : zp ZP_BYTE:10 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [getfn] 22: zp ZP_WORD:6 [ getfn::return#0 ] 13: zp ZP_BYTE:5 [ getfn::b#0 ] 4: zp ZP_BYTE:10 [ getfn::$0 ] 3.67: zp ZP_WORD:3 [ getfn::return#3 ] 
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 11: zp ZP_WORD:8 [ main::$1 ] 
Uplift Scope [fn1] 
Uplift Scope [fn2] 
Uplift Scope [] 

Uplifting [getfn] best 743 combination zp ZP_WORD:6 [ getfn::return#0 ] reg byte a [ getfn::b#0 ] reg byte a [ getfn::$0 ] zp ZP_WORD:3 [ getfn::return#3 ] 
Uplifting [main] best 673 combination reg byte x [ main::i#2 main::i#1 ] zp ZP_WORD:8 [ main::$1 ] 
Uplifting [fn1] best 673 combination 
Uplifting [fn2] best 673 combination 
Uplifting [] best 673 combination 
Coalescing zero page register with common assignment [ zp ZP_WORD:3 [ getfn::return#3 ] ] with [ zp ZP_WORD:6 [ getfn::return#0 ] ] - score: 1
Coalescing zero page register with common assignment [ zp ZP_WORD:3 [ getfn::return#3 getfn::return#0 ] ] with [ zp ZP_WORD:8 [ main::$1 ] ] - score: 1
Allocated (was zp ZP_WORD:3) zp ZP_WORD:2 [ getfn::return#3 getfn::return#0 main::$1 ]

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 File Comments
// Tests creating, assigning returning and calling pointers to non-args no-return functions
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
bbegin:
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG5 @1
b1:
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG9 @end
bend:
//SEG10 main
main: {
    .label _1 = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp b1
  //SEG13 main::@1
  b1:
    jmp b2
  //SEG14 main::@2
  b2:
  //SEG15 [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG16 [7] (byte) getfn::b#0 ← (byte) main::i#1 -- vbuaa=vbuxx 
    txa
  //SEG17 [8] call getfn 
    jsr getfn
  //SEG18 [9] (void()*) getfn::return#0 ← (void()*) getfn::return#3
    jmp b3
  //SEG19 main::@3
  b3:
  //SEG20 [10] (void()*~) main::$1 ← (void()*) getfn::return#0
  //SEG21 [11] call (void()*~) main::$1 
    jsr bi__1
  //SEG22 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  b1_from_b3:
  //SEG23 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b1
  bi__1:
    jmp (_1)
}
//SEG24 getfn
// getfn(byte register(A) b)
getfn: {
    .label return = 2
  //SEG25 [12] (byte~) getfn::$0 ← (byte) getfn::b#0 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuaa_band_vbuc1 
    and #1
  //SEG26 [13] if((byte~) getfn::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto getfn::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq breturn_from_getfn
  //SEG27 [14] phi from getfn to getfn::@1 [phi:getfn->getfn::@1]
  b1_from_getfn:
    jmp b1
  //SEG28 getfn::@1
  b1:
  //SEG29 [15] phi from getfn::@1 to getfn::@return [phi:getfn::@1->getfn::@return]
  breturn_from_b1:
  //SEG30 [15] phi (void()*) getfn::return#3 = &(void()) fn2() [phi:getfn::@1->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn2
    sta return
    lda #>fn2
    sta return+1
    jmp breturn
  //SEG31 [15] phi from getfn to getfn::@return [phi:getfn->getfn::@return]
  breturn_from_getfn:
  //SEG32 [15] phi (void()*) getfn::return#3 = &(void()) fn1() [phi:getfn->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn1
    sta return
    lda #>fn1
    sta return+1
    jmp breturn
  //SEG33 getfn::@return
  breturn:
  //SEG34 [16] return 
    rts
}
//SEG35 fn2
fn2: {
    .label BGCOL = $d021
  //SEG36 [17] *((const byte*) fn2::BGCOL#0) ← ++ *((const byte*) fn2::BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
    jmp breturn
  //SEG37 fn2::@return
  breturn:
  //SEG38 [18] return 
    rts
}
//SEG39 fn1
fn1: {
    .label BORDERCOL = $d020
  //SEG40 [19] *((const byte*) fn1::BORDERCOL#0) ← ++ *((const byte*) fn1::BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
    jmp breturn
  //SEG41 fn1::@return
  breturn:
  //SEG42 [20] return 
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Removing instruction jmp b1
Removing instruction jmp breturn
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b1 with b2
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1:
Removing instruction b1_from_getfn:
Removing instruction breturn_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction b1_from_b3:
Removing instruction b1:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Relabelling long label breturn_from_getfn to b1
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) fn1()
(label) fn1::@return
(byte*) fn1::BORDERCOL
(const byte*) fn1::BORDERCOL#0 BORDERCOL = ((byte*))(word/dword/signed dword) $d020
(void()) fn2()
(label) fn2::@return
(byte*) fn2::BGCOL
(const byte*) fn2::BGCOL#0 BGCOL = ((byte*))(word/dword/signed dword) $d021
(void()*()) getfn((byte) getfn::b)
(byte~) getfn::$0 reg byte a 4.0
(label) getfn::@1
(label) getfn::@return
(byte) getfn::b
(byte) getfn::b#0 reg byte a 13.0
(void()*) getfn::return
(void()*) getfn::return#0 return zp ZP_WORD:2 22.0
(void()*) getfn::return#3 return zp ZP_WORD:2 3.6666666666666665
(void()) main()
(void()*~) main::$1 $1 zp ZP_WORD:2 11.0
(label) main::@1
(label) main::@2
(label) main::@3
(byte) main::i
(byte) main::i#1 reg byte x 5.5
(byte) main::i#2 reg byte x 22.0

reg byte x [ main::i#2 main::i#1 ]
zp ZP_WORD:2 [ getfn::return#3 getfn::return#0 main::$1 ]
reg byte a [ getfn::b#0 ]
reg byte a [ getfn::$0 ]


FINAL ASSEMBLER
Score: 319

//SEG0 File Comments
// Tests creating, assigning returning and calling pointers to non-args no-return functions
//SEG1 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG2 Global Constants & labels
//SEG3 @begin
//SEG4 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG5 @1
//SEG6 [2] call main 
//SEG7 [4] phi from @1 to main [phi:@1->main]
//SEG8 [3] phi from @1 to @end [phi:@1->@end]
//SEG9 @end
//SEG10 main
main: {
    .label _1 = 2
  //SEG11 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
  //SEG13 main::@1
  //SEG14 main::@2
  b2:
  //SEG15 [6] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
  //SEG16 [7] (byte) getfn::b#0 ← (byte) main::i#1 -- vbuaa=vbuxx 
    txa
  //SEG17 [8] call getfn 
    jsr getfn
  //SEG18 [9] (void()*) getfn::return#0 ← (void()*) getfn::return#3
  //SEG19 main::@3
  //SEG20 [10] (void()*~) main::$1 ← (void()*) getfn::return#0
  //SEG21 [11] call (void()*~) main::$1 
    jsr bi__1
  //SEG22 [5] phi from main::@3 to main::@1 [phi:main::@3->main::@1]
  //SEG23 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@3->main::@1#0] -- register_copy 
    jmp b2
  bi__1:
    jmp (_1)
}
//SEG24 getfn
// getfn(byte register(A) b)
getfn: {
    .label return = 2
  //SEG25 [12] (byte~) getfn::$0 ← (byte) getfn::b#0 & (byte/signed byte/word/signed word/dword/signed dword) 1 -- vbuaa=vbuaa_band_vbuc1 
    and #1
  //SEG26 [13] if((byte~) getfn::$0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto getfn::@return -- vbuaa_eq_0_then_la1 
    cmp #0
    beq b1
  //SEG27 [14] phi from getfn to getfn::@1 [phi:getfn->getfn::@1]
  //SEG28 getfn::@1
  //SEG29 [15] phi from getfn::@1 to getfn::@return [phi:getfn::@1->getfn::@return]
  //SEG30 [15] phi (void()*) getfn::return#3 = &(void()) fn2() [phi:getfn::@1->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn2
    sta return
    lda #>fn2
    sta return+1
    jmp breturn
  //SEG31 [15] phi from getfn to getfn::@return [phi:getfn->getfn::@return]
  b1:
  //SEG32 [15] phi (void()*) getfn::return#3 = &(void()) fn1() [phi:getfn->getfn::@return#0] -- pprz1=pprc1 
    lda #<fn1
    sta return
    lda #>fn1
    sta return+1
  //SEG33 getfn::@return
  breturn:
  //SEG34 [16] return 
    rts
}
//SEG35 fn2
fn2: {
    .label BGCOL = $d021
  //SEG36 [17] *((const byte*) fn2::BGCOL#0) ← ++ *((const byte*) fn2::BGCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BGCOL
  //SEG37 fn2::@return
  //SEG38 [18] return 
    rts
}
//SEG39 fn1
fn1: {
    .label BORDERCOL = $d020
  //SEG40 [19] *((const byte*) fn1::BORDERCOL#0) ← ++ *((const byte*) fn1::BORDERCOL#0) -- _deref_pbuc1=_inc__deref_pbuc1 
    inc BORDERCOL
  //SEG41 fn1::@return
  //SEG42 [20] return 
    rts
}

