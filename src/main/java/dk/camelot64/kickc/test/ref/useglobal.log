// Tests procedures using global variables (should not fail)
byte* SCREEN = $0400;
void main() {
   *SCREEN = 1;
}
PROGRAM
  (byte*) SCREEN ← (word) 1024
proc (void()) main()
  *((byte*) SCREEN) ← (byte) 1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(byte*) SCREEN
(void()) main()
(label) main::@return

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@1
main: scope:[main]  from
  *((byte*) SCREEN) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@1
main: scope:[main]  from @1
  *((byte*) SCREEN) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#1 ← phi( @1/(byte*) SCREEN#2 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#2 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#1 ← phi( @1/(byte*) SCREEN#2 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#2 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

INITIAL SSA SYMBOL TABLE
(label) @1
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#2
(void()) main()
(label) main::@return

Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@1
main: scope:[main]  from @1
  (byte*) SCREEN#1 ← phi( @1/(byte*) SCREEN#2 )
  *((byte*) SCREEN#1) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  (byte*) SCREEN#2 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Alias (byte*) SCREEN#0 = (byte*) SCREEN#1 (byte*) SCREEN#2 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@1
main: scope:[main]  from @1
  *((byte*) SCREEN#0) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

Constant (const byte*) SCREEN#0 = 1024
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  *((const byte*) SCREEN#0) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(void()) main()
(label) main::@return

Block Sequence Planned @begin @1 @end main main::@return 
Block Sequence Planned @begin @1 @end main main::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  *((const byte*) SCREEN#0) ← (byte) 1
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

CALL GRAPH
Calls in [] to main:0 

Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] *((const byte*) SCREEN#0) ← (byte) 1 [ ]
  to:main::@return
main::@return: scope:[main]  from main
  [2] return  [ ]
  to:@return

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Block Sequence Planned @begin @1 @end main main::@return 
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] *((const byte*) SCREEN#0) ← (byte) 1 [ ]
  to:main::@return
main::@return: scope:[main]  from main
  [2] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@1
@1: scope:[]  from @begin
  [0] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
main: scope:[main]  from @1
  [1] *((const byte*) SCREEN#0) ← (byte) 1 [ ] ( main:0 [ ] )
  to:main::@return
main::@return: scope:[main]  from main
  [2] return  [ ] ( main:0 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @end @begin 
main dominated by  @1 @begin main 
main::@return dominated by  @1 main::@return @begin main 

NATURAL LOOPS

Found 0 loops in scope []
Found 0 loops in scope [main]
NATURAL LOOPS WITH DEPTH


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()

Initial phi equivalence classes
Complete equivalence classes
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
  jmp b1
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
  jmp bend
//SEG5 @end
bend:
//SEG6 main
main: {
  //SEG7 [1] *((const byte*) SCREEN#0) ← (byte) 1 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #1
    sta SCREEN
    jmp breturn
  //SEG8 main::@return
  breturn:
  //SEG9 [2] return  [ ] ( main:0 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] *((const byte*) SCREEN#0) ← (byte) 1 [ ] ( main:0 [ ] ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 54 combination 
Uplifting [] best 54 combination 
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
bend:
//SEG6 main
main: {
  //SEG7 [1] *((const byte*) SCREEN#0) ← (byte) 1 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #1
    sta SCREEN
  //SEG8 main::@return
  breturn:
  //SEG9 [2] return  [ ] ( main:0 [ ] )
    rts
}

Removing instruction bbegin:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @1
b1:
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
bend:
//SEG6 main
main: {
  //SEG7 [1] *((const byte*) SCREEN#0) ← (byte) 1 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #1
    sta SCREEN
  //SEG8 main::@return
  breturn:
  //SEG9 [2] return  [ ] ( main:0 [ ] )
    rts
}

Removing instruction b1:
Removing instruction bend:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
//SEG6 main
main: {
  //SEG7 [1] *((const byte*) SCREEN#0) ← (byte) 1 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #1
    sta SCREEN
  //SEG8 main::@return
  //SEG9 [2] return  [ ] ( main:0 [ ] )
    rts
}

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (word) 1024
(void()) main()
(label) main::@return


FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @1
//SEG4 [0] call main param-assignment [ ] ( )
  jsr main
//SEG5 @end
//SEG6 main
main: {
  //SEG7 [1] *((const byte*) SCREEN#0) ← (byte) 1 [ ] ( main:0 [ ] ) -- _deref_cowo1=coby2 
    lda #1
    sta SCREEN
  //SEG8 main::@return
  //SEG9 [2] return  [ ] ( main:0 [ ] )
    rts
}

