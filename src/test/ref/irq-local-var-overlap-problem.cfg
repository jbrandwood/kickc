@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [6] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) $7f
  [7] *((const byte*) RASTER#0) ← (byte/word/signed word/dword/signed dword) $fd
  [8] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [9] *((const void()**) KERNEL_IRQ#0) ← &interrupt(KERNEL_MIN)(void()) irq()
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@5 main::@7
  [11] (byte) main::i#7 ← phi( main::@7/(byte) main::i#1 main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@5/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [12] (byte) main::j#5 ← phi( main::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@4/(byte) main::j#1 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  [13] (byte) main::k#2 ← phi( main::@6/(byte) main::k#1 main::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [14] (byte~) main::$1 ← (byte) main::i#7 + (byte) main::j#5
  [15] (byte~) main::$2 ← (byte~) main::$1 + (byte) main::k#2
  [16] *((const byte*) FGCOL#0) ← (byte~) main::$2
  [17] call sub_main 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [18] (byte) main::k#1 ← ++ (byte) main::k#2
  [19] if((byte) main::k#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@6
  [20] (byte) main::j#1 ← ++ (byte) main::j#5
  [21] if((byte) main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [22] (byte) main::i#1 ← ++ (byte) main::i#7
  [23] if((byte) main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto main::@7
  to:main::@1
main::@7: scope:[main]  from main::@5
  [24] phi()
  to:main::@1
sub_main: scope:[sub_main]  from main::@3
  [25] phi()
  to:sub_main::@1
sub_main::@1: scope:[sub_main]  from sub_main sub_main::@5
  [26] (byte) sub_main::i#6 ← phi( sub_main/(byte/signed byte/word/signed word/dword/signed dword) 0 sub_main::@5/(byte) sub_main::i#1 )
  to:sub_main::@2
sub_main::@2: scope:[sub_main]  from sub_main::@1 sub_main::@4
  [27] (byte) sub_main::j#4 ← phi( sub_main::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 sub_main::@4/(byte) sub_main::j#1 )
  to:sub_main::@3
sub_main::@3: scope:[sub_main]  from sub_main::@2 sub_main::@3
  [28] (byte) sub_main::k#2 ← phi( sub_main::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 sub_main::@3/(byte) sub_main::k#1 )
  [29] (byte~) sub_main::$0 ← (byte) sub_main::i#6 + (byte) sub_main::j#4
  [30] (byte~) sub_main::$1 ← (byte~) sub_main::$0 + (byte) sub_main::k#2
  [31] *((const byte*) BGCOL#0) ← (byte~) sub_main::$1
  [32] (byte) sub_main::k#1 ← ++ (byte) sub_main::k#2
  [33] if((byte) sub_main::k#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto sub_main::@3
  to:sub_main::@4
sub_main::@4: scope:[sub_main]  from sub_main::@3
  [34] (byte) sub_main::j#1 ← ++ (byte) sub_main::j#4
  [35] if((byte) sub_main::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto sub_main::@2
  to:sub_main::@5
sub_main::@5: scope:[sub_main]  from sub_main::@4
  [36] (byte) sub_main::i#1 ← ++ (byte) sub_main::i#6
  [37] if((byte) sub_main::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto sub_main::@1
  to:sub_main::@return
sub_main::@return: scope:[sub_main]  from sub_main::@5
  [38] return 
  to:@return
irq: scope:[irq]  from
  [39] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0)
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@5
  [40] (byte) irq::i#7 ← phi( irq/(byte/signed byte/word/signed word/dword/signed dword) 0 irq::@5/(byte) irq::i#1 )
  to:irq::@2
irq::@2: scope:[irq]  from irq::@1 irq::@4
  [41] (byte) irq::j#4 ← phi( irq::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 irq::@4/(byte) irq::j#1 )
  to:irq::@3
irq::@3: scope:[irq]  from irq::@2 irq::@7
  [42] (byte) irq::k#2 ← phi( irq::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 irq::@7/(byte) irq::k#1 )
  [43] (byte~) irq::$0 ← (byte) irq::i#7 + (byte) irq::j#4
  [44] (byte~) irq::$1 ← (byte~) irq::$0 + (byte) irq::k#2
  [45] *((const byte*) FGCOL#0) ← (byte~) irq::$1
  [46] call sub_irq 
  to:irq::@7
irq::@7: scope:[irq]  from irq::@3
  [47] (byte) irq::k#1 ← ++ (byte) irq::k#2
  [48] if((byte) irq::k#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto irq::@3
  to:irq::@4
irq::@4: scope:[irq]  from irq::@7
  [49] (byte) irq::j#1 ← ++ (byte) irq::j#4
  [50] if((byte) irq::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto irq::@2
  to:irq::@5
irq::@5: scope:[irq]  from irq::@4
  [51] (byte) irq::i#1 ← ++ (byte) irq::i#7
  [52] if((byte) irq::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto irq::@1
  to:irq::@6
irq::@6: scope:[irq]  from irq::@5
  [53] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  [54] *((const byte*) BGCOL#0) ← -- *((const byte*) BGCOL#0)
  to:irq::@return
irq::@return: scope:[irq]  from irq::@6
  [55] return 
  to:@return
sub_irq: scope:[sub_irq]  from irq::@3
  [56] phi()
  to:sub_irq::@1
sub_irq::@1: scope:[sub_irq]  from sub_irq sub_irq::@5
  [57] (byte) sub_irq::i#6 ← phi( sub_irq/(byte/signed byte/word/signed word/dword/signed dword) 0 sub_irq::@5/(byte) sub_irq::i#1 )
  to:sub_irq::@2
sub_irq::@2: scope:[sub_irq]  from sub_irq::@1 sub_irq::@4
  [58] (byte) sub_irq::j#4 ← phi( sub_irq::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 sub_irq::@4/(byte) sub_irq::j#1 )
  to:sub_irq::@3
sub_irq::@3: scope:[sub_irq]  from sub_irq::@2 sub_irq::@3
  [59] (byte) sub_irq::k#2 ← phi( sub_irq::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 sub_irq::@3/(byte) sub_irq::k#1 )
  [60] (byte~) sub_irq::$0 ← (byte) sub_irq::i#6 + (byte) sub_irq::j#4
  [61] (byte~) sub_irq::$1 ← (byte~) sub_irq::$0 + (byte) sub_irq::k#2
  [62] *((const byte*) BGCOL#0) ← (byte~) sub_irq::$1
  [63] (byte) sub_irq::k#1 ← ++ (byte) sub_irq::k#2
  [64] if((byte) sub_irq::k#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto sub_irq::@3
  to:sub_irq::@4
sub_irq::@4: scope:[sub_irq]  from sub_irq::@3
  [65] (byte) sub_irq::j#1 ← ++ (byte) sub_irq::j#4
  [66] if((byte) sub_irq::j#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto sub_irq::@2
  to:sub_irq::@5
sub_irq::@5: scope:[sub_irq]  from sub_irq::@4
  [67] (byte) sub_irq::i#1 ← ++ (byte) sub_irq::i#6
  [68] if((byte) sub_irq::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $b) goto sub_irq::@1
  to:sub_irq::@return
sub_irq::@return: scope:[sub_irq]  from sub_irq::@5
  [69] return 
  to:@return
