
(void()) main()
main: scope:[main]  from
  [0] phi()
  [1] call mulf_init 
  to:main::@9
main::@9: scope:[main]  from main
  [2] phi()
  [3] call prepareBobs 
  to:main::@10
main::@10: scope:[main]  from main::@9
  [4] phi()
  [5] call renderBobInit 
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main::@10
  [6] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [7] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [8] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::vicSelectGfxBank1_@1
  [9] phi()
  to:main::@7
main::@7: scope:[main]  from main::toD0181
  [10] *((const nomodify byte*) D018) ← (const byte) main::toD0181_return#0
  [11] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@15 main::@7
  [12] (byte) main::angle#8 ← phi( main::@7/(byte) 0 main::@15/(byte) main::angle#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [13] if(*((const nomodify byte*) RASTER)<(byte) $f8) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@2
  [14] *((const nomodify byte*) BORDER_COLOR) ← (byte) $f
  [15] call renderBobCleanup 
  to:main::@11
main::@11: scope:[main]  from main::@3
  [16] (byte) main::a#6 ← (byte) main::angle#8
  to:main::@4
main::@4: scope:[main]  from main::@11 main::@14
  [17] (byte) main::i#2 ← phi( main::@11/(byte) 0 main::@14/(byte) main::i#1 )
  [17] (byte**) renderBobCleanupNext#19 ← phi( main::@11/(const byte**) RENDERBOB_CLEANUP main::@14/(byte**) renderBobCleanupNext#14 )
  [17] (byte) main::a#2 ← phi( main::@11/(byte) main::a#6 main::@14/(byte) main::a#1 )
  [17] (signed byte) main::r#2 ← phi( main::@11/(signed byte) $1e main::@14/(signed byte) main::r#1 )
  [18] *((const nomodify byte*) BORDER_COLOR) ← (byte) 1
  [19] (signed byte) mulf8s::a#0 ← (signed byte) main::r#2
  [20] (signed byte) mulf8s::b#0 ← *((const signed byte*) COS + (byte) main::a#2)
  [21] call mulf8s 
  [22] (signed word) mulf8s::return#2 ← (signed word) mulf8s::return#0
  to:main::@12
main::@12: scope:[main]  from main::@4
  [23] (signed word~) main::$10 ← (signed word) mulf8s::return#2
  [24] (signed word) main::x#0 ← (signed word~) main::$10 + (signed word)(number) $4b*(number) $100
  [25] (signed byte) mulf8s::a#1 ← (signed byte) main::r#2
  [26] (signed byte) mulf8s::b#1 ← *((const signed byte*) SIN + (byte) main::a#2)
  [27] call mulf8s 
  [28] (signed word) mulf8s::return#3 ← (signed word) mulf8s::return#0
  to:main::@13
main::@13: scope:[main]  from main::@12
  [29] (signed word~) main::$12 ← (signed word) mulf8s::return#3
  [30] (signed word~) main::$13 ← (signed word~) main::$12 << (byte) 1
  [31] (signed word) main::y#0 ← (signed word~) main::$13 + (signed word)(number) $5a*(number) $100
  [32] *((const nomodify byte*) BORDER_COLOR) ← (byte) 2
  [33] (byte) main::a#1 ← (byte) main::a#2 + (byte) $62
  [34] (signed byte) main::r#1 ← (signed byte) main::r#2 + (signed byte) 3
  [35] (byte) renderBob::xpos#0 ← > (signed word) main::x#0
  [36] (byte) renderBob::ypos#0 ← > (signed word) main::y#0
  [37] call renderBob 
  to:main::@14
main::@14: scope:[main]  from main::@13
  [38] (byte) main::i#1 ← ++ (byte) main::i#2
  [39] if((byte) main::i#1!=(const nomodify byte) NUM_BOBS-(byte) 1+(byte) 1) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@14
  [40] (byte) main::angle#1 ← (byte) main::angle#8 + (byte) 3
  [41] *((const nomodify byte*) BORDER_COLOR) ← (byte) 0
  [42] call keyboard_key_pressed 
  [43] (byte) keyboard_key_pressed::return#2 ← (byte) keyboard_key_pressed::return#0
  to:main::@15
main::@15: scope:[main]  from main::@5
  [44] (byte~) main::$19 ← (byte) keyboard_key_pressed::return#2
  [45] if((byte) 0!=(byte~) main::$19) goto main::@6
  to:main::@1
main::@6: scope:[main]  from main::@15 main::@16
  [46] phi()
  [47] call keyboard_key_pressed 
  [48] (byte) keyboard_key_pressed::return#3 ← (byte) keyboard_key_pressed::return#0
  to:main::@16
main::@16: scope:[main]  from main::@6
  [49] (byte~) main::$21 ← (byte) keyboard_key_pressed::return#3
  [50] if((byte) 0!=(byte~) main::$21) goto main::@6
  to:main::vicSelectGfxBank2
main::vicSelectGfxBank2: scope:[main]  from main::@16
  [51] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_A_DDR) ← (byte) 3
  to:main::vicSelectGfxBank2_toDd001
main::vicSelectGfxBank2_toDd001: scope:[main]  from main::vicSelectGfxBank2
  [52] phi()
  to:main::vicSelectGfxBank2_@1
main::vicSelectGfxBank2_@1: scope:[main]  from main::vicSelectGfxBank2_toDd001
  [53] *((byte*)(const nomodify struct MOS6526_CIA*) CIA2) ← (const byte) main::vicSelectGfxBank2_toDd001_return#0
  to:main::toD0182
main::toD0182: scope:[main]  from main::vicSelectGfxBank2_@1
  [54] phi()
  to:main::@8
main::@8: scope:[main]  from main::toD0182
  [55] *((const nomodify byte*) D018) ← (const byte) main::toD0182_return#0
  to:main::@return
main::@return: scope:[main]  from main::@8
  [56] return 
  to:@return

(byte()) keyboard_key_pressed((byte) keyboard_key_pressed::key)
keyboard_key_pressed: scope:[keyboard_key_pressed]  from main::@5 main::@6
  [57] phi()
  [58] call keyboard_matrix_read 
  [59] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_key_pressed::@1
keyboard_key_pressed::@1: scope:[keyboard_key_pressed]  from keyboard_key_pressed
  [60] (byte~) keyboard_key_pressed::$2 ← (byte) keyboard_matrix_read::return#2
  [61] (byte) keyboard_key_pressed::return#0 ← (byte~) keyboard_key_pressed::$2 & *((const byte*) keyboard_matrix_col_bitmask+(const byte) keyboard_key_pressed::colidx#0)
  to:keyboard_key_pressed::@return
keyboard_key_pressed::@return: scope:[keyboard_key_pressed]  from keyboard_key_pressed::@1
  [62] return 
  to:@return

(byte()) keyboard_matrix_read((byte) keyboard_matrix_read::rowid)
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_key_pressed
  [63] *((byte*)(const nomodify struct MOS6526_CIA*) CIA1) ← *((const byte*) keyboard_matrix_row_bitmask+(const byte) keyboard_key_pressed::rowidx#0)
  [64] (byte) keyboard_matrix_read::return#0 ← ~ *((byte*)(const nomodify struct MOS6526_CIA*) CIA1+(const byte) OFFSET_STRUCT_MOS6526_CIA_PORT_B)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [65] return 
  to:@return

(void()) renderBob((byte) renderBob::xpos , (byte) renderBob::ypos)
renderBob: scope:[renderBob]  from main::@13
  [66] (byte) renderBob::x_char_offset#0 ← (byte) renderBob::xpos#0 >> (byte) 2
  [67] (byte) renderBob::y_char_offset#0 ← (byte) renderBob::ypos#0 >> (byte) 3
  [68] (byte~) renderBob::$8 ← (byte) renderBob::y_char_offset#0 << (byte) 1
  [69] (word) renderBob::y_offset#0 ← *((const word*) MUL40 + (byte~) renderBob::$8)
  [70] (byte*~) renderBob::$2 ← (const nomodify byte*) BOB_SCREEN + (word) renderBob::y_offset#0
  [71] (byte*) renderBob::screen#0 ← (byte*~) renderBob::$2 + (byte) renderBob::x_char_offset#0
  [72] (byte~) renderBob::$4 ← (byte) renderBob::ypos#0 & (byte) 7
  [73] (byte~) renderBob::$5 ← (byte~) renderBob::$4 << (byte) 2
  [74] (byte~) renderBob::$6 ← (byte) renderBob::xpos#0 & (byte) 3
  [75] (byte) renderBob::bob_table_idx#0 ← (byte~) renderBob::$5 + (byte~) renderBob::$6
  [76] *((byte**) renderBobCleanupNext#19) ← (byte*) renderBob::screen#0
  [77] (byte**) renderBobCleanupNext#14 ← (byte**) renderBobCleanupNext#19 + (const byte) SIZEOF_POINTER
  [78] *((byte*) renderBob::screen#0) ← *((const byte*) BOB_TABLES + (byte) renderBob::bob_table_idx#0)
  [79] *((byte*) renderBob::screen#0 + (byte) $28) ← *((const byte*) BOB_TABLES+(byte) 1*(const nomodify byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [80] *((byte*) renderBob::screen#0 + (byte) $50) ← *((const byte*) BOB_TABLES+(byte) 2*(const nomodify byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [81] *((byte*) renderBob::screen#0 + (byte) 1) ← *((const byte*) BOB_TABLES+(byte) 3*(const nomodify byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [82] *((byte*) renderBob::screen#0 + (byte) $29) ← *((const byte*) BOB_TABLES+(byte) 4*(const nomodify byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [83] *((byte*) renderBob::screen#0 + (byte) $51) ← *((const byte*) BOB_TABLES+(byte) 5*(const nomodify byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [84] *((byte*) renderBob::screen#0 + (byte) 2) ← *((const byte*) BOB_TABLES+(byte) 6*(const nomodify byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [85] *((byte*) renderBob::screen#0 + (byte) $2a) ← *((const byte*) BOB_TABLES+(byte) 7*(const nomodify byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  [86] *((byte*) renderBob::screen#0 + (byte) $52) ← *((const byte*) BOB_TABLES+(byte) 8*(const nomodify byte) BOB_SUBTABLE_SIZE + (byte) renderBob::bob_table_idx#0)
  to:renderBob::@return
renderBob::@return: scope:[renderBob]  from renderBob
  [87] return 
  to:@return

(signed word()) mulf8s((signed byte) mulf8s::a , (signed byte) mulf8s::b)
mulf8s: scope:[mulf8s]  from main::@12 main::@4
  [88] (signed byte) mulf8s::b#2 ← phi( main::@12/(signed byte) mulf8s::b#1 main::@4/(signed byte) mulf8s::b#0 )
  [88] (signed byte) mulf8s::mulf8s_prepare1_a#0 ← phi( main::@12/(signed byte) mulf8s::a#1 main::@4/(signed byte) mulf8s::a#0 )
  to:mulf8s::mulf8s_prepare1
mulf8s::mulf8s_prepare1: scope:[mulf8s]  from mulf8s
  [89] (byte) mulf8u_prepare::a#0 ← (byte)(signed byte) mulf8s::mulf8s_prepare1_a#0
  [90] call mulf8u_prepare 
  to:mulf8s::@1
mulf8s::@1: scope:[mulf8s]  from mulf8s::mulf8s_prepare1
  [91] (signed byte) mulf8s_prepared::b#0 ← (signed byte) mulf8s::b#2
  [92] call mulf8s_prepared 
  to:mulf8s::@2
mulf8s::@2: scope:[mulf8s]  from mulf8s::@1
  [93] (signed word) mulf8s::return#0 ← (signed word)(word) mulf8s_prepared::m#4
  to:mulf8s::@return
mulf8s::@return: scope:[mulf8s]  from mulf8s::@2
  [94] return 
  to:@return

(signed word()) mulf8s_prepared((signed byte) mulf8s_prepared::b)
mulf8s_prepared: scope:[mulf8s_prepared]  from mulf8s::@1
  [95] (byte) mulf8u_prepared::b#0 ← (byte)(signed byte) mulf8s_prepared::b#0
  [96] call mulf8u_prepared 
  [97] (word) mulf8u_prepared::return#2 ← (word) mulf8u_prepared::return#0
  to:mulf8s_prepared::@5
mulf8s_prepared::@5: scope:[mulf8s_prepared]  from mulf8s_prepared
  [98] (word) mulf8s_prepared::m#0 ← (word) mulf8u_prepared::return#2
  [99] if(*((const nomodify signed byte*) mulf8s_prepared::memA)>=(signed byte) 0) goto mulf8s_prepared::@1
  to:mulf8s_prepared::@3
mulf8s_prepared::@3: scope:[mulf8s_prepared]  from mulf8s_prepared::@5
  [100] (byte~) mulf8s_prepared::$6 ← > (word) mulf8s_prepared::m#0
  [101] (byte~) mulf8s_prepared::$11 ← (byte~) mulf8s_prepared::$6 - (byte)(signed byte) mulf8s_prepared::b#0
  [102] (word) mulf8s_prepared::m#1 ← (word) mulf8s_prepared::m#0 hi= (byte~) mulf8s_prepared::$11
  to:mulf8s_prepared::@1
mulf8s_prepared::@1: scope:[mulf8s_prepared]  from mulf8s_prepared::@3 mulf8s_prepared::@5
  [103] (word) mulf8s_prepared::m#5 ← phi( mulf8s_prepared::@3/(word) mulf8s_prepared::m#1 mulf8s_prepared::@5/(word) mulf8s_prepared::m#0 )
  [104] if((signed byte) mulf8s_prepared::b#0>=(signed byte) 0) goto mulf8s_prepared::@2
  to:mulf8s_prepared::@4
mulf8s_prepared::@4: scope:[mulf8s_prepared]  from mulf8s_prepared::@1
  [105] (byte~) mulf8s_prepared::$9 ← > (word) mulf8s_prepared::m#5
  [106] (byte~) mulf8s_prepared::$12 ← (byte~) mulf8s_prepared::$9 - (byte)*((const nomodify signed byte*) mulf8s_prepared::memA)
  [107] (word) mulf8s_prepared::m#2 ← (word) mulf8s_prepared::m#5 hi= (byte~) mulf8s_prepared::$12
  to:mulf8s_prepared::@2
mulf8s_prepared::@2: scope:[mulf8s_prepared]  from mulf8s_prepared::@1 mulf8s_prepared::@4
  [108] (word) mulf8s_prepared::m#4 ← phi( mulf8s_prepared::@1/(word) mulf8s_prepared::m#5 mulf8s_prepared::@4/(word) mulf8s_prepared::m#2 )
  to:mulf8s_prepared::@return
mulf8s_prepared::@return: scope:[mulf8s_prepared]  from mulf8s_prepared::@2
  [109] return 
  to:@return

(word()) mulf8u_prepared((byte) mulf8u_prepared::b)
mulf8u_prepared: scope:[mulf8u_prepared]  from mulf8s_prepared
  [110] *((const nomodify byte*) mulf8u_prepared::memB) ← (byte) mulf8u_prepared::b#0
  asm { ldxmemB sec sm1: ldamulf_sqr1_lo,x sm2: sbcmulf_sqr2_lo,x staresL sm3: ldamulf_sqr1_hi,x sm4: sbcmulf_sqr2_hi,x stamemB  }
  [112] (word) mulf8u_prepared::return#0 ← *((const nomodify byte*) mulf8u_prepared::memB) w= *((const nomodify byte*) mulf8u_prepared::resL)
  to:mulf8u_prepared::@return
mulf8u_prepared::@return: scope:[mulf8u_prepared]  from mulf8u_prepared
  [113] return 
  to:@return

(void()) mulf8u_prepare((byte) mulf8u_prepare::a)
mulf8u_prepare: scope:[mulf8u_prepare]  from mulf8s::mulf8s_prepare1
  [114] *((const nomodify byte*) mulf8u_prepare::memA) ← (byte) mulf8u_prepare::a#0
  asm { ldamemA stamulf8u_prepared.sm1+1 stamulf8u_prepared.sm3+1 eor#$ff stamulf8u_prepared.sm2+1 stamulf8u_prepared.sm4+1  }
  to:mulf8u_prepare::@return
mulf8u_prepare::@return: scope:[mulf8u_prepare]  from mulf8u_prepare
  [116] return 
  to:@return

(void()) renderBobCleanup()
renderBobCleanup: scope:[renderBobCleanup]  from main::@3
  [117] phi()
  to:renderBobCleanup::@1
renderBobCleanup::@1: scope:[renderBobCleanup]  from renderBobCleanup renderBobCleanup::@1
  [118] (byte) renderBobCleanup::i#2 ← phi( renderBobCleanup/(byte) 0 renderBobCleanup::@1/(byte) renderBobCleanup::i#1 )
  [119] (byte~) renderBobCleanup::$1 ← (byte) renderBobCleanup::i#2 << (byte) 1
  [120] (byte*) renderBobCleanup::screen#0 ← *((const byte**) RENDERBOB_CLEANUP + (byte~) renderBobCleanup::$1)
  [121] *((byte*) renderBobCleanup::screen#0) ← (byte) 0
  [122] *((byte*) renderBobCleanup::screen#0 + (byte) $28) ← (byte) 0
  [123] *((byte*) renderBobCleanup::screen#0 + (byte) $50) ← (byte) 0
  [124] *((byte*) renderBobCleanup::screen#0 + (byte) 1) ← (byte) 0
  [125] *((byte*) renderBobCleanup::screen#0 + (byte) $29) ← (byte) 0
  [126] *((byte*) renderBobCleanup::screen#0 + (byte) $51) ← (byte) 0
  [127] *((byte*) renderBobCleanup::screen#0 + (byte) 2) ← (byte) 0
  [128] *((byte*) renderBobCleanup::screen#0 + (byte) $2a) ← (byte) 0
  [129] *((byte*) renderBobCleanup::screen#0 + (byte) $52) ← (byte) 0
  [130] (byte) renderBobCleanup::i#1 ← ++ (byte) renderBobCleanup::i#2
  [131] if((byte) renderBobCleanup::i#1!=(const nomodify byte) NUM_BOBS-(byte) 1+(byte) 1) goto renderBobCleanup::@1
  to:renderBobCleanup::@return
renderBobCleanup::@return: scope:[renderBobCleanup]  from renderBobCleanup::@1
  [132] return 
  to:@return

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@7
  [133] phi()
  to:memset::@1
memset::@1: scope:[memset]  from memset memset::@2
  [134] (byte*) memset::dst#2 ← phi( memset/(byte*)(const void*) memset::str#0 memset::@2/(byte*) memset::dst#1 )
  [135] if((byte*) memset::dst#2!=(const byte*) memset::end#0) goto memset::@2
  to:memset::@return
memset::@return: scope:[memset]  from memset::@1
  [136] return 
  to:@return
memset::@2: scope:[memset]  from memset::@1
  [137] *((byte*) memset::dst#2) ← (const byte) memset::c#0
  [138] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@1

(void()) renderBobInit()
renderBobInit: scope:[renderBobInit]  from main::@10
  [139] phi()
  to:renderBobInit::@1
renderBobInit::@1: scope:[renderBobInit]  from renderBobInit renderBobInit::@1
  [140] (byte) renderBobInit::y#2 ← phi( renderBobInit/(byte) 0 renderBobInit::@1/(byte) renderBobInit::y#1 )
  [141] (word~) renderBobInit::$5 ← (word)(byte) renderBobInit::y#2
  [142] (word~) renderBobInit::$6 ← (word~) renderBobInit::$5 << (byte) 2
  [143] (word~) renderBobInit::$7 ← (word~) renderBobInit::$6 + (word~) renderBobInit::$5
  [144] (word~) renderBobInit::$0 ← (word~) renderBobInit::$7 << (byte) 3
  [145] (byte~) renderBobInit::$3 ← (byte) renderBobInit::y#2 << (byte) 1
  [146] *((const word*) MUL40 + (byte~) renderBobInit::$3) ← (word~) renderBobInit::$0
  [147] (byte) renderBobInit::y#1 ← ++ (byte) renderBobInit::y#2
  [148] if((byte) renderBobInit::y#1!=(byte) $20) goto renderBobInit::@1
  to:renderBobInit::@2
renderBobInit::@2: scope:[renderBobInit]  from renderBobInit::@1 renderBobInit::@2
  [149] (byte) renderBobInit::i#2 ← phi( renderBobInit::@1/(byte) 0 renderBobInit::@2/(byte) renderBobInit::i#1 )
  [150] (byte~) renderBobInit::$4 ← (byte) renderBobInit::i#2 << (byte) 1
  [151] *((const byte**) RENDERBOB_CLEANUP + (byte~) renderBobInit::$4) ← (const nomodify byte*) BOB_SCREEN
  [152] (byte) renderBobInit::i#1 ← ++ (byte) renderBobInit::i#2
  [153] if((byte) renderBobInit::i#1!=(const nomodify byte) NUM_BOBS-(byte) 1+(byte) 1) goto renderBobInit::@2
  to:renderBobInit::@return
renderBobInit::@return: scope:[renderBobInit]  from renderBobInit::@2
  [154] return 
  to:@return

(void()) prepareBobs()
prepareBobs: scope:[prepareBobs]  from main::@9
  [155] phi()
  to:prepareBobs::@8
prepareBobs::@8: scope:[prepareBobs]  from prepareBobs
  [156] phi()
  [157] call bobCharsetFindOrAddGlyph 
  to:prepareBobs::@1
prepareBobs::@1: scope:[prepareBobs]  from prepareBobs::@8 prepareBobs::@9
  [158] (byte) prepareBobs::bob_table_idx#7 ← phi( prepareBobs::@8/(byte) 0 prepareBobs::@9/(byte) prepareBobs::bob_table_idx#12 )
  [158] (byte) bob_charset_next_id#15 ← phi( prepareBobs::@8/(byte) bob_charset_next_id#17 prepareBobs::@9/(byte) bob_charset_next_id#32 )
  [158] (byte) progress_idx#17 ← phi( prepareBobs::@8/(byte) 0 prepareBobs::@9/(byte) progress_idx#33 )
  [158] (byte*) progress_cursor#16 ← phi( prepareBobs::@8/(const nomodify byte*) SCREEN_BASIC prepareBobs::@9/(byte*) progress_cursor#33 )
  [158] (byte) prepareBobs::shift_y#2 ← phi( prepareBobs::@8/(byte) 0 prepareBobs::@9/(byte) prepareBobs::shift_y#1 )
  [159] if((byte) prepareBobs::shift_y#2<(const nomodify byte) BOB_SHIFTS_Y) goto prepareBobs::@2
  to:prepareBobs::@return
prepareBobs::@return: scope:[prepareBobs]  from prepareBobs::@1
  [160] return 
  to:@return
prepareBobs::@2: scope:[prepareBobs]  from prepareBobs::@1 prepareBobs::@13
  [161] (byte) progress_idx#33 ← phi( prepareBobs::@13/(byte) progress_idx#27 prepareBobs::@1/(byte) progress_idx#17 )
  [161] (byte*) progress_cursor#33 ← phi( prepareBobs::@13/(byte*) progress_cursor#26 prepareBobs::@1/(byte*) progress_cursor#16 )
  [161] (byte) bob_charset_next_id#32 ← phi( prepareBobs::@13/(byte) bob_charset_next_id#23 prepareBobs::@1/(byte) bob_charset_next_id#15 )
  [161] (byte) prepareBobs::bob_table_idx#12 ← phi( prepareBobs::@13/(byte) prepareBobs::bob_table_idx#1 prepareBobs::@1/(byte) prepareBobs::bob_table_idx#7 )
  [161] (byte) prepareBobs::shift_x#2 ← phi( prepareBobs::@13/(byte) prepareBobs::shift_x#1 prepareBobs::@1/(byte) 0 )
  [162] if((byte) prepareBobs::shift_x#2<(const nomodify byte) BOB_SHIFTS_X) goto prepareBobs::@3
  to:prepareBobs::@4
prepareBobs::@4: scope:[prepareBobs]  from prepareBobs::@2
  [163] phi()
  [164] call shiftProtoBobDown 
  to:prepareBobs::@9
prepareBobs::@9: scope:[prepareBobs]  from prepareBobs::@4
  [165] (byte) prepareBobs::shift_y#1 ← ++ (byte) prepareBobs::shift_y#2
  to:prepareBobs::@1
prepareBobs::@3: scope:[prepareBobs]  from prepareBobs::@2
  [166] (byte*) prepareBobs::bob_table#0 ← (const byte*) BOB_TABLES + (byte) prepareBobs::bob_table_idx#12
  to:prepareBobs::@5
prepareBobs::@5: scope:[prepareBobs]  from prepareBobs::@11 prepareBobs::@3
  [167] (byte*) progress_cursor#26 ← phi( prepareBobs::@11/(byte*) progress_cursor#18 prepareBobs::@3/(byte*) progress_cursor#33 )
  [167] (byte) progress_idx#27 ← phi( prepareBobs::@11/(byte) progress_idx#20 prepareBobs::@3/(byte) progress_idx#33 )
  [167] (byte*) prepareBobs::bob_table#2 ← phi( prepareBobs::@11/(byte*) prepareBobs::bob_table#1 prepareBobs::@3/(byte*) prepareBobs::bob_table#0 )
  [167] (byte) bob_charset_next_id#23 ← phi( prepareBobs::@11/(byte) bob_charset_next_id#17 prepareBobs::@3/(byte) bob_charset_next_id#32 )
  [167] (byte*) prepareBobs::bob_glyph#2 ← phi( prepareBobs::@11/(byte*) prepareBobs::bob_glyph#1 prepareBobs::@3/(const to_nomodify byte*) PROTO_BOB )
  [167] (byte) prepareBobs::cell#2 ← phi( prepareBobs::@11/(byte) prepareBobs::cell#1 prepareBobs::@3/(byte) 0 )
  [168] if((byte) prepareBobs::cell#2<(byte) 9) goto prepareBobs::@6
  to:prepareBobs::@7
prepareBobs::@7: scope:[prepareBobs]  from prepareBobs::@5
  [169] (byte) prepareBobs::bob_table_idx#1 ← ++ (byte) prepareBobs::bob_table_idx#12
  [170] call shiftProtoBobRight 
  to:prepareBobs::@12
prepareBobs::@12: scope:[prepareBobs]  from prepareBobs::@7
  [171] phi()
  [172] call shiftProtoBobRight 
  to:prepareBobs::@13
prepareBobs::@13: scope:[prepareBobs]  from prepareBobs::@12
  [173] (byte) prepareBobs::shift_x#1 ← ++ (byte) prepareBobs::shift_x#2
  to:prepareBobs::@2
prepareBobs::@6: scope:[prepareBobs]  from prepareBobs::@5
  [174] (byte*) bobCharsetFindOrAddGlyph::bob_glyph#1 ← (byte*) prepareBobs::bob_glyph#2
  [175] call bobCharsetFindOrAddGlyph 
  [176] (byte) bobCharsetFindOrAddGlyph::return#1 ← (byte) bobCharsetFindOrAddGlyph::glyph_id#11
  to:prepareBobs::@10
prepareBobs::@10: scope:[prepareBobs]  from prepareBobs::@6
  [177] (byte~) prepareBobs::$6 ← (byte) bobCharsetFindOrAddGlyph::return#1
  [178] *((byte*) prepareBobs::bob_table#2) ← (byte~) prepareBobs::$6
  [179] (byte*) prepareBobs::bob_glyph#1 ← (byte*) prepareBobs::bob_glyph#2 + (byte) 8
  [180] (byte*) prepareBobs::bob_table#1 ← (byte*) prepareBobs::bob_table#2 + (const nomodify byte) BOB_SHIFTS_X*(const nomodify byte) BOB_SHIFTS_Y
  [181] call progress_inc 
  to:prepareBobs::@11
prepareBobs::@11: scope:[prepareBobs]  from prepareBobs::@10
  [182] (byte) prepareBobs::cell#1 ← ++ (byte) prepareBobs::cell#2
  to:prepareBobs::@5

(void()) progress_inc()
progress_inc: scope:[progress_inc]  from prepareBobs::@10
  [183] (byte) progress_idx#7 ← ++ (byte) progress_idx#27
  [184] if((byte) progress_idx#7!=(byte) 8) goto progress_inc::@1
  to:progress_inc::@2
progress_inc::@2: scope:[progress_inc]  from progress_inc
  [185] *((byte*) progress_cursor#26) ← *((const to_nomodify byte*) progress_inc::progress_chars+(byte) 8)
  [186] (byte*) progress_cursor#7 ← ++ (byte*) progress_cursor#26
  to:progress_inc::@1
progress_inc::@1: scope:[progress_inc]  from progress_inc progress_inc::@2
  [187] (byte*) progress_cursor#18 ← phi( progress_inc/(byte*) progress_cursor#26 progress_inc::@2/(byte*) progress_cursor#7 )
  [187] (byte) progress_idx#20 ← phi( progress_inc/(byte) progress_idx#7 progress_inc::@2/(byte) 0 )
  [188] *((byte*) progress_cursor#18) ← *((const to_nomodify byte*) progress_inc::progress_chars + (byte) progress_idx#20)
  to:progress_inc::@return
progress_inc::@return: scope:[progress_inc]  from progress_inc::@1
  [189] return 
  to:@return

(byte()) bobCharsetFindOrAddGlyph((byte*) bobCharsetFindOrAddGlyph::bob_glyph)
bobCharsetFindOrAddGlyph: scope:[bobCharsetFindOrAddGlyph]  from prepareBobs::@6 prepareBobs::@8
  [190] (byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 ← phi( prepareBobs::@6/(byte*) bobCharsetFindOrAddGlyph::bob_glyph#1 prepareBobs::@8/(const to_nomodify byte*) PROTO_BOB+(byte) $30 )
  [190] (byte) bob_charset_next_id#25 ← phi( prepareBobs::@6/(byte) bob_charset_next_id#23 prepareBobs::@8/(byte) 0 )
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@1: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph bobCharsetFindOrAddGlyph::@6
  [191] (byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 ← phi( bobCharsetFindOrAddGlyph/(const nomodify byte*) BOB_CHARSET bobCharsetFindOrAddGlyph::@6/(byte*) bobCharsetFindOrAddGlyph::glyph_cursor#1 )
  [191] (byte) bobCharsetFindOrAddGlyph::glyph_id#11 ← phi( bobCharsetFindOrAddGlyph/(byte) 0 bobCharsetFindOrAddGlyph::@6/(byte) bobCharsetFindOrAddGlyph::glyph_id#1 )
  [192] if((byte) bobCharsetFindOrAddGlyph::glyph_id#11!=(byte) bob_charset_next_id#25) goto bobCharsetFindOrAddGlyph::@2
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@7: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1 bobCharsetFindOrAddGlyph::@8
  [193] (byte) bobCharsetFindOrAddGlyph::i1#2 ← phi( bobCharsetFindOrAddGlyph::@8/(byte) bobCharsetFindOrAddGlyph::i1#1 bobCharsetFindOrAddGlyph::@1/(byte) 0 )
  [194] if((byte) bobCharsetFindOrAddGlyph::i1#2<(byte) 8) goto bobCharsetFindOrAddGlyph::@8
  to:bobCharsetFindOrAddGlyph::@9
bobCharsetFindOrAddGlyph::@9: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  [195] (byte) bob_charset_next_id#7 ← ++ (byte) bob_charset_next_id#25
  to:bobCharsetFindOrAddGlyph::@return
bobCharsetFindOrAddGlyph::@return: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5 bobCharsetFindOrAddGlyph::@9
  [196] (byte) bob_charset_next_id#17 ← phi( bobCharsetFindOrAddGlyph::@9/(byte) bob_charset_next_id#7 bobCharsetFindOrAddGlyph::@5/(byte) bob_charset_next_id#25 )
  [197] return 
  to:@return
bobCharsetFindOrAddGlyph::@8: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@7
  [198] *((byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 + (byte) bobCharsetFindOrAddGlyph::i1#2) ← *((byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 + (byte) bobCharsetFindOrAddGlyph::i1#2)
  [199] (byte) bobCharsetFindOrAddGlyph::i1#1 ← ++ (byte) bobCharsetFindOrAddGlyph::i1#2
  to:bobCharsetFindOrAddGlyph::@7
bobCharsetFindOrAddGlyph::@2: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@1 bobCharsetFindOrAddGlyph::@4
  [200] (byte) bobCharsetFindOrAddGlyph::i#2 ← phi( bobCharsetFindOrAddGlyph::@1/(byte) 0 bobCharsetFindOrAddGlyph::@4/(byte) bobCharsetFindOrAddGlyph::i#1 )
  [201] if((byte) bobCharsetFindOrAddGlyph::i#2<(byte) 8) goto bobCharsetFindOrAddGlyph::@3
  to:bobCharsetFindOrAddGlyph::@5
bobCharsetFindOrAddGlyph::@3: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@2
  [202] if(*((byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 + (byte) bobCharsetFindOrAddGlyph::i#2)==*((byte*) bobCharsetFindOrAddGlyph::bob_glyph#10 + (byte) bobCharsetFindOrAddGlyph::i#2)) goto bobCharsetFindOrAddGlyph::@4
  to:bobCharsetFindOrAddGlyph::@5
bobCharsetFindOrAddGlyph::@5: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@2 bobCharsetFindOrAddGlyph::@3
  [203] (byte) bobCharsetFindOrAddGlyph::found#2 ← phi( bobCharsetFindOrAddGlyph::@2/(byte) 1 bobCharsetFindOrAddGlyph::@3/(byte) 0 )
  [204] if((byte) 0==(byte) bobCharsetFindOrAddGlyph::found#2) goto bobCharsetFindOrAddGlyph::@6
  to:bobCharsetFindOrAddGlyph::@return
bobCharsetFindOrAddGlyph::@6: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@5
  [205] (byte) bobCharsetFindOrAddGlyph::glyph_id#1 ← ++ (byte) bobCharsetFindOrAddGlyph::glyph_id#11
  [206] (byte*) bobCharsetFindOrAddGlyph::glyph_cursor#1 ← (byte*) bobCharsetFindOrAddGlyph::glyph_cursor#11 + (byte) 8
  to:bobCharsetFindOrAddGlyph::@1
bobCharsetFindOrAddGlyph::@4: scope:[bobCharsetFindOrAddGlyph]  from bobCharsetFindOrAddGlyph::@3
  [207] (byte) bobCharsetFindOrAddGlyph::i#1 ← ++ (byte) bobCharsetFindOrAddGlyph::i#2
  to:bobCharsetFindOrAddGlyph::@2

(void()) shiftProtoBobRight()
shiftProtoBobRight: scope:[shiftProtoBobRight]  from prepareBobs::@12 prepareBobs::@7
  [208] phi()
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@1: scope:[shiftProtoBobRight]  from shiftProtoBobRight shiftProtoBobRight::@6
  [209] (byte) shiftProtoBobRight::carry#2 ← phi( shiftProtoBobRight/(byte) 0 shiftProtoBobRight::@6/(byte) shiftProtoBobRight::carry#10 )
  [209] (byte) shiftProtoBobRight::j#3 ← phi( shiftProtoBobRight/(byte) 0 shiftProtoBobRight::@6/(byte) shiftProtoBobRight::j#10 )
  [209] (byte) shiftProtoBobRight::i#2 ← phi( shiftProtoBobRight/(byte) 0 shiftProtoBobRight::@6/(byte) shiftProtoBobRight::i#1 )
  [210] if((byte) shiftProtoBobRight::i#2<(byte)(number) 3*(number) 3*(number) 8) goto shiftProtoBobRight::@2
  to:shiftProtoBobRight::@return
shiftProtoBobRight::@return: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  [211] return 
  to:@return
shiftProtoBobRight::@2: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@1
  [212] (byte~) shiftProtoBobRight::$1 ← *((const to_nomodify byte*) PROTO_BOB + (byte) shiftProtoBobRight::j#3) & (byte) 1
  [213] if((byte) 0!=(byte~) shiftProtoBobRight::$1) goto shiftProtoBobRight::@3
  to:shiftProtoBobRight::@4
shiftProtoBobRight::@3: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2
  [214] phi()
  to:shiftProtoBobRight::@4
shiftProtoBobRight::@4: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@2 shiftProtoBobRight::@3
  [215] (byte) shiftProtoBobRight::carry#1 ← phi( shiftProtoBobRight::@3/(byte) $80 shiftProtoBobRight::@2/(byte) 0 )
  [216] (byte~) shiftProtoBobRight::$5 ← *((const to_nomodify byte*) PROTO_BOB + (byte) shiftProtoBobRight::j#3) >> (byte) 1
  [217] (byte~) shiftProtoBobRight::$6 ← (byte) shiftProtoBobRight::carry#2 | (byte~) shiftProtoBobRight::$5
  [218] *((const to_nomodify byte*) PROTO_BOB + (byte) shiftProtoBobRight::j#3) ← (byte~) shiftProtoBobRight::$6
  [219] if((byte) shiftProtoBobRight::j#3>=(byte) $30) goto shiftProtoBobRight::@5
  to:shiftProtoBobRight::@7
shiftProtoBobRight::@7: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@4
  [220] (byte) shiftProtoBobRight::j#2 ← (byte) shiftProtoBobRight::j#3 + (byte) $18
  to:shiftProtoBobRight::@6
shiftProtoBobRight::@6: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@5 shiftProtoBobRight::@7
  [221] (byte) shiftProtoBobRight::j#10 ← phi( shiftProtoBobRight::@5/(byte) shiftProtoBobRight::j#1 shiftProtoBobRight::@7/(byte) shiftProtoBobRight::j#2 )
  [222] (byte) shiftProtoBobRight::i#1 ← ++ (byte) shiftProtoBobRight::i#2
  [223] (byte) shiftProtoBobRight::carry#10 ← (byte) shiftProtoBobRight::carry#1
  to:shiftProtoBobRight::@1
shiftProtoBobRight::@5: scope:[shiftProtoBobRight]  from shiftProtoBobRight::@4
  [224] (byte) shiftProtoBobRight::j#1 ← (byte) shiftProtoBobRight::j#3 - (byte) $2f
  to:shiftProtoBobRight::@6

(void()) shiftProtoBobDown()
shiftProtoBobDown: scope:[shiftProtoBobDown]  from prepareBobs::@4
  [225] phi()
  to:shiftProtoBobDown::@1
shiftProtoBobDown::@1: scope:[shiftProtoBobDown]  from shiftProtoBobDown shiftProtoBobDown::@2
  [226] (byte) shiftProtoBobDown::i#2 ← phi( shiftProtoBobDown/(byte) $17 shiftProtoBobDown::@2/(byte) shiftProtoBobDown::i#1 )
  [227] if((byte) shiftProtoBobDown::i#2>(byte) 0) goto shiftProtoBobDown::@2
  to:shiftProtoBobDown::@3
shiftProtoBobDown::@3: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  [228] *((const to_nomodify byte*) PROTO_BOB) ← (byte) 0
  [229] *((const to_nomodify byte*) PROTO_BOB+(byte) $18) ← (byte) 0
  [230] *((const to_nomodify byte*) PROTO_BOB+(byte) $30) ← (byte) 0
  to:shiftProtoBobDown::@return
shiftProtoBobDown::@return: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@3
  [231] return 
  to:@return
shiftProtoBobDown::@2: scope:[shiftProtoBobDown]  from shiftProtoBobDown::@1
  [232] *((const to_nomodify byte*) PROTO_BOB + (byte) shiftProtoBobDown::i#2) ← *((const to_nomodify byte*) PROTO_BOB+(byte) $17 + (byte) shiftProtoBobDown::i#2)
  [233] *((const to_nomodify byte*) PROTO_BOB+(byte) $18 + (byte) shiftProtoBobDown::i#2) ← *((const to_nomodify byte*) PROTO_BOB+(byte) $2f + (byte) shiftProtoBobDown::i#2)
  [234] *((const to_nomodify byte*) PROTO_BOB+(byte) $30 + (byte) shiftProtoBobDown::i#2) ← (byte) 0
  [235] (byte) shiftProtoBobDown::i#1 ← -- (byte) shiftProtoBobDown::i#2
  to:shiftProtoBobDown::@1

(void()) mulf_init()
mulf_init: scope:[mulf_init]  from main
  [236] phi()
  to:mulf_init::@1
mulf_init::@1: scope:[mulf_init]  from mulf_init mulf_init::@3
  [237] (byte) mulf_init::x_2#3 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::x_2#2 )
  [237] (byte*) mulf_init::sqr1_hi#2 ← phi( mulf_init/(const byte*) mulf_sqr1_hi+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_hi#1 )
  [237] (word) mulf_init::sqr#4 ← phi( mulf_init/(word) 0 mulf_init::@3/(word) mulf_init::sqr#1 )
  [237] (byte) mulf_init::c#2 ← phi( mulf_init/(byte) 0 mulf_init::@3/(byte) mulf_init::c#1 )
  [237] (byte*) mulf_init::sqr1_lo#2 ← phi( mulf_init/(const byte*) mulf_sqr1_lo+(byte) 1 mulf_init::@3/(byte*) mulf_init::sqr1_lo#1 )
  [238] if((byte*) mulf_init::sqr1_lo#2!=(const byte*) mulf_sqr1_lo+(word) $200) goto mulf_init::@2
  to:mulf_init::@5
mulf_init::@5: scope:[mulf_init]  from mulf_init::@1 mulf_init::@8
  [239] (byte) mulf_init::dir#2 ← phi( mulf_init::@1/(byte) $ff mulf_init::@8/(byte) mulf_init::dir#4 )
  [239] (byte*) mulf_init::sqr2_hi#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_hi mulf_init::@8/(byte*) mulf_init::sqr2_hi#1 )
  [239] (byte) mulf_init::x_255#2 ← phi( mulf_init::@1/(byte) -1 mulf_init::@8/(byte) mulf_init::x_255#1 )
  [239] (byte*) mulf_init::sqr2_lo#2 ← phi( mulf_init::@1/(const byte*) mulf_sqr2_lo mulf_init::@8/(byte*) mulf_init::sqr2_lo#1 )
  [240] if((byte*) mulf_init::sqr2_lo#2!=(const byte*) mulf_sqr2_lo+(word) $1ff) goto mulf_init::@6
  to:mulf_init::@7
mulf_init::@7: scope:[mulf_init]  from mulf_init::@5
  [241] *((const byte*) mulf_sqr2_lo+(word) $1ff) ← *((const byte*) mulf_sqr1_lo+(word) $100)
  [242] *((const byte*) mulf_sqr2_hi+(word) $1ff) ← *((const byte*) mulf_sqr1_hi+(word) $100)
  to:mulf_init::@return
mulf_init::@return: scope:[mulf_init]  from mulf_init::@7
  [243] return 
  to:@return
mulf_init::@6: scope:[mulf_init]  from mulf_init::@5
  [244] *((byte*) mulf_init::sqr2_lo#2) ← *((const byte*) mulf_sqr1_lo + (byte) mulf_init::x_255#2)
  [245] *((byte*) mulf_init::sqr2_hi#2) ← *((const byte*) mulf_sqr1_hi + (byte) mulf_init::x_255#2)
  [246] (byte*) mulf_init::sqr2_hi#1 ← ++ (byte*) mulf_init::sqr2_hi#2
  [247] (byte) mulf_init::x_255#1 ← (byte) mulf_init::x_255#2 + (byte) mulf_init::dir#2
  [248] if((byte) mulf_init::x_255#1!=(byte) 0) goto mulf_init::@9
  to:mulf_init::@8
mulf_init::@9: scope:[mulf_init]  from mulf_init::@6
  [249] phi()
  to:mulf_init::@8
mulf_init::@8: scope:[mulf_init]  from mulf_init::@6 mulf_init::@9
  [250] (byte) mulf_init::dir#4 ← phi( mulf_init::@6/(byte) 1 mulf_init::@9/(byte) mulf_init::dir#2 )
  [251] (byte*) mulf_init::sqr2_lo#1 ← ++ (byte*) mulf_init::sqr2_lo#2
  to:mulf_init::@5
mulf_init::@2: scope:[mulf_init]  from mulf_init::@1
  [252] (byte) mulf_init::c#1 ← ++ (byte) mulf_init::c#2
  [253] (byte~) mulf_init::$1 ← (byte) mulf_init::c#1 & (byte) 1
  [254] if((byte~) mulf_init::$1!=(byte) 0) goto mulf_init::@3
  to:mulf_init::@4
mulf_init::@4: scope:[mulf_init]  from mulf_init::@2
  [255] (byte) mulf_init::x_2#1 ← ++ (byte) mulf_init::x_2#3
  [256] (word) mulf_init::sqr#2 ← ++ (word) mulf_init::sqr#4
  to:mulf_init::@3
mulf_init::@3: scope:[mulf_init]  from mulf_init::@2 mulf_init::@4
  [257] (byte) mulf_init::x_2#2 ← phi( mulf_init::@2/(byte) mulf_init::x_2#3 mulf_init::@4/(byte) mulf_init::x_2#1 )
  [257] (word) mulf_init::sqr#3 ← phi( mulf_init::@2/(word) mulf_init::sqr#4 mulf_init::@4/(word) mulf_init::sqr#2 )
  [258] (byte~) mulf_init::$4 ← < (word) mulf_init::sqr#3
  [259] *((byte*) mulf_init::sqr1_lo#2) ← (byte~) mulf_init::$4
  [260] (byte~) mulf_init::$5 ← > (word) mulf_init::sqr#3
  [261] *((byte*) mulf_init::sqr1_hi#2) ← (byte~) mulf_init::$5
  [262] (byte*) mulf_init::sqr1_hi#1 ← ++ (byte*) mulf_init::sqr1_hi#2
  [263] (word) mulf_init::sqr#1 ← (word) mulf_init::sqr#3 + (byte) mulf_init::x_2#2
  [264] (byte*) mulf_init::sqr1_lo#1 ← ++ (byte*) mulf_init::sqr1_lo#2
  to:mulf_init::@1
