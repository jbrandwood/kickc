@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()
main: scope:[main]  from @1
  [4] phi()
  [5] call sin16s_gen 
  to:main::@4
main::@4: scope:[main]  from main
  [6] phi()
  [7] call sin16s_genb 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [8] phi()
  [9] call print_cls 
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@7
  [10] (byte) main::i#2 ← phi( main::@5/(byte) 0 main::@7/(byte) main::i#1 )
  [10] (byte*) print_char_cursor#49 ← phi( main::@5/(const byte*) print_line_cursor#0 main::@7/(byte*) print_char_cursor#2 )
  [10] (signed word*) main::st2#2 ← phi( main::@5/(const signed word[$78]) main::sintab2#0 main::@7/(signed word*) main::st2#1 )
  [10] (signed word*) main::st1#2 ← phi( main::@5/(const signed word[$78]) main::sintab1#0 main::@7/(signed word*) main::st1#1 )
  [11] (signed word) main::sw#0 ← *((signed word*) main::st1#2) - *((signed word*) main::st2#2)
  [12] if((signed word) main::sw#0<(signed byte) 0) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [13] phi()
  [14] call print_str 
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [15] (byte*) print_char_cursor#48 ← phi( main::@1/(byte*) print_char_cursor#49 main::@3/(byte*) print_char_cursor#2 )
  [16] (signed word) print_sword::w#1 ← (signed word) main::sw#0
  [17] call print_sword 
  to:main::@6
main::@6: scope:[main]  from main::@2
  [18] phi()
  [19] call print_str 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [20] (signed word*) main::st1#1 ← (signed word*) main::st1#2 + (const byte) SIZEOF_SIGNED_WORD
  [21] (signed word*) main::st2#1 ← (signed word*) main::st2#2 + (const byte) SIZEOF_SIGNED_WORD
  [22] (byte) main::i#1 ← ++ (byte) main::i#2
  [23] if((byte) main::i#1!=(byte) $78) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@7
  [24] return 
  to:@return
print_str: scope:[print_str]  from main::@3 main::@6
  [25] (byte*) print_char_cursor#51 ← phi( main::@3/(byte*) print_char_cursor#49 main::@6/(byte*) print_char_cursor#12 )
  [25] (byte*) print_str::str#5 ← phi( main::@3/(const string) main::str1 main::@6/(const string) main::str )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@2
  [26] (byte*) print_char_cursor#2 ← phi( print_str/(byte*) print_char_cursor#51 print_str::@2/(byte*) print_char_cursor#1 )
  [26] (byte*) print_str::str#3 ← phi( print_str/(byte*) print_str::str#5 print_str::@2/(byte*) print_str::str#0 )
  [27] if(*((byte*) print_str::str#3)!=(byte) '@') goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [28] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [29] *((byte*) print_char_cursor#2) ← *((byte*) print_str::str#3)
  [30] (byte*) print_char_cursor#1 ← ++ (byte*) print_char_cursor#2
  [31] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#3
  to:print_str::@1
print_sword: scope:[print_sword]  from main::@2
  [32] if((signed word) print_sword::w#1>=(signed byte) 0) goto print_sword::@1
  to:print_sword::@2
print_sword::@2: scope:[print_sword]  from print_sword
  [33] phi()
  [34] call print_char 
  to:print_sword::@3
print_sword::@3: scope:[print_sword]  from print_sword::@2
  [35] (signed word) print_sword::w#0 ← - (signed word) print_sword::w#1
  to:print_sword::@1
print_sword::@1: scope:[print_sword]  from print_sword print_sword::@3
  [36] (byte*) print_char_cursor#43 ← phi( print_sword/(byte*) print_char_cursor#48 print_sword::@3/(byte*) print_char_cursor#12 )
  [36] (signed word) print_sword::w#3 ← phi( print_sword/(signed word) print_sword::w#1 print_sword::@3/(signed word) print_sword::w#0 )
  [37] (word) print_word::w#0 ← (word)(signed word) print_sword::w#3
  [38] call print_word 
  to:print_sword::@return
print_sword::@return: scope:[print_sword]  from print_sword::@1
  [39] return 
  to:@return
print_word: scope:[print_word]  from print_sword::@1
  [40] (byte) print_byte::b#0 ← > (word) print_word::w#0
  [41] call print_byte 
  to:print_word::@1
print_word::@1: scope:[print_word]  from print_word
  [42] (byte) print_byte::b#1 ← < (word) print_word::w#0
  [43] call print_byte 
  to:print_word::@return
print_word::@return: scope:[print_word]  from print_word::@1
  [44] return 
  to:@return
print_byte: scope:[print_byte]  from print_word print_word::@1
  [45] (byte*) print_char_cursor#46 ← phi( print_word/(byte*) print_char_cursor#43 print_word::@1/(byte*) print_char_cursor#12 )
  [45] (byte) print_byte::b#2 ← phi( print_word/(byte) print_byte::b#0 print_word::@1/(byte) print_byte::b#1 )
  [46] (byte~) print_byte::$0 ← (byte) print_byte::b#2 >> (byte) 4
  [47] (byte) print_char::ch#1 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$0)
  [48] call print_char 
  to:print_byte::@1
print_byte::@1: scope:[print_byte]  from print_byte
  [49] (byte~) print_byte::$2 ← (byte) print_byte::b#2 & (byte) $f
  [50] (byte) print_char::ch#2 ← *((const byte[]) print_hextab#0 + (byte~) print_byte::$2)
  [51] call print_char 
  to:print_byte::@return
print_byte::@return: scope:[print_byte]  from print_byte::@1
  [52] return 
  to:@return
print_char: scope:[print_char]  from print_byte print_byte::@1 print_sword::@2
  [53] (byte*) print_char_cursor#33 ← phi( print_byte/(byte*) print_char_cursor#46 print_byte::@1/(byte*) print_char_cursor#12 print_sword::@2/(byte*) print_char_cursor#48 )
  [53] (byte) print_char::ch#3 ← phi( print_byte/(byte) print_char::ch#1 print_byte::@1/(byte) print_char::ch#2 print_sword::@2/(byte) '-' )
  [54] *((byte*) print_char_cursor#33) ← (byte) print_char::ch#3
  [55] (byte*) print_char_cursor#12 ← ++ (byte*) print_char_cursor#33
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [56] return 
  to:@return
print_cls: scope:[print_cls]  from main::@5
  [57] phi()
  to:print_cls::@1
print_cls::@1: scope:[print_cls]  from print_cls print_cls::@1
  [58] (byte*) print_cls::sc#2 ← phi( print_cls/(const byte*) print_line_cursor#0 print_cls::@1/(byte*) print_cls::sc#1 )
  [59] *((byte*) print_cls::sc#2) ← (byte) ' '
  [60] (byte*) print_cls::sc#1 ← ++ (byte*) print_cls::sc#2
  [61] if((byte*) print_cls::sc#1!=(const byte*) print_line_cursor#0+(word) $3e8) goto print_cls::@1
  to:print_cls::@return
print_cls::@return: scope:[print_cls]  from print_cls::@1
  [62] return 
  to:@return
sin16s_genb: scope:[sin16s_genb]  from main::@4
  [63] phi()
  [64] call div32u16u 
  [65] (dword) div32u16u::return#3 ← (dword) div32u16u::return#0
  to:sin16s_genb::@2
sin16s_genb::@2: scope:[sin16s_genb]  from sin16s_genb
  [66] (dword) sin16s_genb::step#0 ← (dword) div32u16u::return#3
  to:sin16s_genb::@1
sin16s_genb::@1: scope:[sin16s_genb]  from sin16s_genb::@2 sin16s_genb::@3
  [67] (word) sin16s_genb::i#2 ← phi( sin16s_genb::@2/(byte) 0 sin16s_genb::@3/(word) sin16s_genb::i#1 )
  [67] (signed word*) sin16s_genb::sintab#2 ← phi( sin16s_genb::@2/(const signed word[$78]) main::sintab2#0 sin16s_genb::@3/(signed word*) sin16s_genb::sintab#0 )
  [67] (dword) sin16s_genb::x#2 ← phi( sin16s_genb::@2/(byte) 0 sin16s_genb::@3/(dword) sin16s_genb::x#1 )
  [68] (word) sin16sb::x#0 ← > (dword) sin16s_genb::x#2
  [69] call sin16sb 
  [70] (signed word) sin16sb::return#0 ← (signed word) sin16sb::return#1
  to:sin16s_genb::@3
sin16s_genb::@3: scope:[sin16s_genb]  from sin16s_genb::@1
  [71] (signed word~) sin16s_genb::$2 ← (signed word) sin16sb::return#0
  [72] *((signed word*) sin16s_genb::sintab#2) ← (signed word~) sin16s_genb::$2
  [73] (signed word*) sin16s_genb::sintab#0 ← (signed word*) sin16s_genb::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [74] (dword) sin16s_genb::x#1 ← (dword) sin16s_genb::x#2 + (dword) sin16s_genb::step#0
  [75] (word) sin16s_genb::i#1 ← ++ (word) sin16s_genb::i#2
  [76] if((word) sin16s_genb::i#1<(const word) main::wavelength#0) goto sin16s_genb::@1
  to:sin16s_genb::@return
sin16s_genb::@return: scope:[sin16s_genb]  from sin16s_genb::@3
  [77] return 
  to:@return
sin16sb: scope:[sin16sb]  from sin16s_genb::@1
  [78] if((word) sin16sb::x#0<(const word) PI_u4f12#0) goto sin16sb::@1
  to:sin16sb::@4
sin16sb::@4: scope:[sin16sb]  from sin16sb
  [79] (word) sin16sb::x#1 ← (word) sin16sb::x#0 - (const word) PI_u4f12#0
  to:sin16sb::@1
sin16sb::@1: scope:[sin16sb]  from sin16sb sin16sb::@4
  [80] (byte) sin16sb::isUpper#2 ← phi( sin16sb/(byte) 0 sin16sb::@4/(byte) 1 )
  [80] (word) sin16sb::x#4 ← phi( sin16sb/(word) sin16sb::x#0 sin16sb::@4/(word) sin16sb::x#1 )
  [81] if((word) sin16sb::x#4<(const word) PI_HALF_u4f12#0) goto sin16sb::@2
  to:sin16sb::@5
sin16sb::@5: scope:[sin16sb]  from sin16sb::@1
  [82] (word) sin16sb::x#2 ← (const word) PI_u4f12#0 - (word) sin16sb::x#4
  to:sin16sb::@2
sin16sb::@2: scope:[sin16sb]  from sin16sb::@1 sin16sb::@5
  [83] (word) sin16sb::x#6 ← phi( sin16sb::@1/(word) sin16sb::x#4 sin16sb::@5/(word) sin16sb::x#2 )
  [84] (word) sin16sb::x1#0 ← (word) sin16sb::x#6 << (byte) 3
  [85] (word) mulu16_sel::v1#5 ← (word) sin16sb::x1#0
  [86] (word) mulu16_sel::v2#5 ← (word) sin16sb::x1#0
  [87] call mulu16_sel 
  [88] (word) mulu16_sel::return#18 ← (word) mulu16_sel::return#17
  to:sin16sb::@7
sin16sb::@7: scope:[sin16sb]  from sin16sb::@2
  [89] (word) sin16sb::x2#0 ← (word) mulu16_sel::return#18
  [90] (word) mulu16_sel::v1#6 ← (word) sin16sb::x2#0
  [91] (word) mulu16_sel::v2#6 ← (word) sin16sb::x1#0
  [92] call mulu16_sel 
  [93] (word) mulu16_sel::return#19 ← (word) mulu16_sel::return#17
  to:sin16sb::@8
sin16sb::@8: scope:[sin16sb]  from sin16sb::@7
  [94] (word) sin16sb::x3#0 ← (word) mulu16_sel::return#19
  [95] (word) mulu16_sel::v1#7 ← (word) sin16sb::x3#0
  [96] call mulu16_sel 
  [97] (word) mulu16_sel::return#20 ← (word) mulu16_sel::return#17
  to:sin16sb::@9
sin16sb::@9: scope:[sin16sb]  from sin16sb::@8
  [98] (word) sin16sb::x3_6#0 ← (word) mulu16_sel::return#20
  [99] (word) sin16sb::usinx#0 ← (word) sin16sb::x1#0 - (word) sin16sb::x3_6#0
  [100] (word) mulu16_sel::v1#8 ← (word) sin16sb::x3#0
  [101] (word) mulu16_sel::v2#8 ← (word) sin16sb::x1#0
  [102] call mulu16_sel 
  [103] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#17
  to:sin16sb::@10
sin16sb::@10: scope:[sin16sb]  from sin16sb::@9
  [104] (word) sin16sb::x4#0 ← (word) mulu16_sel::return#10
  [105] (word) mulu16_sel::v1#9 ← (word) sin16sb::x4#0
  [106] (word) mulu16_sel::v2#9 ← (word) sin16sb::x1#0
  [107] call mulu16_sel 
  [108] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#17
  to:sin16sb::@11
sin16sb::@11: scope:[sin16sb]  from sin16sb::@10
  [109] (word) sin16sb::x5#0 ← (word) mulu16_sel::return#11
  [110] (word) sin16sb::x5_128#0 ← (word) sin16sb::x5#0 >> (byte) 4
  [111] (word) sin16sb::usinx#1 ← (word) sin16sb::usinx#0 + (word) sin16sb::x5_128#0
  [112] if((byte) sin16sb::isUpper#2==(byte) 0) goto sin16sb::@12
  to:sin16sb::@6
sin16sb::@6: scope:[sin16sb]  from sin16sb::@11
  [113] (signed word) sin16sb::sinx#1 ← - (signed word)(word) sin16sb::usinx#1
  to:sin16sb::@3
sin16sb::@3: scope:[sin16sb]  from sin16sb::@12 sin16sb::@6
  [114] (signed word) sin16sb::return#1 ← phi( sin16sb::@12/(signed word~) sin16sb::return#5 sin16sb::@6/(signed word) sin16sb::sinx#1 )
  to:sin16sb::@return
sin16sb::@return: scope:[sin16sb]  from sin16sb::@3
  [115] return 
  to:@return
sin16sb::@12: scope:[sin16sb]  from sin16sb::@11
  [116] (signed word~) sin16sb::return#5 ← (signed word)(word) sin16sb::usinx#1
  to:sin16sb::@3
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9 sin16sb::@10 sin16sb::@2 sin16sb::@7 sin16sb::@8 sin16sb::@9
  [117] (byte) mulu16_sel::select#10 ← phi( sin16s::@9/(byte) 0 sin16s::@10/(byte) 0 sin16s::@2/(byte) 0 sin16s::@7/(byte) 1 sin16s::@8/(byte) 1 sin16sb::@9/(byte) 0 sin16sb::@10/(byte) 0 sin16sb::@2/(byte) 0 sin16sb::@7/(byte) 1 sin16sb::@8/(byte) 1 )
  [117] (word) mulu16_sel::v2#10 ← phi( sin16s::@9/(word) mulu16_sel::v2#3 sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(word)(number) $10000/(number) 6 sin16sb::@9/(word) mulu16_sel::v2#8 sin16sb::@10/(word) mulu16_sel::v2#9 sin16sb::@2/(word) mulu16_sel::v2#5 sin16sb::@7/(word) mulu16_sel::v2#6 sin16sb::@8/(word)(number) $10000/(number) 6 )
  [117] (word) mulu16_sel::v1#10 ← phi( sin16s::@9/(word) mulu16_sel::v1#3 sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 sin16sb::@9/(word) mulu16_sel::v1#8 sin16sb::@10/(word) mulu16_sel::v1#9 sin16sb::@2/(word) mulu16_sel::v1#5 sin16sb::@7/(word) mulu16_sel::v1#6 sin16sb::@8/(word) mulu16_sel::v1#7 )
  [118] (word) mul16u::a#1 ← (word) mulu16_sel::v1#10
  [119] (word) mul16u::b#0 ← (word) mulu16_sel::v2#10
  [120] call mul16u 
  [121] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [122] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#2
  [123] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#10
  [124] (word) mulu16_sel::return#17 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [125] return 
  to:@return
mul16u: scope:[mul16u]  from mulu16_sel
  [126] phi()
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [127] (dword) mul16u::mb#2 ← phi( mul16u/(word) mul16u::b#0 mul16u::@3/(dword) mul16u::mb#1 )
  [127] (dword) mul16u::res#2 ← phi( mul16u/(byte) 0 mul16u::@3/(dword) mul16u::res#6 )
  [127] (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#1 mul16u::@3/(word) mul16u::a#0 )
  [128] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [129] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [130] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1
  [131] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [132] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [133] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [134] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1
  [135] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1
div32u16u: scope:[div32u16u]  from sin16s_gen sin16s_genb
  [136] phi()
  [137] call divr16u 
  [138] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [139] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [140] (word) divr16u::rem#4 ← (word) rem16u#1
  [141] call divr16u 
  [142] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [143] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [144] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [145] return 
  to:@return
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [146] (word) divr16u::dividend#5 ← phi( div32u16u/>(const dword) PI2_u4f28#0 div32u16u::@1/<(const dword) PI2_u4f28#0 )
  [146] (word) divr16u::rem#10 ← phi( div32u16u/(byte) 0 div32u16u::@1/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [147] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [147] (word) divr16u::quotient#3 ← phi( divr16u/(byte) 0 divr16u::@3/(word) divr16u::return#0 )
  [147] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [147] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [148] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte) 1
  [149] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [150] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [151] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [152] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [153] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [154] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte) 1
  [155] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [156] if((word) divr16u::rem#6<(const word) main::wavelength#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [157] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [158] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) main::wavelength#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [159] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [159] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [160] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [161] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [162] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [163] return 
  to:@return
sin16s_gen: scope:[sin16s_gen]  from main
  [164] phi()
  [165] call div32u16u 
  [166] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen::@2
sin16s_gen::@2: scope:[sin16s_gen]  from sin16s_gen
  [167] (dword) sin16s_gen::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen::@1
sin16s_gen::@1: scope:[sin16s_gen]  from sin16s_gen::@2 sin16s_gen::@3
  [168] (word) sin16s_gen::i#2 ← phi( sin16s_gen::@2/(byte) 0 sin16s_gen::@3/(word) sin16s_gen::i#1 )
  [168] (signed word*) sin16s_gen::sintab#2 ← phi( sin16s_gen::@2/(const signed word[$78]) main::sintab1#0 sin16s_gen::@3/(signed word*) sin16s_gen::sintab#0 )
  [168] (dword) sin16s_gen::x#2 ← phi( sin16s_gen::@2/(byte) 0 sin16s_gen::@3/(dword) sin16s_gen::x#1 )
  [169] (dword) sin16s::x#0 ← (dword) sin16s_gen::x#2
  [170] call sin16s 
  [171] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen::@3
sin16s_gen::@3: scope:[sin16s_gen]  from sin16s_gen::@1
  [172] (signed word~) sin16s_gen::$1 ← (signed word) sin16s::return#0
  [173] *((signed word*) sin16s_gen::sintab#2) ← (signed word~) sin16s_gen::$1
  [174] (signed word*) sin16s_gen::sintab#0 ← (signed word*) sin16s_gen::sintab#2 + (const byte) SIZEOF_SIGNED_WORD
  [175] (dword) sin16s_gen::x#1 ← (dword) sin16s_gen::x#2 + (dword) sin16s_gen::step#0
  [176] (word) sin16s_gen::i#1 ← ++ (word) sin16s_gen::i#2
  [177] if((word) sin16s_gen::i#1<(const word) main::wavelength#0) goto sin16s_gen::@1
  to:sin16s_gen::@return
sin16s_gen::@return: scope:[sin16s_gen]  from sin16s_gen::@3
  [178] return 
  to:@return
sin16s: scope:[sin16s]  from sin16s_gen::@1
  [179] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [180] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [181] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte) 0 sin16s::@4/(byte) 1 )
  [181] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [182] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [183] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [184] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [185] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte) 3
  [186] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [187] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [188] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [189] call mulu16_sel 
  [190] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#17
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [191] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [192] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [193] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [194] call mulu16_sel 
  [195] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#17
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [196] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [197] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [198] call mulu16_sel 
  [199] (word) mulu16_sel::return#14 ← (word) mulu16_sel::return#17
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [200] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#14
  [201] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [202] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [203] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [204] call mulu16_sel 
  [205] (word) mulu16_sel::return#15 ← (word) mulu16_sel::return#17
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [206] (word) sin16s::x4#0 ← (word) mulu16_sel::return#15
  [207] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [208] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [209] call mulu16_sel 
  [210] (word) mulu16_sel::return#16 ← (word) mulu16_sel::return#17
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [211] (word) sin16s::x5#0 ← (word) mulu16_sel::return#16
  [212] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte) 4
  [213] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [214] if((byte) sin16s::isUpper#2==(byte) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [215] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [216] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word~) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [217] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [218] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
