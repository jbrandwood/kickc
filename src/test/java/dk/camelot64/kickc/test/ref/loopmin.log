PARSING src/test/java/dk/camelot64/kickc/test/kc/loopmin.kc
void main() {
  byte i=10;
  byte s=0;
  do {
    if(i>5) {
      s=s+i;
    }
    i--;
  } while (i>0);
}
Adding pre/post-modifier (byte) main::i ← -- (byte) main::i

STATEMENTS
proc (void()) main()
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) main::s ← (byte/signed byte/word/signed word/dword/signed dword) 0
main::@1:
  (boolean~) main::$0 ← (byte) main::i > (byte/signed byte/word/signed word/dword/signed dword) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  (byte~) main::$2 ← (byte) main::s + (byte) main::i
  (byte) main::s ← (byte~) main::$2
main::@2:
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$3 ← (byte) main::i > (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) main::$3) goto main::@1
main::@return:
  return 
endproc // main()
  call main 

SYMBOLS
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(byte~) main::$2
(boolean~) main::$3
(label) main::@1
(label) main::@2
(label) main::@return
(byte) main::i
(byte) main::s

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) main::s ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (boolean~) main::$0 ← (byte) main::i > (byte/signed byte/word/signed word/dword/signed dword) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::i ← -- (byte) main::i
  (boolean~) main::$3 ← (byte) main::i > (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  (byte~) main::$2 ← (byte) main::s + (byte) main::i
  (byte) main::s ← (byte~) main::$2
  to:main::@2
main::@4: scope:[main]  from main::@2
  to:main::@return
main::@return: scope:[main]  from main::@4
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @1

Removing empty block main::@4
PROCEDURE MODIFY VARIABLE ANALYSIS

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...

CONTROL FLOW GRAPH SSA WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  to:@1
main: scope:[main]  from @1
  (byte) main::i#0 ← (byte/signed byte/word/signed word/dword/signed dword) 10
  (byte) main::s#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  (byte) main::s#3 ← phi( main/(byte) main::s#0 main::@2/(byte) main::s#4 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@2/(byte) main::i#1 )
  (boolean~) main::$0 ← (byte) main::i#2 > (byte/signed byte/word/signed word/dword/signed dword) 5
  (boolean~) main::$1 ← ! (boolean~) main::$0
  if((boolean~) main::$1) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  (byte) main::s#4 ← phi( main::@1/(byte) main::s#3 main::@3/(byte) main::s#1 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 main::@3/(byte) main::i#4 )
  (byte) main::i#1 ← -- (byte) main::i#3
  (boolean~) main::$3 ← (byte) main::i#1 > (byte/signed byte/word/signed word/dword/signed dword) 0
  if((boolean~) main::$3) goto main::@1
  to:main::@return
main::@3: scope:[main]  from main::@1
  (byte) main::i#4 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::s#2 ← phi( main::@1/(byte) main::s#3 )
  (byte~) main::$2 ← (byte) main::s#2 + (byte) main::i#4
  (byte) main::s#1 ← (byte~) main::$2
  to:main::@2
main::@return: scope:[main]  from main::@2
  return 
  to:@return
@1: scope:[]  from @begin
  call main param-assignment
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(void()) main()
(boolean~) main::$0
(boolean~) main::$1
(byte~) main::$2
(boolean~) main::$3
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::s
(byte) main::s#0
(byte) main::s#1
(byte) main::s#2
(byte) main::s#3
(byte) main::s#4

OPTIMIZING CONTROL FLOW GRAPH
Culled Empty Block (label) @2
Succesful SSA optimization Pass2CullEmptyBlocks
Inversing boolean not (boolean~) main::$1 ← (byte) main::i#2 <= (byte/signed byte/word/signed word/dword/signed dword) 5 from (boolean~) main::$0 ← (byte) main::i#2 > (byte/signed byte/word/signed word/dword/signed dword) 5
Succesful SSA optimization Pass2UnaryNotSimplification
Alias (byte) main::s#2 = (byte) main::s#3 
Alias (byte) main::i#2 = (byte) main::i#4 
Alias (byte) main::s#1 = (byte~) main::$2 
Succesful SSA optimization Pass2AliasElimination
Alias (byte) main::i#2 = (byte) main::i#3 
Succesful SSA optimization Pass2AliasElimination
Simple Condition (boolean~) main::$1 if((byte) main::i#2<=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2
Simple Condition (boolean~) main::$3 if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1
Succesful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::i#0 = 10
Constant (const byte) main::s#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
OPTIMIZING CONTROL FLOW GRAPH
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::s#0
Inlining constant with var siblings (const byte) main::s#0
Constant inlined main::i#0 = (byte/signed byte/word/signed word/dword/signed dword) 10
Constant inlined main::s#0 = (byte/signed byte/word/signed word/dword/signed dword) 0
Succesful SSA optimization Pass2ConstantInlining
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Added new block during phi lifting main::@5(between main::@2 and main::@1)
Added new block during phi lifting main::@6(between main::@1 and main::@2)
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return main::@5 main::@6 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Created 3 initial phi equivalence classes
Coalesced [8] main::s#7 ← main::s#1
Coalesced [13] main::i#5 ← main::i#1
Coalesced [14] main::s#5 ← main::s#4
Coalesced (already) [15] main::s#6 ← main::s#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) main::@5
Culled Empty Block (label) main::@6
Block Sequence Planned @begin @1 @end main main::@1 main::@3 main::@2 main::@return 
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi() [ ] ( )
  to:@1
@1: scope:[]  from @begin
  [1] phi() [ ] ( )
  [2] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @1
  [3] phi() [ ] ( )
main: scope:[main]  from @1
  [4] phi() [ ] ( main:2 [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [5] (byte) main::s#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@2/(byte) main::s#4 ) [ main::i#2 main::s#2 ] ( main:2 [ main::i#2 main::s#2 ] )
  [5] (byte) main::i#2 ← phi( main/(byte/signed byte/word/signed word/dword/signed dword) 10 main::@2/(byte) main::i#1 ) [ main::i#2 main::s#2 ] ( main:2 [ main::i#2 main::s#2 ] )
  [6] if((byte) main::i#2<=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2 [ main::i#2 main::s#2 ] ( main:2 [ main::i#2 main::s#2 ] )
  to:main::@3
main::@3: scope:[main]  from main::@1
  [7] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] ( main:2 [ main::i#2 main::s#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@3
  [8] (byte) main::s#4 ← phi( main::@1/(byte) main::s#2 main::@3/(byte) main::s#1 ) [ main::i#2 main::s#4 ] ( main:2 [ main::i#2 main::s#4 ] )
  [9] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] ( main:2 [ main::i#1 main::s#4 ] )
  [10] if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::i#1 main::s#4 ] ( main:2 [ main::i#1 main::s#4 ] )
  to:main::@return
main::@return: scope:[main]  from main::@2
  [11] return  [ ] ( main:2 [ ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@1 dominated by  @1 @begin 
@end dominated by  @1 @begin @end 
main dominated by  @1 @begin main 
main::@1 dominated by  @1 @begin main::@1 main 
main::@3 dominated by  @1 @begin main::@1 main main::@3 
main::@2 dominated by  @1 @begin main::@1 main::@2 main 
main::@return dominated by  main::@return @1 @begin main::@1 main::@2 main 

NATURAL LOOPS
Found back edge: Loop head: main::@1 tails: main::@2 blocks: null
Populated: Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 

NATURAL LOOPS WITH DEPTH
Found 0 loops in scope []
Found 1 loops in scope [main]
  Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3 
Loop head: main::@1 tails: main::@2 blocks: main::@2 main::@1 main::@3  depth: 1


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(byte) main::s
(byte) main::s#1 22.0
(byte) main::s#2 16.5
(byte) main::s#4 11.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#2 main::s#4 main::s#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::s#2 main::s#4 main::s#1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::s#2 main::s#4 main::s#1 ]

INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
    .label i = 2
    .label s = 3
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::s#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta s
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 10 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #$a
    sta i
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [5] phi (byte) main::s#2 = (byte) main::s#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [6] if((byte) main::i#2<=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2 [ main::i#2 main::s#2 ] ( main:2 [ main::i#2 main::s#2 ] ) -- vbuz1_le_vbuc1_then_la1 
    lda #5
    cmp i
    bcs b2_from_b1
    jmp b3
  //SEG18 main::@3
  b3:
  //SEG19 [7] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] ( main:2 [ main::i#2 main::s#1 ] ) -- vbuz1=vbuz1_plus_vbuz2 
    lda s
    clc
    adc i
    sta s
  //SEG20 [8] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG21 [8] phi (byte) main::s#4 = (byte) main::s#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp b2
  //SEG22 main::@2
  b2:
  //SEG23 [9] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] ( main:2 [ main::i#1 main::s#4 ] ) -- vbuz1=_dec_vbuz1 
    dec i
  //SEG24 [10] if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::i#1 main::s#4 ] ( main:2 [ main::i#1 main::s#4 ] ) -- vbuz1_gt_0_then_la1 
    lda i
    bne b1_from_b2
    jmp breturn
  //SEG25 main::@return
  breturn:
  //SEG26 [11] return  [ ] ( main:2 [ ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::s#2 main::s#4 main::s#1 ] : zp ZP_BYTE:3 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 49.5: zp ZP_BYTE:3 [ main::s#2 main::s#4 main::s#1 ] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 423 combination reg byte a [ main::s#2 main::s#4 main::s#1 ] reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 423 combination 

ASSEMBLER BEFORE OPTIMIZATION
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
bbegin:
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
//SEG4 @1
b1:
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
//SEG8 @end
bend:
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG11 [5] phi (byte) main::s#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #0
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 10 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #$a
    jmp b1
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  b1_from_b2:
  //SEG14 [5] phi (byte) main::s#2 = (byte) main::s#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
    jmp b1
  //SEG16 main::@1
  b1:
  //SEG17 [6] if((byte) main::i#2<=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2 [ main::i#2 main::s#2 ] ( main:2 [ main::i#2 main::s#2 ] ) -- vbuxx_le_vbuc1_then_la1 
    cpx #5
    bcc b2_from_b1
    beq b2_from_b1
    jmp b3
  //SEG18 main::@3
  b3:
  //SEG19 [7] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] ( main:2 [ main::i#2 main::s#1 ] ) -- vbuaa=vbuaa_plus_vbuxx 
    stx $ff
    clc
    adc $ff
  //SEG20 [8] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  b2_from_b1:
  b2_from_b3:
  //SEG21 [8] phi (byte) main::s#4 = (byte) main::s#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
    jmp b2
  //SEG22 main::@2
  b2:
  //SEG23 [9] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] ( main:2 [ main::i#1 main::s#4 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG24 [10] if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::i#1 main::s#4 ] ( main:2 [ main::i#1 main::s#4 ] ) -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b1_from_b2
    jmp breturn
  //SEG25 main::@return
  breturn:
  //SEG26 [11] return  [ ] ( main:2 [ ] )
    rts
}

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b3
Removing instruction jmp b2
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label b2_from_b1 with b2
Replacing label b2_from_b1 with b2
Replacing label b1_from_b2 with b1
Removing instruction bbegin:
Removing instruction b1_from_bbegin:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b2:
Removing instruction b2_from_b1:
Removing instruction b2_from_b3:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction b1:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction b3:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 11.0
(byte) main::s
(byte) main::s#1 reg byte a 22.0
(byte) main::s#2 reg byte a 16.5
(byte) main::s#4 reg byte a 11.0

reg byte x [ main::i#2 main::i#1 ]
reg byte a [ main::s#2 main::s#4 main::s#1 ]


FINAL ASSEMBLER
Score: 267

//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
//SEG2 @begin
//SEG3 [1] phi from @begin to @1 [phi:@begin->@1]
//SEG4 @1
//SEG5 [2] call main param-assignment [ ] ( )
//SEG6 [4] phi from @1 to main [phi:@1->main]
  jsr main
//SEG7 [3] phi from @1 to @end [phi:@1->@end]
//SEG8 @end
//SEG9 main
main: {
  //SEG10 [5] phi from main to main::@1 [phi:main->main::@1]
  //SEG11 [5] phi (byte) main::s#2 = (byte/signed byte/word/signed word/dword/signed dword) 0 [phi:main->main::@1#0] -- vbuaa=vbuc1 
    lda #0
  //SEG12 [5] phi (byte) main::i#2 = (byte/signed byte/word/signed word/dword/signed dword) 10 [phi:main->main::@1#1] -- vbuxx=vbuc1 
    ldx #$a
  //SEG13 [5] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  //SEG14 [5] phi (byte) main::s#2 = (byte) main::s#4 [phi:main::@2->main::@1#0] -- register_copy 
  //SEG15 [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@2->main::@1#1] -- register_copy 
  //SEG16 main::@1
  b1:
  //SEG17 [6] if((byte) main::i#2<=(byte/signed byte/word/signed word/dword/signed dword) 5) goto main::@2 [ main::i#2 main::s#2 ] ( main:2 [ main::i#2 main::s#2 ] ) -- vbuxx_le_vbuc1_then_la1 
    cpx #5
    bcc b2
    beq b2
  //SEG18 main::@3
  //SEG19 [7] (byte) main::s#1 ← (byte) main::s#2 + (byte) main::i#2 [ main::i#2 main::s#1 ] ( main:2 [ main::i#2 main::s#1 ] ) -- vbuaa=vbuaa_plus_vbuxx 
    stx $ff
    clc
    adc $ff
  //SEG20 [8] phi from main::@1 main::@3 to main::@2 [phi:main::@1/main::@3->main::@2]
  //SEG21 [8] phi (byte) main::s#4 = (byte) main::s#2 [phi:main::@1/main::@3->main::@2#0] -- register_copy 
  //SEG22 main::@2
  b2:
  //SEG23 [9] (byte) main::i#1 ← -- (byte) main::i#2 [ main::i#1 main::s#4 ] ( main:2 [ main::i#1 main::s#4 ] ) -- vbuxx=_dec_vbuxx 
    dex
  //SEG24 [10] if((byte) main::i#1>(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@1 [ main::i#1 main::s#4 ] ( main:2 [ main::i#1 main::s#4 ] ) -- vbuxx_gt_0_then_la1 
    cpx #0
    bne b1
  //SEG25 main::@return
  //SEG26 [11] return  [ ] ( main:2 [ ] )
    rts
}

