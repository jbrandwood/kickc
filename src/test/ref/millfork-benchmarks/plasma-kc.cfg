
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] rand_state = 1
  [2] last_time = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [3] phi()
  [4] call main
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [5] return 
  to:@return

int main()
main: scope:[main]  from __start::@1
  [6] phi()
  [7] call makechar
  to:main::@4
main::@4: scope:[main]  from main
  [8] phi()
  [9] call start
  to:main::@5
main::@5: scope:[main]  from main::@4
  [10] main::block#1 = *((char *)CIA2)
  [11] main::tmp#1 = main::block#1 & $fc
  [12] *((char *)CIA2) = main::tmp#1
  [13] main::v#1 = *VICII_MEMORY
  to:main::@1
main::@1: scope:[main]  from main::@5 main::@7
  [14] main::count#2 = phi( main::@5/$1f4, main::@7/main::count#1 )
  [15] if(0!=main::count#2) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@1
  [16] *VICII_MEMORY = main::v#1
  [17] *((char *)CIA2) = main::block#1
  [18] call end
  to:main::@return
main::@return: scope:[main]  from main::@3
  [19] return 
  to:@return
main::@2: scope:[main]  from main::@1
  [20] phi()
  [21] call doplasma
  to:main::@6
main::@6: scope:[main]  from main::@2
  [22] *VICII_MEMORY = PAGE1
  [23] call doplasma
  to:main::@7
main::@7: scope:[main]  from main::@6
  [24] *VICII_MEMORY = PAGE2
  [25] main::count#1 = -- main::count#2
  to:main::@1

void makechar()
makechar: scope:[makechar]  from main
  [26] phi()
  to:makechar::@1
makechar::@1: scope:[makechar]  from makechar makechar::@4
  [27] makechar::c#3 = phi( makechar/0, makechar::@4/makechar::c#2 )
  [28] if(makechar::c#3<$100) goto makechar::@2
  to:makechar::@return
makechar::@return: scope:[makechar]  from makechar::@1
  [29] return 
  to:@return
makechar::@2: scope:[makechar]  from makechar::@1
  [30] makechar::$9 = (char)makechar::c#3
  [31] makechar::s#1 = sinetable[makechar::$9]
  to:makechar::@3
makechar::@3: scope:[makechar]  from makechar::@2 makechar::@7
  [32] makechar::i#3 = phi( makechar::@2/0, makechar::@7/makechar::i#2 )
  [33] if(makechar::i#3<8) goto makechar::@5
  to:makechar::@4
makechar::@4: scope:[makechar]  from makechar::@3
  [34] makechar::c#2 = ++ makechar::c#3
  to:makechar::@1
makechar::@5: scope:[makechar]  from makechar::@3 makechar::@8
  [35] makechar::b#3 = phi( makechar::@3/0, makechar::@8/makechar::b#7 )
  [35] makechar::ii#3 = phi( makechar::@3/0, makechar::@8/makechar::ii#2 )
  [36] if(makechar::ii#3<8) goto makechar::@6
  to:makechar::@7
makechar::@7: scope:[makechar]  from makechar::@5
  [37] makechar::$7 = makechar::c#3 << 3
  [38] makechar::$8 = makechar::$7 + makechar::i#3
  [39] makechar::$10 = CHARSET + makechar::$8
  [40] *makechar::$10 = makechar::b#3
  [41] makechar::i#2 = ++ makechar::i#3
  to:makechar::@3
makechar::@6: scope:[makechar]  from makechar::@5
  [42] phi()
  [43] call rand
  [44] rand::return#2 = rand::return#0
  to:makechar::@10
makechar::@10: scope:[makechar]  from makechar::@6
  [45] makechar::$3 = rand::return#2
  [46] makechar::$4 = makechar::$3 & $ff
  [47] if(makechar::$4<=makechar::s#1) goto makechar::@8
  to:makechar::@9
makechar::@9: scope:[makechar]  from makechar::@10
  [48] makechar::b#2 = makechar::b#3 | bittab[makechar::ii#3]
  to:makechar::@8
makechar::@8: scope:[makechar]  from makechar::@10 makechar::@9
  [49] makechar::b#7 = phi( makechar::@9/makechar::b#2, makechar::@10/makechar::b#3 )
  [50] makechar::ii#2 = ++ makechar::ii#3
  to:makechar::@5

void start()
start: scope:[start]  from end main::@4
  asm { jsr$FFDE staLAST_TIME stxLAST_TIME+1  }
  to:start::@return
start::@return: scope:[start]  from start
  [52] return 
  to:@return

void end()
end: scope:[end]  from main::@3
  [53] Ticks#0 = last_time
  [54] call start
  to:end::@1
end::@1: scope:[end]  from end
  [55] last_time = last_time - Ticks#0
  [56] Ticks#1 = last_time
  [57] print_uint::w#0 = Ticks#1
  [58] call print_uint
  to:end::@2
end::@2: scope:[end]  from end::@1
  [59] phi()
  [60] call print_ln
  to:end::@return
end::@return: scope:[end]  from end::@2
  [61] return 
  to:@return

void doplasma(char *scrn)
doplasma: scope:[doplasma]  from main::@2 main::@6
  [62] doplasma::scrn#13 = phi( main::@2/SCREEN1, main::@6/SCREEN2 )
  to:doplasma::@1
doplasma::@1: scope:[doplasma]  from doplasma doplasma::@2
  [63] doplasma::c1b#3 = phi( doplasma/0, doplasma::@2/doplasma::c1b#2 )
  [63] doplasma::c1a#3 = phi( doplasma/0, doplasma::@2/doplasma::c1a#2 )
  [63] doplasma::ii#3 = phi( doplasma/0, doplasma::@2/doplasma::ii#2 )
  [64] if(doplasma::ii#3<$19) goto doplasma::@2
  to:doplasma::@3
doplasma::@3: scope:[doplasma]  from doplasma::@1 doplasma::@4
  [65] doplasma::c2b#3 = phi( doplasma::@1/doplasma::c2B#0, doplasma::@4/doplasma::c2b#2 )
  [65] doplasma::c2a#3 = phi( doplasma::@1/doplasma::c2A#0, doplasma::@4/doplasma::c2a#2 )
  [65] doplasma::i#3 = phi( doplasma::@1/0, doplasma::@4/doplasma::i#2 )
  [66] if(doplasma::i#3<$28) goto doplasma::@4
  to:doplasma::@5
doplasma::@5: scope:[doplasma]  from doplasma::@3 doplasma::@8
  [67] doplasma::scrn#6 = phi( doplasma::@8/doplasma::scrn#0, doplasma::@3/doplasma::scrn#13 )
  [67] doplasma::jj#3 = phi( doplasma::@8/doplasma::jj#2, doplasma::@3/0 )
  [68] if(doplasma::jj#3<$19) goto doplasma::@6
  to:doplasma::@return
doplasma::@return: scope:[doplasma]  from doplasma::@5
  [69] return 
  to:@return
doplasma::@6: scope:[doplasma]  from doplasma::@5 doplasma::@7
  [70] doplasma::j#3 = phi( doplasma::@7/doplasma::j#2, doplasma::@5/0 )
  [71] if(doplasma::j#3<$28) goto doplasma::@7
  to:doplasma::@8
doplasma::@8: scope:[doplasma]  from doplasma::@6
  [72] doplasma::scrn#0 = doplasma::scrn#6 + $28
  [73] doplasma::jj#2 = ++ doplasma::jj#3
  to:doplasma::@5
doplasma::@7: scope:[doplasma]  from doplasma::@6
  [74] doplasma::$6 = xbuf[doplasma::j#3] + ybuf[doplasma::jj#3]
  [75] doplasma::scrn#6[doplasma::j#3] = doplasma::$6
  [76] doplasma::j#2 = ++ doplasma::j#3
  to:doplasma::@6
doplasma::@4: scope:[doplasma]  from doplasma::@3
  [77] doplasma::$3 = sinetable[doplasma::c2a#3] + sinetable[doplasma::c2b#3]
  [78] xbuf[doplasma::i#3] = doplasma::$3
  [79] doplasma::c2a#2 = doplasma::c2a#3 + 3
  [80] doplasma::c2b#2 = doplasma::c2b#3 + 7
  [81] doplasma::i#2 = ++ doplasma::i#3
  to:doplasma::@3
doplasma::@2: scope:[doplasma]  from doplasma::@1
  [82] doplasma::$1 = sinetable[doplasma::c1a#3] + sinetable[doplasma::c1b#3]
  [83] ybuf[doplasma::ii#3] = doplasma::$1
  [84] doplasma::c1a#2 = doplasma::c1a#3 + 4
  [85] doplasma::c1b#2 = doplasma::c1b#3 + 9
  [86] doplasma::ii#2 = ++ doplasma::ii#3
  to:doplasma::@1

unsigned int rand()
rand: scope:[rand]  from makechar::@6
  [87] rand::$0 = rand_state << 7
  [88] rand_state = rand_state ^ rand::$0
  [89] rand::$1 = rand_state >> 9
  [90] rand_state = rand_state ^ rand::$1
  [91] rand::$2 = rand_state << 8
  [92] rand_state = rand_state ^ rand::$2
  [93] rand::return#0 = rand_state
  to:rand::@return
rand::@return: scope:[rand]  from rand
  [94] return 
  to:@return

void print_uint(unsigned int w)
print_uint: scope:[print_uint]  from end::@1
  [95] print_uchar::b#0 = byte1  print_uint::w#0
  [96] call print_uchar
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [97] print_uchar::b#1 = byte0  print_uint::w#0
  [98] call print_uchar
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@1
  [99] return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from end::@2
  [100] phi()
  to:print_ln::@1
print_ln::@1: scope:[print_ln]  from print_ln print_ln::@1
  [101] print_line_cursor#9 = phi( print_ln/print_screen#0, print_ln::@1/print_line_cursor#0 )
  [102] print_line_cursor#0 = print_line_cursor#9 + $28
  [103] if(print_line_cursor#0<print_char_cursor#27) goto print_ln::@1
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln::@1
  [104] return 
  to:@return

void print_uchar(char b)
print_uchar: scope:[print_uchar]  from print_uint print_uint::@1
  [105] print_char_cursor#37 = phi( print_uint/print_screen#0, print_uint::@1/print_char_cursor#27 )
  [105] print_uchar::b#2 = phi( print_uint/print_uchar::b#0, print_uint::@1/print_uchar::b#1 )
  [106] print_uchar::$0 = print_uchar::b#2 >> 4
  [107] print_char::ch#0 = print_hextab[print_uchar::$0]
  [108] call print_char
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [109] print_uchar::$2 = print_uchar::b#2 & $f
  [110] print_char::ch#1 = print_hextab[print_uchar::$2]
  [111] call print_char
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [112] return 
  to:@return

void print_char(char ch)
print_char: scope:[print_char]  from print_uchar print_uchar::@1
  [113] print_char_cursor#26 = phi( print_uchar/print_char_cursor#37, print_uchar::@1/print_char_cursor#27 )
  [113] print_char::ch#2 = phi( print_uchar/print_char::ch#0, print_uchar::@1/print_char::ch#1 )
  [114] *print_char_cursor#26 = print_char::ch#2
  [115] print_char_cursor#27 = ++ print_char_cursor#26
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [116] return 
  to:@return
