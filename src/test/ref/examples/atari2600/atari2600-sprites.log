Fixing struct type size struct MOS6532_RIOT to 24
Fixing struct type SIZE_OF struct MOS6532_RIOT to 24
Fixing struct type SIZE_OF struct MOS6532_RIOT to 24
Inlined call call __init 

CONTROL FLOW GRAPH SSA

(void()) main()
main: scope:[main]  from __start::@1
  (byte) p0_ypos#12 ← phi( __start::@1/(byte) p0_ypos#11 )
  (byte) idx2#11 ← phi( __start::@1/(byte) idx2#10 )
  (byte) idx#11 ← phi( __start::@1/(byte) idx#10 )
  asm { cld  }
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0) ← (number) $f0
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (number) $af
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0) ← (number) 5
  to:main::@1
main::@1: scope:[main]  from main main::@15
  (byte) p0_ypos#10 ← phi( main/(byte) p0_ypos#12 main::@15/(byte) p0_ypos#13 )
  (byte) idx2#9 ← phi( main/(byte) idx2#11 main::@15/(byte) idx2#12 )
  (byte) idx#9 ← phi( main/(byte) idx#11 main::@15/(byte) idx#12 )
  (bool~) main::$4 ← (number) 0 != (number) 1
  if((bool~) main::$4) goto main::@2
  to:main::@return
main::@2: scope:[main]  from main::@1
  (byte) idx2#5 ← phi( main::@1/(byte) idx2#9 )
  (byte) idx#5 ← phi( main::@1/(byte) idx#9 )
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC) ← (number) 2
  *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (number) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(number) $40
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC) ← (number) 0
  asm { ldap0_xpos staTIA_WSYNC sec !: sbc#$f bcs!- eor#7 asl asl asl asl staTIA_HMP0 staTIA_RESP0  }
  (byte) p0_xpos ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx#5)
  (byte) idx#0 ← ++ (byte) idx#5
  (byte) p0_ypos#0 ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx2#5)
  (byte) idx2#0 ← ++ (byte) idx2#5
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE) ← (number) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  (byte) idx2#18 ← phi( main::@2/(byte) idx2#0 main::@4/(byte) idx2#23 )
  (byte) idx#18 ← phi( main::@2/(byte) idx#0 main::@4/(byte) idx#23 )
  (byte) p0_ypos#19 ← phi( main::@2/(byte) p0_ypos#0 main::@4/(byte) p0_ypos#23 )
  (bool~) main::$5 ← (number) 0 != *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)
  if((bool~) main::$5) goto main::@4
  to:main::@5
main::@4: scope:[main]  from main::@3
  (byte) idx2#23 ← phi( main::@3/(byte) idx2#18 )
  (byte) idx#23 ← phi( main::@3/(byte) idx#18 )
  (byte) p0_ypos#23 ← phi( main::@3/(byte) p0_ypos#19 )
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
  to:main::@3
main::@5: scope:[main]  from main::@3
  (byte) idx2#17 ← phi( main::@3/(byte) idx2#18 )
  (byte) idx#17 ← phi( main::@3/(byte) idx#18 )
  (byte) p0_ypos#16 ← phi( main::@3/(byte) p0_ypos#19 )
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (number) 0
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (number) 0
  (byte) main::p0_idx#0 ← (byte) 0
  (byte) main::i#0 ← (byte) 1
  to:main::@6
main::@6: scope:[main]  from main::@10 main::@5
  (byte) idx2#15 ← phi( main::@10/(byte) idx2#16 main::@5/(byte) idx2#17 )
  (byte) idx#15 ← phi( main::@10/(byte) idx#16 main::@5/(byte) idx#17 )
  (byte) p0_ypos#14 ← phi( main::@10/(byte) p0_ypos#15 main::@5/(byte) p0_ypos#16 )
  (byte) main::p0_idx#7 ← phi( main::@10/(byte) main::p0_idx#8 main::@5/(byte) main::p0_idx#0 )
  (byte) main::i#2 ← phi( main::@10/(byte) main::i#1 main::@5/(byte) main::i#0 )
  (bool~) main::$0 ← (byte) main::i#2 < (number) $c0
  if((bool~) main::$0) goto main::@7
  to:main::@8
main::@7: scope:[main]  from main::@6
  (byte) idx2#24 ← phi( main::@6/(byte) idx2#15 )
  (byte) idx#24 ← phi( main::@6/(byte) idx#15 )
  (byte) p0_ypos#9 ← phi( main::@6/(byte) p0_ypos#14 )
  (byte) main::p0_idx#4 ← phi( main::@6/(byte) main::p0_idx#7 )
  (byte) main::i#3 ← phi( main::@6/(byte) main::i#2 )
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) main::i#3
  (bool~) main::$6 ← (number) 0 != (byte) main::p0_idx#4
  if((bool~) main::$6) goto main::@9
  to:main::@12
main::@8: scope:[main]  from main::@6
  (byte) p0_ypos#18 ← phi( main::@6/(byte) p0_ypos#14 )
  (byte) idx2#14 ← phi( main::@6/(byte) idx2#15 )
  (byte) idx#14 ← phi( main::@6/(byte) idx#15 )
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (number) 2
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (number) 0
  *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (number) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(number) $40
  to:main::@15
main::@9: scope:[main]  from main::@7
  (byte) idx2#25 ← phi( main::@7/(byte) idx2#24 )
  (byte) idx#25 ← phi( main::@7/(byte) idx#24 )
  (byte) p0_ypos#24 ← phi( main::@7/(byte) p0_ypos#9 )
  (byte) main::i#9 ← phi( main::@7/(byte) main::i#3 )
  (byte) main::p0_idx#5 ← phi( main::@7/(byte) main::p0_idx#4 )
  (byte) main::gfx#0 ← *((const byte*) SPRITE_C + (byte) main::p0_idx#5)
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) main::gfx#0
  (bool~) main::$3 ← (byte) main::gfx#0 == (number) 0
  if((bool~) main::$3) goto main::@11
  to:main::@14
main::@12: scope:[main]  from main::@7
  (byte) idx2#20 ← phi( main::@7/(byte) idx2#24 )
  (byte) idx#20 ← phi( main::@7/(byte) idx#24 )
  (byte) main::p0_idx#9 ← phi( main::@7/(byte) main::p0_idx#4 )
  (byte) main::i#4 ← phi( main::@7/(byte) main::i#3 )
  (byte) p0_ypos#5 ← phi( main::@7/(byte) p0_ypos#9 )
  (bool~) main::$1 ← (byte) p0_ypos#5 == (byte) main::i#4
  (bool~) main::$2 ← ! (bool~) main::$1
  if((bool~) main::$2) goto main::@10
  to:main::@13
main::@13: scope:[main]  from main::@12
  (byte) idx2#21 ← phi( main::@12/(byte) idx2#20 )
  (byte) idx#21 ← phi( main::@12/(byte) idx#20 )
  (byte) p0_ypos#21 ← phi( main::@12/(byte) p0_ypos#5 )
  (byte) main::i#7 ← phi( main::@12/(byte) main::i#4 )
  (byte) main::p0_idx#1 ← (number) 1
  to:main::@10
main::@10: scope:[main]  from main::@11 main::@12 main::@13 main::@14
  (byte) idx2#16 ← phi( main::@11/(byte) idx2#19 main::@12/(byte) idx2#20 main::@13/(byte) idx2#21 main::@14/(byte) idx2#22 )
  (byte) idx#16 ← phi( main::@11/(byte) idx#19 main::@12/(byte) idx#20 main::@13/(byte) idx#21 main::@14/(byte) idx#22 )
  (byte) p0_ypos#15 ← phi( main::@11/(byte) p0_ypos#20 main::@12/(byte) p0_ypos#5 main::@13/(byte) p0_ypos#21 main::@14/(byte) p0_ypos#22 )
  (byte) main::p0_idx#8 ← phi( main::@11/(byte) main::p0_idx#2 main::@12/(byte) main::p0_idx#9 main::@13/(byte) main::p0_idx#1 main::@14/(byte) main::p0_idx#3 )
  (byte) main::i#5 ← phi( main::@11/(byte) main::i#6 main::@12/(byte) main::i#4 main::@13/(byte) main::i#7 main::@14/(byte) main::i#8 )
  (byte) main::i#1 ← ++ (byte) main::i#5
  to:main::@6
main::@11: scope:[main]  from main::@9
  (byte) idx2#19 ← phi( main::@9/(byte) idx2#25 )
  (byte) idx#19 ← phi( main::@9/(byte) idx#25 )
  (byte) p0_ypos#20 ← phi( main::@9/(byte) p0_ypos#24 )
  (byte) main::i#6 ← phi( main::@9/(byte) main::i#9 )
  (byte) main::p0_idx#2 ← (number) 0
  to:main::@10
main::@14: scope:[main]  from main::@9
  (byte) idx2#22 ← phi( main::@9/(byte) idx2#25 )
  (byte) idx#22 ← phi( main::@9/(byte) idx#25 )
  (byte) p0_ypos#22 ← phi( main::@9/(byte) p0_ypos#24 )
  (byte) main::i#8 ← phi( main::@9/(byte) main::i#9 )
  (byte) main::p0_idx#6 ← phi( main::@9/(byte) main::p0_idx#5 )
  (byte) main::p0_idx#3 ← ++ (byte) main::p0_idx#6
  to:main::@10
main::@15: scope:[main]  from main::@16 main::@8
  (byte) p0_ypos#13 ← phi( main::@16/(byte) p0_ypos#17 main::@8/(byte) p0_ypos#18 )
  (byte) idx2#12 ← phi( main::@16/(byte) idx2#13 main::@8/(byte) idx2#14 )
  (byte) idx#12 ← phi( main::@16/(byte) idx#13 main::@8/(byte) idx#14 )
  (bool~) main::$7 ← (number) 0 != *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)
  if((bool~) main::$7) goto main::@16
  to:main::@1
main::@16: scope:[main]  from main::@15
  (byte) p0_ypos#17 ← phi( main::@15/(byte) p0_ypos#13 )
  (byte) idx2#13 ← phi( main::@15/(byte) idx2#12 )
  (byte) idx#13 ← phi( main::@15/(byte) idx#12 )
  *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
  to:main::@15
main::@return: scope:[main]  from main::@1
  (byte) idx2#6 ← phi( main::@1/(byte) idx2#9 )
  (byte) p0_ypos#6 ← phi( main::@1/(byte) p0_ypos#10 )
  (byte) idx#6 ← phi( main::@1/(byte) idx#9 )
  (byte) idx#1 ← (byte) idx#6
  (byte) p0_ypos#1 ← (byte) p0_ypos#6
  (byte) idx2#1 ← (byte) idx2#6
  return 
  to:@return

(void()) __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  (byte) idx#2 ← (byte) 0
  (byte) idx2#2 ← (byte) $39
  (byte) p0_xpos ← (byte) 0
  (byte) p0_ypos#2 ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  (byte) idx2#10 ← phi( __start::__init1/(byte) idx2#2 )
  (byte) p0_ypos#11 ← phi( __start::__init1/(byte) p0_ypos#2 )
  (byte) idx#10 ← phi( __start::__init1/(byte) idx#2 )
  call main 
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  (byte) idx2#7 ← phi( __start::@1/(byte) idx2#1 )
  (byte) p0_ypos#7 ← phi( __start::@1/(byte) p0_ypos#1 )
  (byte) idx#7 ← phi( __start::@1/(byte) idx#1 )
  (byte) idx#3 ← (byte) idx#7
  (byte) p0_ypos#3 ← (byte) p0_ypos#7
  (byte) idx2#3 ← (byte) idx2#7
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  (byte) p0_ypos#8 ← phi( __start::@2/(byte) p0_ypos#3 )
  (byte) idx2#8 ← phi( __start::@2/(byte) idx2#3 )
  (byte) idx#8 ← phi( __start::@2/(byte) idx#3 )
  (byte) idx#4 ← (byte) idx#8
  (byte) idx2#4 ← (byte) idx2#8
  (byte) p0_ypos#4 ← (byte) p0_ypos#8
  return 
  to:@return

SYMBOL TABLE SSA
(byte) ATARI_TIA_READ::CXBLPF
(byte) ATARI_TIA_READ::CXM0FB
(byte) ATARI_TIA_READ::CXM0P
(byte) ATARI_TIA_READ::CXM1FB
(byte) ATARI_TIA_READ::CXM1P
(byte) ATARI_TIA_READ::CXP0FB
(byte) ATARI_TIA_READ::CXP1FB
(byte) ATARI_TIA_READ::CXPPMM
(byte) ATARI_TIA_READ::INPT0
(byte) ATARI_TIA_READ::INPT1
(byte) ATARI_TIA_READ::INPT2
(byte) ATARI_TIA_READ::INPT3
(byte) ATARI_TIA_READ::INPT4
(byte) ATARI_TIA_READ::INPT5
(byte) ATARI_TIA_WRITE::AUDC0
(byte) ATARI_TIA_WRITE::AUDC1
(byte) ATARI_TIA_WRITE::AUDF0
(byte) ATARI_TIA_WRITE::AUDF1
(byte) ATARI_TIA_WRITE::AUDV0
(byte) ATARI_TIA_WRITE::AUDV1
(byte) ATARI_TIA_WRITE::COLUBK
(byte) ATARI_TIA_WRITE::COLUP0
(byte) ATARI_TIA_WRITE::COLUP1
(byte) ATARI_TIA_WRITE::COLUPF
(byte) ATARI_TIA_WRITE::CTRLPF
(byte) ATARI_TIA_WRITE::CXCLR
(byte) ATARI_TIA_WRITE::ENABL
(byte) ATARI_TIA_WRITE::ENAM0
(byte) ATARI_TIA_WRITE::ENAM1
(byte) ATARI_TIA_WRITE::GRP0
(byte) ATARI_TIA_WRITE::GRP1
(byte) ATARI_TIA_WRITE::HMBL
(byte) ATARI_TIA_WRITE::HMCLR
(byte) ATARI_TIA_WRITE::HMM0
(byte) ATARI_TIA_WRITE::HMM1
(byte) ATARI_TIA_WRITE::HMOVE
(byte) ATARI_TIA_WRITE::HMP0
(byte) ATARI_TIA_WRITE::HMP1
(byte) ATARI_TIA_WRITE::NUSIZ0
(byte) ATARI_TIA_WRITE::NUSIZ1
(byte) ATARI_TIA_WRITE::PF0
(byte) ATARI_TIA_WRITE::PF1
(byte) ATARI_TIA_WRITE::PF2
(byte) ATARI_TIA_WRITE::REFP0
(byte) ATARI_TIA_WRITE::REFP1
(byte) ATARI_TIA_WRITE::RESBL
(byte) ATARI_TIA_WRITE::RESM0
(byte) ATARI_TIA_WRITE::RESM1
(byte) ATARI_TIA_WRITE::RESMP0
(byte) ATARI_TIA_WRITE::RESMP1
(byte) ATARI_TIA_WRITE::RESP0
(byte) ATARI_TIA_WRITE::RESP1
(byte) ATARI_TIA_WRITE::RSYNC
(byte) ATARI_TIA_WRITE::VBLANK
(byte) ATARI_TIA_WRITE::VDELBL
(byte) ATARI_TIA_WRITE::VDELP0
(byte) ATARI_TIA_WRITE::VDELP1
(byte) ATARI_TIA_WRITE::VSYNC
(byte) ATARI_TIA_WRITE::WSYNC
(const nomodify byte) CYCLES_PER_SCANLINE = (byte) $4c
(byte) MOS6532_RIOT::INTIM
(byte) MOS6532_RIOT::SWACNT
(byte) MOS6532_RIOT::SWBCNT
(byte) MOS6532_RIOT::SWCHA
(byte) MOS6532_RIOT::SWCHB
(byte) MOS6532_RIOT::T1024T
(byte) MOS6532_RIOT::TIM1T
(byte) MOS6532_RIOT::TIM64T
(byte) MOS6532_RIOT::TIM8T
(const byte*) MOS6532_RIOT::UNUSED[(number) $f]  = { fill( $f, 0) }
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK = (byte) 9
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0 = (byte) 6
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0 = (byte) $1b
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE = (byte) $2a
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0 = (byte) 4
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK = (byte) 1
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC = (byte) 0
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC = (byte) 2
(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM = (byte) 4
(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T = (byte) $16
(const nomodify struct MOS6532_RIOT*) RIOT = (struct MOS6532_RIOT*)(number) $280
(const to_nomodify byte*) SINTABLE_160[(number) $100]  = kickasm {{ .fill $100, 10+round(64.5+64.5*sin(2*PI*i/256))
 }}
(const byte*) SPRITE_C[]  = { (byte) 0, (byte) $18, (byte) $18, (byte) $18, (byte) $18, (byte) $3c, (byte) $3c, (byte) $3c, (byte) $3c, (byte) $66, (byte) $66, (byte) $66, (byte) $66, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $66, (byte) $66, (byte) $66, (byte) $66, (byte) $3c, (byte) $3c, (byte) $3c, (byte) $3c, (byte) $18, (byte) $18, (byte) $18, (byte) $18, (byte) 0 }
(const nomodify struct ATARI_TIA_WRITE*) TIA = (struct ATARI_TIA_WRITE*)(number) 0
(const nomodify byte*) TIA_HMP0 = (byte*)(number) $20
(const nomodify byte*) TIA_RESP0 = (byte*)(number) $10
(const nomodify byte*) TIA_WSYNC = (byte*)(number) 2
(void()) __start()
(label) __start::@1
(label) __start::@2
(label) __start::@return
(label) __start::__init1
(byte) idx
(byte) idx#0
(byte) idx#1
(byte) idx#10
(byte) idx#11
(byte) idx#12
(byte) idx#13
(byte) idx#14
(byte) idx#15
(byte) idx#16
(byte) idx#17
(byte) idx#18
(byte) idx#19
(byte) idx#2
(byte) idx#20
(byte) idx#21
(byte) idx#22
(byte) idx#23
(byte) idx#24
(byte) idx#25
(byte) idx#3
(byte) idx#4
(byte) idx#5
(byte) idx#6
(byte) idx#7
(byte) idx#8
(byte) idx#9
(byte) idx2
(byte) idx2#0
(byte) idx2#1
(byte) idx2#10
(byte) idx2#11
(byte) idx2#12
(byte) idx2#13
(byte) idx2#14
(byte) idx2#15
(byte) idx2#16
(byte) idx2#17
(byte) idx2#18
(byte) idx2#19
(byte) idx2#2
(byte) idx2#20
(byte) idx2#21
(byte) idx2#22
(byte) idx2#23
(byte) idx2#24
(byte) idx2#25
(byte) idx2#3
(byte) idx2#4
(byte) idx2#5
(byte) idx2#6
(byte) idx2#7
(byte) idx2#8
(byte) idx2#9
(void()) main()
(bool~) main::$0
(bool~) main::$1
(bool~) main::$2
(bool~) main::$3
(bool~) main::$4
(bool~) main::$5
(bool~) main::$6
(bool~) main::$7
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@16
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::gfx
(byte) main::gfx#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::i#4
(byte) main::i#5
(byte) main::i#6
(byte) main::i#7
(byte) main::i#8
(byte) main::i#9
(byte) main::p0_idx
(byte) main::p0_idx#0
(byte) main::p0_idx#1
(byte) main::p0_idx#2
(byte) main::p0_idx#3
(byte) main::p0_idx#4
(byte) main::p0_idx#5
(byte) main::p0_idx#6
(byte) main::p0_idx#7
(byte) main::p0_idx#8
(byte) main::p0_idx#9
(byte) p0_xpos loadstore
(byte) p0_ypos
(byte) p0_ypos#0
(byte) p0_ypos#1
(byte) p0_ypos#10
(byte) p0_ypos#11
(byte) p0_ypos#12
(byte) p0_ypos#13
(byte) p0_ypos#14
(byte) p0_ypos#15
(byte) p0_ypos#16
(byte) p0_ypos#17
(byte) p0_ypos#18
(byte) p0_ypos#19
(byte) p0_ypos#2
(byte) p0_ypos#20
(byte) p0_ypos#21
(byte) p0_ypos#22
(byte) p0_ypos#23
(byte) p0_ypos#24
(byte) p0_ypos#3
(byte) p0_ypos#4
(byte) p0_ypos#5
(byte) p0_ypos#6
(byte) p0_ypos#7
(byte) p0_ypos#8
(byte) p0_ypos#9

Adding number conversion cast (unumber) $f0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0) ← (number) $f0
Adding number conversion cast (unumber) $af in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (number) $af
Adding number conversion cast (unumber) 5 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0) ← (number) 5
Adding number conversion cast (unumber) 2 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC) ← (number) 2
Adding number conversion cast (unumber) $29*CYCLES_PER_SCANLINE/$40 in *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (number) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(number) $40
Adding number conversion cast (unumber) $29 in *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← ((unumber)) (number) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(number) $40
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE) ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::$5 ← (number) 0 != *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (number) 0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (number) 0
Adding number conversion cast (unumber) $c0 in (bool~) main::$0 ← (byte) main::i#2 < (number) $c0
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::$6 ← (number) 0 != (byte) main::p0_idx#4
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
Adding number conversion cast (unumber) 2 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (number) 2
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (number) 0
Adding number conversion cast (unumber) $1b*CYCLES_PER_SCANLINE/$40 in *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (number) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(number) $40
Adding number conversion cast (unumber) $1b in *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← ((unumber)) (number) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(number) $40
Adding number conversion cast (unumber) 0 in (bool~) main::$3 ← (byte) main::gfx#0 == (number) 0
Adding number conversion cast (unumber) 1 in (byte) main::p0_idx#1 ← (number) 1
Adding number conversion cast (unumber) 0 in (byte) main::p0_idx#2 ← (number) 0
Adding number conversion cast (unumber) 0 in (bool~) main::$7 ← (number) 0 != *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)
Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Adding number conversion cast (unumber) $40 in *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← ((unumber)) (unumber)(number) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(number) $40
Adding number conversion cast (unumber) $40 in *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← ((unumber)) (unumber)(number) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(number) $40
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0) ← (unumber)(number) $f0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (unumber)(number) $af
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0) ← (unumber)(number) 5
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC) ← (unumber)(number) 2
Inlining cast *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (unumber)(unumber)(number) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(unumber)(number) $40
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (unumber)(number) 2
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (unumber)(unumber)(number) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(unumber)(number) $40
Inlining cast (byte) main::p0_idx#1 ← (unumber)(number) 1
Inlining cast (byte) main::p0_idx#2 ← (unumber)(number) 0
Inlining cast *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 2
Simplifying constant pointer cast (byte*) 16
Simplifying constant pointer cast (byte*) 32
Simplifying constant pointer cast (struct ATARI_TIA_WRITE*) 0
Simplifying constant pointer cast (struct MOS6532_RIOT*) 640
Simplifying constant integer cast $f0
Simplifying constant integer cast $af
Simplifying constant integer cast 5
Simplifying constant integer cast 2
Simplifying constant integer cast (unumber)(number) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(unumber)(number) $40
Simplifying constant integer cast $29
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $c0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 2
Simplifying constant integer cast 0
Simplifying constant integer cast (unumber)(number) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(unumber)(number) $40
Simplifying constant integer cast $1b
Simplifying constant integer cast $40
Simplifying constant integer cast 0
Simplifying constant integer cast 1
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) $f0
Finalized unsigned number type (byte) $af
Finalized unsigned number type (byte) 5
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) $29
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $c0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 2
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $1b
Finalized unsigned number type (byte) $40
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 1
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [52] (bool~) main::$2 ← (byte) p0_ypos#5 != (byte) main::i#4 from [51] (bool~) main::$1 ← (byte) p0_ypos#5 == (byte) main::i#4
Successful SSA optimization Pass2UnaryNotSimplification
Alias idx#1 = idx#5 idx#9 idx#6 
Alias idx2#1 = idx2#5 idx2#9 idx2#6 
Alias p0_ypos#16 = p0_ypos#23 p0_ypos#19 
Alias idx#17 = idx#23 idx#18 
Alias idx2#17 = idx2#23 idx2#18 
Alias main::i#2 = main::i#3 main::i#9 main::i#4 main::i#7 main::i#6 main::i#8 
Alias main::p0_idx#4 = main::p0_idx#7 main::p0_idx#5 main::p0_idx#9 main::p0_idx#6 
Alias p0_ypos#14 = p0_ypos#9 p0_ypos#18 p0_ypos#24 p0_ypos#5 p0_ypos#21 p0_ypos#20 p0_ypos#22 
Alias idx#14 = idx#24 idx#15 idx#25 idx#20 idx#21 idx#19 idx#22 
Alias idx2#14 = idx2#24 idx2#15 idx2#25 idx2#20 idx2#21 idx2#19 idx2#22 
Alias idx#12 = idx#13 
Alias idx2#12 = idx2#13 
Alias p0_ypos#13 = p0_ypos#17 
Alias p0_ypos#1 = p0_ypos#6 p0_ypos#10 
Alias idx#10 = idx#2 
Alias p0_ypos#11 = p0_ypos#2 
Alias idx2#10 = idx2#2 
Alias idx#3 = idx#7 idx#8 idx#4 
Alias p0_ypos#3 = p0_ypos#7 p0_ypos#8 p0_ypos#4 
Alias idx2#3 = idx2#7 idx2#8 idx2#4 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#5 
Alias p0_ypos#14 = p0_ypos#15 
Alias idx#14 = idx#16 
Alias idx2#14 = idx2#16 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values (byte) idx#11 (byte) idx#10
Identical Phi Values (byte) idx2#11 (byte) idx2#10
Identical Phi Values (byte) p0_ypos#12 (byte) p0_ypos#11
Identical Phi Values (byte) p0_ypos#16 (byte) p0_ypos#0
Identical Phi Values (byte) idx#17 (byte) idx#0
Identical Phi Values (byte) idx2#17 (byte) idx2#0
Identical Phi Values (byte) p0_ypos#14 (byte) p0_ypos#16
Identical Phi Values (byte) idx#14 (byte) idx#17
Identical Phi Values (byte) idx2#14 (byte) idx2#17
Identical Phi Values (byte) idx#12 (byte) idx#14
Identical Phi Values (byte) idx2#12 (byte) idx2#14
Identical Phi Values (byte) p0_ypos#13 (byte) p0_ypos#14
Identical Phi Values (byte) idx#3 (byte) idx#1
Identical Phi Values (byte) p0_ypos#3 (byte) p0_ypos#1
Identical Phi Values (byte) idx2#3 (byte) idx2#1
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition (bool~) main::$4 [7] if((number) 0!=(number) 1) goto main::@2
Simple Condition (bool~) main::$5 [23] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@4
Simple Condition (bool~) main::$0 [31] if((byte) main::i#2<(byte) $c0) goto main::@7
Simple Condition (bool~) main::$6 [35] if((byte) 0!=(byte) main::p0_idx#4) goto main::@9
Simple Condition (bool~) main::$3 [43] if((byte) main::gfx#0==(byte) 0) goto main::@11
Simple Condition (bool~) main::$2 [45] if((byte) p0_ypos#0!=(byte) main::i#2) goto main::@10
Simple Condition (bool~) main::$7 [53] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@16
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant (const byte) main::p0_idx#0 = 0
Constant (const byte) main::i#0 = 1
Constant (const byte) main::p0_idx#1 = 1
Constant (const byte) main::p0_idx#2 = 0
Constant (const byte) idx#10 = 0
Constant (const byte) idx2#10 = $39
Constant (const byte) p0_ypos#11 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [7] if((number) 0!=(number) 1) goto main::@2
Successful SSA optimization Pass2ConstantIfs
Simplifying expression containing zero (byte*)TIA in [8] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC) ← (byte) 2
Simplifying expression containing zero (byte*)TIA in [13] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC) ← (byte) 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused variable - keeping the phi block (byte) p0_ypos#1
Eliminating unused constant (const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VSYNC
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant (const byte) p0_ypos#11
Successful SSA optimization PassNEliminateUnusedVars
Removing unused block main::@return
Successful SSA optimization Pass2EliminateUnusedBlocks
Inlining constant with var siblings (const byte) main::p0_idx#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::p0_idx#1
Inlining constant with var siblings (const byte) main::p0_idx#2
Inlining constant with var siblings (const byte) idx#10
Inlining constant with var siblings (const byte) idx2#10
Constant inlined idx#10 = (byte) 0
Constant inlined main::p0_idx#0 = (byte) 0
Constant inlined main::i#0 = (byte) 1
Constant inlined idx2#10 = (byte) $39
Constant inlined main::p0_idx#1 = (byte) 1
Constant inlined main::p0_idx#2 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@17(between main::@15 and main::@1)
Added new block during phi lifting main::@18(between main::@12 and main::@10)
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of __start::@2
Adding NOP phi() at start of main::@13
Adding NOP phi() at start of main::@11
CALL GRAPH
Calls in [__start] to main:3 

Created 5 initial phi equivalence classes
Coalesced [34] idx#26 ← idx#0
Coalesced [35] idx2#26 ← idx2#0
Coalesced [44] main::i#10 ← main::i#1
Coalesced [45] main::p0_idx#10 ← main::p0_idx#8
Coalesced (already) [46] main::p0_idx#11 ← main::p0_idx#4
Coalesced [51] main::p0_idx#12 ← main::p0_idx#3
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) __start::@2
Culled Empty Block (label) main::@17
Culled Empty Block (label) main::@13
Culled Empty Block (label) main::@11
Renumbering block main::@12 to main::@11
Renumbering block main::@14 to main::@12
Renumbering block main::@15 to main::@13
Renumbering block main::@16 to main::@14
Renumbering block main::@18 to main::@15
Adding NOP phi() at start of __start
Adding NOP phi() at start of __start::@1
Adding NOP phi() at start of main::@15

FINAL CONTROL FLOW GRAPH

(void()) __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] (byte) p0_xpos ← (byte) 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [2] phi()
  [3] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [4] return 
  to:@return

(void()) main()
main: scope:[main]  from __start::@1
  asm { cld  }
  [6] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0) ← (byte) $f0
  [7] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) $af
  [8] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0) ← (byte) 5
  to:main::@1
main::@1: scope:[main]  from main main::@13
  [9] (byte) idx2#1 ← phi( main/(byte) $39 main::@13/(byte) idx2#0 )
  [9] (byte) idx#1 ← phi( main/(byte) 0 main::@13/(byte) idx#0 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [10] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 2
  [11] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40
  [12] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0
  [13] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0
  [14] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0
  [15] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 0
  asm { ldap0_xpos staTIA_WSYNC sec !: sbc#$f bcs!- eor#7 asl asl asl asl staTIA_HMP0 staTIA_RESP0  }
  [17] (byte) p0_xpos ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx#1)
  [18] (byte) idx#0 ← ++ (byte) idx#1
  [19] (byte) p0_ypos#0 ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx2#1)
  [20] (byte) idx2#0 ← ++ (byte) idx2#1
  [21] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0
  [22] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE) ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [23] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3
  [24] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 0
  [25] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0
  to:main::@6
main::@6: scope:[main]  from main::@10 main::@5
  [26] (byte) main::p0_idx#4 ← phi( main::@10/(byte) main::p0_idx#8 main::@5/(byte) 0 )
  [26] (byte) main::i#2 ← phi( main::@10/(byte) main::i#1 main::@5/(byte) 1 )
  [27] if((byte) main::i#2<(byte) $c0) goto main::@7
  to:main::@8
main::@8: scope:[main]  from main::@6
  [28] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0
  [29] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 2
  [30] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0
  [31] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40
  to:main::@13
main::@13: scope:[main]  from main::@14 main::@8
  [32] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@14
  to:main::@1
main::@14: scope:[main]  from main::@13
  [33] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0
  to:main::@13
main::@7: scope:[main]  from main::@6
  [34] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0
  [35] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) main::i#2
  [36] if((byte) 0!=(byte) main::p0_idx#4) goto main::@9
  to:main::@11
main::@11: scope:[main]  from main::@7
  [37] if((byte) p0_ypos#0!=(byte) main::i#2) goto main::@15
  to:main::@10
main::@15: scope:[main]  from main::@11
  [38] phi()
  to:main::@10
main::@10: scope:[main]  from main::@11 main::@12 main::@15 main::@9
  [39] (byte) main::p0_idx#8 ← phi( main::@9/(byte) 0 main::@15/(byte) main::p0_idx#4 main::@11/(byte) 1 main::@12/(byte) main::p0_idx#3 )
  [40] (byte) main::i#1 ← ++ (byte) main::i#2
  to:main::@6
main::@9: scope:[main]  from main::@7
  [41] (byte) main::gfx#0 ← *((const byte*) SPRITE_C + (byte) main::p0_idx#4)
  [42] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) main::gfx#0
  [43] if((byte) main::gfx#0==(byte) 0) goto main::@10
  to:main::@12
main::@12: scope:[main]  from main::@9
  [44] (byte) main::p0_idx#3 ← ++ (byte) main::p0_idx#4
  to:main::@10
main::@4: scope:[main]  from main::@3
  [45] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0
  to:main::@3


VARIABLE REGISTER WEIGHTS
(byte) ATARI_TIA_READ::CXBLPF
(byte) ATARI_TIA_READ::CXM0FB
(byte) ATARI_TIA_READ::CXM0P
(byte) ATARI_TIA_READ::CXM1FB
(byte) ATARI_TIA_READ::CXM1P
(byte) ATARI_TIA_READ::CXP0FB
(byte) ATARI_TIA_READ::CXP1FB
(byte) ATARI_TIA_READ::CXPPMM
(byte) ATARI_TIA_READ::INPT0
(byte) ATARI_TIA_READ::INPT1
(byte) ATARI_TIA_READ::INPT2
(byte) ATARI_TIA_READ::INPT3
(byte) ATARI_TIA_READ::INPT4
(byte) ATARI_TIA_READ::INPT5
(byte) ATARI_TIA_WRITE::AUDC0
(byte) ATARI_TIA_WRITE::AUDC1
(byte) ATARI_TIA_WRITE::AUDF0
(byte) ATARI_TIA_WRITE::AUDF1
(byte) ATARI_TIA_WRITE::AUDV0
(byte) ATARI_TIA_WRITE::AUDV1
(byte) ATARI_TIA_WRITE::COLUBK
(byte) ATARI_TIA_WRITE::COLUP0
(byte) ATARI_TIA_WRITE::COLUP1
(byte) ATARI_TIA_WRITE::COLUPF
(byte) ATARI_TIA_WRITE::CTRLPF
(byte) ATARI_TIA_WRITE::CXCLR
(byte) ATARI_TIA_WRITE::ENABL
(byte) ATARI_TIA_WRITE::ENAM0
(byte) ATARI_TIA_WRITE::ENAM1
(byte) ATARI_TIA_WRITE::GRP0
(byte) ATARI_TIA_WRITE::GRP1
(byte) ATARI_TIA_WRITE::HMBL
(byte) ATARI_TIA_WRITE::HMCLR
(byte) ATARI_TIA_WRITE::HMM0
(byte) ATARI_TIA_WRITE::HMM1
(byte) ATARI_TIA_WRITE::HMOVE
(byte) ATARI_TIA_WRITE::HMP0
(byte) ATARI_TIA_WRITE::HMP1
(byte) ATARI_TIA_WRITE::NUSIZ0
(byte) ATARI_TIA_WRITE::NUSIZ1
(byte) ATARI_TIA_WRITE::PF0
(byte) ATARI_TIA_WRITE::PF1
(byte) ATARI_TIA_WRITE::PF2
(byte) ATARI_TIA_WRITE::REFP0
(byte) ATARI_TIA_WRITE::REFP1
(byte) ATARI_TIA_WRITE::RESBL
(byte) ATARI_TIA_WRITE::RESM0
(byte) ATARI_TIA_WRITE::RESM1
(byte) ATARI_TIA_WRITE::RESMP0
(byte) ATARI_TIA_WRITE::RESMP1
(byte) ATARI_TIA_WRITE::RESP0
(byte) ATARI_TIA_WRITE::RESP1
(byte) ATARI_TIA_WRITE::RSYNC
(byte) ATARI_TIA_WRITE::VBLANK
(byte) ATARI_TIA_WRITE::VDELBL
(byte) ATARI_TIA_WRITE::VDELP0
(byte) ATARI_TIA_WRITE::VDELP1
(byte) ATARI_TIA_WRITE::VSYNC
(byte) ATARI_TIA_WRITE::WSYNC
(byte) MOS6532_RIOT::INTIM
(byte) MOS6532_RIOT::SWACNT
(byte) MOS6532_RIOT::SWBCNT
(byte) MOS6532_RIOT::SWCHA
(byte) MOS6532_RIOT::SWCHB
(byte) MOS6532_RIOT::T1024T
(byte) MOS6532_RIOT::TIM1T
(byte) MOS6532_RIOT::TIM64T
(byte) MOS6532_RIOT::TIM8T
(void()) __start()
(byte) idx
(byte) idx#0 39.357142857142854
(byte) idx#1 133.66666666666669
(byte) idx2
(byte) idx2#0 42.38461538461539
(byte) idx2#1 109.36363636363637
(void()) main()
(byte) main::gfx
(byte) main::gfx#0 1501.5
(byte) main::i
(byte) main::i#1 2002.0
(byte) main::i#2 417.08333333333337
(byte) main::p0_idx
(byte) main::p0_idx#3 2002.0
(byte) main::p0_idx#4 500.5
(byte) main::p0_idx#8 1501.5
(byte) p0_xpos loadstore 2.452380952380952
(byte) p0_ypos
(byte) p0_ypos#0 52.476190476190474

Initial phi equivalence classes
[ idx#1 idx#0 ]
[ idx2#1 idx2#0 ]
[ main::i#2 main::i#1 ]
[ main::p0_idx#4 main::p0_idx#8 main::p0_idx#3 ]
Added variable p0_xpos to live range equivalence class [ p0_xpos ]
Added variable p0_ypos#0 to live range equivalence class [ p0_ypos#0 ]
Added variable main::gfx#0 to live range equivalence class [ main::gfx#0 ]
Complete equivalence classes
[ idx#1 idx#0 ]
[ idx2#1 idx2#0 ]
[ main::i#2 main::i#1 ]
[ main::p0_idx#4 main::p0_idx#8 main::p0_idx#3 ]
[ p0_xpos ]
[ p0_ypos#0 ]
[ main::gfx#0 ]
Allocated zp[1]:128 [ idx#1 idx#0 ]
Allocated zp[1]:129 [ idx2#1 idx2#0 ]
Allocated zp[1]:130 [ main::i#2 main::i#1 ]
Allocated zp[1]:131 [ main::p0_idx#4 main::p0_idx#8 main::p0_idx#3 ]
Allocated zp[1]:132 [ p0_xpos ]
Allocated zp[1]:133 [ p0_ypos#0 ]
Allocated zp[1]:134 [ main::gfx#0 ]

INITIAL ASM
Target platform is atari2600 / MOS6502X
  // File Comments
// Minimal Atari 2600 VCS Program using Sprites
// Source: https://atariage.com/forums/blogs/entry/11109-step-1-generate-a-stable-display/
// Atari 2600 Registers and Constants
// https://web.archive.org/web/20170215054248/http://www.atariguide.com/pdfs/Atari_2600_VCS_Domestic_Field_Service_Manual.pdf
  // Upstart
  // Atari 2600 VCS 2K ROM
.file [name="atari2600-sprites.a26", type="bin", segments="Code, Data, Vectors"]
.segmentdef Code [start=$f800,min=$f800,max=$fff9]
.segmentdef Data [startAfter="Code",max=$fff9]
.segmentdef Vectors [start=$fffa,max=$ffff]
.segment Vectors
.word __start // NMI
.word __start // RESET
.word __start // IRQ
.segment Code

  // Global Constants & labels
  // The number of CPU cycles per scanline
  .const CYCLES_PER_SCANLINE = $4c
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0 = 6
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0 = $1b
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0 = 4
  .const OFFSET_STRUCT_MOS6532_RIOT_TIM64T = $16
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC = 2
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE = $2a
  .const OFFSET_STRUCT_MOS6532_RIOT_INTIM = 4
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK = 1
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK = 9
  // The TIA WSYNC register (for access from inline ASM)
  .label TIA_WSYNC = 2
  // The TIA RESP0 register (for access from inline ASM)
  .label TIA_RESP0 = $10
  // The TIA HMP0 register (for access from inline ASM)
  .label TIA_HMP0 = $20
  // Atari TIA write registers
  .label TIA = 0
  // Atari RIOT registers
  .label RIOT = $280
  // Player 0 X position
  .label p0_xpos = $84
  // Counts frames
  .label idx = $80
  // Player 0 Y position
  .label p0_ypos = $85
  .label idx2 = $81
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (byte) p0_xpos ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z p0_xpos
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    .label gfx = $86
    .label i = $82
    // index into p0 (0 when not active)
    // Player 0 becomes active
    .label p0_idx = $83
    // asm { cld  }
    cld
    // [6] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0) ← (byte) $f0 -- _deref_pbuc1=vbuc2 
    // Player 0
    // - Color
    lda #$f0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0
    // [7] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) $af -- _deref_pbuc1=vbuc2 
    // - Graphics
    lda #$af
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0
    // [8] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    // - Size
    lda #5
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0
    // [9] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [9] phi (byte) idx2#1 = (byte) $39 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #$39
    sta.z idx2
    // [9] phi (byte) idx#1 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [10] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    // Vertical Sync
    // here we generate the signal that tells the TV to move the beam to the top of
    // the screen so we can start the next frame of video.
    // The Sync Signal must be on for 3 scanlines.
    lda #2
    sta TIA
    // [11] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 -- _deref_pbuc1=vbuc2 
    // D1=1, turns on Vertical Sync signal
    lda #$29*CYCLES_PER_SCANLINE/$40
    sta RIOT+OFFSET_STRUCT_MOS6532_RIOT_TIM64T
    // [12] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set timer to wait 41 lines
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [13] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Wait for Sync - halts CPU until end of 1st scanline of VSYNC
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [14] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // wait until end of 2nd scanline of VSYNC
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [15] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // wait until end of 3rd scanline of VSYNC
    lda #0
    sta TIA
    // asm { ldap0_xpos staTIA_WSYNC sec !: sbc#$f bcs!- eor#7 asl asl asl asl staTIA_HMP0 staTIA_RESP0  }
    // Vertical Sprite Position Player 0 - inline ASM to achieve cycle exact code
    lda p0_xpos
    sta TIA_WSYNC
    sec
  !:
    sbc #$f
    bcs !-
    eor #7
    asl
    asl
    asl
    asl
    sta TIA_HMP0
    sta TIA_RESP0
    // [17] (byte) p0_xpos ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z idx
    lda SINTABLE_160,y
    sta.z p0_xpos
    // [18] (byte) idx#0 ← ++ (byte) idx#1 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [19] (byte) p0_ypos#0 ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx2#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z idx2
    lda SINTABLE_160,y
    sta.z p0_ypos
    // [20] (byte) idx2#0 ← ++ (byte) idx2#1 -- vbuz1=_inc_vbuz1 
    inc.z idx2
    // [21] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Execute horisontal movement
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [22] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE
    jmp __b3
  // Wait for the timer to run out
    // main::@3
  __b3:
    // [23] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@4 -- vbuc1_neq__deref_pbuc2_then_la1 
    lda #0
    cmp RIOT+OFFSET_STRUCT_MOS6532_RIOT_INTIM
    bne __b4
    jmp __b5
    // main::@5
  __b5:
    // [24] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Screen - display logic
    // Update the registers in TIA (the video chip) in order to generate what the player sees.
    // For now we're just going to output 192 colored scanlines lines so we have something to see.
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK
    // [25] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // D1=1, turns off Vertical Blank signal (image output on)
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK
    // [26] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    // [26] phi (byte) main::p0_idx#4 = (byte) 0 [phi:main::@5->main::@6#0] -- vbuz1=vbuc1 
    lda #0
    sta.z p0_idx
    // [26] phi (byte) main::i#2 = (byte) 1 [phi:main::@5->main::@6#1] -- vbuz1=vbuc1 
    lda #1
    sta.z i
    jmp __b6
    // main::@6
  __b6:
    // [27] if((byte) main::i#2<(byte) $c0) goto main::@7 -- vbuz1_lt_vbuc1_then_la1 
    lda.z i
    cmp #$c0
    bcc __b7
    jmp __b8
    // main::@8
  __b8:
    // [28] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Start OverScan
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [29] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    // Wait for SYNC (halts CPU until end of scanline)
    lda #2
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK
    // [30] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // D1=1 turns image output off
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK
    // [31] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 -- _deref_pbuc1=vbuc2 
    // Set background color to black
    lda #$1b*CYCLES_PER_SCANLINE/$40
    sta RIOT+OFFSET_STRUCT_MOS6532_RIOT_TIM64T
    jmp __b13
  // Wait for the timer to run out
    // main::@13
  __b13:
    // [32] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@14 -- vbuc1_neq__deref_pbuc2_then_la1 
    lda #0
    cmp RIOT+OFFSET_STRUCT_MOS6532_RIOT_INTIM
    bne __b14
    // [9] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  __b1_from___b13:
    // [9] phi (byte) idx2#1 = (byte) idx2#0 [phi:main::@13->main::@1#0] -- register_copy 
    // [9] phi (byte) idx#1 = (byte) idx#0 [phi:main::@13->main::@1#1] -- register_copy 
    jmp __b1
    // main::@14
  __b14:
    // [33] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    jmp __b13
    // main::@7
  __b7:
    // [34] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Wait for SYNC (halts CPU until end of scanline)
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [35] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) main::i#2 -- _deref_pbuc1=vbuz1 
    lda.z i
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK
    // [36] if((byte) 0!=(byte) main::p0_idx#4) goto main::@9 -- vbuc1_neq_vbuz1_then_la1 
    lda #0
    cmp.z p0_idx
    bne __b9
    jmp __b11
    // main::@11
  __b11:
    // [37] if((byte) p0_ypos#0!=(byte) main::i#2) goto main::@15 -- vbuz1_neq_vbuz2_then_la1 
    lda.z p0_ypos
    cmp.z i
    bne __b15_from___b11
    // [39] phi from main::@11 to main::@10 [phi:main::@11->main::@10]
  __b10_from___b11:
    // [39] phi (byte) main::p0_idx#8 = (byte) 1 [phi:main::@11->main::@10#0] -- vbuz1=vbuc1 
    lda #1
    sta.z p0_idx
    jmp __b10
    // [38] phi from main::@11 to main::@15 [phi:main::@11->main::@15]
  __b15_from___b11:
    jmp __b15
    // main::@15
  __b15:
    // [39] phi from main::@12 main::@15 to main::@10 [phi:main::@12/main::@15->main::@10]
  __b10_from___b12:
  __b10_from___b15:
    // [39] phi (byte) main::p0_idx#8 = (byte) main::p0_idx#3 [phi:main::@12/main::@15->main::@10#0] -- register_copy 
    jmp __b10
    // [39] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    // [39] phi (byte) main::p0_idx#8 = (byte) 0 [phi:main::@9->main::@10#0] -- vbuz1=vbuc1 
    lda #0
    sta.z p0_idx
    jmp __b10
    // main::@10
  __b10:
    // [40] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [26] phi from main::@10 to main::@6 [phi:main::@10->main::@6]
  __b6_from___b10:
    // [26] phi (byte) main::p0_idx#4 = (byte) main::p0_idx#8 [phi:main::@10->main::@6#0] -- register_copy 
    // [26] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@10->main::@6#1] -- register_copy 
    jmp __b6
    // main::@9
  __b9:
    // [41] (byte) main::gfx#0 ← *((const byte*) SPRITE_C + (byte) main::p0_idx#4) -- vbuz1=pbuc1_derefidx_vbuz2 
    // Player 0 is active - show it
    ldy.z p0_idx
    lda SPRITE_C,y
    sta.z gfx
    // [42] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) main::gfx#0 -- _deref_pbuc1=vbuz1 
    lda.z gfx
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0
    // [43] if((byte) main::gfx#0==(byte) 0) goto main::@10 -- vbuz1_eq_0_then_la1 
    lda.z gfx
    cmp #0
    beq __b10_from___b9
    jmp __b12
    // main::@12
  __b12:
    // [44] (byte) main::p0_idx#3 ← ++ (byte) main::p0_idx#4 -- vbuz1=_inc_vbuz1 
    inc.z p0_idx
    jmp __b10_from___b12
    // main::@4
  __b4:
    // [45] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    jmp __b3
}
  // File Data
.segment Data
  // Sinus table
SINTABLE_160:
.fill $100, 10+round(64.5+64.5*sin(2*PI*i/256))

  // The letter C
  SPRITE_C: .byte 0, $18, $18, $18, $18, $3c, $3c, $3c, $3c, $66, $66, $66, $66, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $66, $66, $66, $66, $3c, $3c, $3c, $3c, $18, $18, $18, $18, 0

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [1] (byte) p0_xpos ← (byte) 0 [ p0_xpos ] (  [ p0_xpos ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0) ← (byte) $f0 [ p0_xpos ] ( main:3 [ p0_xpos ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) $af [ p0_xpos ] ( main:3 [ p0_xpos ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0) ← (byte) 5 [ p0_xpos ] ( main:3 [ p0_xpos ] { }  ) always clobbers reg byte a 
Statement [10] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 2 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:128 [ idx#1 idx#0 ]
Removing always clobbered register reg byte a as potential for zp[1]:129 [ idx2#1 idx2#0 ]
Statement [11] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [12] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [13] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [14] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [15] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 0 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement asm { ldap0_xpos staTIA_WSYNC sec !: sbc#$f bcs!- eor#7 asl asl asl asl staTIA_HMP0 staTIA_RESP0  } always clobbers reg byte a 
Statement [17] (byte) p0_xpos ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx#1) [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [21] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:133 [ p0_ypos#0 ]
Statement [22] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [23] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@4 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [24] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [25] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [28] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [29] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 2 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [30] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [32] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@14 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [33] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [34] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 main::i#2 main::p0_idx#4 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 main::i#2 main::p0_idx#4 ] { }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:130 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:131 [ main::p0_idx#4 main::p0_idx#8 main::p0_idx#3 ]
Statement [45] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [1] (byte) p0_xpos ← (byte) 0 [ p0_xpos ] (  [ p0_xpos ] { }  ) always clobbers reg byte a 
Statement [6] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0) ← (byte) $f0 [ p0_xpos ] ( main:3 [ p0_xpos ] { }  ) always clobbers reg byte a 
Statement [7] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) $af [ p0_xpos ] ( main:3 [ p0_xpos ] { }  ) always clobbers reg byte a 
Statement [8] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0) ← (byte) 5 [ p0_xpos ] ( main:3 [ p0_xpos ] { }  ) always clobbers reg byte a 
Statement [10] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 2 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [11] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [12] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [13] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [14] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [15] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 0 [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement asm { ldap0_xpos staTIA_WSYNC sec !: sbc#$f bcs!- eor#7 asl asl asl asl staTIA_HMP0 staTIA_RESP0  } always clobbers reg byte a 
Statement [17] (byte) p0_xpos ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx#1) [ p0_xpos idx#1 idx2#1 ] ( main:3 [ p0_xpos idx#1 idx2#1 ] { }  ) always clobbers reg byte a 
Statement [21] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [22] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [23] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@4 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [24] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [25] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Statement [28] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [29] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 2 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [30] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [31] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [32] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@14 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [33] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 ] { }  ) always clobbers reg byte a 
Statement [34] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 main::i#2 main::p0_idx#4 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 main::i#2 main::p0_idx#4 ] { }  ) always clobbers reg byte a 
Statement [45] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] ( main:3 [ p0_xpos idx#0 idx2#0 p0_ypos#0 ] { }  ) always clobbers reg byte a 
Potential registers zp[1]:128 [ idx#1 idx#0 ] : zp[1]:128 , reg byte x , reg byte y , 
Potential registers zp[1]:129 [ idx2#1 idx2#0 ] : zp[1]:129 , reg byte x , reg byte y , 
Potential registers zp[1]:130 [ main::i#2 main::i#1 ] : zp[1]:130 , reg byte x , reg byte y , 
Potential registers zp[1]:131 [ main::p0_idx#4 main::p0_idx#8 main::p0_idx#3 ] : zp[1]:131 , reg byte x , reg byte y , 
Potential registers zp[1]:132 [ p0_xpos ] : zp[1]:132 , 
Potential registers zp[1]:133 [ p0_ypos#0 ] : zp[1]:133 , reg byte x , reg byte y , 
Potential registers zp[1]:134 [ main::gfx#0 ] : zp[1]:134 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 4,004: zp[1]:131 [ main::p0_idx#4 main::p0_idx#8 main::p0_idx#3 ] 2,419.08: zp[1]:130 [ main::i#2 main::i#1 ] 1,501.5: zp[1]:134 [ main::gfx#0 ] 
Uplift Scope [] 173.02: zp[1]:128 [ idx#1 idx#0 ] 151.75: zp[1]:129 [ idx2#1 idx2#0 ] 52.48: zp[1]:133 [ p0_ypos#0 ] 2.45: zp[1]:132 [ p0_xpos ] 
Uplift Scope [ATARI_TIA_WRITE] 
Uplift Scope [ATARI_TIA_READ] 
Uplift Scope [MOS6532_RIOT] 
Uplift Scope [__start] 

Uplifting [main] best 13548 combination reg byte y [ main::p0_idx#4 main::p0_idx#8 main::p0_idx#3 ] reg byte x [ main::i#2 main::i#1 ] reg byte a [ main::gfx#0 ] 
Uplifting [] best 13548 combination zp[1]:128 [ idx#1 idx#0 ] zp[1]:129 [ idx2#1 idx2#0 ] zp[1]:133 [ p0_ypos#0 ] zp[1]:132 [ p0_xpos ] 
Uplifting [ATARI_TIA_WRITE] best 13548 combination 
Uplifting [ATARI_TIA_READ] best 13548 combination 
Uplifting [MOS6532_RIOT] best 13548 combination 
Uplifting [__start] best 13548 combination 
Attempting to uplift remaining variables inzp[1]:128 [ idx#1 idx#0 ]
Uplifting [] best 13548 combination zp[1]:128 [ idx#1 idx#0 ] 
Attempting to uplift remaining variables inzp[1]:129 [ idx2#1 idx2#0 ]
Uplifting [] best 13548 combination zp[1]:129 [ idx2#1 idx2#0 ] 
Attempting to uplift remaining variables inzp[1]:133 [ p0_ypos#0 ]
Uplifting [] best 13548 combination zp[1]:133 [ p0_ypos#0 ] 
Attempting to uplift remaining variables inzp[1]:132 [ p0_xpos ]
Uplifting [] best 13548 combination zp[1]:132 [ p0_xpos ] 
Allocated (was zp[1]:132) zp[1]:130 [ p0_xpos ]
Allocated (was zp[1]:133) zp[1]:131 [ p0_ypos#0 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Minimal Atari 2600 VCS Program using Sprites
// Source: https://atariage.com/forums/blogs/entry/11109-step-1-generate-a-stable-display/
// Atari 2600 Registers and Constants
// https://web.archive.org/web/20170215054248/http://www.atariguide.com/pdfs/Atari_2600_VCS_Domestic_Field_Service_Manual.pdf
  // Upstart
  // Atari 2600 VCS 2K ROM
.file [name="atari2600-sprites.a26", type="bin", segments="Code, Data, Vectors"]
.segmentdef Code [start=$f800,min=$f800,max=$fff9]
.segmentdef Data [startAfter="Code",max=$fff9]
.segmentdef Vectors [start=$fffa,max=$ffff]
.segment Vectors
.word __start // NMI
.word __start // RESET
.word __start // IRQ
.segment Code

  // Global Constants & labels
  // The number of CPU cycles per scanline
  .const CYCLES_PER_SCANLINE = $4c
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0 = 6
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0 = $1b
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0 = 4
  .const OFFSET_STRUCT_MOS6532_RIOT_TIM64T = $16
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC = 2
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE = $2a
  .const OFFSET_STRUCT_MOS6532_RIOT_INTIM = 4
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK = 1
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK = 9
  // The TIA WSYNC register (for access from inline ASM)
  .label TIA_WSYNC = 2
  // The TIA RESP0 register (for access from inline ASM)
  .label TIA_RESP0 = $10
  // The TIA HMP0 register (for access from inline ASM)
  .label TIA_HMP0 = $20
  // Atari TIA write registers
  .label TIA = 0
  // Atari RIOT registers
  .label RIOT = $280
  // Player 0 X position
  .label p0_xpos = $82
  // Counts frames
  .label idx = $80
  // Player 0 Y position
  .label p0_ypos = $83
  .label idx2 = $81
.segment Code
  // __start
__start: {
    jmp __init1
    // __start::__init1
  __init1:
    // [1] (byte) p0_xpos ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z p0_xpos
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
  __b1_from___init1:
    jmp __b1
    // __start::@1
  __b1:
    // [3] call main 
    jsr main
    jmp __breturn
    // __start::@return
  __breturn:
    // [4] return 
    rts
}
  // main
main: {
    // asm { cld  }
    cld
    // [6] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0) ← (byte) $f0 -- _deref_pbuc1=vbuc2 
    // Player 0
    // - Color
    lda #$f0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0
    // [7] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) $af -- _deref_pbuc1=vbuc2 
    // - Graphics
    lda #$af
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0
    // [8] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    // - Size
    lda #5
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0
    // [9] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [9] phi (byte) idx2#1 = (byte) $39 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #$39
    sta.z idx2
    // [9] phi (byte) idx#1 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [10] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    // Vertical Sync
    // here we generate the signal that tells the TV to move the beam to the top of
    // the screen so we can start the next frame of video.
    // The Sync Signal must be on for 3 scanlines.
    lda #2
    sta TIA
    // [11] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 -- _deref_pbuc1=vbuc2 
    // D1=1, turns on Vertical Sync signal
    lda #$29*CYCLES_PER_SCANLINE/$40
    sta RIOT+OFFSET_STRUCT_MOS6532_RIOT_TIM64T
    // [12] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set timer to wait 41 lines
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [13] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Wait for Sync - halts CPU until end of 1st scanline of VSYNC
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [14] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // wait until end of 2nd scanline of VSYNC
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [15] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // wait until end of 3rd scanline of VSYNC
    lda #0
    sta TIA
    // asm { ldap0_xpos staTIA_WSYNC sec !: sbc#$f bcs!- eor#7 asl asl asl asl staTIA_HMP0 staTIA_RESP0  }
    // Vertical Sprite Position Player 0 - inline ASM to achieve cycle exact code
    lda p0_xpos
    sta TIA_WSYNC
    sec
  !:
    sbc #$f
    bcs !-
    eor #7
    asl
    asl
    asl
    asl
    sta TIA_HMP0
    sta TIA_RESP0
    // [17] (byte) p0_xpos ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z idx
    lda SINTABLE_160,y
    sta.z p0_xpos
    // [18] (byte) idx#0 ← ++ (byte) idx#1 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // [19] (byte) p0_ypos#0 ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx2#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z idx2
    lda SINTABLE_160,y
    sta.z p0_ypos
    // [20] (byte) idx2#0 ← ++ (byte) idx2#1 -- vbuz1=_inc_vbuz1 
    inc.z idx2
    // [21] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Execute horisontal movement
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [22] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE
    jmp __b3
  // Wait for the timer to run out
    // main::@3
  __b3:
    // [23] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@4 -- vbuc1_neq__deref_pbuc2_then_la1 
    lda #0
    cmp RIOT+OFFSET_STRUCT_MOS6532_RIOT_INTIM
    bne __b4
    jmp __b5
    // main::@5
  __b5:
    // [24] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Screen - display logic
    // Update the registers in TIA (the video chip) in order to generate what the player sees.
    // For now we're just going to output 192 colored scanlines lines so we have something to see.
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK
    // [25] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // D1=1, turns off Vertical Blank signal (image output on)
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK
    // [26] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
  __b6_from___b5:
    // [26] phi (byte) main::p0_idx#4 = (byte) 0 [phi:main::@5->main::@6#0] -- vbuyy=vbuc1 
    ldy #0
    // [26] phi (byte) main::i#2 = (byte) 1 [phi:main::@5->main::@6#1] -- vbuxx=vbuc1 
    ldx #1
    jmp __b6
    // main::@6
  __b6:
    // [27] if((byte) main::i#2<(byte) $c0) goto main::@7 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$c0
    bcc __b7
    jmp __b8
    // main::@8
  __b8:
    // [28] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Start OverScan
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [29] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    // Wait for SYNC (halts CPU until end of scanline)
    lda #2
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK
    // [30] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // D1=1 turns image output off
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK
    // [31] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 -- _deref_pbuc1=vbuc2 
    // Set background color to black
    lda #$1b*CYCLES_PER_SCANLINE/$40
    sta RIOT+OFFSET_STRUCT_MOS6532_RIOT_TIM64T
    jmp __b13
  // Wait for the timer to run out
    // main::@13
  __b13:
    // [32] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@14 -- vbuc1_neq__deref_pbuc2_then_la1 
    lda #0
    cmp RIOT+OFFSET_STRUCT_MOS6532_RIOT_INTIM
    bne __b14
    // [9] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
  __b1_from___b13:
    // [9] phi (byte) idx2#1 = (byte) idx2#0 [phi:main::@13->main::@1#0] -- register_copy 
    // [9] phi (byte) idx#1 = (byte) idx#0 [phi:main::@13->main::@1#1] -- register_copy 
    jmp __b1
    // main::@14
  __b14:
    // [33] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    jmp __b13
    // main::@7
  __b7:
    // [34] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Wait for SYNC (halts CPU until end of scanline)
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [35] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) main::i#2 -- _deref_pbuc1=vbuxx 
    stx TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK
    // [36] if((byte) 0!=(byte) main::p0_idx#4) goto main::@9 -- vbuc1_neq_vbuyy_then_la1 
    cpy #0
    bne __b9
    jmp __b11
    // main::@11
  __b11:
    // [37] if((byte) p0_ypos#0!=(byte) main::i#2) goto main::@15 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z p0_ypos
    bne __b15_from___b11
    // [39] phi from main::@11 to main::@10 [phi:main::@11->main::@10]
  __b10_from___b11:
    // [39] phi (byte) main::p0_idx#8 = (byte) 1 [phi:main::@11->main::@10#0] -- vbuyy=vbuc1 
    ldy #1
    jmp __b10
    // [38] phi from main::@11 to main::@15 [phi:main::@11->main::@15]
  __b15_from___b11:
    jmp __b15
    // main::@15
  __b15:
    // [39] phi from main::@12 main::@15 to main::@10 [phi:main::@12/main::@15->main::@10]
  __b10_from___b12:
  __b10_from___b15:
    // [39] phi (byte) main::p0_idx#8 = (byte) main::p0_idx#3 [phi:main::@12/main::@15->main::@10#0] -- register_copy 
    jmp __b10
    // [39] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b10_from___b9:
    // [39] phi (byte) main::p0_idx#8 = (byte) 0 [phi:main::@9->main::@10#0] -- vbuyy=vbuc1 
    ldy #0
    jmp __b10
    // main::@10
  __b10:
    // [40] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [26] phi from main::@10 to main::@6 [phi:main::@10->main::@6]
  __b6_from___b10:
    // [26] phi (byte) main::p0_idx#4 = (byte) main::p0_idx#8 [phi:main::@10->main::@6#0] -- register_copy 
    // [26] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@10->main::@6#1] -- register_copy 
    jmp __b6
    // main::@9
  __b9:
    // [41] (byte) main::gfx#0 ← *((const byte*) SPRITE_C + (byte) main::p0_idx#4) -- vbuaa=pbuc1_derefidx_vbuyy 
    // Player 0 is active - show it
    lda SPRITE_C,y
    // [42] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) main::gfx#0 -- _deref_pbuc1=vbuaa 
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0
    // [43] if((byte) main::gfx#0==(byte) 0) goto main::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b10_from___b9
    jmp __b12
    // main::@12
  __b12:
    // [44] (byte) main::p0_idx#3 ← ++ (byte) main::p0_idx#4 -- vbuyy=_inc_vbuyy 
    iny
    jmp __b10_from___b12
    // main::@4
  __b4:
    // [45] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    jmp __b3
}
  // File Data
.segment Data
  // Sinus table
SINTABLE_160:
.fill $100, 10+round(64.5+64.5*sin(2*PI*i/256))

  // The letter C
  SPRITE_C: .byte 0, $18, $18, $18, $18, $3c, $3c, $3c, $3c, $66, $66, $66, $66, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $66, $66, $66, $66, $3c, $3c, $3c, $3c, $18, $18, $18, $18, 0

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __init1
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b8
Removing instruction jmp __b13
Removing instruction jmp __b11
Removing instruction jmp __b15
Removing instruction jmp __b10
Removing instruction jmp __b12
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Removing instruction lda #0
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Replacing label __b1 with __b2
Replacing label __b15_from___b11 with __b15
Replacing label __b10_from___b12 with __b15
Removing instruction __b1_from___init1:
Removing instruction __b1:
Removing instruction __b15_from___b11:
Removing instruction __b10_from___b12:
Removing instruction __b10_from___b15:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __init1:
Removing instruction __b1:
Removing instruction __breturn:
Removing instruction __b1_from_main:
Removing instruction __b5:
Removing instruction __b6_from___b5:
Removing instruction __b8:
Removing instruction __b1_from___b13:
Removing instruction __b11:
Removing instruction __b10_from___b11:
Removing instruction __b6_from___b10:
Removing instruction __b12:
Succesful ASM optimization Pass5UnusedLabelElimination
Skipping double jump to __b10 in bne __b15
Skipping double jump to __b10 in jmp __b15
Succesful ASM optimization Pass5DoubleJumpElimination
Relabelling long label __b10_from___b9 to __b1
Succesful ASM optimization Pass5RelabelLongLabels
Removing instruction lda #0
Replacing instruction ldy #0 with TAY
Succesful ASM optimization Pass5UnnecesaryLoadElimination
Removing instruction __b15:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing unreachable instruction jmp __b10
Succesful ASM optimization Pass5UnreachableCodeElimination

FINAL SYMBOL TABLE
(byte) ATARI_TIA_READ::CXBLPF
(byte) ATARI_TIA_READ::CXM0FB
(byte) ATARI_TIA_READ::CXM0P
(byte) ATARI_TIA_READ::CXM1FB
(byte) ATARI_TIA_READ::CXM1P
(byte) ATARI_TIA_READ::CXP0FB
(byte) ATARI_TIA_READ::CXP1FB
(byte) ATARI_TIA_READ::CXPPMM
(byte) ATARI_TIA_READ::INPT0
(byte) ATARI_TIA_READ::INPT1
(byte) ATARI_TIA_READ::INPT2
(byte) ATARI_TIA_READ::INPT3
(byte) ATARI_TIA_READ::INPT4
(byte) ATARI_TIA_READ::INPT5
(byte) ATARI_TIA_WRITE::AUDC0
(byte) ATARI_TIA_WRITE::AUDC1
(byte) ATARI_TIA_WRITE::AUDF0
(byte) ATARI_TIA_WRITE::AUDF1
(byte) ATARI_TIA_WRITE::AUDV0
(byte) ATARI_TIA_WRITE::AUDV1
(byte) ATARI_TIA_WRITE::COLUBK
(byte) ATARI_TIA_WRITE::COLUP0
(byte) ATARI_TIA_WRITE::COLUP1
(byte) ATARI_TIA_WRITE::COLUPF
(byte) ATARI_TIA_WRITE::CTRLPF
(byte) ATARI_TIA_WRITE::CXCLR
(byte) ATARI_TIA_WRITE::ENABL
(byte) ATARI_TIA_WRITE::ENAM0
(byte) ATARI_TIA_WRITE::ENAM1
(byte) ATARI_TIA_WRITE::GRP0
(byte) ATARI_TIA_WRITE::GRP1
(byte) ATARI_TIA_WRITE::HMBL
(byte) ATARI_TIA_WRITE::HMCLR
(byte) ATARI_TIA_WRITE::HMM0
(byte) ATARI_TIA_WRITE::HMM1
(byte) ATARI_TIA_WRITE::HMOVE
(byte) ATARI_TIA_WRITE::HMP0
(byte) ATARI_TIA_WRITE::HMP1
(byte) ATARI_TIA_WRITE::NUSIZ0
(byte) ATARI_TIA_WRITE::NUSIZ1
(byte) ATARI_TIA_WRITE::PF0
(byte) ATARI_TIA_WRITE::PF1
(byte) ATARI_TIA_WRITE::PF2
(byte) ATARI_TIA_WRITE::REFP0
(byte) ATARI_TIA_WRITE::REFP1
(byte) ATARI_TIA_WRITE::RESBL
(byte) ATARI_TIA_WRITE::RESM0
(byte) ATARI_TIA_WRITE::RESM1
(byte) ATARI_TIA_WRITE::RESMP0
(byte) ATARI_TIA_WRITE::RESMP1
(byte) ATARI_TIA_WRITE::RESP0
(byte) ATARI_TIA_WRITE::RESP1
(byte) ATARI_TIA_WRITE::RSYNC
(byte) ATARI_TIA_WRITE::VBLANK
(byte) ATARI_TIA_WRITE::VDELBL
(byte) ATARI_TIA_WRITE::VDELP0
(byte) ATARI_TIA_WRITE::VDELP1
(byte) ATARI_TIA_WRITE::VSYNC
(byte) ATARI_TIA_WRITE::WSYNC
(const nomodify byte) CYCLES_PER_SCANLINE = (byte) $4c
(byte) MOS6532_RIOT::INTIM
(byte) MOS6532_RIOT::SWACNT
(byte) MOS6532_RIOT::SWBCNT
(byte) MOS6532_RIOT::SWCHA
(byte) MOS6532_RIOT::SWCHB
(byte) MOS6532_RIOT::T1024T
(byte) MOS6532_RIOT::TIM1T
(byte) MOS6532_RIOT::TIM64T
(byte) MOS6532_RIOT::TIM8T
(const byte*) MOS6532_RIOT::UNUSED[(number) $f]  = { fill( $f, 0) }
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK = (byte) 9
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0 = (byte) 6
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0 = (byte) $1b
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE = (byte) $2a
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0 = (byte) 4
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK = (byte) 1
(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC = (byte) 2
(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM = (byte) 4
(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T = (byte) $16
(const nomodify struct MOS6532_RIOT*) RIOT = (struct MOS6532_RIOT*) 640
(const to_nomodify byte*) SINTABLE_160[(number) $100]  = kickasm {{ .fill $100, 10+round(64.5+64.5*sin(2*PI*i/256))
 }}
(const byte*) SPRITE_C[]  = { (byte) 0, (byte) $18, (byte) $18, (byte) $18, (byte) $18, (byte) $3c, (byte) $3c, (byte) $3c, (byte) $3c, (byte) $66, (byte) $66, (byte) $66, (byte) $66, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $c0, (byte) $66, (byte) $66, (byte) $66, (byte) $66, (byte) $3c, (byte) $3c, (byte) $3c, (byte) $3c, (byte) $18, (byte) $18, (byte) $18, (byte) $18, (byte) 0 }
(const nomodify struct ATARI_TIA_WRITE*) TIA = (struct ATARI_TIA_WRITE*) 0
(const nomodify byte*) TIA_HMP0 = (byte*) 32
(const nomodify byte*) TIA_RESP0 = (byte*) 16
(const nomodify byte*) TIA_WSYNC = (byte*) 2
(void()) __start()
(label) __start::@1
(label) __start::@return
(label) __start::__init1
(byte) idx
(byte) idx#0 idx zp[1]:128 39.357142857142854
(byte) idx#1 idx zp[1]:128 133.66666666666669
(byte) idx2
(byte) idx2#0 idx2 zp[1]:129 42.38461538461539
(byte) idx2#1 idx2 zp[1]:129 109.36363636363637
(void()) main()
(label) main::@1
(label) main::@10
(label) main::@11
(label) main::@12
(label) main::@13
(label) main::@14
(label) main::@15
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@6
(label) main::@7
(label) main::@8
(label) main::@9
(byte) main::gfx
(byte) main::gfx#0 reg byte a 1501.5
(byte) main::i
(byte) main::i#1 reg byte x 2002.0
(byte) main::i#2 reg byte x 417.08333333333337
(byte) main::p0_idx
(byte) main::p0_idx#3 reg byte y 2002.0
(byte) main::p0_idx#4 reg byte y 500.5
(byte) main::p0_idx#8 reg byte y 1501.5
(byte) p0_xpos loadstore zp[1]:130 2.452380952380952
(byte) p0_ypos
(byte) p0_ypos#0 p0_ypos zp[1]:131 52.476190476190474

zp[1]:128 [ idx#1 idx#0 ]
zp[1]:129 [ idx2#1 idx2#0 ]
reg byte x [ main::i#2 main::i#1 ]
reg byte y [ main::p0_idx#4 main::p0_idx#8 main::p0_idx#3 ]
zp[1]:130 [ p0_xpos ]
zp[1]:131 [ p0_ypos#0 ]
reg byte a [ main::gfx#0 ]


FINAL ASSEMBLER
Score: 10872

  // File Comments
// Minimal Atari 2600 VCS Program using Sprites
// Source: https://atariage.com/forums/blogs/entry/11109-step-1-generate-a-stable-display/
// Atari 2600 Registers and Constants
// https://web.archive.org/web/20170215054248/http://www.atariguide.com/pdfs/Atari_2600_VCS_Domestic_Field_Service_Manual.pdf
  // Upstart
  // Atari 2600 VCS 2K ROM
.file [name="atari2600-sprites.a26", type="bin", segments="Code, Data, Vectors"]
.segmentdef Code [start=$f800,min=$f800,max=$fff9]
.segmentdef Data [startAfter="Code",max=$fff9]
.segmentdef Vectors [start=$fffa,max=$ffff]
.segment Vectors
.word __start // NMI
.word __start // RESET
.word __start // IRQ
.segment Code

  // Global Constants & labels
  // The number of CPU cycles per scanline
  .const CYCLES_PER_SCANLINE = $4c
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0 = 6
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0 = $1b
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0 = 4
  .const OFFSET_STRUCT_MOS6532_RIOT_TIM64T = $16
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC = 2
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE = $2a
  .const OFFSET_STRUCT_MOS6532_RIOT_INTIM = 4
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK = 1
  .const OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK = 9
  // The TIA WSYNC register (for access from inline ASM)
  .label TIA_WSYNC = 2
  // The TIA RESP0 register (for access from inline ASM)
  .label TIA_RESP0 = $10
  // The TIA HMP0 register (for access from inline ASM)
  .label TIA_HMP0 = $20
  // Atari TIA write registers
  .label TIA = 0
  // Atari RIOT registers
  .label RIOT = $280
  // Player 0 X position
  .label p0_xpos = $82
  // Counts frames
  .label idx = $80
  // Player 0 Y position
  .label p0_ypos = $83
  .label idx2 = $81
.segment Code
  // __start
__start: {
    // __start::__init1
    // p0_xpos
    // [1] (byte) p0_xpos ← (byte) 0 -- vbuz1=vbuc1 
    lda #0
    sta.z p0_xpos
    // [2] phi from __start::__init1 to __start::@1 [phi:__start::__init1->__start::@1]
    // __start::@1
    // [3] call main 
    jsr main
    // __start::@return
    // [4] return 
    rts
}
  // main
main: {
    // asm
    // asm { cld  }
    cld
    // TIA->COLUP0 = 0xf0
    // [6] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0) ← (byte) $f0 -- _deref_pbuc1=vbuc2 
    // Player 0
    // - Color
    lda #$f0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUP0
    // TIA->GRP0 = 0xaf
    // [7] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) $af -- _deref_pbuc1=vbuc2 
    // - Graphics
    lda #$af
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0
    // TIA->NUSIZ0 = 0x05
    // [8] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0) ← (byte) 5 -- _deref_pbuc1=vbuc2 
    // - Size
    lda #5
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_NUSIZ0
    // [9] phi from main to main::@1 [phi:main->main::@1]
    // [9] phi (byte) idx2#1 = (byte) $39 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #$39
    sta.z idx2
    // [9] phi (byte) idx#1 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z idx
    // main::@1
    // main::@2
  __b2:
    // TIA->VSYNC = 2
    // [10] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    // Vertical Sync
    // here we generate the signal that tells the TV to move the beam to the top of
    // the screen so we can start the next frame of video.
    // The Sync Signal must be on for 3 scanlines.
    lda #2
    sta TIA
    // RIOT->TIM64T = (41*CYCLES_PER_SCANLINE)/64
    // [11] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $29*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 -- _deref_pbuc1=vbuc2 
    // D1=1, turns on Vertical Sync signal
    lda #$29*CYCLES_PER_SCANLINE/$40
    sta RIOT+OFFSET_STRUCT_MOS6532_RIOT_TIM64T
    // TIA->WSYNC = 0
    // [12] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Set timer to wait 41 lines
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [13] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Wait for Sync - halts CPU until end of 1st scanline of VSYNC
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // [14] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // wait until end of 2nd scanline of VSYNC
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // TIA->VSYNC = 0
    // [15] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // wait until end of 3rd scanline of VSYNC
    sta TIA
    // asm
    // asm { ldap0_xpos staTIA_WSYNC sec !: sbc#$f bcs!- eor#7 asl asl asl asl staTIA_HMP0 staTIA_RESP0  }
    // Vertical Sprite Position Player 0 - inline ASM to achieve cycle exact code
    lda p0_xpos
    sta TIA_WSYNC
    sec
  !:
    sbc #$f
    bcs !-
    eor #7
    asl
    asl
    asl
    asl
    sta TIA_HMP0
    sta TIA_RESP0
    // p0_xpos = SINTABLE_160[idx++]
    // [17] (byte) p0_xpos ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z idx
    lda SINTABLE_160,y
    sta.z p0_xpos
    // p0_xpos = SINTABLE_160[idx++];
    // [18] (byte) idx#0 ← ++ (byte) idx#1 -- vbuz1=_inc_vbuz1 
    inc.z idx
    // p0_ypos = SINTABLE_160[idx2++]
    // [19] (byte) p0_ypos#0 ← *((const to_nomodify byte*) SINTABLE_160 + (byte) idx2#1) -- vbuz1=pbuc1_derefidx_vbuz2 
    ldy.z idx2
    lda SINTABLE_160,y
    sta.z p0_ypos
    // p0_ypos = SINTABLE_160[idx2++];
    // [20] (byte) idx2#0 ← ++ (byte) idx2#1 -- vbuz1=_inc_vbuz1 
    inc.z idx2
    // TIA->WSYNC = 0
    // [21] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Execute horisontal movement
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // TIA->HMOVE = 0
    // [22] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_HMOVE
  // Wait for the timer to run out
    // main::@3
  __b3:
    // while(RIOT->INTIM)
    // [23] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@4 -- vbuc1_neq__deref_pbuc2_then_la1 
    lda #0
    cmp RIOT+OFFSET_STRUCT_MOS6532_RIOT_INTIM
    bne __b4
    // main::@5
    // TIA->VBLANK = 0
    // [24] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Screen - display logic
    // Update the registers in TIA (the video chip) in order to generate what the player sees.
    // For now we're just going to output 192 colored scanlines lines so we have something to see.
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK
    // TIA->COLUBK = 0x0
    // [25] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // D1=1, turns off Vertical Blank signal (image output on)
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK
    // [26] phi from main::@5 to main::@6 [phi:main::@5->main::@6]
    // [26] phi (byte) main::p0_idx#4 = (byte) 0 [phi:main::@5->main::@6#0] -- vbuyy=vbuc1 
    tay
    // [26] phi (byte) main::i#2 = (byte) 1 [phi:main::@5->main::@6#1] -- vbuxx=vbuc1 
    ldx #1
    // main::@6
  __b6:
    // for(char i=1;i<192;i++)
    // [27] if((byte) main::i#2<(byte) $c0) goto main::@7 -- vbuxx_lt_vbuc1_then_la1 
    cpx #$c0
    bcc __b7
    // main::@8
    // TIA->WSYNC = 0
    // [28] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Start OverScan
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // TIA->VBLANK = 2
    // [29] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK) ← (byte) 2 -- _deref_pbuc1=vbuc2 
    // Wait for SYNC (halts CPU until end of scanline)
    lda #2
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_VBLANK
    // TIA->COLUBK = 0
    // [30] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // D1=1 turns image output off
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK
    // RIOT->TIM64T = (27*CYCLES_PER_SCANLINE)/64
    // [31] *((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_TIM64T) ← (byte) $1b*(const nomodify byte) CYCLES_PER_SCANLINE/(byte) $40 -- _deref_pbuc1=vbuc2 
    // Set background color to black
    lda #$1b*CYCLES_PER_SCANLINE/$40
    sta RIOT+OFFSET_STRUCT_MOS6532_RIOT_TIM64T
  // Wait for the timer to run out
    // main::@13
  __b13:
    // while(RIOT->INTIM)
    // [32] if((byte) 0!=*((byte*)(const nomodify struct MOS6532_RIOT*) RIOT+(const byte) OFFSET_STRUCT_MOS6532_RIOT_INTIM)) goto main::@14 -- vbuc1_neq__deref_pbuc2_then_la1 
    lda #0
    cmp RIOT+OFFSET_STRUCT_MOS6532_RIOT_INTIM
    bne __b14
    // [9] phi from main::@13 to main::@1 [phi:main::@13->main::@1]
    // [9] phi (byte) idx2#1 = (byte) idx2#0 [phi:main::@13->main::@1#0] -- register_copy 
    // [9] phi (byte) idx#1 = (byte) idx#0 [phi:main::@13->main::@1#1] -- register_copy 
    jmp __b2
    // main::@14
  __b14:
    // TIA->WSYNC = 0
    // [33] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    jmp __b13
    // main::@7
  __b7:
    // [34] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    // Wait for SYNC (halts CPU until end of scanline)
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    // TIA->COLUBK = i
    // [35] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK) ← (byte) main::i#2 -- _deref_pbuc1=vbuxx 
    stx TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_COLUBK
    // if(p0_idx)
    // [36] if((byte) 0!=(byte) main::p0_idx#4) goto main::@9 -- vbuc1_neq_vbuyy_then_la1 
    cpy #0
    bne __b9
    // main::@11
    // if(p0_ypos==i)
    // [37] if((byte) p0_ypos#0!=(byte) main::i#2) goto main::@15 -- vbuz1_neq_vbuxx_then_la1 
    cpx.z p0_ypos
    bne __b10
    // [39] phi from main::@11 to main::@10 [phi:main::@11->main::@10]
    // [39] phi (byte) main::p0_idx#8 = (byte) 1 [phi:main::@11->main::@10#0] -- vbuyy=vbuc1 
    ldy #1
    jmp __b10
    // [38] phi from main::@11 to main::@15 [phi:main::@11->main::@15]
    // main::@15
    // [39] phi from main::@12 main::@15 to main::@10 [phi:main::@12/main::@15->main::@10]
    // [39] phi (byte) main::p0_idx#8 = (byte) main::p0_idx#3 [phi:main::@12/main::@15->main::@10#0] -- register_copy 
    // [39] phi from main::@9 to main::@10 [phi:main::@9->main::@10]
  __b1:
    // [39] phi (byte) main::p0_idx#8 = (byte) 0 [phi:main::@9->main::@10#0] -- vbuyy=vbuc1 
    ldy #0
    // main::@10
  __b10:
    // for(char i=1;i<192;i++)
    // [40] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [26] phi from main::@10 to main::@6 [phi:main::@10->main::@6]
    // [26] phi (byte) main::p0_idx#4 = (byte) main::p0_idx#8 [phi:main::@10->main::@6#0] -- register_copy 
    // [26] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@10->main::@6#1] -- register_copy 
    jmp __b6
    // main::@9
  __b9:
    // gfx = SPRITE_C[p0_idx]
    // [41] (byte) main::gfx#0 ← *((const byte*) SPRITE_C + (byte) main::p0_idx#4) -- vbuaa=pbuc1_derefidx_vbuyy 
    // Player 0 is active - show it
    lda SPRITE_C,y
    // TIA->GRP0 = gfx
    // [42] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0) ← (byte) main::gfx#0 -- _deref_pbuc1=vbuaa 
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_GRP0
    // if(gfx==0)
    // [43] if((byte) main::gfx#0==(byte) 0) goto main::@10 -- vbuaa_eq_0_then_la1 
    cmp #0
    beq __b1
    // main::@12
    // p0_idx++;
    // [44] (byte) main::p0_idx#3 ← ++ (byte) main::p0_idx#4 -- vbuyy=_inc_vbuyy 
    iny
    jmp __b10
    // main::@4
  __b4:
    // TIA->WSYNC = 0
    // [45] *((byte*)(const nomodify struct ATARI_TIA_WRITE*) TIA+(const byte) OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta TIA+OFFSET_STRUCT_ATARI_TIA_WRITE_WSYNC
    jmp __b3
}
  // File Data
.segment Data
  // Sinus table
SINTABLE_160:
.fill $100, 10+round(64.5+64.5*sin(2*PI*i/256))

  // The letter C
  SPRITE_C: .byte 0, $18, $18, $18, $18, $3c, $3c, $3c, $3c, $66, $66, $66, $66, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $c0, $66, $66, $66, $66, $3c, $3c, $3c, $3c, $18, $18, $18, $18, 0

