Fixing pointer array-indexing *((word[]) words + (byte) main::i)
Fixing pointer array-indexing *((word[]) words + (byte) main::i)
Culled Empty Block (label) main::@2

CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (word[]) words#0 ← { (number) 1, (number) 2, (number) 3 }
  to:@1

(void()) main()
main: scope:[main]  from @1
  (byte*) main::SCREEN#0 ← ((byte*)) (number) $400
  (byte) main::idx#0 ← (number) 0
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (byte) main::idx#3 ← phi( main/(byte) main::idx#0 main::@1/(byte) main::idx#2 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@1/(byte) main::i#1 )
  (byte~) main::$3 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
  (byte~) main::$0 ← < *((word[]) words#0 + (byte~) main::$3)
  *((byte*) main::SCREEN#0 + (byte) main::idx#3) ← (byte~) main::$0
  (byte) main::idx#1 ← ++ (byte) main::idx#3
  (byte~) main::$4 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
  (byte~) main::$1 ← > *((word[]) words#0 + (byte~) main::$4)
  *((byte*) main::SCREEN#0 + (byte) main::idx#1) ← (byte~) main::$1
  (byte) main::idx#2 ← ++ (byte) main::idx#1
  (byte) main::i#1 ← (byte) main::i#2 + rangenext(0,2)
  (bool~) main::$2 ← (byte) main::i#1 != rangelast(0,2)
  if((bool~) main::$2) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const byte) SIZEOF_WORD = (byte) 2
(void()) main()
(byte~) main::$0
(byte~) main::$1
(bool~) main::$2
(byte~) main::$3
(byte~) main::$4
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(byte*) main::SCREEN#0
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::idx
(byte) main::idx#0
(byte) main::idx#1
(byte) main::idx#2
(byte) main::idx#3
(word[]) words
(word[]) words#0

Adding number conversion cast (unumber) 0 in (byte) main::idx#0 ← (number) 0
Successful SSA optimization PassNAddNumberTypeConversions
Added casts to value list in (word[]) words#0 ← (word[]){ (word)(number) 1, (word)(number) 2, (word)(number) 3 }
Successful SSA optimization PassNAddInitializerValueListTypeCasts
Inlining cast (byte*) main::SCREEN#0 ← (byte*)(number) $400
Inlining cast (byte) main::idx#0 ← (unumber)(number) 0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 1
Simplifying constant integer cast 2
Simplifying constant integer cast 3
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Identified duplicate assignment right side [9] (byte~) main::$4 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2DuplicateRValueIdentification
Simple Condition (bool~) main::$2 [15] if((byte) main::i#1!=rangelast(0,2)) goto main::@1
Successful SSA optimization Pass2ConditionalJumpSimplification
Identified constant from value list (word[]) { (word) 1, (word) 2, (word) 3 }
Successful SSA optimization Pass2ConstantInitializerValueLists
Constant (const word[]) words#0 = { 1, 2, 3 }
Constant (const byte*) main::SCREEN#0 = (byte*) 1024
Constant (const byte) main::idx#0 = 0
Constant (const byte) main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
Resolved ranged next value [13] main::i#1 ← ++ main::i#2 to ++
Resolved ranged comparison value [15] if(main::i#1!=rangelast(0,2)) goto main::@1 to (number) 3
Adding number conversion cast (unumber) 3 in if((byte) main::i#1!=(number) 3) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 3
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 3
Successful SSA optimization PassNFinalizeNumberTypeConversions
Alias (byte~) main::$4 = (byte~) main::$3 
Successful SSA optimization Pass2AliasElimination
Rewriting multiplication to use shift [1] (byte~) main::$4 ← (byte) main::i#2 * (const byte) SIZEOF_WORD
Successful SSA optimization Pass2MultiplyToShiftRewriting
Inlining constant with var siblings (const byte) main::idx#0
Inlining constant with var siblings (const byte) main::i#0
Constant inlined main::i#0 = (byte) 0
Constant inlined main::idx#0 = (byte) 0
Successful SSA optimization Pass2ConstantInlining
Eliminating unused constant (const byte) SIZEOF_WORD
Successful SSA optimization PassNEliminateUnusedVars
Added new block during phi lifting main::@3(between main::@1 and main::@1)
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to main:2 

Created 2 initial phi equivalence classes
Coalesced [17] main::i#3 ← main::i#1
Coalesced [18] main::idx#4 ← main::idx#2
Coalesced down to 2 phi equivalence classes
Culled Empty Block (label) @2
Culled Empty Block (label) main::@3
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@1
  [5] (byte) main::idx#3 ← phi( main/(byte) 0 main::@1/(byte) main::idx#2 )
  [5] (byte) main::i#2 ← phi( main/(byte) 0 main::@1/(byte) main::i#1 )
  [6] (byte~) main::$4 ← (byte) main::i#2 << (byte) 1
  [7] (byte~) main::$0 ← < *((const word[]) words#0 + (byte~) main::$4)
  [8] *((const byte*) main::SCREEN#0 + (byte) main::idx#3) ← (byte~) main::$0
  [9] (byte) main::idx#1 ← ++ (byte) main::idx#3
  [10] (byte~) main::$1 ← > *((const word[]) words#0 + (byte~) main::$4)
  [11] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← (byte~) main::$1
  [12] (byte) main::idx#2 ← ++ (byte) main::idx#1
  [13] (byte) main::i#1 ← ++ (byte) main::i#2
  [14] if((byte) main::i#1!=(byte) 3) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@1
  [15] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(void()) main()
(byte~) main::$0 22.0
(byte~) main::$1 22.0
(byte~) main::$4 8.25
(byte*) main::SCREEN
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 4.125
(byte) main::idx
(byte) main::idx#1 11.0
(byte) main::idx#2 7.333333333333333
(byte) main::idx#3 8.25
(word[]) words

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#3 main::idx#2 ]
Added variable main::$4 to zero page equivalence class [ main::$4 ]
Added variable main::$0 to zero page equivalence class [ main::$0 ]
Added variable main::idx#1 to zero page equivalence class [ main::idx#1 ]
Added variable main::$1 to zero page equivalence class [ main::$1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::idx#3 main::idx#2 ]
[ main::$4 ]
[ main::$0 ]
[ main::idx#1 ]
[ main::$1 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::idx#3 main::idx#2 ]
Allocated zp ZP_BYTE:4 [ main::$4 ]
Allocated zp ZP_BYTE:5 [ main::$0 ]
Allocated zp ZP_BYTE:6 [ main::idx#1 ]
Allocated zp ZP_BYTE:7 [ main::$1 ]

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Demonstrates initializing an object using = { ... } syntax
// Array of words
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label _0 = 5
    .label _1 = 7
    .label _4 = 4
    .label idx = 6
    .label idx_2 = 3
    .label i = 2
    .label idx_3 = 3
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#0] -- vbuz1=vbuc1 
    lda #0
    sta.z idx_3
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::idx#3 = (byte) main::idx#2 [phi:main::@1->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte~) main::$4 ← (byte) main::i#2 << (byte) 1 -- vbuz1=vbuz2_rol_1 
    lda.z i
    asl
    sta.z _4
    // [7] (byte~) main::$0 ← < *((const word[]) words#0 + (byte~) main::$4) -- vbuz1=_lo_pwuc1_derefidx_vbuz2 
    ldy.z _4
    lda words,y
    sta.z _0
    // [8] *((const byte*) main::SCREEN#0 + (byte) main::idx#3) ← (byte~) main::$0 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _0
    ldy.z idx_3
    sta SCREEN,y
    // [9] (byte) main::idx#1 ← ++ (byte) main::idx#3 -- vbuz1=_inc_vbuz2 
    ldy.z idx_3
    iny
    sty.z idx
    // [10] (byte~) main::$1 ← > *((const word[]) words#0 + (byte~) main::$4) -- vbuz1=_hi_pwuc1_derefidx_vbuz2 
    ldy.z _4
    lda words+1,y
    sta.z _1
    // [11] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← (byte~) main::$1 -- pbuc1_derefidx_vbuz1=vbuz2 
    lda.z _1
    ldy.z idx
    sta SCREEN,y
    // [12] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuz1=_inc_vbuz2 
    ldy.z idx
    iny
    sty.z idx_2
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [14] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [15] return 
    rts
}
  // File Data
  words: .word 1, 2, 3

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [6] (byte~) main::$4 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::idx#3 main::$4 ] ( main:2 [ main::i#2 main::idx#3 main::$4 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::idx#3 main::idx#2 ]
Statement [7] (byte~) main::$0 ← < *((const word[]) words#0 + (byte~) main::$4) [ main::i#2 main::idx#3 main::$4 main::$0 ] ( main:2 [ main::i#2 main::idx#3 main::$4 main::$0 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::$4 ]
Statement [10] (byte~) main::$1 ← > *((const word[]) words#0 + (byte~) main::$4) [ main::i#2 main::idx#1 main::$1 ] ( main:2 [ main::i#2 main::idx#1 main::$1 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:6 [ main::idx#1 ]
Statement [6] (byte~) main::$4 ← (byte) main::i#2 << (byte) 1 [ main::i#2 main::idx#3 main::$4 ] ( main:2 [ main::i#2 main::idx#3 main::$4 ] ) always clobbers reg byte a 
Statement [7] (byte~) main::$0 ← < *((const word[]) words#0 + (byte~) main::$4) [ main::i#2 main::idx#3 main::$4 main::$0 ] ( main:2 [ main::i#2 main::idx#3 main::$4 main::$0 ] ) always clobbers reg byte a 
Statement [10] (byte~) main::$1 ← > *((const word[]) words#0 + (byte~) main::$4) [ main::i#2 main::idx#1 main::$1 ] ( main:2 [ main::i#2 main::idx#1 main::$1 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::idx#3 main::idx#2 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::$4 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ main::$0 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:6 [ main::idx#1 ] : zp ZP_BYTE:6 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:7 [ main::$1 ] : zp ZP_BYTE:7 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 22: zp ZP_BYTE:5 [ main::$0 ] 22: zp ZP_BYTE:7 [ main::$1 ] 20.62: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 15.58: zp ZP_BYTE:3 [ main::idx#3 main::idx#2 ] 11: zp ZP_BYTE:6 [ main::idx#1 ] 8.25: zp ZP_BYTE:4 [ main::$4 ] 
Uplift Scope [] 

Uplifting [main] best 763 combination reg byte a [ main::$0 ] reg byte a [ main::$1 ] zp ZP_BYTE:2 [ main::i#2 main::i#1 ] reg byte x [ main::idx#3 main::idx#2 ] zp ZP_BYTE:6 [ main::idx#1 ] zp ZP_BYTE:4 [ main::$4 ] 
Limited combination testing to 100 combinations of 1296 possible.
Uplifting [] best 763 combination 
Attempting to uplift remaining variables inzp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Uplifting [main] best 763 combination zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:6 [ main::idx#1 ]
Uplifting [main] best 673 combination reg byte x [ main::idx#1 ] 
Attempting to uplift remaining variables inzp ZP_BYTE:4 [ main::$4 ]
Uplifting [main] best 603 combination reg byte y [ main::$4 ] 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates initializing an object using = { ... } syntax
// Array of words
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(bbegin)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
b1_from_bbegin:
  jmp b1
  // @1
b1:
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
main_from_b1:
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
bend_from_b1:
  jmp bend
  // @end
bend:
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
    // [5] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    lda #0
    sta.z i
    jmp b1
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
  b1_from_b1:
    // [5] phi (byte) main::idx#3 = (byte) main::idx#2 [phi:main::@1->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    jmp b1
    // main::@1
  b1:
    // [6] (byte~) main::$4 ← (byte) main::i#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // [7] (byte~) main::$0 ← < *((const word[]) words#0 + (byte~) main::$4) -- vbuaa=_lo_pwuc1_derefidx_vbuyy 
    lda words,y
    // [8] *((const byte*) main::SCREEN#0 + (byte) main::idx#3) ← (byte~) main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [9] (byte) main::idx#1 ← ++ (byte) main::idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // [10] (byte~) main::$1 ← > *((const word[]) words#0 + (byte~) main::$4) -- vbuaa=_hi_pwuc1_derefidx_vbuyy 
    lda words+1,y
    // [11] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← (byte~) main::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // [12] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [14] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne b1_from_b1
    jmp breturn
    // main::@return
  breturn:
    // [15] return 
    rts
}
  // File Data
  words: .word 1, 2, 3

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp b1
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing instruction lda #0 with TXA
Replacing label b1_from_b1 with b1
Removing instruction b1_from_bbegin:
Removing instruction b1:
Removing instruction main_from_b1:
Removing instruction bend_from_b1:
Removing instruction b1_from_b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Updating BasicUpstart to call main directly
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin
Removing instruction jmp b1
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction bbegin:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(void()) main()
(byte~) main::$0 reg byte a 22.0
(byte~) main::$1 reg byte a 22.0
(byte~) main::$4 reg byte y 8.25
(label) main::@1
(label) main::@return
(byte*) main::SCREEN
(const byte*) main::SCREEN#0 SCREEN = (byte*) 1024
(byte) main::i
(byte) main::i#1 i zp ZP_BYTE:2 16.5
(byte) main::i#2 i zp ZP_BYTE:2 4.125
(byte) main::idx
(byte) main::idx#1 reg byte x 11.0
(byte) main::idx#2 reg byte x 7.333333333333333
(byte) main::idx#3 reg byte x 8.25
(word[]) words
(const word[]) words#0 words = { (word) 1, (word) 2, (word) 3 }

zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
reg byte x [ main::idx#3 main::idx#2 ]
reg byte y [ main::$4 ]
reg byte a [ main::$0 ]
reg byte x [ main::idx#1 ]
reg byte a [ main::$1 ]


FINAL ASSEMBLER
Score: 501

  // File Comments
// Demonstrates initializing an object using = { ... } syntax
// Array of words
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [4] phi from @1 to main [phi:@1->main]
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    .label SCREEN = $400
    .label i = 2
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // [5] phi (byte) main::idx#3 = (byte) 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [5] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#1] -- vbuz1=vbuc1 
    txa
    sta.z i
    // [5] phi from main::@1 to main::@1 [phi:main::@1->main::@1]
    // [5] phi (byte) main::idx#3 = (byte) main::idx#2 [phi:main::@1->main::@1#0] -- register_copy 
    // [5] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@1->main::@1#1] -- register_copy 
    // main::@1
  b1:
    // <words[i]
    // [6] (byte~) main::$4 ← (byte) main::i#2 << (byte) 1 -- vbuyy=vbuz1_rol_1 
    lda.z i
    asl
    tay
    // [7] (byte~) main::$0 ← < *((const word[]) words#0 + (byte~) main::$4) -- vbuaa=_lo_pwuc1_derefidx_vbuyy 
    lda words,y
    // SCREEN[idx++] = <words[i]
    // [8] *((const byte*) main::SCREEN#0 + (byte) main::idx#3) ← (byte~) main::$0 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = <words[i];
    // [9] (byte) main::idx#1 ← ++ (byte) main::idx#3 -- vbuxx=_inc_vbuxx 
    inx
    // >words[i]
    // [10] (byte~) main::$1 ← > *((const word[]) words#0 + (byte~) main::$4) -- vbuaa=_hi_pwuc1_derefidx_vbuyy 
    lda words+1,y
    // SCREEN[idx++] = >words[i]
    // [11] *((const byte*) main::SCREEN#0 + (byte) main::idx#1) ← (byte~) main::$1 -- pbuc1_derefidx_vbuxx=vbuaa 
    sta SCREEN,x
    // SCREEN[idx++] = >words[i];
    // [12] (byte) main::idx#2 ← ++ (byte) main::idx#1 -- vbuxx=_inc_vbuxx 
    inx
    // for( char i: 0..2)
    // [13] (byte) main::i#1 ← ++ (byte) main::i#2 -- vbuz1=_inc_vbuz1 
    inc.z i
    // [14] if((byte) main::i#1!=(byte) 3) goto main::@1 -- vbuz1_neq_vbuc1_then_la1 
    lda #3
    cmp.z i
    bne b1
    // main::@return
    // }
    // [15] return 
    rts
}
  // File Data
  words: .word 1, 2, 3

