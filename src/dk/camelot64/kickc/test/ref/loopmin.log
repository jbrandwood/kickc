byte i=10;
byte s=0;
do {
  if(i>5) {
    s=s+i;
  }
  i--;
} while (i>0)
Adding pre/post-modifier (byte) i ← -- (byte) i
PROGRAM
  (byte) i ← (byte) 10
  (byte) s ← (byte) 0
@1:
  (boolean~) $0 ← (byte) i > (byte) 5
  if((boolean~) $0) goto @2
  goto @3
@2:
  (byte~) $1 ← (byte) s + (byte) i
  (byte) s ← (byte~) $1
@3:
  (byte) i ← -- (byte) i
  (boolean~) $2 ← (byte) i > (byte) 0
  if((boolean~) $2) goto @1

SYMBOLS
(boolean~) $0
(byte~) $1
(boolean~) $2
(label) @1
(label) @2
(label) @3
(byte) i
(byte) s

INITIAL CONTROL FLOW GRAPH
@BEGIN: from
  (byte) i ← (byte) 10
  (byte) s ← (byte) 0
  to:@1
@1: from @3 @BEGIN
  (boolean~) $0 ← (byte) i > (byte) 5
  if((boolean~) $0) goto @2
  to:@4
@2: from @1 @5
  (byte~) $1 ← (byte) s + (byte) i
  (byte) s ← (byte~) $1
  to:@3
@4: from @1
  to:@3
@3: from @2 @4
  (byte) i ← -- (byte) i
  (boolean~) $2 ← (byte) i > (byte) 0
  if((boolean~) $2) goto @1
  to:@6
@5: from
  to:@2
@6: from @3
  to:@END
@END: from @6

Removing empty block @4
Removing empty block @5
Removing empty block @6
@BEGIN: from
  (byte) i ← (byte) 10
  (byte) s ← (byte) 0
  to:@1
@1: from @3 @BEGIN
  (boolean~) $0 ← (byte) i > (byte) 5
  if((boolean~) $0) goto @2
  to:@3
@2: from @1
  (byte~) $1 ← (byte) s + (byte) i
  (byte) s ← (byte~) $1
  to:@3
@3: from @1 @2
  (byte) i ← -- (byte) i
  (boolean~) $2 ← (byte) i > (byte) 0
  if((boolean~) $2) goto @1
  to:@END
@END: from @3

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@BEGIN: from
  (byte) i ← (byte) 10
  (byte) s ← (byte) 0
  to:@1
@1: from @3 @BEGIN
  (boolean~) $0 ← (byte) i > (byte) 5
  if((boolean~) $0) goto @2
  to:@3
@2: from @1
  (byte~) $1 ← (byte) s + (byte) i
  (byte) s ← (byte~) $1
  to:@3
@3: from @1 @2
  (byte) i ← -- (byte) i
  (boolean~) $2 ← (byte) i > (byte) 0
  if((boolean~) $2) goto @1
  to:@END
@END: from @3

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@BEGIN: from
  (byte) i#0 ← (byte) 10
  (byte) s#0 ← (byte) 0
  to:@1
@1: from @3 @BEGIN
  (byte) s#3 ← phi( @3/(byte) s#4 @BEGIN/(byte) s#0 )
  (byte) i#2 ← phi( @3/(byte) i#1 @BEGIN/(byte) i#0 )
  (boolean~) $0 ← (byte) i#2 > (byte) 5
  if((boolean~) $0) goto @2
  to:@3
@2: from @1
  (byte) i#3 ← phi( @1/(byte) i#2 )
  (byte) s#2 ← phi( @1/(byte) s#3 )
  (byte~) $1 ← (byte) s#2 + (byte) i#3
  (byte) s#1 ← (byte~) $1
  to:@3
@3: from @1 @2
  (byte) s#4 ← phi( @1/(byte) s#3 @2/(byte) s#1 )
  (byte) i#4 ← phi( @1/(byte) i#2 @2/(byte) i#3 )
  (byte) i#1 ← -- (byte) i#4
  (boolean~) $2 ← (byte) i#1 > (byte) 0
  if((boolean~) $2) goto @1
  to:@END
@END: from @3

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@BEGIN: from
  (byte) i#0 ← (byte) 10
  (byte) s#0 ← (byte) 0
  to:@1
@1: from @3 @BEGIN
  (byte) s#3 ← phi( @3/(byte) s#4 @BEGIN/(byte) s#0 )
  (byte) i#2 ← phi( @3/(byte) i#1 @BEGIN/(byte) i#0 )
  (boolean~) $0 ← (byte) i#2 > (byte) 5
  if((boolean~) $0) goto @2
  to:@3
@2: from @1
  (byte) i#3 ← phi( @1/(byte) i#2 )
  (byte) s#2 ← phi( @1/(byte) s#3 )
  (byte~) $1 ← (byte) s#2 + (byte) i#3
  (byte) s#1 ← (byte~) $1
  to:@3
@3: from @1 @2
  (byte) s#4 ← phi( @1/(byte) s#3 @2/(byte) s#1 )
  (byte) i#4 ← phi( @1/(byte) i#2 @2/(byte) i#3 )
  (byte) i#1 ← -- (byte) i#4
  (boolean~) $2 ← (byte) i#1 > (byte) 0
  if((boolean~) $2) goto @1
  to:@END
@END: from @3

Constant (byte) i#0 (byte) 10
Constant (byte) s#0 (byte) 0
Succesful SSA optimization Pass2ConstantPropagation
CONTROL FLOW GRAPH
@BEGIN: from
  to:@1
@1: from @3 @BEGIN
  (byte) s#3 ← phi( @3/(byte) s#4 @BEGIN/(byte) 0 )
  (byte) i#2 ← phi( @3/(byte) i#1 @BEGIN/(byte) 10 )
  (boolean~) $0 ← (byte) i#2 > (byte) 5
  if((boolean~) $0) goto @2
  to:@3
@2: from @1
  (byte) i#3 ← phi( @1/(byte) i#2 )
  (byte) s#2 ← phi( @1/(byte) s#3 )
  (byte~) $1 ← (byte) s#2 + (byte) i#3
  (byte) s#1 ← (byte~) $1
  to:@3
@3: from @1 @2
  (byte) s#4 ← phi( @1/(byte) s#3 @2/(byte) s#1 )
  (byte) i#4 ← phi( @1/(byte) i#2 @2/(byte) i#3 )
  (byte) i#1 ← -- (byte) i#4
  (boolean~) $2 ← (byte) i#1 > (byte) 0
  if((boolean~) $2) goto @1
  to:@END
@END: from @3

Alias (byte) s#2 = (byte) s#3 
Alias (byte) i#2 = (byte) i#3 
Alias (byte) s#1 = (byte~) $1 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@BEGIN: from
  to:@1
@1: from @3 @BEGIN
  (byte) s#2 ← phi( @3/(byte) s#4 @BEGIN/(byte) 0 )
  (byte) i#2 ← phi( @3/(byte) i#1 @BEGIN/(byte) 10 )
  (boolean~) $0 ← (byte) i#2 > (byte) 5
  if((boolean~) $0) goto @2
  to:@3
@2: from @1
  (byte) s#1 ← (byte) s#2 + (byte) i#2
  to:@3
@3: from @1 @2
  (byte) s#4 ← phi( @1/(byte) s#2 @2/(byte) s#1 )
  (byte) i#4 ← phi( @1/(byte) i#2 @2/(byte) i#2 )
  (byte) i#1 ← -- (byte) i#4
  (boolean~) $2 ← (byte) i#1 > (byte) 0
  if((boolean~) $2) goto @1
  to:@END
@END: from @3

Redundant Phi (byte) i#4 (byte) i#2
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@BEGIN: from
  to:@1
@1: from @3 @BEGIN
  (byte) s#2 ← phi( @3/(byte) s#4 @BEGIN/(byte) 0 )
  (byte) i#2 ← phi( @3/(byte) i#1 @BEGIN/(byte) 10 )
  (boolean~) $0 ← (byte) i#2 > (byte) 5
  if((boolean~) $0) goto @2
  to:@3
@2: from @1
  (byte) s#1 ← (byte) s#2 + (byte) i#2
  to:@3
@3: from @1 @2
  (byte) s#4 ← phi( @1/(byte) s#2 @2/(byte) s#1 )
  (byte) i#1 ← -- (byte) i#2
  (boolean~) $2 ← (byte) i#1 > (byte) 0
  if((boolean~) $2) goto @1
  to:@END
@END: from @3

Simple Condition (boolean~) $0 if((byte) i#2>(byte) 5) goto @2
Simple Condition (boolean~) $2 if((byte) i#1>(byte) 0) goto @1
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@BEGIN: from
  to:@1
@1: from @3 @BEGIN
  (byte) s#2 ← phi( @3/(byte) s#4 @BEGIN/(byte) 0 )
  (byte) i#2 ← phi( @3/(byte) i#1 @BEGIN/(byte) 10 )
  if((byte) i#2>(byte) 5) goto @2
  to:@3
@2: from @1
  (byte) s#1 ← (byte) s#2 + (byte) i#2
  to:@3
@3: from @1 @2
  (byte) s#4 ← phi( @1/(byte) s#2 @2/(byte) s#1 )
  (byte) i#1 ← -- (byte) i#2
  if((byte) i#1>(byte) 0) goto @1
  to:@END
@END: from @3

INITIAL ASM
BBEGIN:
B1_from_BBEGIN:
  // (byte) s#2 = (byte) 0  // zpby1=coby1
  lda #0
  sta 5
  // (byte) i#2 = (byte) 10  // zpby1=coby1
  lda #10
  sta 4
  jmp B1
B1_from_B3:
  // (byte) s#2 = (byte) s#4  // zpby1=zpby2
  lda 6
  sta 5
  // (byte) i#2 = (byte) i#1  // zpby1=zpby2
  lda 3
  sta 4
  jmp B1
B1:
  // if((byte) i#2>(byte) 5) goto @2  //  zpby1_gt_coby1_then_la1
  lda 4
  cmp #5
  beq !+
  bcs B2
!:
B3_from_B1:
  // (byte) s#4 = (byte) s#2  // zpby1=zpby2
  lda 5
  sta 6
  jmp B3
B3:
  // (byte) i#1 ← -- (byte) i#2  //  zpby1=_dec_zpby2
  lda 4
  sta 3
  dec 3
  // if((byte) i#1>(byte) 0) goto @1  //  zpby1_gt_0_then_la1
  lda 3
  bne B1_from_B3
  jmp BEND
BEND:
B2:
  // (byte) s#1 ← (byte) s#2 + (byte) i#2  //  zpby1=zpby2_plus_zpby3
  lda 5
  clc
  adc 4
  sta 2
B3_from_B2:
  // (byte) s#4 = (byte) s#1  // zpby1=zpby2
  lda 2
  sta 6
  jmp B3

Removing instruction jmp B1
Removing instruction jmp B3
Removing instruction jmp BEND
Succesful ASM optimization Pass4NextJumpElimination
ASSEMBLER
BBEGIN:
B1_from_BBEGIN:
  // (byte) s#2 = (byte) 0  // zpby1=coby1
  lda #0
  sta 5
  // (byte) i#2 = (byte) 10  // zpby1=coby1
  lda #10
  sta 4
  jmp B1
B1_from_B3:
  // (byte) s#2 = (byte) s#4  // zpby1=zpby2
  lda 6
  sta 5
  // (byte) i#2 = (byte) i#1  // zpby1=zpby2
  lda 3
  sta 4
B1:
  // if((byte) i#2>(byte) 5) goto @2  //  zpby1_gt_coby1_then_la1
  lda 4
  cmp #5
  beq !+
  bcs B2
!:
B3_from_B1:
  // (byte) s#4 = (byte) s#2  // zpby1=zpby2
  lda 5
  sta 6
B3:
  // (byte) i#1 ← -- (byte) i#2  //  zpby1=_dec_zpby2
  lda 4
  sta 3
  dec 3
  // if((byte) i#1>(byte) 0) goto @1  //  zpby1_gt_0_then_la1
  lda 3
  bne B1_from_B3
BEND:
B2:
  // (byte) s#1 ← (byte) s#2 + (byte) i#2  //  zpby1=zpby2_plus_zpby3
  lda 5
  clc
  adc 4
  sta 2
B3_from_B2:
  // (byte) s#4 = (byte) s#1  // zpby1=zpby2
  lda 2
  sta 6
  jmp B3

FINAL SYMBOL TABLE
(label) @1
(label) @2
(label) @3
(label) @BEGIN
(label) @END
(byte) i
(byte) i#1 zp byte:3
(byte) i#2 zp byte:4
(byte) s
(byte) s#1 zp byte:2
(byte) s#2 zp byte:5
(byte) s#4 zp byte:6

FINAL CODE
BBEGIN:
B1_from_BBEGIN:
  // (byte) s#2 = (byte) 0  // zpby1=coby1
  lda #0
  sta 5
  // (byte) i#2 = (byte) 10  // zpby1=coby1
  lda #10
  sta 4
  jmp B1
B1_from_B3:
  // (byte) s#2 = (byte) s#4  // zpby1=zpby2
  lda 6
  sta 5
  // (byte) i#2 = (byte) i#1  // zpby1=zpby2
  lda 3
  sta 4
B1:
  // if((byte) i#2>(byte) 5) goto @2  //  zpby1_gt_coby1_then_la1
  lda 4
  cmp #5
  beq !+
  bcs B2
!:
B3_from_B1:
  // (byte) s#4 = (byte) s#2  // zpby1=zpby2
  lda 5
  sta 6
B3:
  // (byte) i#1 ← -- (byte) i#2  //  zpby1=_dec_zpby2
  lda 4
  sta 3
  dec 3
  // if((byte) i#1>(byte) 0) goto @1  //  zpby1_gt_0_then_la1
  lda 3
  bne B1_from_B3
BEND:
B2:
  // (byte) s#1 ← (byte) s#2 + (byte) i#2  //  zpby1=zpby2_plus_zpby3
  lda 5
  clc
  adc 4
  sta 2
B3_from_B2:
  // (byte) s#4 = (byte) s#1  // zpby1=zpby2
  lda 2
  sta 6
  jmp B3

