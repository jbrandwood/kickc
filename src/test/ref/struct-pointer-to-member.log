
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  to:@1

(void()) main()
main: scope:[main]  from @1
  *((byte*)(const nomodify struct SCREEN_COLORS*) COLORS+(const byte) OFFSET_STRUCT_SCREEN_COLORS_BORDER) ← (number) 0
  *((const nomodify byte*) BG_COLOR) ← (number) 6
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return
@1: scope:[]  from @begin
  call main 
  to:@2
@2: scope:[]  from @1
  to:@end
@end: scope:[]  from @2

SYMBOL TABLE SSA
(label) @1
(label) @2
(label) @begin
(label) @end
(const nomodify byte*) BG_COLOR = (byte*)(byte*)(const nomodify struct SCREEN_COLORS*) COLORS+(const byte) OFFSET_STRUCT_SCREEN_COLORS_BG0
(const nomodify struct SCREEN_COLORS*) COLORS = (struct SCREEN_COLORS*)(number) $d020
(const byte) OFFSET_STRUCT_SCREEN_COLORS_BG0 = (byte) 1
(const byte) OFFSET_STRUCT_SCREEN_COLORS_BORDER = (byte) 0
(byte) SCREEN_COLORS::BG0
(byte) SCREEN_COLORS::BG1
(byte) SCREEN_COLORS::BG2
(byte) SCREEN_COLORS::BG3
(byte) SCREEN_COLORS::BORDER
(void()) main()
(label) main::@return

Adding number conversion cast (unumber) 0 in *((byte*)(const nomodify struct SCREEN_COLORS*) COLORS+(const byte) OFFSET_STRUCT_SCREEN_COLORS_BORDER) ← (number) 0
Adding number conversion cast (unumber) 6 in *((const nomodify byte*) BG_COLOR) ← (number) 6
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *((byte*)(const nomodify struct SCREEN_COLORS*) COLORS+(const byte) OFFSET_STRUCT_SCREEN_COLORS_BORDER) ← (unumber)(number) 0
Inlining cast *((const nomodify byte*) BG_COLOR) ← (unumber)(number) 6
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (struct SCREEN_COLORS*) 53280
Simplifying constant integer cast (byte*)(const nomodify struct SCREEN_COLORS*) COLORS+(const byte) OFFSET_STRUCT_SCREEN_COLORS_BG0
Simplifying constant integer cast 0
Simplifying constant integer cast 6
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 6
Successful SSA optimization PassNFinalizeNumberTypeConversions
Simplifying expression containing zero (byte*)COLORS in [0] *((byte*)(const nomodify struct SCREEN_COLORS*) COLORS+(const byte) OFFSET_STRUCT_SCREEN_COLORS_BORDER) ← (byte) 0
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant (const byte) OFFSET_STRUCT_SCREEN_COLORS_BORDER
Successful SSA optimization PassNEliminateUnusedVars
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @2
Adding NOP phi() at start of @end
CALL GRAPH
Calls in [] to main:2 

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes
Culled Empty Block (label) @2
Adding NOP phi() at start of @begin
Adding NOP phi() at start of @1
Adding NOP phi() at start of @end

FINAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] *((byte*)(const nomodify struct SCREEN_COLORS*) COLORS) ← (byte) 0
  [5] *((const nomodify byte*) BG_COLOR) ← (byte) 6
  to:main::@return
main::@return: scope:[main]  from main
  [6] return 
  to:@return


VARIABLE REGISTER WEIGHTS
(byte) SCREEN_COLORS::BG0
(byte) SCREEN_COLORS::BG1
(byte) SCREEN_COLORS::BG2
(byte) SCREEN_COLORS::BG3
(byte) SCREEN_COLORS::BORDER
(void()) main()

Initial phi equivalence classes
Complete equivalence classes

INITIAL ASM
Target platform is c64basic / MOS6502X
  // File Comments
// Support for pointer to struct member
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_SCREEN_COLORS_BG0 = 1
  // Commodore 64 processor port
  .label COLORS = $d020
  // The background color
  .label BG_COLOR = COLORS+OFFSET_STRUCT_SCREEN_COLORS_BG0
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((byte*)(const nomodify struct SCREEN_COLORS*) COLORS) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta COLORS
    // [5] *((const nomodify byte*) BG_COLOR) ← (byte) 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [4] *((byte*)(const nomodify struct SCREEN_COLORS*) COLORS) ← (byte) 0 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 
Statement [5] *((const nomodify byte*) BG_COLOR) ← (byte) 6 [ ] ( main:2 [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [SCREEN_COLORS] 
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [SCREEN_COLORS] best 33 combination 
Uplifting [main] best 33 combination 
Uplifting [] best 33 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Support for pointer to struct member
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_SCREEN_COLORS_BG0 = 1
  // Commodore 64 processor port
  .label COLORS = $d020
  // The background color
  .label BG_COLOR = COLORS+OFFSET_STRUCT_SCREEN_COLORS_BG0
  // @begin
__bbegin:
  // [1] phi from @begin to @1 [phi:@begin->@1]
__b1_from___bbegin:
  jmp __b1
  // @1
__b1:
  // [2] call main 
  jsr main
  // [3] phi from @1 to @end [phi:@1->@end]
__bend_from___b1:
  jmp __bend
  // @end
__bend:
  // main
main: {
    // [4] *((byte*)(const nomodify struct SCREEN_COLORS*) COLORS) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta COLORS
    // [5] *((const nomodify byte*) BG_COLOR) ← (byte) 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BG_COLOR
    jmp __breturn
    // main::@return
  __breturn:
    // [6] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __bend
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __b1_from___bbegin:
Removing instruction __b1:
Removing instruction __bend_from___b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __bbegin:
Removing instruction __bend:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jsr main
Succesful ASM optimization Pass5SkipBegin

FINAL SYMBOL TABLE
(label) @1
(label) @begin
(label) @end
(const nomodify byte*) BG_COLOR = (byte*)(const nomodify struct SCREEN_COLORS*) COLORS+(const byte) OFFSET_STRUCT_SCREEN_COLORS_BG0
(const nomodify struct SCREEN_COLORS*) COLORS = (struct SCREEN_COLORS*) 53280
(const byte) OFFSET_STRUCT_SCREEN_COLORS_BG0 = (byte) 1
(byte) SCREEN_COLORS::BG0
(byte) SCREEN_COLORS::BG1
(byte) SCREEN_COLORS::BG2
(byte) SCREEN_COLORS::BG3
(byte) SCREEN_COLORS::BORDER
(void()) main()
(label) main::@return



FINAL ASSEMBLER
Score: 18

  // File Comments
// Support for pointer to struct member
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  .const OFFSET_STRUCT_SCREEN_COLORS_BG0 = 1
  // Commodore 64 processor port
  .label COLORS = $d020
  // The background color
  .label BG_COLOR = COLORS+OFFSET_STRUCT_SCREEN_COLORS_BG0
  // @begin
  // [1] phi from @begin to @1 [phi:@begin->@1]
  // @1
  // [2] call main 
  // [3] phi from @1 to @end [phi:@1->@end]
  // @end
  // main
main: {
    // COLORS->BORDER = 0
    // [4] *((byte*)(const nomodify struct SCREEN_COLORS*) COLORS) ← (byte) 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta COLORS
    // *BG_COLOR = 6
    // [5] *((const nomodify byte*) BG_COLOR) ← (byte) 6 -- _deref_pbuc1=vbuc2 
    lda #6
    sta BG_COLOR
    // main::@return
    // }
    // [6] return 
    rts
}
  // File Data

