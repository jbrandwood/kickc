Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  main::$0 = byte0  main::addr
  *VDP_REG = (char)main::$0
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  return 
  to:@return

SYMBOL TABLE SSA
__constant const char *VDP_REG = (char *)$a001
void __start()
void main()
char main::$0
__constant char main::addr = 3

Simplifying constant pointer cast (char *) 40961
Simplifying constant integer cast main::$0
Successful SSA optimization PassNCastSimplification
Constant right-side identified [0] main::$0 = byte0  main::addr
Successful SSA optimization Pass2ConstantRValueConsolidation
Constant main::$0 = byte0 main::addr
Successful SSA optimization Pass2ConstantIdentification
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Constant inlined main::$0 = byte0 main::addr
Successful SSA optimization Pass2ConstantInlining
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *VDP_REG = byte0 main::addr
  to:main::@return
main::@return: scope:[main]  from main
  [1] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *VDP_REG = byte0 main::addr [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 15 combination 
Uplifting [] best 15 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="lobyte-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label VDP_REG = $a001
.segment Code
  // main
main: {
    .const addr = 3
    // [0] *VDP_REG = byte0 main::addr -- _deref_pbuc1=vbuc2 
    lda #<addr
    sta VDP_REG
    jmp __breturn
    // main::@return
  __breturn:
    // [1] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
__constant const char *VDP_REG = (char *) 40961
void main()
__constant char main::addr = 3



FINAL ASSEMBLER
Score: 12

  // File Comments
  // Upstart
  // Commodore 64 PRG executable file
.file [name="lobyte-1.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .label VDP_REG = $a001
.segment Code
  // main
main: {
    .const addr = 3
    // TMS_WRITE_CTRL_PORT
    // [0] *VDP_REG = byte0 main::addr -- _deref_pbuc1=vbuc2 
    lda #<addr
    sta VDP_REG
    // main::@return
    // }
    // [1] return 
    rts
}
  // File Data

