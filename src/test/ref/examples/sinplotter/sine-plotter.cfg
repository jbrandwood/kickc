@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const signed word*) sin2#0) {{ .for(var i=0; i<512; i++) {
  	  .word sin(toRadians([i*360]/512))*320
    }
 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()
main: scope:[main]  from @2
  asm { sei  }
  [6] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [7] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [8] *((const byte*) D011#0) ← (const byte) VIC_BMM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  to:main::vicSelectGfxBank1
main::vicSelectGfxBank1: scope:[main]  from main
  [9] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  to:main::vicSelectGfxBank1_toDd001
main::vicSelectGfxBank1_toDd001: scope:[main]  from main::vicSelectGfxBank1
  [10] phi()
  to:main::vicSelectGfxBank1_@1
main::vicSelectGfxBank1_@1: scope:[main]  from main::vicSelectGfxBank1_toDd001
  [11] *((const byte*) CIA2_PORT_A#0) ← (const byte) main::vicSelectGfxBank1_toDd001_return#0
  to:main::@2
main::@2: scope:[main]  from main::vicSelectGfxBank1_@1
  [12] *((const byte*) D016#0) ← (const byte) VIC_CSEL#0
  to:main::toD0181
main::toD0181: scope:[main]  from main::@2
  [13] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [14] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [15] call fill 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [16] phi()
  [17] call bitmap_init 
  to:main::@5
main::@5: scope:[main]  from main::@4
  [18] phi()
  [19] call bitmap_clear 
  to:main::@6
main::@6: scope:[main]  from main::@5
  [20] phi()
  [21] call sin16s_gen2 
  to:main::@7
main::@7: scope:[main]  from main::@6
  [22] phi()
  [23] call render_sine 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@7
  [24] *((const byte*) BGCOL#0) ← ++ *((const byte*) BGCOL#0)
  to:main::@1
render_sine: scope:[render_sine]  from main::@7
  [25] phi()
  to:render_sine::@1
render_sine::@1: scope:[render_sine]  from render_sine render_sine::@2
  [26] (word) render_sine::xpos#3 ← phi( render_sine/(byte/signed byte/word/signed word/dword/signed dword) 0 render_sine::@2/(word) render_sine::xpos#8 )
  [26] (word) render_sine::sin_idx#2 ← phi( render_sine/(byte/signed byte/word/signed word/dword/signed dword) 0 render_sine::@2/(word) render_sine::sin_idx#1 )
  [27] (word~) render_sine::$0 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [28] (signed word*~) render_sine::$1 ← (const signed word[$200]) sin#0 + (word~) render_sine::$0
  [29] (signed word) render_sine::sin_val#0 ← *((signed word*~) render_sine::$1)
  [30] (signed word) wrap_y::y#0 ← (signed word) render_sine::sin_val#0
  [31] call wrap_y 
  [32] (byte) wrap_y::return#0 ← (byte) wrap_y::return#2
  to:render_sine::@3
render_sine::@3: scope:[render_sine]  from render_sine::@1
  [33] (byte) render_sine::ypos#0 ← (byte) wrap_y::return#0
  [34] (word) bitmap_plot::x#0 ← (word) render_sine::xpos#3
  [35] (byte) bitmap_plot::y#0 ← (byte) render_sine::ypos#0
  [36] call bitmap_plot 
  to:render_sine::@4
render_sine::@4: scope:[render_sine]  from render_sine::@3
  [37] (word~) render_sine::$4 ← (word) render_sine::sin_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [38] (signed word*~) render_sine::$5 ← (const signed word*) sin2#0 + (word~) render_sine::$4
  [39] (signed word) render_sine::sin2_val#0 ← *((signed word*~) render_sine::$5)
  [40] (signed word) wrap_y::y#1 ← (signed word) render_sine::sin2_val#0 + (byte/signed byte/word/signed word/dword/signed dword) $a
  [41] call wrap_y 
  [42] (byte) wrap_y::return#1 ← (byte) wrap_y::return#2
  to:render_sine::@5
render_sine::@5: scope:[render_sine]  from render_sine::@4
  [43] (byte) render_sine::ypos2#0 ← (byte) wrap_y::return#1
  [44] (word) bitmap_plot::x#1 ← (word) render_sine::xpos#3
  [45] (byte) bitmap_plot::y#1 ← (byte) render_sine::ypos2#0
  [46] call bitmap_plot 
  to:render_sine::@6
render_sine::@6: scope:[render_sine]  from render_sine::@5
  [47] (word) render_sine::xpos#1 ← ++ (word) render_sine::xpos#3
  [48] if((word) render_sine::xpos#1!=(word/signed word/dword/signed dword) $140) goto render_sine::@7
  to:render_sine::@2
render_sine::@2: scope:[render_sine]  from render_sine::@6 render_sine::@7
  [49] (word) render_sine::xpos#8 ← phi( render_sine::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 render_sine::@7/(word) render_sine::xpos#1 )
  [50] (word) render_sine::sin_idx#1 ← ++ (word) render_sine::sin_idx#2
  [51] if((word) render_sine::sin_idx#1<(const word) SIN_SIZE#0) goto render_sine::@1
  to:render_sine::@return
render_sine::@return: scope:[render_sine]  from render_sine::@2
  [52] return 
  to:@return
render_sine::@7: scope:[render_sine]  from render_sine::@6
  [53] phi()
  to:render_sine::@2
bitmap_plot: scope:[bitmap_plot]  from render_sine::@3 render_sine::@5
  [54] (word) bitmap_plot::x#2 ← phi( render_sine::@3/(word) bitmap_plot::x#0 render_sine::@5/(word) bitmap_plot::x#1 )
  [54] (byte) bitmap_plot::y#2 ← phi( render_sine::@3/(byte) bitmap_plot::y#0 render_sine::@5/(byte) bitmap_plot::y#1 )
  [55] (word~) bitmap_plot::$3 ← *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_plot::y#2) w= *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_plot::y#2)
  [56] (word~) bitmap_plot::$1 ← (word) bitmap_plot::x#2 & (word/dword/signed dword) $fff8
  [57] (byte*) bitmap_plot::plotter#1 ← (byte*)(word~) bitmap_plot::$3 + (word~) bitmap_plot::$1
  [58] (byte~) bitmap_plot::$2 ← < (word) bitmap_plot::x#2
  [59] *((byte*) bitmap_plot::plotter#1) ← *((byte*) bitmap_plot::plotter#1) | *((const byte[$100]) bitmap_plot_bit#0 + (byte~) bitmap_plot::$2)
  to:bitmap_plot::@return
bitmap_plot::@return: scope:[bitmap_plot]  from bitmap_plot
  [60] return 
  to:@return
wrap_y: scope:[wrap_y]  from render_sine::@1 render_sine::@4
  [61] (signed word) wrap_y::y#9 ← phi( render_sine::@1/(signed word) wrap_y::y#0 render_sine::@4/(signed word) wrap_y::y#1 )
  to:wrap_y::@1
wrap_y::@1: scope:[wrap_y]  from wrap_y wrap_y::@2
  [62] (signed word) wrap_y::y#4 ← phi( wrap_y/(signed word) wrap_y::y#9 wrap_y::@2/(signed word) wrap_y::y#2 )
  [63] if((signed word) wrap_y::y#4>=(byte/word/signed word/dword/signed dword) $c8) goto wrap_y::@2
  to:wrap_y::@3
wrap_y::@3: scope:[wrap_y]  from wrap_y::@1 wrap_y::@4
  [64] (signed word) wrap_y::y#6 ← phi( wrap_y::@1/(signed word) wrap_y::y#4 wrap_y::@4/(signed word) wrap_y::y#3 )
  [65] if((signed word) wrap_y::y#6<(byte/signed byte/word/signed word/dword/signed dword) 0) goto wrap_y::@4
  to:wrap_y::@5
wrap_y::@5: scope:[wrap_y]  from wrap_y::@3
  [66] (byte) wrap_y::return#2 ← ((byte)) (signed word) wrap_y::y#6
  to:wrap_y::@return
wrap_y::@return: scope:[wrap_y]  from wrap_y::@5
  [67] return 
  to:@return
wrap_y::@4: scope:[wrap_y]  from wrap_y::@3
  [68] (signed word) wrap_y::y#3 ← (signed word) wrap_y::y#6 + (byte/word/signed word/dword/signed dword) $c8
  to:wrap_y::@3
wrap_y::@2: scope:[wrap_y]  from wrap_y::@1
  [69] (signed word) wrap_y::y#2 ← (signed word) wrap_y::y#4 - (byte/word/signed word/dword/signed dword) $c8
  to:wrap_y::@1
sin16s_gen2: scope:[sin16s_gen2]  from main::@6
  [70] phi()
  [71] call div32u16u 
  [72] (dword) div32u16u::return#2 ← (dword) div32u16u::return#0
  to:sin16s_gen2::@2
sin16s_gen2::@2: scope:[sin16s_gen2]  from sin16s_gen2
  [73] (dword) sin16s_gen2::step#0 ← (dword) div32u16u::return#2
  to:sin16s_gen2::@1
sin16s_gen2::@1: scope:[sin16s_gen2]  from sin16s_gen2::@2 sin16s_gen2::@4
  [74] (word) sin16s_gen2::i#2 ← phi( sin16s_gen2::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s_gen2::@4/(word) sin16s_gen2::i#1 )
  [74] (signed word*) sin16s_gen2::sintab#2 ← phi( sin16s_gen2::@2/(const signed word[$200]) sin#0 sin16s_gen2::@4/(signed word*) sin16s_gen2::sintab#0 )
  [74] (dword) sin16s_gen2::x#2 ← phi( sin16s_gen2::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s_gen2::@4/(dword) sin16s_gen2::x#1 )
  [75] (dword) sin16s::x#0 ← (dword) sin16s_gen2::x#2
  [76] call sin16s 
  [77] (signed word) sin16s::return#0 ← (signed word) sin16s::return#1
  to:sin16s_gen2::@3
sin16s_gen2::@3: scope:[sin16s_gen2]  from sin16s_gen2::@1
  [78] (signed word) mul16s::a#0 ← (signed word) sin16s::return#0
  [79] call mul16s 
  [80] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  to:sin16s_gen2::@4
sin16s_gen2::@4: scope:[sin16s_gen2]  from sin16s_gen2::@3
  [81] (signed dword~) sin16s_gen2::$5 ← (signed dword) mul16s::return#2
  [82] (word~) sin16s_gen2::$6 ← > (signed dword~) sin16s_gen2::$5
  [83] (signed word~) sin16s_gen2::$8 ← (const signed word) sin16s_gen2::offs#0 + (signed word)(word~) sin16s_gen2::$6
  [84] *((signed word*) sin16s_gen2::sintab#2) ← (signed word~) sin16s_gen2::$8
  [85] (signed word*) sin16s_gen2::sintab#0 ← (signed word*) sin16s_gen2::sintab#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [86] (dword) sin16s_gen2::x#1 ← (dword) sin16s_gen2::x#2 + (dword) sin16s_gen2::step#0
  [87] (word) sin16s_gen2::i#1 ← ++ (word) sin16s_gen2::i#2
  [88] if((word) sin16s_gen2::i#1<(const word) SIN_SIZE#0) goto sin16s_gen2::@1
  to:sin16s_gen2::@return
sin16s_gen2::@return: scope:[sin16s_gen2]  from sin16s_gen2::@4
  [89] return 
  to:@return
mul16s: scope:[mul16s]  from sin16s_gen2::@3
  [90] (word~) mul16u::a#8 ← (word)(signed word) mul16s::a#0
  [91] call mul16u 
  [92] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s
  [93] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  [94] if((signed word) mul16s::a#0>=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@4
  [95] (word~) mul16s::$9 ← > (dword) mul16s::m#0
  [96] (word~) mul16s::$16 ← (word~) mul16s::$9 - ((word))(const signed word) sin16s_gen2::ampl#0
  [97] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$16
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@4
  [98] (dword) mul16s::m#4 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@4/(dword) mul16s::m#0 )
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1
  [99] (signed dword) mul16s::return#0 ← ((signed dword)) (dword) mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [100] return 
  to:@return
mul16u: scope:[mul16u]  from mul16s mulu16_sel
  [101] (word) mul16u::a#6 ← phi( mul16s/(word~) mul16u::a#8 mulu16_sel/(word) mul16u::a#2 )
  [101] (word) mul16u::b#2 ← phi( mul16s/((word))(const signed word) sin16s_gen2::ampl#0 mulu16_sel/(word) mul16u::b#1 )
  [102] (dword) mul16u::mb#0 ← ((dword)) (word) mul16u::b#2
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@4
  [103] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@4/(dword) mul16u::mb#1 )
  [103] (dword) mul16u::res#2 ← phi( mul16u/(byte/signed byte/word/signed word/dword/signed dword) 0 mul16u::@4/(dword) mul16u::res#6 )
  [103] (word) mul16u::a#3 ← phi( mul16u/(word) mul16u::a#6 mul16u::@4/(word) mul16u::a#0 )
  [104] if((word) mul16u::a#3!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [105] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [106] (byte/word~) mul16u::$1 ← (word) mul16u::a#3 & (byte/signed byte/word/signed word/dword/signed dword) 1
  [107] if((byte/word~) mul16u::$1==(byte/signed byte/word/signed word/dword/signed dword) 0) goto mul16u::@4
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2
  [108] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2 mul16u::@3
  [109] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@3/(dword) mul16u::res#1 )
  [110] (word) mul16u::a#0 ← (word) mul16u::a#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [111] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:mul16u::@1
sin16s: scope:[sin16s]  from sin16s_gen2::@1
  [112] if((dword) sin16s::x#0<(const dword) PI_u4f28#0) goto sin16s::@1
  to:sin16s::@4
sin16s::@4: scope:[sin16s]  from sin16s
  [113] (dword) sin16s::x#1 ← (dword) sin16s::x#0 - (const dword) PI_u4f28#0
  to:sin16s::@1
sin16s::@1: scope:[sin16s]  from sin16s sin16s::@4
  [114] (byte) sin16s::isUpper#2 ← phi( sin16s/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@4/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [114] (dword) sin16s::x#4 ← phi( sin16s/(dword) sin16s::x#0 sin16s::@4/(dword) sin16s::x#1 )
  [115] if((dword) sin16s::x#4<(const dword) PI_HALF_u4f28#0) goto sin16s::@2
  to:sin16s::@5
sin16s::@5: scope:[sin16s]  from sin16s::@1
  [116] (dword) sin16s::x#2 ← (const dword) PI_u4f28#0 - (dword) sin16s::x#4
  to:sin16s::@2
sin16s::@2: scope:[sin16s]  from sin16s::@1 sin16s::@5
  [117] (dword) sin16s::x#6 ← phi( sin16s::@1/(dword) sin16s::x#4 sin16s::@5/(dword) sin16s::x#2 )
  [118] (dword~) sin16s::$4 ← (dword) sin16s::x#6 << (byte/signed byte/word/signed word/dword/signed dword) 3
  [119] (word) sin16s::x1#0 ← > (dword~) sin16s::$4
  [120] (word) mulu16_sel::v1#0 ← (word) sin16s::x1#0
  [121] (word) mulu16_sel::v2#0 ← (word) sin16s::x1#0
  [122] call mulu16_sel 
  [123] (word) mulu16_sel::return#0 ← (word) mulu16_sel::return#12
  to:sin16s::@7
sin16s::@7: scope:[sin16s]  from sin16s::@2
  [124] (word) sin16s::x2#0 ← (word) mulu16_sel::return#0
  [125] (word) mulu16_sel::v1#1 ← (word) sin16s::x2#0
  [126] (word) mulu16_sel::v2#1 ← (word) sin16s::x1#0
  [127] call mulu16_sel 
  [128] (word) mulu16_sel::return#1 ← (word) mulu16_sel::return#12
  to:sin16s::@8
sin16s::@8: scope:[sin16s]  from sin16s::@7
  [129] (word) sin16s::x3#0 ← (word) mulu16_sel::return#1
  [130] (word) mulu16_sel::v1#2 ← (word) sin16s::x3#0
  [131] call mulu16_sel 
  [132] (word) mulu16_sel::return#2 ← (word) mulu16_sel::return#12
  to:sin16s::@9
sin16s::@9: scope:[sin16s]  from sin16s::@8
  [133] (word) sin16s::x3_6#0 ← (word) mulu16_sel::return#2
  [134] (word) sin16s::usinx#0 ← (word) sin16s::x1#0 - (word) sin16s::x3_6#0
  [135] (word) mulu16_sel::v1#3 ← (word) sin16s::x3#0
  [136] (word) mulu16_sel::v2#3 ← (word) sin16s::x1#0
  [137] call mulu16_sel 
  [138] (word) mulu16_sel::return#10 ← (word) mulu16_sel::return#12
  to:sin16s::@10
sin16s::@10: scope:[sin16s]  from sin16s::@9
  [139] (word) sin16s::x4#0 ← (word) mulu16_sel::return#10
  [140] (word) mulu16_sel::v1#4 ← (word) sin16s::x4#0
  [141] (word) mulu16_sel::v2#4 ← (word) sin16s::x1#0
  [142] call mulu16_sel 
  [143] (word) mulu16_sel::return#11 ← (word) mulu16_sel::return#12
  to:sin16s::@11
sin16s::@11: scope:[sin16s]  from sin16s::@10
  [144] (word) sin16s::x5#0 ← (word) mulu16_sel::return#11
  [145] (word) sin16s::x5_128#0 ← (word) sin16s::x5#0 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [146] (word) sin16s::usinx#1 ← (word) sin16s::usinx#0 + (word) sin16s::x5_128#0
  [147] if((byte) sin16s::isUpper#2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto sin16s::@12
  to:sin16s::@6
sin16s::@6: scope:[sin16s]  from sin16s::@11
  [148] (signed word) sin16s::sinx#1 ← - (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
sin16s::@3: scope:[sin16s]  from sin16s::@12 sin16s::@6
  [149] (signed word) sin16s::return#1 ← phi( sin16s::@12/(signed word~) sin16s::return#5 sin16s::@6/(signed word) sin16s::sinx#1 )
  to:sin16s::@return
sin16s::@return: scope:[sin16s]  from sin16s::@3
  [150] return 
  to:@return
sin16s::@12: scope:[sin16s]  from sin16s::@11
  [151] (signed word~) sin16s::return#5 ← (signed word)(word) sin16s::usinx#1
  to:sin16s::@3
mulu16_sel: scope:[mulu16_sel]  from sin16s::@10 sin16s::@2 sin16s::@7 sin16s::@8 sin16s::@9
  [152] (byte) mulu16_sel::select#5 ← phi( sin16s::@9/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@10/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 sin16s::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 sin16s::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [152] (word) mulu16_sel::v2#5 ← phi( sin16s::@9/(word) mulu16_sel::v2#3 sin16s::@10/(word) mulu16_sel::v2#4 sin16s::@2/(word) mulu16_sel::v2#0 sin16s::@7/(word) mulu16_sel::v2#1 sin16s::@8/(dword/signed dword) $10000/(byte/signed byte/word/signed word/dword/signed dword) 6 )
  [152] (word) mulu16_sel::v1#5 ← phi( sin16s::@9/(word) mulu16_sel::v1#3 sin16s::@10/(word) mulu16_sel::v1#4 sin16s::@2/(word) mulu16_sel::v1#0 sin16s::@7/(word) mulu16_sel::v1#1 sin16s::@8/(word) mulu16_sel::v1#2 )
  [153] (word) mul16u::a#2 ← (word) mulu16_sel::v1#5
  [154] (word) mul16u::b#1 ← (word) mulu16_sel::v2#5
  [155] call mul16u 
  [156] (dword) mul16u::return#3 ← (dword) mul16u::res#2
  to:mulu16_sel::@1
mulu16_sel::@1: scope:[mulu16_sel]  from mulu16_sel
  [157] (dword~) mulu16_sel::$0 ← (dword) mul16u::return#3
  [158] (dword~) mulu16_sel::$1 ← (dword~) mulu16_sel::$0 << (byte) mulu16_sel::select#5
  [159] (word) mulu16_sel::return#12 ← > (dword~) mulu16_sel::$1
  to:mulu16_sel::@return
mulu16_sel::@return: scope:[mulu16_sel]  from mulu16_sel::@1
  [160] return 
  to:@return
div32u16u: scope:[div32u16u]  from sin16s_gen2
  [161] phi()
  [162] call divr16u 
  [163] (word) divr16u::return#2 ← (word) divr16u::return#0
  to:div32u16u::@1
div32u16u::@1: scope:[div32u16u]  from div32u16u
  [164] (word) div32u16u::quotient_hi#0 ← (word) divr16u::return#2
  [165] (word) divr16u::rem#4 ← (word) rem16u#1
  [166] call divr16u 
  [167] (word) divr16u::return#3 ← (word) divr16u::return#0
  to:div32u16u::@2
div32u16u::@2: scope:[div32u16u]  from div32u16u::@1
  [168] (word) div32u16u::quotient_lo#0 ← (word) divr16u::return#3
  [169] (dword) div32u16u::return#0 ← (word) div32u16u::quotient_hi#0 dw= (word) div32u16u::quotient_lo#0
  to:div32u16u::@return
div32u16u::@return: scope:[div32u16u]  from div32u16u::@2
  [170] return 
  to:@return
divr16u: scope:[divr16u]  from div32u16u div32u16u::@1
  [171] (word) divr16u::dividend#5 ← phi( div32u16u/>(const dword) PI2_u4f28#0 div32u16u::@1/<(const dword) PI2_u4f28#0 )
  [171] (word) divr16u::rem#10 ← phi( div32u16u/(byte/signed byte/word/signed word/dword/signed dword) 0 div32u16u::@1/(word) divr16u::rem#4 )
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [172] (byte) divr16u::i#2 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(byte) divr16u::i#1 )
  [172] (word) divr16u::quotient#3 ← phi( divr16u/(byte/signed byte/word/signed word/dword/signed dword) 0 divr16u::@3/(word) divr16u::return#0 )
  [172] (word) divr16u::dividend#3 ← phi( divr16u/(word) divr16u::dividend#5 divr16u::@3/(word) divr16u::dividend#0 )
  [172] (word) divr16u::rem#5 ← phi( divr16u/(word) divr16u::rem#10 divr16u::@3/(word) divr16u::rem#11 )
  [173] (word) divr16u::rem#0 ← (word) divr16u::rem#5 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [174] (byte~) divr16u::$1 ← > (word) divr16u::dividend#3
  [175] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte/word/signed word/dword/signed dword) $80
  [176] if((byte~) divr16u::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [177] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte/signed byte/word/signed word/dword/signed dword) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [178] (word) divr16u::rem#6 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [179] (word) divr16u::dividend#0 ← (word) divr16u::dividend#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [180] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [181] if((word) divr16u::rem#6<(const word) SIN_SIZE#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [182] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [183] (word) divr16u::rem#2 ← (word) divr16u::rem#6 - (const word) SIN_SIZE#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [184] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [184] (word) divr16u::rem#11 ← phi( divr16u::@2/(word) divr16u::rem#6 divr16u::@5/(word) divr16u::rem#2 )
  [185] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [186] if((byte) divr16u::i#1!=(byte/signed byte/word/signed word/dword/signed dword) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [187] (word) rem16u#1 ← (word) divr16u::rem#11
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [188] return 
  to:@return
bitmap_clear: scope:[bitmap_clear]  from main::@5
  [189] (word~) bitmap_clear::$3 ← *((const byte[$100]) bitmap_plot_yhi#0) w= *((const byte[$100]) bitmap_plot_ylo#0)
  [190] (byte*~) bitmap_clear::bitmap#5 ← (byte*)(word~) bitmap_clear::$3
  to:bitmap_clear::@1
bitmap_clear::@1: scope:[bitmap_clear]  from bitmap_clear bitmap_clear::@3
  [191] (byte) bitmap_clear::y#4 ← phi( bitmap_clear/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@3/(byte) bitmap_clear::y#1 )
  [191] (byte*) bitmap_clear::bitmap#3 ← phi( bitmap_clear/(byte*~) bitmap_clear::bitmap#5 bitmap_clear::@3/(byte*) bitmap_clear::bitmap#1 )
  to:bitmap_clear::@2
bitmap_clear::@2: scope:[bitmap_clear]  from bitmap_clear::@1 bitmap_clear::@2
  [192] (byte) bitmap_clear::x#2 ← phi( bitmap_clear::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_clear::@2/(byte) bitmap_clear::x#1 )
  [192] (byte*) bitmap_clear::bitmap#2 ← phi( bitmap_clear::@1/(byte*) bitmap_clear::bitmap#3 bitmap_clear::@2/(byte*) bitmap_clear::bitmap#1 )
  [193] *((byte*) bitmap_clear::bitmap#2) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [194] (byte*) bitmap_clear::bitmap#1 ← ++ (byte*) bitmap_clear::bitmap#2
  [195] (byte) bitmap_clear::x#1 ← ++ (byte) bitmap_clear::x#2
  [196] if((byte) bitmap_clear::x#1!=(byte/word/signed word/dword/signed dword) $c8) goto bitmap_clear::@2
  to:bitmap_clear::@3
bitmap_clear::@3: scope:[bitmap_clear]  from bitmap_clear::@2
  [197] (byte) bitmap_clear::y#1 ← ++ (byte) bitmap_clear::y#4
  [198] if((byte) bitmap_clear::y#1!=(byte/signed byte/word/signed word/dword/signed dword) $28) goto bitmap_clear::@1
  to:bitmap_clear::@return
bitmap_clear::@return: scope:[bitmap_clear]  from bitmap_clear::@3
  [199] return 
  to:@return
bitmap_init: scope:[bitmap_init]  from main::@4
  [200] phi()
  to:bitmap_init::@1
bitmap_init::@1: scope:[bitmap_init]  from bitmap_init bitmap_init::@2
  [201] (byte) bitmap_init::x#2 ← phi( bitmap_init/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_init::@2/(byte) bitmap_init::x#1 )
  [201] (byte) bitmap_init::bits#3 ← phi( bitmap_init/(byte/word/signed word/dword/signed dword) $80 bitmap_init::@2/(byte) bitmap_init::bits#4 )
  [202] *((const byte[$100]) bitmap_plot_bit#0 + (byte) bitmap_init::x#2) ← (byte) bitmap_init::bits#3
  [203] (byte) bitmap_init::bits#1 ← (byte) bitmap_init::bits#3 >> (byte/signed byte/word/signed word/dword/signed dword) 1
  [204] if((byte) bitmap_init::bits#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@6
  to:bitmap_init::@2
bitmap_init::@2: scope:[bitmap_init]  from bitmap_init::@1 bitmap_init::@6
  [205] (byte) bitmap_init::bits#4 ← phi( bitmap_init::@6/(byte) bitmap_init::bits#1 bitmap_init::@1/(byte/word/signed word/dword/signed dword) $80 )
  [206] (byte) bitmap_init::x#1 ← ++ (byte) bitmap_init::x#2
  [207] if((byte) bitmap_init::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@1
  to:bitmap_init::@3
bitmap_init::@3: scope:[bitmap_init]  from bitmap_init::@2 bitmap_init::@4
  [208] (byte*) bitmap_init::yoffs#2 ← phi( bitmap_init::@2/(const byte*) BITMAP#0 bitmap_init::@4/(byte*) bitmap_init::yoffs#4 )
  [208] (byte) bitmap_init::y#2 ← phi( bitmap_init::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 bitmap_init::@4/(byte) bitmap_init::y#1 )
  [209] (byte~) bitmap_init::$3 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [210] (byte~) bitmap_init::$4 ← < (byte*) bitmap_init::yoffs#2
  [211] (byte~) bitmap_init::$5 ← (byte~) bitmap_init::$3 | (byte~) bitmap_init::$4
  [212] *((const byte[$100]) bitmap_plot_ylo#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$5
  [213] (byte~) bitmap_init::$6 ← > (byte*) bitmap_init::yoffs#2
  [214] *((const byte[$100]) bitmap_plot_yhi#0 + (byte) bitmap_init::y#2) ← (byte~) bitmap_init::$6
  [215] (byte~) bitmap_init::$7 ← (byte) bitmap_init::y#2 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [216] if((byte~) bitmap_init::$7!=(byte/signed byte/word/signed word/dword/signed dword) 7) goto bitmap_init::@4
  to:bitmap_init::@5
bitmap_init::@5: scope:[bitmap_init]  from bitmap_init::@3
  [217] (byte*) bitmap_init::yoffs#1 ← (byte*) bitmap_init::yoffs#2 + (byte/signed byte/word/signed word/dword/signed dword) $28*(byte/signed byte/word/signed word/dword/signed dword) 8
  to:bitmap_init::@4
bitmap_init::@4: scope:[bitmap_init]  from bitmap_init::@3 bitmap_init::@5
  [218] (byte*) bitmap_init::yoffs#4 ← phi( bitmap_init::@3/(byte*) bitmap_init::yoffs#2 bitmap_init::@5/(byte*) bitmap_init::yoffs#1 )
  [219] (byte) bitmap_init::y#1 ← ++ (byte) bitmap_init::y#2
  [220] if((byte) bitmap_init::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto bitmap_init::@3
  to:bitmap_init::@return
bitmap_init::@return: scope:[bitmap_init]  from bitmap_init::@4
  [221] return 
  to:@return
bitmap_init::@6: scope:[bitmap_init]  from bitmap_init::@1
  [222] phi()
  to:bitmap_init::@2
fill: scope:[fill]  from main::@3
  [223] phi()
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  [224] (byte*) fill::addr#2 ← phi( fill/(const byte*) SCREEN#0 fill::@1/(byte*) fill::addr#1 )
  [225] *((byte*) fill::addr#2) ← (const byte) WHITE#0
  [226] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  [227] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  [228] return 
  to:@return
