@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  asm { sei  }
  [5] *((const byte*) CIA1_INTERRUPT) ← (const byte) CIA_INTERRUPT_CLEAR
  [6] *((const byte*) VIC_CONTROL) ← *((const byte*) VIC_CONTROL) & (byte) $7f
  [7] *((const byte*) RASTER) ← (byte) $fd
  [8] *((const byte*) IRQ_ENABLE) ← (const byte) IRQ_RASTER
  [9] *((const void()**) KERNEL_IRQ) ← &interrupt(KERNEL_MIN)(void()) irq()
  asm { cli  }
  to:main::@1
main::@1: scope:[main]  from main main::@1 main::@2
  [11] if(*((const byte*) RASTER)>=(byte) $14) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1
  [12] phi()
  to:main::@1

interrupt(KERNEL_MIN)(void()) irq()
irq: scope:[irq]  from
  [13] *((const byte*) BGCOL) ← ++ *((const byte*) BGCOL)
  [14] *((const byte*) IRQ_STATUS) ← (const byte) IRQ_RASTER
  [15] if(*((const byte*) RASTER)<(byte) $32+(byte) 1) goto irq::@1
  to:irq::@2
irq::@2: scope:[irq]  from irq
  [16] phi()
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@2
  [17] *((const byte*) BGCOL) ← -- *((const byte*) BGCOL)
  to:irq::@return
irq::@return: scope:[irq]  from irq::@1
  [18] return 
  to:@return
