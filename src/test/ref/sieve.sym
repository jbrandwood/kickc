constant struct MOS6526_CIA* const CIA2 = (struct MOS6526_CIA*) 56576
constant dword* const CIA2_TIMER_AB = (dword*) 56580
constant const byte CIA_TIMER_CONTROL_B_COUNT_UNDERFLOW_A = $40
constant const byte CIA_TIMER_CONTROL_START = 1
constant const word CLOCKS_PER_FRAME = $4cc8
constant const dword CLOCKS_PER_INIT = $12
constant const dword CLOCKS_PER_SEC = (dword)CLOCKS_PER_FRAME*FRAMES_PER_SEC
constant const word COUNT = $4000
constant byte* const D018 = (byte*) 53272
constant byte* DIGITS[]  = "0123456789abcdef"z
constant const byte FRAMES_PER_SEC = $3c
constant byte OFFSET_STRUCT_MOS6526_CIA_TIMER_A_CONTROL = $e
constant byte OFFSET_STRUCT_MOS6526_CIA_TIMER_B_CONTROL = $f
constant byte RADIX::BINARY = 2
constant byte RADIX::DECIMAL = $a
constant byte RADIX::HEXADECIMAL = $10
constant byte RADIX::OCTAL = 8
constant word* RADIX_DECIMAL_VALUES[]  = { $2710, $3e8, $64, $a }
constant dword* RADIX_DECIMAL_VALUES_LONG[]  = { $3b9aca00, $5f5e100, $989680, $f4240, $186a0, $2710, $3e8, $64, $a }
constant byte* const SCREEN = (byte*) 1024
constant const byte SQRT_COUNT = $80
dword clock()
dword clock::return
dword clock::return#0 return zp[4]:17 4.333333333333333
dword clock::return#2 return zp[4]:17 4.0
void clock_start()
constant byte* decimal_digits[6]  = { fill( 6, 0) }
constant byte* decimal_digits_long[$b]  = { fill( $b, 0) }
dword div32u16u(dword div32u16u::dividend , word div32u16u::divisor)
dword div32u16u::dividend
dword div32u16u::dividend#0 dividend zp[4]:17 4.800000000000001
word div32u16u::divisor
constant word div32u16u::divisor#0 divisor = (word)CLOCKS_PER_SEC/$64
dword div32u16u::quotient
word div32u16u::quotient_hi
word div32u16u::quotient_hi#0 quotient_hi zp[2]:29 3.6666666666666665
word div32u16u::quotient_lo
word div32u16u::quotient_lo#0 quotient_lo zp[2]:27 22.0
dword div32u16u::return
dword div32u16u::return#0 return zp[4]:23 4.333333333333333
dword div32u16u::return#2 return zp[4]:23 4.0
word divr16u(word divr16u::dividend , word divr16u::divisor , word divr16u::rem)
byte~ divr16u::$1 reg byte a 2002.0
byte~ divr16u::$2 reg byte a 2002.0
word divr16u::dividend
word divr16u::dividend#0 dividend zp[2]:21 250.25
word divr16u::dividend#1 dividend zp[2]:21 22.0
word divr16u::dividend#2 dividend zp[2]:21 11.0
word divr16u::dividend#3 dividend zp[2]:21 443.42857142857144
word divr16u::dividend#5 dividend zp[2]:21 123.0
word divr16u::divisor
byte divr16u::i
byte divr16u::i#1 reg byte x 1501.5
byte divr16u::i#2 reg byte x 154.0
word divr16u::quotient
word divr16u::quotient#1 quotient zp[2]:27 1501.5
word divr16u::quotient#2 quotient zp[2]:27 1001.0
word divr16u::quotient#3 quotient zp[2]:27 250.25
word divr16u::rem
word divr16u::rem#0 rem zp[2]:14 750.75
word divr16u::rem#1 rem zp[2]:14 2002.0
word divr16u::rem#10 rem zp[2]:14 112.0
word divr16u::rem#11 rem zp[2]:14 1034.6666666666667
word divr16u::rem#2 rem zp[2]:14 2002.0
word divr16u::rem#4 rem zp[2]:14 22.0
word divr16u::rem#5 rem zp[2]:14 2103.0
word divr16u::rem#6 rem zp[2]:14 1001.0
word divr16u::return
word divr16u::return#0 return zp[2]:27 432.1428571428571
word divr16u::return#2 return zp[2]:27 22.0
word divr16u::return#3 return zp[2]:27 22.0
void main()
dword~ main::$10 zp[4]:17 4.0
dword~ main::$12 zp[4]:23 2.0
byte*~ main::$33 zp[2]:27 22.0
dword main::cyclecount
dword main::cyclecount#0 cyclecount zp[4]:17 0.5
word main::i
word main::i#10 i_1 zp[2]:4 5.5
word main::i#12 i zp[2]:10 24.6
word main::i#2 i zp[2]:10 11.0
word main::i#3 i_1 zp[2]:4 22.0
word main::j
word main::j#0 j zp[2]:6 16.5
word main::j#1 j zp[2]:6 202.0
word main::j#2 j zp[2]:6 78.5
byte* main::s
byte* main::s#0 s zp[2]:8 22.0
byte* main::s#1 s zp[2]:8 101.0
byte* main::s#2 s zp[2]:8 104.66666666666666
word main::sec100s
word main::sec100s#0 sec100s zp[2]:4 1.3333333333333333
byte* main::sieve_i
byte* main::sieve_i#1 sieve_i zp[2]:2 22.0
byte* main::sieve_i#2 sieve_i zp[2]:2 3.0
constant byte* main::str[$25]  = "Sieve benchmark - calculating primes"
constant byte* main::str1[$f]  = "between 2 and "
constant byte* main::str2[$16]  = "100ths seconds used: "
constant byte* main::str3[$a]  = " cycles: "
constant byte* main::str4[4]  = "..."
byte* main::toD0181_gfx
constant byte* main::toD0181_gfx#0 toD0181_gfx = (byte*) 6144
byte main::toD0181_return
constant byte main::toD0181_return#0 toD0181_return = byte1 (word)SCREEN&$3fff*4|byte1 (word)main::toD0181_gfx#0/4&$f
byte* main::toD0181_screen
void* memset(void* memset::str , byte memset::c , word memset::num)
byte memset::c
byte memset::c#4 reg byte x 125.125
byte* memset::dst
byte* memset::dst#1 dst zp[2]:21 2002.0
byte* memset::dst#2 dst zp[2]:21 1368.3333333333335
byte* memset::dst#4 dst zp[2]:21 202.0
byte* memset::end
byte* memset::end#0 end zp[2]:14 183.66666666666669
word memset::num
word memset::num#2 num zp[2]:14 101.0
void* memset::return
void* memset::str
void* memset::str#3 str zp[2]:21
void print_char(byte print_char::ch)
byte print_char::ch
byte print_char::ch#0 reg byte a 200002.0
byte print_char::ch#2 reg byte a 1100002.0
byte* print_char_cursor
byte* print_char_cursor#1 print_char_cursor zp[2]:10 63670.36363636364
byte* print_char_cursor#39 print_char_cursor_1 zp[2]:12 220002.6
byte* print_char_cursor#61 print_char_cursor zp[2]:10 29.0
byte* print_char_cursor#65 print_char_cursor_1 zp[2]:12 7.4
byte* print_char_cursor#69 print_char_cursor zp[2]:10 1121.0
byte* print_char_cursor#79 print_char_cursor_1 zp[2]:12 16.5
byte* print_char_cursor#89 print_char_cursor zp[2]:10 4.0
byte* print_char_cursor#90 print_char_cursor zp[2]:10 4.0
byte* print_char_cursor#91 print_char_cursor zp[2]:10 4.0
byte* print_char_cursor#96 print_char_cursor zp[2]:10 200002.0
byte* print_char_cursor#97 print_char_cursor zp[2]:10 22.0
void print_cls()
byte* print_line_cursor
byte* print_line_cursor#0 print_line_cursor zp[2]:12 6.804347826086957
byte* print_line_cursor#12 print_line_cursor zp[2]:12 213.0
byte* print_line_cursor#23 print_line_cursor zp[2]:12 15.0
void print_ln()
byte* print_screen
constant byte* print_screen#0 print_screen = (byte*) 1024
void print_str(byte* print_str::str)
byte* print_str::str
byte* print_str::str#0 str zp[2]:14 100001.0
byte* print_str::str#10 str zp[2]:14 100251.25
byte* print_str::str#11 str zp[2]:14 1001.0
void print_uint_decimal(word print_uint_decimal::w)
word print_uint_decimal::w
word print_uint_decimal::w#1 w zp[2]:4 4.0
word print_uint_decimal::w#2 w zp[2]:4 11.0
word print_uint_decimal::w#3 w zp[2]:4 114.0
void print_ulong_decimal(dword print_ulong_decimal::w)
dword print_ulong_decimal::w
dword print_ulong_decimal::w#0 w zp[4]:17 13.0
word rem16u
word rem16u#0 rem16u zp[2]:14 18.666666666666664
constant byte* sieve = (byte*) 4096
void ultoa(dword ultoa::value , byte* ultoa::buffer , byte ultoa::radix)
byte~ ultoa::$10 reg byte a 2002.0
byte~ ultoa::$11 reg byte a 202.0
byte* ultoa::buffer
byte* ultoa::buffer#11 buffer zp[2]:21 300.42857142857144
byte* ultoa::buffer#14 buffer zp[2]:21 1501.5
byte* ultoa::buffer#4 buffer zp[2]:21 202.0
byte* ultoa::buffer#5 buffer zp[2]:21 2002.0
byte ultoa::digit
byte ultoa::digit#1 digit zp[1]:16 2002.0
byte ultoa::digit#2 digit zp[1]:16 286.0
dword ultoa::digit_value
dword ultoa::digit_value#0 digit_value zp[4]:31 600.5999999999999
dword* ultoa::digit_values
byte ultoa::max_digits
constant byte ultoa::max_digits#1 max_digits = $a
byte ultoa::radix
byte ultoa::started
byte ultoa::started#2 reg byte x 500.5
byte ultoa::started#4 reg byte x 1001.0
dword ultoa::value
dword ultoa::value#0 value zp[4]:17 56.0
dword ultoa::value#1 value zp[4]:17 1001.0
dword ultoa::value#2 value zp[4]:17 586.4285714285714
dword ultoa::value#6 value zp[4]:17 1501.5
dword ultoa_append(byte* ultoa_append::buffer , dword ultoa_append::value , dword ultoa_append::sub)
byte* ultoa_append::buffer
byte* ultoa_append::buffer#0 buffer zp[2]:21 1375.25
byte ultoa_append::digit
byte ultoa_append::digit#1 reg byte x 1000001.0
byte ultoa_append::digit#2 reg byte x 1005001.5
dword ultoa_append::return
dword ultoa_append::return#0 return zp[4]:17 2002.0
dword ultoa_append::sub
dword ultoa_append::sub#0 sub zp[4]:31 333500.5
dword ultoa_append::value
dword ultoa_append::value#0 value zp[4]:17 3667.333333333333
dword ultoa_append::value#1 value zp[4]:17 2000002.0
dword ultoa_append::value#2 value zp[4]:17 501834.16666666674
void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
byte~ utoa::$10 reg byte a 200002.0
byte~ utoa::$11 reg byte x 2002.0
byte* utoa::buffer
byte* utoa::buffer#11 buffer zp[2]:14 28714.714285714286
byte* utoa::buffer#14 buffer zp[2]:14 150001.5
byte* utoa::buffer#4 buffer zp[2]:14 2002.0
byte* utoa::buffer#5 buffer zp[2]:14 200002.0
byte utoa::digit
byte utoa::digit#1 digit zp[1]:16 200002.0
byte utoa::digit#2 digit zp[1]:16 28571.714285714286
word utoa::digit_value
word utoa::digit_value#0 digit_value zp[2]:29 60000.600000000006
word* utoa::digit_values
byte utoa::max_digits
constant byte utoa::max_digits#1 max_digits = 5
byte utoa::radix
byte utoa::started
byte utoa::started#2 reg byte x 50000.5
byte utoa::started#4 reg byte x 100001.0
word utoa::value
word utoa::value#0 value zp[2]:21 551.0
word utoa::value#1 value zp[2]:21 100001.0
word utoa::value#2 value zp[2]:21 57286.42857142857
word utoa::value#6 value zp[2]:21 150001.5
word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
byte* utoa_append::buffer
byte* utoa_append::buffer#0 buffer zp[2]:14 137500.25
byte utoa_append::digit
byte utoa_append::digit#1 reg byte x 1.000000001E9
byte utoa_append::digit#2 reg byte x 1.0005000015E9
word utoa_append::return
word utoa_append::return#0 return zp[2]:21 200002.0
word utoa_append::sub
word utoa_append::sub#0 sub zp[2]:29 3.333500005E8
word utoa_append::value
word utoa_append::value#0 value zp[2]:21 366667.3333333334
word utoa_append::value#1 value zp[2]:21 2.000000002E9
word utoa_append::value#2 value zp[2]:21 5.0018333416666675E8

zp[2]:2 [ main::sieve_i#2 main::sieve_i#1 ]
zp[2]:4 [ main::i#10 main::i#3 print_uint_decimal::w#3 print_uint_decimal::w#2 print_uint_decimal::w#1 main::sec100s#0 ]
zp[2]:6 [ main::j#2 main::j#1 main::j#0 ]
zp[2]:8 [ main::s#2 main::s#1 main::s#0 ]
zp[2]:10 [ print_char_cursor#69 print_char_cursor#89 print_char_cursor#90 print_char_cursor#91 print_char_cursor#1 print_char_cursor#61 print_char_cursor#96 print_char_cursor#97 main::i#12 main::i#2 ]
zp[2]:12 [ print_line_cursor#12 print_line_cursor#23 print_char_cursor#65 print_char_cursor#79 print_line_cursor#0 print_char_cursor#39 ]
reg byte x [ memset::c#4 ]
reg byte a [ print_char::ch#2 print_char::ch#0 ]
reg byte x [ utoa::started#2 utoa::started#4 ]
zp[2]:14 [ divr16u::rem#5 divr16u::rem#10 divr16u::rem#4 divr16u::rem#11 divr16u::rem#6 divr16u::rem#0 divr16u::rem#1 divr16u::rem#2 rem16u#0 utoa::buffer#11 utoa::buffer#14 utoa::buffer#5 utoa::buffer#4 utoa_append::buffer#0 memset::num#2 memset::end#0 print_str::str#10 print_str::str#11 print_str::str#0 ]
reg byte x [ divr16u::i#2 divr16u::i#1 ]
zp[1]:16 [ ultoa::digit#2 ultoa::digit#1 utoa::digit#2 utoa::digit#1 ]
zp[4]:17 [ ultoa::value#2 ultoa::value#6 ultoa::value#0 ultoa::value#1 ultoa_append::value#2 ultoa_append::value#0 ultoa_append::value#1 print_ulong_decimal::w#0 ultoa_append::return#0 main::cyclecount#0 div32u16u::dividend#0 clock::return#2 main::$10 clock::return#0 ]
reg byte x [ ultoa::started#2 ultoa::started#4 ]
zp[2]:21 [ ultoa::buffer#11 ultoa::buffer#14 ultoa::buffer#5 ultoa::buffer#4 ultoa_append::buffer#0 divr16u::dividend#3 divr16u::dividend#5 divr16u::dividend#1 divr16u::dividend#2 divr16u::dividend#0 utoa::value#2 utoa::value#6 utoa::value#0 utoa::value#1 utoa_append::value#2 utoa_append::value#0 utoa_append::value#1 utoa_append::return#0 memset::str#3 memset::dst#2 memset::dst#4 memset::dst#1 ]
reg byte x [ utoa_append::digit#2 utoa_append::digit#1 ]
reg byte x [ ultoa_append::digit#2 ultoa_append::digit#1 ]
zp[4]:23 [ div32u16u::return#2 main::$12 div32u16u::return#0 ]
zp[2]:27 [ main::$33 divr16u::quotient#3 divr16u::return#0 divr16u::quotient#1 divr16u::quotient#2 divr16u::return#2 divr16u::return#3 div32u16u::quotient_lo#0 ]
reg byte x [ utoa::$11 ]
reg byte a [ utoa::$10 ]
zp[2]:29 [ utoa::digit_value#0 utoa_append::sub#0 div32u16u::quotient_hi#0 ]
reg byte a [ divr16u::$1 ]
reg byte a [ divr16u::$2 ]
reg byte a [ ultoa::$11 ]
reg byte a [ ultoa::$10 ]
zp[4]:31 [ ultoa::digit_value#0 ultoa_append::sub#0 ]
