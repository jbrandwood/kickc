
(void()) main()
main: scope:[main]  from
  [0] *((const signed word*) primenum+(byte) 1*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 2
  [1] *((const signed word*) primenum+(byte) 2*(const byte) SIZEOF_SIGNED_WORD) ← (signed byte) 3
  to:main::@1
main::@1: scope:[main]  from main main::@11
  [2] (byte*) print_char_cursor#41 ← phi( main/(const byte*) print_screen#0 main::@11/(byte*) print_char_cursor#21 )
  [2] (signed word) lastprime#17 ← phi( main/(signed byte) 2 main::@11/(signed word) lastprime#1 )
  [2] (signed word) testnum#15 ← phi( main/(signed byte) 3 main::@11/(signed word) testnum#11 )
  [2] (signed word) lasttest#13 ← phi( main/(signed byte) 2 main::@11/(signed word) lasttest#19 )
  [3] (signed word~) main::$12 ← (signed word) lasttest#13 << (byte) 1
  [4] (signed word*~) main::$16 ← (const signed word*) primenum + (signed word~) main::$12
  [5] (signed word) main::p#0 ← *((signed word*~) main::$16)
  [6] (signed word) mul16s::a#0 ← (signed word) main::p#0
  [7] (signed word) mul16s::b#0 ← (signed word) main::p#0
  [8] call mul16s 
  [9] (signed dword) mul16s::return#2 ← (signed dword) mul16s::return#0
  to:main::@8
main::@8: scope:[main]  from main::@1
  [10] (signed dword~) main::$0 ← (signed dword) mul16s::return#2
  [11] (signed word~) main::$15 ← (signed word)(signed dword~) main::$0
  [12] if((signed word) testnum#15<=(signed word~) main::$15) goto main::@2
  to:main::@7
main::@7: scope:[main]  from main::@8
  [13] (signed word) lasttest#1 ← ++ (signed word) lasttest#13
  to:main::@2
main::@2: scope:[main]  from main::@7 main::@8
  [14] (signed word) lasttest#19 ← phi( main::@7/(signed word) lasttest#1 main::@8/(signed word) lasttest#13 )
  [15] (signed word) testnum#1 ← (signed word) testnum#15 + (signed byte) 2
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@4
  [16] (signed word) testnum#10 ← phi( main::@2/(signed word) testnum#1 main::@4/(signed word) testnum#11 )
  [16] (signed word) primeptr#7 ← phi( main::@2/(signed byte) 2 main::@4/(signed word) primeptr#10 )
  [17] (signed word~) main::$13 ← (signed word) primeptr#7 << (byte) 1
  [18] (signed word) div16s::dividend#0 ← (signed word) testnum#10
  [19] (signed word*~) main::$17 ← (const signed word*) primenum + (signed word~) main::$13
  [20] (signed word) div16s::divisor#0 ← *((signed word*~) main::$17)
  [21] call div16s 
  to:main::@9
main::@9: scope:[main]  from main::@3
  [22] (signed word) primeptr#1 ← ++ (signed word) primeptr#7
  [23] if((signed word) rem16s#10!=(signed byte) 0) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@9
  [24] (signed word) testnum#2 ← (signed word) testnum#10 + (signed byte) 2
  to:main::@4
main::@4: scope:[main]  from main::@5 main::@9
  [25] (signed word) testnum#11 ← phi( main::@5/(signed word) testnum#2 main::@9/(signed word) testnum#10 )
  [25] (signed word) primeptr#10 ← phi( main::@5/(signed byte) 2 main::@9/(signed word) primeptr#1 )
  [26] if((signed word) primeptr#10<=(signed word) lasttest#19) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@4
  [27] (signed word) lastprime#1 ← ++ (signed word) lastprime#17
  [28] (signed word~) main::$14 ← (signed word) lastprime#1 << (byte) 1
  [29] (signed word*~) main::$18 ← (const signed word*) primenum + (signed word~) main::$14
  [30] *((signed word*~) main::$18) ← (signed word) testnum#11
  [31] (signed word) print_sint_decimal::w#1 ← (signed word) testnum#11
  [32] call print_sint_decimal 
  to:main::@10
main::@10: scope:[main]  from main::@6
  [33] phi()
  [34] call print_char 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [35] if((signed word) lastprime#1<(signed word) $3e8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@11
  [36] return 
  to:@return

(signed dword()) mul16s((signed word) mul16s::a , (signed word) mul16s::b)
mul16s: scope:[mul16s]  from main::@1
  [37] (word) mul16u::a#1 ← (word)(signed word) mul16s::a#0
  [38] (word) mul16u::b#0 ← (word)(signed word) mul16s::b#0
  [39] call mul16u 
  [40] (dword) mul16u::return#2 ← (dword) mul16u::res#2
  to:mul16s::@5
mul16s::@5: scope:[mul16s]  from mul16s
  [41] (dword) mul16s::m#0 ← (dword) mul16u::return#2
  [42] if((signed word) mul16s::a#0>=(signed byte) 0) goto mul16s::@1
  to:mul16s::@3
mul16s::@3: scope:[mul16s]  from mul16s::@5
  [43] (word~) mul16s::$6 ← > (dword) mul16s::m#0
  [44] (word~) mul16s::$11 ← (word~) mul16s::$6 - (word)(signed word) mul16s::b#0
  [45] (dword) mul16s::m#1 ← (dword) mul16s::m#0 hi= (word~) mul16s::$11
  to:mul16s::@1
mul16s::@1: scope:[mul16s]  from mul16s::@3 mul16s::@5
  [46] (dword) mul16s::m#5 ← phi( mul16s::@3/(dword) mul16s::m#1 mul16s::@5/(dword) mul16s::m#0 )
  [47] if((signed word) mul16s::b#0>=(signed byte) 0) goto mul16s::@2
  to:mul16s::@4
mul16s::@4: scope:[mul16s]  from mul16s::@1
  [48] (word~) mul16s::$9 ← > (dword) mul16s::m#5
  [49] (word~) mul16s::$12 ← (word~) mul16s::$9 - (word)(signed word) mul16s::a#0
  [50] (dword) mul16s::m#2 ← (dword) mul16s::m#5 hi= (word~) mul16s::$12
  to:mul16s::@2
mul16s::@2: scope:[mul16s]  from mul16s::@1 mul16s::@4
  [51] (dword) mul16s::m#4 ← phi( mul16s::@1/(dword) mul16s::m#5 mul16s::@4/(dword) mul16s::m#2 )
  [52] (signed dword) mul16s::return#0 ← (signed dword)(dword) mul16s::m#4
  to:mul16s::@return
mul16s::@return: scope:[mul16s]  from mul16s::@2
  [53] return 
  to:@return

(signed word()) div16s((signed word) div16s::dividend , (signed word) div16s::divisor)
div16s: scope:[div16s]  from main::@3
  [54] (signed word) divr16s::dividend#0 ← (signed word) div16s::dividend#0
  [55] (signed word) divr16s::divisor#0 ← (signed word) div16s::divisor#0
  [56] call divr16s 
  to:div16s::@return
div16s::@return: scope:[div16s]  from div16s
  [57] return 
  to:@return

(void()) print_sint_decimal((signed word) print_sint_decimal::w)
print_sint_decimal: scope:[print_sint_decimal]  from main::@6
  [58] if((signed word) print_sint_decimal::w#1<(signed byte) 0) goto print_sint_decimal::@1
  to:print_sint_decimal::@3
print_sint_decimal::@3: scope:[print_sint_decimal]  from print_sint_decimal
  [59] phi()
  [60] call print_char 
  to:print_sint_decimal::@2
print_sint_decimal::@2: scope:[print_sint_decimal]  from print_sint_decimal::@3 print_sint_decimal::@4
  [61] (signed word) print_sint_decimal::w#4 ← phi( print_sint_decimal::@4/(signed word) print_sint_decimal::w#0 print_sint_decimal::@3/(signed word) print_sint_decimal::w#1 )
  [62] (word) utoa::value#1 ← (word)(signed word) print_sint_decimal::w#4
  [63] call utoa 
  to:print_sint_decimal::@5
print_sint_decimal::@5: scope:[print_sint_decimal]  from print_sint_decimal::@2
  [64] phi()
  [65] call print_str 
  to:print_sint_decimal::@return
print_sint_decimal::@return: scope:[print_sint_decimal]  from print_sint_decimal::@5
  [66] return 
  to:@return
print_sint_decimal::@1: scope:[print_sint_decimal]  from print_sint_decimal
  [67] phi()
  [68] call print_char 
  to:print_sint_decimal::@4
print_sint_decimal::@4: scope:[print_sint_decimal]  from print_sint_decimal::@1
  [69] (signed word) print_sint_decimal::w#0 ← - (signed word) print_sint_decimal::w#1
  to:print_sint_decimal::@2

(void()) print_char((byte) print_char::ch)
print_char: scope:[print_char]  from main::@10 print_sint_decimal::@1 print_sint_decimal::@3 print_str::@2
  [70] (byte*) print_char_cursor#20 ← phi( main::@10/(byte*) print_char_cursor#21 print_sint_decimal::@1/(byte*) print_char_cursor#41 print_sint_decimal::@3/(byte*) print_char_cursor#41 print_str::@2/(byte*) print_char_cursor#21 )
  [70] (byte) print_char::ch#4 ← phi( main::@10/(byte) ' ' print_sint_decimal::@1/(byte) '-' print_sint_decimal::@3/(byte) ' ' print_str::@2/(byte) print_char::ch#0 )
  [71] *((byte*) print_char_cursor#20) ← (byte) print_char::ch#4
  [72] (byte*) print_char_cursor#21 ← ++ (byte*) print_char_cursor#20
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char
  [73] return 
  to:@return

(dword()) mul16u((word) mul16u::a , (word) mul16u::b)
mul16u: scope:[mul16u]  from mul16s
  [74] (dword) mul16u::mb#0 ← (dword)(word) mul16u::b#0
  to:mul16u::@1
mul16u::@1: scope:[mul16u]  from mul16u mul16u::@3
  [75] (dword) mul16u::mb#2 ← phi( mul16u/(dword) mul16u::mb#0 mul16u::@3/(dword) mul16u::mb#1 )
  [75] (dword) mul16u::res#2 ← phi( mul16u/(dword) 0 mul16u::@3/(dword) mul16u::res#6 )
  [75] (word) mul16u::a#2 ← phi( mul16u/(word) mul16u::a#1 mul16u::@3/(word) mul16u::a#0 )
  [76] if((word) mul16u::a#2!=(byte) 0) goto mul16u::@2
  to:mul16u::@return
mul16u::@return: scope:[mul16u]  from mul16u::@1
  [77] return 
  to:@return
mul16u::@2: scope:[mul16u]  from mul16u::@1
  [78] (byte~) mul16u::$1 ← (word) mul16u::a#2 & (byte) 1
  [79] if((byte~) mul16u::$1==(byte) 0) goto mul16u::@3
  to:mul16u::@4
mul16u::@4: scope:[mul16u]  from mul16u::@2
  [80] (dword) mul16u::res#1 ← (dword) mul16u::res#2 + (dword) mul16u::mb#2
  to:mul16u::@3
mul16u::@3: scope:[mul16u]  from mul16u::@2 mul16u::@4
  [81] (dword) mul16u::res#6 ← phi( mul16u::@2/(dword) mul16u::res#2 mul16u::@4/(dword) mul16u::res#1 )
  [82] (word) mul16u::a#0 ← (word) mul16u::a#2 >> (byte) 1
  [83] (dword) mul16u::mb#1 ← (dword) mul16u::mb#2 << (byte) 1
  to:mul16u::@1

(signed word()) divr16s((signed word) divr16s::dividend , (signed word) divr16s::divisor , (signed word) divr16s::rem)
divr16s: scope:[divr16s]  from div16s
  [84] if((signed word) divr16s::dividend#0<(signed byte) 0) goto divr16s::@1
  to:divr16s::@6
divr16s::@6: scope:[divr16s]  from divr16s
  [85] (word) divr16s::dividendu#8 ← (word)(signed word) divr16s::dividend#0
  to:divr16s::@2
divr16s::@2: scope:[divr16s]  from divr16s::@1 divr16s::@6
  [86] (word) divr16s::dividendu#3 ← phi( divr16s::@1/(word) divr16s::dividendu#7 divr16s::@6/(word) divr16s::dividendu#8 )
  [86] (byte) divr16s::neg#3 ← phi( divr16s::@1/(byte) 1 divr16s::@6/(byte) 0 )
  [87] if((signed word) divr16s::divisor#0<(signed byte) 0) goto divr16s::@3
  to:divr16s::@7
divr16s::@7: scope:[divr16s]  from divr16s::@2
  [88] (word) divr16s::divisoru#5 ← (word)(signed word) divr16s::divisor#0
  to:divr16s::@4
divr16s::@4: scope:[divr16s]  from divr16s::@3 divr16s::@7
  [89] (byte) divr16s::neg#4 ← phi( divr16s::@3/(byte) divr16s::neg#2 divr16s::@7/(byte) divr16s::neg#3 )
  [89] (word) divr16s::divisoru#3 ← phi( divr16s::@3/(word) divr16s::divisoru#4 divr16s::@7/(word) divr16s::divisoru#5 )
  [90] (word) divr16u::dividend#1 ← (word) divr16s::dividendu#3
  [91] (word) divr16u::divisor#0 ← (word) divr16s::divisoru#3
  [92] call divr16u 
  to:divr16s::@9
divr16s::@9: scope:[divr16s]  from divr16s::@4
  [93] if((byte) divr16s::neg#4==(byte) 0) goto divr16s::@5
  to:divr16s::@8
divr16s::@8: scope:[divr16s]  from divr16s::@9
  [94] (signed word) rem16s#1 ← - (signed word)(word) rem16u#0
  to:divr16s::@return
divr16s::@return: scope:[divr16s]  from divr16s::@5 divr16s::@8
  [95] (signed word) rem16s#10 ← phi( divr16s::@5/(signed word) rem16s#30 divr16s::@8/(signed word) rem16s#1 )
  [96] return 
  to:@return
divr16s::@5: scope:[divr16s]  from divr16s::@9
  [97] (signed word) rem16s#30 ← (signed word)(word) rem16u#0
  to:divr16s::@return
divr16s::@3: scope:[divr16s]  from divr16s::@2
  [98] (signed word) divr16s::divisoru#1 ← - (signed word) divr16s::divisor#0
  [99] (byte) divr16s::neg#2 ← (byte) divr16s::neg#3 ^ (byte) 1
  [100] (word) divr16s::divisoru#4 ← (word)(signed word) divr16s::divisoru#1
  to:divr16s::@4
divr16s::@1: scope:[divr16s]  from divr16s
  [101] (signed word) divr16s::dividendu#1 ← - (signed word) divr16s::dividend#0
  [102] (word) divr16s::dividendu#7 ← (word)(signed word) divr16s::dividendu#1
  to:divr16s::@2

(void()) utoa((word) utoa::value , (byte*) utoa::buffer , (byte) utoa::radix)
utoa: scope:[utoa]  from print_sint_decimal::@2
  [103] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [104] (byte*) utoa::buffer#11 ← phi( utoa::@4/(byte*) utoa::buffer#14 utoa/(const byte*) decimal_digits )
  [104] (byte) utoa::started#2 ← phi( utoa::@4/(byte) utoa::started#4 utoa/(byte) 0 )
  [104] (word) utoa::value#2 ← phi( utoa::@4/(word) utoa::value#6 utoa/(word) utoa::value#1 )
  [104] (byte) utoa::digit#2 ← phi( utoa::@4/(byte) utoa::digit#1 utoa/(byte) 0 )
  [105] if((byte) utoa::digit#2<(const byte) utoa::max_digits#1-(byte) 1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [106] (byte~) utoa::$11 ← (byte)(word) utoa::value#2
  [107] *((byte*) utoa::buffer#11) ← *((const byte*) DIGITS + (byte~) utoa::$11)
  [108] (byte*) utoa::buffer#3 ← ++ (byte*) utoa::buffer#11
  [109] *((byte*) utoa::buffer#3) ← (byte) 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [110] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [111] (byte~) utoa::$10 ← (byte) utoa::digit#2 << (byte) 1
  [112] (word) utoa::digit_value#0 ← *((const word*) RADIX_DECIMAL_VALUES + (byte~) utoa::$10)
  [113] if((byte) 0!=(byte) utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [114] if((word) utoa::value#2>=(word) utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [115] (byte*) utoa::buffer#14 ← phi( utoa::@7/(byte*) utoa::buffer#11 utoa::@6/(byte*) utoa::buffer#4 )
  [115] (byte) utoa::started#4 ← phi( utoa::@7/(byte) utoa::started#2 utoa::@6/(byte) 1 )
  [115] (word) utoa::value#6 ← phi( utoa::@7/(word) utoa::value#2 utoa::@6/(word) utoa::value#0 )
  [116] (byte) utoa::digit#1 ← ++ (byte) utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [117] (byte*) utoa_append::buffer#0 ← (byte*) utoa::buffer#11
  [118] (word) utoa_append::value#0 ← (word) utoa::value#2
  [119] (word) utoa_append::sub#0 ← (word) utoa::digit_value#0
  [120] call utoa_append 
  [121] (word) utoa_append::return#0 ← (word) utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [122] (word) utoa::value#0 ← (word) utoa_append::return#0
  [123] (byte*) utoa::buffer#4 ← ++ (byte*) utoa::buffer#11
  to:utoa::@4

(void()) print_str((byte*) print_str::str)
print_str: scope:[print_str]  from print_sint_decimal::@5
  [124] phi()
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [125] (byte*) print_str::str#2 ← phi( print_str/(const byte*) decimal_digits print_str::@3/(byte*) print_str::str#0 )
  [126] if((byte) 0!=*((byte*) print_str::str#2)) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [127] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [128] (byte) print_char::ch#0 ← *((byte*) print_str::str#2)
  [129] call print_char 
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [130] (byte*) print_str::str#0 ← ++ (byte*) print_str::str#2
  to:print_str::@1

(word()) divr16u((word) divr16u::dividend , (word) divr16u::divisor , (word) divr16u::rem)
divr16u: scope:[divr16u]  from divr16s::@4
  [131] phi()
  to:divr16u::@1
divr16u::@1: scope:[divr16u]  from divr16u divr16u::@3
  [132] (byte) divr16u::i#2 ← phi( divr16u/(byte) 0 divr16u::@3/(byte) divr16u::i#1 )
  [132] (word) divr16u::quotient#3 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::return#0 )
  [132] (word) divr16u::dividend#2 ← phi( divr16u/(word) divr16u::dividend#1 divr16u::@3/(word) divr16u::dividend#0 )
  [132] (word) divr16u::rem#4 ← phi( divr16u/(word) 0 divr16u::@3/(word) divr16u::rem#10 )
  [133] (word) divr16u::rem#0 ← (word) divr16u::rem#4 << (byte) 1
  [134] (byte~) divr16u::$1 ← > (word) divr16u::dividend#2
  [135] (byte~) divr16u::$2 ← (byte~) divr16u::$1 & (byte) $80
  [136] if((byte~) divr16u::$2==(byte) 0) goto divr16u::@2
  to:divr16u::@4
divr16u::@4: scope:[divr16u]  from divr16u::@1
  [137] (word) divr16u::rem#1 ← (word) divr16u::rem#0 | (byte) 1
  to:divr16u::@2
divr16u::@2: scope:[divr16u]  from divr16u::@1 divr16u::@4
  [138] (word) divr16u::rem#5 ← phi( divr16u::@1/(word) divr16u::rem#0 divr16u::@4/(word) divr16u::rem#1 )
  [139] (word) divr16u::dividend#0 ← (word) divr16u::dividend#2 << (byte) 1
  [140] (word) divr16u::quotient#1 ← (word) divr16u::quotient#3 << (byte) 1
  [141] if((word) divr16u::rem#5<(word) divr16u::divisor#0) goto divr16u::@3
  to:divr16u::@5
divr16u::@5: scope:[divr16u]  from divr16u::@2
  [142] (word) divr16u::quotient#2 ← ++ (word) divr16u::quotient#1
  [143] (word) divr16u::rem#2 ← (word) divr16u::rem#5 - (word) divr16u::divisor#0
  to:divr16u::@3
divr16u::@3: scope:[divr16u]  from divr16u::@2 divr16u::@5
  [144] (word) divr16u::return#0 ← phi( divr16u::@2/(word) divr16u::quotient#1 divr16u::@5/(word) divr16u::quotient#2 )
  [144] (word) divr16u::rem#10 ← phi( divr16u::@2/(word) divr16u::rem#5 divr16u::@5/(word) divr16u::rem#2 )
  [145] (byte) divr16u::i#1 ← ++ (byte) divr16u::i#2
  [146] if((byte) divr16u::i#1!=(byte) $10) goto divr16u::@1
  to:divr16u::@6
divr16u::@6: scope:[divr16u]  from divr16u::@3
  [147] (word) rem16u#0 ← (word) divr16u::rem#10
  to:divr16u::@return
divr16u::@return: scope:[divr16u]  from divr16u::@6
  [148] return 
  to:@return

(word()) utoa_append((byte*) utoa_append::buffer , (word) utoa_append::value , (word) utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [149] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [150] (byte) utoa_append::digit#2 ← phi( utoa_append/(byte) 0 utoa_append::@2/(byte) utoa_append::digit#1 )
  [150] (word) utoa_append::value#2 ← phi( utoa_append/(word) utoa_append::value#0 utoa_append::@2/(word) utoa_append::value#1 )
  [151] if((word) utoa_append::value#2>=(word) utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [152] *((byte*) utoa_append::buffer#0) ← *((const byte*) DIGITS + (byte) utoa_append::digit#2)
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [153] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [154] (byte) utoa_append::digit#1 ← ++ (byte) utoa_append::digit#2
  [155] (word) utoa_append::value#1 ← (word) utoa_append::value#2 - (word) utoa_append::sub#0
  to:utoa_append::@1
