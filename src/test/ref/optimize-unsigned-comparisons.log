
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  main::temp#0 = 0
  main::i#0 = 0
  to:main::@1
main::@1: scope:[main]  from main main::@2
  main::i#2 = phi( main/main::i#0, main::@2/main::i#1 )
  main::$2 = ball_active[main::i#2] < 0
  main::$3 = ! main::$2
  if(main::$3) goto main::@2
  to:main::@3
main::@2: scope:[main]  from main::@1 main::@3
  main::i#3 = phi( main::@1/main::i#2, main::@3/main::i#4 )
  main::temp#1 = ball_active[main::i#3]
  main::i#1 = main::i#3 + rangenext(0,7)
  main::$4 = main::i#1 != rangelast(0,7)
  if(main::$4) goto main::@1
  to:main::@4
main::@3: scope:[main]  from main::@1
  main::i#4 = phi( main::@1/main::i#2 )
  main::screen[main::i#4] = '-'
  to:main::@2
main::@4: scope:[main]  from main::@2
  main::temp#2 = phi( main::@2/main::temp#1 )
  main::$0 = main::temp#2 < 0
  main::$1 = ! main::$0
  if(main::$1) goto main::@return
  to:main::@5
main::@5: scope:[main]  from main::@4
  main::temp#3 = phi( main::@4/main::temp#2 )
  main::screen[$28] = main::temp#3
  to:main::@return
main::@return: scope:[main]  from main::@4 main::@5
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
const byte* ball_active[8]  = { 0, 1, 0, 1, 0, 1, 1, 1 }
void main()
bool~ main::$0
bool~ main::$1
bool~ main::$2
bool~ main::$3
bool~ main::$4
byte main::i
byte main::i#0
byte main::i#1
byte main::i#2
byte main::i#3
byte main::i#4
const nomodify byte* main::screen = (byte*)$400
byte main::temp
byte main::temp#0
byte main::temp#1
byte main::temp#2
byte main::temp#3

Adding number conversion cast (unumber) 0 in main::$2 = ball_active[main::i#2] < 0
Adding number conversion cast (unumber) 0 in main::$0 = main::temp#2 < 0
Adding number conversion cast (unumber) $28 in main::screen[$28] = main::temp#3
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) 0
Finalized unsigned number type (byte) $28
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inversing boolean not [4] main::$3 = ball_active[main::i#2] >= 0 from [3] main::$2 = ball_active[main::i#2] < 0
Inversing boolean not [15] main::$1 = main::temp#2 >= 0 from [14] main::$0 = main::temp#2 < 0
Successful SSA optimization Pass2UnaryNotSimplification
Alias main::i#2 = main::i#4 
Alias main::temp#1 = main::temp#2 main::temp#3 
Successful SSA optimization Pass2AliasElimination
Alias main::i#2 = main::i#3 
Successful SSA optimization Pass2AliasElimination
Simple Condition main::$3 [4] if(ball_active[main::i#2]>=0) goto main::@2
Simple Condition main::$4 [8] if(main::i#1!=rangelast(0,7)) goto main::@1
Simple Condition main::$1 [11] if(main::temp#1>=0) goto main::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant main::temp#0 = 0
Constant main::i#0 = 0
Successful SSA optimization Pass2ConstantIdentification
if() condition always true - replacing block destination [4] if(ball_active[main::i#2]>=0) goto main::@2
if() condition always true - replacing block destination [11] if(main::temp#1>=0) goto main::@return
Successful SSA optimization Pass2ConstantIfs
Resolved ranged next value [6] main::i#1 = ++ main::i#2 to ++
Resolved ranged comparison value [8] if(main::i#1!=rangelast(0,7)) goto main::@1 to 8
Removing unused block main::@3
Removing unused block main::@5
Successful SSA optimization Pass2EliminateUnusedBlocks
Eliminating unused variable main::temp#1 and assignment [1] main::temp#1 = ball_active[main::i#2]
Eliminating unused constant main::screen
Eliminating unused constant main::temp#0
Successful SSA optimization PassNEliminateUnusedVars
Eliminating unused constant ball_active
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Adding number conversion cast (unumber) 8 in [2] if(main::i#1!=8) goto main::@1
Successful SSA optimization PassNAddNumberTypeConversions
Simplifying constant integer cast 8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inlining constant with var siblings main::i#0
Constant inlined main::i#0 = 0
Successful SSA optimization Pass2ConstantInlining
Added new block during phi lifting main::@6(between main::@2 and main::@1)
Adding NOP phi() at start of main
Adding NOP phi() at start of main::@4
CALL GRAPH

Created 1 initial phi equivalence classes
Coalesced [6] main::i#5 = main::i#1
Coalesced down to 1 phi equivalence classes
Culled Empty Block label main::@4
Culled Empty Block label main::@6
Adding NOP phi() at start of main

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@2
  [1] main::i#2 = phi( main/0, main::@2/main::i#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1
  [2] main::i#1 = ++ main::i#2
  [3] if(main::i#1!=8) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@2
  [4] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()
byte main::i
byte main::i#1 16.5
byte main::i#2 22.0
byte main::temp

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
Allocated zp[1]:2 [ main::i#2 main::i#1 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Potential registers zp[1]:2 [ main::i#2 main::i#1 ] : zp[1]:2 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 38.5: zp[1]:2 [ main::i#2 main::i#1 ] 
Uplift Scope [] 

Uplifting [main] best 211 combination reg byte x [ main::i#2 main::i#1 ] 
Uplifting [] best 211 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Examples of unsigned comparisons to values outside the range of unsigned
// These should be optimized to constants
  // Upstart
  // Commodore 64 PRG executable file
.file [name="optimize-unsigned-comparisons.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    jmp __b1
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
  __b1_from___b2:
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    jmp __b1
    // main::@1
  __b1:
    jmp __b2
    // main::@2
  __b2:
    // [2] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [3] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b1_from___b2
    jmp __breturn
    // main::@return
  __breturn:
    // [4] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1 with __b2
Replacing label __b1_from___b2 with __b2
Removing instruction __b1_from___b2:
Removing instruction __b1:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction __b1_from_main:
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
Removing instruction jmp __b2
Succesful ASM optimization Pass5NextJumpElimination

FINAL SYMBOL TABLE
void main()
byte main::i
byte main::i#1 reg byte x 16.5
byte main::i#2 reg byte x 22.0
byte main::temp

reg byte x [ main::i#2 main::i#1 ]


FINAL ASSEMBLER
Score: 91

  // File Comments
// Examples of unsigned comparisons to values outside the range of unsigned
// These should be optimized to constants
  // Upstart
  // Commodore 64 PRG executable file
.file [name="optimize-unsigned-comparisons.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
.segment Code
  // main
main: {
    // [1] phi from main to main::@1 [phi:main->main::@1]
    // [1] phi main::i#2 = 0 [phi:main->main::@1#0] -- vbuxx=vbuc1 
    ldx #0
    // [1] phi from main::@2 to main::@1 [phi:main::@2->main::@1]
    // [1] phi main::i#2 = main::i#1 [phi:main::@2->main::@1#0] -- register_copy 
    // main::@1
    // main::@2
  __b2:
    // for( char i: 0..7)
    // [2] main::i#1 = ++ main::i#2 -- vbuxx=_inc_vbuxx 
    inx
    // [3] if(main::i#1!=8) goto main::@1 -- vbuxx_neq_vbuc1_then_la1 
    cpx #8
    bne __b2
    // main::@return
    // }
    // [4] return 
    rts
}
  // File Data

