@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  kickasm(location (const byte*) LOGO#0) {{ .var logoPic = LoadPicture("logo.png", List().add($444444, $808080, $000000, $ffffff))
    .for (var y=0; y<6	; y++)
        .for (var x=0;x<40; x++)
            .for(var cp=0; cp<8; cp++)
                .byte logoPic.getMulticolorByte(x,cp+y*8)
 }}
  to:@2
@2: scope:[]  from @1
  [2] phi()
  [3] call main 
  to:@end
@end: scope:[]  from @2
  [4] phi()

(void()) main()
main: scope:[main]  from @2
  [5] *((const byte*) BORDERCOL#0) ← (const byte) WHITE#0
  [6] *((const byte*) BGCOL2#0) ← (const byte) DARK_GREY#0
  [7] *((const byte*) BGCOL#0) ← *((const byte*) BGCOL2#0)
  [8] *((const byte*) BGCOL3#0) ← (const byte) BLACK#0
  to:main::toD0181
main::toD0181: scope:[main]  from main
  [9] phi()
  to:main::@3
main::@3: scope:[main]  from main::toD0181
  [10] *((const byte*) D018#0) ← (const byte) main::toD0181_return#0
  [11] *((const byte*) D016#0) ← (const byte) VIC_MCM#0|(const byte) VIC_CSEL#0
  [12] call memset 
  to:main::@4
main::@4: scope:[main]  from main::@3
  [13] phi()
  [14] call memset 
  to:main::@1
main::@1: scope:[main]  from main::@1 main::@4
  [15] (byte) main::ch#2 ← phi( main::@1/(byte) main::ch#1 main::@4/(byte) 0 )
  [16] *((const byte*) SCREEN#0 + (byte) main::ch#2) ← (byte) main::ch#2
  [17] (byte) main::ch#1 ← ++ (byte) main::ch#2
  [18] if((byte) main::ch#1!=(byte) $f0) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@2
  [19] *((const byte*) SCREEN#0+(word) $3e7) ← ++ *((const byte*) SCREEN#0+(word) $3e7)
  kickasm() {{ inc $d020  }}
  to:main::@2

(void*()) memset((void*) memset::str , (byte) memset::c , (word) memset::num)
memset: scope:[memset]  from main::@3 main::@4
  [21] (byte) memset::c#4 ← phi( main::@4/(const byte) WHITE#0|(byte) 8 main::@3/(const byte) BLACK#0 )
  [21] (void*) memset::str#3 ← phi( main::@4/(void*)(const byte*) COLS#0 main::@3/(void*)(const byte*) SCREEN#0 )
  [21] (word) memset::num#2 ← phi( main::@4/(word)(number) $28*(number) $19 main::@3/(word)(number) $28*(number) $19 )
  [22] if((word) memset::num#2<=(byte) 0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [23] (byte*) memset::end#0 ← (byte*)(void*) memset::str#3 + (word) memset::num#2
  [24] (byte*~) memset::dst#4 ← (byte*)(void*) memset::str#3
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [25] (byte*) memset::dst#2 ← phi( memset::@1/(byte*~) memset::dst#4 memset::@3/(byte*) memset::dst#1 )
  [26] if((byte*) memset::dst#2!=(byte*) memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [27] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [28] *((byte*) memset::dst#2) ← (byte) memset::c#4
  [29] (byte*) memset::dst#1 ← ++ (byte*) memset::dst#2
  to:memset::@2
