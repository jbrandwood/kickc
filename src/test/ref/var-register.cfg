@begin: scope:[]  from
  [0] phi()
  to:@1
@1: scope:[]  from @begin
  [1] phi()
  [2] call main 
  to:@end
@end: scope:[]  from @1
  [3] phi()

(void()) main()
main: scope:[main]  from @1
  [4] phi()
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [5] (byte) main::x#7 ← phi( main/(byte) 0 main::@5/(byte) main::x#1 )
  to:main::@2
main::@2: scope:[main]  from main::@1 main::@4
  [6] (byte) main::y#4 ← phi( main::@1/(byte) 0 main::@4/(byte) main::y#1 )
  [6] (byte) main::x#4 ← phi( main::@1/(byte) main::x#7 main::@4/(byte) main::x#2 )
  to:main::@3
main::@3: scope:[main]  from main::@2 main::@6
  [7] (byte) main::x#2 ← phi( main::@2/(byte) main::x#4 main::@6/(byte) main::x#2 )
  [7] (byte) main::a#2 ← phi( main::@2/(byte) 0 main::@6/(byte) main::a#1 )
  [8] (byte) main::val1#0 ← (byte) main::a#2 + (byte) main::x#2
  [9] (byte) print::idx#0 ← (byte) main::y#4
  [10] (byte) print::val#0 ← (byte) main::val1#0
  [11] call print 
  to:main::@6
main::@6: scope:[main]  from main::@3
  [12] (byte) main::a#1 ← ++ (byte) main::a#2
  [13] if((byte) main::a#1!=(byte) $65) goto main::@3
  to:main::@4
main::@4: scope:[main]  from main::@6
  [14] (byte) main::y#1 ← ++ (byte) main::y#4
  [15] if((byte) main::y#1!=(byte) $65) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@4
  [16] (byte) main::x#1 ← ++ (byte) main::x#2
  [17] if((byte) main::x#1!=(byte) $65) goto main::@1
  to:main::@return
main::@return: scope:[main]  from main::@5
  [18] return 
  to:@return

(void()) print((byte) print::idx , (byte) print::val)
print: scope:[print]  from main::@3
  [19] (byte) print::idx#1 ← phi( main::@3/(byte) print::idx#0 )
  [20] *((const byte*) print::SCREEN + (byte) print::idx#1) ← (byte) print::val#0
  to:print::@return
print::@return: scope:[print]  from print
  [21] return 
  to:@return
