@begin: scope:[]  from
  [0] phi()
  to:@14
@14: scope:[]  from @begin
  kickasm(location (const byte*) PLAYFIELD_CHARSET#0) {{ .fill 8,$00 // Place a filled char at the start of the charset
    .import binary "nes-screen.imap"
 }}
  kickasm(location (const byte*) PLAYFIELD_SCREEN_ORIGINAL#0) {{ .import binary "nes-screen.iscr"
 }}
  to:@20
@20: scope:[]  from @14
  kickasm(location (const byte*) PLAYFIELD_SPRITES#0) {{ .var sprites = LoadPicture("nes-playfield.png", List().add($010101, $000000))
	.for(var sy=0;sy<10;sy++) {
		.for(var sx=0;sx<3;sx++) {
	    	.for (var y=0;y<21; y++) {
		    	.for (var c=0; c<3; c++) {
	            	.byte sprites.getSinglecolorByte(sx*3+c,sy*21+y)
	            }
	        }
	    	.byte 0
	  	}
	}
 }}
  to:@21
@21: scope:[]  from @20
  [4] (byte) irq_raster_next#0 ← (const byte) IRQ_RASTER_FIRST#0
  [5] (byte) irq_sprite_ypos#0 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:toSpritePtr1
toSpritePtr1: scope:[]  from @21
  [6] phi()
  to:@33
@33: scope:[]  from toSpritePtr1
  [7] (byte) irq_sprite_ptr#0 ← (const byte) toSpritePtr1_return#0
  [8] (byte) irq_cnt#0 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:@32
@32: scope:[]  from @33
  [9] phi()
  [10] call main 
  to:@end
@end: scope:[]  from @32
  [11] phi()
main: scope:[main]  from @32
  [12] phi()
  [13] call sid_rnd_init 
  to:main::@15
main::@15: scope:[main]  from main
  asm { sei  }
  [15] call render_init 
  to:main::@16
main::@16: scope:[main]  from main::@15
  [16] phi()
  [17] call sprites_init 
  to:main::@17
main::@17: scope:[main]  from main::@16
  [18] phi()
  [19] call sprites_irq_init 
  to:main::@18
main::@18: scope:[main]  from main::@17
  [20] phi()
  [21] call play_init 
  to:main::@19
main::@19: scope:[main]  from main::@18
  [22] phi()
  [23] call play_spawn_current 
  to:main::@20
main::@20: scope:[main]  from main::@19
  [24] phi()
  [25] call render_playfield 
  to:main::@21
main::@21: scope:[main]  from main::@20
  [26] (byte~) current_ypos#83 ← (byte) current_ypos#18
  [27] (byte~) current_xpos#109 ← (byte) current_xpos#23
  [28] (byte*~) current_piece_gfx#99 ← (byte*) current_piece_gfx#16
  [29] (byte~) current_piece_char#87 ← (byte) current_piece_char#12
  [30] call render_current 
  [31] (byte*~) current_piece#71 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3)
  to:main::@1
main::@1: scope:[main]  from main::@21 main::@7
  [32] (byte) current_movedown_counter#12 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@7/(byte) current_movedown_counter#10 )
  [32] (byte) keyboard_events_size#19 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@7/(byte) keyboard_events_size#16 )
  [32] (byte) current_piece_char#15 ← phi( main::@21/(byte) current_piece_char#12 main::@7/(byte) current_piece_char#1 )
  [32] (byte) current_ypos#21 ← phi( main::@21/(byte) current_ypos#18 main::@7/(byte) current_ypos#13 )
  [32] (byte) current_xpos#10 ← phi( main::@21/(byte) current_xpos#23 main::@7/(byte) current_xpos#19 )
  [32] (byte*) current_piece_gfx#20 ← phi( main::@21/(byte*) current_piece_gfx#16 main::@7/(byte*) current_piece_gfx#14 )
  [32] (byte) current_orientation#10 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@7/(byte) current_orientation#19 )
  [32] (byte*) current_piece#16 ← phi( main::@21/(byte*~) current_piece#71 main::@7/(byte*) current_piece#10 )
  [32] (byte) render_screen_render#15 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 64 main::@7/(byte) render_screen_render#31 )
  [32] (byte) render_screen_show#15 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 0 main::@7/(byte) render_screen_show#24 )
  to:main::@4
main::@4: scope:[main]  from main::@1 main::@4
  [33] if(*((const byte*) RASTER#0)!=(byte/word/signed word/dword/signed dword) 255) goto main::@4
  to:main::@6
main::@6: scope:[main]  from main::@4
  [34] (byte~) main::$9 ← (byte) render_screen_show#15 >> (byte/signed byte/word/signed word/dword/signed dword) 4
  [35] *((const byte*) BORDERCOL#0) ← (byte~) main::$9
  [36] call render_show 
  to:main::@23
main::@23: scope:[main]  from main::@6
  [37] phi()
  [38] call keyboard_event_scan 
  to:main::@24
main::@24: scope:[main]  from main::@23
  [39] phi()
  [40] call keyboard_event_get 
  [41] (byte) keyboard_event_get::return#3 ← (byte) keyboard_event_get::return#2
  to:main::@25
main::@25: scope:[main]  from main::@24
  [42] (byte) main::key_event#0 ← (byte) keyboard_event_get::return#3
  [43] (byte) play_move_down::key_event#0 ← (byte) main::key_event#0
  [44] call play_move_down 
  [45] (byte) play_move_down::return#3 ← (byte) play_move_down::return#2
  to:main::@26
main::@26: scope:[main]  from main::@25
  [46] (byte~) main::$13 ← (byte) play_move_down::return#3
  [47] (byte) main::render#1 ← (byte/signed byte/word/signed word/dword/signed dword) 0 + (byte~) main::$13
  [48] (byte) play_move_leftright::key_event#0 ← (byte) main::key_event#0
  [49] call play_move_leftright 
  [50] (byte) play_move_leftright::return#4 ← (byte) play_move_leftright::return#1
  to:main::@27
main::@27: scope:[main]  from main::@26
  [51] (byte~) main::$14 ← (byte) play_move_leftright::return#4
  [52] (byte) main::render#2 ← (byte) main::render#1 + (byte~) main::$14
  [53] (byte) play_move_rotate::key_event#0 ← (byte) main::key_event#0
  [54] call play_move_rotate 
  [55] (byte) play_move_rotate::return#4 ← (byte) play_move_rotate::return#1
  to:main::@28
main::@28: scope:[main]  from main::@27
  [56] (byte~) main::$15 ← (byte) play_move_rotate::return#4
  [57] (byte) main::render#3 ← (byte) main::render#2 + (byte~) main::$15
  [58] if((byte) main::render#3==(byte/signed byte/word/signed word/dword/signed dword) 0) goto main::@7
  to:main::@13
main::@13: scope:[main]  from main::@28
  [59] (byte~) render_screen_render#69 ← (byte) render_screen_render#15
  [60] call render_playfield 
  to:main::@29
main::@29: scope:[main]  from main::@13
  [61] (byte~) current_ypos#84 ← (byte) current_ypos#13
  [62] (byte~) render_screen_render#68 ← (byte) render_screen_render#15
  [63] (byte~) current_xpos#110 ← (byte) current_xpos#19
  [64] (byte*~) current_piece_gfx#100 ← (byte*) current_piece_gfx#14
  [65] (byte~) current_piece_char#88 ← (byte) current_piece_char#1
  [66] call render_current 
  to:main::@30
main::@30: scope:[main]  from main::@29
  [67] phi()
  [68] call render_screen_swap 
  to:main::@7
main::@7: scope:[main]  from main::@28 main::@30
  [69] (byte) render_screen_render#31 ← phi( main::@28/(byte) render_screen_render#15 main::@30/(byte) render_screen_render#10 )
  [69] (byte) render_screen_show#24 ← phi( main::@28/(byte) render_screen_show#15 main::@30/(byte) render_screen_show#11 )
  [70] *((const byte*) BORDERCOL#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  to:main::@1
render_screen_swap: scope:[render_screen_swap]  from main::@30
  [71] (byte) render_screen_render#10 ← (byte) render_screen_render#15 ^ (byte/signed byte/word/signed word/dword/signed dword) 64
  [72] (byte) render_screen_show#11 ← (byte) render_screen_show#15 ^ (byte/signed byte/word/signed word/dword/signed dword) 64
  to:render_screen_swap::@return
render_screen_swap::@return: scope:[render_screen_swap]  from render_screen_swap
  [73] return 
  to:@return
render_current: scope:[render_current]  from main::@21 main::@29
  [74] (byte) current_piece_char#62 ← phi( main::@21/(byte~) current_piece_char#87 main::@29/(byte~) current_piece_char#88 )
  [74] (byte*) current_piece_gfx#52 ← phi( main::@21/(byte*~) current_piece_gfx#99 main::@29/(byte*~) current_piece_gfx#100 )
  [74] (byte) current_xpos#47 ← phi( main::@21/(byte~) current_xpos#109 main::@29/(byte~) current_xpos#110 )
  [74] (byte) render_screen_render#27 ← phi( main::@21/(byte/signed byte/word/signed word/dword/signed dword) 64 main::@29/(byte~) render_screen_render#68 )
  [74] (byte) current_ypos#9 ← phi( main::@21/(byte~) current_ypos#83 main::@29/(byte~) current_ypos#84 )
  [75] (byte) render_current::ypos2#0 ← (byte) current_ypos#9 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:render_current::@1
render_current::@1: scope:[render_current]  from render_current render_current::@3
  [76] (byte) render_current::l#4 ← phi( render_current/(byte/signed byte/word/signed word/dword/signed dword) 0 render_current::@3/(byte) render_current::l#1 )
  [76] (byte) render_current::i#3 ← phi( render_current/(byte/signed byte/word/signed word/dword/signed dword) 0 render_current::@3/(byte) render_current::i#8 )
  [76] (byte) render_current::ypos2#2 ← phi( render_current/(byte) render_current::ypos2#0 render_current::@3/(byte) render_current::ypos2#1 )
  [77] if((byte) render_current::ypos2#2>(byte/signed byte/word/signed word/dword/signed dword) 2) goto render_current::@13
  to:render_current::@7
render_current::@7: scope:[render_current]  from render_current::@1 render_current::@13
  [78] (byte) render_current::i#1 ← (byte) render_current::i#3 + (byte/signed byte/word/signed word/dword/signed dword) 4
  to:render_current::@3
render_current::@3: scope:[render_current]  from render_current::@5 render_current::@7
  [79] (byte) render_current::i#8 ← phi( render_current::@5/(byte) render_current::i#10 render_current::@7/(byte) render_current::i#1 )
  [80] (byte) render_current::ypos2#1 ← (byte) render_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [81] (byte) render_current::l#1 ← ++ (byte) render_current::l#4
  [82] if((byte) render_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@1
  to:render_current::@return
render_current::@return: scope:[render_current]  from render_current::@3
  [83] return 
  to:@return
render_current::@13: scope:[render_current]  from render_current::@1
  [84] if((byte) render_current::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto render_current::@2
  to:render_current::@7
render_current::@2: scope:[render_current]  from render_current::@13
  [85] (byte~) render_current::$5 ← (byte) render_screen_render#27 + (byte) render_current::ypos2#2
  [86] (byte*) render_current::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_current::$5)
  [87] (byte) render_current::xpos#0 ← (byte) current_xpos#47
  to:render_current::@4
render_current::@4: scope:[render_current]  from render_current::@2 render_current::@5
  [88] (byte) render_current::c#2 ← phi( render_current::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 render_current::@5/(byte) render_current::c#1 )
  [88] (byte) render_current::xpos#2 ← phi( render_current::@2/(byte) render_current::xpos#0 render_current::@5/(byte) render_current::xpos#1 )
  [88] (byte) render_current::i#4 ← phi( render_current::@2/(byte) render_current::i#3 render_current::@5/(byte) render_current::i#10 )
  [89] (byte) render_current::current_cell#0 ← *((byte*) current_piece_gfx#52 + (byte) render_current::i#4)
  [90] (byte) render_current::i#10 ← ++ (byte) render_current::i#4
  [91] if((byte) render_current::current_cell#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_current::@5
  to:render_current::@9
render_current::@9: scope:[render_current]  from render_current::@4
  [92] if((byte) render_current::xpos#2>=(const byte) PLAYFIELD_COLS#0) goto render_current::@5
  to:render_current::@10
render_current::@10: scope:[render_current]  from render_current::@9
  [93] *((byte*) render_current::screen_line#0 + (byte) render_current::xpos#2) ← (byte) current_piece_char#62
  to:render_current::@5
render_current::@5: scope:[render_current]  from render_current::@10 render_current::@4 render_current::@9
  [94] (byte) render_current::xpos#1 ← ++ (byte) render_current::xpos#2
  [95] (byte) render_current::c#1 ← ++ (byte) render_current::c#2
  [96] if((byte) render_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_current::@4
  to:render_current::@3
render_playfield: scope:[render_playfield]  from main::@13 main::@20
  [97] (byte) render_screen_render#18 ← phi( main::@13/(byte~) render_screen_render#69 main::@20/(byte/signed byte/word/signed word/dword/signed dword) 64 )
  to:render_playfield::@1
render_playfield::@1: scope:[render_playfield]  from render_playfield render_playfield::@3
  [98] (byte) render_playfield::i#3 ← phi( render_playfield/(const byte) PLAYFIELD_COLS#0*(byte/signed byte/word/signed word/dword/signed dword) 2 render_playfield::@3/(byte) render_playfield::i#1 )
  [98] (byte) render_playfield::l#2 ← phi( render_playfield/(byte/signed byte/word/signed word/dword/signed dword) 2 render_playfield::@3/(byte) render_playfield::l#1 )
  [99] (byte~) render_playfield::$2 ← (byte) render_playfield::l#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [100] (byte~) render_playfield::$3 ← (byte) render_screen_render#18 + (byte~) render_playfield::$2
  [101] (byte*) render_playfield::screen_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_playfield::$3)
  to:render_playfield::@2
render_playfield::@2: scope:[render_playfield]  from render_playfield::@1 render_playfield::@2
  [102] (byte) render_playfield::c#2 ← phi( render_playfield::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_playfield::@2/(byte) render_playfield::c#1 )
  [102] (byte*) render_playfield::screen_line#2 ← phi( render_playfield::@1/(byte*) render_playfield::screen_line#0 render_playfield::@2/(byte*) render_playfield::screen_line#1 )
  [102] (byte) render_playfield::i#2 ← phi( render_playfield::@1/(byte) render_playfield::i#3 render_playfield::@2/(byte) render_playfield::i#1 )
  [103] *((byte*) render_playfield::screen_line#2) ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) render_playfield::i#2)
  [104] (byte*) render_playfield::screen_line#1 ← ++ (byte*) render_playfield::screen_line#2
  [105] (byte) render_playfield::i#1 ← ++ (byte) render_playfield::i#2
  [106] (byte) render_playfield::c#1 ← ++ (byte) render_playfield::c#2
  [107] if((byte) render_playfield::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@2
  to:render_playfield::@3
render_playfield::@3: scope:[render_playfield]  from render_playfield::@2
  [108] (byte) render_playfield::l#1 ← ++ (byte) render_playfield::l#2
  [109] if((byte) render_playfield::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_playfield::@1
  to:render_playfield::@return
render_playfield::@return: scope:[render_playfield]  from render_playfield::@3
  [110] return 
  to:@return
play_move_rotate: scope:[play_move_rotate]  from main::@27
  [111] if((byte) play_move_rotate::key_event#0==(const byte) KEY_Z#0) goto play_move_rotate::@1
  to:play_move_rotate::@6
play_move_rotate::@6: scope:[play_move_rotate]  from play_move_rotate
  [112] if((byte) play_move_rotate::key_event#0==(const byte) KEY_X#0) goto play_move_rotate::@2
  to:play_move_rotate::@return
play_move_rotate::@return: scope:[play_move_rotate]  from play_move_rotate::@11 play_move_rotate::@14 play_move_rotate::@6
  [113] (byte*) current_piece_gfx#14 ← phi( play_move_rotate::@11/(byte*) current_piece_gfx#3 play_move_rotate::@14/(byte*) current_piece_gfx#1 play_move_rotate::@6/(byte*) current_piece_gfx#1 )
  [113] (byte) current_orientation#19 ← phi( play_move_rotate::@11/(byte) current_orientation#4 play_move_rotate::@14/(byte) current_orientation#14 play_move_rotate::@6/(byte) current_orientation#14 )
  [113] (byte) play_move_rotate::return#1 ← phi( play_move_rotate::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_rotate::@14/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_rotate::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [114] return 
  to:@return
play_move_rotate::@2: scope:[play_move_rotate]  from play_move_rotate::@6
  [115] (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 ← (byte) current_orientation#14 + (byte/signed byte/word/signed word/dword/signed dword) 16
  [116] (byte) play_move_rotate::orientation#2 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$2 & (byte/signed byte/word/signed word/dword/signed dword) 63
  to:play_move_rotate::@4
play_move_rotate::@4: scope:[play_move_rotate]  from play_move_rotate::@1 play_move_rotate::@2
  [117] (byte) play_move_rotate::orientation#3 ← phi( play_move_rotate::@1/(byte) play_move_rotate::orientation#1 play_move_rotate::@2/(byte) play_move_rotate::orientation#2 )
  [118] (byte) play_collision::xpos#3 ← (byte) current_xpos#19
  [119] (byte) play_collision::ypos#3 ← (byte) current_ypos#13
  [120] (byte) play_collision::orientation#3 ← (byte) play_move_rotate::orientation#3
  [121] (byte*~) current_piece#76 ← (byte*) current_piece#10
  [122] call play_collision 
  [123] (byte) play_collision::return#13 ← (byte) play_collision::return#14
  to:play_move_rotate::@14
play_move_rotate::@14: scope:[play_move_rotate]  from play_move_rotate::@4
  [124] (byte~) play_move_rotate::$6 ← (byte) play_collision::return#13
  [125] if((byte~) play_move_rotate::$6!=(const byte) COLLISION_NONE#0) goto play_move_rotate::@return
  to:play_move_rotate::@11
play_move_rotate::@11: scope:[play_move_rotate]  from play_move_rotate::@14
  [126] (byte) current_orientation#4 ← (byte) play_move_rotate::orientation#3
  [127] (byte*) current_piece_gfx#3 ← (byte*) current_piece#10 + (byte) current_orientation#4
  to:play_move_rotate::@return
play_move_rotate::@1: scope:[play_move_rotate]  from play_move_rotate
  [128] (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 ← (byte) current_orientation#14 - (byte/signed byte/word/signed word/dword/signed dword) 16
  [129] (byte) play_move_rotate::orientation#1 ← (byte/signed word/word/dword/signed dword~) play_move_rotate::$4 & (byte/signed byte/word/signed word/dword/signed dword) 63
  to:play_move_rotate::@4
play_collision: scope:[play_collision]  from play_move_down::@12 play_move_leftright::@1 play_move_leftright::@7 play_move_rotate::@4
  [130] (byte) play_collision::xpos#5 ← phi( play_move_down::@12/(byte) play_collision::xpos#0 play_move_leftright::@1/(byte) play_collision::xpos#1 play_move_leftright::@7/(byte) play_collision::xpos#2 play_move_rotate::@4/(byte) play_collision::xpos#3 )
  [130] (byte) play_collision::ypos#4 ← phi( play_move_down::@12/(byte) play_collision::ypos#0 play_move_leftright::@1/(byte) play_collision::ypos#1 play_move_leftright::@7/(byte) play_collision::ypos#2 play_move_rotate::@4/(byte) play_collision::ypos#3 )
  [130] (byte) play_collision::orientation#4 ← phi( play_move_down::@12/(byte) play_collision::orientation#0 play_move_leftright::@1/(byte) play_collision::orientation#1 play_move_leftright::@7/(byte) play_collision::orientation#2 play_move_rotate::@4/(byte) play_collision::orientation#3 )
  [130] (byte*) current_piece#12 ← phi( play_move_down::@12/(byte*~) current_piece#73 play_move_leftright::@1/(byte*~) current_piece#74 play_move_leftright::@7/(byte*~) current_piece#75 play_move_rotate::@4/(byte*~) current_piece#76 )
  [131] (byte*) play_collision::piece_gfx#0 ← (byte*) current_piece#12 + (byte) play_collision::orientation#4
  [132] (byte) play_collision::ypos2#0 ← (byte) play_collision::ypos#4 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_collision::@1
play_collision::@1: scope:[play_collision]  from play_collision play_collision::@20
  [133] (byte) play_collision::l#6 ← phi( play_collision/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@20/(byte) play_collision::l#1 )
  [133] (byte) play_collision::i#3 ← phi( play_collision/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@20/(byte~) play_collision::i#11 )
  [133] (byte) play_collision::ypos2#2 ← phi( play_collision/(byte) play_collision::ypos2#0 play_collision::@20/(byte) play_collision::ypos2#1 )
  [134] (byte*) play_collision::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_collision::ypos2#2)
  [135] (byte~) play_collision::col#9 ← (byte) play_collision::xpos#5
  to:play_collision::@2
play_collision::@2: scope:[play_collision]  from play_collision::@1 play_collision::@21
  [136] (byte) play_collision::c#2 ← phi( play_collision::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_collision::@21/(byte) play_collision::c#1 )
  [136] (byte) play_collision::col#2 ← phi( play_collision::@1/(byte~) play_collision::col#9 play_collision::@21/(byte) play_collision::col#1 )
  [136] (byte) play_collision::i#2 ← phi( play_collision::@1/(byte) play_collision::i#3 play_collision::@21/(byte~) play_collision::i#13 )
  [137] (byte) play_collision::i#1 ← ++ (byte) play_collision::i#2
  [138] if(*((byte*) play_collision::piece_gfx#0 + (byte) play_collision::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3
  to:play_collision::@8
play_collision::@8: scope:[play_collision]  from play_collision::@2
  [139] if((byte) play_collision::ypos2#2<(byte/signed byte/word/signed word/dword/signed dword) 2*(const byte) PLAYFIELD_LINES#0) goto play_collision::@4
  to:play_collision::@return
play_collision::@return: scope:[play_collision]  from play_collision::@17 play_collision::@4 play_collision::@5 play_collision::@6 play_collision::@8
  [140] (byte) play_collision::return#14 ← phi( play_collision::@4/(const byte) COLLISION_LEFT#0 play_collision::@5/(const byte) COLLISION_RIGHT#0 play_collision::@6/(const byte) COLLISION_PLAYFIELD#0 play_collision::@17/(const byte) COLLISION_NONE#0 play_collision::@8/(const byte) COLLISION_BOTTOM#0 )
  [141] return 
  to:@return
play_collision::@4: scope:[play_collision]  from play_collision::@8
  [142] (byte~) play_collision::$7 ← (byte) play_collision::col#2 & (byte/word/signed word/dword/signed dword) 128
  [143] if((byte~) play_collision::$7==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@5
  to:play_collision::@return
play_collision::@5: scope:[play_collision]  from play_collision::@4
  [144] if((byte) play_collision::col#2<(const byte) PLAYFIELD_COLS#0) goto play_collision::@6
  to:play_collision::@return
play_collision::@6: scope:[play_collision]  from play_collision::@5
  [145] if(*((byte*) play_collision::playfield_line#0 + (byte) play_collision::col#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_collision::@3
  to:play_collision::@return
play_collision::@3: scope:[play_collision]  from play_collision::@2 play_collision::@6
  [146] (byte) play_collision::col#1 ← ++ (byte) play_collision::col#2
  [147] (byte) play_collision::c#1 ← ++ (byte) play_collision::c#2
  [148] if((byte) play_collision::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@21
  to:play_collision::@17
play_collision::@17: scope:[play_collision]  from play_collision::@3
  [149] (byte) play_collision::ypos2#1 ← (byte) play_collision::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [150] (byte) play_collision::l#1 ← ++ (byte) play_collision::l#6
  [151] if((byte) play_collision::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_collision::@20
  to:play_collision::@return
play_collision::@20: scope:[play_collision]  from play_collision::@17
  [152] (byte~) play_collision::i#11 ← (byte) play_collision::i#1
  to:play_collision::@1
play_collision::@21: scope:[play_collision]  from play_collision::@3
  [153] (byte~) play_collision::i#13 ← (byte) play_collision::i#1
  to:play_collision::@2
play_move_leftright: scope:[play_move_leftright]  from main::@26
  [154] if((byte) play_move_leftright::key_event#0==(const byte) KEY_COMMA#0) goto play_move_leftright::@1
  to:play_move_leftright::@6
play_move_leftright::@6: scope:[play_move_leftright]  from play_move_leftright
  [155] if((byte) play_move_leftright::key_event#0!=(const byte) KEY_DOT#0) goto play_move_leftright::@return
  to:play_move_leftright::@7
play_move_leftright::@7: scope:[play_move_leftright]  from play_move_leftright::@6
  [156] (byte) play_collision::xpos#2 ← (byte) current_xpos#1 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [157] (byte) play_collision::ypos#2 ← (byte) current_ypos#13
  [158] (byte) play_collision::orientation#2 ← (byte) current_orientation#14
  [159] (byte*~) current_piece#75 ← (byte*) current_piece#10
  [160] call play_collision 
  [161] (byte) play_collision::return#12 ← (byte) play_collision::return#14
  to:play_move_leftright::@15
play_move_leftright::@15: scope:[play_move_leftright]  from play_move_leftright::@7
  [162] (byte~) play_move_leftright::$4 ← (byte) play_collision::return#12
  [163] if((byte~) play_move_leftright::$4!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@8
play_move_leftright::@8: scope:[play_move_leftright]  from play_move_leftright::@15
  [164] (byte) current_xpos#2 ← ++ (byte) current_xpos#1
  to:play_move_leftright::@return
play_move_leftright::@return: scope:[play_move_leftright]  from play_move_leftright::@11 play_move_leftright::@14 play_move_leftright::@15 play_move_leftright::@6 play_move_leftright::@8
  [165] (byte) current_xpos#19 ← phi( play_move_leftright::@11/(byte) current_xpos#4 play_move_leftright::@15/(byte) current_xpos#1 play_move_leftright::@8/(byte) current_xpos#2 play_move_leftright::@14/(byte) current_xpos#1 play_move_leftright::@6/(byte) current_xpos#1 )
  [165] (byte) play_move_leftright::return#1 ← phi( play_move_leftright::@11/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@15/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 play_move_leftright::@14/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_leftright::@6/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [166] return 
  to:@return
play_move_leftright::@1: scope:[play_move_leftright]  from play_move_leftright
  [167] (byte) play_collision::xpos#1 ← (byte) current_xpos#1 - (byte/signed byte/word/signed word/dword/signed dword) 1
  [168] (byte) play_collision::ypos#1 ← (byte) current_ypos#13
  [169] (byte) play_collision::orientation#1 ← (byte) current_orientation#14
  [170] (byte*~) current_piece#74 ← (byte*) current_piece#10
  [171] call play_collision 
  [172] (byte) play_collision::return#1 ← (byte) play_collision::return#14
  to:play_move_leftright::@14
play_move_leftright::@14: scope:[play_move_leftright]  from play_move_leftright::@1
  [173] (byte~) play_move_leftright::$8 ← (byte) play_collision::return#1
  [174] if((byte~) play_move_leftright::$8!=(const byte) COLLISION_NONE#0) goto play_move_leftright::@return
  to:play_move_leftright::@11
play_move_leftright::@11: scope:[play_move_leftright]  from play_move_leftright::@14
  [175] (byte) current_xpos#4 ← -- (byte) current_xpos#1
  to:play_move_leftright::@return
play_move_down: scope:[play_move_down]  from main::@25
  [176] (byte) current_movedown_counter#1 ← ++ (byte) current_movedown_counter#12
  [177] if((byte) play_move_down::key_event#0!=(const byte) KEY_SPACE#0) goto play_move_down::@1
  to:play_move_down::@8
play_move_down::@8: scope:[play_move_down]  from play_move_down
  [178] phi()
  to:play_move_down::@1
play_move_down::@1: scope:[play_move_down]  from play_move_down play_move_down::@8
  [179] (byte) play_move_down::movedown#10 ← phi( play_move_down/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@8/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [180] call keyboard_event_pressed 
  [181] (byte) keyboard_event_pressed::return#12 ← (byte) keyboard_event_pressed::return#11
  to:play_move_down::@17
play_move_down::@17: scope:[play_move_down]  from play_move_down::@1
  [182] (byte~) play_move_down::$2 ← (byte) keyboard_event_pressed::return#12
  [183] if((byte~) play_move_down::$2==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@2
  to:play_move_down::@9
play_move_down::@9: scope:[play_move_down]  from play_move_down::@17
  [184] if((byte) current_movedown_counter#1<(const byte) current_movedown_fast#0) goto play_move_down::@2
  to:play_move_down::@10
play_move_down::@10: scope:[play_move_down]  from play_move_down::@9
  [185] (byte) play_move_down::movedown#2 ← ++ (byte) play_move_down::movedown#10
  to:play_move_down::@2
play_move_down::@2: scope:[play_move_down]  from play_move_down::@10 play_move_down::@17 play_move_down::@9
  [186] (byte) play_move_down::movedown#7 ← phi( play_move_down::@10/(byte) play_move_down::movedown#2 play_move_down::@17/(byte) play_move_down::movedown#10 play_move_down::@9/(byte) play_move_down::movedown#10 )
  [187] if((byte) current_movedown_counter#1<(const byte) current_movedown_slow#0) goto play_move_down::@4
  to:play_move_down::@11
play_move_down::@11: scope:[play_move_down]  from play_move_down::@2
  [188] (byte) play_move_down::movedown#3 ← ++ (byte) play_move_down::movedown#7
  to:play_move_down::@4
play_move_down::@4: scope:[play_move_down]  from play_move_down::@11 play_move_down::@2
  [189] (byte) play_move_down::movedown#6 ← phi( play_move_down::@11/(byte) play_move_down::movedown#3 play_move_down::@2/(byte) play_move_down::movedown#7 )
  [190] if((byte) play_move_down::movedown#6==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_move_down::@return
  to:play_move_down::@12
play_move_down::@12: scope:[play_move_down]  from play_move_down::@4
  [191] (byte) play_collision::ypos#0 ← (byte) current_ypos#21 + (byte/signed byte/word/signed word/dword/signed dword) 1
  [192] (byte) play_collision::xpos#0 ← (byte) current_xpos#10
  [193] (byte) play_collision::orientation#0 ← (byte) current_orientation#10
  [194] (byte*~) current_piece#73 ← (byte*) current_piece#16
  [195] call play_collision 
  [196] (byte) play_collision::return#0 ← (byte) play_collision::return#14
  to:play_move_down::@18
play_move_down::@18: scope:[play_move_down]  from play_move_down::@12
  [197] (byte~) play_move_down::$12 ← (byte) play_collision::return#0
  [198] if((byte~) play_move_down::$12==(const byte) COLLISION_NONE#0) goto play_move_down::@6
  to:play_move_down::@13
play_move_down::@13: scope:[play_move_down]  from play_move_down::@18
  [199] phi()
  [200] call play_lock_current 
  to:play_move_down::@19
play_move_down::@19: scope:[play_move_down]  from play_move_down::@13
  [201] phi()
  [202] call play_remove_lines 
  to:play_move_down::@20
play_move_down::@20: scope:[play_move_down]  from play_move_down::@19
  [203] phi()
  [204] call play_spawn_current 
  [205] (byte*~) current_piece#77 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3)
  to:play_move_down::@7
play_move_down::@7: scope:[play_move_down]  from play_move_down::@20 play_move_down::@6
  [206] (byte) current_piece_char#20 ← phi( play_move_down::@20/(byte) current_piece_char#12 play_move_down::@6/(byte) current_piece_char#15 )
  [206] (byte) current_xpos#33 ← phi( play_move_down::@20/(byte) current_xpos#23 play_move_down::@6/(byte) current_xpos#10 )
  [206] (byte*) current_piece_gfx#26 ← phi( play_move_down::@20/(byte*) current_piece_gfx#16 play_move_down::@6/(byte*) current_piece_gfx#20 )
  [206] (byte) current_orientation#29 ← phi( play_move_down::@20/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@6/(byte) current_orientation#10 )
  [206] (byte*) current_piece#20 ← phi( play_move_down::@20/(byte*~) current_piece#77 play_move_down::@6/(byte*) current_piece#16 )
  [206] (byte) current_ypos#29 ← phi( play_move_down::@20/(byte) current_ypos#18 play_move_down::@6/(byte) current_ypos#0 )
  to:play_move_down::@return
play_move_down::@return: scope:[play_move_down]  from play_move_down::@4 play_move_down::@7
  [207] (byte) current_piece_char#1 ← phi( play_move_down::@4/(byte) current_piece_char#15 play_move_down::@7/(byte) current_piece_char#20 )
  [207] (byte) current_xpos#1 ← phi( play_move_down::@4/(byte) current_xpos#10 play_move_down::@7/(byte) current_xpos#33 )
  [207] (byte*) current_piece_gfx#1 ← phi( play_move_down::@4/(byte*) current_piece_gfx#20 play_move_down::@7/(byte*) current_piece_gfx#26 )
  [207] (byte) current_orientation#14 ← phi( play_move_down::@4/(byte) current_orientation#10 play_move_down::@7/(byte) current_orientation#29 )
  [207] (byte*) current_piece#10 ← phi( play_move_down::@4/(byte*) current_piece#16 play_move_down::@7/(byte*) current_piece#20 )
  [207] (byte) current_ypos#13 ← phi( play_move_down::@4/(byte) current_ypos#21 play_move_down::@7/(byte) current_ypos#29 )
  [207] (byte) current_movedown_counter#10 ← phi( play_move_down::@4/(byte) current_movedown_counter#1 play_move_down::@7/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [207] (byte) play_move_down::return#2 ← phi( play_move_down::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 play_move_down::@7/(byte/signed byte/word/signed word/dword/signed dword) 1 )
  [208] return 
  to:@return
play_move_down::@6: scope:[play_move_down]  from play_move_down::@18
  [209] (byte) current_ypos#0 ← ++ (byte) current_ypos#21
  to:play_move_down::@7
play_spawn_current: scope:[play_spawn_current]  from main::@19 play_move_down::@20
  [210] phi()
  to:play_spawn_current::@1
play_spawn_current::@1: scope:[play_spawn_current]  from play_spawn_current play_spawn_current::@7
  [211] (byte) play_spawn_current::piece_idx#2 ← phi( play_spawn_current/(byte/signed byte/word/signed word/dword/signed dword) 7 play_spawn_current::@7/(byte) play_spawn_current::piece_idx#1 )
  [212] if((byte) play_spawn_current::piece_idx#2==(byte/signed byte/word/signed word/dword/signed dword) 7) goto play_spawn_current::@2
  to:play_spawn_current::@3
play_spawn_current::@3: scope:[play_spawn_current]  from play_spawn_current::@1
  [213] (byte~) play_spawn_current::$3 ← (byte) play_spawn_current::piece_idx#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [214] (byte*) current_piece_gfx#16 ← (byte*)*((const word[]) PIECES#0 + (byte~) play_spawn_current::$3) + (byte/signed byte/word/signed word/dword/signed dword) 0
  [215] (byte) current_xpos#23 ← *((const byte[]) PIECES_START_X#0 + (byte) play_spawn_current::piece_idx#2)
  [216] (byte) current_ypos#18 ← *((const byte[]) PIECES_START_Y#0 + (byte) play_spawn_current::piece_idx#2)
  [217] (byte) current_piece_char#12 ← *((const byte[]) PIECES_CHARS#0 + (byte) play_spawn_current::piece_idx#2)
  to:play_spawn_current::@return
play_spawn_current::@return: scope:[play_spawn_current]  from play_spawn_current::@3
  [218] return 
  to:@return
play_spawn_current::@2: scope:[play_spawn_current]  from play_spawn_current::@1
  [219] phi()
  [220] call sid_rnd 
  [221] (byte) sid_rnd::return#2 ← (byte) sid_rnd::return#0
  to:play_spawn_current::@7
play_spawn_current::@7: scope:[play_spawn_current]  from play_spawn_current::@2
  [222] (byte~) play_spawn_current::$1 ← (byte) sid_rnd::return#2
  [223] (byte) play_spawn_current::piece_idx#1 ← (byte~) play_spawn_current::$1 & (byte/signed byte/word/signed word/dword/signed dword) 7
  to:play_spawn_current::@1
sid_rnd: scope:[sid_rnd]  from play_spawn_current::@2
  [224] (byte) sid_rnd::return#0 ← *((const byte*) SID_VOICE3_OSC#0)
  to:sid_rnd::@return
sid_rnd::@return: scope:[sid_rnd]  from sid_rnd
  [225] return 
  to:@return
play_remove_lines: scope:[play_remove_lines]  from play_move_down::@19
  [226] phi()
  to:play_remove_lines::@1
play_remove_lines::@1: scope:[play_remove_lines]  from play_remove_lines play_remove_lines::@4
  [227] (byte) play_remove_lines::y#8 ← phi( play_remove_lines/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@4/(byte) play_remove_lines::y#1 )
  [227] (byte) play_remove_lines::w#12 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@4/(byte) play_remove_lines::w#11 )
  [227] (byte) play_remove_lines::r#3 ← phi( play_remove_lines/(const byte) PLAYFIELD_LINES#0*(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@4/(byte) play_remove_lines::r#1 )
  to:play_remove_lines::@2
play_remove_lines::@2: scope:[play_remove_lines]  from play_remove_lines::@1 play_remove_lines::@3
  [228] (byte) play_remove_lines::full#4 ← phi( play_remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 1 play_remove_lines::@3/(byte) play_remove_lines::full#2 )
  [228] (byte) play_remove_lines::x#2 ← phi( play_remove_lines::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_remove_lines::@3/(byte) play_remove_lines::x#1 )
  [228] (byte) play_remove_lines::w#4 ← phi( play_remove_lines::@1/(byte) play_remove_lines::w#12 play_remove_lines::@3/(byte) play_remove_lines::w#1 )
  [228] (byte) play_remove_lines::r#2 ← phi( play_remove_lines::@1/(byte) play_remove_lines::r#3 play_remove_lines::@3/(byte) play_remove_lines::r#1 )
  [229] (byte) play_remove_lines::c#0 ← *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::r#2)
  [230] (byte) play_remove_lines::r#1 ← -- (byte) play_remove_lines::r#2
  [231] if((byte) play_remove_lines::c#0!=(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_remove_lines::@17
  to:play_remove_lines::@3
play_remove_lines::@3: scope:[play_remove_lines]  from play_remove_lines::@17 play_remove_lines::@2
  [232] (byte) play_remove_lines::full#2 ← phi( play_remove_lines::@17/(byte) play_remove_lines::full#4 play_remove_lines::@2/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [233] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#4) ← (byte) play_remove_lines::c#0
  [234] (byte) play_remove_lines::w#1 ← -- (byte) play_remove_lines::w#4
  [235] (byte) play_remove_lines::x#1 ← ++ (byte) play_remove_lines::x#2
  [236] if((byte) play_remove_lines::x#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@2
  to:play_remove_lines::@9
play_remove_lines::@9: scope:[play_remove_lines]  from play_remove_lines::@3
  [237] if((byte) play_remove_lines::full#2!=(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@4
  to:play_remove_lines::@10
play_remove_lines::@10: scope:[play_remove_lines]  from play_remove_lines::@9
  [238] (byte) play_remove_lines::w#2 ← (byte) play_remove_lines::w#1 + (const byte) PLAYFIELD_COLS#0
  to:play_remove_lines::@4
play_remove_lines::@4: scope:[play_remove_lines]  from play_remove_lines::@10 play_remove_lines::@9
  [239] (byte) play_remove_lines::w#11 ← phi( play_remove_lines::@10/(byte) play_remove_lines::w#2 play_remove_lines::@9/(byte) play_remove_lines::w#1 )
  [240] (byte) play_remove_lines::y#1 ← ++ (byte) play_remove_lines::y#8
  [241] if((byte) play_remove_lines::y#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_remove_lines::@1
  to:play_remove_lines::@5
play_remove_lines::@5: scope:[play_remove_lines]  from play_remove_lines::@4 play_remove_lines::@6
  [242] (byte) play_remove_lines::w#6 ← phi( play_remove_lines::@4/(byte) play_remove_lines::w#11 play_remove_lines::@6/(byte) play_remove_lines::w#3 )
  [243] if((byte) play_remove_lines::w#6!=(byte/word/signed word/dword/signed dword) 255) goto play_remove_lines::@6
  to:play_remove_lines::@return
play_remove_lines::@return: scope:[play_remove_lines]  from play_remove_lines::@5
  [244] return 
  to:@return
play_remove_lines::@6: scope:[play_remove_lines]  from play_remove_lines::@5
  [245] *((const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 + (byte) play_remove_lines::w#6) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [246] (byte) play_remove_lines::w#3 ← -- (byte) play_remove_lines::w#6
  to:play_remove_lines::@5
play_remove_lines::@17: scope:[play_remove_lines]  from play_remove_lines::@2
  [247] phi()
  to:play_remove_lines::@3
play_lock_current: scope:[play_lock_current]  from play_move_down::@13
  [248] (byte) play_lock_current::ypos2#0 ← (byte) current_ypos#21 << (byte/signed byte/word/signed word/dword/signed dword) 1
  to:play_lock_current::@1
play_lock_current::@1: scope:[play_lock_current]  from play_lock_current play_lock_current::@7
  [249] (byte) play_lock_current::l#6 ← phi( play_lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@7/(byte) play_lock_current::l#1 )
  [249] (byte) play_lock_current::i#3 ← phi( play_lock_current/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@7/(byte~) play_lock_current::i#7 )
  [249] (byte) play_lock_current::ypos2#2 ← phi( play_lock_current/(byte) play_lock_current::ypos2#0 play_lock_current::@7/(byte) play_lock_current::ypos2#1 )
  [250] (byte*) play_lock_current::playfield_line#0 ← *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte) play_lock_current::ypos2#2)
  [251] (byte) play_lock_current::col#0 ← (byte) current_xpos#10
  to:play_lock_current::@2
play_lock_current::@2: scope:[play_lock_current]  from play_lock_current::@1 play_lock_current::@8
  [252] (byte) play_lock_current::c#2 ← phi( play_lock_current::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 play_lock_current::@8/(byte) play_lock_current::c#1 )
  [252] (byte) play_lock_current::col#2 ← phi( play_lock_current::@1/(byte) play_lock_current::col#0 play_lock_current::@8/(byte) play_lock_current::col#1 )
  [252] (byte) play_lock_current::i#2 ← phi( play_lock_current::@1/(byte) play_lock_current::i#3 play_lock_current::@8/(byte~) play_lock_current::i#9 )
  [253] (byte) play_lock_current::i#1 ← ++ (byte) play_lock_current::i#2
  [254] if(*((byte*) current_piece_gfx#20 + (byte) play_lock_current::i#2)==(byte/signed byte/word/signed word/dword/signed dword) 0) goto play_lock_current::@3
  to:play_lock_current::@4
play_lock_current::@4: scope:[play_lock_current]  from play_lock_current::@2
  [255] *((byte*) play_lock_current::playfield_line#0 + (byte) play_lock_current::col#2) ← (byte) current_piece_char#15
  to:play_lock_current::@3
play_lock_current::@3: scope:[play_lock_current]  from play_lock_current::@2 play_lock_current::@4
  [256] (byte) play_lock_current::col#1 ← ++ (byte) play_lock_current::col#2
  [257] (byte) play_lock_current::c#1 ← ++ (byte) play_lock_current::c#2
  [258] if((byte) play_lock_current::c#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@8
  to:play_lock_current::@5
play_lock_current::@5: scope:[play_lock_current]  from play_lock_current::@3
  [259] (byte) play_lock_current::ypos2#1 ← (byte) play_lock_current::ypos2#2 + (byte/signed byte/word/signed word/dword/signed dword) 2
  [260] (byte) play_lock_current::l#1 ← ++ (byte) play_lock_current::l#6
  [261] if((byte) play_lock_current::l#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto play_lock_current::@7
  to:play_lock_current::@return
play_lock_current::@return: scope:[play_lock_current]  from play_lock_current::@5
  [262] return 
  to:@return
play_lock_current::@7: scope:[play_lock_current]  from play_lock_current::@5
  [263] (byte~) play_lock_current::i#7 ← (byte) play_lock_current::i#1
  to:play_lock_current::@1
play_lock_current::@8: scope:[play_lock_current]  from play_lock_current::@3
  [264] (byte~) play_lock_current::i#9 ← (byte) play_lock_current::i#1
  to:play_lock_current::@2
keyboard_event_pressed: scope:[keyboard_event_pressed]  from keyboard_event_scan::@10 keyboard_event_scan::@11 keyboard_event_scan::@20 keyboard_event_scan::@9 play_move_down::@1
  [265] (byte) keyboard_event_pressed::keycode#5 ← phi( keyboard_event_scan::@10/(const byte) KEY_CTRL#0 keyboard_event_scan::@11/(const byte) KEY_COMMODORE#0 keyboard_event_scan::@20/(const byte) KEY_LSHIFT#0 keyboard_event_scan::@9/(const byte) KEY_RSHIFT#0 play_move_down::@1/(const byte) KEY_SPACE#0 )
  [266] (byte~) keyboard_event_pressed::$0 ← (byte) keyboard_event_pressed::keycode#5 >> (byte/signed byte/word/signed word/dword/signed dword) 3
  [267] (byte) keyboard_event_pressed::row_bits#0 ← *((const byte[8]) keyboard_scan_values#0 + (byte~) keyboard_event_pressed::$0)
  [268] (byte~) keyboard_event_pressed::$1 ← (byte) keyboard_event_pressed::keycode#5 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [269] (byte) keyboard_event_pressed::return#11 ← (byte) keyboard_event_pressed::row_bits#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte~) keyboard_event_pressed::$1)
  to:keyboard_event_pressed::@return
keyboard_event_pressed::@return: scope:[keyboard_event_pressed]  from keyboard_event_pressed
  [270] return 
  to:@return
keyboard_event_get: scope:[keyboard_event_get]  from main::@24
  [271] if((byte) keyboard_events_size#13==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_get::@return
  to:keyboard_event_get::@3
keyboard_event_get::@3: scope:[keyboard_event_get]  from keyboard_event_get
  [272] (byte) keyboard_events_size#4 ← -- (byte) keyboard_events_size#13
  [273] (byte) keyboard_event_get::return#1 ← *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#4)
  to:keyboard_event_get::@return
keyboard_event_get::@return: scope:[keyboard_event_get]  from keyboard_event_get keyboard_event_get::@3
  [274] (byte) keyboard_events_size#16 ← phi( keyboard_event_get/(byte) keyboard_events_size#13 keyboard_event_get::@3/(byte) keyboard_events_size#4 )
  [274] (byte) keyboard_event_get::return#2 ← phi( keyboard_event_get/(byte/word/signed word/dword/signed dword) 255 keyboard_event_get::@3/(byte) keyboard_event_get::return#1 )
  [275] return 
  to:@return
keyboard_event_scan: scope:[keyboard_event_scan]  from main::@23
  [276] phi()
  to:keyboard_event_scan::@1
keyboard_event_scan::@1: scope:[keyboard_event_scan]  from keyboard_event_scan keyboard_event_scan::@3
  [277] (byte) keyboard_events_size#29 ← phi( keyboard_event_scan/(byte) keyboard_events_size#19 keyboard_event_scan::@3/(byte) keyboard_events_size#13 )
  [277] (byte) keyboard_event_scan::keycode#11 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@3/(byte) keyboard_event_scan::keycode#14 )
  [277] (byte) keyboard_event_scan::row#2 ← phi( keyboard_event_scan/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@3/(byte) keyboard_event_scan::row#1 )
  [278] (byte) keyboard_matrix_read::rowid#0 ← (byte) keyboard_event_scan::row#2
  [279] call keyboard_matrix_read 
  [280] (byte) keyboard_matrix_read::return#2 ← (byte) keyboard_matrix_read::return#0
  to:keyboard_event_scan::@25
keyboard_event_scan::@25: scope:[keyboard_event_scan]  from keyboard_event_scan::@1
  [281] (byte) keyboard_event_scan::row_scan#0 ← (byte) keyboard_matrix_read::return#2
  [282] if((byte) keyboard_event_scan::row_scan#0!=*((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@13
keyboard_event_scan::@13: scope:[keyboard_event_scan]  from keyboard_event_scan::@25
  [283] (byte) keyboard_event_scan::keycode#1 ← (byte) keyboard_event_scan::keycode#11 + (byte/signed byte/word/signed word/dword/signed dword) 8
  to:keyboard_event_scan::@3
keyboard_event_scan::@3: scope:[keyboard_event_scan]  from keyboard_event_scan::@13 keyboard_event_scan::@19
  [284] (byte) keyboard_events_size#13 ← phi( keyboard_event_scan::@13/(byte) keyboard_events_size#29 keyboard_event_scan::@19/(byte) keyboard_events_size#30 )
  [284] (byte) keyboard_event_scan::keycode#14 ← phi( keyboard_event_scan::@13/(byte) keyboard_event_scan::keycode#1 keyboard_event_scan::@19/(byte) keyboard_event_scan::keycode#15 )
  [285] (byte) keyboard_event_scan::row#1 ← ++ (byte) keyboard_event_scan::row#2
  [286] if((byte) keyboard_event_scan::row#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@1
  to:keyboard_event_scan::@20
keyboard_event_scan::@20: scope:[keyboard_event_scan]  from keyboard_event_scan::@3
  [287] phi()
  [288] call keyboard_event_pressed 
  [289] (byte) keyboard_event_pressed::return#0 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@26
keyboard_event_scan::@26: scope:[keyboard_event_scan]  from keyboard_event_scan::@20
  [290] (byte~) keyboard_event_scan::$14 ← (byte) keyboard_event_pressed::return#0
  [291] if((byte~) keyboard_event_scan::$14==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@9
  to:keyboard_event_scan::@21
keyboard_event_scan::@21: scope:[keyboard_event_scan]  from keyboard_event_scan::@26
  [292] phi()
  to:keyboard_event_scan::@9
keyboard_event_scan::@9: scope:[keyboard_event_scan]  from keyboard_event_scan::@21 keyboard_event_scan::@26
  [293] (byte) keyboard_modifiers#11 ← phi( keyboard_event_scan::@21/(byte/signed byte/word/signed word/dword/signed dword) 0|(const byte) KEY_MODIFIER_LSHIFT#0 keyboard_event_scan::@26/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [294] call keyboard_event_pressed 
  [295] (byte) keyboard_event_pressed::return#1 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@27
keyboard_event_scan::@27: scope:[keyboard_event_scan]  from keyboard_event_scan::@9
  [296] (byte~) keyboard_event_scan::$18 ← (byte) keyboard_event_pressed::return#1
  [297] if((byte~) keyboard_event_scan::$18==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@10
  to:keyboard_event_scan::@22
keyboard_event_scan::@22: scope:[keyboard_event_scan]  from keyboard_event_scan::@27
  [298] (byte) keyboard_modifiers#3 ← (byte) keyboard_modifiers#11 | (const byte) KEY_MODIFIER_RSHIFT#0
  to:keyboard_event_scan::@10
keyboard_event_scan::@10: scope:[keyboard_event_scan]  from keyboard_event_scan::@22 keyboard_event_scan::@27
  [299] (byte) keyboard_modifiers#12 ← phi( keyboard_event_scan::@22/(byte) keyboard_modifiers#3 keyboard_event_scan::@27/(byte) keyboard_modifiers#11 )
  [300] call keyboard_event_pressed 
  [301] (byte) keyboard_event_pressed::return#2 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@28
keyboard_event_scan::@28: scope:[keyboard_event_scan]  from keyboard_event_scan::@10
  [302] (byte~) keyboard_event_scan::$22 ← (byte) keyboard_event_pressed::return#2
  [303] if((byte~) keyboard_event_scan::$22==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@11
  to:keyboard_event_scan::@23
keyboard_event_scan::@23: scope:[keyboard_event_scan]  from keyboard_event_scan::@28
  [304] (byte) keyboard_modifiers#4 ← (byte) keyboard_modifiers#12 | (const byte) KEY_MODIFIER_CTRL#0
  to:keyboard_event_scan::@11
keyboard_event_scan::@11: scope:[keyboard_event_scan]  from keyboard_event_scan::@23 keyboard_event_scan::@28
  [305] (byte) keyboard_modifiers#13 ← phi( keyboard_event_scan::@23/(byte) keyboard_modifiers#4 keyboard_event_scan::@28/(byte) keyboard_modifiers#12 )
  [306] call keyboard_event_pressed 
  [307] (byte) keyboard_event_pressed::return#10 ← (byte) keyboard_event_pressed::return#11
  to:keyboard_event_scan::@29
keyboard_event_scan::@29: scope:[keyboard_event_scan]  from keyboard_event_scan::@11
  [308] (byte~) keyboard_event_scan::$26 ← (byte) keyboard_event_pressed::return#10
  [309] if((byte~) keyboard_event_scan::$26==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@return
  to:keyboard_event_scan::@24
keyboard_event_scan::@24: scope:[keyboard_event_scan]  from keyboard_event_scan::@29
  [310] (byte) keyboard_modifiers#5 ← (byte) keyboard_modifiers#13 | (const byte) KEY_MODIFIER_COMMODORE#0
  to:keyboard_event_scan::@return
keyboard_event_scan::@return: scope:[keyboard_event_scan]  from keyboard_event_scan::@24 keyboard_event_scan::@29
  [311] return 
  to:@return
keyboard_event_scan::@4: scope:[keyboard_event_scan]  from keyboard_event_scan::@25 keyboard_event_scan::@5
  [312] (byte) keyboard_events_size#10 ← phi( keyboard_event_scan::@25/(byte) keyboard_events_size#29 keyboard_event_scan::@5/(byte) keyboard_events_size#30 )
  [312] (byte) keyboard_event_scan::keycode#10 ← phi( keyboard_event_scan::@25/(byte) keyboard_event_scan::keycode#11 keyboard_event_scan::@5/(byte) keyboard_event_scan::keycode#15 )
  [312] (byte) keyboard_event_scan::col#2 ← phi( keyboard_event_scan::@25/(byte/signed byte/word/signed word/dword/signed dword) 0 keyboard_event_scan::@5/(byte) keyboard_event_scan::col#1 )
  [313] (byte~) keyboard_event_scan::$3 ← (byte) keyboard_event_scan::row_scan#0 ^ *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2)
  [314] (byte~) keyboard_event_scan::$4 ← (byte~) keyboard_event_scan::$3 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [315] if((byte~) keyboard_event_scan::$4==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@15
keyboard_event_scan::@15: scope:[keyboard_event_scan]  from keyboard_event_scan::@4
  [316] if((byte) keyboard_events_size#10==(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@5
  to:keyboard_event_scan::@16
keyboard_event_scan::@16: scope:[keyboard_event_scan]  from keyboard_event_scan::@15
  [317] (byte) keyboard_event_scan::event_type#0 ← (byte) keyboard_event_scan::row_scan#0 & *((const byte[8]) keyboard_matrix_col_bitmask#0 + (byte) keyboard_event_scan::col#2)
  [318] if((byte) keyboard_event_scan::event_type#0==(byte/signed byte/word/signed word/dword/signed dword) 0) goto keyboard_event_scan::@7
  to:keyboard_event_scan::@17
keyboard_event_scan::@17: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  [319] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte) keyboard_event_scan::keycode#10
  [320] (byte) keyboard_events_size#2 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@5
keyboard_event_scan::@5: scope:[keyboard_event_scan]  from keyboard_event_scan::@15 keyboard_event_scan::@17 keyboard_event_scan::@4 keyboard_event_scan::@7
  [321] (byte) keyboard_events_size#30 ← phi( keyboard_event_scan::@17/(byte) keyboard_events_size#2 keyboard_event_scan::@4/(byte) keyboard_events_size#10 keyboard_event_scan::@15/(byte) keyboard_events_size#10 keyboard_event_scan::@7/(byte) keyboard_events_size#1 )
  [322] (byte) keyboard_event_scan::keycode#15 ← ++ (byte) keyboard_event_scan::keycode#10
  [323] (byte) keyboard_event_scan::col#1 ← ++ (byte) keyboard_event_scan::col#2
  [324] if((byte) keyboard_event_scan::col#1!=(byte/signed byte/word/signed word/dword/signed dword) 8) goto keyboard_event_scan::@4
  to:keyboard_event_scan::@19
keyboard_event_scan::@19: scope:[keyboard_event_scan]  from keyboard_event_scan::@5
  [325] *((const byte[8]) keyboard_scan_values#0 + (byte) keyboard_event_scan::row#2) ← (byte) keyboard_event_scan::row_scan#0
  to:keyboard_event_scan::@3
keyboard_event_scan::@7: scope:[keyboard_event_scan]  from keyboard_event_scan::@16
  [326] (byte/word/dword~) keyboard_event_scan::$11 ← (byte) keyboard_event_scan::keycode#10 | (byte/signed byte/word/signed word/dword/signed dword) 64
  [327] *((const byte[8]) keyboard_events#0 + (byte) keyboard_events_size#10) ← (byte/word/dword~) keyboard_event_scan::$11
  [328] (byte) keyboard_events_size#1 ← ++ (byte) keyboard_events_size#10
  to:keyboard_event_scan::@5
keyboard_matrix_read: scope:[keyboard_matrix_read]  from keyboard_event_scan::@1
  [329] *((const byte*) CIA1_PORT_A#0) ← *((const byte[8]) keyboard_matrix_row_bitmask#0 + (byte) keyboard_matrix_read::rowid#0)
  [330] (byte) keyboard_matrix_read::return#0 ← ~ *((const byte*) CIA1_PORT_B#0)
  to:keyboard_matrix_read::@return
keyboard_matrix_read::@return: scope:[keyboard_matrix_read]  from keyboard_matrix_read
  [331] return 
  to:@return
render_show: scope:[render_show]  from main::@6
  [332] if((byte) render_screen_show#15==(byte/signed byte/word/signed word/dword/signed dword) 0) goto render_show::toD0181
  to:render_show::toD0182
render_show::toD0182: scope:[render_show]  from render_show
  [333] phi()
  to:render_show::@2
render_show::@2: scope:[render_show]  from render_show::toD0181 render_show::toD0182
  [334] (byte) render_show::d018val#3 ← phi( render_show::toD0181/(const byte) render_show::toD0181_return#0 render_show::toD0182/(const byte) render_show::toD0182_return#0 )
  [335] *((const byte*) D018#0) ← (byte) render_show::d018val#3
  to:render_show::@return
render_show::@return: scope:[render_show]  from render_show::@2
  [336] return 
  to:@return
render_show::toD0181: scope:[render_show]  from render_show
  [337] phi()
  to:render_show::@2
play_init: scope:[play_init]  from main::@18
  [338] phi()
  to:play_init::@1
play_init::@1: scope:[play_init]  from play_init play_init::@1
  [339] (byte) play_init::idx#2 ← phi( play_init/(byte/signed byte/word/signed word/dword/signed dword) 0 play_init::@1/(byte) play_init::idx#1 )
  [339] (byte*) play_init::pli#2 ← phi( play_init/(const byte[PLAYFIELD_LINES#0*PLAYFIELD_COLS#0]) playfield#0 play_init::@1/(byte*) play_init::pli#1 )
  [339] (byte) play_init::j#2 ← phi( play_init/(byte/signed byte/word/signed word/dword/signed dword) 0 play_init::@1/(byte) play_init::j#1 )
  [340] (byte~) play_init::$1 ← (byte) play_init::j#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [341] *((const byte*[PLAYFIELD_LINES#0]) playfield_lines#0 + (byte~) play_init::$1) ← (byte*) play_init::pli#2
  [342] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0 + (byte) play_init::j#2) ← (byte) play_init::idx#2
  [343] (byte*) play_init::pli#1 ← (byte*) play_init::pli#2 + (const byte) PLAYFIELD_COLS#0
  [344] (byte) play_init::idx#1 ← (byte) play_init::idx#2 + (const byte) PLAYFIELD_COLS#0
  [345] (byte) play_init::j#1 ← ++ (byte) play_init::j#2
  [346] if((byte) play_init::j#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto play_init::@1
  to:play_init::@2
play_init::@2: scope:[play_init]  from play_init::@1
  [347] *((const byte[PLAYFIELD_LINES#0+1]) playfield_lines_idx#0+(const byte) PLAYFIELD_LINES#0) ← (const byte) PLAYFIELD_COLS#0*(const byte) PLAYFIELD_LINES#0
  to:play_init::@return
play_init::@return: scope:[play_init]  from play_init::@2
  [348] return 
  to:@return
sprites_irq_init: scope:[sprites_irq_init]  from main::@17
  asm { sei  }
  [350] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  asm { ldaCIA1_INTERRUPT  }
  [352] *((const byte*) PROCPORT_DDR#0) ← (const byte) PROCPORT_DDR_MEMORY_MASK#0
  [353] *((const byte*) PROCPORT#0) ← (const byte) PROCPORT_RAM_IO#0
  [354] *((const byte*) CIA1_INTERRUPT#0) ← (const byte) CIA_INTERRUPT_CLEAR#0
  [355] *((const byte*) VIC_CONTROL#0) ← *((const byte*) VIC_CONTROL#0) & (byte/signed byte/word/signed word/dword/signed dword) 127
  [356] *((const byte*) RASTER#0) ← (const byte) IRQ_RASTER_FIRST#0
  [357] *((const byte*) IRQ_ENABLE#0) ← (const byte) IRQ_RASTER#0
  [358] *((const void()**) HARDWARE_IRQ#0) ← &interrupt(HARDWARE_CLOBBER)(void()) irq()
  asm { cli  }
  to:sprites_irq_init::@return
sprites_irq_init::@return: scope:[sprites_irq_init]  from sprites_irq_init
  [360] return 
  to:@return
sprites_init: scope:[sprites_init]  from main::@16
  [361] *((const byte*) SPRITES_ENABLE#0) ← (byte/signed byte/word/signed word/dword/signed dword) 15
  [362] *((const byte*) SPRITES_MC#0) ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [363] *((const byte*) SPRITES_EXPAND_Y#0) ← *((const byte*) SPRITES_MC#0)
  [364] *((const byte*) SPRITES_EXPAND_X#0) ← *((const byte*) SPRITES_EXPAND_Y#0)
  to:sprites_init::@1
sprites_init::@1: scope:[sprites_init]  from sprites_init sprites_init::@1
  [365] (byte) sprites_init::xpos#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 24+(byte/signed byte/word/signed word/dword/signed dword) 15*(byte/signed byte/word/signed word/dword/signed dword) 8 sprites_init::@1/(byte) sprites_init::xpos#1 )
  [365] (byte) sprites_init::s#2 ← phi( sprites_init/(byte/signed byte/word/signed word/dword/signed dword) 0 sprites_init::@1/(byte) sprites_init::s#1 )
  [366] (byte) sprites_init::s2#0 ← (byte) sprites_init::s#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [367] *((const byte*) SPRITES_XPOS#0 + (byte) sprites_init::s2#0) ← (byte) sprites_init::xpos#2
  [368] *((const byte*) SPRITES_COLS#0 + (byte) sprites_init::s#2) ← (const byte) BLACK#0
  [369] (byte) sprites_init::xpos#1 ← (byte) sprites_init::xpos#2 + (byte/signed byte/word/signed word/dword/signed dword) 24
  [370] (byte) sprites_init::s#1 ← ++ (byte) sprites_init::s#2
  [371] if((byte) sprites_init::s#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto sprites_init::@1
  to:sprites_init::@return
sprites_init::@return: scope:[sprites_init]  from sprites_init::@1
  [372] return 
  to:@return
render_init: scope:[render_init]  from main::@15
  [373] phi()
  to:render_init::vicSelectGfxBank1
render_init::vicSelectGfxBank1: scope:[render_init]  from render_init
  [374] *((const byte*) CIA2_PORT_A_DDR#0) ← (byte/signed byte/word/signed word/dword/signed dword) 3
  to:render_init::vicSelectGfxBank1_toDd001
render_init::vicSelectGfxBank1_toDd001: scope:[render_init]  from render_init::vicSelectGfxBank1
  [375] phi()
  to:render_init::vicSelectGfxBank1_@1
render_init::vicSelectGfxBank1_@1: scope:[render_init]  from render_init::vicSelectGfxBank1_toDd001
  [376] *((const byte*) CIA2_PORT_A#0) ← (const byte) render_init::vicSelectGfxBank1_toDd001_return#0
  to:render_init::@7
render_init::@7: scope:[render_init]  from render_init::vicSelectGfxBank1_@1
  [377] *((const byte*) D011#0) ← (const byte) VIC_ECM#0|(const byte) VIC_DEN#0|(const byte) VIC_RSEL#0|(byte/signed byte/word/signed word/dword/signed dword) 3
  [378] *((const byte*) BGCOL1#0) ← (const byte) BLACK#0
  [379] *((const byte*) BGCOL2#0) ← (const byte) BLUE#0
  [380] *((const byte*) BGCOL3#0) ← (const byte) CYAN#0
  [381] *((const byte*) BGCOL4#0) ← (const byte) GREY#0
  [382] call render_screen_original 
  to:render_init::@8
render_init::@8: scope:[render_init]  from render_init::@7
  [383] phi()
  [384] call render_screen_original 
  to:render_init::@9
render_init::@9: scope:[render_init]  from render_init::@8
  [385] phi()
  [386] call fill 
  to:render_init::@1
render_init::@1: scope:[render_init]  from render_init::@4 render_init::@9
  [387] (byte) render_init::l#4 ← phi( render_init::@9/(byte/signed byte/word/signed word/dword/signed dword) 2 render_init::@4/(byte) render_init::l#1 )
  [387] (byte*) render_init::line#4 ← phi( render_init::@9/(const byte*) COLS#0+(byte/signed byte/word/signed word/dword/signed dword) 4*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 render_init::@4/(byte*) render_init::line#1 )
  to:render_init::@2
render_init::@2: scope:[render_init]  from render_init::@1 render_init::@2
  [388] (byte) render_init::c#2 ← phi( render_init::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_init::@2/(byte) render_init::c#1 )
  [389] (byte*~) render_init::$12 ← (byte*) render_init::line#4 + (byte) render_init::c#2
  [390] *((byte*~) render_init::$12) ← (const byte) WHITE#0
  [391] (byte) render_init::c#1 ← ++ (byte) render_init::c#2
  [392] if((byte) render_init::c#1!=(const byte) PLAYFIELD_COLS#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@2
  to:render_init::@4
render_init::@4: scope:[render_init]  from render_init::@2
  [393] (byte*) render_init::line#1 ← (byte*) render_init::line#4 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [394] (byte) render_init::l#1 ← ++ (byte) render_init::l#4
  [395] if((byte) render_init::l#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@1
  to:render_init::@3
render_init::@3: scope:[render_init]  from render_init::@3 render_init::@4
  [396] (byte*) render_init::li_2#2 ← phi( render_init::@3/(byte*) render_init::li_2#1 render_init::@4/(const byte*) PLAYFIELD_SCREEN_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 )
  [396] (byte*) render_init::li_1#2 ← phi( render_init::@3/(byte*) render_init::li_1#1 render_init::@4/(const byte*) PLAYFIELD_SCREEN_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2*(byte/signed byte/word/signed word/dword/signed dword) 40+(byte/signed byte/word/signed word/dword/signed dword) 16 )
  [396] (byte) render_init::i#2 ← phi( render_init::@3/(byte) render_init::i#1 render_init::@4/(byte/signed byte/word/signed word/dword/signed dword) 0 )
  [397] (byte~) render_init::$22 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [398] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_1#0 + (byte~) render_init::$22) ← (byte*) render_init::li_1#2
  [399] (byte~) render_init::$23 ← (byte) render_init::i#2 << (byte/signed byte/word/signed word/dword/signed dword) 1
  [400] *((const byte*[PLAYFIELD_LINES#0]) screen_lines_2#0 + (byte~) render_init::$23) ← (byte*) render_init::li_2#2
  [401] (byte*) render_init::li_1#1 ← (byte*) render_init::li_1#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [402] (byte*) render_init::li_2#1 ← (byte*) render_init::li_2#2 + (byte/signed byte/word/signed word/dword/signed dword) 40
  [403] (byte) render_init::i#1 ← ++ (byte) render_init::i#2
  [404] if((byte) render_init::i#1!=(const byte) PLAYFIELD_LINES#0-(byte/signed byte/word/signed word/dword/signed dword) 1+(byte/signed byte/word/signed word/dword/signed dword) 1) goto render_init::@3
  to:render_init::@return
render_init::@return: scope:[render_init]  from render_init::@3
  [405] return 
  to:@return
fill: scope:[fill]  from render_init::@9
  [406] phi()
  to:fill::@1
fill::@1: scope:[fill]  from fill fill::@1
  [407] (byte*) fill::addr#2 ← phi( fill/(const byte*) COLS#0 fill::@1/(byte*) fill::addr#1 )
  [408] *((byte*) fill::addr#2) ← (const byte) DARK_GREY#0
  [409] (byte*) fill::addr#1 ← ++ (byte*) fill::addr#2
  [410] if((byte*) fill::addr#1!=(const byte*) fill::end#0) goto fill::@1
  to:fill::@return
fill::@return: scope:[fill]  from fill::@1
  [411] return 
  to:@return
render_screen_original: scope:[render_screen_original]  from render_init::@7 render_init::@8
  [412] (byte*) render_screen_original::screen#11 ← phi( render_init::@7/(const byte*) PLAYFIELD_SCREEN_1#0 render_init::@8/(const byte*) PLAYFIELD_SCREEN_2#0 )
  to:render_screen_original::@1
render_screen_original::@1: scope:[render_screen_original]  from render_screen_original render_screen_original::@9
  [413] (byte) render_screen_original::y#8 ← phi( render_screen_original/(byte/signed byte/word/signed word/dword/signed dword) 0 render_screen_original::@9/(byte) render_screen_original::y#1 )
  [413] (byte*) render_screen_original::orig#5 ← phi( render_screen_original/(const byte*) PLAYFIELD_SCREEN_ORIGINAL#0+(byte/signed byte/word/signed word/dword/signed dword) 32*(byte/signed byte/word/signed word/dword/signed dword) 2 render_screen_original::@9/(byte*) render_screen_original::orig#1 )
  [413] (byte*) render_screen_original::screen#8 ← phi( render_screen_original/(byte*) render_screen_original::screen#11 render_screen_original::@9/(byte*) render_screen_original::screen#12 )
  to:render_screen_original::@2
render_screen_original::@2: scope:[render_screen_original]  from render_screen_original::@1 render_screen_original::@2
  [414] (byte) render_screen_original::x#4 ← phi( render_screen_original::@1/(byte/signed byte/word/signed word/dword/signed dword) 0 render_screen_original::@2/(byte) render_screen_original::x#1 )
  [414] (byte*) render_screen_original::screen#5 ← phi( render_screen_original::@1/(byte*) render_screen_original::screen#8 render_screen_original::@2/(byte*) render_screen_original::screen#2 )
  [415] *((byte*) render_screen_original::screen#5) ← (const byte) render_screen_original::SPACE#0
  [416] (byte*) render_screen_original::screen#2 ← ++ (byte*) render_screen_original::screen#5
  [417] (byte) render_screen_original::x#1 ← ++ (byte) render_screen_original::x#4
  [418] if((byte) render_screen_original::x#1!=(byte/signed byte/word/signed word/dword/signed dword) 4) goto render_screen_original::@2
  to:render_screen_original::@3
render_screen_original::@3: scope:[render_screen_original]  from render_screen_original::@2 render_screen_original::@4
  [419] (byte*) render_screen_original::screen#10 ← phi( render_screen_original::@2/(byte*) render_screen_original::screen#2 render_screen_original::@4/(byte*) render_screen_original::screen#3 )
  [419] (byte) render_screen_original::x#5 ← phi( render_screen_original::@2/(byte) render_screen_original::x#1 render_screen_original::@4/(byte) render_screen_original::x#2 )
  [419] (byte*) render_screen_original::orig#2 ← phi( render_screen_original::@2/(byte*) render_screen_original::orig#5 render_screen_original::@4/(byte*) render_screen_original::orig#1 )
  [420] (byte) render_screen_original::c#0 ← *((byte*) render_screen_original::orig#2) + (byte/signed byte/word/signed word/dword/signed dword) 1
  [421] (byte*) render_screen_original::orig#1 ← ++ (byte*) render_screen_original::orig#2
  [422] if((byte) render_screen_original::x#5>(byte/signed byte/word/signed word/dword/signed dword) 14) goto render_screen_original::@11
  to:render_screen_original::@4
render_screen_original::@4: scope:[render_screen_original]  from render_screen_original::@11 render_screen_original::@3 render_screen_original::@7
  [423] (byte) render_screen_original::c#2 ← phi( render_screen_original::@3/(byte) render_screen_original::c#0 render_screen_original::@7/(byte) render_screen_original::c#1 )
  [424] *((byte*) render_screen_original::screen#10) ← (byte) render_screen_original::c#2
  [425] (byte*) render_screen_original::screen#3 ← ++ (byte*) render_screen_original::screen#10
  [426] (byte) render_screen_original::x#2 ← ++ (byte) render_screen_original::x#5
  [427] if((byte) render_screen_original::x#2!=(byte/signed byte/word/signed word/dword/signed dword) 36) goto render_screen_original::@3
  to:render_screen_original::@5
render_screen_original::@5: scope:[render_screen_original]  from render_screen_original::@4 render_screen_original::@5
  [428] (byte) render_screen_original::x#7 ← phi( render_screen_original::@4/(byte) render_screen_original::x#2 render_screen_original::@5/(byte) render_screen_original::x#3 )
  [428] (byte*) render_screen_original::screen#7 ← phi( render_screen_original::@4/(byte*) render_screen_original::screen#3 render_screen_original::@5/(byte*) render_screen_original::screen#12 )
  [429] *((byte*) render_screen_original::screen#7) ← (const byte) render_screen_original::SPACE#0
  [430] (byte*) render_screen_original::screen#12 ← ++ (byte*) render_screen_original::screen#7
  [431] (byte) render_screen_original::x#3 ← ++ (byte) render_screen_original::x#7
  [432] if((byte) render_screen_original::x#3!=(byte/signed byte/word/signed word/dword/signed dword) 40) goto render_screen_original::@5
  to:render_screen_original::@9
render_screen_original::@9: scope:[render_screen_original]  from render_screen_original::@5
  [433] (byte) render_screen_original::y#1 ← ++ (byte) render_screen_original::y#8
  [434] if((byte) render_screen_original::y#1!=(byte/signed byte/word/signed word/dword/signed dword) 25) goto render_screen_original::@1
  to:render_screen_original::@return
render_screen_original::@return: scope:[render_screen_original]  from render_screen_original::@9
  [435] return 
  to:@return
render_screen_original::@11: scope:[render_screen_original]  from render_screen_original::@3
  [436] if((byte) render_screen_original::x#5<(byte/signed byte/word/signed word/dword/signed dword) 27) goto render_screen_original::@7
  to:render_screen_original::@4
render_screen_original::@7: scope:[render_screen_original]  from render_screen_original::@11
  [437] (byte) render_screen_original::c#1 ← (byte) render_screen_original::c#0 | (byte/word/signed word/dword/signed dword) 192
  to:render_screen_original::@4
sid_rnd_init: scope:[sid_rnd_init]  from main
  [438] *((const word*) SID_VOICE3_FREQ#0) ← (word/dword/signed dword) 65535
  [439] *((const byte*) SID_VOICE3_CONTROL#0) ← (const byte) SID_CONTROL_NOISE#0
  to:sid_rnd_init::@return
sid_rnd_init::@return: scope:[sid_rnd_init]  from sid_rnd_init
  [440] return 
  to:@return
irq: scope:[irq]  from
  [441] *((const byte*) BORDERCOL#0) ← (const byte) DARK_GREY#0
  [442] (byte) irq::ypos#0 ← (byte) irq_sprite_ypos#0
  [443] *((const byte*) SPRITES_YPOS#0) ← (byte) irq::ypos#0
  [444] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ypos#0
  [445] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 4) ← (byte) irq::ypos#0
  [446] *((const byte*) SPRITES_YPOS#0+(byte/signed byte/word/signed word/dword/signed dword) 6) ← (byte) irq::ypos#0
  to:irq::@1
irq::@1: scope:[irq]  from irq irq::@1
  [447] if(*((const byte*) RASTER#0)!=(byte) irq_sprite_ypos#0) goto irq::@1
  to:irq::@5
irq::@5: scope:[irq]  from irq::@1
  [448] (byte) irq::ptr#0 ← (byte) irq_sprite_ptr#0
  [449] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0) ← (byte) irq::ptr#0
  [450] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0) ← (byte) irq::ptr#0
  [451] (byte) irq::ptr#1 ← ++ (byte) irq::ptr#0
  [452] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1
  [453] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 1) ← (byte) irq::ptr#1
  [454] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1
  [455] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 2) ← (byte) irq::ptr#1
  [456] (byte) irq::ptr#2 ← ++ (byte) irq::ptr#1
  [457] *((const byte*) PLAYFIELD_SPRITE_PTRS_1#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2
  [458] *((const byte*) PLAYFIELD_SPRITE_PTRS_2#0+(byte/signed byte/word/signed word/dword/signed dword) 3) ← (byte) irq::ptr#2
  [459] (byte) irq_cnt#1 ← ++ (byte) irq_cnt#0
  [460] if((byte) irq_cnt#1==(byte/signed byte/word/signed word/dword/signed dword) 10) goto irq::@2
  to:irq::@6
irq::@6: scope:[irq]  from irq::@5
  [461] (byte) irq_raster_next#2 ← (byte) irq_raster_next#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [462] (byte) irq_sprite_ypos#2 ← (byte) irq_sprite_ypos#0 + (byte/signed byte/word/signed word/dword/signed dword) 21
  [463] (byte) irq_sprite_ptr#2 ← (byte) irq_sprite_ptr#0 + (byte/signed byte/word/signed word/dword/signed dword) 3
  to:irq::@3
irq::@3: scope:[irq]  from irq::@6 irq::@9
  [464] (byte) irq_raster_next#12 ← phi( irq::@6/(byte) irq_raster_next#2 irq::@9/(byte) irq_raster_next#1 )
  [465] (byte) irq::raster_next#0 ← (byte) irq_raster_next#12
  [466] (byte~) irq::$3 ← (byte) irq::raster_next#0 & (byte/signed byte/word/signed word/dword/signed dword) 7
  [467] if((byte~) irq::$3!=(byte/signed byte/word/signed word/dword/signed dword) 3) goto irq::@4
  to:irq::@8
irq::@8: scope:[irq]  from irq::@3
  [468] (byte) irq::raster_next#1 ← (byte) irq::raster_next#0 - (byte/signed byte/word/signed word/dword/signed dword) 1
  to:irq::@4
irq::@4: scope:[irq]  from irq::@3 irq::@8
  [469] (byte) irq::raster_next#2 ← phi( irq::@3/(byte) irq::raster_next#0 irq::@8/(byte) irq::raster_next#1 )
  [470] *((const byte*) RASTER#0) ← (byte) irq::raster_next#2
  [471] *((const byte*) IRQ_STATUS#0) ← (const byte) IRQ_RASTER#0
  [472] *((const byte*) BORDERCOL#0) ← (const byte) BLACK#0
  to:irq::@return
irq::@return: scope:[irq]  from irq::@4
  [473] return 
  to:@return
irq::@2: scope:[irq]  from irq::@5
  [474] (byte) irq_cnt#13 ← (byte/signed byte/word/signed word/dword/signed dword) 0
  [475] (byte) irq_raster_next#1 ← (const byte) IRQ_RASTER_FIRST#0
  [476] (byte) irq_sprite_ypos#1 ← (byte/signed byte/word/signed word/dword/signed dword) 50
  to:irq::toSpritePtr2
irq::toSpritePtr2: scope:[irq]  from irq::@2
  [477] phi()
  to:irq::@9
irq::@9: scope:[irq]  from irq::toSpritePtr2
  [478] (byte) irq_sprite_ptr#1 ← (const byte) irq::toSpritePtr2_return#0
  to:irq::@3
