// Allocates ZP to j/k-variables even though all of i, j, k could be allocates to x and be more efficient.
// Reason: Pass4RegisterUpliftCombinations.isAllocationOverlapping() believes i/j/k variables overlaps insode plot()
byte* SCREEN = $0400;

void main() {
    for(byte i : 0..10) {
       plot(i);
    }
   for(byte j : 0..10) {
       plot(j);
    }
   for(byte k : 0..10) {
       plot(k);
    }
}

void plot(byte x) {
    SCREEN[x] = '*';
}

PROGRAM
  (byte*) SCREEN ← (word) 1024
proc (void()) main()
  (byte) main::i ← (byte) 0
main::@1:
  (void~) main::$0 ← call plot (byte) main::i 
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte) 11
  if((boolean~) main::$1) goto main::@1
  (byte) main::j ← (byte) 0
main::@2:
  (void~) main::$2 ← call plot (byte) main::j 
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$3 ← (byte) main::j != (byte) 11
  if((boolean~) main::$3) goto main::@2
  (byte) main::k ← (byte) 0
main::@3:
  (void~) main::$4 ← call plot (byte) main::k 
  (byte) main::k ← ++ (byte) main::k
  (boolean~) main::$5 ← (byte) main::k != (byte) 11
  if((boolean~) main::$5) goto main::@3
main::@return:
  return 
endproc // main()
proc (void()) plot((byte) plot::x)
  *((byte*) SCREEN + (byte) plot::x) ← (byte) '*'
plot::@return:
  return 
endproc // plot()
  call main 

SYMBOLS
(byte*) SCREEN
(void()) main()
(void~) main::$0
(boolean~) main::$1
(void~) main::$2
(boolean~) main::$3
(void~) main::$4
(boolean~) main::$5
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@return
(byte) main::i
(byte) main::j
(byte) main::k
(void()) plot((byte) plot::x)
(label) plot::@return
(byte) plot::x

INITIAL CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@1
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$0 ← call plot (byte) main::i 
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@1
  (byte) main::j ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@4
  (void~) main::$2 ← call plot (byte) main::j 
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$3 ← (byte) main::j != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::k ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@3 main::@5
  (void~) main::$4 ← call plot (byte) main::k 
  (byte) main::k ← ++ (byte) main::k
  (boolean~) main::$5 ← (byte) main::k != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@6
main::@6: scope:[main]  from main::@3
  to:main::@return
main::@return: scope:[main]  from main::@6
  return 
  to:@return
@1: scope:[]  from @begin
  to:@2
plot: scope:[plot]  from
  *((byte*) SCREEN + (byte) plot::x) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @1
  call main 
  to:@end
@end: scope:[]  from @2

Removing empty block main::@6
Removing empty block @1
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@2
main: scope:[main]  from
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@1
  (void~) main::$0 ← call plot (byte) main::i 
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@1
  (byte) main::j ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@2 main::@4
  (void~) main::$2 ← call plot (byte) main::j 
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$3 ← (byte) main::j != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@2
  (byte) main::k ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@3 main::@5
  (void~) main::$4 ← call plot (byte) main::k 
  (byte) main::k ← ++ (byte) main::k
  (boolean~) main::$5 ← (byte) main::k != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@3
  return 
  to:@return
plot: scope:[plot]  from
  *((byte*) SCREEN + (byte) plot::x) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main 
  to:@end
@end: scope:[]  from @2

PROCEDURE MODIFY VARIABLE ANALYSIS

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL
@begin: scope:[]  from
  (byte*) SCREEN ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) plot::x ← (byte) main::i
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i ← ++ (byte) main::i
  (boolean~) main::$1 ← (byte) main::i != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte) main::j ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte) plot::x ← (byte) main::j
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j ← ++ (byte) main::j
  (boolean~) main::$3 ← (byte) main::j != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  (byte) main::k ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte) plot::x ← (byte) main::k
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k ← ++ (byte) main::k
  (boolean~) main::$5 ← (byte) main::k != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  *((byte*) SCREEN + (byte) plot::x) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
Completing Phi functions...
CONTROL FLOW GRAPH SSA
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN#5 ← phi( @2/(byte*) SCREEN#11 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#5 main::@7/(byte*) SCREEN#6 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte*) SCREEN#6 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte*) SCREEN#7 ← phi( main::@7/(byte*) SCREEN#6 )
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte*) SCREEN#3 ← phi( main::@4/(byte*) SCREEN#7 main::@8/(byte*) SCREEN#8 )
  (byte) main::j#2 ← phi( main::@4/(byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte*) SCREEN#8 ← phi( main::@2/(byte*) SCREEN#3 )
  (byte) main::j#3 ← phi( main::@2/(byte) main::j#2 )
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$3 ← (byte) main::j#1 != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  (byte*) SCREEN#9 ← phi( main::@8/(byte*) SCREEN#8 )
  (byte) main::k#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte*) SCREEN#4 ← phi( main::@5/(byte*) SCREEN#9 main::@9/(byte*) SCREEN#10 )
  (byte) main::k#2 ← phi( main::@5/(byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte*) SCREEN#10 ← phi( main::@3/(byte*) SCREEN#4 )
  (byte) main::k#3 ← phi( main::@3/(byte) main::k#2 )
  (byte) main::k#1 ← ++ (byte) main::k#3
  (boolean~) main::$5 ← (byte) main::k#1 != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#4 )
  *((byte*) SCREEN#1 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN#11 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

CONTROL FLOW GRAPH WITH ASSIGNMENT CALL & RETURN
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN#5 ← phi( @2/(byte*) SCREEN#11 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#5 main::@7/(byte*) SCREEN#6 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte*) SCREEN#6 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte*) SCREEN#7 ← phi( main::@7/(byte*) SCREEN#6 )
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte*) SCREEN#3 ← phi( main::@4/(byte*) SCREEN#7 main::@8/(byte*) SCREEN#8 )
  (byte) main::j#2 ← phi( main::@4/(byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte*) SCREEN#8 ← phi( main::@2/(byte*) SCREEN#3 )
  (byte) main::j#3 ← phi( main::@2/(byte) main::j#2 )
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$3 ← (byte) main::j#1 != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  (byte*) SCREEN#9 ← phi( main::@8/(byte*) SCREEN#8 )
  (byte) main::k#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte*) SCREEN#4 ← phi( main::@5/(byte*) SCREEN#9 main::@9/(byte*) SCREEN#10 )
  (byte) main::k#2 ← phi( main::@5/(byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte*) SCREEN#10 ← phi( main::@3/(byte*) SCREEN#4 )
  (byte) main::k#3 ← phi( main::@3/(byte) main::k#2 )
  (byte) main::k#1 ← ++ (byte) main::k#3
  (boolean~) main::$5 ← (byte) main::k#1 != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#4 )
  *((byte*) SCREEN#1 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN#11 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@3
@3: scope:[]  from @2
  to:@end
@end: scope:[]  from @3

INITIAL SSA SYMBOL TABLE
(label) @2
(label) @3
(label) @begin
(label) @end
(byte*) SCREEN
(byte*) SCREEN#0
(byte*) SCREEN#1
(byte*) SCREEN#10
(byte*) SCREEN#11
(byte*) SCREEN#2
(byte*) SCREEN#3
(byte*) SCREEN#4
(byte*) SCREEN#5
(byte*) SCREEN#6
(byte*) SCREEN#7
(byte*) SCREEN#8
(byte*) SCREEN#9
(void()) main()
(boolean~) main::$1
(boolean~) main::$3
(boolean~) main::$5
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@4
(label) main::@5
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#0
(byte) main::i#1
(byte) main::i#2
(byte) main::i#3
(byte) main::j
(byte) main::j#0
(byte) main::j#1
(byte) main::j#2
(byte) main::j#3
(byte) main::k
(byte) main::k#0
(byte) main::k#1
(byte) main::k#2
(byte) main::k#3
(void()) plot((byte) plot::x)
(label) plot::@return
(byte) plot::x
(byte) plot::x#0
(byte) plot::x#1
(byte) plot::x#2
(byte) plot::x#3

Culled Empty Block (label) @3
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte*) SCREEN#5 ← phi( @2/(byte*) SCREEN#11 )
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#5 main::@7/(byte*) SCREEN#6 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte*) SCREEN#6 ← phi( main::@1/(byte*) SCREEN#2 )
  (byte) main::i#3 ← phi( main::@1/(byte) main::i#2 )
  (byte) main::i#1 ← ++ (byte) main::i#3
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte*) SCREEN#7 ← phi( main::@7/(byte*) SCREEN#6 )
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte*) SCREEN#3 ← phi( main::@4/(byte*) SCREEN#7 main::@8/(byte*) SCREEN#8 )
  (byte) main::j#2 ← phi( main::@4/(byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte*) SCREEN#8 ← phi( main::@2/(byte*) SCREEN#3 )
  (byte) main::j#3 ← phi( main::@2/(byte) main::j#2 )
  (byte) main::j#1 ← ++ (byte) main::j#3
  (boolean~) main::$3 ← (byte) main::j#1 != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  (byte*) SCREEN#9 ← phi( main::@8/(byte*) SCREEN#8 )
  (byte) main::k#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte*) SCREEN#4 ← phi( main::@5/(byte*) SCREEN#9 main::@9/(byte*) SCREEN#10 )
  (byte) main::k#2 ← phi( main::@5/(byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte*) SCREEN#10 ← phi( main::@3/(byte*) SCREEN#4 )
  (byte) main::k#3 ← phi( main::@3/(byte) main::k#2 )
  (byte) main::k#1 ← ++ (byte) main::k#3
  (boolean~) main::$5 ← (byte) main::k#1 != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#4 )
  *((byte*) SCREEN#1 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  (byte*) SCREEN#11 ← phi( @begin/(byte*) SCREEN#0 )
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Not aliassing across scopes: plot::x#0 main::i#2
Not aliassing across scopes: plot::x#1 main::j#2
Not aliassing across scopes: plot::x#2 main::k#2
Alias (byte*) SCREEN#0 = (byte*) SCREEN#5 (byte*) SCREEN#11 
Alias (byte) main::i#2 = (byte) main::i#3 
Alias (byte*) SCREEN#2 = (byte*) SCREEN#6 (byte*) SCREEN#7 
Alias (byte) main::j#2 = (byte) main::j#3 
Alias (byte*) SCREEN#3 = (byte*) SCREEN#8 (byte*) SCREEN#9 
Alias (byte) main::k#2 = (byte) main::k#3 
Alias (byte*) SCREEN#10 = (byte*) SCREEN#4 
Succesful SSA optimization Pass2AliasElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#0 main::@7/(byte*) SCREEN#2 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte*) SCREEN#3 ← phi( main::@4/(byte*) SCREEN#2 main::@8/(byte*) SCREEN#3 )
  (byte) main::j#2 ← phi( main::@4/(byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$3 ← (byte) main::j#1 != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  (byte) main::k#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte*) SCREEN#10 ← phi( main::@5/(byte*) SCREEN#3 main::@9/(byte*) SCREEN#10 )
  (byte) main::k#2 ← phi( main::@5/(byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$5 ← (byte) main::k#1 != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#10 )
  *((byte*) SCREEN#1 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Not aliassing across scopes: plot::x#0 main::i#2
Not aliassing across scopes: plot::x#1 main::j#2
Not aliassing across scopes: plot::x#2 main::k#2
Self Phi Eliminated (byte*) SCREEN#2
Self Phi Eliminated (byte*) SCREEN#3
Self Phi Eliminated (byte*) SCREEN#10
Succesful SSA optimization Pass2SelfPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte*) SCREEN#2 ← phi( main/(byte*) SCREEN#0 )
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte*) SCREEN#3 ← phi( main::@4/(byte*) SCREEN#2 )
  (byte) main::j#2 ← phi( main::@4/(byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$3 ← (byte) main::j#1 != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  (byte) main::k#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte*) SCREEN#10 ← phi( main::@5/(byte*) SCREEN#3 )
  (byte) main::k#2 ← phi( main::@5/(byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$5 ← (byte) main::k#1 != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#2 main::@2/(byte*) SCREEN#3 main::@3/(byte*) SCREEN#10 )
  *((byte*) SCREEN#1 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Redundant Phi (byte*) SCREEN#2 (byte*) SCREEN#0
Redundant Phi (byte*) SCREEN#3 (byte*) SCREEN#2
Redundant Phi (byte*) SCREEN#10 (byte*) SCREEN#3
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte) main::j#2 ← phi( main::@4/(byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$3 ← (byte) main::j#1 != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  (byte) main::k#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte) main::k#2 ← phi( main::@5/(byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$5 ← (byte) main::k#1 != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  (byte*) SCREEN#1 ← phi( main::@1/(byte*) SCREEN#0 main::@2/(byte*) SCREEN#0 main::@3/(byte*) SCREEN#0 )
  *((byte*) SCREEN#1 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Redundant Phi (byte*) SCREEN#1 (byte*) SCREEN#0
Succesful SSA optimization Pass2RedundantPhiElimination
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i#1 ← ++ (byte) main::i#2
  (boolean~) main::$1 ← (byte) main::i#1 != (byte) 11
  if((boolean~) main::$1) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte) main::j#2 ← phi( main::@4/(byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j#1 ← ++ (byte) main::j#2
  (boolean~) main::$3 ← (byte) main::j#1 != (byte) 11
  if((boolean~) main::$3) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  (byte) main::k#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte) main::k#2 ← phi( main::@5/(byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k#1 ← ++ (byte) main::k#2
  (boolean~) main::$5 ← (byte) main::k#1 != (byte) 11
  if((boolean~) main::$5) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  *((byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Simple Condition (boolean~) main::$1 if((byte) main::i#1!=(byte) 11) goto main::@1
Simple Condition (boolean~) main::$3 if((byte) main::j#1!=(byte) 11) goto main::@2
Simple Condition (boolean~) main::$5 if((byte) main::k#1!=(byte) 11) goto main::@3
Succesful SSA optimization Pass2ConditionalJumpSimplification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  (byte*) SCREEN#0 ← (word) 1024
  to:@2
main: scope:[main]  from @2
  (byte) main::i#0 ← (byte) 0
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::i#2 ← phi( main/(byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 11) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  (byte) main::j#0 ← (byte) 0
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte) main::j#2 ← phi( main::@4/(byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) 11) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  (byte) main::k#0 ← (byte) 0
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte) main::k#2 ← phi( main::@5/(byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte) 11) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  *((byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Constant (const byte*) SCREEN#0 = 1024
Constant (const byte) main::i#0 = 0
Constant (const byte) main::j#0 = 0
Constant (const byte) main::k#0 = 0
Succesful SSA optimization Pass2ConstantIdentification
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 11) goto main::@1
  to:main::@4
main::@4: scope:[main]  from main::@7
  to:main::@2
main::@2: scope:[main]  from main::@4 main::@8
  (byte) main::j#2 ← phi( main::@4/(const byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) 11) goto main::@2
  to:main::@5
main::@5: scope:[main]  from main::@8
  to:main::@3
main::@3: scope:[main]  from main::@5 main::@9
  (byte) main::k#2 ← phi( main::@5/(const byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte) 11) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Culled Empty Block (label) main::@4
Culled Empty Block (label) main::@5
Succesful SSA optimization Pass2CullEmptyBlocks
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::i#2 ← phi( main/(const byte) main::i#0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 11) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@7 main::@8
  (byte) main::j#2 ← phi( main::@7/(const byte) main::j#0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) 11) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@8 main::@9
  (byte) main::k#2 ← phi( main::@8/(const byte) main::k#0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte) 11) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

Not aliassing across scopes: plot::x#0 main::i#2
Not aliassing across scopes: plot::x#1 main::j#2
Not aliassing across scopes: plot::x#2 main::k#2
Not aliassing across scopes: plot::x#0 main::i#2
Not aliassing across scopes: plot::x#1 main::j#2
Not aliassing across scopes: plot::x#2 main::k#2
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::i#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::j#0
Inlining constant with var siblings (const byte) main::k#0
Inlining constant with var siblings (const byte) main::k#0
Constant inlined main::k#0 = (byte) 0
Constant inlined main::j#0 = (byte) 0
Constant inlined main::i#0 = (byte) 0
Succesful SSA optimization Pass2ConstantInlining
CONTROL FLOW GRAPH
@begin: scope:[]  from
  to:@2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@7
  (byte) main::i#2 ← phi( main/(byte) 0 main::@7/(byte) main::i#1 )
  (byte) plot::x#0 ← (byte) main::i#2
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 11) goto main::@1
  to:main::@2
main::@2: scope:[main]  from main::@7 main::@8
  (byte) main::j#2 ← phi( main::@7/(byte) 0 main::@8/(byte) main::j#1 )
  (byte) plot::x#1 ← (byte) main::j#2
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) 11) goto main::@2
  to:main::@3
main::@3: scope:[main]  from main::@8 main::@9
  (byte) main::k#2 ← phi( main::@8/(byte) 0 main::@9/(byte) main::k#1 )
  (byte) plot::x#2 ← (byte) main::k#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte) 11) goto main::@3
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 )
  *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 = (word) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#1
(byte) main::i#2
(byte) main::j
(byte) main::j#1
(byte) main::j#2
(byte) main::k
(byte) main::k#1
(byte) main::k#2
(void()) plot((byte) plot::x)
(label) plot::@return
(byte) plot::x
(byte) plot::x#0
(byte) plot::x#1
(byte) plot::x#2
(byte) plot::x#3

Block Sequence Planned @begin @2 @end main main::@1 main::@7 main::@2 main::@8 main::@3 main::@9 main::@return plot plot::@return 
Added new block during phi lifting main::@10(between main::@7 and main::@1)
Added new block during phi lifting main::@11(between main::@8 and main::@2)
Added new block during phi lifting main::@12(between main::@9 and main::@3)
Block Sequence Planned @begin @2 @end main main::@1 main::@7 main::@2 main::@8 main::@3 main::@9 main::@return main::@12 main::@11 main::@10 plot plot::@return 
CONTROL FLOW GRAPH - PHI LIFTED
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  call main param-assignment
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  to:main::@1
main::@1: scope:[main]  from main main::@10
  (byte) main::i#2 ← phi( main/(byte) 0 main::@10/(byte~) main::i#4 )
  (byte) plot::x#0 ← (byte) main::i#2
  (byte~) plot::x#4 ← (byte) plot::x#0
  call plot param-assignment
  to:main::@7
main::@7: scope:[main]  from main::@1
  (byte) main::i#1 ← ++ (byte) main::i#2
  if((byte) main::i#1!=(byte) 11) goto main::@10
  to:main::@2
main::@2: scope:[main]  from main::@11 main::@7
  (byte) main::j#2 ← phi( main::@7/(byte) 0 main::@11/(byte~) main::j#4 )
  (byte) plot::x#1 ← (byte) main::j#2
  (byte~) plot::x#5 ← (byte) plot::x#1
  call plot param-assignment
  to:main::@8
main::@8: scope:[main]  from main::@2
  (byte) main::j#1 ← ++ (byte) main::j#2
  if((byte) main::j#1!=(byte) 11) goto main::@11
  to:main::@3
main::@3: scope:[main]  from main::@12 main::@8
  (byte) main::k#2 ← phi( main::@8/(byte) 0 main::@12/(byte~) main::k#4 )
  (byte) plot::x#2 ← (byte) main::k#2
  (byte~) plot::x#6 ← (byte) plot::x#2
  call plot param-assignment
  to:main::@9
main::@9: scope:[main]  from main::@3
  (byte) main::k#1 ← ++ (byte) main::k#2
  if((byte) main::k#1!=(byte) 11) goto main::@12
  to:main::@return
main::@return: scope:[main]  from main::@9
  return 
  to:@return
main::@12: scope:[main]  from main::@9
  (byte~) main::k#4 ← (byte) main::k#1
  to:main::@3
main::@11: scope:[main]  from main::@8
  (byte~) main::j#4 ← (byte) main::j#1
  to:main::@2
main::@10: scope:[main]  from main::@7
  (byte~) main::i#4 ← (byte) main::i#1
  to:main::@1
plot: scope:[plot]  from main::@1 main::@2 main::@3
  (byte) plot::x#3 ← phi( main::@1/(byte~) plot::x#4 main::@2/(byte~) plot::x#5 main::@3/(byte~) plot::x#6 )
  *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*'
  to:plot::@return
plot::@return: scope:[plot]  from plot
  return 
  to:@return

Adding NOP phi() at start of main
CALL GRAPH
Calls in [] to 0:main 
Calls in [main] to 5:plot 11:plot 17:plot 

Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - LIVE RANGES FOUND
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@10
  [2] (byte) main::i#2 ← phi( main/(byte) 0 main::@10/(byte~) main::i#4 ) [ main::i#2 ]
  [3] (byte) plot::x#0 ← (byte) main::i#2 [ main::i#2 plot::x#0 ]
  [4] (byte~) plot::x#4 ← (byte) plot::x#0 [ main::i#2 plot::x#4 ]
  [5] call plot param-assignment [ main::i#2 ]
  to:main::@7
main::@7: scope:[main]  from main::@1
  [6] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [7] if((byte) main::i#1!=(byte) 11) goto main::@10 [ main::i#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@11 main::@7
  [8] (byte) main::j#2 ← phi( main::@7/(byte) 0 main::@11/(byte~) main::j#4 ) [ main::j#2 ]
  [9] (byte) plot::x#1 ← (byte) main::j#2 [ main::j#2 plot::x#1 ]
  [10] (byte~) plot::x#5 ← (byte) plot::x#1 [ main::j#2 plot::x#5 ]
  [11] call plot param-assignment [ main::j#2 ]
  to:main::@8
main::@8: scope:[main]  from main::@2
  [12] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ]
  [13] if((byte) main::j#1!=(byte) 11) goto main::@11 [ main::j#1 ]
  to:main::@3
main::@3: scope:[main]  from main::@12 main::@8
  [14] (byte) main::k#2 ← phi( main::@8/(byte) 0 main::@12/(byte~) main::k#4 ) [ main::k#2 ]
  [15] (byte) plot::x#2 ← (byte) main::k#2 [ main::k#2 plot::x#2 ]
  [16] (byte~) plot::x#6 ← (byte) plot::x#2 [ main::k#2 plot::x#6 ]
  [17] call plot param-assignment [ main::k#2 ]
  to:main::@9
main::@9: scope:[main]  from main::@3
  [18] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 ]
  [19] if((byte) main::k#1!=(byte) 11) goto main::@12 [ main::k#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@9
  [20] return  [ ]
  to:@return
main::@12: scope:[main]  from main::@9
  [21] (byte~) main::k#4 ← (byte) main::k#1 [ main::k#4 ]
  to:main::@3
main::@11: scope:[main]  from main::@8
  [22] (byte~) main::j#4 ← (byte) main::j#1 [ main::j#4 ]
  to:main::@2
main::@10: scope:[main]  from main::@7
  [23] (byte~) main::i#4 ← (byte) main::i#1 [ main::i#4 ]
  to:main::@1
plot: scope:[plot]  from main::@1 main::@2 main::@3
  [24] (byte) plot::x#3 ← phi( main::@1/(byte~) plot::x#4 main::@2/(byte~) plot::x#5 main::@3/(byte~) plot::x#6 ) [ plot::x#3 ]
  [25] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ]
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [26] return  [ ]
  to:@return

Created 4 initial phi equivalence classes
Coalesced [4] plot::x#4 ← plot::x#0
Coalesced [10] plot::x#5 ← plot::x#1
Coalesced [16] plot::x#6 ← plot::x#2
Coalesced [21] main::k#4 ← main::k#1
Coalesced [22] main::j#4 ← main::j#1
Coalesced [23] main::i#4 ← main::i#1
Coalesced down to 4 phi equivalence classes
Culled Empty Block (label) main::@12
Culled Empty Block (label) main::@11
Culled Empty Block (label) main::@10
Block Sequence Planned @begin @2 @end main main::@1 main::@7 main::@2 main::@8 main::@3 main::@9 main::@return plot plot::@return 
Adding NOP phi() at start of main
Propagating live ranges...
Propagating live ranges...
Propagating live ranges...
CONTROL FLOW GRAPH - BEFORE EFFECTIVE LIVE RANGES
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ]
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ]
  to:main::@1
main::@1: scope:[main]  from main main::@7
  [2] (byte) main::i#2 ← phi( main/(byte) 0 main::@7/(byte) main::i#1 ) [ main::i#2 ]
  [3] (byte) plot::x#0 ← (byte) main::i#2 [ main::i#2 plot::x#0 ]
  [4] call plot param-assignment [ main::i#2 ]
  to:main::@7
main::@7: scope:[main]  from main::@1
  [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ]
  [6] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ]
  to:main::@2
main::@2: scope:[main]  from main::@7 main::@8
  [7] (byte) main::j#2 ← phi( main::@7/(byte) 0 main::@8/(byte) main::j#1 ) [ main::j#2 ]
  [8] (byte) plot::x#1 ← (byte) main::j#2 [ main::j#2 plot::x#1 ]
  [9] call plot param-assignment [ main::j#2 ]
  to:main::@8
main::@8: scope:[main]  from main::@2
  [10] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ]
  [11] if((byte) main::j#1!=(byte) 11) goto main::@2 [ main::j#1 ]
  to:main::@3
main::@3: scope:[main]  from main::@8 main::@9
  [12] (byte) main::k#2 ← phi( main::@8/(byte) 0 main::@9/(byte) main::k#1 ) [ main::k#2 ]
  [13] (byte) plot::x#2 ← (byte) main::k#2 [ main::k#2 plot::x#2 ]
  [14] call plot param-assignment [ main::k#2 ]
  to:main::@9
main::@9: scope:[main]  from main::@3
  [15] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 ]
  [16] if((byte) main::k#1!=(byte) 11) goto main::@3 [ main::k#1 ]
  to:main::@return
main::@return: scope:[main]  from main::@9
  [17] return  [ ]
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  [18] (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 ) [ plot::x#3 ]
  [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ]
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [20] return  [ ]
  to:@return

CONTROL FLOW GRAPH - PHI MEM COALESCED
@begin: scope:[]  from
  to:@2
@2: scope:[]  from @begin
  [0] call main param-assignment [ ] ( )
  to:@end
@end: scope:[]  from @2
main: scope:[main]  from @2
  [1] phi() [ ] (  [ ] )
  to:main::@1
main::@1: scope:[main]  from main main::@7
  [2] (byte) main::i#2 ← phi( main/(byte) 0 main::@7/(byte) main::i#1 ) [ main::i#2 ] (  [ main::i#2 ] )
  [3] (byte) plot::x#0 ← (byte) main::i#2 [ main::i#2 plot::x#0 ] (  [ main::i#2 plot::x#0 ] )
  [4] call plot param-assignment [ main::i#2 ] (  [ main::i#2 ] )
  to:main::@7
main::@7: scope:[main]  from main::@1
  [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] (  [ main::i#1 ] )
  [6] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] )
  to:main::@2
main::@2: scope:[main]  from main::@7 main::@8
  [7] (byte) main::j#2 ← phi( main::@7/(byte) 0 main::@8/(byte) main::j#1 ) [ main::j#2 ] (  [ main::j#2 ] )
  [8] (byte) plot::x#1 ← (byte) main::j#2 [ main::j#2 plot::x#1 ] (  [ main::j#2 plot::x#1 ] )
  [9] call plot param-assignment [ main::j#2 ] (  [ main::j#2 ] )
  to:main::@8
main::@8: scope:[main]  from main::@2
  [10] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] (  [ main::j#1 ] )
  [11] if((byte) main::j#1!=(byte) 11) goto main::@2 [ main::j#1 ] (  [ main::j#1 ] )
  to:main::@3
main::@3: scope:[main]  from main::@8 main::@9
  [12] (byte) main::k#2 ← phi( main::@8/(byte) 0 main::@9/(byte) main::k#1 ) [ main::k#2 ] (  [ main::k#2 ] )
  [13] (byte) plot::x#2 ← (byte) main::k#2 [ main::k#2 plot::x#2 ] (  [ main::k#2 plot::x#2 ] )
  [14] call plot param-assignment [ main::k#2 ] (  [ main::k#2 ] )
  to:main::@9
main::@9: scope:[main]  from main::@3
  [15] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 ] (  [ main::k#1 ] )
  [16] if((byte) main::k#1!=(byte) 11) goto main::@3 [ main::k#1 ] (  [ main::k#1 ] )
  to:main::@return
main::@return: scope:[main]  from main::@9
  [17] return  [ ] (  [ ] )
  to:@return
plot: scope:[plot]  from main::@1 main::@2 main::@3
  [18] (byte) plot::x#3 ← phi( main::@1/(byte) plot::x#0 main::@2/(byte) plot::x#1 main::@3/(byte) plot::x#2 ) [ plot::x#3 ] (  [ main::i#2 plot::x#3 ]  [ main::j#2 plot::x#3 ]  [ main::k#2 plot::x#3 ] )
  [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] )
  to:plot::@return
plot::@return: scope:[plot]  from plot
  [20] return  [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] )
  to:@return

DOMINATORS
@begin dominated by  @begin 
@2 dominated by  @2 @begin 
@end dominated by  @2 @end @begin 
main dominated by  @2 @begin main 
main::@1 dominated by  @2 @begin main::@1 main 
main::@7 dominated by  main::@7 @2 @begin main::@1 main 
main::@2 dominated by  main::@7 @2 @begin main::@2 main::@1 main 
main::@8 dominated by  main::@7 main::@8 @2 @begin main::@2 main::@1 main 
main::@3 dominated by  main::@7 main::@8 @2 @begin main::@2 main::@1 main::@3 main 
main::@9 dominated by  main::@7 main::@8 main::@9 @2 @begin main::@2 main::@1 main::@3 main 
main::@return dominated by  main::@7 main::@8 main::@9 @2 main::@return @begin main::@2 main::@1 main::@3 main 
plot dominated by  @2 @begin main::@1 plot main 
plot::@return dominated by  @2 @begin main::@1 plot::@return plot main 

Found back edge: Loop head: main::@1 tails: main::@7 blocks: null
Found back edge: Loop head: main::@2 tails: main::@8 blocks: null
Found back edge: Loop head: main::@3 tails: main::@9 blocks: null
Populated: Loop head: main::@1 tails: main::@7 blocks: main::@7 main::@1 
Populated: Loop head: main::@2 tails: main::@8 blocks: main::@8 main::@2 
Populated: Loop head: main::@3 tails: main::@9 blocks: main::@9 main::@3 
NATURAL LOOPS
Loop head: main::@1 tails: main::@7 blocks: main::@7 main::@1 
Loop head: main::@2 tails: main::@8 blocks: main::@8 main::@2 
Loop head: main::@3 tails: main::@9 blocks: main::@9 main::@3 

Found 0 loops in scope []
Found 3 loops in scope [main]
  Loop head: main::@1 tails: main::@7 blocks: main::@7 main::@1 
  Loop head: main::@2 tails: main::@8 blocks: main::@8 main::@2 
  Loop head: main::@3 tails: main::@9 blocks: main::@9 main::@3 
Found 0 loops in scope [plot]
NATURAL LOOPS WITH DEPTH
Loop head: main::@1 tails: main::@7 blocks: main::@7 main::@1  depth: 1
Loop head: main::@2 tails: main::@8 blocks: main::@8 main::@2  depth: 1
Loop head: main::@3 tails: main::@9 blocks: main::@9 main::@3  depth: 1


VARIABLE REGISTER WEIGHTS
(byte*) SCREEN
(void()) main()
(byte) main::i
(byte) main::i#1 16.5
(byte) main::i#2 11.0
(byte) main::j
(byte) main::j#1 16.5
(byte) main::j#2 11.0
(byte) main::k
(byte) main::k#1 16.5
(byte) main::k#2 11.0
(void()) plot((byte) plot::x)
(byte) plot::x
(byte) plot::x#0 22.0
(byte) plot::x#1 22.0
(byte) plot::x#2 22.0
(byte) plot::x#3 35.0

Initial phi equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::k#2 main::k#1 ]
[ plot::x#3 plot::x#0 plot::x#1 plot::x#2 ]
Complete equivalence classes
[ main::i#2 main::i#1 ]
[ main::j#2 main::j#1 ]
[ main::k#2 main::k#1 ]
[ plot::x#3 plot::x#0 plot::x#1 plot::x#2 ]
Allocated zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Allocated zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Allocated zp ZP_BYTE:4 [ main::k#2 main::k#1 ]
Allocated zp ZP_BYTE:5 [ plot::x#3 plot::x#0 plot::x#1 plot::x#2 ]
INITIAL ASM
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
  jmp b2
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
  jmp bend
//SEG6 @end
bend:
//SEG7 main
main: {
    .label i = 2
    .label j = 3
    .label k = 4
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- zpby1=coby1 
    lda #0
    sta i
    jmp b1
  //SEG10 [2] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  b1_from_b7:
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#0] -- register_copy 
    jmp b1
  //SEG12 main::@1
  b1:
  //SEG13 [3] (byte) plot::x#0 ← (byte) main::i#2 [ main::i#2 plot::x#0 ] (  [ main::i#2 plot::x#0 ] ) -- zpby1=zpby2 
    lda i
    sta plot.x
  //SEG14 [4] call plot param-assignment [ main::i#2 ] (  [ main::i#2 ] )
  //SEG15 [18] phi from main::@1 to plot [phi:main::@1->plot]
  plot_from_b1:
  //SEG16 [18] phi (byte) plot::x#3 = (byte) plot::x#0 [phi:main::@1->plot#0] -- register_copy 
    jsr plot
    jmp b7
  //SEG17 main::@7
  b7:
  //SEG18 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] (  [ main::i#1 ] ) -- zpby1=_inc_zpby1 
    inc i
  //SEG19 [6] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda i
    cmp #$b
    bne b1_from_b7
  //SEG20 [7] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  b2_from_b7:
  //SEG21 [7] phi (byte) main::j#2 = (byte) 0 [phi:main::@7->main::@2#0] -- zpby1=coby1 
    lda #0
    sta j
    jmp b2
  //SEG22 [7] phi from main::@8 to main::@2 [phi:main::@8->main::@2]
  b2_from_b8:
  //SEG23 [7] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@8->main::@2#0] -- register_copy 
    jmp b2
  //SEG24 main::@2
  b2:
  //SEG25 [8] (byte) plot::x#1 ← (byte) main::j#2 [ main::j#2 plot::x#1 ] (  [ main::j#2 plot::x#1 ] ) -- zpby1=zpby2 
    lda j
    sta plot.x
  //SEG26 [9] call plot param-assignment [ main::j#2 ] (  [ main::j#2 ] )
  //SEG27 [18] phi from main::@2 to plot [phi:main::@2->plot]
  plot_from_b2:
  //SEG28 [18] phi (byte) plot::x#3 = (byte) plot::x#1 [phi:main::@2->plot#0] -- register_copy 
    jsr plot
    jmp b8
  //SEG29 main::@8
  b8:
  //SEG30 [10] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] (  [ main::j#1 ] ) -- zpby1=_inc_zpby1 
    inc j
  //SEG31 [11] if((byte) main::j#1!=(byte) 11) goto main::@2 [ main::j#1 ] (  [ main::j#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda j
    cmp #$b
    bne b2_from_b8
  //SEG32 [12] phi from main::@8 to main::@3 [phi:main::@8->main::@3]
  b3_from_b8:
  //SEG33 [12] phi (byte) main::k#2 = (byte) 0 [phi:main::@8->main::@3#0] -- zpby1=coby1 
    lda #0
    sta k
    jmp b3
  //SEG34 [12] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  b3_from_b9:
  //SEG35 [12] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@9->main::@3#0] -- register_copy 
    jmp b3
  //SEG36 main::@3
  b3:
  //SEG37 [13] (byte) plot::x#2 ← (byte) main::k#2 [ main::k#2 plot::x#2 ] (  [ main::k#2 plot::x#2 ] ) -- zpby1=zpby2 
    lda k
    sta plot.x
  //SEG38 [14] call plot param-assignment [ main::k#2 ] (  [ main::k#2 ] )
  //SEG39 [18] phi from main::@3 to plot [phi:main::@3->plot]
  plot_from_b3:
  //SEG40 [18] phi (byte) plot::x#3 = (byte) plot::x#2 [phi:main::@3->plot#0] -- register_copy 
    jsr plot
    jmp b9
  //SEG41 main::@9
  b9:
  //SEG42 [15] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 ] (  [ main::k#1 ] ) -- zpby1=_inc_zpby1 
    inc k
  //SEG43 [16] if((byte) main::k#1!=(byte) 11) goto main::@3 [ main::k#1 ] (  [ main::k#1 ] ) -- zpby1_neq_coby1_then_la1 
    lda k
    cmp #$b
    bne b3_from_b9
    jmp breturn
  //SEG44 main::@return
  breturn:
  //SEG45 [17] return  [ ] (  [ ] )
    rts
}
//SEG46 plot
plot: {
    .label x = 5
  //SEG47 [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] ) -- cowo1_staridx_zpby1=coby2 
    lda #'*'
    ldx x
    sta SCREEN,x
    jmp breturn
  //SEG48 plot::@return
  breturn:
  //SEG49 [20] return  [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] )
    rts
}

REGISTER UPLIFT POTENTIAL REGISTERS
Statement [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:2 [ main::i#2 main::i#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:3 [ main::j#2 main::j#1 ]
Removing always clobbered register reg byte a as potential for zp ZP_BYTE:4 [ main::k#2 main::k#1 ]
Statement [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] ) always clobbers reg byte a 
Potential registers zp ZP_BYTE:2 [ main::i#2 main::i#1 ] : zp ZP_BYTE:2 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:3 [ main::j#2 main::j#1 ] : zp ZP_BYTE:3 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:4 [ main::k#2 main::k#1 ] : zp ZP_BYTE:4 , reg byte x , reg byte y , 
Potential registers zp ZP_BYTE:5 [ plot::x#3 plot::x#0 plot::x#1 plot::x#2 ] : zp ZP_BYTE:5 , reg byte a , reg byte x , reg byte y , 

REGISTER UPLIFT SCOPES
Uplift Scope [plot] 101: zp ZP_BYTE:5 [ plot::x#3 plot::x#0 plot::x#1 plot::x#2 ] 
Uplift Scope [main] 27.5: zp ZP_BYTE:2 [ main::i#2 main::i#1 ] 27.5: zp ZP_BYTE:3 [ main::j#2 main::j#1 ] 27.5: zp ZP_BYTE:4 [ main::k#2 main::k#1 ] 
Uplift Scope [] 

Uplifting [plot] best 913 combination reg byte x [ plot::x#3 plot::x#0 plot::x#1 plot::x#2 ] 
Uplifting [main] best 553 combination reg byte x [ main::i#2 main::i#1 ] reg byte x [ main::j#2 main::j#1 ] reg byte x [ main::k#2 main::k#1 ] 
Uplifting [] best 553 combination 
Removing instruction jmp b2
Removing instruction jmp bend
Removing instruction jmp b1
Removing instruction jmp b7
Removing instruction jmp b2
Removing instruction jmp b8
Removing instruction jmp b3
Removing instruction jmp b9
Removing instruction jmp breturn
Removing instruction jmp breturn
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
bbegin:
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
main_from_b2:
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG10 [2] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  b1_from_b7:
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] (byte) plot::x#0 ← (byte) main::i#2 [ main::i#2 plot::x#0 ] (  [ main::i#2 plot::x#0 ] )
    // (byte) plot::x#0 = (byte) main::i#2  // register copy reg byte x
  //SEG14 [4] call plot param-assignment [ main::i#2 ] (  [ main::i#2 ] )
  //SEG15 [18] phi from main::@1 to plot [phi:main::@1->plot]
  plot_from_b1:
  //SEG16 [18] phi (byte) plot::x#3 = (byte) plot::x#0 [phi:main::@1->plot#0] -- register_copy 
    jsr plot
  //SEG17 main::@7
  b7:
  //SEG18 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] (  [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [6] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b1_from_b7
  //SEG20 [7] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  b2_from_b7:
  //SEG21 [7] phi (byte) main::j#2 = (byte) 0 [phi:main::@7->main::@2#0] -- xby=coby1 
    ldx #0
    jmp b2
  //SEG22 [7] phi from main::@8 to main::@2 [phi:main::@8->main::@2]
  b2_from_b8:
  //SEG23 [7] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@8->main::@2#0] -- register_copy 
  //SEG24 main::@2
  b2:
  //SEG25 [8] (byte) plot::x#1 ← (byte) main::j#2 [ main::j#2 plot::x#1 ] (  [ main::j#2 plot::x#1 ] )
    // (byte) plot::x#1 = (byte) main::j#2  // register copy reg byte x
  //SEG26 [9] call plot param-assignment [ main::j#2 ] (  [ main::j#2 ] )
  //SEG27 [18] phi from main::@2 to plot [phi:main::@2->plot]
  plot_from_b2:
  //SEG28 [18] phi (byte) plot::x#3 = (byte) plot::x#1 [phi:main::@2->plot#0] -- register_copy 
    jsr plot
  //SEG29 main::@8
  b8:
  //SEG30 [10] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby=_inc_xby 
    inx
  //SEG31 [11] if((byte) main::j#1!=(byte) 11) goto main::@2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b2_from_b8
  //SEG32 [12] phi from main::@8 to main::@3 [phi:main::@8->main::@3]
  b3_from_b8:
  //SEG33 [12] phi (byte) main::k#2 = (byte) 0 [phi:main::@8->main::@3#0] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG34 [12] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  b3_from_b9:
  //SEG35 [12] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@9->main::@3#0] -- register_copy 
  //SEG36 main::@3
  b3:
  //SEG37 [13] (byte) plot::x#2 ← (byte) main::k#2 [ main::k#2 plot::x#2 ] (  [ main::k#2 plot::x#2 ] )
    // (byte) plot::x#2 = (byte) main::k#2  // register copy reg byte x
  //SEG38 [14] call plot param-assignment [ main::k#2 ] (  [ main::k#2 ] )
  //SEG39 [18] phi from main::@3 to plot [phi:main::@3->plot]
  plot_from_b3:
  //SEG40 [18] phi (byte) plot::x#3 = (byte) plot::x#2 [phi:main::@3->plot#0] -- register_copy 
    jsr plot
  //SEG41 main::@9
  b9:
  //SEG42 [15] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 ] (  [ main::k#1 ] ) -- xby=_inc_xby 
    inx
  //SEG43 [16] if((byte) main::k#1!=(byte) 11) goto main::@3 [ main::k#1 ] (  [ main::k#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b3_from_b9
  //SEG44 main::@return
  breturn:
  //SEG45 [17] return  [ ] (  [ ] )
    rts
}
//SEG46 plot
plot: {
  //SEG47 [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] ) -- cowo1_staridx_xby=coby2 
    lda #'*'
    sta SCREEN,x
  //SEG48 plot::@return
  breturn:
  //SEG49 [20] return  [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] )
    rts
}

Replacing label b1_from_b7 with b1
Replacing label b2_from_b8 with b2
Replacing label b3_from_b9 with b3
Removing instruction bbegin:
Removing instruction main_from_b2:
Removing instruction b1_from_b7:
Removing instruction b2_from_b8:
Removing instruction b3_from_b9:
Succesful ASM optimization Pass5RedundantLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
b2:
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
bend:
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  b1_from_main:
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG10 [2] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] (byte) plot::x#0 ← (byte) main::i#2 [ main::i#2 plot::x#0 ] (  [ main::i#2 plot::x#0 ] )
    // (byte) plot::x#0 = (byte) main::i#2  // register copy reg byte x
  //SEG14 [4] call plot param-assignment [ main::i#2 ] (  [ main::i#2 ] )
  //SEG15 [18] phi from main::@1 to plot [phi:main::@1->plot]
  plot_from_b1:
  //SEG16 [18] phi (byte) plot::x#3 = (byte) plot::x#0 [phi:main::@1->plot#0] -- register_copy 
    jsr plot
  //SEG17 main::@7
  b7:
  //SEG18 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] (  [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [6] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b1
  //SEG20 [7] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  b2_from_b7:
  //SEG21 [7] phi (byte) main::j#2 = (byte) 0 [phi:main::@7->main::@2#0] -- xby=coby1 
    ldx #0
    jmp b2
  //SEG22 [7] phi from main::@8 to main::@2 [phi:main::@8->main::@2]
  //SEG23 [7] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@8->main::@2#0] -- register_copy 
  //SEG24 main::@2
  b2:
  //SEG25 [8] (byte) plot::x#1 ← (byte) main::j#2 [ main::j#2 plot::x#1 ] (  [ main::j#2 plot::x#1 ] )
    // (byte) plot::x#1 = (byte) main::j#2  // register copy reg byte x
  //SEG26 [9] call plot param-assignment [ main::j#2 ] (  [ main::j#2 ] )
  //SEG27 [18] phi from main::@2 to plot [phi:main::@2->plot]
  plot_from_b2:
  //SEG28 [18] phi (byte) plot::x#3 = (byte) plot::x#1 [phi:main::@2->plot#0] -- register_copy 
    jsr plot
  //SEG29 main::@8
  b8:
  //SEG30 [10] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby=_inc_xby 
    inx
  //SEG31 [11] if((byte) main::j#1!=(byte) 11) goto main::@2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b2
  //SEG32 [12] phi from main::@8 to main::@3 [phi:main::@8->main::@3]
  b3_from_b8:
  //SEG33 [12] phi (byte) main::k#2 = (byte) 0 [phi:main::@8->main::@3#0] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG34 [12] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  //SEG35 [12] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@9->main::@3#0] -- register_copy 
  //SEG36 main::@3
  b3:
  //SEG37 [13] (byte) plot::x#2 ← (byte) main::k#2 [ main::k#2 plot::x#2 ] (  [ main::k#2 plot::x#2 ] )
    // (byte) plot::x#2 = (byte) main::k#2  // register copy reg byte x
  //SEG38 [14] call plot param-assignment [ main::k#2 ] (  [ main::k#2 ] )
  //SEG39 [18] phi from main::@3 to plot [phi:main::@3->plot]
  plot_from_b3:
  //SEG40 [18] phi (byte) plot::x#3 = (byte) plot::x#2 [phi:main::@3->plot#0] -- register_copy 
    jsr plot
  //SEG41 main::@9
  b9:
  //SEG42 [15] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 ] (  [ main::k#1 ] ) -- xby=_inc_xby 
    inx
  //SEG43 [16] if((byte) main::k#1!=(byte) 11) goto main::@3 [ main::k#1 ] (  [ main::k#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b3
  //SEG44 main::@return
  breturn:
  //SEG45 [17] return  [ ] (  [ ] )
    rts
}
//SEG46 plot
plot: {
  //SEG47 [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] ) -- cowo1_staridx_xby=coby2 
    lda #'*'
    sta SCREEN,x
  //SEG48 plot::@return
  breturn:
  //SEG49 [20] return  [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] )
    rts
}

Removing instruction b2:
Removing instruction bend:
Removing instruction b1_from_main:
Removing instruction plot_from_b1:
Removing instruction b7:
Removing instruction b2_from_b7:
Removing instruction plot_from_b2:
Removing instruction b8:
Removing instruction b3_from_b8:
Removing instruction plot_from_b3:
Removing instruction b9:
Removing instruction breturn:
Removing instruction breturn:
Succesful ASM optimization Pass5UnusedLabelElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
    jmp b1
  //SEG10 [2] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] (byte) plot::x#0 ← (byte) main::i#2 [ main::i#2 plot::x#0 ] (  [ main::i#2 plot::x#0 ] )
    // (byte) plot::x#0 = (byte) main::i#2  // register copy reg byte x
  //SEG14 [4] call plot param-assignment [ main::i#2 ] (  [ main::i#2 ] )
  //SEG15 [18] phi from main::@1 to plot [phi:main::@1->plot]
  //SEG16 [18] phi (byte) plot::x#3 = (byte) plot::x#0 [phi:main::@1->plot#0] -- register_copy 
    jsr plot
  //SEG17 main::@7
  //SEG18 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] (  [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [6] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b1
  //SEG20 [7] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  //SEG21 [7] phi (byte) main::j#2 = (byte) 0 [phi:main::@7->main::@2#0] -- xby=coby1 
    ldx #0
    jmp b2
  //SEG22 [7] phi from main::@8 to main::@2 [phi:main::@8->main::@2]
  //SEG23 [7] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@8->main::@2#0] -- register_copy 
  //SEG24 main::@2
  b2:
  //SEG25 [8] (byte) plot::x#1 ← (byte) main::j#2 [ main::j#2 plot::x#1 ] (  [ main::j#2 plot::x#1 ] )
    // (byte) plot::x#1 = (byte) main::j#2  // register copy reg byte x
  //SEG26 [9] call plot param-assignment [ main::j#2 ] (  [ main::j#2 ] )
  //SEG27 [18] phi from main::@2 to plot [phi:main::@2->plot]
  //SEG28 [18] phi (byte) plot::x#3 = (byte) plot::x#1 [phi:main::@2->plot#0] -- register_copy 
    jsr plot
  //SEG29 main::@8
  //SEG30 [10] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby=_inc_xby 
    inx
  //SEG31 [11] if((byte) main::j#1!=(byte) 11) goto main::@2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b2
  //SEG32 [12] phi from main::@8 to main::@3 [phi:main::@8->main::@3]
  //SEG33 [12] phi (byte) main::k#2 = (byte) 0 [phi:main::@8->main::@3#0] -- xby=coby1 
    ldx #0
    jmp b3
  //SEG34 [12] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  //SEG35 [12] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@9->main::@3#0] -- register_copy 
  //SEG36 main::@3
  b3:
  //SEG37 [13] (byte) plot::x#2 ← (byte) main::k#2 [ main::k#2 plot::x#2 ] (  [ main::k#2 plot::x#2 ] )
    // (byte) plot::x#2 = (byte) main::k#2  // register copy reg byte x
  //SEG38 [14] call plot param-assignment [ main::k#2 ] (  [ main::k#2 ] )
  //SEG39 [18] phi from main::@3 to plot [phi:main::@3->plot]
  //SEG40 [18] phi (byte) plot::x#3 = (byte) plot::x#2 [phi:main::@3->plot#0] -- register_copy 
    jsr plot
  //SEG41 main::@9
  //SEG42 [15] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 ] (  [ main::k#1 ] ) -- xby=_inc_xby 
    inx
  //SEG43 [16] if((byte) main::k#1!=(byte) 11) goto main::@3 [ main::k#1 ] (  [ main::k#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b3
  //SEG44 main::@return
  //SEG45 [17] return  [ ] (  [ ] )
    rts
}
//SEG46 plot
plot: {
  //SEG47 [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] ) -- cowo1_staridx_xby=coby2 
    lda #'*'
    sta SCREEN,x
  //SEG48 plot::@return
  //SEG49 [20] return  [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] )
    rts
}

Removing instruction jmp b1
Removing instruction jmp b2
Removing instruction jmp b3
Succesful ASM optimization Pass5NextJumpElimination
ASSEMBLER
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG10 [2] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] (byte) plot::x#0 ← (byte) main::i#2 [ main::i#2 plot::x#0 ] (  [ main::i#2 plot::x#0 ] )
    // (byte) plot::x#0 = (byte) main::i#2  // register copy reg byte x
  //SEG14 [4] call plot param-assignment [ main::i#2 ] (  [ main::i#2 ] )
  //SEG15 [18] phi from main::@1 to plot [phi:main::@1->plot]
  //SEG16 [18] phi (byte) plot::x#3 = (byte) plot::x#0 [phi:main::@1->plot#0] -- register_copy 
    jsr plot
  //SEG17 main::@7
  //SEG18 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] (  [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [6] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b1
  //SEG20 [7] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  //SEG21 [7] phi (byte) main::j#2 = (byte) 0 [phi:main::@7->main::@2#0] -- xby=coby1 
    ldx #0
  //SEG22 [7] phi from main::@8 to main::@2 [phi:main::@8->main::@2]
  //SEG23 [7] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@8->main::@2#0] -- register_copy 
  //SEG24 main::@2
  b2:
  //SEG25 [8] (byte) plot::x#1 ← (byte) main::j#2 [ main::j#2 plot::x#1 ] (  [ main::j#2 plot::x#1 ] )
    // (byte) plot::x#1 = (byte) main::j#2  // register copy reg byte x
  //SEG26 [9] call plot param-assignment [ main::j#2 ] (  [ main::j#2 ] )
  //SEG27 [18] phi from main::@2 to plot [phi:main::@2->plot]
  //SEG28 [18] phi (byte) plot::x#3 = (byte) plot::x#1 [phi:main::@2->plot#0] -- register_copy 
    jsr plot
  //SEG29 main::@8
  //SEG30 [10] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby=_inc_xby 
    inx
  //SEG31 [11] if((byte) main::j#1!=(byte) 11) goto main::@2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b2
  //SEG32 [12] phi from main::@8 to main::@3 [phi:main::@8->main::@3]
  //SEG33 [12] phi (byte) main::k#2 = (byte) 0 [phi:main::@8->main::@3#0] -- xby=coby1 
    ldx #0
  //SEG34 [12] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  //SEG35 [12] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@9->main::@3#0] -- register_copy 
  //SEG36 main::@3
  b3:
  //SEG37 [13] (byte) plot::x#2 ← (byte) main::k#2 [ main::k#2 plot::x#2 ] (  [ main::k#2 plot::x#2 ] )
    // (byte) plot::x#2 = (byte) main::k#2  // register copy reg byte x
  //SEG38 [14] call plot param-assignment [ main::k#2 ] (  [ main::k#2 ] )
  //SEG39 [18] phi from main::@3 to plot [phi:main::@3->plot]
  //SEG40 [18] phi (byte) plot::x#3 = (byte) plot::x#2 [phi:main::@3->plot#0] -- register_copy 
    jsr plot
  //SEG41 main::@9
  //SEG42 [15] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 ] (  [ main::k#1 ] ) -- xby=_inc_xby 
    inx
  //SEG43 [16] if((byte) main::k#1!=(byte) 11) goto main::@3 [ main::k#1 ] (  [ main::k#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b3
  //SEG44 main::@return
  //SEG45 [17] return  [ ] (  [ ] )
    rts
}
//SEG46 plot
plot: {
  //SEG47 [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] ) -- cowo1_staridx_xby=coby2 
    lda #'*'
    sta SCREEN,x
  //SEG48 plot::@return
  //SEG49 [20] return  [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] )
    rts
}

FINAL SYMBOL TABLE
(label) @2
(label) @begin
(label) @end
(byte*) SCREEN
(const byte*) SCREEN#0 SCREEN = (word) 1024
(void()) main()
(label) main::@1
(label) main::@2
(label) main::@3
(label) main::@7
(label) main::@8
(label) main::@9
(label) main::@return
(byte) main::i
(byte) main::i#1 reg byte x 16.5
(byte) main::i#2 reg byte x 11.0
(byte) main::j
(byte) main::j#1 reg byte x 16.5
(byte) main::j#2 reg byte x 11.0
(byte) main::k
(byte) main::k#1 reg byte x 16.5
(byte) main::k#2 reg byte x 11.0
(void()) plot((byte) plot::x)
(label) plot::@return
(byte) plot::x
(byte) plot::x#0 reg byte x 22.0
(byte) plot::x#1 reg byte x 22.0
(byte) plot::x#2 reg byte x 22.0
(byte) plot::x#3 reg byte x 35.0

reg byte x [ main::i#2 main::i#1 ]
reg byte x [ main::j#2 main::j#1 ]
reg byte x [ main::k#2 main::k#1 ]
reg byte x [ plot::x#3 plot::x#0 plot::x#1 plot::x#2 ]

FINAL CODE
//SEG0 Basic Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
//SEG1 Global Constants & labels
  .const SCREEN = $400
//SEG2 @begin
//SEG3 @2
//SEG4 [0] call main param-assignment [ ] ( )
//SEG5 [1] phi from @2 to main [phi:@2->main]
  jsr main
//SEG6 @end
//SEG7 main
main: {
  //SEG8 [2] phi from main to main::@1 [phi:main->main::@1]
  //SEG9 [2] phi (byte) main::i#2 = (byte) 0 [phi:main->main::@1#0] -- xby=coby1 
    ldx #0
  //SEG10 [2] phi from main::@7 to main::@1 [phi:main::@7->main::@1]
  //SEG11 [2] phi (byte) main::i#2 = (byte) main::i#1 [phi:main::@7->main::@1#0] -- register_copy 
  //SEG12 main::@1
  b1:
  //SEG13 [3] (byte) plot::x#0 ← (byte) main::i#2 [ main::i#2 plot::x#0 ] (  [ main::i#2 plot::x#0 ] )
    // (byte) plot::x#0 = (byte) main::i#2  // register copy reg byte x
  //SEG14 [4] call plot param-assignment [ main::i#2 ] (  [ main::i#2 ] )
  //SEG15 [18] phi from main::@1 to plot [phi:main::@1->plot]
  //SEG16 [18] phi (byte) plot::x#3 = (byte) plot::x#0 [phi:main::@1->plot#0] -- register_copy 
    jsr plot
  //SEG17 main::@7
  //SEG18 [5] (byte) main::i#1 ← ++ (byte) main::i#2 [ main::i#1 ] (  [ main::i#1 ] ) -- xby=_inc_xby 
    inx
  //SEG19 [6] if((byte) main::i#1!=(byte) 11) goto main::@1 [ main::i#1 ] (  [ main::i#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b1
  //SEG20 [7] phi from main::@7 to main::@2 [phi:main::@7->main::@2]
  //SEG21 [7] phi (byte) main::j#2 = (byte) 0 [phi:main::@7->main::@2#0] -- xby=coby1 
    ldx #0
  //SEG22 [7] phi from main::@8 to main::@2 [phi:main::@8->main::@2]
  //SEG23 [7] phi (byte) main::j#2 = (byte) main::j#1 [phi:main::@8->main::@2#0] -- register_copy 
  //SEG24 main::@2
  b2:
  //SEG25 [8] (byte) plot::x#1 ← (byte) main::j#2 [ main::j#2 plot::x#1 ] (  [ main::j#2 plot::x#1 ] )
    // (byte) plot::x#1 = (byte) main::j#2  // register copy reg byte x
  //SEG26 [9] call plot param-assignment [ main::j#2 ] (  [ main::j#2 ] )
  //SEG27 [18] phi from main::@2 to plot [phi:main::@2->plot]
  //SEG28 [18] phi (byte) plot::x#3 = (byte) plot::x#1 [phi:main::@2->plot#0] -- register_copy 
    jsr plot
  //SEG29 main::@8
  //SEG30 [10] (byte) main::j#1 ← ++ (byte) main::j#2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby=_inc_xby 
    inx
  //SEG31 [11] if((byte) main::j#1!=(byte) 11) goto main::@2 [ main::j#1 ] (  [ main::j#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b2
  //SEG32 [12] phi from main::@8 to main::@3 [phi:main::@8->main::@3]
  //SEG33 [12] phi (byte) main::k#2 = (byte) 0 [phi:main::@8->main::@3#0] -- xby=coby1 
    ldx #0
  //SEG34 [12] phi from main::@9 to main::@3 [phi:main::@9->main::@3]
  //SEG35 [12] phi (byte) main::k#2 = (byte) main::k#1 [phi:main::@9->main::@3#0] -- register_copy 
  //SEG36 main::@3
  b3:
  //SEG37 [13] (byte) plot::x#2 ← (byte) main::k#2 [ main::k#2 plot::x#2 ] (  [ main::k#2 plot::x#2 ] )
    // (byte) plot::x#2 = (byte) main::k#2  // register copy reg byte x
  //SEG38 [14] call plot param-assignment [ main::k#2 ] (  [ main::k#2 ] )
  //SEG39 [18] phi from main::@3 to plot [phi:main::@3->plot]
  //SEG40 [18] phi (byte) plot::x#3 = (byte) plot::x#2 [phi:main::@3->plot#0] -- register_copy 
    jsr plot
  //SEG41 main::@9
  //SEG42 [15] (byte) main::k#1 ← ++ (byte) main::k#2 [ main::k#1 ] (  [ main::k#1 ] ) -- xby=_inc_xby 
    inx
  //SEG43 [16] if((byte) main::k#1!=(byte) 11) goto main::@3 [ main::k#1 ] (  [ main::k#1 ] ) -- xby_neq_coby1_then_la1 
    cpx #$b
    bne b3
  //SEG44 main::@return
  //SEG45 [17] return  [ ] (  [ ] )
    rts
}
//SEG46 plot
plot: {
  //SEG47 [19] *((const byte*) SCREEN#0 + (byte) plot::x#3) ← (byte) '*' [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] ) -- cowo1_staridx_xby=coby2 
    lda #'*'
    sta SCREEN,x
  //SEG48 plot::@return
  //SEG49 [20] return  [ ] (  [ main::i#2 ]  [ main::j#2 ]  [ main::k#2 ] )
    rts
}

