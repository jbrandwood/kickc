
CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start
  *(main::SCREEN+$3e8) = 0
  kickasm() {{ lda #0
        .for (var i = 0; i < 1000; i++) {
            sta SCREEN+i
        }
     }}
  to:main::@return
main::@return: scope:[main]  from main
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  call main 
  to:__start::@1
__start::@1: scope:[__start]  from __start
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  return 
  to:@return

SYMBOL TABLE SSA
void __start()
void main()
const nomodify byte* main::SCREEN = (byte*)$400

Adding number conversion cast (unumber) 0 in *(main::SCREEN+$3e8) = 0
Adding number conversion cast (unumber) $3e8 in *(main::SCREEN+$3e8) = ((unumber)) 0
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast *(main::SCREEN+(unumber)$3e8) = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant pointer cast (byte*) 1024
Simplifying constant integer cast 0
Simplifying constant integer cast $3e8
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (byte) 0
Finalized unsigned number type (word) $3e8
Successful SSA optimization PassNFinalizeNumberTypeConversions
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::@1
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
CALL GRAPH

Created 0 initial phi equivalence classes
Coalesced down to 0 phi equivalence classes

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] *(main::SCREEN+$3e8) = 0
  kickasm() {{ lda #0
        .for (var i = 0; i < 1000; i++) {
            sta SCREEN+i
        }
     }}
  to:main::@return
main::@return: scope:[main]  from main
  [2] return 
  to:@return


VARIABLE REGISTER WEIGHTS
void main()

Initial phi equivalence classes
Complete equivalence classes
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] *(main::SCREEN+$3e8) = 0 [ ] (  [ ] { }  ) always clobbers reg byte a 

REGISTER UPLIFT SCOPES
Uplift Scope [main] 
Uplift Scope [] 

Uplifting [main] best 271 combination 
Uplifting [] best 271 combination 

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Example of inline kickasm in a function
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // [0] *(main::SCREEN+$3e8) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+$3e8
    // kickasm() {{ lda #0         .for (var i = 0; i < 1000; i++) {             sta SCREEN+i         }      }}
    lda #0
        .for (var i = 0; i < 1000; i++) {
            sta SCREEN+i
        }
    
    jmp __breturn
    // main::@return
  __breturn:
    // [2] return 
    rts
}
  // File Data

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Removing instruction __breturn:
Succesful ASM optimization Pass5UnusedLabelElimination

FINAL SYMBOL TABLE
void main()
const nomodify byte* main::SCREEN = (byte*) 1024



FINAL ASSEMBLER
Score: 268

  // File Comments
// Example of inline kickasm in a function
  // Upstart
.pc = $801 "Basic"
:BasicUpstart(main)
.pc = $80d "Program"
  // Global Constants & labels
  // main
main: {
    .label SCREEN = $400
    // *(SCREEN+1000) = 0
    // [0] *(main::SCREEN+$3e8) = 0 -- _deref_pbuc1=vbuc2 
    lda #0
    sta SCREEN+$3e8
    // kickasm
    // kickasm() {{ lda #0         .for (var i = 0; i < 1000; i++) {             sta SCREEN+i         }      }}
    lda #0
        .for (var i = 0; i < 1000; i++) {
            sta SCREEN+i
        }
    
    // main::@return
    // }
    // [2] return 
    rts
}
  // File Data

