
void __start()
__start: scope:[__start]  from
  [0] phi()
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  [1] conio_cursor_x = 0
  [2] conio_cursor_y = 0
  [3] conio_line_text = DEFAULT_SCREEN
  [4] conio_line_color = COLORRAM
  [5] call conio_c64_init 
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  [6] phi()
  [7] call main 
  to:__start::@return
__start::@return: scope:[__start]  from __start::@1
  [8] return 
  to:@return

void conio_c64_init()
conio_c64_init: scope:[conio_c64_init]  from __start::__init1
  [9] conio_c64_init::line#0 = *conio_c64_init::BASIC_CURSOR_LINE
  [10] if(conio_c64_init::line#0<$19) goto conio_c64_init::@2
  to:conio_c64_init::@1
conio_c64_init::@2: scope:[conio_c64_init]  from conio_c64_init
  [11] phi()
  to:conio_c64_init::@1
conio_c64_init::@1: scope:[conio_c64_init]  from conio_c64_init conio_c64_init::@2
  [12] conio_c64_init::line#2 = phi( conio_c64_init::@2/conio_c64_init::line#0, conio_c64_init/$19-1 )
  [13] gotoxy::y#2 = conio_c64_init::line#2
  [14] call gotoxy 
  to:conio_c64_init::@return
conio_c64_init::@return: scope:[conio_c64_init]  from conio_c64_init::@1
  [15] return 
  to:@return

void main()
main: scope:[main]  from __start::@1
  [16] phi()
  [17] call memset 
  to:main::@1
main::@1: scope:[main]  from main main::@5
  [18] main::sc#8 = phi( main::@5/main::sc#10, main/SCREEN )
  [18] main::count#11 = phi( main::@5/main::count#10, main/0 )
  [18] main::y#2 = phi( main::@5/main::y#1, main/0 )
  [19] if(main::y#2<$19) goto main::@3
  to:main::@2
main::@2: scope:[main]  from main::@1
  [20] phi()
  [21] call gotoxy 
  to:main::@8
main::@8: scope:[main]  from main::@2
  [22] printf_uint::uvalue#0 = main::count#11
  [23] call printf_uint 
  to:main::@9
main::@9: scope:[main]  from main::@8
  [24] phi()
  [25] call cputs 
  to:main::@return
main::@return: scope:[main]  from main::@9
  [26] return 
  to:@return
main::@3: scope:[main]  from main::@1 main::@6
  [27] main::count#10 = phi( main::@1/main::count#11, main::@6/main::count#12 )
  [27] main::sc#10 = phi( main::@1/main::sc#8, main::@6/main::sc#1 )
  [27] main::x#2 = phi( main::@1/0, main::@6/main::x#1 )
  [28] if(main::x#2<$28) goto main::@4
  to:main::@5
main::@5: scope:[main]  from main::@3
  [29] main::y#1 = ++ main::y#2
  to:main::@1
main::@4: scope:[main]  from main::@3
  [30] main::$5 = main::x#2 << 1
  [31] main::xd#0 = main::$5 - $27
  [32] main::$7 = main::y#2 << 1
  [33] main::yd#0 = main::$7 - $18
  [34] mul8s::a#0 = main::xd#0
  [35] mul8s::b#0 = main::xd#0
  [36] call mul8s 
  to:main::@10
main::@10: scope:[main]  from main::@4
  [37] main::$9 = (signed word)mul8s::m#4
  [38] mul8s::a#1 = main::yd#0
  [39] mul8s::b#1 = main::yd#0
  [40] call mul8s 
  to:main::@11
main::@11: scope:[main]  from main::@10
  [41] main::$10 = (signed word)mul8s::m#4
  [42] main::dist_sq#0 = main::$9 + main::$10
  [43] if(main::dist_sq#0>=(signed word)2*9*2*9) goto main::@6
  to:main::@7
main::@7: scope:[main]  from main::@11
  [44] *main::sc#10 = '*'
  [45] main::count#1 = ++ main::count#10
  to:main::@6
main::@6: scope:[main]  from main::@11 main::@7
  [46] main::count#12 = phi( main::@11/main::count#10, main::@7/main::count#1 )
  [47] main::sc#1 = ++ main::sc#10
  [48] main::x#1 = ++ main::x#2
  to:main::@3

void gotoxy(byte gotoxy::x , byte gotoxy::y)
gotoxy: scope:[gotoxy]  from conio_c64_init::@1 main::@2
  [49] gotoxy::y#4 = phi( conio_c64_init::@1/gotoxy::y#2, main::@2/0 )
  [50] if(gotoxy::y#4<$19+1) goto gotoxy::@3
  to:gotoxy::@1
gotoxy::@3: scope:[gotoxy]  from gotoxy
  [51] phi()
  to:gotoxy::@1
gotoxy::@1: scope:[gotoxy]  from gotoxy gotoxy::@3
  [52] gotoxy::y#5 = phi( gotoxy::@3/gotoxy::y#4, gotoxy/0 )
  to:gotoxy::@2
gotoxy::@2: scope:[gotoxy]  from gotoxy::@1
  [53] conio_cursor_x = 0
  [54] conio_cursor_y = gotoxy::y#5
  [55] gotoxy::$7 = (word)gotoxy::y#5
  [56] gotoxy::$8 = gotoxy::$7 << 2
  [57] gotoxy::$9 = gotoxy::$8 + gotoxy::$7
  [58] gotoxy::line_offset#0 = gotoxy::$9 << 3
  [59] gotoxy::$5 = DEFAULT_SCREEN + gotoxy::line_offset#0
  [60] conio_line_text = gotoxy::$5
  [61] gotoxy::$6 = COLORRAM + gotoxy::line_offset#0
  [62] conio_line_color = gotoxy::$6
  to:gotoxy::@return
gotoxy::@return: scope:[gotoxy]  from gotoxy::@2
  [63] return 
  to:@return

void* memset(void* memset::str , byte memset::c , word memset::num)
memset: scope:[memset]  from cscroll::@3 cscroll::@4 main
  [64] memset::c#5 = phi( cscroll::@3/' ', cscroll::@4/LIGHT_BLUE, main/' ' )
  [64] memset::str#4 = phi( cscroll::@3/(void*)DEFAULT_SCREEN+(word)$19*$28-$28, cscroll::@4/(void*)COLORRAM+(word)$19*$28-$28, main/(void*)SCREEN )
  [64] memset::num#3 = phi( cscroll::@3/$28, cscroll::@4/$28, main/$3e8 )
  [65] if(memset::num#3<=0) goto memset::@return
  to:memset::@1
memset::@1: scope:[memset]  from memset
  [66] memset::end#0 = (byte*)memset::str#4 + memset::num#3
  [67] memset::dst#4 = (byte*)memset::str#4
  to:memset::@2
memset::@2: scope:[memset]  from memset::@1 memset::@3
  [68] memset::dst#2 = phi( memset::@1/memset::dst#4, memset::@3/memset::dst#1 )
  [69] if(memset::dst#2!=memset::end#0) goto memset::@3
  to:memset::@return
memset::@return: scope:[memset]  from memset memset::@2
  [70] return 
  to:@return
memset::@3: scope:[memset]  from memset::@2
  [71] *memset::dst#2 = memset::c#5
  [72] memset::dst#1 = ++ memset::dst#2
  to:memset::@2

void printf_uint(word printf_uint::uvalue , byte printf_uint::format_min_length , byte printf_uint::format_justify_left , byte printf_uint::format_sign_always , byte printf_uint::format_zero_padding , byte printf_uint::format_upper_case , byte printf_uint::format_radix)
printf_uint: scope:[printf_uint]  from main::@8
  [73] phi()
  to:printf_uint::@1
printf_uint::@1: scope:[printf_uint]  from printf_uint
  [74] *((byte*)&printf_buffer) = 0
  [75] utoa::value#1 = printf_uint::uvalue#0
  [76] call utoa 
  to:printf_uint::@2
printf_uint::@2: scope:[printf_uint]  from printf_uint::@1
  [77] printf_number_buffer::buffer_sign#0 = *((byte*)&printf_buffer)
  [78] call printf_number_buffer 
  to:printf_uint::@return
printf_uint::@return: scope:[printf_uint]  from printf_uint::@2
  [79] return 
  to:@return

void cputs(const byte* cputs::s)
cputs: scope:[cputs]  from main::@9 printf_number_buffer::@2
  [80] cputs::s#4 = phi( main::@9/main::s, printf_number_buffer::@2/printf_number_buffer::buffer_digits#0 )
  to:cputs::@1
cputs::@1: scope:[cputs]  from cputs cputs::@2
  [81] cputs::s#3 = phi( cputs/cputs::s#4, cputs::@2/cputs::s#0 )
  [82] cputs::c#1 = *cputs::s#3
  [83] cputs::s#0 = ++ cputs::s#3
  [84] if(0!=cputs::c#1) goto cputs::@2
  to:cputs::@return
cputs::@return: scope:[cputs]  from cputs::@1
  [85] return 
  to:@return
cputs::@2: scope:[cputs]  from cputs::@1
  [86] cputc::c#0 = cputs::c#1
  [87] call cputc 
  to:cputs::@1

signed word mul8s(signed byte mul8s::a , signed byte mul8s::b)
mul8s: scope:[mul8s]  from main::@10 main::@4
  [88] mul8s::b#2 = phi( main::@10/mul8s::b#1, main::@4/mul8s::b#0 )
  [88] mul8s::a#2 = phi( main::@10/mul8s::a#1, main::@4/mul8s::a#0 )
  [89] mul8u::a#1 = (byte)mul8s::a#2
  [90] mul8u::b#0 = (byte)mul8s::b#2
  [91] call mul8u 
  [92] mul8u::return#2 = mul8u::res#2
  to:mul8s::@5
mul8s::@5: scope:[mul8s]  from mul8s
  [93] mul8s::m#0 = mul8u::return#2
  [94] if(mul8s::a#2>=0) goto mul8s::@1
  to:mul8s::@3
mul8s::@3: scope:[mul8s]  from mul8s::@5
  [95] mul8s::$6 = > mul8s::m#0
  [96] mul8s::$11 = mul8s::$6 - (byte)mul8s::b#2
  [97] mul8s::m#1 = mul8s::m#0 hi= mul8s::$11
  to:mul8s::@1
mul8s::@1: scope:[mul8s]  from mul8s::@3 mul8s::@5
  [98] mul8s::m#5 = phi( mul8s::@3/mul8s::m#1, mul8s::@5/mul8s::m#0 )
  [99] if(mul8s::b#2>=0) goto mul8s::@2
  to:mul8s::@4
mul8s::@4: scope:[mul8s]  from mul8s::@1
  [100] mul8s::$9 = > mul8s::m#5
  [101] mul8s::$12 = mul8s::$9 - (byte)mul8s::a#2
  [102] mul8s::m#2 = mul8s::m#5 hi= mul8s::$12
  to:mul8s::@2
mul8s::@2: scope:[mul8s]  from mul8s::@1 mul8s::@4
  [103] mul8s::m#4 = phi( mul8s::@1/mul8s::m#5, mul8s::@4/mul8s::m#2 )
  to:mul8s::@return
mul8s::@return: scope:[mul8s]  from mul8s::@2
  [104] return 
  to:@return

void utoa(word utoa::value , byte* utoa::buffer , byte utoa::radix)
utoa: scope:[utoa]  from printf_uint::@1
  [105] phi()
  to:utoa::@1
utoa::@1: scope:[utoa]  from utoa utoa::@4
  [106] utoa::buffer#11 = phi( utoa::@4/utoa::buffer#14, utoa/(byte*)&printf_buffer+OFFSET_STRUCT_PRINTF_BUFFER_NUMBER_DIGITS )
  [106] utoa::started#2 = phi( utoa::@4/utoa::started#4, utoa/0 )
  [106] utoa::value#2 = phi( utoa::@4/utoa::value#6, utoa/utoa::value#1 )
  [106] utoa::digit#2 = phi( utoa::@4/utoa::digit#1, utoa/0 )
  [107] if(utoa::digit#2<utoa::max_digits#1-1) goto utoa::@2
  to:utoa::@3
utoa::@3: scope:[utoa]  from utoa::@1
  [108] utoa::$11 = (byte)utoa::value#2
  [109] *utoa::buffer#11 = DIGITS[utoa::$11]
  [110] utoa::buffer#3 = ++ utoa::buffer#11
  [111] *utoa::buffer#3 = 0
  to:utoa::@return
utoa::@return: scope:[utoa]  from utoa::@3
  [112] return 
  to:@return
utoa::@2: scope:[utoa]  from utoa::@1
  [113] utoa::$10 = utoa::digit#2 << 1
  [114] utoa::digit_value#0 = RADIX_DECIMAL_VALUES[utoa::$10]
  [115] if(0!=utoa::started#2) goto utoa::@5
  to:utoa::@7
utoa::@7: scope:[utoa]  from utoa::@2
  [116] if(utoa::value#2>=utoa::digit_value#0) goto utoa::@5
  to:utoa::@4
utoa::@4: scope:[utoa]  from utoa::@6 utoa::@7
  [117] utoa::buffer#14 = phi( utoa::@7/utoa::buffer#11, utoa::@6/utoa::buffer#4 )
  [117] utoa::started#4 = phi( utoa::@7/utoa::started#2, utoa::@6/1 )
  [117] utoa::value#6 = phi( utoa::@7/utoa::value#2, utoa::@6/utoa::value#0 )
  [118] utoa::digit#1 = ++ utoa::digit#2
  to:utoa::@1
utoa::@5: scope:[utoa]  from utoa::@2 utoa::@7
  [119] utoa_append::buffer#0 = utoa::buffer#11
  [120] utoa_append::value#0 = utoa::value#2
  [121] utoa_append::sub#0 = utoa::digit_value#0
  [122] call utoa_append 
  [123] utoa_append::return#0 = utoa_append::value#2
  to:utoa::@6
utoa::@6: scope:[utoa]  from utoa::@5
  [124] utoa::value#0 = utoa_append::return#0
  [125] utoa::buffer#4 = ++ utoa::buffer#11
  to:utoa::@4

void printf_number_buffer(byte printf_number_buffer::buffer_sign , byte* printf_number_buffer::buffer_digits , byte printf_number_buffer::format_min_length , byte printf_number_buffer::format_justify_left , byte printf_number_buffer::format_sign_always , byte printf_number_buffer::format_zero_padding , byte printf_number_buffer::format_upper_case , byte printf_number_buffer::format_radix)
printf_number_buffer: scope:[printf_number_buffer]  from printf_uint::@2
  [126] phi()
  to:printf_number_buffer::@1
printf_number_buffer::@1: scope:[printf_number_buffer]  from printf_number_buffer
  [127] if(0==printf_number_buffer::buffer_sign#0) goto printf_number_buffer::@2
  to:printf_number_buffer::@3
printf_number_buffer::@3: scope:[printf_number_buffer]  from printf_number_buffer::@1
  [128] cputc::c#2 = printf_number_buffer::buffer_sign#0
  [129] call cputc 
  to:printf_number_buffer::@2
printf_number_buffer::@2: scope:[printf_number_buffer]  from printf_number_buffer::@1 printf_number_buffer::@3
  [130] phi()
  [131] call cputs 
  to:printf_number_buffer::@return
printf_number_buffer::@return: scope:[printf_number_buffer]  from printf_number_buffer::@2
  [132] return 
  to:@return

void cputc(byte cputc::c)
cputc: scope:[cputc]  from cputs::@2 printf_number_buffer::@3
  [133] cputc::c#3 = phi( cputs::@2/cputc::c#0, printf_number_buffer::@3/cputc::c#2 )
  [134] if(cputc::c#3=='
') goto cputc::@1
  to:cputc::@2
cputc::@2: scope:[cputc]  from cputc
  [135] conio_line_text[conio_cursor_x] = cputc::c#3
  [136] conio_line_color[conio_cursor_x] = LIGHT_BLUE
  [137] conio_cursor_x = ++ conio_cursor_x
  [138] if(conio_cursor_x!=$28) goto cputc::@return
  to:cputc::@3
cputc::@3: scope:[cputc]  from cputc::@2
  [139] phi()
  [140] call cputln 
  to:cputc::@return
cputc::@return: scope:[cputc]  from cputc::@1 cputc::@2 cputc::@3
  [141] return 
  to:@return
cputc::@1: scope:[cputc]  from cputc
  [142] phi()
  [143] call cputln 
  to:cputc::@return

word mul8u(byte mul8u::a , byte mul8u::b)
mul8u: scope:[mul8u]  from mul8s
  [144] mul8u::mb#0 = (word)mul8u::b#0
  to:mul8u::@1
mul8u::@1: scope:[mul8u]  from mul8u mul8u::@3
  [145] mul8u::mb#2 = phi( mul8u/mul8u::mb#0, mul8u::@3/mul8u::mb#1 )
  [145] mul8u::res#2 = phi( mul8u/0, mul8u::@3/mul8u::res#6 )
  [145] mul8u::a#2 = phi( mul8u/mul8u::a#1, mul8u::@3/mul8u::a#0 )
  [146] if(mul8u::a#2!=0) goto mul8u::@2
  to:mul8u::@return
mul8u::@return: scope:[mul8u]  from mul8u::@1
  [147] return 
  to:@return
mul8u::@2: scope:[mul8u]  from mul8u::@1
  [148] mul8u::$1 = mul8u::a#2 & 1
  [149] if(mul8u::$1==0) goto mul8u::@3
  to:mul8u::@4
mul8u::@4: scope:[mul8u]  from mul8u::@2
  [150] mul8u::res#1 = mul8u::res#2 + mul8u::mb#2
  to:mul8u::@3
mul8u::@3: scope:[mul8u]  from mul8u::@2 mul8u::@4
  [151] mul8u::res#6 = phi( mul8u::@2/mul8u::res#2, mul8u::@4/mul8u::res#1 )
  [152] mul8u::a#0 = mul8u::a#2 >> 1
  [153] mul8u::mb#1 = mul8u::mb#2 << 1
  to:mul8u::@1

word utoa_append(byte* utoa_append::buffer , word utoa_append::value , word utoa_append::sub)
utoa_append: scope:[utoa_append]  from utoa::@5
  [154] phi()
  to:utoa_append::@1
utoa_append::@1: scope:[utoa_append]  from utoa_append utoa_append::@2
  [155] utoa_append::digit#2 = phi( utoa_append/0, utoa_append::@2/utoa_append::digit#1 )
  [155] utoa_append::value#2 = phi( utoa_append/utoa_append::value#0, utoa_append::@2/utoa_append::value#1 )
  [156] if(utoa_append::value#2>=utoa_append::sub#0) goto utoa_append::@2
  to:utoa_append::@3
utoa_append::@3: scope:[utoa_append]  from utoa_append::@1
  [157] *utoa_append::buffer#0 = DIGITS[utoa_append::digit#2]
  to:utoa_append::@return
utoa_append::@return: scope:[utoa_append]  from utoa_append::@3
  [158] return 
  to:@return
utoa_append::@2: scope:[utoa_append]  from utoa_append::@1
  [159] utoa_append::digit#1 = ++ utoa_append::digit#2
  [160] utoa_append::value#1 = utoa_append::value#2 - utoa_append::sub#0
  to:utoa_append::@1

void cputln()
cputln: scope:[cputln]  from cputc::@1 cputc::@3
  [161] conio_line_text = conio_line_text + $28
  [162] conio_line_color = conio_line_color + $28
  [163] conio_cursor_x = 0
  [164] conio_cursor_y = ++ conio_cursor_y
  [165] call cscroll 
  to:cputln::@return
cputln::@return: scope:[cputln]  from cputln
  [166] return 
  to:@return

void cscroll()
cscroll: scope:[cscroll]  from cputln
  [167] if(conio_cursor_y!=$19) goto cscroll::@return
  to:cscroll::@1
cscroll::@1: scope:[cscroll]  from cscroll
  [168] phi()
  [169] call memcpy 
  to:cscroll::@2
cscroll::@2: scope:[cscroll]  from cscroll::@1
  [170] phi()
  [171] call memcpy 
  to:cscroll::@3
cscroll::@3: scope:[cscroll]  from cscroll::@2
  [172] phi()
  [173] call memset 
  to:cscroll::@4
cscroll::@4: scope:[cscroll]  from cscroll::@3
  [174] phi()
  [175] call memset 
  to:cscroll::@5
cscroll::@5: scope:[cscroll]  from cscroll::@4
  [176] conio_line_text = conio_line_text - $28
  [177] conio_line_color = conio_line_color - $28
  [178] conio_cursor_y = -- conio_cursor_y
  to:cscroll::@return
cscroll::@return: scope:[cscroll]  from cscroll cscroll::@5
  [179] return 
  to:@return

void* memcpy(void* memcpy::destination , void* memcpy::source , word memcpy::num)
memcpy: scope:[memcpy]  from cscroll::@1 cscroll::@2
  [180] memcpy::destination#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN, cscroll::@2/(void*)COLORRAM )
  [180] memcpy::source#2 = phi( cscroll::@1/(void*)DEFAULT_SCREEN+$28, cscroll::@2/(void*)COLORRAM+$28 )
  [181] memcpy::src_end#0 = (byte*)memcpy::source#2 + (word)$19*$28-$28
  [182] memcpy::src#4 = (byte*)memcpy::source#2
  [183] memcpy::dst#4 = (byte*)memcpy::destination#2
  to:memcpy::@1
memcpy::@1: scope:[memcpy]  from memcpy memcpy::@2
  [184] memcpy::dst#2 = phi( memcpy/memcpy::dst#4, memcpy::@2/memcpy::dst#1 )
  [184] memcpy::src#2 = phi( memcpy/memcpy::src#4, memcpy::@2/memcpy::src#1 )
  [185] if(memcpy::src#2!=memcpy::src_end#0) goto memcpy::@2
  to:memcpy::@return
memcpy::@return: scope:[memcpy]  from memcpy::@1
  [186] return 
  to:@return
memcpy::@2: scope:[memcpy]  from memcpy::@1
  [187] *memcpy::dst#2 = *memcpy::src#2
  [188] memcpy::dst#1 = ++ memcpy::dst#2
  [189] memcpy::src#1 = ++ memcpy::src#2
  to:memcpy::@1
