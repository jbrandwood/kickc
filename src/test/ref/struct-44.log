Inlined call call __init

CONTROL FLOW GRAPH SSA

void main()
main: scope:[main]  from __start::@1
  screen_line#60 = phi( __start::@1/screen_line#67 )
  screen_idx#60 = phi( __start::@1/screen_idx#67 )
  print_circle::c_radius#0 = *((unsigned int *)&circle+OFFSET_STRUCT_CIRCLE_RADIUS)
  print_circle::c_center_x#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_X)
  print_circle::c_center_y#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y)
  print_circle::c_color#0 = *((char *)&circle+OFFSET_STRUCT_CIRCLE_COLOR)
  call print_circle
  to:main::@1
main::@1: scope:[main]  from main
  screen_line#30 = phi( main/screen_line#12 )
  screen_idx#31 = phi( main/screen_idx#12 )
  screen_idx#0 = screen_idx#31
  screen_line#0 = screen_line#30
  call print_ln
  to:main::@2
main::@2: scope:[main]  from main::@1
  screen_idx#32 = phi( main::@1/screen_idx#27 )
  screen_line#31 = phi( main::@1/screen_line#26 )
  screen_line#1 = screen_line#31
  screen_idx#1 = screen_idx#32
  print_circle::c_radius#1 = *((unsigned int *)&c2+OFFSET_STRUCT_CIRCLE_RADIUS)
  print_circle::c_center_x#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_X)
  print_circle::c_center_y#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y)
  print_circle::c_color#1 = *((char *)&c2+OFFSET_STRUCT_CIRCLE_COLOR)
  call print_circle
  to:main::@3
main::@3: scope:[main]  from main::@2
  screen_line#32 = phi( main::@2/screen_line#12 )
  screen_idx#33 = phi( main::@2/screen_idx#12 )
  screen_idx#2 = screen_idx#33
  screen_line#2 = screen_line#32
  to:main::@return
main::@return: scope:[main]  from main::@3
  screen_line#33 = phi( main::@3/screen_line#2 )
  screen_idx#34 = phi( main::@3/screen_idx#2 )
  screen_idx#3 = screen_idx#34
  screen_line#3 = screen_line#33
  return 
  to:@return

void print_circle(unsigned int c_radius , unsigned int c_center_x , unsigned int c_center_y , char c_color)
print_circle: scope:[print_circle]  from main main::@2
  print_circle::c_color#9 = phi( main/print_circle::c_color#0, main::@2/print_circle::c_color#1 )
  print_circle::c_center_y#7 = phi( main/print_circle::c_center_y#0, main::@2/print_circle::c_center_y#1 )
  print_circle::c_center_x#5 = phi( main/print_circle::c_center_x#0, main::@2/print_circle::c_center_x#1 )
  print_circle::c_radius#3 = phi( main/print_circle::c_radius#0, main::@2/print_circle::c_radius#1 )
  screen_line#61 = phi( main/screen_line#60, main::@2/screen_line#1 )
  screen_idx#61 = phi( main/screen_idx#60, main::@2/screen_idx#1 )
  print_str::str#0 = print_circle::str
  call print_str
  to:print_circle::@1
print_circle::@1: scope:[print_circle]  from print_circle
  print_circle::c_color#8 = phi( print_circle/print_circle::c_color#9 )
  print_circle::c_center_y#6 = phi( print_circle/print_circle::c_center_y#7 )
  print_circle::c_center_x#4 = phi( print_circle/print_circle::c_center_x#5 )
  print_circle::c_radius#2 = phi( print_circle/print_circle::c_radius#3 )
  screen_line#34 = phi( print_circle/screen_line#22 )
  screen_idx#35 = phi( print_circle/screen_idx#22 )
  screen_idx#4 = screen_idx#35
  screen_line#4 = screen_line#34
  print_uint::i#0 = print_circle::c_radius#2
  call print_uint
  to:print_circle::@2
print_circle::@2: scope:[print_circle]  from print_circle::@1
  print_circle::c_color#7 = phi( print_circle::@1/print_circle::c_color#8 )
  print_circle::c_center_y#5 = phi( print_circle::@1/print_circle::c_center_y#6 )
  print_circle::c_center_x#3 = phi( print_circle::@1/print_circle::c_center_x#4 )
  screen_line#35 = phi( print_circle::@1/screen_line#17 )
  screen_idx#36 = phi( print_circle::@1/screen_idx#17 )
  screen_idx#5 = screen_idx#36
  screen_line#5 = screen_line#35
  print_str::str#1 = print_circle::str1
  call print_str
  to:print_circle::@3
print_circle::@3: scope:[print_circle]  from print_circle::@2
  print_circle::c_color#6 = phi( print_circle::@2/print_circle::c_color#7 )
  print_circle::c_center_y#4 = phi( print_circle::@2/print_circle::c_center_y#5 )
  print_circle::c_center_x#2 = phi( print_circle::@2/print_circle::c_center_x#3 )
  screen_line#36 = phi( print_circle::@2/screen_line#22 )
  screen_idx#37 = phi( print_circle::@2/screen_idx#22 )
  screen_idx#6 = screen_idx#37
  screen_line#6 = screen_line#36
  print_uint::i#1 = print_circle::c_center_x#2
  call print_uint
  to:print_circle::@4
print_circle::@4: scope:[print_circle]  from print_circle::@3
  print_circle::c_color#5 = phi( print_circle::@3/print_circle::c_color#6 )
  print_circle::c_center_y#3 = phi( print_circle::@3/print_circle::c_center_y#4 )
  screen_line#37 = phi( print_circle::@3/screen_line#17 )
  screen_idx#38 = phi( print_circle::@3/screen_idx#17 )
  screen_idx#7 = screen_idx#38
  screen_line#7 = screen_line#37
  print_str::str#2 = print_circle::str2
  call print_str
  to:print_circle::@5
print_circle::@5: scope:[print_circle]  from print_circle::@4
  print_circle::c_color#4 = phi( print_circle::@4/print_circle::c_color#5 )
  print_circle::c_center_y#2 = phi( print_circle::@4/print_circle::c_center_y#3 )
  screen_line#38 = phi( print_circle::@4/screen_line#22 )
  screen_idx#39 = phi( print_circle::@4/screen_idx#22 )
  screen_idx#8 = screen_idx#39
  screen_line#8 = screen_line#38
  print_uint::i#2 = print_circle::c_center_y#2
  call print_uint
  to:print_circle::@6
print_circle::@6: scope:[print_circle]  from print_circle::@5
  print_circle::c_color#3 = phi( print_circle::@5/print_circle::c_color#4 )
  screen_line#39 = phi( print_circle::@5/screen_line#17 )
  screen_idx#40 = phi( print_circle::@5/screen_idx#17 )
  screen_idx#9 = screen_idx#40
  screen_line#9 = screen_line#39
  print_str::str#3 = print_circle::str3
  call print_str
  to:print_circle::@7
print_circle::@7: scope:[print_circle]  from print_circle::@6
  print_circle::c_color#2 = phi( print_circle::@6/print_circle::c_color#3 )
  screen_line#40 = phi( print_circle::@6/screen_line#22 )
  screen_idx#41 = phi( print_circle::@6/screen_idx#22 )
  screen_idx#10 = screen_idx#41
  screen_line#10 = screen_line#40
  print_uchar::c#0 = print_circle::c_color#2
  call print_uchar
  to:print_circle::@8
print_circle::@8: scope:[print_circle]  from print_circle::@7
  screen_line#41 = phi( print_circle::@7/screen_line#20 )
  screen_idx#42 = phi( print_circle::@7/screen_idx#20 )
  screen_idx#11 = screen_idx#42
  screen_line#11 = screen_line#41
  to:print_circle::@return
print_circle::@return: scope:[print_circle]  from print_circle::@8
  screen_line#42 = phi( print_circle::@8/screen_line#11 )
  screen_idx#43 = phi( print_circle::@8/screen_idx#11 )
  screen_idx#12 = screen_idx#43
  screen_line#12 = screen_line#42
  return 
  to:@return

void print_uint(unsigned int i)
print_uint: scope:[print_uint]  from print_circle::@1 print_circle::@3 print_circle::@5
  screen_line#62 = phi( print_circle::@1/screen_line#4, print_circle::@3/screen_line#6, print_circle::@5/screen_line#8 )
  screen_idx#62 = phi( print_circle::@1/screen_idx#4, print_circle::@3/screen_idx#6, print_circle::@5/screen_idx#8 )
  print_uint::i#3 = phi( print_circle::@1/print_uint::i#0, print_circle::@3/print_uint::i#1, print_circle::@5/print_uint::i#2 )
  print_uint::$0 = byte1  print_uint::i#3
  print_uint::$1 = print_uint::$0 >> 4
  print_char::c#0 = HEX[print_uint::$1]
  call print_char
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  print_uint::i#4 = phi( print_uint/print_uint::i#3 )
  screen_line#43 = phi( print_uint/screen_line#24 )
  screen_idx#44 = phi( print_uint/screen_idx#25 )
  screen_idx#13 = screen_idx#44
  screen_line#13 = screen_line#43
  print_uint::$3 = byte1  print_uint::i#4
  print_uint::$4 = print_uint::$3 & $f
  print_char::c#1 = HEX[print_uint::$4]
  call print_char
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  print_uint::i#5 = phi( print_uint::@1/print_uint::i#4 )
  screen_line#44 = phi( print_uint::@1/screen_line#24 )
  screen_idx#45 = phi( print_uint::@1/screen_idx#25 )
  screen_idx#14 = screen_idx#45
  screen_line#14 = screen_line#44
  print_uint::$6 = byte0  print_uint::i#5
  print_uint::$7 = print_uint::$6 >> 4
  print_char::c#2 = HEX[print_uint::$7]
  call print_char
  to:print_uint::@3
print_uint::@3: scope:[print_uint]  from print_uint::@2
  print_uint::i#6 = phi( print_uint::@2/print_uint::i#5 )
  screen_line#45 = phi( print_uint::@2/screen_line#24 )
  screen_idx#46 = phi( print_uint::@2/screen_idx#25 )
  screen_idx#15 = screen_idx#46
  screen_line#15 = screen_line#45
  print_uint::$9 = byte0  print_uint::i#6
  print_uint::$10 = print_uint::$9 & $f
  print_char::c#3 = HEX[print_uint::$10]
  call print_char
  to:print_uint::@4
print_uint::@4: scope:[print_uint]  from print_uint::@3
  screen_line#46 = phi( print_uint::@3/screen_line#24 )
  screen_idx#47 = phi( print_uint::@3/screen_idx#25 )
  screen_idx#16 = screen_idx#47
  screen_line#16 = screen_line#46
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@4
  screen_line#47 = phi( print_uint::@4/screen_line#16 )
  screen_idx#48 = phi( print_uint::@4/screen_idx#16 )
  screen_idx#17 = screen_idx#48
  screen_line#17 = screen_line#47
  return 
  to:@return

void print_uchar(char c)
print_uchar: scope:[print_uchar]  from print_circle::@7
  screen_line#63 = phi( print_circle::@7/screen_line#10 )
  screen_idx#63 = phi( print_circle::@7/screen_idx#10 )
  print_uchar::c#1 = phi( print_circle::@7/print_uchar::c#0 )
  print_uchar::$0 = print_uchar::c#1 >> 4
  print_char::c#4 = HEX[print_uchar::$0]
  call print_char
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  print_uchar::c#2 = phi( print_uchar/print_uchar::c#1 )
  screen_line#48 = phi( print_uchar/screen_line#24 )
  screen_idx#49 = phi( print_uchar/screen_idx#25 )
  screen_idx#18 = screen_idx#49
  screen_line#18 = screen_line#48
  print_uchar::$2 = print_uchar::c#2 & $f
  print_char::c#5 = HEX[print_uchar::$2]
  call print_char
  to:print_uchar::@2
print_uchar::@2: scope:[print_uchar]  from print_uchar::@1
  screen_line#49 = phi( print_uchar::@1/screen_line#24 )
  screen_idx#50 = phi( print_uchar::@1/screen_idx#25 )
  screen_idx#19 = screen_idx#50
  screen_line#19 = screen_line#49
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@2
  screen_line#50 = phi( print_uchar::@2/screen_line#19 )
  screen_idx#51 = phi( print_uchar::@2/screen_idx#19 )
  screen_idx#20 = screen_idx#51
  screen_line#20 = screen_line#50
  return 
  to:@return

void print_str(char *str)
print_str: scope:[print_str]  from print_circle print_circle::@2 print_circle::@4 print_circle::@6
  screen_line#68 = phi( print_circle/screen_line#61, print_circle::@2/screen_line#5, print_circle::@4/screen_line#7, print_circle::@6/screen_line#9 )
  screen_idx#68 = phi( print_circle/screen_idx#61, print_circle::@2/screen_idx#5, print_circle::@4/screen_idx#7, print_circle::@6/screen_idx#9 )
  print_str::str#8 = phi( print_circle/print_str::str#0, print_circle::@2/print_str::str#1, print_circle::@4/print_str::str#2, print_circle::@6/print_str::str#3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  screen_line#65 = phi( print_str/screen_line#68, print_str::@3/screen_line#21 )
  screen_idx#65 = phi( print_str/screen_idx#68, print_str::@3/screen_idx#21 )
  print_str::str#5 = phi( print_str/print_str::str#8, print_str::@3/print_str::str#4 )
  print_str::$1 = 0 != *print_str::str#5
  if(print_str::$1) goto print_str::@2
  to:print_str::@return
print_str::@2: scope:[print_str]  from print_str::@1
  screen_line#64 = phi( print_str::@1/screen_line#65 )
  screen_idx#64 = phi( print_str::@1/screen_idx#65 )
  print_str::str#6 = phi( print_str::@1/print_str::str#5 )
  print_char::c#6 = *print_str::str#6
  call print_char
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  print_str::str#7 = phi( print_str::@2/print_str::str#6 )
  screen_line#51 = phi( print_str::@2/screen_line#24 )
  screen_idx#52 = phi( print_str::@2/screen_idx#25 )
  screen_idx#21 = screen_idx#52
  screen_line#21 = screen_line#51
  print_str::str#4 = ++ print_str::str#7
  to:print_str::@1
print_str::@return: scope:[print_str]  from print_str::@1
  screen_line#52 = phi( print_str::@1/screen_line#65 )
  screen_idx#53 = phi( print_str::@1/screen_idx#65 )
  screen_idx#22 = screen_idx#53
  screen_line#22 = screen_line#52
  return 
  to:@return

void print_char(char c)
print_char: scope:[print_char]  from print_str::@2 print_uchar print_uchar::@1 print_uint print_uint::@1 print_uint::@2 print_uint::@3
  screen_idx#54 = phi( print_str::@2/screen_idx#64, print_uchar/screen_idx#63, print_uchar::@1/screen_idx#18, print_uint/screen_idx#62, print_uint::@1/screen_idx#13, print_uint::@2/screen_idx#14, print_uint::@3/screen_idx#15 )
  screen_line#53 = phi( print_str::@2/screen_line#64, print_uchar/screen_line#63, print_uchar::@1/screen_line#18, print_uint/screen_line#62, print_uint::@1/screen_line#13, print_uint::@2/screen_line#14, print_uint::@3/screen_line#15 )
  print_char::c#7 = phi( print_str::@2/print_char::c#6, print_uchar/print_char::c#4, print_uchar::@1/print_char::c#5, print_uint/print_char::c#0, print_uint::@1/print_char::c#1, print_uint::@2/print_char::c#2, print_uint::@3/print_char::c#3 )
  screen_line#53[screen_idx#54] = print_char::c#7
  screen_idx#23 = ++ screen_idx#54
  print_char::$0 = screen_idx#23 == $28
  print_char::$1 = ! print_char::$0
  if(print_char::$1) goto print_char::@return
  to:print_char::@1
print_char::@1: scope:[print_char]  from print_char
  screen_idx#66 = phi( print_char/screen_idx#23 )
  screen_line#66 = phi( print_char/screen_line#53 )
  call print_ln
  to:print_char::@2
print_char::@2: scope:[print_char]  from print_char::@1
  screen_idx#55 = phi( print_char::@1/screen_idx#27 )
  screen_line#54 = phi( print_char::@1/screen_line#26 )
  screen_line#23 = screen_line#54
  screen_idx#24 = screen_idx#55
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char print_char::@2
  screen_line#55 = phi( print_char/screen_line#53, print_char::@2/screen_line#23 )
  screen_idx#56 = phi( print_char/screen_idx#23, print_char::@2/screen_idx#24 )
  screen_idx#25 = screen_idx#56
  screen_line#24 = screen_line#55
  return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from main::@1 print_char::@1
  screen_line#56 = phi( main::@1/screen_line#0, print_char::@1/screen_line#66 )
  screen_line#25 = screen_line#56 + $28
  screen_idx#26 = 0
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln
  screen_idx#57 = phi( print_ln/screen_idx#26 )
  screen_line#57 = phi( print_ln/screen_line#25 )
  screen_line#26 = screen_line#57
  screen_idx#27 = screen_idx#57
  return 
  to:@return

void __start()
__start: scope:[__start]  from
  to:__start::__init1
__start::__init1: scope:[__start]  from __start
  screen_line#27 = (char *)$400+$28*$a
  screen_idx#28 = 0
  to:__start::@1
__start::@1: scope:[__start]  from __start::__init1
  screen_line#67 = phi( __start::__init1/screen_line#27 )
  screen_idx#67 = phi( __start::__init1/screen_idx#28 )
  call main
  to:__start::@2
__start::@2: scope:[__start]  from __start::@1
  screen_line#58 = phi( __start::@1/screen_line#3 )
  screen_idx#58 = phi( __start::@1/screen_idx#3 )
  screen_idx#29 = screen_idx#58
  screen_line#28 = screen_line#58
  to:__start::@return
__start::@return: scope:[__start]  from __start::@2
  screen_idx#59 = phi( __start::@2/screen_idx#29 )
  screen_line#59 = phi( __start::@2/screen_line#28 )
  screen_line#29 = screen_line#59
  screen_idx#30 = screen_idx#59
  return 
  to:@return

SYMBOL TABLE SSA
__constant char COL_RED = 2
__constant char COL_WHITE = 1
__constant char HEX[] = "0123456789abcdef"
__constant char OFFSET_STRUCT_CIRCLE_CENTER = 2
__constant char OFFSET_STRUCT_CIRCLE_COLOR = 6
__constant char OFFSET_STRUCT_CIRCLE_RADIUS = 0
__constant char OFFSET_STRUCT_POINT_X = 0
__constant char OFFSET_STRUCT_POINT_Y = 2
void __start()
__loadstore struct Circle c2 = { radius: $32, center: { x: $96, y: $15e }, color: COL_WHITE }
__loadstore struct Circle circle = { radius: $64, center: { x: $c8, y: $12c }, color: COL_RED }
void main()
void print_char(char c)
bool print_char::$0
bool print_char::$1
char print_char::c
char print_char::c#0
char print_char::c#1
char print_char::c#2
char print_char::c#3
char print_char::c#4
char print_char::c#5
char print_char::c#6
char print_char::c#7
void print_circle(unsigned int c_radius , unsigned int c_center_x , unsigned int c_center_y , char c_color)
struct Circle print_circle::c
struct Point print_circle::c_center
unsigned int print_circle::c_center_x
unsigned int print_circle::c_center_x#0
unsigned int print_circle::c_center_x#1
unsigned int print_circle::c_center_x#2
unsigned int print_circle::c_center_x#3
unsigned int print_circle::c_center_x#4
unsigned int print_circle::c_center_x#5
unsigned int print_circle::c_center_y
unsigned int print_circle::c_center_y#0
unsigned int print_circle::c_center_y#1
unsigned int print_circle::c_center_y#2
unsigned int print_circle::c_center_y#3
unsigned int print_circle::c_center_y#4
unsigned int print_circle::c_center_y#5
unsigned int print_circle::c_center_y#6
unsigned int print_circle::c_center_y#7
char print_circle::c_color
char print_circle::c_color#0
char print_circle::c_color#1
char print_circle::c_color#2
char print_circle::c_color#3
char print_circle::c_color#4
char print_circle::c_color#5
char print_circle::c_color#6
char print_circle::c_color#7
char print_circle::c_color#8
char print_circle::c_color#9
unsigned int print_circle::c_radius
unsigned int print_circle::c_radius#0
unsigned int print_circle::c_radius#1
unsigned int print_circle::c_radius#2
unsigned int print_circle::c_radius#3
__constant char print_circle::str[3] = "r:"
__constant char print_circle::str1[5] = " c:("
__constant char print_circle::str2[2] = ","
__constant char print_circle::str3[3] = ") "
void print_ln()
void print_str(char *str)
bool print_str::$1
char *print_str::str
char *print_str::str#0
char *print_str::str#1
char *print_str::str#2
char *print_str::str#3
char *print_str::str#4
char *print_str::str#5
char *print_str::str#6
char *print_str::str#7
char *print_str::str#8
void print_uchar(char c)
char print_uchar::$0
number print_uchar::$2
char print_uchar::c
char print_uchar::c#0
char print_uchar::c#1
char print_uchar::c#2
void print_uint(unsigned int i)
char print_uint::$0
char print_uint::$1
number print_uint::$10
char print_uint::$3
number print_uint::$4
char print_uint::$6
char print_uint::$7
char print_uint::$9
unsigned int print_uint::i
unsigned int print_uint::i#0
unsigned int print_uint::i#1
unsigned int print_uint::i#2
unsigned int print_uint::i#3
unsigned int print_uint::i#4
unsigned int print_uint::i#5
unsigned int print_uint::i#6
char screen_idx
char screen_idx#0
char screen_idx#1
char screen_idx#10
char screen_idx#11
char screen_idx#12
char screen_idx#13
char screen_idx#14
char screen_idx#15
char screen_idx#16
char screen_idx#17
char screen_idx#18
char screen_idx#19
char screen_idx#2
char screen_idx#20
char screen_idx#21
char screen_idx#22
char screen_idx#23
char screen_idx#24
char screen_idx#25
char screen_idx#26
char screen_idx#27
char screen_idx#28
char screen_idx#29
char screen_idx#3
char screen_idx#30
char screen_idx#31
char screen_idx#32
char screen_idx#33
char screen_idx#34
char screen_idx#35
char screen_idx#36
char screen_idx#37
char screen_idx#38
char screen_idx#39
char screen_idx#4
char screen_idx#40
char screen_idx#41
char screen_idx#42
char screen_idx#43
char screen_idx#44
char screen_idx#45
char screen_idx#46
char screen_idx#47
char screen_idx#48
char screen_idx#49
char screen_idx#5
char screen_idx#50
char screen_idx#51
char screen_idx#52
char screen_idx#53
char screen_idx#54
char screen_idx#55
char screen_idx#56
char screen_idx#57
char screen_idx#58
char screen_idx#59
char screen_idx#6
char screen_idx#60
char screen_idx#61
char screen_idx#62
char screen_idx#63
char screen_idx#64
char screen_idx#65
char screen_idx#66
char screen_idx#67
char screen_idx#68
char screen_idx#7
char screen_idx#8
char screen_idx#9
char *screen_line
char *screen_line#0
char *screen_line#1
char *screen_line#10
char *screen_line#11
char *screen_line#12
char *screen_line#13
char *screen_line#14
char *screen_line#15
char *screen_line#16
char *screen_line#17
char *screen_line#18
char *screen_line#19
char *screen_line#2
char *screen_line#20
char *screen_line#21
char *screen_line#22
char *screen_line#23
char *screen_line#24
char *screen_line#25
char *screen_line#26
char *screen_line#27
char *screen_line#28
char *screen_line#29
char *screen_line#3
char *screen_line#30
char *screen_line#31
char *screen_line#32
char *screen_line#33
char *screen_line#34
char *screen_line#35
char *screen_line#36
char *screen_line#37
char *screen_line#38
char *screen_line#39
char *screen_line#4
char *screen_line#40
char *screen_line#41
char *screen_line#42
char *screen_line#43
char *screen_line#44
char *screen_line#45
char *screen_line#46
char *screen_line#47
char *screen_line#48
char *screen_line#49
char *screen_line#5
char *screen_line#50
char *screen_line#51
char *screen_line#52
char *screen_line#53
char *screen_line#54
char *screen_line#55
char *screen_line#56
char *screen_line#57
char *screen_line#58
char *screen_line#59
char *screen_line#6
char *screen_line#60
char *screen_line#61
char *screen_line#62
char *screen_line#63
char *screen_line#64
char *screen_line#65
char *screen_line#66
char *screen_line#67
char *screen_line#68
char *screen_line#7
char *screen_line#8
char *screen_line#9

Adding number conversion cast (unumber) 4 in print_uint::$1 = print_uint::$0 >> 4
Adding number conversion cast (unumber) $f in print_uint::$4 = print_uint::$3 & $f
Adding number conversion cast (unumber) print_uint::$4 in print_uint::$4 = print_uint::$3 & (unumber)$f
Adding number conversion cast (unumber) 4 in print_uint::$7 = print_uint::$6 >> 4
Adding number conversion cast (unumber) $f in print_uint::$10 = print_uint::$9 & $f
Adding number conversion cast (unumber) print_uint::$10 in print_uint::$10 = print_uint::$9 & (unumber)$f
Adding number conversion cast (unumber) 4 in print_uchar::$0 = print_uchar::c#1 >> 4
Adding number conversion cast (unumber) $f in print_uchar::$2 = print_uchar::c#2 & $f
Adding number conversion cast (unumber) print_uchar::$2 in print_uchar::$2 = print_uchar::c#2 & (unumber)$f
Adding number conversion cast (unumber) 0 in print_str::$1 = 0 != *print_str::str#5
Adding number conversion cast (unumber) $28 in print_char::$0 = screen_idx#23 == $28
Adding number conversion cast (unumber) $28 in screen_line#25 = screen_line#56 + $28
Adding number conversion cast (unumber) 0 in screen_idx#26 = 0
Adding number conversion cast (unumber) $28*$a in screen_line#27 = (char *)$400+$28*$a
Successful SSA optimization PassNAddNumberTypeConversions
Inlining cast screen_idx#26 = (unumber)0
Successful SSA optimization Pass2InlineCast
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 4
Simplifying constant integer cast $f
Simplifying constant integer cast 0
Simplifying constant integer cast $28
Simplifying constant integer cast $28
Simplifying constant integer cast 0
Simplifying constant pointer cast (char *) 1024
Successful SSA optimization PassNCastSimplification
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) 4
Finalized unsigned number type (char) $f
Finalized unsigned number type (char) 0
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) 0
Successful SSA optimization PassNFinalizeNumberTypeConversions
Inferred type updated to char in print_uint::$4 = print_uint::$3 & $f
Inferred type updated to char in print_uint::$10 = print_uint::$9 & $f
Inferred type updated to char in print_uchar::$2 = print_uchar::c#2 & $f
Inversing boolean not [139] print_char::$1 = screen_idx#23 != $28 from [138] print_char::$0 = screen_idx#23 == $28
Successful SSA optimization Pass2UnaryNotSimplification
Alias screen_idx#0 = screen_idx#31 
Alias screen_line#0 = screen_line#30 
Alias screen_line#1 = screen_line#31 
Alias screen_idx#1 = screen_idx#32 
Alias screen_idx#2 = screen_idx#33 screen_idx#34 screen_idx#3 
Alias screen_line#2 = screen_line#32 screen_line#33 screen_line#3 
Alias print_circle::c_radius#2 = print_circle::c_radius#3 
Alias print_circle::c_center_x#2 = print_circle::c_center_x#4 print_circle::c_center_x#5 print_circle::c_center_x#3 
Alias print_circle::c_center_y#2 = print_circle::c_center_y#6 print_circle::c_center_y#7 print_circle::c_center_y#5 print_circle::c_center_y#4 print_circle::c_center_y#3 
Alias print_circle::c_color#2 = print_circle::c_color#8 print_circle::c_color#9 print_circle::c_color#7 print_circle::c_color#6 print_circle::c_color#5 print_circle::c_color#4 print_circle::c_color#3 
Alias screen_idx#35 = screen_idx#4 
Alias screen_line#34 = screen_line#4 
Alias screen_idx#36 = screen_idx#5 
Alias screen_line#35 = screen_line#5 
Alias screen_idx#37 = screen_idx#6 
Alias screen_line#36 = screen_line#6 
Alias screen_idx#38 = screen_idx#7 
Alias screen_line#37 = screen_line#7 
Alias screen_idx#39 = screen_idx#8 
Alias screen_line#38 = screen_line#8 
Alias screen_idx#40 = screen_idx#9 
Alias screen_line#39 = screen_line#9 
Alias screen_idx#10 = screen_idx#41 
Alias screen_line#10 = screen_line#40 
Alias screen_idx#11 = screen_idx#42 screen_idx#43 screen_idx#12 
Alias screen_line#11 = screen_line#41 screen_line#42 screen_line#12 
Alias print_uint::i#3 = print_uint::i#4 print_uint::i#5 print_uint::i#6 
Alias screen_idx#13 = screen_idx#44 
Alias screen_line#13 = screen_line#43 
Alias screen_idx#14 = screen_idx#45 
Alias screen_line#14 = screen_line#44 
Alias screen_idx#15 = screen_idx#46 
Alias screen_line#15 = screen_line#45 
Alias screen_idx#16 = screen_idx#47 screen_idx#48 screen_idx#17 
Alias screen_line#16 = screen_line#46 screen_line#47 screen_line#17 
Alias print_uchar::c#1 = print_uchar::c#2 
Alias screen_idx#18 = screen_idx#49 
Alias screen_line#18 = screen_line#48 
Alias screen_idx#19 = screen_idx#50 screen_idx#51 screen_idx#20 
Alias screen_line#19 = screen_line#49 screen_line#50 screen_line#20 
Alias print_str::str#5 = print_str::str#6 print_str::str#7 
Alias screen_idx#22 = screen_idx#64 screen_idx#65 screen_idx#53 
Alias screen_line#22 = screen_line#64 screen_line#65 screen_line#52 
Alias screen_idx#21 = screen_idx#52 
Alias screen_line#21 = screen_line#51 
Alias screen_line#53 = screen_line#66 
Alias screen_idx#23 = screen_idx#66 
Alias screen_line#23 = screen_line#54 
Alias screen_idx#24 = screen_idx#55 
Alias screen_idx#25 = screen_idx#56 
Alias screen_line#24 = screen_line#55 
Alias screen_line#25 = screen_line#57 screen_line#26 
Alias screen_idx#26 = screen_idx#57 screen_idx#27 
Alias screen_idx#28 = screen_idx#67 
Alias screen_line#27 = screen_line#67 
Alias screen_idx#29 = screen_idx#58 screen_idx#59 screen_idx#30 
Alias screen_line#28 = screen_line#58 screen_line#59 screen_line#29 
Successful SSA optimization Pass2AliasElimination
Identical Phi Values screen_idx#60 screen_idx#28
Identical Phi Values screen_line#60 screen_line#27
Identical Phi Values screen_idx#0 screen_idx#11
Identical Phi Values screen_line#0 screen_line#11
Identical Phi Values screen_line#1 screen_line#25
Identical Phi Values screen_idx#1 screen_idx#26
Identical Phi Values screen_idx#2 screen_idx#11
Identical Phi Values screen_line#2 screen_line#11
Identical Phi Values screen_idx#35 screen_idx#22
Identical Phi Values screen_line#34 screen_line#22
Identical Phi Values screen_idx#36 screen_idx#16
Identical Phi Values screen_line#35 screen_line#16
Identical Phi Values screen_idx#37 screen_idx#22
Identical Phi Values screen_line#36 screen_line#22
Identical Phi Values screen_idx#38 screen_idx#16
Identical Phi Values screen_line#37 screen_line#16
Identical Phi Values screen_idx#39 screen_idx#22
Identical Phi Values screen_line#38 screen_line#22
Identical Phi Values screen_idx#40 screen_idx#16
Identical Phi Values screen_line#39 screen_line#16
Identical Phi Values screen_idx#10 screen_idx#22
Identical Phi Values screen_line#10 screen_line#22
Identical Phi Values screen_idx#11 screen_idx#19
Identical Phi Values screen_line#11 screen_line#19
Identical Phi Values screen_idx#13 screen_idx#25
Identical Phi Values screen_line#13 screen_line#24
Identical Phi Values screen_idx#14 screen_idx#25
Identical Phi Values screen_line#14 screen_line#24
Identical Phi Values screen_idx#15 screen_idx#25
Identical Phi Values screen_line#15 screen_line#24
Identical Phi Values screen_idx#16 screen_idx#25
Identical Phi Values screen_line#16 screen_line#24
Identical Phi Values print_uchar::c#1 print_uchar::c#0
Identical Phi Values screen_idx#63 screen_idx#10
Identical Phi Values screen_line#63 screen_line#10
Identical Phi Values screen_idx#18 screen_idx#25
Identical Phi Values screen_line#18 screen_line#24
Identical Phi Values screen_idx#19 screen_idx#25
Identical Phi Values screen_line#19 screen_line#24
Identical Phi Values screen_idx#21 screen_idx#25
Identical Phi Values screen_line#21 screen_line#24
Identical Phi Values screen_line#23 screen_line#25
Identical Phi Values screen_idx#24 screen_idx#26
Identical Phi Values screen_idx#29 screen_idx#2
Identical Phi Values screen_line#28 screen_line#2
Successful SSA optimization Pass2IdenticalPhiElimination
Identical Phi Values screen_idx#62 screen_idx#22
Identical Phi Values screen_line#62 screen_line#22
Successful SSA optimization Pass2IdenticalPhiElimination
Simple Condition print_str::$1 [77] if(0!=*print_str::str#5) goto print_str::@2
Simple Condition print_char::$1 [87] if(screen_idx#23!=$28) goto print_char::@return
Successful SSA optimization Pass2ConditionalJumpSimplification
Constant print_str::str#0 = print_circle::str
Constant print_str::str#1 = print_circle::str1
Constant print_str::str#2 = print_circle::str2
Constant print_str::str#3 = print_circle::str3
Constant screen_idx#26 = 0
Constant screen_line#27 = (char *) 1024+(unsigned int)$28*$a
Constant screen_idx#28 = 0
Successful SSA optimization Pass2ConstantIdentification
Simplifying expression containing zero (unsigned int *)&circle in [1] print_circle::c_radius#0 = *((unsigned int *)&circle+OFFSET_STRUCT_CIRCLE_RADIUS)
Simplifying expression containing zero (unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER in [2] print_circle::c_center_x#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_X)
Simplifying expression containing zero (unsigned int *)&c2 in [9] print_circle::c_radius#1 = *((unsigned int *)&c2+OFFSET_STRUCT_CIRCLE_RADIUS)
Simplifying expression containing zero (unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER in [10] print_circle::c_center_x#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_X)
Successful SSA optimization PassNSimplifyExpressionWithZero
Eliminating unused constant OFFSET_STRUCT_CIRCLE_RADIUS
Eliminating unused constant OFFSET_STRUCT_POINT_X
Successful SSA optimization PassNEliminateUnusedVars
Removing unused procedure __start
Removing unused procedure block __start
Removing unused procedure block __start::__init1
Removing unused procedure block __start::@1
Removing unused procedure block __start::@2
Removing unused procedure block __start::@return
Successful SSA optimization PassNEliminateEmptyStart
Inlining constant with var siblings print_str::str#0
Inlining constant with var siblings print_str::str#1
Inlining constant with var siblings print_str::str#2
Inlining constant with var siblings print_str::str#3
Inlining constant with var siblings screen_idx#26
Inlining constant with var siblings screen_line#27
Inlining constant with var siblings screen_idx#28
Constant inlined print_str::str#0 = print_circle::str
Constant inlined print_str::str#3 = print_circle::str3
Constant inlined screen_idx#28 = 0
Constant inlined print_str::str#2 = print_circle::str2
Constant inlined print_str::str#1 = print_circle::str1
Constant inlined screen_idx#26 = 0
Constant inlined screen_line#27 = (char *) 1024+(unsigned int)$28*$a
Successful SSA optimization Pass2ConstantInlining
Identical Phi Values screen_idx#61 0
Successful SSA optimization Pass2IdenticalPhiElimination
Finalized unsigned number type (char) $28
Finalized unsigned number type (char) $a
Successful SSA optimization PassNFinalizeNumberTypeConversions
Added new block during phi lifting print_char::@3(between print_char and print_char::@return)
Adding NOP phi() at start of main::@3
Adding NOP phi() at start of print_circle::@8
Adding NOP phi() at start of print_uint::@4
Adding NOP phi() at start of print_uchar::@2
CALL GRAPH
Calls in [main] to print_circle:8 print_ln:10 print_circle:20 
Calls in [print_circle] to print_str:25 print_uint:28 print_str:31 print_uint:34 print_str:37 print_uint:40 print_str:43 print_uchar:45 
Calls in [print_str] to print_char:62 
Calls in [print_uint] to print_char:74 print_char:81 print_char:88 print_char:95 
Calls in [print_uchar] to print_char:103 print_char:109 
Calls in [print_char] to print_ln:117 

Created 18 initial phi equivalence classes
Coalesced [4] print_circle::c_radius#4 = print_circle::c_radius#0
Coalesced [5] print_circle::c_center_x#6 = print_circle::c_center_x#0
Coalesced [6] print_circle::c_center_y#8 = print_circle::c_center_y#0
Coalesced [7] print_circle::c_color#10 = print_circle::c_color#0
Coalesced [9] screen_line#85 = screen_line#24
Coalesced [15] screen_line#69 = screen_line#25
Coalesced [16] print_circle::c_radius#5 = print_circle::c_radius#1
Coalesced [17] print_circle::c_center_x#7 = print_circle::c_center_x#1
Coalesced [18] print_circle::c_center_y#9 = print_circle::c_center_y#1
Coalesced [19] print_circle::c_color#11 = print_circle::c_color#1
Coalesced [24] screen_line#70 = screen_line#61
Coalesced [27] print_uint::i#7 = print_uint::i#0
Coalesced [29] screen_idx#69 = screen_idx#25
Coalesced [30] screen_line#71 = screen_line#24
Coalesced [33] print_uint::i#8 = print_uint::i#1
Coalesced (already) [35] screen_idx#70 = screen_idx#25
Coalesced (already) [36] screen_line#72 = screen_line#24
Coalesced [39] print_uint::i#9 = print_uint::i#2
Coalesced (already) [41] screen_idx#71 = screen_idx#25
Coalesced (already) [42] screen_line#73 = screen_line#24
Coalesced [52] print_str::str#9 = print_str::str#8
Coalesced [53] screen_idx#72 = screen_idx#68
Coalesced [54] screen_line#74 = screen_line#68
Coalesced [59] print_char::c#8 = print_char::c#6
Coalesced [60] screen_line#76 = screen_line#22
Coalesced [61] screen_idx#74 = screen_idx#22
Coalesced [64] print_str::str#10 = print_str::str#4
Coalesced (already) [65] screen_idx#73 = screen_idx#25
Coalesced (already) [66] screen_line#75 = screen_line#24
Coalesced [71] print_char::c#11 = print_char::c#0
Coalesced (already) [72] screen_line#79 = screen_line#22
Coalesced (already) [73] screen_idx#77 = screen_idx#22
Coalesced [78] print_char::c#12 = print_char::c#1
Coalesced (already) [79] screen_line#80 = screen_line#24
Coalesced (already) [80] screen_idx#78 = screen_idx#25
Coalesced [85] print_char::c#13 = print_char::c#2
Coalesced (already) [86] screen_line#81 = screen_line#24
Coalesced (already) [87] screen_idx#79 = screen_idx#25
Coalesced [92] print_char::c#14 = print_char::c#3
Coalesced (already) [93] screen_line#82 = screen_line#24
Coalesced (already) [94] screen_idx#80 = screen_idx#25
Coalesced [100] print_char::c#9 = print_char::c#4
Coalesced (already) [101] screen_line#77 = screen_line#22
Coalesced (already) [102] screen_idx#75 = screen_idx#22
Coalesced [106] print_char::c#10 = print_char::c#5
Coalesced (already) [107] screen_line#78 = screen_line#24
Coalesced (already) [108] screen_idx#76 = screen_idx#25
Coalesced (already) [116] screen_line#86 = screen_line#53
Coalesced (already) [118] screen_line#84 = screen_line#25
Coalesced [121] screen_idx#81 = screen_idx#23
Coalesced (already) [122] screen_line#83 = screen_line#53
Coalesced down to 9 phi equivalence classes
Culled Empty Block label main::@3
Culled Empty Block label print_circle::@8
Culled Empty Block label print_uint::@4
Culled Empty Block label print_uchar::@2
Culled Empty Block label print_char::@2
Culled Empty Block label print_char::@3
Adding NOP phi() at start of main::@1
Adding NOP phi() at start of print_circle::@2
Adding NOP phi() at start of print_circle::@4
Adding NOP phi() at start of print_circle::@6
Adding NOP phi() at start of print_char::@1

FINAL CONTROL FLOW GRAPH

void main()
main: scope:[main]  from
  [0] print_circle::c_radius#0 = *((unsigned int *)&circle)
  [1] print_circle::c_center_x#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER)
  [2] print_circle::c_center_y#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y)
  [3] print_circle::c_color#0 = *((char *)&circle+OFFSET_STRUCT_CIRCLE_COLOR)
  [4] call print_circle
  to:main::@1
main::@1: scope:[main]  from main
  [5] phi()
  [6] call print_ln
  to:main::@2
main::@2: scope:[main]  from main::@1
  [7] print_circle::c_radius#1 = *((unsigned int *)&c2)
  [8] print_circle::c_center_x#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER)
  [9] print_circle::c_center_y#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y)
  [10] print_circle::c_color#1 = *((char *)&c2+OFFSET_STRUCT_CIRCLE_COLOR)
  [11] call print_circle
  to:main::@return
main::@return: scope:[main]  from main::@2
  [12] return 
  to:@return

void print_circle(unsigned int c_radius , unsigned int c_center_x , unsigned int c_center_y , char c_color)
print_circle: scope:[print_circle]  from main main::@2
  [13] print_circle::c_color#2 = phi( main/print_circle::c_color#0, main::@2/print_circle::c_color#1 )
  [13] print_circle::c_center_y#2 = phi( main/print_circle::c_center_y#0, main::@2/print_circle::c_center_y#1 )
  [13] print_circle::c_center_x#2 = phi( main/print_circle::c_center_x#0, main::@2/print_circle::c_center_x#1 )
  [13] print_circle::c_radius#2 = phi( main/print_circle::c_radius#0, main::@2/print_circle::c_radius#1 )
  [13] screen_line#61 = phi( main/(char *) 1024+(unsigned int)$28*$a, main::@2/screen_line#25 )
  [14] call print_str
  to:print_circle::@1
print_circle::@1: scope:[print_circle]  from print_circle
  [15] print_uint::i#0 = print_circle::c_radius#2
  [16] call print_uint
  to:print_circle::@2
print_circle::@2: scope:[print_circle]  from print_circle::@1
  [17] phi()
  [18] call print_str
  to:print_circle::@3
print_circle::@3: scope:[print_circle]  from print_circle::@2
  [19] print_uint::i#1 = print_circle::c_center_x#2
  [20] call print_uint
  to:print_circle::@4
print_circle::@4: scope:[print_circle]  from print_circle::@3
  [21] phi()
  [22] call print_str
  to:print_circle::@5
print_circle::@5: scope:[print_circle]  from print_circle::@4
  [23] print_uint::i#2 = print_circle::c_center_y#2
  [24] call print_uint
  to:print_circle::@6
print_circle::@6: scope:[print_circle]  from print_circle::@5
  [25] phi()
  [26] call print_str
  to:print_circle::@7
print_circle::@7: scope:[print_circle]  from print_circle::@6
  [27] print_uchar::c#0 = print_circle::c_color#2
  [28] call print_uchar
  to:print_circle::@return
print_circle::@return: scope:[print_circle]  from print_circle::@7
  [29] return 
  to:@return

void print_ln()
print_ln: scope:[print_ln]  from main::@1 print_char::@1
  [30] screen_line#56 = phi( main::@1/screen_line#24, print_char::@1/screen_line#53 )
  [31] screen_line#25 = screen_line#56 + $28
  to:print_ln::@return
print_ln::@return: scope:[print_ln]  from print_ln
  [32] return 
  to:@return

void print_str(char *str)
print_str: scope:[print_str]  from print_circle print_circle::@2 print_circle::@4 print_circle::@6
  [33] screen_line#68 = phi( print_circle/screen_line#61, print_circle::@2/screen_line#24, print_circle::@4/screen_line#24, print_circle::@6/screen_line#24 )
  [33] screen_idx#68 = phi( print_circle/0, print_circle::@2/screen_idx#25, print_circle::@4/screen_idx#25, print_circle::@6/screen_idx#25 )
  [33] print_str::str#8 = phi( print_circle/print_circle::str, print_circle::@2/print_circle::str1, print_circle::@4/print_circle::str2, print_circle::@6/print_circle::str3 )
  to:print_str::@1
print_str::@1: scope:[print_str]  from print_str print_str::@3
  [34] screen_line#22 = phi( print_str/screen_line#68, print_str::@3/screen_line#24 )
  [34] screen_idx#22 = phi( print_str/screen_idx#68, print_str::@3/screen_idx#25 )
  [34] print_str::str#5 = phi( print_str/print_str::str#8, print_str::@3/print_str::str#4 )
  [35] if(0!=*print_str::str#5) goto print_str::@2
  to:print_str::@return
print_str::@return: scope:[print_str]  from print_str::@1
  [36] return 
  to:@return
print_str::@2: scope:[print_str]  from print_str::@1
  [37] print_char::c#6 = *print_str::str#5
  [38] call print_char
  to:print_str::@3
print_str::@3: scope:[print_str]  from print_str::@2
  [39] print_str::str#4 = ++ print_str::str#5
  to:print_str::@1

void print_uint(unsigned int i)
print_uint: scope:[print_uint]  from print_circle::@1 print_circle::@3 print_circle::@5
  [40] print_uint::i#3 = phi( print_circle::@1/print_uint::i#0, print_circle::@3/print_uint::i#1, print_circle::@5/print_uint::i#2 )
  [41] print_uint::$0 = byte1  print_uint::i#3
  [42] print_uint::$1 = print_uint::$0 >> 4
  [43] print_char::c#0 = HEX[print_uint::$1]
  [44] call print_char
  to:print_uint::@1
print_uint::@1: scope:[print_uint]  from print_uint
  [45] print_uint::$3 = byte1  print_uint::i#3
  [46] print_uint::$4 = print_uint::$3 & $f
  [47] print_char::c#1 = HEX[print_uint::$4]
  [48] call print_char
  to:print_uint::@2
print_uint::@2: scope:[print_uint]  from print_uint::@1
  [49] print_uint::$6 = byte0  print_uint::i#3
  [50] print_uint::$7 = print_uint::$6 >> 4
  [51] print_char::c#2 = HEX[print_uint::$7]
  [52] call print_char
  to:print_uint::@3
print_uint::@3: scope:[print_uint]  from print_uint::@2
  [53] print_uint::$9 = byte0  print_uint::i#3
  [54] print_uint::$10 = print_uint::$9 & $f
  [55] print_char::c#3 = HEX[print_uint::$10]
  [56] call print_char
  to:print_uint::@return
print_uint::@return: scope:[print_uint]  from print_uint::@3
  [57] return 
  to:@return

void print_uchar(char c)
print_uchar: scope:[print_uchar]  from print_circle::@7
  [58] print_uchar::$0 = print_uchar::c#0 >> 4
  [59] print_char::c#4 = HEX[print_uchar::$0]
  [60] call print_char
  to:print_uchar::@1
print_uchar::@1: scope:[print_uchar]  from print_uchar
  [61] print_uchar::$2 = print_uchar::c#0 & $f
  [62] print_char::c#5 = HEX[print_uchar::$2]
  [63] call print_char
  to:print_uchar::@return
print_uchar::@return: scope:[print_uchar]  from print_uchar::@1
  [64] return 
  to:@return

void print_char(char c)
print_char: scope:[print_char]  from print_str::@2 print_uchar print_uchar::@1 print_uint print_uint::@1 print_uint::@2 print_uint::@3
  [65] screen_idx#54 = phi( print_str::@2/screen_idx#22, print_uchar/screen_idx#22, print_uchar::@1/screen_idx#25, print_uint/screen_idx#22, print_uint::@1/screen_idx#25, print_uint::@2/screen_idx#25, print_uint::@3/screen_idx#25 )
  [65] screen_line#53 = phi( print_str::@2/screen_line#22, print_uchar/screen_line#22, print_uchar::@1/screen_line#24, print_uint/screen_line#22, print_uint::@1/screen_line#24, print_uint::@2/screen_line#24, print_uint::@3/screen_line#24 )
  [65] print_char::c#7 = phi( print_str::@2/print_char::c#6, print_uchar/print_char::c#4, print_uchar::@1/print_char::c#5, print_uint/print_char::c#0, print_uint::@1/print_char::c#1, print_uint::@2/print_char::c#2, print_uint::@3/print_char::c#3 )
  [66] screen_line#53[screen_idx#54] = print_char::c#7
  [67] screen_idx#23 = ++ screen_idx#54
  [68] if(screen_idx#23!=$28) goto print_char::@return
  to:print_char::@1
print_char::@1: scope:[print_char]  from print_char
  [69] phi()
  [70] call print_ln
  to:print_char::@return
print_char::@return: scope:[print_char]  from print_char print_char::@1
  [71] screen_line#24 = phi( print_char/screen_line#53, print_char::@1/screen_line#25 )
  [71] screen_idx#25 = phi( print_char/screen_idx#23, print_char::@1/0 )
  [72] return 
  to:@return

null depth in calling loop Loop head: print_str::@1 tails: print_str::@3 blocks: print_str::@3 print_str::@2 print_str::@1  in scope print_char

VARIABLE REGISTER WEIGHTS
__loadstore struct Circle c2 = { radius: $32, center: { x: $96, y: $15e }, color: COL_WHITE }
__loadstore struct Circle circle = { radius: $64, center: { x: $c8, y: $12c }, color: COL_RED }
void main()
void print_char(char c)
char print_char::c
char print_char::c#0 // 202.0
char print_char::c#1 // 202.0
char print_char::c#2 // 202.0
char print_char::c#3 // 202.0
char print_char::c#4 // 202.0
char print_char::c#5 // 202.0
char print_char::c#6 // 2002.0
char print_char::c#7 // 11608.0
void print_circle(unsigned int c_radius , unsigned int c_center_x , unsigned int c_center_y , char c_color)
struct Circle print_circle::c
struct Point print_circle::c_center
unsigned int print_circle::c_center_x
unsigned int print_circle::c_center_x#0 // 1.3333333333333333
unsigned int print_circle::c_center_x#1 // 1.3333333333333333
unsigned int print_circle::c_center_x#2 // 2.5
unsigned int print_circle::c_center_y
unsigned int print_circle::c_center_y#0 // 2.0
unsigned int print_circle::c_center_y#1 // 2.0
unsigned int print_circle::c_center_y#2 // 1.5
char print_circle::c_color
char print_circle::c_color#0 // 4.0
char print_circle::c_color#1 // 4.0
char print_circle::c_color#2 // 1.0714285714285714
unsigned int print_circle::c_radius
unsigned int print_circle::c_radius#0 // 1.0
unsigned int print_circle::c_radius#1 // 1.0
unsigned int print_circle::c_radius#2 // 7.5
void print_ln()
void print_str(char *str)
char *print_str::str
char *print_str::str#4 // 2002.0
char *print_str::str#5 // 1026.25
char *print_str::str#8 // 101.0
void print_uchar(char c)
char print_uchar::$0 // 202.0
char print_uchar::$2 // 202.0
char print_uchar::c
char print_uchar::c#0 // 53.25
void print_uint(unsigned int i)
char print_uint::$0 // 202.0
char print_uint::$1 // 202.0
char print_uint::$10 // 202.0
char print_uint::$3 // 202.0
char print_uint::$4 // 202.0
char print_uint::$6 // 202.0
char print_uint::$7 // 202.0
char print_uint::$9 // 202.0
unsigned int print_uint::i
unsigned int print_uint::i#0 // 22.0
unsigned int print_uint::i#1 // 22.0
unsigned int print_uint::i#2 // 22.0
unsigned int print_uint::i#3 // 33.61538461538461
char screen_idx
char screen_idx#22 // 128.05555555555557
char screen_idx#23 // 15001.5
char screen_idx#25 // 423.66666666666663
char screen_idx#54 // 10804.5
char screen_idx#68 // 134.0
char *screen_line
char *screen_line#22 // 128.05555555555557
char *screen_line#24 // 649.7575757575758
char *screen_line#25 // 13750.5
char *screen_line#53 // 6321.999999999999
char *screen_line#56 // 110004.0
char *screen_line#61 // 13.0
char *screen_line#68 // 145.0

Initial phi equivalence classes
[ print_circle::c_radius#2 print_circle::c_radius#0 print_circle::c_radius#1 ]
[ print_circle::c_center_x#2 print_circle::c_center_x#0 print_circle::c_center_x#1 ]
[ print_circle::c_center_y#2 print_circle::c_center_y#0 print_circle::c_center_y#1 ]
[ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ]
[ print_str::str#5 print_str::str#8 print_str::str#4 ]
[ screen_line#22 screen_line#68 screen_line#61 screen_line#25 screen_line#56 screen_line#24 screen_line#53 ]
[ print_uint::i#3 print_uint::i#0 print_uint::i#1 print_uint::i#2 ]
[ print_char::c#7 print_char::c#6 print_char::c#4 print_char::c#5 print_char::c#0 print_char::c#1 print_char::c#2 print_char::c#3 ]
[ screen_idx#54 screen_idx#22 screen_idx#68 screen_idx#25 screen_idx#23 ]
Added variable print_uchar::c#0 to live range equivalence class [ print_uchar::c#0 ]
Added variable print_uint::$0 to live range equivalence class [ print_uint::$0 ]
Added variable print_uint::$1 to live range equivalence class [ print_uint::$1 ]
Added variable print_uint::$3 to live range equivalence class [ print_uint::$3 ]
Added variable print_uint::$4 to live range equivalence class [ print_uint::$4 ]
Added variable print_uint::$6 to live range equivalence class [ print_uint::$6 ]
Added variable print_uint::$7 to live range equivalence class [ print_uint::$7 ]
Added variable print_uint::$9 to live range equivalence class [ print_uint::$9 ]
Added variable print_uint::$10 to live range equivalence class [ print_uint::$10 ]
Added variable print_uchar::$0 to live range equivalence class [ print_uchar::$0 ]
Added variable print_uchar::$2 to live range equivalence class [ print_uchar::$2 ]
Added variable circle to live range equivalence class [ circle ]
Added variable c2 to live range equivalence class [ c2 ]
Complete equivalence classes
[ print_circle::c_radius#2 print_circle::c_radius#0 print_circle::c_radius#1 ]
[ print_circle::c_center_x#2 print_circle::c_center_x#0 print_circle::c_center_x#1 ]
[ print_circle::c_center_y#2 print_circle::c_center_y#0 print_circle::c_center_y#1 ]
[ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ]
[ print_str::str#5 print_str::str#8 print_str::str#4 ]
[ screen_line#22 screen_line#68 screen_line#61 screen_line#25 screen_line#56 screen_line#24 screen_line#53 ]
[ print_uint::i#3 print_uint::i#0 print_uint::i#1 print_uint::i#2 ]
[ print_char::c#7 print_char::c#6 print_char::c#4 print_char::c#5 print_char::c#0 print_char::c#1 print_char::c#2 print_char::c#3 ]
[ screen_idx#54 screen_idx#22 screen_idx#68 screen_idx#25 screen_idx#23 ]
[ print_uchar::c#0 ]
[ print_uint::$0 ]
[ print_uint::$1 ]
[ print_uint::$3 ]
[ print_uint::$4 ]
[ print_uint::$6 ]
[ print_uint::$7 ]
[ print_uint::$9 ]
[ print_uint::$10 ]
[ print_uchar::$0 ]
[ print_uchar::$2 ]
[ circle ]
[ c2 ]
Allocated zp[2]:2 [ screen_line#22 screen_line#68 screen_line#61 screen_line#25 screen_line#56 screen_line#24 screen_line#53 ]
Allocated zp[1]:4 [ screen_idx#54 screen_idx#22 screen_idx#68 screen_idx#25 screen_idx#23 ]
Allocated zp[1]:5 [ print_char::c#7 print_char::c#6 print_char::c#4 print_char::c#5 print_char::c#0 print_char::c#1 print_char::c#2 print_char::c#3 ]
Allocated zp[2]:6 [ print_str::str#5 print_str::str#8 print_str::str#4 ]
Allocated zp[1]:8 [ print_uint::$0 ]
Allocated zp[1]:9 [ print_uint::$1 ]
Allocated zp[1]:10 [ print_uint::$3 ]
Allocated zp[1]:11 [ print_uint::$4 ]
Allocated zp[1]:12 [ print_uint::$6 ]
Allocated zp[1]:13 [ print_uint::$7 ]
Allocated zp[1]:14 [ print_uint::$9 ]
Allocated zp[1]:15 [ print_uint::$10 ]
Allocated zp[1]:16 [ print_uchar::$0 ]
Allocated zp[1]:17 [ print_uchar::$2 ]
Allocated zp[2]:18 [ print_uint::i#3 print_uint::i#0 print_uint::i#1 print_uint::i#2 ]
Allocated zp[1]:20 [ print_uchar::c#0 ]
Allocated zp[2]:21 [ print_circle::c_radius#2 print_circle::c_radius#0 print_circle::c_radius#1 ]
Allocated zp[1]:23 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ]
Allocated zp[2]:24 [ print_circle::c_center_y#2 print_circle::c_center_y#0 print_circle::c_center_y#1 ]
Allocated zp[2]:26 [ print_circle::c_center_x#2 print_circle::c_center_x#0 print_circle::c_center_x#1 ]
Allocated mem[7] [ circle ]
Allocated mem[7] [ c2 ]
REGISTER UPLIFT POTENTIAL REGISTERS
Statement [0] print_circle::c_radius#0 = *((unsigned int *)&circle) [ print_circle::c_radius#0 circle c2 ] (  [ print_circle::c_radius#0 circle c2 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [1] print_circle::c_center_x#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER) [ print_circle::c_radius#0 print_circle::c_center_x#0 circle c2 ] (  [ print_circle::c_radius#0 print_circle::c_center_x#0 circle c2 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [2] print_circle::c_center_y#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y) [ print_circle::c_radius#0 print_circle::c_center_x#0 circle print_circle::c_center_y#0 c2 ] (  [ print_circle::c_radius#0 print_circle::c_center_x#0 circle print_circle::c_center_y#0 c2 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [7] print_circle::c_radius#1 = *((unsigned int *)&c2) [ print_circle::c_radius#1 c2 screen_line#25 ] (  [ print_circle::c_radius#1 c2 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [8] print_circle::c_center_x#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER) [ print_circle::c_radius#1 c2 print_circle::c_center_x#1 screen_line#25 ] (  [ print_circle::c_radius#1 c2 print_circle::c_center_x#1 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [9] print_circle::c_center_y#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y) [ print_circle::c_radius#1 c2 print_circle::c_center_x#1 print_circle::c_center_y#1 screen_line#25 ] (  [ print_circle::c_radius#1 c2 print_circle::c_center_x#1 print_circle::c_center_y#1 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [15] print_uint::i#0 = print_circle::c_radius#2 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#0 screen_idx#22 screen_line#22 ] ( print_circle:4 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#0 screen_idx#22 screen_line#22 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } }  print_circle:11 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#0 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:23 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ]
Removing always clobbered register reg byte a as potential for zp[1]:4 [ screen_idx#54 screen_idx#22 screen_idx#68 screen_idx#25 screen_idx#23 ]
Statement [19] print_uint::i#1 = print_circle::c_center_x#2 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#1 screen_idx#22 screen_line#22 ] ( print_circle:4 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#1 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } }  print_circle:11 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#1 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } }  ) always clobbers reg byte a 
Statement [23] print_uint::i#2 = print_circle::c_center_y#2 [ print_circle::c_color#2 print_uint::i#2 screen_idx#22 screen_line#22 ] ( print_circle:4 [ c2 print_circle::c_color#2 print_uint::i#2 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } }  print_circle:11 [ print_circle::c_color#2 print_uint::i#2 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } }  ) always clobbers reg byte a 
Statement [31] screen_line#25 = screen_line#56 + $28 [ screen_line#25 ] ( print_ln:6 [ c2 screen_line#25 ] { { screen_line#24 = screen_line#56 } }  print_circle:4::print_str:14::print_char:38::print_ln:70 [ c2 print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_line#61 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:14::print_char:38::print_ln:70 [ print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { screen_line#25 = screen_line#61 screen_line#68 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:18::print_char:38::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:18::print_char:38::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:22::print_char:38::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:22::print_char:38::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:26::print_char:38::print_ln:70 [ c2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:26::print_char:38::print_ln:70 [ print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:44::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:44::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:44::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:44::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:44::print_ln:70 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:44::print_ln:70 [ print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:48::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:48::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:48::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:48::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:48::print_ln:70 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:48::print_ln:70 [ print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:52::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:52::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:52::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:52::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:52::print_ln:70 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:52::print_ln:70 [ print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:56::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#25 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:56::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:56::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:56::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:56::print_ln:70 [ c2 print_circle::c_color#2 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:56::print_ln:70 [ print_circle::c_color#2 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uchar:28::print_char:60::print_ln:70 [ c2 print_uchar::c#0 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uchar:28::print_char:60::print_ln:70 [ print_uchar::c#0 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uchar:28::print_char:63::print_ln:70 [ c2 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uchar:28::print_char:63::print_ln:70 [ screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  ) always clobbers reg byte a 
Removing always clobbered register reg byte a as potential for zp[1]:20 [ print_uchar::c#0 ]
Statement [35] if(0!=*print_str::str#5) goto print_str::@2 [ print_str::str#5 screen_idx#22 screen_line#22 ] ( print_circle:4::print_str:14 [ c2 print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_line#61 = screen_line#68 } }  print_circle:11::print_str:14 [ print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 screen_line#68 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } }  print_circle:4::print_str:18 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:11::print_str:18 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:4::print_str:22 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:11::print_str:22 [ print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:4::print_str:26 [ c2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:11::print_str:26 [ print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  ) always clobbers reg byte a reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:23 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ]
Removing always clobbered register reg byte y as potential for zp[1]:4 [ screen_idx#54 screen_idx#22 screen_idx#68 screen_idx#25 screen_idx#23 ]
Statement [37] print_char::c#6 = *print_str::str#5 [ print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] ( print_circle:4::print_str:14 [ c2 print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_line#61 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:14 [ print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { screen_line#25 = screen_line#61 screen_line#68 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:18 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:18 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:22 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:22 [ print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:26 [ c2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:26 [ print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  ) always clobbers reg byte a reg byte y 
Statement [42] print_uint::$1 = print_uint::$0 >> 4 [ screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] ( print_circle:4::print_uint:16 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:16 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:20 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:20 [ print_circle::c_center_y#2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:24 [ c2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:24 [ print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  ) always clobbers reg byte a 
Statement [50] print_uint::$7 = print_uint::$6 >> 4 [ screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] ( print_circle:4::print_uint:16 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20 [ print_circle::c_center_y#2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24 [ c2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24 [ print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  ) always clobbers reg byte a 
Statement [58] print_uchar::$0 = print_uchar::c#0 >> 4 [ print_uchar::c#0 screen_idx#22 screen_line#22 print_uchar::$0 ] ( print_circle:4::print_uchar:28 [ c2 print_uchar::c#0 screen_idx#22 screen_line#22 print_uchar::$0 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uchar:28 [ print_uchar::c#0 screen_idx#22 screen_line#22 print_uchar::$0 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  ) always clobbers reg byte a 
Statement [61] print_uchar::$2 = print_uchar::c#0 & $f [ screen_line#24 screen_idx#25 print_uchar::$2 ] ( print_circle:4::print_uchar:28 [ c2 screen_line#24 screen_idx#25 print_uchar::$2 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uchar:28 [ screen_line#24 screen_idx#25 print_uchar::$2 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  ) always clobbers reg byte a 
Statement [66] screen_line#53[screen_idx#54] = print_char::c#7 [ screen_line#53 screen_idx#54 ] ( print_circle:4::print_str:14::print_char:38 [ c2 print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_line#61 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:14::print_char:38 [ print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 screen_line#68 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:18::print_char:38 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:18::print_char:38 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:22::print_char:38 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:22::print_char:38 [ print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:26::print_char:38 [ c2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:26::print_char:38 [ print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:44 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:44 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:44 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:44 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:44 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:44 [ print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:48 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:48 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:48 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:48 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:48 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:48 [ print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:52 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:52 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:52 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:52 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:52 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:52 [ print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:56 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:56 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:56 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:56 [ print_circle::c_center_y#2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:56 [ c2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:56 [ print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uchar:28::print_char:60 [ c2 print_uchar::c#0 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uchar:28::print_char:60 [ print_uchar::c#0 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uchar:28::print_char:63 [ c2 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uchar:28::print_char:63 [ screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  ) always clobbers reg byte y 
Removing always clobbered register reg byte y as potential for zp[1]:20 [ print_uchar::c#0 ]
Statement [0] print_circle::c_radius#0 = *((unsigned int *)&circle) [ print_circle::c_radius#0 circle c2 ] (  [ print_circle::c_radius#0 circle c2 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [1] print_circle::c_center_x#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER) [ print_circle::c_radius#0 print_circle::c_center_x#0 circle c2 ] (  [ print_circle::c_radius#0 print_circle::c_center_x#0 circle c2 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [2] print_circle::c_center_y#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y) [ print_circle::c_radius#0 print_circle::c_center_x#0 circle print_circle::c_center_y#0 c2 ] (  [ print_circle::c_radius#0 print_circle::c_center_x#0 circle print_circle::c_center_y#0 c2 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [7] print_circle::c_radius#1 = *((unsigned int *)&c2) [ print_circle::c_radius#1 c2 screen_line#25 ] (  [ print_circle::c_radius#1 c2 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [8] print_circle::c_center_x#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER) [ print_circle::c_radius#1 c2 print_circle::c_center_x#1 screen_line#25 ] (  [ print_circle::c_radius#1 c2 print_circle::c_center_x#1 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [9] print_circle::c_center_y#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y) [ print_circle::c_radius#1 c2 print_circle::c_center_x#1 print_circle::c_center_y#1 screen_line#25 ] (  [ print_circle::c_radius#1 c2 print_circle::c_center_x#1 print_circle::c_center_y#1 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } }  ) always clobbers reg byte a 
Statement [15] print_uint::i#0 = print_circle::c_radius#2 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#0 screen_idx#22 screen_line#22 ] ( print_circle:4 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#0 screen_idx#22 screen_line#22 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } }  print_circle:11 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#0 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } }  ) always clobbers reg byte a 
Statement [19] print_uint::i#1 = print_circle::c_center_x#2 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#1 screen_idx#22 screen_line#22 ] ( print_circle:4 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#1 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } }  print_circle:11 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#1 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } }  ) always clobbers reg byte a 
Statement [23] print_uint::i#2 = print_circle::c_center_y#2 [ print_circle::c_color#2 print_uint::i#2 screen_idx#22 screen_line#22 ] ( print_circle:4 [ c2 print_circle::c_color#2 print_uint::i#2 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } }  print_circle:11 [ print_circle::c_color#2 print_uint::i#2 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } }  ) always clobbers reg byte a 
Statement [31] screen_line#25 = screen_line#56 + $28 [ screen_line#25 ] ( print_ln:6 [ c2 screen_line#25 ] { { screen_line#24 = screen_line#56 } }  print_circle:4::print_str:14::print_char:38::print_ln:70 [ c2 print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_line#61 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:14::print_char:38::print_ln:70 [ print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { screen_line#25 = screen_line#61 screen_line#68 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:18::print_char:38::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:18::print_char:38::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:22::print_char:38::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:22::print_char:38::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:26::print_char:38::print_ln:70 [ c2 print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:26::print_char:38::print_ln:70 [ print_circle::c_color#2 print_str::str#5 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:44::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:44::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:44::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:44::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:44::print_ln:70 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:44::print_ln:70 [ print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:48::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:48::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:48::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:48::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:48::print_ln:70 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:48::print_ln:70 [ print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:52::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:52::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:52::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:52::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:52::print_ln:70 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:52::print_ln:70 [ print_circle::c_color#2 print_uint::i#3 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:56::print_ln:70 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#25 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:56::print_ln:70 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:56::print_ln:70 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:56::print_ln:70 [ print_circle::c_center_y#2 print_circle::c_color#2 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:56::print_ln:70 [ c2 print_circle::c_color#2 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:56::print_ln:70 [ print_circle::c_color#2 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uchar:28::print_char:60::print_ln:70 [ c2 print_uchar::c#0 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uchar:28::print_char:60::print_ln:70 [ print_uchar::c#0 screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 screen_line#56 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uchar:28::print_char:63::print_ln:70 [ c2 screen_line#25 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uchar:28::print_char:63::print_ln:70 [ screen_line#25 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 screen_line#56 } { screen_idx#25 = screen_idx#54 } }  ) always clobbers reg byte a 
Statement [35] if(0!=*print_str::str#5) goto print_str::@2 [ print_str::str#5 screen_idx#22 screen_line#22 ] ( print_circle:4::print_str:14 [ c2 print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_line#61 = screen_line#68 } }  print_circle:11::print_str:14 [ print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 screen_line#68 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } }  print_circle:4::print_str:18 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:11::print_str:18 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:4::print_str:22 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:11::print_str:22 [ print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:4::print_str:26 [ c2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  print_circle:11::print_str:26 [ print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } }  ) always clobbers reg byte a reg byte y 
Statement [37] print_char::c#6 = *print_str::str#5 [ print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] ( print_circle:4::print_str:14 [ c2 print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_line#61 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:14 [ print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { screen_line#25 = screen_line#61 screen_line#68 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:18 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:18 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:22 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:22 [ print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:26 [ c2 print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:26 [ print_circle::c_color#2 print_str::str#5 screen_idx#22 screen_line#22 print_char::c#6 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  ) always clobbers reg byte a reg byte y 
Statement [42] print_uint::$1 = print_uint::$0 >> 4 [ screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] ( print_circle:4::print_uint:16 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:16 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:20 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:20 [ print_circle::c_center_y#2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:24 [ c2 print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:24 [ print_circle::c_color#2 screen_idx#22 screen_line#22 print_uint::i#3 print_uint::$1 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  ) always clobbers reg byte a 
Statement [50] print_uint::$7 = print_uint::$6 >> 4 [ screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] ( print_circle:4::print_uint:16 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20 [ print_circle::c_center_y#2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24 [ c2 print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24 [ print_circle::c_color#2 screen_line#24 screen_idx#25 print_uint::i#3 print_uint::$7 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  ) always clobbers reg byte a 
Statement [58] print_uchar::$0 = print_uchar::c#0 >> 4 [ print_uchar::c#0 screen_idx#22 screen_line#22 print_uchar::$0 ] ( print_circle:4::print_uchar:28 [ c2 print_uchar::c#0 screen_idx#22 screen_line#22 print_uchar::$0 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uchar:28 [ print_uchar::c#0 screen_idx#22 screen_line#22 print_uchar::$0 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  ) always clobbers reg byte a 
Statement [61] print_uchar::$2 = print_uchar::c#0 & $f [ screen_line#24 screen_idx#25 print_uchar::$2 ] ( print_circle:4::print_uchar:28 [ c2 screen_line#24 screen_idx#25 print_uchar::$2 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uchar:28 [ screen_line#24 screen_idx#25 print_uchar::$2 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  ) always clobbers reg byte a 
Statement [66] screen_line#53[screen_idx#54] = print_char::c#7 [ screen_line#53 screen_idx#54 ] ( print_circle:4::print_str:14::print_char:38 [ c2 print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_line#61 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:14::print_char:38 [ print_circle::c_radius#2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 screen_line#68 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:18::print_char:38 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:18::print_char:38 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:22::print_char:38 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:22::print_char:38 [ print_circle::c_center_y#2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_str:26::print_char:38 [ c2 print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_str:26::print_char:38 [ print_circle::c_color#2 print_str::str#5 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { screen_idx#25 = screen_idx#68 } { screen_line#24 = screen_line#68 } { print_char::c#6 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:44 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:44 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:44 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:44 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:44 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:44 [ print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#0 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:48 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:48 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:48 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:48 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:48 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:48 [ print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#1 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:52 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:52 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:52 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:52 [ print_circle::c_center_y#2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:52 [ c2 print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:52 [ print_circle::c_color#2 print_uint::i#3 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#2 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:16::print_char:56 [ c2 print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:16::print_char:56 [ print_circle::c_center_x#2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#0 = print_uint::i#3 print_circle::c_radius#2 print_circle::c_radius#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:20::print_char:56 [ c2 print_circle::c_center_y#2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:20::print_char:56 [ print_circle::c_center_y#2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#1 = print_uint::i#3 print_circle::c_center_x#2 print_circle::c_center_x#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uint:24::print_char:56 [ c2 print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_color#0 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#0 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uint:24::print_char:56 [ print_circle::c_color#2 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_color#1 = print_circle::c_color#2 } { print_uint::i#2 = print_uint::i#3 print_circle::c_center_y#2 print_circle::c_center_y#1 } { print_char::c#3 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:4::print_uchar:28::print_char:60 [ c2 print_uchar::c#0 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:11::print_uchar:28::print_char:60 [ print_uchar::c#0 screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#4 = print_char::c#7 } { screen_line#22 = screen_line#53 } { screen_idx#22 = screen_idx#54 } }  print_circle:4::print_uchar:28::print_char:63 [ c2 screen_line#53 screen_idx#54 ] { { print_circle::c_radius#0 = print_circle::c_radius#2 } { print_circle::c_center_x#0 = print_circle::c_center_x#2 } { print_circle::c_center_y#0 = print_circle::c_center_y#2 } { print_circle::c_color#0 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  print_circle:11::print_uchar:28::print_char:63 [ screen_line#53 screen_idx#54 ] { { screen_line#25 = screen_line#61 } { print_circle::c_radius#1 = print_circle::c_radius#2 } { print_circle::c_center_x#1 = print_circle::c_center_x#2 } { print_circle::c_center_y#1 = print_circle::c_center_y#2 } { print_circle::c_color#1 = print_circle::c_color#2 print_uchar::c#0 } { print_char::c#5 = print_char::c#7 } { screen_line#24 = screen_line#53 } { screen_idx#25 = screen_idx#54 } }  ) always clobbers reg byte y 
Potential registers zp[2]:21 [ print_circle::c_radius#2 print_circle::c_radius#0 print_circle::c_radius#1 ] : zp[2]:21 , 
Potential registers zp[2]:26 [ print_circle::c_center_x#2 print_circle::c_center_x#0 print_circle::c_center_x#1 ] : zp[2]:26 , 
Potential registers zp[2]:24 [ print_circle::c_center_y#2 print_circle::c_center_y#0 print_circle::c_center_y#1 ] : zp[2]:24 , 
Potential registers zp[1]:23 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ] : zp[1]:23 , reg byte x , 
Potential registers zp[2]:6 [ print_str::str#5 print_str::str#8 print_str::str#4 ] : zp[2]:6 , 
Potential registers zp[2]:2 [ screen_line#22 screen_line#68 screen_line#61 screen_line#25 screen_line#56 screen_line#24 screen_line#53 ] : zp[2]:2 , 
Potential registers zp[2]:18 [ print_uint::i#3 print_uint::i#0 print_uint::i#1 print_uint::i#2 ] : zp[2]:18 , 
Potential registers zp[1]:5 [ print_char::c#7 print_char::c#6 print_char::c#4 print_char::c#5 print_char::c#0 print_char::c#1 print_char::c#2 print_char::c#3 ] : zp[1]:5 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:4 [ screen_idx#54 screen_idx#22 screen_idx#68 screen_idx#25 screen_idx#23 ] : zp[1]:4 , reg byte x , 
Potential registers zp[1]:20 [ print_uchar::c#0 ] : zp[1]:20 , reg byte x , 
Potential registers zp[1]:8 [ print_uint::$0 ] : zp[1]:8 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:9 [ print_uint::$1 ] : zp[1]:9 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:10 [ print_uint::$3 ] : zp[1]:10 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:11 [ print_uint::$4 ] : zp[1]:11 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:12 [ print_uint::$6 ] : zp[1]:12 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:13 [ print_uint::$7 ] : zp[1]:13 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:14 [ print_uint::$9 ] : zp[1]:14 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:15 [ print_uint::$10 ] : zp[1]:15 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:16 [ print_uchar::$0 ] : zp[1]:16 , reg byte a , reg byte x , reg byte y , 
Potential registers zp[1]:17 [ print_uchar::$2 ] : zp[1]:17 , reg byte a , reg byte x , reg byte y , 
Potential registers mem[7] [ circle ] : mem[7] , 
Potential registers mem[7] [ c2 ] : mem[7] , 

REGISTER UPLIFT SCOPES
Uplift Scope [] 131,012.31: zp[2]:2 [ screen_line#22 screen_line#68 screen_line#61 screen_line#25 screen_line#56 screen_line#24 screen_line#53 ] 26,491.72: zp[1]:4 [ screen_idx#54 screen_idx#22 screen_idx#68 screen_idx#25 screen_idx#23 ] 0: mem[7] [ circle ] 0: mem[7] [ c2 ] 
Uplift Scope [print_char] 14,822: zp[1]:5 [ print_char::c#7 print_char::c#6 print_char::c#4 print_char::c#5 print_char::c#0 print_char::c#1 print_char::c#2 print_char::c#3 ] 
Uplift Scope [print_str] 3,129.25: zp[2]:6 [ print_str::str#5 print_str::str#8 print_str::str#4 ] 
Uplift Scope [print_uint] 202: zp[1]:8 [ print_uint::$0 ] 202: zp[1]:9 [ print_uint::$1 ] 202: zp[1]:10 [ print_uint::$3 ] 202: zp[1]:11 [ print_uint::$4 ] 202: zp[1]:12 [ print_uint::$6 ] 202: zp[1]:13 [ print_uint::$7 ] 202: zp[1]:14 [ print_uint::$9 ] 202: zp[1]:15 [ print_uint::$10 ] 99.62: zp[2]:18 [ print_uint::i#3 print_uint::i#0 print_uint::i#1 print_uint::i#2 ] 
Uplift Scope [print_uchar] 202: zp[1]:16 [ print_uchar::$0 ] 202: zp[1]:17 [ print_uchar::$2 ] 53.25: zp[1]:20 [ print_uchar::c#0 ] 
Uplift Scope [print_circle] 9.5: zp[2]:21 [ print_circle::c_radius#2 print_circle::c_radius#0 print_circle::c_radius#1 ] 9.07: zp[1]:23 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ] 5.5: zp[2]:24 [ print_circle::c_center_y#2 print_circle::c_center_y#0 print_circle::c_center_y#1 ] 5.17: zp[2]:26 [ print_circle::c_center_x#2 print_circle::c_center_x#0 print_circle::c_center_x#1 ] 
Uplift Scope [Circle] 
Uplift Scope [Circle::Color] 
Uplift Scope [Point] 
Uplift Scope [main] 
Uplift Scope [print_ln] 

Uplifting [] best 1042 combination zp[2]:2 [ screen_line#22 screen_line#68 screen_line#61 screen_line#25 screen_line#56 screen_line#24 screen_line#53 ] reg byte x [ screen_idx#54 screen_idx#22 screen_idx#68 screen_idx#25 screen_idx#23 ] mem[7] [ circle ] mem[7] [ c2 ] 
Uplifting [print_char] best 993 combination reg byte a [ print_char::c#7 print_char::c#6 print_char::c#4 print_char::c#5 print_char::c#0 print_char::c#1 print_char::c#2 print_char::c#3 ] 
Uplifting [print_str] best 993 combination zp[2]:6 [ print_str::str#5 print_str::str#8 print_str::str#4 ] 
Uplifting [print_uint] best 973 combination reg byte a [ print_uint::$0 ] reg byte a [ print_uint::$1 ] reg byte a [ print_uint::$3 ] reg byte a [ print_uint::$4 ] zp[1]:12 [ print_uint::$6 ] zp[1]:13 [ print_uint::$7 ] zp[1]:14 [ print_uint::$9 ] zp[1]:15 [ print_uint::$10 ] zp[2]:18 [ print_uint::i#3 print_uint::i#0 print_uint::i#1 print_uint::i#2 ] 
Limited combination testing to 100 combinations of 65536 possible.
Uplifting [print_uchar] best 965 combination reg byte a [ print_uchar::$0 ] reg byte a [ print_uchar::$2 ] zp[1]:20 [ print_uchar::c#0 ] 
Uplifting [print_circle] best 965 combination zp[2]:21 [ print_circle::c_radius#2 print_circle::c_radius#0 print_circle::c_radius#1 ] zp[1]:23 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ] zp[2]:24 [ print_circle::c_center_y#2 print_circle::c_center_y#0 print_circle::c_center_y#1 ] zp[2]:26 [ print_circle::c_center_x#2 print_circle::c_center_x#0 print_circle::c_center_x#1 ] 
Uplifting [Circle] best 965 combination 
Uplifting [Circle::Color] best 965 combination 
Uplifting [Point] best 965 combination 
Uplifting [main] best 965 combination 
Uplifting [print_ln] best 965 combination 
Attempting to uplift remaining variables inzp[1]:12 [ print_uint::$6 ]
Uplifting [print_uint] best 959 combination reg byte a [ print_uint::$6 ] 
Attempting to uplift remaining variables inzp[1]:13 [ print_uint::$7 ]
Uplifting [print_uint] best 955 combination reg byte a [ print_uint::$7 ] 
Attempting to uplift remaining variables inzp[1]:14 [ print_uint::$9 ]
Uplifting [print_uint] best 949 combination reg byte a [ print_uint::$9 ] 
Attempting to uplift remaining variables inzp[1]:15 [ print_uint::$10 ]
Uplifting [print_uint] best 945 combination reg byte a [ print_uint::$10 ] 
Attempting to uplift remaining variables inzp[1]:20 [ print_uchar::c#0 ]
Uplifting [print_uchar] best 945 combination zp[1]:20 [ print_uchar::c#0 ] 
Attempting to uplift remaining variables inzp[1]:23 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ]
Uplifting [print_circle] best 945 combination zp[1]:23 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ] 
Coalescing zero page register [ zp[2]:21 [ print_circle::c_radius#2 print_circle::c_radius#0 print_circle::c_radius#1 ] ] with [ zp[2]:18 [ print_uint::i#3 print_uint::i#0 print_uint::i#1 print_uint::i#2 ] ] - score: 1
Coalescing zero page register [ zp[1]:23 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 ] ] with [ zp[1]:20 [ print_uchar::c#0 ] ] - score: 1
Allocated (was zp[2]:6) zp[2]:4 [ print_str::str#5 print_str::str#8 print_str::str#4 ]
Allocated (was zp[2]:21) zp[2]:6 [ print_circle::c_radius#2 print_circle::c_radius#0 print_circle::c_radius#1 print_uint::i#3 print_uint::i#0 print_uint::i#1 print_uint::i#2 ]
Allocated (was zp[1]:23) zp[1]:8 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 print_uchar::c#0 ]
Allocated (was zp[2]:24) zp[2]:9 [ print_circle::c_center_y#2 print_circle::c_center_y#0 print_circle::c_center_y#1 ]
Allocated (was zp[2]:26) zp[2]:11 [ print_circle::c_center_x#2 print_circle::c_center_x#0 print_circle::c_center_x#1 ]

ASSEMBLER BEFORE OPTIMIZATION
  // File Comments
// Demonstrates nested struct/enum definitions.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-44.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const COL_WHITE = 1
  .const COL_RED = 2
  .const OFFSET_STRUCT_CIRCLE_CENTER = 2
  .const OFFSET_STRUCT_CIRCLE_COLOR = 6
  .const OFFSET_STRUCT_POINT_Y = 2
  .label screen_line = 2
.segment Code
  // main
main: {
    // [0] print_circle::c_radius#0 = *((unsigned int *)&circle) -- vwuz1=_deref_pwuc1 
    lda circle
    sta.z print_circle.c_radius
    lda circle+1
    sta.z print_circle.c_radius+1
    // [1] print_circle::c_center_x#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER) -- vwuz1=_deref_pwuc1 
    lda circle+OFFSET_STRUCT_CIRCLE_CENTER
    sta.z print_circle.c_center_x
    lda circle+OFFSET_STRUCT_CIRCLE_CENTER+1
    sta.z print_circle.c_center_x+1
    // [2] print_circle::c_center_y#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y) -- vwuz1=_deref_pwuc1 
    lda circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y
    sta.z print_circle.c_center_y
    lda circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y+1
    sta.z print_circle.c_center_y+1
    // [3] print_circle::c_color#0 = *((char *)&circle+OFFSET_STRUCT_CIRCLE_COLOR) -- vbuz1=_deref_pbuc1 
    lda circle+OFFSET_STRUCT_CIRCLE_COLOR
    sta.z print_circle.c_color
    // [4] call print_circle
    // [13] phi from main to print_circle [phi:main->print_circle]
  print_circle_from_main:
    // [13] phi print_circle::c_color#2 = print_circle::c_color#0 [phi:main->print_circle#0] -- register_copy 
    // [13] phi print_circle::c_center_y#2 = print_circle::c_center_y#0 [phi:main->print_circle#1] -- register_copy 
    // [13] phi print_circle::c_center_x#2 = print_circle::c_center_x#0 [phi:main->print_circle#2] -- register_copy 
    // [13] phi print_circle::c_radius#2 = print_circle::c_radius#0 [phi:main->print_circle#3] -- register_copy 
    // [13] phi screen_line#61 = (char *) 1024+(unsigned int)$28*$a [phi:main->print_circle#4] -- call_phi_near 
    lda #<$400+$28*$a
    sta.z screen_line
    lda #>$400+$28*$a
    sta.z screen_line+1
    jsr print_circle
    // [5] phi from main to main::@1 [phi:main->main::@1]
  __b1_from_main:
    jmp __b1
    // main::@1
  __b1:
    // [6] call print_ln
    // [30] phi from main::@1 to print_ln [phi:main::@1->print_ln]
  print_ln_from___b1:
    // [30] phi screen_line#56 = screen_line#24 [phi:main::@1->print_ln#0] -- call_phi_near 
    jsr print_ln
    jmp __b2
    // main::@2
  __b2:
    // [7] print_circle::c_radius#1 = *((unsigned int *)&c2) -- vwuz1=_deref_pwuc1 
    lda c2
    sta.z print_circle.c_radius
    lda c2+1
    sta.z print_circle.c_radius+1
    // [8] print_circle::c_center_x#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER) -- vwuz1=_deref_pwuc1 
    lda c2+OFFSET_STRUCT_CIRCLE_CENTER
    sta.z print_circle.c_center_x
    lda c2+OFFSET_STRUCT_CIRCLE_CENTER+1
    sta.z print_circle.c_center_x+1
    // [9] print_circle::c_center_y#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y) -- vwuz1=_deref_pwuc1 
    lda c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y
    sta.z print_circle.c_center_y
    lda c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y+1
    sta.z print_circle.c_center_y+1
    // [10] print_circle::c_color#1 = *((char *)&c2+OFFSET_STRUCT_CIRCLE_COLOR) -- vbuz1=_deref_pbuc1 
    lda c2+OFFSET_STRUCT_CIRCLE_COLOR
    sta.z print_circle.c_color
    // [11] call print_circle
    // [13] phi from main::@2 to print_circle [phi:main::@2->print_circle]
  print_circle_from___b2:
    // [13] phi print_circle::c_color#2 = print_circle::c_color#1 [phi:main::@2->print_circle#0] -- register_copy 
    // [13] phi print_circle::c_center_y#2 = print_circle::c_center_y#1 [phi:main::@2->print_circle#1] -- register_copy 
    // [13] phi print_circle::c_center_x#2 = print_circle::c_center_x#1 [phi:main::@2->print_circle#2] -- register_copy 
    // [13] phi print_circle::c_radius#2 = print_circle::c_radius#1 [phi:main::@2->print_circle#3] -- register_copy 
    // [13] phi screen_line#61 = screen_line#25 [phi:main::@2->print_circle#4] -- call_phi_near 
    jsr print_circle
    jmp __breturn
    // main::@return
  __breturn:
    // [12] return 
    rts
}
  // print_circle
// void print_circle(__zp(6) unsigned int c_radius, __zp($b) unsigned int c_center_x, __zp(9) unsigned int c_center_y, __zp(8) char c_color)
print_circle: {
    .label c_radius = 6
    .label c_center_x = $b
    .label c_center_y = 9
    .label c_color = 8
    // [14] call print_str
    // [33] phi from print_circle to print_str [phi:print_circle->print_str]
  print_str_from_print_circle:
    // [33] phi screen_line#68 = screen_line#61 [phi:print_circle->print_str#0] -- register_copy 
    // [33] phi screen_idx#68 = 0 [phi:print_circle->print_str#1] -- vbuxx=vbuc1 
    ldx #0
    // [33] phi print_str::str#8 = print_circle::str [phi:print_circle->print_str#2] -- call_phi_near 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    jmp __b1
    // print_circle::@1
  __b1:
    // [15] print_uint::i#0 = print_circle::c_radius#2
    // [16] call print_uint
    // [40] phi from print_circle::@1 to print_uint [phi:print_circle::@1->print_uint]
  print_uint_from___b1:
    // [40] phi print_uint::i#3 = print_uint::i#0 [phi:print_circle::@1->print_uint#0] -- call_phi_near 
    jsr print_uint
    // [17] phi from print_circle::@1 to print_circle::@2 [phi:print_circle::@1->print_circle::@2]
  __b2_from___b1:
    jmp __b2
    // print_circle::@2
  __b2:
    // [18] call print_str
    // [33] phi from print_circle::@2 to print_str [phi:print_circle::@2->print_str]
  print_str_from___b2:
    // [33] phi screen_line#68 = screen_line#24 [phi:print_circle::@2->print_str#0] -- register_copy 
    // [33] phi screen_idx#68 = screen_idx#25 [phi:print_circle::@2->print_str#1] -- register_copy 
    // [33] phi print_str::str#8 = print_circle::str1 [phi:print_circle::@2->print_str#2] -- call_phi_near 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    jmp __b3
    // print_circle::@3
  __b3:
    // [19] print_uint::i#1 = print_circle::c_center_x#2 -- vwuz1=vwuz2 
    lda.z c_center_x
    sta.z print_uint.i
    lda.z c_center_x+1
    sta.z print_uint.i+1
    // [20] call print_uint
    // [40] phi from print_circle::@3 to print_uint [phi:print_circle::@3->print_uint]
  print_uint_from___b3:
    // [40] phi print_uint::i#3 = print_uint::i#1 [phi:print_circle::@3->print_uint#0] -- call_phi_near 
    jsr print_uint
    // [21] phi from print_circle::@3 to print_circle::@4 [phi:print_circle::@3->print_circle::@4]
  __b4_from___b3:
    jmp __b4
    // print_circle::@4
  __b4:
    // [22] call print_str
    // [33] phi from print_circle::@4 to print_str [phi:print_circle::@4->print_str]
  print_str_from___b4:
    // [33] phi screen_line#68 = screen_line#24 [phi:print_circle::@4->print_str#0] -- register_copy 
    // [33] phi screen_idx#68 = screen_idx#25 [phi:print_circle::@4->print_str#1] -- register_copy 
    // [33] phi print_str::str#8 = print_circle::str2 [phi:print_circle::@4->print_str#2] -- call_phi_near 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    jmp __b5
    // print_circle::@5
  __b5:
    // [23] print_uint::i#2 = print_circle::c_center_y#2 -- vwuz1=vwuz2 
    lda.z c_center_y
    sta.z print_uint.i
    lda.z c_center_y+1
    sta.z print_uint.i+1
    // [24] call print_uint
    // [40] phi from print_circle::@5 to print_uint [phi:print_circle::@5->print_uint]
  print_uint_from___b5:
    // [40] phi print_uint::i#3 = print_uint::i#2 [phi:print_circle::@5->print_uint#0] -- call_phi_near 
    jsr print_uint
    // [25] phi from print_circle::@5 to print_circle::@6 [phi:print_circle::@5->print_circle::@6]
  __b6_from___b5:
    jmp __b6
    // print_circle::@6
  __b6:
    // [26] call print_str
    // [33] phi from print_circle::@6 to print_str [phi:print_circle::@6->print_str]
  print_str_from___b6:
    // [33] phi screen_line#68 = screen_line#24 [phi:print_circle::@6->print_str#0] -- register_copy 
    // [33] phi screen_idx#68 = screen_idx#25 [phi:print_circle::@6->print_str#1] -- register_copy 
    // [33] phi print_str::str#8 = print_circle::str3 [phi:print_circle::@6->print_str#2] -- call_phi_near 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    jmp __b7
    // print_circle::@7
  __b7:
    // [27] print_uchar::c#0 = print_circle::c_color#2
    // [28] call print_uchar -- call_phi_near 
    jsr print_uchar
    jmp __breturn
    // print_circle::@return
  __breturn:
    // [29] return 
    rts
  .segment Data
    str: .text "r:"
    .byte 0
    str1: .text " c:("
    .byte 0
    str2: .text ","
    .byte 0
    str3: .text ") "
    .byte 0
}
.segment Code
  // print_ln
print_ln: {
    // [31] screen_line#25 = screen_line#56 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen_line
    sta.z screen_line
    bcc !+
    inc.z screen_line+1
  !:
    jmp __breturn
    // print_ln::@return
  __breturn:
    // [32] return 
    rts
}
  // print_str
// void print_str(__zp(4) char *str)
print_str: {
    .label str = 4
    // [34] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
  __b1_from_print_str:
  __b1_from___b3:
    // [34] phi screen_line#22 = screen_line#68 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [34] phi screen_idx#22 = screen_idx#68 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    // [34] phi print_str::str#5 = print_str::str#8 [phi:print_str/print_str::@3->print_str::@1#2] -- register_copy 
    jmp __b1
    // print_str::@1
  __b1:
    // [35] if(0!=*print_str::str#5) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    jmp __breturn
    // print_str::@return
  __breturn:
    // [36] return 
    rts
    // print_str::@2
  __b2:
    // [37] print_char::c#6 = *print_str::str#5 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [38] call print_char
    // [65] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
  print_char_from___b2:
    // [65] phi screen_idx#54 = screen_idx#22 [phi:print_str::@2->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#22 [phi:print_str::@2->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#6 [phi:print_str::@2->print_char#2] -- call_phi_near 
    jsr print_char
    jmp __b3
    // print_str::@3
  __b3:
    // [39] print_str::str#4 = ++ print_str::str#5 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1_from___b3
}
  // print_uint
// void print_uint(__zp(6) unsigned int i)
print_uint: {
    .label i = 6
    // [41] print_uint::$0 = byte1  print_uint::i#3 -- vbuaa=_byte1_vwuz1 
    lda.z i+1
    // [42] print_uint::$1 = print_uint::$0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [43] print_char::c#0 = HEX[print_uint::$1] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [44] call print_char
    // [65] phi from print_uint to print_char [phi:print_uint->print_char]
  print_char_from_print_uint:
    // [65] phi screen_idx#54 = screen_idx#22 [phi:print_uint->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#22 [phi:print_uint->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#0 [phi:print_uint->print_char#2] -- call_phi_near 
    jsr print_char
    jmp __b1
    // print_uint::@1
  __b1:
    // [45] print_uint::$3 = byte1  print_uint::i#3 -- vbuaa=_byte1_vwuz1 
    lda.z i+1
    // [46] print_uint::$4 = print_uint::$3 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [47] print_char::c#1 = HEX[print_uint::$4] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [48] call print_char
    // [65] phi from print_uint::@1 to print_char [phi:print_uint::@1->print_char]
  print_char_from___b1:
    // [65] phi screen_idx#54 = screen_idx#25 [phi:print_uint::@1->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#24 [phi:print_uint::@1->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#1 [phi:print_uint::@1->print_char#2] -- call_phi_near 
    jsr print_char
    jmp __b2
    // print_uint::@2
  __b2:
    // [49] print_uint::$6 = byte0  print_uint::i#3 -- vbuaa=_byte0_vwuz1 
    lda.z i
    // [50] print_uint::$7 = print_uint::$6 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // [51] print_char::c#2 = HEX[print_uint::$7] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [52] call print_char
    // [65] phi from print_uint::@2 to print_char [phi:print_uint::@2->print_char]
  print_char_from___b2:
    // [65] phi screen_idx#54 = screen_idx#25 [phi:print_uint::@2->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#24 [phi:print_uint::@2->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#2 [phi:print_uint::@2->print_char#2] -- call_phi_near 
    jsr print_char
    jmp __b3
    // print_uint::@3
  __b3:
    // [53] print_uint::$9 = byte0  print_uint::i#3 -- vbuaa=_byte0_vwuz1 
    lda.z i
    // [54] print_uint::$10 = print_uint::$9 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // [55] print_char::c#3 = HEX[print_uint::$10] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [56] call print_char
    // [65] phi from print_uint::@3 to print_char [phi:print_uint::@3->print_char]
  print_char_from___b3:
    // [65] phi screen_idx#54 = screen_idx#25 [phi:print_uint::@3->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#24 [phi:print_uint::@3->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#3 [phi:print_uint::@3->print_char#2] -- call_phi_near 
    jsr print_char
    jmp __breturn
    // print_uint::@return
  __breturn:
    // [57] return 
    rts
}
  // print_uchar
// void print_uchar(__zp(8) char c)
print_uchar: {
    .label c = 8
    // [58] print_uchar::$0 = print_uchar::c#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z c
    lsr
    lsr
    lsr
    lsr
    // [59] print_char::c#4 = HEX[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [60] call print_char
    // [65] phi from print_uchar to print_char [phi:print_uchar->print_char]
  print_char_from_print_uchar:
    // [65] phi screen_idx#54 = screen_idx#22 [phi:print_uchar->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#22 [phi:print_uchar->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#4 [phi:print_uchar->print_char#2] -- call_phi_near 
    jsr print_char
    jmp __b1
    // print_uchar::@1
  __b1:
    // [61] print_uchar::$2 = print_uchar::c#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z c
    // [62] print_char::c#5 = HEX[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [63] call print_char
    // [65] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
  print_char_from___b1:
    // [65] phi screen_idx#54 = screen_idx#25 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#24 [phi:print_uchar::@1->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#5 [phi:print_uchar::@1->print_char#2] -- call_phi_near 
    jsr print_char
    jmp __breturn
    // print_uchar::@return
  __breturn:
    // [64] return 
    rts
}
  // print_char
// void print_char(__register(A) char c)
print_char: {
    // [66] screen_line#53[screen_idx#54] = print_char::c#7 -- pbuz1_derefidx_vbuxx=vbuaa 
    stx.z $ff
    ldy.z $ff
    sta (screen_line),y
    // [67] screen_idx#23 = ++ screen_idx#54 -- vbuxx=_inc_vbuxx 
    inx
    // [68] if(screen_idx#23!=$28) goto print_char::@return -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __breturn_from_print_char
    // [69] phi from print_char to print_char::@1 [phi:print_char->print_char::@1]
  __b1_from_print_char:
    jmp __b1
    // print_char::@1
  __b1:
    // [70] call print_ln
    // [30] phi from print_char::@1 to print_ln [phi:print_char::@1->print_ln]
  print_ln_from___b1:
    // [30] phi screen_line#56 = screen_line#53 [phi:print_char::@1->print_ln#0] -- call_phi_near 
    jsr print_ln
    // [71] phi from print_char::@1 to print_char::@return [phi:print_char::@1->print_char::@return]
  __breturn_from___b1:
    // [71] phi screen_line#24 = screen_line#25 [phi:print_char::@1->print_char::@return#0] -- register_copy 
    // [71] phi screen_idx#25 = 0 [phi:print_char::@1->print_char::@return#1] -- vbuxx=vbuc1 
    ldx #0
    jmp __breturn
    // [71] phi from print_char to print_char::@return [phi:print_char->print_char::@return]
  __breturn_from_print_char:
    // [71] phi screen_line#24 = screen_line#53 [phi:print_char->print_char::@return#0] -- register_copy 
    // [71] phi screen_idx#25 = screen_idx#23 [phi:print_char->print_char::@return#1] -- register_copy 
    jmp __breturn
    // print_char::@return
  __breturn:
    // [72] return 
    rts
}
  // File Data
.segment Data
  HEX: .text "0123456789abcdef"
  .byte 0
  circle: .word $64, $c8, $12c
  .byte COL_RED
  c2: .word $32, $96, $15e
  .byte COL_WHITE

ASSEMBLER OPTIMIZATIONS
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __b4
Removing instruction jmp __b5
Removing instruction jmp __b6
Removing instruction jmp __b7
Removing instruction jmp __breturn
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b3
Removing instruction jmp __b1
Removing instruction jmp __b2
Removing instruction jmp __b3
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Removing instruction jmp __b1
Removing instruction jmp __breturn
Succesful ASM optimization Pass5NextJumpElimination
Replacing label __b1_from___b3 with __b1
Replacing label __breturn_from_print_char with __breturn
Removing instruction __b1_from_main:
Removing instruction print_ln_from___b1:
Removing instruction print_uint_from___b1:
Removing instruction __b2_from___b1:
Removing instruction print_str_from___b2:
Removing instruction __b4_from___b3:
Removing instruction print_str_from___b4:
Removing instruction __b6_from___b5:
Removing instruction print_str_from___b6:
Removing instruction __b1_from_print_str:
Removing instruction __b1_from___b3:
Removing instruction __b1_from_print_char:
Removing instruction print_ln_from___b1:
Removing instruction __breturn_from_print_char:
Succesful ASM optimization Pass5RedundantLabelElimination
Removing instruction print_circle_from_main:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction print_circle_from___b2:
Removing instruction __breturn:
Removing instruction print_str_from_print_circle:
Removing instruction __b1:
Removing instruction __b2:
Removing instruction __b3:
Removing instruction print_uint_from___b3:
Removing instruction __b4:
Removing instruction __b5:
Removing instruction print_uint_from___b5:
Removing instruction __b6:
Removing instruction __b7:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction __breturn:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction print_char_from_print_uint:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __b2:
Removing instruction print_char_from___b2:
Removing instruction __b3:
Removing instruction print_char_from___b3:
Removing instruction __breturn:
Removing instruction print_char_from_print_uchar:
Removing instruction __b1:
Removing instruction print_char_from___b1:
Removing instruction __breturn:
Removing instruction __b1:
Removing instruction __breturn_from___b1:
Succesful ASM optimization Pass5UnusedLabelElimination
Replacing jump to rts with rts in jmp __breturn
Succesful ASM optimization Pass5DoubleJumpElimination

FINAL SYMBOL TABLE
__constant char COL_RED = 2
__constant char COL_WHITE = 1
__constant char HEX[] = "0123456789abcdef"
__constant char OFFSET_STRUCT_CIRCLE_CENTER = 2
__constant char OFFSET_STRUCT_CIRCLE_COLOR = 6
__constant char OFFSET_STRUCT_POINT_Y = 2
__loadstore struct Circle c2 = { radius: $32, center: { x: $96, y: $15e }, color: COL_WHITE } // mem[7]
__loadstore struct Circle circle = { radius: $64, center: { x: $c8, y: $12c }, color: COL_RED } // mem[7]
void main()
void print_char(char c)
char print_char::c
char print_char::c#0 // reg byte a 202.0
char print_char::c#1 // reg byte a 202.0
char print_char::c#2 // reg byte a 202.0
char print_char::c#3 // reg byte a 202.0
char print_char::c#4 // reg byte a 202.0
char print_char::c#5 // reg byte a 202.0
char print_char::c#6 // reg byte a 2002.0
char print_char::c#7 // reg byte a 11608.0
void print_circle(unsigned int c_radius , unsigned int c_center_x , unsigned int c_center_y , char c_color)
struct Circle print_circle::c
struct Point print_circle::c_center
unsigned int print_circle::c_center_x
unsigned int print_circle::c_center_x#0 // c_center_x zp[2]:11 1.3333333333333333
unsigned int print_circle::c_center_x#1 // c_center_x zp[2]:11 1.3333333333333333
unsigned int print_circle::c_center_x#2 // c_center_x zp[2]:11 2.5
unsigned int print_circle::c_center_y
unsigned int print_circle::c_center_y#0 // c_center_y zp[2]:9 2.0
unsigned int print_circle::c_center_y#1 // c_center_y zp[2]:9 2.0
unsigned int print_circle::c_center_y#2 // c_center_y zp[2]:9 1.5
char print_circle::c_color
char print_circle::c_color#0 // c_color zp[1]:8 4.0
char print_circle::c_color#1 // c_color zp[1]:8 4.0
char print_circle::c_color#2 // c_color zp[1]:8 1.0714285714285714
unsigned int print_circle::c_radius
unsigned int print_circle::c_radius#0 // c_radius zp[2]:6 1.0
unsigned int print_circle::c_radius#1 // c_radius zp[2]:6 1.0
unsigned int print_circle::c_radius#2 // c_radius zp[2]:6 7.5
__constant char print_circle::str[3] = "r:"
__constant char print_circle::str1[5] = " c:("
__constant char print_circle::str2[2] = ","
__constant char print_circle::str3[3] = ") "
void print_ln()
void print_str(char *str)
char *print_str::str
char *print_str::str#4 // str zp[2]:4 2002.0
char *print_str::str#5 // str zp[2]:4 1026.25
char *print_str::str#8 // str zp[2]:4 101.0
void print_uchar(char c)
char print_uchar::$0 // reg byte a 202.0
char print_uchar::$2 // reg byte a 202.0
char print_uchar::c
char print_uchar::c#0 // c zp[1]:8 53.25
void print_uint(unsigned int i)
char print_uint::$0 // reg byte a 202.0
char print_uint::$1 // reg byte a 202.0
char print_uint::$10 // reg byte a 202.0
char print_uint::$3 // reg byte a 202.0
char print_uint::$4 // reg byte a 202.0
char print_uint::$6 // reg byte a 202.0
char print_uint::$7 // reg byte a 202.0
char print_uint::$9 // reg byte a 202.0
unsigned int print_uint::i
unsigned int print_uint::i#0 // i zp[2]:6 22.0
unsigned int print_uint::i#1 // i zp[2]:6 22.0
unsigned int print_uint::i#2 // i zp[2]:6 22.0
unsigned int print_uint::i#3 // i zp[2]:6 33.61538461538461
char screen_idx
char screen_idx#22 // reg byte x 128.05555555555557
char screen_idx#23 // reg byte x 15001.5
char screen_idx#25 // reg byte x 423.66666666666663
char screen_idx#54 // reg byte x 10804.5
char screen_idx#68 // reg byte x 134.0
char *screen_line
char *screen_line#22 // screen_line zp[2]:2 128.05555555555557
char *screen_line#24 // screen_line zp[2]:2 649.7575757575758
char *screen_line#25 // screen_line zp[2]:2 13750.5
char *screen_line#53 // screen_line zp[2]:2 6321.999999999999
char *screen_line#56 // screen_line zp[2]:2 110004.0
char *screen_line#61 // screen_line zp[2]:2 13.0
char *screen_line#68 // screen_line zp[2]:2 145.0

zp[2]:6 [ print_circle::c_radius#2 print_circle::c_radius#0 print_circle::c_radius#1 print_uint::i#3 print_uint::i#0 print_uint::i#1 print_uint::i#2 ]
zp[2]:11 [ print_circle::c_center_x#2 print_circle::c_center_x#0 print_circle::c_center_x#1 ]
zp[2]:9 [ print_circle::c_center_y#2 print_circle::c_center_y#0 print_circle::c_center_y#1 ]
zp[1]:8 [ print_circle::c_color#2 print_circle::c_color#0 print_circle::c_color#1 print_uchar::c#0 ]
zp[2]:4 [ print_str::str#5 print_str::str#8 print_str::str#4 ]
zp[2]:2 [ screen_line#22 screen_line#68 screen_line#61 screen_line#25 screen_line#56 screen_line#24 screen_line#53 ]
reg byte a [ print_char::c#7 print_char::c#6 print_char::c#4 print_char::c#5 print_char::c#0 print_char::c#1 print_char::c#2 print_char::c#3 ]
reg byte x [ screen_idx#54 screen_idx#22 screen_idx#68 screen_idx#25 screen_idx#23 ]
reg byte a [ print_uint::$0 ]
reg byte a [ print_uint::$1 ]
reg byte a [ print_uint::$3 ]
reg byte a [ print_uint::$4 ]
reg byte a [ print_uint::$6 ]
reg byte a [ print_uint::$7 ]
reg byte a [ print_uint::$9 ]
reg byte a [ print_uint::$10 ]
reg byte a [ print_uchar::$0 ]
reg byte a [ print_uchar::$2 ]
mem[7] [ circle ]
mem[7] [ c2 ]


FINAL ASSEMBLER
Score: 807

  // File Comments
// Demonstrates nested struct/enum definitions.
  // Upstart
  // Commodore 64 PRG executable file
.file [name="struct-44.prg", type="prg", segments="Program"]
.segmentdef Program [segments="Basic, Code, Data"]
.segmentdef Basic [start=$0801]
.segmentdef Code [start=$80d]
.segmentdef Data [startAfter="Code"]
.segment Basic
:BasicUpstart(main)
  // Global Constants & labels
  .const COL_WHITE = 1
  .const COL_RED = 2
  .const OFFSET_STRUCT_CIRCLE_CENTER = 2
  .const OFFSET_STRUCT_CIRCLE_COLOR = 6
  .const OFFSET_STRUCT_POINT_Y = 2
  .label screen_line = 2
.segment Code
  // main
main: {
    // print_circle(circle)
    // [0] print_circle::c_radius#0 = *((unsigned int *)&circle) -- vwuz1=_deref_pwuc1 
    lda circle
    sta.z print_circle.c_radius
    lda circle+1
    sta.z print_circle.c_radius+1
    // [1] print_circle::c_center_x#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER) -- vwuz1=_deref_pwuc1 
    lda circle+OFFSET_STRUCT_CIRCLE_CENTER
    sta.z print_circle.c_center_x
    lda circle+OFFSET_STRUCT_CIRCLE_CENTER+1
    sta.z print_circle.c_center_x+1
    // [2] print_circle::c_center_y#0 = *((unsigned int *)(struct Point *)&circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y) -- vwuz1=_deref_pwuc1 
    lda circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y
    sta.z print_circle.c_center_y
    lda circle+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y+1
    sta.z print_circle.c_center_y+1
    // [3] print_circle::c_color#0 = *((char *)&circle+OFFSET_STRUCT_CIRCLE_COLOR) -- vbuz1=_deref_pbuc1 
    lda circle+OFFSET_STRUCT_CIRCLE_COLOR
    sta.z print_circle.c_color
    // [4] call print_circle
    // [13] phi from main to print_circle [phi:main->print_circle]
    // [13] phi print_circle::c_color#2 = print_circle::c_color#0 [phi:main->print_circle#0] -- register_copy 
    // [13] phi print_circle::c_center_y#2 = print_circle::c_center_y#0 [phi:main->print_circle#1] -- register_copy 
    // [13] phi print_circle::c_center_x#2 = print_circle::c_center_x#0 [phi:main->print_circle#2] -- register_copy 
    // [13] phi print_circle::c_radius#2 = print_circle::c_radius#0 [phi:main->print_circle#3] -- register_copy 
    // [13] phi screen_line#61 = (char *) 1024+(unsigned int)$28*$a [phi:main->print_circle#4] -- call_phi_near 
    lda #<$400+$28*$a
    sta.z screen_line
    lda #>$400+$28*$a
    sta.z screen_line+1
    jsr print_circle
    // [5] phi from main to main::@1 [phi:main->main::@1]
    // main::@1
    // print_ln()
    // [6] call print_ln
    // [30] phi from main::@1 to print_ln [phi:main::@1->print_ln]
    // [30] phi screen_line#56 = screen_line#24 [phi:main::@1->print_ln#0] -- call_phi_near 
    jsr print_ln
    // main::@2
    // print_circle(c2)
    // [7] print_circle::c_radius#1 = *((unsigned int *)&c2) -- vwuz1=_deref_pwuc1 
    lda c2
    sta.z print_circle.c_radius
    lda c2+1
    sta.z print_circle.c_radius+1
    // [8] print_circle::c_center_x#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER) -- vwuz1=_deref_pwuc1 
    lda c2+OFFSET_STRUCT_CIRCLE_CENTER
    sta.z print_circle.c_center_x
    lda c2+OFFSET_STRUCT_CIRCLE_CENTER+1
    sta.z print_circle.c_center_x+1
    // [9] print_circle::c_center_y#1 = *((unsigned int *)(struct Point *)&c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y) -- vwuz1=_deref_pwuc1 
    lda c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y
    sta.z print_circle.c_center_y
    lda c2+OFFSET_STRUCT_CIRCLE_CENTER+OFFSET_STRUCT_POINT_Y+1
    sta.z print_circle.c_center_y+1
    // [10] print_circle::c_color#1 = *((char *)&c2+OFFSET_STRUCT_CIRCLE_COLOR) -- vbuz1=_deref_pbuc1 
    lda c2+OFFSET_STRUCT_CIRCLE_COLOR
    sta.z print_circle.c_color
    // [11] call print_circle
    // [13] phi from main::@2 to print_circle [phi:main::@2->print_circle]
    // [13] phi print_circle::c_color#2 = print_circle::c_color#1 [phi:main::@2->print_circle#0] -- register_copy 
    // [13] phi print_circle::c_center_y#2 = print_circle::c_center_y#1 [phi:main::@2->print_circle#1] -- register_copy 
    // [13] phi print_circle::c_center_x#2 = print_circle::c_center_x#1 [phi:main::@2->print_circle#2] -- register_copy 
    // [13] phi print_circle::c_radius#2 = print_circle::c_radius#1 [phi:main::@2->print_circle#3] -- register_copy 
    // [13] phi screen_line#61 = screen_line#25 [phi:main::@2->print_circle#4] -- call_phi_near 
    jsr print_circle
    // main::@return
    // }
    // [12] return 
    rts
}
  // print_circle
// void print_circle(__zp(6) unsigned int c_radius, __zp($b) unsigned int c_center_x, __zp(9) unsigned int c_center_y, __zp(8) char c_color)
print_circle: {
    .label c_radius = 6
    .label c_center_x = $b
    .label c_center_y = 9
    .label c_color = 8
    // print_str("r:")
    // [14] call print_str
    // [33] phi from print_circle to print_str [phi:print_circle->print_str]
    // [33] phi screen_line#68 = screen_line#61 [phi:print_circle->print_str#0] -- register_copy 
    // [33] phi screen_idx#68 = 0 [phi:print_circle->print_str#1] -- vbuxx=vbuc1 
    ldx #0
    // [33] phi print_str::str#8 = print_circle::str [phi:print_circle->print_str#2] -- call_phi_near 
    lda #<str
    sta.z print_str.str
    lda #>str
    sta.z print_str.str+1
    jsr print_str
    // print_circle::@1
    // print_uint(c.radius)
    // [15] print_uint::i#0 = print_circle::c_radius#2
    // [16] call print_uint
    // [40] phi from print_circle::@1 to print_uint [phi:print_circle::@1->print_uint]
    // [40] phi print_uint::i#3 = print_uint::i#0 [phi:print_circle::@1->print_uint#0] -- call_phi_near 
    jsr print_uint
    // [17] phi from print_circle::@1 to print_circle::@2 [phi:print_circle::@1->print_circle::@2]
    // print_circle::@2
    // print_str(" c:(")
    // [18] call print_str
    // [33] phi from print_circle::@2 to print_str [phi:print_circle::@2->print_str]
    // [33] phi screen_line#68 = screen_line#24 [phi:print_circle::@2->print_str#0] -- register_copy 
    // [33] phi screen_idx#68 = screen_idx#25 [phi:print_circle::@2->print_str#1] -- register_copy 
    // [33] phi print_str::str#8 = print_circle::str1 [phi:print_circle::@2->print_str#2] -- call_phi_near 
    lda #<str1
    sta.z print_str.str
    lda #>str1
    sta.z print_str.str+1
    jsr print_str
    // print_circle::@3
    // print_uint(c.center.x)
    // [19] print_uint::i#1 = print_circle::c_center_x#2 -- vwuz1=vwuz2 
    lda.z c_center_x
    sta.z print_uint.i
    lda.z c_center_x+1
    sta.z print_uint.i+1
    // [20] call print_uint
    // [40] phi from print_circle::@3 to print_uint [phi:print_circle::@3->print_uint]
    // [40] phi print_uint::i#3 = print_uint::i#1 [phi:print_circle::@3->print_uint#0] -- call_phi_near 
    jsr print_uint
    // [21] phi from print_circle::@3 to print_circle::@4 [phi:print_circle::@3->print_circle::@4]
    // print_circle::@4
    // print_str(",")
    // [22] call print_str
    // [33] phi from print_circle::@4 to print_str [phi:print_circle::@4->print_str]
    // [33] phi screen_line#68 = screen_line#24 [phi:print_circle::@4->print_str#0] -- register_copy 
    // [33] phi screen_idx#68 = screen_idx#25 [phi:print_circle::@4->print_str#1] -- register_copy 
    // [33] phi print_str::str#8 = print_circle::str2 [phi:print_circle::@4->print_str#2] -- call_phi_near 
    lda #<str2
    sta.z print_str.str
    lda #>str2
    sta.z print_str.str+1
    jsr print_str
    // print_circle::@5
    // print_uint(c.center.y)
    // [23] print_uint::i#2 = print_circle::c_center_y#2 -- vwuz1=vwuz2 
    lda.z c_center_y
    sta.z print_uint.i
    lda.z c_center_y+1
    sta.z print_uint.i+1
    // [24] call print_uint
    // [40] phi from print_circle::@5 to print_uint [phi:print_circle::@5->print_uint]
    // [40] phi print_uint::i#3 = print_uint::i#2 [phi:print_circle::@5->print_uint#0] -- call_phi_near 
    jsr print_uint
    // [25] phi from print_circle::@5 to print_circle::@6 [phi:print_circle::@5->print_circle::@6]
    // print_circle::@6
    // print_str(") ")
    // [26] call print_str
    // [33] phi from print_circle::@6 to print_str [phi:print_circle::@6->print_str]
    // [33] phi screen_line#68 = screen_line#24 [phi:print_circle::@6->print_str#0] -- register_copy 
    // [33] phi screen_idx#68 = screen_idx#25 [phi:print_circle::@6->print_str#1] -- register_copy 
    // [33] phi print_str::str#8 = print_circle::str3 [phi:print_circle::@6->print_str#2] -- call_phi_near 
    lda #<str3
    sta.z print_str.str
    lda #>str3
    sta.z print_str.str+1
    jsr print_str
    // print_circle::@7
    // print_uchar(c.color)
    // [27] print_uchar::c#0 = print_circle::c_color#2
    // [28] call print_uchar -- call_phi_near 
    jsr print_uchar
    // print_circle::@return
    // }
    // [29] return 
    rts
  .segment Data
    str: .text "r:"
    .byte 0
    str1: .text " c:("
    .byte 0
    str2: .text ","
    .byte 0
    str3: .text ") "
    .byte 0
}
.segment Code
  // print_ln
print_ln: {
    // screen_line +=40
    // [31] screen_line#25 = screen_line#56 + $28 -- pbuz1=pbuz1_plus_vbuc1 
    lda #$28
    clc
    adc.z screen_line
    sta.z screen_line
    bcc !+
    inc.z screen_line+1
  !:
    // print_ln::@return
    // }
    // [32] return 
    rts
}
  // print_str
// void print_str(__zp(4) char *str)
print_str: {
    .label str = 4
    // [34] phi from print_str print_str::@3 to print_str::@1 [phi:print_str/print_str::@3->print_str::@1]
    // [34] phi screen_line#22 = screen_line#68 [phi:print_str/print_str::@3->print_str::@1#0] -- register_copy 
    // [34] phi screen_idx#22 = screen_idx#68 [phi:print_str/print_str::@3->print_str::@1#1] -- register_copy 
    // [34] phi print_str::str#5 = print_str::str#8 [phi:print_str/print_str::@3->print_str::@1#2] -- register_copy 
    // print_str::@1
  __b1:
    // while(*str)
    // [35] if(0!=*print_str::str#5) goto print_str::@2 -- 0_neq__deref_pbuz1_then_la1 
    ldy #0
    lda (str),y
    cmp #0
    bne __b2
    // print_str::@return
    // }
    // [36] return 
    rts
    // print_str::@2
  __b2:
    // print_char(*(str++))
    // [37] print_char::c#6 = *print_str::str#5 -- vbuaa=_deref_pbuz1 
    ldy #0
    lda (str),y
    // [38] call print_char
    // [65] phi from print_str::@2 to print_char [phi:print_str::@2->print_char]
    // [65] phi screen_idx#54 = screen_idx#22 [phi:print_str::@2->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#22 [phi:print_str::@2->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#6 [phi:print_str::@2->print_char#2] -- call_phi_near 
    jsr print_char
    // print_str::@3
    // print_char(*(str++));
    // [39] print_str::str#4 = ++ print_str::str#5 -- pbuz1=_inc_pbuz1 
    inc.z str
    bne !+
    inc.z str+1
  !:
    jmp __b1
}
  // print_uint
// void print_uint(__zp(6) unsigned int i)
print_uint: {
    .label i = 6
    // BYTE1(i)
    // [41] print_uint::$0 = byte1  print_uint::i#3 -- vbuaa=_byte1_vwuz1 
    lda.z i+1
    // BYTE1(i)>>4
    // [42] print_uint::$1 = print_uint::$0 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // print_char(HEX[BYTE1(i)>>4])
    // [43] print_char::c#0 = HEX[print_uint::$1] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [44] call print_char
    // [65] phi from print_uint to print_char [phi:print_uint->print_char]
    // [65] phi screen_idx#54 = screen_idx#22 [phi:print_uint->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#22 [phi:print_uint->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#0 [phi:print_uint->print_char#2] -- call_phi_near 
    jsr print_char
    // print_uint::@1
    // BYTE1(i)
    // [45] print_uint::$3 = byte1  print_uint::i#3 -- vbuaa=_byte1_vwuz1 
    lda.z i+1
    // BYTE1(i)&0x0f
    // [46] print_uint::$4 = print_uint::$3 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // print_char(HEX[BYTE1(i)&0x0f])
    // [47] print_char::c#1 = HEX[print_uint::$4] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [48] call print_char
    // [65] phi from print_uint::@1 to print_char [phi:print_uint::@1->print_char]
    // [65] phi screen_idx#54 = screen_idx#25 [phi:print_uint::@1->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#24 [phi:print_uint::@1->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#1 [phi:print_uint::@1->print_char#2] -- call_phi_near 
    jsr print_char
    // print_uint::@2
    // BYTE0(i)
    // [49] print_uint::$6 = byte0  print_uint::i#3 -- vbuaa=_byte0_vwuz1 
    lda.z i
    // BYTE0(i)>>4
    // [50] print_uint::$7 = print_uint::$6 >> 4 -- vbuaa=vbuaa_ror_4 
    lsr
    lsr
    lsr
    lsr
    // print_char(HEX[BYTE0(i)>>4])
    // [51] print_char::c#2 = HEX[print_uint::$7] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [52] call print_char
    // [65] phi from print_uint::@2 to print_char [phi:print_uint::@2->print_char]
    // [65] phi screen_idx#54 = screen_idx#25 [phi:print_uint::@2->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#24 [phi:print_uint::@2->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#2 [phi:print_uint::@2->print_char#2] -- call_phi_near 
    jsr print_char
    // print_uint::@3
    // BYTE0(i)
    // [53] print_uint::$9 = byte0  print_uint::i#3 -- vbuaa=_byte0_vwuz1 
    lda.z i
    // BYTE0(i)&0x0f
    // [54] print_uint::$10 = print_uint::$9 & $f -- vbuaa=vbuaa_band_vbuc1 
    and #$f
    // print_char(HEX[BYTE0(i)&0x0f])
    // [55] print_char::c#3 = HEX[print_uint::$10] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [56] call print_char
    // [65] phi from print_uint::@3 to print_char [phi:print_uint::@3->print_char]
    // [65] phi screen_idx#54 = screen_idx#25 [phi:print_uint::@3->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#24 [phi:print_uint::@3->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#3 [phi:print_uint::@3->print_char#2] -- call_phi_near 
    jsr print_char
    // print_uint::@return
    // }
    // [57] return 
    rts
}
  // print_uchar
// void print_uchar(__zp(8) char c)
print_uchar: {
    .label c = 8
    // c>>4
    // [58] print_uchar::$0 = print_uchar::c#0 >> 4 -- vbuaa=vbuz1_ror_4 
    lda.z c
    lsr
    lsr
    lsr
    lsr
    // print_char(HEX[c>>4])
    // [59] print_char::c#4 = HEX[print_uchar::$0] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [60] call print_char
    // [65] phi from print_uchar to print_char [phi:print_uchar->print_char]
    // [65] phi screen_idx#54 = screen_idx#22 [phi:print_uchar->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#22 [phi:print_uchar->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#4 [phi:print_uchar->print_char#2] -- call_phi_near 
    jsr print_char
    // print_uchar::@1
    // c&0x0f
    // [61] print_uchar::$2 = print_uchar::c#0 & $f -- vbuaa=vbuz1_band_vbuc1 
    lda #$f
    and.z c
    // print_char(HEX[c&0x0f])
    // [62] print_char::c#5 = HEX[print_uchar::$2] -- vbuaa=pbuc1_derefidx_vbuaa 
    tay
    lda HEX,y
    // [63] call print_char
    // [65] phi from print_uchar::@1 to print_char [phi:print_uchar::@1->print_char]
    // [65] phi screen_idx#54 = screen_idx#25 [phi:print_uchar::@1->print_char#0] -- register_copy 
    // [65] phi screen_line#53 = screen_line#24 [phi:print_uchar::@1->print_char#1] -- register_copy 
    // [65] phi print_char::c#7 = print_char::c#5 [phi:print_uchar::@1->print_char#2] -- call_phi_near 
    jsr print_char
    // print_uchar::@return
    // }
    // [64] return 
    rts
}
  // print_char
// void print_char(__register(A) char c)
print_char: {
    // screen_line[screen_idx++] = c
    // [66] screen_line#53[screen_idx#54] = print_char::c#7 -- pbuz1_derefidx_vbuxx=vbuaa 
    stx.z $ff
    ldy.z $ff
    sta (screen_line),y
    // screen_line[screen_idx++] = c;
    // [67] screen_idx#23 = ++ screen_idx#54 -- vbuxx=_inc_vbuxx 
    inx
    // if(screen_idx==40)
    // [68] if(screen_idx#23!=$28) goto print_char::@return -- vbuxx_neq_vbuc1_then_la1 
    cpx #$28
    bne __breturn
    // [69] phi from print_char to print_char::@1 [phi:print_char->print_char::@1]
    // print_char::@1
    // print_ln()
    // [70] call print_ln
    // [30] phi from print_char::@1 to print_ln [phi:print_char::@1->print_ln]
    // [30] phi screen_line#56 = screen_line#53 [phi:print_char::@1->print_ln#0] -- call_phi_near 
    jsr print_ln
    // [71] phi from print_char::@1 to print_char::@return [phi:print_char::@1->print_char::@return]
    // [71] phi screen_line#24 = screen_line#25 [phi:print_char::@1->print_char::@return#0] -- register_copy 
    // [71] phi screen_idx#25 = 0 [phi:print_char::@1->print_char::@return#1] -- vbuxx=vbuc1 
    ldx #0
    rts
    // [71] phi from print_char to print_char::@return [phi:print_char->print_char::@return]
    // [71] phi screen_line#24 = screen_line#53 [phi:print_char->print_char::@return#0] -- register_copy 
    // [71] phi screen_idx#25 = screen_idx#23 [phi:print_char->print_char::@return#1] -- register_copy 
    // print_char::@return
  __breturn:
    // }
    // [72] return 
    rts
}
  // File Data
.segment Data
  HEX: .text "0123456789abcdef"
  .byte 0
  circle: .word $64, $c8, $12c
  .byte COL_RED
  c2: .word $32, $96, $15e
  .byte COL_WHITE

